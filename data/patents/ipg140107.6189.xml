<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627313-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627313</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12400510</doc-number>
<date>20090309</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>GB</country>
<doc-number>0804259.0</doc-number>
<date>20080307</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>944</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>455</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718  1</main-classification>
<further-classification>709238</further-classification>
</classification-national>
<invention-title id="d2e71">Virtual machine liveness determination</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7639607</doc-number>
<kind>B2</kind>
<name>Fujii et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7657659</doc-number>
<kind>B1</kind>
<name>Lambeth et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0123050</doc-number>
<kind>A1</kind>
<name>Knop et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711147</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0267866</doc-number>
<kind>A1</kind>
<name>Carollo et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0182853</doc-number>
<kind>A1</kind>
<name>Lewites et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0153191</doc-number>
<kind>A1</kind>
<name>Rajsic et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2007/0058638</doc-number>
<kind>A1</kind>
<name>Guichard et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37039531</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0240102</doc-number>
<kind>A1</kind>
<name>Rajsic et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0244690</doc-number>
<kind>A1</kind>
<name>Kulkarni et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2009/0016331</doc-number>
<kind>A1</kind>
<name>Shah et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>GB</country>
<doc-number>2418326</doc-number>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>JP</country>
<doc-number>7325773</doc-number>
<kind>A</kind>
<date>19951200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>WO</country>
<doc-number>95/01023</doc-number>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>WO</country>
<doc-number>WO 99/44132</doc-number>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>WO</country>
<doc-number>02/19056</doc-number>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>WO</country>
<doc-number>2005/022807</doc-number>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>WO</country>
<doc-number>WO 2007/063132</doc-number>
<kind>A1</kind>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100077395</doc-number>
<kind>A1</kind>
<date>20100325</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Edwards</last-name>
<first-name>Aled</first-name>
<address>
<city>Charfield South</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Fischer</last-name>
<first-name>Anna</first-name>
<address>
<city>Bristol</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Goldsack</last-name>
<first-name>Patrick</first-name>
<address>
<city>Bristol</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Edwards</last-name>
<first-name>Aled</first-name>
<address>
<city>Charfield South</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Fischer</last-name>
<first-name>Anna</first-name>
<address>
<city>Bristol</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Goldsack</last-name>
<first-name>Patrick</first-name>
<address>
<city>Bristol</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chan</last-name>
<first-name>Eddie P</first-name>
<department>2183</department>
</primary-examiner>
<assistant-examiner>
<last-name>Partridge</last-name>
<first-name>William B</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A data center can share processing resources using virtual networks. A hosting program <b>9,10</b> hosts one or more virtual machines <b>11, 12</b>. The program has a virtual interface VIF <b>1 14</b>, to the virtual machines, a network interface <b>19</b> to enable communication between the virtual machines and other nodes of a network, and an infrastructure management interface <b>8</b>, invisible to the virtual machines. The program has an intercept function <b>7</b> implemented as a comparator, switch or router, arranged to intercept a status message from one of the virtual machines, or applications run by that virtual machine. The status indication is sent to a status buffer <b>5</b> and is made available to the infrastructure management interface without providing a network path between the management interface and the virtual machine. This can discriminate between VM failure and communication failure, and the invisibility maintains isolation and helps avoid vulnerability to denial of service attack.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="160.27mm" wi="134.28mm" file="US08627313-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="182.88mm" wi="154.94mm" file="US08627313-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="152.15mm" wi="135.89mm" file="US08627313-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="198.88mm" wi="123.02mm" file="US08627313-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="187.96mm" wi="193.55mm" file="US08627313-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="227.25mm" wi="181.95mm" file="US08627313-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="208.11mm" wi="163.15mm" file="US08627313-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CLAIM FOR PRIORITY</heading>
<p id="p-0002" num="0001">This application claims the benefit of priority under 35 U.S.C. &#xa7;119 to United Kingdom Patent Application No. 0804259.0, filed on Mar. 7, 2008, the disclosure of which is hereby incorporated by reference in its entirety.</p>
<heading id="h-0002" level="1">RELATED APPLICATIONS</heading>
<p id="p-0003" num="0002">This application relates to commonly assigned and copending U.S. patent application Ser. No. 12/400,526 entitled &#x201c;DISTRIBUTED NETWORK CONNECTION POLICY MANAGEMENT&#x201d; and U.S. patent application Ser. No. 12/400,491 entitled &#x201c;ROUTING ACROSS A VIRTUAL NETWORK&#x201d;, filed on even date herewith, and hereby incorporated by reference in their entirety.</p>
<heading id="h-0003" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0004" num="0003">The invention relates to programs for hosting virtual machines, and to corresponding networks, data centers, methods of providing services from a data center, and methods of using such services.</p>
<heading id="h-0004" level="1">BACKGROUND</heading>
<p id="p-0005" num="0004">In most physical information technology (IT) infrastructures IT infrastructure, resource utilization is very low: 15% is not an uncommon utilization for a server, 5% for a desktop. It is known to try to address this by sharing a physical machine between different users. Typically in a utility data center there may be hundreds of machines networked and shared by many enterprises. Each enterprise may be running many applications to serve their own customers. Known operating systems can be used to time share the physical processing resources of the machines between the different enterprises. Various ways are known to abstract or hide the underlying physical resources from the applications run by the enterprises. Overlay networks are known and make it easy to change the network configuration, abstracting devices from the configuration of the real network.</p>
<p id="p-0006" num="0005">Storage virtualisation is also known. There are many commercial storage virtualization products on the market from HP, IBM, EMC and others. These products are focused on managing the storage available to physical machines and increasing the utilization of storage.</p>
<p id="p-0007" num="0006">Virtual machine technology is a known mechanism to run operating system instances on one physical machine independently of other operating system instances. It is known to have a single physical hosting machine running two or more virtual machines connected by a virtual network on this machine.</p>
<p id="p-0008" num="0007">A virtual machine (VM) is a self-contained operating environment that emulates a hardware platform. It can run a &#x201c;guest&#x201d; operating system. A real operating system called a virtual machine manager (VMM) is run on the physical hardware platform. The VMM runs one or more VMs and can contain multiple virtual devices, one of which can be a virtual network interface card (VNIC). VMware is a known example of virtual machine technology, and can provide isolated environments for different operating system instances running on the same physical machine.</p>
<p id="p-0009" num="0008">An example of a virtual network interface is described in &#x201c;SoftUDC: A Software-Based Data Center for Utility Computing&#x201d;, Kallahalla et al, Computer, November 2004, p 38-46. Virtual machines access networking via a virtual network interface (VIF), which mimics an Ethernet device. A virtual machine manager (VMM) forwards outbound network packets to its physical network interface and dispatches incoming network packets to appropriate VIFs. The VMM encapsulates the packet and sends it to another VMM or a virtual router on the same VNET. The receiving VMM unwraps the packet and delivers it to the target VM.</p>
<p id="p-0010" num="0009">Network traffic from virtual machines is distributed to virtual interfaces via Ethernet bridging in a special virtual machine containing a kernel module. The kernel module uses the EtherIP protocol to encapsulate outbound Ethernet traffic destined for a VNET in an internet protocol (IP) packet and forwards the packet to the network. The kernel module decapsulates inbound EtherIP traffic to produce an Ethernet frame, which it delivers to VIFs on its VNET. An EtherIP header field stores a packet's VNET identification for transport across the network.</p>
<p id="p-0011" num="0010">If a VIF requires direct access to the physical network, the kernel module delivers its traffic to the network without encapsulation. Ethernet frames are encapsulated rather than IP traffic primarily because doing so allows virtual machines to use any network protocol transparently. In addition, handling the Ethernet frame is simpler than extracting an IP packet.</p>
<p id="p-0012" num="0011">The kernel module must direct encapsulated VNET traffic to a suitable IP address. This care-of address is based on the Ethernet frame and VNET destination media access control (MAC) address. If the MAC address is a broadcast or multicast address, the care-of address is the local VNET multicast address. If the MAC address is a unicast address, the care-of address is the real IP address of the machine hosting the addressed VIF.</p>
<p id="p-0013" num="0012">A Virtual Address Resolution Protocol (VARP) is used to discover VIF care-of addresses, which can change during virtual machine migration. Broadcasting a VARP reply for all VIFs maintains network connectivity by updating the VARP caches of any systems communicating with the virtual machine.</p>
<p id="p-0014" num="0013">In &#x201c;Towards Automated Provisioning of Secure Virtualized Networks&#x201d;, by Cabuk et al, November 2007, it is explained that a VMM can be hosted directly on the computer hardware (e.g., XEN) or within a host operating system (e.g., VMware). Today's virtual network implementations for VMMs are usually virtual switches or bridges that connect the virtual network cards of all VMs to the actual physical network card of the physical machine. All VMs can potentially see all traffic; hence, no isolation or other security guarantees can be given. While that level of security may be sufficient for individual and small enterprise purposes, it is certainly not sufficient for larger-scale, security-critical operations. This document proposes security-enhanced network virtualization, which (1) allows groups of related VMs running on separate physical machines to be connected together as though they were on their own separate network fabric, and (2) enforces cross-group security requirements such as isolation, confidentiality, integrity, and information flow control.</p>
<p id="p-0015" num="0014">Related VMs (e.g., VMs belonging to the same customer in a data center) distributed across several physical machines, are grouped into virtual enclave networks, so that each group of VMs has the same protection as if the VMs were hosted on a separate physical local area network (LAN). If some VMs in a group are co-hosted on the same hardware; it is not necessary to involve the physical network during information flow between two such VMs.</p>
<p id="p-0016" num="0015">A secure network virtualization framework helps realize the abstraction of Trusted Virtual Domains (TVDs) by guaranteeing reliable isolation and flow control between domain boundaries. The framework is based on existing and well-established network virtualization technologies such as Ethernet encapsulation, VLAN tagging, and virtual private networks (VPNs).</p>
<p id="p-0017" num="0016">In data centers having computing infrastructure shared by many enterprises, such customer VMs, typically should have no network visibility of the data-centre management system and ideally, neither should customer VMs be network visible to the management system. But for the data center operator unfortunately this makes it difficult to detect whether applications within customer VMs are still up and running as no bi-directional network path exists. This information would help enable the data center to alert the customers that their applications are no longer running and could help in making decisions about how much resource to allocate to such VMs and their applications.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0018" num="0017">Specific embodiments of the invention will now be described, by way of example, to show how they may be implemented, with reference to the accompanying figures, in which:</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> shows an embodiment showing virtual machines hosted by a hosting program according to an embodiment,</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> shows some principal steps in the operation of the embodiment of <figref idref="DRAWINGS">FIG. 1</figref>,</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> shows some principal steps according to the same or other embodiments,</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> shows a schematic view of an arrangement of multiple host machines coupled by a network for hosting applications to be used by a user, according to embodiments of the invention, and</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 5 to 7</figref> show arrangements of virtual machines to form virtual networks according to embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DESCRIPTION OF SPECIFIC EMBODIMENTS</heading>
<p id="p-0024" num="0023">Embodiments described below show how the claimed invention can be implemented in various forms such as hosting programs, methods of hosting, data centers having multiple hosting machines coupled by a network, and methods of using services provided by applications hosted by such data centers. Any additional features can be added to the features claimed, without departing from the scope of the claims. Some such additional features are set out in dependent claims, and some are shown in the embodiments of the invention described in more detail below. The methods of use aspects are useful to get direct infringement or inducing of direct infringement in cases where the system is largely located outside the jurisdiction, as is feasible with many such systems, yet the user is using the system and gaining the benefit, from within the jurisdiction. Some advantages are explained below, other advantages may be apparent to those skilled in the art, particularly over other prior art than that known to the inventors. Any of the additional features can be combined together, and combined with any of the aspects, as would be apparent to those skilled in the art. The embodiments are examples only, the scope is not limited by these examples, and many other examples can be conceived within the scope of the claims.</p>
<p id="p-0025" num="0024">Definitions:</p>
<p id="p-0026" num="0025">&#x201c;Status&#x201d; of an application is intended to encompass any information about the application, and can be provided by the application itself or by other entities monitoring the application such as the VM operating system which hosts the application. Examples of status can be current or historical information on memory consumption, processing consumption, durations of execution and many others.</p>
<p id="p-0027" num="0026">&#x201c;liveness&#x201d; can encompass any indication that the application is still running, including an indication that a new status message has been generated, for example by incrementing a counter when a status message is intercepted or buffered.</p>
<p id="p-0028" num="0027">Data center is intended to encompass one or more computing machines grouped together at a single location whether for use by a single organisation or for sharing by many customers of a service provider organisation.</p>
<p id="p-0029" num="0028">The term &#x201c;virtual&#x201d; usually means the opposite of real or physical, and is used where there is a level of indirection, or some mediation between a resource user and a physical resource.</p>
<p id="p-0030" num="0029">&#x201c;virtual entity&#x201d; can encompass for example a virtual machine, a group of virtual machines, a virtual storage element, a virtual interface card, a virtual look up table, and so on, usually implemented as software to emulate a corresponding physical entity.</p>
<p id="p-0031" num="0030">&#x201c;Virtual machine&#x201d; (VM) encompasses a system that emulates in software an entity such as a physical computer, or any processing entity, including entities for carrying out specific functions such as router firewall, gateway and so on, which can generate or make use of messages. Ideally, programs run by the virtual machine should have no way of determining whether they are running atop a virtual machine or a physical machine. Note, in current practice, sometimes programs are aware they're running in virtual machines so that they can optimize for it. A VM can have one or multiple virtual interfaces, for example in different segments of a segmented virtual network.</p>
<p id="p-0032" num="0031">&#x201c;Virtual machine manager&#x201d; encompasses any entity which hosts virtual entities such as virtual machines and can be implemented in the form of software such as an operating system for execution by hardware such as a physical host machine having a general purpose processor, or can be a system comprising such software and hardware, or can be dedicated firmware or hardware or any combination or hybrid of these for example. It is conceivable for some of the functions of the virtual machine manager to be implemented by a privileged virtual entity, hosted by an underlying hypervisor or virtual machine monitor.</p>
<p id="p-0033" num="0032">&#x201c;virtual machine monitor&#x201d; is a component used in some implementations of a virtual machine manager, for hosting of VMs and switching of packets to the appropriate VM, without higher level processing such as routing. It can be the lowest level component of the virtual machine manager, and is sometimes called a hypervisor.</p>
<p id="p-0034" num="0033">&#x201c;virtual network&#x201d; means a network of virtual entities each having their own address so that messages can be passed between them. It may be segmented with virtual gateways to couple different segments. There may be multiple virtual networks in a data center.</p>
<p id="p-0035" num="0034">&#x201c;Physical host machine&#x201d; can encompass any type of processing machine, an example is a server having processing, storage and networking functions. A host can have multiple physical network interfaces for example to provide redundancy or to provide more bandwidth.</p>
<p id="p-0036" num="0035">&#x201c;Message&#x201d; can encompass any sort of packet, cell, frame and so on in any format, with or without a header, of fixed or variable length, with an associated destination address which may be incorporated in the packet, cell or frame, or stored elsewhere.</p>
<p id="p-0037" num="0036">&#x201c;Intermediate destination address&#x201d; can mean a link layer address such as a MAC (media access control) address or other type of address, and can be intermediate in the sense of denoting any point in the virtual or physical network or in communication stacks, passed by the message before reaching the final destination of the message.</p>
<p id="p-0038" num="0037">&#x201c;Final destination address&#x201d; can mean a network layer address such as an IP address, or other address which is either the final destination of the message, or where the message leaves the physical network or virtual network for another network having another addressing scheme.</p>
<p id="p-0039" num="0038">&#x201c;farm&#x201d; means the set of virtual entities owned, operated or controlled by a customer. Each farm can be a virtual network, or there can be multiple farms in a virtual network. Each farm may have one or more subnets.</p>
<p id="p-0040" num="0039">Introduction to the Described Embodiments:</p>
<p id="p-0041" num="0040">The problem of detecting liveness is a particular issue in networks where there is no direct visibility between customer VMs and the infrastructure management system. It could be addressed by constructing a multi-hop network proxy path through bastion VMs connecting the customer farm to the management system in order to communicate with an application within a customer VM. However this is cumbersome - also it is not possible to discriminate between a VM liveness failure and a failure in the communication path between the proxies, in other words it would rely on multiple intervening links and so faults in these links could not be distinguished from absence of liveness. Another alternative would be to rely on the use of the virtualization technology (i.e., VMWARE or XEN) to provide information about the guest operating system (OS) running within. But the information VMWARE or XEN can provide is very generic &#x2014;i.e. whether the whole operating system is alive or not - no indication is provided regarding whether a specific application is still running.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIGS. 1 and 2</figref>, Embodiment of the Invention</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 1</figref> shows some principal features of a first embodiment. A hosting program <b>10</b> for execution on computing infrastructure, is arranged to host one or more virtual machines VM<b>1</b> <b>11</b>, other VM <b>12</b>. The program has a virtual interface VIF <b>1</b> <b>14</b> or other VIF <b>16</b>, to the virtual machines, a network interface <b>19</b> to enable communication between the virtual machines and other nodes of a network, and an infrastructure management interface <b>8</b>, invisible to the virtual machines. The program has an intercept function <b>7</b> which can be implemented as a comparator, switch or router for example, arranged to intercept a message from one of the virtual machines, the message indicating a status of that virtual machine or of an application being run by that virtual machine. This can be detected by looking in a header of the message for a predetermined destination address for the message, discriminated by a switch or router, or the status message can be detected by a comparator looking at some other part of the message. This part passes the status indication to a status buffer <b>5</b>. This can be located on the same physical host as the virtual machine, or in principle can be located elsewhere such as another VM on another host elsewhere in the network. There is a benefit to having it co hosted with its VM, in that lack of a new status message cannot then be attributed to a network failure or a failure of that other VM or host, and so is more likely to reflect a failure of the co-hosted VM or application. The program is also arranged to make available the buffered status indication to the infrastructure management interface. This is done without providing a network path between the management interface and the virtual machine so that the management interface remains invisible to the virtual machines. This is useful to maintain isolation so that malicious or accidental actions by a VM do not interfere with the infrastructure management and therefore interfere with other customers VMs.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 2</figref> shows some of the principal operational steps of an embodiment. At step <b>24</b>, VM <b>1</b> or the application generates a status message. At step <b>26</b>, the VM sends the status message via its VIF so that it reaches the hosting program. It can be sent to an address allocated to the status buffer, or some other address. At step <b>28</b> the host receives the status message, detects or recognises it as such, and directs it or copies it to the status buffer. At step <b>29</b>, the infrastructure management system requests the status information and the host program makes it available to the management system from the status buffer in a manner invisible to the VMs, and preferably using a path independent of paths used by the VMs so that overload of the network by the VMs will not affect the infrastructure management system.</p>
<p id="p-0045" num="0044">This has the benefit of being a less cumbersome way which can maintain invisibility requirements and can discriminate between VM failure and communication failure, since it does not need to rely on intervening links. Also it can determine more than OS liveness since it uses a message from the application itself.</p>
<p id="p-0046" num="0045">Any additional features can be added and some are described in more detail below and form the basis for dependent claims. The status can indicate liveness of the application.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 3</figref> Further Features of Embodiments</p>
<p id="p-0048" num="0047">The program can comprise an operating system, and the making available can involve a call to a kernel of the operating system. This is one way of decoupling the VMs from the management system. The operating system can have a named file system in which case the call can be a multipart filename call for example to read a particular file. Other arrangements can be envisaged. The program can be arranged to record a timestamp relating to a time the status was generated, which can be in the form of for example a time when the packet was intercepted or stored in the status buffer, or can be a time determined by the application for example. The timestamp can be passed to the infrastructure management interface. This can enable the management system to deduce time between successive status messages and hence infer whether the VM or the application is still alive. In principle the hosting program could be arranged to make this deduction.</p>
<p id="p-0049" num="0048">The status message can comprise a heartbeat indication, indicating liveness if sent within a time T. A heartbeat implies the status message under normal conditions is provided on a regular basis within a predetermined time so that the liveness of the application can be inferred if a new status message is intercepted within this predetermined time. The status indication can comprise additional information relating to infrastructure usage or forecast requirements of the application. This can provide more information which may be useful to the management system to improve efficiency of allocation of shared resources for example.</p>
<p id="p-0050" num="0049">The program can be arranged to send a trigger message to one of the virtual machines to prompt the sending of the status message. This can allow the timing of the status message to be determined by the host and thus avoid the need for the application to try to implement a timer. The trigger message can comprise any additional information. An example is information relating to infrastructure availability from the infrastructure management system. This can enable the application to take account of infrastructure issues, to improve performance or reliability for example.</p>
<p id="p-0051" num="0050">The program can be arranged to determine if the virtual machine is active by sending a message to prompt a response, detect any response to the message, and infer status information about the application according to the detection. It can for example generate the trigger message in the form of a dummy network layer request message, such as an ARP (Address resolution protocol) or internet control message protocol (ICMP) message or transmission control protocol (TCP) SYN which conventionally prompts a response, to the virtual machine, detect any response to the dummy network layer request message, and store an indication of liveness of the virtual machine in the status buffer according to the detection. This is one convenient way to get a response from the VM without needing to modify the VM.</p>
<p id="p-0052" num="0051">The virtual machines can be arranged to generate a status message relating to a given application when that application carries out a predetermined action, the status message indicating which application it relates to. This is one convenient way of deducing liveness of a particular application without needing to modify the application to generate the message directly.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 3</figref> shows some of the principal steps according to another embodiment. At step <b>200</b> the hosting program in the form of a Linux kernel for example sends a trigger message to the VM. The trigger message can optionally contain other data in an agreed format. This allows system information to be conveyed to the customer VM for example. The VM can be arranged to listen on a predetermined port for the trigger message at step <b>210</b>. The VM detects the status of the given application by detecting a predetermined frequently occurring action of the application for example. At step <b>230</b> the VM sends a status message to a predetermined network address indicating the given application is live and containing any other status information such as current or forecast % usage, which might help the infrastructure management system for example.</p>
<p id="p-0054" num="0053">At step <b>240</b>, the host operating system kernel intercepts the status message, by recognising the address or some other distinctive feature of the packet. This can be implemented within a Linux kernel module arranged to examine layer 2 or 3 network-level information in the packet to determine where the packet should be sent. When this code detects a packet being sent to a discriminated address/port the packet can be copied into the status buffer in the form of a kernel buffer, effectively using a first path to the buffer, for example using a network accessible path. The buffer can then be accessed by a second independent path when desired by the management subsystem through calls to the sysfs filesystem (ie by non-networking means as shown at steps <b>250</b> and <b>260</b>, to make it invisible to the VMs and thus not compromise the network visibility rules). This makes the buffer act like a two-port memory device. The hosting system or the infrastructure management interface can be arranged to limit the rate or bandwidth of this information flow so as to avoid the risk of disruption to the infrastructure management system by too great a flow, due to malicious or accidental overloading.</p>
<p id="p-0055" num="0054">A timestamp is maintained with the kernel buffer so the management system may discover when exactly the packet contained within was sent. If the application does not generate a heartbeat or any other status packet, then, in the VM, some VM code very &#x2018;close&#x2019; to the application of interest is modified to emit heartbeat packets to the discriminated address/port at regular intervals. It is this packet (and its corresponding timestamp) that is made available to the management system via the sysfs filesystem. In other words, VM connectivity status or VM activity representing application liveness information is transmitted by the VM over the usual networking means (VIF) (thus allowing something &#x2018;close&#x2019; to the application to report genuine application liveness) whilst allowing the liveness information to be received by the management system by non-networking means (the second path exemplified by the filesystem calls).</p>
<p id="p-0056" num="0055">The VM typically has an operating system for running many applications. The operating system typically has a kernel which is a privileged part having a higher priority and more access than other parts. It controls time slicing of processing resources to run a bundle of services and customer specific code such as applications. The VM can be arranged to run a monitoring application which monitors activity by a given application, such as its use of processing time and storage resources, and outputs a status indication to the hosting program. Such monitoring could be done alternatively or as well by a lower level service, or by code in the operating system kernel. In each case the monitoring can be autonomous or prompted by a trigger.</p>
<p id="p-0057" num="0056">In examples where there are many applications run by a particular VM, the monitoring application or service or kernel code could be arranged to multiplex the status or mere liveness indication into a single message to be sent out over the VIF to be intercepted by the hosting program. In another embodiment, the hosting program could intercept messages from many VMs and multiplex them into a single large status buffer. This buffer could have many slots, each updated separately for status indications for different applications, or different VMs for example. This could be read periodically by the infrastructure management system. Where there are large numbers of VMs or applications, it could be beneficial to reduce the number of status messages sent, or the number of read operations by the infrastructure management system in this way.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIGS. 4 to 7</figref>, Virtual Network Examples</p>
<p id="p-0059" num="0058">In some embodiments, the host can be arranged to examine message header information in messages from the virtual machines, to intercept the status messages. The header can have a predetermined link layer or network layer address for example or some other distinctive feature. Such features can be implemented within a Linux kernel module that provides secure virtual networking support to customer VMs. The virtual networking code examines packets as they are emitted from VMWARE or XEN VMs and examines layer 3 network-level information in the packet to determine where the packet should be sent.</p>
<p id="p-0060" num="0059">In some embodiments, as for example shown in <figref idref="DRAWINGS">FIG. 4</figref>, the hosting program is in the form of a virtual machine manager (VMM) <b>9</b> and has a physical network interface (<b>40</b>) to communicate with other entities over a physical communications network (<b>60</b>), to route messages to such other entities. A VIF <b>14</b> is coupled to VM<b>1</b> <b>11</b> which hosts the application <b>4</b>.</p>
<p id="p-0061" num="0060">The other entities can comprise other virtual machine managers (<b>80</b>), and the VMM can be arranged to determine which of the other virtual machine managers to route the message to. The physical hosts and network can make up a data center in a single location, or the physical network can include a wide area network and connect to hosts at different locations.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 4</figref> shows the VMM <b>9</b> in the form of software run by a physical host machine <b>50</b>. VM<b>2</b> <b>37</b> is shown hosted by another physical host machine <b>70</b>. Also shown are other destinations, gateways to external networks such as the internet and so on, 100, hosted on another physical machine <b>90</b>. This means that applications run by the VMs can provide services to users <b>800</b> over the internet <b>810</b> such as web based services of any type. Packets are sent to the application from the user, via the gateway and the network and the hosting program in the form of the VMM. Packets are sent back to the user from the application via the VMM, the network and the gateway.</p>
<p id="p-0063" num="0062">An infrastructure management system is responsible for allocating the physical resources for processing storage and network bandwidth between different customers. This system can be located anywhere in the network and can be centralised or distributed, following established practice. If the management system determines an application has lost liveness, or has some other unusual status, such as being overloaded, or appears to be repeating an endless loop, it could alert the customer operator responsible for providing that application. It is the customer operator who has control of the application and can initiate remedial action promptly, to restore service to users or to set up more instances of applications to relieve overloading, and so on.</p>
<p id="p-0064" num="0063">From the service user's point of view, they communicate with the application by sending and receiving packets, and if the application fails, they have no easy way of alerting the service provider. They are likely to desert that service provider and find other services, hence it is in the interests of the service provider to be alerted to application failures, and hence it may be valuable for a data center to be able to offer to its service provider customers a feature or service of monitoring and alerting application status. The sending of the status message can in many cases be triggered or prompted directly or indirectly by the activity of the application caused by the user using the service.</p>
<p id="p-0065" num="0064">Typically IP is used as the network layer protocol and so the applications send IP packets, and Ethernet is used as the underlying transport mechanism, though other protocols can be used as appropriate as would be apparent to those skilled in the art.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 5</figref> shows a schematic view having three layers. In a shared data center network there has to be a feasible way of guaranteeing that only machines in a known, good state can access a secure, trusted network, and that no other machines can interfere with the system. On top of this, different (potentially competing) parties owning VMs within the virtualized infrastructure need dedicated, isolated virtual network resources while running over this shared, underlying physical network. The embodiments described can provide a way to validate network policies automatically to provide assurance about a system's global state from a networking point of view&#x2014;which may be required to fulfil certain Service Level Agreements (SLAs).</p>
<p id="p-0067" num="0066">The three layers illustrated are a physical layer having a number of constraints, a virtual networking layer and a top layer of network policies. The first layer shows a physical network having a number of servers coupled by a network. The second layer shows a number of virtual machines hosted on each host, and coupled together on subnets to form a farm. The third level shows groups of virtual machines each isolated from other groups according to the policies.</p>
<p id="p-0068" num="0067">(1) On the physical network level the known 802.1X network access control standard can be used provided for example by HEWLETT PACKARD PROCURVE switches; additionally, known trusted computing technologies can ensure that all physical machines are in a known good state. A single, trusted VLAN can be provisioned on all infrastructure switches. Access to this VLAN is only granted after a successful authentication using 802.1X. Machines that wish to be part of this trusted infrastructure are provisioned with a cryptographic key for the 802.1X authentication. However, this key is &#x201c;sealed&#x201d; to a specific, trusted platform configuration (the Trusted Computing Base or TCB) through a secure provisioning process and protected by a Trusted Platform Module (TPM) on that machine. Sealing ensures that the TPM will only release this secret (the network authentication key) if the platform is running a valid, attested TCB, and only then will the host be granted access to the secure VLAN. Through this mechanism a secure, &#x201c;constrained world&#x201d; network can be provided in which all machines can be trusted. As an alternative to the 802.1X solution, an approach in which communication between trusted machines is encrypted (or at least authenticated) can be provided and therefore protected from interference from untrusted machines that are hosted within the same physical infrastructure. In this scenario a gatekeeper component can be provided to which new nodes have to authenticate and prove that they run an attested TCB (again using Trusted Computing technologies) before they are provisioned with the network authentication key, so that they can participate in the secure communication.</p>
<p id="p-0069" num="0068">(2) On top of this trusted infrastructure the secure network virtualization can be provided that is easy to manage and validate. Virtualisation based on layer 3 (network-level) information can provide the illusion of farms consisting of several subnets as shown for example in <figref idref="DRAWINGS">FIG. 6</figref>. For example the virtual IP address space is segmented by assigning IP addresses of the format 10.&#x3c;FARM&#x3e;.&#x3c;SUBNET&#x3e;.&#x3c;HOST&#x3e; to VMs. By default, VMs inside a subnet can communicate with each other without any restrictions, but communication between VMs of different subnets has to be explicitly allowed by the farm owner. Communication across two different farms is only permitted if both sides have mutually agreed on such a communication. At the core of the network is a notional gateway connecting all the subnets within a farm. The gateway mediates all inter-subnet communications within the farm and inter-farm communications across multiple farms. Its actual functionality is contained in the routers distributed amongst all the physical machines hosting VMs within the farm, as described in more detail in above referenced co pending applications.</p>
<p id="p-0070" num="0069">Where the underlying physical infrastructure is a fully switched network, distributed routers in VMMs can quickly discover the location of (virtual) IP addresses and pass packets directly to the destination machine without needing hops to virtual gateways. This can have a notable performance impact, especially for inter-farm communication. By operating on layer 3 network level information, the need for deploying and configuring routing entities (like routing VMs) can be avoided which is an important advantage in terms of manageability. Also, managing MAC addresses of many thousands of VMs is a significant burden for physical switches within virtualized infrastructures. By using address rewrite, no MAC addresses of VMs appear on the physical wire, which provides the illusion of virtual gateways and limits broadcast and multicast traffic.</p>
<p id="p-0071" num="0070">The connection policies between VMs and between farms can be set and modified by customers as set out in more detail in the above referenced co pending applications.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 6</figref> shows an arrangement of a segmented virtual network which can be created using the VMMs of the embodiments described above for example. The virtual machines are grouped into farms, typically each farm can be for a different customer, or for different departments of a given organisation for example. Each farm is further divided into segments called subnets. Each subnet is coupled to other subnets in the same farm by a virtual gateway. Farms <b>1</b>, <b>2</b> and <b>3</b> are shown, each having a virtual gateway with two subnets, though there can of course be many more subnets. Each virtual machine maintains the addresses of other virtual machines on its subnet, so that it can send messages to such other machines without restrictions or controls imposed by a virtual gateway. Optionally messages can be passed between farms by the virtual gateways. A fourth virtual gateway is shown not attached to a farm, which can be used for coupling to other destinations such as external networks.</p>
<p id="p-0073" num="0072">The arrangement or topology of the virtual network can be completely independent of the topology of an underlying physical network. The topology of the subnets in an individual farm can be customer determined. The VMM or VMMs can provide a transparent virtual network layer which means that virtual machines do not need to know anything about the underlying physical network infrastructure (as for example that there is a single physical machine, or in another example, that there are many physical machines coupled by a completely switched physical network). Additionally, it is possible to configure VM-specific network policies on top of the virtual infrastructure, as will be explained below in more detail.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 7</figref> shows an example of a number of virtual networks in the form of farms having a number of virtual machines hosted on a number of physical hosts, A, B and C in this case. As can be seen, farm <b>1</b> has virtual machines on hosts A, B and C, and farm <b>2</b> has virtual machines on hosts A and C. Of course other arrangements can be envisaged.</p>
<p id="p-0075" num="0074">Implementation:</p>
<p id="p-0076" num="0075">The applications run by the data centers can include any type of software including computer-aided design (CAD), database, web page server, and other types. The virtual machines can be implemented using any conventional programming language, including languages such as C, and compiled following established practice. The servers and network elements can be implemented using conventional hardware with conventional processors. The processing elements need not be identical, but should be able to communicate with each other, e.g. by exchange of messages.</p>
<p id="p-0077" num="0076">Other variations can be conceived within the scope of the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer readable non-transitory medium on which is stored a hosting program for execution by a processor on a computing infrastructure, wherein the hosting program is to host one or more virtual machines, the hosting program comprising:
<claim-text>a virtual interface to the one or more virtual machines;</claim-text>
<claim-text>a network interface to communicate between the one or more virtual machines and other nodes of a network; and</claim-text>
<claim-text>an infrastructure management interface that is invisible to the one or more virtual machines,</claim-text>
<claim-text>wherein the hosting program is to intercept a message from one of the one or more virtual machines, the message comprising a status indication of an application run by the virtual machine, and to buffer the status indication, wherein the hosting program is to further make available the buffered status indication to the infrastructure management interface without providing a network path between the infrastructure management interface and the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the status indication indicates liveness of the application.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program is to perform the buffering of the status indication on a same physical host as used by the hosting program.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program comprises an operating system, and the hosting program is to make available the buffered status indication in response to a call to a kernel of the operating system from the infrastructure management interface.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program is to record a timestamp relating to a time the status indication was generated, and to pass the timestamp to the infrastructure management interface.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the message under normal conditions is provided on a regular basis within a predetermined time so that the liveness of the application can be inferred if a new message is intercepted within the predetermined time.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the status indication comprises additional information relating to infrastructure usage or forecast requirements of the application.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program is to send a trigger message to one of the one or more virtual machines to prompt the virtual machine to send the message.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer readable non-transitory medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the trigger message comprises additional information from the infrastructure management interface.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program is to determine if the virtual machine is active by sending a message to prompt a response, detect any response to the message, and infer status information about the application according to the detection.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more virtual machines are to generate the message relating to a given application when the application performs a predetermined action, wherein the message indicates to which application the message relates.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer readable non-transitory medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the hosting program is to examine message header information in messages from the one or more virtual machines, and to further intercept the messages.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method of hosting one or more virtual machines, using a host machine including a network interface to communicate between the one or more virtual machines and other nodes of a network, and including an interface to an infrastructure management system that is invisible to the one or more virtual machines, the method comprising:
<claim-text>intercepting a message from one of the one or more virtual machines comprising a status indication of an application run by the virtual machine;</claim-text>
<claim-text>buffering the status indication; and</claim-text>
<claim-text>making available the buffered status indication to the infrastructure management interface without providing a network path between the infrastructure management interface and the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A data center including a number of hosting machines, coupled by a network, each of the hosting machines including a hosting program, the hosting program is to host one or more virtual machines, the hosting program comprising:
<claim-text>a virtual interface to the one or more virtual machines;</claim-text>
<claim-text>a network interface to enable communication between the one or more virtual machines and other nodes of the network; and</claim-text>
<claim-text>an infrastructure management interface that is invisible to the one or more virtual machines,</claim-text>
<claim-text>wherein the hosting program is to intercept a message from one of the virtual machines, the message comprising a status indication of an application run by the virtual machine, and to buffer the status indication, the hosting program is to further make available the buffered status indication to the infrastructure management interface without providing a network path between the infrastructure management interface and the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method of providing a service from a data center, the data center including a number of hosting machines coupled by a network, each of the hosting machines is to host one or more virtual machines, provide a virtual interface to the one or more virtual machines, a network interface to enable communication between the one or more virtual machines and other nodes of the network, and an infrastructure management interface that is invisible to the one or more virtual machines, the method comprising:
<claim-text>providing an application on one of the virtual machines to provide the service;</claim-text>
<claim-text>making the application accessible to users of the service; and</claim-text>
<claim-text>receiving a status indication of the application via the infrastructure management interface,</claim-text>
<claim-text>wherein the hosting machine is to intercept a message from the virtual machine on which the application is running, the message comprising a status indication of the application, and to buffer the status indication, the hosting machine is to further make available the buffered status indication to the infrastructure management interface without providing a network path between the infrastructure management interface and the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method of using a service offered by an application running on a virtual machine hosted in a data center, the data center including a number of hosting machines, coupled by a network, wherein each of the hosting machines is to host one or more virtual machines and provide a virtual interface to the one or more virtual machines, a network interface to enable communication between the one or more virtual machines and other nodes of the network, and an infrastructure management interface, invisible to the one or more virtual machines, the method comprising:
<claim-text>sending and receiving packets to and from the application at the data center and the virtual machine on which the application is running; and</claim-text>
<claim-text>sending a message comprising a status indication of the application,</claim-text>
<claim-text>wherein the hosting machine is to intercept the message, and buffer the status indication, and wherein the hosting machine is to further make available the buffered status indication to the infrastructure management interface without providing a network path between the infrastructure management interface and the virtual machine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method comprising:
<claim-text>hosting a virtual machine on a physical host machine, the host machine providing a network interface to enable communication between the virtual machine and other nodes of a network and having an interface to an infrastructure management system that is invisible to the virtual machine;</claim-text>
<claim-text>intercepting a message from the virtual machine;</claim-text>
<claim-text>buffering the intercepted message; and</claim-text>
<claim-text>making available the buffered intercepted message to the infrastructure management interface.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

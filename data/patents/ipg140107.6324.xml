<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627480-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627480</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11539198</doc-number>
<date>20061006</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>DE</country>
<doc-number>10 2005 048 029</doc-number>
<date>20051006</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1604</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>04</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 26</main-classification>
<further-classification>380 28</further-classification>
</classification-national>
<invention-title id="d2e71">Compiler and method for compiling</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4961225</doc-number>
<kind>A</kind>
<name>Hisano</name>
<date>19901000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 28</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4979832</doc-number>
<kind>A</kind>
<name>Ritter</name>
<date>19901200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 28</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6158048</doc-number>
<kind>A</kind>
<name>Lueh et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717118</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6199152</doc-number>
<kind>B1</kind>
<name>Kelly et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6301647</doc-number>
<kind>B1</kind>
<name>Green</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6351797</doc-number>
<kind>B1</kind>
<name>Beard et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6704925</doc-number>
<kind>B1</kind>
<name>Bugnion</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717138</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7219239</doc-number>
<kind>B1</kind>
<name>Njemanze et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7500115</doc-number>
<kind>B2</kind>
<name>Berke et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713300</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7555780</doc-number>
<kind>B2</kind>
<name>Tucker et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7996671</doc-number>
<kind>B2</kind>
<name>Chheda et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713164</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2002/0091734</doc-number>
<kind>A1</kind>
<name>Redlich et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707511</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2003/0191942</doc-number>
<kind>A1</kind>
<name>Sinha et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713181</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2004/0177243</doc-number>
<kind>A1</kind>
<name>Worley, Jr.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2005/0180563</doc-number>
<kind>A1</kind>
<name>Apostolopoulos et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 28</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>EP</country>
<doc-number>0858039</doc-number>
<kind>A2</kind>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>IBM; &#x201c;C for AIX Compiler Reference&#x201d;; May 2002 Edition.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Hennesy, J.L. et al.; Computer Organization and Design. 2nd edition. Morgan Kaufmann Publishers, Inc. 1998, pp. 552, 553.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>380 28</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20070133789</doc-number>
<kind>A1</kind>
<date>20070614</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Scheiblhofer</last-name>
<first-name>Dietmar</first-name>
<address>
<city>Kaindorf</city>
<country>AT</country>
</address>
</addressbook>
<residence>
<country>AT</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Klug</last-name>
<first-name>Franz</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Scheiblhofer</last-name>
<first-name>Dietmar</first-name>
<address>
<city>Kaindorf</city>
<country>AT</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Klug</last-name>
<first-name>Franz</first-name>
<address>
<city>Munich</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schiff Hardin LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Infineon Technologies AG</orgname>
<role>03</role>
<address>
<city>Neubiberg</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tabor</last-name>
<first-name>Amare F</first-name>
<department>2434</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A compiling device for generating a second program sequence from a first program sequence comprises a recognizer for recognizing a first subarea and a second subarea of the first program sequence, and a selector for selecting instructions from a set of instructions of the second program sequence formed to select only instructions of a first security category for mapping a functionality of the first subarea and to select instructions of the second security category for mapping a functionality of the second subarea. Additionally, the compiling device comprises a generator for generating the second program sequence from the instructions selected.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="154.09mm" wi="176.70mm" file="US08627480-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="251.63mm" wi="186.27mm" file="US08627480-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="218.27mm" wi="157.14mm" file="US08627480-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="82.55mm" wi="172.21mm" file="US08627480-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims priority from German Patent Application No. 10 2005 048 029.2, which was filed on Oct. 6, 2005, and is incorporated herein by reference in its entirety.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Field of the Application</p>
<p id="p-0004" num="0003">The application relates to a compiler and to a method for compiling as is in particular used for security-relevant fields.</p>
<p id="p-0005" num="0004">2. Description of Related Art</p>
<p id="p-0006" num="0005">It is possible by hardware errors or most different attack methods to interfere with the function of a processor. Attack methods of this kind may, for example, be realized using light or by probing. Plenty of protection mechanisms which are to prevent an attacker or error to cause an incorrect flow of programs are provided in software or hardware.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">Exemplary embodiments of the present application will be detailed subsequently referring to the appended drawings, in which:</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> shows a compiler according to an exemplary embodiment;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart of a method for compiling according to an exemplary embodiment;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIGS. 3</figref><i>a </i>and <b>3</b><i>b </i>are volume representations of sets of instructions according to exemplary embodiments; and</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a block circuit diagram of a processor according to an exemplary embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION</heading>
<p id="p-0012" num="0011">In accordance with a first aspect, the application provides a compiler for generating a second program sequence from a first program sequence, the first program sequence comprising a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least an indicator, comprising: recognizing means for recognizing the first subarea of the first program sequence and the second subarea by means of the at least one indicator; selecting means for selecting instructions from a set of instructions of the second program sequence to map a functionality of the first program sequence to the second program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, and the selecting means being formed to select only instructions of the first security category for mapping a functionality of the first subarea and to select instructions of the second security category or the first and second security categories for mapping a functionality of the second subarea; and generating means for generating the second program sequence from the instructions selected by the selecting means.</p>
<p id="p-0013" num="0012">In accordance with a second aspect, the application provides a method for generating a second program sequence from a first program sequence, comprising the steps of: providing the first program sequence, the first program sequence comprising a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least an indicator; recognizing the first subarea of the first program sequence and the second subarea by means of the at least one indicator; selecting instructions from a set of instructions of the second program sequence to map a functionality of the first program sequence to the second program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, wherein only instructions of the first security category are selected for mapping a functionality of the first subarea and instructions of the second security category or the first and second security categories are selected for mapping a functionality of the second subarea; and generating the second program sequence from the instructions selected by the selecting means.</p>
<p id="p-0014" num="0013">In accordance with a third aspect, the application provides a computer program having a program code for performing the method as mentioned above, when the computer program runs on a computer.</p>
<p id="p-0015" num="0014">The application is based on the finding that there are areas in a program which are more critical as to security than other areas. The security classification may take place from a security point of view and from a point of view of considering efficient performance of attacks to a program flow. Exemplarily, the first security level according to the application may be associated with an area of the first program sequence which necessitates high security requirements due to a critical functionality, and the second security level may be associated with a subarea which necessitates lower security requirements due to an uncritical functionality.</p>
<p id="p-0016" num="0015">The second program sequence may, for example, be a sequence of assembler instructions. From a security point of view, the instructions of the second program code, that is, for example, the assembler instructions, are not security-critical to the same extent. Although in principle any instruction may be interfered with anyhow, such as, for example, by spiking or radiation, an attacker will rather tackle deterministic attack scenarios as long as they can be performed efficiently, since this results in easy reproducibility. This is by far a more practical way for attacks seeking a certain result. Typically, deterministic attacks of this kind can be triggered in a well-controlled manner by light, such as, for example, local light. Primarily, regular structures, such as, for example, a register file RAM, are the target of a local attack. If two different jump instructions, such as, for example, a relative jump, like PC=PC+20, and an indirect jump, like PC=REGISTER, are considered, the following situation will arise. With a relative jump where the jump target is determined by the OP code, a successful deterministic attack, like by local light, is considerably less critical than in an indirect jump. This results from the fact that well-aimed manipulating a register by means of light is much easier than altering an OP code of an instruction. As far as the application is concerned, a relative jump instruction is exemplarily classified as an uncritical instruction of the first security category and an indirect jump as a critical instruction of the second security category.</p>
<p id="p-0017" num="0016">The application is thus based on the finding that it is of advantage to cluster both a program sequence and a set of instructions from a security point of view. Clustering of this kind may, for example, be performed by, on the one hand, classifying the program sequences into critical code and uncritical code and classifying, on the other hand, the instruction set into critical instructions and uncritical instructions:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0017">program sequence: critical code-uncritical code</li>
    <li id="ul0001-0002" num="0018">set of instructions: critical instruction-uncritical instruction</li>
</ul>
</p>
<p id="p-0018" num="0019">According to the application, the usage of critical instructions is limited to those code areas considered to be uncritical. Thus, it is for example prevented in a manner supported by tools that critical instructions are used in critical code areas, increasing general protection against attackers for this area. The approach used so far where there was no security differentiation between the instructions of a microcontroller is thus abandoned.</p>
<p id="p-0019" num="0020">The method allows a selective classification, controllable by the customer, of parts of the program code and the data. The measure will not represent absolute protection against attacks to program codes or individual instructions. However, by using uncritical instructions, the obstacle for an attack to a critical routine is increased. The limitation of the functionality enhances security against local attacks for a customer.</p>
<p id="p-0020" num="0021">Preferably, the method can be combined with other measures, such as, for example, EDC, to offer additional protection from global and deterministic attacks. Attacks of this kind may, for example, be provoked by spikes.</p>
<p id="p-0021" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> shows a compiler <b>100</b> according to an embodiment of the application. The compiler <b>100</b> comprises recognizing means <b>102</b>, selecting means <b>104</b> and generating means <b>106</b>. The compiler <b>100</b> is formed to receive a first program sequence <b>112</b> and to output a second program sequence <b>114</b>.</p>
<p id="p-0022" num="0023">The first program sequence <b>112</b> may be a high-level language program, such as, for example, a C program. The first program sequence <b>112</b> contains the description of a certain functionality. The second program sequence <b>114</b> may be a machine program executable by a processor. Exemplarily, the second program sequence <b>114</b> may represent an assembler program. The compiler <b>100</b> is formed to generate the second program sequence <b>114</b> from the first program sequence <b>112</b>. Thus, the first program sequence <b>112</b> is mapped to the second program sequence <b>114</b> such that the second program sequence <b>114</b> contains the same functionality described in the first program sequence <b>112</b>.</p>
<p id="p-0023" num="0024">According to the iapplication, the first program sequence <b>112</b> may be divided into subareas to which different security requirements are associated. Exemplarily, a first subarea of a first security level may be an encryption algorithm or decryption algorithm and a second subarea of a second security level may be a subarea defining a data reception routine, exemplarily from an UART. In this case, executing the encryption/decryption algorithm is more security-critical than executing the data reception routine. Correspondingly, the first subarea has a critical functionality having high security requirements and the second subarea has an uncritical functionality having lower security requirements. The first program sequence <b>112</b> may comprise indicators to identify the subareas and/or the security levels associated with the subareas. Exemplarily, a first indicator may be associated with the first security level and a second indicator may be associated with the second security level. The indicator may be a mark, such as, for example, in the form of a word, an instruction or an individual bit, which is exemplarily arranged at the beginning of a subarea and is evaluated by the compiler <b>100</b>. Alternatively, each individual instruction of a subarea of the first program sequence may be marked by a corresponding indicator, or else only one respective special subarea, such as, for example, the first subarea, is marked, but not another subarea. The first program sequence <b>112</b> may comprise a plurality of subareas which may be first subareas of a first security level, second subareas of a second security level or other subareas of other definable security levels.</p>
<p id="p-0024" num="0025">According to this embodiment, the first program sequence <b>112</b> is provided to both the recognizing means <b>102</b> and the selecting means <b>104</b>. The recognizing means <b>102</b> is formed to recognize the security levels of the respective subareas. This may take place by means of the indicators. According to this embodiment, the recognizing means <b>102</b> provides a selection signal to the selecting means <b>104</b> indicating to the selecting means whether a subarea received in the first program sequence <b>112</b> is a first subarea of the first security level or a second subarea of the second security level.</p>
<p id="p-0025" num="0026">The selecting means <b>104</b> is formed to select instructions from a set of instructions. The set of instructions thus is a set of instructions on which the second program sequence <b>114</b> is based. If the second program sequence <b>114</b> is a machine code which may run on a processor, the set of instructions will be the set of instructions of this processor. The instructions selected map the functionality of the first program sequence <b>112</b> to the second program sequence <b>114</b>.</p>
<p id="p-0026" num="0027">According to the application, the instructions of the set of instructions are classified into different security categories. According to this embodiment, the set of instructions comprises instructions of a first security category and instructions of a second security category. The instructions of the first security category may be secure instructions which are, for example, less susceptible to deterministic attacks than the instructions of the second security category. Depending on whether the subarea of the first program sequence <b>112</b> is a first subarea of the first security level or a second subarea of the second security level, the selecting means <b>104</b> will select either instructions of the first security category or instructions of the second security category. For mapping a functionality of the first subarea of the first security level, the selecting means <b>104</b> will, according to the application, select exclusively instructions of the first security category. For mapping a functionality of the second subarea of the second security level, either instructions of the second security category only or instructions of the first and second security categories may be selected.</p>
<p id="p-0027" num="0028">The instructions selected for mapping the first program sequence <b>112</b> are provided by the selecting means <b>104</b> to the generating means <b>106</b>. The generating means <b>106</b> is formed to generate the second program sequence <b>114</b> from the instructions selected. Exemplarily, the generating means <b>106</b> may be formed to output the selected instructions received in the received order as the second program sequence <b>114</b>. Alternatively, the selected instructions may be transformed by the generating means <b>106</b> to a format required for the second program sequence <b>114</b>.</p>
<p id="p-0028" num="0029">The compiler shown in <figref idref="DRAWINGS">FIG. 1</figref> is based on the application of classifying the instructions, such as, for example, the assembler instructions of a microcontroller, into different risk or security classes. The compiler <b>100</b> makes sure that only those instructions corresponding to the security level required are allowed for code areas to be protected especially. The code areas may, for example, be functional blocks or functions. The corresponding security levels may be established by a programmer of the first program sequence <b>112</b> or, alternatively, by software users. This is of advantage since the security levels may differ depending on the field in which the program sequences are applied.</p>
<p id="p-0029" num="0030">In addition, using the security levels allows implicit alteration of the performance of an element in a manner transparent for the customer by means of tool support to enhance the security standard. This allows implicit support of hardware features. If the hardware system on which the second program sequence <b>114</b> is executed includes a cache which can only be protected against local attacks insufficiently but supports a write through mechanism, using keywords or indicators may be used to implicitly trigger secure behavior for this module. In the case of a cache, this might be not to store critical data in the cache but to pass on and process the data directly to the CPU. This implicit protection by means of a keyword would, for example, result in special control of the cache by means of SFR (special function register) instructions. This, however, would be transparent for a user who is thus less dependent on the platform. This only entails a loss in performance and/or an increase in the overall energy consumption of the application when this data not arranged in the cache is accessed frequently.</p>
<p id="p-0030" num="0031">In the programming language C, the code area to be protected may be identified by a special keyword.
<ul id="ul0002" list-style="none">
    <li id="ul0002-0001" num="0032">Exemplarily, Void_secure ENCRYPT (char*data).</li>
</ul>
</p>
<p id="p-0031" num="0033">The keyword_secure ensures that, when compiling this function, only assembler instructions considered to be secure are used. It could also be conceivable for the assembler instructions to be classified into several security classes. This corresponds to finer a clustering of both the program sequence and the set of instructions. In this case a security level may for example be required for a certain function.
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0034">Exemplarily, Void_secure_level (3) ENCRYPT (char*data).</li>
</ul>
</p>
<p id="p-0032" num="0035">To allow support of special hardware functions, the compiler shown in <figref idref="DRAWINGS">FIG. 1</figref> may, for example, comprise an additional inserting device (not shown in the figures) formed to insert an additional instruction into the second program sequence when recognizing the first indicator. This additional instruction may allow enabling the special type of the function. This may, for example, be enabling or disabling temporary storage, like a cache. Expressed generally, the additional instruction in executing means suitable for executing the second program sequence may enable a secure mode ensuring execution of a subarea of the second program sequence corresponding to the subarea of the first program sequence to be protected from attacks as far as possible.</p>
<p id="p-0033" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> shows a flow chart illustrating individual method steps of a method for compiling. The first program sequence is provided in a first step <b>202</b>. The first program sequence may be the program sequence <b>112</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> comprising a first subarea to which a high security level is associated and a second subarea to which a lower security level is associated.</p>
<p id="p-0034" num="0037">In a second method step <b>204</b>, the subareas of the first program sequence are recognized. If a first subarea is recognized, selecting instructions of the first security category will take place in a third step <b>206</b> to represent a functionality of the first subarea. If, however, this is a second subarea, selecting instructions of the second security category or the first and second security categories will take place in a parallel third step <b>208</b> to realize the functionality of the second subarea.</p>
<p id="p-0035" num="0038">In a fourth step <b>210</b>, the second program sequence is generated from the instructions selected in steps <b>206</b>, <b>208</b>. The method shown in <figref idref="DRAWINGS">FIG. 2</figref> may, for example, be executed by the compiler <b>100</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0036" num="0039"><figref idref="DRAWINGS">FIGS. 3</figref><i>a </i>and <b>3</b><i>b </i>show embodiments of sets of instructions according to the application. According to the embodiment shown in <figref idref="DRAWINGS">FIG. 3</figref><i>a</i>, a set of instructions <b>300</b><i>a </i>comprises a first subset of instructions of the first security category <b>302</b><i>a </i>and a second subset of instructions of the second security categories <b>304</b><i>a</i>. The two subsets do not overlap. If possible, either an instruction of the first security category or an instruction of the security category may be associated with each functionality to be realized. If no instructions of the first security category can be associated with a functionality, this functionality can either not be realized by the compiler or an instruction of the second security category is resorted to. This, however, would be of disadvantage in that the security of the program to be executed would be reduced since a critical instruction of the second security category has to be used for a critical code area. Both instructions of the first security category and instructions of the second security category can be used to realize uncritical code areas. Preferably, that instruction ensuring the easiest realization, the fastest program flow or the smallest energy consumption will be selected to realize uncritical code areas.</p>
<p id="p-0037" num="0040">Alternatively, the set of instructions shown may be divided into further subsets. This allows finer grading of the security categories. In such a case, the first program sequence may comprise further subareas of further security levels identified by further indicators. Additionally, the recognizing means shown in <figref idref="DRAWINGS">FIG. 1</figref> may be formed to recognize the further subareas by means of further indicators and the selecting means may be formed to select instructions of the further security categories for mapping a functionality of the further subareas.</p>
<p id="p-0038" num="0041">According to the embodiment shown in <figref idref="DRAWINGS">FIG. 3</figref><i>b</i>, a set of instructions <b>300</b><i>b </i>comprises subsets of instructions of the first security category <b>302</b><i>b </i>and instructions of the second security category <b>304</b><i>b </i>overlapping in an overlap region <b>306</b>. Instructions for which there is no alternative instruction in the respective other security category are arranged in the overlap zone <b>306</b>. If the compiler resorts to such instructions in the overlap set <b>306</b>, this will be of disadvantage since such instructions may be critical instructions which should actually not be used for realizing critical code areas.</p>
<p id="p-0039" num="0042">Depending on the circumstances, the method for generating a second program sequence from a first program sequence may be implemented in either hardware or software. The implementation may be on a digital storage medium, in particular on a disc or CD having control signals which may be read out electronically which can cooperate with a programmable computer system such that the corresponding message will be executed. Generally, the application thus also is in a computer program product having a program code stored on a machine-readable carrier for performing the method when the computer program product runs on a computer. Put differently, the application may thus also be realized as a computer program having a program code for performing the method when the computer program runs on a computer.</p>
<p id="p-0040" num="0043">According to an embodiment, the compiling means <b>100</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> may be implemented directly in a processor. <figref idref="DRAWINGS">FIG. 4</figref> shows such a processor or microcontroller <b>400</b> having receiving means <b>402</b> in the compiling means <b>100</b> and calculating means <b>404</b>. The receiving means <b>402</b> is formed to receive the first program sequence <b>112</b> and provide it to the compiling means <b>100</b>. The compiling means <b>100</b> is formed to generate the second program sequence <b>114</b> from the first program sequence <b>112</b> and provide it to the calculating means <b>404</b>. The calculating means <b>404</b> is formed to execute the instructions of the second program sequence <b>114</b>. According to this embodiment, the set of instructions used by the selecting means of the compiling means <b>100</b> is a machine set of instructions on which the calculating means <b>404</b> is based.</p>
<p id="p-0041" num="0044">While this application has been described in terms of several preferred embodiments, there are alterations, permutations, and equivalents which fall within the scope of this application. It should also be noted that there are many alternative ways of implementing the methods and compositions of the application. It is therefore intended that the following appended claims be interpreted as including all such alterations, permutations, and equivalents as fall within the true spirit and scope of the application.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A compiler for generating a second computer program sequence being a machine program executable by a processor, from a first computer program sequence, the first computer program sequence comprising a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least one indicator, the compiler being configured to:
<claim-text>recognize the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator;</claim-text>
<claim-text>select instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, and wherein the functionality of the first computer program sequence is realizable by both only the instructions of the first security category as well as only the instructions of the second security category, and wherein the selector is formed to select only instructions of the first security category for mapping a functionality of the first subarea and to select only instructions of the second security category or instructions of the first and second security categories for mapping a functionality of the second subarea; and</claim-text>
<claim-text>generate the second computer program sequence from the instructions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first security level is associated with an area of the first computer program sequence requiring a high security requirement due to a critical functionality, the second security level is associated with a subarea of the first computer program sequence requiring less high a security requirement due to an uncritical functionality, and an instruction of the first security category being a secure instruction and an instruction of the second security category being an insecure instruction.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions of the first security category and the instructions of the second security category form subsets of the set of instructions not overlapping with each other.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions of the first security category and the instructions of the second security category form subsets of the set of instructions overlapping with each other.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions of the first security category are less susceptible to deterministic attacks than the instructions of the second security category.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions of the second security category execute register accesses.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, configured to insert an additional instruction into the second computer program sequence when recognizing the at least one indicator, which enables a secure mode in an executer suitable for executing the second computer program sequence.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The compiler according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising a temporary memory configured so that enabling the secure mode includes disabling the temporary memory.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The compiler according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the additional instruction describes a control register of the executer.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first computer program sequence corresponds to a high-level language computer program and a subarea of the first computer program sequence represents a function or a module of the high-level language computer program.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first subarea realizes a functionality of a decryption algorithm or an encryption algorithm, and wherein the second subarea realizes a functionality of a data reception routine.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions of the first and second security categories are assembler instructions.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first computer program sequence comprises another subarea of another security level identified by another indicator, and the compiler is configured to recognize
<claim-text>the other subarea of the first computer program sequence by means of the other indicator, and</claim-text>
<claim-text>wherein the set of instructions comprises other instructions of another security category, and the compiler is configured to select only instructions of the other security category for mapping a functionality of the other subarea.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method for generating a second computer program sequence being a machine program executable by a processor, from a first computer program sequence, comprising, performed by a processor comprising a hardware implementation:
<claim-text>providing the first computer program sequence which comprises a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least one indicator;</claim-text>
<claim-text>recognizing the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator;</claim-text>
<claim-text>selecting instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, and wherein the functionality of the first computer program sequence is realizable by both the instructions of the first security category as well as the instructions of the second security category, such that only instructions of the first security category are selected for mapping a functionality of the first subarea and instructions of the second security category or instructions of the first and second security categories are selected for mapping a functionality of the second subarea; and</claim-text>
<claim-text>generating the second computer program sequence from the instructions selected by the selector.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A non-transitory computer-readable storage medium having stored thereon a computer program comprising a computer program code for performing a method for generating a second computer program sequence being a machine program executable by a processor, from a first computer program sequence, including: providing the first computer program sequence, which comprises a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least one indicator; recognizing the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator; selecting instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, and wherein the functionality of the first computer program sequence is realizable by both only the instructions of the first security category as well as only the instructions of the second security category, such that only instructions of the first security category are selected configured to map a functionality of the first subarea and instructions of the second security category or instructions of the first and second security categories are selected configured to map a functionality of the second subarea; and generating the second computer program sequence from the instructions selected by the selector, when the computer program runs on a computer.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A processor configured to:
<claim-text>receive a first computer program sequence;</claim-text>
<claim-text>generate a second computer program sequence being a machine program executable by a processor, from a first computer program sequence, the first computer program sequence comprising a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least one indicator, comprising:</claim-text>
<claim-text>recognize the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator;</claim-text>
<claim-text>select instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, and wherein the functionality of the first computer program sequence is realizable by both only the instructions of the first security category as well as only the instructions of the second security category, wherein the selector is formed to select only instructions of the first security category for mapping a functionality of the first subarea and to select only instructions of the second security category or instructions of the first and second security categories for mapping a functionality of the second subarea;</claim-text>
<claim-text>generate the second computer program sequence from the instructions selected by the selector; and</claim-text>
<claim-text>execute the instructions of the second computer program sequence;</claim-text>
<claim-text>wherein the set of instructions comprises machine instructions executable by the processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A compiler configured to generate a second computer program sequence from a first computer program sequence, the first computer program sequence comprising a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least an indicator, configured to:
<claim-text>recognize the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator;</claim-text>
<claim-text>select instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, the functionality of the first computer program sequence being realizable by both only instructions of the first security category and only instructions of the second security category, wherein the selector is formed to select only instructions of the first security category for mapping a functionality of the first subarea and to select only instructions of the second security category or instructions of the first and second security categories for mapping a functionality of the second subarea; and</claim-text>
<claim-text>generate the second computer program sequence from the instructions selected by the selector,</claim-text>
<claim-text>wherein program counter relative jump instructions are assigned to the first security category and indirect jump instructions are assigned to the second security category, wherein the instructions of the first and second security category are non-overlapping sub-sets of the set of instructions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method for generating a second computer program sequence from a first computer program sequence, including, performed by a processor comprising a hardware implementation:
<claim-text>providing the first computer program sequence, which comprises a first subarea of a first security level and a second subarea of a second security level distinguishable from the first subarea by at least one indicator;</claim-text>
<claim-text>recognizing the first subarea of the first computer program sequence and the second subarea by means of the at least one indicator;</claim-text>
<claim-text>selecting instructions from a set of instructions of the second computer program sequence to map a functionality of the first computer program sequence to the second computer program sequence, the set of instructions comprising instructions of a first security category and instructions of a second security category, the functionality of the first computer program sequence being realizable by both only instructions of the first security category and only instructions of the second security category, and only instructions of the first security category being selected for mapping a functionality of the first subarea and instructions of the second security category or instructions of the first and second security categories being selected for mapping a functionality of the second subarea; and</claim-text>
<claim-text>generating the second computer program sequence from the instructions selected by the selector,</claim-text>
<claim-text>wherein program counter relative jump instructions are assigned to the first security category and indirect jump instructions are assigned to the second security category, wherein the instructions of the first and second security category are sub-sets of the set of instructions, with the program counter relative jump instructions and the indirect jump instructions not being within an overlap set of the instructions of the first and second category.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein program counter relative jump instructions are assigned to the first security category and indirect jump instructions are assigned to the second security category, wherein the instructions of the first and second security category are non-overlapping sub-sets of the set of instructions.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second computer program sequence is configured to be executed on a processor comprising a CPU and a cache memory configured to cache data, but also supporting a write-through mechanism according to which the caching of data by the cache memory is inhibited, and, wherein the compiler is configured to, upon recognition of the first subarea of the first computer program sequence, insert an additional instruction into the second computer program sequence which is configured to activate the write-through mechanism, or, upon recognition of the second subarea of the first computer program sequence, insert an additional instruction into the second computer program sequence which is configured to deactivate the write-through mechanism, so that in executing the first subarea, no data is cached by the cache memory, while data is cached by the cache memory in executing the second subarea.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the second computer program sequence is configured to be executed on a processor comprising a CPU and a cache memory configured to cache data, but also supporting a write-through mechanism according to which the caching of data by the cache memory is inhibited, and wherein the compiler is configured to, upon recognition of the first subarea of the first computer program sequence, insert an additional instruction into the second computer program sequence which is configured to activate the write-through mechanism, or, upon recognition of the second subarea of the first computer program sequence, insert an additional instruction into the second computer program sequence which is configured to deactivate the write-through mechanism, so that in executing the first subarea, no data is cached by the cache memory, while data is cached by the cache memory in executing the second subarea.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the indicator does not participate in defining the functionality of the first computer program sequence and is disjoint to the first and second subareas.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The compiler according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first computer program sequence is a non-executable code not being executable be the processor.</claim-text>
</claim>
</claims>
</us-patent-grant>

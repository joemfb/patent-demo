<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627228-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627228</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13305762</doc-number>
<date>20111129</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>34</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>048</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715798</main-classification>
<further-classification>715789</further-classification>
</classification-national>
<invention-title id="d2e53">Automatic sash configuration in a GUI environment</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5771042</doc-number>
<kind>A</kind>
<name>Santos-Gomez</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6195094</doc-number>
<kind>B1</kind>
<name>Celebiler</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715764</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6271838</doc-number>
<kind>B1</kind>
<name>Gentner et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715788</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0004680</doc-number>
<kind>A1</kind>
<name>Robarts et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0158189</doc-number>
<kind>A1</kind>
<name>Kim</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345173</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0144653</doc-number>
<kind>A1</kind>
<name>Ubillos</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715800</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0138767</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715769</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>27</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715789</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715798</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12471383</doc-number>
<date>20090524</date>
</document-id>
<parent-status>ABANDONED</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13305762</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120166980</doc-number>
<kind>A1</kind>
<date>20120628</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Yosef</last-name>
<first-name>Nadav Har'El</first-name>
<address>
<city>Misgav</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rabinovich</last-name>
<first-name>Yuri</first-name>
<address>
<city>Kiryat Yam</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Roitman</last-name>
<first-name>Haggai</first-name>
<address>
<city>Yoknea'm Elit</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Yosef</last-name>
<first-name>Nadav Har'El</first-name>
<address>
<city>Misgav</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Rabinovich</last-name>
<first-name>Yuri</first-name>
<address>
<city>Kiryat Yam</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Roitman</last-name>
<first-name>Haggai</first-name>
<address>
<city>Yoknea'm Elit</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Kligler</last-name>
<first-name>Daniel</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chow</last-name>
<first-name>Doon</first-name>
<department>2174</department>
</primary-examiner>
<assistant-examiner>
<last-name>Nguyen</last-name>
<first-name>Le</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A graphical user interface generation system offers a management module that displays GUI elements and a visual indicator in an editing window. The visual indicator is movable in the editing window, which has at least two panels and a divider between the panels. A configuration history of the divider including at least one prior location of the divider in the editing window is memorized. An optimization function is defined for determining a new configuration of the divider. The function is invoked responsively to the configuration history of the divider to determine the new configuration of the divider, and a current configuration of the divider is automatically reset on the display to the new configuration of the divider within the editing window.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="147.07mm" wi="202.86mm" file="US08627228-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="220.98mm" wi="153.33mm" orientation="landscape" file="US08627228-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="220.56mm" wi="151.64mm" orientation="landscape" file="US08627228-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.15mm" wi="153.92mm" orientation="landscape" file="US08627228-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="223.44mm" wi="143.85mm" file="US08627228-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="219.54mm" wi="161.97mm" orientation="landscape" file="US08627228-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates generally to the field of graphical user interface systems, and specifically to systems and methods for automatic resizing of window panels within a graphical user interface environment.</p>
<p id="p-0003" num="0002">In a graphical user interface (GUI) used to provide a workspace within an editing window, a sash (also known as a divider or separator) may offer a division between two panels residing within the editing window. The position of the sash defines a portion of the workspace that each of the panels is allotted by the GUI for display. The workspace within the editing window is defined by a border, which surrounds the workspace and may also include a title bar and a series of menu options for management of the appearance and the contents of the workspace. Each panel may be used for object creation and customization, such as when the workspace contains a GUI development editor.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0004" num="0003">An embodiment of the present invention provides a computer-implemented method for adjusting a computer display, which is carried out by presenting on a display of a computer a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window selectable GUI elements and a visual indicator, the visual indicator being movable in the editing window, the editing window having at least two panels and a divider between the panels. A configuration history of the divider including at least one prior location of the divider in the editing window is memorized. An optimization function is defined for determining a new configuration of the divider. The function is invoked responsively to the configuration history of the divider to determine the new configuration of the divider. A current configuration of the divider is automatically reset on the display to the new configuration of the divider within the editing window.</p>
<p id="p-0005" num="0004">In a disclosed embodiment, a computer-implemented method is provided for adjusting a computer display, which is carried out by presenting on a display of a computer a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window GUI elements that are selectable by use of a pointing device that generates a visual indicator on the editing window, the editing window having at least two panels and a divider between the panels. A configuration history of the divider including at least one prior location of the divider in the editing window is memorized. An optimization function is defined for determining a new configuration of the divider. The function is invoked responsively to the configuration history of the divider to determine the new configuration of the divider. A current configuration of the divider is automatically reset on the display to the new configuration of the divider within the editing window.</p>
<p id="p-0006" num="0005">Other embodiments of the invention provide computer software product and apparatus for carrying out the above-described method. Still other embodiments of the invention provide techniques for configuring a computer software product for carrying out the above-described method cooperatively with computer apparatus.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">For a better understanding of the present invention, reference is made to the detailed description of the invention, by way of example, which is to be read in conjunction with the following drawings, wherein like elements are given like reference numerals, and wherein:</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that schematically illustrates a system for automatically resizing window panels within a graphical user interface environment, in accordance with an embodiment of the present invention;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an embodiment of the present invention;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an embodiment of the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart that schematically illustrates a method for automatically resizing window panels within a graphical user interface environment, in accordance with an embodiment of the present invention; and</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an alternative embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading>
<heading id="h-0005" level="1">Overview</heading>
<p id="p-0013" num="0012">Embodiments of the present invention that are described hereinbelow provide improved methods, products and systems for automatically resizing window panels within a graphical user interface (GUI) environment. In an editing window provided by a GUI, for example when using a software development editor, it is desirable to provide a developer or operator with an environment for editing that typically includes more than one panel. (In the context of the patent application and claims, the term &#x201c;panel&#x201d; refers to a subsection of the editing window associated with specific GUI elements, which may be hidden when at least some of the subsection is invisible.) In the past, some editing windows required the operator to manually configure a divider between two panels to determine the portion of each panel visible in the GUI. (In the context of the patent application and claims, the term &#x201c;divider&#x201d; refers to any graphical element that divides between two panels that reside on the editing window provided by the GUI, and is also sometimes referred to herein as a sash.) As a result, the operator would spend time configuring the divider, typically using a pointing device that generates a visual indicator in the editing window, rather than focusing upon primary tasks such as selecting GUI elements. Often, a GUI element could not be selected or seen in entirety within one of the panels without additional manual configuration of the divider to enlarge one of the panels. Many tasks employing the editing window made it necessary for the operator to switch back and forth between the panels from time to time, thus burdening the operator with cumbersome and often distracting manual divider configuration tasks.</p>
<p id="p-0014" num="0013">In embodiments of the invention, a GUI management module memorizes a configuration history of the divider, storing prior locations of the divider in the editing window, typically in addition to storing historical data such as GUI element locations associated with the prior divider locations. The GUI management module defines an optimization function to determine a new configuration of the divider, wherein a change of the location of the pointing device may result in a corresponding change of the current divider configuration. That is to say, a focus event may occur in the editing window and may change the result obtained when invoking the optimization function. (In the context of the patent application and claims, the term &#x201c;focus event&#x201d; refers to any event that causes the GUI management module to change the focus of the editing window, and thus the location of the visual indicator generated by the pointing device.) In one example, a keyboard shortcut typed by the operator may select a different GUI element, thus changing a focus of the editing window, which is defined herein as a location in the editing window where GUI element selection is taking place, typically in proximity to the visual indicator. Subsequent to the focus event, invocation of the optimization function by the GUI management module may result in a determination that the optimum configuration of the divider has changed, requiring the divider to be moved within the editing window. In the new configuration of the divider, the operator is provided with a wider view of the panel in which the selected GUI element is displayed.</p>
<p id="p-0015" num="0014">The current location of the visual indicator is determined by the GUI management module. Various focus events may cause the GUI management module to change the current location of the visual indicator, which is movable in the editing window. Some exemplary focus events include movement of the pointing device in proximity to one or more of the GUI elements or a &#x201c;mouse click&#x201d; when the visual indicator overlaps the GUI element. Other examples of focus events instigated by the operator or induced automatically are described hereinbelow. The GUI element that is most proximate to the current location of the visual indicator is identified by the GUI management module.</p>
<p id="p-0016" num="0015">The GUI management module extracts prior locations of the divider from the configuration history of the divider for the identified GUI element. That is to say, a list of pairs of coordinates that identify historical divider locations associated with locations of the GUI element are selected for use in determining the optimum configuration of the divider for the current location of the visual indicator. The configuration history of the divider comprises recorded manipulations of the divider along with locations of the GUI elements after each manipulation. The manipulations of the divider, performed by the operator or automatically induced, are used by the GUI management module for the purpose of learning the ideal location of the divider, as described hereinbelow. The extracted prior locations of the GUI element are input by the GUI management module into the invoked optimization function, to identify the new configuration of the divider. The GUI management module automatically resets the configuration of the divider to the new configuration, thereby eliminating the need for the operator to configure the divider. Embodiments of the present invention thus provide the operator with an elegant, fluid editing experience.</p>
<heading id="h-0006" level="1">System Description</heading>
<p id="p-0017" num="0016">Reference is now made to <figref idref="DRAWINGS">FIG. 1</figref>, which is a block diagram that schematically illustrates a system <b>20</b> for automatically resizing window panels within a GUI environment, in accordance with an embodiment of the present invention. System <b>20</b> typically comprises a general-purpose computer <b>22</b>, which is programmed in software to carry out the functions that are described herein. Computer <b>22</b> comprises a processor <b>24</b>, a historical data store <b>26</b>, and a memory <b>28</b>, which holds data structures and information that are used in performing these functions. Historical data store <b>26</b> comprises any storage media known in the art, such as a direct access hard disk. GUI management module <b>30</b> is held in memory <b>28</b>. GUI management module <b>30</b> may be downloaded to computer <b>22</b> in electronic form, over a network, for example, or it may alternatively be provided on tangible media, such as optical, magnetic or electronic memory media. Further alternatively, at least some of the functions of computer <b>22</b> may be carried out by dedicated electronic logic circuits. Although the embodiment relates to one particular system for display adjustment, the principles of editing that are implemented in system <b>20</b> may similarly be applied, mutatis mutandis, in other types of GUI editing systems, using other techniques for automatic resizing of window panels within a graphical user interface environment.</p>
<p id="p-0018" num="0017">System <b>20</b> may be controlled by an operator <b>32</b> or may be operated automatically. Processor <b>24</b> operates a display <b>34</b>. By way of example, operator <b>32</b> is assumed to operate computer <b>22</b> using a keyboard <b>36</b> and/or a pointing device <b>38</b>, which provide operator inputs to computer <b>22</b>. It is understood, however, that operation of embodiments of the present invention is not limited to a particular method for inputting to computer <b>22</b>, that any other suitable system for providing such operator inputs may be used, and that all such systems are considered to be within the scope of embodiments of the present invention.</p>
<p id="p-0019" num="0018">System <b>20</b> includes one or more devices <b>40</b> for producing a software product on a computer-readable medium, for example a CD or DVD writer. Devices employing many other technologies are also suitable for use as devices <b>40</b>, for example, writers adapted to tapes, hard disc drives, RAM, ROM, flash memory devices, floppy drives, programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), and magneto-optical discs. In all of these technologies patterns or transitions in the physical state of the medium are formed therein. These patterns and sequences of transitions encode instructions or data, e.g., binary numbers that are acceptable to the processor. The nature of the state transitions varies with the particular medium, and includes changes in magnetic domains in magnetic media, formation of pits or bumps on an optical disk, etc. Once the transitions are established, the medium may be transferred to another computing device <b>42</b>, which is capable of reading the medium, recognizing the transitions, and decoding them to identify executable instructions or data.</p>
<p id="p-0020" num="0019">Reference is now made to <figref idref="DRAWINGS">FIG. 2</figref>, which is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an embodiment of the present invention. GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) offers GUI elements <b>44</b>, <b>46</b> for selection by operator <b>32</b> in an editing window <b>48</b> on display <b>34</b>. Editing window <b>48</b> comprises a divider <b>50</b> and two panels, an active panel <b>52</b> and an inactive panel <b>54</b>, wherein &#x201c;active&#x201d; denotes the panel currently in use. That is to say, active panel <b>52</b> is the panel displaying the current location of a visual indicator <b>56</b>. Once visual indicator <b>56</b> is moved from one panel to the other panel, e.g., by using pointing device <b>38</b>, the other panel becomes the active panel.</p>
<p id="p-0021" num="0020">Divider <b>50</b> is a graphical element that is used to separate between active panel <b>52</b> and inactive panel <b>54</b>, and may be &#x201c;dragged&#x201d; from one side of editing window <b>48</b> to the other, so as to reapportion the visible areas of each panel according to the changed location of divider <b>50</b>. That is to say, after divider <b>50</b> is dragged to enlarge the visible portion of active panel <b>52</b>, more of active panel <b>52</b> is displayed in editing window <b>48</b> on display <b>34</b>, while less of inactive panel <b>54</b> is visible. An example to further illustrate dragging divider <b>50</b> is provided hereinbelow in association with <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0022" num="0021">Operator <b>32</b> may choose to select GUI elements <b>44</b>, <b>46</b> and to drag divider <b>50</b> by using pointing device <b>38</b>, although other methods for selection of GUI elements <b>44</b>, <b>46</b> and for dragging divider <b>50</b> known to those who are skilled in the art may be used. As described hereinabove, moving visual indicator <b>56</b> in editing window <b>48</b> to select GUI elements <b>44</b>, <b>46</b>, to drag divider <b>50</b>, or for any other reason, changes the focus of the GUI. When the focus is changed, the focus event is considered to have occurred. GUI management module <b>30</b> may memorize the current configuration of divider <b>50</b> and the other GUI elements when the focus event occurs, and may store historical data in historical data store <b>26</b> (<figref idref="DRAWINGS">FIG. 1</figref>). An exemplary list of memorized historical data fields typically stored to provide the configuration history, including descriptive text, is given in Table 1.</p>
<p id="p-0023" num="0022">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Historical data fields and associated text</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>GUI element ID</entry>
<entry>A unique identifier that identifies</entry>
</row>
<row>
<entry/>
<entry/>
<entry>the GUI element ID</entry>
</row>
<row>
<entry/>
<entry>GUI element location</entry>
<entry>The coordinates of the GUI element</entry>
</row>
<row>
<entry/>
<entry/>
<entry>anchor, or reference point of the GUI</entry>
</row>
<row>
<entry/>
<entry/>
<entry>element</entry>
</row>
<row>
<entry/>
<entry>GUI element panel</entry>
<entry>An identifier that indicates the panel</entry>
</row>
<row>
<entry/>
<entry/>
<entry>the GUI element is currently associated</entry>
</row>
<row>
<entry/>
<entry/>
<entry>with</entry>
</row>
<row>
<entry/>
<entry>Divider location</entry>
<entry>The coordinates of the divider anchor,</entry>
</row>
<row>
<entry/>
<entry/>
<entry>or reference point of the divider</entry>
</row>
<row>
<entry/>
<entry>. . .</entry>
<entry>. . .</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0024" num="0023">Other historical data fields known to those who are skilled in the art may be used to delineate the configuration history of divider <b>50</b>.</p>
<p id="p-0025" num="0024">Reference is now made to <figref idref="DRAWINGS">FIG. 3</figref>, which is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an embodiment of the present invention. As mentioned hereinabove, divider <b>50</b> may be dragged by operator <b>32</b> changing the location of visual indicator <b>56</b> while divider <b>50</b> is selected, e.g., by moving pointing device <b>38</b> (<figref idref="DRAWINGS">FIG. 1</figref>), from a first location <b>58</b> in editing window <b>48</b> to a second location <b>60</b>. After divider <b>50</b> has been moved, in the example of <figref idref="DRAWINGS">FIG. 3</figref>, one of GUI elements <b>44</b>, <b>46</b>, may become an obscured GUI element <b>62</b>. Obscured GUI element <b>62</b> is partially visible in inactive panel <b>54</b>, while partially blotted out by divider <b>50</b> after having been dragged to second location <b>60</b>.</p>
<p id="p-0026" num="0025">After the focus event has occurred, GUI management module <b>30</b> may determine a current location of visual indicator <b>56</b> and, in the present example, identifies one of GUI elements <b>44</b>, <b>46</b> or obscured GUI element <b>62</b> as most proximate to the current location. By invoking the optimization function described hereinbelow, GUI management module <b>30</b> is able to use data extracted from historical data store <b>26</b> (<figref idref="DRAWINGS">FIG. 1</figref>) to determine a new configuration of divider <b>50</b>, and automatically resets divider <b>50</b> to the new configuration in editing window <b>48</b>.</p>
<heading id="h-0007" level="1">Automatic Divider Configuration</heading>
<p id="p-0027" num="0026">Reference is now made to <figref idref="DRAWINGS">FIG. 4</figref>, which is a flow chart that schematically illustrates a method for automatically resizing window panels within a graphical user interface environment, in accordance with an embodiment of the present invention. GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) causes processor <b>24</b> to present editing window <b>48</b> (<figref idref="DRAWINGS">FIG. 2</figref>) on display <b>34</b> to operator <b>32</b> and to perform the steps listed hereinbelow. GUI management module <b>30</b> provides operator <b>32</b> with editing window <b>48</b> for the selection of GUI elements <b>44</b>, <b>46</b>, in a user interface presenting step <b>64</b>.</p>
<p id="p-0028" num="0027">GUI management module <b>30</b> memorizes the configuration history of divider <b>50</b> (<figref idref="DRAWINGS">FIG. 2</figref>) in a configuration history memorization step <b>66</b>. The focus event described hereinabove, wherein the focus of the GUI in the editing window is changed, may initiate history memorization step <b>66</b>. Typically, operator <b>32</b> (<figref idref="DRAWINGS">FIG. 1</figref>) drags divider <b>50</b> when editing in order to adjust the panels to a preferred configuration when editing a particular GUI element. Storing the historical data in historical data store <b>26</b> enables the configuration of divider <b>50</b> to be automatically reset to the historical configuration when the configuration is determined to be optimal.</p>
<p id="p-0029" num="0028">An optimization function is defined by GUI management module <b>30</b> for determining a new configuration of divider <b>50</b> in a function definition step <b>68</b>. A simple function may be used, such as selecting the divider configuration that occurs with the most frequency in the historical data for the particular GUI element. Similarly, the most recent divider configuration for the particular GUI element may be deemed by the function to be optimal. Alternatively, the optimization function can be developed using known heuristic techniques. In one example, reinforcement learning may be provided by using an algorithm introduced in a document by Kaelbling et al., entitled &#x201c;Reinforcement Learning: A Survey&#x201d; (Journal of Artificial Intelligence Research 4, 1996). The Kaelbling et al. document describes a well known &#x201c;exploration vs. exploitation&#x201d; issue, wherein a learning agent needs to devote effort in each of two areas. In exploration, the learning agent performs trials and gathers data from the trial results in order to make better decisions, thus &#x201c;exploring.&#x201d; In the current example, with GUI management module <b>30</b> acting as the learning agent, future changes to the divider configuration may be used as exploration data. In exploitation, the learning agent applies what is already known from prior exploration, and makes the best possible decisions accordingly, thus &#x201c;exploiting.&#x201d; In the current example, the historical data can be used as the output of prior exploration.</p>
<p id="p-0030" num="0029">In yet another example, the optimization function can be developed using &#x201c;risk-based analysis&#x201d;, wherein GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) maintains a new historical data field in historical data store <b>26</b> to track the behavior of divider <b>50</b> (<figref idref="DRAWINGS">FIG. 2</figref>) in association with GUI elements <b>44</b>, <b>46</b>. The new historical data field contains a count of the number of times that divider <b>50</b> is moved, e.g., by operator <b>32</b>, from the location in the editing window where GUI element selection is taking place. In the present example, GUI management module <b>30</b> may use the data in the new historical data field to determine the divider configuration having a minimum risk. Risk is defined in the current example as the chance that divider <b>50</b> will need to be moved from the current location, associated with the particular GUI element. Risk is minimized by the divider configuration providing the lowest chance for operator <b>32</b> to move divider <b>50</b> after the configuration has been reset. Typically, a feasible solutions space of the optimization function must also satisfy a restriction that the divider configuration may not result in active panel <b>52</b> (<figref idref="DRAWINGS">FIG. 3</figref>) obscuring the particular GUI element. Thus, an optimal solution may be provided by the optimization function sorting potential configurations of divider <b>50</b> by their risk and outputting the divider configuration with the lowest risk that also satisfies the restriction.</p>
<p id="p-0031" num="0030">As described hereinabove, the focus event may result in the location of the visual indicator changing. In a location determining step <b>70</b>, GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) determines a current location of the visual indicator. Operator <b>32</b> may click a button on pointing device <b>38</b> when the visual indicator overlaps the particular GUI element. However, many other actions performed by operator <b>32</b> or automatically, may cause a focus event to occur, by making the current location of the visual indicator change. Some additional examples include devices such as graphics tablets and touch screen monitors, whereby movement with or through the device is mapped to locations on editing window <b>48</b> (<figref idref="DRAWINGS">FIG. 2</figref>). Similarly, systems that detect eye movement and focus, recognize voice commands, or identify laser pointer emplacement, may also be used to indicate locations on editing window <b>48</b> using eye motion, voice, and laser light detection components respectively. In these and other similar cases, the device or system causes the visual indicator to change location and thus the focus event to occur.</p>
<p id="p-0032" num="0031">In the current example, GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) uses the current location and identifies one of GUI elements <b>44</b>, <b>46</b> (<figref idref="DRAWINGS">FIG. 2</figref>) or obscured GUI element <b>62</b> (<figref idref="DRAWINGS">FIG. 3</figref>) as most proximate to the current location in a GUI element identification step <b>72</b>. The configuration history for the identified GUI element is extracted by GUI management module <b>30</b> from historical data store <b>26</b> in a configuration history extracting step <b>74</b>. GUI management module <b>30</b> determines the new configuration by invoking the optimization function in a function invoking step <b>76</b> and inputting the configuration history to obtain the new configuration. If the current configuration of divider <b>50</b> is different than the new configuration, GUI management module <b>30</b> automatically resets divider <b>50</b> to the new configuration in a divider configuration resetting step <b>78</b>.</p>
<p id="p-0033" num="0032">The method then terminates at a final step <b>80</b>.</p>
<heading id="h-0008" level="1">Alternative Embodiments</heading>
<p id="p-0034" num="0033">Reference is now made to <figref idref="DRAWINGS">FIG. 5</figref>, which is a schematic, pictorial illustration of a user interface screen for editing graphical user interface elements, in accordance with an alternative embodiment of the present invention. In some embodiments, GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) provides an ability to delineate relationships among GUI elements. In the present example, a parent GUI element <b>82</b> may have a relationship with a child GUI element <b>84</b>, and may be related visually in a different editing window <b>86</b> using a tree structure. The relationship between parent GUI element <b>82</b> and child GUI element <b>84</b> in addition to usage of the tree structure may allow the GUI management module <b>30</b> to infer a property, for example, from the parent to the child when invoking the optimization function to determine the new configuration. Additionally or alternatively, GUI management module <b>30</b> may provide the ability to delineate other relationships among GUI elements, or to display relationships among GUI elements using other visual structure types.</p>
<p id="p-0035" num="0034">In some embodiments, a set of conditions are checked by GUI management module <b>30</b> (<figref idref="DRAWINGS">FIG. 1</figref>) prior to resetting divider <b>50</b> to the new configuration. For example, one condition of the set of conditions may prevent automatic divider resetting unless a preconfigured time interval has passed since divider <b>50</b> has previously been dragged or has been automatically reset by GUI management module <b>30</b>. The above-mentioned condition may be appropriately designed in order to prevent GUI management module <b>30</b> from resetting the configuration of the divider too frequently, thus potentially disturbing operator <b>32</b>. In another example, a second condition of the set of conditions may prevent automatic divider resetting once a preconfigured maximum reset threshold, or total number of configuration resets has taken place. In yet another example, the previous two examples may be combined. A third condition of the set of conditions may merge the preconfigured maximum reset threshold and the preconfigured time interval so as to delineate a boundary for automatic divider resetting, whereby a maximum frequency is defined. In the present example, the third condition of the set of conditions may provide a limit of five automatic resets of divider <b>50</b> within a half-hour time interval.</p>
<p id="p-0036" num="0035">In the previous description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent to one skilled in the art, however, that the present invention may be practiced without these specific details. In other instances, well-known circuits, control logic, and the details of computer program instructions for conventional algorithms and processes have not been shown in detail in order not to obscure the present invention unnecessarily.</p>
<p id="p-0037" num="0036">As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.</p>
<p id="p-0038" num="0037">Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.</p>
<p id="p-0039" num="0038">Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on a user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0040" num="0039">Embodiments of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0041" num="0040">These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means, which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0042" num="0041">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions, which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0043" num="0042">It will be appreciated by persons skilled in the art that the present invention is not limited to what has been particularly shown and described hereinabove. Rather, the scope of the present invention includes both combinations and sub-combinations of the various features described hereinabove, as well as variations and modifications thereof that are not in the prior art, which would occur to persons skilled in the art upon reading the foregoing description.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for adjusting a computer display, comprising:
<claim-text>presenting on a display of a computer a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window selectable GUI elements and a visual indicator, the visual indicator being movable in the editing window, the editing window having at least two panels and a divider between the panels;</claim-text>
<claim-text>moving the divider to first locations of the divider in the editing window by actions of an operator;</claim-text>
<claim-text>moving the divider to second locations of the divider in the editing window automatically;</claim-text>
<claim-text>memorizing a configuration history of the divider comprising the first locations and the second locations of the divider in the editing window, wherein the first locations and the second locations occur with different frequencies;</claim-text>
<claim-text>defining an optimization function of the first locations and the second locations for determining a new location of the divider that is selected from the first locations and the second locations, wherein the optimization function minimizes a likelihood that the divider will need to be moved away from the new location;</claim-text>
<claim-text>determining that a focus event with respect to one of the GUI elements or one of the panels has occurred;</claim-text>
<claim-text>responsively to the focus event, invoking the optimization function responsively to the configuration history of the divider to determine the new location of the divider within the editing window; and</claim-text>
<claim-text>on the display automatically resetting the divider to the new location within the editing window.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein invoking the optimization function comprises:
<claim-text>determining a current location of the visual indicator;</claim-text>
<claim-text>identifying a most proximate one of the GUI elements to the current location; and</claim-text>
<claim-text>correlating the configuration history with the current location and the most proximate one of the GUI elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the focus event is selected from the group consisting of clicking a button on a pointing device, pressing a keyboard shortcut, and speaking a voice command.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein defining an optimization function comprises applying a learning algorithm to the configuration history.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>defining one or more conditions; and</claim-text>
<claim-text>automatically resetting the current configuration of the divider only if the one or more conditions are satisfied.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the one or more conditions comprise requiring a preconfigured time interval to expire before allowing the divider to be automatically reset.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer-implemented method for adjusting a computer display, comprising:
<claim-text>presenting on a display of a computer a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window GUI elements that are selectable by use of a pointing device which generates a visual indicator on the editing window, the editing window having at least two panels and a divider between the panels;</claim-text>
<claim-text>moving the divider to first locations of the divider in the editing window by actions of an operator;</claim-text>
<claim-text>moving the divider to second locations of the divider in the editing window automatically;</claim-text>
<claim-text>memorizing a configuration history of the divider comprising the first locations and the second locations of the divider in the editing window, wherein the first locations and the second locations occur with different frequencies;</claim-text>
<claim-text>defining an optimization function of the first locations and the second locations for determining a new location of the divider that is selected from the first locations and the second locations, wherein the optimization function minimizes a likelihood that the divider will need to be moved away from the new location;</claim-text>
<claim-text>determining that a focus event with respect to one of the GUI elements or one of the panels has occurred;</claim-text>
<claim-text>responsively to the focus event, invoking the optimization function responsively to the configuration history of the divider to determine the new location of the divider within the editing window; and</claim-text>
<claim-text>on the display automatically resetting the divider to the new location within the editing window.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein invoking the optimization function comprises:
<claim-text>determining a current location of the visual indicator;</claim-text>
<claim-text>identifying a most proximate one of the GUI elements to the current location; and</claim-text>
<claim-text>correlating the configuration history with the current location and the most proximate one of the GUI elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining a current location comprises changing a focus of the editing window by instigating a focus event wherein the focus event is selected from the group consisting of clicking a button on the pointing device, pressing a keyboard shortcut, and speaking a voice command.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein defining an optimization function comprises applying a learning algorithm to the configuration history.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>defining one or more conditions; and</claim-text>
<claim-text>automatically resetting the current configuration of the divider only if the one or more conditions are satisfied.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more conditions comprise requiring a preconfigured time interval to expire before allowing the divider to be automatically reset.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer software product for adjusting a computer display, comprising a non-transitory computer storage medium in which computer program instructions are stored, wherein the instructions comprise distinct modules that include a graphical user interface (GUI) management module, which instructions, when executed by a computer, cause the computer to perform the steps of:
<claim-text>presenting on a display of a computer a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window selectable GUI elements and a visual indicator, the visual indicator being movable in the editing window, the editing window having at least two panels and a divider between the panels;</claim-text>
<claim-text>moving the divider to first locations of the divider in the editing window by actions of an operator;</claim-text>
<claim-text>moving the divider to second locations of the divider in the editing window automatically;</claim-text>
<claim-text>memorizing a configuration history of the divider comprising the first locations and the second locations of the divider in the editing window, wherein the first locations and the second locations occur with different frequencies;</claim-text>
<claim-text>defining an optimization function of the first locations and the second locations for determining a new location of the divider that is selected from the first locations and the second locations, wherein the optimization function minimizes a likelihood that the divider will need to be moved away from the new location;</claim-text>
<claim-text>determining that a focus event with respect to one of the GUI elements or one of the panels has occurred;</claim-text>
<claim-text>responsively to the focus event, invoking the optimization function responsively to the configuration history of the divider to determine the new location of the divider within the editing window; and</claim-text>
<claim-text>on the display automatically resetting the divider to the new location within the editing window.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer software product according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein invoking the optimization function comprises:
<claim-text>determining a current location of the visual indicator;</claim-text>
<claim-text>identifying a most proximate one of the GUI elements to the current location; and</claim-text>
<claim-text>correlating the configuration history with the current location and the most proximate one of the GUI elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer software product according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the focus event is selected from the group consisting of clicking a button on a pointing device, pressing a keyboard shortcut, and speaking a voice command.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer software product according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein defining an optimization function comprises applying a learning algorithm to the configuration history.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer software product according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>defining one or more conditions; and</claim-text>
<claim-text>automatically resetting the current configuration of the divider only if the one or more conditions are satisfied.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer software product according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the one or more conditions comprise requiring a preconfigured time interval to expire before allowing the divider to be automatically reset.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A data processing system for adjusting a computer display, comprising:
<claim-text>a display presenting a graphical user interface (GUI) management module for generation of a GUI that offers in an editing window selectable GUI elements and a visual indicator, the visual indicator being movable in the editing window, the editing window having at least two panels and a divider between the panels;</claim-text>
<claim-text>an input device which is operative to move the visual indicator in the editing window;</claim-text>
<claim-text>a processor; and</claim-text>
<claim-text>a memory accessible to the processor storing programs and data objects therein, wherein execution of the programs causes the processor to perform the steps of:</claim-text>
<claim-text>moving the divider to first locations of the divider in the editing window by actions of an operator;</claim-text>
<claim-text>moving the divider to second locations of the divider in the editing window automatically;</claim-text>
<claim-text>memorizing a configuration history of the divider comprising the first locations and the second locations of the divider in the editing window, wherein the first locations and the second locations occur with different frequencies;</claim-text>
<claim-text>defining an optimization function of the first locations and the second locations for determining a new location of the divider that is selected from the first locations and the second locations, wherein the optimization function minimizes a likelihood that the divider will need to be moved away from the new location;</claim-text>
<claim-text>determining that a focus event with respect to one of the GUI elements or one of the panels has occurred;</claim-text>
<claim-text>responsively to the focus event, invoking the optimization function responsively to the configuration history of the divider to determine the new location of the divider within the editing window; and</claim-text>
<claim-text>on the display automatically resetting the divider to the new location within the editing window.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The data processing system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein invoking the optimization function comprises:
<claim-text>determining a current location of the visual indicator;</claim-text>
<claim-text>identifying a most proximate one of the GUI elements to the current location; and</claim-text>
<claim-text>correlating the configuration history with the current location and the most proximate one of the GUI elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The data processing system according to <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the focus event is selected from the group consisting of clicking a button on a pointing device, pressing a keyboard shortcut, and speaking a voice command.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The data processing system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein defining an optimization function comprises applying a learning algorithm to the configuration history.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The data processing system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:
<claim-text>defining one or more conditions; and</claim-text>
<claim-text>automatically resetting the current configuration of the divider only if the one or more conditions are satisfied.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The data processing system according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the one or more conditions comprise requiring a preconfigured time interval to expire before allowing the divider to be automatically reset.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the focus event comprises a mouse movement from one of the panels to another of the panels.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer software product according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the focus event comprises a mouse movement from one of the panels to another of the panels.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The data processing system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the focus event comprises a mouse movement from one of the panels to another of the panels. </claim-text>
</claim>
</claims>
</us-patent-grant>

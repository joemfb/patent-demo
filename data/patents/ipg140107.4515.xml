<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625598-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625598</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13178907</doc-number>
<date>20110708</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>190</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370392</main-classification>
<further-classification>709247</further-classification>
</classification-national>
<invention-title id="d2e53">Packet header compression for lossy channels</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5535199</doc-number>
<kind>A</kind>
<name>Amri et al.</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6032197</doc-number>
<kind>A</kind>
<name>Birdwell et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6300887</doc-number>
<kind>B1</kind>
<name>Le</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6882637</doc-number>
<kind>B1</kind>
<name>Le et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6914903</doc-number>
<kind>B1</kind>
<name>Miyazaki et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6967964</doc-number>
<kind>B1</kind>
<name>Svanbro et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2002/0018010</doc-number>
<kind>A1</kind>
<name>Le</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 60</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0059462</doc-number>
<kind>A1</kind>
<name>Hannu et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709247</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0059464</doc-number>
<kind>A1</kind>
<name>Hata et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0103277</doc-number>
<kind>A1</kind>
<name>Seada et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0125817</doc-number>
<kind>A1</kind>
<name>Miyazaki et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370411</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0136377</doc-number>
<kind>A1</kind>
<name>Miyazaki et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0083944</doc-number>
<kind>A1</kind>
<name>Liu et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>28</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12570919</doc-number>
<date>20090930</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7986719</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13178907</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10803002</doc-number>
<date>20040317</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7613185</doc-number>
<date>20091103</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12570919</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110271012</doc-number>
<kind>A1</kind>
<date>20111103</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Elliott</last-name>
<first-name>Brig Barnum</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Elliott</last-name>
<first-name>Brig Barnum</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Verizon Corporate Services Group Inc.</orgname>
<role>02</role>
<address>
<city>Basking Ridge</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</assignee>
<assignee>
<addressbook>
<orgname>Raytheon BBN Technologies Corp.</orgname>
<role>02</role>
<address>
<city>Cambridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Oveissi</last-name>
<first-name>David</first-name>
<department>2464</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The disclosed systems and methods provide for the compression and decompression of packet headers. An uncompressed header can be compressed in size to form a smaller, compressed header, such that the compressed header can include values that can be used to re-produce the uncompressed header. A compressed header can include at least two such values. A first value of the at least two values can be computed based on a second, earlier uncompressed header and can be used to derive the uncompressed header. Similarly, a second value of the at least two values can be computed based on a third uncompressed header and can be used to derive the same uncompressed header. Accordingly, the uncompressed header can be derived based on the first value and the second uncompressed header, or based on the second value and the third uncompressed header. The uncompressed header, second uncompressed header, and third uncompressed header can be associated with different packets.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="186.61mm" wi="220.47mm" file="US08625598-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="221.40mm" wi="185.67mm" orientation="landscape" file="US08625598-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="218.36mm" wi="168.83mm" file="US08625598-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="106.09mm" wi="106.68mm" file="US08625598-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.68mm" wi="185.00mm" file="US08625598-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="245.45mm" wi="186.27mm" file="US08625598-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="212.17mm" wi="162.64mm" file="US08625598-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="96.86mm" wi="123.36mm" file="US08625598-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="219.54mm" wi="150.45mm" file="US08625598-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="220.81mm" wi="151.72mm" file="US08625598-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of co-pending parent U.S. patent application Ser. No. 12/570,919, filed on Sep. 30, 2009 which, in turn, is a continuation of grandparent U.S. patent application Ser. No. 10/803,002, filed on Mar. 17, 2004 and which issued on Nov. 3, 2009 as U.S. Pat. No. 7,613,185, the contents of both of which being expressly incorporated herein by reference. Benefits under 35 U.S.C &#xa7;120 are hereby claimed.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">(1) Field</p>
<p id="p-0004" num="0003">The disclosed methods and systems relate generally to compression of packet headers, and more particularly to packet header compression for lossy channels.</p>
<p id="p-0005" num="0004">(2) Description of Relevant Art</p>
<p id="p-0006" num="0005">There is a continuing interest in improving the performance of packet-based networks to handle ever-growing demands on the capability of such networks to carry larger capacities of data. Such packet-based networks comprise intricate inter-connections of network devices that operate based on a diverse collection of protocols that define and control the overall operation of the network. These networking protocols require that data carried over the networks be accompanied by control information, which are often quite extensive and can place non-negligible demands on network resources. Thus, one continuing effort to improve network performance is known as &#x201c;header compression&#x201d; and involves encoding and/or condensing network protocol control information to decrease the network resources required by such protocols and to allow the networks to handle greater proportions of data.</p>
<p id="p-0007" num="0006">In general, a packet contains a control portion (the header) that includes various fields that indicate the manner in which the packet should be handled, and a data portion (the payload) that stores the data being transmitted, such as e-mail data, text messages, voice audio, pictures, or video data. It is possible to compress a packet header because there is often significant redundancy between header fields, both within the same packet and between consecutive packets that are part of the same packet stream. For example, with respect to Transmission Control Protocol (TCP) and Internet Protocol (IP), a header compression method described by V. Jacobson in RFC 1144 indicates that for TCP/IP headers, half of a header is likely to remain constant between consecutive packets in a packet stream. Accordingly, a reduction of one-half in the size of a TCP/IP header can be realized by storing a copy of the latest packet header for a packet stream at a receiver and transmitting to the receiver only the variable portion of a subsequent packet header. The method of Jacobson further compresses a TCP/IP header by realizing that the variable portions often change slowly or minutely. Thus, transmitting the amount of change (called &#x201c;delta&#x201d;) rather than the value of the variable portion can result in a further reduction in header size. A receiver can apply a received delta to the variable portion of an uncompressed packet header to produce the variable portion of the next header. The constant portion of this next header can be obtained from the constant portion of the uncompressed header.</p>
<p id="p-0008" num="0007">As exemplified by the header compression method of Jacobson, a &#x201c;compressed header&#x201d; is generally a condensed and/or encoded version of a full packet header. Thus, an individual compressed header in a packet does not convey the same extent of control information as a full header and must rely on a context provided by previous header(s) to derive control information. There are, however, situations where such context may be unavailable. For example, it is commonly known that packets may be re-ordered prior to arrival at a receiver. Because a header is compressed based on a previous header, packet re-ordering prior to decompression may cause a context of previous packets to be unavailable and can result in delays and/or other complications at the receiver. In addition, poor transmission conditions may cause certain packets to be lost, which results in decompression errors if a receiver does not recognize the packet loss and continues to apply received deltas to other packets in place of the lost packets. However, even when a receiver recognizes that re-ordering or packet loss has occurred, it may still be unable to accommodate subsequent packets and may require the transmitter to re-send the lost and/or subsequent packets. Thus, there is a continuing interest in improving header compression technology to accommodate problems such as packet re-ordering and packet loss.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0009" num="0008">The disclosed systems and methods provide for the compression and decompression of packet headers. An uncompressed packet can include an uncompressed header structured according to a networking protocol, such as Internet Protocol, Transmission Control Protocol, User Datagram Protocol, and Real-Time Protocol, among others. An uncompressed header can be compressed in size to form a smaller, compressed header, such that the compressed header can include values that can be used to re-produce the uncompressed header based on preceding headers. In one embodiment, a compressed header can include at least two such values. A first value of the at least two values can be used to derive the uncompressed header based on a second, earlier uncompressed header. Similarly, a second value of the at least two values can be used to derive the uncompressed header based on a third uncompressed header. Accordingly, the uncompressed header can be derived based on the first value and the second uncompressed header, or based on the second value and the third uncompressed header.</p>
<p id="p-0010" num="0009">In one embodiment, the first value can be computed based on the uncompressed header and the second uncompressed header, such that the first value corresponds to a difference between a value representative of a portion of the uncompressed header and a value representative of a corresponding portion of the second uncompressed header. Similarly, the second value can be computed based on the uncompressed header and the third uncompressed header, such that the second value corresponds to the difference between a value representative of a portion of the uncompressed header and a value representative of a corresponding portion of the third uncompressed header. The first and second values can be can encoded by a variable-length code and/or a sign-based code.</p>
<p id="p-0011" num="0010">In one embodiment, the uncompressed header, the second uncompressed header, and the third uncompressed header can be associated with different packets. The packets associated with the second and third uncompressed headers can be consecutive packets. In one embodiment, the at least two values in the compressed header can include other values, in addition to the first and second values, that are associated with other packets distinct from those associated with the second and third uncompressed headers. In one embodiment, a compressed header can include a destination address, a packet sequence number, and/or a packet stream identifier number.</p>
<p id="p-0012" num="0011">In one embodiment, the uncompressed header can be maintained at a first (e.g., source) network node, and the second and/or third uncompressed headers can be maintained at a second (e.g., destination) network node. A packet containing a compressed version of the uncompressed header can be transmitted from the first network node and received by the second network node, where the compressed header can include a first value and a second value for deriving the uncompressed header at the second network node based on the second uncompressed header or the third uncompressed header, respectively. In one embodiment, the uncompressed header can be derived at the second network node by summing the first value with the second uncompressed header and/or summing the second value with the third uncompressed header. The packet can traverse a connection from the first node to the second node that includes no intervening nodes, or the packet can traverse a connection that includes one or more intervening nodes.</p>
<p id="p-0013" num="0012">More generally, a compressed version of an uncompressed header can include a plurality of values for deriving the uncompressed header. The plurality of values can be generated by computing, for each of at least two uncompressed headers associated with previously transmitted packets, a corresponding value for deriving the uncompressed header. The uncompressed headers associated with the previous packets can be stored and updated to include new uncompressed headers associated with newly transmitted packets.</p>
<p id="p-0014" num="0013">Other objects and advantages will become apparent hereinafter in view of the specification and drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of an exemplary network architecture employing header compression/decompression;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. 2A-2C</figref> are diagrams of exemplary packets having compressed headers and/or uncompressed headers;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart of an exemplary method of operating a compressor to receive and compress packet headers in a packet stream;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart of an exemplary method of operating a decompressor to receive and decompress compressed packet headers in a packet stream;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of the exemplary portions of an uncompressed header and a compressed header;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram of an exemplary compressor storage space from which encoded header values can be computed;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram of an exemplary encoded portion of a compressed header; and</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. 8A-8B</figref> are diagrams of an exemplary decompressor storage space containing decompressed headers and compressed headers waiting to be decompressed.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DESCRIPTION</heading>
<p id="p-0023" num="0022">To provide an overall understanding, certain illustrative embodiments will now be described; however, it will be understood by one of ordinary skill in the art that the systems and methods described herein can be adapted and modified to provide systems and methods for other suitable applications and that other additions and modifications can be made without departing from the scope of the systems and methods described herein.</p>
<p id="p-0024" num="0023">Unless otherwise specified, the illustrated embodiments can be understood as providing exemplary features of varying detail of certain embodiments, and therefore, unless otherwise specified, features, components, modules, and/or aspects of the illustrations can be otherwise combined, separated, interchanged, and/or rearranged without departing from the disclosed systems or methods. Additionally, the shapes and sizes of components are also exemplary and unless otherwise specified, can be altered without affecting the disclosed systems or methods.</p>
<p id="p-0025" num="0024">The disclosed systems and methods provide for managing compression and decompression of packet headers in a manner that accommodates packet re-ordering and packet loss, among other things. Data such as e-mail, text messages, voice audio, digital music and pictures, video, etc., can be carried in a network according to networking protocols that apportion the data into segments and append one or more headers to those segments. The headers contain control information that facilitate the handling and delivery of the data segments and are structured according to defined arrangements. As used herein, a header that is structured according to an arrangement defined by a networking protocol can be understood to be an &#x201c;uncompressed header.&#x201d; In contrast, a header that is a condensed and/or encoded version of an uncompressed header can be understood to be a &#x201c;compressed header.&#x201d; The disclosed systems and methods provide for compressing an uncompressed header based on a number of other uncompressed headers such that the uncompressed header can be re-produced using one of the other uncompressed headers.</p>
<p id="p-0026" num="0025">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, there is shown an exemplary network artichecture <b>100</b> having a source network node <b>102</b> and a destination network node <b>104</b> in communication with a network <b>106</b>. For the described methods and systems, the network <b>106</b> can be a physically connected network having devices connected by physical connection medium, such as copper wire, twisted-pair, coaxial cable, fiber-optics, USB cable, firewire, etc., and/or a wirelessly connected network having devices that employ wireless technologies such as Bluetooth, 802.11b/g, GSM/GPRS, etc. The network <b>106</b> can encompass a myriad of network configurations and devices, ranging from a simple cable locally connecting the source node to the destination node to a complex inter-connection of wireline and/or wireless network nodes. As used herein, a network node can be understood to be a device, or portion thereof, that interacts with and/or forms a part of a network, such a PC, workstation, laptop, PDA, modem, NIC, cellular telephone, router, hub, switch, etc. Although the source and destination network nodes <b>102</b>, <b>104</b> are illustrated as being separate from the network <b>106</b>, the nodes <b>102</b>, <b>104</b> perform networking operations and are, in reality, encompassed within and/or part of the network <b>106</b>.</p>
<p id="p-0027" num="0026">As previously provided herein, a network <b>106</b> manages delivery of data <b>108</b> according to networking protocols <b>110</b>, <b>112</b>, such as Internet Protocol (IP), Transmission Control Protocol (TCP), User Datagram Protocol (UDP), and Real-Time Protocol (RTP), among others. A network node <b>102</b>, <b>104</b> operating in accordance with one or more networking protocols <b>110</b>, <b>112</b> can implement the protocols using hardware components, such as digital circuitry, and/or using software instructions executing on a processor. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, data <b>108</b> located at the source network node <b>102</b> can be processed by a cascade of one or more networking protocols <b>110</b>, <b>112</b> and a header compressor <b>114</b> to produce packets (not shown) to carry the data <b>108</b> across the network <b>106</b>. The compressor <b>114</b> can include a storage space <b>116</b> for maintaining information such as compressor configuration and/or a history of one or more transmitted headers <b>117</b>. Packets that traverse the network <b>106</b> may encounter conditions that result in some packets being re-ordered or completely lost. The packets that are received at the destination network node <b>104</b> can be accepted or discarded by the networking protocols <b>112</b> and/or the header decompressor <b>118</b> based on the extent and severity of the packet re-ordering and/or loss. Considerations for determining whether to process or discard received headers will be described herein. The decompressor <b>118</b> can include a storage space <b>120</b> for maintaining information such as decompressor configuration and/or a history of one or more decompressed packets <b>122</b>. Decompressed packets <b>122</b> can be further processed by networking schemes to re-assemble the original data <b>108</b> at the destination node <b>104</b>.</p>
<p id="p-0028" num="0027">The illustrated architecture and components in <figref idref="DRAWINGS">FIG. 1</figref> are exemplary and do not limit the scope of the described technology. Other configurations and arrangements are contemplated and include, for example, multiple header compressors/decompressors at the source and destination network nodes <b>102</b>, <b>104</b>. Further, those of ordinary skill will recognize that packets that are successfully decompressed at the destination node <b>104</b> may need to be compressed again and transmitted to another network node. Accordingly, although the network nodes <b>102</b>, <b>104</b> are singularly designated as a source or destination node, it is understood that a network node can concurrently operate as both a source node and a destination node and can perform header compression and decompression. Additionally, the illustrated storage spaces <b>116</b>, <b>120</b> can be physically located internal or external to the compressor <b>114</b>/decompressor <b>118</b>.</p>
<p id="p-0029" num="0028">Now with reference to <figref idref="DRAWINGS">FIG. 2A</figref>, there is shown a packet A <b>200</b> containing an uncompressed header <b>202</b> and a data segment <b>204</b>. The uncompressed header <b>202</b> can be condensed and/or encoded to form a compressed header <b>206</b> that is reduced in size when compared to the uncompressed header <b>202</b>. The compressed header <b>206</b> can include all or a portion of the uncompressed header <b>202</b> in encoded form, and can also include a duplicate of a portion of the uncompressed header <b>202</b>. Additionally, a compressor <b>114</b>/decompressor <b>118</b> can also convey header compression control information (not shown) in the compressed header <b>206</b>. After header compression, a packet B <b>208</b> containing the compressed header <b>206</b> and data segment <b>204</b> can be transmitted to the network <b>106</b> if no additional networking protocols wait to process the packet. Otherwise, one or more additional networking protocol headers <b>210</b> can be coupled to packet B <b>208</b> to form a packet C <b>212</b>, which can then be transmitted to the network <b>106</b>.</p>
<p id="p-0030" num="0029">In one embodiment, an uncompressed packet may contain more than one uncompressed header, and a compressor can designate a subset of the headers for compression. For example, shown in <figref idref="DRAWINGS">FIG. 2B</figref> is a header compression scheme based on TCP and IP headers. The uncompressed packet comprises an uncompressed IP header <b>214</b>, an uncompressed TCP header <b>216</b>, and a data segment <b>218</b>. TCP provides useful network services that a network may wish to utilize so that in one embodiment, the TCP header <b>216</b> can be maintained in uncompressed form. Accordingly, a compressor can be designed to recognize TCP and IP header structures <b>214</b>, <b>216</b> and can compress only the IP header <b>220</b> while leaving the TCP header <b>216</b> uncompressed. Alternatively, in one embodiment, multiple uncompressed headers can be condensed and/or encoded into a single compressed header. As shown in <figref idref="DRAWINGS">FIG. 2C</figref>, a TCP header <b>216</b> and an IP header <b>214</b> can be compressed to form a single compressed header <b>222</b>.</p>
<p id="p-0031" num="0030">The illustrated structures and arrangements of compressed and uncompressed packets in <figref idref="DRAWINGS">FIGS. 2A-2C</figref> are exemplary embodiments, and other combinations of one or more compressed and/or uncompressed headers within a packet are also contemplated to be included within the scope of the disclosed systems and methods.</p>
<p id="p-0032" num="0031">Now with reference to <figref idref="DRAWINGS">FIG. 3</figref>, there is shown a flow chart <b>300</b> of a method of operating a compressor to receive and compress packet headers in a packet stream. Also with continuing reference to <figref idref="DRAWINGS">FIGS. 1 and 2A</figref>, a packet <b>200</b> arriving at a compressor <b>114</b> has an associated packet stream that determines the networking protocol headers <b>202</b> used by that stream. Accordingly, packets that are associated with the same packet stream contain the same types and arrangement of headers. In one embodiment, a compressor <b>114</b> can receive information regarding a packet stream (<b>302</b>) prior to receiving packets from that stream. The information can specify, for example, the order and type of networking protocol headers in a packet, thereby allowing the compressor <b>114</b> to properly service the packet stream. In one embodiment, a compressor <b>114</b> can allocate storage space <b>116</b> (<b>304</b>) for storing a history of uncompressed packet headers <b>117</b> from a packet stream. For the sake of simplicity for this example, it is assumed that each packet contains a single uncompressed header <b>202</b> and a data segment <b>204</b>, although the disclosed methods are not limited by such assumption.</p>
<p id="p-0033" num="0032">Upon receiving an uncompressed packet <b>200</b> (<b>306</b>), a compressor <b>114</b> can identify the packet stream associated with the packet <b>200</b> and can determine whether the header <b>202</b> should be compressed (<b>308</b>) based on, for example, whether the decompressor <b>118</b> may need to receive an uncompressed header <b>202</b> for use as a reference. For example, a packet header <b>202</b> can remain uncompressed so that when it is received at the decompressor <b>118</b> at a destination node <b>104</b>, it can serve as a reference/starting point for decompressing subsequently received headers. Accordingly, the first packet or a number of first packets in a packet stream can remain uncompressed. Before transmitting an uncompressed packet <b>200</b> to another networking protocol <b>112</b> or to the network <b>106</b>, the compressor <b>114</b> can store the uncompressed header <b>202</b> in the allocated storage space <b>116</b> to maintain a history of uncompressed headers <b>117</b> for a packet stream. The compressor <b>114</b> can determine whether the allocated storage space <b>116</b> is full (<b>312</b>), and if not, can store the uncompressed header <b>202</b> in an available location in the storage space <b>116</b> (<b>316</b>). Otherwise, the compressor <b>114</b> can store the uncompressed header <b>202</b> in the storage space <b>116</b> in place of the oldest header in the storage space <b>116</b> (<b>314</b>). In this manner, the storage space <b>116</b> can maintain a history of the most recent packet headers <b>117</b>. After passing the uncompressed packet <b>200</b> to the next stage (<b>318</b>), the compressor <b>114</b> can determine if the packet stream is complete or if there are more packets to receive and process (<b>320</b>). The compressor <b>114</b> can terminate servicing of a packet stream when there are no more packets to receive.</p>
<p id="p-0034" num="0033">Other than those situations for which a packet header may remain uncompressed, a compressor <b>114</b> can perform header compression in a manner that provides some amount of tolerance for packet re-ordering and/or loss. In one embodiment, the compressor <b>114</b> can compute, for each stored header <b>117</b> in the storage space <b>116</b>, a corresponding value (such as a delta) from which the uncompressed header <b>202</b> can be derived using the corresponding stored header (<b>310</b>). These values can be included together in a compressed header <b>206</b> and can be used by a decompressor <b>118</b> to re-produce the uncompressed header <b>202</b> using one of the corresponding headers <b>117</b> that was also decompressed and stored <b>122</b> at the decompressor <b>118</b>. Accordingly, a compressed packet <b>208</b> can be decompressed at a decompressor <b>118</b> if at least one packet <b>117</b> on which its compression is based was also received and decompressed. In one embodiment, a subset of less than all of the headers <b>117</b> stored in the compressor storage space <b>116</b> can be used in the compression process, where the headers in the subset can be consecutive or non-consecutive. Before transmitting the compressed packet <b>208</b> to another networking protocol <b>112</b> or to the network <b>106</b>, the compressor <b>114</b> can store the corresponding uncompressed header <b>202</b> in the allocated storage space <b>116</b> to maintain a history of uncompressed headers <b>117</b> for a packet stream. As previously provided, the compressor <b>114</b> can determine whether the allocated storage space <b>116</b> is full (<b>312</b>), and if not, can store the uncompressed header <b>202</b> (<b>316</b>) in an available location in the storage space <b>116</b>. Otherwise, the compressor <b>114</b> can store the uncompressed header <b>202</b> in the storage space <b>116</b> in place of the oldest header in the storage space <b>116</b> (<b>314</b>). In this manner, the storage space <b>116</b> can maintain a history of the most recent packet headers <b>117</b>. After passing the compressed packet <b>208</b> to the next stage (<b>318</b>), the compressor <b>114</b> can determine if the packet stream is complete or if there are more packets to receive and process (<b>320</b>). The compressor <b>114</b> can terminate servicing of a packet stream when there are no more packets to receive.</p>
<p id="p-0035" num="0034">Referring now to <figref idref="DRAWINGS">FIG. 4</figref>, there is shown a flow chart <b>400</b> of a method of operating a decompressor <b>118</b> to receive and decompress packet headers in a packet stream. With continuing reference to <figref idref="DRAWINGS">FIGS. 1 and 2A</figref>, a decompressor <b>118</b> can receive information regarding a packet stream (<b>402</b>) prior to receiving packets from that stream. Upon receiving packet stream information, a decompressor <b>118</b> can allocate storage space <b>120</b> (<b>404</b>) for storing a history of decompressed packet headers <b>122</b>. For the sake of simplicity for the present example, it is assumed that each packet contains a single header (compressed <b>206</b> or uncompressed <b>202</b>) and a data segment <b>204</b>, although the disclosed methods are not limited by such assumption.</p>
<p id="p-0036" num="0035">Upon receiving a packet (<b>406</b>), a decompressor <b>118</b> can identify the packet stream associated with the packet and can determine whether the header is compressed (<b>408</b>). If the header is not compressed <b>202</b>, the decompressor <b>118</b> can use the uncompressed header <b>202</b> to update the storage space <b>120</b> (<b>414</b>). For example, the uncompressed header <b>202</b> can be stored in the storage space <b>120</b> if it is more recent than at least one other packet <b>122</b> in the storage space <b>120</b>. If the header is compressed <b>206</b>, the decompressor <b>118</b> can examine the compressed header <b>206</b> to identify the headers <b>117</b> on which the compression is based. The decompressor <b>118</b> can determine whether the compressed header <b>206</b> can be decompressed (<b>410</b>) by determining if another of the headers <b>117</b> on which the compression is based correspond to decompressed and stored headers <b>122</b> in the storage space <b>120</b>. The decompressor <b>118</b> can derive the uncompressed header <b>202</b> by applying a computed value (e.g., delta difference) in the compressed header <b>206</b> to a corresponding header <b>122</b> in the storage space <b>120</b> (<b>412</b>). The uncompressed header <b>202</b> can be used to update the storage space <b>120</b> (<b>414</b>) before being provided to the next stage (e.g., another networking protocol) (<b>416</b>) in the destination node <b>104</b>. If the compressed header <b>206</b> cannot be decompressed, then the compressed packet <b>208</b> can be temporarily stored in the storage space <b>120</b> (<b>418</b>) until subsequent packets are received and decompressed, which may allow the stored compressed headers to be decompressed. For example, a decompressor <b>118</b> can decompress newly received packets and, using those decompressed packets, can decompress another stored compressed packets (<b>412</b>). After processing a received packet, the decompressor <b>118</b> can determine if the packet stream is complete or if there are more packets to receive in the stream (<b>420</b>). The decompressor <b>118</b> can complete servicing of the packet stream when there are no more packets to receive.</p>
<p id="p-0037" num="0036">With respect to the compressor/decompressor storage spaces <b>116</b>, <b>120</b>, the amount of space to allocate for storing packet headers <b>117</b>, <b>122</b> can depend upon several considerations, such as the nature of noise interference affecting packets and the amount of variation between packet header content. For example, if noise interference in the network is pulsed and, on average, has a particular pulse duration, then storage space <b>116</b>, <b>120</b> can be allocated to maintain a number of consecutive headers <b>117</b>, <b>122</b> that span a transmission duration longer than the average pulse duration. A compression scheme based on compressing against each of the consecutive headers <b>117</b> would thus be able to endure an average level of interference and packet loss. One disadvantage is that the number of consecutive headers <b>117</b>, <b>122</b> to store may be large, and a compression scheme using every one of the consecutive headers can result in a compressed header <b>206</b> that is greater in size than the uncompressed header <b>202</b>. However, if the nature of the packet stream is such that packet header contents vary slowly, then a header <b>202</b> can be compressed using every other (or fewer than every other) header in the storage space <b>116</b>. The compressed header <b>206</b> can thus be reduced in size by allowing delta values to remain small, while still accommodating an average level of interference and packet loss.</p>
<p id="p-0038" num="0037">The particular sizes of the compressor/decompressor storage spaces <b>116</b>, <b>120</b> and the number and selection of stored headers <b>117</b> to use in a compression scheme are thus variable and can be designed according to the needs and considerations of the embodiment. The following sections will describe a particular compressor/decompressor design. However, the described design is exemplary and non-limiting, and variations and modifications are contemplated to be included within the scope of the disclosed systems and methods.</p>
<p id="p-0039" num="0038">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, there is shown an embodiment of an uncompressed header <b>500</b> having a static portion <b>502</b> and a variable portion <b>504</b>. A static portion <b>502</b> can be understood to include those fields of the header <b>500</b> that are unchanged for all packets in a packet stream. In contrast, the variable portion <b>504</b> includes those fields that vary between packets in a packet stream. The static portion <b>502</b> can additionally include header fields that may be variable, but whose values can be inferred from the variable portion <b>504</b> or from the headers of other networking protocols. The static portion <b>502</b> of a header needs to be received by the decompressor only once and can be conveyed to the decompressor in an uncompressed header <b>500</b>. As an example, as Bormann, et al. describe in RFC 3095, an Internet Protocol (IP) header has a number of fields that include a source address field, a destination address field, a packet length field, and a time to live field. The source and destination address fields must be constant for all packets in a stream and thus are included in the static portion <b>502</b> of an IP header. In contrast, the time to live field can vary between packets and is included in the variable portion <b>504</b>. While the packet length field is not constant, it can be considered part of the static portion <b>502</b> because packet length fields also exist in other networking protocol headers (such as link layer headers) that are attached to an IP header. Thus, the packet length field in an IP header can be inferred from the packet length fields of other networking protocols and need not be included in a compressed IP header. Although the static and variable portions <b>502</b>, <b>504</b> are each illustrated as being contiguous segments, they can include one or more non-neighboring header fields and can also be non-contiguous.</p>
<p id="p-0040" num="0039">The variable portion <b>504</b> can be included in a compressed header <b>506</b> in original form (not shown) or in encoded form <b>508</b>, which in most cases is lesser in size than the original form. For example, the values in the variable portion <b>504</b> of a header <b>500</b> can be encoded by computing delta differences with respect to the variable portions of preceding packet headers <b>117</b> stored in a compressor storage space <b>116</b>. If the variable portion varies slowly, then the delta value can be smaller than the value of the variable portion. Since a delta can be positive or negative, it can be encoded using a sign-based code such as twos complement. In addition, the delta can also be encoded based on frequency of occurrence using a variable-length code such as a Huffman code. A compressed header <b>506</b> can also include control information <b>510</b> in addition to the encoded variable portion <b>508</b>. The control information <b>510</b> can, for example, specify a sequence number to convey packet order and/or an indicator to convey whether a header is compressed or uncompressed.</p>
<p id="p-0041" num="0040">Referring now to <figref idref="DRAWINGS">FIG. 6</figref>, there is shown an exemplary compressor storage space <b>600</b> containing uncompressed packet headers <b>602</b>. The stored packet headers <b>602</b> can include both the static and variable portions of a header or can include only the variable portion. In the illustrated embodiment, the storage space <b>600</b> is allocated to maintain a history of N packet headers <b>602</b>, where N is two or greater and can be selected based on an average noise interference duration. Accordingly, the storage space <b>600</b> can maintain a history of the N most recent uncompressed packet headers. In one embodiment, a new header can be inserted into one end of the storage space while the oldest header can be discarded from the other end. In this manner, the storage space <b>600</b> need not store the sequence numbers of the packet headers because the N packet headers <b>602</b> remain in order from newest to oldest. In general, it can be inferred that if a header to be compressed has sequence number s, then the newest stored header has sequence number (s&#x2212;1) and the oldest stored header has sequence number (s&#x2212;N). If there are less than N stored headers in the storage space <b>600</b>, then the oldest header has sequence number &#x201c;one&#x201d;. Although the compressor storage space <b>600</b> as illustrated includes only uncompressed packet headers <b>602</b>, the storage space <b>600</b> can also include sequence numbers and other information in addition to packet headers.</p>
<p id="p-0042" num="0041">With continuing reference to <figref idref="DRAWINGS">FIG. 5</figref>, in one embodiment, a compressor can encode an uncompressed header <b>500</b> by computing delta differences between the variable portion <b>504</b> of the uncompressed header <b>500</b> and the variable portions of the stored headers <b>602</b>. With reference also to <figref idref="DRAWINGS">FIG. 7</figref>, there is shown an encoded variable portion <b>700</b> of a compressed header s that includes a delta value <b>702</b> for each stored header <b>602</b> in the storage space <b>600</b>, where delta (s&#x2212;1) corresponds to the difference between the variable portion of header s and the variable portion of uncompressed header (s&#x2212;1), and so on for delta (s&#x2212;2) through delta (s&#x2212;N). The delta values <b>702</b> can be represented using a signed, variable-length code or a fixed-length code. The length of such a code can depend on the range of values that a delta can assume. Additionally, the length of a variable-length code can depend on the probabilistic distribution of the range of delta values.</p>
<p id="p-0043" num="0042">With reference to <figref idref="DRAWINGS">FIG. 8A</figref>, there is shown an exemplary decompressor storage space <b>800</b> containing received headers that have been decompressed <b>802</b>. In one embodiment, storage space <b>800</b> can be allocated to maintain N decompressed headers <b>802</b>. For example, the number N of stored headers can equal eight so that the decompressor storage space <b>800</b> maintains the eight most recently decompressed headers. The most recently decompressed headers <b>802</b> may not have consecutive sequence numbers since packets may be received out of order or may not be received at all. As shown in <figref idref="DRAWINGS">FIG. 8A</figref>, while header <b>810</b> is the oldest decompressed header in the storage space <b>800</b>, header eight-hundred eleven, a later header, is absent from the list. Referring again to the delta values <b>702</b> of <figref idref="DRAWINGS">FIG. 7</figref> with N equal to eight, a compressed packet header <b>700</b> can be decompressed by applying one of the delta values <b>702</b> to a corresponding one of eight preceding headers <b>602</b>. Stated another way, an uncompressed header with sequence number s can be used to decompress headers (s+1) through (s+8). Accordingly, stored header <b>810</b> in <figref idref="DRAWINGS">FIG. 8A</figref> can be used to decompress header eight-hundred eleven, and stored header <b>818</b> can be used to decompress headers eight-hundred nineteen through eight-hundred twenty-six.</p>
<p id="p-0044" num="0043">The decompressor storage space <b>800</b> can be updated when a newly received header is decompressed. Suppose that a decompressor having the storage space <b>800</b> shown in <figref idref="DRAWINGS">FIG. 8A</figref> receives compressed headers <b>819</b>, <b>830</b>, and <b>811</b>, in that order. The decompressor is able to derive uncompressed header <b>819</b> based on stored header <b>818</b> and can store uncompressed header <b>819</b> in the storage space as the newest header. In the process, the oldest header <b>810</b> is discarded, resulting in the stored headers <b>806</b> of the updated storage space <b>804</b> of <figref idref="DRAWINGS">FIG. 8B</figref>. The decompressor also receives compressed headers <b>830</b> and <b>811</b> but is unable to decompress them because the storage space <b>804</b> lacks the necessary headers. In one embodiment, compressed packets <b>808</b> that have been received but that cannot be decompressed can also be stored in the storage space <b>804</b>. Thus, compressed headers <b>830</b> and <b>811</b> can be stored in the storage space <b>804</b> while they wait to be decompressed. Compressed header <b>830</b> can be decompressed based on whether another of headers eight-hundred twenty-two through eight-hundred twenty-nine are received and decompressed. However, based on the uncompressed headers <b>806</b> in the storage space <b>804</b> of <figref idref="DRAWINGS">FIG. 8B</figref>, compressed header <b>811</b> cannot be decompressed regardless of which other compressed headers are received. Compressed headers that arrive with sequence numbers less than <b>811</b> also cannot be decompressed, and headers that arrive with sequence numbers greater than <b>811</b> cannot be used to decompress header <b>811</b>.</p>
<p id="p-0045" num="0044">In one embodiment, the situation of stored compressed packets <b>808</b> that cannot be decompressed can be mitigated by storing every other (or fewer than every other) decompressed header <b>806</b> in the decompressor storage space <b>804</b>. For example, a decompressor can store every other N header in the storage space <b>804</b>. Since a stored header s can be used to decompress headers (s+1) through (s+N), this storage scheme can accommodate decompression of headers from a range of N<sup>2 </sup>sequence numbers. Additionally, the amount of storage space <b>804</b> allocated for storing uncompressed headers <b>806</b> can be greater than N, such as an integer multiple of N. In one embodiment, compressed packets <b>808</b> stored in the decompressor storage space <b>804</b> can be marked after a certain amount of time or after a certain number of other packets have been received and decompressed. A decompressor can discard the marked compressed packets <b>808</b> and/or request that the compressor re-transmit uncompressed versions of a marked packet. If there are multiple marked packets <b>808</b> having consecutive or neighboring sequence numbers, then in one embodiment, a compressor may need to only transmit one uncompressed header to serve as a reference header for decompressing all of the marked packets <b>808</b>. Additionally, a marked packet that has been decompressed can be used to decompress other marked packets. The disclosed systems and methods for storing and decompressing packets are not limited to the sizes, dimensions, numbers, and components illustrated and/or described herein. Variations and/or modifications to the disclosed embodiments for storing and decompressing compressed packets are also contemplated.</p>
<p id="p-0046" num="0045">The methods and systems described herein are not limited to a particular hardware or software configuration, and may find applicability in many computing or processing environments. The methods and systems can be implemented in hardware or software, or a combination of hardware and software. The methods and systems can be implemented in one or more computer programs, where a computer program can be understood to include one or more processor executable instructions. The computer program(s) can execute on one or more programmable processors, and can be stored on one or more storage medium readable by the processor (including volatile and non-volatile memory and/or storage elements), one or more input devices, and/or one or more output devices.</p>
<p id="p-0047" num="0046">The computer program(s) can be implemented using one or more high level procedural or object-oriented programming languages to communicate with a computer system; however, the program(s) can be implemented in assembly or machine language, if desired. The language can be compiled or interpreted.</p>
<p id="p-0048" num="0047">Unless otherwise stated, use of the word &#x201c;substantially&#x201d; can be construed to include a precise relationship, condition, arrangement, orientation, and/or other characteristic, and deviations thereof as understood by one of ordinary skill in the art, to the extent that such deviations do not materially affect the disclosed methods and systems.</p>
<p id="p-0049" num="0048">Throughout the entirety of the present disclosure, use of the articles &#x201c;a&#x201d; or &#x201c;an&#x201d; to modify a noun can be understood to be used for convenience and to include one, or more than one of the modified noun, unless otherwise specifically stated.</p>
<p id="p-0050" num="0049">Elements, components, modules, and/or parts thereof that are described and/or otherwise portrayed through the figures to communicate with, be associated with, and/or be based on, something else, can be understood to so communicate, be associated with, and or be based on in a direct and/or indirect manner, unless otherwise stipulated herein.</p>
<p id="p-0051" num="0050">Many additional changes in the details, materials, and arrangement of parts, herein described and illustrated, can be made by those skilled in the art. Accordingly, it will be understood that the following claims are not to be limited to the embodiments disclosed herein, can include practices otherwise than specifically described, and are to be interpreted as broadly as allowed under the law.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method to be practiced in a computing device disposed within a first node, said method comprising:
<claim-text>receiving, in said first node, information regarding a particular packet stream prior to receiving packets from said packet stream;</claim-text>
<claim-text>allocating, in said first node, storage space for storing uncompressed packet headers from said packet stream to maintain a history of said uncompressed headers;</claim-text>
<claim-text>receiving, in said first node, an uncompressed packet including an uncompressed packet header forming a portion of said uncompressed packet and a packet data-segment forming the remaining portion of said uncompressed packet and identifying a packet stream associated with said packet;</claim-text>
<claim-text>if said identified packet stream is said particular packet stream, determining whether said uncompressed packet header should be compressed prior to transmitting said uncompressed packet to a second node;</claim-text>
<claim-text>if said uncompressed packet header should be compressed, obtaining a header-compressed packet by performing header compression on said uncompressed packet header in a manner that provides for packet re-ordering or packet loss.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>determining if said storage space is full and,
<claim-text>if not, storing said uncompressed packet header in an available location in said storage space but,</claim-text>
<claim-text>if so, discarding, from said storage space, a stored uncompressed packet header being oldest in said storage space and storing said uncompressed packet header in place of said discarded oldest uncompressed packet header;</claim-text>
</claim-text>
<claim-text>to maintain said history with most recent uncompressed packet headers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>determining if all packets in said particular packet stream have been received by said first node and,</claim-text>
<claim-text>if not, repeating all steps of <claim-ref idref="CLM-00001">claims 1</claim-ref> and <claim-ref idref="CLM-00002">2</claim-ref> in the order provided, but,</claim-text>
<claim-text>if so, terminating said method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>if said packet header should not be compressed, transmitting said uncompressed packet including said uncompressed packet header from said first node to said second node to serve as a reference/starting point for decompressing in said second node subsequently-received compressed packet headers of other packets comprising said particular packet stream, while maintaining a history of said uncompressed packet header in said allocated storage space in said first node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein said transmitted uncompressed packet header is associated with the first packet of said particular packet stream received by said first node.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein said transmitted first packet is also the first packet of a number of first-received packets within said particular packet stream initially-received by said first node, said number of said first-received packets remaining uncompressed for purposes of alternatively serving as said reference/starting point after said number of first-received packets are transmitted from said first node to said second node.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein said history of said most recent uncompressed packet headers including headers from said number of said first received packets is maintained in said allocated storage space in said first node after transmitting said first received packets to said second node.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein said transmitting is accomplished via a network.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein said network is the Internet.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said uncompressed packet header includes a variable header portion and a static header portion, said manner that provides for said packet reordering or packet loss involving only said variable header portion.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said manner comprises:
<claim-text>if said identified packet stream is said particular packet stream, computing, for each said uncompressed packet header stored in said storage space in said first node, a corresponding delta-difference between said variable header portion of said uncompressed packet header and said variable header portion of another stored uncompressed packet header of a packet previously transmitted, after header compression, from said first node to said second node and immediately prior to transmitting a packet including a compressed version of said variable header portion of said uncompressed packet header.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein said corresponding delta difference is included with said compressed version prior to transmission from said first node to said second node, a restored uncompressed header equivalent to said uncompressed packet header being derived from said delta difference and said another stored uncompressed packet header in said second node.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising:
<claim-text>determining if contents of headers in said particular packet stream varies at a rate of variation less than a particular rate and, if so, then compressing every other, or fewer than every other, said variable header portion stored in said storage space.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein computing said delta difference further comprises:
<claim-text>encoding said delta-difference using a sign-based code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said sign-based code is a twos complement.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein said encoding is based on frequency of occurrence of said variable header portions of said previously transmitted packet headers using a variable-length code.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein said variable-length code is a Huffman code.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said information includes the specifying of order and type of networking protocol headers for packets in said particular packet stream.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said allocated storage space maintains a history of N most recent uncompressed packet headers, where N is two or more and selected on a basis of average noise interference duration.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein a new uncompressed packet header is inserted into one end of a fully-populated said storage space while the oldest uncompressed packet header is discarded from the other end of said storage space, to eliminate need for storing sequence numbers of said uncompressed packet headers stored in said storage space in said first node since said uncompressed and stored packet headers remain in proper sequential order from newest to oldest in said storage space.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method to be practiced in as computing device disposed within a destination node, said method comprising:
<claim-text>receiving, in said destination node from a source node, information regarding a particular packet stream prior to receiving packets from said packet stream;</claim-text>
<claim-text>allocating storage space for storing decompressed packet headers of previously-compressed packet headers of packets in said packet stream to maintain a history of said decompressed packet headers;</claim-text>
<claim-text>receiving, in said destination node, a packet including a packet header forming a portion of said packet and a packet data segment forming, the remaining portion of said packet and determining if said packet header is compressed and identifying a packet stream associated with said packet;</claim-text>
<claim-text>if said identified packet stream is said particular packet stream and if said packet header is compressed, determining if said compressed packet header can be decompressed; and</claim-text>
<claim-text>if said compressed packet header can be decompressed, then:
<claim-text>decompressing said compressed packet header to obtain a decompressed packet header, said decompressing using both a delta difference included in said compressed packet header and a particular decompressed header previously-stored in said storage space,</claim-text>
<claim-text>storing said decompressed packet header in said storage space, and</claim-text>
<claim-text>further decompressing any de-compressible compressed packet headers previously and temporarily stored in said destination node.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein:
<claim-text>if said compressed packet header cannot be decompressed, then:
<claim-text>temporarily storing said compressed packet header in said destination node until a subsequent compressed packet header is received and decompressed in said destination node which allows said temporarily-stored compressed header to be decompressed.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref> further comprising:
<claim-text>mitigating a situation in which said temporarily-stored compressed header and other temporarily-stored compressed headers cannot be decompressed by storing every other, or fewer than every other, said decompressed packet header in said decompressor storage space, to extend effective range of said storage space.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref> further comprising:
<claim-text>marking, after a certain amount of elapsed time, or after receipt of a certain number of other packets, said temporarily-stored compressed header for discard.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00024">claim 24</claim-ref> further comprising:
<claim-text>requesting retransmission of uncompressed versions of said discarded marked header.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprising:
<claim-text>if said identified packet stream is said particular packet stream and if said packet header is not compressed, updating said storage space using said not compressed packet header, but only if said not compressed packet header is more recent than at least one other uncompressed header in said storage space.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref> further comprising:
<claim-text>if said identified packet stream is said particular packet stream and if said packet header is compressed, examining said compressed header to identify other headers on which compression of said compressed header is based.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A node, comprising:
<claim-text>a packet header decompressor receiving information regarding a packet stream prior to receiving packets from said packet stream and configured to receive compressed packet headers associated with said packet stream via a network from a source node, said decompressor configured to decompress said compressed packet headers based on both a delta-difference included in each of said compressed packet headers and on previously-received, previously-decompressed and previously-stored packet headers to obtain delta-difference-decompressed packet headers, and further configured to store said delta-difference-decompressed packet headers with, or in place of one or more of said previously-stored packet headers; and</claim-text>
<claim-text>a packet header compressor receiving information regarding said packet stream nor to receiving packets from said packet stream and configured to transmit compressed versions of said delta-difference-decompressed packet headers associated with said packet stream via said network or another network to a destination node, said compressor configured to compress said delta-difference-decompressed packet headers into said compressed versions in a manner that provides for packet re-ordering or packet loss. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627446-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627446</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12586939</doc-number>
<date>20090930</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>499</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 12</main-classification>
</classification-national>
<invention-title id="d2e53">Federating data between groups of servers</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7412492</doc-number>
<kind>B1</kind>
<name>Waldspurger</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7433951</doc-number>
<kind>B1</kind>
<name>Waldspurger</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7577722</doc-number>
<kind>B1</kind>
<name>Khandekar et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8060926</doc-number>
<kind>B1</kind>
<name>Ebrahimi et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0152318</doc-number>
<kind>A1</kind>
<name>Menon et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0097443</doc-number>
<kind>A1</kind>
<name>Gillett et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0223412</doc-number>
<kind>A1</kind>
<name>Nadalin et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0212935</doc-number>
<kind>A1</kind>
<name>Burman et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0091812</doc-number>
<kind>A1</kind>
<name>Lev-Ran et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0126547</doc-number>
<kind>A1</kind>
<name>Waldspurger</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2009/0112789</doc-number>
<kind>A1</kind>
<name>Oliveira et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0112811</doc-number>
<kind>A1</kind>
<name>Oliveira et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0112879</doc-number>
<kind>A1</kind>
<name>Oliveira et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2009/0112880</doc-number>
<kind>A1</kind>
<name>Oliveira et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2009/0112921</doc-number>
<kind>A1</kind>
<name>Oliveira et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>J. Matthews et al., &#x201c;Virtual Machine Contracts for Datacenter and Cloud Computing Environments,&#x201d; <i>ACDC </i>'09, Jun. 19, 2009, Barcelona, Spain, 6 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>W. Zheng et al., &#x201c;Cloud Service and Service Selection Algorithm Research,&#x201d; <i>GEC </i>'09, Jun. 12-14, 2009, Shanghai, China, pp. 1045-1048.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;Architectural Strategies for Cloud Computing,&#x201d; Oracle White Paper in Enterprise Architecture, Aug. 2009, 18 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>&#x201c;VMware Virtual Machine File System: Technical Overview and Best Practices,&#x201d; VMware Technical White Paper, Version 1.0, WP-022-PRD-01-01, 2007, 19 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>&#x201c;IT in the Cloud: Using VMware vCloud for Reliable, Flexible, Shared IT Resources,&#x201d; VMware White Paper, 2008, 8 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>&#x201c;VMware vSphere, the First Cloud Operating System, Provides an Evolutionary, Non-disruptive Path to Cloud Computing,&#x201d; VMware White Paper, 2009, 8 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>&#x201c;VMware vSphere 4,&#x201d; VMware Cheat Sheet, 2009, 9 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>&#x201c;Amazon Elastic Compute Cloud: Developer Guide,&#x201d; API Vers. Jul. 15, 2009, Amazon web services, 2009, 154 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>&#x201c;EMC Atmos Online Compute Service: Getting Started Guide,&#x201d; Document Revision A, Sep. 28, 2009, 35 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>26</number-of-drawing-sheets>
<number-of-figures>34</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Eaton</last-name>
<first-name>Patrick R.</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pan</last-name>
<first-name>Zane</first-name>
<address>
<city>Lexington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dimitrov</last-name>
<first-name>Rossen</first-name>
<address>
<city>Nashua</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Eaton</last-name>
<first-name>Patrick R.</first-name>
<address>
<city>Arlington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Pan</last-name>
<first-name>Zane</first-name>
<address>
<city>Lexington</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Dimitrov</last-name>
<first-name>Rossen</first-name>
<address>
<city>Nashua</city>
<state>NH</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Muirhead and Saturnelli, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>EMC Corporation</orgname>
<role>02</role>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Barron, Jr.</last-name>
<first-name>Gilberto</first-name>
<department>2432</department>
</primary-examiner>
<assistant-examiner>
<last-name>Cribbs</last-name>
<first-name>Malcolm</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Accessing data includes determining if the data is provided on a local group of servers or on an external group of servers. If the data is provided on a local group of servers, a storage server is used to access the data. If the data is provided on an external group of servers, a proxy server is used to access the data. The proxy server interacts with an entity accessing the data in a manner that is substantially similar to interaction between the entity and the storage server. Using the proxy server may include initially providing an account id and a password. Following providing an account id and a password, using the proxy server may include using an account id and a shared secret. Using the proxy server may include using RSA ID tokens or cryptographic certificates.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="141.82mm" wi="337.14mm" file="US08627446-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="167.64mm" wi="180.59mm" orientation="landscape" file="US08627446-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.04mm" wi="183.05mm" orientation="landscape" file="US08627446-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.15mm" wi="153.42mm" orientation="landscape" file="US08627446-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="173.99mm" wi="140.55mm" orientation="landscape" file="US08627446-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="197.19mm" wi="165.78mm" orientation="landscape" file="US08627446-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="225.81mm" wi="120.82mm" orientation="landscape" file="US08627446-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="249.26mm" wi="184.66mm" orientation="landscape" file="US08627446-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="233.60mm" wi="201.59mm" orientation="landscape" file="US08627446-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="204.47mm" wi="197.44mm" orientation="landscape" file="US08627446-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="168.66mm" wi="202.69mm" orientation="landscape" file="US08627446-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="242.06mm" wi="204.72mm" orientation="landscape" file="US08627446-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="253.24mm" wi="207.60mm" orientation="landscape" file="US08627446-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="218.86mm" wi="189.40mm" orientation="landscape" file="US08627446-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="185.84mm" wi="197.70mm" orientation="landscape" file="US08627446-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="203.62mm" wi="189.40mm" orientation="landscape" file="US08627446-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="192.36mm" wi="155.28mm" orientation="landscape" file="US08627446-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="131.49mm" wi="184.83mm" orientation="landscape" file="US08627446-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="184.23mm" wi="160.44mm" orientation="landscape" file="US08627446-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="246.46mm" wi="170.52mm" orientation="landscape" file="US08627446-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="208.70mm" wi="170.69mm" orientation="landscape" file="US08627446-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="200.07mm" wi="164.25mm" orientation="landscape" file="US08627446-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="244.86mm" wi="168.74mm" orientation="landscape" file="US08627446-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="194.14mm" wi="166.62mm" orientation="landscape" file="US08627446-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="191.35mm" wi="167.30mm" orientation="landscape" file="US08627446-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="249.26mm" wi="183.56mm" orientation="landscape" file="US08627446-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="243.16mm" wi="194.90mm" orientation="landscape" file="US08627446-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Technical Field</p>
<p id="p-0003" num="0002">This application relates to the field of storing data, and more particularly to the field of data storage services in a scalable high capacity system.</p>
<p id="p-0004" num="0003">2. Description of Related Art</p>
<p id="p-0005" num="0004">It has been estimated that the amount of digital information created, captured, and replicated in 2006 was 161 exabytes or 161 billion gigabytes, which is about three million times the information in all the books ever written. It is predicted that between 2006 and 2010, the information added annually to the digital universe will increase more than six fold from 161 exabytes to 988 exabytes. The type of information responsible for this massive growth is rich digital media and unstructured business content. There is also an ongoing conversion from analog to digital formats&#x2014;film to digital image capture, analog to digital voice, and analog to digital TV.</p>
<p id="p-0006" num="0005">The rich digital media and unstructured business content have unique characteristics and storage requirements that are different than structured data types (e.g. database records), for which many of today's storage systems were specially designed. Many conventional storage systems are highly optimized to deliver high performance I/O for small chunks of data. Furthermore, these systems were designed to support gigabyte and terabyte sized information stores.</p>
<p id="p-0007" num="0006">In contrast, rich digital media and unstructured business content have greater capacity requirements (petabyte versus gigabyte/terabyte sized systems), less predictable growth and access patterns, large file sizes, billions and billions of objects, high throughput requirements, single writer, multiple reader access patterns, and a need for multi-platform accessibility. Conventional storage systems have met these needs in part by using specialized hardware platforms to achieve required levels of performance and reliability. Unfortunately, the use of specialized hardware results in higher customer prices and may not support volume economics as the capacity demands grow large&#x2014;a differentiating characteristic of rich digital media and unstructured business content.</p>
<p id="p-0008" num="0007">Some of the cost issues have been addressed with tiered storage, which attempts to reduce the capital and operational costs associated with keeping all information on a single high-cost storage tier. However, tiered storage comes with a complex set of decisions surrounding technology, data durability, functionality and even storage vendor. Tiered storage solutions may introduce unrelated platforms, technologies, and software titles having non-zero operational costs and management requirements that become strained as the quantity of data increases.</p>
<p id="p-0009" num="0008">In addition, tiered storage may cause a data replica incoherence which results in multiple, disjoint copies of information existing across the tiers of storage. For example, storage management software handling data backup and recovery may make multiple copies of information sets on each storage tier (e.g. snapshots, backup sets, etc). Information Life-cycle Management (ILM) software dealing with information migration from one tier to another may create additional and often overlapping copies of the data. Replication software may make an extra copy of the information set within a particular tier in order to increase performance to accessing applications. Each of these functions typically runs autonomously from one another. The software may be unable to realize and/or take advantage of the multiple replicas of the same information set.</p>
<p id="p-0010" num="0009">In addition, for large scale unstructured information stores, it may be difficult to maintain a system and manage the environment as components fail. For example, a two petabyte information store may be comprised of eight thousand 250-gigabyte disk drives. Disk failures should be handled in a different manner in a system of this scale so that the system continues to operate relatively smoothly whenever one or only a few of the disk drives fail.</p>
<p id="p-0011" num="0010">The problems set forth above are addressed in published U.S. patent application no. 20090112789 titled POLICY BASED FILE MANAGEMENT, which is assigned to the assignee of the present application and is incorporated by reference herein. The system described therein provides a multi-petabyte offering for building cloud storage that combines massive scalability with automated data placement to deliver content and information services anywhere in the world. The system operates as a single entity using metadata and business policy constructs to direct content to locations and users.</p>
<p id="p-0012" num="0011">In some cases, it may be desirable to federate data from two or more clouds in a way that causes the data to appear to an end user as being from a single cloud. However, this may be difficult when attempting to join public and private clouds and/or joining clouds provided by different vendors that have different structures. In addition to any technical constraints, there may be security issues that need to be addressed when a private cloud containing sensitive data is combined with a public cloud.</p>
<p id="p-0013" num="0012">Thus, it would be desirable to provide a system that facilitates joining different clouds and addresses security issues associated with joining public and private clouds.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0014" num="0013">According to the system described herein, managing data includes storing metadata for the data on at least one of a plurality of servers that form a first data storage cloud and storing a first portion of the data on at least one of a plurality of servers that form a second data storage cloud that is separate from the first data storage cloud, where the data is accessed by first accessing the metadata to determine one or more locations for the data. A client that manages the data may access the first data storage cloud directly. The client may access the second data storage cloud through the first data storage cloud. The client may access the second data storage cloud directly. Managing data may also include storing a second portion of the data on at least one of a plurality of servers from the first data storage cloud, where the second portion of data is separate from the first portion of data where at least some of the second portion of data may be a mirror of the first portion of data. Managing data may also include storing a second portion of the data on at least one of a plurality of servers that form a third data storage cloud that is separate from the first data storage cloud and the second data storage cloud, where at least some of the second portion of data may be a mirror of the first portion of data.</p>
<p id="p-0015" num="0014">According further to the present invention, computer software that manages data is provided in a computer-readable medium. The software includes executable code that stores metadata for the data on at least one of a plurality of servers that form a first data storage cloud and executable code that stores a first portion of the data on at least one of a plurality of servers that form a second data storage cloud that is separate from the first data storage cloud, where the data is accessed by first accessing the metadata to determine one or more locations for the data. The computer software may also include executable code that stores a second portion of the data on at least one of a plurality of servers from the first data storage cloud, where the second portion of data is separate from the first portion of data where at least some of the second portion of data may be a mirror of the first portion of data. The computer software may also include executable code that stores a second portion of the data on at least one of a plurality of servers that form a third data storage cloud that is separate from the first data storage cloud and the second data storage cloud where at least some of the second portion of data may be a mirror of the first portion of data.</p>
<p id="p-0016" num="0015">According further to the system described herein, a data storage system includes at least one client, a first plurality of interconnected servers, coupled to the at least one client, that store metadata for the data, and a second plurality of interconnected servers that store at least a first portion of the data and are coupled to the at least one client and/or the first plurality of interconnected servers, where the second plurality of interconnected servers is separate from the first plurality of interconnected servers and where the data is accessed by first accessing the metadata to determine one or more locations for the data. The at least one client may access the second plurality of interconnected servers through the first plurality of interconnected servers. The at least one client may access the second plurality of interconnected servers directly. A second portion of the data, separate from the first portion of the data, may be stored on at least one of the first plurality of interconnected servers where at least some of the second portion of data may be a mirror of the first portion of data. The data storage system may also include, a third plurality of interconnected servers that store a second portion of the data that is separate from the first portion of the data, the third plurality of interconnected servers being coupled to the at least one client, the first plurality of interconnected servers, and/or the second plurality of interconnected servers, where at least some of the second portion of data may be a mirror of the first portion of data.</p>
<p id="p-0017" num="0016">According further to the system described herein, accessing data includes determining if the data is provided on a local group of servers or on an external group of servers, if the data is provided on a local group of servers, using a storage server to access the data, and, if the data is provided on an external group of servers, using a proxy server to access the data, where the proxy server interacts with an entity accessing the data in a manner that is substantially similar to interaction between the entity and the storage server. Using the proxy server may include initially providing an account id and a password. Following providing an account id and a password, using the proxy server may include using an account id and a shared secret. Using the proxy server may include using RSA ID tokens or cryptographic certificates. Metadata for the data may be provided on the local group of servers. At least some of the data may be provided on the external group of servers. The local group of servers may be a local data storage cloud. The external group of servers may be at least one external data storage cloud.</p>
<p id="p-0018" num="0017">According further to the present invention, computer software that accesses data is provided in a computer-readable medium. The software includes executable code that determines if the data is provided on a local group of servers or on an external group of servers, executable code that uses a storage server to access the data if the data is provided on a local group of servers, and executable code that uses a proxy server to access the data if the data is provided on an external group of servers, where the proxy server interacts with an entity accessing the data in a manner that is substantially similar to interaction between the entity and the storage server. Executable code that uses the proxy server may initially provide an account id and a password. Following providing an account id and a password, executable code that uses the proxy server may use an account id and a shared secret. Executable code that uses the proxy server may use RSA ID tokens or cryptographic certificates. Metadata for the data may be provided on the local group of servers. At least some of the data may be provided on the external group of servers. The local group of servers may be a local data storage cloud and the external group of servers may be at least one external data storage cloud.</p>
<p id="p-0019" num="0018">According further to the present invention, a data storage system includes at least one client, a local group of interconnected servers that are accessed by the client using a storage server, and an external group of servers that are accessed by the client using a proxy server, where the proxy server interacts with the client in a manner that is substantially similar to interaction between the client and the storage server. The at least one client may access the external group of servers through the local group of servers. The at least one client may access the external group of servers directly. Metadata may be provided on the local group of servers. At least some data corresponding to the metadata may be provided on the external group of servers.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1A</figref> is a diagram illustrating servers and clients according to an embodiment of the system described herein.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1B</figref> is a diagram illustrating a plurality of servers according to an embodiment of the system described herein.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. 2A</figref>, <b>2</b>B, <b>2</b>C, and <b>2</b>D are diagrams illustrating a client coupled to servers and to other network(s) according to embodiments of the system described herein.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating a client having server operations software, client software, and a plurality of interfaces therebetween according to an embodiment of the system described herein.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram illustrating a file having a metadata file object and a plurality of data file objects according to an embodiment of the system described herein.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram illustrating a metadata file object for a file according to an embodiment of the system described herein.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 6A</figref> is a diagram illustrating an example of a layout storage object tree for a file according to an embodiment of the system described herein.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 6B</figref> is a diagram illustrating an example of a layout storage object tree with multiple maps for a file according to an embodiment of the system described herein.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 6C</figref> is a diagram illustrating another example of a layout storage object tree with multiple maps and replication nodes for a file according to an embodiment of the system described herein.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 7A</figref> is a diagram illustrating mapping to a physical storage location in a local cloud according to an embodiment of the system described herein.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 7B</figref> is a diagram illustrating mapping to physical objects in an external cloud according to an embodiment of the system described herein.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 7C</figref> is a diagram illustrating a client using a storage server to access a physical storage location in a local cloud according to an embodiment of the system described herein.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 7D</figref> is a diagram illustrating a client using a proxy server to access physical objects in an external cloud according to an embodiment of the system described herein.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart illustrating obtaining data from a physical storage location indicated by a map according to an embodiment of the system described herein.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating a client obtaining a lease for and operating on a file according to an embodiment of the system described herein.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart illustrating a client reading data from a file according to an embodiment of the system described herein.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart illustrating a client writing data to a file according to an embodiment of the system described herein.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart illustrating steps performed by a client in connection with finding an alternative copy of data according to an embodiment of the system described herein.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart illustrating a client writing to synchronous mirrors for data according to an embodiment of the system described herein.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 14</figref> is a flow chart illustrating a client converting file names to object identifiers according to an embodiment of the system described herein.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 15</figref> is a diagram illustrating a client having an application in user memory address space and a having a VFS, file name services, kernel I/O drivers, layout manager, and a communication interface in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 16</figref> is a flow chart illustrating operation of a VFS at a client according to an embodiment of the system described herein.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 17</figref> is a diagram illustrating a client having an application, file name services, user level I/O drivers, and a layout manager in user memory address space and having a communication interface in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 18</figref> is a diagram illustrating a client having an application, a file presentation layer, user level I/O drivers, and a layout manager in user memory address space and having a VFS and communication interface and a kernel memory address space to user memory address space bridge in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 19</figref> is a diagram illustrating a client having an application in user memory address space and having file name services, kernel I/O drivers, a layout manager, and a communication interface in kernel address space according to an embodiment of the system described herein.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 20</figref> is a diagram illustrating a client having an application, file name services, user level I/O drivers, and a layout manager in user memory address space and having a communication interface in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 21</figref> is a diagram illustrating a client having an application, file name services, user level I/O drivers, and a layout manager in user memory address space and having a communication interface and a kernel memory address space to user memory address space bridge in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 22</figref> is a diagram illustrating a client having an application in user memory address space and having a Web Services module, kernel I/O drivers, a layout manager, and a communication interface in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 23</figref> is a diagram illustrating a client having an application, a Web Services layer, user level I/O drivers, and a layout manager in user memory address space and having a communication interface in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 24</figref> is a diagram illustrating a client having an application, a Web Services layer, user level I/O drivers, and a layout manager in user memory address space and having a communication interface and a kernel memory address space to user memory address space bridge in kernel memory address space according to an embodiment of the system described herein.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 25</figref> is a diagram illustrating a client having a plurality of applications, a Web Services layer, file name services, user level I/O drivers, and a layout manager in user memory address space and having a VFS, a communication interface and a kernel memory address space to user memory address space bridge in kernel memory address space according to an embodiment of the system described herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF VARIOUS EMBODIMENTS</heading>
<p id="p-0051" num="0050">Referring to <figref idref="DRAWINGS">FIG. 1A</figref>, a diagram illustrates servers <b>102</b> coupled to a plurality of clients <b>104</b>-<b>106</b>. Each of the clients <b>104</b>-<b>106</b> represents one or more processing devices that receives file services from the servers <b>102</b>. Each of the clients <b>104</b>-<b>106</b> may or may not be independent of other ones of the clients <b>104</b>-<b>106</b>. One or more of the clients <b>104</b>-<b>106</b> may be a multiprocessing/multiuser system and possibly have multiple independent users. The clients <b>104</b>-<b>106</b> represent any number of clients.</p>
<p id="p-0052" num="0051">The file services provided by the servers <b>102</b> may include data storage and retrieval as well as related operations, such as data mirroring, cloning, etc. The servers <b>102</b> may be implemented using a plurality of services (and/or interconnected file servers including SAN components) that are provided by interconnected processing and/or storage devices. In an embodiment herein, each of the clients <b>104</b>-<b>106</b> may be coupled to the servers <b>102</b> using the Web, possibly in conjunction with local TCP/IP connections. However, it is possible for one or more of the clients <b>104</b>-<b>106</b> to be coupled to the servers <b>102</b> using any other appropriate communication mechanism and/or combinations thereof to provide the functionality described herein.</p>
<p id="p-0053" num="0052">Referring to <figref idref="DRAWINGS">FIG. 1B</figref>, the servers <b>102</b> are shown in more detail as including a plurality of server groups <b>112</b>-<b>114</b>, where each of the groups <b>112</b>-<b>114</b> may include one or more individual servers that may be managed together as a single data storage cloud. The terms &#x201c;cloud&#x201d;, &#x201c;data storage cloud&#x201d;, etc. should be generally understood herein as an integrated group of servers. Different ones of the groups <b>112</b>-<b>114</b> (clouds) may be managed separately from each other. As discussed in more detail elsewhere herein, the groups may be interconnected to transfer information using any appropriate means, including being interconnected through one or more of the clients <b>104</b>-<b>108</b>, being interconnected through the Internet, a SAN, a private LAN or WAN, directly connected, and/or using any other appropriate interconnection to provide for information transfer as discussed elsewhere herein. For the discussion herein, one of the groups <b>112</b>-<b>114</b> may be a local cloud that is performing operations discussed herein while another one of the groups may be an external cloud that contains data accessed by the local cloud.</p>
<p id="p-0054" num="0053">Referring to <figref idref="DRAWINGS">FIG. 2A</figref>, the client <b>104</b> is shown as being coupled to the servers <b>102</b> and to one or more other network(s). The other network(s) may include a local area network (LAN). Thus, the client <b>104</b> may be a gateway between the servers <b>102</b> and a LAN to which one or more other devices (not shown) may also be coupled. The client <b>104</b> may act as a local file server to the one or more other devices coupled to the LAN by providing data from the servers <b>102</b> to the one or more other devices. Of course, it is possible for one or more other clients to simultaneous act as gateways to the same or different other network(s). Generally, for the discussion herein, reference to a particular one of the clients <b>104</b>-<b>106</b> may be understood to include reference to any or all of the clients <b>104</b>-<b>106</b> coupled to the servers <b>102</b> unless otherwise indicated.</p>
<p id="p-0055" num="0054">Referring to <figref idref="DRAWINGS">FIG. 2B</figref>, a diagram shows the client <b>104</b> being coupled to the servers <b>102</b> and one or more other network(s) (e.g., a LAN) in a configuration that is different from that shown in <figref idref="DRAWINGS">FIG. 2A</figref>. In the configuration of <figref idref="DRAWINGS">FIG. 2B</figref>, a router <b>118</b> is coupled between the servers <b>102</b> and the client <b>104</b>. The router <b>118</b> may be any conventional router that may be accessed by the client <b>104</b>. In the configuration of <figref idref="DRAWINGS">FIG. 2B</figref>, the client <b>104</b> uses only a single connection point to both the servers <b>102</b> and to the other network(s). In the configuration of <figref idref="DRAWINGS">FIG. 2B</figref>, the client <b>104</b> may act as local file server and gateway between the servers <b>102</b> and one or more other devices (not shown) coupled to the other network(s).</p>
<p id="p-0056" num="0055">Referring to <figref idref="DRAWINGS">FIG. 2C</figref>, the client <b>104</b> as shown as being used to interconnect two server groups: Group X and Group Y. The connections to Group X and/or Group Y may or may not include a router, such as the router <b>118</b> shown in <figref idref="DRAWINGS">FIG. 2B</figref> and may or may not be direct or through other network configurations, as described elsewhere herein. In the embodiment of <figref idref="DRAWINGS">FIG. 2C</figref>, the client <b>104</b> may communicate with either the Group X servers and/or the Group Y servers, but communication from the Group X servers to the Group Y servers is through the client <b>104</b>. One of Group X or Group Y may be a local cloud while the other is a foreign cloud.</p>
<p id="p-0057" num="0056">Referring to <figref idref="DRAWINGS">FIG. 2D</figref>, the client <b>104</b> as shown as being connected to two server groups: Group X and Group Y. The connections to Group X and/or Group Y may or may not include a router, such as the router <b>118</b> shown in <figref idref="DRAWINGS">FIG. 2B</figref> and may or may not be direct or through other network configurations, as described elsewhere herein. In the embodiment of <figref idref="DRAWINGS">FIG. 2D</figref>, the client <b>104</b> may communicate with the Group X servers and/or the Group Y servers. However, unlike the embodiment of <figref idref="DRAWINGS">FIG. 2C</figref>, the Group X servers may communication with the Group Y servers without having to go through the client <b>104</b>. Just as with <figref idref="DRAWINGS">FIG. 2C</figref>, one of Group X or Group Y may be a local cloud while the other is a foreign cloud.</p>
<p id="p-0058" num="0057">Of course, any other appropriate connection configurations may be used by any of the client <b>104</b>-<b>106</b> coupled to the servers <b>102</b>, the groups <b>112</b>-<b>114</b>, and/or to any other network(s) and/or devices. In some embodiments, the clients <b>104</b>-<b>106</b> may access the metadata provided on one of the groups <b>112</b>-<b>114</b> and then may use the metadata to access data stored on another one of the groups <b>112</b>-<b>114</b>. It is also possible for one of the groups <b>112</b>-<b>114</b> to access data from another one of the groups <b>112</b>-<b>114</b> by routing data requests through one of the clients <b>104</b>-<b>106</b>. In such a case, the requests/data may pass through the client without any interpretation by the client.</p>
<p id="p-0059" num="0058">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, the client <b>104</b> is shown in more detail having server operations software <b>122</b>, client software <b>124</b>, and an interface layer <b>125</b> that includes a plurality of interfaces <b>126</b>-<b>128</b> between the server operations software <b>122</b> and the client software <b>124</b>. The server operations software <b>122</b> facilitates the exchange of information/data between the client <b>104</b> and the servers <b>102</b> to provide the functionality described herein. In some cases, the server operations software <b>122</b> may contain proxy servers for accessing external clouds. The server operations software <b>122</b> is described in more detail elsewhere herein.</p>
<p id="p-0060" num="0059">The client software <b>124</b> represents any software that may be run on the client <b>104</b>, including application software, operating system software, Web server software, etc., that is not part of the server operations software <b>122</b> or the interface layer <b>125</b>. As described in more detail elsewhere herein, it is possible to have the client software <b>124</b> interact with the servers <b>102</b> through different ones of the interfaces <b>126</b>-<b>128</b> at the same time.</p>
<p id="p-0061" num="0060">The file services described herein may be implemented by the servers <b>102</b> using a set of file objects where a file that is accessed by the client software includes a metadata file object which points to one or more data file objects that contain the data for the file. Accessing the file would involve first accessing the metadata file object to locate the corresponding data file objects for the file. Doing this is described in more detail elsewhere herein. Note, however, that any appropriate file object mechanism may be used for the system described herein. Also, in some embodiments, a metadata file object may be provided on one of the groups of servers <b>112</b>-<b>114</b> (local cloud) while a corresponding one or more data file objects are provided on another one of the groups of servers <b>112</b>-<b>114</b> (external cloud).</p>
<p id="p-0062" num="0061">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, a file <b>130</b> is shown as including a metadata file object <b>132</b> and a plurality of data file objects. The metadata file object <b>132</b> contains information that points to each of the data file objects <b>134</b>-<b>136</b>. Accessing the file includes first accessing the metadata file object <b>132</b> and then using information therein to locate the appropriate one or more of the corresponding data file objects <b>134</b>-<b>136</b>. As discussed elsewhere herein, in some cases, the metadata file object <b>132</b> may be provided on a different one of the groups of servers <b>112</b>-<b>114</b> (local cloud) than one or more of the corresponding data file objects <b>134</b>-<b>136</b> (external cloud).</p>
<p id="p-0063" num="0062">Referring to <figref idref="DRAWINGS">FIG. 5</figref>, the metadata file object <b>132</b> is shown in more detail as including an object attributes section <b>142</b> and a Layout Storage Object (LSO) tree section <b>144</b>. The object attributes section contains conventional file-type attributes such as owner id, group id, access control list, last modification time, last access time, last change time, creation time, file size, and link count. Many of the attributes are self-explanatory. The last modification time corresponds to the last time that the data for the data objects <b>134</b>-<b>136</b> had been modified while the last change time corresponds to when the object metadata had last been changed. The link count indicates the number of other objects that reference a particular file (e.g., aliases that point to the same file). In an embodiment herein, a file and its related objects are deleted when the link count is decremented to zero.</p>
<p id="p-0064" num="0063">The LSO tree section <b>144</b> includes a data structure that includes one or more maps for mapping the logical space of the file to particular data file objects. The LSO tree section <b>144</b> may also indicate any mirrors for the data and whether the mirrors are synchronous or asynchronous. LSO trees and mirrors are described in more detail elsewhere herein.</p>
<p id="p-0065" num="0064">Referring to <figref idref="DRAWINGS">FIG. 6A</figref>, a simple LSO tree <b>160</b> is shown as including an LSO root node <b>162</b> and a single map <b>164</b>. The LSO root node <b>162</b> is used to identify the LSO tree <b>160</b> and includes links to one or more map(s) used in connection with the file corresponding to the LSO tree <b>160</b>. The map <b>164</b> maps logical locations within the file to actual data storage location. A process that accesses logical storage space of a file represented by the LSO tree <b>160</b> first uses the LSO root node <b>162</b> to find the map <b>164</b> and then uses the map <b>164</b> to translate logical addresses within the file to an actual data storage locations. As discussed in more detail elsewhere herein, the map <b>164</b> may point to physical storage space in the same one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>160</b>. Alternatively, the map <b>164</b> may point to objects in storage space in a different one of the server groups <b>112</b>-<b>114</b> than the one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>160</b>.</p>
<p id="p-0066" num="0065">Referring to <figref idref="DRAWINGS">FIG. 6B</figref>, an LSO tree <b>170</b> is shown as including an LSO root node <b>172</b> and a plurality of maps <b>174</b>-<b>176</b>. Each of the maps <b>174</b>-<b>176</b> may represent a different range of logical offsets within the file corresponding to the LSO tree <b>170</b>. For example, the map <b>174</b> may correspond to a first range of logical offsets in the file. The map <b>174</b> may map logical locations in the first range to a first actual storage device. The map <b>175</b> may correspond to a second range of logical offsets in the file, different than the first range, which may be mapped to a different actual storage device or may be mapped to the same actual storage device as the map <b>174</b>. Similarly, the map <b>176</b> may correspond to a third range of logical offsets in the file, different than the first range and the second range, which may be mapped to a different actual storage device or may be mapped to the same actual storage device as the map <b>174</b> and/or the map <b>175</b>. Note that some of the maps <b>174</b>-<b>176</b> may or may not point to physical storage space in the same one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>170</b> while other ones of the maps <b>174</b>-<b>176</b> may or may not point to objects in physical storage space in a different one of the server groups <b>112</b>-<b>114</b> than the one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>170</b>.</p>
<p id="p-0067" num="0066">Referring to <figref idref="DRAWINGS">FIG. 6C</figref>, an LSO tree <b>180</b> is shown as including an LSO root node <b>181</b> and a pair of replication nodes <b>182</b><i>a</i>, <b>182</b><i>b</i>, which indicate that the underlying data is to be mirrored (replicated) and which indicate whether the mirror is synchronous or asynchronous. Synchronous and asynchronous mirrors are discussed in more detail elsewhere herein. The node <b>182</b><i>a </i>has a plurality of children maps <b>183</b>-<b>185</b> associated therewith while the node <b>182</b><i>b </i>has a plurality of children maps <b>186</b>-<b>188</b> associated therewith. The replication nodes <b>182</b><i>a</i>, <b>182</b><i>b </i>indicate that the data corresponding to the maps <b>183</b>-<b>185</b> is a mirror of data corresponding to the maps <b>186</b>-<b>188</b>. In some embodiments, the nodes <b>182</b><i>a</i>, <b>182</b><i>b </i>may be implemented using a single node <b>189</b> to indicate replication.</p>
<p id="p-0068" num="0067">A process accessing a file having the LSO tree <b>180</b> would traverse the tree <b>180</b> and determine that data is mirrored. As discussed in more detail elsewhere herein, depending upon the type of mirroring, the process accessing the LSO tree <b>180</b> would either write the data to the children of both of the nodes <b>182</b><i>a</i>, <b>182</b><i>b </i>or would provide a message to another process/server (e.g., the servers <b>102</b>) that would perform the asynchronous mirroring. Mirroring is discussed in more detail elsewhere herein.</p>
<p id="p-0069" num="0068">Note that, just as with the maps <b>164</b>, <b>174</b>-<b>176</b>, discussed above, some of the maps <b>183</b>-<b>189</b> may or may not point to physical storage space in the same one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>180</b> while other ones of the maps <b>183</b>-<b>189</b> may or may not point to objects in physical storage space in a different one of the server groups <b>112</b>-<b>114</b> than the one of the server groups <b>112</b>-<b>114</b> that contains the physical storage space for the LSO tree <b>180</b>. Note also, however, that it may be advantageous in some instances to have the maps <b>183</b>-<b>185</b> for the replication node <b>182</b><i>a </i>point to objects on one of the server groups <b>112</b>-<b>114</b> while the maps <b>186</b>-<b>189</b> for the other replication node <b>182</b><i>b </i>point to physical objects on another one of the server groups <b>112</b>-<b>114</b>.</p>
<p id="p-0070" num="0069">In some embodiments, it may be beneficial to provide physical storage for all LSO trees on a first one of the server groups <b>112</b>-<b>114</b> (e.g. a local cloud) while providing physical storage for some or all of the corresponding data on a second, different, one of the server groups <b>112</b>-<b>114</b> (e.g., an external cloud). The first one of the server groups <b>112</b>-<b>114</b> may be a private cloud accessed by a particular organization while the second one of the server groups <b>112</b>-<b>114</b> is a public cloud that is accessed by many organizations, such as the Amazon S3 public cloud. Alternatively, the first one of the server groups <b>112</b>-<b>114</b> may be a public cloud while the second one of the server groups <b>112</b>-<b>114</b> is a private cloud or both the first and the second one of the server groups <b>112</b>-<b>114</b> could be public clouds or could be private clouds. The LSO trees may be provided on an external cloud. In addition, the data may be provided on separate clouds so that a first portion is provided on one cloud and a second (or subsequent) portion is provided on a second (or subsequent) cloud where each of the clouds that contain data are separate from each other.</p>
<p id="p-0071" num="0070">As described herein, the federation of a plurality of clouds allows the data to appear to a user (client) as if the data were provided on a single cloud. Note that since the LSO trees provide meaningful structure to the data, then maintaining the LSO trees in a private cloud provides some security even though some or all of the corresponding data may be provided in a public cloud. Note also that the physical storage space required for the LSO trees is expected to be much less than that required for the corresponding data. Accordingly, in instances where the LSO trees are provided in a private cloud while the corresponding data is provided in a public cloud, the physical storage space that needs to be maintained for the private cloud is much less than it would be otherwise while sensitive metadata may be maintained securely in the private cloud.</p>
<p id="p-0072" num="0071">Referring to <figref idref="DRAWINGS">FIG. 7A</figref>, the map <b>164</b> (described above in connection with <figref idref="DRAWINGS">FIG. 6A</figref>) is shown as pointing to a physical storage <b>192</b> that is provided on a local cloud. The map <b>164</b> may represent any of the other ones of the maps described herein and/or may represent any appropriate mapping mechanism for accessing physical storage on a local cloud. For example, the map <b>164</b> may contain an identifier for the physical storage <b>164</b> in addition to some type of offset and/or additional identifier to indicate a particular portion of the physical storage <b>192</b>. There may also be a length (or similar) value indicating an amount of data that corresponds to the map <b>164</b>. As discussed elsewhere herein, security for local cloud access may be handled by another mechanism, and thus it is not necessary for the map <b>164</b> to contain security information, although in some embodiments it may be useful to have security information be included with the map <b>164</b>.</p>
<p id="p-0073" num="0072">Referring to <figref idref="DRAWINGS">FIG. 7B</figref>, the map <b>164</b> is shown as pointing to physical storage (objects) in one or more external clouds. In such a case, the map <b>164</b> may contain or point to information used to access the objects in the external cloud <b>194</b>, which of course depends upon the particular access mechanism employed by the external cloud. For example, in some systems an account id and a password could be used. There may also be additional information, such as file/object identifier(s), subaccount information, etc. In an embodiment herein, once a connection to data in the external cloud <b>194</b> has been established, subsequent communications with the external cloud <b>194</b> may include at least some of the information (e.g., an account id) along with a shared secret. Other possible authentication/security techniques may be used, including RSA ID tokens, cryptographic certificates, etc.</p>
<p id="p-0074" num="0073">In an embodiment herein, the map <b>164</b>, as well as any other maps that are used, point to a single object provided on the external cloud <b>194</b> which corresponds to a single file in the file system of the external cloud <b>194</b>. In other embodiments, it is possible to provide multiple objects in a single file in the file system of the external cloud <b>194</b>. It is even possible to provide objects from different sources (e.g., different users, accounts, private clouds, etc.) into a single file. However, in that case, it may be necessary to handle any security issues that are created by this.</p>
<p id="p-0075" num="0074">Referring to <figref idref="DRAWINGS">FIG. 7C</figref>, the client <b>104</b> is shown using a storage server <b>196</b> to access the physical storage <b>192</b> containing data from the local cloud, as discussed elsewhere herein. The storage server <b>196</b> provides data to the client <b>104</b> and may represent any combination of software and hardware (including at least a portion of the server operations software <b>122</b> that is part of the client <b>104</b>, discussed above). The client <b>104</b> may represent any client or other device/mechanism that accesses the servers <b>102</b> to exchange data therewith. The storage server <b>196</b> may provide a specific interface to the client <b>104</b> and to software used by the client <b>104</b>.</p>
<p id="p-0076" num="0075">Referring to <figref idref="DRAWINGS">FIG. 7D</figref>, the client <b>104</b> is shown using a proxy server <b>198</b> to access the external clouds <b>194</b>. The proxy server <b>198</b> provides data to the client <b>104</b> and may represent any combination of software and hardware (including at least a portion of the server operations software <b>122</b> that is part of the client <b>104</b>, discussed above). The proxy server <b>198</b> may interact with the client <b>104</b> and to software used by the client <b>104</b> in a manner that is substantially similar (and possibly identical) to the interaction between the client <b>104</b> and the storage server <b>196</b>. The proxy server <b>198</b> may exchange information with the external cloud <b>194</b> using the REST (Representational State Transfer) protocol, which is known.</p>
<p id="p-0077" num="0076">In some embodiments, it may be possible to have data provided in a local cloud and for that data to point to additional data in an external cloud.</p>
<p id="p-0078" num="0077">In an embodiment herein, the map <b>164</b> includes a flag (or similar) to indicate whether the data pointed to by the map <b>164</b> is provided on a local cloud or an external cloud. In instances where the data is provided on a local cloud, the storage server <b>196</b> (or similar) is used. In instances where the flag indicates that the data is provided in an external cloud, the proxy server <b>198</b> is used. Once one of the servers <b>196</b>, <b>198</b> is selected, operation of the client <b>104</b> and related components is identical, or nearly so. Accordingly, the system provided herein may provide a federation of clouds that is transparent to a client accessing the servers <b>102</b>.</p>
<p id="p-0079" num="0078">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, a flow chart <b>200</b> illustrates in detail steps performed in connection with obtaining data from a physical storage location indicated by the map <b>164</b>. Processing begins at a first step where it is determined if the data is part of a local cloud or stored in an external cloud, as discussed elsewhere herein. If the data is not external, then control transfers from the test step <b>201</b> to a step <b>202</b> where the storage server <b>196</b> is used to access the data according to the information provided in the map <b>164</b>. Following the step <b>201</b>, processing is complete.</p>
<p id="p-0080" num="0079">If it is determined at the test step <b>201</b> that the data is located in an external cloud, then control transfers from the step <b>201</b> to a step <b>203</b> where an element used to iterate through the available proxy servers is set to point to the first one of the proxy servers. In an embodiment herein, each of the proxy servers may be provided with different capabilities so that, for example, one set of proxy servers can access external cloud X but not external cloud Y, another set of proxy servers can access external cloud Y but not external cloud X, yet another set can access both external clouds, etc. Furthermore, different proxy servers may have different capabilities such as speed, efficiency, cost, etc. that could make one proxy server more desirable than another in certain situations. Accordingly, there may be certain criteria imposed that render only some of the proxy servers suitable for accessing the external data. For example, is the external data is located on cloud X, then only proxy servers capable of accessing cloud X are suitable and satisfy the criteria. Note also that it is possible for a user/administrator to indicate that certain proxy servers are suitable/acceptable for certain types of accesses.</p>
<p id="p-0081" num="0080">Following the step <b>203</b> is a test step <b>204</b> where it is determined if the proxy server pointed to by the element used to iterate through proxy servers satisfies whatever criteria that is imposed. If so, then control passes from the test step <b>204</b> to a test step <b>205</b> where the proxy server is used to access the data. As discussed elsewhere herein, the proxy server may provide an account id and password and/or an account id and shared secret in connection with accessing the data. In an embodiment herein, the external cloud does not rely on any security characteristics imposed by the cloud/client from which the request is generated. Thus, for example, an administrative user for one cloud may still need to provide the same security information as any other user when accessing an external cloud. Note also that the security information needed to access the external cloud may be stored with the map <b>164</b>, pointed to by the map <b>164</b>, or stored in some other location. Following the step <b>205</b>, processing is complete.</p>
<p id="p-0082" num="0081">If it is determined at the test step <b>204</b> that the proxy server indicated by the iteration pointer does not satisfy the criteria, then control transfers from the test step <b>204</b> to a step <b>206</b> where the iteration pointer is incremented to point to the next proxy server. Following the step <b>206</b> is a test step <b>207</b> where it is determined if the pointer points past the end of the proxy servers (i.e., all of the available proxy servers have been examined to determine if any of them meet the specified criteria). If all of the proxy servers have not been examined, then control passes from the test step <b>207</b> back to the step <b>204</b> for another iteration. Otherwise, control passes from the step <b>207</b> to a step <b>208</b> where error processing is performed. The error processing performed at the step <b>208</b> can be any appropriate processing, including returning an indicator that the data is not available. Note that there could be many reason why the data is not available, including the criteria being too restrictive (e.g., requiring a transfer speed that is not available), one or more of the proxy servers being off-line, etc. Following the step <b>208</b>, processing is complete.</p>
<p id="p-0083" num="0082">For the system described herein, file objects are accessed by one of the clients <b>104</b>-<b>106</b> by first requesting, and obtaining, a lease from the servers <b>102</b>. The lease corresponds to the file objects for the particular file being accessed and to the type of access. A lease may be for reading, writing, and/or for some other operation (e.g., changing file attributes). In an embodiment herein, for objects corresponding to any particular file, the servers <b>102</b> may issue only one write lease at a time to any of the clients <b>104</b>-<b>106</b> but may issue multiple read leases simultaneously and may issue read lease(s) at the same time as issuing a write lease. However, in some embodiments it may be possible to obtain a lease for a specified logical range of a file for operations only on that range. Thus, for example, it may be possible for a first client to obtain lease for writing to a first logical range of a file while a second client may, independently, obtain a lease for writing to a second and separate logical range of the same file. The two write leases for different logical ranges may overlap in time without violating the general rule that the system never issues overlapping write leases for the same data.</p>
<p id="p-0084" num="0083">The lease provided to the clients <b>104</b>-<b>106</b> from the servers <b>102</b> includes security information (security token) that allows the client appropriate access to the data. The security token may expire after a certain amount of time. In an embodiment herein, a client accesses data by providing an appropriate security token for the data as well as client users/ownership information. Thus, for example, a user wishing to access data would first obtain a lease and then would provide the access request to the servers <b>102</b> along with the security token and information identifying the owner (client) accessing the data. The servers <b>102</b> would then determine whether the access requested by the client was permissible. After the lease expires (the security token expires), the user requests the lease again. Data security may be implemented using conventional data security mechanisms.</p>
<p id="p-0085" num="0084">After obtaining a lease for accessing a file, a client may then cache the corresponding metadata, including the LSO tree, into local storage of the client. The client may then use and manipulate the local cached version of the metadata and may use the metadata to obtain access to the data. As described in more detail elsewhere herein, a client does not directly modify metadata stored by the servers <b>102</b> but, instead, sends update messages to the servers <b>102</b> to signal that metadata for a file may need to be modified by the servers <b>102</b>.</p>
<p id="p-0086" num="0085">Referring to <figref idref="DRAWINGS">FIG. 9</figref>, a flowchart <b>210</b> illustrates steps performed by a client in connection with requesting a lease for a file (objects associated with a file) for performing operations thereon. Processing begins at a first step <b>212</b> where the client requests the lease for the file. As discussed in more detail elsewhere herein, a client requesting a lease includes specifying the type of access (e.g., read, write, etc.). Following the step <b>212</b> is a test step <b>214</b> where it is determined if the request has been granted. If not, then control transfers from the test step <b>214</b> to a step <b>216</b> where processing is performed in connection with the lease not being granted to the client. The particular processing performed at the step <b>216</b> may include, for example, providing an error message to the client process requesting access to the file corresponding to the lease and/or waiting for an amount of time and then retrying the request. Note that it is possible that a lease for a particular file is not available at one time is subsequently available at another time because, for example, the lease is released by another client in between the first request and the second request. In any event, any appropriate processing may be performed at the step <b>216</b>. Following the step <b>216</b>, processing is complete.</p>
<p id="p-0087" num="0086">If it is determined at the test step <b>214</b> that the lease requested at the step <b>212</b> has been granted, then control transfers from the test step <b>214</b> to a step <b>218</b> where the client performs an operation using the file for which the lease was granted. Operations performed at the step <b>218</b> include reading data and/or writing data. Different types of processing that may be performed at the step <b>218</b> are described in more detail elsewhere herein.</p>
<p id="p-0088" num="0087">Following the step <b>218</b> is a test step <b>222</b> where it is determined if the operations performed at the step <b>218</b> require an update. In some instances, a client may obtain a lease and perform operations that do not affect the file or the underlying file objects. For example, a client may acquire a lease for reading a file and the operation performed at the step <b>218</b> may include the client reading the file. In such a case, no update may be necessary since the file and corresponding file objects (metadata, data objects, etc.) have not changed. On the other hand, if the client obtains a lease for writing data the file and the operation performed at the step <b>218</b> includes writing data to the file, then the underlying file objects will have been changed and an update message needs to be sent the servers <b>102</b>. If it is determined at the test step <b>222</b> that an update is necessary, then control passes from the test step <b>222</b> to a step <b>224</b> where an update message is sent by the client to the servers <b>102</b>.</p>
<p id="p-0089" num="0088">Following the step <b>224</b>, or following the step <b>222</b> if no update is necessary, control passes to a test step <b>226</b> where it is determined if the client is finished with the file. In some instances, the client may perform a small number of operations on the file, after which the client would be finished with the file at the step <b>226</b>. In other cases, the client may be performing a series of operations and may not yet have completed all of the operations.</p>
<p id="p-0090" num="0089">If it is determined at the test step <b>226</b> that the client is not finished with the file, then control passes from the test step <b>226</b> to a test step <b>228</b> where it is determined if the lease for the file has expired. Note that a lease may be provided by the servers <b>102</b> to the client with a particular expiration time and/or the associated security token may expire. In addition, it may be possible for the servers <b>102</b> to recall leases provided to clients under certain circumstances. In either case, the lease may no longer be valid. Accordingly, if it is determined at the step <b>228</b> that the lease has expired (and/or has been recalled by the servers <b>102</b>), then control passes from the test step <b>228</b> back to the step <b>212</b> request the lease again. Otherwise, if the lease has not expired, then control passes from the test step <b>228</b> back to the step <b>218</b> to perform another iteration.</p>
<p id="p-0091" num="0090">If it is determined at the test step <b>226</b> that the client is finished with the file, then control passes from the test step <b>226</b> to a step <b>232</b> where the client releases the lease by sending a message to the servers <b>102</b> indicating that the client no longer needs the lease. Once the client releases the lease, it may be available for other clients. Following the step <b>232</b>, processing is complete.</p>
<p id="p-0092" num="0091">In an embodiment herein, data file objects may be indicated as having one of four possible states: current, stale, immutable, or empty. The current state indicates that the data object is up to date and current. The stale state indicates that the data is not valid but, instead, requires updating, perhaps by some other process. In some instances, the stale state may be used only in connection with mirror copies of data (explained in more detail elsewhere herein). Data may be stale because it is a mirror of other data that was recently written but not yet copied. The immutable state indicates that the corresponding data is write protected, perhaps in connection with a previous clone (snapshot) operation. The empty state indicates that no actual storage space has yet been allocated for the data.</p>
<p id="p-0093" num="0092">Referring to <figref idref="DRAWINGS">FIG. 10</figref>, a flow chart <b>240</b> illustrates steps performed by a client in connection with performing read operations after obtaining a read lease for a file. Processing begins at a first test step <b>242</b> where it is determined if the data object being read is in the current state. If not, then control transfers from the test step <b>242</b> to a step <b>244</b> where it is determined if the data object being read is in the immutable state. If it is determined at the step <b>244</b> that the data object being read is in the immutable state or if it is determined at the test step <b>242</b> that the data object being read is in the current state, then control transfers to a step <b>246</b> where the read operation is performed.</p>
<p id="p-0094" num="0093">A client may read file data by providing the appropriate data file object identifier to the servers <b>102</b> as well as providing appropriate security credentials. Accordingly, the read operation performed at the step <b>246</b> includes the client sending an appropriate request to the servers <b>102</b> and waiting for a result therefrom. Alternatively, if the file data is stored in a different one of the groups <b>112</b>-<b>114</b> than the processor performing the processing illustrated by the flow chart <b>240</b>, then performing a read operation at the step <b>246</b> may include providing a client ID, account info, and credentials to the different one of the groups <b>112</b>-<b>114</b>.</p>
<p id="p-0095" num="0094">Following the step <b>246</b> is a test step <b>248</b> where it is determined if the servers <b>102</b> have returned a result indicating that the data file object is unavailable. In some cases, a data file object that is otherwise current or immutable may nevertheless become unavailable. For example, the physical storage space that holds the data file object may become temporarily disconnected and/or temporarily busy doing some other operation or, if a data file object may be stored on a different one of the groups <b>112</b>-<b>114</b> that is unavailable. If it is determined at the test step <b>248</b> that the data file object is available, then control transfers from the test step <b>248</b> to a test step <b>252</b> where it is determined if the read operation was successful. If so, then control transfers from the test step <b>252</b> to a step <b>254</b> where the result of the read operation is returned to the process at the client that caused the read operation to be performed. The result may include the data that was read and a status indicator. Following the step <b>254</b>, processing is complete.</p>
<p id="p-0096" num="0095">If it is determined at the test step <b>252</b> that the read operation performed at the step <b>246</b> was not successful, then control transfers from the test step <b>252</b> to a step <b>256</b> where error processing is performed. The particular error processing performed at the step <b>256</b> is implementation dependent and may include, for example, reporting the error to a calling process and/or possibly retrying the read operation a specified number of times. Following the step <b>256</b>, processing is complete.</p>
<p id="p-0097" num="0096">If it is determined at the test step <b>244</b> that the data object being read is not in the immutable state, then control transfers from the test step <b>244</b> to a test step <b>258</b> where it is determined if the data object is in the stale state. If not, then, by virtue of the test steps <b>242</b>, <b>244</b>, <b>258</b> and process of elimination, the data object is in the empty state. In an embodiment herein, reading a data object in the empty state causes zeros to be returned to the calling process. Accordingly, if it is determined at the test step <b>258</b> that the data object is not in the stale state, then control transfers from the test step <b>258</b> to a step <b>262</b> where zeros are returned in response to the read operation. Following the step <b>262</b>, processing is complete.</p>
<p id="p-0098" num="0097">If it is determined at the test step <b>258</b> that the data file object is in the stale state, or if it is determined at the test step <b>248</b> that the data file object is not available, then control transfers to a test step <b>264</b> to determine if an alternative version of the data file object is available for reading. As discussed in more detail elsewhere herein, there may be multiple versions of the same data file objects that exist at the same time due to mirroring. Accordingly, if the data file object being read is in the stale state or otherwise unavailable, it may be possible to read a mirror copy of the data file object that may be in the current state. The test performed at the step <b>264</b> is described in more detail elsewhere herein.</p>
<p id="p-0099" num="0098">If it is determined at the test step <b>264</b> that an alternative version of the data file object is available, then control transfers from the test step <b>264</b> to a step <b>266</b> where the alternative version of the data file object is selected for use. Following the step <b>266</b>, control transfers back to the test step <b>242</b> for another iteration with the alternative data file object.</p>
<p id="p-0100" num="0099">If it is determined at the test step <b>264</b> that an alternative version of the data file object is not available, then control transfers from the test step <b>264</b> to a step <b>268</b> where the client process waits. In an embodiment herein, it may be desirable to wait for a data file object to become current and/or available. Following the step <b>268</b>, control transfers back to the step <b>242</b> for another iteration. Note that, instead of waiting at the step <b>268</b>, processing may proceed from the step <b>264</b> to the step <b>256</b> to perform error processing if there is no alternative data file object available. In other embodiments, it may be possible to perform the step <b>268</b> a certain number of times and then, if the data file object is still unavailable or in the stale state and there is no alternative data file object, then perform the error processing at the step <b>256</b>.</p>
<p id="p-0101" num="0100">Referring to <figref idref="DRAWINGS">FIG. 11</figref>, a flow chart <b>280</b> illustrates steps performed by a client in connection with performing write operations after obtaining a write lease for a file. Processing begins at a first test step <b>282</b> where it is determined if the data file object to which the write is being performed is in the immutable state. If so, then control transfers from the step <b>282</b> to a step <b>284</b> where new actual storage space is allocated for the data file object to avoid overwriting the immutable data. Allocating new storage space for a data object may include providing an appropriate request to the servers <b>102</b>. In instances where the file data is stored in a different one of the groups <b>112</b>-<b>114</b> than the processor performing the processing illustrated by the flow chart <b>280</b>, then allocating new storage space at the step <b>284</b> may include providing a client ID, account info, and credentials to the different one of the groups <b>112</b>-<b>114</b>. Following the step <b>284</b>, control transfers back to the step <b>282</b> to begin the processing for the write operation again.</p>
<p id="p-0102" num="0101">If it is determined at the step <b>282</b> that the data file object to which the write is being performed is not in the immutable state, then control transfers from the step <b>282</b> to a step <b>286</b> where it is determined if the data file object to which the write is being performed is in the stale state. If not, then control transfers from the test step <b>286</b> to a test step <b>288</b> where it is determined if the data file object to which the write is being performed is in the empty state. If so, then control transfers from the step <b>288</b> to the step <b>284</b>, discussed above, where new physical storage space is allocated. Following the step <b>284</b>, control transfers back to the step <b>282</b> to begin the processing for the write operation again.</p>
<p id="p-0103" num="0102">If it is determined at the step <b>288</b> that the data file object to which the write is being performed is not in the empty state, then control transfers from the test step <b>288</b> to a step <b>292</b> where the write operation is performed. Note that the step <b>292</b> is reached if the data file object to which the write operation is being performed is not in the immutable state, not in the stale state, and not in the empty state (and thus is in the current state). A client writes file data by providing the appropriate data file object location identifier to the servers <b>102</b> as well as providing appropriate security credentials. Accordingly, the write operation performed at the step <b>292</b> includes the client sending an appropriate request to the servers <b>102</b> and waiting for a result therefrom. As with the read operation, discussed above, if the file data is stored in a different one of the groups <b>112</b>-<b>114</b> than the processor performing the processing illustrated by the flow chart <b>280</b>, then performing a write operation at the step <b>292</b> may include providing a client ID, account info, and credentials to the different one of the groups <b>112</b>-<b>114</b>.</p>
<p id="p-0104" num="0103">Following the step <b>292</b> is a test step <b>294</b> where it is determined if the write operation performed at the step <b>292</b> was successful. If so, then control transfers from the test step <b>294</b> to a test step <b>296</b> where it is determined if there are synchronous mirrors of the data file object to which the write is being performed. The test performed at the step <b>296</b> may include, for example, determining if a parent node of the data file object in the file LSO tree indicates replication. If not, then control transfers from the test step <b>296</b> to a step <b>298</b> where an update (message) is sent to the servers <b>102</b> indicating that the write had been performed. Following the step <b>298</b>, processing is complete.</p>
<p id="p-0105" num="0104">If it is determined at the test step <b>296</b> that there are synchronous mirrors of the data file object to which the write is being performed, then control passes from the test step <b>296</b> to a step <b>302</b> where the data that was written at the step <b>292</b> is also written to the synchronous mirror(s). The processing performed at the step <b>302</b> is discussed in more detail elsewhere herein. Following the step <b>302</b>, control transfers to the step <b>298</b>, discussed above, where an update (message) is sent to the servers <b>102</b>. Following the step <b>298</b>, processing is complete.</p>
<p id="p-0106" num="0105">If it is determined at the test step <b>294</b> that the write operation performed at the step <b>292</b> was not successful, or if it is determined at the test step <b>286</b> that the data file object to which the write operation is being performed is in the stale state, then control transfers to a step <b>304</b> where the data file object to which the write is attempting to be performed is removed from the client's local copy of the LSO tree. At the end of the write operation illustrated by the flow chart <b>280</b>, the client may inform the servers <b>102</b> (at the step <b>298</b>) of the difficulty in writing to the data object so that the servers <b>102</b> can take appropriate action, if necessary.</p>
<p id="p-0107" num="0106">Following the step <b>304</b> is a test step <b>306</b> where it is determined if an alternative version of the data is available. As discussed in more detail elsewhere herein, there may be multiple versions of the same data file objects that exist at the same time due to mirroring. Accordingly, if the data file object to which the write operation is being performed is stale or otherwise cannot be written to, it may be possible to write to a mirror copy of the data. The test performed at the step <b>306</b> is like the test performed at the step <b>264</b> and is described in more detail elsewhere herein. If it is determined at the test step <b>306</b> that an alternative version of the data corresponding to the data file object is available, then control transfers from the test step <b>306</b> to a step <b>308</b> where the alternative version is selected for writing. Following the step <b>308</b>, control transfers back to the test step <b>282</b> for another iteration with the alternative data file object.</p>
<p id="p-0108" num="0107">If it is determined at the test step <b>306</b> that an alternative version of the data corresponding to the data file object is not available, then control transfers from the test step <b>306</b> to a step <b>312</b> to perform error processing if there is no alternative available. The particular error processing performed at the step <b>312</b> is implementation dependent and may include, for example, reporting the error to a calling process and/or possibly retrying the write operation a specified number of times before reporting the error. Following the step <b>312</b>, control transfers to the step <b>298</b>, discussed above, to send update information to the servers <b>102</b>. Following the step <b>298</b>, processing is complete.</p>
<p id="p-0109" num="0108">Referring to <figref idref="DRAWINGS">FIG. 12</figref>, a flow chart <b>320</b> illustrates in more detail steps performed in connection with the alternative available test step <b>264</b> of <figref idref="DRAWINGS">FIG. 10</figref> and/or the alternative available test step <b>306</b> of <figref idref="DRAWINGS">FIG. 11</figref>. Processing begins at a first test step <b>322</b> where it is determined if the file has any mirror data file objects at all. In some instances, a file may not use mirrors, in which case there would be no alternative copy available. Accordingly, if it is determined at the test step <b>322</b> that the file does not have any mirror data file objects, then control transfers from the test step <b>322</b> to a step <b>324</b> where a value is returned indicating that no alternative copies are available. Following the step <b>324</b>, processing is complete.</p>
<p id="p-0110" num="0109">If it is determined at the test step <b>322</b> that mirror copies are available, then control transfers from the test step <b>322</b> to a step <b>326</b> where a pointer is made to point to metadata for a first mirror data file object. For the processing discussed herein, a pointer may be used to iterate through metadata for mirror data file objects to find a useable data file object. Following the step <b>326</b> is a test step <b>328</b> where it is determined if the pointer is past the end of the list of mirror data file objects (has iterated through all of the metadata for mirror data file objects). If so, then control passes from the test step <b>328</b> to the step <b>324</b>, discussed above, to return a value that indicates that no alternatives are available.</p>
<p id="p-0111" num="0110">If it is determined at the test step <b>328</b> that the pointer is not past the end of a list of mirror data file objects, then control transfers from the test step <b>328</b> to a test step <b>332</b> where it is determined if the pointer points to metadata indicating that the corresponding data file object in a stale state. If so, then control transfers from the test step <b>332</b> to a step <b>334</b> where the pointer is made to point to metadata for the next data file object to be examined. Following the step <b>334</b>, control transfers back to the step <b>328</b>, discussed above, for another iteration. If it is determined at the test step <b>332</b> that the pointer does not point to metadata indicating that the corresponding data file object in the stale state, then control transfers from the test step <b>332</b> to a step <b>336</b> where the metadata indicating the data file object that is pointed to by the pointer is returned as an alternative data file object that may be used by the calling process. Following the step <b>336</b>, processing is complete.</p>
<p id="p-0112" num="0111">Referring to <figref idref="DRAWINGS">FIG. 13</figref>, a flow chart <b>350</b> illustrates in more detail operations performed in connection with the step <b>302</b> of the flow chart <b>280</b> of <figref idref="DRAWINGS">FIG. 11</figref> where data that has been written is copied to a number of synchronous mirrors (mirror data file objects). Processing begins at a first step <b>352</b> where a pointer that is used to iterate through metadata for the mirror data file objects is set to point to metadata for the first one of the mirror data file objects. Following the step <b>352</b> is a test step <b>354</b> where it is determined if the pointer used for iterating through the metadata for the mirror data file objects points past the end (i.e., if all of the mirror data file objects have been processed). If so, then processing is complete. Otherwise, control transfers from the test step <b>354</b> to a test step <b>356</b> where it is determined if the status indicated by metadata for the corresponding mirror data file object pointed to by the pointer indicates that the mirror data file object is current. If not, then control passes from the test step <b>356</b> to a test step <b>358</b> where it is determined if the status indicated by the metadata for the mirror data file object pointed to by the pointer indicates that the mirror data file object is in the stale state. If so, then control passes from the test step <b>358</b> to a step <b>362</b> where metadata for the mirror data file object is removed from the client's local copy of the LSO tree. In an embodiment herein, a synchronous mirror data file object should not be in a stale state and, if that occurs, it may indicate an error condition. Accordingly, following the step <b>362</b> is a step <b>364</b> where information about the stale mirror is sent to the servers <b>102</b>, which may perform recovery processing in response thereto.</p>
<p id="p-0113" num="0112">Note that if a mirror data file object is neither in the stale state nor in the current state, then the mirror data file object is either in the empty state or in the immutable state. In either case, it may be necessary to allocate new space for a data file object to which the data is to be written. Accordingly, if it is determined at the test step <b>358</b> that metadata indicates that the corresponding data file object is not in the stale state, then control passes from the test step <b>358</b> to a step <b>366</b> where new space is allocated for the mirror data file object (similar to the step <b>284</b> of <figref idref="DRAWINGS">FIG. 11</figref>, discussed above). Following the step <b>366</b> is a step <b>368</b> where the data that is being copied across synchronous mirror data file objects is written to the mirror data file object pointed to by the pointer used to iterate through the metadata for the mirror data file objects (similar to the step <b>292</b> of <figref idref="DRAWINGS">FIG. 11</figref>, discussed above). Note that the step <b>368</b> may also be reached from the test step <b>356</b> if it is determined that the mirror data file object is current. Following the step <b>368</b> is a step <b>372</b> where the pointer used to iterate through metadata for the mirror data file objects is made to point to the next one. Note that the step <b>372</b> is also reached following the step <b>364</b>. Following the step <b>372</b>, control transfers back to the test step <b>354</b> for another iteration.</p>
<p id="p-0114" num="0113">The system described herein may access file objects using object identifiers. In an embodiment herein, each file object that is stored among the servers <b>102</b>, including file objects from both local and external clouds, may be assigned a unique object identifier that identifies each file object and distinguishes each file object from other file objects in the system. However, many applications use a file naming structure and/or a hierarchical directory to access files and data therein. For example, a file name &#x201c;C:\ABC\DEF\GHI.doc&#x201d; indicates a file called &#x201c;GHI.doc&#x201d; stored in a sub-directory &#x201c;DEF&#x201d; that is stored in another directory &#x201c;ABC&#x201d; located on a root volume &#x201c;C&#x201d;. A nested directory structure may be provided by implementing directories as special files that are stored in other directories. In the example given above, the sub-directory &#x201c;DEF&#x201d; may be implemented as a file stored in the directory &#x201c;ABC&#x201d;.</p>
<p id="p-0115" num="0114">The system described herein may present to applications a conventional naming structure and directory hierarchy by translating conventional file names into file object identifiers. Such a translation service may be used by other services in connection with file operations. In an embodiment herein, each directory may include a table that correlates file names and sub-directory names with file object identifiers. The system may examine one directory at a time and traverse sub-directories until a target file is reached.</p>
<p id="p-0116" num="0115">Referring to <figref idref="DRAWINGS">FIG. 14</figref>, a flow chart <b>380</b> illustrates steps performed in connection with providing a file name translation service (file name service) that translates a conventional hierarchical file name into a file object identifier. The file name service may receive a conventional hierarchical file name as an input and may return an object identifier (or, in some cases, an error). Processing begins at a first step <b>382</b> where the file name service receives a file name, such as a conventional hierarchical file name. Following the step <b>382</b> is a test step <b>384</b> where it is determined if the syntax of the file name is OK. Mechanisms for checking the syntax of a hierarchical file name are know in the art and include, for example, checking that only appropriate characters have been used. If it is determined at the test step <b>384</b> that the syntax is not OK, then control transfers from the test step <b>384</b> to a step <b>386</b> where an error indicator (error message) is returned to the calling process. Following the step <b>386</b>, processing is complete.</p>
<p id="p-0117" num="0116">If it is determined at the test step <b>384</b> that the syntax of the provided name is OK, then control transfers from the test step <b>384</b> to a step <b>388</b> where the root directory is read. In an embodiment herein, all file name paths begin at a single common root directory used for all file objects stored in the servers <b>102</b>. In other embodiments, there may be multiple root directories where specification of a particular root directory may be provided by any appropriate means, such as using a volume identifier, specifically selecting a particular root directory, etc.</p>
<p id="p-0118" num="0117">Following the step <b>388</b> is a test step <b>392</b> where it is determined if the target file (or sub-directory that is part of the file name path) is in the directory that has been read. If not, then control passes from the test step <b>392</b> to the step <b>386</b>, discussed above, where an error is returned. In some embodiments, the file-not-found error that results from the test at the step <b>392</b> may be different from the syntax error that results from the test at the step <b>384</b>.</p>
<p id="p-0119" num="0118">If it is determined that the target file or a sub-directory that is part of the file name path is in the directory that has just been read, then control passes from the test step <b>392</b> to a test step <b>394</b> where it is determined if the directory that has just been read contains the target file (as opposed to containing a sub-directory that is part of the file name path). If so, then control passes from the test step <b>394</b> to a step <b>396</b> where the object identifier of the target file object is returned to the calling process. Following the step <b>396</b>, processing is complete.</p>
<p id="p-0120" num="0119">If it is determined at the test step <b>394</b> that the directory that has just been read contains a sub-directory that is part of the file name path, then control transfers from the test step <b>394</b> to a step <b>398</b> where the sub-directory is read so that the sub-directory becomes the directory being examined. In effect, processing at the step <b>398</b> traverses the chain of subdirectories to eventually get to the target file. Following the step <b>398</b>, control transfers back to the step <b>392</b>, discussed above, for a next iteration.</p>
<p id="p-0121" num="0120">Referring to <figref idref="DRAWINGS">FIG. 15</figref>, a diagram shows the client <b>104</b> as including user address memory space and kernel address memory space. In an embodiment herein, user address memory space is memory space that is generally used by user applications and related processes while kernel address memory space is memory space that is generally accessible only by system processes, such as an operating system kernel and related processes. As discussed in more detail herein, it is possible to have different portions of the system described herein reside and operate in the user memory space and/or the kernel memory space. In addition, it is possible for the client <b>104</b> to have multiple different interfaces to access file objects at the servers <b>102</b>.</p>
<p id="p-0122" num="0121">In <figref idref="DRAWINGS">FIG. 15</figref>, the client <b>104</b> is shown as including an application in the user memory address space and a virtual file system (VFS), file name services, kernel I/O drivers, a layout manager, and a communication interface in the kernel memory address space. The VFS is an abstraction layer on top of a more concrete file system. The purpose of a VFS is to allow client applications to access different types of concrete file systems in a uniform way. The VFS allows the application running on the client <b>104</b> to access file objects on the servers <b>102</b> without the application needing to understand the details of the underlying file system. The VFS may be implemented in a conventional fashion by translating file system calls by the application into file object manipulations and vice versa. For example, the VFS may translate file system calls such as open, read, write, close, etc. into file object calls such as create object, delete object, etc.</p>
<p id="p-0123" num="0122">The VFS may use the file name services, described elsewhere herein, to translate file names into object identifiers. The kernel I/O drivers provide an interface to low-level object level I/O operations. The kernel I/O drivers may be modeled after, and be similar to, Linux I/O drivers. The layout manager may perform some of the processing on LSO trees corresponding to files, as discussed in more detail elsewhere herein. The communication interface provides communication between the client <b>104</b> and the servers <b>102</b>.</p>
<p id="p-0124" num="0123">The communication interface may be implemented using any appropriate communication mechanism. For example, if the client <b>104</b> communicates with the servers <b>102</b> via an Internet connection, then the communication interface may use TCP/IP to facilitate communication between the servers <b>102</b> and the client <b>104</b>. In instances where objects from one of the groups <b>112</b>-<b>114</b> may be accessed by a client from another one of the groups <b>112</b>-<b>114</b>, the communication interface may include an appropriate mechanism to formulate data accesses to a different group. For example, the communication interface may include a mechanism for providing a client ID, account info, and credentials to the different one of the groups <b>112</b>-<b>114</b>.</p>
<p id="p-0125" num="0124">The application of <figref idref="DRAWINGS">FIG. 15</figref> may correspond to the client software <b>124</b> of <figref idref="DRAWINGS">FIG. 3</figref>. The VFS of <figref idref="DRAWINGS">FIG. 15</figref> may correspond to one of the interfaces <b>126</b>-<b>128</b> of <figref idref="DRAWINGS">FIG. 3</figref>. The file name services, kernel I/O drivers, layout manager, and communication interface of <figref idref="DRAWINGS">FIG. 15</figref> may correspond to the server operations software <b>122</b> of <figref idref="DRAWINGS">FIG. 3</figref>. Similar correlation between components of <figref idref="DRAWINGS">FIG. 3</figref> and other figures may also be found.</p>
<p id="p-0126" num="0125">Referring to <figref idref="DRAWINGS">FIG. 16</figref>, a flow chart <b>410</b> illustrates steps performed by a VFS to provide file services in connection with an application running on the client <b>104</b>. Processing begins at a first step <b>412</b> where a file system operation requested by an application may be translated into one or more object operations. For example, a file operation to open a file for reading may be converted to object operations that include obtaining an object lease for reading as discussed elsewhere herein. Following the step <b>412</b> is a step <b>414</b> where the VFS translates the file name into an object identifiers using the file name services discussed above in connection with <figref idref="DRAWINGS">FIG. 14</figref>. Operations that follow may be performed using the object identifiers obtained at the step <b>414</b>.</p>
<p id="p-0127" num="0126">Following the step <b>414</b> is a test step <b>416</b> where it is determined if the requested operation requires the LSO tree. As discussed elsewhere herein, operations such as read, write, etc. use LSO trees corresponding to file objects. However, some possible file operations may not require accessing a corresponding LSO tree. If it is determined at the test step <b>416</b> that the LSO tree is needed, then control transfers from the test step <b>416</b> to a step <b>418</b> where the VFS accesses the LSO manager to perform the necessary operations. For example, for a read operation, the LSO manager may perform processing like that illustrated in the flow chart <b>240</b> of <figref idref="DRAWINGS">FIG. 10</figref>. Following the step <b>418</b>, or following the step <b>416</b> if the LSO is not needed, is a step <b>422</b> where the operations are passed to low level kernel I/O drivers (e.g., via one or more appropriate API's). The kernel I/O drivers use the communication module to communicate between the client <b>104</b> and the servers <b>102</b> in connection with performing the requested operation(s). In instances where the application running on the client <b>104</b> has requested data and/or other information from the servers <b>102</b> (in the same or a different one of the groups <b>112</b>-<b>114</b>), the data and/or information may be passed back up through the communication interface, kernel I/O drivers, etc. to the VFS and ultimately to the application. As discussed elsewhere herein, the communication module may use and/or include one or more storage servers and/or one or more proxy servers.</p>
<p id="p-0128" num="0127">Referring to <figref idref="DRAWINGS">FIG. 17</figref>, the client <b>104</b> is shown as having an application, file name services, user level I/O drivers, and a layout manager all provided in user memory address space. The functionality of the VFS that was shown in <figref idref="DRAWINGS">FIG. 15</figref> and described above may be performed instead by library routines linked to the application, and thus are part of the application. These routines would provide functionality like that discussed above in connection with <figref idref="DRAWINGS">FIG. 16</figref>. Accordingly, it is the application that uses the file name services and makes calls to the user level I/O drivers (like the kernel I/O drivers) and to the layout manager. The communication interface is still maintained in the kernel memory address space.</p>
<p id="p-0129" num="0128">Note that, for the configuration of <figref idref="DRAWINGS">FIG. 15</figref>, modifications are provided by modifying system processes (the operating system), which is disadvantageous for a number of reasons. For example, if the client <b>104</b> is a multiuser computing system, then modifying the operating system may involve restarting the entire system and thus disrupting all of the users. In contrast, the configuration of <figref idref="DRAWINGS">FIG. 17</figref> is advantageous since it allows modification of the system in the application/user memory address space so that the operating system of the client <b>104</b> does not need to be modified. However, the configuration of <figref idref="DRAWINGS">FIG. 17</figref> does not use a VFS, and thus does not obtain the advantageous separation of the application from the file system that is provided by the VFS in <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0130" num="0129">Referring to <figref idref="DRAWINGS">FIG. 18</figref>, the client <b>104</b> is shown as having an application in user memory address space that accesses file objects through a VFS in kernel memory address space like that illustrated in <figref idref="DRAWINGS">FIG. 15</figref>. However, the file name services, I/O drivers, and the layout manager all reside in the user memory address space like the system illustrated in <figref idref="DRAWINGS">FIG. 17</figref>. The VFS communicates with components in the user memory address space through a bridge between kernel memory address space and user memory address space, such as a FUSE (or similar) interface. The bridge allows file system components to be provided in user memory space instead of kernel address memory space while still preserving the VFS in the kernel address memory space. Thus, the configuration illustrated by <figref idref="DRAWINGS">FIG. 18</figref> provides the advantages of using a VFS, as illustrated in the configuration of <figref idref="DRAWINGS">FIG. 15</figref>, along with the advantages of having file system components in the user address memory space, as illustrated in the configuration of <figref idref="DRAWINGS">FIG. 17</figref>.</p>
<p id="p-0131" num="0130">It is possible in some instances to have applications and/or other processing in the user memory address space of the client <b>104</b> access file objects directly, rather than through a file services layer like the VFS and/or equivalent functionality provided by user linkable libraries (e.g., the configuration illustrated in <figref idref="DRAWINGS">FIG. 17</figref>). Accessing file objects directly may include invoking routines that create objects, read objects, modify objects, delete objects, etc. Accessing file objects may also include, if the objects are stored in a different one of the groups <b>112</b>-<b>114</b>, providing a client ID, account info, and credentials to the different one of the groups <b>112</b>-<b>114</b>. If an application and/or other process in the user memory address space of the client <b>104</b> accesses file objects directly, the application would need to know how to interpret and/or manipulate the object data, which may not always be desirable. For example, an application that accesses file objects through the VFS may not need to take into account (or even know about) the structure of an LSO tree while an application that accesses objects directly may need to use the LSO tree. On the other hand, removing the file services layer may provide an opportunity for optimizations not otherwise available. Note that, since the servers <b>102</b> exchange object information/operations with the clients <b>104</b>-<b>106</b>, the servers <b>102</b> may not need to distinguish or be able to distinguish between application on the clients <b>104</b>-<b>106</b> using a file system interface (file services like the VFS) and those that are not.</p>
<p id="p-0132" num="0131">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, the client <b>104</b> is shown as including an application in the user memory address space and kernel I/O drivers, a layout manager, and file name services in the kernel memory address space. The configuration illustrated in <figref idref="DRAWINGS">FIG. 19</figref> is like that illustrated in <figref idref="DRAWINGS">FIG. 15</figref>, except that the VFS is not used. In the configuration illustrated in <figref idref="DRAWINGS">FIG. 19</figref>, the application could directly access the file name services, the kernel I/O drivers, and the layout manager. The communication interface in the kernel memory address space communicates with the servers <b>102</b> just as in other configurations. The direct access illustrated in <figref idref="DRAWINGS">FIG. 19</figref> allows applications to manipulate file objects (via, for example, appropriate API's) while access via the VFS (or similar) allows applications to accesses file objects indirectly through file system calls to the VFS.</p>
<p id="p-0133" num="0132">Referring to <figref idref="DRAWINGS">FIG. 20</figref>, the client <b>104</b> is shown as having an application, user level I/O drivers, a layout manager, and file name services all provided in user memory address space. The configuration shown in <figref idref="DRAWINGS">FIG. 20</figref> is like that shown in <figref idref="DRAWINGS">FIG. 17</figref>. However, as set forth above, the configuration of <figref idref="DRAWINGS">FIG. 17</figref> includes file service libraries that are linked into, and thus part of, the application. In contrast, in the configuration of <figref idref="DRAWINGS">FIG. 20</figref>, the application is not linked into libraries with extensive file services. Instead, like the application of the configuration illustrated in <figref idref="DRAWINGS">FIG. 19</figref>, the application in the configuration of <figref idref="DRAWINGS">FIG. 20</figref> uses minimal file services and, instead, uses and operates upon file objects directly using the user level I/O drivers, the layout manager and, if a file name translation is needed, the file name services.</p>
<p id="p-0134" num="0133">Referring to <figref idref="DRAWINGS">FIG. 21</figref>, the client <b>104</b> is shown as having an application in user memory address space and a bridge in the kernel memory address space. File name services, user level I/O drivers, and a layout manager are provided in user memory address space. However, unlike the configuration of <figref idref="DRAWINGS">FIG. 20</figref>, the application does not make direct calls to the file system components in the user memory address space. Instead, the application calls the file system components indirectly through the bridge. Just as with the configuration illustrated in <figref idref="DRAWINGS">FIG. 18</figref>, the configuration of <figref idref="DRAWINGS">FIG. 21</figref> advantageously locates file system components in the user memory address space and, at the same time, provides a kernel memory address space layer between the application and the file system components.</p>
<p id="p-0135" num="0134">Referring to <figref idref="DRAWINGS">FIG. 22</figref>, the client <b>104</b> is shown as having an application in user memory address space and a Web Services module in kernel memory address space. The application may be a Web server application or any application that handles communication with the Web. In an embodiment herein, the application allows communication with the client <b>104</b>, which acts as a Web server to other computing devices (not shown) that access the client <b>104</b> through a Web connection.</p>
<p id="p-0136" num="0135">The configuration illustrated in <figref idref="DRAWINGS">FIG. 22</figref> provides Web Services in a manner similar to the file services and/or file object access provided by other configurations. However, the Web Services receives requests/data via a Web data protocol, such as HTML, and provides responses/data also in a Web data protocol, which may be the same or different from the protocol used for requests/data. Operations handled by the Web Services may include object-level operations such as create object, delete object, read object, modify object, modify object metadata, etc. It is also possible to provide more file system level operations, via the Web Services, that open files, read data from files, etc. by including at least some of the functionality of the file services, described elsewhere herein, with the Web Services. The Web Services may present to the other computing devices a conventional well-known Web Services protocol, such as REST or SOAP, or may provide any other appropriate protocol.</p>
<p id="p-0137" num="0136">Referring to <figref idref="DRAWINGS">FIG. 23</figref>, the client <b>104</b> is shown as having an application, Web Services, user level I/O drivers, and a layout manager in user memory address space. The application may include a Web connection that allows communication with the client <b>104</b>, which acts as a Web server to other computing devices (not shown) that access the client <b>104</b> through the Web connection. The configuration of <figref idref="DRAWINGS">FIG. 23</figref> is like that of <figref idref="DRAWINGS">FIG. 17</figref> and <figref idref="DRAWINGS">FIG. 20</figref>. The advantages of the configuration shown in <figref idref="DRAWINGS">FIG. 23</figref> over the configuration shown in <figref idref="DRAWINGS">FIG. 22</figref> is that, generally, changes to the configuration shown in <figref idref="DRAWINGS">FIG. 23</figref> do not require reconfiguring kernel memory address space processes.</p>
<p id="p-0138" num="0137">Referring to <figref idref="DRAWINGS">FIG. 24</figref>, the <b>104</b> is shown as having an application, Web Services, user level I/O drivers, and a layout manager in user memory address space. The application may include a Web connection that allows communication with the client <b>104</b>, which acts as a Web server to other computing devices (not shown) that access the client <b>104</b> through the Web connection. A bridge is provided in the kernel memory address space. The configuration of <figref idref="DRAWINGS">FIG. 24</figref> has similar advantages to the configuration shown in <figref idref="DRAWINGS">FIG. 23</figref>, but also has the advantages provided by providing the bridge, discussed elsewhere herein.</p>
<p id="p-0139" num="0138">Referring to <figref idref="DRAWINGS">FIG. 25</figref>, the client <b>104</b> is shown as having a plurality of applications in user memory address space, each of which may use a different interface to access file objects of the servers <b>102</b>. Each of the applications shown in <figref idref="DRAWINGS">FIG. 25</figref> is meant to represent one or more applications. Accordingly, APP<b>1</b> may present one or more applications that access file objects at the servers <b>102</b> using a Web Services interface. The APP<b>1</b> application may include a Web connection that allows communication with the client <b>104</b>, which acts as a Web server to other computing devices (not shown) that access the client <b>104</b> through the Web connection. APP<b>2</b> may represent one or more applications that access file objects at the servers <b>102</b> using the VFS, and APP<b>3</b> may represent one or more applications that directly operate on file objects at the servers <b>102</b>. The different interfaces may operate at the client <b>104</b> at the same time.</p>
<p id="p-0140" num="0139">Note that may other combinations of configurations, including illustrated configurations, are possible so that the client <b>104</b> may simultaneously present to applications thereon different interfaces. For example, it is possible to combine the configurations illustrated in <figref idref="DRAWINGS">FIGS. 15</figref>, <b>19</b>, and <b>22</b> and/or combine the configurations of <figref idref="DRAWINGS">FIGS. 17</figref>, <b>20</b>, and <b>23</b>. Other combinations, including combinations of only two illustrated configurations, are also possible. The servers <b>102</b> provide the file objects to the clients <b>104</b> provided: 1) the requesting client has appropriate authorization for whatever operation is requested for the file objects; and 2) there is no conflict with any previous request. For example, in systems where only one client is allowed to write to an object at any one time, the servers <b>102</b> would not allow one of the clients <b>104</b>-<b>106</b> to modify a particular object while another one of the clients <b>104</b>-<b>106</b> is also modifying the object.</p>
<p id="p-0141" num="0140">The system described herein may be used with any server, or any group of servers, capable of providing file objects to clients. The particular form of the file objects may vary without departing from the spirit and scope of the invention. In some instances, the order of steps in the flow charts may be modified, where appropriate. The system described herein may be implemented using a computer program product/software provided in a computer-readable storage medium.</p>
<p id="p-0142" num="0141">While the invention has been disclosed in connection with various embodiments, modifications thereon will be readily apparent to those skilled in the art. Accordingly, the spirit and scope of the invention is set forth in the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of accessing data, comprising:
<claim-text>determining if the data is provided on a local group of servers or on an external group of servers;</claim-text>
<claim-text>if the data is provided on a local group of servers, using a storage server to access the data; and</claim-text>
<claim-text>if the data is provided on an external group of servers that are not directly accessible by an entity, using a proxy server to access the data using security information provided on at least one of the local group of servers, wherein the proxy server interacts with the entity accessing the data in a manner that is substantially similar to interaction between the entity and the storage server, wherein the data on the external group of servers is not provided on the local group of servers and wherein metadata for the data on the external group of servers is provided on the local group of servers and wherein the local group of servers is accessed without using the proxy server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method, according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the proxy server includes initially providing the security information as an account id and a password.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method, according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein, following providing an account id and a password, using the proxy server includes using an account id and a shared secret.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method, according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the proxy server includes using one of: RSA ID tokens and cryptographic certificates.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method, according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local group of servers is a local data storage cloud.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method, according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the external group of servers is at least one external data storage cloud.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. Computer software, provided in a non-transitory computer-readable medium, that accesses data, the software comprising:
<claim-text>executable code that determines if the data is provided on a local group of servers or on an external group of servers;</claim-text>
<claim-text>executable code that uses a storage server to access the data if the data is provided on a local group of servers; and</claim-text>
<claim-text>executable code that uses a proxy server to access the data if the data is provided on an external group of servers that are not directly accessible by an entity, the proxy server using security information provided on at least one of the local group of servers, wherein the proxy server interacts with the entity accessing the data in a manner that is substantially similar to interaction between the entity and the storage server, wherein the data on the external group of servers is not provided on the local group of servers and wherein metadata for the data on the external group of servers is provided on the local group of servers and wherein the local group of servers is accessed without using the proxy server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. Computer software, according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein executable code that uses the proxy server initially provides the security information as an account id and a password.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. Computer software, according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein, following providing an account id and a password, executable code that uses the proxy server uses an account id and a shared secret.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. Computer software, according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein executable code that uses the proxy server uses one of: RSA ID tokens and cryptographic certificates.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. Computer software, according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the local group of servers is a local data storage cloud and wherein the external group of servers is at least one external data storage cloud.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A data storage system, comprising:
<claim-text>at least one client;</claim-text>
<claim-text>a local group of interconnected servers that are accessed by the client using a storage server; and</claim-text>
<claim-text>an external group of servers, not directly accessible by the client, that are accessed by the client using a proxy server that uses security information provided on at least one of the local group of servers, wherein the proxy server interacts with the client in a manner that is substantially similar to interaction between the client and the storage server and wherein the data on the external group of servers is not provided on the local group of servers and metadata for the data on the external group of servers is provided on the local group of servers and wherein the local group of servers is accessed by the client without using the proxy server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A data storage system, according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the at least one client accesses the external group of servers through the local group of servers.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A data storage system, according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the at least one client accesses the external group of servers directly.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method, according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein metadata for data provided on the external group of servers is provided on the local group of servers.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. Computer software, according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein metadata for data provided on the external group of servers is provided on the local group of servers.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A data storage system, according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein metadata for data provided on the external group of servers is provided on the local group of servers.</claim-text>
</claim>
</claims>
</us-patent-grant>

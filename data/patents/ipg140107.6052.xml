<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627175-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627175</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12891490</doc-number>
<date>20100927</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>416</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>11</class>
<subclass>C</subclass>
<main-group>29</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714763</main-classification>
<further-classification>714773</further-classification>
</classification-national>
<invention-title id="d2e53">Opportunistic decoding in memory systems</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7023735</doc-number>
<kind>B2</kind>
<name>Ban et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7518913</doc-number>
<kind>B2</kind>
<name>Wang et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7558109</doc-number>
<kind>B2</kind>
<name>Brandman et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7751237</doc-number>
<kind>B2</kind>
<name>Alrod et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7757153</doc-number>
<kind>B2</kind>
<name>Hwang et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7843736</doc-number>
<kind>B2</kind>
<name>Kang et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0013165</doc-number>
<kind>A1</kind>
<name>Ban</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0028875</doc-number>
<kind>A1</kind>
<name>Avraham et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0086239</doc-number>
<kind>A1</kind>
<name>Litsyn et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2007/0283227</doc-number>
<kind>A1</kind>
<name>Sharon et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0270730</doc-number>
<kind>A1</kind>
<name>Lasser et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0282319</doc-number>
<kind>A1</kind>
<name>No et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0319868</doc-number>
<kind>A1</kind>
<name>Sharon et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0020604</doc-number>
<kind>A1</kind>
<name>Cornwell et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2010/0088575</doc-number>
<kind>A1</kind>
<name>Sharon et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2010/0091535</doc-number>
<kind>A1</kind>
<name>Sommer et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2010/0118608</doc-number>
<kind>A1</kind>
<name>Song et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2010/0131697</doc-number>
<kind>A1</kind>
<name>Alrod et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2010/0199149</doc-number>
<kind>A1</kind>
<name>Weingarten et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714773</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2010/0223538</doc-number>
<kind>A1</kind>
<name>Sakurada</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714801</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2011/0231738</doc-number>
<kind>A1</kind>
<name>Horisaki</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714773</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2011/0280084</doc-number>
<kind>A1</kind>
<name>Radke et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>36518521</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2012/0079355</doc-number>
<kind>A1</kind>
<name>Patapoutian et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>WO</country>
<doc-number>WO2007132453</doc-number>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>WO</country>
<doc-number>WO2007132457</doc-number>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>WO</country>
<doc-number>WO2008026203</doc-number>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>WO</country>
<doc-number>WO2008053472</doc-number>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>File history for U.S. Appl. No. 12/891,475.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>U.S. Appl. No. 12/891,475, filed Sep. 27, 2010, Patapoutian et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Lee et al., &#x201c;Drain Read Disturb Assessment of NOR Flash Memory&#x201d;, IEEE, 2008, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714763</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714773</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>15</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120079355</doc-number>
<kind>A1</kind>
<date>20120329</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Patapoutian</last-name>
<first-name>Ara</first-name>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rub</last-name>
<first-name>Bernardo</first-name>
<address>
<city>Sudbury</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Buch</last-name>
<first-name>Bruce D.</first-name>
<address>
<city>Westborough</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Patapoutian</last-name>
<first-name>Ara</first-name>
<address>
<city>Hopkinton</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Rub</last-name>
<first-name>Bernardo</first-name>
<address>
<city>Sudbury</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Buch</last-name>
<first-name>Bruce D.</first-name>
<address>
<city>Westborough</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hollingsworth Davis, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Seagate Technology LLC</orgname>
<role>02</role>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chaudry</last-name>
<first-name>M. Mujtaba K</first-name>
<department>2112</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Approaches for decoding data read from memory cells of a nonvolatile, solid state memory involve attempting to decode hard data using a hard decoding process prior to a time that soft data is available to the decoder. The hard data includes information about the digital symbols stored in the memory cells without data confidence information. The soft data includes information about the digital symbols stored in the memory cells and data confidence information. In response to the hard decoding process failing to achieve convergence, after the soft data becomes available to the decoder, the soft data is decoded using a soft decoding process. The decoder generates an output of the decoded data after the hard decoding process or the soft decoding process achieves convergence.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="175.34mm" wi="179.24mm" file="US08627175-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="264.67mm" wi="183.30mm" orientation="landscape" file="US08627175-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="236.47mm" wi="177.55mm" file="US08627175-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="250.53mm" wi="205.06mm" file="US08627175-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="175.60mm" wi="185.84mm" file="US08627175-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="203.12mm" wi="180.09mm" file="US08627175-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="249.26mm" wi="194.82mm" file="US08627175-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="185.84mm" wi="132.67mm" file="US08627175-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="231.99mm" wi="208.87mm" file="US08627175-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="242.23mm" wi="180.09mm" file="US08627175-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="228.09mm" wi="173.65mm" file="US08627175-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">SUMMARY</heading>
<p id="p-0002" num="0001">Various embodiments described in this disclosure are generally directed to methods, devices, and systems that use opportunistic decoding to decode data stored in non-volatile solid state memory cells.</p>
<p id="p-0003" num="0002">Methods of decoding data read from memory cells of a nonvolatile, solid state memory may involve attempting to decode hard data using a hard decoding process prior to a time that soft data is available to the decoder. In response to the hard decoding process failing to achieve convergence, after the soft data becomes available to the decoder, the soft data is decoded using a soft decoding process. The hard data includes information about the digital symbols stored in the memory cells without data confidence information. The soft data includes information about the digital symbols stored in the memory cells and data confidence information. In some cases, one or both of the hard decoding process and the soft decoding process may be low density parity check (LDPC) decoding processes. The decoder generates an output of the decoded data after the hard decoding process or the soft decoding process achieves convergence.</p>
<p id="p-0004" num="0003">The hard data can be acquired from an initial read operation of the memory cells that uses an initial reference voltage. The soft data may be determined using information obtained from an additional read of the memory cells that uses an additional reference voltage.</p>
<p id="p-0005" num="0004">In some cases, a request to acquire information used to determine the soft data and/or a request to determine the soft data is made only if the hard decoding process fails to achieve convergence. In some cases, a request for information used to determine the soft data and/or a request to determine the soft data and/or initiation of the soft decoding process occurs independently of the success or failure of the hard decoding process to achieve convergence. If the soft decoding process fails to achieve convergence, an additional soft decoding process operating on additional soft data may be implemented, for example.</p>
<p id="p-0006" num="0005">In some scenarios, a request to acquire information used to determine the soft data made before the hard decoding process has successfully or unsuccessfully concluded. The acquisition of the information using to determine the soft data is terminated in response to the hard decoding process achieving convergence. Similarly, a request to determine the soft data and/or the soft decoding process itself may be initiated before the hard decoding process has successfully or unsuccessfully concluded. The soft data determination process and/or the soft decoding process are terminated if those processes have begun and the hard decoding process achieves convergence.</p>
<p id="p-0007" num="0006">One or both of the hard decoding process and the soft decoding process may include a plurality of decoding subprocesses, each of the decoding subprocesses capable of independently achieving convergence. Each of the decoding subprocess may test a different decoding hypothesis and/or implement a different decoding algorithm. All of the decoding subprocesses may operate concurrently, all of the decoding subprocesses may operate sequentially, or some may operate concurrently and some sequentially.</p>
<p id="p-0008" num="0007">In some cases, all of the subprocesses operate on the same input data, and, in other cases, the decoding subprocesses operate on different input data. For example, one of the decoding subprocesses may operate on hard data and another of the decoding subprocesses may operate on soft data. For example, one of the decoding subprocesses may operate on soft data determined from a first source of information and another of the decoding subprocesses may operate on second soft data determined from a second source of information.</p>
<p id="p-0009" num="0008">A solid state memory device may include a decoder having input circuitry configured to receive hard data and soft data. The decoder circuitry opportunistically attempts to decode the data using a hard decoding process operating on the hard data during a time that the soft data is not yet available to the decoder circuitry. In response a failure of the hard decoding process to achieve convergence, the decoder circuitry implements a soft decoding process operating on the soft data after the soft data becomes available to the decoder. Output circuitry is configured to output the decoded data obtained from the hard decoding process or the soft decoding process.</p>
<p id="p-0010" num="0009">In various scenarios, the control circuitry may generate a request for information used to determine the soft data in response to the hard decoding process failing to achieve convergence or may generate a request for information used to determine the soft data independently of whether or not the hard decision decoding process fails to achieve convergence. The control circuitry may generate a request for information used to determine the soft data before the hard decoding process achieves convergence and may cancel the request for the information in response to the hard decoding process achieving convergence.</p>
<p id="p-0011" num="0010">A solid state memory device may include solid state memory cells and a detector configured to perform read operations to read data stored in the memory cells. The detector may output hard data including information about the data read from the memory cells without confidence information. Soft information circuitry is configured to generate soft data that includes information about the data read from the memory cells and confidence information</p>
<p id="p-0012" num="0011">The soft information circuitry may be configured to determine the soft data using one or more of the following sources of information: noise statistics of the memory cell, information acquired during additional read operations, the bit error rate, the significance of the bit being read, e.g. whether the bit is a most significant bit (MSB) or a least significant bit (LSB), characterization of the threshold voltage distribution of the memory cells from measurements of memory cell threshold voltages, estimation of the threshold voltage distribution based on operational history of the memory cells, which includes, for example, write operation parameters, retention time, number of erase/write cycles, number of cold write cycles, the operating temperature of the device and/or other factors.</p>
<p id="p-0013" num="0012">Methods of decoding data read from memory cells of a solid state memory device, may involve implementing multiple decoding processes that operate concurrently to decode data read from the memory cells. Each of the multiple decoding processes is capable of independently decoding the data to convergence. Each of the multiple decoding processes may implement a different algorithm to decode the data and/or each of the multiple decoding processes may test a different decoding hypothesis. An output of the decoded data can be generated from the result of the decoding processes that is first-in-time to achieve convergence. After the first-in-time decoding process achieves convergence, a signal is generated to stop decoding processes that have not yet achieved convergence.</p>
<p id="p-0014" num="0013">In some cases the decoding processes may operate on the same input data. In some cases, each of the decoding processes may operate on different input data. For example, one of the decoding processes may operate on hard data and another of the decoding processes may operate on soft data. As another example, one of the decoding processes may operate on soft data determined from a first source of information and another of the decoding processes may operate on soft data determined from a second source of information.</p>
<p id="p-0015" num="0014">These and other features can be understood in view of the following detailed discussion and the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a memory system;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a process of decoding data read from memory cells;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3A</figref> depicts idealized threshold voltage distributions for a multi level cell memory capable of storing two bits per memory cell;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3B</figref> depicts noisy threshold voltage distributions that overlap each other;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref> illustrates reference voltages that are shifted from nominal reference voltages by a set amount;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> illustrates voltage distributions that have been shifted and/or distorted due to charge leakage, soft write, and/or disturb effects;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. 6A and 6B</figref> illustrate shifting a reference voltage for an initial or additional read operation;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7</figref> is a flow graph illustrating a process that generates a request for soft data after conclusion of a hard decoding process;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a process that requests both hard data and soft data before the conclusion of a successful or unsuccessful hard decoding process;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a process wherein the decoder opportunistically attempts to decode a first type of soft data before attempting to decode a second type of soft data;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 10</figref> is a flow diagram of a process that includes multiple opportunistic attempts to decode the data;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate various configurations of decoder circuitry and control circuitry that may be used to opportunistically decode first received data before later received data is available to the decoder; and</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 12</figref> illustrates decoding subprocesses used to implement multiple decoding algorithms and/or to test multiple decoding hypotheses.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0029" num="0028">Solid state, non-volatile memory cells are capable of storing data in the form of stored charge retained in transistor memory cells. Data stored in the memory cells can be read by sensing the analog threshold voltage of the transistor which corresponds to the amount of stored charge. In some cases, the memory cells may include a floating gate that is surrounded by dielectric which allows the charge to be stored and retained on the floating gate. Other mechanisms for storing charge in non-volatile memory cells are known, such as storage in traps within the nitride layer of silicon oxide nitride oxide (SONOS) transistors, for example. Errors in the data read from non-volatile memory cells may arise from various sources, including noise during the read and/or write operations of the memory cells, charge leakage from the memory cells, and/or other disturbances that result in charge loss or charge gain.</p>
<p id="p-0030" num="0029">Errors present in data read from memory cells can often be identified and/or corrected in decoder circuitry using an error correcting code (ECC). Some decoders implement hard decoding processes that only take into account hard data, i.e., the digital symbols identified by performing a read operation of the memory cells without using confidence information that estimates the reliability of the data read from the memory cells.</p>
<p id="p-0031" num="0030">Soft data includes information about the digital symbols read from the memory cells and also includes data confidence information. The data confidence information provides a reliability estimate that the digital symbols read from the memory cells correspond to the data that was encoded for storage in the memory cells. Confidence information may be determined from a variety of sources that yield additional information about the data read from the memory cell as discussed in more detail below. For example, the data confidence information may be determined from an additional read operation of the memory cells that uses a reference voltage that is shifted from the reference voltage used in the initial read operation. As another example, the data confidence information may be determined from error probabilities based on channel noise characteristics.</p>
<p id="p-0032" num="0031">In some implementations, the soft data is expressed as the log likelihood ratio (LLR). For each data bit, b<sub>i</sub>, the LLR can be defined based on the probability ratio p(b<sub>i</sub>=0|y)/p(b<sub>i</sub>=1|y) where p(b<sub>i</sub>=0|y) is the probability that bit b<sub>i </sub>is a 0 and p(b<sub>i</sub>=1|y) is the probability that bit b<sub>i </sub>is a 1. The LLR for each bit may be expressed in terms of a signed number. For example, the signed numbers can range from +10 to &#x2212;10. The sign of the number represents the likely state of the bit, with a positive sign representing the logic state 0 and a negative sign representing the logic state 1. The magnitude of the number represents the degree of confidence in the estimated logic state. For example, a +1 output from the decoder can indicate that the bit is estimated to be a logic zero, but confidence is low. A +5 can indicate that the bit is estimated to be a logic zero and a +10 can represent that the bit is estimated to be logic zero with high confidence. A &#x2212;4 indicates that the bit is probably a logic one.</p>
<p id="p-0033" num="0032">Some decoders, such as Low Density Parity Check (LDPC) decoders, are capable of implementing soft decoding processes that operate on soft data. LDPC decoders are also capable of implementing hard decoding processes that operate on hard data. For example, LDPC decoders, which are usually designed to handle soft data, can also handle hard data using a lookup table that converts the soft data to the high confidence values. Using these high confidence values, the LDPC decoding process for hard decoding can be identical to the LDPC soft decoding process.</p>
<p id="p-0034" num="0033">Examples described in this disclosure involve opportunistically attempting to decode the data read from the memory cells using hard data before soft data is available to be decoded. For example, memory controller circuitry may request both hard data and soft data before starting the decoding, but, because the soft data takes longer to obtain than the hard data, there is period of time that can be used opportunistically to attempt to decode the data read from the memory cells using the hard data. If the hard decoding process fails to achieve convergence, after the soft data becomes available, a soft decoding process operating on the soft data is implemented.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a memory system <b>100</b> including a solid state memory <b>105</b> comprising a number of memory cells <b>110</b> that can be arranged in data units such as blocks and/or pages. A host processor <b>117</b> may be coupled to the memory <b>105</b> so that data transferred from the host processor <b>117</b> can be stored in the memory <b>105</b> and data read from the memory <b>105</b> can be transferred to the host processor <b>117</b>. Before the data is stored in the memory, the data is typically encoded using an ECC by encoder <b>120</b>. A modulator <b>121</b> generates the electrical signals required to cause the encoded data to be stored in the memory cells <b>110</b> of the memory <b>105</b>.</p>
<p id="p-0036" num="0035">A detector/demodulator <b>112</b> includes circuitry to perform read operations of the memory cells <b>110</b>. A read operation of a memory cell involves determining the analog threshold voltage of each memory cell, which is related to the amount of charge stored by the memory cell, and converting the analog threshold voltage into a digital symbol. The solid state memory <b>105</b> may comprise single level cells (SLC) or multilevel cells (MLC). A SLC memory is capable of storing one bit per memory cell, whereas an MLC memory is capable of storing digital symbols of two, three, or more bits per memory cell.</p>
<p id="p-0037" num="0036">The detector <b>112</b> is capable of reading the data stored in the memory cells <b>110</b> and providing a hard data output representing the data. The hard data output includes digital symbols read from the memory cells without confidence information. Soft information circuitry <b>114</b> may be provided in the detector <b>112</b> or elsewhere. The soft information circuitry <b>114</b> is capable of providing a soft data output that includes information about the digital symbols read from the memory cells and also includes data confidence information. The soft data output can be provided in the form of an LLR as discussed above. A number of sources can provide the detector with the additional information used to derive the confidence information as described in more detail below.</p>
<p id="p-0038" num="0037">The decoder <b>115</b> is capable of implementing a number of decoding processes, represented in <figref idref="DRAWINGS">FIG. 1</figref> as decoding process X <b>131</b> and decoding process Y <b>132</b>. Although only two decoding processes <b>131</b>, <b>132</b> are shown in <figref idref="DRAWINGS">FIG. 1</figref>, any number of decoding processes can be implemented. Each of the decoding processes <b>131</b>, <b>132</b> is capable of independently decoding data and achieving convergence of the data if the errors in the data are not prohibitive. Each of the decoding processes <b>131</b>, <b>132</b> may operate on different input data. In some cases, one of the decoding processes <b>131</b>, <b>132</b> is a hard decoding process that operates on hard data and another one of the decoding processes <b>132</b>, <b>131</b> is a soft decoding process that operates on soft data. In some cases, both of the decoding processes <b>131</b>, <b>132</b> are soft decoding processes that operate on soft data derived from different sources. In some cases, each of decoding processes <b>131</b>, <b>132</b> implements a different decoding algorithm and/or tests a different hypothesis for the decoding. The decoding processes <b>131</b>, <b>132</b> may implement different decoding algorithms and/or use different hypotheses while operating on the same input data, or each decoding process <b>131</b>, <b>132</b> may operate on different input data.</p>
<p id="p-0039" num="0038">The decoder <b>115</b> receives the hard and/or soft data via the decoder input circuitry <b>116</b> which may include a data buffer, for example. In a first example, the decoder <b>115</b> may opportunistically attempt to decode the hard data before the soft data is available to the decoder <b>115</b>. In a second example, the decoder <b>115</b> may opportunistically attempt to decode a first type of soft data determined from a first source before a second type of soft data determined from a second source is available to the decoder <b>115</b>. If the opportunistic attempt to decode the hard data is unsuccessful, when the soft data (in the first example above) or the second type of soft data (in the second example above) becomes available, the decoder decodes the soft data. In some cases, the decoder may wait to determine if the attempt to opportunistically decode the data is successful.</p>
<p id="p-0040" num="0039">Decoder control circuitry <b>142</b> may generate signals that request acquisition of information used to determine the soft data, may generate signals that request determination of the soft data and/or may generate signals that initiate the hard or soft decoding processes. In some cases, request signals for acquisition of information used to determine the soft data, request signals for determination of the soft data and/or request signals for initiation of the soft decoding process may be generated by the controller circuitry <b>122</b> only if the hard decoding process (or another soft decoding process) fails to achieve convergence. In some cases, request signals for acquisition of information used to determine the soft data, request signals for determination of the soft data and/or request signals for initiation of the soft decoding process may be generated by the controller circuitry <b>122</b> regardless of whether or not the hard decoding process fails to achieve convergence. For example, the request for acquisition of information used to determine the soft data, the request for determination of the soft data and/or the request for initiation of the soft decoding process may be generated by the controller circuitry <b>122</b> before the successful or unsuccessful conclusion of the hard decoding process. If the request signals are generated before the conclusion of the hard decoding process and the hard decoding process eventually achieves convergence, the controller circuitry <b>122</b> may terminate acquisition of information used to determine the soft data, terminate determination of the soft data and/or terminate the soft decoding process The above example may be extended the scenario wherein the decoder <b>115</b> opportunistically attempts to decode using first soft data before second soft data is available. When any of the decoding processes achieves convergence, the control circuitry <b>122</b> may initiate a control signal to terminate other concurrently operating processes. The control circuitry <b>122</b> may generate appropriate signals to control some functions of the read and/or write operations of the memory, such as requests for one or more read operations of the memory cells that include information about the reference voltage to be used for the read operation, for example.</p>
<p id="p-0041" num="0040">The block diagram of <figref idref="DRAWINGS">FIG. 1</figref> and other systems, modules, devices, or processes described herein may illustrate or discuss components in functional groups. It will be appreciated by those skilled in the art that there exist many possible configurations in which the functionality of the systems, modules, devices, and/or processes can be arranged and/or implemented. For example, in some cases, the detector, the demodulator and/or the modulator may be implemented as components of the memory. In some cases, the decoder, encoder, control circuitry, and/or cache may be implemented as components of a memory controller that is separate from the memory. In some cases, the memory may be flash memory and the decoder, encoder, and control circuitry may be part of a flash memory controller The examples depicted herein provide some functional arrangements, while many other functional arrangements are possible. The various approaches described herein may be implemented using hardware, software, or a combination of hardware and software, for example.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a process of decoding data read from memory cells. An initial read of the memory cells provides hard data comprising the digital symbols without confidence information. In some cases, the controller may request soft data from the detector substantially concurrently with a request for hard data. The soft data includes information about the digital symbols stored in the memory cells along with confidence information. Typically, the soft data takes longer to acquire than the hard data because the additional information must be acquired and processed. Before soft data is available to the decoder, the decoder opportunistically attempts to decode <b>210</b> the hard data using a hard decoding process. If the opportunistic attempt to decode the hard data is successful <b>220</b>, i.e., the decoder achieves convergence using the hard data, the decoder outputs <b>240</b> a signal representing the decoded data which can be sent to the host processor, for example. If the decoder is unsuccessful in its opportunistic attempt to achieve convergence <b>220</b> using the hard data, the decoder uses a soft decoding process to decode <b>230</b> the soft data and outputs <b>240</b> the decoded data.</p>
<p id="p-0043" num="0042">The data confidence may be derived from one or more sources that provide information about whether the digital symbols read from the memory cells correspond to the digital symbols that were intended to be written to the memory cell. Data confidence is inversely related to noise. The noise may be instantaneous noise that can change the data as the data is being written to the memory cells or as the data is being read from the memory cells. Noise can also encompass charge leakage and/or disturb effects that occur during the time that the data is retained in the memory cells, i.e., after the data has been stored but before the data is read. The variance (spread) of the threshold voltage distribution of the memory cells reflects the amount of noise associated with data read from the memory cells.</p>
<p id="p-0044" num="0043">Sources that provide information about the reliability of the data may include, but are not limited to, the noise statistics of the read and/or write channel of the memory, the bit error rate (BER) associated with the memory cells being read, the significance of the bits being read, e.g., whether the bits are most significant bits (MSBs) or least significant bits (LSBs), the parameters of the write operation used to write the data to the memory cells, e.g., the variance of the threshold voltage distribution after a write operation, a measured characterization of the threshold voltage distribution, the length of time that data has been stored in the memory cells, the potential for disturb effects during the period of time that the data has been stored and/or the operational history of the memory cells including the number of erase/write cycles, the number of write cycles at cold temperatures, etc.</p>
<p id="p-0045" num="0044">The &#x201c;write channel&#x201d; of solid state non-volatile memory may be thought of as including circuitry from the output of the encoder to the memory cell. The &#x201c;read channel&#x201d; of a solid state non-volatile memory may be thought of as including circuitry from the memory cell to the input of the decoder. Errors in the data may occur within the read and/or write channels, for example, due to bitline-to-bitline capacitive coupling, random noise, 1/f noise, electromagnetic interference (EMI) and/or other noise sources. In some cases, the noise probability function (which may be estimated as additive Gaussian, or other probability functions, for example) is used to determine the soft data.</p>
<p id="p-0046" num="0045">The past performance of the memory cells may predict their future performance. For example, the bit error rate (BER) determined for previous read operations of a memory cell page or block can be used to generate soft data for a current read operation.</p>
<p id="p-0047" num="0046">As previously described, some digital symbols can be more susceptible to errors than others, particularly for certain types of charge loss/gain effects. Additionally the significance of the bit of the digital symbols can be a factor. For example, pages of most significant bits may be more susceptible to charge leakage effects than pages of least significant bits. Therefore, the significance of the bits being read may be taken into account when the soft data is determined.</p>
<p id="p-0048" num="0047">Memory cell write operation can involve cycles of applying the programming voltages to the memory cells and then verifying the data written in the cells. The variance of the threshold voltage distribution of the memory cells being programmed decreases as the number of program and verify cycles increases. Threshold voltage distributions with lower variance can be achieved with a large number of programming cycles. However, a large number of programming cycles adds to the program latency of the device and/or may be more destructive to the gate oxide, and thus may be undesirable. Knowledge of the parameters of the write operation, e.g., the variance of the threshold voltage achieved by the write operation and/or how many programming cycles were used to program the memory cells may be a factor in the derivation of soft data.</p>
<p id="p-0049" num="0048">Characterization of the threshold voltage distribution may involve measurement of the threshold voltage of the cells or a sample of cells which can occur before the memory is used, e.g., factory characterization, or characterization during the use of the memory. The controller circuitry may include a module to initiate and/or characterization of the memory cells (see, <b>133</b>, <figref idref="DRAWINGS">FIG. 1</figref>). In some cases, characterization of the memory cells may occur during use of the memory cells at a convenient time, such as during garbage collection operations.</p>
<p id="p-0050" num="0049">An estimated threshold voltage distribution may be determined based on the memory cell configuration and/or the operational history of the memory cells. The memory cell configuration factors may include the physical and material configuration of the memory cell, e.g., dimensions, thickness, and doping, etc. The operational history of the memory cell may include the history of program/erase cycles experienced by the memory cell, the history of read, write, and erase operations performed on other memory cells that can potentially affect the charge stored on the memory cell, the retention time, i.e., length of time that the charge has been stored on the memory cell, the temperature of the memory cell at the time of the write operation, the operating temperature of the memory, and/or other factors. The characterization data and/or the operational history of the memory cell and/or other information may be stored in a cache (see <b>141</b>, <figref idref="DRAWINGS">FIG. 1</figref>) and accessed at a later time for use in determining the soft data.</p>
<p id="p-0051" num="0050">Idealized threshold voltage distributions for an MLC memory capable of storing two bits per memory cell are illustrated in <figref idref="DRAWINGS">FIG. 3A</figref>. In this example, the digital symbol <b>11</b> requires the lowest voltage and may represent the erased state. Voltage distribution <b>301</b> is associated with the digital symbol <b>11</b>, voltage distribution <b>302</b> is associated with digital symbol <b>10</b>, voltage distribution <b>303</b> is associated with the digital symbol <b>00</b>, and voltage distribution <b>304</b> is associated with the digital symbol <b>01</b>. For each digital symbol, the digit on the left is the most significant bit (MSB) and the digit on the right is the least significant bit (LSB).</p>
<p id="p-0052" num="0051">The number of reference voltages required to read a memory cell is equal to s&#x2212;1, where s is the number of digital symbols that can be stored in the memory cell. For example, a one bit memory cell is capable of storing one of two one-bit digital symbols, a 0 or a 1. One nominal reference voltage is needed to discriminate between the threshold voltages representing these two symbols. As another example, a two bit memory cell is capable of storing one of four two-bit symbols, <b>00</b>, <b>01</b>, <b>10</b>, <b>11</b>. Three reference voltages are needed to discriminate between these four digital symbols. Reading the digital state of a memory cell may be accomplished by comparing the sensed threshold voltage levels of the MLC memory cells to one or more reference voltages, represented as THA, THB, THC in <figref idref="DRAWINGS">FIG. 3A</figref>. Comparison to a first reference voltage, THA, discriminates the MSB bit of the digital state stored in the memory cell. If the sensed voltage is lower than THA, then the state of the MSB is 1 and if the sensed voltage is greater than THA, then the state of the MSB is 0.</p>
<p id="p-0053" num="0052">Reading the LSB requires comparison to an additional reference voltage. If the sensed voltage is less than THA, then comparison to reference THB discriminates between an LSB of 1 and an LSB of 0. If the sensed voltage is less than THB, then the LSB stored in the memory cell is 1. If the sensed voltage is greater than THB, then the LSB stored in the memory cell is 0. If the sensed voltage is greater than THA, then comparison to reference voltage THC discriminates between an LSB of 1 and an LSB of 0. If the sensed voltage is greater than THC, then the LSB is 1. If the sensed voltage is less than THC, then the LSB is 0.</p>
<p id="p-0054" num="0053">The distances between the edges of the distributions <b>301</b>, <b>302</b>, <b>303</b>, <b>304</b> and the location of the reference voltages THA, THB, THC affect the error rate of the memory cells. If any of the voltage distributions overlap the reference voltages THA, THB, THC, data errors are likely to occur. Thus, it is desirable to maintain acceptable distribution margins between the edges of the distributions and the reference voltages THA, THB, THC.</p>
<p id="p-0055" num="0054">Various factors can change the analog threshold voltage stored in memory cells, causing the voltage distributions of a memory device (or a data unit of a memory device, such as a data page) to change and to overlap each other or overlap the reference voltages. The susceptibility to change and/or the amount of voltage shift experienced by any particular memory cell may vary from one memory device to another, may vary from one memory cell page to another, may vary from memory cell to memory cell within a memory page, and/or may vary depending on the history of the memory cell. Noise from any source causes the variance of the threshold voltage distributions to increase, as illustrated by the voltage distributions <b>301</b><i>b</i>, <b>302</b><i>b</i>, <b>303</b><i>b</i>, <b>304</b><i>b </i>in <figref idref="DRAWINGS">FIG. 3B</figref>. The digital symbols read from the memory cells having threshold voltage distribution distributions <b>301</b><i>b</i>, <b>302</b><i>b</i>, <b>303</b><i>b</i>, <b>304</b><i>b </i>would have a relatively lower confidence than digital symbols read from memory cells having threshold voltage distributions <b>301</b>, <b>302</b>, <b>303</b>, <b>304</b> in <figref idref="DRAWINGS">FIG. 3A</figref>.</p>
<p id="p-0056" num="0055">Charge leakage is one mechanism that causes changes in the threshold voltage of memory cells and can cause errors in the stored data. For example, for some flash memory, a charge loss on the order of 10,000 electrons from the floating gate can alter the threshold voltage of the memory cell. Charge leakage occurs over time as charge is lost from the floating gate due to a number of factors.</p>
<p id="p-0057" num="0056">Other mechanisms that can increase or decrease the amount of stored charge include soft-write and disturb effects. These effects occur when the threshold voltage of a memory cell is unintentionally altered by local electrical signals during operation of the memory. For example, soft writing can occur when the threshold voltage of a memory cell is increased as the memory cell is being read. Repetitive reading of the memory cell can cause the cell to become slowly programmed over time.</p>
<p id="p-0058" num="0057">Memory cells can be subject to disturb effects caused by voltages applied to read, write or erase other cells in the memory. Disturb effects can be classified as read disturb, write (or program) disturb, and erase disturb. These effects typically arise in memory cells that share the same wordline or bitline and can result in charge loss or charge gain. For example, non-selected cells may be subject to write disturb when another cell on the same wordline is being programmed. During the write operation of a selected memory cell, a non-selected erased cell may accumulate additional charge so that the non-selected cell becomes a programmed cell (or differently programmed cell). If the non-selected cell was already a programmed cell, the non-selected cell may lose charge during the write operation of the selected cell to the point that the non-selected cell becomes an erased cell.</p>
<p id="p-0059" num="0058">Floating gates of flash memory are surrounded by thin oxides. Exposure of thin oxides to high field stress and/or high levels of charge injection may cause the oxides to conduct via stress induced leakage current (SILC) even at relatively low fields. For example, memory cells can gain charge under relatively low gate stress present during a read operation of a neighboring cell and can become programmed. Each stress cycle damages the thin oxide causing the cell to become more vulnerable to read disturb (and/or other disturb effects) due to SILC.</p>
<p id="p-0060" num="0059">Charge loss and/or disturb effects generally increase as the oxide layer that insulates the floating gate degrades. Oxide degradation can increase with each erase/write cycle experienced by the memory cell. Write operations that occur at lower temperatures, e.g., below about 10 degrees C., are more destructive to the gate oxide of a memory cell than write operations at higher temperatures. The operating temperature of the memory cell (at times other than write operations) can also influence memory cell degradation and affect charge leakage and/or other effects. As the memory cells are erased, written, and read, each memory cell can acquire a unique operational history which affects its susceptibility to errors. The various operational histories of the memory cells of a data unit, such as a page, for example, cause the threshold voltage distributions for that page to shift over time.</p>
<p id="p-0061" num="0060">Confidence information may be based on an additional measurement of the threshold voltage of a memory cell. In some cases, a first read operation of a memory cell data unit, e.g., a page, is used to determine hard data for the page. At least one additional read operation of the page can used to determine the soft data. For example, the first read operation of the page may be performed using a nominal reference voltage. The additional read operation of the page may be performed using a reference voltage that is shifted from the nominal voltage. The additional read operation provides more precision in the reading of the threshold voltages of the memory cells of the page. This higher precision information may be translated into a measure of data confidence. It will be understood that the additional reference voltage referred to above may be an additional set of reference voltages if the memory cells are multilevel memory cells.</p>
<p id="p-0062" num="0061">In some implementations, the reference voltage that is shifted from the nominal reference voltage may be shifted by a set, incremental amount. <figref idref="DRAWINGS">FIG. 4</figref> illustrates shifted reference voltages THB<sub>1</sub>, THB<sub>2</sub>, THA<sub>1</sub>, THA<sub>2</sub>, THC<sub>1</sub>, THC<sub>2</sub>, which are shifted from the nominal reference voltages, THB, THA, THC by a set amount. For example, the detector performs a first read operation using the set of nominal reference voltages THB, THA, THC, then performs a second read operation using the first set of shifted reference voltages, THB<sub>1</sub>, THA<sub>1</sub>, THC<sub>1</sub>, and may perform a third read operation using the second set of shifted reference voltages, THB<sub>2</sub>, THA<sub>2</sub>, THC<sub>2</sub>. The first read operation performed using the set of nominal reference voltages THB, THA, THC provides the hard data.</p>
<p id="p-0063" num="0062">Additional read operations using shifted reference voltages can provide information about data reliability. For example, if the first read operation using a first reference voltage indicates that the threshold voltage is less than THC and the second read operation using a second reference voltage indicates that the threshold voltage is even less than THC<sub>1</sub>, then that information may be interpreted to provide a higher confidence in the data than if the second read operation indicates that the threshold voltages is less than THC but greater than THC<sub>1</sub>.</p>
<p id="p-0064" num="0063">In some situations, the initial and/or shifted reference voltages may be shifted by an amount that compensates for an expected charge loss or charge gain from the memory cells. <figref idref="DRAWINGS">FIG. 5</figref> illustrates voltage distributions <b>511</b>, <b>512</b>, <b>513</b>, <b>514</b> after the initial voltage distributions <b>301</b>, <b>302</b>, <b>303</b>, <b>304</b>, also illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, are shifted and/or distorted due to charge leakage, soft write and/or disturb effects. Charge leakage over time typically causes the voltage distributions <b>302</b>, <b>303</b>, <b>304</b> to shift from a higher voltage to a lower voltage as charge leaks from the memory cells. Memory cells storing symbols represented by higher voltages, e.g., symbols <b>00</b> and <b>01</b> in <figref idref="DRAWINGS">FIG. 5</figref>, may experience a larger charge leakage shift than symbols represented by lower voltages, e.g., symbols <b>10</b> in <figref idref="DRAWINGS">FIG. 5</figref>. In <figref idref="DRAWINGS">FIGS. 3-5</figref>, digital symbol <b>11</b> is represented by a negative voltage and symbols <b>10</b>, <b>00</b>, and <b>01</b> are represented by positive voltages. Note that the negative voltage distribution <b>301</b> representing the digital symbol <b>11</b> exhibits a shift which is opposite in direction to the shifts of the positive distributions <b>302</b>, <b>303</b>, <b>304</b> due to the opposite polarity of the threshold voltages.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 5</figref> also depicts that disturb effects can operate to shift the voltage of a memory cell in a direction opposite to the voltage shift caused by charge leakage or can operate to shift the voltage of a memory cell in the same direction as charge leakage. Smaller threshold voltages of a memory cell corresponds to a smaller amount of charge which can make the memory cell more sensitive to soft writes and to erase/write/read disturbs which add charge. Thus, memory cells having an analog voltage representing the digital symbol <b>10</b> in <figref idref="DRAWINGS">FIG. 3</figref> may be more sensitive to soft writes and to erase/write/read disturbs than memory cells having an analog voltage representing the digital symbol <b>01</b>, for example.</p>
<p id="p-0066" num="0065">It can be useful to anticipate and compensate for charge leakage and/or other perturbations of the stored charge by using a reference voltage that is shifted by an amount related to the expected shift in the threshold voltage distribution. In some implementations, the memory system may be capable of determining the amount of voltage shift that should be used to compensate for the expected change in the voltage distribution. For example, the memory system may include reference voltage circuitry (see <b>134</b>, <figref idref="DRAWINGS">FIG. 1</figref>) configured to calculate the amount of voltage shift from the nominal reference voltage based on factors related to the configuration and use (operational history) of the memory cells. The configuration and use factors may include the physical and material configuration of the memory cell, e.g., dimensions, thickness, and doping, etc., the charge currently stored on the memory cell (also expressed as the voltage of the memory cell), the history of program/erase cycles experienced by the memory cell, the type of data page stored by the memory cell being read, e.g., MSB page or LSB page, the history of data errors of the memory cell, the history of read, write, and erase operations performed on other memory cells that can potentially affect the charge stored on the memory cell, the length of time that charge has been stored on the memory cell, the temperature of the memory cell at the time of the program operation, the operating temperature of the memory, factory characterization of the memory cells, subsequent characterization of the memory cells, and/or other factors. In some implementations, the reference voltage control circuitry may calculate the voltage shift as a function of only one of these configuration and use factors, e.g., data retention time. In some implementations, the reference voltage control circuitry may calculate the voltage shift as a function of multiple configuration and use factors. The various configuration and use parameters of the memory cell and/or the characterization data may be stored in a cache accessible by the memory controller. In some cases, some of the configuration and use factors and/or characterization data are stored within the memory.</p>
<p id="p-0067" num="0066">The configuration and use factors may operate interdependently to alter the threshold voltage of a memory cell. For example, the rate of charge leakage from a memory cell may increase with the number of program/erase cycles experienced by the memory cell. Threshold voltages representing certain data symbols may make the memory cell more susceptible to charge loss or charge gain than other analog voltages that represent other data symbols. For example, with reference to <figref idref="DRAWINGS">FIG. 5</figref>, if the memory cell is programmed with an analog voltage that initially represents the <b>01</b> symbol the memory cell may be more susceptible to charge loss than if the cell was programmed to an analog voltage representing the <b>11</b> symbol.</p>
<p id="p-0068" num="0067">The shift in the voltage of a memory cell, &#x394;<sub>P</sub>, due to use factors U<sub>1</sub>, U<sub>2</sub>, U<sub>3</sub>, . . . U<sub>J </sub>may be determined using the charge loss/gain model of the memory cell, expressed as f(U<sub>1</sub>, U<sub>2</sub>, U<sub>3</sub>, . . . U<sub>J</sub>), where U<sub>1</sub>, U<sub>2</sub>, U<sub>3 </sub>. . . U<sub>J </sub>are use factors such as those listed above. The amount of change of the voltage stored in a memory cell due to each use factor U<sub>1</sub>, U<sub>2</sub>, U<sub>3</sub>, . . . U<sub>J </sub>may be estimated based on a factory characterization of the threshold voltage distribution (an a priori characterization) of all memory cells or a population of similar memory cells before the memory cell is in use, and/or may be estimated based on a characterization of the threshold voltage distribution during the time that the memory is in use (a posteriori characterization). The a posteriori characterization may be performed at any time, or at periodic intervals during operation of the memory. In some cases, the a posteriori characterization can be conveniently performed during garbage collection.</p>
<p id="p-0069" num="0068">For example, when a prior population data is used, then the shifted reference voltage may be calculated:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>V</i>Ref<sub>shifted</sub><i>=V</i>Ref<sub>nominal</sub>+&#x394;<sub>P </sub><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0070" num="0069">where &#x394;<sub>P </sub>is the expected voltage shift determined using the charge/loss gain model f(U<sub>1</sub>, U<sub>2</sub>, U<sub>3</sub>, . . . U<sub>J</sub>) of the memory cell derived from population data.</p>
<p id="p-0071" num="0070">Characterization of the memory cells may occur numerous times over the life of the memory device, allowing rates of change in charge loss or gain behavior for each configuration and use factor or multiple factors to be calculated. In some cases, the characterization is based on threshold voltage measurements taken from a sample of cells of the memory. The calculated rates of change can be used to extrapolate the expected changes from the configuration and use factors.</p>
<p id="p-0072" num="0071">For example, when a posteriori memory cell characterization data is used, then the shifted reference voltage may be calculated:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>V</i>Ref<sub>shifted</sub><i>=V</i>Ref<sub>nominal</sub>+&#x394;<sub>C</sub>,<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0073" num="0072">where &#x394;<sub>C </sub>is the expected voltage shift determined using the charge loss/gain model, f(U<sub>1</sub>, U<sub>2</sub>, U<sub>3</sub>, . . . U<sub>J</sub>) of the memory cell derived from one or more characterization of the memory cell or memory cell array. In some implementations, the charge loss/gain model of the memory cell may be derived using a priori population data for use some factors and a posteriori characterization of the memory cell for other use factors. In some implementations, the charge loss/gain model may be adaptive. For example, a priori population data may initially be used to generate the charge loss/charge gain model, but as characterization data for the memory cell array is acquired, the charge loss/charge gain model may increasingly rely on the information acquired from the a posteriori characterization.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIGS. 6A and 6B</figref> illustrate shifting a reference voltage for an additional read operation that is used to determine soft data. For purposes of illustration, <figref idref="DRAWINGS">FIG. 6A</figref> depicts a scenario wherein an analog voltage, V<b>01</b><sub>1</sub>, representing the digital symbol <b>01</b>, has been programmed into a memory cell. Immediately after programming the memory cell, the digital symbol stored in the memory cell can be read by sensing the voltage V<b>01</b><sub>1 </sub>and comparing the voltage V<b>01</b><sub>1 </sub>to a nominal reference voltage THC<sub>Ref1</sub>. Because V<b>01</b><sub>1 </sub>is greater than the nominal reference voltage THC<sub>Ref1</sub>, the digital symbol stored in the memory cell is correctly identified and transferred to the memory controller as <b>01</b>.</p>
<p id="p-0075" num="0074">However, possibly due to charge leakage, which is a predominant mechanism for changes in the voltage distribution for this particular digital symbol, electrons stored on the floating gate of the memory cell can leak away, causing the voltage of the memory cell to decrease to voltage V<b>01</b><sub>2</sub>. If the memory cell is read after the charge leakage, comparison of the analog voltage V<b>01</b><sub>2 </sub>to the nominal reference voltage, THC<sub>Ref1 </sub>leads to erroneous identification of the digital symbol stored in the memory cell as <b>00</b> rather than <b>01</b>. This erroneous value is transferred from the memory array to the memory controller, where the decoder circuitry attempts to decode the data. The data may include too many errors to allow convergence.</p>
<p id="p-0076" num="0075">In the scenario described in connection with <figref idref="DRAWINGS">FIG. 6A</figref>, the voltage change from V<b>01</b><sub>1 </sub>to V<b>01</b><sub>2 </sub>may be taken into account and compensated for by shifting the reference voltages used to interpret the threshold voltage of the memory cell. For example, as illustrated in <figref idref="DRAWINGS">FIG. 5C</figref>, lowering the reference voltage from the nominal reference voltage, THC<sub>Ref1</sub>, to a shifted reference voltage, THC<sub>Ref2</sub>, allows the digital symbol represented by V<b>01</b><sub>2 </sub>to be correctly interpreted as 01 rather than erroneously interpreted as 00. Comparison of the analog voltage V<b>01</b><sub>2 </sub>to shifted reference voltage THC<sub>Ref2 </sub>indicates that V<b>01</b><sub>2 </sub>is greater than THC<sub>Ref2 </sub>leading to the correct interpretation of the digital symbol stored in the memory cell as 01. Approaches for reusing information from multiple read operations, including read operations that use reference voltages shifted to compensate for expected charge loss or charge gain, are described in commonly owned U.S. Pat. No. 8,243,511 which is filed concurrently with the present application and is incorporated herein by reference in its entirety.</p>
<p id="p-0077" num="0076">In some cases, a control signal requesting the soft data may be generated concurrently or at about the same time as the request for the hard data, or at other times before the conclusion of a successful or unsuccessful hard decoding process. In some cases, the control signal that requests the soft data may be generated at or after the conclusion of the hard decoding process. <figref idref="DRAWINGS">FIG. 7</figref> is a flow graph that depicts a process that generates a request for soft data after the unsuccessful conclusion of the hard decoding process. A request for hard data is generated <b>710</b> which initiates a read operation of the memory cells. The hard data that includes the digital symbols read from the memory cells without confidence information is received <b>720</b> in the decoder and is decoded <b>730</b> using a hard decoding process. If the hard decoding process achieves convergence <b>740</b>, then the decoder outputs <b>750</b> the decoded data. However, if the hard decoding process fails to achieve convergence <b>740</b>, then a request for soft data is generated <b>760</b> by the controller. The soft data received <b>770</b> by the decoder includes information about the digital symbols read from the memory cells and confidence information. The soft data is decoded <b>780</b> using a soft decoding process and the decoder outputs <b>790</b> the decoded information.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a process that requests <b>805</b>, <b>840</b> both hard data and soft data before the conclusion of a successful or unsuccessful hard decoding process. The hard data is typically faster to obtain than the soft data and is received <b>810</b> in the decoder before the soft data is determined. Thus, the opportunistic hard decoding attempt <b>815</b> may be initiated while the soft data is being determined but before the soft data is available <b>850</b> in the decoder. If the hard decoding process is successful <b>820</b>, then the decoder outputs <b>825</b> the decoded data. A signal is generated to stop <b>830</b> the determination of the soft data, e.g., to stop an additional read operation and/or calculation of confidence information. If the soft decoding process has begun, a signal is generated to stop <b>835</b> the soft decoding process.</p>
<p id="p-0079" num="0078">However, if the hard decoding process is unsuccessful <b>820</b>, then the soft decoding process commences <b>865</b> if the soft data is available <b>850</b>. If the soft data is not available <b>850</b>, then the decoder waits <b>845</b> for the soft data. At any time prior to the completion of the soft decoding process, if the hard decoding process successfully achieves convergence <b>820</b>, the soft data acquisition and/or the soft decoding processes are terminated <b>855</b>, <b>860</b>.</p>
<p id="p-0080" num="0079">The flow graph of <figref idref="DRAWINGS">FIG. 9</figref> illustrates a process that is similar in some ways to the process illustrated by <figref idref="DRAWINGS">FIG. 2</figref>, except that in the process of <figref idref="DRAWINGS">FIG. 9</figref>, the decoder opportunistically attempts to decode <b>910</b> a first type of soft data before attempting to decode <b>930</b> a second type of soft data. Each of the first and second types of soft data includes information about the digital symbols read from the memory cells along with data confidence information. The first type of soft data includes data confidence information that is determined based on a first source of information. The second type of soft data includes data confidence information that is determined based on a second source of information. For example, the data confidence information of the first type of soft data may be determined based on threshold voltage distributions that are estimated using configuration and use parameters of the memory cells, without performing an additional read operation. The data confidence information of the second type of soft data may be determined based on one or more additional read operations of the memory cells. Because the additional read operations take longer to perform than the estimation of the threshold voltage distributions, the decoder may opportunistically attempt to decode the first type of soft data before the second type of soft data is available. In this example, if the first soft decoding process <b>910</b> operating on the first type of soft data is unsuccessful <b>920</b>, a second decoding process <b>930</b> operating on the second type of soft data commences and an output of the decoded data is generated <b>940</b>.</p>
<p id="p-0081" num="0080">In some cases, a control signal requesting the second type of soft data may be generated concurrently or at about the same time as the request for the first type of soft data or at another time before the conclusion of successful or unsuccessful decoding of the first type of soft data. If the soft decoding process operating on the first type of soft data achieves convergence, then acquisition of the second type of soft data and/or decoding the second type of soft data may be terminated. In some cases, the control signal to request the second type of soft data may be generated at or after an unsuccessful conclusion of the decoding process that decodes the first type of soft data.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 10</figref> is a flow diagram of a process that includes multiple opportunistic attempts to decode the data. In one scenario, the multiple decoding processes are opportunistically attempted, starting with data that can be acquired most quickly, followed by a decoding attempt operating on data that takes longer than the previously acquired data to obtain, followed by a decoding attempt operating on data that takes even longer to acquire, and so forth. In some implementations, all of the types of data can be requested at about the same time and/or before any decoding attempt achieves or fails to achieve convergence. In other implementations, one or more types of data can be requested after a decoding attempt fails to achieve convergence. As illustrated in <figref idref="DRAWINGS">FIG. 10</figref>, the three (or more) types of data may be requested <b>1000</b>, <b>1001</b>, <b>1002</b> before any of the decoding processes achieves convergence. The result of the first-in-time decoding process to achieve convergence is output and other information acquisition, determination of confidence information, and decoding processes are terminated.</p>
<p id="p-0083" num="0082">Alternatively, the first soft decoding process can be initiated at or after the conclusion of the hard decoding process and the second soft decoding process can be initiated at or after the conclusion of the first soft decoding process. The most quickly acquired data, i.e., the hard data, is received in the decoder. If convergence is achieved using the most quickly acquired data, the encoded data is output. A control signal is generated that stop the acquisition of other types of data. For example, the control signal may terminate an additional read operation that is in progress, and/or may terminate a calculation of confidence information. If another decoding process is in progress, a control signal is generated that stops the other decoding process. In some cases, one control signal can accomplish both functions (terminating acquisition of data and decoding).</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 10</figref> illustrates multiple opportunistic decoding processes using a hard decoding process and two soft decoding processes. The hard decoding process begins <b>1010</b> when the hard data is available, a first soft decoding process begins <b>1011</b> when the first type of soft data is available, and a second soft decoding process begins <b>1012</b> when the second type of soft data is available. The first-in-time decoding process to achieve convergence <b>1020</b>, <b>1021</b>, <b>1022</b> outputs <b>1030</b>, <b>1031</b>, <b>1032</b> the decoded data. Other attempts to acquire soft data and/or decode the data are terminated <b>1040</b>.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIGS. 11A and 11B</figref> illustrate various configurations of the decoder circuitry <b>112</b> and control circuitry <b>122</b> (see, <figref idref="DRAWINGS">FIG. 1</figref>) that may be used to opportunistically decode first received data, e.g., hard data, before later received data, e.g., soft data, is available to the decoder. <figref idref="DRAWINGS">FIG. 11A</figref> illustrates a time multiplexed implementation wherein decoding the hard data and decoding the soft data is performed sequentially by the decoder circuitry <b>1110</b>. In <figref idref="DRAWINGS">FIG. 11A</figref>, the hard data is decoded prior to decoding the soft data. In some cases, in addition to sequential data decoding, acquisition of hard and/or soft data may be implemented sequentially or may be implemented at least in part concurrently.</p>
<p id="p-0086" num="0085">In some embodiments, multiple decoding processes may occur at least in part concurrently. For example, as illustrated in <figref idref="DRAWINGS">FIG. 11B</figref>, decoder circuitry <b>1120</b> may include multiple decoding processes <b>1121</b>, <b>1122</b>, <b>1123</b>. All of the decoding processes or at least two of the decoding processes <b>1121</b>, <b>1122</b>, <b>1123</b> may be implemented at least in part concurrently. In some cases, acquisition of hard and/or soft data may be implemented sequentially or may be implemented at least in part concurrently. As illustrated in <figref idref="DRAWINGS">FIG. 11B</figref>, first received data, e.g., hard data, may be an input to a first decoding process <b>1121</b>. Later received data, e.g., first and second types of soft data, may serve as inputs to additional decoding processes <b>1122</b>, <b>1123</b>. The confidence information of the first type of soft data is acquired from a first source and the confidence information of the second type of soft data is acquired from a second source. If the types of data are acquired and/or decoded concurrently, controller circuitry <b>1130</b> may generate signals to terminate the acquisition and/or decoding of data when convergence is achieved by a first-in-time decoding process to achieve convergence.</p>
<p id="p-0087" num="0086">Each of the decoding processes illustrated in <figref idref="DRAWINGS">FIGS. 11A and 11B</figref> may implement only one algorithm and/or use only one hypothesis to decode the data. Alternatively, each of the decoding processes illustrated in <figref idref="DRAWINGS">FIGS. 11A and 11B</figref> may sequentially or concurrently implement multiple decoding subprocesses. Each of the multiple subprocesses uses a different algorithm and/or tests a different hypothesis when attempting to decode the data. Each of the multiple decoding subprocesses is capable of decoding the data to convergence without relying on the input of another of the decoding subprocess. Multiple algorithm/hypotheses decoding is depicted in <figref idref="DRAWINGS">FIG. 12</figref>, which illustrates, as an example, the first decoding process <b>1121</b> of <figref idref="DRAWINGS">FIG. 11B</figref>. It will be appreciated that the decoder circuitry <b>1110</b> of <figref idref="DRAWINGS">FIG. 1A</figref>, the second decoding process <b>1122</b> of <figref idref="DRAWINGS">FIG. 11B</figref>, and/or the Nth decoding process <b>1123</b> of <figref idref="DRAWINGS">FIG. 11B</figref> may also sequentially or concurrently test multiple hypotheses and/or multiple algorithms.</p>
<p id="p-0088" num="0087">As illustrated in <figref idref="DRAWINGS">FIG. 12</figref>, the first decoding process <b>1121</b> implements multiple decoding subprocesses <b>1201</b>, <b>1202</b>, <b>103</b>, each of the multiple decoding processes <b>1201</b>, <b>1202</b>, <b>1203</b> decode the first type of data using a different algorithm and/or testing a different hypothesis. For example, subprocess A <b>1201</b> may test hypothesis A, subprocess B <b>1202</b> may test hypothesis B, subprocess C <b>1203</b> may test hypothesis C. Each of the hypotheses tested are applied to the same input data. For example, each of subprocesses A-C may apply different signal/noise probability distributions to the first type of data, e.g., hard data or soft data. In some cases, one decoding subprocess may test a Gaussian distribution, and other decoding subprocesses may test a t distribution, uniform distribution, triangular distribution, superposition of multiple distributions, or an empirical distribution.</p>
<p id="p-0089" num="0088">Depending on the hardware and/or software architecture of the decoder, the decoding subprocesses may be implemented sequentially or concurrently. In one implementation, the hypotheses A-C may be tested sequentially, starting from the most likely hypothesis to achieve convergence and ending with the least likely hypothesis to achieve convergence. In another implementation, each of the decoding subprocesses A-C <b>1201</b>, <b>1202</b>, <b>1203</b> may operate concurrently or at least in part concurrently to test hypotheses A-C. The decoded data output from the decoder <b>1121</b> is the result of the first-in-time decoding subprocess <b>1201</b>, <b>1202</b>, <b>1203</b> to achieve convergence. This implementation is particularly useful for flash memory systems where controller circuitry controls multiple memory chips and therefore the system includes duplicate detector/decoder hardware. In yet another implementation, testing the hypotheses may be a hybrid of sequential and concurrent operation, wherein more than one but less than all hypotheses are tested concurrently.</p>
<p id="p-0090" num="0089">Alternatively or additionally, each of the subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b> may implement a different decoding algorithm, i.e., subprocess A <b>1201</b> may implement algorithm A, subprocess B <b>1202</b> may implement algorithm B, subprocess C <b>1203</b> may implement algorithm C. The algorithms implemented by the subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b> can have the same complexity, or may differ in complexity. In some cases, one of the subprocesses may implement a relatively less complex algorithm that is capable of achieving convergence more quickly than other algorithms implemented by other subprocesses. For example, the decoder may be an LDPC decoder, the less complex algorithm implemented by one of the subprocesses may be a min-sum algorithm, and the more complex algorithm implemented by another of the subprocesses may be a belief propagation algorithm. In some scenarios, if there are few errors in the data, the less complex min-sum algorithm can achieve convergence more quickly or may be with less power consumption than the belief propagation algorithm. However, when more errors are present, the min sum algorithm may fail to achieve convergence, whereas the belief propagation algorithm, which has superior error detection and correction power, can achieve convergence.</p>
<p id="p-0091" num="0090">The algorithms may be tested sequentially, starting from the fastest and/or least complex algorithm and ending with the slowest and/or most complex. In some cases, each of the decoding subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b> may operate concurrently to test algorithms A-C. As previously mentioned, concurrent implementation is particularly useful for flash technology. In some cases, the decoding subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b> may proceed as a hybrid of sequential and concurrent operation, wherein more than one but less than all decoding subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b> are tested concurrently. The decoded data output from the decoder <b>1121</b> is the result of the first in time decoding subprocess <b>1201</b>, <b>1202</b>, <b>1203</b> to achieve convergence.</p>
<p id="p-0092" num="0091">In some configurations, the output of one decoding subprocess <b>1201</b>, <b>1202</b>, <b>1203</b> may be used to control one or more other decoding subprocesses <b>1201</b>, <b>1202</b>, <b>1203</b>. For sequential operation, if convergence is achieved by a decoding subprocess that is implemented earlier than another subprocess, the later implemented subprocess may not be initiated by controller <b>1230</b>. A failure to achieve convergence of a decoding process <b>1201</b>, <b>1202</b>, <b>1203</b> may cause the controller <b>1230</b> to trigger implementation of one or more of the other decoding processes <b>1201</b>, <b>1202</b>, <b>1203</b>. For concurrent operation, a first-in-time decoding subprocess <b>1201</b>, <b>1202</b>, <b>1203</b> to achieve convergence may cause the controller <b>1230</b> to terminate other decoding sub processes <b>1201</b>, <b>1202</b>, <b>1203</b>.</p>
<p id="p-0093" num="0092">It is to be understood that even though numerous characteristics and advantages of various embodiments of the present invention have been set forth in the foregoing description, together with details of the structure and function of various embodiments of the invention, this detailed description is illustrative only, and changes may be made in detail, especially in matters of structure and arrangements of parts within the principles of the present invention to the full extent indicated by the broad general meaning of the terms in which the appended claims are expressed.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of decoding data read from memory cells of a solid state, non-volatile memory, comprising:
<claim-text>receiving hard data that includes information about the data read from the memory cells without confidence information;</claim-text>
<claim-text>attempting to decode the hard data using a hard decoding process prior to a time that soft data is available to the decoder, the soft data including information about the data stored in the memory cells and data confidence information;</claim-text>
<claim-text>in response to the hard decoding process failing to achieve convergence, decoding the soft data using a soft decoding process;</claim-text>
<claim-text>implementing an additional soft decoding process operating on additional soft data that is acquired from a different source of information than the soft decoding process; and</claim-text>
<claim-text>generating an output of the decoded data.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>the hard data is acquired from an initial read of the memory cells; and</claim-text>
<claim-text>the soft data is determined using information from an additional read operation of the memory cells.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the additional read operation uses a reference voltage that is different from a reference voltage used for the initial read operation.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising one or more of acquiring the information used to determine the soft data, determining the soft data, and decoding the soft data only if the hard decoding process fails to achieve convergence.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising one or more of generating a request for acquisition of information used to determine the soft data, initiating a process to determine the soft data, and initiating the soft data decoding process regardless of success or failure of the hard decoding process to achieve convergence.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or both of the hard decoding process and the soft decoding process are LDPC decoding processes.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or both of the hard decoding process and the soft decoding process includes a plurality of decoding subprocesses, each of the decoding subprocesses capable of independently achieving convergence.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein each of the decoding subprocesses tests a different decoding hypothesis.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein each of the decoding subprocesses implements a different decoding algorithm.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein implementing the additional soft decoding process comprises implementing the additional soft decoding process in response to the soft decoding process failing to achieve convergence.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of claim, <b>1</b>, further comprising, in response to the soft decoding process achieving convergence, terminating the additional soft decoding process.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A solid state, non-volatile memory system, comprising:
<claim-text>input circuitry configured to receive hard data, the hard data including information about data read from the memory cells without confidence information, and soft data, the soft data including information about the data read from the memory cells with confidence information;</claim-text>
<claim-text>decoder circuitry configured to:
<claim-text>implement a hard decoding process operating on the hard data during a time that the soft data associated is unavailable to the decoder circuitry;</claim-text>
<claim-text>implement a soft decoding process operating on the soft data at a later time when the soft data becomes available to the decoder; and</claim-text>
<claim-text>in response to the soft decoding process failing to achieve convergence, implement an additional soft decoding process operating on additional soft data that is acquired from a different source of information than the soft decoding process; and</claim-text>
</claim-text>
<claim-text>output circuitry configured to output the decoded data obtained from the hard decoding process or the soft decoding process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising controller circuitry configured to generate a request to acquire information used to determine the soft data, generate a request to determine the soft data, and generate a control signal to initiate the soft decoding process.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the controller circuitry is configured to generate the request to acquire information used to determine the soft data, to generate the request to determine the soft data, and generate the control signal to initiate the soft decoding process only in response to the hard decoding process failing to achieve convergence.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the controller circuitry is configured to generate the request to acquire the information used to determine the soft data, to generate the request to determine the soft data, and generate the control signal to initiate the soft decoding process regardless of whether or not the hard decoding process achieves convergence.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the controller circuitry is configured to generate a control signal to terminate acquisition of the information used to determine the soft data, to generate a control signal to terminate the determination of the soft data and to generate a control signal to terminate the soft decoding process in response to the hard decoding process achieving convergence.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>solid state memory cells; and</claim-text>
<claim-text>a detector, including
<claim-text>detector circuitry configured to perform read operations to read data stored in the memory cells and to output hard data including information about the data read from the memory cells without confidence information;</claim-text>
<claim-text>soft information circuitry configured to generate soft data, the soft data including information about the data read from the memory cells and confidence information.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the soft information circuitry is configured to generate the soft data using noise statistics of the memory cell. </claim-text>
</claim>
</claims>
</us-patent-grant>

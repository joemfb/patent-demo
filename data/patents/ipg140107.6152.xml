<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627276-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627276</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13335546</doc-number>
<date>20111222</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>73</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717107</main-classification>
<further-classification>717100</further-classification>
<further-classification>717105</further-classification>
<further-classification>717109</further-classification>
<further-classification>717113</further-classification>
<further-classification>715700</further-classification>
</classification-national>
<invention-title id="d2e53">Traceability in a modeling environment</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4901221</doc-number>
<kind>A</kind>
<name>Kodosky et al.</name>
<date>19900200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5544358</doc-number>
<kind>A</kind>
<name>Capps et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5627979</doc-number>
<kind>A</kind>
<name>Chang et al.</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6049835</doc-number>
<kind>A</kind>
<name>Gagnon</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6053951</doc-number>
<kind>A</kind>
<name>McDonald et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6061515</doc-number>
<kind>A</kind>
<name>Chang et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6134559</doc-number>
<kind>A</kind>
<name>Brumme et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6243857</doc-number>
<kind>B1</kind>
<name>Logan, III et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6269475</doc-number>
<kind>B1</kind>
<name>Farrell et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6272672</doc-number>
<kind>B1</kind>
<name>Conway</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6438615</doc-number>
<kind>B1</kind>
<name>Faustini</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6493740</doc-number>
<kind>B1</kind>
<name>Lomax</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6574737</doc-number>
<kind>B1</kind>
<name>Kingsford</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6792418</doc-number>
<kind>B1</kind>
<name>Binnig et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6850252</doc-number>
<kind>B1</kind>
<name>Hoffberg</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715716</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6993723</doc-number>
<kind>B1</kind>
<name>Danielsen et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7055131</doc-number>
<kind>B2</kind>
<name>Charisius et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7114149</doc-number>
<kind>B2</kind>
<name>Aptus et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7165005</doc-number>
<kind>B2</kind>
<name>Steger et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7171448</doc-number>
<kind>B1</kind>
<name>Danielsen et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7171646</doc-number>
<kind>B2</kind>
<name>Charisius et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7188332</doc-number>
<kind>B2</kind>
<name>Charisius et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7219328</doc-number>
<kind>B2</kind>
<name>Schloegel et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7290244</doc-number>
<kind>B2</kind>
<name>Peck et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7386833</doc-number>
<kind>B2</kind>
<name>Granny et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7389490</doc-number>
<kind>B2</kind>
<name>Roesner et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7496895</doc-number>
<kind>B1</kind>
<name>Mosterman et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7526535</doc-number>
<kind>B2</kind>
<name>Peck et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7657557</doc-number>
<kind>B2</kind>
<name>Super et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7681176</doc-number>
<kind>B2</kind>
<name>Wills et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7698346</doc-number>
<kind>B2</kind>
<name>Henderson</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707781</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7721283</doc-number>
<kind>B2</kind>
<name>Kovachka-Dimitrova et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717177</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7735060</doc-number>
<kind>B2</kind>
<name>Harvey et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7814470</doc-number>
<kind>B2</kind>
<name>Mamou et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>8041760</doc-number>
<kind>B2</kind>
<name>Mamou et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>8104017</doc-number>
<kind>B2</kind>
<name>Lin et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2002/0016206</doc-number>
<kind>A1</kind>
<name>Yoshimi et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2002/0054138</doc-number>
<kind>A1</kind>
<name>Hennum</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2002/0055891</doc-number>
<kind>A1</kind>
<name>Yang</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2002/0072049</doc-number>
<kind>A1</kind>
<name>Prahalad</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2002/0078010</doc-number>
<kind>A1</kind>
<name>Ehrman et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2002/0104068</doc-number>
<kind>A1</kind>
<name>Barrett et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2002/0129058</doc-number>
<kind>A1</kind>
<name>Story et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2002/0156792</doc-number>
<kind>A1</kind>
<name>Gombocz et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2002/0188928</doc-number>
<kind>A1</kind>
<name>Szpak et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2003/0009253</doc-number>
<kind>A1</kind>
<name>McIntyre et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2003/0016206</doc-number>
<kind>A1</kind>
<name>Taitel</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2003/0018953</doc-number>
<kind>A1</kind>
<name>Aberg</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2003/0038842</doc-number>
<kind>A1</kind>
<name>Peck et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2003/0046380</doc-number>
<kind>A1</kind>
<name>Steger et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2003/0069908</doc-number>
<kind>A1</kind>
<name>Anthony et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2003/0074489</doc-number>
<kind>A1</kind>
<name>Steger et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2003/0107595</doc-number>
<kind>A1</kind>
<name>Ciolfi</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2003/0120549</doc-number>
<kind>A1</kind>
<name>Lindner</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2003/0137522</doc-number>
<kind>A1</kind>
<name>Kaasila et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2003/0145305</doc-number>
<kind>A1</kind>
<name>Ruggier</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2003/0163298</doc-number>
<kind>A1</kind>
<name>Odom et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2003/0192032</doc-number>
<kind>A1</kind>
<name>Andrade et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2003/0195732</doc-number>
<kind>A1</kind>
<name>Kodosky et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2004/0015783</doc-number>
<kind>A1</kind>
<name>Lennon et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2004/0030715</doc-number>
<kind>A1</kind>
<name>White et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2004/0031015</doc-number>
<kind>A1</kind>
<name>Ben-Romdhane et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2004/0034846</doc-number>
<kind>A1</kind>
<name>Ortal et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2004/0181543</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2004/0205507</doc-number>
<kind>A1</kind>
<name>Tuschner et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2005/0137840</doc-number>
<kind>A1</kind>
<name>Peck et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2006/0143570</doc-number>
<kind>A1</kind>
<name>Washington et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715763</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2007/0046649</doc-number>
<kind>A1</kind>
<name>Reiner</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2007/0209031</doc-number>
<kind>A1</kind>
<name>Ortal et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2008/0098349</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2012/0096439</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2012/0124552</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>WO</country>
<doc-number>WO 01/25911</doc-number>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>WO</country>
<doc-number>WO 01/25912</doc-number>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>WO</country>
<doc-number>WO 01/82232</doc-number>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>WO</country>
<doc-number>WO 03/107180</doc-number>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00077">
<othercit>Title: An entity-relationship modeling approach to IDEFO syntax, author: Austin et al, source: IEEE, dated: 1990.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00078">
<othercit>Muenchaisri et al., &#x201c;Entity-Relationship Software Development Environment&#x201d;, IEEE Computer Science, Aug. 1, 1999, 10 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00079">
<othercit>Gery et al., &#x201c;Rhapsody: A Complete Life-Cycle Model-Based Development System&#x201d;, Jan. 1, 2002, 10 pages, XP009111242.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00080">
<othercit>Cohn et al., &#x201c;Java Developer's Reference&#x201d;, 1996, 30 pages, XP007906921.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00081">
<othercit>Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority, or the Declaration corresponding to PCT/US2007/024718, Feb. 17, 2009, 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00082">
<othercit>International Search Report and Written Opinion corresponding to PCT/US2007/024718 dated Jun. 6, 2008, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00083">
<othercit>Co-pending U.S. Appl. No. 11/880,620, filed Jul. 23, 2007 entitled &#x201c;Traceability in a modeling Environment&#x201d;, Lin et al., 98 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00084">
<othercit>Co-pending U.S. Appl. No. 12/061,333, filed Apr. 2, 2008 entitled &#x201c;Traceability in a modeling Environment&#x201d;, Jesung et al., 136 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>67</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>36</number-of-drawing-sheets>
<number-of-figures>38</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11605747</doc-number>
<date>20061129</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8104017</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13335546</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10637433</doc-number>
<date>20030807</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8046708</doc-number>
<date>20111025</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11605747</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10057126</doc-number>
<date>20011025</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7849394</doc-number>
<date>20101207</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>10637433</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120096430</doc-number>
<kind>A1</kind>
<date>20120419</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Xiaocang</first-name>
<address>
<city>Wayland</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pillarisetti</last-name>
<first-name>Aravind</first-name>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Aldrich</last-name>
<first-name>William J</first-name>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tuschner</last-name>
<first-name>Kai</first-name>
<address>
<city>Leinfelden-Echterdingen</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Xiaocang</first-name>
<address>
<city>Wayland</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Pillarisetti</last-name>
<first-name>Aravind</first-name>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Aldrich</last-name>
<first-name>William J</first-name>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Tuschner</last-name>
<first-name>Kai</first-name>
<address>
<city>Leinfelden-Echterdingen</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Harrity &#x26; Harrity, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>The Mathworks, Inc.</orgname>
<role>02</role>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Das</last-name>
<first-name>Chameli</first-name>
<department>2197</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Exemplary embodiments employ a mapping among entities that are related to each other. The entities may include a graphical model, generated code, a generated report, a requirements document and/or an intermediate representation. The mapping may facilitate graphical identifications between parts of one entity that maps to part of another entity. The graphical identification may occur based on a selection of a part in one of the entities.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="183.98mm" wi="138.01mm" file="US08627276-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="139.95mm" wi="158.07mm" file="US08627276-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="222.50mm" wi="171.03mm" orientation="landscape" file="US08627276-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="136.65mm" wi="152.23mm" file="US08627276-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="206.33mm" wi="141.65mm" file="US08627276-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="140.97mm" wi="143.51mm" file="US08627276-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="133.94mm" wi="136.48mm" file="US08627276-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="219.20mm" wi="189.06mm" orientation="landscape" file="US08627276-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="224.28mm" wi="188.38mm" orientation="landscape" file="US08627276-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="206.33mm" wi="181.02mm" orientation="landscape" file="US08627276-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="218.52mm" wi="193.55mm" orientation="landscape" file="US08627276-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="205.06mm" wi="142.24mm" file="US08627276-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="165.95mm" wi="146.73mm" file="US08627276-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="206.93mm" wi="188.30mm" orientation="landscape" file="US08627276-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="208.28mm" wi="184.57mm" orientation="landscape" file="US08627276-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="183.30mm" wi="144.86mm" file="US08627276-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="213.36mm" wi="184.57mm" orientation="landscape" file="US08627276-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="216.58mm" wi="148.67mm" file="US08627276-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="122.26mm" wi="135.21mm" file="US08627276-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="247.99mm" wi="182.63mm" orientation="landscape" file="US08627276-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="183.30mm" wi="147.40mm" file="US08627276-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="196.09mm" wi="153.84mm" file="US08627276-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="211.07mm" wi="163.15mm" orientation="landscape" file="US08627276-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="151.21mm" wi="145.46mm" file="US08627276-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="124.29mm" wi="141.65mm" file="US08627276-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="180.09mm" wi="146.73mm" file="US08627276-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="211.50mm" wi="173.65mm" file="US08627276-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="204.39mm" wi="181.36mm" file="US08627276-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="235.80mm" wi="146.13mm" file="US08627276-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="218.52mm" wi="137.16mm" file="US08627276-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="221.06mm" wi="164.08mm" orientation="landscape" file="US08627276-20140107-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="242.23mm" wi="172.38mm" orientation="landscape" file="US08627276-20140107-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="209.04mm" wi="145.37mm" file="US08627276-20140107-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="198.29mm" wi="140.29mm" file="US08627276-20140107-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="199.39mm" wi="146.73mm" file="US08627276-20140107-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="125.90mm" wi="140.80mm" file="US08627276-20140107-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="248.07mm" wi="166.37mm" orientation="landscape" file="US08627276-20140107-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 11/605,747, filed Nov. 29, 2006, which is a continuation-in-part of U.S. patent application Ser. No. 10/057,126, filed Oct. 25, 2001, now U.S. Pat. No. 8,046,708, and is a continuation-in-part of U.S. application Ser. No. 10/637,433, filed Aug. 7, 2003, now U.S. Pat. No. 7,849,394. The disclosures of which are hereby incorporated by reference in their entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Graphical modeling environments, such as Simulink&#xae; software from The MathWorks, Inc. of Natick, Mass., cater to various aspects of dynamic system simulation, analysis and design. Such products allow users to perform numerous types of tasks including constructing system block diagram models. These graphical modeling environments may also be used to augment a predefined set of blocks with custom user-specified blocks, to compute and trace the temporal evolution of the dynamic system (&#x201c;executing&#x201d; the block diagram), to produce deployable software systems, or to produce descriptions of hardware systems that can mimic the behavior of either the entire model or portions of the model (referred to herein as &#x201c;code generation&#x201d;).</p>
<p id="p-0004" num="0003">A code generation process may be complicated. While it is may not be important for users of graphical modeling environments to understand the details of how the code generation process works, it can be important for users to understand the mapping between parts of the graphical model and parts of the generated code. Conventional systems and/or techniques may not provide users with the ability to readily understand mappings between parts of a graphical model and parts of generated code.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">In one aspect a computer-implemented method is disclosed. The method includes identifying entities having relationships therebetween. The entities include at least one of a graphical model, generated code, a generated report, a requirements document or an intermediate representation. The method also includes accessing a first entity from the entities and accessing a second entity from the entities. The method further includes mapping the first entity to the second entity to facilitate graphical identification of a first part of the first entity that is bi-directionally mappable to a second part of the second entity.</p>
<p id="p-0006" num="0005">In another aspect, a computing system is disclosed. The computing system includes a code generator and an integrated environment. The code generator produces generated code that corresponds to at least part of a graphical model. The generated code includes one or more segments. The integrated environment bi-directionally maps content related to the graphical model to the one or more segments. The integrated environment further allows identification of the content mapped to the one or more segments or allows identification of the one or more segments mapped to the content.</p>
<p id="p-0007" num="0006">In yet another aspect, a medium that holds instructions executable using a computing device is disclosed. The instructions enable identifying entities having relationships therebetween. The entities include at least one of a graphical model, generated code, a generated report, a requirements document or an intermediate representation. The instructions also enable accessing a first entity from the entities and accessing a second entity from the entities. The instructions further enable mapping the first entity to the second entity to facilitate graphical identification of a first part of the first entity that is bi-directionally mappable to a second part of the second entity.</p>
<p id="p-0008" num="0007">In still another aspect, a computer-implemented method is disclosed that includes accessing generated code corresponding to at least portion of a graphical model. The method also includes identifying a first graphical affordance in the graphical model that corresponds to a first segment of the generated code, the identifying performed graphically.</p>
<p id="p-0009" num="0008">In an additional aspect, a medium that holds instructions executable using a computing device, where the instructions enable interacting with code generated on behalf of at least part of a graphical model. The generated code includes at least a first segment. The instructions further enable identifying a first graphical affordance in the graphical model that corresponds to the first segment, the identifying performed graphically.</p>
<p id="p-0010" num="0009">In a further aspect, a computer-implemented method is disclosed that includes accessing code generated corresponding to at least a portion of a graphical model and identifying a first segment in the generated code, the first segment corresponding to a first graphical affordance in the graphical model, the identifying performed graphically.</p>
<p id="p-0011" num="0010">In yet a further aspect, a medium that holds instructions executable using a computing device, where the instructions enable accessing code generated corresponding to at least part of a graphical model and identifying a first segment in the generated code corresponding to a first graphical affordance, the identifying performed graphically.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more exemplary embodiments and, together with the description, explain the invention. In the drawings,</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> depicts a high-level block diagram of an exemplary graphical modeling environment that may be used for implementing various exemplary embodiments;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> depicts an exemplary computing device suitable for practicing an illustrative embodiment;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> depicts an exemplary distributed system suitable for a distributed implementation of exemplary embodiments;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. 4A-4C</figref> depict a flow diagram that illustrates exemplary steps for providing traceability between a graphical model and generated code;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5A</figref> depicts an exemplary graphical model, exemplary generated code and an exemplary generated report in accordance with exemplary embodiments;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5B</figref> depicts an exemplary graphical identifier for identifying segments of the exemplary generated code and sections of the exemplary generated report of <figref idref="DRAWINGS">FIG. 5A</figref>;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5C</figref> depicts another exemplary graphical identifier for identifying segments of the exemplary generated code and sections of the exemplary generated report of <figref idref="DRAWINGS">FIG. 5A</figref>;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5D</figref> depicts unique graphical identifiers for identifying segments of the exemplary generated code and sections of the exemplary generated report of <figref idref="DRAWINGS">FIG. 5A</figref> that correspond to various aspects of a graphical affordance in the exemplary graphical model of <figref idref="DRAWINGS">FIG. 5A</figref>;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6A</figref> is a flow diagram that depicts exemplary steps for graphically identifying segments of generated code or sections of a generated report based on selected graphical affordances;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6B</figref> is a flow diagram that depicts exemplary steps for uniquely identifying segments of the generated code or sections of a generated report based on corresponding aspects of a graphical affordance;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7</figref> depicts an exemplary menu that allows the user to specify what segments of the generated code or sections of a generated report the user wants to identify;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 8</figref> depicts an exemplary graphical identification of a segment of generated code based on a selection of a graphical affordance in a graphical model;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram that depicts exemplary steps for graphically identifying a segment of generated code or a section of a generated report associated with an aspect of a graphical affordance in a graphical model based on a scope;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 10</figref> depicts a graphical identification of a graphical affordance in a graphical model using an exemplary technique;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 11A</figref> is a flow diagram that depicts exemplary steps for graphically identifying graphical affordances in a graphical model that correspond to selected segments of generated code or selected sections of a generated report;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 11B</figref> is an exemplary flow diagram for uniquely identifying aspects of a graphical model based on a corresponding segment in the generated code;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 11C</figref> is an exemplary flow diagram for graphically identifying aspects in a graphical model associated with a segment in the generated code based on a scope associated with the model;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 12</figref> is an exemplary graphical model that includes a user specified element and/or generated code from the graphical model;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 13A</figref> is a flow diagram that depicts exemplary processing that can be used for illustrating the mapping between a requirements document and a graphical model;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 13B</figref> is a flow diagram that depicts exemplary processing that can be used for illustrating the mapping among a requirements document, generated code and/or a generated report;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 14A</figref> depicts the exemplary graphical model and generated code of <figref idref="DRAWINGS">FIG. 5</figref> along with an example of additional information that can be displayed to a user;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 14B</figref> is a flow diagram that depicts exemplary processing that can be used for graphically identifying undisplayed information;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 15A</figref> depicts an exemplary graphical model that may be developed in accordance with exemplary embodiments;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 15B</figref> depicts exemplary code files that may be generated from the graphical model of <figref idref="DRAWINGS">FIG. 15A</figref>;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 16A</figref> is an exemplary deployable representation in accordance with exemplary embodiments;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 16B</figref> is an exemplary deployable representation of tracing information;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 17</figref> is a flow diagram that depicts exemplary processing that can be used for implementing an external debugger on the generated code;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 18A</figref> depicts an exemplary graphical model and code generated from the graphical model;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 18B</figref> depicts changing an operator in the generated code of <figref idref="DRAWINGS">FIG. 18A</figref>;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 18C</figref> depicts generating code for a graphical model and/or generating code for a modified version of the graphical model;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 18D</figref> depicts an exemplary graphical model, generated code and user interface for implementing round trip editing according to exemplary embodiments;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 19</figref> is a flow diagram that depicts exemplary processing that can be used for round-trip editing;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 20A</figref> is a flow diagram that depicts exemplary processing that can be used for using a search and replace operation for a graphical model;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 20B</figref> is a flow diagram that depicts exemplary processing that can be used for using a search and replace operation for generated code;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 21</figref> is a flow diagram that depicts exemplary processing that can be used for locking aspects of a graphical model and generated code; and</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 22</figref> is an exemplary diagram of entities that can be mapped using tracing techniques.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0049" num="0048">Exemplary embodiments described herein provide a graphical modeling environment to allow a user to generate a graphical model that maps to multiple entities. The entities may include a requirements document, generated code, an intermediate representation, a generated report, etc. These entities may also be mapped to one another.</p>
<p id="p-0050" num="0049">The mapping between the entities may be bi-directional. For example, a graphical model can be mapped to generated code and vice versa. The bi-directional mapping may facilitate graphical identification of portions of the graphical model that correspond to selected segments of the generated code. The bi-directional mapping may also facilitate graphical identification of segments of generated code that correspond to selected portions of a graphical model. The parts of the entities that map to one another may use a one-to-one mapping, a one-to-many mapping, a many-to-one mapping, a many-to-many mapping, etc. The bi-directional mapping may be injective, surjective, bijective, etc. In an injective mapping, for example, each part of a first entity is mapped to a corresponding part of a second entity in a one-to-one fashion, but the second entity may have parts, for which the first entity does not map to. In a surjective mapping, for example, each part of a first entity is mapped to a corresponding part on a second entity. A surjective mapping allows more than one part of the first entity to map to a single part of the second entity. In subjective mapping all parts of the first and second entity have corresponding parts. A bijective mapping is both injective and surjective. A bijective mapping allows for each part of a first entity to map to a corresponding part of a second entity in an one-to-one fashion, such that each part of the first and second entities is mapped to single corresponding part and there are no parts of the first and second entities that are not mapped to one another.</p>
<p id="p-0051" num="0050">The graphical model may represent a system, such as a dynamic system, and may be executable in the graphical modeling environment. A graphical model may be represented as, for example, a block diagram model, data flow model, state-diagram model, etc. Some possible examples of suitable graphical modeling environments that may be used to develop a graphical model in accordance with exemplary embodiments are, but are not limited to, Simulink&#xae; software and/or Stateflow&#xae; software from the MathWorks Inc. of Natick Mass., LabVIEW&#xae; or MATRIXx from National Instruments, Inc., Mathematica&#xae; from Wolfram Research, Inc., Mathcad of Mathsoft Engineering &#x26; Education Inc., Maple&#x2122; from Maplesoft, a division of Waterloo Maple Inc., Dymola from Dynasim AB of Lund, Sweden, Extend from Imagine That, Inc. of San Jose, Calif., Scilab&#x2122; and Scicos from The French National Institution for Research in Computer Science and Control (INRIA), Le Chesnay Cedex, France, MSC.Adams&#xae; from MSC.Software Corporation of Santa Ana, Calif., modeling software from dSPACE of Paderborn, Germany, electronic design automation (EDA) software from Cadence&#x2122; of San Jose, Calif. or Synopsis&#xae; of Mountain View, Calif., the BEACON software family from Applied Dynamics International of Ann Arbor, Mich., etc. In addition, modeling environments, such as those that support modeling physics-based domains, Unified Modeling Language (UML) like Rhapsody&#xae; from iLogix, Inc. of Toronto, Canada or Rational&#xae; from International Business Machines Corporation of Armonk, N.Y., or SysML like ARTiSAN Studio from ARTiSAN Software Tools, Inc of Beaverton, Oreg. or Rhapsody&#xae; from iLogix, Inc., etc., may be suitable for implementing a graphical model in accordance with the exemplary embodiments.</p>
<p id="p-0052" num="0051">Exemplary graphical models may be developed based on a set of requirements that may be contained in one or more machine-readable structures, such as a text file, a spreadsheet, a word processing file, a presentation application file, database, repository, etc., which will generally be referred to herein as a &#x201c;requirement documents&#x201d;. The requirements may be subject to version control by a version control system to enable tracking of versions when the requirements change. In some instances, the requirements may be included in the graphical model such that the requirements and the design (i.e., the graphical model) are in the same location. The requirements may be mapped to the graphical model and/or generated code to facilitate graphical identification of requirements that map to graphical affordances in a graphical model and/or segments in generated code. The graphical affordances or segments may also be graphically identified based on a selection of a requirement.</p>
<p id="p-0053" num="0052">Generated code may be generated in a programming language, such as C, C++, JAVA&#xae;, Javascript, an assembly language, etc.; a hardware description language, such as Verilog, VHDL (very high speed integrated circuit hardware description language), etc.; a register transfer language (RTL); etc. Implementations may further generate information about a graphical model using a programming language, alone or in combination with the generated code discussed above. In one example, an XML representation may be used to include meta-information about the model, such as, which functions should be called and in what order; which task should be called and at what rate; what types input arguments have; etc.</p>
<p id="p-0054" num="0053">Exemplary embodiments may further enable graphically identifying segments in generated code that correspond to selected graphical affordances in the graphical model. In this manner, a user may view segments of generated code that map to selected graphical affordances. Graphical affordances, as used herein, refer to aspects of a graphical model that are displayed in the graphical model and may include, for example, elements, signals, annotations, etc.</p>
<p id="p-0055" num="0054">The term signal discussed herein refers to data that is passed to or from elements in a graphical model. A signal may be composed of data values calculated based on the execution of an element in a graphical model. A signal may be associated with a unit of measurement such as time, velocity, acceleration, voltage, current, etc., or may be a unitless data value. A signal may be represented by various data types including unsigned bytes or words, signed bytes or words, double, integers, floating point notations, etc. Signals may use frame based transmission formats for passing data to and from elements in a graphical model and/or may use non-frame based transmission formats.</p>
<p id="p-0056" num="0055">A frame, as used herein, refers to a temporal collection of data samples. For example, a frame may include a fixed number of data samples that are transmitted as a unit from one element to another element in a model during a given period. The samples in a frame may, for example, represent a serial stream of data that is transmitted during a specified time period. For example, a user or system may determine a time interval for a stream of data that is assembled into one or more frames. When an assembled frame is transmitted, all samples in the frame may be sent at substantially the same time.</p>
<p id="p-0057" num="0056">A graphical affordance may be used to map segments of generated code in exemplary implementations. Further, portions of a graphical affordance may be selected and graphically identified in generated code. For example, a user may select an input of a graphical affordance that represents an element in a graphical model and a segment in generated code that corresponds to the selected input may be graphically identified to the user. Likewise, a user may select a graphical affordance and various parts of the graphical affordance may be uniquely identified in the generated code by a graphical identifier. Examples of parts of a graphical affordance may include, but are not limited to, signal names, input variables, element parameters, output variables, etc.</p>
<p id="p-0058" num="0057">Exemplary embodiments may enable the graphical identification of graphical affordances. For example, a user may select a segment of generated code, and the selected segment may map to a graphical affordance in a graphical model. Upon selecting the segment, the graphical affordance that corresponds to the selected segment may be graphically identified. In one example, the graphical identification is achieved by highlighting the graphical affordance. In this manner, a user may view portions of the graphical model that map to selected segments of generated code. Exemplary embodiments may allow a segment of generated code to map to a graphical affordance, various graphical affordances, portions of a graphical affordance, etc.</p>
<p id="p-0059" num="0058">When code is generated, one or more intermediate representations (IRs) may be generated. An IR, as used herein, refers to a representation, such as a data structure that is stored in memory, a file, a database, or any other acceptable storage medium. The IR can be constructed from input data contained within a source language (i.e., a language used by a graphical model) and from which part or all of the target language information (i.e., generated code) is constructed. One example of an intermediate representation that can be used with exemplary embodiments is a control flow graph (CFG). An IR may have meta tags to identify where the content of the IR is derived from. A meta tag associates the content of the IR with content that is used to generate the IR. The content of an IR may be derived from, for example, elements in a graphical model, optimization rules, model configuration options, etc.</p>
<p id="p-0060" num="0059">Exemplary embodiments may also enable round-trip editing between a graphical model and generated code related to the graphical model. Round-trip editing allows a user to modify segments of generated code or portion of a graphical model without requiring a complete regeneration of generated code and/or the graphical model. The round-trip editing may enable, for example, regeneration of only the generated code that is affected by the modifications. For example, a user may generate code from a graphical model and may subsequently modify a portion of the graphical model. A segment of generated code that corresponds to the modified portion of the graphical model may be updated, while the remaining segments of generated code are unaffected. Subsequently, the user may modify a segment in generated code. After modifying the segment, a portion of the graphical model that corresponds to the segment may be updated, while the remaining portions of the graphical model are unaffected.</p>
<p id="p-0061" num="0060">A user may implement a search operation to search for recurring graphical affordances or segments of generated code. Segments of generated code that correspond to the recurring graphical affordance detected by the search may be graphically identified. Likewise, graphical affordances of a graphical model that correspond to recurring generated code segments detected by the search may be graphically identified. The recurring graphical affordances or recurring segments may be replaced with another graphical affordance and/or segment, respectively, by the user. When the recurring graphical affordance is replaced, generated code may be updated so that segments in generated code that correspond to the recurring graphical affordance are replaced to reflect the replacement of the recurring graphical affordance. Similarly, when the recurring segment is replaced, the graphical model may be updated so that graphical affordances that correspond to the recurring segment are replaced to reflect the replacement of the recurring segment.</p>
<p id="p-0062" num="0061">Tracing information that associates graphical affordances with segments in generated code may be generated. The tracing information may provide a complete mapping between the graphical model and generated code and may be an independent representation stored in, for example, an independent file, database, repository, etc. A programmable application program interface (API) may be provided that allows interaction with the independent representation of tracing information. The programmable API may allow a user to develop and/or use an external debugger for debugging generated code or a graphical model. In this manner, the user may create a debugging application that is independent from the graphical modeling environment. Exemplary implementations of the debugging application may interact with the graphical modeling environment through the programmable API. The programmable API may allow for programmatic and/or graphical identification of segments of generated code or graphical affordances of the graphical model based on the tracing information in the independent representation.</p>
<p id="p-0063" num="0062">Exemplary embodiments may further provide generated reports that may be generated from a graphical model and/or generated code. The generated reports may be mapped to the graphical model and/or generated code to allow for graphically identifying sections in the generated report. The mapping may also allow graphically identifying portion of the graphical model or segments of generated code based on a selection of one or more sections in the generated reports. Generated reports may include a listing of generated code, information regarding how the generated code was generated, information regarding an execution of a graphical model, generated code, etc.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 1</figref> is an exemplary high-level block diagram of the graphical modeling environment <b>100</b> (hereinafter environment <b>100</b>) for modeling, simulating, analyzing, etc., systems, such as dynamic systems. The environment <b>100</b> may include a graphical modeling interface <b>110</b> (hereinafter interface <b>110</b>), a textual interface <b>130</b>, an execution engine <b>140</b>, a code generating tool <b>150</b>, a report generating tool <b>160</b>, and one or more programmable application program interfaces (APIs) <b>170</b>. The environment <b>100</b> may be an integrated environment and may allow a user to simultaneously view a graphical model and generated code. To enable simultaneous viewing, the environment <b>100</b> may be implemented as a Multiple Document Interface (MDI) application.</p>
<p id="p-0065" num="0064">The environment <b>100</b> allows a user to develop graphical models using the interface <b>110</b>. The interface <b>110</b> can be a graphical user interface that may include a canvas that is represented by a graphical area on the interface <b>110</b>. The canvas may allow a user to develop and/or view graphical models. For example, a user can place elements <b>114</b>, <b>116</b> and/or <b>118</b> on the canvas to create the graphical model <b>112</b>. The interface <b>110</b> may also provide options to allow the user to generate code and/or a report from the graphical model <b>112</b>. Interface <b>110</b> may also allow a user or the environment <b>100</b> to add elements, delete elements, replace elements, etc., in the graphical model <b>112</b>. For example, a user may create the graphical model <b>112</b> via the interface <b>110</b>. The created graphical model <b>112</b> may represent a model of a system, such as a dynamic system and/or another type of system. The user may use predefined elements (e.g., system defined, environment defined, etc.) or user-defined elements to develop graphical model <b>112</b>.</p>
<p id="p-0066" num="0065">Elements <b>114</b>, <b>116</b> and/or <b>118</b> may represent, but are not limited to continuous and/or discrete dynamics elements, such as integration elements, unit delay elements, etc.; algorithmic elements, such as sum, product, lookup tables, etc.; and/or structural elements, such as multiplexers, switches, signal or bus selectors, etc. Elements <b>114</b>, <b>116</b> and/or <b>118</b> may also represent states, where the graphical model <b>112</b> may include a state diagram model. Elements <b>114</b>, <b>116</b> and/or <b>118</b> may be used in the graphical model <b>112</b> to develop a model of a system, such as a dynamic system. Elements <b>114</b>, <b>116</b> and/or <b>118</b> may be supplied by the environment <b>100</b>. The environment <b>100</b> may allow a user to alter environment supplied elements <b>114</b>, <b>116</b> and/or <b>118</b> or create customized elements.</p>
<p id="p-0067" num="0066">In another implementation, a user may supply one or more of elements <b>114</b>, <b>116</b> and <b>118</b>. For example, a user may create elements <b>114</b>, <b>116</b> and/or <b>118</b>, thereby implementing user specified elements <b>114</b>, <b>116</b> and/or <b>118</b>. The user supplied elements <b>114</b>, <b>116</b> and/or <b>118</b> that may contain programming language statements or instructions in a technical computing language.</p>
<p id="p-0068" num="0067">Elements <b>114</b>, <b>116</b> and <b>118</b> may have parameters. Parameters may affect the functionality or execution of the graphical model <b>112</b>. Parameters that affect the functionality or execution of the graphical model may be referred to as functional parameters. Some examples of functional parameters include, for example, a sample time parameter that determines when the elements <b>114</b>, <b>116</b> and/or <b>118</b> execute, scaling parameters that may affect the magnitude of an output of the element <b>114</b>, <b>116</b> or <b>118</b>, data type that determines the format in which data is passed from one element to another, etc. Parameters may also be nonfunctional in that they do not affect the functionality or execution of the graphical model. Some examples of nonfunctional parameters include, for example, an element name, an elements appearance, annotated text that is associated with the element, etc. Nonfunctional parameters may also be associated with characteristics such as power consumption, execution time, and weight.</p>
<p id="p-0069" num="0068">Elements <b>114</b>, <b>116</b> and/or <b>118</b> may be connected to each other to pass signals in the graphical model <b>112</b>. Signals may be passed to and/or from elements in the graphical model <b>112</b>. The signals can be represented by various types, such as integer, floating point, double, unsigned, signed bytes or words, etc. The signals may be contained in a bus format and/or may use frames. A bus format, as referred to herein, provides a format for transmitting a collection of signals to and from elements in a graphical model. A bus format may have a bus width that indicates how many signals the bus contains. When signals are in a bus format the signals may be transmitted to the same element or may be transmitted to different elements that are connected to the bus. Frames, as referred to herein, are a temporal collection of data samples. For example, a frame can include fixed number of data samples that are transmitted as unit from one element to another element in a model. The samples in a frame may, for example, represent a serial stream of data that is transmitted during a specified time period. For example, a user or system can determine a time interval for a stream of data that is assembled into one or more frames. When an assembled frame is transmitted, all samples in the frame may be sent at substantially the same time.</p>
<p id="p-0070" num="0069">The textual interface environment <b>130</b> allows a user to develop a user-specified element (e.g., element <b>114</b>) with code in a textual language. Code developed using the textual interface <b>130</b> may be included as, for example, the element <b>114</b> in the graphical model <b>112</b>. The textual interface <b>130</b> may also facilitate debugging and profiling of graphical model <b>112</b> or the environment <b>100</b> may include a separate graphical debugger and profiler (not shown in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0071" num="0070">The execution engine <b>140</b> may communicate with the interface <b>110</b>. The execution engine <b>140</b> can receive the graphical model <b>112</b>, which may represent, for example, a block diagram, state diagram, data flow diagram, etc., that is generated using the interface <b>110</b>. The execution engine <b>140</b> may simulate the graphical model <b>112</b> in one implementation. The execution engine <b>140</b> may generate data from the execution of the graphical model <b>112</b>. The data may be displayed to a user in a textual or graphical form. For example, the data may be presented to the user in table form or in graph form. The environment <b>100</b> may use a centralized data viewer to view the data generated by the execution engine <b>140</b>.</p>
<p id="p-0072" num="0071">The execution engine <b>140</b> may use numerical integration methods to compute behavior for differential equation as well as difference equation models. These numerical integration methods may be explicit and implicit as well as fixed step or variable step. A zero-crossing detection and location mechanism may be used by the execution engine <b>140</b> to identify and locate times at which events occur, such as a modeled collision between two rigid bodies. The execution engine <b>140</b> may handle difference equations by precomputing a static schedule of times when values change. This static schedule may employ a base rate that is the greatest common denominator of all sample times that are scheduled for execution by the execution engine <b>140</b>. The execution engine <b>140</b> may handle discrete event systems based on a base rate or by using a dynamical scheduling mechanism, such as an event calendar. The execution engine <b>140</b> may employ any combination and/or permutation these features. Part or all of the functionality of the execution engine <b>140</b> can be included in generated code and it may be optimized in a similar manner as generated code.</p>
<p id="p-0073" num="0072">The code generating tool <b>150</b> may generate code, such as source code, object code, a compiled executable, a library, etc., for forming an executable representation of the graphical model <b>112</b> provided by the interface <b>110</b>. The code generating tool <b>150</b> may also be used to generate a hardware description language (HDL) or a register transfer language (RTL) representation of the graphical model <b>112</b>. The generated code may be stored in multiple files. For example, part of the generated code may be stored in a header file, while another part of generated code may be stored in a source file. In an exemplary implementation, code generating tool <b>150</b> may include a code generating tool such as Real-Time Workshop&#xae; from The MathWorks, Inc. of Natick, Mass., or any software tool that may be capable of generating executable code, instructions, etc., in a programming language such as JAVA&#xae;, Javascript, Python&#x2122;, C, C++, an assembly language, etc.; a hardware description language such as Verilog, VHDL, etc.; RTL; etc. To generate code the code generating tool <b>150</b> may convert a source model language representation of the graphical model <b>112</b> to a target language representation.</p>
<p id="p-0074" num="0073">During the code generation process, the code generating tool <b>150</b> may generate one or more IRs prior to generating code from the graphical model <b>112</b>. For example, the code building tool <b>150</b> may generate an IR and may subsequently generate code from the IR. The IR may be a CFG that captures the semantics of the graphical model <b>112</b>. An IR represented by a CFG may include nodes that represent algorithmic aspects of the graphical model <b>112</b> and edges that indicate the flow of the algorithms.</p>
<p id="p-0075" num="0074">The code generating tool <b>150</b> may generate code for the execution of the graphical model <b>112</b> that is provided by the interface <b>110</b>. The code generating tool <b>150</b> may also compile generated code into object code and build an executable program, library or any other form of executable instructions. The generated code may be designed to run on any processor, microprocessor, dual-core processor, multi-core processor, cluster of processors, digital signal processor (DSP), system on chip (SOC), reconfigurable signal conditioning hardware, operating system, computational hardware device, component of a computational hardware device, etc. In one embodiment, generated code may include embedded code targeted to run on any type of embedded system. For example, generated code may be implemented as firmware in an electronic system that uses a microprocessor or a microcontroller. Additionally, generated code can be customized to run on a specific target hardware platform. For example, generated code may include fixed-point code to run a fixed-point processor or generated code may emulate fixed-point behavior on a floating-point processor.</p>
<p id="p-0076" num="0075">The graphical model <b>112</b> may include directives as how generated code should be generated. For example, the element <b>114</b> in the graphical model <b>112</b> may be directed to have a corresponding function, method, procedure, etc., to be generated in generated code with an argument list and name as directed by the code generating tool <b>150</b>. A function, method, procedure, etc., as used herein refers to a segment of code that has a defined interface for passing arguments. For clarity, the terms function, method, procedure, etc., will be referred to hereinafter simply as a function. A function performs an operation that is defined by the content in the function. The function may or may not return a value when the operation is complete. The function may be reused by other graphical model elements (e.g., elements <b>116</b>, <b>118</b>, etc.) with the same, or similar, functionality. Generated code may be that of a programming language, such as JAVA&#xae;, Javascript, C, C#, C++, an assembly programming language, etc.; a hardware description language, such as Verilog, VHDL, etc.; RTL; etc.</p>
<p id="p-0077" num="0076">Further, optimizations such as expression folding, function inlining, function outlining, constant propagation, etc., may be applied to generated code. Expression folding refers to reducing multiple expressions to a single expression in generated code. Function inlining refers to placing the contents of a function inline so that when a function is called the function does not have to go to a call site that is external to the body of generated code to perform its operation. Function outlining refers to outlining an inlined function such that when the function is called the function has to go to a call site that is not part of the body of generated code. Constant propagation refers to replacing variables that reference a constant with the constant.</p>
<p id="p-0078" num="0077">In one embodiment, the environment <b>100</b> may read code and may create corresponding elements in the graphical model <b>112</b>. For example, an include file that contains code, such as, a struct definition, may be read by the environment <b>100</b> and a corresponding element (e.g., element <b>114</b>) may be created in the graphical model <b>112</b>. Alternatively, the code may include variables that are associated to memory locations and a location or reference that corresponds to the memory locations (e.g., pointer) may be provided in the graphical model <b>112</b>.</p>
<p id="p-0079" num="0078">The report generating tool <b>160</b> generates a report. The generated report may be, for example, a document structured with sections corresponding to different elements of the graphical model <b>112</b> representation, a coverage report, a model checking report, a code generation report incorporating syntax highlighted code, a profiling report that documents relative execution times of each of the elements, etc. Coverage reports, such as a code coverage report, a model coverage report, decision coverage report, condition coverage report, a condition/decision coverage report, a structural coverage report, etc., are reports that provide the user with information for determining how well the graphical model <b>112</b> and/or generated code cover a desired characteristic. For example, a user can develop the graphical model <b>112</b> based on requirements and can generate code from the graphical model <b>112</b>. The user can generate a model and/or code coverage report that provides information on whether the graphical model <b>112</b> and/or generated code meet the requirements. When generating a coverage report, a series of tests may be performed on the graphical model <b>112</b> and/or generated code to determine whether the requirements are met. The tests may serve to execute the graphical model <b>112</b> and/or generated code to exercise the functionality of the graphical model <b>112</b> and/or generated code. A model checking report provides an assessment of whether a certain condition can be satisfied, given a number of assumptions. For example, a model checking report may provide an assessment whether a signal may become 0 when another signal is always between 0 and 1. The generated report can include a document that may use navigable links, such as a mark up language document and may contain information relating to the graphical model <b>112</b>, settings of the code generating tool <b>150</b> and/or the generated software (code).</p>
<p id="p-0080" num="0079">The programmable APIs <b>170</b> can allow a user to interface the environment <b>100</b> with an external browser and/or debugger. The programmable API <b>170</b> can allow the user to browse or debug generated code and/or the graphical model <b>112</b> and to programmatically identify a code segment in generated code that corresponds to a graphical affordance in the graphical model <b>112</b> or to programmatically identify a graphical affordance in the graphical model <b>112</b> that corresponds to a segment in generated code using the external browser and/or debugger. For example, an identified graphical affordance may include an element, a signal, an annotation, etc. The programmable API <b>170</b> can allow the external browsing or debugging to graphically identify segments of generated code or portions of the graphical model <b>112</b>. An external code browser and/or debugger can use tracing information and the programmable API <b>170</b> to browse and/or debug the graphical model <b>112</b> and/or generated code.</p>
<p id="p-0081" num="0080">When generating an IR, code, a report, etc., the environment <b>100</b> may use transformation rules. Transformation rules, for example, may determine how an element is represented in the IR or generated code. For example, there may be a transformation rule relating to the element <b>114</b> for transforming the element <b>114</b> into a section of the IR and there may be another transformation rule for transforming the section of the IR into generated code. The transformation rules may exist in a computer readable medium and may be contained in a file, database, repository, etc. In some embodiments a graph rewriting system may be used to implement a transformation rule. Graph rewriting systems may also be referred to as using a &#x201c;graph grammar&#x201d;. Graph grammar may use pattern matching for replacing one graph structure with another. There are numerous ways to implement pattern matching. One common implementation is guided by heuristics to manage the computational complexity. Graph grammar may employ any number of rewriting rules (transformation rules) that can be extended by textual transformation information. Some embodiments may implement triple graph grammar or a higher order of graph grammar when generating an IR, code, a report, etc. Transformation rules, such as those implemented using triple graph grammar, may allow, for example, mapping between a first entity (e.g., an IR, generated code, a generated report, etc.), a second entity that is generated from the first entity, and the information (e.g., transformation rules) used to generate the second entity.</p>
<p id="p-0082" num="0081">The programmable APIs <b>170</b> may also enable graphically identifying graphical affordances or segments of generated code that correspond to a graphical interface of a user-specified element (e.g., element <b>114</b>). For example, a user may define a function in a programming language, such as MATLAB&#xae;, C, C++, JAVA&#xae;, Javascript, etc., and the user may incorporate the function into the graphical model <b>112</b>. The code for the user-specified element may be developed using the textual interface <b>130</b> or any other application that allows a user to develop textual code, such as a word processing application, a code browser, etc. The function can be represented by a graphical affordance that has a graphical interface. The graphical interface can represent, for example, inputs, outputs, triggers, etc., and may enable other elements in the graphical model <b>112</b> to connect to the element that represents the function.</p>
<p id="p-0083" num="0082">One of ordinary skill in the art will also appreciate that the components of the environment <b>100</b> may be provided on a single computing device, as described below with reference to <figref idref="DRAWINGS">FIG. 2</figref>, on multiple computing devices (e.g., in a distributed configuration), and/or in other configurations (e.g., a multi-core implementation operating on one or more platforms).</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 2</figref> is an exemplary computing device <b>200</b> suitable for practicing the exemplary embodiments. The implementation of <figref idref="DRAWINGS">FIG. 2</figref> is illustrative and not limiting. The computing device <b>200</b> may take many forms, including but not limited to a personal computer, workstation, server, network computer, quantum computer, optical computer, bio computer, Internet appliance, mobile device, a pager, a tablet computer, a smart sensor, application specific processing device, etc.</p>
<p id="p-0085" num="0084">The computing device <b>200</b> may be electronic and may include a Central Processing Unit (CPU) <b>205</b>, memory <b>210</b>, storage <b>215</b>, an input control <b>220</b>, a modem <b>225</b>, a network interface <b>230</b>, a display <b>235</b>, processor <b>270</b> and a graphical processing unit (GPU) <b>290</b>. The CPU <b>205</b> may control components of the computing device <b>200</b> to provide the interface <b>110</b>, the textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, and/or one or more programmable APIs <b>170</b>. The memory <b>210</b> may store instructions and data, and may provide the instructions and data to the CPU <b>205</b>. CPU <b>205</b> may operate the computing device <b>200</b> and may run the interface <b>110</b>, the textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, and/or one or more programmable APIs <b>170</b> based on the stored instructions.</p>
<p id="p-0086" num="0085">Optionally, the computing device <b>200</b> may include multiple CPUs <b>205</b> for executing software loaded in the memory <b>210</b>, and other programs for controlling system hardware. Each of the CPUs <b>205</b> can be a single or a multiple core processor <b>206</b>. The code loaded in the memory <b>210</b> may run in a virtualized environment, such as in a Virtual Machine (VM) <b>211</b>. Multiple VMs <b>211</b> may be resident on a single processor. Also, part of the application may run in processor <b>270</b>, which may include, for example, a field programmable gate array (FPGA) <b>272</b>, programmable logic controller (PLC) <b>274</b>, an application specific integrated circuit (ASIC) <b>276</b>, an application specific instruction set processor (ASIP) <b>278</b>, a Fast Fourier Transform (FFT) processing device <b>280</b>, etc. Further, part of the applications may be run on analog electronic devices that may be included in the computing device <b>200</b>. Other resources, such as, for example, GPU <b>290</b>, may also be used to run part of the applications.</p>
<p id="p-0087" num="0086">The storage <b>215</b> may contain software tools for applications. The storage <b>215</b> may include code <b>250</b> for the operating system (OS) of the device <b>200</b>, code <b>255</b> for applications running on the operation system including the applications for the interface <b>110</b>, the textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, and/or one or more programmable APIs <b>170</b> and data <b>260</b> generated from the interface <b>110</b>, the textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, one or more programmable APIs <b>170</b>, and/or other code. Portions of applications may be stored in the CPU cache <b>207</b>, memory <b>210</b>, and/or elsewhere, such as on a remote storage device connected to computing device <b>200</b> via a network, a bus, a dedicated link, etc.</p>
<p id="p-0088" num="0087">The input control <b>220</b> may interface with a data entry device, such as a keyboard <b>240</b>, a pointing/indexing device, such as a mouse <b>242</b>, a microphone <b>244</b>, a camera <b>246</b>, such as a web camera, and/or other input devices. The computing device <b>200</b> may receive, through the input control <b>220</b>, input data, such as the input data for developing graphical model <b>112</b>. The computing device <b>200</b> may display on the display <b>235</b> user interfaces for displaying the data generated from the interface <b>110</b>, the textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, and/or one or more programmable APIs <b>170</b>.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 3</figref> is an exemplary network environment <b>300</b> (hereinafter environment <b>300</b>) suitable for processing distributed implementations of the exemplary embodiments. Environment <b>300</b> may include one or more servers <b>320</b>/<b>350</b> coupled to clients <b>330</b>/<b>340</b> via a communication network <b>310</b>. In one implementation, servers <b>320</b>/<b>350</b> and/or clients <b>330</b>/<b>340</b> can be implemented via the computing device <b>200</b>. The network interface <b>230</b> and the modem <b>225</b> of the computing device <b>200</b> enable the servers <b>320</b>/<b>350</b> to communicate with the clients <b>330</b>/<b>340</b> through the communication network <b>310</b>.</p>
<p id="p-0090" num="0089">The communication network <b>310</b> may include Internet, intranet, Local Area Network (LAN), Wide Area Network (WAN), Metropolitan Area Network (MAN), wireless network (e.g., using IEEE 802.11, Bluetooth, etc.), etc. The communication network <b>310</b> may use middleware, such as Common Object Request Broker Architecture (CORBA) or Distributed Component Object Model (DCOM) to allow a computer (e.g., client <b>320</b>) on the communication network <b>310</b> to communicate directly with another computer or device (e.g., client <b>330</b>) that is connected to the communication network <b>310</b>. In addition, the communication network <b>310</b> may use RMI (Remote Method Invocation) or Remote Procedure Call (RPC) technology. RMI and RPI are exemplary technologies that allow functions, methods, procedures, etc., to be called over the environment <b>300</b>. For example, the client <b>330</b> may invoke a method that resides remotely on the client <b>340</b>.</p>
<p id="p-0091" num="0090">In environment <b>300</b>, the servers <b>320</b>/<b>350</b> may provide the clients <b>330</b>/<b>340</b> with software components or products under a particular condition, such as a license agreement. The software components or products may include those for providing the interface <b>110</b>, textual interface <b>130</b>, the execution engine <b>140</b>, the code generating tool <b>150</b>, the report generating tool <b>160</b>, one or more programmable APIs <b>170</b>, etc. For example, the client <b>340</b> may perform the modeling of a dynamic system using a software component provided by the server <b>320</b> and send the server <b>320</b> the model for execution. The server <b>320</b> may return the execution results to the client <b>340</b> and the client <b>340</b> may subsequently display the data to the user with the information on the data.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIGS. 4A-C</figref> depict a flow diagram that illustrates exemplary processing techniques that can be used to perform traceability operations between the graphical model <b>112</b>, generated code, and/or an IR generated from the graphical model <b>112</b>. A user can generate the graphical model <b>112</b> in the environment <b>100</b> (step <b>400</b>). The graphical model <b>112</b> that is generated may be executable in the environment <b>100</b> and may represent a graphical model of a system, such as a dynamic system. In one implementation, the graphical model <b>112</b> can be represented by a source model language, such as, for example, Simulink&#xae; software.</p>
<p id="p-0093" num="0092">In some instances, the user may not specify all of the parameters of the graphical model <b>112</b>. For example, the user may not specify values for some parameters in the graphical model <b>112</b>, such as a sample time or data type. These parameter values can be inferred by the environment <b>100</b>. For example, the parameter values of a graphical affordance (e.g., element <b>118</b>) may be inferred from other graphical affordances (e.g., elements <b>114</b> and <b>116</b>) in the graphical model <b>112</b>. Inferences, such as these, may occur when the parameter values of the other graphical affordances are specified or the other graphical affordances have access to a graphical affordance that has the specified parameter values. In this manner, a graphical affordance that has an unspecified parameter may inherit one or more parameters from another graphical affordance that is associated with the graphical affordance. Such inferences may occur using a technique referred to as &#x201c;propagation&#x201d; or by solving a constraint satisfaction problem using, for example, optimization techniques. Inferences may further occur using other techniques.</p>
<p id="p-0094" num="0093">The code generating tool <b>150</b> can generate one or more IRs from the graphical model <b>112</b> and can generate code that corresponds to the graphical model <b>112</b> (step <b>405</b>). The code generating tool <b>150</b> converts the source model language that represents the graphical model <b>112</b> into a target language (i.e., generated code). For example, the code generating tool <b>150</b> may generate code in a programming language, such as C, C++, JAVA&#xae;, Javascript, an assembly language, etc., or the code generating tool <b>150</b> may generate code in a hardware description language, such as Verilog, VHDL, etc. The generated code may be stored in multiple files, such as in a header file, a source file, etc. The IRs and generated code may be generated using transformation rules that may exist in a file, database, repository, etc. The transformation rules may be implemented using graph grammar, triple graph grammar or any other order of graph grammar.</p>
<p id="p-0095" num="0094">The generated code may be compiled and executed external to the environment <b>100</b>. For example, in one implementation generated code may be compiled and executed on a target processor to implement the functionality of the graphical model <b>112</b>.</p>
<p id="p-0096" num="0095">The segments in generated code and/or portions of the IRs can be bi-directionally mapped to graphical affordances in the graphical model <b>112</b> to associate the segments in generated code and/or portions of the IRs with aspects of the graphical model <b>112</b> and vice versa (step <b>410</b>). Graphical affordances in the graphical model <b>112</b> that are translated into the IRs and/or generated code can be referenced within the IRs and/or generated code with a tag, association, etc. For example, a tag, association, etc., may be a hyperlink or another type of selectable connection for navigating between mapped entities (e.g., the graphical model <b>112</b>, an IR, generated code, a generated report, a requirements document, etc.).</p>
<p id="p-0097" num="0096">A common form of selectable connection is hyperlinked text or graphics that can be selected by the user (with a pointing device, data entry device or in some other fashion), resulting in the immediate delivery and/or view of another file. For example, hyperlinked text in generated code (e.g., a code segment in generated code) can be selected and a corresponding graphical affordance in the graphical model <b>112</b> can be displayed. Alternatively, a hyperlinked graphic in the graphical model (e.g., a graphical affordance, such as an element <b>114</b> or a signal) can be selected and a corresponding segment in generated code can be displayed. In the case where a hyperlink is used, a selection may be made, for example, by left-clicking with a pointing device or the hyperlink may simply be activated when the pointing device is positioned over the hyperlink.</p>
<p id="p-0098" num="0097">In addition, where transformation rules are used to generate the IR and/or generated code, the mapping may include a map to and between the graphical model <b>112</b> and the IR; the IR and generated code; the graphical model <b>112</b> and generated code; etc. In this case, generation of the IR and/or the code may be predicated on the existence of the transformation rules. The mapping may allow a user to identify the transformation rules that are used when generating the IR and/or generated code.</p>
<p id="p-0099" num="0098">The report generating tool <b>160</b> can generate a report that may incorporate generated code and/or mappings between generated code and the graphical model <b>112</b>. The generated report may further include, for example, sections corresponding to information on different elements <b>114</b>, <b>116</b> and/or <b>118</b> of the graphical model <b>112</b>, a coverage report, a code generation report, a profiling report, etc. The same tags associated with generated code can be used for mapping sections of the generated report to aspects of the graphical model <b>112</b>, generated code, and/or the IR. The same tags that are embedded in generated code or the generated report can be stored as part of the data structures represented by the elements <b>114</b>, <b>116</b>, and/or <b>118</b> in the graphical model <b>112</b>.</p>
<p id="p-0100" num="0099">If the user wishes to identify a graphical affordance that corresponds to a portion of the IR and/or a segment of generated code (step <b>412</b>), the user can browse the IR or generated code to identify portions (e.g., a graphical affordance, such as element <b>114</b>) of the graphical model <b>112</b> (step <b>415</b>) (<figref idref="DRAWINGS">FIG. 4B</figref>). Upon selecting a portion of the IR or a segment in generated code, graphical affordances (e.g., element <b>114</b>) of the graphical model <b>112</b> that are associated with the selected portion of the IR or segment in generated code can be graphically identified (step <b>420</b>). Where transformation rules were used and there is a mapping to the transformation rules, the transformation rules that are associated with the selected portion or segment may also be graphically identified.</p>
<p id="p-0101" num="0100">Alternatively, if the user does not wish to identify graphical affordance (step <b>412</b>), but rather wishes to identify portions of the IR or segments of generated code that correspond to graphical affordances, the user can select graphical affordances (e.g., elements <b>114</b>, <b>116</b> and/or <b>118</b>) of the graphical model <b>112</b> to identify corresponding portions of the IR or segments of generated code (step <b>425</b>) (<figref idref="DRAWINGS">FIG. 4C</figref>). Upon selecting a graphical affordance in the graphical model <b>112</b>, portions of the IR or segments of generated code that are associated with the selected graphical affordance can be graphically identified (step <b>430</b>). For example, the segments of generated code can be highlighted. Again, where transformation rules were used and the transformation rules were mapped, the transformation rules that are associated with the selected graphical affordance may be graphically identified.</p>
<p id="p-0102" num="0101">In another embodiment, the user may execute the graphical model <b>112</b> to generate data. The generated data may be mapped to the portion of the graphical model <b>112</b> that was used to generate data. The mapping can provide tags or associations that relate the data to the graphical model <b>112</b> and can allow a user to identify the portion of the graphical model <b>112</b> that corresponds to the generated data. For example, a user can execute the graphical model <b>112</b> and the element <b>114</b> can generate a signal that is retained as generated data. The generated data can be displayed to a user with a centralized data viewer. The user may select the data and the element <b>114</b> in the graphical model <b>112</b> may be graphical identified.</p>
<p id="p-0103" num="0102">Graphical identifiers, as discussed herein, provide a user with a way to discern those parts the entities (e.g., segments of generated code, graphical affordances of the graphical model <b>112</b>, sections of a generated report or requirements document, portions of an IR, etc.) that correspond to each other. For example, to graphically identify a segment in generated code, a section in the generated report or graphical affordance in the graphical model <b>112</b>, the segment, section or graphical affordance may be highlighted, change color, flash, etc.; or may become underlined, italicized, bolded, etc. A segment, section or graphical affordance may further be encompassed by a shape such as a rectangle, square, circle, oval, etc., and the border of the shape may be any color to aid in graphical identification. The interior of the shape may be shaded in a color or pattern according to exemplary embodiments. The graphical identifier may also be represented by an arrow or any other type of marker that can graphically identify the segment, section or graphical affordance to a user.</p>
<p id="p-0104" num="0103">In another embodiment, a graphical identifier may be a window that displays the segments of generated code, the sections of the generated report or requirements document, or portions of the IR that correspond to the graphical model <b>112</b>. For example, the user can select the element <b>114</b> in the graphical model <b>112</b> and the environment <b>100</b> can copy segments of generated code into a separate window that allows the user to view the segments of generated code that correspond to the element <b>114</b>.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIGS. 5A-D</figref> illustrate an implementation used to show a graphical model <b>500</b>, generated code <b>550</b> and/or a generated report <b>580</b>. In one implementation, the generated report <b>580</b> may be optionally generated; and in another implementation, the generated report <b>580</b> may be required for some activities or all activities. The graphical model <b>500</b> can be a model of a system and can include an element <b>502</b>. Generated code <b>550</b> can be generated using a generate code option <b>510</b> (hereinafter option <b>510</b>) and can include a segment <b>551</b> and a segment <b>555</b>. The generated report <b>580</b> can incorporate a listing <b>592</b> of generated code <b>550</b>. Generated code <b>550</b> or generated report <b>580</b> can be displayed to allow the user to inspect generated code <b>550</b> or generated report <b>580</b>.</p>
<p id="p-0106" num="0105">The generated report <b>580</b> may include a title <b>582</b>, a summary section <b>584</b>, an options section <b>586</b>, a generated files section <b>588</b>, a model settings section <b>590</b> and a listing section <b>592</b> of generated code <b>550</b>. The title <b>582</b> provides a heading for the generated report <b>580</b>. The summary section <b>584</b> may provide information as to particular versions of software applications that were used for the generated report <b>580</b>, generated code <b>550</b> and/or the graphical model <b>500</b> as well as information pertaining to when the generated report <b>580</b> and/or generated code <b>550</b> were generated. The options section <b>586</b> provides information pertaining to various aspects that have been specified for code generation, such as in which language generated code <b>550</b> is generated. The generated files section <b>588</b> provides information pertaining to code files that were generated as a result of the code generation process. The model settings section <b>590</b> provides information pertaining to model settings, such as, for example, execution parameters. The listing section <b>592</b> provides listings of the generated code <b>550</b> that is generated from the graphical model <b>500</b> and may include a section <b>581</b> and a section <b>585</b>.</p>
<p id="p-0107" num="0106">Information included in a generated report <b>580</b> may vary. The generated report <b>580</b> may include more or less information than what is depicted in the generated report <b>580</b>. For example, the generated report <b>580</b> may include a section that lists optimizations performed while generating generated code <b>550</b>, such as expression folding, loop unrolling, function inlining, function outlining, constant propagation, etc. In addition, the generated report <b>580</b> can include information pertaining to execution warning, memory usage, compile time (that may be represented per file and/or as a total compile time), etc. In one implementation, formats of the generated report <b>580</b> may vary. For example, the generated report <b>580</b> may be a word processing document, a mark-up language document, a spreadsheet document, etc.</p>
<p id="p-0108" num="0107">By selecting an element in the graphical model <b>500</b>, segments of generated code <b>550</b> and/or sections of the generated report <b>580</b> can be graphically identified. For example, referring to <figref idref="DRAWINGS">FIG. 5B</figref>, the user can select the element <b>502</b> to identify segments <b>551</b> and <b>555</b> in generated code <b>550</b> and sections <b>581</b> and <b>585</b> in the generated report <b>580</b> using graphical identifiers <b>557</b> and <b>587</b>, respectively. In some instances, the graphical identifier <b>557</b> and the graphical identifier <b>587</b> can be identical. When the graphical identifiers <b>557</b> and <b>587</b> are identical, it may provide an indication to the user that the sections <b>581</b> and <b>585</b> correspond to the segments <b>551</b> and <b>555</b> as well as to the element <b>502</b>. The user may select an element <b>502</b> in the graphical model <b>500</b> by moving a pointing device <b>505</b> over the element <b>502</b> in the graphical model <b>500</b>. In one implementation, the user can position the pointing device <b>505</b> on the element <b>502</b> in the graphical model <b>500</b> and the associated segments <b>551</b> and <b>555</b> of generated code <b>550</b> and/or the associated sections <b>581</b> and <b>585</b> of the generated report <b>580</b> are graphically identified. In another implementation, the user may select the element <b>502</b> in the graphical model <b>500</b> to identify segments <b>551</b> and <b>555</b> of generated code <b>550</b> and/or sections <b>581</b> and <b>585</b> of the generated report <b>580</b> by clicking on the selected element <b>502</b> in the graphical model <b>500</b>.</p>
<p id="p-0109" num="0108">In another embodiment, the segments <b>551</b> and <b>555</b> of generated code <b>550</b> and/or the sections <b>581</b> and <b>585</b> of the generated report <b>580</b> may depicted in a window <b>570</b>, as shown in <figref idref="DRAWINGS">FIG. 5C</figref>. The user may have the graphical model <b>500</b>, generated code <b>550</b> and generated report <b>580</b> and may wish to identify the segments <b>551</b> and <b>555</b> that correspond to the element <b>502</b>. The user may select the element <b>502</b> and the separate window <b>570</b> can be opened to display only the segments <b>551</b> and <b>555</b>. To display only the segments <b>551</b> and <b>555</b>, the environment <b>100</b> may copy the segments <b>551</b> and <b>555</b> into the window <b>570</b>. The window <b>570</b> can be used to display other parts of other entities (e.g., sections <b>581</b> and <b>585</b> of the generated report <b>580</b>, sections of a requirements document, portions of an IR, etc.) using the same mechanism.</p>
<p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. 6A</figref> is discussed with references to <figref idref="DRAWINGS">FIGS. 5A-C</figref> and is a flow diagram illustrating steps for graphically identifying the segments <b>551</b> and <b>555</b> of generated code <b>550</b> or the sections <b>581</b> and <b>585</b> of the generated report <b>580</b> based on selecting the element <b>502</b>. To begin, a user can generate the graphical model <b>500</b> that includes the element <b>502</b> (step <b>600</b>). The user can generate code <b>550</b> corresponding to the graphical model <b>500</b> by selecting the option <b>510</b> (step <b>605</b>). Optionally, the user can generate the generated report <b>580</b> that incorporates the listing <b>592</b> of generated code <b>550</b> and the associated mapping (step <b>610</b>). The user can identify the segments <b>551</b> and <b>555</b> of generated code <b>550</b> or the sections <b>581</b> and <b>585</b> of the generated report <b>580</b> that are associated with the element <b>502</b> by selecting the element <b>502</b> (step <b>615</b>). When the user selects element <b>502</b>, the segments <b>551</b> and <b>555</b> of generated code <b>550</b> or the sections <b>581</b> and <b>585</b> of the generated report <b>580</b> that are associated with the element <b>502</b> are graphically identified by graphical identifiers <b>557</b> and <b>587</b>, respectively (step <b>620</b>).</p>
<p id="p-0111" num="0110">In some instances, a graphical affordance may be mapped to multiple segments of generated code <b>550</b> or sections of the generated report <b>580</b> based on the various aspects of the graphical affordance. For example, referring to <figref idref="DRAWINGS">FIG. 5D</figref>, when the user selects the element <b>502</b> segments <b>551</b> and <b>555</b> and/or sections <b>581</b> and <b>585</b> can be uniquely identified. Segment <b>551</b> can be identified by a graphical identifier <b>591</b> and segment <b>555</b> can be identified by a graphical identifier <b>595</b>. In addition, section <b>581</b> can be identified by the graphical identifier <b>591</b>, thereby, identifying to the user that the section <b>581</b> corresponds to the segment <b>551</b> as well as the element <b>502</b>. Likewise, section <b>585</b> can be identified by the graphical identifier <b>595</b>, thereby, identifying to the user that the section <b>585</b> corresponds to the segment <b>555</b> as well as the element <b>502</b>.</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 6B</figref> is discussed in relation to <figref idref="DRAWINGS">FIGS. 5A and 5D</figref> and is a flow diagram that illustrates exemplary steps for uniquely identifying segments <b>551</b> and <b>555</b> of generated code <b>550</b> or sections <b>581</b> and <b>585</b> of the generated report <b>580</b> based on corresponding aspects of the element <b>502</b>. In one implementation, the various aspects of the graphical affordance can be uniquely identified in generated code <b>550</b>. The user can select the element <b>502</b> (step <b>650</b>) and segment <b>551</b> of generated code that corresponds to one of the various aspects <b>501</b>, such as an output variable of the element <b>502</b> can be uniquely identified by graphical identifier <b>591</b> (step <b>655</b>), while segment <b>555</b> (<figref idref="DRAWINGS">FIG. 5C</figref>) of generated code <b>550</b> that corresponds to an output of the element <b>502</b> can also be uniquely identified by graphical identifier <b>595</b> (step <b>660</b>).</p>
<p id="p-0113" num="0112">In some embodiments, the user may want to limit segments of generated code <b>550</b> or sections of the generated report <b>580</b> that are graphically identified. For example, the user may only want to identify the segment <b>551</b> of generated code <b>550</b> or section <b>581</b> of the generated report <b>580</b> that relates to one of the various aspects <b>501</b>, such as an output variable of the element <b>502</b> in the graphical model <b>500</b>.</p>
<p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. 7</figref> is an example of a menu <b>700</b> that allows the user to specify segments of generated code <b>550</b> or sections of the generated report <b>580</b> that the user wishes to identify and/or with which the user wishes to interact. A user may right click on the graphical model <b>500</b> to open menu <b>700</b>. In an alternative implementation, a user may select the &#x201c;Tools&#x201d; button from the menu bar <b>520</b>. The menu <b>700</b> provides an &#x201c;Inspect code&#x201d; option <b>702</b> that allows a user to specify which segments of generated code <b>550</b> that are graphically identified when an element in the graphical model <b>500</b> is selected. For example, when the user selects the &#x201c;Inspect code&#x201d; option <b>702</b>, a submenu <b>710</b> may be displayed that allows the user to select which segments of generated code <b>550</b> that are graphically identified.</p>
<p id="p-0115" num="0114">The submenu <b>710</b> can include, for example, a &#x201c;Block output&#x201d; option <b>712</b>, an &#x201c;Input variables&#x201d; option <b>714</b>, an &#x201c;Output variables&#x201d; option <b>716</b> and a &#x201c;Block parameters&#x201d; option <b>718</b>. When the user selects the option <b>712</b>, segments of the generated code <b>550</b> or sections of the generated report <b>580</b> that correspond to the output of a selected element are graphically identified. When the user selects option <b>714</b>, segments of generated code <b>550</b> or sections of the generated report <b>580</b> that correspond to input variables of a selected element are graphically identified. When the user selects option <b>716</b>, segments of generated code <b>550</b> or sections of the generated report <b>580</b> that correspond to output variables of a selected element are graphically identified. When the user selects option <b>714</b>, segments of generated code <b>550</b> or sections of the generated report <b>580</b> that correspond to element parameters of a selected element are graphically identified.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 8</figref> depicts the graphical model <b>500</b>, generated code <b>550</b> and the generated report <b>580</b> discussed with reference to <figref idref="DRAWINGS">FIG. 5A</figref>. As discussed with reference to <figref idref="DRAWINGS">FIG. 5A</figref>, the graphical model <b>500</b> can be a model of a system and can include an element <b>502</b>. Generated code <b>550</b> can be generated using the option <b>510</b> and include segments <b>551</b> and <b>555</b>. The generated report <b>580</b> can incorporate a listing <b>592</b> of generated code <b>550</b> and can include sections <b>581</b> and <b>585</b>. Generated code <b>550</b> or generated report <b>580</b> can be displayed to allow the user to inspect generated code <b>550</b> or generated report <b>580</b>.</p>
<p id="p-0117" num="0116">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, the element <b>502</b> in the graphical model <b>500</b> can have various aspects <b>501</b>, such as an output variable <b>503</b> that is associated with the element <b>502</b>. Some examples of other various aspects may be signal names, outputs, input variables, element parameters, output variables, etc. Generated code <b>550</b> can have the segment of code <b>551</b> and/or generated report <b>580</b> can have the section <b>581</b> that corresponds to one of the various aspects <b>501</b>, such as an output variable <b>503</b>. Referring to <figref idref="DRAWINGS">FIG. 8</figref>, when the user selects the element <b>502</b> the segment <b>551</b> and section <b>581</b> can be graphically identified by a graphical identifier <b>860</b> and an identifier <b>867</b>, respectively. In some instances, the graphical identifier <b>860</b> and the graphical identifier <b>867</b> can be identical to indicate to the user that the section <b>581</b> corresponds to the segment <b>551</b> as well as to the output variable <b>503</b> of the element <b>502</b>.</p>
<p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram that illustrates exemplary steps for graphically identifying the segment <b>551</b> of generated code <b>550</b> or the section <b>581</b> of the generated report <b>580</b> associated with one of the various aspects <b>501</b>, such as the output variable <b>503</b>, of the element <b>502</b> in the graphical model <b>500</b>. The flow diagram of <figref idref="DRAWINGS">FIG. 9</figref> is discussed with reference to <figref idref="DRAWINGS">FIGS. 7 and 8</figref>. Referring to <figref idref="DRAWINGS">FIG. 7</figref>, the user may indicate that only output variables should be identified in generated code <b>550</b> or generated report <b>580</b> by selecting option <b>716</b> (step <b>900</b>). Referring to <figref idref="DRAWINGS">FIG. 8</figref>, the user can select the element <b>502</b> in the graphical model <b>500</b> (step <b>905</b>). Only segment <b>551</b> and section <b>581</b> that correspond to output variable <b>503</b> are graphically identified by graphical identifiers <b>860</b> and <b>867</b>, respectively (step <b>910</b>). In this manner, a user can specify a scope of graphical affordances that can be selected. For example, a user can select to identify segments of generated code <b>550</b> or sections of the generated report <b>580</b> that correspond to various aspects (e.g., various aspects <b>501</b> of an element (e.g., element <b>502</b>) a single element, multiple elements, a signal, parameters or any other graphical affordance of the graphical model <b>500</b>.</p>
<p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. 10</figref> is an example of a graphical representation for depicting the graphical identification of a graphical affordance in the graphical model <b>500</b>. As discussed with reference to <figref idref="DRAWINGS">FIG. 5A</figref>, the user can generate the graphical model <b>500</b> and can generated code <b>550</b> that corresponds to the graphical model <b>500</b>. Optionally, the generated report <b>580</b> can be generated. The generated report <b>580</b> can incorporate a listing <b>592</b> of generated code <b>550</b>. Generated code <b>550</b> or generated report <b>580</b> can be displayed to allow the user to inspect generated code <b>550</b> or generated report <b>580</b>.</p>
<p id="p-0120" num="0119">The user can select the segment <b>551</b> of generated code <b>550</b> or the section <b>581</b> of the generated report <b>580</b>. Upon selection of the segment <b>551</b> or the section <b>581</b>, the element <b>502</b> that corresponds to the segment <b>551</b> or section <b>581</b> is graphically identified by a graphical identifier <b>1090</b>. In certain instances, the segment <b>551</b> or section <b>581</b> may be a hyperlinked. For example, the segment <b>551</b> may have a hyperlink <b>1051</b> and section <b>581</b> may have a hyperlink <b>1081</b>. The user may select hyperlink <b>1051</b> or <b>1081</b> to graphically identify the element <b>502</b> that corresponds to the segment <b>551</b> or the section <b>581</b> using a graphical identifier <b>1090</b>.</p>
<p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. 11A</figref> is a flow diagram illustrating steps for graphically identifying graphical affordances in a graphical model <b>500</b> that correspond to selected segments of generated code <b>550</b> or sections of the generated report <b>580</b>. The user can select the segment <b>551</b> in generated code <b>550</b> or the section <b>581</b> in the generated report <b>580</b> (step <b>1100</b>). Upon the selection, graphical affordances (e.g., element <b>502</b>) of the graphical model <b>500</b> that are associated with the segment <b>551</b> of generated code <b>550</b> or the section <b>581</b> of the generated report <b>580</b> are graphically identified. The user can select the segment <b>551</b> of generated code <b>550</b> or the section <b>581</b> of the generated report <b>580</b> using the text cursor such that when the text cursor is on the segment <b>551</b> in generated code <b>550</b> or the section <b>581</b> in the generated report <b>580</b>, the associated graphical affordance (e.g., element <b>502</b>) in the graphical model <b>500</b> is graphically identified. Alternatively, generated code <b>550</b> and generated report <b>580</b> may contain navigable connections, such as hyperlinks <b>1051</b> and <b>1081</b>, that allow the user to select the segment <b>551</b> in generated code or the section <b>581</b> in the generated report <b>580</b> by clicking on the segment <b>551</b> or section <b>581</b> with a pointing device <b>505</b> or by simply positioning the pointing device <b>505</b> over the segment <b>551</b> or the section <b>581</b>. For example, when the user selects a segment <b>551</b> of generated code <b>550</b> (step <b>1105</b>), the element <b>502</b> is graphically identified by graphical identifier <b>1090</b> (step <b>1110</b>).</p>
<p id="p-0122" num="0121">In the case where hyperlinks (e.g., hyperlinks <b>1051</b> and <b>1081</b>) are provided in generated code <b>550</b> or the generated report <b>580</b>, the hyperlinks (e.g., hyperlinks <b>1051</b> and <b>1081</b>) may be provided for only certain segments of generated code such as variables, operators, comments, etc. Alternatively, hyperlinks can be provided for all segments in generated code.</p>
<p id="p-0123" num="0122">In some instances, a segment in generated code <b>550</b> may be mapped to multiple graphical affordances in the graphical model <b>500</b>. <figref idref="DRAWINGS">FIG. 11B</figref> is a flow diagram that illustrates identifying multiple graphical affordances based on a corresponding segment using a unique identifier for each graphical affordance that is identified. The user can select a segment in generated code <b>550</b> (step <b>1150</b>) and multiple graphical affordances can be graphically identified such that each graphical affordance may have a unique graphical identifier (step <b>1155</b>).</p>
<p id="p-0124" num="0123">In some embodiments, the user may want to limit the graphical affordances that are graphically identified. For example, the user may only want to identify a graphical affordance that relates to an output signal of an element in the graphical model <b>500</b>. To achieve this, the user may be provided with menus that are substantially similar to the menus <b>700</b> and <b>710</b>. For example, the menus may provide options that allow a user to specify a scope of graphical affordances in the graphical model <b>500</b> that are graphically identified when a segment in generated code <b>550</b> is selected.</p>
<p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. 11C</figref> is a flow diagram that illustrates the steps for graphically identifying a portion of a graphical model <b>500</b> that is associated with a segment in generated code <b>550</b>. The user can indicate that output signals of the graphical model <b>500</b> should be graphically identified (step <b>1180</b>). The user can select a segment of generated code <b>550</b> or a section of the generated report <b>580</b> (step <b>1185</b>) and output signals in the graphical model <b>500</b> that are associated with the segment are graphically identified in generated code <b>550</b> or generated report <b>580</b> (step <b>1190</b>).</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 12</figref> depicts an exemplary graphical model <b>1200</b>, generated code <b>1250</b> that corresponds to the graphical model <b>1200</b>, and a requirements document <b>1280</b>. The graphical model <b>1200</b> includes a user-specified element <b>1202</b> (hereinafter element <b>1202</b>). The element <b>1202</b> can represent code and can be developed using the textual interface <b>130</b>, an external code browser, or any application that allows a user to develop textual code. The element <b>1202</b> can represent, for example, an S-Function that describes behavioral aspects of the user specified element; an Embedded MATLAB block that can be developed using the technical language MATLAB&#xae;; custom code that can be developed in a programming language, such as C, C++, JAVA&#xae;, Javascript, an assembly language, etc; etc.</p>
<p id="p-0127" num="0126">The element <b>1202</b> can have an interface <b>1204</b> that allows other elements in the graphical model <b>1200</b> to connect to the element <b>1202</b>. The interface <b>1204</b> can include an input <b>1212</b>, an output <b>1214</b> and a trigger <b>1216</b>. The interface <b>1204</b> may also accept global data to allow the element <b>1202</b> to read, write and/or process data that is available throughout the graphical model <b>1200</b>. The global data, for example, can be stored in a global data store element <b>1206</b> (hereinafter element <b>1206</b>). The input <b>1212</b> allows the element <b>1202</b> to receive signals from another element in the graphical model <b>1200</b>. The output allows the element <b>1202</b> to output signals. The output signals can be determined by the execution of the code associated with the element <b>1202</b>. For example, the element <b>1202</b> may call a function that performs a specified operation when the element <b>1202</b> executes. The trigger <b>1216</b> allows the element to be selectively executed. For example, the element <b>1202</b> may not execute unless it receives a trigger signal. The trigger signal may be received by the element <b>1202</b> from another element in the graphical model <b>1200</b> or from a location external to the graphical model <b>1200</b>. The trigger signal, therefore, may enable the execution of the element and may provide for conditional execution of the element <b>1202</b>.</p>
<p id="p-0128" num="0127">The user may develop the element <b>1202</b> based on a requirement <b>1282</b> in the requirements document <b>1280</b>. The requirements document <b>1280</b> may be stored on the computing device <b>100</b> (<figref idref="DRAWINGS">FIG. 1</figref>) or remotely in the network environment <b>200</b> (<figref idref="DRAWINGS">FIG. 2</figref>). The requirements (e.g., requirement <b>1280</b>) may be hierarchical such that a requirement may have sub-requirements, which in turn also may have sub-requirements. The requirements and/or sub-requirements can be graphically identified. In one example, the element <b>1202</b> that was developed based on the requirement <b>1282</b> can be mapped to the requirement <b>1282</b> to allow for the graphical identification of the requirement <b>1282</b> upon the selection of the element <b>1202</b> or to allow graphical identification of the element <b>1202</b> based on the selection of requirement <b>1282</b>. In one implementation, the element <b>1202</b> may include a hyperlink <b>1220</b> that corresponds to the location in the requirements document <b>1280</b> that contains requirement <b>1282</b>. When the user selects the hyperlink <b>1220</b>, the requirement <b>1282</b> is graphically identified by graphical identifier <b>1295</b>.</p>
<p id="p-0129" num="0128">Generated code <b>1250</b> can be generated from the graphical model <b>1200</b> and can include segments that correspond to the element <b>1202</b> and the interface <b>1204</b> of the element <b>1202</b>. The generated code may also correspond to the requirements document <b>1280</b>. In one example, the element <b>1202</b> can represent a function such that the interface <b>1204</b> of the element <b>1202</b> can be transformed into a generated function interface in generated code <b>1250</b>. In this example, the interface <b>1204</b> can be mapped to a function interface <b>1252</b> in generated code <b>1250</b>. The function interface <b>1252</b> can include a segment <b>1254</b>, a segment <b>1256</b>, a segment <b>1258</b> and a segment <b>1260</b>. The segment <b>1254</b> of generated code <b>1250</b> can map to the trigger <b>1216</b>. The segment <b>1256</b> of generated code <b>1250</b> can map to the input <b>1212</b>. The segment <b>1258</b> of generated code <b>1250</b> can map to the output <b>1214</b>. The segment <b>1260</b> of generated code <b>1250</b> can map to element <b>1206</b>. A segment <b>1262</b> of generated code <b>1250</b> defines formal arguments to be used by the function in generated code <b>1250</b>. The segments <b>1254</b>, <b>1256</b>, <b>1258</b> and <b>1260</b> of generated code <b>1250</b> can each correspond to an argument in the segment <b>1262</b>.</p>
<p id="p-0130" num="0129">Segments (e.g., segments <b>1254</b>, <b>1256</b>, <b>1258</b>, <b>1260</b>, <b>1262</b>, etc.) of generated code <b>1250</b> or graphical affordances (e.g., element <b>1202</b>, element <b>1206</b>, interface <b>1204</b>, input <b>1212</b>, output <b>1214</b>, a trigger <b>1216</b>, etc.) of the graphical model <b>1200</b> can be graphically identified in accordance with embodiments discussed herein. For example, a user can select the element <b>1202</b> and segments (e.g., segments <b>1254</b>, <b>1256</b>, <b>1258</b>, <b>1260</b>, <b>1262</b>, etc.) in generated code <b>1250</b> can be graphically identified. Likewise, the user can select a segment in generated code <b>1250</b> to graphically identify a graphical affordance (e.g., element <b>1202</b>) in the graphical model <b>1200</b>. In addition, a user can specify a scope that limits the graphical identification to certain aspects of generated code <b>1250</b> or the graphical model <b>1200</b>. For example, the user can specify that only generated code <b>1250</b> relating to the output <b>1214</b> is to be graphically identified. In this example, when the user selects the element <b>1202</b>, the segments <b>1258</b> and <b>1262</b> can be graphically identified.</p>
<p id="p-0131" num="0130">The mapping of the interface <b>1202</b> to the function interface <b>1252</b> allows a user to graphically identify segments (e.g., <b>1254</b>, <b>1256</b>, <b>1258</b>, <b>1260</b>) of generated code <b>1250</b> that correspond to an element interface (e.g., interface <b>1204</b>) in the graphical model <b>1200</b>. This provides the user with the ability to a identify the segments <b>1254</b>, <b>1256</b>, <b>1258</b>, <b>1260</b>, <b>1262</b>, etc., of generated code <b>1250</b> that correspond to the interface <b>1204</b> of the element <b>1202</b>, where the interface <b>1204</b> of the element <b>1202</b> corresponds to the function interface <b>1252</b> in generated code <b>1250</b> that is represented by a unique list of memory locations accessed in the function, but which are defined by (or exist in the scope of) the parent (call-site) of the function.</p>
<p id="p-0132" num="0131">In some instances, code that is specified in a user specified element (e.g., element <b>1202</b>) may represent code developed in the same language as the target language (e.g., generated code <b>1250</b>). For example, a user may develop code for a user specified element (e.g., element <b>1202</b>) in the programming language of C and the user may wish to generate code (e.g., generated code <b>1250</b>) in the programming language of C. In this example, generated code (e.g., generated code <b>1250</b>) can incorporate the code of the user specified element (e.g., element <b>1202</b>) without modification. The code of the user specified element (e.g., element <b>1202</b>) may also be incorporated into generated code (e.g., generated code <b>1250</b>) with modification. For example, the code of the specified element (e.g., element <b>1202</b>) can be optimized using optimizations such as, inlining, outlining, loop unrolling, etc. In another instance, a user specified element (e.g., element <b>1202</b>) can be developed using a behavioral description. In this instance, generated code (e.g., generated code <b>1250</b>) from the graphical model (e.g., graphical model <b>1200</b>) does not correspond directly to the behavioral description of the user specified element (e.g., element <b>1202</b>). When the code of a user specified element (e.g., element <b>1202</b>) is not developed in the same language as the intended target language, code of the user specified element (e.g., element <b>1202</b>) can be converted into the target language (e.g., generated code <b>1250</b>).</p>
<p id="p-0133" num="0132">The environment <b>100</b> allows the user to graphical identify segments of generated code (e.g., generated code <b>1250</b>) that corresponds to a user specified element (e.g., element <b>1202</b>). The environment <b>100</b> may implement one of the programmable APIs <b>170</b> to perform the graphical identifying between the user specified element (e.g., element <b>1202</b>) and the segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of the generated code (e.g., generated code <b>1250</b>).</p>
<p id="p-0134" num="0133">The mapping and graphical identification of user specified elements (e.g., element <b>1202</b>) and corresponding segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of generated code (e.g., generated code <b>1250</b>) can be performed in the same manner as discussed with reference <figref idref="DRAWINGS">FIGS. 4-11C</figref> and the mapping can be utilize tracing information, which is discussed in more detail below. The user may select segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of generated code (e.g., generated code <b>1250</b>) or a user specified element (e.g., element <b>1202</b>) in the same manner as discussed with regard to <figref idref="DRAWINGS">FIGS. 4-12</figref> to graphical identify segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) relating to a user specified element (e.g., element <b>1202</b>) or to graphically identify a user specified element (e.g., element <b>1202</b>) that is related to segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of generated code (e.g., generated code <b>1250</b>). Alternatively, one of the programmable APIs <b>170</b> can allow the user to specify a mapping between the user specified element (e.g., element <b>1202</b>) and generated code (e.g., generated code <b>1250</b>).</p>
<p id="p-0135" num="0134">A user may specify design requirements (e.g., requirement <b>1282</b>) for each element (e.g., element <b>1202</b>) or signal of a system to be represented by a graphical model (e.g., graphical model <b>1200</b>). The design requirements (e.g., requirement <b>1282</b>) can be used to develop a graphical model (e.g., graphical model <b>1200</b>) according to specifications that identify, for example, performance parameters of the system to be modeled by the graphical model (e.g., graphical model <b>1200</b>). In one implementation, the design requirements (e.g., requirement <b>1282</b>) can be provided in a requirements document (e.g., requirements document <b>1280</b>). The requirements document (e.g., requirements document <b>1280</b>) may take any form, such as, for example, a word processing document, a spreadsheet, a mark-up language document, such as an eXtensible Markup Language (XML) file, hardcopy document, verbal conveyed specifications, recorded specifications, etc.</p>
<p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. 13A</figref> is a flow diagram that illustrates a mapping between the requirements document <b>1280</b> and the graphical model <b>1200</b>. When the user develops a graphical model <b>1200</b> based on requirements in the requirements document <b>1280</b>, the requirement <b>1282</b> can be mapped to the element <b>1202</b> in the graphical model <b>1200</b>. For example, a user may specify the element <b>1202</b> based on a section (i.e., requirement <b>1282</b>) of the requirements document <b>1280</b> (step <b>1300</b>). The user can include, in the element <b>1202</b>, a location in the requirements document <b>1280</b> that corresponds to the element <b>1202</b> (step <b>1305</b>). For example, when the requirements document <b>1280</b> is a document that supports hyperlinks, the user can insert a hyperlink <b>1220</b> into the element <b>1202</b> of the graphical model <b>1200</b>. The hyperlink <b>1220</b> may associate the element <b>1202</b> with the corresponding section (i.e., requirement <b>1282</b>) in the requirements document <b>1280</b>. When the user selects the element <b>1202</b> (step <b>1310</b>), the section (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b> that is associated with the element <b>1202</b> can be displayed and graphically identified by graphical identifier <b>1295</b> (step <b>1315</b>).</p>
<p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. 13B</figref> is a flow diagram that illustrates the mapping between a requirements document <b>1280</b> and generated code <b>1250</b> (or a generated report) from the graphical model <b>1200</b>. The user can generate code <b>1250</b> from the graphical model <b>1200</b> (step <b>1320</b>) and the generated code <b>1250</b> can include associations (or links) to the requirements document <b>1280</b> (step <b>1325</b>). In this manner, a user may identify design requirements (e.g., requirement <b>1282</b>) in the requirements document <b>1280</b> that correspond to selected segments of generated code <b>1250</b>. For example, after generating code <b>1250</b>, the user can select segments of generated code <b>1250</b> (step <b>1330</b>) and sections (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b> associated with the segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of generated code <b>1250</b> can be displayed and graphically identified (step <b>1335</b>).</p>
<p id="p-0138" num="0137">When a user selects a graphical affordance (e.g., element <b>1202</b>) in the graphical model <b>1200</b> or a segment (e.g., segment <b>1254</b>) of generated code <b>1250</b> that is associated with a section (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b>), the sections (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b> can be displayed and may also be identified graphically. Further, if the user selects a segment (e.g., segment <b>1254</b>) of generated code <b>1250</b> both the corresponding graphical affordance (e.g., element <b>1202</b>) in the graphical model <b>1200</b> and the corresponding section (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b> can be graphically identified. Conversely, when the user selects a graphical affordance (e.g., element <b>1202</b>) of the graphical model <b>1200</b> both the corresponding segments (e.g., segments <b>1254</b>, <b>1256</b>, etc.) of generated code <b>1250</b> and the corresponding section (e.g., requirement <b>1282</b>) of the requirements document <b>1280</b> can be graphically identified.</p>
<p id="p-0139" num="0138">In some instances, additional information concerning the original design and any intermediate artifacts, such as, but not limited to, output data types, input data types, saturation mode, sample time, execution order, etc., can be mapped between a graphical model and/or generated code and can be included in the tracing information. Additional information can be specified by the user or may be inferred by the environment <b>100</b>. In one implementation, the additional information may not be readily visible in the model (i.e., undisplayed). Such additional information may relate to parameters of the graphical model, such as execution parameters or graphical affordance parameters. While additional information may be important for implementation of a graphical model, the additional information may not be necessary for a user to determine the basic structure and function of the graphical model. To avoid cluttering the graphical model this additional information may not be displayed (i.e., undisplayed) in the graphical model.</p>
<p id="p-0140" num="0139">The additional information may also be hidden elements (i.e., undisplayed elements) that are inserted into the graphical model. For example, the environment <b>100</b> can automatically insert rate-transition elements, which are not displayed, into a graphical model for execution. A rate-transition element may be automatically inserted by the environment when a first element has a sample rate and an element connected to that element has another sample rate. The rate transition element allows the two elements to interface with each other by converting the sample rate of the first element to match the sample rate of the element connected to the first element. The rate transition element allows two elements that are connected to each other to have different sample rates. Undisplayed information that consists of hidden elements is incorporated into generated code. When a user is viewing the code, the user may not know where the hidden elements are in the graphical model. By providing a mapping between the code and the hidden elements, the hidden elements that correspond to segments of generated code can be graphically identified.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 14A</figref> is a diagram showing an exemplary technique for overlaying additional information <b>1490</b> associated with the graphical model <b>500</b> and generated code <b>550</b>. The graphical model <b>500</b> and generated code <b>550</b> a display using the environment <b>100</b>, which in this case is an integrated environment that utilizes a MDI application to enable simultaneous viewing of the graphical model <b>500</b> and generated code <b>550</b>. The additional information <b>1490</b> is incorporated in the graphical model <b>500</b>, but is undisplayed in the graphical model <b>500</b>. The additional information <b>1490</b> may represent, for example, data type, sample time, delay, a hidden element, etc. In one example, a user may specify an input to an element in the graphical model <b>500</b>, but may not specify the data type of an output. The environment <b>100</b> may use propagation to determine what data type to use for the output. The user may want to view the additional information <b>1490</b> (e.g., the inferred output data in this example) of the graphical model <b>500</b> that corresponds to a selected segment (e.g., segment <b>551</b>) of generated code <b>550</b>. The user can select a segment (e.g., segment <b>551</b>) of generated code <b>550</b> corresponding to the additional information <b>1490</b> and the additional information <b>1490</b> can be displayed by overlaying the additional information <b>1490</b> on the graphical model <b>500</b> or generated code <b>550</b>.</p>
<p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. 14B</figref> is a flow diagram that illustrates exemplary steps for graphically identifying additional information by overlaying the information on the graphical model <b>500</b> or generated code <b>550</b>. The undisplayed additional information <b>1490</b> in the graphical model <b>500</b> is included in generated code <b>550</b> (step <b>1400</b>). The user selects a segment (e.g., segment <b>551</b>) of generated code <b>550</b> corresponding to the additional information <b>1490</b> to display the additional information <b>1490</b> (step <b>1405</b>). The additional information <b>1490</b> is displayed to the user (step <b>1410</b>).</p>
<p id="p-0143" num="0142">In some embodiments the tracing information between a graphical model (e.g., graphical model <b>500</b> or <b>1200</b>) and generated code (e.g., generated code <b>1200</b> or <b>1250</b>) can be output to an independent representation, such as an independent file in a plain-text or binary format. The term &#x201c;independent representation&#x201d; as discussed herein refers to a representation can be used independent of the environment <b>100</b>. In one example, the independent representation can be stored in a repository, database, other storage medium, etc., and may be represented as an XML file.</p>
<p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. 15A</figref> depicts an example of a graphical model <b>1500</b> that includes an input element <b>1502</b>, a gain element <b>1504</b> and an output element <b>1506</b>. Generated code that represents the graphical model <b>1500</b> can be generated by the environment <b>100</b>. <figref idref="DRAWINGS">FIG. 15B</figref> depicts exemplary generated code files that contain generated code from the graphical model <b>1500</b>. Header file <b>1520</b> may be a data structure, such as a file, that includes generated code according to one or more exemplary embodiments. Header file <b>1520</b> can be used to define model data structures and/or a public interface to model entry points and/or data structures. Source file <b>1540</b> may be a data structure, such as a file, that include generated code according to one or more exemplary embodiments. Source code <b>1540</b> may contain declarations for the parameters data structure and the constant block I/O data structure, and any zero representations for structure data types that are used in the graphical model <b>1500</b>.</p>
<p id="p-0145" num="0144">Tracing information between the graphical model <b>1500</b>, generated code (e.g., the contents of header file <b>1520</b> and source file <b>1540</b>), optionally generated report and optionally provided requirements document can be stored in an independent representation. Exemplary contents of an independent representation for providing tracing information between the graphical model <b>1500</b> and generated code in the code files <b>1520</b> and <b>1540</b> may include the following:</p>
<p id="p-0146" num="0145">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="14pt" align="left"/>
<colspec colname="2" colwidth="203pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&#x2003;</entry>
<entry>&#x3c;?xml version=&#x201c;1.0&#x201d; encoding=&#x201c;ASCII&#x201d; standalone=&#x201c;yes&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;project&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;system_version&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x3c;application name=&#x201c;MATLAB&#x201d; version=&#x201c;7.3&#x201d;/&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x3c;application name=&#x201c;Simulink&#x201d; version=&#x201c;6.5&#x201d;/&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;/system_version&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;model name=&#x201c;example.mdl&#x201d; version=&#x201c;1.0&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;model:settings&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:parameter&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:parameter_name&#x3e;Solver&#x3c;/model:</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;parameter_name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:parameter_value&#x3e;ode3&#x3c;/model:</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;parameter_value&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/model:parameter&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;/model:settings&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;model:root&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_type&#x3e;Inport&#x3c;/model:block_type&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_name&#x3e;In1&#x3c;/model:block_name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:objectId&#x3e;B_1&#x3c;/model:objectId&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_type&#x3e;Gain&#x3c;/model:block_type&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_name&#x3e;Gain&#x3c;/model:block_name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:objectId&#x3e;B_2&#x3c;/model:objectId&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_type&#x3e;Outport&#x3c;/model:block_type&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:block_name&#x3e;Out1&#x3c;/model:block_name&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;model:objectId&#x3e;B_3&#x3c;/model:objectId&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/model:block&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;/model&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;code target=&#x201c;c&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:header file_name=&#x201c;example.h&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:segment type=&#x201c;type definition&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;24&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;typedef struct {&#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;25&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;real_T Out1;&#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:source&#x3e;B_3&#x3c;/code_source&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;26&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;}&#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:segment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:header&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:source file_name=&#x201c;example.c&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:function&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:segment type=&#x201c;statement&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;10&#x201d; start_col=&#x201c;2&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;example_Y.Out1 = &#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:source&#x3e;B_3&#x3c;/code_source&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;10&#x201d; start_col=&#x201c;19&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;example_U.In1&#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:source&#x3e;B_1&#x3c;/code_source&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:fragment start_line=&#x201c;10&#x201d; start_col=&#x201c;33&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:content&#x3e;* example_P.Gain_Gain;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:content&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;code:source&#x3e;B_2&#x3c;/code_source&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:fragment&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:segement&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:function&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code:source&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/code&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x2003;. . .</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x2003;&#x3c;/project&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0147" num="0146">In the implementation illustrated above, the independent representation is provided in an XML format. Other implementations can use other formats to provide the tracing information, and that the use of the XML format is merely one example of one format that can be employed to implement the independent representation.</p>
<p id="p-0148" num="0147">The environment <b>100</b> may allow a user to overwrite a mapping between a graphical model and generated code. For example, the user may access the tracing information and may edit the tracing information to provide a different mapping. The user may determine that a more detailed or less detailed mapping is necessary and the user may modify the mapping to correspond to a desired level of detail in the mapping.</p>
<p id="p-0149" num="0148">In some embodiments, a deployable representation of a graphical model (e.g., graphical model <b>1500</b>), generated code (e.g., the contents of header file <b>1520</b> and source file <b>1540</b>) and tracing information can be developed. A deployable representation is a representation that allows a user to access and view the graphical model (e.g., graphical model <b>1500</b>) and/or generated code (e.g., the contents of header file <b>1520</b> and source file <b>1540</b>) external from the environment <b>100</b>. The deployable representation, therefore, allows a user to perform generated code (e.g., the contents of header file <b>1520</b> and source file <b>1540</b>) and graphical model (e.g., graphical model <b>1500</b>) inspection independent of the environment <b>100</b>. The deployable representation may be deployable in a web-based environment; a word processing environment, such a Microsoft Word&#xae; document from Microsoft, Inc. of Redmond Wash.; an environment on a handheld device; etc. In on implementation, the deployable representation may be a web deployable representation that can be deployed in a web browser. An example of a web deployable representation can be, for example, a hypertext mark-up file. The deployable representation may use a scalable vector graphics (SVG) format to allow contents of the representation to scale to the size of a display area without distortion.</p>
<p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. 16A</figref> is an exemplary web browser <b>1600</b> that displays a web deployable representation <b>1605</b> that allows a user to trace elements of the graphical model to elements in generated code and vice versa. The web deployable representation <b>1605</b> may include a hyperlinked representation <b>1610</b> of the graphical model <b>1500</b>, a hyperlinked representation <b>1620</b> of the code file <b>1520</b>, a hyperlinked representation <b>1640</b> of the code file <b>1540</b> and a hyperlink <b>1650</b> to the tracing information <b>1652</b> depicted in <figref idref="DRAWINGS">FIG. 16B</figref>.</p>
<p id="p-0151" num="0150">The hyperlink representation <b>1610</b> includes hyperlinked elements. For example, gain element <b>1615</b> is a hyperlink that can be selected to allow the user to graphical identify and view the section of the code files that correspond to the gain element or portions of the gain element.</p>
<p id="p-0152" num="0151">The hyperlinked representation <b>1620</b> may also include hyperlinks for graphically identifying and/or viewing portions of the hyperlinked representation <b>1610</b> and/or the hyperlinked representation <b>1640</b>. Likewise, the hyperlinked representation <b>1640</b> may include hyperlinks for graphically identifying and viewing portions of the hyperlinked representation <b>1610</b> and/or <b>1620</b>. For example the hyperlinked representation <b>1640</b> may include a hyperlink <b>1645</b> that corresponds to the gain element <b>1615</b>. When the user selects the hyperlink <b>1645</b>, the gain element is graphically identified.</p>
<p id="p-0153" num="0152">The hyperlink <b>1650</b> to the tracing information <b>1652</b> allows a user to navigate to the tracing information <b>1652</b> to view the mapping between the hyperlinked representations <b>1610</b>, <b>1620</b> and <b>1640</b>. <figref idref="DRAWINGS">FIG. 16B</figref> depicts a web browser <b>1655</b> that displays a portion of the tracing information <b>1652</b>. The user may select the hyperlink <b>1650</b> (<figref idref="DRAWINGS">FIG. 16A</figref>) and the web browser <b>1655</b> may be provided to display the tracing information <b>1652</b>.</p>
<p id="p-0154" num="0153">The implementation described above, with regard to <figref idref="DRAWINGS">FIGS. 16A-B</figref>, is representative of one implementation, numerous other implementations of deployable representations are possible. Further, it will be recognized that the deployable representation may include a generated report, a requirements document or other types of information that can be associated with the graphical model <b>1500</b> or generated code. Separate windows may be provided for viewing the graphical model, generated code, generated report, requirements document, tracing information, etc.</p>
<p id="p-0155" num="0154">In one alternative embodiment the graphical model and generated code may be displayed using a heterogeneous dependency viewer. A heterogeneous dependency viewer allows a user to view a graphical model and generated code together using a dependency graph. A dependency graph shows dependency relationships of one or more entities (e.g., a graphical model, generated code, generated report, etc.). An example of a heterogeneous dependency viewer is discussed in pending U.S. patent application Ser. No. 11/488,426 and is incorporated herein by reference.</p>
<p id="p-0156" num="0155">In some instances, a user can generate a model coverage report from a graphical model or a code coverage report from generated code that corresponds to the graphical model. The model coverage report can provide a certain level of testing that was performed on the graphical model to assure that the graphical model meets certain specifications. This is achieved by implementing test cases using the graphical model. The code coverage report generally performs a similar operation for generated code, and therefore, assures that generated code meets certain specifications. In some instances, model coverage is conducted before design implementation (i.e. before generating code). Generally after generated code is available, the user desires to know the code coverage to ensure that determined portions of the model/code are exercised (e.g., when test cases are run against the model/code).</p>
<p id="p-0157" num="0156">In some embodiments, the user can combine the model coverage report generated by applying test cases in the graphical model and the code coverage report generated by applying test cases in generated code. For example, a user can convert the model coverage report into code coverage report, or vice versa. The conversion from the model coverage report to the code coverage report, or vice versa, can use the mapping between the graphical model and generated code. By converting model coverage to code coverage, the user can reduce the number of additional tests needed to achieve code coverage.</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 17</figref> is a flow diagram that illustrates exemplary steps for implementing an external code browser and/or debugger with generated code. A code browser may be an application that allows a user to browse generated code and can be a code editor, a word processing application or another application that allows a user to view and/or browse code. An example of a code browser can be, for example, Microsoft Visual Studio from Microsoft, Inc. of Redmond Wash. Examples of external debuggers may include, but are not limited to, Microsoft Visual Studio, or open source software, such as the GNU's Not Unix (GNU) Debugger commonly referred to as GNU Debugger (GDB), etc.</p>
<p id="p-0159" num="0158">Referring to <figref idref="DRAWINGS">FIG. 17</figref>, A user can develop a graphical model (e.g., graphical model <b>500</b>, <b>1200</b>, etc.) (step <b>1700</b>) and generate code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) that represents the graphical model (step <b>1705</b>). Associations between the graphical model and generated code are mapped to provide tracing information (step <b>1710</b>). The tracing information is output to an independent representation (step <b>1715</b>).</p>
<p id="p-0160" num="0159">An external code browser and/or debugger can use the tracing information and the one of the programmable APIs <b>170</b> to browse and/or debug the graphical model and generated code (step <b>1720</b>). The external code browser and/or debugger can be used to, for example, browse or debug generated code, while programmatically identifying the graphical affordances in the graphical model that correspond to the segments of generated code that are being browsed and/or debugged (step <b>1725</b>). One of the programmable APIs <b>170</b> may optionally provide graphical identifiers in generated code or on the graphical model to aid a user.</p>
<p id="p-0161" num="0160">Alternatively, the external code browser and/or debugger can be synchronized with a graphical model editor and/or debugger that is provided by the environment <b>100</b>. Synchronizing the external browser and/or debugger allows a user can simultaneously browse and/or debug the graphical model and generated code using, in part, an external application. For example, as the user browses generated code with the external browser, corresponding graphical affordances in a graphical model are graphically identified.</p>
<p id="p-0162" num="0161">Exemplary embodiments enable round-trip editing. Round-trip editing allows a user to edit generated code to modify a graphical model and vice versa. <figref idref="DRAWINGS">FIGS. 18A-B</figref> depict part of a graphical model <b>1800</b> and a segment of generated code <b>1850</b> that can be generated from the graphical model <b>1800</b> and used to illustrate round-editing. The part of the graphical model <b>1800</b> includes a sum element <b>1805</b>, an input <b>1810</b>, an input <b>1815</b> and an output <b>1820</b>. The user can modify the addition operator <b>1802</b> in generated code <b>1850</b> and the graphical model <b>1800</b> can be programmatically updated. For example, the user can change the operator <b>1802</b> in generated code <b>1950</b> to be a multiplication operator <b>1804</b>, as shown in <figref idref="DRAWINGS">FIG. 18B</figref> and the graphical model <b>1800</b> can be programmatically updated such that the sum-element <b>1805</b> is replaced by a multiplication element <b>1825</b>.</p>
<p id="p-0163" num="0162"><figref idref="DRAWINGS">FIG. 18C</figref> depicts a graphical section of the graphical model <b>1800</b>, where the segment of generated code <b>1850</b> that is generated from the graphical model <b>1800</b> is a graphical model <b>1800</b>&#x2032; that represents a modification of the graphical model <b>1800</b> and/or generated code <b>1850</b>&#x2032; from the modified graphical model <b>1800</b>&#x2032;. The environment <b>100</b> allows a user to generate code <b>1850</b> from a graphical model <b>1800</b>, modify the graphical model <b>1800</b> to form graphical model <b>1800</b>&#x2032; and repeat the code generation process to generate code <b>1850</b>&#x2032; such that generated code <b>1850</b> and generated code <b>1850</b>&#x2032; exist simultaneously. The environment <b>100</b> can compare generated code <b>1850</b> with generated code <b>1850</b>&#x2032; to determine differences between generated code <b>1850</b> and generated code <b>1850</b>&#x2032;. The environment <b>100</b> can graphically identify a portion of the graphical model <b>1800</b>&#x2032; that relates to one or more differences between segments in generated code <b>1850</b> and generated code <b>1850</b>&#x2032; using graphical identifier <b>1890</b> when the user selects the corresponding segment in generated code <b>1850</b> or <b>1850</b>&#x2032;.</p>
<p id="p-0164" num="0163">In some embodiments, a user may be able to modify a portion of the graphical model <b>1800</b> by right clicking on the segment of generated code <b>1850</b> that maps to the portion of the element <b>1805</b> using a pointing device. <figref idref="DRAWINGS">FIG. 18D</figref> depicts the graphical model <b>1800</b>, generated code <b>1850</b> and a user interface <b>1890</b>. When the user right clicks on the segment of generated code <b>1850</b>, the user interface <b>1890</b> can be displayed that allows a user to specify aspects of the element <b>1805</b>. The user interface <b>1890</b> may be the same as a user interface that is provided to a user when a user is developing the graphical model <b>1800</b>. The user interface <b>1890</b> may include parameters <b>1891</b>-<b>1894</b>. The parameters <b>1891</b>-<b>1894</b> may relate to aspects that are displayed in the graphical model or may relate to undisplayed aspects. The parameters may or may not affect the execution and functionality of the graphical model. The user interface <b>1890</b> may allow a user to change the parameters of the element <b>1805</b>. When the user changes the parameters <b>1891</b>-<b>1894</b> in the user interface <b>1890</b>, the graphical model <b>1800</b> may be updated. In addition the segment of generated code that is associated with the parameters <b>1891</b>-<b>1894</b> may also be updated. In another embodiment double clicking on a segment of generated code may open up the user interface <b>1890</b>.</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 19</figref> is a flow diagram that illustrates the steps for round-trip editing. A user can develop a graphical model <b>1800</b> (step <b>1900</b>) and may generate code <b>1850</b> for the graphical model <b>1800</b> (step <b>1905</b>). Tracing information is generated from a mapping between the graphical model <b>1800</b> and generated code <b>1850</b> (step <b>1910</b>). The user can edit generated code <b>1850</b> or the graphical model <b>1800</b> (step <b>1915</b>). Portions of the graphical model <b>1800</b> or segments of generated code <b>1850</b> that correspond to the edits are updated (step <b>1920</b>). This allows a user to edit generated code <b>1850</b> and the graphical model <b>1800</b> with a minimal disturbance to the graphical model <b>1800</b> or generated code <b>1850</b>.</p>
<p id="p-0166" num="0165">In addition, a user can use a search and replace operation for the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) and/or generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) to search for recurring graphical affordances or segments to replace. <figref idref="DRAWINGS">FIG. 20A</figref> is a flow diagram that illustrates the steps for using the search and replace operation where the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) is searched. Once generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) is generated from a graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.), a user can search the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) for a recurring graphical affordance, such as, for example, an element, a signal, etc. (step <b>2000</b>). After the search is performed, segments of generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) can be graphically identified that correspond to the recurring graphical affordance detected by the search (step <b>2005</b>). The recurring graphical affordance in the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) can be replaced (step <b>2010</b>) and the segments of generated code e.g., generated code <b>550</b>, <b>1250</b>, etc.) that correspond to the recurring graphical affordance can be updated to reflect the replacement of the recurring graphical affordance (step <b>2015</b>).</p>
<p id="p-0167" num="0166"><figref idref="DRAWINGS">FIG. 20B</figref> is a flow diagram that illustrates exemplary steps for using the search and replace operation where generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) is searched. Once generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) is generated from a graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.), a user can search generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) for a recurring segment (step <b>2050</b>). After the search is performed, portions of the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) that correspond to the recurring segment of generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) that is detected by the search can be graphically identified (step <b>2055</b>). The recurring segments in generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) can be replaced (step <b>2060</b>) and the sections of the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) that correspond to the recurring segments can be updated to reflect the replacement of the recurring segments (step <b>2065</b>).</p>
<p id="p-0168" num="0167"><figref idref="DRAWINGS">FIG. 21</figref> is a flow diagram illustrating exemplary steps for locking aspects of a graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) and generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) from the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) to prevent modifying of the locked aspects. A user can generate a graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) (step <b>2100</b>) and can generate code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) from the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) (step <b>2105</b>). The graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) can include unspecified parameters that can be inferred by the environment <b>100</b> using, for example, propagation.</p>
<p id="p-0169" num="0168">The user can lock aspects of generated code (e.g., generated code <b>550</b>, <b>1250</b>, etc.) or graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) such that the aspects do not change over repeated code generation processes or to prevent the editing of the locked aspects (step <b>2110</b>). In one example, the user can lock variable names, including auto-generated variable names, and the locked names are honored during the code generation processed, and therefore, are maintained. In another example, the unspecified parameters are inferred by the environment <b>100</b>, and therefore specified by the environment <b>100</b>. If the user does not lock these inferred parameters, the parameters may change when portions of the graphical model (e.g., graphical models <b>500</b>, <b>1200</b>, etc.) are changed. If, however, the user locks an inferred parameter, the locked parameters remain the same. This allows a user to develop generated code based on unspecified parameters that are inferred a by the environment <b>100</b> and to retain inferred parameters for subsequent code generation, as if the inferred parameters were specified by the user.</p>
<p id="p-0170" num="0169">It is observed from the examples discussed herein that the embodiments of the present invention establish traceability between a graphical model and generated code based on tracing information. It is also observed that once the tracing information is obtained, the tracing techniques can be extended to entities (e.g., a report, a requirements document, etc.) beyond the graphical model and generated code. <figref idref="DRAWINGS">FIG. 22</figref> is an exemplary diagram of entities that can be mapped using the tracing techniques. The exemplary diagram includes requirements documentation <b>2210</b>, a design <b>2220</b> (i.e., a graphical model), implementations <b>2230</b> (i.e., generated code) and a code analysis/reports <b>2240</b>. The requirements documentation <b>2210</b> can include requirements <b>2212</b>, <b>2214</b> and <b>2216</b> to be met or followed when developing the design <b>2220</b>. The design <b>2220</b> is developed based on the requirements <b>2212</b>, <b>2214</b> and <b>2216</b> from the requirements documentation <b>2210</b>. The implementations <b>2230</b> are generated from the design <b>2220</b>. The analysis/reports <b>2240</b> can be generated from the implementations <b>2230</b> and can include a RAM analysis <b>2242</b>, code profile <b>2244</b>, etc.</p>
<p id="p-0171" num="0170">Using tracing techniques, the requirements documentation <b>2210</b>, design <b>2220</b>, implementation <b>2230</b> and code analysis/reports <b>2240</b> can have traceability such that aspects of one entity can be traced to another entity. Mapping <b>2250</b> can use tracing information to facilitate graphically identification of aspects of the entities. Arrows used to depict mapping <b>2250</b> are illustrative of how each aspect in an entity corresponds to an aspect in another entity. As a result of the mapping and tracing information discussed herein, traceability can be employed among various entities corresponding to the design (e.g., a graphical model).</p>
<p id="p-0172" num="0171">The present invention may be provided as one or more computer-readable programs embodied on or in one or more mediums. The mediums may be, but are not limited to a hard disk, a compact disc, a digital versatile disc, a flash memory card, a Programmable Read Only Memory (PROM), a Random Access Memory (RAM), a Read Only Memory (ROM), Magnetoresistive Random Access Memory (MRAM), a magnetic tape, or even the genome in a cell nucleus. In general, the computer-readable programs may be implemented in any programming language. Some examples of languages that can be used include Python, C, C++, C#, JAVA&#xae;, Javascript etc. Further, the computer readable programs can be implemented in a hardware description language or any other language that allows prescribing computation such as, for example, Deoxyribonucleic acid (DNA). The software programs may be stored on or in one or more mediums as object code.</p>
<p id="p-0173" num="0172">Certain embodiments of the present invention are described above. It is, however, expressly noted that the present invention is not limited to these embodiments, but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover, it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations, even if such combinations or permutations are not made express herein, without departing from the spirit and scope of the invention.</p>
<p id="p-0174" num="0173">Since certain changes may be made without departing from the scope of the present invention, it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>identifying a plurality of entities having relationships there between,
<claim-text>the identifying being performed by a processor;</claim-text>
</claim-text>
<claim-text>accessing a first entity from the plurality of entities,
<claim-text>the accessing the first entity being performed by the processor;</claim-text>
</claim-text>
<claim-text>accessing a second entity from the plurality of entities,
<claim-text>the accessing the second entity being performed by the processor;</claim-text>
</claim-text>
<claim-text>mapping the first entity to the second entity,
<claim-text>mapping the first entity to the second entity including bi-directionally mapping the first entity the second entity, and</claim-text>
<claim-text>the mapping being performed by the processor;</claim-text>
</claim-text>
<claim-text>determining, based on the mapping, if a graphical affordance, associated with at least one of an intermediate representation of a graphical model or code associated with the graphical model, is selected,
<claim-text>the determining being performed by the processor; and</claim-text>
</claim-text>
<claim-text>selectively identifying, based on the determining, one or more portions of the graphical model or one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model,
<claim-text>when identifying the one or more portions of the graphical model, the method includes:
<claim-text>receiving information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model; and</claim-text>
<claim-text>identifying the one or more portions of the graphical model based on the received information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model,</claim-text>
</claim-text>
<claim-text>when identifying the one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model, the method includes:
<claim-text>receiving information associated with selecting the graphical affordance of the graphical model; and</claim-text>
<claim-text>identifying the one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model based on the received information associated with selecting the graphical affordance of the graphical model, and</claim-text>
</claim-text>
<claim-text>the selectively identifying being performed by the processor.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where a first part of the first entity includes a portion of the graphical model and a second part of the second entity includes a segment of the code.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the method further comprises:
<claim-text>creating a deployable representation that facilitates code inspection in a first environment that is independent of a second environment used to develop the graphical model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, where the deployable representation comprises a web deployable format.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the method further comprises:
<claim-text>searching the graphical model for the portion; and</claim-text>
<claim-text>graphically relating the segment with the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, where the method further comprises:
<claim-text>replacing the portion with another portion; and</claim-text>
<claim-text>updating the segment to reflect replacing the portion with the other portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the method further comprises:
<claim-text>updating an inferred property of the portion; and</claim-text>
<claim-text>implementing the inferred property as a specified property related to the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, where the method further comprises:
<claim-text>indicating that the specified property cannot be modified; and</claim-text>
<claim-text>preventing the specified property from being modified.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the method further comprises:
<claim-text>searching the code for the segment; and</claim-text>
<claim-text>graphically relating the segment with the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, where the method further comprises:
<claim-text>replacing the segment with another segment; and</claim-text>
<claim-text>updating the portion to reflect replacing the segment with another segment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the portion represents an interface for an element and the segment represents at least part of a function related to the interface.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, where the portion of the graphical model represents a user specified element.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where, when mapping the first entity to the second entity, the method includes:
<claim-text>generating tracing information that associates a first part of the first entity with a second part of the second entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, where the method further comprises:
<claim-text>generating an independent representation comprising the tracing information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, where the method further comprises:
<claim-text>identifying a programmable application program interface (API) that programmatically identifies the first part or the second part based on the independent representation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, where the second entity includes the code and the programmable API allows a user to use an external browser to browse the code.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, where the second entity includes the code, and the method further includes:
<claim-text>using an external code debugger to debug the code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, where the first entity includes the graphical model, and the method further comprises:
<claim-text>synchronizing a graphical model debugger with the external code debugger prior to debugging the graphical model or the code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref>, where the method further comprises:
<claim-text>debugging the graphical model and the code simultaneously.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where a first part of the first entity is related to a plurality of parts related to the second entity or a second part of the second entity is related to a plurality of parts related to the first entity.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, where identifying the plurality of entities further comprises:
<claim-text>identifying members of the plurality of parts related to the first entity or members of the plurality of parts related to the second entity using unique graphical identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where a second part of the second entity further includes a section of a generated report associated with the graphical model.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, where the method further comprises:
<claim-text>graphically identifying the section based on a selection of a first part of the first entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, where the method further comprises:
<claim-text>graphically identifying a first part of the first entity based on a selection of the section.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, where the generated report includes one of:
<claim-text>a coverage report,</claim-text>
<claim-text>a model checking report,</claim-text>
<claim-text>a code generation report, or</claim-text>
<claim-text>a profiling report.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00025">claim 25</claim-ref>, where the generated report comprises at least one of:
<claim-text>a partial listing of the code,</claim-text>
<claim-text>information related to a process used to generate the code, or</claim-text>
<claim-text>information related to an execution of the code or the graphical model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the generated report includes a model coverage report, and the method further comprises:
<claim-text>converting, based on mapping the first entity to the second entity, the model coverage report to a code coverage report.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the generated report includes a code coverage report, and the method further comprises:
<claim-text>converting, based on mapping the first entity to the second entity, the code coverage report to a model coverage report.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the first entity includes the graphical model, and the method further comprises:
<claim-text>associating an aspect of the graphical model with a second part of the second entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the first entity includes the graphical model, and the method further comprises:
<claim-text>specifying a scope for aspects in the graphical model,
<claim-text>the aspects related to graphically identifying a second part of the second entity as at least one segment that is within the specified scope.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the method further comprises:
<claim-text>selecting a first part of the first entity to graphically identify a second part of the second entity with a graphical identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A non-transitory computer-readable medium storing instructions, the instructions comprising:
<claim-text>one or more instructions which, when executed by a processor, cause the processor to:
<claim-text>identify a plurality of entities having relationships therebetween;</claim-text>
<claim-text>access a first entity from the plurality of entities;</claim-text>
<claim-text>access a second entity from the plurality of entities;</claim-text>
<claim-text>map the first entity to the second entity,
<claim-text>the one or more instructions to map the first entity to the second entity including:
<claim-text>one or more instructions to bi-directionally map a first part of the first entity and a second part of the second entity;</claim-text>
</claim-text>
</claim-text>
<claim-text>determine, based on the mapping, if a graphical affordance, associated with at least one of an intermediate representation of a graphical model or code associated with the graphical model, is selected; and</claim-text>
<claim-text>selectively identify, based on the determining, one or more portions of the graphical model or one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model,
<claim-text>the one or more instructions to identify the one or more portions of the graphical model including:
<claim-text>one or more instructions to receive information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model; and</claim-text>
<claim-text>one or more instructions to identify the one or more portions of the graphical model based on the received information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model, and</claim-text>
</claim-text>
<claim-text>the one or more instructions to identify the one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model including:
<claim-text>one or more instructions to receive information associated with selecting the graphical affordance of the graphical model; and</claim-text>
<claim-text>one or more instructions to identify the at least one of the intermediate representation of the graphical model or the code associated with the graphical model based on the received information associated with selecting the graphical affordance of the graphical model.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the first part includes a portion of the graphical model and the second part includes a segment of the code.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The computer-readable medium of <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to create a deployable representation that facilitates code inspection in a first environment that is independent of a second environment used to develop the graphical model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The computer-readable medium of <claim-ref idref="CLM-00034">claim 34</claim-ref>, where the deployable representation comprises a web deployable format.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The computer-readable medium of <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to search the graphical model for the portion; and</claim-text>
<claim-text>one or more instructions to graphically relate the segment with the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The computer-readable medium of <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to search the code for the segment of the code; and</claim-text>
<claim-text>one or more instructions to graphically relate the segment of the code with the portion of the graphical model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The computer-readable medium of <claim-ref idref="CLM-00037">claim 37</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to replace the segment with another segment; and</claim-text>
<claim-text>one or more instructions to update the portion to reflect the replacing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The computer-readable medium of <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the portion further represents an interface of an element and the segment represents at least part of a function related to the interface.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The computer-readable medium of <claim-ref idref="CLM-00033">claim 33</claim-ref>, where the portion of the graphical model represents a user specified element developed in textual code.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the one or more instructions to map the first entity to the second entity include:
<claim-text>one or more instructions to generate tracing information that associates the first part with the second part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The computer-readable medium of <claim-ref idref="CLM-00041">claim 41</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to generate an independent representation comprising the tracing information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The computer-readable medium of <claim-ref idref="CLM-00042">claim 42</claim-ref>, where the instructions further include:
<claim-text>one or more instructions to identify a programmable application program interface (API) that programmatically identifies the first part or the second part based on the independent representation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the first part is related to a plurality of parts related to the second entity or the second part is related to a plurality of parts related to the first entity.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The computer-readable medium of <claim-ref idref="CLM-00044">claim 44</claim-ref>, where the one or more instructions to identify the plurality of entities include:
<claim-text>one or more instructions to identify members of the plurality of parts related to the first entity or members of the plurality of parts related to the second entity using unique graphical identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the second part includes a section of the generated report and the instructions further include:
<claim-text>one or more instructions to graphically identify the section based on a selection of the first part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the second part includes a section of the generated report and the instructions further include:
<claim-text>one or more instructions to graphically identify the first part based on selection of the section.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the first entity includes the graphical model, and the instructions further include:
<claim-text>one or more instructions to associate an aspect of the graphical model with the second part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The computer-readable medium of <claim-ref idref="CLM-00032">claim 32</claim-ref>, where the first entity includes the graphical model, and the instructions further include:
<claim-text>one or more instructions to specify a scope for aspects in the graphical model, the aspects related to graphically identifying the second part as at least one segment that is within the specified scope.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. A device comprising:
<claim-text>a memory to store instructions; and</claim-text>
<claim-text>a processor to execute the instructions to:
<claim-text>identify a plurality of entities having relationships therebetween,</claim-text>
<claim-text>access a first entity from the plurality of entities,</claim-text>
<claim-text>access a second entity from the plurality of entities,</claim-text>
<claim-text>map the first entity to the second entity,
<claim-text>where the processor, when mapping the first entity to the second entity, being further to:
<claim-text>bi-directionally map a first part, of the first entity, and a second part, of the second entity,</claim-text>
</claim-text>
</claim-text>
<claim-text>determine, based on the mapping, if a graphical affordance, associated with at least one of an intermediate representation of a graphical model or code associated with the graphical model, is selected, and</claim-text>
<claim-text>selectively identify, based on the determining, one or more portions of the graphical model or one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model,
<claim-text>the processor, when identifying the one or more portions of the graphical model, being to:
<claim-text>receive information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model; and</claim-text>
<claim-text>identify the one or more portions of the graphical model based on the received information associated with browsing the at least one of the intermediate representation of the graphical model or the code associated with the graphical model, and</claim-text>
</claim-text>
<claim-text>the processor, when identifying the one or more portions of the at least one of the intermediate representation of the graphical model or the code associated with the graphical model, being to:
<claim-text>receive information associated with selecting the graphical affordance of the graphical model; and</claim-text>
<claim-text>identify the at least one of the intermediate representation of the graphical model or the code associated with the graphical model based on the received information associated with selecting the graphical affordance of the graphical model.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the first part includes a portion of the graphical model and the second part includes a segment of the code.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The device of <claim-ref idref="CLM-00051">claim 51</claim-ref>, where the processor is further to:
<claim-text>create a deployable representation that facilitates code inspection in a first environment that is independent of a second environment used to develop the graphical model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The device of <claim-ref idref="CLM-00052">claim 52</claim-ref>, where the deployable representation comprises a web deployable format.</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The device of <claim-ref idref="CLM-00051">claim 51</claim-ref>, where the processor is further to:
<claim-text>search the graphical model for the portion; and</claim-text>
<claim-text>graphically relate the segment with the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. The device of <claim-ref idref="CLM-00051">claim 51</claim-ref>, where the processor is further to:
<claim-text>search the code for the segment; and</claim-text>
<claim-text>graphically relate the segment with the portion.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The device of <claim-ref idref="CLM-00055">claim 55</claim-ref>, where the processor is further to:
<claim-text>replace the segment with another segment; and</claim-text>
<claim-text>update the portion to reflect replacing the segment with the other segment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The device of <claim-ref idref="CLM-00051">claim 51</claim-ref>, where the portion further represents an interface of an element and the segment represents at least part of a function related to the interface.</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. The device of <claim-ref idref="CLM-00051">claim 51</claim-ref>, where the portion of the graphical model represents a user specified element developed in textual code.</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the processor, when mapping the first entity to the second entity, is further to:
<claim-text>generate tracing information that associates the first part with the second part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. The device of <claim-ref idref="CLM-00059">claim 59</claim-ref>, where the processor is further to:
<claim-text>generate an independent representation that includes the tracing information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. The device of <claim-ref idref="CLM-00060">claim 60</claim-ref>, where the processor is further to:
<claim-text>identify a programmable application program interface (API) that programmatically identifies the first part or the second part based on the independent representation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the first part is related to a plurality of parts related to the second entity or the second part is related to a plurality of parts related to the first entity.</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. The device of <claim-ref idref="CLM-00062">claim 62</claim-ref>, where the processor, when identifying the plurality of entities, is further to:
<claim-text>identify, using unique graphical identifiers, members of the plurality of parts related to the first entity or members of the plurality of parts related to the second entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the second part includes a section of the generated report, and wherein the is further to:
<claim-text>graphically identify the section based on a selection of the first part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the second part includes a section of the generated report, and the processor is further to:
<claim-text>graphically identify the first part based on selection of the section.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the first entity includes the graphical model, and the processor is further to:
<claim-text>associate an aspect of the graphical model with the second part.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. The device of <claim-ref idref="CLM-00050">claim 50</claim-ref>, where the first entity includes the graphical model, and the processor is further to:
<claim-text>specify a scope for aspects in the graphical model, the aspects related to graphically identifying the second part as at least one segment that is within the scope.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626973-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626973</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13231040</doc-number>
<date>20110913</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>171</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710110</main-classification>
<further-classification>710305</further-classification>
<further-classification>710313</further-classification>
</classification-national>
<invention-title id="d2e53">Pseudo multi-master I2C operation in a blade server chassis</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5946495</doc-number>
<kind>A</kind>
<name>Scholhamer et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6430636</doc-number>
<kind>B1</kind>
<name>Cranston et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7039734</doc-number>
<kind>B2</kind>
<name>Sun et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7092041</doc-number>
<kind>B2</kind>
<name>Lendaro</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>348705</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7127638</doc-number>
<kind>B1</kind>
<name>Sardella et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7281070</doc-number>
<kind>B2</kind>
<name>Bomhoff et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7502896</doc-number>
<kind>B2</kind>
<name>Isani et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2003/0158870</doc-number>
<kind>A1</kind>
<name>Goodman</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0212847</doc-number>
<kind>A1</kind>
<name>Bandholz et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0002384</doc-number>
<kind>A1</kind>
<name>Larson et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370360</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2007/0088874</doc-number>
<kind>A1</kind>
<name>Brabant</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 62</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2007/0124521</doc-number>
<kind>A1</kind>
<name>Boecker et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0031056</doc-number>
<kind>A1</kind>
<name>Bliss et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 31</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0150338</doc-number>
<kind>A1</kind>
<name>Nguyen</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>379412</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2011/0138095</doc-number>
<kind>A1</kind>
<name>Campbell et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>IBM TDB, &#x201c;Method to Provide Multi-master Support to the Primary Side of the IBM I2C MUX&#x201d;, ip.com PriorArtDatabase IPCOM000015036D, Publication date: May 8, 2002, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>IBM TDB, &#x201c;Method to Provide Exclusive Access to a Shared I2C Bus Resource (I2C MUTEX)&#x201d; ip.com PriorArtDatabase IPCOM000015947D, Publication date: May 8, 2002, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>11</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710107</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710110</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710305</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710313</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130067134</doc-number>
<kind>A1</kind>
<date>20130314</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Austen</last-name>
<first-name>Christopher H.</first-name>
<address>
<city>Pflugerville</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Boecker</last-name>
<first-name>Douglas M.</first-name>
<address>
<city>Rochester</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bolan</last-name>
<first-name>Joseph E.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Caporale</last-name>
<first-name>Patrick L.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jacobs</last-name>
<first-name>Brent W.</first-name>
<address>
<city>Rochester</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rosedahl</last-name>
<first-name>Todd J.</first-name>
<address>
<city>Zumbrota</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wood</last-name>
<first-name>Christopher L.</first-name>
<address>
<city>Greenville</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Austen</last-name>
<first-name>Christopher H.</first-name>
<address>
<city>Pflugerville</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Boecker</last-name>
<first-name>Douglas M.</first-name>
<address>
<city>Rochester</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Bolan</last-name>
<first-name>Joseph E.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Caporale</last-name>
<first-name>Patrick L.</first-name>
<address>
<city>Cary</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Jacobs</last-name>
<first-name>Brent W.</first-name>
<address>
<city>Rochester</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Rosedahl</last-name>
<first-name>Todd J.</first-name>
<address>
<city>Zumbrota</city>
<state>MN</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Wood</last-name>
<first-name>Christopher L.</first-name>
<address>
<city>Greenville</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Seal</last-name>
<first-name>Cynthia G.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Streets</last-name>
<first-name>Jeffrey L.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Auve</last-name>
<first-name>Glenn A</first-name>
<department>2111</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method are directed towards a pseudo multi-master operation on a serial bus. The pseudo multi-master operation allows multiple devices without standard multi-master functionality to operate on the serial bus as masters. In a disclosed example, the serial bus is an Inter-Integrated Circuit (I2C) bus, which is isolated when an adapter card requires access to the I2C bus, such as to update vital product data (VPD) to a memory device, and to cache the updated VPD to a chassis management module.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="177.29mm" wi="184.23mm" file="US08626973-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="180.09mm" wi="184.57mm" file="US08626973-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="207.01mm" wi="162.81mm" orientation="landscape" file="US08626973-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="188.21mm" wi="130.64mm" orientation="landscape" file="US08626973-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="196.77mm" wi="143.59mm" orientation="landscape" file="US08626973-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="201.25mm" wi="149.35mm" orientation="landscape" file="US08626973-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates generally to serial bus communication, and more particularly to enabling multi-master operation of serial bus devices in a blade server environment.</p>
<p id="p-0004" num="0003">2. Background of the Related Art</p>
<p id="p-0005" num="0004">In a computer system, a bus provides a communication pathway between hardware devices. A parallel bus is one category of computer system bus having multiple address and data signal lines for communicating multiple bits in parallel. The width of a parallel bus relates to the number of parallel lines in the bus and a corresponding number of bits that may be simultaneously communicated on the parallel bus. The rate of data transfer on a parallel bus for a given clock frequency is dependent on the bus width. Parallel buses are commonly used with certain, so-called &#x201c;high speed&#x201d; peripheral or memory devices. An example of a parallel bus is the Peripheral Component Interconnect (PCI) bus.</p>
<p id="p-0006" num="0005">A serial bus, by contrast, sends data bits sequentially, i.e. one bit at a time. Serial communication typically involves differential signaling, wherein the magnitude of a dynamic voltage differential between a pair of conductors at a given clock cycle determines the bit value. A serial bus may be used, for example, to enable a system processor to communicate with an analog to digital converter which measures battery voltage. Despite the limitation of sequential bit transmission, a serial bus may operate at a high clock speed, which allows for very high data rates. A computer system may include one or more parallel bus and one or more serial bus, wherein each bus may be used for communication between a different subsystem of components.</p>
<p id="p-0007" num="0006">Various bus standards have been created. Devices designed according to the same bus standard may communicate with one another using that bus standard. One well known serial bus standard is the Inter-Integrated Circuit bus (abbreviated &#x201c;I2C&#x201d;). I2C allows attached low-speed peripherals to communicate with a controller. Examples of low-speed hardware in a blade server environment that may operate on an I2C bus include temperature sensors, light-emitting diodes (LEDs), vital product data (VPD) storage devices, and general purpose input/output (GPIOs) pins on an integrated circuit. Any or all of these devices may be connected to a Service Processor or Management Controller (MC) to enable communication between the devices and the Service Processor or MC.</p>
<p id="p-0008" num="0007">Bus mastering is a feature supported by many bus architectures that enables a device connected to the bus to initiate transactions over the bus. The controlling device is referred to as a &#x201c;master device,&#x201d; and the controlled device is referred to as a &#x201c;slave device.&#x201d; When controlling a slave device, the master device is said to &#x201c;master&#x201d; the bus. Slave devices are more passive than master devices. For example, a slave device may only communicate in response to a communication initiated by a master device. Only one device at a time can control communication over the bus. A slave may be a receive-only device, or it may respond to an inquiry from a master device. In either case, a master device provides and drives the clock signal used to synchronize the data line. The I2C bus comprises a serial clock line and a serial data line. To initiate a communication with a slave device on an I2C bus, a master drives the clock line and synchronously sends out a multi-bit address on the data line. Each slave device on the I2C bus is responsive to a specific address. When a slave detects its specific address, the slave device initiates a function.</p>
<p id="p-0009" num="0008">Most modern bus architectures, including I2C, allow multiple devices to master a bus, in a process known as multi-mastering. The I2C protocol, for example, includes a multi-master suite of optional protocols and chips that allow a slave to be mastered by more than one MC. In a multi-master operation, the I2C standard includes an arbitration process to determine which master will gain control of the bus. Each device needs to be able to cooperate with the fact that another device is currently talking and the bus is therefore busy. Following the usual arbitration logic, if two devices start to communicate at the same time, the one writing more zeros to the bus (or the slower device) wins the arbitration and the other device immediately discontinues any operation on the bus. Also, each device must detect an ongoing bus communication and must not interrupt it. This is conventionally achieved by recognizing traffic and waiting for a stop condition to appear before starting to talk on the bus.</p>
<p id="p-0010" num="0009">However, due to various design considerations, such as design and manufacturing costs, not all devices capable of mastering an I2C bus are designed to support the multi-master feature of I2C. In a blade server system, for example, the management controller (MC) and various I2C chips are commonly designed without multi-master capabilities. If a single-master and a multi-master device are both connected to an I2C bus, the single-master may attempt to communicate over the bus while the multi-master is already communicating over the bus. This simultaneous use of the bus can cause unpredictable results, such as data corruption. The same type of problem can occur between two single-master devices coupled to the same bus.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0011" num="0010">Systems and methods are disclosed for providing pseudo multi-mastering capabilities to an electronic system having component devices that lack standard multi-master functionality. According to an example method, a communication is requested from a first device to a second device over a serial bus in a computer system comprising a plurality of devices on the serial bus. The serial bus is isolated between the first device and the second device in response to the requested communication. The requested communication is performed over the serial bus between the first device and the second device. The serial bus is then de-isolated in response to completing the requested communication. The method may be applied, for example, to a multi-blade computer system, such as to isolate an I2C bus between an ASIC and a VPD chip while performing a VPD update, and then to isolate the I2C bus between the VPD chip and a blade management processor when caching the VPD from the blade management processor to a chassis management module.</p>
<p id="p-0012" num="0011">A computer system is also disclosed that includes a multi-blade chassis configured for receiving a plurality of blade servers. At least one blade server is received within the chassis. The blade server includes a blade management processor. A chassis management module is also disposed in the multi-blade chassis, which is capable of managing each of the at least one blade servers. The chassis management module is in selective electronic communication with the blade management processor of the at least one blade server over an Inter-Integrated Circuit (I2C) bus. An adapter card on the blade server includes an application specific integrated circuit (ASIC) for controlling the adapter card and a writeable vital product data (VPD) chip containing information about the adapter card. Control circuitry is further provided for selectively isolating the I2C bus between the ASIC and the VPD chip, updating vital product information about the adapter card from the ASIC to the VPD chip while isolating the I2C bus, de-isolating the I2C bus, and caching the updated vital product data to the chassis management module.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a blade server system on which I2C pseudo multi-mastering may be implemented.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram detailing features of the control circuitry from the adapter card of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a circuit diagram of the PCA9538 chip of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a circuit diagram further detailing the VPD chip of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is an I2C Access Sequence chart for the control circuitry of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">The disclosed systems and methods are directed towards pseudo multi-master I2C operation. Specifically, the pseudo multi-master operation allows multiple devices to operate on the I2C bus as masters, when one or more of the devices lacks standard I2C multi-master functionality. The systems and methods are disclosed, by way of example, in the context of a blade server system having multiple blade servers and a shared management module within a blade chassis. However, the disclosed systems and methods may be used for imposing multi-master operation in any system having an I2C or other form of serial bus. In the disclosed example, an I2C bus is isolated when an adapter card requires access to the I2C bus. This isolation occurs in hardware to enable multiple devices to master the bus even though one or more of those multiple devices (i.e., the endpoints of the communication) are not capable of I2C multi-master operation.</p>
<p id="p-0019" num="0018">Pseudo multi-master I2C bus access in accordance with the invention may be described, for example, in the context of caching the vital product data (VPD) of a device. Typically, the VPD of any component within a blade chassis environment is cached upon inserting the blade server into the chassis or powering up the system or blade server. According to the pseudo multi-master operation disclosed herein, an I2C bus is isolated when the adapter card requires access to the I2C bus, to protect against corruption of the VPD by stray I2C activity from another master. Then, a software handshake between the adapter card and the management processor on the blade server informs the management processor that a change to the VPD on the adapter card has occurred, so that the VPD may be cached or re-cached at the chassis management module. The software handshake indicates to the system that a change has occurred so that caching occurs when an adapter card requires access.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a blade server system <b>10</b> on which I2C pseudo multi-mastering may be implemented, for devices lacking standard I2C multi-master capabilities. The blade server system <b>10</b> includes a multi-blade chassis <b>12</b> housing a plurality of blade servers <b>20</b>. The multi-blade chassis <b>12</b> may be rack-mountable. A blade server is a server computer having a modular design optimized to minimize the use of physical space. Whereas a standard rack mount server can function with a power cord and network cable, blade servers save space and reduce power consumption by omitting certain components in favor of shared resources provided by the chassis <b>12</b>. The shared resources may include power, airflow for cooling, and network connectivity, each of which may be provided by a corresponding support module (not shown). The blade servers <b>20</b> are managed by a shared chassis management module <b>14</b>. The blade servers can communicate with the management module <b>14</b>, such as through a chassis midplane (not shown) having connectors for individually connecting the blade servers <b>20</b>. The shared resources provided by the support modules and management by a central chassis management module <b>14</b> allows the individual blade servers <b>20</b> and the overall chassis <b>12</b> receiving the blade servers <b>20</b> to provide a space-efficient design and maximize the computing capabilities within the space constraints of a data center.</p>
<p id="p-0021" num="0020">Each blade server <b>20</b> includes a blade management processor <b>24</b>, such as a baseboard management controller (BMC) or integrated management module (IMM). Each blade server <b>20</b> communicates with the management module <b>14</b> via the blade management processor <b>24</b>. Each blade server <b>20</b> includes an adapter card <b>22</b>. An adapter card, generally, is a device including a printed circuit board that connects to an expansion slot of a motherboard, to add additional functionality to the blade server. An adapter card will typically include either an edge connector or a mezzanine connector. An edge connector usually orients an adapter card perpendicular to the motherboard, whereas a mezzanine connector orients the adapter card <b>22</b> parallel to the motherboard. The adapter card <b>22</b> in this example is a mezzanine type adapter card, as the parallel orientation provided by the mezzanine connector helps to fit the adapter card <b>22</b> within the space constraints of the blade server <b>20</b>. The type of connection between the adapter card and the blade server is generally not critical to the invention, however. The blade management processor <b>24</b> is in communication with the adapter card <b>22</b> via a serial bus, which in this example is specifically an I2C interface <b>26</b>. The I2C interface <b>26</b> allows system devices to communicate according to the I2C protocol. Although the I2C bus standard includes a suite of available multi-master protocols and chips, the adapter card <b>22</b> and the management processor <b>24</b> are two devices that may not include standard I2C multi-master capabilities. If such a device were simply to disconnect from the I2C bus temporarily to allow another such device to access the I2C bus, data corruption may occur. The adapter card <b>22</b> includes additional control circuitry <b>30</b> that enables the pseudo multi-master operation. This pseudo multi-master operation may, for example, enable the adapter card <b>22</b> to perform local bus transactions, such as VPD reads and writes, while protecting against inadvertent VPD corruption. The control circuitry <b>30</b> may reside entirely on the adapter card <b>22</b>, so that the invention may be implemented without any hardware upgrades to either the blade server <b>20</b> or the management module <b>14</b>.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram detailing features of the control circuitry <b>30</b> from the adapter card <b>22</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Selected circuit elements included with the control circuitry <b>30</b> are individually labeled with their respective functions, in addition to reference numerals. As an overview, the circuit elements include: a mezzanine connector <b>32</b>, a standard PCA9515 chip <b>34</b>, an Auxiliary Power Regulator <b>36</b>, a standard PCA9538 status register chip <b>38</b>, a CB3Q3253 passive multiplexer (MUX) <b>40</b>, a 512 k vital product data (VPD) storage chip <b>42</b>, and an Application-Specific Integrated Circuit (ASIC) <b>46</b>. One or more additional ASICs may also be provided, but are not necessary. Some of these circuit elements are commonly available, such as the PCA9515 chip <b>34</b> and the PCA9538 chip <b>38</b>. However, other circuit elements having similar functionality may be substituted in some cases. For example, the PCA9515 is a specialized chip comprising a BiCMOS (Bi-polar Complementary Metal Oxide Semiconductor) integrated circuit for an I2C-bus, which permits extension of the I2C-bus by buffering both the data (SDA) and the clock (SCL) lines; however, the PCA9515 chip may be substituted with another type of FET switch.</p>
<p id="p-0023" num="0022">The VPD chip <b>42</b> is a storage device that contains vital product data, which includes information about the adapter card. The blade management processor and the chassis management module (<figref idref="DRAWINGS">FIG. 1</figref>) read the VPD from the VPD chip <b>42</b> to determine what type of device the adapter card is. The VPD chip <b>42</b> may occasionally be re-flashed, or otherwise updated, requiring an I2C transaction to update the VPD at the chassis management module. Control logic for implementing this functionality (embodying truth table <b>50</b> of <figref idref="DRAWINGS">FIG. 4</figref>, discussed below) is encapsulated within a &#x201c;Logic&#x201d; block <b>48</b> that is coupled to the write protect (WP) pin of the VPD chip <b>42</b> in <figref idref="DRAWINGS">FIG. 2</figref>. The Auxiliary Power Regulator <b>36</b> is used to provide auxiliary power to the VPD chip <b>42</b> by converting a typical 12V input power from the blade chassis to a 3.3V auxiliary power for I2C components. The PCA9515 chip <b>34</b> is normally enabled, and is disabled only when the adapter card needs to perform an I2C bus transaction, such as a VPD read/write. Specifically, the PCA9515 chip <b>34</b> is enabled when the blade server powergood signal is de-asserted. The CB3Q3253 MUX <b>40</b> is a standard I2C chip comprising a passive multiplexer (MUX). The MUX <b>40</b> permits selection of I2C busses, and must be arbitrated if there are other ASICs in addition to the ASIC <b>46</b>. The MUX <b>40</b> is normally disabled, and is enabled only when the adapter card needs to perform an I2C bus transaction (e.g. VPD read/write). Specifically, the MUX <b>40</b> is disabled when the blade server powergood signal is de-asserted. The interaction of the various circuit elements of the control circuitry <b>30</b> will be further illustrated in connection with an exemplary I2C Access Sequence in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 3</figref> is a circuit diagram of the PCA9538 chip <b>38</b>, further detailing the PCA9538 chip, including selected inputs and outputs. The PCA 9538 chip <b>38</b> is the centralized component for implementing the handshake between the adapter card and the management processor on the blade server (see t<b>3</b>-t<b>5</b> in <figref idref="DRAWINGS">FIG. 5</figref>) to inform the management processor that a change to the VPD on the adapter card has occurred. The PCA9538 chip <b>38</b> is a standard I2C, 16-pin CMOS device that provides 8 bits of General Purpose parallel Input/Output (GPIO) expansion with interrupt and reset for I2C-bus applications. The PCA9538 chip <b>38</b> includes an 8-bit Polarity Inversion register (active HIGH or active LOW operation). The system master can enable the I/O as either inputs or outputs by writing to the I/O configuration bits. Three key individual control lines that run through the PCA9538 are the Mezz_VPD_Update, VPD_Cache_Comp, and the I2C_INT_N (Interrupt) Signal. (Note, the prefix &#x201c;MEZZ&#x201d; in a signal name refers to the mezzanine-type adapter card controlling that signal.) A benefit of using the PCA9538 chip <b>38</b> is that only the I2C_INT_N interrupt line and the I2C SDA/SCL (serial data, clock) lines itself are passed between the mezzanine adapter card and the motherboard of the blade server, thus saving pins on the mezzanine connector <b>32</b> (<figref idref="DRAWINGS">FIG. 2</figref>). When the blade management controller receives an interrupt, it uses the I2C bus itself to read/write the bits of the PCA9538 chip <b>38</b>. These control lines will be discussed further with reference to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 4</figref> is a circuit diagram further detailing the 512 kbit VPD chip <b>42</b>. The shared I2C SCL refers to the shared serial clock line. The shared I2C SDA refers to the shared serial data line. SDA and SCL are open-drain (also known as open-collector), meaning that I2C master and slave devices can only drive these lines low or leave them open. <figref idref="DRAWINGS">FIG. 4</figref> also includes a truth table <b>50</b> describes what happens in the circuit, which may be implemented at the discretion of a circuit designer without a hard requirement on a specific circuit. The truth table <b>50</b> may be implemented on the adapter card via hardware logic such as a combination of AND gates, OR gates, and so forth. Any number of different circuits could be created that perform the logic function specified in the truth table <b>50</b>. This truth table <b>50</b> is encapsulated within the &#x201c;Logic&#x201d; block <b>48</b> that is attached to the write protect pin of the VPD chip <b>42</b> in <figref idref="DRAWINGS">FIG. 2</figref>. The truth table <b>50</b> has four columns <b>51</b> and five rows <b>52</b>. Each column <b>51</b> of the truth table <b>50</b> is associated with a different signal: Pgood (powergood), Mezz_VPD_Update_N, I2C_Int_N (Interrupt), and WP (VPD Write Protect). Each row <b>52</b> of the truth table <b>50</b> lists a different set of values for each of the signals in the corresponding columns <b>51</b>.</p>
<p id="p-0026" num="0025">The first row sets forth that if the Power Good signal is 0 (i.e. the adapter card is currently running on auxiliary power and the ASIC <b>46</b> is not yet powered up), then the write protect (WP) bit should be a 0. The second row sets forth that if the Power Good signal instead is 1 (i.e. the adapter card is fully powered) and VPD_update is 1, then no update is pending, and the write protect bit should always be a 0. The last three rows in the truth table <b>50</b> of <figref idref="DRAWINGS">FIG. 4</figref> correspond to t<b>3</b>-t<b>5</b> in the timing diagram of <figref idref="DRAWINGS">FIG. 5</figref>. These last three rows indicate that the VPD chip is being re-attached to the blade server's I2C bus, at which point there is a need to write-protect the VPD chip to avoid any stray I2C transactions from the blade side causing memory errors in the VPD chip. The WP bit only needs to be on for a short amount of time until the interrupt signal is de-asserted. This is because the blade management controller is configured to read the PCA9538 chip (<figref idref="DRAWINGS">FIG. 3</figref>) once the interrupt is active to determine what changed. The interrupt automatically goes inactive by the PCA9538 chip in response to this read. At this point, the I2C bus is in a &#x201c;normal&#x201d; state again because a valid read has happened, and the WP bit may be de-asserted back to a 0. This part of the process ensures the volatile memory component is protected from being corrupted when the bus is re-attached.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 5</figref> is a timing chart outlining an I2C Access Sequence by which the control circuitry <b>30</b> of <figref idref="DRAWINGS">FIG. 1</figref> operates to provide shared (i.e. pseudo multi-master) control of the I2C bus by the adapter card ASIC <b>46</b> and the blade management processor. Specifically, the timing chart shows how the ASIC <b>46</b> gains temporary control of the I2C bus to perform a protected VPD update to the VPD chip, such as following a firmware update at the ASIC. The timing diagram further shows how the control circuitry of <figref idref="DRAWINGS">FIG. 1</figref> enables a handshake between the ASIC <b>46</b> and the blade management processor that gives control of the I2C bus back to the blade management processor, such as to re-cache the VPD at the chassis management module. The vertical grid lines of the timing chart represent points in time from t<b>1</b> to t<b>9</b>, which may coincide with specific beats of a clock signal (but not necessarily consecutive clock signals). The generally horizontal lines represent the states of the signals used in negotiating control between the adapter card and management processor. Reference should be made also to <figref idref="DRAWINGS">FIG. 1</figref> for the various circuit elements shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0028" num="0027">The series of events spanning t<b>1</b> to t<b>3</b> encompass an I2C update of vital product data (VPD). Prior to t<b>1</b>, an auxiliary power state is entered when the signal ALL_PGOOD is de-asserted, which allows the management processor of the blade server to have full access (i.e. as master) to the I2C bus. At time t<b>2</b>, the signal ALL_PGOOD is asserted, as represented by the upward shift in the signal. The upward shift may represent the change in voltage from a lower value (0) to an upper value (1). Asserting ALL_PGOOD allows the adapter card to access the I2C bus. The adapter card disconnects the PCA9515 chip (<figref idref="DRAWINGS">FIG. 1</figref>) and enables a local FET provided by the CB3Q3253 MUX <b>40</b>, to access the I2C bus. The FET functionality provided by the PCA9515 chip <b>34</b> and the local FET functionality of the CB3Q3253 chip <b>40</b> cooperate to provide, within the electronic realm, a sort of double protection analogous to a double door or airlock in a mechanical realm. Specifically, this double protection requires that for the adapter card to access the shared I2C segment where the VPD chip <b>42</b> resides, it must first disconnect the PCA9515, which takes the blade server's management processor off the I2C bus. Then, the adapter card attaches itself onto the shared I2C bus by enabling the local FET of the CB3Q3253 MUX chip <b>40</b>. At that point, the ASIC <b>46</b> has access to the VPD chip <b>42</b> over the shared I2C bus. The adapter card (via the ASIC <b>46</b>) then has the duration from t<b>2</b> to t<b>3</b> to perform I2C transactions, and specifically to access the VPD chip <b>42</b> to update the vital product data. That interval is 250 ms in this example. Between times t<b>2</b> and t<b>3</b>, the adapter card completes the I2C transaction(s).</p>
<p id="p-0029" num="0028">A handshake next occurs from t<b>3</b> to t<b>9</b> to inform the blade server's system management processor that a change has occurred, so that ultimately a VPD-caching operation can be performed at the chassis management module <b>14</b> (See <figref idref="DRAWINGS">FIG. 1</figref>). At t<b>3</b>, the adapter card has completed the transaction(s) and asserts MEZZ_VPD_UPDATE_N (b&#x2032;0) prior to enabling the FET switch (PCA9515). Specifically, the mezzanine adapter card will assert that signal low when it has finished a VPD update. This signal is controlled by the ASIC <b>46</b>, typically using a General Purpose Input/Output (&#x201c;GPIO&#x201d;) pin. The PCA9538 chip <b>38</b> will then assert the signal I2C_INT_N, and VPD_WP (vital product data Write-Protect) is enabled. At time t<b>4</b>, the adapter card disables the local FET provided by the CB3Q3253 MUX chip <b>40</b> and re-enables the PCA9515 FET switch <b>34</b>, which was previously temporarily disabled at time t<b>2</b>. Re-enabling the PCA9515 FET switch <b>34</b> restores full access by the blade server to the I2C bus. At time t<b>5</b>, an interrupt has been generated by I2C_INT_N, and write-protect on the VPD has been disabled by de-asserting the VPD_WP signal, to avoid VPD corruption that may otherwise be caused by any stray I2C transactions. In response to the interrupt, the blade's management processor reads the PCA9538 chip <b>38</b>. The blade management processor detects that MEZZ_VPD_UPDATE_N is asserted, which indicates that the VPD has been updated. Accordingly, the blade server will then re-cache the now-updated VPD data. The VPD has been successfully re-cached in the chassis management module at time t<b>6</b>.</p>
<p id="p-0030" num="0029">In response to completion of the VPD re-cache operation, the blade server asserts the VPD_CACHE_COMPLETE (b&#x2032;1) signal. At time t<b>7</b>, the adapter detects the VPD_CACHE_COMPLETE signal assertion and, in response, de-asserts the MEZ_VPD_UPDATE_N (b&#x2032;1). The PCA9538 chip <b>38</b> will generate an interrupt by asserting I2C_INT_N. At time t<b>8</b>, the blade management processor performs another read of the PCA9538 chip <b>38</b> in response to the I2C_INT_N, detects that the adapter card has now de-asserted the MEZ_VPD_UPDATE_N signal, and de-asserts the interrupt. At time t<b>9</b>, the blade server detects MEZZ_VPD_UPDATE_N has been de-asserted and, in response, the blade server de-asserts VPD_CACHE_COMPLETE (b&#x2032;0). At the conclusion of these steps, a full cycle has been completed (t<b>1</b> to t<b>9</b>). The adapter card can then reacquire the I2C bus if needed. However, the adapter card is prevented from accessing the I2C bus again until all the steps in the cycle from t<b>1</b> to t<b>9</b> have been completed.</p>
<p id="p-0031" num="0030">The system and methods described above frame the invention in terms of just one example of a system wherein devices on an I2C bus may share control of the I2C bus, in the context of a blade server system. In the above example, an adapter card ASIC and a blade management processor share access to the I2C bus. One of ordinary skill in the art will appreciate that the inventive principles may be applied to any system wherein two or more components are provided with shared access to an I2C bus, even with only single-master capabilities. Thus, the scope of the invention recited in the accompanying claims is not to be limited to the environment of a blade server system.</p>
<p id="p-0032" num="0031">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0033" num="0032">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0034" num="0033">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0035" num="0034">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0036" num="0035">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0037" num="0036">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0038" num="0037">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0039" num="0038">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0040" num="0039">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0041" num="0040">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, components and/or groups, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. The terms &#x201c;preferably,&#x201d; &#x201c;preferred,&#x201d; &#x201c;prefer,&#x201d; &#x201c;optionally,&#x201d; &#x201c;may,&#x201d; and similar terms are used to indicate that an item, condition or step being referred to is an optional (not required) feature of the invention.</p>
<p id="p-0042" num="0041">The corresponding structures, materials, acts, and equivalents of all means or steps plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but it is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>in a computer system comprising a plurality of devices on an Inter-Integrated Circuit (&#x201c;I2C&#x201d;) serial bus, requesting communication from a first device to a second device over the serial bus, wherein one or both of the first and second devices lack standard I2C multi-master functionality;</claim-text>
<claim-text>isolating the serial bus between the first device and the second device in response to the requested communication;</claim-text>
<claim-text>performing the requested communication over the serial bus between the first device and the second device; and</claim-text>
<claim-text>de-isolating the serial bus in response to completing the requested communication.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first device comprises an application-specific integrated circuit (ASIC) on an adapter card.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second device comprises a vital product data (VPD) storage chip, and wherein the requested communication comprises updating the vital product data to the VPD storage chip.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>de-asserting a write protect bit on the VPD storage chip while performing the VPD update; and</claim-text>
<claim-text>re-asserting the write protect bit in response to completing the VPD update.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>in response to de-isolating the serial bus, isolating the serial bus between the second device and a third device on the serial bus; and</claim-text>
<claim-text>performing another communication between the second and third devices while the serial bus is isolated between the second and third devices.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the step of performing the requested communication over the serial bus between the first device and the second device comprises:
<claim-text>updating VPD from an adapter card ASIC to a VPD chip.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>caching the updated VPD from the VPD chip to a chassis management module over the serial bus in response to de-isolating the serial bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of isolating the serial bus between the first device and the second device comprises:
<claim-text>enabling a first circuit element between the first device and the second device to provide access to the serial bus by the first device only while the first circuit element is enabled; and</claim-text>
<claim-text>disabling a second circuit element to prevent access to the serial bus by a third device for as long as the second circuit element is disabled.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first circuit element comprises a local field effect transistor (FET) and the second circuit element comprises another FET.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>isolating the I2C bus between the first and second devices in response to assertion of a blade server powergood signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer system, comprising:
<claim-text>a multi-blade chassis configured for receiving a plurality of blade servers;</claim-text>
<claim-text>at least one blade server received within the chassis, the blade server including a blade management processor;</claim-text>
<claim-text>a chassis management module disposed in the multi-blade chassis, the chassis management module in selective electronic communication with the blade management processor over an Inter-Integrated Circuit (I2C) bus;</claim-text>
<claim-text>an adapter card on the blade server, the adapter card including an application specific integrated circuit (ASIC) for controlling the adapter card, and a writeable vital product data (VPD) chip containing information about the adapter card; and</claim-text>
<claim-text>control circuitry for selectively isolating the I2C bus between the ASIC and the VPD chip, updating vital product information about the adapter card from the ASIC to the VPD chip while isolating the I2C bus, de-isolating the I2C bus, and caching the updated vital product data to the chassis management module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the control circuitry for selectively isolating the I2C bus between the ASIC and the VPD chip comprises:
<claim-text>a local FET disposed on the adapter card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>control circuitry for selectively isolating the I2C bus between the VPD chip and the chassis management module while caching the updated vital product data to the chassis management module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the control circuitry for selectively isolating the I2C bus between the VPD chip and the chassis management module further comprises a FET switch.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product including computer usable program code embodied on a non-transitory computer readable storage medium, the computer program product including:
<claim-text>computer usable program code for requesting communication from a first device to a second device over an Inter-Integrated Circuit (&#x201c;I2C&#x201d;) serial bus, wherein one or both of the first and second devices lack standard I2C multi-master functionality;</claim-text>
<claim-text>computer usable program code for isolating the serial bus between the first device and the second device in response to the requested communication;</claim-text>
<claim-text>computer usable program code for performing the requested communication over the serial bus between the first device and the second device; and</claim-text>
<claim-text>computer usable program code for de-isolating the serial bus in response to completing the requested communication.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the second device comprises a vital product data (VPD) storage chip, and wherein the requested communication comprises updating the vital product data to the VPD storage chip, the computer program product further comprising:
<claim-text>de-asserting a write protect bit on the VPD storage chip while performing the VPD update; and</claim-text>
<claim-text>re-asserting the write protect bit in response to completing the VPD update.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>computer usable program code for isolating the serial bus between the second device and a third device on the serial bus in response to de-isolating the serial bus; and</claim-text>
<claim-text>computer usable program code for performing another communication between the second and third devices while the serial bus is isolated between the second and third devices.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the computer usable program code for performing the requested communication over the serial bus between the first device and the second device comprises:
<claim-text>computer usable program code for updating VPD from an adapter card ASIC to a VPD chip.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising:
<claim-text>computer usable program code for caching the updated VPD from the VPD chip to a chassis management module over the serial bus in response to de-isolating the serial bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the computer usable program code for isolating the serial bus between the first device and the second device comprises:
<claim-text>computer usable program code for enabling a first circuit element between the first device and the second device to provide access to the serial bus by the first device only while the first circuit element is enabled; and</claim-text>
<claim-text>computer usable program code for disabling a second circuit element to prevent access to the serial bus by a third device for as long as the second circuit element is disabled. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

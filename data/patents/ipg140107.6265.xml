<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627411-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627411</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12817943</doc-number>
<date>20100617</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>266</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>04</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726  3</main-classification>
</classification-national>
<invention-title id="d2e53">Techniques to share binary content</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7363378</doc-number>
<kind>B2</kind>
<name>Holmes</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7539727</doc-number>
<kind>B2</kind>
<name>Miller</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0120397</doc-number>
<kind>A1</kind>
<name>Hartman</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0133445</doc-number>
<kind>A1</kind>
<name>Pennington</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0208963</doc-number>
<kind>A1</kind>
<name>Eyal</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0320139</doc-number>
<kind>A1</kind>
<name>Fukuda</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0144392</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0234876</doc-number>
<kind>A1</kind>
<name>Schigel</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0274859</doc-number>
<kind>A1</kind>
<name>Bucuk</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Pouwelse, J.A., et al. &#x201c;Tribler: A social-based Peer-to-Peer system&#x201d;, Department of Computer Science, Delft University of Technology, the Netherlands, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>&#x201c;What is eMule?&#x201d;, Retrived from the Internet on Mar. 4, 2010, 1 page. http://www.emule-project.net/home/perl/general.cgi?I=1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  3</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110314516</doc-number>
<kind>A1</kind>
<date>20111222</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Li</last-name>
<first-name>Naizhi</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nasim</last-name>
<first-name>Maimoon</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Goldberg</last-name>
<first-name>Matthew A</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Vanturennout</last-name>
<first-name>Jeroen</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Badh</last-name>
<first-name>Ranjib</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Samuel</last-name>
<first-name>Arimand</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Randhawa</last-name>
<first-name>Satvir</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="008" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Odle</last-name>
<first-name>Alex</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Li</last-name>
<first-name>Naizhi</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Nasim</last-name>
<first-name>Maimoon</first-name>
<address>
<city>Durham</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Goldberg</last-name>
<first-name>Matthew A</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Vanturennout</last-name>
<first-name>Jeroen</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Badh</last-name>
<first-name>Ranjib</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Samuel</last-name>
<first-name>Arimand</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Randhawa</last-name>
<first-name>Satvir</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Odle</last-name>
<first-name>Alex</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zand</last-name>
<first-name>Kambiz</first-name>
<department>2434</department>
</primary-examiner>
<assistant-examiner>
<last-name>Sanders</last-name>
<first-name>Stephen</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Techniques to share binary content are described. An apparatus may comprise a first related client having a message platform with a file share feature and an object store, the file share feature operative to retrieve a data object for a publishing client having a defined relationship with the first related client and a second related client, the first related client to send the data object to the second related client on behalf of the publishing client, and the object store operative to store and manage the data object using a unique name identifier received with the data object. Other embodiments are described and claimed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="128.44mm" wi="155.70mm" file="US08627411-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="158.75mm" wi="135.55mm" orientation="landscape" file="US08627411-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="254.34mm" wi="169.33mm" orientation="landscape" file="US08627411-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="158.75mm" wi="123.95mm" orientation="landscape" file="US08627411-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="255.02mm" wi="178.22mm" orientation="landscape" file="US08627411-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="223.69mm" wi="143.00mm" file="US08627411-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="221.40mm" wi="144.61mm" file="US08627411-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="229.02mm" wi="185.84mm" file="US08627411-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="164.76mm" wi="124.88mm" orientation="landscape" file="US08627411-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Communication systems are increasingly used for sharing binary content, such as photographs, videos, files and so forth. As volume and size of shared binary content increases, so does the amount of resources needed by a communication system to deliver the shared binary content to interested parties. Conventional systems typically deliver shared binary content by publishing it using a client-server model. For instance, a user may publish a photograph on a social networking system (SNS) for consumption by other users of the same SNS. However, this creates increasing load amounts on a central server as users attempt to access the shared binary content, which increases server costs. Alternatively, conventional systems allow peer-to-peer transfers between computing devices for file sharing. However, this requires that a computing device storing the shared binary content is online and available for file transfers, which reduces availability. As such, a substantial need exists for enhanced techniques for sharing binary content in a communication system. It is with respect to these and other considerations that the present improvements have been needed.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0003" num="0002">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.</p>
<p id="p-0004" num="0003">Various embodiments are generally directed to techniques to share binary content in a communication system. Some embodiments are particularly directed to enhanced techniques to distribute and share binary content between computing devices over a communication system based on defined relationships between users of the computing devices. Defined relationships may include relationships between members of a web service, such as a Social Networking System (SNS), Instant Messaging network, group membership or online software platforms, and so forth. The concept of defined relationships may be used to facilitate distribution and sharing of binary content among the members</p>
<p id="p-0005" num="0004">Various embodiments are generally directed to techniques to share binary content. Some embodiments are particularly directed to techniques to share binary content between computing devices based on defined relationships between users of the computing devices. In one embodiment, for example, an apparatus may comprise a first related client having a message platform with a file share feature and an object store, the file share feature operative to retrieve a data object for a publishing client having a defined relationship with the first related client and a second related client, the first related client to send the data object to the second related client on behalf of the publishing client, and the object store operative to store and manage the data object using a unique name identifier received with the data object. Other embodiments are described and claimed.</p>
<p id="p-0006" num="0005">These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of a first system to share binary content.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of a second system to share binary content.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of a first operating environment.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an embodiment of a second operating environment.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an embodiment of a first logic flow for a first relation.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an embodiment of a second logic flow for a second relation.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an embodiment of a computing architecture.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an embodiment of a communications architecture.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">Various embodiments are generally directed to techniques to share binary content in a communication system. Some embodiments are particularly directed to enhanced techniques to distribute and share binary content between computing devices over a communication system based on defined relationships between users of the computing devices. As a result, the embodiments can improve affordability, scalability, modularity, extendibility, or interoperability for an operator, device or network.</p>
<p id="p-0016" num="0015">Shared binary content may refer to any discrete set of data such as a computer file having any type of data encoded in binary form for computer storage and processing purposes. Examples of shared binary content may include various types of data objects. A data object refers to any type of data stored in object form. In various embodiments, data in an object may comprise any Binary Large Objects (BLOB) of data of any size or type. Examples of data objects may include without limitation an object comprising any type of data including text, audio, sounds, video, audio/video (A/V), images, graphics, photographs, animation, application data, multimedia data, metadata, programs, application programs, system programs, compressed data, and any other data consistent with the embodiments. The embodiments are not limited in this context.</p>
<p id="p-0017" num="0016">Various embodiments may utilize defined relationships between members of a web service, such as a Social Networking System (SNS), Instant Messaging network, group membership or online software platforms, to facilitate distribution and sharing of binary content among the members. In many cases, SNS members have a defined relationship with each other giving permission to access binary content published by the SNS members. Such SNS members are sometimes referred to as &#x201c;friends&#x201d; or &#x201c;buddies,&#x201d; for example. Sharing of binary content in a SNS typically possesses a fan out structure, whereby a publishing client (e.g., a computing device) used by a publishing SNS member shares binary content with multiple related clients (e.g., computing devices) used by friends of the publishing SNS member. In some cases, however, all friends may not be online when a publishing client initially publishes shared binary content. Online may refer to a real-time connection to a SNS over a network and available for person-to-person communications. To gain access to shared binary content, a related client may attempt to access SNS servers to access the shared binary content. However, this client-server model may increase load amounts on SNS servers based on a number of related clients attempting to access the shared binary content. Alternatively, a related client may initiate a peer-to-peer transfer of the shared binary content directly from the publishing client. However, this also increases load amounts for a publishing client. Furthermore a publishing client may be offline and therefore unavailable for peer-to-peer file transfers. As such, there may be challenges to distributing shared binary content using conventional distribution and sharing models.</p>
<p id="p-0018" num="0017">To solve these and other problems, various embodiments implement enhanced techniques for sharing binary content in a communication system by leveraging defined relationships between related entities. Rather than accessing online servers for shared binary content, a related client (or friend) of a publishing client may request and retrieve the shared binary content from another related client (or friend) of the publishing client that already has the shared binary content. As soon as a related client retrieves and stores shared binary content to memory, all related clients (or friends) of the publishing client now have multiple sources for the shared binary content, namely the publishing client and any related clients storing the shared binary content. Progressively, shared binary content from a publishing client is replicated on related clients in a SNS, thereby diminishing dependence on the publishing client and SNS servers. This sharing and distribution technique potentially reduces load on central servers, and in some cases the publishing client, both of which may need to be accessed only when there are no other online friends having the shared binary content. Shared binary content may be accessed using either a &#x201c;push&#x201d; model where one related client sends the shared binary content to another related client, or a &#x201c;pull&#x201d; model where one related client retrieves the shared binary content from another related client. The embodiments are not limited in this context.</p>
<p id="p-0019" num="0018">In various embodiments, it may be appreciated that the term &#x201c;publishing client&#x201d; and &#x201c;related client&#x201d; as used herein may refer to any electronic device, such as a computing device, used by an individual (a user) that has a defined relationship with one or more other individuals (other users). In this context, the terms &#x201c;publishing client&#x201d; and &#x201c;related client&#x201d; may not necessarily mean that the actual devices have some relationship with each other, or that an individual has a relationship with a specific device, although that may be the case in some embodiments. In one embodiment, for example, &#x201c;related clients&#x201d; may comprise or be implemented as edge caches on a device serving other devices. In one embodiment, the terms &#x201c;publishing client&#x201d; and &#x201c;related client&#x201d; refer to relationships between human beings as interpreted and implemented through various electronic devices. The terms &#x201c;publishing client&#x201d; and &#x201c;related client&#x201d; is not meant to be limited to a particular type of relationship or a particular device.</p>
<p id="p-0020" num="0019">In one embodiment, for example, an apparatus may comprise a first related client having a message platform with a file share feature and an object store. The file share feature may be operative to retrieve a data object for a publishing client having a defined relationship with the first related client and a second related client, and send or provide the data object to the second related client on behalf of the publishing client. The object store may be operative to store and manage the data object using a unique name identifier received with the data object.</p>
<p id="p-0021" num="0020">The various clients, publishing client and related clients, may have a defined relationship between each other. The defined relationship may be any form of relationship giving a certain level of permission to access shared binary content of a publishing client or a related client. In some cases, for example, the defined relationship may comprise a dyadic relationship. A dyadic relationship may refer to members of a group having an ongoing relationship or interaction. An example of a dyadic relationship may be friends in a SNS. In one embodiment, the members of a group may include a publishing client and two or more related clients each having a defined relationship with the publishing client. For instance, a first friend may have defined relationships with each of a second friend and a third friend, although the second and third friends may or may not have a defined relationship with each other. In one embodiment, the members of a group may include a publishing client and two or more related clients each having a defined relationship with the publishing client and each other. For instance, a first friend may have defined relationships with each of a second friend and a third friend, and the second and third friends may also have a defined relationship with each other. In this case, the first, second and third friends may be referred to as &#x201c;mutual friends&#x201d; as they form a triangular relationship among each other. The concept of &#x201c;mutual friends&#x201d; may automatically apply to members within a specifically defined relationship group, such as a message group, an IM group, a security group, a business group, or any other aggregated pool of users. In another example, a first friend may have defined relationships with each of a fourth friend and a fifth friend, and the fourth friend and the fifth friend may not have a defined relationship with each other. In this case, the fourth and fifth friends have a second degree relationship with each other through the first friend. It may be appreciated that a dyadic relationship may include more than three clients or friends as desired for a given implementation. The embodiments are not limited in this context.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram for a system <b>100</b> to share binary content among computing devices used by members of a group having a defined relationship. In one embodiment, for example, the system <b>100</b> may comprise a computer-implemented system <b>100</b> having multiple devices or components. As used herein the terms &#x201c;system&#x201d; and &#x201c;device&#x201d; and &#x201c;component&#x201d; are intended to refer to a computer-related entity, comprising either hardware, a combination of hardware and software, software, or software in execution. For example, a component can be implemented as a process running on a processor, a processor, a hard disk drive, multiple storage drives (of optical and/or magnetic storage medium), an object, an executable, a thread of execution, a program, and/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and/or thread of execution, and a component can be localized on one computer and/or distributed between two or more computers as desired for a given implementation. An example of a computer-implemented system may be described in more detail with reference to <figref idref="DRAWINGS">FIG. 7</figref>. The embodiments are not limited in this context.</p>
<p id="p-0023" num="0022">Various elements of the system <b>100</b> may be implemented as part of an electronic device. Examples of an electronic device may include without limitation a mobile device, a personal digital assistant, a mobile computing device, a smart phone, a cellular telephone, a handset, a one-way pager, a two-way pager, a messaging device, a computer, a personal computer (PC), a desktop computer, a laptop computer, a notebook computer, a handheld computer, a server, a server array or server farm, a web server, a network server, an Internet server, a work station, a mini-computer, a main frame computer, a supercomputer, a network appliance, a web appliance, a distributed computing system, multiprocessor systems, processor-based systems, consumer electronics, programmable consumer electronics, television, digital television, set top box, wireless access point, base station, subscriber station, mobile subscriber center, radio network controller, router, hub, gateway, bridge, switch, machine, or combination thereof. Although the system <b>100</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref> has a limited number of elements in a certain topology, it may be appreciated that the system <b>100</b> may include more or less elements in alternate topologies as desired for a given implementation.</p>
<p id="p-0024" num="0023">In the illustrated embodiment shown in <figref idref="DRAWINGS">FIG. 1</figref>, the system <b>100</b> comprises or implements a web service such as a social network system (SNS) allowing users to befriend other online users and share binary content such as comments, messages, files, and so forth. As shown, the system <b>100</b> comprises a publishing client <b>102</b>, multiple related clients <b>104</b>-<b>1</b>-<i>a</i>, and a server <b>110</b>. The publishing client <b>102</b> is communicatively coupled to the server <b>110</b> by a communication link <b>103</b>. The publishing client <b>102</b> is communicatively coupled to the related clients <b>104</b>-<b>1</b>-<i>a </i>by communication links <b>106</b>-<b>1</b>-<i>b</i>. The related clients <b>104</b>-<b>1</b>-<i>a </i>are each communicatively coupled to each other by communication links <b>108</b>-<b>1</b>-<i>c</i>. The communication links <b>103</b>, <b>106</b>-<b>1</b>-<i>b</i>, and <b>108</b>-<b>1</b>-<i>c </i>may be wired or wireless communication links using any conventional communication technologies. It is worthy to note that &#x201c;a&#x201d; and &#x201c;b&#x201d; and &#x201c;c&#x201d; and similar designators are variables representing any positive integer.</p>
<p id="p-0025" num="0024">The clients <b>102</b>, <b>104</b>-<b>1</b>-<i>a </i>may comprise or be implemented as computing devices executing application programs on behalf of SNS members to interact with a SNS implemented by the server <b>110</b>. In one embodiment, the application programs may comprise locally-executing software applications specifically designed for communicating with the server <b>110</b>. In one embodiment, the application program may comprise a general web browser capable of accessing the server <b>110</b> over a network, such as the Internet. In both cases, the clients <b>102</b>, <b>104</b>-<b>1</b>-<i>a </i>may form a connection with the server <b>110</b> over the communication links <b>103</b>, <b>106</b>-<b>1</b>-<i>b</i>, and/or <b>108</b>-<b>1</b>-<i>c </i>to access applications, services and features offered by the SNS implemented by the server <b>110</b>, including shared binary content. The connections may be direct connections between the application programs and the server <b>110</b>, or indirect connections via other applications, such as one or more messaging applications (e.g., email, instant messaging, chat, short message service, multimedia message service, and so forth)), or media-relay connections (e.g., a traversal using relay network address translators (TURN) connection). Furthermore, the clients <b>102</b>, <b>104</b>-<b>1</b>-<i>a </i>may form a connection with each other over the communication links <b>106</b>-<b>1</b>-<i>b</i>, <b>108</b>-<b>1</b>-<i>c </i>to access binary content stored by the clients <b>102</b>, <b>104</b>-<b>1</b>-<i>a</i>. In some cases, the connections may be direct connections using peer-to-peer techniques, or indirect connections through another application, service or device, such as the SNS implemented by the server <b>110</b>, one or more messaging applications (e.g., email, instant messaging, chat, short message service, multimedia message service, and so forth), and other communication modalities consistent with the described embodiments. In some cases, peer-to-peer techniques may include communicating directly (e.g., using TCP) or indirectly relayed through another network device.</p>
<p id="p-0026" num="0025">The server <b>110</b> may implement a web service such as a SNS. Examples of SNS may include without limitation MICROSOFT&#xae; WINDOWS LIVE&#xae;, MYSPACE&#x2122;, FACEBOOK&#x2122;, LINKEDIN&#x2122;, TWITTER&#x2122;, BEBO&#x2122;, and other social networking services consistent with the described embodiments. Additionally or alternatively, the server <b>110</b> may comprise a network storage server for storing and distributing shared binary content. The embodiments are not limited in this context.</p>
<p id="p-0027" num="0026">In one embodiment, the server <b>110</b> may comprise a centralized internet host used for storage and other services of metadata for SNS members, such as distribution lists, security information, authentication information, friend information, profile information, subscriber information, personal information, and so forth. Each SNS member may subscribe to the SNS and publish various types of binary content, such as audio, video, pictures and/or other documents. In some cases, a SNS member may publish the binary content so it may be shared among other SNS members having a defined or dyadic relationship with the publishing client <b>102</b>, such as SNS members who have accepted a friendship relationship with the publishing client <b>102</b>, such as related clients <b>104</b>-<b>1</b>-<i>a </i>(also referred to as &#x201c;friends&#x201d; or &#x201c;buddies.&#x201d;) In some cases, the publishing client <b>102</b> and two or more clients <b>140</b>-<b>1</b>-<i>a </i>may comprise mutual friends or buddies.</p>
<p id="p-0028" num="0027">The SNS implemented by the server <b>110</b> may publish, distribute or share binary content for consumption by various SNS members. In various embodiments, pointers to stored binary content are unique. Examples may include without limitation hashes to the actual file content. This enables unique identification of stored binary content across a network or system. The shared binary content may be stored by the server <b>110</b> and a publishing client <b>102</b>. Consistent with the described embodiments, the shared binary content may also be stored and distributed by one or more related clients <b>104</b>-<b>1</b>-<i>a</i>, when the one or more related clients <b>104</b>-<b>1</b>-<i>a </i>have a defined relationship with the publishing client. In various embodiments, the defined relationship may be a dyadic relationship, although other types of relationships are possible as consistent with the described embodiments.</p>
<p id="p-0029" num="0028">Referring again to a social network depicted by system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>, a publishing client <b>102</b> shares binary content with a group of related clients <b>104</b>-<b>1</b>-<i>a </i>having a defined relationship with the publishing client <b>102</b> (e.g., where the SNS members are friends). Assume the publishing client <b>102</b> has a defined relationship with the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b>, <b>104</b>-<b>3</b> and <b>104</b>-<b>4</b>. Further assume that the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> and <b>104</b>-<b>3</b> have a defined relationship with each other. In addition, assume related client <b>104</b>-<b>4</b> does not have a defined relationship with the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> and <b>104</b>-<b>3</b>. Each of the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b> to <b>104</b>-<b>4</b> are connected to the server <b>110</b> via respective connections <b>108</b>-<b>6</b>, <b>108</b>-<b>7</b>.</p>
<p id="p-0030" num="0029">This group of friends will be seeded with shared binary content as soon as a first friend obtains the stored binary content from the publishing client <b>102</b>. For instance, assume the publishing client <b>102</b> shares binary content with the related clients <b>104</b>-<b>1</b> to <b>104</b>-<b>4</b>. While doing so, the publishing client <b>102</b> uploads the shared binary content to the server <b>110</b> using the communication link <b>103</b>. The related client <b>104</b>-<b>1</b> happens to be online at this moment and retrieves the shared binary content from the publishing client <b>102</b> via the communication link <b>106</b>-<b>1</b>. The related clients <b>104</b>-<b>2</b>, <b>104</b>-<b>3</b> and <b>104</b>-<b>4</b> are not online at this time. Assume the publishing client <b>102</b> goes offline, while the related client <b>104</b>-<b>1</b> stays online.</p>
<p id="p-0031" num="0030">In various embodiments, the shared binary content may only be retrieved from mutual friends of both the publishing client <b>102</b> and related clients. Limiting retrieval to mutual friends ensures a higher level of security and privacy, since mutual friends have a known defined relationship, and therefore downloading the shared binary content of the publishing client <b>102</b> as stored by a mutual friend reduces risk of unauthorized access by unknown clients. However, this arrangement may have a disadvantage of limiting a potential pool of available friends to retrieve shared binary content of the publishing client <b>102</b>. For example, assume the related client <b>104</b>-<b>3</b> comes online after the related client <b>104</b>-<b>1</b> has stored the shared binary content of the publishing client <b>102</b>. Although the related client <b>104</b>-<b>3</b> has the capability to download the shared binary content from the server <b>110</b> via the communication link <b>108</b>-<b>3</b>, the related client <b>104</b>-<b>3</b> may be arranged to attempt retrieval of the shared binary content from online mutual friends of the publishing client <b>102</b>. Instead of going to the server <b>110</b> for the shared binary content, the related client <b>104</b>-<b>3</b> attempts to retrieve the shared binary content of the publishing client <b>102</b> stored by the related client <b>104</b>-<b>1</b> over the communication link <b>108</b>-<b>2</b>. The related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>3</b> have a defined relationship to each other as well as the publishing client <b>102</b>. As friends of both the publishing client <b>102</b> and the related client <b>104</b>-<b>1</b>, the related client <b>104</b>-<b>3</b> is considered a mutual friend of the publishing client <b>102</b> and the related client <b>104</b>-<b>1</b>. Similarly, when the related client <b>104</b>-<b>2</b> comes online, the related client <b>104</b>-<b>2</b> may attempt to retrieve the shared binary content from the related client <b>104</b>-<b>1</b> over the communication link <b>108</b>-<b>1</b> if the related client <b>104</b>-<b>1</b> is online. If the related client <b>104</b>-<b>1</b> is not online, the related client <b>104</b>-<b>2</b> may attempt to retrieve the shared binary content from the related client <b>104</b>-<b>3</b> over the communication link <b>108</b>-<b>5</b>. The related clients <b>104</b>-<b>2</b>, <b>104</b>-<b>3</b> have a defined relationship with each other as well as the publishing client <b>102</b>. As friends of both the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b>, the related client <b>104</b>-<b>3</b> is considered a mutual friend of the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b>.</p>
<p id="p-0032" num="0031">In various embodiments, the shared binary content may be retrieved from any friends of the publishing client <b>102</b> either when related clients themselves are directly related to each other (e.g., mutual friends) or have a second degree relationship through the publishing client <b>102</b> (e.g., second degree friends). This arrangement may provide a lower level of security and privacy, since there is no defined relationship between related clients attempting to access the shared binary content. However, there is an implicit relationship that may be inferred by a related client storing the shared binary content based on the defined relationship between the publishing client <b>102</b> and the related client attempting to download the shared binary content, which may be suitable for some use scenarios. This arrangement provides an advantage of increasing a potential pool of available friends to retrieve shared binary content of the publishing client <b>102</b>, and in some cases may match an entire friend list of the publishing client <b>102</b>. For instance, when the related client <b>104</b>-<b>4</b> comes online, and the publishing client <b>102</b> is offline, the related client <b>104</b>-<b>4</b> may attempt to retrieve the shared binary content of the publishing client <b>102</b> from any of the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> or <b>104</b>-<b>3</b>, even though the related client <b>104</b>-<b>4</b> does not have a defined relationship with any of the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> or <b>104</b>-<b>3</b>. In cases where a mutual friend parameter is enabled, or when none of the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> or <b>104</b>-<b>3</b> are online, the related client <b>104</b>-<b>4</b> may attempt to retrieve the shared binary content from the server <b>110</b> over the communication link <b>108</b>-<b>4</b>.</p>
<p id="p-0033" num="0032">In various embodiments, the publishing client <b>102</b> and/or the related clients <b>104</b>-<b>1</b>-<i>a </i>may implement various distribution rules to further enhance sharing and distribution techniques implemented by the system <b>100</b>. The distribution rules may control sharing and distribution techniques based on any number of design or performance criteria, including available processing resources for the publishing client <b>102</b> and/or the related clients <b>104</b>-<b>1</b>-<i>a</i>, communications resources for the communication links <b>103</b>, <b>106</b>-<b>1</b>-<i>b</i>, and/or <b>108</b>-<b>1</b>-<i>c</i>, communication parameters, security policies, presence information (e.g., online, offline, available, etc.), power parameters, cost parameters, and so forth. For instance, a distribution rule may instruct related clients <b>104</b>-<b>1</b>-<i>a </i>to attempt retrieval of shared binary content in a certain order, such as beginning with accessing online friends, then the publishing client <b>102</b>, and finally the server <b>110</b>. A distribution rule may instruct the publishing client <b>102</b> and/or the related clients <b>104</b>-<b>1</b>-<i>a </i>to use a particular type of communication technique when communicating the shared binary content, such as currently established peer-to-peer connections, for example. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to check a distribution list indicating which of the related clients <b>104</b>-<b>1</b>-<i>a </i>have already stored the shared binary content, and a presence indicator indicating which of the related clients <b>104</b>-<b>1</b>-<i>a </i>on the distribution list are online, and attempt to retrieve the shared binary content from the online related clients <b>104</b>-<b>1</b>-<i>a </i>storing the shared binary content. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to check for mutual friends to download the shared binary content. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to check for any friends of the publishing client <b>102</b> to download the shared binary content. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on bandwidth parameters of the communication links <b>106</b>-<b>1</b>-<i>b</i>, <b>108</b>-<b>1</b>-<i>c</i>. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on cost parameters (e.g., number of hops, cost per link) of the communication links <b>106</b>-<b>1</b>-<i>b</i>, <b>108</b>-<b>1</b>-<i>c</i>. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on latency parameters of the communication links <b>106</b>-<b>1</b>-<i>b</i>, <b>108</b>-<b>1</b>-<i>c</i>. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on previous download success parameters of the communication links <b>106</b>-<b>1</b>-<i>b</i>, <b>108</b>-<b>1</b>-<i>c</i>. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on other types of shared binary content stored by, and accessible from, the clients <b>104</b>-<b>1</b>-<i>a</i>. A distribution rule may instruct the related clients <b>104</b>-<b>1</b>-<i>a </i>to rank order retrieval of the shared binary content based on shared resources, such as a common communications network, transports, protocols, device configuration, Internet Service Provider, and other device or network resources. It may be appreciated that these are merely some examples of distribution rules, and other distribution rules consistent with the described embodiments may also be defined as desired for a given implementation. The embodiments are not limited in this context.</p>
<p id="p-0034" num="0033">In various embodiments, the publishing client <b>102</b>, the related clients <b>104</b>-<b>1</b>-<i>a, </i>and/or the server <b>110</b> may implement a passive distribution system or an active distribution system. A passive distribution system is where shared binary content is requested by the various related clients <b>104</b>-<b>1</b>-<i>a</i>. An active distribution is where shared binary content is pushed to the various related clients <b>104</b>-<b>1</b>-<i>a</i>. Various embodiments are described in the context of a passive distribution system. However, other embodiments may implement an active distribution system using similar principles as those described herein.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of a system <b>200</b> to share binary content among computing devices used by members of a group having a defined relationship. The system <b>200</b> may be similar to the system <b>100</b>, and may provide a more detailed block diagram for the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b>-<i>a</i>. The system <b>200</b> may also provide a more detailed block diagram for the server <b>110</b>, and add a message server <b>240</b> for those embodiments using a message application and message connection for communicating shared binary content among friends in a SNS. All of these elements may communicate over a network <b>230</b> using techniques described in more detail with reference to <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0036" num="0035">In various embodiments, the publishing client <b>102</b>, the related client <b>104</b>-<b>1</b> and the related client <b>104</b>-<b>2</b> may each implement a respective message platform <b>212</b>-<b>1</b>-<i>d</i>, such as message platforms <b>212</b>-<b>1</b>, <b>212</b>-<b>2</b> and <b>212</b>-<b>3</b>. Although the publishing client and related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> are described using a message platform <b>212</b>-<b>1</b>-<i>d </i>to communicate data objects and/or related metadata, it may be appreciated that any communication technique may be implemented by the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> to communicate data objects, including without limitation stand-alone application programs designed to interoperate with the web service <b>252</b> of the server <b>110</b>, application programs such as those provided by MICROSOFT OFFICE, an operating system, and so forth. The embodiments are not limited in this context.</p>
<p id="p-0037" num="0036">As previously described, the server <b>110</b> may comprise or employ one or more server computing devices and/or server programs that operate to perform various methodologies in accordance with the described embodiments. For example, when installed and/or deployed, a server program may support one or more server roles of the server computing device for providing certain services and features. Examples for the server <b>110</b> may include without limitation stand-alone and enterprise-class server computers operating a server OS such as a MICROSOFT OS, a UNIX&#xae; OS, a LINUX&#xae; OS, or other suitable server-based OS.</p>
<p id="p-0038" num="0037">The web service <b>252</b> may comprise any server program capable of storing shared binary content such as data objects, and distributing the shared binary content to a group of members having defined relationships indicating a level of permission to access the shared binary content by the members. In one embodiment, the web service <b>252</b> may comprise or implement a SNS. Examples of SNS may include without limitation MICROSOFT WINDOWS LIVE, MYSPACE, FACEBOOK, LINKEDIN, TWITTER, BEBO, and any other social networking services consistent with the described embodiments. In one embodiment, the web service <b>252</b> may comprise or implement online storage of documents and files, such as MICROSOFT WINDOWS LIVE. Other examples for the web service <b>252</b> may include without limitation server programs such as business application programs, search applications, document management programs, weblogs (blogs), word processing programs, spreadsheet programs, database programs, drawing programs, document sharing programs, message applications, web services, web applications, web services, web feeds such as really simple syndication (RSS), and/or other types of programs, applications, or services for storing and distributing shared binary content in accordance with the described embodiments.</p>
<p id="p-0039" num="0038">As with the server <b>110</b>, the message server <b>240</b> may also comprise or employ one or more server computing devices and/or server programs that operate to perform various methodologies in accordance with the described embodiments. For example, when installed and/or deployed, a server program may support one or more server roles of the server computing device for providing certain services and features. Exemplary message server <b>240</b> may include, for example, stand-alone and enterprise-class server computers operating a server OS such as a MICROSOFT OS, a UNIX OS, a LINUX OS, or other suitable server-based OS. In addition, the message server <b>240</b> may implement server programs providing communications or messaging services. Exemplary server programs may include, for example, communications server programs such as MICROSOFT OFFICE COMMUNICATIONS SERVER (OCS) or MICROSOFT WINDOWS LIVE servers for managing incoming and outgoing messages, messaging server programs such as MICROSOFT EXCHANGE SERVER for providing unified messaging (UM) for e-mail, voicemail, VoIP, instant messaging (IM), group IM, enhanced presence, and audio-video conferencing, and/or other types of programs, applications, or services in accordance with the described embodiments.</p>
<p id="p-0040" num="0039">The related client <b>104</b>-<b>1</b> may comprise various storage media arranged to store shared binary content. As shown, the related client <b>104</b>-<b>1</b> may implement a file system <b>224</b> and a cache <b>226</b>. The file system <b>224</b> and the cache <b>226</b> may comprise storage media arranged to store various types of data objects as managed by the object store <b>216</b> and/or the object cache manager <b>218</b>. In various embodiments, the file system <b>224</b> and/or the cache <b>226</b> may store a data object using a unique name identifier, such as a globally unique identifier (GUID), thereby allowing the data object to be retrieved from any of the devices of the system <b>200</b>.</p>
<p id="p-0041" num="0040">In one embodiment, the unique name identifier may be generated using hashes to the actual data or metadata of a data object. This may facilitate fast and unique identification across the system <b>200</b>. For example, object metadata that describes a data object may be stored with the data object. The exemplary object metadata may include a name field, a type field, a friendlyname field, a hash1 field, a hash2 field, a creator field, and other information (e.g., a URL). The name is a string that identifies the object. In one embodiment, the name field is a combination of one or more of the metadata fields. The type field specifies a type for a data object. The friendlyname field is a user-readable name that a user can give a data object. The creator field is an identifier for a creator of a data object, such as the publishing client <b>102</b>.</p>
<p id="p-0042" num="0041">In one embodiment, the hash1 field has a value uniquely associated with the data object, and may be used to locate the data object in the cache <b>226</b> (or file system <b>224</b>). The hash1 value is generated using a cryptographic hashing function, such as a Secure Hash Algorithm 1 (SHA1). The SHA1 function takes the data object as input to generate the hash1 value. An example calling signature of the SHA1 function is SHA1 (Data) where Data refers to the data object to be stored. SHA1 is an algorithm for computing a &#x201c;condensed representation&#x201d; of the data object. The &#x201c;condensed representation&#x201d; is typically of fixed length and is known as a &#x201c;message digest&#x201d; or &#x201c;fingerprint.&#x201d; A common fixed length of the hash1 field is 160 or 256 bits, which virtually guarantees that the hash1 value will be unique for every object. The uniqueness of the hash1 value enables the hash1 value to act as a &#x201c;fingerprint&#x201d; of the data object, to ensure data integrity and allow for data comparison checking. For instance, when data object is downloaded, the hash1 value can be calculated and compared to a previous hash1 value to guarantee that the data object is unaltered. The hash1 value can also be used as an index into the cache <b>226</b> to locate the previously stored data object.</p>
<p id="p-0043" num="0042">The hash1 value may be calculated using other known algorithms, such as the Message Digest Algorithm 5 (MD5) developed by Professor Ronald L. Rivest. Using MD5, SHA1, or a similar algorithm, the hash1 value is non-reversible, meaning that the data object cannot be generated from the hash1 value. The hash2 field is a hash value that results when the metadata fields (e.g., the creator field, the type field, the friendlyname field, the location field, and the hash1 field) are input into a hash function, such as the SHA1 function discussed above. The hash1 value, the hash2 value and/or other information may be used as a unique name identifier for a data object stored by the system <b>200</b>.</p>
<p id="p-0044" num="0043">The related client <b>104</b>-<b>1</b> may comprise the message platform <b>212</b>-<b>2</b>. The message platform <b>212</b> may comprise a representative example for the message platforms <b>212</b>-<b>1</b>-<i>d</i>. It may be appreciated that the message platforms <b>212</b>-<b>1</b>, <b>212</b>-<b>3</b> may implement the same or similar elements as those shown for the message platform <b>212</b>-<b>2</b>. The message platform <b>212</b>-<b>2</b> may comprise or implement any message application, service or features to communicate messages and/or data objects to other message platforms <b>212</b>-<b>1</b>-<i>d</i>. In one embodiment, the messages and/or data objects may be routed through the message server <b>240</b>. In one embodiment, the messages and/or data objects may be routed directly between message platforms <b>212</b>-<b>1</b>-<i>d </i>without using the message server <b>240</b>. This may be accomplished using, for example, peer-to-peer communications techniques. Examples for the message platform <b>212</b>-<b>2</b> may include without limitation email, instant messaging (IM), chat, short message service (SMS), multimedia message service (MMS), and so forth. In one embodiment, for example, the message platform <b>212</b>-<b>2</b> may comprise an IM client such as MICROSOFT WINDOWS LIVE or MICROSOFT OFFICE COMMUNICATOR designed for use with MICROSOFT EXCHANGE SERVER implemented by the message server <b>240</b>. However, the embodiments are not limited to this example.</p>
<p id="p-0045" num="0044">The message platform <b>212</b>-<b>2</b> may comprise one or more features <b>214</b>-<b>1</b>-<i>e</i>. The features <b>214</b>-<b>1</b>-<i>e </i>may comprise various end user features (EUF) providing certain functionality for a user. The features <b>214</b>-<b>1</b>-<i>e </i>are functions or applications hosted or executed by or within the message platform <b>212</b>-<b>2</b> to present data associated with the feature <b>214</b>-<b>1</b>-<i>e</i>. A feature <b>214</b>-<b>1</b>-<i>e </i>may be characterized by the type of data the feature <b>214</b>-<b>1</b>-<i>e </i>presents, the manner of presenting the data, the operations that the feature <b>214</b>-<b>1</b>-<i>e </i>may perform on the data, and/or the interactive options that the feature <b>214</b>-<b>1</b>-<i>e</i>provides to the user to interact with the data. For example, a custom user tile feature <b>214</b>-<b>1</b> presents picture data in a screen tile on the user interface. In another example, a file transfer feature <b>214</b>-<b>2</b> enables a user to select a file and send the file to another message platform <b>212</b>-<b>1</b>-<i>d</i>. In yet another example, a file share feature <b>214</b>-<b>3</b> allows a data object to be published and accessible to another message platform <b>212</b>-<b>1</b>-<i>d </i>for retrieval by the message platform <b>212</b>-<b>1</b>-<i>d</i>. In still another example, a presence feature <b>214</b>-<b>4</b> allows presence information for the various devices of the system <b>200</b> to be published or consumed by the message platform <b>212</b>-<b>2</b>. Other features <b>214</b>-<b>1</b>-<i>e </i>are possible and may be customized for a given implementation.</p>
<p id="p-0046" num="0045">The message platform <b>212</b>-<b>2</b> may comprise an object store <b>216</b>. The object store <b>216</b> generally manages objects on behalf of the message platform <b>212</b>-<b>2</b> and/or the related client <b>104</b>-<b>1</b>. The object store <b>216</b> provides methods and data for storing, accessing, and otherwise managing data objects communicated by the message platform <b>212</b>-<b>2</b>. For example, the object store <b>216</b> may be used by a file share feature <b>214</b>-<b>3</b> to publish and make accessible a data object stored by the file system <b>224</b> and/or the cache <b>226</b> to the message platform <b>212</b>-<b>3</b> implemented by the related client <b>104</b>-<b>2</b>. The object store <b>216</b> handles requests for objects, by determining where the requested objects are and retrieving them from the determined locations. Thus, the object store <b>216</b> ca determine whether objects are on a local device, such as in the file system <b>224</b> or the cache <b>226</b> of the related client <b>104</b>-<b>1</b>, or a remote device, such as in the web service <b>252</b>, the publishing client <b>102</b>, another related client <b>104</b>-<b>1</b>-<i>a </i>such as the related client <b>104</b>-<b>2</b>, network storage for the network <b>230</b>, or other network storage location. As discussed in further detail below, the object store <b>216</b> can provide degrees of data security by encrypting data, such as by hashing identifier data associated with an object.</p>
<p id="p-0047" num="0046">The message platform <b>212</b>-<b>2</b> may comprise an object cache manager <b>218</b>. The object cache manager <b>218</b> manages objects in the cache <b>226</b>. In one embodiment, the object cache manager <b>218</b> manages the cache <b>226</b> implemented as a web browser cache such as the WINDOWS INTERNET EXPLORER&#xae; cache, which is the cache used by the WINDOWS INTERNET EXPLORER made by MICROSOFT, Redmond, Wash. In this implementation, when an object is retrieved from a web address (e.g., a uniform resource locator (URL)), the object cache manager <b>218</b> will automatically write the object into the cache <b>226</b>. If an object is retrieved from a location other than a URL location, the object cache manager <b>218</b> will request that the transport protocol stack <b>220</b> retrieve the object, and the object cache manager <b>218</b> writes the object to the cache <b>226</b>.</p>
<p id="p-0048" num="0047">The message platform <b>212</b>-<b>2</b> may comprise one or more transports <b>219</b>. The transport <b>219</b> may generally communicate data objects between devices, such as the publishing client <b>102</b> and the related client <b>104</b>-<b>1</b>, and the related client <b>104</b>-<b>1</b> and the related client <b>104</b>-<b>2</b>, for example. The transports <b>219</b> may comprise a transport protocol stack <b>220</b> and a transport application program interface (API) <b>222</b>. The transport protocol stack <b>120</b> and the transport API <b>122</b> implement a transport system for the related client <b>104</b>-<b>1</b> to communicate with other devices such as the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b> over the network <b>230</b> and/or over a direct connection in a peer-to-peer fashion. The transport protocol stack <b>220</b> establishes necessary connections for communicating message data, including data related to the features <b>214</b>-<b>1</b>-<i>e </i>and the object store <b>216</b>.</p>
<p id="p-0049" num="0048">In general operation, the related client <b>104</b>-<b>1</b> may use the message platform <b>212</b>-<b>2</b> with the file share feature <b>214</b>-<b>3</b> and the object store <b>216</b> to share a data object for the publishing client <b>102</b> with the related client <b>104</b>-<b>2</b>. The file share feature <b>214</b>-<b>3</b> may be arranged to retrieve a data object for the publishing client <b>102</b> having a defined relationship with the related client <b>104</b>-<b>1</b> and the related client <b>104</b>-<b>2</b>. The related client <b>104</b>-<b>1</b> may send the data object to the related client <b>104</b>-<b>2</b> on behalf of the publishing client <b>102</b>. The object store <b>216</b> may be arranged to store and manage the data object of the publishing client <b>102</b> using a unique name identifier received with the data object. This may be described in more detail with reference to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of an operating environment <b>300</b> suitable for the systems <b>100</b>, <b>200</b>. The operating environment <b>300</b> illustrates signaling between the various devices of the systems <b>100</b>, <b>200</b> to provide enhanced distribution and sharing services for the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b>-<i>a. </i></p>
<p id="p-0051" num="0050">In the illustrated embodiment shown in <figref idref="DRAWINGS">FIG. 3</figref>, the related client <b>104</b>-<b>1</b> may use the message platform <b>212</b>-<b>2</b> with the file share feature <b>214</b>-<b>3</b> and the object store <b>216</b> to share a data object <b>302</b> for the publishing client <b>102</b> with the related client <b>104</b>-<b>2</b>. As shown, the publishing client <b>102</b> may publish shared binary content such as the data object <b>302</b> for consumption by a group of friends of a SNS implemented by the web service <b>252</b>, the group of friends including the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b>. For instance, assume the publishing client <b>102</b> updates a user tile with a new profile image for the user as the data object <b>302</b>. When the publishing client <b>102</b> is online it publishes the data object <b>302</b> for sharing with the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b>, and notifies the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> of the published data object <b>302</b> over connections <b>310</b>, <b>312</b>. This may be accomplished using the presence feature <b>214</b>-<b>4</b>. The notification may include, for example, a unique name identifier for the data object <b>302</b> and location information for the data object <b>302</b> (e.g., a uniform resource locator (URL)). The publishing client <b>102</b> may then upload the data object <b>302</b> into the web service <b>252</b> provided by the server <b>110</b> over connection <b>312</b>. In some cases, uploading the data object <b>302</b> operates as the actual publishing operation, such as when the <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> are automatically notified of any published binary content provided by the publishing client <b>102</b> through an automatic feed or notification system.</p>
<p id="p-0052" num="0051">Upon notification, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may be arranged to retrieve the data object <b>302</b> for the publishing client <b>102</b> using the unique name identifier and location information. The file share feature <b>214</b>-<b>3</b> may first check a local cache (e.g., the cache <b>226</b>) to determine whether it already has the data object <b>302</b>. If there is a cache miss, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may attempt to retrieve the data object <b>302</b> from the publishing client <b>102</b> or the web service <b>252</b>.</p>
<p id="p-0053" num="0052">The publishing client <b>102</b> has a defined relationship with the related client <b>104</b>-<b>1</b> and the related client <b>104</b>-<b>2</b>. Since the publishing client <b>102</b> and the related client <b>104</b>-<b>1</b> are friends, the related client <b>104</b>-<b>1</b> may have necessary permissions to access the data object <b>302</b> stored by the publishing client <b>102</b> and/or the web service <b>252</b>. As such, the related client <b>104</b>-<b>1</b> may use the presence feature <b>214</b>-<b>4</b> to determine whether the publishing client <b>102</b> is online, and if so, request the data object <b>302</b> from the publishing client <b>102</b> using the unique name identifier and location information over connection <b>310</b>, or the web service <b>252</b> over connection <b>314</b>. The object store <b>216</b> may store the retrieved data object <b>302</b> in the file system <b>224</b> and/or the cache <b>226</b> of the related client <b>104</b>-<b>1</b>. In one embodiment, the object store <b>216</b> may be arranged to store and manage the data object <b>302</b> of the publishing client <b>102</b> using a unique name identifier assigned by the publishing client <b>102</b> and/or the web service <b>252</b>.</p>
<p id="p-0054" num="0053">Once retrieval of the data object <b>302</b> is successful, the file share feature <b>214</b>-<b>3</b> may then notify the publishing client <b>102</b> and/or the web service <b>252</b> that the related client <b>104</b>-<b>1</b> is currently storing the data object <b>302</b> originally published by the publishing client <b>102</b> over respective connections <b>310</b>, <b>314</b>. The notification may include a unique name identifier for the data object <b>302</b> and location information, such as a URL or an identifier for the related client <b>104</b>-<b>1</b>, for example. The web service <b>252</b> may then update a distribution list <b>254</b>, and notify the related client <b>104</b>-<b>2</b> of the updated distribution list <b>254</b> over connection <b>316</b>. The distribution list <b>254</b> may comprise a list of related clients <b>104</b>-<b>1</b>-<i>a </i>actually storing the data object <b>302</b> on behalf of the publishing client <b>102</b>, or potentially storing the data object <b>302</b> on behalf of the publishing client <b>102</b>. Additionally or alternatively, the distribution list <b>254</b> may also comprise distribution criteria and/or distribution rules indicating access levels of the data object <b>302</b> published by the publishing client <b>102</b>. Examples of access levels may include public, network, limited and private. The example of public access is access by any authenticated or unauthenticated user. The example of network access is access by any authenticated user that has a defined relationship with the publishing client <b>102</b> (e.g., a friend). The example of limited access is access by a specified subset of authenticated users. The example of private access is access by the publishing client <b>102</b> alone. The distribution list <b>254</b> may be implemented as part of another list, such as an access control list, for example. The distribution list <b>254</b> may be maintained by the publishing client <b>102</b>, the related client <b>104</b>-<b>1</b> or the web service <b>252</b>, and either may update the distribution list <b>254</b> and notify other related clients accordingly.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an embodiment of an operating environment <b>400</b> suitable for the systems <b>100</b>, <b>200</b>. The operating environment <b>400</b> illustrates signaling between the various devices of the systems <b>100</b>, <b>200</b> to provide enhanced distribution and sharing services for the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b>-<i>a. </i></p>
<p id="p-0056" num="0055">Since the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b> are friends, the related client <b>104</b>-<b>2</b> may also have necessary permissions to access the data object <b>302</b> stored by the publishing client <b>102</b> and/or the web service <b>252</b>. However, rather than increase load on the publishing client <b>102</b> or the server <b>110</b>, or when the publishing client <b>102</b> or the server <b>110</b> are inaccessible (e.g., offline), the related client <b>104</b>-<b>2</b> may attempt to retrieve the data object <b>302</b> published by the publishing client <b>102</b> as stored by the related client <b>104</b>-<b>1</b>. The former case may be managed in accordance with one or more distribution rules implemented by the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> implemented by the related client <b>104</b>-<b>2</b>, for example.</p>
<p id="p-0057" num="0056">The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> implemented by the related client <b>104</b>-<b>2</b> may receive a unique object name for the data object <b>302</b> of the publishing client <b>102</b> as stored by the related client <b>104</b>-<b>1</b> from the web service <b>252</b> over connection <b>406</b>. Additionally or alternatively, the unique object name may be received from the related client <b>104</b>-<b>1</b> or the publishing client <b>102</b> over respective connections <b>402</b>, <b>404</b>.</p>
<p id="p-0058" num="0057">The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may check a local cache for the data object <b>302</b>. If there is a cache miss, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may attempt to retrieve the data object <b>302</b> from the related client <b>104</b>-<b>1</b>. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may receive all or a portion of the distribution list <b>254</b> indicating that the data object <b>302</b> is stored by the related client <b>104</b>-<b>1</b>. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select the related client <b>104</b>-<b>1</b> from the distribution list <b>254</b> in accordance with one or more distribution rules. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may also select the related client <b>104</b>-<b>1</b> from the distribution list <b>254</b> based on presence information for the related client <b>104</b>-<b>1</b> as provided by the presence feature <b>214</b>-<b>4</b> of the message platform <b>212</b>-<b>3</b>. Once selected, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may send a request to retrieve the data object <b>302</b> associated with the unique object name to the related client <b>104</b>-<b>1</b> over connection <b>402</b>.</p>
<p id="p-0059" num="0058">The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> implemented by the related client <b>104</b>-<b>1</b> may receive the data object request, and issue a control directive to the object store <b>216</b> to retrieve the data object <b>302</b> from the file system <b>224</b> or the cache <b>226</b>. The object store <b>216</b> may search the file system <b>224</b> for the data object <b>302</b> using the unique name identifier for the data object <b>302</b>. Additionally or alternatively, the object store <b>216</b> may interoperate with the object cache manager <b>218</b> to search the cache <b>226</b> for the data object <b>302</b> using the unique name identifier for the data object <b>302</b>. If there is a search hit, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may retrieve and send the data object <b>302</b> to the related client <b>104</b>-<b>2</b> on behalf of the publishing client <b>102</b> via connection <b>402</b>. The related client <b>104</b>-<b>1</b> may send the data object <b>302</b> for the publishing client <b>102</b> to the related client <b>104</b>-<b>2</b> using one or more transports <b>219</b> over connection <b>402</b> via a network connection (e.g., the network <b>230</b>), a message connection (e.g., the message server <b>240</b>), a direct connection, an indirect connection, a peer-to-peer connection, or any other transports consistent with the embodiments.</p>
<p id="p-0060" num="0059">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may authenticate that the related client <b>104</b>-<b>2</b> has a defined relationship with the publishing client <b>102</b> prior to sharing a data object of the publishing client <b>102</b> with the related client <b>104</b>-<b>2</b>. This may be accomplished in a number of different ways. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may query the server <b>110</b> to authenticate that the related client <b>104</b>-<b>2</b> has a dyadic relationship with the publishing client <b>102</b>. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may receive security information to authenticate that the related client <b>104</b>-<b>2</b> has a dyadic relationship with the publishing client <b>102</b>. The security information may comprise cryptographic information, such as a security certificate or authorization token from the publishing client <b>102</b> and/or the web service <b>252</b>. The embodiments are not limited in this context.</p>
<p id="p-0061" num="0060">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may authenticate that the related client <b>104</b>-<b>2</b> has a defined relationship with the related client <b>104</b>-<b>1</b> prior to sharing a data object of the publishing client <b>102</b> with the related client <b>104</b>-<b>2</b>. This may be accomplished in a number of different ways. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may query the server <b>110</b> to authenticate that the related client <b>104</b>-<b>2</b> has a dyadic relationship with the related client <b>104</b>-<b>1</b>. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may receive security information to authenticate that the related client <b>104</b>-<b>2</b> has a dyadic relationship with the related client <b>104</b>-<b>1</b>. The security information may comprise cryptographic information, such as a security certificate or authorization token from the web service <b>252</b>. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>2</b> may check local resources and information stored by the message platform <b>212</b>-<b>2</b> indicating that the related client <b>104</b>-<b>2</b> is a friend of the related client <b>104</b>-<b>1</b>. The embodiments are not limited in this context.</p>
<p id="p-0062" num="0061">The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> implemented by the related client <b>104</b>-<b>2</b> may receive the data object <b>302</b> from the related client <b>104</b>-<b>1</b> over connection <b>402</b>. The object store <b>216</b> or the object cache manager <b>218</b> of the message platform <b>212</b>-<b>3</b> may store the data object <b>302</b> in its own storage media. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may send a notification that the data object <b>302</b> is stored by the related client <b>104</b>-<b>2</b> to the web service <b>252</b> for addition to the distribution list <b>254</b>. This may also be accomplished using the presence feature <b>214</b>-<b>4</b> of the message platform <b>212</b>-<b>3</b>.</p>
<p id="p-0063" num="0062">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may receive the distribution list <b>254</b>. The file share feature <b>214</b>-<b>3</b> may receive the distribution list <b>254</b> from various entities of systems <b>100</b>, <b>200</b>, including the publishing client <b>102</b>, the web service <b>252</b>, the first related client <b>104</b>-<b>1</b>, and so forth. The distribution list <b>254</b> may comprise a list of related clients <b>104</b>-<b>1</b>-<i>a </i>actually storing the data object <b>302</b> on behalf of the publishing client <b>102</b>, or potentially storing the data object <b>302</b> on behalf of the publishing client <b>102</b>. For instance, the distribution list <b>254</b> may indicate that the related client <b>104</b>-<b>1</b> stores the data object <b>302</b>.</p>
<p id="p-0064" num="0063">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may generate the distribution list <b>254</b>. The distribution list <b>254</b> may also be generated by any of the devices shown in the operating environment <b>300</b>, including the publishing client <b>102</b> and the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b>. This may be desirable when the web service <b>252</b> is offline, or to reduce communication overhead associated with maintaining and communicating the distribution list <b>254</b>, for example. In one embodiment, the file share feature <b>214</b>-<b>3</b> may generate the distribution list <b>254</b> from information received from various entities in the operating environment <b>300</b>, such as the web service <b>252</b>. For example, the file share feature <b>214</b>-<b>3</b> may generate the distribution list <b>254</b> using a list of mutual friends of the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b>, which would result in <b>104</b>-<b>1</b> (and <b>104</b>-<b>3</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>). In another example, the file share feature <b>214</b>-<b>3</b> may generate the distribution list <b>254</b> using a list of second degree relationships of the related client <b>104</b>-<b>2</b>, which would result in <b>104</b>-<b>4</b> (as shown in <figref idref="DRAWINGS">FIG. 1</figref>). In one embodiment, the file share feature <b>214</b>-<b>3</b> may generate the distribution list <b>254</b> from information received with the unique object name for the data object <b>302</b>. For instance, the notification technique used to notify, publish or otherwise distribute the unique object name may also provide a list of other clients receiving similar notification. If the publication technique is an email message, for example, the list of other clients receiving similar notification may comprise a list of email addresses on a &#x201c;cc:&#x201d; line of the email message. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may collect such information and generate a list of candidate clients for the distribution list <b>254</b>. The file share feature <b>214</b>-<b>3</b> may also call (and can cache) a web service to generate the distribution list <b>254</b>, such as by querying information from the web service <b>252</b>.</p>
<p id="p-0065" num="0064">In some cases, the file share feature <b>214</b>-<b>3</b> may apply one or more filters to narrow the list of candidate clients. The file share feature <b>214</b>-<b>3</b> may perform various post-processing filtering and sorting operations to prioritize related clients on the distribution list <b>254</b> before attempting to retrieve the data object <b>302</b>. Examples of suitable filters, in no particular order, may include without limitation whether a friend is online or offline, whether a friend supports distributed caching techniques, type of connections available (e.g., direct or indirect), connection bandwidth, connection latency, previous success using a connection, batch object requests, previous hits for a particular data object, mutual friends of the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b>, filtering based on friends of just the publishing client <b>102</b>, filtering based on online mutual friends or friends of the publishing client <b>102</b>, and so forth. The file share feature <b>214</b>-<b>3</b> may apply one or more filters to the related clients on the distribution list <b>254</b> to prioritize or rank the related clients to facilitate selection and retrieval of the data object <b>302</b>. The file share feature <b>214</b>-<b>3</b> may also improve filtering operations over time based on success rates in retrieving data objects.</p>
<p id="p-0066" num="0065">The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select the related client <b>104</b>-<b>1</b> from the distribution list <b>254</b> in accordance with one or more distribution rules. The file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> implemented by the related client <b>104</b>-<b>2</b> may have logic implementing one or more distribution rules as described in detail with reference to <figref idref="DRAWINGS">FIG. 1</figref>. In cases where the distribution list <b>254</b> indicates that multiple related clients <b>104</b>-<b>1</b>-<i>a </i>currently store the data object <b>302</b>, or potentially store the data object <b>302</b>, the related client <b>104</b>-<b>2</b> may implement a selection algorithm based on any of the distribution rules (or filtering rules) as previously discussed to select from among the related clients <b>104</b>-<b>1</b>-<i>a </i>on the distribution list <b>254</b>. For instance, a distribution rule may indicate the related client <b>104</b>-<b>2</b> should attempt to select a mutual friend of the publishing client <b>102</b> and the related client <b>104</b>-<b>2</b>. In another example, a distribution rule may indicate the related client <b>104</b>-<b>2</b> should attempt to randomly select a friend of the publishing client <b>102</b>. In yet another example, a distribution rule may indicate the related client <b>104</b>-<b>2</b> should attempt to select a friend of the publishing client <b>102</b> in a same order as presented after one or more filtering or sorting operations are applied. Other distribution rules may be designed for a given implementation, and the embodiments are not limited in this context.</p>
<p id="p-0067" num="0066">In cases where the distribution list <b>254</b> indicates that there are no related clients <b>104</b>-<b>1</b>-<i>a </i>currently storing the data object <b>302</b>, or if there are not related client <b>104</b>-<b>1</b>-<i>a </i>currently storing the data object <b>302</b> that are online, or if after some number of fetch attempts or period of time (timeout), the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may attempt to retrieve the data object <b>302</b> from the web service <b>252</b> over connection <b>406</b> as a default distribution rule. This may be accomplished using the unique name identifier and location information (e.g., a URL pointing to the data object <b>302</b> stored by the web service <b>252</b>). Additionally or alternatively, the distribution rules may be implemented by the web service <b>252</b> since it has more knowledge of resources for the systems <b>100</b>, <b>200</b>, and can make a more intelligent selection of a given related client <b>104</b>-<b>1</b>-<i>a </i>on the distribution list <b>254</b>. In this case, the web service <b>252</b> may send information for the selected related client <b>104</b>-<b>1</b>-<i>a </i>rather than the entire distribution list <b>254</b>.</p>
<p id="p-0068" num="0067">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select and contact a series of related clients (e.g., <b>104</b>-<b>1</b>, <b>104</b>-<b>3</b>, <b>104</b>-<b>4</b> . . . <b>104</b>-<i>a</i>) from the distribution list <b>254</b> in a sequential manner until the data object <b>302</b> is successfully found and retrieved (or received). For instance, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select and contact the related client <b>104</b>-<b>1</b> from the distribution list <b>254</b> in accordance with one or more distribution rules, and if there is a miss, select and contact another related client (e.g., <b>104</b>-<b>3</b>, <b>104</b>-<b>4</b> . . . <b>104</b>-<i>a</i>) until the data object <b>302</b> is successfully located and retrieved by the related client <b>104</b>-<b>2</b>.</p>
<p id="p-0069" num="0068">In various embodiments, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select and contact multiple related clients (e.g., <b>104</b>-<b>1</b>, <b>104</b>-<b>3</b>, <b>104</b>-<b>4</b> . . . <b>104</b>-<i>a</i>) from the distribution list <b>254</b> in a parallel manner until the data object <b>302</b> is successfully found and retrieved. In one embodiment, the file share feature <b>214</b>-<b>3</b> of the message platform <b>212</b>-<b>3</b> may select and contact multiple related clients (e.g., <b>104</b>-<b>1</b>, <b>104</b>-<b>3</b>, <b>104</b>-<b>4</b> . . . <b>104</b>-<i>a</i>) from the distribution list <b>254</b> in accordance with one or more distribution rules, and if there is a hit, cancel any unfulfilled requests.</p>
<p id="p-0070" num="0069">Operations for the above-described embodiments may be further described with reference to one or more logic flows. It may be appreciated that the representative logic flows do not necessarily have to be executed in the order presented, or in any particular order, unless otherwise indicated. Moreover, various activities described with respect to the logic flows can be executed in serial or parallel fashion. The logic flows may be implemented using one or more hardware elements and/or software elements of the described embodiments or alternative elements as desired for a given set of design and performance constraints. For example, the logic flows may be implemented as logic (e.g., computer program instructions) for execution by a logic device (e.g., a general-purpose or specific-purpose computer).</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 5</figref> illustrates one embodiment of a logic flow <b>500</b>. The logic flow <b>500</b> may be representative of some or all of the operations executed by one or more embodiments described herein. In one embodiment, the logic flow <b>500</b> may be representative of some or all of the operations executed by a related client <b>104</b>-<b>1</b>-<i>a</i>, such as the related client <b>104</b>-<b>1</b> sending shared binary content, for example.</p>
<p id="p-0072" num="0071">In the illustrated embodiment shown in <figref idref="DRAWINGS">FIG. 5</figref>, the logic flow <b>500</b> receives a data object for a publishing client by a first related client having a defined relationship with the publishing client at block <b>502</b>. For example, the related client <b>104</b>-<b>1</b> may receive the data object <b>302</b> for the publishing client <b>102</b> from the publishing client <b>102</b> or the web service <b>252</b> of the server <b>110</b> over respective connections <b>310</b>, <b>314</b> via a network connection (e.g., the network <b>230</b>), a message connection (e.g., the message server <b>240</b>), a peer-to-peer connection, a combination of all three, or any other transports consistent with the embodiments. The related client <b>104</b>-<b>1</b> may have a defined relationship with the publishing client <b>102</b>. The related client <b>104</b>-<b>1</b> and the publishing client <b>102</b> may be friends, for example, in a SNS implemented by the web service <b>252</b> of the server <b>110</b>.</p>
<p id="p-0073" num="0072">The logic flow <b>500</b> may store the data object of the publishing client by the first related client at block <b>504</b>. For example, the related client <b>104</b>-<b>1</b> may store the data object <b>302</b> of the publishing client <b>102</b> in the file system <b>224</b> or the cache <b>226</b> under direction of the object store <b>216</b> or object cache manager <b>218</b>.</p>
<p id="p-0074" num="0073">The logic flow <b>500</b> may receive a request for the data object from a second related client having a defined relationship with the publishing client at block <b>506</b>. For example, the related client <b>104</b>-<b>1</b> may receive a request for the data object from the related client <b>104</b>-<b>2</b> having a defined relationship with the publishing client <b>102</b>. Similar to the related client <b>104</b>-<b>1</b> and the publishing client <b>102</b>, the related client <b>104</b>-<b>2</b> and the publishing client <b>102</b> may also be friends, for example, in a SNS implemented by the web service <b>252</b> of the server <b>110</b>. The related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> may optionally be friends as desired for a given tradeoff between security and availability.</p>
<p id="p-0075" num="0074">The logic flow <b>500</b> may send the data object from the first related client to the second related client at block <b>508</b>. For example, the related client <b>104</b>-<b>1</b> may send the data object to the related client <b>104</b>-<b>2</b> over connection <b>402</b>. This may be in response to a request received from the related client <b>104</b>-<b>2</b>. The related client <b>104</b>-<b>1</b> may send the data object <b>302</b> for the publishing client <b>102</b> to the related client <b>104</b>-<b>2</b> over connection <b>402</b> via a network connection (e.g., the network <b>230</b>), a message connection (e.g., the message server <b>240</b>), a peer-to-peer connection, a combination of all three, or any other transports consistent with the embodiments.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 6</figref> illustrates one embodiment of a logic flow <b>600</b>. The logic flow <b>600</b> may be representative of some or all of the operations executed by one or more embodiments described herein. In one embodiment, the logic flow <b>600</b> may be representative of some or all of the operations executed by a related client <b>104</b>-<b>1</b>-<i>a</i>, such as the related client <b>104</b>-<b>2</b> receiving shared binary content, for example.</p>
<p id="p-0077" num="0076">In the illustrated embodiment shown in <figref idref="DRAWINGS">FIG. 6</figref>, the logic flow <b>600</b> may receive a unique object name for a data object of a publishing client stored by a first related client by a second related client, the first and second related clients having a defined relationship with the publishing client at block <b>602</b>. For example, the related client <b>104</b>-<b>2</b> may receive a unique object name for the data object <b>302</b> of the publishing client <b>102</b> stored by the related client <b>104</b>-<b>1</b>. The related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> may each have a defined relationship with the publishing client <b>102</b>. For example, the related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> may each be friends with the publishing client <b>102</b> in a SNS implemented by the web service <b>252</b> of the server <b>110</b>. The related clients <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b> may optionally be friends as desired for a given tradeoff between security and availability.</p>
<p id="p-0078" num="0077">The logic flow <b>600</b> may send a request to retrieve the data object associated with the unique object name to the first related client at block <b>604</b>. For example, the related client <b>104</b>-<b>2</b> may send a request to retrieve the data object <b>302</b> associated with the unique object name to the related client <b>104</b>-<b>1</b>. The related client <b>104</b>-<b>1</b> may receive the request, retrieve the data object <b>302</b> from the file system <b>224</b> or the cache <b>226</b> using the unique object name, and send the data object <b>302</b> to the related client <b>104</b>-<b>2</b> over connection <b>402</b>. The related client <b>104</b>-<b>1</b> may optionally authenticate that the related client <b>104</b>-<b>2</b> has a defined relationship with the publishing client <b>102</b>, and possibly the related client <b>104</b>-<b>1</b>, prior to sending the data object <b>302</b> to the related client <b>104</b>-<b>2</b>. The authentication operations may be accomplished using local or remote resources.</p>
<p id="p-0079" num="0078">The logic flow <b>600</b> may receive the data object from the first related client by the second related client at block <b>606</b>. For example, the related client <b>104</b>-<b>2</b> may receive the data object <b>302</b> from the related client <b>104</b>-<b>1</b> over connection <b>402</b>. The related client <b>104</b>-<b>2</b> may receive the data object <b>302</b> for the publishing client <b>102</b> from the related client <b>104</b>-<b>1</b> over connection <b>402</b> via a network connection (e.g., the network <b>230</b>), a message connection (e.g., the message server <b>240</b>), a peer-to-peer connection, a combination of all three, or any other transports consistent with the embodiments.</p>
<p id="p-0080" num="0079">As previously described, in some embodiments the related client <b>104</b>-<b>2</b> may also receive or generate the distribution list <b>254</b> indicating that the data object <b>302</b> is stored by the first related client <b>104</b>-<b>1</b>. In one embodiment, the related client <b>104</b>-<b>2</b> may select the related client <b>104</b>-<b>1</b> from among others listed in the distribution list <b>254</b> in accordance with presence information and one or more distribution rules.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an embodiment of an exemplary computing architecture <b>700</b> suitable for implementing various embodiments as previously described. The computing architecture <b>700</b> includes various common computing elements, such as one or more processors, co-processors, memory units, chipsets, controllers, peripherals, interfaces, oscillators, timing devices, video cards, audio cards, multimedia input/output (I/O) components, and so forth. The embodiments, however, are not limited to implementation by the computing architecture <b>700</b>.</p>
<p id="p-0082" num="0081">As shown in <figref idref="DRAWINGS">FIG. 7</figref>, the computing architecture <b>700</b> comprises a processing unit <b>704</b>, a system memory <b>706</b> and a system bus <b>708</b>. The processing unit <b>704</b> can be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit <b>704</b>. The system bus <b>708</b> provides an interface for system components including, but not limited to, the system memory <b>706</b> to the processing unit <b>704</b>. The system bus <b>708</b> can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures.</p>
<p id="p-0083" num="0082">The system memory <b>706</b> may include various types of memory units, such as read-only memory (ROM), random-access memory (RAM), dynamic RAM (DRAM), Double-Data-Rate DRAM (DDRAM), synchronous DRAM (SDRAM), static RAM (SRAM), programmable ROM (PROM), erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM), flash memory, polymer memory such as ferroelectric polymer memory, ovonic memory, phase change or ferroelectric memory, silicon-oxide-nitride-oxide-silicon (SONOS) memory, magnetic or optical cards, or any other type of media suitable for storing information. In the illustrated embodiment shown in <figref idref="DRAWINGS">FIG. 7</figref>, the system memory <b>706</b> can include non-volatile memory <b>710</b> and/or volatile memory <b>712</b>. A basic input/output system (BIOS) can be stored in the non-volatile memory <b>710</b>.</p>
<p id="p-0084" num="0083">The computer <b>702</b> may include various types of computer-readable storage media, including an internal hard disk drive (HDD) <b>714</b>, a magnetic floppy disk drive (FDD) <b>716</b> to read from or write to a removable magnetic disk <b>718</b>, and an optical disk drive <b>720</b> to read from or write to a removable optical disk <b>722</b> (e.g., a CD-ROM or DVD). The HDD <b>714</b>, FDD <b>716</b> and optical disk drive <b>720</b> can be connected to the system bus <b>708</b> by a HDD interface <b>724</b>, an FDD interface <b>726</b> and an optical drive interface <b>728</b>, respectively. The HDD interface <b>724</b> for external drive implementations can include at least one or both of Universal Serial Bus (USB) and IEEE <b>1394</b> interface technologies.</p>
<p id="p-0085" num="0084">The drives and associated computer-readable media provide volatile and/or nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For example, a number of program modules can be stored in the drives and memory units <b>710</b>, <b>712</b>, including an operating system <b>730</b>, one or more application programs <b>732</b>, other program modules <b>734</b>, and program data <b>736</b>. The one or more application programs <b>732</b>, other program modules <b>734</b>, and program data <b>736</b> can include various elements implemented by the systems <b>100</b>, <b>200</b>, such as the message platforms <b>212</b>-<b>1</b>-<i>d</i>, the web service <b>252</b>, and so forth.</p>
<p id="p-0086" num="0085">A user can enter commands and information into the computer <b>702</b> through one or more wire/wireless input devices, for example, a keyboard <b>738</b> and a pointing device, such as a mouse <b>740</b>. Other input devices may include a microphone, an infra-red (IR) remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit <b>704</b> through an input device interface <b>742</b> that is coupled to the system bus <b>708</b>, but can be connected by other interfaces such as a parallel port, IEEE 1394 serial port, a game port, a USB port, an IR interface, and so forth.</p>
<p id="p-0087" num="0086">A monitor <b>744</b> or other type of display device is also connected to the system bus <b>708</b> via an interface, such as a video adaptor <b>746</b>. In addition to the monitor <b>744</b>, a computer typically includes other peripheral output devices, such as speakers, printers, and so forth.</p>
<p id="p-0088" num="0087">The computer <b>702</b> may operate in a networked environment using logical connections via wire and/or wireless communications to one or more remote computers, such as a remote computer <b>748</b>. The remote computer <b>748</b> can be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer <b>702</b>, although, for purposes of brevity, only a memory/storage device <b>750</b> is illustrated. The logical connections depicted include wire/wireless connectivity to a local area network (LAN) <b>752</b> and/or larger networks, for example, a wide area network (WAN) <b>754</b>. Such LAN and WAN networking environments are commonplace in offices and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communications network, for example, the Internet.</p>
<p id="p-0089" num="0088">When used in a LAN networking environment, the computer <b>702</b> is connected to the LAN <b>752</b> through a wire and/or wireless communication network interface or adaptor <b>756</b>. The adaptor <b>756</b> can facilitate wire and/or wireless communications to the LAN <b>752</b>, which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor <b>756</b>.</p>
<p id="p-0090" num="0089">When used in a WAN networking environment, the computer <b>702</b> can include a modem <b>758</b>, or is connected to a communications server on the WAN <b>754</b>, or has other means for establishing communications over the WAN <b>754</b>, such as by way of the Internet. The modem <b>758</b>, which can be internal or external and a wire and/or wireless device, connects to the system bus <b>708</b> via the input device interface <b>742</b>. In a networked environment, program modules depicted relative to the computer <b>702</b>, or portions thereof, can be stored in the remote memory/storage device <b>750</b>. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.</p>
<p id="p-0091" num="0090">The computer <b>702</b> is operable to communicate with wire and wireless devices or entities using the IEEE <b>802</b> family of standards, such as wireless devices operatively disposed in wireless communication (e.g., IEEE 802.11 over-the-air modulation techniques) with, for example, a printer, scanner, desktop and/or portable computer, personal digital assistant (PDA), communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi (or Wireless Fidelity), WiMax, and Bluetooth&#x2122; wireless technologies. Thus, the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi-Fi networks use radio technologies called IEEE 802.11x (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wire networks (which use IEEE 802.3-related media and functions).</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a block diagram of an exemplary communications architecture <b>800</b> suitable for implementing various embodiments as previously described. The communications architecture <b>800</b> includes various common communications elements, such as a transmitter, receiver, transceiver, radio, network interface, baseband processor, antenna, amplifiers, filters, and so forth. The embodiments, however, are not limited to implementation by the communications architecture <b>800</b>.</p>
<p id="p-0093" num="0092">As shown in <figref idref="DRAWINGS">FIG. 8</figref>, the communications architecture <b>800</b> comprises includes one or more clients <b>802</b> and servers <b>804</b>. The clients <b>802</b> may implement the publishing client <b>102</b> and/or the related clients <b>104</b>-<b>1</b>-<i>a</i>. The servers <b>804</b> may implement the server <b>110</b> and/or the message server <b>240</b>. The clients <b>802</b> and the servers <b>804</b> are operatively connected to one or more respective client data stores <b>808</b> and server data stores <b>810</b> that can be employed to store information local to the respective clients <b>802</b> and servers <b>804</b>, such as cookies and/or associated contextual information.</p>
<p id="p-0094" num="0093">The clients <b>802</b> and the servers <b>804</b> may communicate information between each other using a communication framework <b>806</b>. The communications framework <b>806</b> may implement any well-known communications techniques, such as techniques suitable for use with packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). The clients <b>802</b> and the servers <b>804</b> may include various types of standard communication elements designed to be interoperable with the communications framework <b>806</b>, such as one or more communications interfaces, network interfaces, network interface cards (NIC), radios, wireless transmitters/receivers (transceivers), wired and/or wireless communication media, physical connectors, and so forth. By way of example, and not limitation, communication media includes wired communications media and wireless communications media. Examples of wired communications media may include a wire, cable, metal leads, printed circuit boards (PCB), backplanes, switch fabrics, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, a propagated signal, and so forth. Examples of wireless communications media may include acoustic, radio-frequency (RF) spectrum, infrared and other wireless media. One possible communication between a client <b>802</b> and a server <b>804</b> can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and/or associated contextual information, for example.</p>
<p id="p-0095" num="0094">Various embodiments may be implemented using hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, components, processors, microprocessors, circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), memory units, logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. Determining whether an embodiment is implemented using hardware elements and/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.</p>
<p id="p-0096" num="0095">Some embodiments may comprise an article of manufacture. An article of manufacture may comprise a storage medium to store logic. Examples of a storage medium may include one or more types of computer-readable storage media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of the logic may include various software elements, such as software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. In one embodiment, for example, an article of manufacture may store executable computer program instructions that, when executed by a computer, cause the computer to perform methods and/or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, and the like. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and/or interpreted programming language.</p>
<p id="p-0097" num="0096">Some embodiments may be described using the expression &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification are not necessarily all referring to the same embodiment.</p>
<p id="p-0098" num="0097">Some embodiments may be described using the expression &#x201c;coupled&#x201d; and &#x201c;connected&#x201d; along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example, some embodiments may be described using the terms &#x201c;connected&#x201d; and/or &#x201c;coupled&#x201d; to indicate that two or more elements are in direct physical or electrical contact with each other. The term &#x201c;coupled,&#x201d; however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.</p>
<p id="p-0099" num="0098">It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment. In the appended claims, the terms &#x201c;including&#x201d; and &#x201c;in which&#x201d; are used as the plain-English equivalents of the respective terms &#x201c;comprising&#x201d; and &#x201c;wherein,&#x201d; respectively. Moreover, the terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; and so forth, are used merely as labels, and are not intended to impose numerical requirements on their objects.</p>
<p id="p-0100" num="0099">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method, comprising:
<claim-text>authenticating that a first related client has a dyadic relationship with a publishing client, wherein the first related client is a separate device from the publishing client;</claim-text>
<claim-text>receiving a data object from the publishing client at the first related client based on the authentication of the dyadic relationship with the publishing client, wherein the data object is also stored to an online storage of a web service by the publishing client;</claim-text>
<claim-text>storing the data object of the publishing client at the first related client;</claim-text>
<claim-text>receiving a request at the first related client for the data object from a second related client having a dyadic relationship with the publishing client, wherein the second related client is a separate device from the publishing client and from the first related client; and</claim-text>
<claim-text>sending the data object from the first related client to the second related client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising storing the data object at the first related client using a unique object name received with the data object.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising receiving the data object for the publishing client by the first related client over a direct or indirect connection between the publishing client and the first related client.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising receiving the data object for the publishing client by the first related client from a network storage server.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein authenticating that the first related client has a dyadic relationship with the publishing client comprises authenticating that the first related client has a social-networking relationship with the publishing client in a social-networking system.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising authenticating that the second related client has a dyadic relationship with the publishing client.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising querying a server to authenticate that the second related client has a dyadic relationship with the publishing client.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising receiving security information by the first related client to authenticate that the second related client has a dyadic relationship with the publishing client.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising authenticating that the first related client has a defined relationship with the second related client.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising sending the data object from the first related client to the second related client over a direct or indirect connection.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An article comprising a storage device containing instructions that when executed enable a system to:
<claim-text>authenticate that a second related client has a dyadic relationship with a publishing client, wherein the second related client is a separate device from the publishing client;</claim-text>
<claim-text>receive a unique object name for a data object of the publishing client, the data object stored at a first related client, at the second related client based on the authentication of the dyadic relationship with the publishing client, the first related client having a dyadic relationship with the publishing client, wherein the data object is also stored to an online storage of a web service by the publishing client, wherein the first related client is a separate device from the publishing client and from the second related client;</claim-text>
<claim-text>send a request from the second related client to retrieve the data object associated with the unique object name to the first related client; and</claim-text>
<claim-text>receive the data object from the first related client at the second related client.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising instructions that when executed enable the system to send security information to the first related client to authenticate that the second related client has a defined relationship with the publishing client.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising instructions that when executed enable the system to receive a distribution list indicating that the data object is stored by one or more related clients including the first related client.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising instructions that when executed enable the system to generate a distribution list indicating that the data object may be stored by one or more related clients including the first related client.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The article of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising instructions that when executed enable the system to select the first related client from a distribution list using one or more distribution rules.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An apparatus, comprising:
<claim-text>a first related client having a message platform with a file share feature and an object store, the file share feature operative to authenticate that the first related client has a dyadic relationship with a publishing client, retrieve a data object for the publishing client based on the authentication of the dyadic relationship with the publishing client, wherein the first related client is a separate device from the publishing client, wherein the data object is also stored to an online storage of a web service by the publishing client, the publishing client having a dyadic relationship with a second related client, wherein the second related client is a separate device from the publishing client and from the first related client, the first related client to send the data object to the second related client on behalf of the publishing client, and the object store operative to store and manage the data object using a unique name identifier received with the data object.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, the file share feature operative to authenticate that the second related client has a defined relationship with the publishing client.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, the file share feature operative to authenticate that the second related client has a defined relationship with the first related client.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising a file system operative to store the data object using the unique name identifier.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00016">claim 16</claim-ref>, comprising a cache operative to store the data object using the unique name identifier. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08623672-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08623672</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13028004</doc-number>
<date>20110215</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>334</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>19</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>438 14</main-classification>
<further-classification>700121</further-classification>
</classification-national>
<invention-title id="d2e53">Prediction and scheduling server</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5311562</doc-number>
<kind>A</kind>
<name>Palusamy et al.</name>
<date>19940500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>376215</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6434440</doc-number>
<kind>B1</kind>
<name>Teranishi et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 97</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6556884</doc-number>
<kind>B1</kind>
<name>Miller et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6609101</doc-number>
<kind>B1</kind>
<name>Landvater</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6876894</doc-number>
<kind>B1</kind>
<name>Chen et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7020594</doc-number>
<kind>B1</kind>
<name>Chacon</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7144297</doc-number>
<kind>B2</kind>
<name>Lin et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7181305</doc-number>
<kind>B2</kind>
<name>Chao et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7233834</doc-number>
<kind>B2</kind>
<name>McDoonald et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7552066</doc-number>
<kind>B1</kind>
<name>Landvater</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7894926</doc-number>
<kind>B2</kind>
<name>Lacaille</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7908127</doc-number>
<kind>B2</kind>
<name>Weigang et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0082893</doc-number>
<kind>A1</kind>
<name>Barts et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0184355</doc-number>
<kind>A1</kind>
<name>Deats</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2003/0144897</doc-number>
<kind>A1</kind>
<name>Burruss et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2003/0171851</doc-number>
<kind>A1</kind>
<name>Brickfield et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2004/0015381</doc-number>
<kind>A1</kind>
<name>Johnson et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2004/0039597</doc-number>
<kind>A1</kind>
<name>Barts et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2004/0054554</doc-number>
<kind>A1</kind>
<name>Barts et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2004/0073448</doc-number>
<kind>A1</kind>
<name>Barts et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2004/0107111</doc-number>
<kind>A1</kind>
<name>Barts et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2004/0210426</doc-number>
<kind>A1</kind>
<name>Wood</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2004/0267395</doc-number>
<kind>A1</kind>
<name>Discenzo et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2005/0015491</doc-number>
<kind>A1</kind>
<name>Koeppel</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2005/0038571</doc-number>
<kind>A1</kind>
<name>Brickfield et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2005/0286764</doc-number>
<kind>A1</kind>
<name>Mittal et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2006/0026175</doc-number>
<kind>A1</kind>
<name>Aggarwal</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2006/0189009</doc-number>
<kind>A1</kind>
<name>Ahn et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2007/0288414</doc-number>
<kind>A1</kind>
<name>Barajas et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2007/0294617</doc-number>
<kind>A1</kind>
<name>Kroeger</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2008/0086358</doc-number>
<kind>A1</kind>
<name>Doshi et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2008/0275586</doc-number>
<kind>A1</kind>
<name>Ko et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2009/0037013</doc-number>
<kind>A1</kind>
<name>Hendler et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2009/0106178</doc-number>
<kind>A1</kind>
<name>Chu</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2009/0118842</doc-number>
<kind>A1</kind>
<name>Norman et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 44</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2009/0119144</doc-number>
<kind>A1</kind>
<name>Goyal et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2009/0119669</doc-number>
<kind>A1</kind>
<name>Norman et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2009/0228129</doc-number>
<kind>A1</kind>
<name>Moyne et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2009/0327037</doc-number>
<kind>A1</kind>
<name>Ng et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2010/0138264</doc-number>
<kind>A1</kind>
<name>Faris et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2010/0306031</doc-number>
<kind>A1</kind>
<name>McCauley et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>KR</country>
<doc-number>2001-0008679</doc-number>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>International Search Report for PCT/US2011/025059 (P078PCT) mailed Sep. 30, 2011, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>&#x201c;Innovations that Drive Efficiency and Extendibility&#x201d;, Nanochip Fab Solutions, Applied Materials, Inc., vol. 4, Issue 21(2009), 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Written Opinion for PCT/US2011/025059 (P078PCT) mailed Sep. 30, 2011, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>International Preliminary Report on Patentability for PCT/US2011/025059.(P078PCT) mailed Aug. 30, 2012, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>438 14</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700121</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700 97</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61306417</doc-number>
<date>20100219</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110208337</doc-number>
<kind>A1</kind>
<date>20110825</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Norman</last-name>
<first-name>David Everton</first-name>
<address>
<city>Bountiful</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Howells</last-name>
<first-name>Alan George</first-name>
<address>
<city>Wokingham</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ahn</last-name>
<first-name>Tae Young</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Norman</last-name>
<first-name>David Everton</first-name>
<address>
<city>Bountiful</city>
<state>UT</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Howells</last-name>
<first-name>Alan George</first-name>
<address>
<city>Wokingham</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Ahn</last-name>
<first-name>Tae Young</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blakely, Sokoloff, Taylor &#x26; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Applied Materials, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bahta</last-name>
<first-name>Kidest</first-name>
<department>2127</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A server creates a plurality of projects pertaining to providing manufacturing service results. Each of the plurality of projects specifies operations to be performed relating to providing the manufacturing service results and at least one of the plurality of projects generates a requested manufacturing service result. The server initiates the at least one project that generates the requested manufacturing service result, wherein the at least one project is associated with an execution engine. The initiation of the at least one project may include sending input data to the execution engine based on configuration data that is associated with the execution engine, and obtaining the requested manufacturing service result from the execution engine. The server provides the requested manufacturing server result to at least one recipient.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="104.73mm" wi="145.54mm" file="US08623672-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="158.75mm" wi="155.11mm" orientation="landscape" file="US08623672-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="158.75mm" wi="118.36mm" orientation="landscape" file="US08623672-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="158.75mm" wi="97.87mm" file="US08623672-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="158.75mm" wi="119.97mm" file="US08623672-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="249.94mm" wi="135.89mm" file="US08623672-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="247.40mm" wi="136.48mm" file="US08623672-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="246.72mm" wi="192.28mm" orientation="landscape" file="US08623672-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="133.94mm" wi="131.40mm" file="US08623672-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="250.53mm" wi="189.06mm" orientation="landscape" file="US08623672-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="242.23mm" wi="188.38mm" file="US08623672-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">The present application claims priority to U.S. Provisional Application Ser. No. 61/306,417, filed Feb. 19, 2010, which is incorporated herein in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD</heading>
<p id="p-0003" num="0002">Embodiments of the present invention relate generally to managing a manufacturing facility, and more particularly to managing services, such as prediction services and scheduling services, in a manufacturing facility.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">In an industrial manufacturing environment, accurate control of the manufacturing process is important to increase the efficiency of the factory, e.g., decrease cycle time, increase throughput, and improve equipment utilization. Ineffective process control can lead to the manufacture of products that missed due dates, fail to meet desired yield and quality levels, and can significantly increase costs due to increased raw material usage, labor costs, and the like.</p>
<p id="p-0005" num="0004">When managing a manufacturing facility, complicated decisions need to be made about what operations should be performed and the order of these operations. In order to generate a schedule for a manufacturing facility, significant amounts of data must be collected from one or more software systems in the facility. The data from the systems must be transformed and manipulated from the external system's format into a format suitable for use by the scheduling engine. Current Computer Integrated Manufacturing (CIM) systems perform these transformations and manipulations using one or more programming languages that makes designing these operations difficult and time-consuming and requires specialized programming knowledge.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary network architecture in which embodiments of the invention may operate.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of one embodiment of a prediction and scheduling server.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of one embodiment of a method for providing service results for a manufacturing facility.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of one embodiment of a method for repairing existing service results.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of one embodiment of a method for providing subscription services to subscribers.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of one embodiment of a method for facilitating user-specified configuration of services in an automated manufacturing facility.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates an exemplary project graphical user interface, in accordance with one embodiment of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates an exemplary project graphical user interface, in accordance with one embodiment of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary project GUI that displays a data schema, in accordance with one embodiment of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system, in accordance with one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0017" num="0016">Embodiments of the invention are directed to a method and system for managing services, such as prediction and scheduling services, and facilitating user-specified configuration of the services in a manufacturing facility. A server creates a plurality of projects pertaining to providing manufacturing service results. Each of the plurality of projects specifies operations to be performed relating to providing the manufacturing service results and at least one of the plurality of projects generates a requested manufacturing service result. The server initiates the at least one project that generates the requested manufacturing service result, wherein the at least one project is associated with an execution engine. The initiation of the at least one project may include sending input data to the execution engine based on configuration data that is associated with the execution engine, and obtaining the requested manufacturing service result from the execution engine. The server provides the requested manufacturing server result to at least one recipient. For example, the server can store the manufacturing service results in a data store and external entities can request the stored manufacturing service results. In another example, the server can send the results to one or more recipients as specified by the project properties.</p>
<p id="p-0018" num="0017">Embodiments of the present invention enable a user to configure and manage manufacturing services, such as prediction and scheduling services. A user can use a single management user interface to configure what data is needed to generate a prediction and to produce a schedule, how to manipulate the data to allow an execution engine to process the data, when to generate a prediction and a schedule, and when to provide the predictions and the schedules to a recipient.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary network architecture <b>100</b> in which embodiments of the present invention may operate. The network architecture <b>100</b> may represent a manufacturing facility (e.g., a semiconductor fabrication facility) and may include one or more servers that provide manufacturing service results (e.g., predictions, schedules), such as a prediction and scheduling server <b>101</b>, a set of source systems <b>104</b>, and a set of recipient systems <b>106</b>. A server <b>101</b> can be hosted by any type of computing device including server computers, gateway computers, desktop computers, laptop computers, hand-held computers or similar computing device. An exemplary computing device is described in greater detail below in conjunction with <figref idref="DRAWINGS">FIG. 9</figref>. The prediction and scheduling server <b>101</b> may be hosted by one or more computers with one or more internal or external storage devices.</p>
<p id="p-0020" num="0019">The prediction and scheduling server <b>101</b> may communicate with the source systems <b>104</b> and the recipient systems <b>106</b> via a network (not shown). The network may be a public network (e.g., Internet) or a private network (e.g., local area network (LAN)). Two or more of the facility systems (e.g., source systems <b>104</b>) may exist on the same machine and not communicate over the network, as they may use other communication protocols like shared memory, or operating system assisted facilities.</p>
<p id="p-0021" num="0020">The prediction and scheduling server <b>101</b> can manage data collection, data analysis, and data publishing for providing different manufacturing services, such as prediction services and scheduling services. For example, the server <b>101</b> can build and publish predictions about the future state of a manufacturing facility and its components. The predictions generated by the prediction and scheduling server <b>101</b> may specify, for example, a future state of the equipment in the manufacturing facility, the quantity and composition of the product that will be manufactured in the facility, the state of the operators (e.g., their location, whether they are working or idle), the estimated time a product will finish a given operation and/or be available for processing at a given step, the estimated time a preventative maintenance operation should be performed on equipment, etc. In another example, the prediction and scheduling server <b>101</b> can build and publish a schedule for the manufacturing facility and its components. The schedule generated by the prediction and scheduling server <b>101</b> may specify, for example, what pieces of equipment should be used at specified times, the quantity and composition of the product that should be used by these pieces of equipment at the specified times, what the operators should do, when and where products, tools, and fixtures should be transported, etc.</p>
<p id="p-0022" num="0021">The prediction and scheduling server <b>101</b> can collect data from the source systems <b>104</b> and use the collected data to provide manufacturing service results (e.g., predictions and schedules). Exemplary source systems <b>104</b> can include various systems of the manufacturing facility such as a manufacturing execution system (MES), a maintenance management system (MMS), a material control system (MCS), an equipment control system (ECS), an inventory control system (ICS), a prediction system, a computer integrated manufacturing system (CIM), various databases (including but not limited to flat-file storage systems such as Excel files), etc. The data collected from the source systems <b>104</b> may include static data (e.g., equipment used by a source system, capability of different pieces of the equipment, etc.) and dynamic data (e.g., current equipment state, products being currently processed by equipment of a source system, the product characteristics, etc.).</p>
<p id="p-0023" num="0022">The prediction and scheduling server <b>101</b> can include a service management system <b>103</b> to configure and manage the execution of data collection, data processing, and data publishing for providing the manufacturing service results. In particular, the service management system <b>103</b> allows a user to customize services (e.g., prediction service, scheduling service) for the needs of a specific manufacturing facility. The service management system <b>103</b> can configure and manage services using &#x201c;projects.&#x201d; A project can specify one or more operations to be performed in relation to providing the manufacturing service results. The service management system <b>103</b> can configure and manage one or more projects, each of which represents a phase of generating a manufacturing service result (e.g., prediction, schedule).</p>
<p id="p-0024" num="0023">For example, one or more recipient systems <b>106</b> request a manufacturing schedule for the manufacturing facility and the service management system <b>103</b> can configure and manage one or more projects including data collection projects, a prediction project, and a scheduling project for providing the schedule. The data collection projects can collect data from the source systems <b>104</b> and the prediction project can use the data collected by the data collection projects to generate a prediction of the state of the manufacturing facility. The scheduling project can use the data collected by the data collection projects and the prediction generated by the prediction project to generate the requested manufacturing schedule. The service management system <b>103</b> can provide the requested manufacturing service result (e.g., the manufacturing schedule) to one or more recipient systems <b>106</b>. The recipient systems <b>106</b> may include some or all of the source systems <b>104</b>, as well as some other systems such as a scheduler, a dispatcher, etc.</p>
<p id="p-0025" num="0024">The service management system <b>103</b> can manage multiple service projects. For example, the service management system <b>103</b> can manage multiple scheduling projects and/or multiple prediction projects. For instance, if there are multiple areas in a manufacturing facility, the service management system <b>103</b> can provide a separate schedule for each area. In this example, there would be one scheduling project per area, all of which can share the same prediction data generated from a prediction project. Alternatively, there can be one schedule project and one prediction project per manufacturing facility area.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of one embodiment of a prediction and scheduling server <b>200</b>. The prediction and scheduling server <b>200</b> can be the same as the prediction and scheduling server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>. In one embodiment, the server <b>200</b> includes a service management system <b>201</b> and one or more execution engines (e.g., prediction engine <b>205</b>, schedule engine <b>207</b>). The service management system <b>201</b> can be the same as the service management system <b>103</b> hosted by a server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The server <b>200</b> can be coupled to one or more persistent storage units <b>203</b>. A persistent storage unit <b>203</b> can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit, optical storage unit, solid state storage unit or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A &#x2018;set,&#x2019; as used herein, refers to any positive whole number of items.</p>
<p id="p-0027" num="0026">A project can be a particular type of project. Examples of project types can include, and are not limited to, a shared project and a service project. Examples of a service project can include, and are not limited to, a prediction project, and a scheduling project. A shared project is a project that collects data and provides the data to other projects. Other project types, such as a service project, can receive input data and can perform calculations on the input data to produce result data. For example, a scheduling project can obtain input data, pass the input data to a scheduling engine, which can produce schedule, and receive the schedule data from the scheduling engine.</p>
<p id="p-0028" num="0027">There can be one or more instances of a project type. For example, there can be two project instances of the shared project type, &#x2018;Collect_Infrequently&#x2019; and &#x201c;Collect_Frequently.&#x201d; When Collect_Infrequently is executed, it collects data when certain database records change and the collected data can be shared with other projects. When Collect_Frequently is executed, it collects data every five minutes and the collected data can be shared with other projects.</p>
<p id="p-0029" num="0028">The service management system <b>201</b> can include a project user interface (UI) <b>209</b>, project properties <b>211</b>, a query module <b>213</b>, configuration data <b>215</b>, project results <b>225</b>, a result publisher <b>217</b>, an event listener <b>219</b>, a workflow manager <b>221</b>, and a repair module <b>223</b>. This division of functionality is presented by way of example for sake of clarity. One skilled in the art would understand that the functionality described could be combined into a monolithic component or sub-divided into any combination of components. In one embodiment, the project properties <b>211</b>, the configuration data <b>215</b>, and the project results <b>225</b> are stored in the persistent storage unit <b>203</b>.</p>
<p id="p-0030" num="0029">The service management system <b>201</b> can configure and manage one or more projects, each of which represents a phase of generating a manufacturing service result (e.g., prediction, schedule). The service management system <b>201</b> can provide a UI <b>209</b> to receive user input, such as from as process engineer, facility administrator, etc., to create and configure projects for generating manufacturing service results. The UI <b>209</b> can be a graphical user interface (GUI).</p>
<p id="p-0031" num="0030">The service management system <b>201</b> can receive user input via the UI <b>209</b> that defines one or more properties <b>211</b> for each operation specified in the projects. A project can include project items, such as when a project runs, operations to be performed, where the project obtains its data from, what manufacturing service results to generate, etc. Project items have project properties <b>211</b>. Examples of project properties <b>211</b> can include, and are not limited to, the steps of an operation, the order of the operations for the project, time horizons, sources systems to which data queries are submitted, characteristics of the data queries, and how service results (e.g., predictions, schedules) should be generated (e.g., using simulation, forecasting, statistical prediction, trend analysis, machine learning, or calculations). Project properties <b>211</b> can also include entities for which a service result (e.g., prediction, schedule) should be generated (e.g., equipment, product, operators, resources, etc.), and a trigger for initiating the service process (e.g., an event, a scheduled time or user request). Exemplary UIs are described in greater detail below in conjunction with <figref idref="DRAWINGS">FIGS. 7A and 7B</figref>.</p>
<p id="p-0032" num="0031">The service management system <b>201</b> can receive input from a subscriber of a service (e.g., prediction service, scheduling service) that specifies project properties <b>211</b>, such as subscription preferences. For example, a subscriber may identify entities for which predictions should be generated, a time horizon for generating predictions, conditions for receiving predictions (e.g., generation of new predictions, repair of existing predictions, etc.).</p>
<p id="p-0033" num="0032">The service management system <b>201</b> can provide a template project that can be modified by a user, for example, via the UI <b>209</b>. In particular, a user can delete some operations from the template project, add new operations, or modify some operations or their properties. The resulting project, as defined by the project properties <b>211</b>, can be stored in a repository in the persistent storage unit <b>203</b> and can be retrieved by a user that may want to view or modify the project. The repository can represent any type of data storage, including, for example, relational or hierarchical databases (proprietary or commercial), flat files, application or shared memory, etc. A database may represent any type of data storage including, for example, relational or hierarchical databases, flat files, application or shared memory, etc.</p>
<p id="p-0034" num="0033">A project can include data collection operations. The service management system <b>201</b> can receive input specifying project properties <b>211</b> for data collection, such as parameters for queries to be made to data source systems. The input can be user input received via the UI <b>209</b>. For example, the service management system <b>201</b> may receive input specifying the source systems (e.g., source systems <b>104</b> in <figref idref="DRAWINGS">FIG. 1</figref>) to be queried for data, type of data to be collected, query filter information, etc. The data may be collected using for example, SQL queries, APF reports, workflow jobs, or may be collected from a previously executed project. In one embodiment, the service management system <b>201</b> can receive input for building the query from scratch. In another embodiment, the system <b>201</b> can provide a pre-generated template query and receive input that modifies a template query, for example, user input based on desired source systems and data to be collected from these source systems.</p>
<p id="p-0035" num="0034">The service management system <b>201</b> can include a query module <b>213</b> to submit queries to the various source systems to obtain the data. The resulting queries can be stored in the persistent storage unit <b>203</b> and the service management system <b>201</b> can retrieve the stored queries to allow a user to view or modify the queries.</p>
<p id="p-0036" num="0035">The service management system <b>201</b> can be coupled to one or more execution engines (e.g., prediction engine <b>205</b>, schedule engine <b>207</b>). An execution engine <b>205</b>,<b>207</b> can receive input data, process the input data, and generate an engine result. For example, the prediction engine <b>205</b> can generate a prediction of the state of a manufacturing facility, and the scheduling engine <b>207</b> can generate a manufacturing schedule. An execution engine <b>205</b>,<b>207</b> has associated configuration data <b>215</b> that can define an input schema, output schema, configuration options, and other information needed to execute an engine. The configuration data <b>215</b> allows engines <b>205</b>,<b>207</b> to be changed and upgraded without changing the prediction and scheduling server <b>200</b>. The configuration data <b>215</b> also allows a third party to provide an engine <b>205</b>,<b>207</b>. A third party is a third party to a developer of the service management system <b>201</b> (e.g., customer that purchased the service management system). In one embodiment, an execution engine <b>205</b>,<b>207</b> is a default engine provided by the developer of the service management system <b>201</b>. In another embodiment, an execution engine <b>205</b>,<b>207</b> is third party engine, which may be provided by a third party. The service management system <b>201</b> can use the configuration data <b>215</b> to integrate with a third party engine <b>205</b>,<b>207</b>. The configuration data <b>215</b> may be a configuration file. The configuration data <b>215</b> may be user-defined. For example, a third party may provide an execution engine and a configuration file that defines the input schema and output schema for the data to be processed.</p>
<p id="p-0037" num="0036">Examples of input data for an execution engine <b>205</b>,<b>207</b> can include data that is collected by the query module <b>213</b> and project results <b>225</b> from executing a project. Project results <b>225</b> can include manufacturing service results (e.g., predictions, schedules, etc.). For example, the prediction engine <b>205</b> generates a prediction, and the scheduling engine <b>207</b> can use the prediction as input data to a generate schedule. Before an execution engine <b>205</b>,<b>207</b> can process the input data, the input data may need to satisfy a certain input schema. The input data may have a data schema that differs from the one in the configuration data <b>215</b> for an execution engine <b>205</b>,<b>207</b>. For example, the query module <b>213</b> can collect raw data from a source system, and the source systems have a data schema that differs from the input schema for an execution engine <b>205</b>,<b>207</b>.</p>
<p id="p-0038" num="0037">The query module <b>213</b> can manipulate the input data, such as the query results (data collected from the source systems), according to the input schema in the configuration data <b>215</b> to allow the execution engine <b>205</b>,<b>207</b> to process the data. In one embodiment, the service management system <b>201</b> receives user input that specifies how the transformation is to be performed (e.g., by using an APF report or workflow). The query module <b>213</b> can receive query results from a source system and can transform the query results into a proper data format based on the input schema defined by the configuration data <b>215</b>. Each execution engine can have corresponding configuration data <b>215</b>. For example, the prediction engine <b>205</b> may have corresponding configuration data (not shown) and the scheduling engine <b>207</b> may have corresponding configuration data (not shown).</p>
<p id="p-0039" num="0038">Execution of a project can generate project results <b>225</b>. Examples of project results <b>225</b> can include, and are not limited to, data collected by a data collection project (e.g., query results from querying source systems), a prediction generated by a prediction project, a schedule generated by a scheduling project, etc. A project can run many times and generate many project results <b>225</b>. The project results <b>225</b> can include the manufacturing service results. For example, one or more recipient systems request a manufacturing schedule for the manufacturing facility and a scheduling project generates a manufacturing schedule, which is stored as part of the project results <b>225</b>.</p>
<p id="p-0040" num="0039">The project results <b>225</b>, including the manufacturing service results, can be available to other systems. For example, schedules can be published to external systems, published to external systems when data and/or results have changed, retrieved by systems using, for example, web services. The service management system <b>201</b> can manage when to publish the manufacturing service results and where to publish the manufacturing service results as specified by the project properties <b>211</b>. For example, the service management system <b>201</b> can provide the schedule to a recipient system, such as a dispatcher, each time a new schedule is generated. A result publisher <b>217</b> can obtain the project results <b>225</b> (e.g., predictions, schedules) from the persistent storage unit <b>203</b> and send the project results <b>225</b> to one or more recipient systems (e.g., recipient systems <b>106</b> in <figref idref="DRAWINGS">FIG. 1</figref>). In one embodiment, the result publisher <b>217</b> sends results upon receiving a request from a recipient system. In another embodiment, the result publisher <b>217</b> allows users or systems to subscribe for services (e.g., prediction services, scheduling services), and provides project results to the subscribers periodically or when new results are generated or existing results are modified.</p>
<p id="p-0041" num="0040">A project can be configured to start in various ways. An event listener <b>219</b> can detect a trigger for the execution of a project. One example of a trigger is the completion of another project. For example, a scheduling project can be executed when a prediction project ends. Other examples of triggers to initiate the execution of a project can include, and are not limited to, in response to a predetermined event (e.g., an APF repository event, the completion of another project), a scheduled time, a fixed time interval (e.g., every five minutes), in response to an external signal (e.g., a database trigger), in response to a trigger generated by an external system (e.g., a trigger passed by an external system to the server using HTTP, web services or other methods), and in response to a request from a user. A project can be configured to start using more than one trigger. For example, a user can configure a scheduling project to run every 5 minutes, but the first execution of the scheduling project may be triggered upon the completion of a prediction project. Thus, the scheduling project cannot start until the prediction project is complete.</p>
<p id="p-0042" num="0041">A project can be a full service project or a service repair project. A full service project can generate manufacturing service results. A service repair project can perform incremental updates to the generated service results data in-between providing the full service results. A service repair project can be triggered by detection of a critical event. Examples of critical events can include, and are not limited to, a piece of equipment entering a down-time state, a piece of equipment stopping functioning properly, a lot of wafers being put on hold, etc. A critical event can be a user-defined event. A repair module <b>223</b> can monitor for an occurrence of a critical event and the service management system <b>201</b> can start a service update upon detecting a critical event. A repair module <b>223</b> can receive a notification from a source system indicated occurrence of critical event. The repair module <b>223</b> can repair the existing project results <b>225</b> relating to the critical event as specified by the project properties <b>211</b>. For example, the repair module <b>223</b> may update predictions that are stored in the persistent storage unit <b>203</b> using simple calculations, or alternatively the repair module <b>223</b> may invoke the prediction engine <b>205</b> to generate new predictions. One embodiment of a method for repairing existing manufacturing service results is described in greater detail below in conjunction with <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0043" num="0042">The service management system <b>201</b> can receive input to configure a project to include one or more workflows to trigger upon detecting an occurrence of an event during the execution of the project. The input can be user input received via UI <b>209</b>. An event listener <b>219</b> can monitor for and detect the occurrence of a specified event. Examples of events can include, and are not limited to, an error in executing a project, completion of a project, etc. An event can be a user-defined event. For example, the event listener <b>219</b> detects an error in executing a project. A workflow can be associated with the error event and the workflow can be configured to send a notification (e.g., an e-mail) to a manager. In another example, the event listener <b>219</b> detects the completion of a project. A workflow that is associated with the completion event is configured to send the results of the project to an external system. A workflow manager <b>221</b> can associate the event with a workflow that is to be executed when the event is detected.</p>
<p id="p-0044" num="0043">The query module <b>213</b>, the result publisher <b>217</b>, the event listener <b>219</b>, the workflow manager <b>221</b>, and the repair module <b>223</b> can comprise instructions stored in memory <b>904</b> that cause a processing device <b>902</b> in <figref idref="DRAWINGS">FIG. 9</figref> described in greater detail below to perform the functions of the query module <b>213</b>, the result publisher <b>217</b>, the event listener <b>219</b>, the workflow manager <b>221</b>, and the repair module <b>223</b>.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of one embodiment of a method <b>300</b> for providing a service result (e.g., prediction, schedule). The method may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, etc.), software (such as run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, processing logic resides in a prediction and scheduling server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0046" num="0045">In one embodiment, a prediction and scheduling server is coupled to a persistent storage unit that stores projects pertaining to providing manufacturing service results. The prediction and scheduling server can create and maintain the projects, for example, based on user input. For instance, one or more recipient systems may have requested a manufacturing schedule for the manufacturing facility. The server can be configured with four projects for providing the manufacturing schedule. There are two instances of a shared project type: Collect_Infrequently and Collect_Frequently, and two instances of a service project type: PredictionProject and ScheduleProject. One of the projects generates the desired manufacturing service results. For example, the ScheduleProject generates the requested manufacturing schedule.</p>
<p id="p-0047" num="0046">At block <b>301</b>, processing logic can begin with initiating a project pertaining to providing a manufacturing service result (e.g., to collect data, to generate a prediction, to generate a schedule). Processing logic can initiate a project upon detecting a trigger, such as at a scheduled time, upon a user request, or upon an occurrence of a predefined event (e.g., completion of another project).</p>
<p id="p-0048" num="0047">At block <b>303</b>, processing logic obtains input data for the project as specified by the project properties. Processing logic can obtain input data from source systems and/or from data stored in a repository (e.g., project results of a previously executed project). A project may not require input data and processing logic does not obtain input data at block <b>303</b>. For example, the project may be a shared project to collect data.</p>
<p id="p-0049" num="0048">At block <b>305</b>, processing logic can examine the project properties to determine whether there is an execution engine that is associated with the project. If there is not an execution engine associated with the project, the method continues to block <b>315</b> to store the results data from executing the project. For example, the project may be a data collection project (shared project), which is not associated with a particular execution engine to collect data. The data collection project itself can submit queries to source systems to collect data. The data may be collected using for example, SQL queries, APF reports, workflow jobs, etc. If there is an execution engine that is associated with the project, processing logic can identify the configuration data that corresponds to the execution engine at block <b>307</b>. Processing logic can examine configuration data that is stored in a repository to identify the configuration data that corresponds to the execution engine. The configuration data can define an input schema, output schema, configuration options, and other information needed to execute an engine.</p>
<p id="p-0050" num="0049">At block <b>309</b>, processing logic manipulates the input data according to configuration data to allow an execution engine to process the input data. In one embodiment, processing logic receives user input that specifies how the transformation is to be performed (e.g., by using an APF report or workflow). At block <b>311</b>, processing logic sends the transformed input data to the execution engine for the engine to process and generate project results (e.g., predictions, schedules). In one embodiment, an execution engine calculates results using one or more formulas. For example, a prediction engine can process the transformed data to generate predictions by making calculations, forecasting, statistical prediction, trend analysis, machine learning, running simulation, or using any other technique.</p>
<p id="p-0051" num="0050">At block <b>313</b>, processing logic obtains the project results from the engine and stores the project results at block <b>315</b>. The project results can be stored in a repository, such as a database. For example, processing logic can store query results, data that has been transformed according to configuration data, predictions that have been generated by a prediction engine, schedules that have generated by a scheduling engine, published predictions, published schedules, etc.</p>
<p id="p-0052" num="0051">The project results can be used to respond to a request for manufacturing service results. For example, one or more recipient systems may request a manufacturing schedule for the manufacturing facility and processing logic can send a schedule that is stored as part of the project results to the recipient systems. At block <b>317</b>, processing logic can provide the requested service results to the one or more recipient systems. For example, processing logic can store the manufacturing service results in a data store and external entities can request the stored manufacturing service results. In another example, processing logic can send the results to one or more recipients as specified by the project properties. Processing logic may transform the results into a format that allows the results to be published to the recipient systems.</p>
<p id="p-0053" num="0052">In one example, method <b>300</b> initiates a scheduling project to generate a manufacturing schedule. The ScheduleProject may be configured to run upon completion of a PredictionProject, and processing logic can initiate the ScheduleProject upon detecting the completion of the PredictionProject at block <b>301</b>. At block <b>303</b>, processing logic obtains the prediction generated by the PredictionProject, and data collected by Collect_Frequently and Collect_Infrequently, to use as input data for the ScheduleProject. At block <b>305</b>, processing logic examines the ScheduleProject project properties and determines that a scheduling engine is associated with the ScheduleProject. At block <b>307</b>, processing logic identifies the configuration data that corresponds to the scheduling engine and manipulates the input data according to configuration data to allow the scheduling engine to process the input data at block <b>311</b>. At block <b>313</b>, processing logic obtains the project results, such as the manufacturing schedule, from the scheduling engine and stores the schedule at block <b>315</b>. At block <b>317</b>, processing logic can transform a schedule generated by a scheduling engine into a format to be published for a dispatching system.</p>
<p id="p-0054" num="0053">In another example, the method <b>300</b> initiates a shared project to collect data from source systems to be used in providing a manufacturing service result. For example, the project may be a Collect_Frequently project that is configured to run every 5 minutes, and processing logic can initiate the Collect_Frequently project every 5 minutes at block <b>301</b>. The processing logic does not obtain input data for a shared project at block <b>303</b> and determines that there is not an execution engine associated with the shared project at block <b>305</b>. At block <b>315</b>, process logic stores the project results from initiating the shared project. When initiated, a shared project can submit queries to source systems to obtain data. In one embodiment, the queries are created on the fly. Alternatively, the queries are predetermined for each source system used to collect data. The queries may be specified by a user or be created automatically based on the data needed for a project. Processing logic receives query results from the source systems and stores the query results at block <b>315</b>. The results can be used by other projects. If a recipient has requested the query results, processing logic can provide the query results to the recipient at block <b>317</b>.</p>
<p id="p-0055" num="0054">In another example, method <b>300</b> initiates a prediction project to generate a prediction about the future state of a manufacturing facility. The PredictionProject may be triggered to execute upon detecting the completion of either the Collect_Frequently project or Collect_Infrequently project, and processing logic can initiate the PredictionProject upon detecting the completion of either at block <b>301</b>. At block <b>303</b>, processing logic obtains the data collected by Collect_Frequently and Collect_Infrequently as input data for the PredictionProject. At block <b>305</b>, processing logic examines the PredictionProject project properties and determines that a prediction engine is associated with the PredictionProject. At block <b>307</b>, processing logic identifies the configuration data that corresponds to the prediction engine and manipulates the input data according to configuration data to allow the prediction engine to process the input data at block <b>311</b>. The prediction engine can make calculations using information on the process equipment that can process a lot of material, the number of pieces in the lot, and the average process time per piece. In particular, the prediction execution engine can calculate the amount of processing time required on the equipment. In addition, if a lot started processing at some time in the past, the prediction execution engine can estimate the completion time, by knowing when processing had started. In another embodiment, the prediction execution engine uses simulation to generate predictions. In yet other embodiments, the prediction execution engine can generate predictions using forecasting, statistical prediction, trend analysis, machine learning, or other mechanisms. At block <b>313</b>, processing logic obtains the project results, such as the prediction, from the prediction engine and stores the prediction at block <b>315</b>. The results can be used by other projects. If a recipient has requested the prediction, processing logic can provide the prediction to the recipient at block <b>317</b>.</p>
<p id="p-0056" num="0055">In one embodiment, when an engine executes, processing logic can store the engine inputs, outputs, log files, etc. in the repository for later analysis. The data can allow a user to later reproduce errors that may be associated with the engine to be later reproduced and to allow later experimentation with engine parameters, e.g., tuning of objective function weights. The repository may then be accessed to provide results (e.g., predictions, schedules) to subscribers of services or any other qualified recipients of prediction information. This data may be persisted in a commercial database, a custom database, a flat file, and/or stored in application memory.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of one embodiment of a method <b>400</b> for repairing existing service results (e.g., predictions, schedules). The method may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, etc.), software (such as run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, processing logic resides in a prediction and scheduling server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0058" num="0057">At block <b>401</b>, processing logic can begin with detecting a critical event. The critical event may be detected upon receiving a notification from a source system. For example, a source system can be configured to provide notifications to the prediction and scheduling server each time processing of a lot of wafers is put on hold, a piece of equipment enters a down-time state or stops functioning properly, etc.</p>
<p id="p-0059" num="0058">At block <b>403</b>, processing logic evaluates the impact of the critical event on the existing service results (e.g., predictions, schedules). In one embodiment, processing logic sends a query for details regarding the critical event to the relevant source system. For example, if processing logic detects that processing of a specific lot of wafers in the MES is put on hold, processing logic may send a query to the MES to obtain all information about the specific lot. If the result of the query indicates that a problem which caused the interruption will be fixed during a specific time interval, processing logic may decide that complete regeneration of the existing service results (e.g., predictions, schedules) is not needed (block <b>405</b>), and may repair the service result by updating only the result data affected by this event (block <b>407</b>) and storing the updated data in the repository (block <b>411</b>). The update may be made using simple calculations or filters. For example, processing logic may sense that a lot has violated a time sensitive operation, and then filter the lot from the prediction result. In another example, if a piece of equipment enters a downstate, processing logic can determine when the equipment will enter a productive state and will complete processing of the respective material based on the type of the downtime event and an estimate for the repair of the equipment. Alternatively, if the impact of the event on the current result (e.g., prediction, schedule) is significant (e.g., it causes a change in a large portion of operations to be performed), processing logic can regenerates the results (e.g., predictions, schedules) using simulation or calculations (block <b>409</b>), and stores the new results (e.g., predictions, schedules) in the repository (block <b>411</b>).</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of one embodiment of a method <b>500</b> for providing subscription services to subscribers. The method may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, etc.), software (such as run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, processing logic resides in a prediction and scheduling server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0061" num="0060">At block <b>501</b>, processing logic begins with receiving a request to subscribe for services (e.g., prediction services, scheduling services). The request can be from a recipient system, a user, etc. The request may include parameters for generating services. For example, for prediction services, the request may include parameters that include, but are not limited to, time horizon, and entities of interest such as equipment or product. At block <b>503</b>, processing logic registers the subscription request in a subscription database. Subsequently, when results change (e.g., due to repair or generation of new prediction), processing logic checks existing subscriptions to find subscribers that are interested in the new results (e.g., prediction, schedule) (block <b>505</b>) and sends the new results to those subscribers (block <b>507</b>). It should be noted that blocks <b>505</b> and <b>507</b> can be repeated multiple times in response to service updates, while blocks <b>501</b> and <b>503</b> may be performed only once per subscription.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of one embodiment of a method <b>600</b> for facilitating user-specified configuration of services in an automated manufacturing facility. The method may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, etc.), software (such as run on a general purpose computer system or a dedicated machine), or a combination of both. In one embodiment, processing logic resides in a prediction and scheduling server <b>101</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0063" num="0062">At block <b>601</b>, processing logic begins with displaying a project user interface (UI) that allows a user to create a project or select an existing project for providing a service (e.g., providing a prediction, providing a schedule). The project UI can be a graphical user interface (GUI). A project includes a sequence of operations, which can be presented in the UI. Exemplary UIs are described in greater detail below in conjunction with <figref idref="DRAWINGS">FIGS. 7A and 7B</figref>.</p>
<p id="p-0064" num="0063">At block <b>603</b>, processing logic receives input specifying operations and an order of operations for the project. Processing logic can receive a user selection of the operations and order of operations for the project via the GUI. The project may be a shared project (e.g., a data collection project), a full service project, or a repair service project. For example, the operations included in a full project for a scheduling service may involve initiating the full scheduling project, collecting data about the manufacturing facility, generating a scheduling based on the collected data, and making the schedule available to requestors (e.g., a recipient system such as a dispatcher). In another example, the operations included in a repair project for the scheduling service may involve detecting a critical event, evaluating the impact of the critical event on the existing schedule, and updating the existing scheduling data according to the impact of the critical event.</p>
<p id="p-0065" num="0064">At block <b>605</b>, processing logic receives input specifying properties for operations included in the project. Processing logic can receive input via the GUI. For instance, for a scheduling project, the properties may include, for example, a time horizon (e.g., a time interval for creating a schedule), a project trigger, data source systems, query parameters, facility areas for which a schedule is created, entities in the facility areas that are being scheduled, a schedule search time (a time interval during which the best scheduling solution should be found), a schedule optimization goal function (e.g., multiple factors of any factory performance metric such as least cycle time, most throughput, least work in progress, etc.), etc. At block <b>607</b>, processing logic stores the project with the properties in a repository as part of the project data for the project.</p>
<p id="p-0066" num="0065">Subsequently, at runtime, processing logic detects a predefined event at block <b>609</b> and executes the project at block <b>611</b>. A predefined event may be a user request (manual initiation) to execute the project, a specific time, completion of another project, a critical event occurred in the manufacturing facility (e.g., unexpected downtime of equipment), etc. In one embodiment, a project and the project properties are already stored in a repository, and processing logic begins method <b>600</b> by detecting a predefined event at block <b>609</b>. Processing logic can repeat detecting a predefined event at block <b>609</b> and executing the project at block <b>611</b> many times for a stored project.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates an exemplary project GUI <b>700</b>. Project GUI <b>700</b> can include solution GUI <b>703</b> that provides access to the projects <b>706</b>A,B and project items <b>704</b>. <figref idref="DRAWINGS">FIG. 7B</figref> illustrates an exemplary solution GUI <b>750</b> displaying three projects: a prediction project <b>751</b>, a scheduling project <b>753</b>, and a shared project <b>755</b>. Returning to <figref idref="DRAWINGS">FIG. 7A</figref>, solution GUI <b>703</b> shows two projects: a prediction project <b>706</b>A and a scheduling project <b>706</b>B, and the project items <b>704</b> for the scheduling project <b>706</b>B. GUI <b>700</b> can include an active item GUI <b>709</b> that displays operations relating to a project item and properties of a project item that is selected from the solution GUI <b>703</b>. For example, a user selected project item <b>702</b> in solution GUI <b>703</b> and the active item GUI <b>709</b> displays the operation and properties of the project item <b>702</b>. The project GUI <b>709</b> can present the operations using operation indicators that visually illustrate the functionality associated with the operations (e.g., using symbols, images, shapes, color, size, labels, etc.). The GUI <b>709</b> also graphically illustrates the order for the executing the operations (e.g., using arrows or other visual indicators).</p>
<p id="p-0068" num="0067">In one embodiment, the active item GUI <b>709</b> allows a user to specify properties for each operation included in the project. In particular, upon a user request, the project GUI <b>709</b> may present a window (not shown) with a form containing one or more property fields for a specific operation. A user request for a property form may be generated, for example, when a user double clicks an operation indicator, right clicks an operation indicator, selects a property option, etc. The properties may include, for example, a time horizon (e.g., a time interval for creating a schedule), a workflow trigger, data source systems, query parameters, facility areas for which a schedule is created, entities in the facility areas that are being scheduled, a schedule search time (a time interval during which the best scheduling solution should be found), a schedule optimization objective function (e.g., multiple factors of any factory performance metric such as least cycle time, most throughput, least work in progress, etc.), etc.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary project GUI <b>800</b> that displays data schema <b>805</b> corresponding to a scheduling engine, in accordance with one embodiment of the invention. The data schema <b>805</b> may be an XML schema or any other type of schema. The data schema <b>805</b> may be a configuration file. The configuration file may be provided by a user. The configuration file allows an execution engine to be changed and upgrades without changing the prediction and scheduling server. In one embodiment, processing logic transforms the data into a format defined by configuration data when processing logic obtains data for the project at block <b>803</b>.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram of one embodiment of a computer system for configuring and managing manufacturing services. Within the computer system <b>900</b> is a set of instructions for causing the machine to perform any one or more of the methodologies discussed herein. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, or the Internet. The machine can operate in the capacity of a server or a client machine (e.g., a client computer executing the browser and the server computer executing the automated task delegation and project management) in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a console device or set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines (e.g., computers) that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0071" num="0070">The exemplary computer system <b>900</b> includes a processing device <b>902</b>, a main memory <b>904</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or DRAM (RDRAM), etc.), a static memory <b>906</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory <b>916</b> (e.g., a data storage device in the form of a drive unit, which may include fixed or removable computer-readable storage medium), which communicate with each other via a bus <b>908</b>.</p>
<p id="p-0072" num="0071">Processing device <b>902</b> represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>902</b> may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>902</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processing device <b>902</b> is configured to execute the service management system <b>926</b> for performing the operations and steps discussed herein.</p>
<p id="p-0073" num="0072">The computer system <b>900</b> may further include a network interface device <b>922</b>. The computer system <b>900</b> also may include a video display unit <b>910</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)) connected to the computer system through a graphics port and graphics chipset, an alphanumeric input device <b>912</b> (e.g., a keyboard), a cursor control device <b>914</b> (e.g., a mouse), and a signal generation device <b>920</b> (e.g., a speaker).</p>
<p id="p-0074" num="0073">The secondary memory <b>916</b> may include a machine-readable storage medium (or more specifically a computer-readable storage medium) <b>924</b> on which is stored one or more sets of instructions (e.g., the service management system <b>926</b>) embodying any one or more of the methodologies or functions described herein. The service management system <b>926</b> may also reside, completely or at least partially, within the main memory <b>904</b> and/or within the processing device <b>902</b> during execution thereof by the computer system <b>900</b>, the main memory <b>904</b> and the processing device <b>902</b> also constituting machine-readable storage media. The service management system <b>926</b> may further be transmitted or received over a network <b>918</b> via the network interface device <b>922</b>.</p>
<p id="p-0075" num="0074">The computer-readable storage medium <b>924</b> may also be used to store the service management system <b>926</b> persistently. While the computer-readable storage medium <b>924</b> is shown in an exemplary embodiment to be a single medium, the term &#x201c;computer-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The terms &#x201c;computer-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term &#x201c;computer-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.</p>
<p id="p-0076" num="0075">The service management system <b>926</b>, components and other features described herein (for example in relation to <figref idref="DRAWINGS">FIG. 1</figref>) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the service management system <b>926</b> can be implemented as firmware or functional circuitry within hardware devices. Further, the service management system <b>926</b> can be implemented in any combination hardware devices and software components.</p>
<p id="p-0077" num="0076">In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.</p>
<p id="p-0078" num="0077">Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0079" num="0078">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;initiating,&#x201d; &#x201c;obtaining,&#x201d; &#x201c;providing,&#x201d; or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0080" num="0079">Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus can be specially constructed for the required purposes, or it can comprise a general purpose computer system specifically programmed by a computer program stored in the computer system. Such a computer program can be stored in a computer-readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.</p>
<p id="p-0081" num="0080">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear from the description below. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of embodiments of the invention as described herein.</p>
<p id="p-0082" num="0081">A computer-readable storage medium can include any mechanism for storing information in a form readable by a machine (e.g., a computer), but is not limited to, floppy diskettes, optical disks, Compact Disc, Read-Only Memory (CD-ROMs), and magneto-optical disks, Read-Only Memory (ROMs), Random Access Memory (RAM), Erasable Programmable Read-Only memory (EPROM), Electrically Erasable Programmable Read-Only Memory (EEPROM), magnetic or optical cards, flash memory, or the like.</p>
<p id="p-0083" num="0082">Thus, a method and apparatus for managing services, such as prediction and scheduling services, and facilitating user-specified configuration of the services. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, implemented by a server computing system programmed to perform the following, comprising:
<claim-text>maintaining, by the server computing system, a plurality of projects including at least one prediction project and at least one scheduling project with the plurality of projects pertaining to providing manufacturing service results, wherein each of the plurality of projects specifies one or more operations to be performed relating to providing the manufacturing service results, and wherein the at least one scheduling project generates a requested manufacturing schedule;</claim-text>
<claim-text>initiating, by the server computing system, the at least one project that generates the requested manufacturing schedule, wherein the at least one project is associated with an execution engine and initiating the at least one project comprises sending input data to the execution engine based on configuration data that is associated with the execution engine, and obtaining the requested manufacturing schedule from the execution engine; and</claim-text>
<claim-text>providing, by the server computing system, the requested manufacturing schedule to at least one recipient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of projects comprises at least one of: a data collection project and a service project.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein initiating the at least one project that generates the requested manufacturing schedule comprises:
<claim-text>configuring a trigger for the at least one project to execute upon completion of at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein sending the input data to the execution engine comprises:
<claim-text>obtaining the input data from at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of projects comprises at least one data collection project, a prediction project, and a scheduling project, and wherein the scheduling project generates the manufacturing schedule.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the plurality of projects further comprises at least one of: a plurality of scheduling projects and a plurality of prediction projects, each project corresponding to an area of a manufacturing facility.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein initiating the at least one project that generates the requested manufacturing schedule comprises:
<claim-text>executing the prediction project in response to detecting execution of the at least one data collection project is complete, wherein executing the prediction project comprises using data collected by the at least one data collection project and generating prediction result data; and</claim-text>
<claim-text>initiating the scheduling project to generate the requested manufacturing schedule in response to detecting the execution of the prediction project is complete, wherein initiating the scheduling project comprises using the data collected by the at least one data collection project and the prediction result data from the execution of the prediction project.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the server computing system hosts a service management system and the execution engine is provided by a third party, wherein the third party is a third party to a developer of the service management system.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration data that is associated with the execution engine describes an input schema and an output schema for the execution engine.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein maintaining the plurality of projects comprises:
<claim-text>displaying a project user interface allowing a user to specify the plurality of projects for providing manufacturing service results;</claim-text>
<claim-text>receiving, via the project user interface, user input defining one or more properties for each operation identified in the plurality of projects; and</claim-text>
<claim-text>storing the plurality of projects with the properties in a persistent storage unit for subsequent execution in response to a project trigger.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system comprising:
<claim-text>a persistent storage unit to store a plurality of projects including at least one prediction project and at least one scheduling project with the plurality of projects pertaining to providing manufacturing service results, wherein each of the plurality of projects specifies one or more operations to be performed relating to providing the manufacturing service results, and wherein the at least one scheduling project generates a requested manufacturing schedule; and</claim-text>
<claim-text>a processor coupled to the persistent storage unit to initiate the at least one project that generates the requested manufacturing schedule, and to provide the requested manufacturing schedule to at least one recipient, wherein the at least one project is associated with an execution engine and to initiate the at least one project comprises sending input data to the execution engine based on configuration data that is associated with the execution engine and obtaining the requested manufacturing schedule from the execution engine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein to initiate the at least one project that generates the requested manufacturing schedule comprises the processor:
<claim-text>to configure a trigger for the at least one project to execute upon completion of at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein to send the input data to the execution engine comprises the processor:
<claim-text>to obtain the input data from at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the plurality of projects comprises at least one data collection project, a prediction project, and a scheduling project, and wherein the scheduling project generates the manufacturing schedule.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein to initiate the at least one project comprises the processor:
<claim-text>to execute the prediction project in response to detecting the execution of the at least one data collection project is complete, wherein to execute the prediction project comprises the processor to use data collected by the at least one data collection project and to generate prediction result data; and</claim-text>
<claim-text>to initiate the scheduling project to generate the requested manufacturing service result in response to detecting the execution of the prediction project is complete, wherein to initiate the scheduling project comprises the processor to use the data collected by the at least one data collection project and the prediction result from the execution of the prediction project.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the system hosts a service management system and the execution engine is provided by a third party, wherein the third party is a third party to a developer of the service management system.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the configuration data that is associated with the execution engine describes an input schema and an output schema for the execution engine.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer-readable non-transitory storage medium including instructions that, when executed by a computer system, cause the computer system to perform a set of operations comprising:
<claim-text>maintaining a plurality of projects including at least one prediction project and at least one scheduling project with the plurality of projects pertaining to providing manufacturing service results, wherein each of the plurality of projects specifies one or more operations to be performed relating to providing the manufacturing service results, and wherein the at least one scheduling project generates a requested manufacturing schedule;</claim-text>
<claim-text>initiating the at least one project that generates the requested manufacturing schedule, wherein the at least one project is associated with an execution engine and initiating the at least one project comprises sending input data to the execution engine based on configuration data that is associated with the execution engine, and obtaining the requested manufacturing schedule from the execution engine; and</claim-text>
<claim-text>providing the requested manufacturing schedule to at least one recipient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer-readable non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein initiating the at least one project that generates the requested manufacturing schedule comprises:
<claim-text>configuring a trigger for the at least one project to execute upon completion of at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer-readable non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein sending the input data to the execution engine comprises:
<claim-text>obtaining the input data from at least one other project of the plurality of projects.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer-readable non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the plurality of projects comprising at least one data collection project, a prediction project, and a scheduling project, wherein the requested manufacturing schedule comprises a manufacturing schedule, and wherein initiating the project that generates the requested manufacturing schedule comprises:
<claim-text>executing the prediction project in response to detecting execution of the at least one data collection project is complete, wherein executing the prediction project comprises using data collected by the at least one data collection project and generating prediction result data; and</claim-text>
<claim-text>initiating the scheduling project to generate the requested manufacturing schedule in response to detecting the execution of the prediction project is complete, wherein initiating the scheduling project comprises using the data collected by the at least one data collection project and the prediction result data from the execution of the prediction project.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer-readable non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the computing system hosts a service management system and the execution engine is provided by a third party, wherein the third party is a third party to a developer of the service management system. </claim-text>
</claim>
</claims>
</us-patent-grant>

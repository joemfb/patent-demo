<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627004-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627004</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12683753</doc-number>
<date>20100107</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>634</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>711114</main-classification>
<further-classification>711E12071</further-classification>
</classification-national>
<invention-title id="d2e53">Extent migration for tiered storage architecture</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5659704</doc-number>
<kind>A</kind>
<name>Burkes et al.</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7174439</doc-number>
<kind>B2</kind>
<name>Nagase et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7293133</doc-number>
<kind>B1</kind>
<name>Colgrove et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7574560</doc-number>
<kind>B2</kind>
<name>MacHardy et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0071560</doc-number>
<kind>A1</kind>
<name>Bolik</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711117</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0004957</doc-number>
<kind>A1</kind>
<name>Hand, III et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0010325</doc-number>
<kind>A1</kind>
<name>Yamakawa</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0104343</doc-number>
<kind>A1</kind>
<name>Miyagaki et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0147960</doc-number>
<kind>A1</kind>
<name>Sugino et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0168228</doc-number>
<kind>A1</kind>
<name>Carr et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711117</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2009/0043978</doc-number>
<kind>A1</kind>
<name>Sawdon et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0138530</doc-number>
<kind>A1</kind>
<name>Yao et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0228655</doc-number>
<kind>A1</kind>
<name>Yamane</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0085353</doc-number>
<kind>A1</kind>
<name>Zhou et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345419</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2011/0167217</doc-number>
<kind>A1</kind>
<name>Montgomery</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>EP</country>
<doc-number>1918810</doc-number>
<kind>A2</kind>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>WO</country>
<doc-number>2007009910</doc-number>
<kind>A2</kind>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>International Search Report for counterpart International Application No. PCT/EP20101070351, mailed Mar. 1, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>711114</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711117</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110167217</doc-number>
<kind>A1</kind>
<date>20110707</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Montgomery</last-name>
<first-name>David</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Montgomery</last-name>
<first-name>David</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Griffiths &#x26; Seaton PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dudek, Jr.</last-name>
<first-name>Edward</first-name>
<department>2186</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rossiter</last-name>
<first-name>Sean D</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for data migration between each of a plurality of storage pools in a computing storage environment is provided. Each of the plurality of storage pools is categorized by a metric shared between data segments assigned to any one of the plurality of storage pools. The data segments are prioritized in the any one of the plurality of storage pools based on the metric. A discovery is performed for each of the plurality of storage pools, on a predetermined interval, based on the metric, whether a data segment with a highest priority on a child pool is greater than a data segment with a lowest priority on a parent pool. If so, the data segment with the highest priority on the child pool is promoted to the parent pool. A similar discovery process demotes the data segment with the highest priority on the parent pool to the child pool.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="192.79mm" wi="237.57mm" file="US08627004-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="257.73mm" wi="194.90mm" file="US08627004-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="227.84mm" wi="205.82mm" orientation="landscape" file="US08627004-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="263.23mm" wi="187.03mm" file="US08627004-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="244.35mm" wi="209.80mm" orientation="landscape" file="US08627004-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates in general to computers, and more particularly to apparatus, method and computer program product embodiments for allocating and migrating data between pools in a computing storage environment using a tiered architecture.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Computers and computer systems are found in a variety of settings in today's society. Computing environments and networks may be found at home, at work, at school, in government, and in other settings. Computing environments increasingly store data in one or more storage environments, which in many cases are remote from the local interface presented to a user.</p>
<p id="p-0006" num="0005">These computing storage environments may use many storage devices such as disk drives, often working in concert, to store, retrieve, and update a large body of data, which may then be provided to a host computer requesting or sending the data. In some cases, a number of data storage subsystems are collectively managed as a single data storage system. These subsystems may be managed by host &#x201c;sysplex&#x201d; (system complex) configurations that combine several processing units or clusters of processing units. In this way, multi-tiered/multi-system computing environments, often including a variety of types of storage devices, may be used to organize and process large quantities of data.</p>
<heading id="h-0002" level="1">SUMMARY OF THE DESCRIBED EMBODIMENTS</heading>
<p id="p-0007" num="0006">Current tiered-storage architectures require the user, such as a system administrator, to personally manage on which storage ranks and associated tiers a given defined storage unit, such as a volume, will be created or migrated. Because the user may not recognize an optimal placement of the storage unit in a dynamic operating environment, an ideal solution to such placement may not be realized in some situations.</p>
<p id="p-0008" num="0007">In view of the foregoing, a need exists for a mechanism for dynamic allocation and migration of storage units that repeatedly and accurately determines, from a systems performance standpoint, optimal solutions for storage unit placement. Accordingly, various method, system and computer program product embodiments are provided for data migration between each of a plurality of storage pools in a computing storage environment.</p>
<p id="p-0009" num="0008">In one such embodiment, by way of example only, a method for data migration between each of the plurality of storage pools is provided. Each of the plurality of storage pools is categorized by a metric shared between data segments assigned to any one of the plurality of storage pools. The data segments are prioritized in the any one of the plurality of storage pools based on the metric. At least one discovery process is performed for each of the plurality of storage pools on a predetermined interval and based on the metric. One such process discovers whether a data segment with a highest priority on a child pool of the plurality of storage pools is greater than a data segment with a lowest priority on a parent pool of the plurality of storage pools. If this is the case, the data segment with the highest priority on the child pool is promoted to the parent pool if room is available.</p>
<p id="p-0010" num="0009">Another such process discovers whether a data segment with a lowest priority on the child pool of the plurality of storage pools is less than a data segment with a highest priority on the parent pool of the priority of storage pools. If this is the case, the data segment with the highest priority on the parent pool is demoted to the child pool if room is available. Pursuant to promoting the data segment with the highest priority on the parent pool to the child pool and demoting the data segment with the highest priority on the parent pool to the child pool, a copy of the data segments with the highest priority on the child and parent pools are retained to allow for migration back in constant time.</p>
<p id="p-0011" num="0010">In addition to the foregoing exemplary embodiment, various other method, system, and computer program product embodiments are provided and supply related advantages.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">In order that the advantages of the invention will be readily understood, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments that are illustrated in the appended drawings. Understanding that these drawings depict embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings, in which:</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an exemplary computing storage environment in accordance with certain embodiments;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a block diagram of an exemplary hierarchical tree structure, where, for example, each set of nodes of a given level within the storage-tree represents an extent tier containing a pool of extents;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> illustrates exemplary data structures including a data structure for an extent pool node and a data structure for an extent;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an exemplary method for discovery and promotion of data segments between pools in a tiered-storage environment; and</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary method for discovery and demotion of data segments between pools in a tiered-storage environment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017">The illustrated embodiments provide mechanisms for dynamically migrating (via, for example, discovery and promotion/demotion) data units within a hierarchical, virtual storage tree. The mechanisms function to maintain characteristics such as load-balance and optimal placement of data based on various metrics such as input/output (I/O) requests. In addition, the mechanisms of the illustrated embodiments provide for rapid migration (constant time) of &#x201c;cold&#x201d; data segments, such as extents. As a same segment may exist on two tiers of the virtual storage tree, promotion or demotion of the segment may be performed as quickly as moving pointers to the segment, provided the segment has not been modified in the migrating tier.</p>
<p id="p-0019" num="0018">As will be further described, some embodiments of the present invention may use methodologies incorporating graph theory upon a tree-data structure, where each set of nodes of a given level within the storage-tree represents a data segment (again, e.g., extent)-tier containing a pool of segments. The root node of the tree may represent a highest-level tier containing so-called &#x201c;hottest&#x201d; data, and subsequent children nodes representing &#x201c;colder data&#x201d;. Storage pools within the same tier (tree-level) may be referred to as cousins.</p>
<p id="p-0020" num="0019">Hot and cold data may correspond to a number of data metrics, such as data having the highest I/O rate, or other metrics as one of ordinary skill in the art will appreciate, such as a ratio of read-to-write, access over a predetermined time interval for a particular storage class (e.g., cache, solid state drives (SSD), hard disk drives (HDD), redundant array of independent disks (RAID) ranks, and the like). In determining whether a migration operation should take place between pools, the same data metric comparison for child nodes is used for parent nodes. Generally speaking, those data segments assigned to parent nodes therefore exhibit more attributes of the particular metric under consideration than those assigned to children nodes.</p>
<p id="p-0021" num="0020">Storage pools within the same tier (tree-level) may be referred to as cousins. For a given set of nodes within a tier, each node may represent a segment pool containing a list ordered-by the pool's metric, and include two first-in/first-out queues listing recently promoted or demoted segments. The queues ordered-by migration date represent those segments that are present within adjacent pools to potentially allow that data to be migrated back in constant-time, provided the data has not been modified.</p>
<p id="p-0022" num="0021">For a given pool, data segments may only be deleted provided that the extent has been promoted (exits in higher tier), and further, upon a copy to this pool, not enough space exists. The data segment is then deleted from the bottom (oldest) of the promotion-list. In some embodiments, if a particular segment cannot be migrated within a parent-child relationship, the segment may be migrated to a cousin. Finally, in lieu of promotion and demotion operations, a swap operation may occur within the parent-child relationship as will be further described.</p>
<p id="p-0023" num="0022">Turning now to <figref idref="DRAWINGS">FIG. 1</figref>, a block diagram of a computing storage environment <b>100</b> in accordance with certain embodiments is illustrated. The computing storage environment <b>100</b> includes a first computational device, such as, a storage server <b>102</b>, coupled to one or more computational devices, such as, clients <b>104</b>. In certain embodiments, the storage server <b>102</b> and the clients <b>104</b> may comprise any suitable computational device, including those presently known in the art, such as, a personal computer, a workstation, a mainframe, a midrange computer, a network appliance, a palm top computer, a telephony device, a blade computer, a hand held computer, etc.</p>
<p id="p-0024" num="0023">In some embodiments, a storage manager <b>106</b>, such as, the Tivoli&#xae; Storage Manager&#xae; (TSM) product marketed by International Business Machines (IBM&#xae;) Corporation, may be used for securely storing and managing data segments according to aspects of the present invention. The storage manager <b>106</b> may execute in a storage management server, such as a TSM server <b>102</b> or elsewhere. In one embodiment, the storage manager is operable by and/or in conjunction with processor device <b>105</b> as shown. One of ordinary skill in the art will appreciate that various other configurations of the processor <b>105</b>, storage manager <b>106</b>, and related additional processing and/or memory components are contemplated. IBM, Tivoli, and Tivoli Storage Manager are trademarks or registered trademarks of IBM Corporation.</p>
<p id="p-0025" num="0024">The TSM may provide data storage services to clients, such as TSM clients <b>104</b><i>a</i>, for management of data. The TSM server <b>102</b> may store files sent to the TSM server <b>102</b> by one or more TSM clients <b>104</b><i>a</i>. The storage manager <b>106</b> and/or processor device <b>105</b> may allow a system administrator to configure storage pools, where a storage pool comprises a group of devices used for storing data received from the TSM client <b>104</b><i>a</i>. Storage pools are used as targets for store operations from the TSM client <b>104</b><i>a </i>and are referenced in TSM server policies and other constructs for processing.</p>
<p id="p-0026" num="0025">As shown, a variety of storage devices may be organized into a storage hierarchy. Storage media within the storage hierarchy may thus be grouped into data structures referred to herein as storage pools. The storage hierarchy may be organized to correspond with one or more metrics, such as a performance metric previously described. The storage hierarchy <b>108</b> as shown may be organized such that the top of the hierarchy may include a cache pool <b>110</b> having a highest amount or quality of a particular performance metric. Below the cache pool <b>110</b>, a number of SSD class devices may be organized into SSD pools by the same metric (e.g., SSD pools <b>112</b> and <b>114</b>). Below the SSD pools <b>112</b> and <b>114</b>, a first tier of disk pools (e.g., disk pools <b>116</b>, <b>118</b>, and <b>120</b>) may be then organized.</p>
<p id="p-0027" num="0026">The first tier of disk pools may be located above a second tier of disk pools (e.g., pools <b>122</b>, <b>124</b>, and <b>126</b>) by virtue of exhibiting a greater amount, stronger attribute or attributes, or quality of the performance metric. Below the second tier of disk pools, an additional tier of tape pools (e.g., tape pools <b>128</b>, <b>130</b>, and <b>132</b>) may then be organized. Various considerations for the organization of such storage hierarchies <b>108</b> are further described, following. In one embodiment, the system administrator may assist in performing such configurations in the storage hierarchy <b>108</b> by inputs to the TSM administrative client <b>104</b><i>b </i>or another mechanism.</p>
<p id="p-0028" num="0027">Turning to <figref idref="DRAWINGS">FIG. 2</figref> in view of <figref idref="DRAWINGS">FIG. 1</figref>, a block diagram of a hierarchical tree structure of storage pools <b>200</b> is depicted. The hierarchical tree structure <b>200</b> shows various storage pools in a parent-child relationship and cousin-cousin relationship as previously described. Here again, the various parent, child, and cousin pools may correspond to attributes exhibited of a particular metric, such as a performance metric. This may include such measurements as a read/write ratio, a number of writes per a specified time, striping and partitioning characteristics, and other related measurements. Pool <b>208</b> is depicted in the illustrated embodiment as the root of the tree structure <b>200</b> in a top tier <b>202</b>. Below the pool <b>208</b>, an additional set of cousin pools <b>210</b> and <b>212</b> are contained in tier <b>204</b>. Still lower below the pool <b>210</b>, an additional set of cousin pools <b>214</b>, <b>216</b>, <b>218</b>, and <b>220</b> are contained in tier <b>206</b>. As the skilled artisan will appreciate, any number of additional tiers including various cousin pools is contemplated for a particular implementation.</p>
<p id="p-0029" num="0028">Each of the various storage pools <b>208</b>-<b>220</b> are interrelated as shown by the various arrows <b>222</b>, <b>224</b>, <b>226</b>, <b>228</b>, <b>230</b>, <b>232</b>, <b>234</b>, <b>236</b>, <b>238</b>, and <b>240</b>. Horizontal arrows <b>226</b>, <b>236</b>, <b>238</b>, and <b>240</b> denote the cousin relationship between same-tier pools <b>210</b> and <b>212</b>, and <b>214</b>, <b>216</b>, <b>218</b>, and <b>220</b>. From left to right, the cousin pools may exhibit an increasing quantity or quality of an attribute associated with the metric. Between tiers <b>202</b>, <b>204</b>, and <b>206</b>, pursuant to the parent-child pool relationship, this attribute may vary more markedly than as between cousin pools. In contrast to horizontal arrows <b>226</b>, <b>236</b>, <b>238</b> and <b>240</b>, vertical arrows <b>222</b>, <b>224</b>, <b>228</b>, <b>230</b>, <b>232</b>, and <b>234</b> denote the parent-child relationship between each of the tiers <b>202</b>, <b>204</b>, and <b>206</b>.</p>
<p id="p-0030" num="0029">To illustrate the various relationships between parents and children pools, and cousin pools, consider the following example. Using an exemplary performance metric of accesses over a predetermined time interval, each of the various storage pools <b>208</b>-<b>220</b> may be organized such that data segments assigned to the root of the hierarchical tree (e.g., pool <b>208</b>) may exhibit the hottest I/O activity (e.g., the greatest number of accesses per the interval). Pools <b>210</b>, and <b>212</b> in tier <b>204</b> may then exhibit a certain amount less of the accesses per interval, and pools <b>214</b>, <b>216</b>, <b>218</b>, and <b>220</b> may exhibit still less of the accesses per interval. Traversing from left to right across a particular tier, a leftward pool (e.g., pool <b>214</b>) may exhibit less accesses per the interval than a rightward pool (e.g., pool <b>216</b>), which increases correspondingly until a maximum amount of accesses per the given tier is realized in the far rightward pool (e.g., pool <b>220</b>).</p>
<p id="p-0031" num="0030">Accordingly then, each of the cousin pools in any one of the tiers in the hierarchy contain minimum and maximum attributes, qualities, amounts, or the like for a particular metric under consideration. For example, a particular data segment assigned to a certain storage pool meets a minimum number of attributes, etc., of the metric shared between the data segments in the certain pool, but does not exceed the maximum attributes of the metric for the certain pool.</p>
<p id="p-0032" num="0031">As previously described, each of the various tiers <b>202</b>, <b>204</b>, <b>206</b> (and others not presently illustrated) may be organized to coincide with, not only a particular metric, but a relationship between the metric and characteristics of the storage media to which the data segments in a particular pool are assigned. For example, and as previously mentioned, tier <b>202</b> may be organized to coincide with a cache rank. Similarly, tier <b>204</b> may be organized to coincide with SSD-class devices and/or a redundant array of independent disks (RAID)-10 rank. Finally, tier <b>206</b> may be organized to coincide with tape-class devices and/or a RAID-5 rank. In this way, each of the storage media to which various data segments in a particular pool are assigned also bear some relationship to the tier and/or pool depending on attributes associated with the storage media itself.</p>
<p id="p-0033" num="0032">Turning to <figref idref="DRAWINGS">FIG. 3</figref>, following, various exemplary data structures for nodes in a hierarchical tree structure (in this case, organized by extents) are shown. The first data structure <b>302</b> includes information to be associated with any one extent storage pool in the hierarchical tree. This information includes the particular extent metric under consideration, an access list of extents in the particular pool, a promotion queue of various extents scheduled to be promoted to a higher pool (e.g., either a parent or a higher cousin pool), a demotion queue of various extents scheduled to be demoted to a lower pool (e.g., either a child or a lower cousin pool), and information relating to related child pools, cousin pools, and parent pools. Such information may be retained in metadata associated with the particular extent pool, or may be associated with the pool using other mechanisms known to one of ordinary skill in the art.</p>
<p id="p-0034" num="0033">In similar fashion to data structure <b>302</b>, information associated with data structure <b>304</b> for a particular extent within the extent pool includes such metric information as write or read counter data, a last time the extent was promoted (which may be time-stamped), and a flag initializing the extent to false, and set upon a write. Storage manager <b>106</b> (again, <figref idref="DRAWINGS">FIG. 1</figref>) may retain and update such data structures <b>302</b>, and <b>304</b> in the organization, promotion and demotion of data segments within the hierarchical tree.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. 4 and 5</figref>, following, illustrate a flow-chart diagram of exemplary methods <b>400</b> and <b>500</b> for discovery and promotion of data segments between storage pools in the hierarchical tree structure, and discovery and demotion of data segments in the hierarchical tree structure, respectively. In the following <figref idref="DRAWINGS">FIGS. 4 and 5</figref>, the data segments discovered and promoted and/or demoted are extents. As one of ordinary skill in the art will appreciate, various steps in the methods <b>400</b> and <b>500</b> may be implemented in differing ways to suit a particular application. In addition, the described methods may be implemented by various means, such as hardware, software, firmware, or a combination thereof operational on or otherwise associated with the computing storage environment. For example, the methods <b>400</b> and <b>500</b> may be implemented, partially or wholly, as a computer program product including a computer-readable storage medium having computer-readable program code portions stored therein. The computer-readable storage medium may include disk drives, flash memory, digital versatile disks (DVDs), compact disks (CDs), and other types of storage mediums.</p>
<p id="p-0036" num="0035">Turning first to <figref idref="DRAWINGS">FIG. 4</figref>, method <b>400</b> illustrates an exemplary discovery and promotion process for extents in a higherarchical tree structure. Method <b>400</b> begins (step <b>402</b>) with an n level-order traversal of the hierarchical tree structure by iteration of all extent tiers, beginning with the lowest level pool in the highest tier (step <b>404</b>). Within a given tier then, each pool is then iterated (step <b>406</b>). For any one pool in the given tier, based on the metric under consideration, the method <b>400</b> queries if the extent with the highest &#x201c;priority&#x201d; (i.e., the extent having the greatest quantity, strongest attribute, or largest quality, etc., of the metric) is greater in priority than a corresponding parent extent having the lowest priority (step <b>408</b>). If this is not the case, the method then iterates to the next (rightward) pool in the given tier.</p>
<p id="p-0037" num="0036">If this is the case, then the method <b>400</b> queries whether the most frequently accessed extent exists unmodified within a parent demotion queue (step <b>410</b>). If so, then the extent is dequeued from the parent pool's demotion queue (step <b>412</b>), and the extent is enqueued to the promotion queue (step <b>414</b>). The extent is removed from the current pool's access list (step <b>416</b>), and added to the promoted pool's access list (step <b>418</b>). The method <b>400</b> then iterates to the next storage pool (again, step <b>406</b>).</p>
<p id="p-0038" num="0037">Returning to step <b>410</b>, if this is not the case, the method <b>400</b> queries whether the extent will fit in the parent pool (step <b>420</b>). If so, the extent is copied to the parent pool (step <b>422</b>) in a constant time copy operation, and the steps <b>414</b>, <b>416</b>, and <b>418</b> are carried out as previously described. Alternatively, if no room is found in the parent pool, the method queries whether the parent pool contains promoted or demoted extents (step <b>424</b>). If so, the extent is dequeued from either the child promotion or demotion queues to maintain balance and free the extent (step <b>426</b>). If the parent pool does not contain either promoted or demoted extents, the parent's promotion and demotion queues are restored (step <b>428</b>), and the method <b>400</b> returns to step <b>406</b> to reiterate through an additional storage pool in the given tier. When all extent pools in each extent tier (again from highest to lowest) have been iterated, the method <b>400</b> ends (step <b>430</b>).</p>
<p id="p-0039" num="0038">As one of ordinary skill in the art will appreciate, the method <b>400</b> (and <b>500</b> to be now described) may be performed on a scheduled interval. The scheduling may occur pursuant to various implementations of the computing storage environment. For example, the scheduling may coincide with periods of high and/or low storage activity. The scheduling may be configured by a system administrator using the storage manager <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>) or by other similar means.</p>
<p id="p-0040" num="0039">Turning now to <figref idref="DRAWINGS">FIG. 5</figref>, method <b>500</b> illustrates an exemplary discovery and demotion process for extents in a higherarchical tree structure. Method <b>500</b> begins (step <b>501</b>) with a reversed n level-order traversal of the hierarchical tree structure by iteration of all extent tiers, beginning with the lowest level pool in the lowest tier (step <b>502</b>). Within a given tier then, each pool is then iterated (step <b>504</b>), and for each given pool, the corresponding child pools are iterated (step <b>506</b>). For any one pool in the given tier, based on the metric under consideration, the method <b>500</b> queries if the extent with the lowest priority (i.e., the extent having the lowest quantity, weakest attribute, or smallest quality, etc., of the metric) is lower in priority than a corresponding parent extent having the highest priority (step <b>508</b>). If this is not the case, the method then iterates to the next (rightward) child pool for the given tier (again, step <b>506</b>).</p>
<p id="p-0041" num="0040">If this is the case, then the method <b>500</b> queries whether the least frequently accessed extent exists unmodified within a child promotion queue (step <b>510</b>). If so, then the extent is dequeued from the child pool's demotion queue (step <b>512</b>), and the extent is enqueued to the demotion queue (step <b>514</b>). The extent is removed from the current pool's access list (step <b>516</b>), and added to the demoted pool's access list (step <b>518</b>). The method <b>500</b> then iterates to the next storage pool (again, step <b>504</b>).</p>
<p id="p-0042" num="0041">Returning to step <b>510</b>, if this is not the case, the method <b>500</b> queries whether the extent will fit in the child pool (step <b>520</b>). If so, the extent is copied to the parent pool (step <b>522</b>) in a constant time copy operation, and the steps <b>514</b>, <b>516</b>, and <b>518</b> are carried out as previously described, returning to step <b>504</b> to iterate through an additional pool on the given tier. Alternatively, if no room is found in the parent pool, the method queries whether the child pool contains promoted or demoted extents (step <b>524</b>). If so, the extent is dequeued from either the child promotion or demotion queues to maintain balance and free the extent (step <b>526</b>). If the child pool does not contain either promoted or demoted extents, the child's promotion and demotion queues are restored (step <b>528</b>), and the method <b>500</b> returns to step <b>506</b> to iterate through an additional child pool. When all extent pools in each extent tier (again from lowest) have been iterated (again, step <b>502</b>), the method <b>500</b> ends (step <b>530</b>).</p>
<p id="p-0043" num="0042">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0044" num="0043">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0045" num="0044">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wired, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0046" num="0045">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0047" num="0046">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0048" num="0047">The flowchart and block diagrams in the above figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0049" num="0048">While one or more embodiments of the present invention have been illustrated in detail, one of ordinary skill in the art will appreciate that modifications and adaptations to those embodiments may be made without departing from the scope of the present invention as set forth in the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for data migration between each of a plurality of storage pools organized into extent tiers in a computing storage environment by a processor device, comprising:
<claim-text>categorizing each of the plurality of storage pools by a metric shared between data segments assigned to any one of the plurality of storage pools, wherein the plurality of storage pools includes a child pool and a parent pool, the data segments are prioritized in the any one of the plurality of storage pools based on the metric, and the metric includes at least one of write or read counter data, a last time a data segment was promoted, and a flag initializing a corresponding data segment to false;</claim-text>
<claim-text>iterating each child pool and each of the plurality of storage pools in all extent tiers with a reversed n level-order traversal and performing, for each of the plurality of storage pools:</claim-text>
<claim-text>discovering, on a predetermined interval and based on the metric, whether a priority of a data segment with a lowest priority on the child pool of the plurality of storage pools is less than a priority of a data segment with a highest priority on the parent pool of the priority of storage pools,</claim-text>
<claim-text>determining whether a least frequently accessed data segment exists unmodified within a child promotion queue, if the priority of the data segment with the lowest priority on the child pool is less than the priority of the data segment with the highest priority on the parent pool;</claim-text>
<claim-text>dequeuing the data segment from the child promotion queue, if the least frequently accessed data segment exists unmodified within the child promotion queue;</claim-text>
<claim-text>determining whether room is available in the child pool to include the data segment; and</claim-text>
<claim-text>demoting the data segment with the highest priority on the parent pool to the child pool if room is available;</claim-text>
<claim-text>wherein pursuant to the demoting the data segment with the highest priority on the parent pool to the child pool, a copy of the data segment with the highest priority on the parent pool is retained to allow for migration back in constant time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools includes classifying each of the plurality of storage pools by minimum and maximum attributes of the metric shared between the data segments, wherein each data segment assigned to the any one of the plurality of storage pools meets at least the minimum, but does not exceed the maximum, attributes of the metric.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools includes classifying each of the plurality of storage pools by a shared performance metric of the data segments assigned to the any one of the plurality of storage pools.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools includes:
<claim-text>organizing a plurality of tiers of a tree structure, each of the plurality of tiers capable of including at least one of the plurality of storage pools, and</claim-text>
<claim-text>designating some of the plurality of storage pools residing in a same tier of the plurality of tiers as cousin storage pools, each of the cousin storage pools organized along the same tier such that the attributes of the metric shared between the data segments in the any one of the cousin storage pools increase from left to right across the same tier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein organizing the plurality of tiers of the tree structure includes designating each of the plurality of tiers to correspond to levels of the attributes of the metric shared between the data segments, wherein the attributes of the metric vary between the levels significantly more than the attributes of the metric vary between the cousin storage pools.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools includes categorizing each of the plurality of storage pools by at least one of a read/write ratio, a read/write rate, a number of accesses over the predetermined interval, a redundant array of independent disks (RAID) array rank, a latency, a storage class, striping, and partitioning characteristics.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein organizing the plurality of tiers of the tree structure includes designating a plurality of storage classes, including at least one of a cache storage class, a solid state drive (SSD) storage class, a redundant array of independent disks (RAID)-10 class, a tape class, a RAID-5 class, and an optical storage class to correspond to each of the plurality of tiers.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including, pursuant to retaining the copy of the data segments with the highest priority on the child and parent pools, using a data pointer to map the data segments with the highest priority on the child and parent pools in lieu of moving the data segments with the highest priority on the child and parent pools.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A system for data migration between each of a plurality of storage pools organized into extent tiers in a computing storage environment, comprising:
<claim-text>a storage manager module operational in the computing storage environment, wherein the storage manager module is adapted for:</claim-text>
<claim-text>categorizing each of the plurality of storage pools by a metric shared between data segments assigned to any one of the plurality of storage pools, wherein the plurality of storage pools includes a child pool and a parent pool, the data segments are prioritized in the any one of the plurality of storage pools based on the metric, and the metric includes at least one of write or read counter data, a last time a data segment was promoted, and a flag initializing a corresponding data segment to false;</claim-text>
<claim-text>iterating each child pool and each of the plurality of storage pools in all extent tiers with a reversed n level-order traversal and performing, for each of the plurality of storage pools:</claim-text>
<claim-text>discovering, on a predetermined interval and based on the metric, whether a priority of a data segment with a lowest priority on the child pool of the plurality of storage pools is less than a priority of a data segment with a highest priority on the parent pool of the priority of storage pools,</claim-text>
<claim-text>determining whether a least frequently accessed data segment exists unmodified within a child promotion queue, if the priority of the data segment with the lowest priority on the child pool is less than the priority of the data segment with the highest priority on the parent pool,</claim-text>
<claim-text>dequeuing the data segment from the child promotion queue, if the least frequently accessed data segment exists unmodified within the child promotion queue,</claim-text>
<claim-text>determining whether room is available in the child pool to include the data segment, and</claim-text>
<claim-text>demoting the data segment with the highest priority on the parent pool to the child pool if room is available;</claim-text>
<claim-text>wherein pursuant to the demoting the data segment with the highest priority on the parent pool to the child pool, a copy of the data segment with the highest priority on parent pool is retained to allow for migration back in constant time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage manager module is further adapted for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, classifying each of the plurality of storage pools by minimum and maximum attributes of the metric shared between the data segments, wherein each data segment assigned to the any one of the plurality of storage pools meets at least the minimum, but does not exceed the maximum, attributes of the metric.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage manager module is further adapted for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, classifying each of the plurality of storage pools by a shared performance metric of the data segments assigned to the any one of the plurality of storage pools.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage manager module is further adapted for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools:
<claim-text>organizing a plurality of tiers of a tree structure, each of the plurality of tiers capable of including at least one of the plurality of storage pools, and</claim-text>
<claim-text>designating some of the plurality of storage pools residing in a same tier of the plurality of tiers as cousin storage pools, each of the cousin storage pools organized along the same tier such that the attributes of the metric shared between the data segments in the any one of the cousin storage pools increase from left to right across the same tier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the storage manager module is further adapted for, pursuant to organizing the plurality of tiers of the tree structure includes designating each of the plurality of tiers to correspond to levels of the attributes of the metric shared between the data segments, wherein the attributes of the metric vary between the levels significantly more than the attributes of the metric vary between the cousin storage pools.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the storage manager module is further adapted for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, categorizing each of the plurality of storage pools by at least one of a read/write ratio, a read/write rate, a number of accesses over the predetermined interval, a redundant array of independent disks (RAID) array rank, a latency, a storage class, striping, and partitioning characteristics.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the storage manager module is further adapted for, pursuant to organizing the plurality of tiers of the tree structure, designating a plurality of storage classes, including at least one of a cache storage class, a solid state drive (SSD) storage class, a redundant array of independent disks (RAID)-10 class, a tape class, a RAID-5 class, and an optical storage class to correspond to each of the plurality of tiers.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage manager module is further adapted for, pursuant to retaining the copy of the data segments with the highest priority on the child and parent pools, using a data pointer to map the data segments with the highest priority on the child and parent pools in lieu of moving the data segments with the highest priority on the child and parent pools.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the storage manager module is configurable by a user through a storage client, the metric provided to the storage manager module by the user through the storage client.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer program product for data migration between each of a plurality of storage pools organized into extent tiers in a computing storage environment by a processor device, the computer program product comprising a computer-readable non-transitory storage medium having computer-readable program code portions stored therein, the computer-readable program code portions comprising:
<claim-text>a first executable portion for categorizing each of the plurality of storage pools by a metric shared between data segments assigned to any one of the plurality of storage pools, wherein the plurality of storage pools includes a child pool and a parent pool, the data segments are prioritized in the any one of the plurality of storage pools based on the metric, and the metric includes at least one of write or read counter data, a last time a data segment was promoted, and a flag initializing a corresponding data segment to false;</claim-text>
<claim-text>a second executable portion for iterating each child pool and each of the plurality of storage pools in all extent tiers with a reversed n level-order traversal and performing, for each of the plurality of storage pools:</claim-text>
<claim-text>discovering, on the predetermined interval and based on the metric, whether a priority of a data segment with a lowest priority on the child pool of the plurality of storage pools is less than a priority of a data segment with a highest priority on the parent pool of the priority of storage pools,</claim-text>
<claim-text>determining whether a least frequently accessed data segment exists unmodified within a child promotion queue, if the priority of the data segment with the lowest priority on the child pool is less than the priority of the data segment with the highest priority on the parent pool,</claim-text>
<claim-text>dequeuing the data segment from the child promotion queue, if the least frequently accessed data segment exists unmodified within the child promotion queue,</claim-text>
<claim-text>determining whether room is available in the child pool to include the data segment, and</claim-text>
<claim-text>demoting the data segment with the highest priority on the parent pool to the child pool if room is available;</claim-text>
<claim-text>wherein pursuant to the demoting the data segment with the highest priority on the parent pool to the child pool, a copy of the data segment with the highest priority on the parent pool is retained to allow for migration back in constant time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further including a third executable portion for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, classifying each of the plurality of storage pools by minimum and maximum attributes of the metric shared between the data segments, wherein each data segment assigned to the any one of the plurality of storage pools meets at least the minimum, but does not exceed the maximum, attributes of the metric.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further including a third executable portion for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, classifying each of the plurality of storage pools by a shared performance metric of the data segments assigned to the any one of the plurality of storage pools.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further including a third executable portion for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools:
<claim-text>organizing a plurality of tiers of a tree structure, each of the plurality of tiers capable of including at least one of the plurality of storage pools, and</claim-text>
<claim-text>designating some of the plurality of storage pools residing in a same tier of the plurality of tiers as cousin storage pools, each of the cousin storage pools organized along the same tier such that the attributes of the metric shared between the data segments in the any one of the cousin storage pools increase from left to right across the same tier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer program product of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further including a fourth executable portion for, pursuant to organizing the plurality of tiers of the tree structure, designating each of the plurality of tiers to correspond to levels of the attributes of the metric shared between the data segments, wherein the attributes of the metric vary between the levels significantly more than the attributes of the metric vary between the cousin storage pools.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer program product of <claim-ref idref="CLM-00022">claim 22</claim-ref>, further including a fifth executable portion for, pursuant to categorizing each of the plurality of storage pools by the metric shared between the data segments assigned to the any one of the plurality of storage pools, categorizing each of the plurality of storage pools by at least one of a read/write ratio, a read/write rate, a number of accesses over the predetermined interval, a redundant array of independent disks (RAID) array rank, a latency, a storage class, striping, and partitioning characteristics.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer program product of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further including a fourth executable portion for, pursuant to organizing the plurality of tiers of the tree structure, designating a plurality of storage classes, including at least one of a cache storage class, a solid state drive (SSD) storage class, a redundant array of independent disks (RAID)-10 class, a tape class, a RAID-5 class, and an optical storage class to correspond to each of the plurality of tiers.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further including a fourth executable portion for, pursuant to retaining the copy of the data segments with the highest priority on the child and parent pools, using a data pointer to map the data segments with the highest priority on the child and parent pools in lieu of moving the data segments with the highest priority on the child and parent pools.</claim-text>
</claim>
</claims>
</us-patent-grant>

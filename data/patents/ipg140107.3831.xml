<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08624898-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08624898</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12400158</doc-number>
<date>20090309</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1168</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>11</main-group>
<subgroup>20</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>345440</main-classification>
<further-classification>345418</further-classification>
<further-classification>345473</further-classification>
<further-classification>707805</further-classification>
</classification-national>
<invention-title id="d2e53">Typed dependency graphs</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4809170</doc-number>
<kind>A</kind>
<name>Leblang et al.</name>
<date>19890200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4912637</doc-number>
<kind>A</kind>
<name>Sheedy et al.</name>
<date>19900300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5504879</doc-number>
<kind>A</kind>
<name>Eisenberg et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5649200</doc-number>
<kind>A</kind>
<name>Leblang et al.</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5706510</doc-number>
<kind>A</kind>
<name>Burgoon</name>
<date>19980100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5752244</doc-number>
<kind>A</kind>
<name>Rose et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5764980</doc-number>
<kind>A</kind>
<name>Davis et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5890166</doc-number>
<kind>A</kind>
<name>Eisenberg et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5930797</doc-number>
<kind>A</kind>
<name>Hill</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5974428</doc-number>
<kind>A</kind>
<name>Gerard et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5995107</doc-number>
<kind>A</kind>
<name>Berteig et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6058397</doc-number>
<kind>A</kind>
<name>Barrus et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6112024</doc-number>
<kind>A</kind>
<name>Almond et al.</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6119130</doc-number>
<kind>A</kind>
<name>Nguyen et al.</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6181336</doc-number>
<kind>B1</kind>
<name>Chiu et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6243706</doc-number>
<kind>B1</kind>
<name>Moreau et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6278466</doc-number>
<kind>B1</kind>
<name>Chen</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6313837</doc-number>
<kind>B1</kind>
<name>Assa et al.</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6348921</doc-number>
<kind>B1</kind>
<name>Zhao et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6353437</doc-number>
<kind>B1</kind>
<name>Gagne</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6362817</doc-number>
<kind>B1</kind>
<name>Powers et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6400372</doc-number>
<kind>B1</kind>
<name>Gossweiler, III et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6411990</doc-number>
<kind>B1</kind>
<name>Shaffer et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6557012</doc-number>
<kind>B1</kind>
<name>Arun et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6559845</doc-number>
<kind>B1</kind>
<name>Harvill et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6573898</doc-number>
<kind>B1</kind>
<name>Mathur et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6611262</doc-number>
<kind>B1</kind>
<name>Suzuki</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6615204</doc-number>
<kind>B1</kind>
<name>Menon</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6628286</doc-number>
<kind>B1</kind>
<name>Comair et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6704739</doc-number>
<kind>B2</kind>
<name>Craft et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6731279</doc-number>
<kind>B2</kind>
<name>Suzuki et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6828971</doc-number>
<kind>B2</kind>
<name>Uesaki et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6850572</doc-number>
<kind>B2</kind>
<name>Kim et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6867782</doc-number>
<kind>B2</kind>
<name>Gaudette et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345530</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6924821</doc-number>
<kind>B2</kind>
<name>Trinh et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345629</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7123814</doc-number>
<kind>B2</kind>
<name>David</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7123816</doc-number>
<kind>B2</kind>
<name>McGrath et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7127501</doc-number>
<kind>B1</kind>
<name>Beir et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7159212</doc-number>
<kind>B2</kind>
<name>Schenk et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7287029</doc-number>
<kind>B1</kind>
<name>Craft et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>7463264</doc-number>
<kind>B2</kind>
<name>Harrison et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2002/0091868</doc-number>
<kind>A1</kind>
<name>Molnar</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2002/0156984</doc-number>
<kind>A1</kind>
<name>Padovano</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2004/0003370</doc-number>
<kind>A1</kind>
<name>Schenk et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2004/0012641</doc-number>
<kind>A1</kind>
<name>Gauthier</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2004/0128556</doc-number>
<kind>A1</kind>
<name>Burnett</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2004/0199627</doc-number>
<kind>A1</kind>
<name>Frietsch</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2004/0243597</doc-number>
<kind>A1</kind>
<name>Jensen et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2005/0005242</doc-number>
<kind>A1</kind>
<name>Hoyle</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2005/0091603</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2005/0134591</doc-number>
<kind>A1</kind>
<name>Baxter</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2005/0253839</doc-number>
<kind>A1</kind>
<name>Bugaj et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345418</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2005/0253848</doc-number>
<kind>A1</kind>
<name>Bugaj et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345473</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2005/0256881</doc-number>
<kind>A1</kind>
<name>Harrison et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2006/0010153</doc-number>
<kind>A1</kind>
<name>Bugaj</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2006/0015431</doc-number>
<kind>A1</kind>
<name>Bugaj et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2006/0259386</doc-number>
<kind>A1</kind>
<name>Knowlton et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Notice of Allowance, U.S. Appl. No. 10/977,346, dated Jun. 21, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Final Office Action, U.S. Appl. No. 10/977,346, dated Mar. 8, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Office Action, U.S. Appl. No. 10/977,346, dated Jul. 21, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Office Action, U.S. Appl. No. 10/982,190, dated Jun. 26, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Final Office Action, U.S. Appl. No. 10/982,190, dated Jun. 11, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Office Action, U.S. Appl. No. 10/982,190, dated Oct. 10, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Cook et al., &#x201c;The Reyes Image Rendering Architecture&#x201d;, Computer Graphics, vol. 21, No. 4, 1987, pp. 95-102.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>International Search Report PCT/US04/026131 dated Sep. 18, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>345440</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345473</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bugaj</last-name>
<first-name>Stephan</first-name>
<address>
<city>San Pablo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Levin</last-name>
<first-name>Brett</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Minor</last-name>
<first-name>Joshua</first-name>
<address>
<city>El Cerrito</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Bugaj</last-name>
<first-name>Stephan</first-name>
<address>
<city>San Pablo</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Levin</last-name>
<first-name>Brett</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Minor</last-name>
<first-name>Joshua</first-name>
<address>
<city>El Cerrito</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patterson +Sheridan, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Pixar</orgname>
<role>02</role>
<address>
<city>Emeryville</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Xiao</last-name>
<first-name>Ke</first-name>
<department>2677</department>
</primary-examiner>
<assistant-examiner>
<last-name>Imperial</last-name>
<first-name>Jed-Justin</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Typed dependency graphs represent digital assets as nodes in a graph. The digital assets, data files, and required software applications are represented as connected nodes. Nodes of the graph are connected by typed links, specifying the type of dependency relationship between digital assets, data files, and/or software applications associated with nodes. Type attributes can represent one-way dependencies, two-way dependencies, version relationships, variant relationships, subcomponent relationships, aggregation relationships, and software application/digital asset dependencies. Typed dependency graphs may be automatically created by parsing asset data or data files to determine the characteristics of assets and their relationships with other assets, data files, and software applications. Typed dependency graphs may be traversed based on the type of links, with the result defining a component, subcomponent, version, and/or variant.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="157.14mm" wi="114.30mm" file="US08624898-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="251.54mm" wi="152.82mm" file="US08624898-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="267.29mm" wi="160.70mm" file="US08624898-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="253.32mm" wi="165.10mm" file="US08624898-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="252.90mm" wi="170.69mm" file="US08624898-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="249.17mm" wi="171.03mm" file="US08624898-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="241.98mm" wi="145.97mm" file="US08624898-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="246.21mm" wi="151.21mm" file="US08624898-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="253.58mm" wi="140.72mm" file="US08624898-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="253.24mm" wi="161.71mm" file="US08624898-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="249.17mm" wi="137.84mm" file="US08624898-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="238.93mm" wi="136.99mm" file="US08624898-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="255.52mm" wi="164.76mm" file="US08624898-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCES TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is related to U.S. patent application Ser. No. 10/977,346 filed on Oct. 28, 2004, now U.S. Pat. No. 7,821,516, U.S. patent application Ser. No. 10/982,190 filed on Nov. 5, 2004, now U.S. Pat. No. 7,683,904, and PCT Patent Application PCT/US2004/026131 filed on Aug. 11, 2004, which are incorporated by reference herein for all purposes.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present invention relates to methods and systems for managing complex digital assets. Computer generated animations are often generated by creating data representing objects and their associated shading, texturing, and animation rigging characteristics. The objects are assembled into one or more shots each representing a specific sequence of animation. A shot typically includes one or more objects, a camera specifying a viewpoint, and lighting. A shot also includes animation data specifying the movement or other changes over time of objects, the camera, and lighting. Data for each of these aspects of a shot is a digital asset that can stored in one or more files.</p>
<p id="p-0004" num="0003">A renderer or other software program processes the digital assets defining shots, cameras, lighting, animation, objects, shading, texturing, animation rigging, animation data, and any other associated data, such as simulation data, to create one or more computer generated images or animated sequences. Many renderers create computer generated images and animations by mathematically modeling the interaction of light with a three dimensional scene from a given viewpoint. This process, called rendering, generates a two-dimensional image of the scene from the given viewpoint, and is analogous to taking a photograph of a real-world scene. Animated sequences can be created by rendering a sequence of images of a scene as the scene is gradually changed over time.</p>
<p id="p-0005" num="0004">Digital assets have complex dependencies with each other. For example, the geometric features of a character model can be specified by a geometry data file. The texturing and shading attributes of the character model can be specified by one or more texture and shading program and data files. To render the character model correctly, the renderer must combine the data from these separate files. Additionally, digital assets can have complex dependencies with software applications. For example, a character model can use a modeling application to create and manipulate its geometry data, a texturing and shading application to manipulate texturing and shading programs and data, and an animation rigging application to create animation rigging, which translates animation data, referred to as animation variables, into changes in the geometry and other aspects of a character model.</p>
<p id="p-0006" num="0005">The relationships between digital assets is further complicated in that digital assets and their associated software applications evolve over the course of a production. As digital assets and software tools evolve, older dependencies may be broken. For example, a character model can use a first version of geometry data and a first version of texturing data. Some portions of the animated feature may be created using the first versions of the geometry and texturing data. As the production continues, a new texturing software application may be used to create a second version of the texturing data, for example to refine attributes of the character model. It may be possible for new shots of the animated feature to freely use the new texturing data with the first version of the geometry data; however, previously completed shots should continue to use the first version of the texturing data to avoid the possibility of the new texturing data altering or even ruining the previously completed shots.</p>
<p id="p-0007" num="0006">As digital assets and their associated software applications evolve, the potential for introducing incompatibilities increases dramatically. For large productions, there may be animators working with one version of a digital asset while technical staff are creating a revised version of a digital asset. Furthermore, previously completed portions of the production may require the use of older versions of the digital asset. If the wrong version of a digital asset is used, a visual discontinuity, or a &#x201c;pop,&#x201d; can be introduced if the new object looks different from the old one in the various scenes. Alternatively, the inclusion of a new version of an object in an older scene may cause the renderer to terminate with an error. Even worse, during the time which one frame takes to render, it is possible for different users to install new versions of one or more assets (e.g. objects to be rendered) referenced in the frame. As a result, errors and visual discontinuities can occur within a single shot. Furthermore, it is very common for images or shots to need to be re-worked after being approved to make them ready for &#x201c;film-out.&#x201d; However, if versions of the assets that were used in older shots have been updated, it is extremely difficult to re-render or replicate exactly the same images.</p>
<p id="p-0008" num="0007">Tracking the dependencies between digital assets, software tools, and associated portions of the production is an arduous task. Previously, these dependencies were maintained manually using source-code and document control software applications. Users were required to check files in and out of predefined packages or collections. Each package or collection contained a compatible set of digital assets that could be referenced together. In this prior system, only relatively simple types of dependencies, such as &#x201c;asset is a member of a group,&#x201d; can be represented.</p>
<p id="p-0009" num="0008">In these prior systems, dependencies between digital assets and specific versions of software tools, dependencies between digital assets and shots, and multiple types of dependency relationships for each digital asset are difficult if not impossible to represent with this system. Furthermore, this system is error prone, relying upon users to select the correct package or collection. Additionally, it is difficult to track the complete state of a set of dependent assets, to track changes in sets of dependent assets, and to debug dependency problems.</p>
<p id="p-0010" num="0009">It is therefore desirable for a system and method to enable the creation and maintenance of complex dependency relationships between digital assets and associated software tools. It is further desirable for the system and method to allow any number of dependency relationships between any number of digital assets and associated software tools in arbitrary locations. It is also desirable for the system and method to be readily adaptable to a wide variety of types of digital assets and software tool applications. It is further desirable for the system and method to enable a set of multiple digital assets to be automatically accessed as a single aggregate asset according to its associated dependency relationships. It is also desirable for the system and method to support multiple versions of digital assets and aggregate assets. It is further desirable for the system and method to facilitate access to different versions of digital assets and aggregate assets, and where necessary maintain dependencies with specific versions of digital assets for compatibility. It is desirable for the system and method to enable the analysis of the complete state of a set of dependent assets, to enable the tracking of changes in sets of dependent assets, and to enable the debugging of dependency problems.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0011" num="0010">An embodiment of the invention maintains dependency information between digital assets and software application tools by creating typed dependency graphs. The typed dependency graph represents each digital asset as a node in a graph. Related digital assets are connected by links in the graph. The data files associated with the digital asset are represented as additional connected nodes. Software application tools are also represented as nodes in the graph. Software application nodes are connected with nodes representing associated digital assets and/or their data files. Each node in the graph can include information identifying its corresponding digital asset, data file, or software application, such as the location of the digital asset, the type of the digital asset, and other information.</p>
<p id="p-0012" num="0011">In an additional embodiment, different versions of a digital asset can be represented in the graph as separate nodes. Nodes representing different versions of the digital asset can be connected with a node representing all versions of the digital asset. In an additional embodiment, nodes of the graph can represent aggregations of two or more digital assets. For example, an aggregate asset can be created representing an object and connected with the nodes representing the digital assets making up the aggregate asset.</p>
<p id="p-0013" num="0012">In an embodiment, nodes of the graph are connected by links. In an embodiment, links include type attributes specifying the type of dependency relationship between nodes. Type attributes can represent one-way dependencies, two-way dependencies, version relationships, aggregation relationships, and tool/digital asset dependencies.</p>
<p id="p-0014" num="0013">An embodiment of the invention automatically creates typed dependency graphs. One or more parser modules can be used to process asset data or data files to determine the characteristics of assets and their relationships with other assets, data files, and software applications. Graph update policies can be defined to determine the frequency of updates to the typed dependency graph following changes to assets. Typed dependency graphs can be compared with the list of assets loaded for events to detect potential errors and to optimize the processing of assets.</p>
<p id="p-0015" num="0014">An embodiment of the invention allows specific combinations of assets to be locked or grouped together into higher-level aggregate assets. These aggregate assets can be used to avoid compatibility problems with changing assets and ensure that shots or sequences can be replicated as the assets in a production evolve. As the assets within the aggregate asset are modified, additional versions of the aggregate asset can automatically be created. The versions of an aggregate asset can be manually or automatically assigned labels indicating their function or role in a digital production.</p>
<p id="p-0016" num="0015">For example, the most recent version of an aggregate asset can be automatically assigned the label of &#x201c;latest&#x201d; to indicate that it is the most recent version of the asset. A version of the aggregate asset may also be automatically or manually labeled as &#x201c;stable,&#x201d; indicating that it is the most recent version of the aggregate asset that is suitable for use in a production. Users and developers can define additional labels for any purpose. Moreover, users and developers can specify criteria for automatically applying and updating the labels associated with aggregate assets. Additionally, users can manually apply, update, or remove labels associated with aggregate assets.</p>
<p id="p-0017" num="0016">As the development of new versions of aggregate assets progress, the asset creators may determine that a newer version of the aggregate asset is suitable for production use. The asset creators may then direct the system to transfer the label of &#x201c;stable&#x201d; to the newer version of the asset. Users can refer or reference aggregate assets according to their labels. For example, a shot can be constructed with reference to the &#x201c;stable&#x201d; version of the aggregate asset. When this label is transferred to a different version of an aggregate asset, the usage of that aggregate asset in this shot will automatically be updated to reference the version of the aggregate asset newly labeled as stable.</p>
<p id="p-0018" num="0017">The automatic update of references to assets can be overridden through the use of &#x201c;pins.&#x201d; When a reference to an asset is pinned, the current version of the aggregate asset associated with this reference is determined. The pinned reference will then remained fixed to this version of the aggregated asset, even if the label initially used to reference the aggregated asset is moved to a different version.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0019" num="0018">The invention will be described with reference to the drawings, in which:</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example logical dependency relationship between digital assets;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example set of data files associated with digital assets;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example set of dependencies between digital assets and software tools;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 4A-4B</figref> illustrate an example typed dependency graph and typed dependency graph queries capable of being implemented by an embodiment of the invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a method of creating a dependency graph specifying dependency relationships associated with digital assets and software tools according to an embodiment of the invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a method of adding or removing digital assets from a dependency graph according to an embodiment of the invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a method of accessing digital assets associated with a dependency graph according to an embodiment of the invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 8</figref> illustrates example versions of an aggregate asset and associated labels capable of being implemented by an embodiment of the invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a method of creating an initial version of an aggregate asset according to an embodiment of the invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 10</figref> illustrates a method of isolating an asset dependency for compatibility according to an embodiment of the invention; and</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. 11A-11B</figref> illustrate example systems suitable for implementing an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0031" num="0030">In the drawings, identical components are labeled with identical reference numbers.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example logical dependency relationship <b>100</b> between digital assets. Logical dependency relationship includes a shot <b>105</b> specifying an image or animated sequence to be created. Shot <b>105</b> may be one of many shots within a production. In this example, shot <b>105</b> includes lighting data <b>110</b>, which specifies the attributes of one or more lights. Additionally, animation data <b>115</b> specifies the values at any given time for the attributes of the lights specified by lighting data <b>110</b>, which can include attributes such as the position, color, direction, and intensity of the lights.</p>
<p id="p-0033" num="0032">Camera data <b>120</b> specifies the attributes of one or more cameras in the shot <b>105</b>. Each camera represents a viewpoint from which one or more images of the shot <b>105</b> can be generated by a renderer. Animation data <b>125</b> specifies the values at any given time for the attributes of cameras associated with the shot <b>105</b>. These attributes can include the position and orientation of a camera as well as optical properties such as the shutter time and focal length of a camera.</p>
<p id="p-0034" num="0033">In this example, shot <b>105</b> can include one or more objects, such as example objects <b>130</b> and <b>155</b>. Example object <b>130</b> includes geometry data <b>140</b> specifying at least the basic geometric features of the object <b>130</b>. Shading programs and data <b>145</b> specifies the optical properties of the object <b>130</b>, such as colors, textures, transparency, reflectivity, and other more complex properties. The position, orientation, pose, and other attributes of the object <b>130</b> at any given time are specified by animation data <b>135</b> and rigging data <b>150</b>. Animation data <b>135</b> specifies the attributes of the object <b>130</b> in terms of animation variables or avars. The rigging data <b>150</b> specifies how animation software applications translate the values of animation variables into specific changes in the geometric features, optical properties, and other attributes of the object <b>130</b>.</p>
<p id="p-0035" num="0034">Example object <b>155</b> and any other objects in shot <b>105</b> can include similar types of data as example object <b>130</b>.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example set of data files <b>200</b> associated with digital assets. A typical shot is specified by a number of different users and includes on the order of gigabytes of data. To facilitate production and reuse of digital assets, the data for the shot is dispersed in a number of smaller data files. Generally, logical assets, such as shots, objects, and the like are themselves composed of a number of separate digital assets in separate data files.</p>
<p id="p-0037" num="0036">In this example, the set of data files <b>200</b> are arranged in a file system hierarchy having a root location <b>202</b>. In this example, the set of data files <b>200</b> are located at absolute or relative storage locations, such as at specific computer disk directories, at specific network directories, with specific file names or aliases, or the like. However, in other embodiments, databases or other asset management software may be used to implement a data storage hierarchy for the set of data files <b>200</b>.</p>
<p id="p-0038" num="0037">The set of data files includes a shot A directory <b>205</b>. The shot A directory includes a shot description file <b>206</b>. The shot description file <b>206</b> may be associated with only one frame to be rendered, sequence of images, a portion of a production, or with the entire feature. An example shot description file <b>206</b> can include references to a camera, lights, and objects A and B. In this example, shot A directory <b>205</b> includes animation data files <b>207</b> and <b>209</b> specifying animation data for objects A and B in the shot.</p>
<p id="p-0039" num="0038">Object A directory <b>210</b> includes a geometry data file <b>212</b> and a rigging data file <b>214</b>. Geometry data file <b>212</b> specifies the geometric features of object A. The geometric features can be specified in a number of ways, from abstract features such as the number of wheels on a car object to specific features attributes such as control points defining surfaces. A rigging data file <b>214</b> specifies rigging data used to translate the values of animation variables into specific changes in the geometric features, optical properties, and other attributes of the object <b>130</b>. Object A can also use shading data stored in data files in shading A directory <b>223</b>.</p>
<p id="p-0040" num="0039">Similarly, object B directory <b>215</b> includes a geometry data file <b>217</b> and a rigging data file <b>219</b>. In this example, the shading data for object B is stored in shading B data file <b>221</b>.</p>
<p id="p-0041" num="0040">The arrangement of the set of data files <b>200</b> illustrates some of the complexities associated with managing dependent digital assets used in digital film and animation production. In this example, dependent digital assets can be located in separate data files. Data files can be in the same directory, in sub-directories, or in parallel directories. Further complications can arise when multiple versions of a digital asset are used. Additionally, this file system hierarchy does not maintain any dependencies between data files associated with digital assets and different versions of software tools.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example set of dependencies <b>300</b> between digital assets and software tools. Version <b>1</b> of an object, referred to as object v.<b>1</b> <b>305</b>, uses geometry data v.<b>1</b> <b>307</b>, which must be manipulated with modeling software application v.<b>1</b> <b>309</b>. Object v.<b>1</b> <b>305</b> also uses shading data v.<b>1</b> <b>310</b>, which requires shading language v.<b>3</b> <b>312</b>, and rigging data v.<b>1</b> <b>313</b>, which requires animation software tool v. <b>3</b>, <b>314</b>.</p>
<p id="p-0043" num="0042">In contrast, version <b>2</b> of this object, object v.<b>2</b> <b>320</b>, uses geometry data v.<b>2</b> <b>322</b>, which requires modeling software application v.<b>2</b> <b>323</b>; shading data v.<b>7</b> <b>323</b>, which requires shading language v.<b>4</b> <b>324</b>; and rigging data v.<b>2</b> <b>325</b>, which requires animation software tool v.<b>3</b> <b>314</b>. Version <b>3</b> of the object, object v. <b>3</b> <b>330</b>, uses geometry data v.<b>3</b> <b>327</b>, which requires modeling software application v.<b>2</b> <b>323</b>; shading data v.<b>7</b> <b>323</b>, which requires shading language v.<b>4</b> <b>324</b>; and rigging data v.<b>2</b> <b>325</b>, which requires animation software tool v.<b>3</b> <b>314</b>.</p>
<p id="p-0044" num="0043">As can be seen in example set of dependencies <b>300</b>, any combination of versions of digital assets can be required for a version of an object or other entity. Furthermore, each version of a digital asset can be dependent on a specific version of a software application. As a result, numerous versions of a digital asset and associated tool must be maintained in order to ensure compatibility.</p>
<p id="p-0045" num="0044">An embodiment of the invention maintains dependency information between digital assets and software application tools by creating typed dependency graphs. The typed dependency graph represents each digital asset as a node in a graph. Related digital assets are connected by links in the graph. The data files associated with the digital asset are represented as additional connected nodes. Software application tools are also represented as nodes in the graph. Software application nodes are connected with nodes representing associated digital assets and/or their data files. Each node in the graph can include information identifying its corresponding digital asset, data file, or software application, such as the location of the digital asset, the type of the digital asset, and other information.</p>
<p id="p-0046" num="0045">In an additional embodiment, different versions of a digital asset can be represented in the graph as separate nodes. Nodes representing different versions of the digital asset can be connected with a node representing all versions of the digital asset. In an additional embodiment, nodes of the graph can represent aggregations of two or more digital assets. For example, an aggregate asset can be created representing an object and connected with the nodes representing the digital assets making up the aggregate asset.</p>
<p id="p-0047" num="0046">In an embodiment, nodes of the graph are connected by links. In an embodiment, links include type attributes specifying the type of dependency relationship between nodes. Type attributes can represent one-way dependencies, two-way dependencies, version relationships, variant relationships, subcomponent relationships, aggregation relationships, and tool/digital asset dependencies.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 4A</figref> illustrates an example typed dependency graph <b>400</b> capable of being implemented by an embodiment of the invention. Typed dependency graph <b>400</b> includes a root node <b>405</b> representing an object or other component. Root node <b>405</b> is connected via aggregation graph link <b>410</b><i>a </i>to geometry node <b>415</b><i>a</i>, representing version <b>2</b> of a geometry digital asset. In this example, aggregation graph link <b>410</b><i>a </i>represents the graph nodes, and hence the digital assets, comprising version <b>3</b> of an object.</p>
<p id="p-0049" num="0048">Geometry node <b>415</b><i>a </i>is associated with shading node <b>420</b><i>a</i>, representing version <b>3</b> of a shading digital asset, via two-way dependency graph link <b>417</b><i>a</i>. Additionally, geometry node <b>415</b><i>a </i>is associated with articulation node <b>425</b><i>a</i>, representing version <b>2</b> of an articulation digital asset, via one-way dependency graph link <b>433</b><i>a</i>. Articulation graph node <b>425</b><i>a </i>is associated via one-way dependency graph link <b>427</b><i>a </i>with animation graph node <b>430</b><i>a</i>, representing version <b>4</b> of an animation digital asset.</p>
<p id="p-0050" num="0049">In addition to aggregation and dependency types of graph links, example typed dependency graph <b>400</b> includes tool/digital asset dependency graph links representing the appropriate software applications or tools to be used with digital assets. In example <b>400</b>, tool relationships <b>437</b><i>a </i>associate a software tool application graph node <b>435</b><i>a</i>, representing version <b>9</b> of a software application or tool, with graph nodes <b>415</b><i>a</i>, <b>420</b><i>a</i>, <b>425</b><i>a</i>, and <b>430</b><i>a</i>, indicating that this version of the software application should be used to access or modify the digital assets associated with these graph nodes. Example <b>400</b> includes all of the nodes of version <b>3</b> of the object associated with a single software tool application graph node, and thus with a single software application or tool, for the purposes of illustration; however, in many applications, there may be multiple software applications, and thus many different software tool application graph nodes, associated with the digital assets included in an object.</p>
<p id="p-0051" num="0050">Example typed dependency graph <b>400</b> includes multiple versions of both an aggregate object or component and multiple versions of the associated digital assets. Root node <b>405</b> is connected via aggregation graph link <b>410</b><i>b </i>to geometry node <b>415</b><i>b</i>, representing version <b>3</b> of a geometry digital asset. In this example, aggregation graph link <b>410</b><i>b </i>represents the graph nodes, and hence the digital assets, comprising version <b>4</b> of the object.</p>
<p id="p-0052" num="0051">Geometry node <b>415</b><i>b </i>is associated with shading node <b>420</b><i>b</i>, representing version <b>5</b> of a shading digital asset, via two-way dependency graph link <b>417</b><i>b</i>. Additionally, geometry node <b>415</b><i>b </i>is associated with articulation node <b>425</b><i>a</i>, representing version <b>2</b> of an articulation digital asset, via one-way dependency graph link <b>433</b><i>b</i>. Articulation graph node <b>425</b><i>a </i>is associated via one-way dependency graph link <b>427</b><i>b </i>with animation graph node <b>430</b><i>b</i>, representing version <b>5</b> of an animation digital asset.</p>
<p id="p-0053" num="0052">In addition to aggregation and dependency types of graph links, example typed dependency graph <b>400</b> includes tool/digital asset dependency graph links representing the appropriate software applications or tools to be used with digital assets. In example <b>400</b>, tool relationships <b>437</b><i>b </i>associate a software tool application graph node <b>435</b><i>b</i>, representing version <b>10</b> of a software application or tool, with graph nodes <b>415</b><i>b</i>, <b>420</b><i>b</i>, and <b>430</b><i>b</i>, indicating that this version of the software application should be used to access or modify the digital assets associated with these graph nodes.</p>
<p id="p-0054" num="0053">As shown in example <b>400</b>, a digital asset may be shared among multiple versions of the same object or component. For example, both versions <b>3</b> and <b>4</b> of the object include one-way dependency graph links <b>433</b> with articulation node <b>425</b><i>a</i>, representing version <b>2</b> of an articulation digital asset.</p>
<p id="p-0055" num="0054">In a further embodiment, example typed dependency graph <b>400</b> can include version graph links, indicating related versions of a digital asset. For example geometry nodes <b>415</b><i>a </i>and <b>415</b><i>b</i>, representing versions <b>2</b> and <b>3</b> of a geometry digital asset, are associated via version graph link <b>440</b><i>a</i>. Similarly, geometry nodes <b>420</b><i>a </i>and <b>420</b><i>b</i>, representing versions <b>3</b> and <b>5</b> of a shading digital asset, are associated via version graph link <b>440</b><i>b</i>; animation nodes <b>430</b><i>a </i>and <b>430</b><i>b</i>, representing versions <b>4</b> and <b>5</b> of an animation digital asset, are associated via version graph link <b>440</b><i>c</i>; and application nodes <b>435</b><i>a </i>and <b>435</b><i>b</i>, representing versions <b>9</b> and <b>10</b> of an application, are associated via version graph link <b>440</b><i>d. </i></p>
<p id="p-0056" num="0055">The example typed dependency graph <b>400</b> is intended for purposes of illustration and embodiments of the invention may include simpler or more complex typed dependency graphs with any arbitrary number of graph nodes and graph links, as well as any arbitrary graph topology.</p>
<p id="p-0057" num="0056">In an embodiment, users and applications may perform queries based on one or more graph link types. For example, <figref idref="DRAWINGS">FIG. 4B</figref> illustrates example results <b>450</b> from two example link type queries applied to the example typed dependency graph <b>400</b> described in <figref idref="DRAWINGS">FIG. 4A</figref>, according to an embodiment of the invention.</p>
<p id="p-0058" num="0057">For example, a user or application may query a typed dependency graph based on a single link type and optionally one or more graph nodes. An example of this type of typed dependency graph query may include determining all of the digital assets having a tool relationship with version <b>9</b> of a software application or tool, corresponding with software tool application graph node <b>435</b><i>a</i>. In <figref idref="DRAWINGS">FIG. 4B</figref>, the results of this example query are shown inside box <b>455</b> and include geometry version <b>2</b> <b>415</b><i>a</i>, shading version <b>3</b> <b>420</b><i>a</i>, articulation version <b>2</b> <b>425</b><i>a</i>, and animation version <b>4</b> <b>430</b><i>a. </i></p>
<p id="p-0059" num="0058">In another example, a user or application may query a typed dependency graph based on multiple link types and optionally one or more graph nodes. An example of this type of typed dependency graph query may include determining all of the digital assets having a one-way or two-way dependency relationship with version <b>3</b> of the geometry, corresponding with graph node <b>415</b><i>b</i>. In <figref idref="DRAWINGS">FIG. 4B</figref>, the results of this example query are shown inside box <b>460</b> and include shading version <b>5</b> <b>420</b><i>b</i>, articulation version <b>2</b> <b>425</b><i>a</i>, and animation version <b>5</b> <b>430</b><i>b. </i></p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a method <b>500</b> of creating a dependency graph specifying dependency relationships associated with digital assets and software tools according to an embodiment of the invention. Step <b>505</b> initializes one or more parsing modules for analyzing data files containing digital assets. In an embodiment, parsing modules are software modules adapted to analyze digital assets to determine dependency relationships between two or more digital assets. Parsing modules can be created as needed by system users to integrate different types of digital assets into the system.</p>
<p id="p-0061" num="0060">In an embodiment, a parsing module can be specified with a data file prefix or suffix pattern and an associated data asset type. A data file including the prefix or suffix in its name will be added to the typed dependency graph with the specified prefix or suffix. In further embodiments, a parsing module is a stand-alone or dynamically loaded software module that includes a parser adapted to read a data file and/or its surrounding file system structure to identify one or more digital assets and any associated dependency relationships.</p>
<p id="p-0062" num="0061">Step <b>510</b> defines type mappings to be used by the parsing modules to import digital assets into a dependency graph. In an embodiment, one or more type mappings are specified for each parsing module by a system user. In an embodiment, type mappings include reference-based mapping, structure-based mappings, and tool-based mappings. The parsing modules use reference-based type mappings to analyze the contents of a data file to identify one or more digital assets defined within the data file and to determine dependency relationships between the identified digital assets and other digital assets within the data file or located in other data files. For example, a data file can include definitions of one or more digital assets and dependency relationships. By analyzing the contents of the data file, a parsing module can identify digital assets and associated dependencies.</p>
<p id="p-0063" num="0062">The parsing modules identify structure-based type mappings based on the storage locations of data files in a file system hierarchy or database storage tree. The parsing modules use structure-based type mappings when data files corresponding with digital assets are stored in a hierarchical file system arrangement and the dependency relationships between digital assets can be deduced from data files' storage locations in the hierarchy. For example, a digital asset defined in a first data file stored in a parent directory can be dependent upon a digital asset defined in a second data file stored in a sub-directory. By analyzing the storage locations of digital assets, a parsing module can identify the digital assets and associated dependencies.</p>
<p id="p-0064" num="0063">The parsing modules use tool-based type mappings to define dependencies between digital assets and software tool applications. In an embodiment, the parsing modules apply tool-based type mappings to digital assets identifying using reference-based and structure-based type mappings to define dependencies between these digital assets and one or more software tool applications. Software tool applications can be software applications used to create or modify a digital asset or to utilize the digital asset. In an embodiment, the system can include parsing modules to analyze the source and/or object code of software tool applications. This can be used to track different versions of the software tool applications and enable the recreation of any version of the software tool applications as needed to handle dependent digital assets. In an embodiment, software code called by digital assets, for example simulation programs or shading programs, can be treated by the parsing modules as a dependent digital asset or as a software tool application.</p>
<p id="p-0065" num="0064">Step <b>515</b> traverses the digital asset storage to identify digital assets and their associated dependency relationships. In an embodiment, step <b>515</b> recursively traverses the file system hierarchy or database storage tree starting at a root directory or asset. At each level of the hierarchy, all of the data files and digital assets are added to a traversal queue representing assets to be analyzed.</p>
<p id="p-0066" num="0065">Step <b>520</b> uses the parsing modules to analyze each data file or digital asset in the traversal queue. The parsing modules create graph nodes for the assets in the traversal queue.</p>
<p id="p-0067" num="0066">Step <b>525</b> creates dependency relationships between graph nodes based upon type mappings. In an embodiment, parsing modules first analyze data files associated with a digital asset to identify any reference-based type mappings. If the parsing modules identify explicit or implicit references to other digital assets within the data files associated with a digital asset, the parsing modules create links between the corresponding graph nodes of the appropriate type. In a further embodiment, if parsing modules identify references to additional digital assets that are not part of the graph or in the traversal queue, the parsing module adds these additional assets to the traversal queue.</p>
<p id="p-0068" num="0067">Following the identification of reference-based type mappings, an embodiment of step <b>525</b> uses parsing modules to identify structure-based type mappings. In this embodiment, the storage locations of data files associated with digital assets are compared with each other to determine dependency relationships. For example, a digital asset defined in a first data file stored in a parent directory can be assumed to be dependent upon a digital asset defined in a second data file stored in a sub-directory. As a result, embodiments of parsing modules can create links between the corresponding graph nodes of the appropriate type.</p>
<p id="p-0069" num="0068">Following the application of reference-based and structure-based type mappings, step <b>525</b> applies tool-based type mappings to the identified digital assets. Using the tool-based type mappings, the parsing modules determine an asset type for a digital asset. Based on the asset type, one or more associated software tools can be identified. The parsing modules then create links of the appropriate type between graph nodes corresponding with the digital asset and its associated software tools. In an embodiment, as a digital asset is first processed, the links between the digital asset and an associated software tool are created to reference the current version of the software tool. If the software tool is updated to a new version, the link to prior version of the software tool is maintained to ensure compatibility.</p>
<p id="p-0070" num="0069">In a further embodiment, the source code files of a software tool are integrated into the typed dependency graph. In the typed dependency graph, the source code files and their dependencies are represented as nodes and links. Digital assets linked to a version of the software tool are linked to the nodes representing the source code for that version. As the source code for a software tool is updated, new nodes representing the updated source code files are created. However, the unmodified source code files and corresponding nodes and links are maintained as necessary for compatibility with any associated digital assets.</p>
<p id="p-0071" num="0070">Following step <b>525</b>, an embodiment of method <b>500</b> returns to step <b>515</b> to traverse any remaining portions of the digital asset storage. Steps <b>515</b> through <b>525</b> can be repeated as necessary to identify and analyze all of the digital assets and associated software tools currently in use.</p>
<p id="p-0072" num="0071">Once graph nodes and links have been created for all of the digital assets and associated software tools, step <b>530</b> stores the complete typed dependency graph. The typed dependency graph can be stored as one or more data files or in a database system.</p>
<p id="p-0073" num="0072">As digital assets are added, removed, or updated, the typed dependency graph is updated. <figref idref="DRAWINGS">FIG. 6</figref> illustrates a method <b>600</b> of adding or removing digital assets from a dependency graph according to an embodiment of the invention. In step <b>605</b>, a graph update policy is set by a user. In some applications, updating the dependency graph is very time consuming if many changes have been made. Thus, to improve the responsiveness of the system and reduce computation time, an embodiment of method <b>600</b> supports a number of different graph update policies. For example, a graph update policy can specify that the dependency graph is to be updated immediately following any change; according to a predetermined schedule; when a predetermined number or proportion of nodes have been added, removed, or modified; when a specified user or software application attempts to access the dependency graph or a digital asset associated with a modified node; and/or upon the occurrence of a specified event. In a further embodiment, the dependency graph system is interfaced with an asset versioning system. In this embodiment, the graph update policy can specify that the dependency graph is to be updated when a new version of a digital asset or software tool is created.</p>
<p id="p-0074" num="0073">Step <b>610</b> receives additions, deletions, or other updates of files or assets. Files or assets can be provided by the user or by automated processes. For each deleted or modified file or asset, step <b>615</b> marks the corresponding node in the dependency graph as &#x201c;dirty.&#x201d; For added files, step <b>615</b> creates a new corresponding node and marks it as dirty. Assets are marked as dirty to indicate to the system that dependencies between this asset and the other assets need to be determined.</p>
<p id="p-0075" num="0074">Step <b>620</b> applies the graph update policy as specified in step <b>605</b>. If the graph update policy is satisfied, method <b>600</b> proceeds to step <b>625</b> to update the graph. Otherwise, method <b>600</b> proceeds back to step <b>610</b> to await the receipt of additional added, deleted, or modified files.</p>
<p id="p-0076" num="0075">In an embodiment, step <b>625</b> updates the typed dependency graph using the method <b>500</b> discussed above. In a further embodiment, step <b>625</b> performs a modified version of method <b>500</b>. In this embodiment, only the nodes that are marked dirty are initially traversed and parsed to update dependency graph. If the updates to the dependency graph affect other nodes, then these affected nodes are also marked as dirty and traversed as well.</p>
<p id="p-0077" num="0076">In still a further embodiment of step <b>625</b>, filters can be specified to omit nodes from the graph update based on the dependency type, the dependency weight, the age of the dependency, the file or asset type or age, or any other criteria of the file or asset or of the dependency graph itself.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a method <b>700</b> of accessing digital assets associated with a dependency graph according to an embodiment of the invention. Assets can be accessed in a variety of contexts. Events such as building, compiling or installing assets; rendering; or other user-defined events may require a complete set of interdependent assets to be loaded and processed as a group. Method <b>700</b> enables access to a complete set of digital assets required for these events.</p>
<p id="p-0079" num="0078">Step <b>705</b> receives an asset event indicator and a loaded asset list. The asset event indicator informs the system that an asset event, such as building, compiling or installing assets; rendering; or other user-defined events, has been initiated. The loaded asset list is a list of assets previously loaded for a previous instance of this event. The list of loaded assets can be generated upon completion of a previous instance of an event to specify the complete set of assets used during the event.</p>
<p id="p-0080" num="0079">Step <b>710</b> locates the root asset in the dependency graph corresponding with this event. Typically, the root asset is the shot or scene being processed by the event.</p>
<p id="p-0081" num="0080">Step <b>715</b> traverses the graph from the root node through all of its dependent nodes. For each traversed node, step <b>715</b> compares the asset associated with the node with the corresponding asset on the list of loaded assets.</p>
<p id="p-0082" num="0081">Step <b>720</b> creates a dependency for each asset loaded in the previous event and its corresponding asset in the current event.</p>
<p id="p-0083" num="0082">Following method <b>700</b>, the resulting dependency relationships between assets in events can be used in a number of ways. Assets that were missed by the dependency analyzer but loaded during an event can be detected and added to the dependency graph. Additionally, administrators can use this information to debug or optimize the dependency analyzer and associated parsers to ensure that the dependency analysis is neither over-inclusive or under-inclusive.</p>
<p id="p-0084" num="0083">In addition to maintaining a typed dependency graph of assets, an embodiment of the invention allows specific combinations of assets to be locked or grouped together into higher-level aggregate assets. These aggregate assets can be used to avoid compatibility problems with changing assets and ensure that shots or sequences can be replicated as the assets in a production evolve.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 8</figref> illustrates example versions of an aggregate asset <b>800</b> and associated labels capable of being implemented by an embodiment of the invention. An aggregate asset is defined as any group of two or more files or digital assets. Regardless of the number of assets included in an aggregate asset, an embodiment of the invention can treat the aggregate asset as a single distinct entity. In an embodiment, different versions of an aggregate asset can be created manually or automatically as the assets within the aggregate asset are modified.</p>
<p id="p-0086" num="0085">For example, aggregate asset of an object can include geometry, shading and rigging assets. In this example, a first version of the aggregate asset is object v.<b>1</b> <b>820</b> and includes a first version of a geometry asset, geometry v.<b>1</b> <b>822</b>, a first version of a shading asset, shading v.<b>1</b> <b>824</b>, and a first version of a rigging asset, rigging v.<b>1</b> <b>826</b>.</p>
<p id="p-0087" num="0086">As the assets within the aggregate asset are modified, additional versions of the aggregate asset can automatically be created. For example, a second version of the aggregate asset is object v.<b>2</b> <b>830</b> and includes a second version of a geometry asset, geometry v.<b>2</b> <b>836</b>, a seventh version of a shading asset, shading v.<b>7</b> <b>832</b>, and a second version of a rigging asset, rigging v.<b>2</b> <b>834</b>. In this example, it can be seen that the assets within an aggregate asset do not have to be fixed as the same version.</p>
<p id="p-0088" num="0087">Similarly, a third version of the aggregate asset is object v.<b>3</b> <b>840</b> and includes a third version of a geometry asset, geometry v.<b>3</b> <b>844</b>, the seventh version of a shading asset, shading v.<b>7</b> <b>832</b>, and the second version of a rigging asset, rigging v.<b>2</b> <b>834</b>. In this example, it can be seen that the assets within an aggregate asset can be reused in multiple versions of the same aggregate asset, such as the rigging asset <b>834</b> and shading asset <b>832</b>. as the same version</p>
<p id="p-0089" num="0088">Additionally, the versions of an aggregate asset can be manually or automatically assigned labels indicating their function or role in a digital production. For example, the most recent version of an aggregate asset can be automatically assigned the label of &#x201c;latest&#x201d; to indicate that it is the most recent version of the asset. In this example, the third version of the aggregate asset object v.<b>3</b> <b>840</b> is assigned the label of &#x201c;latest&#x201d; <b>815</b>. Users such as technical directors, modelers, riggers, and texture and shading artists that are involved in the creation or development of assets will often need to work with the aggregate asset labeled as latest. In an embodiment, the system can automatically assign the label of &#x201c;latest&#x201d; upon the automatic or manual creation of a newer version of an aggregate asset.</p>
<p id="p-0090" num="0089">In addition, a version of the aggregate asset can be labeled as &#x201c;stable,&#x201d; indicating that it is the most recent version of the aggregate asset that is suitable for use in a production. In this example, the first version of the aggregate asset object v.<b>1</b> <b>820</b> may be assigned a label of stable <b>805</b>. Users such as animators, lighting designers, and set designers may typically use the aggregate asset labeled as stable to create shots and scenes.</p>
<p id="p-0091" num="0090">Users and developers can define additional labels for any purpose. Moreover, users and developers can specify criteria for automatically applying and updating the labels associated with aggregate assets. Additionally, users can manually apply, update, or remove labels associated with aggregate assets.</p>
<p id="p-0092" num="0091">In a further example, as the development of new versions of aggregate assets progress, the asset creators may determine that a newer version of the aggregate asset is suitable for production use. The asset creators may then direct the system to transfer the label of &#x201c;stable&#x201d; to the newer version of the asset. In this example, the label of stable is transferred from object v.<b>1</b> <b>820</b> to the newer version of this aggregate asset object v.<b>2</b> <b>830</b> upon the determination that this version of the aggregate asset is suitable for use in a production.</p>
<p id="p-0093" num="0092">In an embodiment, users can refer or reference aggregate assets according to their labels. For example, a shot can be constructed with reference to the &#x201c;stable&#x201d; version of the aggregate asset. When this label is transferred to a different version of an aggregate asset, the usage of that aggregate asset in this shot will automatically be updated to reference the version of the aggregate asset currently labeled as stable. This automatic update can be overridden through the use of &#x201c;pins,&#x201d; which are discussed in detail below.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a method <b>900</b> of creating an initial version of an aggregate asset according to an embodiment of the invention. In step <b>905</b>, a new asset is created, or an asset is entered into the change isolation system by a user. Step <b>910</b> parses the assets and/or associated asset files and creates a dependency graph for the aggregate asset. In an embodiment, step <b>905</b> processes assets according to method <b>500</b> discussed above.</p>
<p id="p-0095" num="0094">Step <b>915</b> assigns a version number to the aggregate asset. If this is the first version of the aggregate asset, then the asset is assigned a version of 1. Step <b>920</b> assigns the label of &#x201c;latest&#x201d; to the aggregate asset to indicate that it is the most recent version of this aggregate asset. Optional step <b>925</b> may also assign the label of &#x201c;stable&#x201d; to this version of the aggregate asset. In an embodiment, step <b>925</b> is skipped, and the user can manually apply the label of &#x201c;stable&#x201d; to versions of aggregate assets after evaluation and/or testing.</p>
<p id="p-0096" num="0095">In further embodiments, additional optional steps may evaluate criteria associated with the asset and to apply a user defined label to the asset if the criteria is satisfied.</p>
<p id="p-0097" num="0096">Optional step <b>930</b> updates parent assets to the added aggregate asset. For example, if the added asset is a subset of a parent aggregate asset, then step <b>930</b> updates the parent aggregate asset to reference the newly added version of the aggregate asset. In an embodiment, step <b>930</b> updates the parent aggregate asset by updating its version number and optionally moving its associated labels, such as the parent aggregate asset's &#x201c;latest&#x201d; label. Step <b>930</b> may additionally update the dependency graph associated with the parent aggregate asset.</p>
<p id="p-0098" num="0097">In an example, an animator may want to use the most recent stable version of an aggregate asset while creating a shot. In this circumstance, the animator may reference the aggregate asset in the shot using the &#x201c;stable&#x201d; label to ensure that the aggregate asset is automatically updated as new stable versions of the aggregate asset are completed.</p>
<p id="p-0099" num="0098">However, in some circumstances, a user may want to ensure that the version of an aggregate asset used in a shot or scene is not changed when the aggregate asset is updated. For example, after an animator has finished a shot or scene, he or she may want to prevent further automatic updates to the aggregate asset to ensure that future versions of the aggregate asset do not &#x201c;break&#x201d; or alter completed scenes. To override the automatic updates associated with labels, users can &#x201c;pin&#x201d; or isolate a reference to an aggregated asset. When a reference to an aggregated asset is pinned, the current version of the aggregate asset associated with this reference is determined. The pinned reference will then remained fixed to this version of the aggregated asset, even if the label initially used to reference the aggregated asset is moved to a different version.</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 10</figref> illustrates a method <b>1000</b> of isolating an asset dependency for compatibility according to an embodiment of the invention. Step <b>1005</b> receives the selection of a reference to an asset to pin or isolate from further changes. Step <b>1010</b> assigns the pin to the current version of the asset. Step <b>1015</b> updates the selected asset reference so that it points directly to the pinned asset, rather than to a label that may be moved. Step <b>1020</b> then updates one or more pin manifest files. The pin manifest files are used by the system to determine which references are using a given pinned asset. For example, a pin manifest file can be used to specify the asset or assets that are pinned, where the pinned assets are located or defined, and the user, shot, or other entity that is requesting the pinned asset. In an embodiment, there is a pin manifest file in each shot directory specifying all pins for the shot and a pin manifest file in each asset directory telling where asset has been pinned. The pin manifest files can be further used to determine if there are any references to a given version of an asset. If not, then that version of the asset may be deleted or archived if it is an older version of the aggregate asset.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIGS. 11A-11B</figref> illustrate example systems suitable for implementing an embodiment of the invention. <figref idref="DRAWINGS">FIG. 11A</figref> illustrates a computer system <b>1105</b> and a storage system <b>210</b>.</p>
<p id="p-0102" num="0101">In embodiments of the present invention, computer system <b>1105</b> renders a scene based upon a geometric description of a scene from storage system <b>1110</b>. In embodiments of the invention, computer system <b>1105</b> may include one or more computer servers. Storage system <b>1110</b>, may include any organized and repeatable way to access the assets including object models, lighting models, camera models, and the like. For example, in one embodiment, storage system <b>1110</b> includes a simple flat-directory structure on local drive or network drive, or the like. Additionally, locations of object models may be specified by absolute file path locations, relative file paths, aliases, and the like. In an embodiment, assets are stored in files. Each file can include one or more assets and/or each asset can be defined by one or more files. In further embodiments, symbolic links can be used to represent labels and references to assets.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 11B</figref> illustrates another embodiment of the present invention including a computer system coupled to a database. A computer system <b>155</b>, a database management system (dbms) <b>1160</b>, and a database <b>1165</b> are used to store and process assets. In embodiments of the invention, computer system <b>1155</b> may include one or more computer servers. Database management system <b>1160</b> and database <b>1165</b> can be a relational database or any other type of database system. In this embodiment, assets can be represented as database tables, database objects, files referenced by a database, or any other type of entity capable of being manipulated by a database.</p>
<p id="p-0104" num="0103">Further embodiments can be envisioned to one of ordinary skill in the art after reading the attached documents. In other embodiments, combinations or sub-combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks, additions of new blocks, re-arrangement of blocks, and the like are contemplated in alternative embodiments of the present invention.</p>
<p id="p-0105" num="0104">The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of defining a component including a plurality of digital assets, the method comprising:
<claim-text>receiving a component request specifying at least one requested graph link type;</claim-text>
<claim-text>receiving a typed dependency graph representing digital assets, wherein the typed dependency graph includes graph nodes corresponding with the digital assets and includes typed graph links connecting the graph nodes, wherein each typed graph link includes one of a plurality of graph link types representing a type of digital asset relationship between at least two of the digital assets;</claim-text>
<claim-text>adding at least one of the graph nodes to a graph node processing set;</claim-text>
<claim-text>selecting and removing a first graph node from the graph node processing set;</claim-text>
<claim-text>comparing, by operation of one or more computer processors, at least a first typed graph link connected with the first graph node with the requested graph link type;</claim-text>
<claim-text>determining if a first graph link type included in the first typed graph link is consistent with the requested graph link type;</claim-text>
<claim-text>adding a second graph node connected with the first typed graph link to the graph node processing set in response to the determination that the first graph link type included in the first typed graph link is consistent with the requested graph link type;</claim-text>
<claim-text>wherein each digital asset is associated with a type mapping that is selected from a group consisting of reference-based mapping, structure-based mapping, and software tool-based mapping; and</claim-text>
<claim-text>wherein each graph link type is selected from a group consisting of one-way digital asset dependencies, two-way digital asset dependencies, digital asset version relationships, digital asset aggregation relationships, and tool/digital asset dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein selecting the first graph node from the graph node processing set comprises:
<claim-text>selecting the first graph node from the graph node processing set in a breadth-first order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein selecting the first graph node from the graph node processing set comprises:
<claim-text>selecting the first graph node from the graph node processing set in a depth-first order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:
<claim-text>determining if the graph node processing set is empty; and</claim-text>
<claim-text>repeating the steps of selecting and removing, comparing, determining, and adding for at least one additional graph node in response to the determination that the graph node processing set is not empty.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, comprising:
<claim-text>determining a subgraph including the graph nodes associated with graph links consistent with the requested graph link type; and</claim-text>
<claim-text>providing the subgraph in response to the component request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the subgraph corresponds with a portion of the digital assets representing at least a portion of a component.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the portion of the component includes one of a plurality of versions of the component.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the portion of the component includes one of a plurality of variants of the component.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the portion of the component includes one of a plurality of subcomponents of the component.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:
<claim-text>performing an operation on at least a portion of the graph nodes includes in the graph node processing list.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the digital assets includes digital asset data files.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the digital assets includes digital asset database records.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving a typed dependency graph representing digital assets comprises:
<claim-text>receiving a specification of the digital assets;</claim-text>
<claim-text>parsing the specification of the digital assets to identify digital asset relationships between the digital assets;</claim-text>
<claim-text>determining types for at least a portion of the identified digital asset relationships; and</claim-text>
<claim-text>assigning the types of the identified digital asset relationships to the typed graph links corresponding with the identified digital asset relationship.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method of defining a component including a plurality of digital assets, the method comprising:
<claim-text>receiving a specification of digital assets;</claim-text>
<claim-text>receiving a set of graph link types defining a set of types of links between digital assets;</claim-text>
<claim-text>parsing the specification of digital assets to identify digital assets associated with a component;</claim-text>
<claim-text>creating graph nodes corresponding with the identified digital assets;</claim-text>
<claim-text>parsing the specification of digital assets to identify digital asset relationships between the identified digital assets;</claim-text>
<claim-text>classifying the identified digital asset relationships using the set of graph link types, such that each of the identified digital asset relationships is associated with at least one of the set of graph link types; and</claim-text>
<claim-text>creating, by operation of one or more computer processors, a typed dependency graph representing the component, wherein the typed dependency graph includes typed graph links connecting the graph nodes and corresponding with the identified digital asset links between the identified digital assets;</claim-text>
<claim-text>wherein the typed graph links are associated with the graph link types of their corresponding identified digital asset relationships;</claim-text>
<claim-text>wherein the typed dependency graph includes a root graph node representing the component and connected with a set of typed graph links associated with each of the set of graph link types;</claim-text>
<claim-text>wherein each digital asset is associated with a type mapping that is selected from a group consisting of reference-based mapping, structure-based mapping, and software tool-based mapping; and</claim-text>
<claim-text>wherein each graph link type within the set of graph link types is selected from a group consisting of one-way digital asset dependencies, two-way digital asset dependencies, digital asset version relationships, digital asset aggregation relationships, and tool/digital asset dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the specification of digital assets includes digital asset data files.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the specification of digital assets includes digital asset database records.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein a portion of the typed graph links specifies one of a plurality of versions of a component.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein a portion of the typed graph links specifies one of a plurality of variants of the component.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein a portion of the typed graph links specifies one of a plurality of subcomponents of the component.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A non-transitory computer-readable storage medium, including instructions that, when executed by a processor, cause the processor to define a component including a plurality of digital assets, by performing the steps of:
<claim-text>receiving a component request specifying at least one requested graph link type;</claim-text>
<claim-text>receiving a typed dependency graph representing digital assets, wherein the typed dependency graph includes graph nodes corresponding with the digital assets and includes typed graph links connecting the graph nodes, wherein each typed graph link includes one of plurality of graph link types representing a type of digital asset relationship between at least two of the digital assets;</claim-text>
<claim-text>adding at least one of the graph nodes to a graph node processing set;</claim-text>
<claim-text>selecting and removing a first graph node from the graph node processing set;</claim-text>
<claim-text>comparing at least a first typed graph link connected with the first graph node with the requested graph link type;</claim-text>
<claim-text>determining if a first graph link type included in the first typed graph link is consistent with the requested graph link type;</claim-text>
<claim-text>adding a second graph node connected with the first typed graph link to the graph node processing set in response to the determination that the first graph link type included in the first typed graph link is consistent with the requested graph link type;</claim-text>
<claim-text>wherein each digital asset is associated with a type mapping that is selected from a group consisting of reference relationships, structure relationships, and software tool relationships; and</claim-text>
<claim-text>wherein each graph link type within the set of graph link types is selected from a group consisting of one-way digital asset dependencies, two-way digital asset dependencies, digital asset version relationships, digital asset aggregation relationships, and tool/digital asset dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer-readable storage medium of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein selecting the first graph node from the graph node processing set comprises:
<claim-text>selecting the first graph node from the graph node processing set in a breadth-first order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer-readable storage medium of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein selecting the first graph node from the graph node processing set comprises:
<claim-text>selecting the first graph node from the graph node processing set in a depth-first order.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer-readable storage medium of <claim-ref idref="CLM-00020">claim 20</claim-ref>, comprising:
<claim-text>determining if the graph node processing set is empty; and</claim-text>
<claim-text>repeating the steps of selecting and removing, comparing, determining, and adding for at least one additional graph node in response to the determination that the graph node processing set is not empty.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

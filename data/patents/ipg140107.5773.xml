<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626878-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626878</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12436740</doc-number>
<date>20090506</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>742</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>177</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
<further-classification>709203</further-classification>
<further-classification>719315</further-classification>
</classification-national>
<invention-title id="d2e53">Techniques for establishing a connection with a message-oriented middleware provider, using information from a registry</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6877107</doc-number>
<kind>B2</kind>
<name>Giotta et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  43</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7634550</doc-number>
<kind>B2</kind>
<name>Wolber et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0105800</doc-number>
<kind>A1</kind>
<name>Cullen</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0028212</doc-number>
<kind>A1</kind>
<name>Lok et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37926509</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0044197</doc-number>
<kind>A1</kind>
<name>Lai</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Examiner Interview Summary mailed Mar. 11, 2009&#x201d;, 1 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Non Final Office Action mailed Aug. 13, 2008&#x201d;, 15 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Notice of Allowance mailed Mar. 11, 2009&#x201d;, 5 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Response filed Jul. 15, 2008 to Restriction Requirement mailed Jun. 16, 2008&#x201d;, 6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Response filed Dec. 12, 2008 to Non Final Office Action mailed Aug. 13, 2008&#x201d;, 10 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Restriction Requirement mailed Jun. 16, 2008&#x201d;, 7 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>&#x201c;U.S. Appl. No. 10/829,875, Summary of Examiner Interview filed May 7, 2009&#x201d;, 2 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Notice of Allowance for U.S. Appl. No. 10/829,875, Mailed Mar. 11, 2009, 10 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Office Action for U.S. Appl. No. 10/829,875, Mailed Aug. 13, 2008, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709 27-228</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719315</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>12</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10829875</doc-number>
<date>20040421</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7634550</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12436740</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090217293</doc-number>
<kind>A1</kind>
<date>20090827</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wolber</last-name>
<first-name>Andreas</first-name>
<address>
<city>Heidelberg</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Follmeg</last-name>
<first-name>Bernd</first-name>
<address>
<city>Weinheim</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Wolber</last-name>
<first-name>Andreas</first-name>
<address>
<city>Heidelberg</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Follmeg</last-name>
<first-name>Bernd</first-name>
<address>
<city>Weinheim</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schwegman Lundberg &#x26; Woessner, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>SAP AG</orgname>
<role>03</role>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Patel</last-name>
<first-name>Haresh N</first-name>
<department>2493</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method, apparatus, and system are provided for a Message-Oriented Middleware (MOM) provider having multiple logical MOM server instances. In an embodiment, the MOM provider having multiple logical MOM server instances is implemented on an application server. Each MOM server instance may include a session container to manage one or more sessions and a destination container to provide one or more destinations. In an embodiment, a globally unique identifier identifies each destination.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="168.99mm" wi="228.35mm" file="US08626878-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="126.49mm" wi="166.79mm" orientation="landscape" file="US08626878-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="241.05mm" wi="145.88mm" file="US08626878-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="231.22mm" wi="171.37mm" orientation="landscape" file="US08626878-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="183.73mm" wi="155.62mm" orientation="landscape" file="US08626878-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="227.75mm" wi="171.37mm" orientation="landscape" file="US08626878-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="197.61mm" wi="158.83mm" orientation="landscape" file="US08626878-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="227.08mm" wi="184.23mm" file="US08626878-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="226.40mm" wi="170.94mm" orientation="landscape" file="US08626878-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="199.14mm" wi="144.95mm" file="US08626878-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="194.99mm" wi="146.81mm" file="US08626878-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="140.46mm" wi="162.31mm" orientation="landscape" file="US08626878-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="192.28mm" wi="145.20mm" orientation="landscape" file="US08626878-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a division of and claims priority to U.S. application Ser. No. 10/829,875, now U.S. Pat. No. 7,634,550, filed on Apr. 21, 2004, the disclosure of which is incorporated herein by reference in its entirety for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">Embodiments of the invention generally relate to the field of Message-Oriented Middleware (MOM) and more particularly, to a MOM provider having multiple MOM server instances.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Traditional client-server systems employ a two-tiered architecture such as that illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. Applications <b>102</b> executed on the client side <b>100</b> of the two-tiered architecture are comprised of a monolithic set of program code including a graphical user interface component, presentation logic, business logic and a network interface that enables client <b>100</b> to communicate over network <b>103</b> with one or more servers <b>101</b>. A database <b>104</b> maintained on server <b>101</b> provides non-volatile storage for the data accessed and/or processed by application <b>102</b>.</p>
<p id="p-0005" num="0004">As is known in the art, the &#x201c;business logic&#x201d; component of the application represents the core of the application, for example, the rules governing the underlying business process (or other functionality) provided by the application. The &#x201c;presentation logic&#x201d; describes the specific manner in which the results of the business logic are formatted for display on the user interface. The &#x201c;database&#x201d; <b>104</b> includes data access logic used by the business logic to store and retrieve data.</p>
<p id="p-0006" num="0005">The limitations of the two-tiered architecture illustrated in <figref idref="DRAWINGS">FIG. 1</figref> become apparent when employed within a large enterprise. For example, installing and maintaining up-to-date client-side applications on a large number of different clients is a difficult task, even with the assistance of automated administration tools. Moreover, a tight coupling of business logic, presentation logic and the user interface logic makes the client-side code very brittle. Changing the client-side user interface of such applications is extremely hard without breaking the business logic, and vice versa. This problem is aggravated by the fact that, in a dynamic enterprise environment, the business logic may be changed frequently in response to changing business rules. Accordingly, the two-tiered architecture is an inefficient solution for enterprise systems.</p>
<p id="p-0007" num="0006">In response to limitations associated with the two-tiered client-server architecture, a multi-tiered architecture has been developed, as illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. In the multi-tiered system, presentation logic <b>221</b>, business logic <b>222</b> and database <b>223</b> are logically separated from the user interface <b>220</b>. These layers are moved off of client <b>225</b> to one or more dedicated servers on network <b>203</b>. For example, presentation logic <b>221</b>, business logic <b>222</b>, and database <b>223</b> may each be maintained on separate servers, <b>226</b>, <b>227</b> and <b>228</b>, respectively.</p>
<p id="p-0008" num="0007">This separation of logic components and the user interface provides a more flexible and scalable architecture compared to that provided by the two-tier model. For example, the separation ensures that all clients <b>225</b> share a single implementation of business logic <b>222</b>. If business rules change, changing the current implementation of business logic <b>222</b> to a new version may not require updating any client-side program code. In addition, presentation logic <b>221</b> may be provided which generates code for a variety of different user interfaces <b>220</b>, which may be standard browsers such as Internet Explorer&#xae; or Netscape Navigator&#xae;.</p>
<p id="p-0009" num="0008">Although the multi-tiered system illustrated in <figref idref="DRAWINGS">FIG. 2</figref> provides a more flexible architecture, it also results in significant additional complexity. For example, the distributed nature of applications and components within the multi-tiered system makes it more complicated for the applications and components to communicate with each other. A class of middleware known as Message-Oriented Middleware may be used to facilitate communication between applications and components.</p>
<p id="p-0010" num="0009">Message-Oriented Middleware (MOM) refers to computer software that provides a message service between software components or applications. The message service provided by MOM is often referred to as &#x201c;loosely coupled&#x201d; because a component sends a message to a destination and the recipient can retrieve the message from the destination. A message service typically includes a message provider and one or more clients. The message provider facilitates, for example, creating, sending, receiving, and reading messages. A client uses the message provider to, for example, send a message to a destination and another client may use the message provider to retrieve the message from the destination.</p>
<p id="p-0011" num="0010">Although the message service facilitates communication between distributed software components and applications, it also reduces some of the flexibility of the multi-tiered architecture. For example, the scalability of the multi-tiered architecture may be constrained by the capacity of a central message provider. Also, a central message provider requires a relatively brittle namespace scheme to ensure that messages are properly delivered.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0012" num="0011">A method, apparatus, and system are provided for a Message-Oriented Middleware (MOM) provider having multiple logical MOM server instances. In an embodiment, the MOM provider having multiple logical MOM server instances is implemented on an application server. Each MOM server instance may include a session container to manage one or more sessions and a destination container to provide one or more destinations. In an embodiment, each destination is identified by a globally unique identifier.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012">Embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a traditional two-tier client-server architecture.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a prior art multi-tier client-server architecture.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of a Message-Oriented Middleware (MOM) provider implemented according to an embodiment of the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of selected elements of an application server implemented according to an embodiment of the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of selected elements of the &#x201c;configuration facilities&#x201d; for an MOM provider, according to an embodiment of the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>is a conceptual illustration of the administered objects stored in a registry service, according to an embodiment of the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>is a conceptual illustration of the internal configuration entities that define separate MOM server instances, according to an embodiment of the invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 7</figref> is a Unified Modeling Language (UML) diagram illustrating the data model described above with reference to tables 1-6.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 8</figref><i>a </i>is a flow diagram illustrating certain aspects of a method for accessing an MOM provider having multiple logical MOM server instances, according to an embodiment of the invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 8</figref><i>b </i>is a flow diagram illustrating certain aspects of a method for employing an MOM provider having multiple server instances, according to an embodiment of the invention.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram illustrating objects in a registry service, according to an embodiment of the invention.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram of a computing device implemented according to an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0026" num="0025">A method, apparatus, and system are provided for a Message-Oriented Middleware (MOM) provider having multiple logical MOM server instances. In an embodiment, the MOM provider having multiple logical MOM server instances is implemented on an application server. Each MOM server instance may include a session container to manage one or more sessions and a destination container to provide one or more destinations. In an embodiment, a globally unique identifier identifies each destination. As is further described below, in an embodiment, each of the multiple logical MOM server instances is defined by a configuration entity.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of MOM provider <b>300</b> implemented according to an embodiment of the invention. As is further discussed below, MOM provider <b>300</b> may be integrated into a multi-tiered network (e.g., the multi-tiered network illustrated in <figref idref="DRAWINGS">FIG. 2</figref>). The multi-tiered network may be implemented using a variety of different application technologies at each of the layers of the multi-tier architecture, including those based on the Java 2 Enterprise Edition&#x2122; (&#x201c;J2EE&#x201d;) platform, the Microsoft .NET platform, the Websphere platform developed by IBM Corporation, and/or the Advanced Business Application Programming (&#x201c;ABAP&#x201d;) platform developed by SAP AG.</p>
<p id="p-0028" num="0027">In an embodiment, MOM provider <b>300</b> is implemented on an application server. The term &#x201c;application server&#x201d; broadly refers to a computing device that performs data processing. In a multi-tiered environment, such as the one illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, application servers may provide the business logic for the distributed system. In an embodiment in which the business logic (e.g., business logic <b>222</b>, shown in <figref idref="DRAWINGS">FIG. 2</figref>) exchanges information with a user interface (e.g., user interface <b>220</b>, shown in <figref idref="DRAWINGS">FIG. 2</figref>) via the Internet, the application servers providing the business logic may be described as Web application servers.</p>
<p id="p-0029" num="0028">In an embodiment, MOM provider <b>300</b> is separated into two main layers: session container <b>302</b> and destination container <b>304</b>. Session container <b>302</b> is responsible for session and connection related tasks. The term &#x201c;session&#x201d; refers to an active connection between two elements of a distributed system (e.g., between two applications, between two components, between an application and a component, etc.). The term &#x201c;connection&#x201d; refers to a connection between an MOM client and the MOM provider.</p>
<p id="p-0030" num="0029">In an embodiment, when a client creates an MOM connection (e.g., via a directory lookup) the connection is bound to a session container (e.g., session container <b>302</b>). All sessions created on the connection may also be bound to the session container. In an embodiment, session container <b>302</b> may manage the connections and sessions of multiple clients (e.g., client <b>306</b>). Establishing a connection is further discussed below with reference to <figref idref="DRAWINGS">FIG. 8-9</figref>.</p>
<p id="p-0031" num="0030">In one embodiment, session container <b>302</b> includes a logical session agent <b>308</b> for each session it is managing. Session agent <b>308</b> may process (and/or preprocess) all requests for an MOM session using one or more logical handlers. The term &#x201c;handler&#x201d; refers to a software routine that performs a particular task. Examples of handlers provided by session agent <b>308</b> may include, and are not limited to, security management, logging, monitoring, transaction management, etc.</p>
<p id="p-0032" num="0031">In operation, client <b>306</b> may send an MOM message to dispatcher <b>310</b> to be distributed to a destination. Session container <b>302</b> may accept the message and forward it to session agent <b>308</b>. Session agent <b>308</b> may process the message and send it to router <b>312</b>. Router <b>312</b> may be a logical component that transmits messages between session container <b>302</b> and destination container <b>304</b>. Router <b>312</b> may include router code and/or may use the internal communication system of the application server.</p>
<p id="p-0033" num="0032">Destination container <b>304</b> is responsible for executing the core messaging functions of storing messages (e.g., in volatile memory and/or persistently), maintaining the order of messages, and distributing the messages to the proper recipients. In one embodiment, destination container <b>304</b> includes all of the destination agents (e.g., queue agent <b>314</b> and topic agent <b>316</b>) that are bound to the application server on which destination container <b>304</b> is implemented. The term &#x201c;destination agent&#x201d; refers to a software agent that is responsible for handling the messaging operations of a particular destination. In an embodiment, the destination agents are maintained in volatile memory as data structures for all destinations that are &#x201c;active.&#x201d; The term &#x201c;active&#x201d; may refer to a destination that has at least one consumer or producer attached.</p>
<p id="p-0034" num="0033">MOM provider <b>300</b> may support one (or both) of the messaging schemes known as point-to-point and publish/subscribe messaging. In point-to-point messaging, each message is addressed to a specific queue. The term &#x201c;queue&#x201d; refers to a storage space either in memory or a persistent store (e.g., a database) for messages that are addressed to a particular client. A client establishes the queue to hold its messages. The queue may retain all messages sent to it until the messages are consumed or until they are expired.</p>
<p id="p-0035" num="0034">In a publish/subscribe messaging scheme a client addresses a message to a topic. The term &#x201c;topic&#x201d; refers to a storage space either in memory or a persistent store (e.g., a database) for messages that may be accessed by clients that subscribe to the topic. The topic may retain messages for as long as it takes to distribute the messages to all clients.</p>
<p id="p-0036" num="0035">In an embodiment, queue agent <b>314</b> handles all messages for a particular queue (e.g., a queue in database <b>320</b> and/or in volatile memory). In one embodiment, queue agent <b>314</b> manages the order of messages within an associated queue. In such an embodiment, a separate queue agent <b>314</b> exists for each queue managed by destination container <b>304</b>.</p>
<p id="p-0037" num="0036">In an embodiment, topic agent <b>316</b> handles all messages sent to an associated topic. In such an embodiment, topic agent <b>316</b> includes logic to maintain the associated topic in volatile memory. In addition, topic agent <b>316</b> may include memory swapping logic to swap data between volatile memory and, for example, database <b>320</b>. In an alternative embodiment, topic agent <b>316</b> includes logic to maintain the associated topic on database <b>320</b> (in addition to or instead of maintaining the topic in volatile memory).</p>
<p id="p-0038" num="0037">In one embodiment, distribution manager <b>321</b> creates agents, as needed, for MOM provider <b>300</b> and its logical MOM server instances. For example, distribution manager <b>321</b> may create session agent <b>308</b>, queue agent <b>314</b>, and/or topic agent <b>316</b>, as needed. In an alternative embodiment, destination agents (e.g., queue agent <b>314</b> and/or topic agent <b>316</b>) are created by an appropriate AgentHandler for each destination that becomes active. In addition, session contexts may implement the functionality of session agents <b>308</b>. A SessionHandler for each client session may create a session context and the session context may be stored in the corresponding connection context.</p>
<p id="p-0039" num="0038">In an embodiment, router <b>312</b> and distribution manager <b>321</b> make use of one or more directories and repositories that store information for MOM provider <b>300</b>. In an embodiment, destination registry <b>322</b> stores the physical location of the agents (e.g., queue agent <b>314</b> and/or topic agent <b>316</b>) responsible for each destination. In an alternative embodiment (e.g., in which destination registry <b>322</b> is not implemented), destinations and related objects (e.g., queue agent <b>314</b> and/or topic agent <b>316</b>) that belong to a given logical MOM server instance (e.g., logical MOM server instance <b>420</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>) are hosted on the &#x201c;parent&#x201d; server node (e.g., application server <b>400</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>). In an embodiment, consumer registry <b>324</b> maintains a list of consumers for each destination in destination container <b>304</b>. As is further described below, with reference to <figref idref="DRAWINGS">FIG. 6</figref>, configuration repository <b>317</b> may store configuration information for MOM entities such as MOM server instances, queues, topics, durable subscriptions, and the like.</p>
<p id="p-0040" num="0039">Database <b>320</b> may persistently store messages for queues and/or durable subscriptions. The term &#x201c;durable subscription&#x201d; refers to receiving messages at a topic for a client that is not active (e.g., not currently connected to the topic). In addition, database <b>320</b> may store data that is &#x201c;swapped&#x201d; in and out of volatile memory to conserve system resources. In an embodiment, database <b>320</b> includes a Database Management System (DBMS). The term &#x201c;DBMS&#x201d; refers to logic that provides overall organization of the data within a database. For example, a DBMS may retrieve the data from the database and/or ensure integrity of the data within the database. In an embodiment, the DBMS may be a &#x201c;relational&#x201d; DBMS (or simply, RDBMS).</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of selected elements of application server <b>400</b> implemented according to an embodiment of the invention. In the illustrated embodiment, applications <b>402</b> and <b>404</b> are deployed to application server <b>400</b>. Application <b>402</b> may be, for example, a call center application and application <b>404</b> may be a &#x201c;Webshop&#x201d; application. The term &#x201c;Webshop&#x201d; refers to buying and selling goods over the Internet.</p>
<p id="p-0042" num="0041">MOM provider <b>410</b> provides a message service for applications and components executing on application server <b>400</b>. In the illustrated embodiment, MOM provider <b>410</b> includes logical MOM server instances <b>420</b> and <b>430</b>. Logical MOM server instances <b>420</b> and <b>430</b> may be defined by separate configuration entities that specify, for example, identifiers for the logical instances, identifiers for the destinations, which destinations are assigned to which logical instance, and the like. These configuration entities are further described below with reference to <figref idref="DRAWINGS">FIGS. 5-9</figref>. For purposes of explanation, an embodiment of the invention having two logical MOM server instances is described. It is to be understood however, that only one server instance or more than two server instances may configured.</p>
<p id="p-0043" num="0042">Initially, only one of applications <b>402</b> and <b>404</b> may be deployed on application server <b>400</b> and only one logical MOM server instance is configured. For example, call center application <b>402</b> may be deployed and logical MOM server instance <b>420</b> may be configured to provide a message service for call center application <b>402</b>. In such an embodiment, the configuration options of MOM server instance <b>420</b> may be optimized for call center application <b>402</b>. For example, session container <b>422</b> may be configured to provide one or more message sessions for application <b>402</b>. Also, destination container <b>424</b> may be configured to provide queues <b>426</b> and <b>428</b> for application <b>402</b>.</p>
<p id="p-0044" num="0043">A potential challenge occurs, however, when Webshop application <b>404</b> is deployed to application server <b>400</b>. It is possible that Webshop application <b>404</b> uses a queue that has the same name as one of the queues used by application <b>402</b>. For example, call center application <b>402</b> may have two queues: QIncomingCalls <b>426</b> and QOrders <b>428</b>. Similarly, Webshop application <b>404</b> may have the following two queues: NewUserRequest <b>436</b> and QOrders <b>438</b>.</p>
<p id="p-0045" num="0044">Logical MOM server instance <b>430</b> may be configured to separate the namespaces of the queues used by applications <b>402</b> and <b>404</b>. For example, session container <b>432</b> may be configured to provide one or more message sessions for application <b>404</b>. Destination container <b>434</b> may be configured to provide NewUserRequest queue <b>436</b> and QOrders queue <b>438</b>. Since a separate logical MOM server instance is providing a message service for application <b>404</b>, there is no conflict in the namespaces used by the queues of application <b>404</b> and the queues of application <b>402</b>. In addition it is easier to administer and optimize MOM server instance <b>430</b> because it providers an MOM service to a specific application.</p>
<p id="p-0046" num="0045">In one embodiment, application server <b>400</b> is a Java 2 Enterprise Edition (J2EE) application server. The term J2EE application server broadly refers to an application server that implements, at least in part, one of the J2EE specifications, for example, v1.3, published on Jul. 27, 2001 (hereinafter the J2EE Standard). Examples of a J2EE application server may include, for example, the Web Application Server (Web AS) provided by SAP AG and the Websphere application server by IBM Corporation. In an alternative embodiment, application server <b>400</b> is implemented according to a different platform, for example, the Microsoft .NET platform.</p>
<p id="p-0047" num="0046">In an embodiment, logical MOM server instances <b>420</b> and <b>430</b> are Java Message Service (JMS) based MOM server instances. A JMS-based server instance broadly refers to an MOM server instance that implements, at least in part, the JMS Application Program Interface (API). In an alternative embodiment, logical MOM server instances <b>420</b> and <b>430</b> may be based on a different messaging API.</p>
<p id="p-0048" num="0047">In an embodiment, a logical MOM server instance (e.g., logical MOM server instance <b>420</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>) may be specified by a configuration entity having one or more items of configuration information. The configuration information established for each MOM server instance may be used to distribute and process messages (e.g., the configuration information may be used to identify a &#x201c;name&#x201d; of a server instance). <figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of selected elements of configuration facilities <b>500</b> for an MOM provider, according to an embodiment of the invention.</p>
<p id="p-0049" num="0048">MOM configuration services <b>510</b> may provide access to configuration information for a deploy service (e.g., deploy service <b>526</b>) and/or an administrative tool (e.g., administrative tool <b>514</b>). Integrated development environment (IDE) <b>524</b> may use deploy service <b>526</b> to define the settings (e.g., define configuration information) for one or more logical MOM server instances during the deployment of application code. For example, in some cases it is desirable to configure one or more logical MOM server instances in conjunction with deploying application code. In an embodiment, one or more configuration settings of an MOM server instance may be specified in IDE <b>524</b> (e.g., in an eXtensible Markup Language file) and deployed with the application code. In an embodiment, deploy service <b>526</b> may be an implementation, at least in part, of the J2EE deploy service.</p>
<p id="p-0050" num="0049">In an embodiment, administrative tool <b>514</b> accesses configuration services <b>510</b> to inspect and modify configuration information. Administrative tool <b>514</b> may include a graphical user interface (GUI) and/or may be a shell console (e.g., command line driven interface). In an embodiment, administrative tool <b>514</b> is a Web-based administrative tool. In an embodiment, in which administrative tool <b>514</b> provides a GUI, the GUI may be a swing-based GUI. A Swing-based GUI refers to a GUI that is based on the Swing API provided by, for example, the Java 2 Platform, Standard Edition, Specification, 1.4.2, Nov. 20, 2003.</p>
<p id="p-0051" num="0050">MOM configuration services <b>510</b> includes configuration repository <b>512</b>. Configuration repository <b>512</b> may store configuration information for MOM entities such as MOM server instances, queues, topics, durable subscriptions, and the like. Configuration information for these entities is further described below with reference to <figref idref="DRAWINGS">FIGS. 6-7</figref>. In an embodiment, MOM configuration services <b>510</b> may provide the information stored in repository <b>512</b> to, for example, distribution manager <b>527</b>, security service <b>516</b>, and/or monitoring service <b>518</b>. In an embodiment, monitoring service <b>518</b> is, at least partly, based on the Java Management eXtensions (JMX) standard. The term &#x201c;JMX standard&#x201d; may refer to, for example, JSR-000003, entitled, &#x201c;Java Management eXtensions (JMX), version 1.2.&#x201d; In such an embodiment, JMX bridge <b>520</b> may provide access to one or more manageable resources (e.g., configuration information) stored in configuration repository <b>512</b>.</p>
<p id="p-0052" num="0051">In an embodiment, distribution manager <b>527</b> distributes handlers for MOM destinations (e.g., queues <b>426</b>, <b>428</b>, <b>436</b>, and <b>438</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>) that are implemented on an application server (e.g., application server <b>400</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>). In addition, distribution manager <b>527</b> may create new instances of handlers and/or monitor the operational state of handlers. In an embodiment, distribution manager <b>527</b> stores information about handlers, sessions, destinations, and/or agents in distribution directory <b>522</b>.</p>
<p id="p-0053" num="0052">In one embodiment, distribution directory <b>522</b> stores the runtime-dependent location of the various agents that are used by the logical MOM server instances that are implemented on an application server. To provide timely access, the information of distribution directory <b>522</b> may be stored in the volatile memory of the application server.</p>
<p id="p-0054" num="0053">In an embodiment, an MOM provider having multiple MOM server instances is, at least partly, integrated with a JMS-based API. For ease of discussion, an embodiment of the invention that is integrated with a JMS-based API is described with reference to <figref idref="DRAWINGS">FIGS. 6</figref><i>a </i>and <b>6</b><i>b</i>. In such an embodiment, the MOM provider and MOM server instances may be, respectively, referred to as the JMS provider and the JMS server instances. It is to be understood, however, that the concept of an MOM provider having multiple MOM server instances is not limited to embodiments that are integrated with the JMS API.</p>
<p id="p-0055" num="0054">The JMS-based API defines pre-configured objects known as &#x201c;administered objects&#x201d; which implement some of the functions of a JMS-based message service. The administered objects include &#x201c;connection factories&#x201d; and &#x201c;destinations.&#x201d; A &#x201c;connection factory&#x201d; is a pre-configured JMS object that a client uses to create a connection with a JMS provider. A &#x201c;destination&#x201d; is an object that a client uses to specify as the target for the messages it produces and/or the source of the messages it consumes. These administered objects may be stored in the Java Naming Directory Interface (JNDI) API namespace of a node or as a persistent representation of the respective objects in any kind of storage medium, e.g. in a database system, file system or in any other kind of directory system.</p>
<p id="p-0056" num="0055">In an embodiment, internal configuration entities may be used to define logical JMS server instances. <figref idref="DRAWINGS">FIG. 6</figref><i>a </i>is a conceptual illustration of the administered objects stored in JNDI namespace <b>600</b>. <figref idref="DRAWINGS">FIG. 6</figref><i>b </i>is a conceptual illustration of internal configuration entities <b>611</b> that define logical JMS server instances, according to an embodiment of the invention.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>is a conceptual illustration of selected elements of the JNDI namespace of a node, according to an embodiment of the invention. One or more administered objects may be bound to JNDI proxy base <b>602</b> via, for example, a connector service. JMS connection factory <b>604</b> may specify the settings and driver libraries that are used to connect to a JMS provider (e.g., JMS provider <b>612</b>, shown in <figref idref="DRAWINGS">FIG. 6</figref><i>b</i>). Enhanced connection factory <b>606</b> is a special type of connection factory that allows for settings to be specified that support multiple logical JMS server instances (e.g., supports the configuration of the entities shown in <figref idref="DRAWINGS">FIG. 6</figref><i>b</i>). Destination administered object <b>608</b> may specify the settings for a destination (e.g., for a queue and/or a topic). Enhanced destination object <b>610</b> is a special type of destination object that supports settings such as those discussed below with reference to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>is a conceptual illustration of selected configuration entities, according to an embodiment of the invention. Each configuration entity may include one or more items of configuration information (e.g., an MOM server instance identifier). An MOM provider (e.g., MOM provider <b>300</b>, shown in <figref idref="DRAWINGS">FIG. 3</figref>) may use this configuration information to determine how to handle (e.g., where to send) incoming and outgoing messages. In addition, the configuration information may specify the use of system resources such as memory.</p>
<p id="p-0059" num="0058">MOM provider <b>612</b> is the central configuration entity for an MOM provider (e.g., MOM provider <b>300</b>, shown in <figref idref="DRAWINGS">FIG. 3</figref>). In an embodiment, the configuration information (or, for ease of discussion, &#x201c;properties&#x201d;) stored for MOM provider <b>612</b> are valid for all logical MOM server instances of the MOM provider. Typically these values are system-specific (e.g., network port number) and are, therefore established during installation of an enterprise network. In an embodiment, the MOM server instances share these network layer properties.</p>
<p id="p-0060" num="0059">In an embodiment, an administrative tool (e.g., administrative tool <b>514</b>, shown in <figref idref="DRAWINGS">FIG. 5</figref>) may be used to modify the configuration information. In one embodiment, a default MOM server instance is initially instantiated during, for example, installation of MOM provider <b>612</b>. As is further described below, additional MOM server instances may be separately configured on the application server via, for example, an administrative tool (e.g., administrative tool <b>514</b>, shown in <figref idref="DRAWINGS">FIG. 5</figref>).</p>
<p id="p-0061" num="0060">As described above, embodiments of the invention provide an MOM provider having multiple logical MOM server instances. In one embodiment, MOM server instance configuration entity <b>614</b> provides a mechanism for defining the multiple logical MOM server instances. Each MOM server instance may manage a distinct set of destinations. Thus, a particular queue or topic is typically deployed to one logical MOM server instance.</p>
<p id="p-0062" num="0061">In an embodiment, all MOM server instances share one common network layer and, therefore, use the same port. For example, all MOM server instances may share the common network layer defined in MOM provider entity <b>612</b>. In such an embodiment, an MOM server instance is unambiguously identified by the combination of a hostname, port, and MOM server instance name (e.g., server instance name <b>616</b> also referred to as a server instance identifier).</p>
<p id="p-0063" num="0062">In an embodiment, one or more properties may be configured for each MOM server instance. For example, each MOM server instance may have an instanceName (or other identifier) to distinguish one server instance from another. In an embodiment, each instanceName is unique for a given application server installation. In one embodiment, all application servers and all MOM server instances share a common configuration store. In such an embodiment, a configuration store property (e.g., a Uniform Resource Locator (URL)) may be configured for each MOM server instance. A configuration repository (e.g., configuration repository <b>512</b>, shown in <figref idref="DRAWINGS">FIG. 5</figref>) may access the configuration store using the specified URL (or other specified configuration store property).</p>
<p id="p-0064" num="0063">In an embodiment, one or more properties may be specified for a destination. Destination entity <b>618</b> represents the configurable properties of a destination according to an embodiment of the invention. Typically, queues and topics have a number of common properties which are, hereinafter, referred to as &#x201c;standard destination properties.&#x201d; In one embodiment, the standard destination properties include: a name and a defaultJNDIName. The &#x201c;name&#x201d; may provide a unique internal (e.g., within an application server) identifier for a destination. The &#x201c;defaultJNDIName&#x201d; may specify the default name for a destination in a JNDI directory. In one embodiment, the MOM provider automatically creates an administered object in JNDI when a destination having a defaultJNDIName is deployed to the MOM provider. In alternative embodiments, destination entity <b>618</b> may have more properties, fewer properties, and/or different properties.</p>
<p id="p-0065" num="0064">In an embodiment, a client may have a durable subscription to a topic. Durable subscription entity <b>620</b> illustrates the configurable properties of a durable subscription. Durable subscription entity <b>620</b> may be created during runtime and/or may be &#x201c;pre-defined&#x201d; during design time. If durable subscription entity <b>620</b> has been pre-defined during design time, a client may call the following method to create a durable subscription: &#x201c;createDurableSubscriber(topic, subscriptionName).&#x201d; In response, the MOM provider (e.g., MOM provider <b>300</b>, shown in <figref idref="DRAWINGS">FIG. 3</figref>) may automatically apply one or more predefined properties to the durable subscription. Alternatively, the properties for a durable subscription may be individually set during runtime.</p>
<p id="p-0066" num="0065">In one embodiment, the configurable properties of durable subscription entity <b>620</b> include a name property and a NoLocal property. The name property may provide an identifier for the durable subscription. The NoLocal property may provide a mechanism for clients to ensure that they are not the recipients of messages that they publish. In alternative embodiments, durable subscription entity <b>620</b> may have more properties, fewer properties, and/or different properties.</p>
<p id="p-0067" num="0066">In an embodiment, a &#x201c;snapshot&#x201d; of a reference configuration for an MOM server instance may be generated in, for example, an IDE. The term &#x201c;snapshot&#x201d; may refer to an eXtensible Markup Language (XML) description of the reference configuration. The reference configuration may specify configuration parameters to optimize the MOM server instance for a given application. The reference configuration may be included in the archive files of the application (e.g., in the J2EE Enterprise Archive) to specify standard settings for an MOM server instance to be used with the application.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 7</figref> is a Unified Modeling Language (UML) diagram illustrating the data model described above with reference to <figref idref="DRAWINGS">FIG. 6</figref><i>b</i>. It is to be understood that the properties illustrated in <figref idref="DRAWINGS">FIG. 7</figref> (and described above) are the configurable properties in an exemplary embodiment of the invention. In an alternative embodiment, each configuration entity may have more properties, fewer properties, and/or different properties.</p>
<p id="p-0069" num="0068">Turning now to <figref idref="DRAWINGS">FIGS. 8</figref><i>a</i>-<b>8</b><i>b</i>, the particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to a flowchart. The methods to be performed by an MOM provider having multiple MOM server instances may constitute state machines or computer programs made up of computer-executable instructions. The computer-executable instructions may be written in a computer programming language or may be embodied in firmware logic. If written in a programming language conforming to a recognized standard, such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition, embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, etc.), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 8</figref><i>a </i>is a flow diagram illustrating certain aspects of a method for accessing an MOM provider having multiple logical MOM server instances, according to an embodiment of the invention. Referring to process block <b>802</b>, an MOM client requests connection information from a registry service to establish a connection to an MOM provider. Referring to process block <b>804</b>, the MOM client receives the connection information from the registry service. In an embodiment, the received connection information includes one or more MOM parameters including, for example, an MOM server instance name to uniquely identify one of a plurality of MOM server instances.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 8</figref><i>b </i>is a flow diagram illustrating certain aspects of a method for employing an MOM provider having multiple logical MOM server instances, according to an embodiment of the invention. Referring to process block <b>810</b>, an MOM client (e.g., application <b>402</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>) requests connection information from a registry service to establish a connection to an MOM provider (e.g., MOM provider <b>410</b>, shown in <figref idref="DRAWINGS">FIG. 4</figref>). In one embodiment, the MOM provider is logically distributed into a number of MOM server instances (e.g., MOM server instances <b>420</b> and <b>430</b>). Each of the MOM server instances may separately manage one or more destinations. The term &#x201c;MOM client&#x201d; broadly refers to an application and/or component (e.g., service, agent, routine, etc) that sends and/or receives messages.</p>
<p id="p-0072" num="0071">A &#x201c;registry service&#x201d; may be, for example, a &#x201c;naming service&#x201d; and/or a &#x201c;directory service.&#x201d; A &#x201c;naming service&#x201d; refers to a service that enables software entities to name objects and to retrieve objects by name. Typically, a &#x201c;name&#x201d; is generated by a set of syntactic rules called a naming convention. The association of an object with its name may be referred to as a binding. A &#x201c;directory service&#x201d; refers to a naming service that allows each bound object to be associated with attributes and provides a way to retrieve an object based on its attributes rather than its name.</p>
<p id="p-0073" num="0072">In one embodiment, the registry service may be based, at least in part, on the Java Naming and Directory Interface (JNDI). In such an embodiment, requesting connection information may include requesting a &#x201c;connection factory object&#x201d; from the JNDI. A connection factory object may provide the settings and driver libraries that a client uses to connect with the MOM provider. In an embodiment, the connection factory object includes an MOM server instance identifier (e.g., an instanceName) to identify the MOM server instance having the session container to which the client will connect. The term &#x201c;establishing a connection&#x201d; refers to using the connection information to reach an MOM server instance.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram illustrating objects in a registry service, according to an embodiment of the invention. JNDI proxy base <b>902</b> and connection factory <b>904</b> are substantially similar to JNDI proxy base <b>602</b> and JMS connection factory <b>604</b> discussed above with reference to <figref idref="DRAWINGS">FIG. 6</figref>. In addition, <figref idref="DRAWINGS">FIG. 9</figref> illustrates enhanced connection factory <b>906</b> and enhanced destination <b>908</b>.</p>
<p id="p-0075" num="0074">In an embodiment, enhanced connection factory <b>906</b> and enhanced destination <b>908</b> include properties (e.g., MOM parameters) that facilitate multiple MOM server instances. For example, enhanced connection factory <b>906</b> includes MOM server instance identifier <b>910</b> to specify the MOM server instance to which enhanced connection factory <b>906</b> provides a connection. Similarly, enhanced destination <b>908</b> includes destination identifier <b>912</b> to specify (at least locally) the identity of the destination.</p>
<p id="p-0076" num="0075">Referring again to <figref idref="DRAWINGS">FIG. 8</figref><i>b</i>, the client receives the connection information from the registry service at process block <b>820</b>. In an embodiment, the received connection information may include one or more MOM parameters. The MOM parameters may specify system specific information that the client may use to connect to the MOM provider. In one embodiment, the MOM parameters include an MOM server instance identifier (e.g., an instanceName). The MOM server instance identifier may uniquely identify a logical MOM server instance.</p>
<p id="p-0077" num="0076">Referring to process block <b>830</b>, the client starts a session with the MOM server instance that is specified by the received MOM server instance identifier. A &#x201c;session&#x201d; refers to a context for producing and/or consuming messages. In one embodiment, a session may be either a queue type session or a topic type session depending on the destination of the session. The following is an exemplary code snippet suitable for starting a session in which a topic is the destination: &#x201c;TopicSession topicSession=TopicConnection.createTopicSession (param 1, param 2).&#x201d;</p>
<p id="p-0078" num="0077">Referring to process block <b>840</b>, the client sends a message to the MOM server instance specified by the received MOM server instance identifier. In one embodiment, the message includes a globally unique identifier to uniquely identify a destination associated with the MOM server instance. The destination may be, for example, a queue or a topic. In one embodiment, each destination has an associated destination identifier (e.g., a destination name). In an embodiment, the destination identifier may be locally unique. In other words, two destinations on two different MOM server instances may have the same destination identifier. The globally unique identifier may be a combination of the MOM server instance identifier and the destination identifier.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram of computing device <b>1000</b> implemented according to an embodiment of the invention. Computing device <b>1000</b> may include: processor(s) <b>1010</b>, memory <b>1020</b>, one or more Input/Output interfaces <b>1030</b>, network interface(s) <b>1040</b>, and MOM provider having multiple server instances <b>1050</b>. The illustrated elements may be connected together through system interconnection <b>1070</b>. Processor(s) <b>1010</b> may include a microprocessor, microcontroller, field programmable gate array (FPGA), application specific integrated circuit (ASIC), central processing unit (CPU), programmable logic device (PLD), and similar devices that access instructions from system storage (e.g., memory <b>1020</b>), decode them, and execute those instructions by performing arithmetic and logical operations.</p>
<p id="p-0080" num="0079">MOM provider having multiple server instances <b>1050</b> enables computing device <b>1000</b> to provide a scalable MOM provider for an enterprise network. MOM provider having multiple server instances <b>1050</b> may be executable content, control logic (e.g., ASIC, PLD, FPGA, etc.), firmware, or some combination thereof, in an embodiment of the invention. In embodiments of the invention in which MOM provider having multiple server instances <b>1050</b> is executable content, it may be stored in memory <b>1020</b> and executed by processor(s) <b>1010</b>.</p>
<p id="p-0081" num="0080">Memory <b>1020</b> may encompass a wide variety of memory devices including read-only memory (ROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), random access memory (RAM), non-volatile random access memory (NVRAM), cache memory, flash memory, and other memory devices. Memory <b>1020</b> may also include one or more hard disks, floppy disks, ZIP disks, compact disks (e.g., CD-ROM), digital versatile/video disks (DVD), magnetic random access memory (MRAM) devices, and other system-readable media that store instructions and/or data. Memory <b>1020</b> may store program modules such as routines, programs, objects, images, data structures, program data, and other program modules that perform particular tasks or implement particular abstract data types that facilitate system use.</p>
<p id="p-0082" num="0081">One or more I/O interfaces <b>1030</b> may include a hard disk drive interface, a magnetic disk drive interface, an optical drive interface, a parallel port, serial controller or super I/O controller, serial port, universal serial bus (USB) port, a display device interface (e.g., video adapter), a network interface card (NIC), a sound card, modem, and the like. System interconnection <b>1070</b> permits communication between the various elements of computing device <b>1000</b>. System interconnection <b>1070</b> may include a wide variety of signal lines including one or more of a memory bus, peripheral bus, local bus, host bus, bridge, optical, electrical, acoustical, and other propagated signal lines.</p>
<p id="p-0083" num="0082">Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, flash memory, optical disks, CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media or other type of machine-readable media suitable for storing electronic instructions. For example, the present invention may be downloaded as a computer program which may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).</p>
<p id="p-0084" num="0083">It should be appreciated that reference throughout this specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to &#x201c;an embodiment&#x201d; or &#x201c;one embodiment&#x201d; or &#x201c;an alternative embodiment&#x201d; in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.</p>
<p id="p-0085" num="0084">Similarly, it should be appreciated that in the foregoing description of exemplary embodiments of the invention, various features of the invention are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method employed within a network comprising:
<claim-text>requesting connection information from a registry service to establish a connection to a Message-Oriented Middleware (MOM) provider, wherein the MOM provider includes a plurality of MOM server instances, each of the plurality of MOM server instances to store a message in an associated destination;</claim-text>
<claim-text>receiving, with use of a processor, the connection information from the registry service, the connection information having one or more MOM parameters, wherein the one or more MOM parameters include an MOM server instance name to uniquely identify one of the plurality of MOM server instances, the MOM server instance including a session container to manage one or more sessions and a destination container to provide one or more destinations;</claim-text>
<claim-text>starting a session with the MOM server instance identified by the received MOM server instance name; and</claim-text>
<claim-text>sending a message to the MOM server instance, the message having a globally unique identifier to identify the destination associated with the MOM server instance.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein requesting connection information from the registry service to establish the connection to the MOM provider comprises:
<claim-text>requesting a connection factory object from a Java naming and directory interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the MOM provider is a Java Message Service (JMS)&#x2014;based MOM provider.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the destination is one of:
<claim-text>a queue, and</claim-text>
<claim-text>a topic.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>instantiating each of the plurality of MOM server instances on a same application server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the MOM server instance and another of the plurality of MOM server instances share at least one network layer property.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the globally unique destination identifier comprises a combination of the MOM server instance name and a destination identifier associated with the destination container.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the destination identifier is unique within the destination container of the MOM server instance but ambiguous between the destination container of the MOM server instance and another destination container of the plurality of MOM server instances.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A non-transitory computer-readable storage medium having instructions stored thereon, which when executed by a computer, cause the computer to:
<claim-text>request connection information from a registry service to establish a connection to a Message-Oriented Middleware (MOM) provider, wherein the MOM provider includes a plurality of MOM server instances, each of the plurality of MOM server instances to store a message in an associated destination;</claim-text>
<claim-text>receive the connection information from the registry service, the connection information having one or more MOM parameters, wherein the one or more MOM parameters include an MOM server instance name to uniquely identify one of the plurality of MOM server instances, the MOM server instance including a session container to manage one or more sessions and a destination container to provide one or more destinations;</claim-text>
<claim-text>start a session with the MOM server instance identified by the received MOM server instance name; and</claim-text>
<claim-text>send a message to the MOM server instance, the message having a globally unique identifier identifying the destination associated with the MOM server instance.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions that, when executed by the computer, cause the computer to request connection information from the registry service to establish the connection to the MOM provider further cause the computer to:
<claim-text>request a connection factory object from a Java naming and directory interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the MOM provider is a Java Message Service (JMS)&#x2014;based MOM provider.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the MOM server instance and another of the plurality of MOM server instances share at least one network layer property.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the globally unique destination identifier comprises a combination of the MOM server instance name and a destination identifier associated with the destination container.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the destination identifier is unique within the destination container of the MOM server instance but ambiguous between the destination container of the MOM server instance and another destination container of the plurality of MOM server instances.</claim-text>
</claim>
</claims>
</us-patent-grant>

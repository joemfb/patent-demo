<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627269-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627269</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13157868</doc-number>
<date>20110610</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>292</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717100</main-classification>
<further-classification>717101</further-classification>
<further-classification>717121</further-classification>
</classification-national>
<invention-title id="d2e55">Runtime library including a virtual file system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6161139</doc-number>
<kind>A</kind>
<name>Win et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6418444</doc-number>
<kind>B1</kind>
<name>Raduchel et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6618855</doc-number>
<kind>B1</kind>
<name>Lindholm et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6684387</doc-number>
<kind>B1</kind>
<name>Acket et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6687745</doc-number>
<kind>B1</kind>
<name>Franco et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6742176</doc-number>
<kind>B1</kind>
<name>Million et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6748591</doc-number>
<kind>B1</kind>
<name>Lewallen</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6766314</doc-number>
<kind>B2</kind>
<name>Burnett</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6766481</doc-number>
<kind>B2</kind>
<name>Estep et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6772408</doc-number>
<kind>B1</kind>
<name>Velonis et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6842770</doc-number>
<kind>B1</kind>
<name>Serlet et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6842893</doc-number>
<kind>B1</kind>
<name>Sangavarapu et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717129</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6941470</doc-number>
<kind>B1</kind>
<name>Jooste</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7013392</doc-number>
<kind>B1</kind>
<name>Sasaki et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7051315</doc-number>
<kind>B2</kind>
<name>Artzi et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7076784</doc-number>
<kind>B1</kind>
<name>Russell et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7127700</doc-number>
<kind>B2</kind>
<name>Large</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7185319</doc-number>
<kind>B2</kind>
<name>Kaler et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7331035</doc-number>
<kind>B2</kind>
<name>Loos et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7346894</doc-number>
<kind>B1</kind>
<name>Cook</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7409675</doc-number>
<kind>B2</kind>
<name>Brumme et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7467370</doc-number>
<kind>B2</kind>
<name>Proudler et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7483970</doc-number>
<kind>B2</kind>
<name>Anuszczyk et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7496887</doc-number>
<kind>B2</kind>
<name>Grasselt et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7503031</doc-number>
<kind>B2</kind>
<name>Chang et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7543269</doc-number>
<kind>B2</kind>
<name>Krueger et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7584451</doc-number>
<kind>B2</kind>
<name>Iborra et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7669177</doc-number>
<kind>B2</kind>
<name>Gerber et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7716570</doc-number>
<kind>B2</kind>
<name>Adelberg et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715209</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7734914</doc-number>
<kind>B1</kind>
<name>Malasky</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7752600</doc-number>
<kind>B2</kind>
<name>Laborczfalvi et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7774754</doc-number>
<kind>B2</kind>
<name>Komissarchik et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7788730</doc-number>
<kind>B2</kind>
<name>Dean et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7797670</doc-number>
<kind>B2</kind>
<name>Bumgarner et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7818721</doc-number>
<kind>B2</kind>
<name>Sundararajan et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7865875</doc-number>
<kind>B2</kind>
<name>Hockenberry et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7873940</doc-number>
<kind>B2</kind>
<name>Sanghvi et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7917888</doc-number>
<kind>B2</kind>
<name>Chong et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7948897</doc-number>
<kind>B2</kind>
<name>Stuart et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>8171483</doc-number>
<kind>B2</kind>
<name>Nord et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>8266578</doc-number>
<kind>B2</kind>
<name>Bazigos et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>8302077</doc-number>
<kind>B2</kind>
<name>Manczak et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>8473913</doc-number>
<kind>B2</kind>
<name>Noller et al.</name>
<date>20130600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2003/0061278</doc-number>
<kind>A1</kind>
<name>Agarwalla et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2003/0236850</doc-number>
<kind>A1</kind>
<name>Kodama</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2005/0120242</doc-number>
<kind>A1</kind>
<name>Mayer et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Abd-El-alek et al, &#x201c;File System Virtual Appliances: Portable File System Implementations&#x201d;, ACM Trans. on storage, vol. 8, No. 3, article 9, pp. 1-26, 2012.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Weinhold et al, &#x201c;VPFS: Building a Virtual Private File System with a Small Trusted Computing Base&#x201d;, ACM pp. 81-93, 2008.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Vaghani, &#x201c;Virtual Machine File System&#x201d;, ACM, pp. 57-70, 2010.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Atsushi et al, &#x201c;A Virtual File System for Source Program Editing&#x201d;, IEEE, pp. 1-8, 2002.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Berners-Lee, &#x201c;Universal Resource Identifiers in WWW&#x201d;, Jun. 1994, retrieved from the internet at http://www.ietf.org/rfc/rfc1630.txt, on Aug. 20, 2006, 27 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Berners-Lee, et al. &#x201c;Uniform Resource Locators (URL)&#x201d;, Dec. 1994, retrieved from the internet at http://www.ietf.org/rfe/rfc.1738.txt, on Jul. 11, 2006, 21 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Brown, &#x201c;Security Briefs: Strong Names and Security in the .NET Framework&#x201d; Dec. 2003 retrieved from the internet at http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/strongNames.asp?<sub>&#x2014;</sub>r=1, on Jul. 11, 2006, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Damiani et al, &#x201c;A fine grained access control system for XML documents&#x201d;, ACM Trans. on Information and System Security, vol. 5, No. 2, pp. 169-202, 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Daniel, &#x201c;A Trivial Convention for using HTTP in URN Resolution&#x201d;, Jun. 1997, retrieved from the internet at http://www.ietf.org/rfc/rfc2169.txt, on Aug. 20, 2006, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Free On-Line Dictionary of Computing, 1997, http://foldoc.org/pathname and http://foldoc.org/basename, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Hunter, Response to Non-Final Office Action of Oct. 1, 2010 in U.S. Appl. No. 11/513,318, dated Dec. 29, 2010, to be published by USPTO as part of the file history, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Khatri, USPTO Non-Final Office Action in U.S. Appl. No. 11/513,318, dated Oct. 1, 2010, to be published by USPTO as part of the file history, 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Khatri, USPTO Notice of Allowance in U.S. Appl. No. 11/513,318, dated Feb. 16, 2011, to be published by USPTO as part of the file history, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Ludwig et al, &#x201c;File system encryption with integrated user management&#x201d;, ACM SIGOPS, 88-93, 2001.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Malasky, &#x201c;System and Method for Allowing Applications to Securely Access Files&#x201d;, U.S. Appl. No. 11/219,235, filed Sep. 2, 2005, 30 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Microsoft Corporation &#x201c;IsolatedStorageContainment Enumeration&#x201d;, 2006 retrieved from the internet at http://msdn2.microsoft.com/en-us/library/system.security.permissions.isolatedstoragecontainment.aspx, on Aug. 25, 2006, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Moats, &#x201c;URN Syntax&#x201d;, May 1997, retrieved from the internet at http://www.ietf.org/rfc/rfc2141.txt, on Aug. 20, 2006, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Moore, &#x201c;WebDAV Protocol Comes of Age&#x201d;, Oct. 12, 2001, retrieved from the internet at http://www.infoworld.com/articles/fe/xml/01/10/15/011015feedge, on Aug. 25, 2006, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Nguyen, USPTO Advisory Action in U.S. Appl. No. 11/219,235, dated Jul. 23, 2009, to be published by USPTO as part of the file history, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Nguyen, USPTO Final Office Action in U.S. Appl. No. 11/219,235, mailed May 4, 2009, to be published by USPTO as part of the file history, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Nguyen, USPTO Nonfinal Office Action in U.S. Appl. No. 11/219,235, mailed Jan. 8, 2009, to be published by USPTO as part of the file history, 25 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>Nguyen, USPTO Notice of Allowance in U.S. Appl. No. 11/219,235, dated Jan. 25, 2010, to be published by USPTO as part of the file history, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Open Services Gateway Initiative, &#x201c;OSGi Service Platform, Release 3&#x201d;, Mar. 2003, 602 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Robinson et al, &#x201c;Implementing middleware for content filtering and information flow control&#x201d;, ACM CSAW, pp. 47-53,2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Seda &#x201c;Strong Names Explained&#x2014;The Code Project&#x2014;.NET&#x201d;, Nov. 25, 2004 retrieved from the internet at http://www.codeproject.com/dotnet/StrongNameExplained.asp, on Aug. 4, 2006, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00072">
<othercit>Sun Microsystems Inc. &#x201c;Security Features Overview&#x201d;, retrieved from the internet at http://java.sun.com/docs/books/tutorial/security/overview/index.html, on Aug. 3, 2006, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00073">
<othercit>Valentino, Appeal Brief in U.S. Appl. No. 11/219,235, dated Oct. 5, 2009, to be published by USPTO as part of the file history, 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00074">
<othercit>Valentino, Response to Final Office Action in U.S. Appl. No. 11/219,235, dated Jul. 2, 2009, to be published by USPTO as part of the file history, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00075">
<othercit>Valentino, Response to Nonfinal Office Action in U.S. Appl. No. 11/219,235, dated Apr. 3, 2009, to be published by USPTO as part of the file history, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00076">
<othercit>Vazhkudai et al, &#x201c;Constructing collaborative desktop storage caches for large scientific datasets&#x201d;, ACM Trans. on storage, vol. 2, No. 3, pp. 221-254, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00077">
<othercit>Wikipedia.org, &#x201c;Runtime&#x201d;, retrieved from the internet at http://en.wikipedia.org/wiki/Runtime, on Aug. 25, 2006, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717120-121</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717129-130</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717100-104</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11513318</doc-number>
<date>20060829</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7966599</doc-number>
<date>20110621</date>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13157868</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130167104</doc-number>
<kind>A1</kind>
<date>20130627</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Malasky</last-name>
<first-name>Ethan</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Goldman</last-name>
<first-name>Oliver</first-name>
<address>
<city>Los Altos</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Malasky</last-name>
<first-name>Ethan</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Goldman</last-name>
<first-name>Oliver</first-name>
<address>
<city>Los Altos</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wolfe-SBMC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Adobe Systems Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Khatri</last-name>
<first-name>Anil</first-name>
<department>2191</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">This specification describes technologies relating to a runtime library including a virtual file system. In general, a method can include interfacing with an operating system of a computer; and providing runtime services, including a virtual file system, to programs running on the computer. Providing runtime services can include receiving first information and second information through a single file access routine of an API for the virtual file system; determining a selected one of multiple file storage areas to access based on the first information, the multiple file storage areas including a first local area accessible by a first program and inaccessible by a second program, and a second area accessible by the first program and the second program; mapping the second information to file resource(s) in the selected file storage area in the virtual file system; and accessing the one or more file resources for the first program.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="195.33mm" wi="177.55mm" file="US08627269-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="215.82mm" wi="177.29mm" file="US08627269-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.90mm" wi="132.93mm" file="US08627269-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation application of, and claims the benefit of priority under 35 U.S.C. 120 to, U.S. application Ser. No. 11/513,318, filed Aug. 29, 2006, now U.S. Pat. No. 7,966,599, issued Jun. 21, 2011.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present disclosure relates to virtual file systems, and in particular, a runtime library including a virtual file system.</p>
<p id="p-0004" num="0003">A runtime library is a collection of utility functions that support a program while it is running, working with the operating system to provide facilities such as mathematical functions, input and output. The use of a runtime library can simplify the task of coding new applications since a programmer need not continually rewrite basic capabilities that are instead provided by the runtime library. More recent runtime libraries work in conjunction with the operating system of a computer to form a runtime environment that provides programmers with substantial new functionality, above and beyond what the operating system provides, further simplifying the programming task. For example, the JAVA&#x2122; Virtual Machine (JVM) is a runtime that provides a dispatcher and classloader for handling inter-process communications and object class definitions, respectively.</p>
<p id="p-0005" num="0004">Some runtime environments also provide storage access functions that allow a program to create and access a private storage area in a local hard drive, thus allowing a program to have persistent local storage for its private data, while preventing other programs from accessing the program's private data. For example, the JAVA&#x2122; security model allows one to set up security privileges such that a particular application can only see part of the hard drive and can only read and write to that part. Also, the .NET&#x2122; framework includes an Isolated Storage Containment feature, in which storage can be isolated by user, machine, assembly or domain.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">This Summary introduces a selection of concepts in a simplified form that are further described below in the Detailed Description. As such, this Summary is not intended to identify essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.</p>
<p id="p-0007" num="0006">Techniques for a runtime library including a virtual file system are described. In lone or more implementations, runtime services, including a virtual file system, are provided to a first program running on a computer and a second program running on the computer. To provide the runtime services, first information and second information are received from the first program through a single file access routine of an application program interface (API) for the virtual file system. Based on the first information, one of multiple file storage areas that include a first area and a second area is determined to be selected for access. The first area being is local to the computer and is accessible by the first program through the virtual file system but is inaccessible by the second program through the virtual file system. The second area is accessible by the first program and the second program through the virtual file system. Providing the runtime services also includes mapping the second information to one or more file resources in the selected file storage area in the virtual file system and accessing the one or more file resources for the first program.</p>
<p id="p-0008" num="0007">Additionally, runtime services may authenticate the first program based on an identifier associated with the first program that is included in the first information. In one or more implementations, runtime services, including the virtual file system, are provided to a third program running on the computer that is authenticated based on the identifier associated with the first program and with the third program. In providing the runtime services to the third program, the first area may be accessible by the first and third programs through the virtual file system. In some implementations, the second area can be remote from the computer and accessible over a communication network.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> shows an example system in which a runtime library includes a virtual file system.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart showing an example process of accessing one or more file resources through a virtual file system.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart showing an example process of authenticating a program before granting access to a virtual file system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0012" num="0011">Like reference numbers and designations in the various drawings indicate like elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows an example system <b>100</b> in which a runtime library <b>125</b> includes a virtual file system <b>135</b>. A computer includes a processor <b>110</b> and local storage <b>115</b>. The local storage <b>115</b> can be any form of non-volatile memory that is local to the computer. The local storage <b>115</b> is proximate to the processor <b>110</b> (i.e., closer than ten feet) and serves as a local persistent storage resource for programs running on the computer. For example, the local storage <b>115</b> can be flash memory coupled with the processor <b>110</b> through a Universal Serial Bus (USB) controller (not shown), or the local storage <b>115</b> can be a hard drive coupled with the processor <b>110</b> through a hard drive controller (not shown).</p>
<p id="p-0014" num="0013">The computer system includes an operating system <b>120</b> configured to facilitate access to the processor <b>110</b> and the local storage <b>115</b>. The computer system includes a runtime library <b>125</b> configured to interface with the operating system <b>120</b> while running on the processor <b>110</b>. The runtime library <b>125</b> operates on the computer using the operating system <b>120</b> to provide a software platform on which other programs run (note that such programs are also referred to as &#x201c;applications&#x201d; herein, even when they require the runtime to operate).</p>
<p id="p-0015" num="0014">The runtime library <b>125</b> must be installed on the computer before a program can use it, but the runtime library <b>125</b> need not be launched before a program that runs using the runtime library <b>125</b>, because the program can just call the functions provided by the runtime library <b>125</b>. However, in some implementations, when a program that uses the library <b>125</b> is started, the first code that runs on the computer can be code from the runtime library <b>125</b>, such as discussed further below in connection with program authentication. Furthermore, in some implementations, application programs designed to run using the runtime library <b>125</b> can be required to use the runtime library <b>125</b> such that they cannot be run if the runtime library <b>125</b> is not present.</p>
<p id="p-0016" num="0015">The runtime library <b>125</b> provides runtime services <b>130</b>, including a virtual file system <b>135</b>, to multiple programs <b>150</b>-<b>154</b> running on the processor <b>110</b>. The runtime library <b>125</b> includes an application program interface (API) <b>140</b> for the virtual file system <b>135</b> configured to receive, from a first program <b>150</b>, information <b>160</b> (including first information <b>162</b> and second information <b>164</b>) through a single file access routine <b>145</b> of the API <b>140</b> for the virtual file system <b>135</b>. Moreover, the system <b>100</b> can also include an interface device <b>160</b> to connect to a communication network <b>170</b> and access remote storage <b>180</b>.</p>
<p id="p-0017" num="0016">The information <b>160</b> can be used by the runtime library <b>125</b> to determine a file storage area <b>190</b>-<b>194</b> to access, and to identify one or more file resources therein. The file storage areas <b>190</b>-<b>194</b> can include a first area <b>190</b> and a second area <b>192</b> or <b>194</b>. The first area <b>190</b> can be in the local storage <b>115</b>, accessible by the first program <b>150</b> through the virtual file system <b>135</b> and inaccessible by a second program <b>152</b> through the virtual file system <b>135</b>. The first program <b>150</b> includes the first information <b>162</b>, and the runtime library <b>125</b> can authenticate the first program <b>150</b> based on an identifier associated with the first program in order to control access to the first area <b>190</b> in the local storage <b>115</b>.</p>
<p id="p-0018" num="0017">For example, the first information <b>162</b> can be the identifier used in authenticating the first program <b>150</b>. The runtime library <b>125</b> can be configured to determine a selected one of the multiple file storage areas <b>190</b>-<b>194</b> to access based on the first information <b>162</b>. Further, the runtime library <b>125</b> can be configured to map the second information <b>164</b> to one or more file resources in the selected file storage area <b>190</b>, <b>192</b> or <b>194</b> in the virtual file system <b>135</b>.</p>
<p id="p-0019" num="0018">A file storage area <b>190</b>, <b>192</b> or <b>194</b> can be dedicated to a particular application program (e.g., an isolated storage area set aside for a specific program), dedicated to a group of application programs (e.g., a storage area that is shared by a group of programs from the same developer), or generally shared with all programs that access the virtual file system <b>145</b> in the runtime library <b>125</b>. In general, though, the first area <b>190</b> can be in the local storage <b>115</b>, accessible by the first program <b>150</b> through the virtual file system <b>135</b> and inaccessible by a second program <b>152</b> through the virtual file system <b>135</b>, and the second area <b>192</b> or <b>194</b> can be in the local storage <b>115</b> or in the remote storage <b>180</b>, and be accessible by the first program <b>150</b> and the second program <b>152</b> through the virtual file system <b>135</b>. Moreover, the first and second storage areas can be accessible by a third program <b>154</b>. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, first green information <img id="CUSTOM-CHARACTER-00001" he="3.56mm" wi="7.37mm" file="US08627269-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> is associated with both the first and third programs <b>150</b> and <b>154</b> (enabling access to the first area <b>190</b>), and first brown information <img id="CUSTOM-CHARACTER-00002" he="3.56mm" wi="7.37mm" file="US08627269-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> is associated with the first, second and third programs <b>150</b>-<b>154</b> (enabling access to the second area <b>192</b> or <b>194</b>).</p>
<p id="p-0020" num="0019">Thus, the runtime library <b>125</b> allows programmers to write applications that can store and retrieve data on a computer in private (or partially private) local storage, such that unauthorized programs cannot access the data through the runtime library <b>125</b>. These private data storage operations can be performed through the same file access routine <b>145</b> used to store and retrieve data in non-private local or remote storage. Moreover, the virtual file system <b>135</b> can provide a full file system hierarchy within each file storage area <b>190</b>, <b>192</b>, <b>194</b>, the one or more file resources can correspond to actual file(s) (or portions thereof), and the virtual file system <b>135</b> can manage attributes (e.g., owners, authors, date time, etc.) for the one or more file resources. In addition, in some implementations, a storage area (either local or remote) can be accessed through the virtual file system <b>135</b> by all programs <b>150</b>-<b>154</b> without authentication based on an identifier, if the storage area has unrestricted access.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart showing an example process of accessing one or more file resources through a virtual file system. A program can be authenticated <b>210</b> based on an identifier associated with the program. This identifier specifies a storage area, which can be private or shared, and this identifier can be a name of the program or other name. The identifier can be obtained when the program first starts up, and the authentication can be performed before the program attempts a file resource access through the runtime. For example, the identifier can be retrieved by the runtime automatically when the program is invoked, and the authentication performed before the program begins substantial operation.</p>
<p id="p-0022" num="0021">The identifier can be obtained at the time the program attempts to access a storage area through the runtime. For example, the first information <b>162</b> can include the identifier, and when the runtime receives the first information <b>162</b> from the program requesting storage access, the runtime can then authenticate the program before providing the requested access. In any event, the program need only be authenticated for use of a given identifier (and its corresponding storage area) one time for each instantiation of the program (a re-authentication of the program need not be performed for each file resource request received), and for an identifier with which all programs may be authorized to use (e.g., &#x201c;http:&#x201d;) no authentication need be performed.</p>
<p id="p-0023" num="0022">First information and second information can be received <b>220</b>, from a program, through a single file access routine of an API for the virtual file system. For example, a character string can be received through the single file access routine <b>145</b> of the API <b>140</b> for the virtual file system <b>135</b>, where the character string includes the first information and the second information. The character string can conform to a Universal Resource Identifier (URI) specification used for network communications (e.g., the Network Working Group Request for Comment (RFC) 1630 or RFC 1738). For example, the following API format can be used: Loader.load (&#x201c;app-store://images/image.jpg&#x201d;); where &#x201c;Loader.load&#x201d; is an example of the single file access routine <b>145</b>, &#x201c;app-store:&#x201d; is an example of the identifier included in the first information <b>162</b>, and &#x201c;//images/image.jpg&#x201d; is an example of the second information <b>164</b>. Note also that a single character string need not be used, and thus the API format can also be: Loader.load (&#x201c;app-store&#x201d;, &#x201c;/images/image.jpg&#x201d;).</p>
<p id="p-0024" num="0023">A selected one of multiple file storage areas to access can be determined <b>230</b> based on the first information. The multiple file storage areas can include a first area and a second area, the first area being local to the computer, accessible by the first program through the virtual file system and inaccessible by the second program through the virtual file system, and the second area being accessible by the first program and the second program through the virtual file system. The second area can be remote from the computer and accessible over a communication network. Thus, the above example API format can also be used to access Web resources, as in: Loader.load (&#x201c;http://foo.com/pub/app/images/image.jpg&#x201d;); where &#x201c;http:&#x201d; is an example of the first information, and &#x201c;//foo.com/pub/app/images/image.jpg&#x201d; is an example of the second information.</p>
<p id="p-0025" num="0024">The multiple file storage areas can represent various different partitions of local and remote storage. For example, each program that uses the runtime library can be given its own private, sandboxed storage, so every program can get at its own storage space, which is inaccessible by other programs using the runtime library. Access to these private storage areas can be authorized based on a strong name style authentication. Thus, the identifier used to authenticate a program can be the name of the program, and this name can also be the first information <b>162</b> provided to the single file access routine <b>145</b>.</p>
<p id="p-0026" num="0025">In addition, the identifier can be associated with a group of programs, such as those offered by a particular software developer. Thus, for example, programs developed by Adobe Systems Incorporated to use the runtime library can each include the identifier &#x201c;Adobe-store:&#x201d;. This identifier can be used for authenticating the programs with respect to the partitioned storage area set aside for these Adobe&#xae; programs, and this identifier can also be used to specify this partitioned storage area in the call to the file access routine, as in: Loader.load (&#x201c;Adobe-store://program.alpha/data/file.bk&#x201d;).</p>
<p id="p-0027" num="0026">The second information can be mapped <b>240</b> to one or more file resources in the selected file storage area in the virtual file system. The second information can be in a format that corresponds to a full file system hierarchy for the virtual file system, such as by the use of the slash symbol (&#x201c;/&#x201d;) to delineate directory structures in the file system hierarchy. In addition, the second information can include formatting conventions to help keep data organized. For example, an Adobe&#xae; program alpha and an Adobe&#xae; program beta can share data stored in the shared storage area specified by the &#x201c;Adobe-store:&#x201d; identifier, but also clearly demarcate their respective data files in the file system hierarchy using the initial directories &#x201c;//program.alpha/&#x201d; and &#x201c;//program.beta/&#x201d;, which correspond to the program names.</p>
<p id="p-0028" num="0027">The one or more file resources can be accessed <b>250</b> for the program in accordance with the mapping. This can involve reading data from or writing data to a file resource, returning a link to the file resource, or returning the file resource itself. Further, it should be noted that the directory structure represented in the second information need not correspond to any actual directory structure maintained by the operating system for the accessed storage. In fact, the system can be designed to deliberately obfuscate the structure and organization of data in the various storage areas in order to help prevent access by any software other than the runtime.</p>
<p id="p-0029" num="0028">Such obfuscation can also be employed by the program as well; if the runtime library does not provide an interface for discovery of the file system hierarchy in the virtual file system, then a program can use a complicated file system hierarchy in the virtual file system to help secure its private data, since other programs can be kept ignorant of the file system hierarchy and thus not know how to request any data. Other security measures can also be employed to protect the stored data, such as the use of encryption by the runtime in storing data. Moreover, in some implementations, the runtime library can provide an interface for discovery of the file system hierarchy in the virtual file system, including traditional file system constructs for dealing with files in a file system (e.g., a directory list command, a file copy command, a file move command, etc.).</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart showing an example process of authenticating a program before granting access to a virtual file system. An identifier can be obtained <b>310</b> for a program. This can involve the runtime retrieving the identifier automatically when the program is invoked on a computer. For example, when the program starts running, the first code that is run can be that of the runtime, which can look up the strong name of the program (as well as possibly other signed identifiers and other data regarding the program), and the runtime can authenticate the program for access to one or more storage areas before the program's code is run. Obtaining the identifier can involve receiving the identifier from the program through an API call to the runtime, such as a call to the file access routine <b>145</b>, or a call to another API routine used specifically for authentication of the program for access to the virtual file system.</p>
<p id="p-0031" num="0030">A first digital signature of the identifier can be checked <b>320</b>, and a second digital signature of the program can be checked <b>330</b> to authenticate the program for the identifier. The first and second digital signatures can be created by a common private key, and the runtime library can include the public key corresponding to the common private key. By checking the signature of the program and the signature of the identifier using the public key, the runtime can confirm that the identifier and the program have both been signed by the owner of the private key, and thus, the program has a legitimate claim to present that identifier and use that identifier to access a corresponding persistent storage area.</p>
<p id="p-0032" num="0031">The digital signature of the identifier can be a strong name of the program that is obtained at program startup, in which case, the program's name can be used to identify the program's private virtual file system sandboxed in the local storage. Alternatively, the strong name can be associated with one or more identifiers, including one used to identify the program's private virtual file system sandboxed in the local storage, and the program can be authenticated for use of each of the one or more identifiers by checking the strong name. The strong name can be checked using traditional strong name techniques.</p>
<p id="p-0033" num="0032">The digital signature of the program can be a signature of the whole program code or parts thereof. The digital signature of the program can be checked using a traditional public certificate associated with the program. The public certificate can be bundled with the program and/or can be issued by a Certificate Authority. Checking the signature of the program can involve processing more than one certificate (e.g., the first one being bundled with the program, and others being accessible over a network). In any event, the identifier specifies a virtual file system partition that may be exposed to the calling program, and the cross check of the digital signature of the identifier with that of the calling program allows the runtime to confirm the program is authorized to access the specified virtual file system partition.</p>
<p id="p-0034" num="0033">The runtime library can include multiple public keys for checking signatures of other identifiers and other programs, and the full set of public keys used by the runtime can be configurable, such that public keys can be added or removed from the runtime library after it is installed on a given computer. Furthermore, other authentication and authorization operations can be performed by the runtime. For example, a virtual file system partition can be shared among multiple programs and also have access restrictions/privileges associated with the various programs (e.g., program alpha may have full read/write access to the partition while program beta may only have read access to the partition), and the runtime can enforce these access restrictions/privileges as well.</p>
<p id="p-0035" num="0034">Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, or a combination of one or more of them. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.</p>
<p id="p-0036" num="0035">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p>
<p id="p-0037" num="0036">The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).</p>
<p id="p-0038" num="0037">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p>
<p id="p-0039" num="0038">To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.</p>
<p id="p-0040" num="0039">Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), e.g., the Internet.</p>
<p id="p-0041" num="0040">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p>
<p id="p-0042" num="0041">While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p>
<p id="p-0043" num="0042">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p>
<p id="p-0044" num="0043">Thus, particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. A URI scheme used by the runtime library can allow addressing of volatile memory in addition to persistent storage. Moreover, the URI scheme can be developed such that the full file I/O (input/output) semantics (read, write, copy, etc.) are handled by the runtime, and the program can treat local files like remote files. For example, the virtual file system manager can implement a remote file management protocol (e.g., WebDAV (Web-based Distributed Authoring and Versioning)) that is also supported locally, and the runtime on a computer (which can be a traditional client-side personal computer) can handle the difference in processing local versus remote accesses without exposing those differences to the calling program (e.g., the runtime can handle the WebDAV headers and data used for remote file access).</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method implemented on a computer, the method comprising:
<claim-text>providing runtime services, including a virtual file system, to a first program running on the computer and a second program running on the computer, providing the runtime services comprising:</claim-text>
<claim-text>receiving, from the first program, first information and second information through a single file access routine of an application program interface (API) for the virtual file system;</claim-text>
<claim-text>determining one of multiple file storage areas to access based on the first information, the multiple file storage areas including a first area and a second area, the first area being local to the computer and accessible by the first program through the virtual file system, the first area further being inaccessible by the second program through the virtual file system, the second area being accessible by the first program and the second program through the virtual file system;</claim-text>
<claim-text>mapping the second information to one or more file resources in the determined file storage area in the virtual file system; and</claim-text>
<claim-text>accessing the one or more file resources for the first program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein providing the runtime services further comprises authenticating the first program based at least in part on an identifier associated with the first program.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first information comprises the identifier.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the second area is remote from the computer and accessible over a communication network.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the authenticating comprises checking a digital signature for the first program.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the checking comprises:
<claim-text>checking a first digital signature of the identifier; and</claim-text>
<claim-text>checking a second digital signature of the first program;</claim-text>
<claim-text>wherein the first and second digital signatures are created by a common private key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving the first information and the second information comprises receiving a character string through the single file access routine of the API for the virtual file system, the character string comprising the first information and the second information.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the character string conforms to a Universal Resource Identifiers (URI) specification used for network communications.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer program product, encoded on a computer-readable storage medium, operable to cause data processing apparatus to perform operations comprising:
<claim-text>providing runtime services, including a virtual file system, to a first program running on a computer and a second program running on the computer, providing the runtime services comprising:</claim-text>
<claim-text>receiving, from the first program, first information and second information through a single file access routine of an application program interface (API) for the virtual file system;</claim-text>
<claim-text>determining one of multiple file storage areas to access based on the first information, the multiple file storage areas including a first area and a second area, the first area being local to the computer and accessible by the first program through the virtual file system, the first area further being inaccessible by the second program through the virtual file system, the second area being accessible by the first program and the second program through the virtual file system;</claim-text>
<claim-text>mapping the second information to one or more file resources in the determined file storage area in the virtual file system; and</claim-text>
<claim-text>accessing the one or more file resources for the first program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein providing the runtime services further comprises authenticating the first program based at least in part on an identifier associated with the first program.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first information comprises the identifier.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second area is remote from the computer and accessible over a communication network.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the authenticating comprises checking a digital signature for the first program.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the checking comprises:
<claim-text>checking a first digital signature of the identifier; and</claim-text>
<claim-text>checking a second digital signature of the first program;</claim-text>
<claim-text>wherein the first and second digital signatures are created by a common private key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein receiving the first information and the second information comprises receiving a character string through the single file access routine of the API for the virtual file system, the character string comprising the first information and the second information.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the character string conforms to a Universal Resource Identifiers (URI) specification used for network communications.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A system comprising:
<claim-text>a processor;</claim-text>
<claim-text>local storage coupled with the processor; and</claim-text>
<claim-text>an operating system configured to facilitate access to the processor and the local storage to implement a runtime library configured to:</claim-text>
<claim-text>provide runtime services, including a virtual file system, to a first program running on the processor and a second program running on the processor;</claim-text>
<claim-text>include an application program interface (API) for the virtual file system that enables first information and second information to be received from the first program through a single file access routine of the API for the virtual file system;</claim-text>
<claim-text>determine one of multiple file storage areas to access based on the first information, the multiple file storage areas including a first area and a second area, the first area being in the local storage and accessible by the first program through the virtual file system, the first area further being inaccessible by the second program through the virtual file system, the second area being accessible by the first program and the second program through the virtual file system;</claim-text>
<claim-text>map the second information to one or more file resources in the determined file storage area in the virtual file system; and</claim-text>
<claim-text>access the one or more file resources for the first program.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the runtime library is further configured to authenticate the first program based at least in part on an identifier associated with the first program.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first information comprises the identifier.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising an interface device to connect to a communication network, wherein the second area is remote from the processor and accessible over the communication network.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the runtime library is further configured to authenticate the first program by checking a digital signature for the first program.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the runtime library is further configured to check a first digital signature of the identifier and a second digital signature of the first program; wherein the first and second digital signatures are created by a common private key.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the runtime library is further configured to receive a character string through the single file access routine of the API for the virtual file system, the character string comprising the first information and the second information.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the character string conforms to a Universal Resource Identifiers (URI) specification used for network communications. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625344-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625344</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13137425</doc-number>
<date>20110815</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>KR</country>
<doc-number>10-2008-0055637</doc-number>
<date>20080613</date>
</priority-claim>
<priority-claim sequence="02" kind="national">
<country>KR</country>
<doc-number>10-2008-0055639</doc-number>
<date>20080613</date>
</priority-claim>
<priority-claim sequence="03" kind="national">
<country>KR</country>
<doc-number>10-2008-0055641</doc-number>
<date>20080613</date>
</priority-claim>
<priority-claim sequence="04" kind="national">
<country>KR</country>
<doc-number>10-2008-0055642</doc-number>
<date>20080613</date>
</priority-claim>
<priority-claim sequence="05" kind="national">
<country>KR</country>
<doc-number>10-2008-0055643</doc-number>
<date>20080613</date>
</priority-claim>
<priority-claim sequence="06" kind="national">
<country>KR</country>
<doc-number>10-2008-0056871</doc-number>
<date>20080617</date>
</priority-claim>
<priority-claim sequence="07" kind="national">
<country>KR</country>
<doc-number>10-2008-0061001</doc-number>
<date>20080626</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>150</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>11</class>
<subclass>C</subclass>
<main-group>16</main-group>
<subgroup>04</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>36518503</main-classification>
<further-classification>36518509</further-classification>
<further-classification>36518511</further-classification>
</classification-national>
<invention-title id="d2e180">Memory system and method of accessing a semiconductor memory device</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5530828</doc-number>
<kind>A</kind>
<name>Kaki et al.</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5537358</doc-number>
<kind>A</kind>
<name>Fong</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6198663</doc-number>
<kind>B1</kind>
<name>Takizawa</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6209078</doc-number>
<kind>B1</kind>
<name>Chiang et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712 36</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6335878</doc-number>
<kind>B1</kind>
<name>Yamada et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6636937</doc-number>
<kind>B2</kind>
<name>Peter</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6725342</doc-number>
<kind>B1</kind>
<name>Coulson</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6728133</doc-number>
<kind>B2</kind>
<name>Shimizu</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6788572</doc-number>
<kind>B2</kind>
<name>Yamada et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6810495</doc-number>
<kind>B2</kind>
<name>Castelli et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6831872</doc-number>
<kind>B2</kind>
<name>Matsuoka</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6877118</doc-number>
<kind>B2</kind>
<name>Oshima et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7032103</doc-number>
<kind>B2</kind>
<name>Eslick et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7073029</doc-number>
<kind>B2</kind>
<name>Uysal et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7193896</doc-number>
<kind>B2</kind>
<name>Shiga</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7277355</doc-number>
<kind>B2</kind>
<name>Tanzawa</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7405988</doc-number>
<kind>B2</kind>
<name>Tran et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7529905</doc-number>
<kind>B2</kind>
<name>Sinclair</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7594157</doc-number>
<kind>B2</kind>
<name>Choi et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7596022</doc-number>
<kind>B2</kind>
<name>Chae et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7672162</doc-number>
<kind>B2</kind>
<name>Hwang</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7755950</doc-number>
<kind>B2</kind>
<name>Yu et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7765367</doc-number>
<kind>B2</kind>
<name>Sung et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711154</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7831846</doc-number>
<kind>B2</kind>
<name>Ishidera et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713300</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7843732</doc-number>
<kind>B2</kind>
<name>Lee et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7970981</doc-number>
<kind>B2</kind>
<name>Cheon et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>8027194</doc-number>
<kind>B2</kind>
<name>Lee et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>36518503</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>8332573</doc-number>
<kind>B2</kind>
<name>Jeong et al.</name>
<date>20121200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2005/0144516</doc-number>
<kind>A1</kind>
<name>Gonzalez et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2005/0166087</doc-number>
<kind>A1</kind>
<name>Gorobets</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2007/0035997</doc-number>
<kind>A1</kind>
<name>Shibata et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2007/0036016</doc-number>
<kind>A1</kind>
<name>Takeuchi et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2008/0013371</doc-number>
<kind>A1</kind>
<name>Shiga</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2008/0068883</doc-number>
<kind>A1</kind>
<name>Kang et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2008/0094893</doc-number>
<kind>A1</kind>
<name>Choi</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2011/0307646</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>CN</country>
<doc-number>101197189</doc-number>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>JP</country>
<doc-number>05-181779</doc-number>
<date>19930700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>JP</country>
<doc-number>08-279295</doc-number>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>JP</country>
<doc-number>08-339693</doc-number>
<date>19961200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>JP</country>
<doc-number>10-154101</doc-number>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>JP</country>
<doc-number>2001-319493</doc-number>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>JP</country>
<doc-number>2002-108716</doc-number>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>JP</country>
<doc-number>2002-278828</doc-number>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>JP</country>
<doc-number>2004-185745</doc-number>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>JP</country>
<doc-number>2006-039877</doc-number>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>JP</country>
<doc-number>2006-196078</doc-number>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>JP</country>
<doc-number>2006-294126</doc-number>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>JP</country>
<doc-number>2007-048410</doc-number>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>JP</country>
<doc-number>2007-257109</doc-number>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>JP</country>
<doc-number>2008-010046</doc-number>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>KR</country>
<doc-number>10-2001-0037694</doc-number>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>KR</country>
<doc-number>10-0303217</doc-number>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>KR</country>
<doc-number>10-2001-0100939</doc-number>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>KR</country>
<doc-number>10-2004-0048870</doc-number>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>KR</country>
<doc-number>10-2005-0027233</doc-number>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>KR</country>
<doc-number>10-2005-0064887</doc-number>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>KR</country>
<doc-number>10-2005-0091230</doc-number>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>KR</country>
<doc-number>10-2006-0091358</doc-number>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>KR</country>
<doc-number>10-2006-0124755</doc-number>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>KR</country>
<doc-number>10-2007-0008403</doc-number>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>KR</country>
<doc-number>10-2007-0019575</doc-number>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>KR</country>
<doc-number>10-2007-0031647</doc-number>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>KR</country>
<doc-number>10-0771521</doc-number>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>KR</country>
<doc-number>10-0799688</doc-number>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>KR</country>
<doc-number>10-0806343</doc-number>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>WO</country>
<doc-number>WO 97/31318</doc-number>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>WO</country>
<doc-number>WO 2006/026645</doc-number>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Office Action for corresponding U.S. Appl. No. 13/137,401 dated Feb. 13, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Office Action for corresponding U.S. Appl. No. 13/137,409 dated Apr. 29, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Office Action for corresponding U.S. Appl. No. 13/137,422 dated Mar. 12, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>36518503</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>36518509</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>36518511</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>91</number-of-drawing-sheets>
<number-of-figures>103</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12457485</doc-number>
<date>20090612</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8027194</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13137425</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61061335</doc-number>
<date>20080613</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61129241</doc-number>
<date>20080613</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61129242</doc-number>
<date>20080613</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61129249</doc-number>
<date>20080613</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61129248</doc-number>
<date>20080613</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61073632</doc-number>
<date>20080618</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61129600</doc-number>
<date>20080708</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110302476</doc-number>
<kind>A1</kind>
<date>20111208</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Jaesoo</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Roh</last-name>
<first-name>Kangho</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cho</last-name>
<first-name>Wonhee</first-name>
<address>
<city>Anyang-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Shim</last-name>
<first-name>Hojun</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Choi</last-name>
<first-name>Youngjoon</first-name>
<address>
<city>Seongnam-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Heo</last-name>
<first-name>Jaehoon</first-name>
<address>
<city>Gunpo-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Song</last-name>
<first-name>Je-Hyuck</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="008" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cho</last-name>
<first-name>Seung-Duk</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="009" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kim</last-name>
<first-name>Seontaek</first-name>
<address>
<city>Suwon-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="010" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Oh</last-name>
<first-name>Moonwook</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="011" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Park</last-name>
<first-name>Jong Tae</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="012" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cheon</last-name>
<first-name>Wonmoon</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="013" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Park</last-name>
<first-name>Chanik</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
<us-applicant sequence="014" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Yang-sup</first-name>
<address>
<city>Gunpo-si</city>
<country>KR</country>
</address>
</addressbook>
<residence>
<country>KR</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Jaesoo</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Roh</last-name>
<first-name>Kangho</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Cho</last-name>
<first-name>Wonhee</first-name>
<address>
<city>Anyang-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Shim</last-name>
<first-name>Hojun</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Choi</last-name>
<first-name>Youngjoon</first-name>
<address>
<city>Seongnam-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Heo</last-name>
<first-name>Jaehoon</first-name>
<address>
<city>Gunpo-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Song</last-name>
<first-name>Je-Hyuck</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Cho</last-name>
<first-name>Seung-Duk</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="009" designation="us-only">
<addressbook>
<last-name>Kim</last-name>
<first-name>Seontaek</first-name>
<address>
<city>Suwon-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="010" designation="us-only">
<addressbook>
<last-name>Oh</last-name>
<first-name>Moonwook</first-name>
<address>
<city>Seoul</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="011" designation="us-only">
<addressbook>
<last-name>Park</last-name>
<first-name>Jong Tae</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="012" designation="us-only">
<addressbook>
<last-name>Cheon</last-name>
<first-name>Wonmoon</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="013" designation="us-only">
<addressbook>
<last-name>Park</last-name>
<first-name>Chanik</first-name>
<address>
<city>Hwaseong-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="014" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Yang-sup</first-name>
<address>
<city>Gunpo-si</city>
<country>KR</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Harness, Dickey &#x26; Pierce, P.L.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Samsung Electronics Co., Ltd.</orgname>
<role>03</role>
<address>
<city>Gyeonggi-do</city>
<country>KR</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Luu</last-name>
<first-name>Pho M</first-name>
<department>2824</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A memory system is provided with a processor, a main memory, and a flash memory. Performance of the memory system is improved through achievement of speed-up and high data reliability. The memory system includes a nonvolatile memory device and a controller configured to drive a control program to control the nonvolatile memory device. The control program executes a second access operation for the nonvolatile memory device even before a first access operation to the nonvolatile memory device is completed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="166.45mm" wi="109.56mm" file="US08625344-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.97mm" wi="173.40mm" file="US08625344-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="143.00mm" wi="148.51mm" file="US08625344-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="182.29mm" wi="132.84mm" file="US08625344-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="144.27mm" wi="178.90mm" file="US08625344-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="143.09mm" wi="175.18mm" file="US08625344-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="237.91mm" wi="179.66mm" file="US08625344-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="263.74mm" wi="114.55mm" file="US08625344-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="140.97mm" wi="93.56mm" file="US08625344-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="249.43mm" wi="148.42mm" file="US08625344-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="235.71mm" wi="175.43mm" orientation="landscape" file="US08625344-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="241.30mm" wi="179.58mm" file="US08625344-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="146.39mm" wi="159.26mm" file="US08625344-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="248.07mm" wi="144.36mm" file="US08625344-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="212.17mm" wi="138.26mm" orientation="landscape" file="US08625344-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="259.67mm" wi="149.18mm" orientation="landscape" file="US08625344-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="170.10mm" wi="164.00mm" file="US08625344-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="164.68mm" wi="153.84mm" file="US08625344-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="250.70mm" wi="151.81mm" orientation="landscape" file="US08625344-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="216.83mm" wi="161.29mm" orientation="landscape" file="US08625344-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="251.54mm" wi="151.89mm" orientation="landscape" file="US08625344-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="252.90mm" wi="150.54mm" orientation="landscape" file="US08625344-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="230.29mm" wi="152.40mm" file="US08625344-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="100.25mm" wi="183.56mm" file="US08625344-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="172.80mm" wi="166.71mm" file="US08625344-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="242.49mm" wi="160.27mm" orientation="landscape" file="US08625344-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="245.45mm" wi="148.17mm" file="US08625344-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="183.05mm" wi="118.62mm" file="US08625344-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="183.64mm" wi="116.59mm" file="US08625344-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="126.66mm" wi="149.10mm" file="US08625344-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00030" num="00030">
<img id="EMI-D00030" he="247.48mm" wi="140.29mm" file="US08625344-20140107-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00031" num="00031">
<img id="EMI-D00031" he="256.88mm" wi="156.55mm" orientation="landscape" file="US08625344-20140107-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00032" num="00032">
<img id="EMI-D00032" he="186.77mm" wi="113.37mm" file="US08625344-20140107-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00033" num="00033">
<img id="EMI-D00033" he="269.16mm" wi="126.75mm" orientation="landscape" file="US08625344-20140107-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00034" num="00034">
<img id="EMI-D00034" he="252.81mm" wi="151.81mm" orientation="landscape" file="US08625344-20140107-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00035" num="00035">
<img id="EMI-D00035" he="153.84mm" wi="134.11mm" file="US08625344-20140107-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00036" num="00036">
<img id="EMI-D00036" he="273.05mm" wi="157.23mm" orientation="landscape" file="US08625344-20140107-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00037" num="00037">
<img id="EMI-D00037" he="140.89mm" wi="121.24mm" file="US08625344-20140107-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00038" num="00038">
<img id="EMI-D00038" he="127.42mm" wi="141.65mm" file="US08625344-20140107-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00039" num="00039">
<img id="EMI-D00039" he="152.40mm" wi="182.88mm" file="US08625344-20140107-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00040" num="00040">
<img id="EMI-D00040" he="208.53mm" wi="176.02mm" file="US08625344-20140107-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00041" num="00041">
<img id="EMI-D00041" he="224.96mm" wi="175.51mm" file="US08625344-20140107-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00042" num="00042">
<img id="EMI-D00042" he="160.02mm" wi="138.26mm" file="US08625344-20140107-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00043" num="00043">
<img id="EMI-D00043" he="208.11mm" wi="126.75mm" file="US08625344-20140107-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00044" num="00044">
<img id="EMI-D00044" he="201.93mm" wi="123.27mm" file="US08625344-20140107-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00045" num="00045">
<img id="EMI-D00045" he="121.24mm" wi="166.71mm" file="US08625344-20140107-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00046" num="00046">
<img id="EMI-D00046" he="246.55mm" wi="164.59mm" file="US08625344-20140107-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00047" num="00047">
<img id="EMI-D00047" he="136.91mm" wi="164.93mm" file="US08625344-20140107-D00047.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00048" num="00048">
<img id="EMI-D00048" he="263.74mm" wi="178.31mm" file="US08625344-20140107-D00048.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00049" num="00049">
<img id="EMI-D00049" he="223.01mm" wi="178.90mm" file="US08625344-20140107-D00049.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00050" num="00050">
<img id="EMI-D00050" he="176.28mm" wi="172.21mm" file="US08625344-20140107-D00050.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00051" num="00051">
<img id="EMI-D00051" he="199.31mm" wi="168.15mm" file="US08625344-20140107-D00051.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00052" num="00052">
<img id="EMI-D00052" he="249.17mm" wi="174.50mm" file="US08625344-20140107-D00052.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00053" num="00053">
<img id="EMI-D00053" he="234.36mm" wi="174.24mm" orientation="landscape" file="US08625344-20140107-D00053.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00054" num="00054">
<img id="EMI-D00054" he="101.77mm" wi="162.22mm" file="US08625344-20140107-D00054.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00055" num="00055">
<img id="EMI-D00055" he="267.89mm" wi="168.83mm" orientation="landscape" file="US08625344-20140107-D00055.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00056" num="00056">
<img id="EMI-D00056" he="262.30mm" wi="185.00mm" orientation="landscape" file="US08625344-20140107-D00056.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00057" num="00057">
<img id="EMI-D00057" he="250.02mm" wi="134.11mm" file="US08625344-20140107-D00057.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00058" num="00058">
<img id="EMI-D00058" he="235.80mm" wi="172.13mm" orientation="landscape" file="US08625344-20140107-D00058.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00059" num="00059">
<img id="EMI-D00059" he="241.55mm" wi="120.40mm" file="US08625344-20140107-D00059.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00060" num="00060">
<img id="EMI-D00060" he="206.08mm" wi="172.89mm" file="US08625344-20140107-D00060.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00061" num="00061">
<img id="EMI-D00061" he="218.36mm" wi="176.28mm" file="US08625344-20140107-D00061.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00062" num="00062">
<img id="EMI-D00062" he="203.28mm" wi="172.80mm" file="US08625344-20140107-D00062.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00063" num="00063">
<img id="EMI-D00063" he="151.38mm" wi="171.11mm" file="US08625344-20140107-D00063.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00064" num="00064">
<img id="EMI-D00064" he="246.80mm" wi="169.76mm" orientation="landscape" file="US08625344-20140107-D00064.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00065" num="00065">
<img id="EMI-D00065" he="202.44mm" wi="123.87mm" file="US08625344-20140107-D00065.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00066" num="00066">
<img id="EMI-D00066" he="233.17mm" wi="143.68mm" file="US08625344-20140107-D00066.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00067" num="00067">
<img id="EMI-D00067" he="221.66mm" wi="126.75mm" file="US08625344-20140107-D00067.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00068" num="00068">
<img id="EMI-D00068" he="229.11mm" wi="179.58mm" file="US08625344-20140107-D00068.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00069" num="00069">
<img id="EMI-D00069" he="169.76mm" wi="175.18mm" file="US08625344-20140107-D00069.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00070" num="00070">
<img id="EMI-D00070" he="237.83mm" wi="164.00mm" orientation="landscape" file="US08625344-20140107-D00070.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00071" num="00071">
<img id="EMI-D00071" he="251.71mm" wi="149.52mm" file="US08625344-20140107-D00071.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00072" num="00072">
<img id="EMI-D00072" he="105.07mm" wi="149.10mm" file="US08625344-20140107-D00072.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00073" num="00073">
<img id="EMI-D00073" he="148.17mm" wi="180.09mm" file="US08625344-20140107-D00073.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00074" num="00074">
<img id="EMI-D00074" he="194.48mm" wi="159.68mm" file="US08625344-20140107-D00074.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00075" num="00075">
<img id="EMI-D00075" he="173.14mm" wi="165.27mm" file="US08625344-20140107-D00075.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00076" num="00076">
<img id="EMI-D00076" he="239.10mm" wi="129.37mm" file="US08625344-20140107-D00076.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00077" num="00077">
<img id="EMI-D00077" he="234.19mm" wi="124.29mm" file="US08625344-20140107-D00077.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00078" num="00078">
<img id="EMI-D00078" he="117.26mm" wi="110.49mm" file="US08625344-20140107-D00078.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00079" num="00079">
<img id="EMI-D00079" he="204.39mm" wi="110.91mm" file="US08625344-20140107-D00079.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00080" num="00080">
<img id="EMI-D00080" he="92.71mm" wi="135.13mm" file="US08625344-20140107-D00080.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00081" num="00081">
<img id="EMI-D00081" he="243.25mm" wi="146.98mm" file="US08625344-20140107-D00081.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00082" num="00082">
<img id="EMI-D00082" he="147.66mm" wi="173.48mm" file="US08625344-20140107-D00082.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00083" num="00083">
<img id="EMI-D00083" he="144.27mm" wi="162.48mm" file="US08625344-20140107-D00083.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00084" num="00084">
<img id="EMI-D00084" he="132.16mm" wi="158.58mm" file="US08625344-20140107-D00084.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00085" num="00085">
<img id="EMI-D00085" he="175.60mm" wi="134.28mm" file="US08625344-20140107-D00085.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00086" num="00086">
<img id="EMI-D00086" he="158.67mm" wi="122.77mm" file="US08625344-20140107-D00086.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00087" num="00087">
<img id="EMI-D00087" he="163.32mm" wi="140.97mm" file="US08625344-20140107-D00087.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00088" num="00088">
<img id="EMI-D00088" he="186.35mm" wi="132.76mm" file="US08625344-20140107-D00088.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00089" num="00089">
<img id="EMI-D00089" he="155.02mm" wi="111.76mm" file="US08625344-20140107-D00089.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00090" num="00090">
<img id="EMI-D00090" he="149.01mm" wi="159.17mm" file="US08625344-20140107-D00090.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00091" num="00091">
<img id="EMI-D00091" he="239.95mm" wi="147.07mm" file="US08625344-20140107-D00091.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a divisional of U.S. application Ser. No. 12/457,485 filed Jun. 12, 2009 now U.S. Pat. No. 8,027,194, which (1) claims priority under 35 U.S.C. &#xa7;119 of Korean Patent Application Nos. 10-2008-55637 filed on Jun. 13, 2008, 10-2008-55641 filed on Jun. 13, 2008, 10-2008-55639 filed on Jun. 13, 2008, 10-2008-55642 filed on Jun. 13, 2008, 10-2008-55643 filed on Jun. 13, 2008, 10-2008-56871 filed on Jun. 17, 2008 and 10-2008-61001 filed on Jun. 26, 2008, and (2) also claims priority under 35 U.S.C. &#xa7;119 of U.S. Provisional Application Nos. 61/061,335 filed on Jun. 13, 2008, 61/129,241 filed on Jun. 13, 2008, 61/129,242 filed on Jun. 13, 2008, 61/129,249 filed on Jun. 13, 2008, 61/129,248 filed on Jun. 13, 2008, 61/073,632 filed on Jun. 18, 2008 and 61/129,600 filed on Jul. 8, 2008; the entire contents of all of the above are hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">1. Technical Field</p>
<p id="p-0004" num="0003">The present invention disclosed herein relates to a semiconductor memory device, and more particularly, to a memory system and a method of accessing a semiconductor memory device.</p>
<p id="p-0005" num="0004">2. Description of Related Art</p>
<p id="p-0006" num="0005">A semiconductor memory device is a storage device that can store data and read the stored data when required. Semiconductor memory devices may be mainly classified into volatile memory devices and nonvolatile memory devices.</p>
<p id="p-0007" num="0006">Volatile memory devices loose stored data when power supply is interrupted. In contrast, nonvolatile memory devices retain stored data even if power supply is interrupted. Examples of nonvolatile memory devices are a read only memory (ROM), a programmable ROM (PROM), an erasable PROM (EPROM), an electrically erasable PROM (EEPROM), a flash memory device, a phase change random access memory (PRAM), a magnetic RAM (MRAM), a resistance RAM (RRAM), a ferroelectric RAM (FRAM), and so forth.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">The present invention provides a nonvolatile memory system that can respond in real time. The present invention further provides a method of accessing a nonvolatile memory device.</p>
<p id="p-0009" num="0008">The present invention also provides a nonvolatile memory system providing a multithreading function, and an associated method of accessing a nonvolatile memory device.</p>
<p id="p-0010" num="0009">Embodiments of the present invention provide memory systems including: a nonvolatile memory device; and a controller driving a control program that controls the nonvolatile memory device, wherein the control program executes a second access operation to the nonvolatile memory device even before a first access operation to the nonvolatile memory device is completed.</p>
<p id="p-0011" num="0010">In some embodiments, the control program generates a response signal indicating the completion of the first access operation when a time assigned to the first access operation is over before the first access operation is completed.</p>
<p id="p-0012" num="0011">In other embodiments, the control program stores progression degree of the first access operation when the first access operation is suspended.</p>
<p id="p-0013" num="0012">In still other embodiments, the control program suspends the first access operation when a time assigned to the first access operation is over before the first access operation is completed. The control program resumes the suspended first access operation when an idle time occurs.</p>
<p id="p-0014" num="0013">In even other embodiments, the control program executes the second access operation when a request for the second access operation is transferred after the first access operation is suspended. When the second access operation is completed before a time assigned to the second access operation is over, the control program resumes the first access operation until the time assigned to the second access operation is over.</p>
<p id="p-0015" num="0014">In yet other embodiments, the control program resumes the first access operation until a request for the second access operation is transferred after the first access operation is suspended.</p>
<p id="p-0016" num="0015">In further embodiments, the first access operation is a first write operation, and the second access operation is a second write operation or read operation. The control program executes the read operation when a request for the read operation is transferred after the first write operation is suspended. The control program executes the second write operation to a buffer when a request for the second write operation is transferred after the first write operation is suspended. The control program writes data written to the write buffer to the nonvolatile memory device when an idle time occurs.</p>
<p id="p-0017" num="0016">In still further embodiments, the nonvolatile memory device and the controller are integrated into one semiconductor device.</p>
<p id="p-0018" num="0017">In even further embodiments, the nonvolatile memory device and the controller form a semiconductor disk device.</p>
<p id="p-0019" num="0018">In yet further embodiments, the nonvolatile memory device is a flash memory device, and the control program is a flash translation layer.</p>
<p id="p-0020" num="0019">In other embodiments, the control program is firmware stored in the controller nonvolatilely.</p>
<p id="p-0021" num="0020">In still other embodiments, the control program is configured with a logic circuit.</p>
<p id="p-0022" num="0021">In even other embodiments of the present invention, methods of accessing a nonvolatile memory device include: executing a first access operation according to a request for a first access operation; suspending the first access operation when a time assigned to the first access operation is over although the first access operation is not completed; and resuming the suspended first access operation when an idle time occurs.</p>
<p id="p-0023" num="0022">In yet other embodiments, the resuming of the first access operation is executed until a request for a second access operation is transferred.</p>
<p id="p-0024" num="0023">In further embodiments, the resuming of the first access operation is performed until a time assigned to the second access operation is over, when the second access operation according to a request for the second access operation is completed before the time assigned to the second access operation is over.</p>
<p id="p-0025" num="0024">In still further embodiments of the present invention, memory systems include: a nonvolatile memory device; and a controller driving a control program that controls the nonvolatile memory device. Herein, when a time assigned to a first access operation to the nonvolatile memory device is over, the control program transmits a response signal indicating the completion of the first access operation to a host even before the first access operation is completed.</p>
<p id="p-0026" num="0025">In even further embodiments, when the time assigned to the first access operation is over, the control program suspends the first access operation and executes a second access operation.</p>
<p id="p-0027" num="0026">In yet further embodiments, the control program resumes the suspended first access operation when an idle time occurs.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0028" num="0027">The accompanying figures are included to provide a further understanding of the present invention, and are incorporated in and constitute a part of this specification. The drawings illustrate exemplary embodiments of the present invention and, together with the description, serve to explain principles of the present invention. In the figures:</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating operation of a general flash memory system.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a memory system according to an embodiment of the present invention.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart illustrating operation of a memory system according to an embodiment of the present invention.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating a control program of the memory system of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating operation of mapping tables according to an embodiment of the present invention.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating a multithreading function provided by the control program of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. 7A through 7C</figref> are diagrams illustrating how the control program of <figref idref="DRAWINGS">FIG. 4</figref> stores local variables of primary and secondary thread operations.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating a first type idle time.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram illustrating a second type idle time.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram illustrating an embodiment where the control program of <figref idref="DRAWINGS">FIG. 4</figref> operates according to a request of a host.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart how the control program according to the embodiment of the present invention responds in real time.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram illustrating an embodiment of a computing system including the memory system of <figref idref="DRAWINGS">FIGS. 2 and 4</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram illustrating a hardware structure of a memory system using a flash memory.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram illustrating a system software structure of the memory system of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating a hybrid mapping method of the memory system of <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 16</figref> is a conceptual diagram illustrating a general mapping method of a memory system.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 17(</figref><i>a</i>) and <figref idref="DRAWINGS">FIG. 17(</figref><i>b</i>) illustrate a page mapping relationship between a data block and a log block of <figref idref="DRAWINGS">FIG. 16</figref>.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 18</figref> is a view illustrating a method of generating a new data block by merging a data block with a log block.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 19</figref> is a conceptual diagram illustrating an asymmetric mapping method of a memory system according to the present invention.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart illustrating an asymmetric mapping method according to another embodiment of the present invention.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 21</figref> is a view illustrating random write of <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 22</figref> is a view illustrating sequential write of <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 23</figref> is a view illustrating a case where all logical pages page <b>0</b>, page <b>1</b>, and page <b>2</b> in a data block are updated only once by a log block.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 24</figref> is a view illustrating a case where partial logical pages in a data block are updated by a log block.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 25</figref> is a view illustrating a case where partial logical pages in a data block are updated by a log block.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 26</figref> is a block diagram illustrating a computing system with a flash memory device according to the present invention.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram illustrating a structure of a solid state disk (SSD) system according to the present invention.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 28</figref> is a block diagram of a memory system according to an embodiment of the present invention.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram of a memory system according to another embodiment of the present invention.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 30</figref> depicts a system layer structure of a Pure-NAND memory, and <figref idref="DRAWINGS">FIG. 31</figref> is a system layer structure of a system layer structure of a Managed-NAND memory.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 32</figref> depicts a chart illustrating proportions of execution time of the basic operations for each of the NAND flash memories.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 33</figref> and <figref idref="DRAWINGS">FIG. 34</figref> depict merge operation according to log mapping.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 35</figref> depicts a block diagram of the memory system according to an exemplary embodiment of the present invention.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 36</figref> depicts a flow chart illustrating a driving method of the memory system of <figref idref="DRAWINGS">FIG. 35</figref>.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 37</figref> depicts a timing diagram of operations of a host CPU in a Pure-NAND.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 38</figref> depicts a timing diagram of the CPU and accelerator of <figref idref="DRAWINGS">FIG. 35</figref>.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 39</figref> depicts a graph comparing the operation performance between the <figref idref="DRAWINGS">FIG. 37</figref> and <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 40</figref> depicts a block diagram illustrating a memory system according to another exemplary embodiment of the present invention.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 41</figref> depicts a computer system including the memory system of the present invention.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 42</figref> is a block diagram depicting memory-based storage device according to other exemplary embodiment of the present invention.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 43</figref> is a block diagram exemplarily showing an embodiment of a memory system according to the present invention.</p>
<p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. 44</figref> is a block diagram showing the flash memory shown in <figref idref="DRAWINGS">FIG. 43</figref>.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 45</figref> is a diagram showing a bias voltage of a multi-level cell.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 46</figref> is a diagram showing a threshold voltage change by temperature variation of the memory cell shown in <figref idref="DRAWINGS">FIG. 44</figref>.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 47</figref> is a flow chart showing a procedure for initializing the temperature sensor shown in <figref idref="DRAWINGS">FIG. 43</figref>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 48</figref> is a flow chart showing a verifying-voltage trimming method by temperature variation of a memory system according to the present invention.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 49</figref> is a flow chart showing a read-voltage trimming method by temperature variation of a memory system according to the present invention.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIGS. 50 through 53</figref> are block diagrams showing various embodiments of the memory system according to the present invention.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 54</figref> is a flow chart showing another method for curing a bit error by a threshold voltage change of memory cells.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 55</figref> is a diagram showing threshold voltage distributions of multi-level cells each storing 2 bits (MSB and LSB) and data values corresponding to the distributions in a memory such a NAND flash memory.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 56</figref> is a diagram showing a memory system according to an embodiment of the present invention.</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 57</figref> is a flow chart for illustrating a programming method according to an embodiment of the present invention.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIGS. 58A through 58C</figref> are diagrams showing a first programming method according to the present invention.</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIGS. 59A through 59D</figref> are diagrams for illustrating another programming method according to the present invention.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 60</figref> is a block diagram for illustrating a method of detecting a program fail stage in accordance with the present invention.</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 61</figref> is a diagram for illustrating a method of detecting a program fail by the error correction circuit shown in <figref idref="DRAWINGS">FIG. 60</figref>.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 62</figref> is a block diagram showing an embodiment of a NOR flash memory device according to the present invention.</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 63</figref> is a block diagram for illustrating another method of detecting a program fail stage in accordance with the present invention.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 64</figref> is a flow chart for illustrating a method of changing threshold voltages of flag memory cells by programming.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 65</figref> is a block diagram for illustrating still another method of detecting program fails in a memory system according to the present invention.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 66</figref> is a flow chart for illustrating a method changing data stored in a flag register by completing a programming stage.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIGS. 67A through 67C</figref> are diagrams showing LSB reading methods according to the present invention.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIGS. 68A through 68C</figref> show one of the programming methods according to the present invention.</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIGS. 69A through 69C</figref> show another programming method according to the present invention.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIGS. 70A and 70B</figref> are diagrams showing an LSB reading method according to the present invention.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 71</figref> is a block diagram for illustrating another application of the present invention.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIGS. 72A and 72B</figref> are diagrams for illustrating an address scrambling technique.</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIGS. 73A and 73B</figref> are diagrams for illustrating a programming sequence when 4 bits are stored in a memory cell.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 74</figref> is a block diagram briefly showing a computing system with a flash memory device according to the present invention.</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 75</figref> is a block diagram briefly showing an SSD system according to the present invention.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 76</figref> is a block diagram showing a memory system according to another exemplary embodiment of the present invention.</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 77</figref> is a block diagram showing a memory system according to another exemplary embodiment of the present invention.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 78</figref> shows an embodiment where a host system <b>5840</b> is coupled to the card of <figref idref="DRAWINGS">FIG. 70</figref>.</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 79</figref> is a block diagram exemplarily showing a memory system according to an embodiment of the present invention.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 80</figref> is a block diagram showing the flash memory shown in <figref idref="DRAWINGS">FIG. 79</figref>.</p>
<p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. 81</figref> is a diagram for illustrating a cell string of the flash memory shown in <figref idref="DRAWINGS">FIG. 80</figref> and a read fail due to soft programming.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIGS. 82 and 83</figref> are diagrams for illustrating soft programming of the memory cell shown in <figref idref="DRAWINGS">FIG. 81</figref>.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 84</figref> is a flow chart showing a read fail preventing method of the memory system according to an embodiment of the the present invention.</p>
<p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. 85</figref> is a flow chart showing another embodiment of the read fail preventing method for the memory system according to the present invention.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 86</figref> is a flow chart for illustrating a method of compensating read count data if sudden power-off occurs.</p>
<p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. 87</figref> is a diagram exemplarily showing cell threshold voltage distributions of an MLC flash memory.</p>
<p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. 88</figref> is a flow chart showing a method of assuring the flash memory in data reliability.</p>
<p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. 89</figref> is a block diagram showing a computer system including a memory system according to the present invention.</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 90</figref> is a block diagram of a computing system according to exemplary embodiments of the present invention.</p>
<p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. 91</figref> is a block diagram of a memory controller of <figref idref="DRAWINGS">FIG. 90</figref> according to exemplary embodiments of the present invention.</p>
<p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. 92</figref> is a flowchart illustrating a read process of a memory-based storage device according to exemplary embodiments of the present invention.</p>
<p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. 93</figref> is a flowchart illustrating a block management method of the memory-based storage device according to exemplary embodiments of the present invention.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 94</figref> is a view illustrating a refresh operation according to exemplary embodiments of the present invention.</p>
<p id="p-0117" num="0116"><figref idref="DRAWINGS">FIG. 95</figref> is a flowchart illustrating a block management method of a memory-based storage device according to another exemplary embodiment of the present invention.</p>
<p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. 96</figref> is a flowchart illustrating a block management method of a memory-based storage device according to another exemplary embodiment of the present invention.</p>
<p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. 97</figref> is a block diagram of a computing system according to another exemplary embodiment of the present invention.</p>
<p id="p-0120" num="0119"><figref idref="DRAWINGS">FIG. 98</figref> is a block diagram of a memory-based storage device according to another exemplary embodiment of the present invention.</p>
<p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. 99</figref> is a block diagram illustrating a memory system including a memory-based storage device according to another exemplary embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading>
<p id="p-0122" num="0121">The present invention will now be described more fully hereinafter with reference to the accompanying drawings, in which preferred embodiments of the invention are shown. This invention, however, may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the invention to those skilled in the art. Like numbers refer to like elements throughout.</p>
<p id="p-0123" num="0122">A flash memory system includes hardware such as a processor, a main memory, and a flash memory. The flash memory system may further include a temperature sensor, an accelerator, and an ECC circuit to enhance its performance. These components will be described below in detail. Moreover, the flash memory system includes software such as a user application, an operating system (O/S), file system and a flash translation layer (FTL).</p>
<p id="p-0124" num="0123">A flash memory system according to embodiments of the present invention may achieve speed-up or ensured data reliability by means of the above-mentioned hardware or software. In the meantime, a typical flash memory system may suffer from degraded data reliability while increasing its operating speed or suffer from decreased operating speed while ensuring data reliability.</p>
<p id="p-0125" num="0124">Various embodiments for speed-up of a flash memory system will now be described below in detail with reference to accompanying drawings. And various embodiments for data reliability of the flash memory system will now be described below in detail with reference to accompanying drawings. The flash memory system according to embodiments of the present invention may improve a performance through achievement of speed-up and high data reliability.</p>
<p id="h-0006" num="0000">I. Speed Up of Flash Memory System</p>
<heading id="h-0007" level="1">Embodiment 1</heading>
<heading id="h-0008" level="1">Flash Memory System Performing Multi-Thread Function</heading>
<p id="p-0126" num="0125">A flash memory device has erase-before-write characteristics. That is, to store data in the flash memory device, a corresponding storage space should be erased in advance. In the flash memory device, a unit of a write operation differs from that of an erase operation. The unit of the write operation is a page, whereas the unit of the erase operation is a block in the flash memory device. The number of erasing times of the flash memory device is restricted to about a hundred thousand. Because of such a characteristic of the flash memory device, additional operations besides the write operation are executed during the write operation of the flash memory device. For example, a garbage collection and a wear leveling operation may be additionally performed during the write operation of the flash memory device.</p>
<p id="p-0127" num="0126">As described above, the number of erasing times is restricted to a hundred thousand. Therefore, although an erase request for data is transferred from a host, the data are not erased but set to invalid data. Write data transferred from the host are written to a free block where data are not stored. That is, a write or overwrite operation to the flash memory device uses a free block of the flash memory device.</p>
<p id="p-0128" num="0127">When a write or update operation on the flash memory device is repeated, most of free blocks of the flash memory device may be used. When a write request is transferred in the case where the number of available free blocks is smaller than a preset number, a flash memory system executes a garbage collection. The garbage collection includes a merge, a compaction and a garbage block get. The garbage collection copies valid data of a log block (also, this is called a physical block) storing valid and invalid data to a free block, and sets the valid data of the log block to invalid data. Afterwards, the log block where the invalid data are stored is erased, and thus set to a free block. That is, when the garbage collection is executed, the number of free blocks to which data can be written is increased.</p>
<p id="p-0129" num="0128">A wear leveling operation prevents the number of erasing times of a specific log block of the flash memory device from being increased more than a reference value. That is, the wear leveling operation prevents a specific log block of the flash memory device from being rapidly deteriorated in comparison with other log blocks. The wear leveling operation sets a log block, of which the number of erasing times is the least of log blocks where invalid data are stored, to a free block.</p>
<p id="p-0130" num="0129">That is, when a write quest is transferred from a host, the garbage collection and a wear leveling operation as well as the write operation may be executed in the flash memory device. In this case, a response time that the flash memory device responds to the write request from the host may be delayed. That is, the flash memory device may not respond to the request of the host in real time.</p>
<p id="p-0131" num="0130">The garbage collection and the wear leveling operation may be executed as a background operation when the flash memory device is in an idle state. When an access request is transferred from the host while the garbage collection and the wear leveling operation are executed as a background operation, a response time that the flash memory device responds to the access request from the host may be delayed. That is, the flash memory device may not respond in real time to the request of the host.</p>
<p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart illustrating operation of a general flash memory system. Referring to <figref idref="DRAWINGS">FIG. 1</figref>, in operation S<b>1100</b>, a flash memory system receives a write request. The write request is transferred to the flash memory system from a host.</p>
<p id="p-0133" num="0132">In operation S<b>1110</b>, the flash memory system detects a log block to write data. That is, a free block of log blocks of the flash memory system is detected.</p>
<p id="p-0134" num="0133">In operation S<b>1120</b>, if the free block exists among the log blocks of the flash memory system, data are written to the free block in operation S<b>1170</b>. If, however, the free block does not exist among the log blocks of the flash memory system, operation S<b>1130</b> is executed. For convenience in description, it is illustrated that operation S<b>1130</b> or operation S<b>1170</b> is executed according to whether a free block exists among log blocks of the flash memory system. However, it can be understood that operation S<b>1130</b> or operation S<b>1170</b> may also be selectively executed when the number of free blocks of the flash memory system is smaller than a preset number.</p>
<p id="p-0135" num="0134">In operation S<b>1130</b>, the flash memory system executes operation of acquiring a free block. Exemplarily, the flash memory system may execute a garbage collection to acquire a free block. Also, the flash memory system may execute a wear leveling operation to control the number of erasing times of log blocks. For convenience in description, it is illustrated that the flash memory system executes a compaction operation of garbage collection operations. However, the garbage collection executed by the flash memory system is not limited to the compaction operation. It can be understood that the flash memory system can acquire a free block through one of merge, compaction and garbage block get operations, or another garbage collection.</p>
<p id="p-0136" num="0135">In operation S<b>1140</b>, the flash memory system determines which one is efficient between a copy compaction and a compaction. When it is determined that the copy compaction is more efficient than the compaction, the copy compaction is executed in operation S<b>1150</b>. On the contrary, when it is determined that the compaction is more efficient than the copy compaction, the compaction is executed in operation S<b>1160</b>. It is illustrated that the flash memory system executes either of the copy compaction and the compaction. However, it can be understood that the flash memory system may execute another garbage collection besides the copy compaction or the compaction.</p>
<p id="p-0137" num="0136">In operation S<b>1150</b>, the copy compaction is executed. It is assumed that a first log block is configured with pages storing invalid and valid data, and a second log block is configured with pages storing valid data and free pages where data are not stored. The flash memory system copies the valid data of the first log block to the free pages of the second log block. The flash memory system erases the first log block to acquire the free block.</p>
<p id="p-0138" num="0137">In operation S<b>1160</b>, the compaction is executed. It is assumed that the first and second log blocks store invalid data and valid data, respectively, and a third log block is a free block. The flash memory system copies the valid data of the first and second log blocks to the third log block. The flash memory system erases the first and second log blocks to acquire a free block.</p>
<p id="p-0139" num="0138">In operation S<b>1170</b>, the flash memory system writes data to the free block.</p>
<p id="p-0140" num="0139">As described above, if the garbage collection is executed when a write request is transferred from the host, a response time that the flash memory system responds to the request of the host is delayed. If the garbage collection and the wear leveling operation are simultaneously executed, the time that the flash memory system responds to the request of the host may be further delayed. Also, even when the garbage collection and the wear leveling operation are executed as a background operation, the time that the flash memory system responds to the request of the host may be delayed.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a memory system <b>1500</b> according to an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, the memory system <b>1500</b> according to the embodiment of the present invention includes a controller <b>1600</b> and a nonvolatile memory device <b>1700</b>.</p>
<p id="p-0142" num="0141">The controller <b>1600</b> is connected to a host and the nonvolatile memory device <b>1700</b>. The controller <b>1600</b> transfers data read from the nonvolatile memory device <b>1700</b> to the host, or stores data transferred from the host to the nonvolatile memory device <b>1700</b>.</p>
<p id="p-0143" num="0142">The controller <b>1600</b> may include a RAM, a processing unit, a host interface, and a memory interface. The RAM may be used as an operational memory of the processing unit. The processing unit may control an overall operation of the controller <b>1600</b>. The host interface may include a protocol exchanging data between the host and the controller <b>1600</b>. For instance, the controller <b>1600</b> may be configured such that it communicates with the exterior (host) through one of various interface protocols such as USB, MMC, PCI-E, advanced technology attachment (ATA), serial-ATA, SCSI, ESDI, and integrated drive electronics (IDE). The memory interface may interface with the nonvolatile memory device <b>1700</b>. The controller <b>1600</b> may further include an error correction block. The error correction block may detect an error of data read from the nonvolatile memory <b>1700</b>, and then correct the error.</p>
<p id="p-0144" num="0143">The controller <b>1600</b> and the nonvolatile memory device <b>1700</b> may be integrated into one semiconductor device. Exemplarily, the controller <b>1600</b> and the nonvolatile memory device <b>1700</b> are integrated into one semiconductor device, thereby forming a memory card. Alternatively, the controller <b>1600</b> and the nonvolatile memory device <b>1700</b> are integrated one semiconductor device, thereby forming a semiconductor disk/drive (SSD, solid state disk/drive). When the memory system <b>1500</b> is used as the SSD, an operation speed of the host connected to the memory system <b>1500</b> may be significantly improved.</p>
<p id="p-0145" num="0144">The nonvolatile memory device <b>1700</b> includes a data storage area <b>1710</b> and a buffer <b>1720</b>. The data storage area <b>1710</b> is a storage space for storing user data. The buffer <b>1720</b> is a storage space for temporarily storing data to be written to the data storage area <b>1710</b>. The buffer <b>1720</b> according to the embodiment of the present invention may have the same configuration as the data storage area <b>1710</b>. Exemplarily, the memory cell array of the nonvolatile memory device <b>1700</b> is divided into two areas, of which one may be used as the data storage area <b>1710</b> and the other one may be used as the buffer <b>1720</b>.</p>
<p id="p-0146" num="0145">The controller <b>1600</b> may drive a control program <b>1610</b> to control the nonvolatile memory device <b>1700</b>. The control program <b>1610</b> may control read, write, and erase operations of the nonvolatile memory device.</p>
<p id="p-0147" num="0146">An access operation according to an access request from a host has an assigned time. Exemplarily, a write operation of 4 KB data may have an assigned time of 30 ms. If the memory system <b>1500</b> does not complete the access operation within the assigned time after the access request is transferred from the host, a time-out may occur. The memory system <b>1500</b> according to an embodiment of the present invention, however, prevents the occurrence of the time-out.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart illustrating operation of the memory system <b>1500</b> according to an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, in operation S<b>1200</b>, the memory system <b>1500</b> receives an access request from the host. In operation S<b>1210</b>, the memory system <b>1500</b> executes an access operation based on the access request received from the host. Exemplarily, the control program <b>1610</b> may execute write, read or erase operation based on the received access request.</p>
<p id="p-0149" num="0148">In operation S<b>1220</b>, the control program <b>1610</b> checks whether a time assigned to the access operation is over. In operation S<b>1230</b>, if the time assigned to the access operation does not elapse, the access operation is continually executed in operation S<b>1210</b>. When the time assigned to the access operation is over, the control program <b>1610</b> transmits a response signal indicating that the access operation is completed in operation S<b>1240</b>.</p>
<p id="p-0150" num="0149">That is, the memory system <b>1500</b> according to the embodiment of the present invention transmits the response signal indicating the completion of the access operation to the host when the time assigned to the access operation is over. The control program <b>1610</b> suspends the access operation, and receives a new access request. The suspended access operation is resumed when an idle time occurs. Exemplarily, the control program <b>1610</b> processes the access request received from the host using a multithreading technique. The control program <b>1610</b> may be stored as a firmware in a ROM or a nonvolatile memory device. Alternatively, the control program <b>1610</b> may be configured with a logic circuit.</p>
<p id="p-0151" num="0150"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating the control program <b>1610</b> of the memory system <b>1500</b> of <figref idref="DRAWINGS">FIG. 2</figref>. The control program <b>1610</b> for controlling the nonvolatile memory device <b>1700</b> is driven in the controller (see <b>1600</b> of <figref idref="DRAWINGS">FIG. 2</figref>). The control program <b>1610</b> includes a read/write manager <b>1620</b>, a first mapping table <b>1630</b>, a second mapping table <b>1640</b>, and a memory manager <b>1650</b>.</p>
<p id="p-0152" num="0151">The read/write manager <b>1620</b> controls a read operation and a write operation on the nonvolatile memory device <b>1700</b> using the first and second mapping tables <b>1630</b> and <b>1640</b>. The first mapping table <b>1630</b> is used to access the data storage area <b>1710</b> of the nonvolatile memory device <b>1700</b>. The second mapping table <b>1640</b> is used to access the buffer <b>1720</b> of the nonvolatile memory device <b>1700</b>. The first and second mapping tables <b>1630</b> and <b>1640</b> are used to convert a logical address (LA) transferred from the host to a physical address (PA).</p>
<p id="p-0153" num="0152">The memory manager <b>1650</b> controls an access to the nonvolatile memory device and overall communication with the host. Even though the first access operation according to the first access request from the host is not completed, the memory manager <b>1650</b> executes a second access operation according to a second access request from the host. That is, the memory manager <b>1650</b> provides a real-time responsivity to the memory system <b>1500</b>.</p>
<p id="p-0154" num="0153">Taking a flash memory system as an example, an embodiment of the present invention will be described in detail below. However, the embodiment of the present invention is not limited to the flash memory system. For instance, it can be understood that the technical idea of the present invention is also applicable to a memory system including a nonvolatile memory device such as a PRAM, an RRAM, an MRAM, and FRAM, an EEPROM, etc.</p>
<p id="p-0155" num="0154">A cell array of the flash memory device <b>1700</b> is divided into the data storage area <b>1710</b> and the buffer <b>1720</b>. The buffer <b>1720</b> has an access speed faster than the data storage area <b>1710</b>. Exemplarily, the operation speed of the data storage area <b>1710</b> and the operation speed of the buffer <b>1720</b> may be controlled by differently setting the mapping tables <b>1630</b> and <b>1640</b> used for the data storage area <b>1710</b> and the buffer <b>1720</b>.</p>
<p id="p-0156" num="0155"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating operation of the mapping tables <b>1630</b> and <b>1640</b> according to an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIGS. 4 and 5</figref>, the mapping tables <b>1630</b> and <b>1640</b> are used to map data blocks (DB) accessed by the host and log blocks (LB) accessed by the control program <b>1610</b>. The data blocks (DB) are accessed by a logical address, and the log blocks LB are accessed by a physical address.</p>
<p id="p-0157" num="0156">The data blocks (DB) form one or more data block groups. Each of the data block groups includes a desired (or, alternatively a predetermined) number of data blocks (DB). The log blocks (LB) form one or more log block groups. Each of the log block groups includes a desired (or, alternatively a predetermined) number of log blocks (LB). One or more data block groups are mapped onto one or more log block groups.</p>
<p id="p-0158" num="0157">Each of the mapping tables <b>1630</b> and <b>1640</b> includes a block mapping table (BMT) and a page mapping table (PMT). The block mapping table (BMT) maps the data block groups and the log block groups. For instance, when the data block group is configured with two data blocks (DB) and the log block group is configured with four log blocks (LB), the block mapping table (BMT) maps two data block groups onto one log block group. The page mapping table (PMT) maps pages of the data blocks (DB) of the data block group onto pages of the log blocks (LB) of the corresponding log block group.</p>
<p id="p-0159" num="0158">The data blocks (DB) and the log blocks (LB) of the data storage area <b>1710</b> are mapped through a block associative mapping method. That is, the data blocks (DB) are divided into a plurality of data block groups, and the log blocks (LB) are divided into a plurality of log block groups. The block mapping table (BMT) of the mapping table <b>1630</b> maps the data block groups and the log block groups. The page mapping table (PMT) of the mapping table <b>1630</b> maps pages of the data block group and pages of the log block groups. That is, the data storage region <b>1710</b> is managed in units of a block group and a page.</p>
<p id="p-0160" num="0159">The data blocks (DB) and the log blocks (LB) of the buffer <b>1720</b> are mapped through a fully associative mapping method. That is, all of the data blocks (DB) form one data block group, and all of the log blocks (LB) form one log block group. The page mapping table (PMT) of the mapping table <b>1640</b> maps pages of all the data blocks (DB) and pages of all the log blocks (LB). That is, the buffer <b>1720</b> is managed in units of a page by the page mapping table (PMT).</p>
<p id="p-0161" num="0160">Consequently, when data to be written to the buffer <b>1720</b> is transferred, a free page of the buffer <b>1720</b> is detected and the data is written to the detected free page. The buffer <b>1720</b> may operate in first-in first-out (FIFO) manner. Exemplarily, when data are sequentially written to pages of a first log block and pages of a second log block in the buffer <b>1720</b>, data stored in the pages of the first log block and the pages of the second log block may be sequentially erased. When the pages of the first log block are set to invalid pages, the first log block may be erased. That is, a garbage collection is not required when the buffer <b>1720</b> operates. Therefore, the operation speed of the buffer <b>1720</b> may be faster than that of the data storage area <b>1710</b>.</p>
<p id="p-0162" num="0161">To provide a real-time responsivity to the memory system <b>1500</b>, the control program <b>1610</b> makes use of a coroutine method. The control program <b>1610</b> classifies the request from the host into a primary thread and a secondary thread. When a request of the primary thread (hereinafter, referred to as primary thread request) is transferred during operation according to a request of the secondary thread (hereinafter, referred to as secondary thread request), the control program <b>1610</b> suspends the secondary thread operation, and executes operation according to the primary thread request. The suspended secondary thread operation is resumed when the control program <b>1610</b> is in an idle state.</p>
<p id="p-0163" num="0162">For example, an access request transferred when there is no suspended operation or operation in progress is determined as the secondary thread. In contrast, an access request transferred when there is a suspended operation or operation in progress is determined as the primary thread. The control program <b>1610</b> provides a multithreading function using the primary and secondary threads.</p>
<p id="p-0164" num="0163">Operations (for example, write, garbage collection, wear leveling) of the control program <b>1610</b>, which need a time longer than a preset time, have one or more suspend points. The operations of the control program <b>1610</b> may be suspended at the suspend points. Afterwards, the suspended operation may be resumed from the suspend points. Exemplarily, the suspend points may be formed before and after a program operation for one page. Alternatively, the suspend points may be formed before and after an erase operation for one block.</p>
<p id="p-0165" num="0164">For instance, when the request for the primary thread operation is transferred during the secondary thread operation, the control program <b>1610</b> suspends the secondary thread operation at the suspend point thereof, and executes the primary thread operation. Thereafter, when an idle time occurs, the control program <b>1610</b> resumes the secondary thread operation from the suspend point.</p>
<p id="p-0166" num="0165"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating a multithreading function provided by the control program <b>1610</b> of <figref idref="DRAWINGS">FIG. 4</figref>. In <figref idref="DRAWINGS">FIG. 6</figref>, it is illustrated that the secondary thread operation has one suspend point, and is divided into two bodies BODY<b>1</b> and BODY<b>2</b> based on the suspend point. However, the primary or secondary thread operation according to the embodiment of the present invention is not limited to one suspend point. The primary or secondary thread operation according to the embodiment of the present invention has n number of suspend points and n+1 number of bodies.</p>
<p id="p-0167" num="0166">In operation S<b>1300</b>, a program counter (PC), local variable, is reset. The program counter PC indicates how many suspend points are passed during the secondary thread operation.</p>
<p id="p-0168" num="0167">In operation S<b>1310</b>, the body BODY<b>1</b> of the secondary thread operation is executed. Exemplarily, when the secondary thread operation is a write operation to two pages of the flash memory device (see <b>1700</b> of <figref idref="DRAWINGS">FIG. 2</figref>), the body BODY<b>1</b> may be a write operation to one page.</p>
<p id="p-0169" num="0168">Operation S<b>1320</b> represents a suspend point. The secondary thread operation may be suspended at the suspend point. The operation S<b>1320</b> includes a plurality of sub operations.</p>
<p id="p-0170" num="0169">In operation S<b>1321</b>, the program counter (PC) is increased. That is, whenever the secondary thread operation executes the suspend point, the program counter (PC) is increased. The program counter (PC) indicates how many suspend points the secondary thread operation executes. When the secondary thread operation is suspended at the suspend point, the program counter (PC) may be used to detect a resume point for resuming the suspended secondary thread operation.</p>
<p id="p-0171" num="0170">In operation S<b>1323</b>, it is checked whether a primary thread operation is requested or not. In operation S<b>1325</b>, the secondary thread operation is suspended if the primary thread operation is requested. Unless the primary thread operation is requested, operation S<b>1340</b> is executed.</p>
<p id="p-0172" num="0171">When the secondary thread operation is suspended in operation S<b>1327</b>, the primary thread operation is executed in operation S<b>1330</b>. When the thread operation is completed, the secondary thread operation is resumed in operation S<b>1340</b>.</p>
<p id="p-0173" num="0172">In operation S<b>1340</b>, the control program <b>1610</b> detects a resume point of the suspended secondary thread operation using the program counter (PC). Exemplarily, if a value of the program counter (PC) is 2, the control program <b>1610</b> may execute a body after a second suspend point.</p>
<p id="p-0174" num="0173">In operation S<b>1350</b>, the body BODY<b>2</b> of the secondary thread operation is executed.</p>
<p id="p-0175" num="0174">A request transferred when the control program <b>1610</b> is in an idle state may be executed as the secondary thread. A request transferred when the control program <b>1610</b> is in a busy state may be executed as the primary thread.</p>
<p id="p-0176" num="0175">When the control program <b>1610</b> executes the primary thread or the secondary thread, a portion of an operational memory (e.g., SRAM) of the controller (see <b>1600</b> of <figref idref="DRAWINGS">FIG. 2</figref>) is assigned to execute the primary or secondary thread operation. The control program <b>1610</b> stores variables required to execute the primary or secondary thread operation in an assigned storage space.</p>
<p id="p-0177" num="0176">In order that the secondary thread operation may be suspended, the primary thread operation may be executed, and the secondary thread operation may be resumed, local variables of the secondary thread operation should be maintained while executing the primary thread operation. Meanwhile, the local variables of the primary and secondary thread operations are stored in the same storage space. Accordingly, while the primary thread operation is executed, values of the local variables of the secondary thread operation may be changed or vanish due to local variables of the primary thread operation.</p>
<p id="p-0178" num="0177">The control program <b>1610</b> according to an embodiment of the present invention differently sets a method of storing local variables of the secondary thread operation and a method of storing local variables of the primary thread operation. The control program <b>1610</b> maintains the local variables of the secondary thread operation even when the secondary thread operation is suspended.</p>
<p id="p-0179" num="0178"><figref idref="DRAWINGS">FIGS. 7A through 7C</figref> are diagrams illustrating how the control program <b>1610</b> of <figref idref="DRAWINGS">FIG. 4</figref> stores local variables of the primary and secondary thread operations. Referring to <figref idref="DRAWINGS">FIG. 7A</figref>, the local variables of the secondary thread operation are stored in a heap way. When the secondary thread operation is suspended, the program counter (PC) is also stored in a heap way.</p>
<p id="p-0180" num="0179">Referring to <figref idref="DRAWINGS">FIG. 7B</figref>, local values of the primary thread operation are stored in a stack way. Since the local values of the primary and secondary thread operations are differently stored in a storage space (LDA), storage spaces where the local variables of the primary and secondary thread operations are stored do not overlap each other. Therefore, the local variables of the secondary thread do not change or vanish due to the local variable of the primary thread.</p>
<p id="p-0181" num="0180">Referring to <figref idref="DRAWINGS">FIG. 7C</figref>, when the primary thread operation is finished, the local variables of the primary thread operation are removed or vanish. The program counter and the local variables of the secondary thread operation are maintained, and thus the secondary thread operation may be normally resumed.</p>
<p id="p-0182" num="0181">The control program <b>1610</b> according to the embodiment of the present invention provides a real-time responsivity to the memory system <b>1500</b> using multithreading techniques. The memory system <b>1500</b> executes a first access operation according to a first access request from the host. Due to garbage collection, wear leveling operation, or the like, the first access operation may not be completed within a time assigned to the first access operation. If a second access request is transferred when the first access operation is not completed, the control program <b>1610</b> suspends the first access operation and transmits a response signal indicating the completion of the first access operation to the host. Then, the control program <b>1610</b> executes the second access operation based on the second access request. When an idle time occurs, the control program <b>1610</b> resumes the suspended first access operation.</p>
<p id="p-0183" num="0182"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating a first type idle time. In <figref idref="DRAWINGS">FIG. 8</figref>, an axis of abscissa represents time, and an axis of ordinate represents a state of the control program <b>1610</b>.</p>
<p id="p-0184" num="0183">When a first access request Req<b>1</b> is transferred at a time t<b>1</b>, the control program <b>1610</b> executes the first access operation according to the first access request Req<b>1</b>. At this time, the control program <b>1610</b> is in a busy state. When a time assigned to the first access operation is ta-t<b>1</b>, the host transmits a second access request Req<b>2</b> after the time ta. When the first access operation is finished at a time t<b>2</b>, the host does not transmit an access request during the time ta-t<b>1</b> before the second access request Req<b>2</b> is transmitted. That is, the control program <b>1610</b> has an idle time.</p>
<p id="p-0185" num="0184">As illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, an idle time occurring because the access operation is completed prior to the assigned time is called an inter-transaction slack time ST<b>1</b>. The control program <b>1610</b> may resume the suspended access operation during the idle time ST<b>1</b>.</p>
<p id="p-0186" num="0185"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram illustrating a second type idle time. In <figref idref="DRAWINGS">FIG. 9</figref>, an axis of abscissa represents time, and an axis of ordinate represents a state of the control program (see <b>1610</b> of <figref idref="DRAWINGS">FIG. 2</figref>).</p>
<p id="p-0187" num="0186">The first access request Req<b>1</b> is received at a time t<b>1</b>. The control program <b>1610</b> completes the first access operation at a time ta-t<b>1</b> assigned to the first access operation according to the first access request. The host can transmit the second access request Req<b>2</b> after a time ta. However, when the host does not access the memory system <b>1500</b>, the host may not transmit the second access request Req<b>2</b>. That is, a timing that the host transmits the second access request Req<b>2</b> may be a preset time elapsed after the time ta. Exemplarily, the host transmits the second access request Req<b>2</b> at a time t<b>4</b> after the time ta. At this time, the control program <b>1610</b> has an idle state during the time t<b>4</b>-ta.</p>
<p id="p-0188" num="0187">An idle time between the access requests received from the host is called an inter-transaction slack time ST<b>2</b>. The control program <b>1610</b> may resume the suspended access operation during the idle time ST<b>2</b>.</p>
<p id="p-0189" num="0188"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram illustrating an embodiment where the control program <b>1610</b> of <figref idref="DRAWINGS">FIG. 4</figref> operates according to a request of a host. In <figref idref="DRAWINGS">FIG. 10</figref>, an axis of abscissa represents time, and an axis of ordinate represents a function of the control program <b>1610</b>.</p>
<p id="p-0190" num="0189">At a time t<b>5</b>, the first access request Req<b>1</b> is transferred from the host. Exemplarily, the first access request Req<b>1</b> may be a write request. A time AT<b>1</b> assigned to the first access request Req<b>1</b> is up to a time t<b>6</b>.</p>
<p id="p-0191" num="0190">The control program <b>1610</b> executes a write function. At a point J<b>1</b>, the write function calls a function Get Log BLK. The function Get Log BLK is a function of detecting a free block of the log blocks in the data storage area <b>1710</b> of the flash memory device <b>1700</b>.</p>
<p id="p-0192" num="0191">When there is no free block in the data storage area <b>1710</b>, the function Get Log BLK calls a function Reserve Free at a point J<b>2</b>. The function Reserve Free is a function of executing a garbage collection to acquire a free block. Exemplarily, to acquire the free block, the function Reserve Free may determine which is more efficient between a copy compaction and a compaction. When it is determined that the copy compaction is more efficient than the compaction, the function Reserve Free calls a function Copy Compaction at a point J<b>3</b>. The copy compaction executes a copy compaction to acquire a free block. When the free block is acquired, the function Copy Compaction is finished, and the control program <b>1610</b> returns to the function Reserve Free.</p>
<p id="p-0193" num="0192">The control program <b>1610</b> checks whether the time AT<b>1</b> assigned to the first access operation (first write operation) is over. When the time AT<b>1</b> assigned to the first access operation (first write operation) approaches although the first access operation (first write operation) is not completed, the control program <b>1610</b> suspends the first access operation (first write operation) to the data storage area <b>1710</b>. Data of the data DATA<b>1</b>, which are not written to the data storage area <b>1710</b> yet, are written to the buffer <b>1720</b>. The control program <b>1610</b> compares a size of data that are not written yet among the data DATA<b>1</b>, a time required to write the data to the buffer <b>1720</b>, a time assigned to the first access operation (first write operation), thereby controlling a write operation to the buffer <b>1720</b> to be completed before the time AT<b>1</b> assigned to the first access operation (first write operation) is over. When the write operation to the buffer <b>1720</b> is completed, the control program <b>1610</b> transmits a response signal indicating the completion of the first access operation (first write operation) to the host.</p>
<p id="p-0194" num="0193">The host transmits the second access request Req<b>2</b> at a time t<b>6</b>. Exemplarily, the second access request Req<b>2</b> may be a second write request. The control program <b>1610</b> executes the second access operation (second write operation) based on the second access request Req<b>2</b>. The time AT<b>2</b> assigned to the second access operation (second write operation) is up to a time t<b>8</b>. Since the first write operation is suspended, the control program <b>1610</b> executes the second write operation to the buffer <b>1720</b> instead of the data storage area <b>1710</b>.</p>
<p id="p-0195" num="0194">An operation speed of the buffer <b>1720</b> is faster than that of the data storage area <b>1710</b>. Therefore, the second write operation of writing data to the buffer <b>1720</b> may be completed earlier than the assigned time AT<b>2</b>. Exemplarily, the second write operation is completed at a time t<b>7</b>. When the second write operation is completed, the control program <b>1610</b> transmits a response signal Res<b>2</b> indicating the completion of the second write operation to the host. Though the response signal Res<b>2</b> is transmitted to the host, the host requests a new access operation after the assigned time AT<b>2</b> of the second access operation (second write operation). That is, from the time t<b>7</b> that the second access operation is completed to the time t<b>8</b> assigned to the second access operation, the control program <b>1610</b> is in an idle state. More specifically, the control program <b>1610</b> has an inter-transaction slack time ST<b>1</b>.</p>
<p id="p-0196" num="0195">The control program <b>1610</b> resumes the suspended first access operation (first write operation) at a point J<b>6</b>. That is, the suspended function Reserve Free is resumed. When the function Reserve Free is finished, the control program <b>1610</b> returns to the function Get Log BLK at a point J<b>7</b>. When the function Get Log BLK is finished, the control program <b>1610</b> returns to the function Write at a point J<b>8</b>. First write data DATA<b>1</b> are written to the data storage area <b>1710</b> because a free block is acquired by the function Get Log BLK.</p>
<p id="p-0197" num="0196">When the time AT<b>2</b> assigned to the second access operation (second write operation) is over, the control program <b>1610</b> suspends the first access operation (first write operation) at a point J<b>9</b>. The control program <b>1610</b> detects whether a new access request is received. If a new access request is not received, the control program <b>1610</b> has an idle time. In more detail, the control program <b>1610</b> has an inter-transaction slack time ST<b>2</b>. The control program <b>1610</b> resumes the first access operation (first write operation) because the idle time occurs.</p>
<p id="p-0198" num="0197">The control program <b>1610</b> suspends the first access operation (first write operation) at every suspend point that is set in the first access operation (first write operation), and detects whether a new access request is received. When a new access request is not transferred, the control program <b>1610</b> resumes the first access operation (first write operation). When a new access request is transferred, the control program <b>1610</b> executes an access operation according to the new access request.</p>
<p id="p-0199" num="0198">The control program <b>1610</b> cannot respond to the access request from the host while the control program <b>1610</b> resumes the suspended access operation. That is, a new access operation may be delayed by a time interval between operations of detecting whether the control program <b>1610</b> receives the new access request. Therefore, a time interval between the suspend points of the access operation may be set such that the new access operation is not executed later than a preset time.</p>
<p id="p-0200" num="0199">The first access operation (first write operation) is finished at a time t<b>9</b>. The second access operation (second write operation) according to the second access request (second write request) is not executed on the data storage area <b>1710</b> but executed on the buffer <b>1720</b>. The control program <b>1610</b> recognizes the write operation executed on the buffer <b>1720</b>, not on the data storage area <b>1710</b>, as a suspended access operation. Therefore, the control program <b>1610</b> copies data stored in the buffer <b>1720</b> to the data storage area <b>1710</b> during the idle time. That is, the control program <b>1610</b> executes the second access operation (second write operation).</p>
<p id="p-0201" num="0200">The control program <b>1610</b> suspends the second access operation (second write operation) at every suspend point of the second access operation (second write operation), and detects whether a new access request is received. A third access request Req<b>3</b> is transferred at a time t<b>10</b>. Exemplarily, the third access request Req<b>3</b> is a read request. A time AT<b>3</b> assigned to the third access operation (read operation) is up to a time t<b>12</b>.</p>
<p id="p-0202" num="0201">The control program <b>1610</b> executes a third access operation (read operation). When the third access operation (read operation) is completed at a time t<b>11</b>, the control program <b>1610</b> transmits a response signal Res<b>3</b> indicating the completion of the third access operation (read operation) to the host. Since the third access operation (read operation) is completed within the assigned time AT<b>3</b>, the control program <b>1610</b> has an idle time. More specifically, the control program <b>1610</b> has an inter-transaction slack time ST<b>1</b>. Therefore, the control program <b>1610</b> resumes the suspended second access operation (second write operation). At the time t<b>12</b>, the second access operation (second write operation) is completed.</p>
<p id="p-0203" num="0202">As described above, the control program <b>1610</b> according to the embodiment of the present invention executes the first access operation (first write operation). If a time assigned to the first access operation (first write operation) is over, the control program <b>1610</b> suspends the first access operation (first write operation), and transmits the response signal indicating the completion of the first access operation (first write operation) to the host. The suspended first access operation is re-executed when an idle time occurs.</p>
<p id="p-0204" num="0203">When a request for the second access operation (second write operation or read operation) is transferred after the first access operation (first write operation) is suspended, the control program <b>1610</b> executes the second access operation (second write operation or read operation). When the second access operation (second write operation or read operation) is competed before the assigned time, the control program <b>1610</b> resumes the first access operation (first write operation) until the time assigned to the second access operation (second write operation or read operation) is over. That is, the control program <b>1610</b> resumes the first access operation (first write operation) during the inter-transaction slack time ST<b>1</b>.</p>
<p id="p-0205" num="0204">The control program <b>1610</b> resumes the first access operation (first write operation) until the request for the second access operation (second write operation or read operation) is transferred after the first access operation (first write operation) is suspended. That is, the control program <b>1610</b> resumes the first access operation (first write operation) during the inter-transaction slack time ST<b>2</b>. If the second access operation transferred while the first access operation (first write operation) is suspended is a second write operation, the second write operation is executed on the buffer <b>1720</b> instead of the data storage area <b>1710</b>. The control program <b>1610</b> copies data stored in the buffer <b>1720</b> to the data storage area <b>1710</b> during the idle time.</p>
<p id="p-0206" num="0205">In an example, the assigned times AT<b>1</b> to AT<b>3</b> may be different from each other. For example, when there are a plurality of hosts accessing the memory system <b>1500</b>, the assigned times AT<b>1</b> to AT<b>3</b> respectively from the plurality of hosts are different from each other.</p>
<p id="p-0207" num="0206"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart how the control program <b>1610</b> according to the embodiment of the present invention responds in real time. Referring to <figref idref="DRAWINGS">FIG. 11</figref>, in operation S<b>1400</b>, the first access request is received from the host. In operation S<b>1410</b>, the control program <b>1610</b> executes the first access operation according to the first access request.</p>
<p id="p-0208" num="0207">In operation S<b>1420</b>, the control program executes a suspend point of the first access operation. The operation S<b>1420</b> includes a plurality of sub operations. In operation S<b>1421</b>, the control program <b>1610</b> determines whether the first access operation is completed. If the first access operation is not completed, operation S<b>1423</b> is carried out.</p>
<p id="p-0209" num="0208">In operation S<b>1423</b>, the control program <b>1610</b> determines whether the time AT assigned to the first access operation is over. If the time AT assigned to first access operation does not elapse, the first access operation continues execution in operation S<b>1410</b>. If, however, the time AT assigned to the first access operation is over, operation S<b>1425</b> is executed.</p>
<p id="p-0210" num="0209">In operation S<b>1425</b>, the control program <b>1610</b> determines whether a new access request is received. If a new access request is not received, the control program <b>1610</b> has an inter-transaction slack time ST<b>2</b>. Therefore, in operation S<b>1440</b>, the control program <b>1610</b> resumes the first access operation. If a new access request is received, the first access operation is suspended in operation S<b>1427</b>. In operation S<b>1430</b>, an access operation according to the new access request is executed.</p>
<p id="p-0211" num="0210">The new access operation may be a read or write operation. The read operation is executed faster than the write operation. Therefore, if the new access operation is a read operation, the read operation may be completed prior to the assigned time. That is, the control program <b>1610</b> may have an inter-transaction slack time.</p>
<p id="p-0212" num="0211">If the new access operation is a write operation, the new write operation is executed on the buffer <b>1720</b> because the first access operation is suspended. Since the write operation to the buffer <b>1720</b> is executed faster than the write operation to the data storage area <b>1710</b>, the write operation to the buffer <b>1720</b> may be completed prior to the assigned time. That is, the control program <b>1610</b> may have an inter-transaction slack time ST<b>1</b>.</p>
<p id="p-0213" num="0212">In operation S<b>1450</b>, the control program <b>1610</b> may resume the suspended first access operation because it has the inter-transaction slack time ST<b>1</b>.</p>
<p id="p-0214" num="0213">In the aforesaid embodiment, the control program <b>1610</b> may be realized by a flash translation layer (FTL).</p>
<p id="p-0215" num="0214">In the previous embodiment, it is illustrated that a cell array of the flash memory device <b>1700</b> is divided into the data storage area <b>1710</b> and the buffer <b>1720</b>. However, the flash memory device <b>1700</b> according to the embodiment of the present invention may include a buffer separately.</p>
<p id="p-0216" num="0215">In the foregoing embodiment, the technical idea of the present invention has been described by taking the flash memory system including the flash memory device as an example. However, the technical idea of the present invention is not limited to application to the flash memory system. Exemplarily, the technical idea of the present invention may also be applicable to a nonvolatile memory system such as a PRAM, an RRAM, an MRAM, an FRAM and an EEPROM. In this case, the control program <b>1610</b> may be provided in firmware that is driven in the controller of the nonvolatile memory device.</p>
<p id="p-0217" num="0216"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram illustrating an embodiment of a computing system <b>1800</b> including the memory system of <figref idref="DRAWINGS">FIGS. 2 and 4</figref>. Referring to <figref idref="DRAWINGS">FIG. 12</figref>, the computing system <b>1800</b> includes a central processing unit <b>1810</b>, a random access memory (RAM) <b>1820</b>, a user interface <b>1830</b>, a power supply <b>1840</b>, and a memory system <b>1500</b>.</p>
<p id="p-0218" num="0217">The memory system <b>1500</b> is electrically connected to the central processing unit <b>1810</b>, the RAM <b>1820</b>, the user interface <b>1830</b>, and the power supply <b>1840</b> through a system bus <b>350</b>. Data, which are provided through the user interface <b>1830</b> or processed by the central processing unit <b>1830</b>, are stored in the memory system <b>1500</b>. The memory system <b>1500</b> includes a controller <b>1600</b> and a nonvolatile memory device <b>1700</b>.</p>
<p id="p-0219" num="0218">In the case where the memory system <b>1500</b> is mounted as a semiconductor disk device, a booting speed of the computing system <b>1800</b> can be significantly increased. Although not shown, those skilled in the art can understand that the system according to the present invention may further include an application chipset, a camera image processor, and the like.</p>
<p id="p-0220" num="0219">The memory system <b>1500</b> according to the embodiment of the present invention responds to a read or write request in real time. The memory system according to the embodiment of the present invention checks whether a time assigned to the access operation is over. If the assigned time is over, the memory system <b>1500</b> transmits a response signal indicating the completion of the access operation to the host. Then, the memory system suspends the access operation. The suspended access operation is resumed if an idle time occurs.</p>
<p id="p-0221" num="0220">A flash memory system according to a first embodiment of the present invention may achieve speed-up by means of a multi-thread function. In addition, the flash memory system according to the first embodiment of the present invention may achieve high data reliability by means of a temperature sensor as well as the multi-thread function. A flash memory system including a temperature sensor will be described in detail in fourth embodiment.</p>
<p id="p-0222" num="0221">The flash memory system according to the first embodiment of the present invention may achieve high performance by ensuring reliability of LSB data as well as the multi-thread function. A flash memory system ensuring reliability of LSB data will be described in detail in fifth embodiment.</p>
<p id="p-0223" num="0222">The flash memory system according to the first embodiment of the present invention may achieve high data reliability by means of read count data or read history as well as the multi-thread function. A flash memory system achieving high data reliability by means of read count data or read history will be described in detail in sixth and seventh embodiments, respectively.</p>
<p id="p-0224" num="0223">The flash memory system according to the first embodiment of the present invention may achieve speed-up by means of the multi-thread function and high data reliability by means of various manners which will be described below in detail. Performance of the flash memory system according to the first embodiment of the present invention may be improved through achievement of speed-up and high data reliability.</p>
<heading id="h-0009" level="1">Embodiment 2</heading>
<heading id="h-0010" level="1">Flash Memory System Having Free Page</heading>
<p id="p-0225" num="0224">Recently, portable electric devices such as a digital camera, an MP3 player, a mobile phone, a personal digital assistant (PDA), etc. are extensively used. Flash memories are commonly used in those portable electric devices. The reason is that flash memories are non-volatile memory devices having characteristics such as lower power consumption and high integration.</p>
<p id="p-0226" num="0225">Unlike hard disks capable of overwriting data, the flash memories cannot overwrite data. That is, if flash memories try to overwrite data, existing data must be erased first. This is called erase-before-write. Before writing data, flash memories must return to an initial state or an erase state.</p>
<p id="p-0227" num="0226">An erase operation of flash memories usually takes relatively longer time than a write operation. Additionally, because an erase unit of flash memories is a block, which is larger than a write unit, this may cause flash memories to erase a portion that may be unnecessary for a write operation. The portion that was unintentionally erased needs to be restored through a write operation again.</p>
<p id="p-0228" num="0227">Since units of erase and write operations differ in flash memories, operation performance of a write operation lags behind that of an erase operation in terms of speed. Moreover, if flash memories perform an erase operation on the same block about hundred thousand times, its physical wearing may cause abnormal operations. Thus, flash memories perform a wear leveling operation in order to prevent an erase operation from being repeatedly performed on a specific block.</p>
<p id="p-0229" num="0228">A flash translation layer (FTL) is software for overcoming those limitations of flash memories and effectively managing them. The FTL receives a logic address from a file system, and converts it into a physical address. Here, the physical address is an address that is actually used in flash memories.</p>
<p id="p-0230" num="0229">The FTL includes an address mapping table for managing the above address mapping operation. The address mapping table is usually driven in a random access memory (RAM). The address mapping tale records logical addresses and physical addresses corresponding thereto. The address mapping table may vary in its size according to a mapping unit and may have various mapping methods according to the mapping unit.</p>
<p id="p-0231" num="0230">Typical mapping methods include a page mapping method, a block mapping method, and a hybrid mapping method, etc. The page mapping method uses a page mapping table. The page mapping table is used for performing a mapping operation by a page unit and stores a logical page and a physical page corresponding thereto. The blocking mapping method uses a block mapping table. The block mapping table is used for performing a mapping operation by a block unit and stores a logical block and a physical block corresponding thereto. The hybrid mapping method uses the page mapping method and the block mapping method simultaneously.</p>
<p id="p-0232" num="0231">Generally, one memory block includes tens or hundreds of pages. Accordingly, if the page mapping method is used, the size of the mapping table is tens or hundreds times larger than that of the block mapping method. That is, the page mapping method requires a relatively large size of a memory space for the mapping table.</p>
<p id="p-0233" num="0232">Since the block mapping method performs a mapping operation by a block unit, the size of its mapping table is less than that of the page mapping method. However, according to the block mapping method, since a position of a page that will be written into blocks is fixed, a large number of merge operations need to be performed.</p>
<p id="p-0234" num="0233">In the hybrid mapping method, the page mapping method is used for a log block and the block mapping method is used for a data block. Log and data blocks are described in more detail below. In particular, log blocks may be the same as data blocks in that a log block includes the same number of pages as a data block. However, log blocks are used as a memory management tool (as described below), and thus are called log blocks instead of data blocks. Log blocks, however, may become data blocks or free blocks as described below. Because the hybrid mapping method uses both page and block mapping methods, the size of the mapping table is reduced and also the number of merge operations is decreased.</p>
<p id="p-0235" num="0234">According to the hybrid mapping method, at least one log block is allocated to one data block. The merge operation may be performed even when only a portion of a page of a log block is used. For example, if the number of pages in one log block is four, a merge operation is performed when three or two pages are used. In this case, a page utilization rate of a log block is decreased. A low page utilization rate of a log block is a factor deteriorating the performance of a memory system.</p>
<p id="p-0236" num="0235"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram illustrating a hardware structure of a memory system using a flash memory. Referring to <figref idref="DRAWINGS">FIG. 13</figref>, the memory system <b>2100</b> includes a central processing unit (CPU) <b>2110</b>, a random access memory (RAM) <b>2120</b>, and a flash memory <b>2130</b>.</p>
<p id="p-0237" num="0236">As well known to those skilled in the art, the flash memory <b>2130</b> includes a plurality of string structures, each of which has a plurality of memory cells. A set of memory cells is commonly called a cell array. A cell array of the flash memory <b>2130</b> includes a plurality of memory blocks. Each of the memory blocks includes a plurality of pages. Each of the pages includes a plurality of memory cells sharing one word line.</p>
<p id="p-0238" num="0237">In the flash memory <b>2130</b>, units of read and write operations are different from a unit of an erase operation. That is, the flash memory <b>2130</b> performs an erase operation by a memory block unit and performs a read or write operation by a page unit. Additionally, the flash memory <b>2130</b> does not support on overwrite operation unlike other semiconductor memories. Accordingly, the flash memory <b>2130</b> performs an erase operation before a write operation.</p>
<p id="p-0239" num="0238">Due to this characteristic of the flash memory <b>2130</b>, additional management for a read/write/erase operation is required to effectively utilize the flash memory <b>2130</b> as a hard disk. A flash translation layer (FTL) is system software which is developed for the above purpose. The FTL is driven on the RAM <b>2120</b>.</p>
<p id="p-0240" num="0239"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram illustrating a system software structure of the memory system <b>2100</b> of <figref idref="DRAWINGS">FIG. 13</figref>. The memory system <b>2100</b> has a software layer structure where an application <b>2205</b>, a file system <b>2210</b>, a FTL <b>2220</b>, a flash memory <b>2230</b> are sequentially placed. The application <b>2205</b>, the file system <b>2210</b> and the FTL <b>2220</b> may be distributed among the CPU <b>2110</b>, the RAM <b>2120</b> and the flash memory <b>2130</b> as a matter of design choice. For example, the application <b>2205</b> and file system may be at the CPU <b>2110</b>, the FTL <b>2220</b> may be at the CPU <b>2110</b> and/or the RAM <b>2120</b> and the flash memory <b>2230</b> may be at the flash memory <b>2130</b>.</p>
<p id="p-0241" num="0240">The FTL <b>2220</b> receives a logical address LA from the application <b>2205</b> or the file system <b>2210</b>. The FTL <b>2220</b> receives the logical address LA and converts it into a physical address PA. The physical address PA is provided to the flash memory <b>2230</b>. The FTL <b>2220</b> has an address mapping table for address conversion. The address mapping table is driven on the RAM <b>2120</b> of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0242" num="0241">An address mapping method of the FTL <b>2220</b> varies according to a mapping unit. A representative mapping method includes a page mapping method, a block mapping method, and a hybrid mapping method.</p>
<p id="p-0243" num="0242">The page mapping method performs an address mapping operation by a page unit. According to the page mapping method, since an address conversion operation is performed by a page unit, a merge operation for page arrangement is not required later. On the contrary, the page mapping method requires a large size of an address mapping table. That is, in order to use the page mapping method, a large capacity of RAM <b>2120</b> is required. The page mapping method does not require a merge operation but requires a large capacity of memory space for the page mapping table.</p>
<p id="p-0244" num="0243">The block mapping method performs an address mapping operation by a memory block unit. The block mapping method can reduce a size of memory space compared to the page mapping method. On the contrary, the block mapping method needs to perform a large number of merge operations for page arrangement. The hybrid mapping method uses the page mapping method and the block mapping method simultaneously and thus can reduce the size of the mapping table and the number of merge operations. The hybrid mapping method will be described in more detail as follows.</p>
<p id="p-0245" num="0244"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating a hybrid mapping method of the memory system of <figref idref="DRAWINGS">FIG. 14</figref>. Referring to <figref idref="DRAWINGS">FIG. 15</figref>, the memory system includes a file system <b>2310</b>, a FTL <b>2320</b>, and a flash memory <b>2330</b>, which may correspond to the file system <b>2210</b>, the FTL <b>2220</b> and the flash memory <b>2230</b> of <figref idref="DRAWINGS">FIG. 14</figref>. The FTL <b>2320</b> receives a logical address LA from the file system <b>2310</b> and converts it to a physical address PA by using a mapping table.</p>
<p id="p-0246" num="0245">Referring to <figref idref="DRAWINGS">FIG. 15</figref>, the FTL <b>2320</b> includes a blocking mapping table <b>2321</b> and a page mapping table <b>2322</b>. The block mapping table <b>2321</b> converts a logical block number (LBN) into a physical block number (PBN). The page mapping table <b>2322</b> is used for page mapping of a data block and a log block.</p>
<p id="p-0247" num="0246">Referring to <figref idref="DRAWINGS">FIG. 15</figref>, the flash memory <b>2330</b> includes a data area <b>2331</b>, a log area <b>2332</b>, a free area <b>2333</b>, and a meta area <b>2334</b>. The data area <b>2331</b> includes a plurality of blocks and stores user data. The log area <b>2332</b> includes at least one log block. The log block <b>2332</b> is allocated to a specific data block.</p>
<p id="p-0248" num="0247">In a case of writing data, the data are first written into a data block and then written into an allocated log block. Next, for a merge operation, effective pages of the log block and the data block are copied into a new data block.</p>
<p id="p-0249" num="0248">The free area <b>2333</b> includes a plurality of free blocks. The free block is converted into a log block when the log block is insufficient. On the other hand, a data block or a log block, which is to be erased after a merge operation, is converted into a free block. That is, any one memory block can be converted into a data block, a log block, and a free block by a merge operation. Modified mapping information according to a merge operation is stored in the meta area <b>2334</b>.</p>
<p id="p-0250" num="0249"><figref idref="DRAWINGS">FIG. 16</figref> is a conceptual diagram illustrating a general mapping method of a memory system. Referring to <figref idref="DRAWINGS">FIG. 16</figref>, the flash memory <b>2330</b> of <figref idref="DRAWINGS">FIG. 15</figref> includes a data area having data blocks, a log area having log blocks, and a free area having free blocks.</p>
<p id="p-0251" num="0250">The Data area includes data blocks having physical block numbers such as DB<b>100</b>, . . . , DB<b>109</b>. The log area includes log blocks having physical block number such as LB <b>200</b>, LB <b>201</b>, and LB <b>202</b>. The free area may include three physical blocks up to the maximum. As illustrated in the <figref idref="DRAWINGS">FIG. 16</figref>, since all the physical blocks are allocated to the log blocks, the free area is empty. The log block LB <b>201</b> is allocated to the data block DB <b>104</b>, and the log block LB <b>202</b> is allocated to the data block DB <b>108</b>.</p>
<p id="p-0252" num="0251">If the file system <b>2310</b> of <figref idref="DRAWINGS">FIG. 15</figref> makes a data write request, the FTL <b>2320</b> of <figref idref="DRAWINGS">FIG. 15</figref> examines whether there is a log block allocated to a corresponding data block or not that corresponds to the write if the physical page of the data block request store data. If there is a log block allocated to a corresponding data block, the allocated log block is used. However, if there is no log block allocated to a corresponding data block, the corresponding data block is assigned with a new log block from the free block.</p>
<p id="p-0253" num="0252">Referring to <figref idref="DRAWINGS">FIG. 16</figref>, a physical page PPN <b>0</b> of a log block LB <b>200</b> is used for storing a logical page page <b>1</b> of a data block DB <b>101</b>. A physical page PPN <b>1</b> of a data block DB <b>101</b> is nullified because the updated version of this data is now stored in the log block. Additionally, physical pages PPN <b>0</b> and PPN <b>1</b> of a log block LB <b>201</b> are respectively used for storing logical pages page <b>0</b> and page <b>2</b> of a data block DB <b>104</b>. Physical pages PPN <b>0</b> and PPN <b>2</b> of the data block <b>104</b> are nullified. Lastly, a physical page PPN <b>0</b> of a log block LB <b>202</b> is used for storing a logical page page <b>0</b> of a data block DB <b>108</b>. The physical page PPN <b>0</b> of the data block DB <b>108</b> is nullified.</p>
<p id="p-0254" num="0253"><figref idref="DRAWINGS">FIG. 17(</figref><i>a</i>) and <figref idref="DRAWINGS">FIG. 17(</figref><i>b</i>) illustrating a page mapping relationship between the data block and the log block of <figref idref="DRAWINGS">FIG. 16</figref>. Referring to <figref idref="DRAWINGS">FIG. 17(</figref><i>a</i>), a log block LB <b>201</b> is allocated to a data block DB <b>104</b>. Each of the data block DB <b>104</b> and the log block LB <b>201</b> includes four physical pages page <b>0</b> to page <b>3</b>. The physical page number PPN of <figref idref="DRAWINGS">FIG. 17</figref> means a page order of each memory block.</p>
<p id="p-0255" num="0254">The FTL <b>2320</b> of <figref idref="DRAWINGS">FIG. 15</figref> performs a write operation on logical pages stored in the data block DB <b>104</b> in response to a write request. Referring to <figref idref="DRAWINGS">FIG. 17(</figref><i>a</i>), the file system <b>2310</b> of <figref idref="DRAWINGS">FIG. 15</figref> requests a write operation in the order of the logical page page <b>2</b> and the logical page page <b>0</b>. Here, the logical page page <b>2</b> is stored in the physical page PPN<b>2</b> of the data block DB <b>104</b>, and the logical page page <b>0</b> is stored in the physical page PPN <b>0</b> of the data block DB <b>104</b>.</p>
<p id="p-0256" num="0255">Once another write request for the logical page page <b>2</b> is inputted (e.g., update of this data in the data block), a write operation for the physical page PPN <b>0</b> of the log block LB <b>201</b> is performed. The physical page PPN <b>2</b> of the data block DB <b>104</b> is nullified (e.g., invalidated because the updated version is not in the physical page PPN <b>0</b> of the log blck <b>20</b>). Next, once another write request for the logical page page <b>0</b> is inputted, a write operation for the physical page PPN <b>1</b> of the log block LB <b>201</b> is performed. The physical page PPN <b>0</b> of the data block DB <b>104</b> is nullified.</p>
<p id="p-0257" num="0256"><figref idref="DRAWINGS">FIG. 17(</figref><i>b</i>) is a mapping table illustrating a page corresponding relationship between a data block and a log block. Referring to <figref idref="DRAWINGS">FIG. 17(</figref><i>b</i>), the logical page page <b>2</b> of the data block DB <b>104</b> is stored in the physical page PPN <b>0</b> of the log block LB <b>201</b>, and the logical page page <b>0</b> of the data block DB <b>104</b> is stored in the physical page PPN <b>1</b> of the log block LB <b>201</b>.</p>
<p id="p-0258" num="0257">However, if a log block is insufficient, the log block needs to be converted into a free block. For example, a new log block needs to be allocated into a data block DB <b>102</b> in order to store a logical page page <b>0</b> of the data block DB <b>102</b>. However, if there is no free block to be allocated to the log block, a log block needs to be converted into a free block.</p>
<p id="p-0259" num="0258"><figref idref="DRAWINGS">FIG. 18</figref> is a view illustrating a method of generating a new data block by merging a data block with a log block. Referring to <figref idref="DRAWINGS">FIG. 18</figref>, logical pages page <b>2</b> and page <b>0</b> (respectively stored in the physical pages PPN <b>0</b> and PPN <b>1</b> of the log block LB <b>201</b>) and logical pages page <b>1</b> and page <b>3</b> (respectively stored in the physical pages PPN <b>1</b> and PPN <b>3</b> of the data block DB <b>104</b>) are copied to a new data block DB <b>100</b>.</p>
<p id="p-0260" num="0259">First, the logic page page <b>0</b> of the log block LB <b>201</b> is copied to a physical page PPN <b>0</b> of a new data block DB <b>110</b>. Next, the logic page page <b>1</b> of the data block DB <b>104</b> is coped to the physical page PPN <b>1</b> of the new data block DB <b>110</b>. Next, the logical page page <b>2</b> of the log block LB <b>201</b> is copied to the physical page PPN <b>2</b> of the new data block DB <b>110</b>. Next, the logical page page <b>3</b> of the data block DB <b>104</b> is copied to the physical page PPN <b>3</b> of the new data block DB <b>110</b>. Next, the log block LB <b>201</b> and the data block DB <b>104</b> are erased and converted into a free block.</p>
<p id="p-0261" num="0260">According to the mapping method of <figref idref="DRAWINGS">FIG. 18</figref>, valid pages of the log block LB <b>201</b> and the data block DB <b>104</b> are copied to the new data block DB <b>110</b> by a merge operation. The logical pages page <b>0</b> to page <b>3</b> are sequentially written in the new data block DB <b>110</b>. The sequentially writing of the logical pages page <b>0</b> to page <b>3</b> into one block is called an in-place order. On the contrary, the arbitrarily writing of the logical pages page <b>0</b> to page <b>3</b> into one block is called an out-of-place order or a random-place order.</p>
<p id="p-0262" num="0261">If a write request is in the order of the logical page page <b>0</b> to the logical page page <b>3</b>, these logic pages page <b>0</b> to page <b>3</b> are sequentially written into the physical pages PPN <b>0</b> to PPN <b>3</b> of the log block LB <b>201</b>. The pages written into the log block LB <b>201</b> can be directly registered as a data block without an additional page copy. This is because the log block LB <b>201</b> arranges pages to be fit to the in-place order.</p>
<p id="p-0263" num="0262">However, if a write request is random, a page copy process for meeting the order of logic pages must be required. In <figref idref="DRAWINGS">FIG. 18</figref>, four page copy processes are required. Additionally, two erase processes each for the log block LB <b>201</b> and the data block DB <b>104</b> are required after a page copy operation. Likewise, the mapping method of <figref idref="DRAWINGS">FIG. 16</figref> requires a many number of page copy processes to meet the page order. Moreover, two block erase operations are required to erase the log block LB and the data block DB after the page copy operation. The page copy operation and the block erase operation deteriorate a memory system speed.</p>
<p id="p-0264" num="0263">On the other hand, in <figref idref="DRAWINGS">FIG. 18</figref>, the log block LB <b>201</b> uses only two of the four pages, and is converted into a free block according to a merge operation. In some cases, only one of pages of the log block LB <b>201</b> is used and then the log block LB <b>201</b> can be converted into a free block. According to a 1:2 mapping method of <figref idref="DRAWINGS">FIG. 17</figref>, the log block LB <b>201</b> needs to be converted into the free block frequently. The merge operation is a factor deteriorating memory system performance.</p>
<p id="p-0265" num="0264"><figref idref="DRAWINGS">FIG. 19</figref> is a conceptual diagram illustrating an asymmetric mapping method of a memory system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 19</figref>, the flash memory of <figref idref="DRAWINGS">FIG. 15</figref> includes a data area having data blocks, a log area having log blocks, and a free area having free blocks.</p>
<p id="p-0266" num="0265">The data area includes data blocks having physical block numbers such as DB <b>100</b>, . . . , DB <b>109</b>. The log area is empty because there is no log block allocated to a data block. The free area can include three physical blocks to the maximum. As illustrated in <figref idref="DRAWINGS">FIG. 19</figref>, because there is no log block allocated to a data block, the free area includes three free blocks FB <b>300</b>, FB <b>301</b>, and FB <b>302</b>.</p>
<p id="p-0267" num="0266">According to an embodiment of the present invention, a certain physical page of the data block is maintained as an empty physical page. For example, after data are sequentially stored in physical pages PPN <b>0</b> to PPN <b>2</b> of the data block DB <b>100</b>, data are stored in a physical page PPN <b>0</b> of the next data block DB <b>101</b>. As will be described later, an empty physical page is used for storing another physical page in the data block.</p>
<p id="p-0268" num="0267">If the file system <b>2310</b> of <figref idref="DRAWINGS">FIG. 15</figref> requests a data write operation to a page the already stores data; for example. Attempts to update stored data, the FTL <b>2320</b> of <figref idref="DRAWINGS">FIG. 15</figref> determines whether there is an empty physical page in a corresponding data block or not. If there is an empty physical page in the corresponding data block, the data are stored in the empty physical page. However, if there is no empty physical page, the corresponding data block is assigned with a new log block from a free block. If there is no available free block, a merge operation will be performed.</p>
<p id="p-0269" num="0268">If the file system <b>2310</b> requests a write operation about a logical page page <b>1</b> of the data block DB <b>101</b>, since this page is already written in the data block the FTL <b>2320</b> detects whether there is an empty physical page in the data block DB <b>101</b> or not in response to the write request. Referring to <figref idref="DRAWINGS">FIG. 19</figref>, since there is an empty physical page in the data block DB <b>101</b>, the logical page page <b>1</b> is stored in a physical page PPN <b>3</b>. Additionally, assuming the previous write to logical page page <b>1</b> is stored in the PPN <b>1</b> of data block DB <b>101</b> the physical page PPN <b>1</b> is nullified (i.e., indicated as invalid in the FTL map).</p>
<p id="p-0270" num="0269">Furthermore, if the file system <b>2310</b> requests a write operation about a logical page page <b>2</b> of a data block DB <b>104</b>, since this page is already written to in the data block the FTL <b>2320</b> detects whether there is an empty physical page in the data block DB <b>104</b> or not in response to the write request. Referring to <figref idref="DRAWINGS">FIG. 19</figref>, since there is an empty physical page in the data block DB <b>104</b>, the logical page page <b>2</b> is stored in the physical page PPN <b>3</b>. Additionally, the physical page PPN <b>2</b> is nullified because PPN <b>2</b> stores the previous write to logical page <b>2</b> of data block DB <b>104</b>.</p>
<p id="p-0271" num="0270">Lastly, if the file system <b>2310</b> request a write operation about a logical page page <b>0</b> of the data block DB <b>108</b> (e.g., to update this data), the FTL <b>2320</b> detects whether there is an empty physical page in the data block DB <b>108</b> or not in response to the write request. Referring to <figref idref="DRAWINGS">FIG. 19</figref>, since there is an empty physical page in the data block DB <b>108</b>, the logical page page <b>0</b> is stored in the physical page PPN <b>3</b>. Additionally, the physical page PPN <b>0</b> is nullified because PPN <b>0</b> now stores outdated data of the logical page page <b>0</b> of DB <b>108</b>.</p>
<p id="p-0272" num="0271">As mentioned above, the number of performed merge operations can be reduced through extra physical pages in the data block. Referring to <figref idref="DRAWINGS">FIG. 19</figref>, because each of the data blocks DB <b>101</b>, DB <b>104</b>, and DB <b>108</b> includes an empty physical page, a logical page can be stored therein without a merge operation. This improves memory system performance.</p>
<p id="p-0273" num="0272">A time required for a merge operation is several ten times longer than a time required for a page copy operation. The number of merge operations when a data block includes one empty physical page is half of the number of merge operations when there is no empty physical page. That is, the data block including one empty physical page performs only one merge operation while a general data block performs two merge operations. Accordingly, because the number of merge operations is reduced, memory system speed can be improved.</p>
<p id="p-0274" num="0273">With the same reason, the number of merge operations when the data block includes N number of empty physical pages is 1/N+1 of when there is no empty physical page. That is, the data block having N number of empty physical pages performs only one merge operation while a typical data block performs the N+1 number of merge operations. Accordingly, because the N+1 number of merge operations is reduced, a memory system speed can be improved. In the embodiment of <figref idref="DRAWINGS">FIG. 19</figref>, the data block exemplarily includes one empty physical page but the present invention is not limited thereto. The data block according to the present invention may include the arbitrary number of empty physical pages.</p>
<p id="p-0275" num="0274"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart illustrating an asymmetric mapping method according to another embodiment of the present invention. In this embodiment, it is determined whether data are stored in an empty physical page or in an allocated log block according to a data storage pattern. Referring to <figref idref="DRAWINGS">FIG. 20</figref>, a write request is inputted from a file system in operation S<b>2110</b>. It is assumed the write request is to update data already stored. In operation S<b>2120</b>, a FTL detects a data write pattern in response to the write request. In more detail, the FTL determines whether data are randomly stored in respectively different data blocks (hereinafter, referred to as random write) or in sequential physical pages of one data block (hereinafter, referred to as sequential write).</p>
<p id="p-0276" num="0275">It proceeds to operation S<b>2130</b> when the data are randomly stored in respectively different data blocks. It proceeds to operation S<b>2140</b> when the data are stored in sequential physical pages of one data block. In operation S<b>2130</b>, it is determined whether there is an empty physical page in the data block. If there is no empty physical page in the data block, it proceeds to operation S<b>2140</b>, and it proceeds to operation S<b>2150</b> when there is an empty physical page. In operation S<b>2150</b>, the data are stored in an empty physical page. In operation S<b>2140</b>, a log block is allocated to the data block. In operation S<b>2160</b>, data are stored in the allocated log block.</p>
<p id="p-0277" num="0276">As mentioned above, because it is determined whether a log block is allocated or not according to the data write pattern, performance deterioration can be prevented in a case of sequential write. Random write and sequential write will be described in more detail with reference to the following drawings.</p>
<p id="p-0278" num="0277"><figref idref="DRAWINGS">FIG. 21</figref> is a view illustrating the random write of <figref idref="DRAWINGS">FIG. 20</figref>. Referring to <figref idref="DRAWINGS">FIG. 21</figref>, a file system requires a write operation first about a logical page page <b>1</b> of a data block DB <b>101</b>. In this case, because the data block DB <b>101</b> includes an empty physical page PPN <b>3</b>, the logical page page <b>1</b> is stored in the physical page PPN <b>3</b>. Then, the physical page PPN <b>1</b> is nullified because this physical page stored the previous write to that logical page.</p>
<p id="p-0279" num="0278">Next, the file system requires a write operation first about a logical page page <b>2</b> of a data block DB <b>104</b>. In this case, because the data block DB <b>104</b> includes an empty physical page PPN <b>3</b>, the logical page page <b>2</b> is stored in the physical page PPN <b>3</b>. The physical page PPN <b>2</b> is nullified because this physical page stored the previous write to that logical page.</p>
<p id="p-0280" num="0279">Then, the file system requires a write operation first about a logical page page <b>0</b> of a data block DB <b>108</b>. In this case, because the data block DB <b>108</b> includes an empty physical page PPN <b>3</b>, the logical page page <b>0</b> is stored in the physical page PPN <b>3</b>. The physical page PPN <b>0</b> is nullified because this physical page stored the previous write to that logical page.</p>
<p id="p-0281" num="0280">Lastly, the file system requires a write operation first about the logical page page <b>0</b> of a data block DB <b>104</b>. In this case, because the data block DB <b>104</b> does not include any empty physical page, the log block LB <b>200</b> is allocated to the data block DB <b>104</b>. Moreover, the logical page page <b>0</b> is stored in a physical page PPN <b>0</b> of the log block. The physical page PPN <b>0</b> of the data block DB <b>104</b> is nullified because this physical page stored the previous write to that logical page.</p>
<p id="p-0282" num="0281">In a case of random write according to this embodiment, an empty physical page in the data block is used first, and if there is no empty physical page, a log block is allocated to the data block. Through the same method, the number of merge operations can be reduced.</p>
<p id="p-0283" num="0282">As mentioned above, a time required for a merge operation is usually several ten times longer than a time required for a page copy operation. The number of merge operations when the data block includes one empty physical page is an half of the number of merge operations when there is no empty physical page. That is, the data block including one empty physical page performs only one merge operation while a general data block performs two merge operations. Accordingly, because the number of merge operations is reduced, memory system speed can be improved.</p>
<p id="p-0284" num="0283">With the same reason, the number of merge operations when the data block includes the N number of empty physical pages is 1/N+1 of when there is no empty physical page. That is, the data block having the N number of empty physical pages performs only one merge operation while a typical data block performs the N+1 number of merge operations. Accordingly, because the N+1 number of merge operations is reduced, memory system speed is improved. In the embodiment of <figref idref="DRAWINGS">FIG. 20</figref>, the data block includes only one empty physical page but the present invention is not limited thereto. The data block according to the present invention may include the arbitrary number of empty physical pages.</p>
<p id="p-0285" num="0284">Referring to <figref idref="DRAWINGS">FIG. 21</figref>, one log block is allocated to one data block. That is, with respect to one external logical block, two internal physical blocks (e.g., a data block DB <b>104</b> and a log block LB <b>200</b>) are used. In this meaning, the hybrid mapping method of <figref idref="DRAWINGS">FIG. 21</figref> may be called a 1:2 mapping method. According to the 1:2 mapping method, the log block LB <b>200</b> can record only page data included in the data block DB <b>104</b>. However, scopes of the present invention are not limited thereto. According to the present invention, a plurality of log blocks can be allocated to one data block. That is, a 1:k mapping method can be applied. For example, all log blocks can be allocated to one data block. Additionally, it is assumed that the free blocks are three in this embodiment but it is apparent to those skilled in the art that scopes of the present invention are not limited thereto.</p>
<p id="p-0286" num="0285"><figref idref="DRAWINGS">FIG. 22</figref> is a view illustrating the sequential write of <figref idref="DRAWINGS">FIG. 20</figref>. Referring to <figref idref="DRAWINGS">FIG. 22</figref>, a file system requests a write operation about logical pages page <b>0</b>, page <b>1</b>, and page <b>2</b> of a data block DB <b>102</b>. In this case, a FTL recognizes that a data write pattern is sequential write. Accordingly, the FTL allocates the log block LB <b>201</b> to the data block DB <b>102</b> in response to a write request from the file system. The logical pages page <b>0</b>, page <b>1</b>, and page <b>2</b> of the data block DB <b>102</b> are respectively stored on physical pages PPN <b>0</b>, PPN <b>1</b>, and PPN <b>2</b> of the log block LB <b>201</b>. Moreover, the physical pages PPN <b>0</b>, PPN <b>1</b>, and PPN <b>2</b> of the data block DB <b>102</b> are nullified because this physical page stored the previous write to that logical page.</p>
<p id="p-0287" num="0286">As described above, if a data write operation is performed on one data block, a log block is allocated to a data block. Due to this method, sequential write performance can be improved.</p>
<p id="p-0288" num="0287">As mentioned above, since the memory system according to the present invention uses an asymmetric mapping method, a page utilization rate of a log block can be increased. Additionally, since the present invention determines whether a log block is allocated or not according to a write data pattern, sequential write performance can be improved. Moreover, since the present invention has a high page utilization rate of a log block, the number of merge and block erase operations can be reduced compared to a typical method. Therefore, product durability can be enhanced.</p>
<p id="p-0289" num="0288">However, if all the free blocks are allocated to the data block, they need to be obtained by a merge operation. As mentioned above, the free blocks can be obtained by merging data blocks with log blocks allocated thereto. However, which data block and log block are merged becomes an important issue. According to the embodiments of the present invention, data blocks and log blocks that allow merge operations to be performed without difficulties are preferentially selected for a merge operation.</p>
<p id="p-0290" num="0289"><figref idref="DRAWINGS">FIG. 23</figref> is a view illustrating a case where all logical pages page <b>0</b>, page <b>1</b>, and page <b>2</b> in a data block are updated only once by a log block. Referring to <figref idref="DRAWINGS">FIG. 23</figref>, data stored in the log block are identical to data stored in the data block. Accordingly, a merge operation can be performed by converting a log block into a data block without a page copy operation. This merge operation is called swap merge.</p>
<p id="p-0291" num="0290"><figref idref="DRAWINGS">FIG. 24</figref> is a view illustrating a case where partial logical pages in a data block are updated by a log block. Referring to <figref idref="DRAWINGS">FIG. 24</figref>, logical pages page <b>0</b> and page <b>1</b> of the data block are already updated. Accordingly, the logical page page <b>2</b> of the data block is stored in a physical page PPN <b>2</b> of the log block, and the log block is converted into a data block such that a merge operation can be performed. In this case, one page copy operation is performed during a merge operation. This merge operation is called a copy merge.</p>
<p id="p-0292" num="0291"><figref idref="DRAWINGS">FIG. 25</figref> is a view illustrating a case where partial logical pages in a data block are updated by a log block. Referring to <figref idref="DRAWINGS">FIG. 25</figref>, logical pages page <b>0</b> and page <b>2</b> are stored in a log block and a logical page page <b>1</b> is stored in an existing data block. Therefore, logical pages page <b>0</b>, page <b>1</b>, and page <b>2</b> are stored in a new data block, and the existing data block and the log block are erased and converted into a free block. In this case, three page copy operations are performed during merging. This merging is called simple merge.</p>
<p id="p-0293" num="0292">According to the merge operations of <figref idref="DRAWINGS">FIGS. 23 through 25</figref>, the number of page copy operations differs. In the embodiments of the present invention, a merge operation requiring the minimum number of page copies is performed first.</p>
<p id="p-0294" num="0293"><figref idref="DRAWINGS">FIG. 26</figref> is a block diagram illustrating a computing system <b>2400</b> with a flash memory device according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 26</figref>, the computing system <b>2400</b> includes a processor <b>2410</b>, a memory controller <b>2420</b>, an input device <b>2430</b>, an output device <b>2440</b>, a nonvolatile memory <b>2450</b>, and a main memory <b>2460</b>. The solid line represents a system bus through which data or commands are transferred.</p>
<p id="p-0295" num="0294">The memory controller <b>2420</b> and the nonvolatile memory <b>2450</b> may constitute a memory card. The processor <b>2410</b>, the input device <b>2430</b>, the output device <b>2440</b>, and the main memory <b>2460</b> may constitute a host using a memory card as a memory device.</p>
<p id="p-0296" num="0295">The computing system <b>2400</b> according to the present invention receives data from the outside through the input device <b>2430</b> (e.g., a keyboard, a camera, etc.). The inputted data may be a command by a user or multimedia data such as image data by a camera. The inputted data are stored in the nonvolatile memory <b>2450</b> or the main memory <b>2460</b>.</p>
<p id="p-0297" num="0296">A result processed by the processor <b>2410</b> is stored in the nonvolatile memory <b>2450</b> or the main memory <b>2460</b>. The output device <b>2440</b> outputs the data stored in the nonvolatile memory <b>2450</b> or the main memory <b>2460</b>. The output device <b>2440</b> outputs digital data in a human detectable form. For example, the output device <b>2440</b> includes a display or a speaker. An asymmetric mapping method according to the present invention will be applied to the nonvolatile memory <b>2450</b>. As speed and durability of the nonvolatile memory <b>2450</b> are improved, speed and durability of the computing system <b>2400</b> will be improved proportional thereto.</p>
<p id="p-0298" num="0297">The nonvolatile memory <b>2450</b> and/or the memory controller <b>2420</b> may be packaged using various forms of packages. For example, the nonvolatile memory <b>2450</b> and/or the controller memory <b>2420</b> may be loaded using packages such as package on package (PoP), ball grid arrays (BGAs), chip scale packages (CSPs), plastic leaded chip carrier (PLCC), plastic dual in-line package (PDIP), die in waffle pack, die in wafer form, chip on board (COB), ceramic dual in-line package (CERDIP), plastic metric quad flat pack (MQFP), thin quad flat pack (TQFP), small outline (SOIC), shrink small outline package (SSOP), thin small outline (TSOP), thin quad flatpack (TQFP), system in package (SIP), multi chip package (MCP), wafer-level fabricated package (WFP), wafer-level processed stack package (WSP), etc.</p>
<p id="p-0299" num="0298">Although not illustrated in the drawings, it is apparent to those skilled in the art that power supply is required to supply a power source necessary for operations of the computing system <b>2400</b>. Moreover, if the computing system <b>2400</b> is a mobile device, a battery is additionally required to supply a power source to the computing system <b>2400</b>.</p>
<p id="p-0300" num="0299"><figref idref="DRAWINGS">FIG. 27</figref> is a block diagram illustrating a structure of a solid state disk (SSD) system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 27</figref>, the SSD system <b>2500</b> includes a SSD controller <b>2510</b> and flash memories <b>2520</b> to <b>2523</b>.</p>
<p id="p-0301" num="0300">A semiconductor memory system according to the present invention may be applied to SSD. Recently, SSD used for replacing a hard disk drive (HDD) becomes popular and extensively used in the next generation memory market. SSD is a data storage device using memory chips such as a flash memory to store data instead of rotating platters in a typical HDD. SSD is more fast and physically strong to external impact and has lower power consumption compared to a mechanically operating HDD.</p>
<p id="p-0302" num="0301">Referring to <figref idref="DRAWINGS">FIG. 27</figref>, a central processing unit (CPU) <b>2511</b> determines whether it stores data from the host in a flash memory or it reads the stored data from the flash memory to transmit it to the host after receiving a command from a host. The CPU <b>2511</b> transmits the data to the host. An ATA interface <b>2512</b> is used for exchanging data with the host according to a control of the CPU <b>2511</b>. The ATA interface <b>2512</b> fetches a command and an address from the host and transmits it to the CPU <b>2511</b> through a CPU bus. Data inputted into the host through the ATA interface <b>2512</b> or data to be transmitted to the host are delivered through a SRAM cache <b>2513</b> not the CPU bus according to a control of the CPU <b>2511</b>.</p>
<p id="p-0303" num="0302">The SRAM cache <b>2513</b> temporarily stores transfer data between the host and the flash memories <b>2520</b> to <b>2523</b>. Additionally, the SRAM cache <b>2513</b> is used for storing a program that will be operated by the CPU <b>2511</b>. The SRAM cache <b>2513</b> may be regarded as a kind of a buffer memory, but does not need to necessarily include SRAM. A flash interface <b>2514</b> exchanges data with a non-volatile memory used as a storage device. The flash interface <b>2514</b> may be configured to support a NAND flash memory, a One-NAND flash memory, or a multi-level flash memory.</p>
<p id="p-0304" num="0303">The semiconductor memory system according to the present invention may be used as a portable storage device. Accordingly, the semiconductor memory system may be used as a storage device of an MP3, a digital camera, a personal digital assistant (PDA), an e-book, etc. Additionally, the semiconductor memory system may be used as a storage device of a digital TV or a computer.</p>
<p id="p-0305" num="0304"><figref idref="DRAWINGS">FIG. 28</figref> is a block diagram of a memory system according to an embodiment of the present invention. In the memory system of <figref idref="DRAWINGS">FIG. 28</figref>, a memory <b>2610</b> and a memory controller <b>2620</b> constitute a card <b>2600</b>. For example, the card <b>2600</b> may be identical to a flash memory card. That is, the card <b>2600</b> may satisfy a certain industry standard for electronic devices such as a digital camera, a personal computer, etc. It is understood that the memory controller <b>2620</b> controls the memory <b>2610</b> based on control signals received from other external devices.</p>
<p id="p-0306" num="0305"><figref idref="DRAWINGS">FIG. 29</figref> is a block diagram of a memory system according to another embodiment of the present invention. The SSD system of <figref idref="DRAWINGS">FIG. 27</figref> is a portable device <b>2700</b>. The portable device <b>2700</b> may be an MP3 player, a video player, and a combination of video and audio players. As illustrated in <figref idref="DRAWINGS">FIG. 29</figref>, the portable device <b>2700</b> includes a memory <b>2710</b> and a memory controller <b>2720</b>. The portable device <b>2700</b> may include an encoder and decoder (EDC) <b>2730</b>, presentation components <b>2740</b>, and an interface <b>2750</b>.</p>
<p id="p-0307" num="0306">Data (video, audio, etc.) processed by the EDC <b>2730</b> are inputted in to the memory <b>2710</b> through the memory controller <b>2720</b> and are outputted from the memory <b>2710</b>. As illustrated through the dotted lines of <figref idref="DRAWINGS">FIG. 27</figref>, the data are directly inputted from the EDC <b>2730</b> into the memory <b>2710</b>, and/or are directly outputted from the memory <b>2710</b> to the EDC <b>2730</b>.</p>
<p id="p-0308" num="0307">The EDC <b>2730</b> may encode data to store them in the memory <b>2710</b>. For example, the EDC <b>2730</b> may perform MP3 encoding about audio data to store them in the memory <b>2710</b>. In another method, the EDC <b>2730</b> may perform MPEG encoding (e.g., MPEG2, MPEG4, etc.) about video data to store them in the memory <b>2710</b>. Additionally, the EDC <b>2730</b> may include a plurality of encoders for encoding other types of data based on other data formats. For example, the EDC <b>2730</b> may include an MP3 encoder for audio data and an MPEG encoder for video data.</p>
<p id="p-0309" num="0308">The EDC <b>2730</b> decodes an output from the memory <b>2710</b>. For example, the EDC <b>2730</b> may perform MP3 decoding about audio data outputted from the memory <b>2710</b>. In another method, the EDC <b>2730</b> may perform MPEG decoding (e.g., MPEG2, MPEG4, etc.) about video data outputted from the memory <b>2710</b>. Moreover, the EDC <b>2730</b> may include a plurality of decoders for decoding other types of data according to other data formats. For example, the EDC <b>2730</b> may include an MP3 decoder for audio data and an MPEG decoder for video data.</p>
<p id="p-0310" num="0309">It is understood that the EDC <b>2730</b> includes only decoders. For example, the already encoded data may be received by the EDC <b>2730</b> and may be transferred to the memory controller <b>2720</b> and/or memory <b>2710</b>. Moreover, the EDC <b>2730</b> may be realized with software through a general purpose processor (not shown) and then used.</p>
<p id="p-0311" num="0310">The EDC <b>2730</b> receives data for encoding through the interface <b>2750</b> or already encoded data. The interface <b>2750</b> may comply with a well-known standard (e.g., firmware, USB, etc.). The interface <b>2750</b> may include at least one interface. For example, the interface <b>2750</b> may includes a firmware interface, a USB interface, etc. The data from the memory <b>2710</b> may be outputted through the interface <b>750</b>.</p>
<p id="p-0312" num="0311">The presentation components <b>2740</b> may display data to a user, which are outputted from the memory and/or decoded by the EDC <b>2730</b>. For example, the presentation components <b>2740</b> may include a speaker jack for outputting audio data and a display screen for outputting video data.</p>
<p id="p-0313" num="0312">A flash memory system according to a second embodiment of the present invention may achieve speed-up by means of at least one free page in a data block. In addition, the flash memory system according to the second embodiment of the present invention may achieve high data reliability by means of a temperature sensor as well as the free page. A flash memory system including a temperature sensor will be described in detail in fourth embodiment.</p>
<p id="p-0314" num="0313">The flash memory system according to the second embodiment of the present invention may achieve high performance by ensuring reliability of LSB data as well as the free page. A flash memory system ensuring reliability of LSB data will be described in detail in fifth embodiment.</p>
<p id="p-0315" num="0314">The flash memory system according to the second embodiment of the present invention may achieve high data reliability by means of read count data or read history as well as the free page. A flash memory system achieving high data reliability by means of read count data or read history will be described in detail in sixth and seventh embodiments, respectively.</p>
<p id="p-0316" num="0315">The flash memory system according to the second embodiment of the present invention may achieve speed-up by means of the free page and high data reliability by means of various manners which will be described below in detail. Performance of the flash memory system according to the second embodiment of the present invention may be improved through achievement of speed-up and high data reliability.</p>
<heading id="h-0011" level="1">Embodiment 3</heading>
<heading id="h-0012" level="1">Flash Memory System Using Microcode</heading>
<p id="p-0317" num="0316">A memory controller is designed using Hard-wired Logic to control all of the instruction sequences of a flash memory, in a way to enhance its performance. The memory controller designed with the Hard-wired Logic is complicated, has low extension ability, and is difficult to manage a plurality of flash memory effectively.</p>
<p id="p-0318" num="0317">On the other hand, one way to increase extension ability of the memory controller is to control all of the instruction sequences of the flash memory via firmware. The designing of the memory controller according to this method may be easily done but this provides low capability. Therefore, ways to solve disadvantages of the above described two methods are required. In other words, a flash memory controller capable of extending easily with a high capability is in demand. Also, single-product memory, for example, the NAND flash memory is controlled by a CPU of a host. Products, for example, an SD card and MMC card include memory controllers inside.</p>
<p id="p-0319" num="0318"><figref idref="DRAWINGS">FIG. 30</figref> and <figref idref="DRAWINGS">FIG. 31</figref> illustrate a system layer structure for controlling a typical flash memory device.</p>
<p id="p-0320" num="0319"><figref idref="DRAWINGS">FIG. 30</figref> is an exemplary embodiment illustrating a system layer structure of a Pure-NAND memory, and <figref idref="DRAWINGS">FIG. 31</figref> is an exemplary embodiment illustrating a system layer structure of a managed NAND memory. A Pure-NAND memory is a single-product memory, for example, NAND or OneNAND. The Pure-NAND is controlled by an external processor (i.e. CPU of a host). A relatively complicated processor, for example, ARM926 or ARM1136 is used for the external processor. A Managed-NAND is a flash memory, for example, SD, MMC, LBA NAND flash. The Managed-NAND is controlled by an internal memory controller in the flash memory. For the NAND memory controller inside the flash memory, a relatively simple processor, for example, ARM7TDMI is used.</p>
<p id="p-0321" num="0320">Referring to <figref idref="DRAWINGS">FIG. 30</figref>, a system layer structure <b>3010</b> of the Pure-NAND includes a user application <b>3011</b>, a file system <b>3012</b>, a block device interface <b>3013</b>, flash translation layers FTLs <b>3014</b> to <b>3016</b>, and a flash memory <b>3017</b>. The user application <b>3011</b> is a utility driven in the file system <b>3012</b>. The user application <b>3011</b> may receive a download of contents by using a high speed downlink packet access (HSDPA), which is a third-generation mobile communication technology. The user application <b>3011</b> is driven by a host processor, for example, ARM11 or ARM9. The file system <b>3012</b> is a rule designed for reading and writing data in the flash memory <b>3017</b>. Some examples of the file system <b>3012</b> are FAT16, FAT32 and NTFS which are operated in DOS or Windows, and ext2, raiserFS, and ext3 operated in Linux. A block device interface <b>3013</b> connects the file system <b>3012</b> and FTLs <b>3014</b> to <b>3016</b>. The flash translation layers <b>3014</b> to <b>3016</b> include a sector translation layer, a block management layer and a low level device driver. The FTLs <b>3014</b> to <b>3016</b> control the physical flash memory <b>3017</b> so as to be used in the file system <b>3012</b>. For the Pure-NAND, the CPU of the host controls the flash memory <b>3017</b> directly.</p>
<p id="p-0322" num="0321">Referring to <figref idref="DRAWINGS">FIG. 31</figref>, a Managed-NAND system layer structure <b>3020</b> includes a user application <b>3021</b>, a file system <b>3022</b>, a block device interface <b>3023</b>, flash translation layers <b>3024</b> to <b>3026</b>, and a flash memory <b>3027</b>. For the Managed-NAND, the CPU of the host controls the user application <b>3021</b>, file system <b>3022</b> and the block device interface <b>3023</b>, and the Managed-NAND directly controls the FTLs <b>3024</b> to <b>3026</b> and flash memory <b>3027</b>. The FTL of the Pure-NAND is operated complicatedly and effectively, based on high computation performance and abundant memory (RAM) resource of the CPU of the host. However, the CPU of the host consumes a large amount of resource (i.e. the load and memory of the CPU) to operate the FTL. In other words, a write performance in the file system is highly reliable on the resource of the CPU, which may be allotted so as to perform FTL. Accordingly, in a multi-tasking condition, in case the CPU resource is given to a task having a higher priority than the task requiring a FTL performance, the write performance deteriorates rapidly.</p>
<p id="p-0323" num="0322">On the other hand, for the Managed-NAND, a write performance higher than a predetermined value is ensured because it uses an internal processor exclusive for the FTL. However, the cost increases as each of the flash memories includes a controller. Also, as the Managed-NAND performs a simpler FTL with a simpler internal processor and less RAM resources, it includes a merge operation less effective than a Pure-NAND. Therefore, it is difficult to optimize the write performance in the file system for the Managed-NAND.</p>
<p id="p-0324" num="0323"><figref idref="DRAWINGS">FIG. 32</figref> is a chart illustrating proportions of execution time of the basic operations for each of the NAND flash memories. Referring to <figref idref="DRAWINGS">FIG. 32</figref>, the most frequently used operations are &#x201c;other operations&#x201d; ETC <b>3034</b> among the basic operation of the NAND flash memory. The &#x201c;other operations&#x201d; are operations other than a write operation, a read operation and a copy operation. Examples of the &#x201c;other operations&#x201d; are an erase operation and an erase-verify operation. Other than the &#x201c;other operations&#x201d;, the next mostly used operation among the basic operation of the NAND flash memory is a write operation <b>3031</b>. The next mostly used operation is a copy operation <b>3032</b>, then the next most used operation is the read operation <b>3033</b>. For the Managed-NAND, the basic operation of the flash memory does not affect the load of the host CPU. On the other hand, for the Pure-NAND, the basic operation of the flash memory operation affects greatly the load of the host CPU.</p>
<p id="p-0325" num="0324">Therefore, the memory system according to an exemplary embodiment of the present invention includes an accelerator that controls only the most frequently used operations among the basic operations of the NAND flash memory to decrease overload of the host CPU. The accelerator according to an exemplary embodiment of the present invention is described in detail with regard to <figref idref="DRAWINGS">FIG. 35</figref>. The memory system according to the exemplary embodiment of the present invention includes an accelerator that controls write operation and copy operation of the basic operation of the NAND flash memory. An overwrite operation cannot be performed in a flash memory device. Accordingly, the flash memory device performs a merge operation instead of an overwrite operation.</p>
<p id="p-0326" num="0325">Merge operations of a flash memory device, complying with the log mapping is described in detail with reference to <figref idref="DRAWINGS">FIG. 33</figref> and <figref idref="DRAWINGS">FIG. 34</figref>. Referring to <figref idref="DRAWINGS">FIG. 33</figref>, the flash memory of a data storage device is divided into a data area, log area and a meta area.</p>
<p id="p-0327" num="0326">According to the log mapping, memory blocks in the log area are designated to a portion of memory blocks of the memory blocks in the data area, respectively. For example, it is assumed that the flash memory includes 9 memory blocks PBN<b>0</b> to PBN<b>8</b>. Among the 9 memory blocks, the memory blocks PBN<b>0</b> to PBN<b>4</b> are designated as data area, the memory blocks PBN<b>5</b> to PBN<b>7</b> as log area, and the memory block PBN<b>8</b> as meta area, respectively. The memory block PBN<b>7</b> of the log area is designated as a blank block. For the purpose of explanation assume the following occurs: In case data is to be written into the memory block PBN<b>0</b> of the data area, the data is not written directly into the memory block PBN<b>0</b>, but is written into the memory block PBN<b>5</b> of the log area corresponding to the memory block PBN<b>0</b>. In case data is to be written into the memory block PBN<b>1</b>, merge operation is performed as below since the memory block of the log area corresponding to the memory block PBN<b>1</b> is not designated. In case there is a memory block PBN<b>7</b> in the log area, a valid data stored in the memory block PBN<b>5</b> of the log area is copied into the blank memory block PBN<b>7</b>. In addition, the valid data stored in the memory block PBN<b>0</b> of the data area corresponding to the memory block PBN<b>5</b> is copied into the memory block PBN<b>7</b>.</p>
<p id="p-0328" num="0327">On the other hand, the mapping information of the memory block according to merge operation may be varied, the varied mapping information is managed by the FTL and is stored in the meta area PBN<b>8</b> of the flash memory.</p>
<p id="p-0329" num="0328"><figref idref="DRAWINGS">FIG. 34</figref> illustrates merge operations according to log mapping. Referring to <figref idref="DRAWINGS">FIG. 34</figref>, valid pages of the log block PBN<b>5</b> and data block PBN<b>0</b> are copied into a new data block PBN<b>7</b>. Here, as the log block PBN<b>5</b> is the most recently written data it is possible that it is the data the user wishes to be written, but the data written in the data block PBN<b>0</b> is already erased, i.e., it may be an invalid data. In this case, the FTL cannot determine whether the data written in the data block PBN<b>0</b> is valid or invalid. In other words, the valid pages of the data block PBN<b>0</b> may be a valid page for the FTL, but it may be an invalid page for the file system. For example, if the file written in the second valid page of the data block PBN<b>0</b> is an already erased data in the point of view of the file system, a merge operation of the corresponding page may be an unnecessary operation in the point of view of the file system. As the merge operation is an operation performed by need of the FTL, the host is unable to detect whether the merge operation is performed. Therefore, as the Managed-NAND is controlled by the included processor without being controlled by the host CPU, it performs an inefficient merge operation.</p>
<p id="p-0330" num="0329"><figref idref="DRAWINGS">FIG. 35</figref> is a block diagram of the memory system according to an exemplary embodiment of the present invention.</p>
<p id="p-0331" num="0330">Referring to <figref idref="DRAWINGS">FIG. 35</figref>, the memory system <b>3100</b> according to the present invention includes a host processor <b>3110</b>, a first memory device <b>3120</b> and a second memory device <b>3130</b>, a first accelerator <b>3140</b> and second accelerator <b>3150</b>, and a system bus <b>3160</b>. The first memory device <b>3120</b> includes a first One-NAND flash memory <b>3121</b> and a first interface <b>3122</b>. The second memory device <b>3130</b> includes a second One-NAND flash memory <b>3131</b> and a second interface <b>3132</b>. The first accelerator <b>3140</b> includes a control sequencer Ch. A <b>3141</b> and a first DMA <b>3142</b>. The second accelerator <b>3150</b> includes a control sequencer Ch. B <b>3151</b> and a second DMA <b>3152</b>. Micro-codes are a plurality of instructions for controlling the memories, included in the first and second memory devices <b>3120</b> and <b>3130</b>. The micro-codes comprise a plurality of instructions to control basic operations (for example, write, read, copy and erase operations) of the first and second memory devices <b>3120</b> and <b>3130</b>. The micro-code according to the present invention further includes &#x201c;Read&#x26;Load&#x201d;, &#x201c;Read&#x26;Verify&#x201d;, &#x201c;Write&#x201d;, &#x201c;Wait For Event&#x201d;, and &#x201c;END&#x201d;, as basic instructions, and &#x201c;Read&#x26;Load&#x26;Index Increment&#x201d;, &#x201c;Mov&#x201d;, &#x201c;Add&#x201d;, &#x201c;Sub&#x201d;, &#x201c;Or&#x201d;, &#x201c;And&#x201d;, &#x201c;Shift Left&#x201d;, &#x201c;Shift Right&#x201d;, &#x201c;Swap&#x201d;, &#x201c;Jump Backward&#x201d;, &#x201c;Jump Backward If Equal&#x201d;, &#x201c;Jump Backward If Not Equal&#x201d;, &#x201c;Jump Forward&#x201d;, &#x201c;Jump Forward If Equal&#x201d;, &#x201c;Jump Forward If Not Equal&#x201d;, &#x201c;Jump Backward &#x26; Link&#x201d;, &#x201c;Jump Forward &#x26; Link&#x201d;, &#x201c;Return&#x201d; and &#x201c;Block Memory Transfer&#x201d;. In addition, the accelerator according to the present invention performs functions of LLD_Copy, LLD_Write of the Low Level Device Driver (LLD) of the FTL by the micro-codes.</p>
<p id="p-0332" num="0331">The host processor <b>3110</b> transfers the micro-codes to the control sequencer Ch. A <b>3141</b> and to the control sequencer Ch. B <b>3151</b> in the first and second accelerators <b>3140</b> and <b>3150</b> respectively via the system bus <b>3160</b>. The micro-codes transferred by the host processor <b>3110</b> are retained in the code storage (not shown) in the control sequencers Ch. A and Ch. B <b>3141</b> and <b>3151</b>. The micro-codes retained in the sequencer code storage are fetched and performed by the control sequencers Ch. A and Ch. B <b>3141</b> and <b>3151</b>. The control sequencer Ch. A <b>3141</b> of the first accelerator <b>3140</b> performs the micro-codes. The first DMA <b>3142</b> reads data of the first One-NAND flash memory <b>3121</b>, and transfers the read data to the host processor <b>3110</b> via the first interface <b>3122</b>, in response to the performed micro-codes of the control sequencer Ch. A <b>3141</b>. Operations of the second accelerator <b>3150</b> are the same as operations of the first accelerator <b>3140</b>. In other words, the second accelerator <b>3150</b> controls basic operations of the second memory device <b>3130</b> by the micro-codes. An operation of the control sequencer Ch. B <b>3151</b> of the second accelerator <b>3150</b> is the same as the operation of the control sequencer <b>3141</b> of the first accelerator <b>3140</b>. Accordingly, redundant description will be omitted here for brevity.</p>
<p id="p-0333" num="0332">The memory system according to the present invention controls a plurality of memory devices mounted in the memory system using micro-codes. For that reason, it may decrease the load of the host processor <b>3110</b> in the memory system <b>3100</b>.</p>
<p id="p-0334" num="0333"><figref idref="DRAWINGS">FIG. 36</figref> is a flow chart illustrating a driving method of the memory system of <figref idref="DRAWINGS">FIG. 35</figref>.</p>
<p id="p-0335" num="0334">Referring to <figref idref="DRAWINGS">FIG. 35</figref> and <figref idref="DRAWINGS">FIG. 36</figref>, the host CPU <b>3110</b> loads micro-codes in the code storage of the first and second accelerators <b>3140</b> and <b>3150</b> via the system bus <b>3160</b> (S<b>3001</b>). The host CPU <b>3110</b> loads parameter storages (not shown) of the first and second accelerators <b>3140</b> and <b>3150</b> via the system bus <b>3160</b> (S<b>3002</b>). The parameter includes a source address and a target address of the first and second memories <b>3121</b> and <b>3131</b>. The host CPU <b>3110</b> issues drive instruction of the first and second accelerators <b>3140</b> and <b>3150</b>, and maintains a sleep mode until interruptions occur from the first and second accelerators <b>3140</b> and <b>3150</b> (S<b>3003</b>). The first and second accelerators <b>3140</b> and <b>3150</b> perform the micro-codes corresponding to the parameter to generate an interruption (S<b>3004</b>). The first accelerator <b>3140</b> and the second accelerator <b>3150</b> check the interrupt status (S<b>3005</b>).</p>
<p id="p-0336" num="0335">The present invention includes a flash memory accelerator in the Pure-NAND, to enhance write performance in a file system. In the memory system according to the present invention, tasks with a more complex computation and with more use of memory are performed by the host CPU, and tasks using less memory are performed by the accelerator. Accordingly, in the present invention, use of the host CPU required for merge and program operations during write operation of the FTL may be decreased. Also, the memory system according to the present invention decreases reliability of the write performance of the flash memory on the amount of resource of the presently available host CPU.</p>
<p id="p-0337" num="0336"><figref idref="DRAWINGS">FIG. 37</figref> is a timing diagram of operations of a host CPU in a Pure-NAND.</p>
<p id="p-0338" num="0337">Referring to <figref idref="DRAWINGS">FIG. 37</figref>, CI denotes an issuing task of a flash memory instruction by a host CPU. SC denotes status checking of the flash memory by the host CPU. tR or tPROG are performing flash memory instruction by the host CPU. In other words, tR is a time period in which data is read from a memory cell and until data is transferred to a latch register, and tPROG is a programming time period in which data is written from a latch register to a memory cell.</p>
<p id="p-0339" num="0338">A host CPU performs Task A and Task B in parallel. Task A is irrelevant to the basic operations of the flash memory, and Task B is for controlling the basic operations of the flash memory. The host CPU performs the Task A and Task B in time sharing system. In other words, the host CPU performs the Task B while performing the Task A.</p>
<p id="p-0340" num="0339"><figref idref="DRAWINGS">FIG. 38</figref> is a timing diagram of the CPU and accelerator of <figref idref="DRAWINGS">FIG. 35</figref>. Referring to <figref idref="DRAWINGS">FIG. 38</figref>, CI is an issue operation of the flash memory instruction by the accelerator, SC is a status checking of the flash memory by the accelerator, APL is a parameter loading operation of the accelerator, ASC is a status checking of the accelerator by the host CPU, and tR or tPROG are flash memory instruction busy-waiting operation by the accelerator. In other words, tR is a time period in which data is read from a memory cell and data is transferred to a latch register. tPROG is a programming time period in which data is written from the latch register to the memory cell.</p>
<p id="p-0341" num="0340">The host CPU performs Task A and Task B in parallel. The Task A is an operation irrelevant to basic operation of the flash memory, and Task B is an operation for controlling the basic operation of the flash memory. The host CPU performs the Task A and Task B independently from each other. Thus, the present invention is able to decrease the load of the host CPU.</p>
<p id="p-0342" num="0341"><figref idref="DRAWINGS">FIG. 39</figref> is a graph comparing the operation performance between the <figref idref="DRAWINGS">FIG. 37</figref> and <figref idref="DRAWINGS">FIG. 38</figref>.</p>
<p id="p-0343" num="0342">Referring to <figref idref="DRAWINGS">FIG. 37</figref> to <figref idref="DRAWINGS">FIG. 39</figref>, the X-axis of the graph is an amount of resource allotted to the CPU for driving the FTL, and the Y-axis is a write performance of the FTL. In other words, the X-axis corresponds to a load of the host CPU, and the Y-axis corresponds to the operation performance. The solid line depicts the operation performance illustrated in <figref idref="DRAWINGS">FIG. 37</figref>. The dotted line depicts the operation performance illustrated in <figref idref="DRAWINGS">FIG. 38</figref>. In other words, when the amount of resource allotted to the CPU increases the solid line which is the operation performance of <figref idref="DRAWINGS">FIG. 37</figref> increases arithmetically, and the dotted line which is the operation performance of <figref idref="DRAWINGS">FIG. 38</figref> increases geometrically.</p>
<p id="p-0344" num="0343"><figref idref="DRAWINGS">FIG. 40</figref> is a block diagram illustrating a memory system according to another exemplary embodiment of the present invention.</p>
<p id="p-0345" num="0344">Referring to <figref idref="DRAWINGS">FIG. 40</figref>, a memory system <b>3200</b> according to the present invention includes a host processor <b>3210</b>, a first memory device <b>3220</b> and a second memory device <b>3230</b>, a first accelerator <b>3240</b> and a second accelerator <b>3250</b>, and a system bus <b>3260</b>. The first memory device <b>3220</b> includes a first NAND flash memory <b>3221</b>, and a first interface <b>3222</b>. The second memory device <b>3230</b> includes a second NAND flash memory <b>3231</b> and a second interface <b>3232</b>. The first accelerator <b>3240</b> includes a control sequencer Ch. A <b>3241</b>, a first DMA <b>3242</b>, and a first error correction code block <b>3243</b>. The second accelerator <b>3250</b> includes a control sequencer Ch. B <b>3251</b>, a second DMA <b>3252</b>, and a second error correction code block <b>3253</b>.</p>
<p id="p-0346" num="0345">Micro-codes are a plurality of instructions for controlling the memories, included in a first memory device <b>3220</b> and a second memory device <b>3230</b>. The micro-codes comprises a plurality of instructions to control basic operations (for example, write, read, copy and erase operations) of the first and second memory devices <b>3220</b> and <b>3230</b>. The host processor <b>3210</b> transfers the micro-codes to the control sequencers Ch. A and Ch. B <b>3241</b> and <b>3251</b> in the first and second accelerators <b>3240</b> and <b>3250</b> via the system bus <b>3260</b>. The transferred micro-codes via the host processor <b>3210</b> are stored in a code storage (not shown) of the control sequencers Ch. A and Ch. B <b>3241</b> and <b>3251</b>. The micro-codes stored in the sequencer code storage is fetched and performed accordingly by the control sequencers Ch. A and Ch. B <b>3241</b> and <b>3251</b>.</p>
<p id="p-0347" num="0346">A first error correction code block <b>3243</b> corrects error of the data in the first NAND flash memory <b>3221</b>. The first device DMA <b>3242</b> reads the data in the first NAND flash memory <b>3221</b> via the first interface <b>3222</b> in response to the micro-codes performed by the control sequencer Ch. A <b>3241</b>, and transfers the data corrected by the first error correction code block <b>3243</b> to the host processor <b>3210</b>. The operation of the second accelerator <b>3250</b> is identical with the operation of the first accelerator <b>3240</b>. In other words, the second accelerator <b>3250</b> controls the basic operation of the second memory device <b>3230</b> using the micro-codes.</p>
<p id="p-0348" num="0347">The flash memory device is a nonvolatile memory device that is capable of retaining stored data even when power is cut off. As mobile devices, for example, cellular phones, PDA digital cameras, portable game consoles, and MP3P are being used more, the flash memory device is used more widely as a code storage as well as a data storage. The flash memory device may also be applied to home applications, for example, HDTV, DVD, router and GPS. A computer system including the memory system of the present invention is depicted briefly in <figref idref="DRAWINGS">FIG. 41</figref>. The computing system <b>3300</b> of the present invention includes a CPU <b>3330</b> connected electrically to a system bus <b>3700</b>, a user interface <b>3340</b>, a modem <b>3320</b> for example a baseband chipset, a memory controller <b>3310</b> and a flash memory device <b>3360</b>. The memory controller <b>3310</b> controls the flash memory device <b>3360</b>. In the flash memory device <b>3360</b>, an N-bit data (N is a positive number higher than or equal to 1) processed or to be processed by the CPU <b>3330</b>, is to be stored by the memory controller <b>3310</b>. In case the computing system according to the present invention is a mobile device, a battery <b>3350</b> for supplying operation voltage of the computing system is further provided. Although not shown in drawing, it will be obvious to a person in the art that the computing system of the present invention may further include an application chipset, a camera image processor (CIS), or a mobile DRAM. The memory controller <b>3310</b> and the flash memory device <b>3360</b>, for example, may further include a solid state drive/disk (SSD) using a nonvolatile memory, to store data. An example of SSD is described in the U.S. Patent No. 2006-0152981 which is hereby incorporated by reference in its entirety. Also, the memory controller <b>3310</b> and the flash memory device <b>3360</b> may include the nonvolatile memory in the memory card, to store data.</p>
<p id="p-0349" num="0348"><figref idref="DRAWINGS">FIG. 42</figref> is a block diagram illustrating memory-based storage device according to other exemplary embodiment of the present invention.</p>
<p id="p-0350" num="0349">The memory-based storage device <b>3400</b> depicted in <figref idref="DRAWINGS">FIG. 42</figref> is configured so that the memory <b>3420</b> and the memory controller <b>3410</b> constitute a memory card. The memory-based storage device <b>3400</b> may be a memory card, for example, a flash memory card. In other words, the memory-based storage device <b>3400</b> may be a memory card that conforms to an industrial standard so as to use an electronic device, for example, a personal computer. The memory controller <b>3410</b> may control the memory <b>3420</b> based on control signals received from another device (e.g. an external device) by the memory-based storage device <b>3400</b>.</p>
<p id="p-0351" num="0350">A flash memory system according to a third embodiment of the present invention may achieve speed-up by means of a microcode. In addition, the flash memory system according to the third embodiment of the present invention may achieve high data reliability by means of a temperature sensor as well as the microcode. A flash memory system including a temperature sensor will be described in detail in fourth embodiment.</p>
<p id="p-0352" num="0351">The flash memory system according to the third embodiment of the present invention may achieve high performance by ensuring reliability of LSB data as well as the microcode. A flash memory system ensuring reliability of LSB data will be described in detail in fifth embodiment.</p>
<p id="p-0353" num="0352">The flash memory system according to the third embodiment of the present invention may achieve high data reliability by means of read count data or read history as well as the microcode. A flash memory system achieving high data reliability by means of read count data or read history will be described in detail in sixth and seventh embodiments, respectively.</p>
<p id="p-0354" num="0353">The flash memory system according to the third embodiment of the present invention may achieve speed-up by means of the microcode and high data reliability by means of various manners which will be described below in detail. Performance of the flash memory system according to the third embodiment of the present invention may be improved through achievement of speed-up and high data reliability.</p>
<p id="h-0013" num="0000">II. Data Reliability of Flash Memory System</p>
<heading id="h-0014" level="1">Embodiment 4</heading>
<heading id="h-0015" level="1">Flash Memory System Including Temperature Sensor</heading>
<p id="p-0355" num="0354">Generally, a memory system includes a semiconductor memory for storing data and a memory controller for controlling an operation of the semiconductor memory. The semiconductor memory devices are classified into volatile memories such as DRAM, SRAM, and so on, and nonvolatile memories such as EEPROM, FRAM, PRAM, MRAM, flash memory, and so on. The volatile memory loses its data when power is interrupted, but the nonvolatile memory reserves its data even if power is interrupted. Among the nonvolatile memories, the flash memory is widely used as a data storage media on the merits of high programming speed, low power consumption, large-capacity data storage, and so forth.</p>
<p id="p-0356" num="0355">The flash memory has pluralities of memory cells for storing data. Each memory cell stores single bit data or multi-bit data. A memory cell storing single bit data has two levels (or states) by threshold voltage distributions. A memory cell storing multi-bit data has four or more levels (or states) by threshold voltage distributions.</p>
<p id="p-0357" num="0356">The flash memory programs data therein with predetermined margins between levels (or states). This is for the purpose of preventing data from read fails when a threshold voltage distribution of memory cells is changes by external environment. Generally, a threshold voltage of memory cell would be changed by external environment such as temperature, humidity, pressure, electromagnetic power. For example, the threshold voltage may be changed when programming the flash memory cell under high and low temperature or when reading the flash memory cell under high and low temperature.</p>
<p id="p-0358" num="0357">As such, a memory cell of the flash memory may have threshold voltages varying based on external temperature. This temperature property of the flash memory cell would be more problematic when storing multi-bit data in a memory cell. As more bits are stored in a single memory cell, a read margin becomes smaller. With a smaller read margin, if a threshold voltage of memory cell is changed, it further raises a probability of generating a read fail.</p>
<p id="p-0359" num="0358"><figref idref="DRAWINGS">FIG. 43</figref> is a block diagram exemplarily showing an embodiment of a memory system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 43</figref>, the memory system <b>4100</b> includes a flash memory <b>4110</b> and a memory controller <b>4120</b>. The memory system <b>4100</b> according to the present invention is able to trim a level of a bias voltage (e.g., read or verifying voltage) of the flash memory <b>4110</b> by temperature variation.</p>
<p id="p-0360" num="0359">The flash memory <b>4110</b> conducts an erasing, writing, or reading operation in accordance with control of the memory controller <b>4120</b>. The flash memory <b>4110</b> includes pluralities of memory cells able to store data. The memory cells of the flash memory <b>4110</b> are variable in threshold voltage by temperature. In other words, threshold voltages of the memory cells are variable while programming the same data under low and high temperature. If the threshold voltages of the memory cells change by temperature, a bit error could be inadvertently generated during the reading operation.</p>
<p id="p-0361" num="0360">The flash memory <b>4110</b> is able to store data (hereinafter, referred to as &#x2018;compensation data&#x2019;) for compensating a threshold voltage change of the memory cells. The compensation data <b>4105</b> can be stored in a specific area of the memory cells in a stage of fabricating the flash memory <b>4110</b>. The memory cells are capable of storing single bit data or multi-bit data.</p>
<p id="p-0362" num="0361">A memory cell storing single bit data has two levels of threshold voltage distribution. This memory cell is called single level cell (SLC). A memory cell storing multi-bit data has four or more levels of threshold voltage distribution. This memory cell is called multi-level cell (MLC). The flash memory <b>4110</b> shown in <figref idref="DRAWINGS">FIG. 43</figref> may include a single level cells or a multi-level cells, or a combination.</p>
<p id="p-0363" num="0362">Table 1 exemplarily shows the compensation data of a SLC flash memory.</p>
<p id="p-0364" num="0363">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="84pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="3" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>Temperature (&#xb0; C.)</entry>
<entry>Vrd0 (V)</entry>
<entry>Vvf (V)</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>80~90</entry>
<entry>R0</entry>
<entry>F0</entry>
</row>
<row>
<entry>60~80</entry>
<entry>R0 + 0.05</entry>
<entry>F0 + 0.05</entry>
</row>
<row>
<entry>40~60</entry>
<entry>R0 + 0.10</entry>
<entry>F0 + 0.10</entry>
</row>
<row>
<entry>20~40</entry>
<entry>R0 + 0.15</entry>
<entry>F0 + 0.15</entry>
</row>
<row>
<entry>&#x2002;0~20</entry>
<entry>R0 + 0.20</entry>
<entry>F0 + 0.20</entry>
</row>
<row>
<entry>&#x2212;20~0&#x2002;&#x2009;&#x2009;</entry>
<entry>R0 + 0.25</entry>
<entry>F0 + 0.25</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0365" num="0364">In Table 1, Vrd<b>0</b> is a read voltage applied to a selected word line during the reading operation and Vvf<b>0</b> is a verifying voltage applied to a selected word line during a program-verifying operation. In 80&#x2dc;90&#xb0; C., the read voltage is R<b>0</b> and the verifying voltage is F<b>0</b>. As will be appreciated, R<b>0</b> and F<b>0</b> will vary by design. A threshold voltage of memory cell varies by temperature. To compensate a threshold voltage change by temperature variation, the read or verifying voltage is differently set in accordance with temperature as shown in Table 1.</p>
<p id="p-0366" num="0365">For example, as shown in Table 1, in the temperature range of 60&#x2dc;80&#xb0; C., the read voltage is set to R<b>0</b>+0.05 and the verifying voltage is set to F<b>0</b>+0.05. In the temperature boundary of 40&#x2dc;60&#xb0; C., the read voltage is set to R<b>0</b>+0.10 and the verifying voltage is set to F<b>0</b>+0.10. In Table 1, intervals of the temperature range are set to 20&#xb0; C., and an increment of the read and verifying voltages is set to 0.05V by the temperature boundary. But, it will be appreciated that the intervals, increments and ranges of the temperature boundary, the read voltage, and the verifying voltage may be variously set different from Table 1.</p>
<p id="p-0367" num="0366">Table 2 exemplarily shows compensation data of an MLC flash memory.</p>
<p id="p-0368" num="0367">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="7">
<colspec colname="1" colwidth="49pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="35pt" align="center"/>
<colspec colname="4" colwidth="35pt" align="center"/>
<colspec colname="5" colwidth="35pt" align="center"/>
<colspec colname="6" colwidth="35pt" align="center"/>
<colspec colname="7" colwidth="35pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="7" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="7" align="center" rowsep="1"/>
</row>
<row>
<entry>Temp. (&#xb0; C.)</entry>
<entry>Vrd1 (V)</entry>
<entry>Vrd2 (V)</entry>
<entry>Vrd3 (V)</entry>
<entry>Vvf1 (V)</entry>
<entry>Vvf2 (V)</entry>
<entry>Vvf3 (V)</entry>
</row>
<row>
<entry namest="1" nameend="7" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>80~90</entry>
<entry>R1</entry>
<entry>R2</entry>
<entry>R3</entry>
<entry>F1</entry>
<entry>F2</entry>
<entry>F3</entry>
</row>
<row>
<entry>60~80</entry>
<entry>R0 + 0.05</entry>
<entry>R0 + 0.05</entry>
<entry>R0 + 0.05</entry>
<entry>F0 + 0.05</entry>
<entry>F0 + 0.05</entry>
<entry>F0 + 0.05</entry>
</row>
<row>
<entry>40~60</entry>
<entry>R0 + 0.10</entry>
<entry>R0 + 0.10</entry>
<entry>R0 + 0.10</entry>
<entry>F0 + 0.10</entry>
<entry>F0 + 0.10</entry>
<entry>F0 + 0.10</entry>
</row>
<row>
<entry>20~40</entry>
<entry>R0 + 0.15</entry>
<entry>R0 + 0.15</entry>
<entry>R0 + 0.15</entry>
<entry>F0 + 0.15</entry>
<entry>F0 + 0.15</entry>
<entry>F0 + 0.15</entry>
</row>
<row>
<entry>&#x2002;0~20</entry>
<entry>R0 + 0.20</entry>
<entry>R0 + 0.20</entry>
<entry>R0 + 0.20</entry>
<entry>F0 + 0.20</entry>
<entry>F0 + 0.20</entry>
<entry>F0 + 0.20</entry>
</row>
<row>
<entry>&#x2212;20~0&#x2003;</entry>
<entry>R0 + 0.25</entry>
<entry>R0 + 0.25</entry>
<entry>R0 + 0.25</entry>
<entry>F0 + 0.25</entry>
<entry>F0 + 0.25</entry>
<entry>F0 + 0.25</entry>
</row>
<row>
<entry namest="1" nameend="7" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0369" num="0368">In Table 2, Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> are read voltages applied to a selected word line during the reading operation, and Vvf<b>1</b>, Vvf<b>2</b>, and Vvf<b>3</b> are verifying voltages applied to a selected word line during the program-verifying operation. In 80&#x2dc;90&#xb0; C., the read voltage is set to R<b>1</b>, R<b>2</b>, and R<b>3</b> and the verifying voltage is set to F<b>1</b>, F<b>2</b>, and F<b>3</b>. Again, these values will vary by design. To compensate a threshold voltage change by temperature variation, the read or verifying voltage is differently set in accordance with temperature as shown in Table 2. It will be appreciated that the intervals, increments and ranges of the temperature boundary, the read voltage, and the verifying voltage may be variously set different from Table 2.</p>
<p id="p-0370" num="0369">The memory system <b>4100</b> according to the present invention stores the compensation data as like Tables 1 and 2, and trims threshold voltage compensation values of the flash memory in accordance with the compensation data. For instance, if current temperature is 25&#xb0; C., the memory system <b>4100</b> sets the read voltage of the flash memory to R<b>0</b>+0.15, R<b>1</b>+0.15, R<b>2</b>+0.15, and R<b>3</b>+0.15 and sets the verifying voltage to F<b>0</b>+0.15, F<b>1</b>+0.15, F<b>2</b>+0.15, and F<b>3</b>+0.15 in accordance with the compensation data. These compensation data may be stored in the flash memory <b>4110</b> as shown in <figref idref="DRAWINGS">FIG. 43</figref>, a ROM of the memory controller <b>4120</b>, or another storage medium.</p>
<p id="p-0371" num="0370">Continuously referring to <figref idref="DRAWINGS">FIG. 43</figref>, the memory controller <b>4120</b> includes a memory interface <b>4121</b>, a memory interface <b>4121</b>, an ECC circuit <b>4123</b>, a central processing unit (CPU) <b>4124</b>, a random access memory (RAM) <b>4125</b>, and a temperature sensor <b>4126</b>. The memory controller <b>4120</b> senses temperature variation of the flash memory <b>4110</b> and trims threshold voltages of the flash memory <b>4110</b> in accordance with the compensation data stored in the flash memory <b>4110</b>.</p>
<p id="p-0372" num="0371">The memory interface <b>4121</b> is connected directly to the flash memory <b>4110</b> and used for directly exchanging a command, an address, and a control signal with the flash memory <b>4110</b>. That is, the memory interface <b>4121</b> provides a read command and address in the reading operation, and provides a writing command, an address, and data in the writing operation. The host interface <b>4122</b> is used for exchanging data with a host (not shown).</p>
<p id="p-0373" num="0372">The ECC circuit <b>4123</b> is used for analyzing or correcting a bit error of data stored in the flash memory <b>4100</b>. The central processing unit <b>4124</b> conducts an overall control operation for data exchange of the memory controller <b>4120</b>. The RAM <b>4125</b> is used as a working memory. Although not shown, the memory system <b>4100</b> may further include a ROM (not shown) storing code data for interfacing with a host.</p>
<p id="p-0374" num="0373">The temperature sensor <b>4126</b> compensates a threshold voltage change of the memory cells by sensing temperature variation of the flash memory <b>4110</b>. For this, the temperature sensor <b>4126</b> measures current temperature and sets a temperature boundary with reference to measured temperature. For instance, it is assumed that current temperature is 25&#xb0; C. and an interval of the temperature boundary is 20&#xb0; C. The temperature sensor <b>4126</b> sets the temperature boundary in which the lower limit is 15&#xb0; C. and the upper limit is 35&#xb0; C., referring to the current temperature 25&#xb0; C.</p>
<p id="p-0375" num="0374">The temperature sensor <b>4126</b> generates an event signal if measured temperature is out of the temperature boundary of 15&#xb0; C.&#x2dc;35&#xb0; C. in the programming or reading operation of the flash memory <b>4110</b>. And, the temperature sensor sets a new temperature boundary according to measured temperature. For example, if measured temperature is 10&#xb0; C. during the programming operation of the flash memory <b>4110</b>, the temperature sensor <b>4126</b> generates the event signal and sets the new temperature boundary with the lower limit 0&#xb0; C. and the upper limit 20&#xb0; C.</p>
<p id="p-0376" num="0375">The memory controller <b>4120</b> compensates a threshold voltage change of the flash memory <b>4110</b> in response to the event signal generated from the temperature sensor <b>4126</b>. The temperature sensor <b>4126</b> consumes tens milliseconds in measuring current temperature. Because of that, measuring temperature of the flash memory <b>4110</b> every programming or reading operation of the flash memory <b>4110</b> would result in functional degradation. The temperature sensor <b>4126</b> of the present invention preliminarily sets the temperature boundary in order to solve such a problem.</p>
<p id="p-0377" num="0376">If measured temperature is 15&#xb0; C., the temperature sensor <b>4126</b> sets a temperature boundary with the lower limit 5&#xb0; C. and the upper limit 25&#xb0; C. And, the temperature sensor <b>4126</b> generates the event signal only of measured temperature is out of the temperature boundary of 5&#xb0; C.&#x2dc;25&#xb0; C. And, the temperature sensor <b>4126</b> sets a new temperature boundary of 30&#xb0; C.&#x2dc;50&#xb0; C. on basis of current temperature (e.g., 40&#xb0; C.). In this time, the read and verifying voltages of the flash memory <b>4110</b> are set to R<b>0</b>+0.15, R<b>1</b>+0.15, R<b>2</b>+0.15, R<b>3</b>+0.15, F<b>0</b>+0.15, F<b>1</b>+0.15, F<b>2</b>+0.15, and F<b>3</b>+0.15 in accordance with the compensation data shown in Table 1 or 2.</p>
<p id="p-0378" num="0377">The memory system <b>4100</b> according to the present invention is able to reduce bit errors caused by change of threshold voltages of the memory cells by temperature variation. That is, the memory system <b>4100</b> according to present invention preliminarily compensates a threshold voltage change by temperature variation before the operation (reading or programming) of the flash memory <b>4110</b>. Hereinafter will be detailed internal organization of the flash memory <b>4110</b> and method for compensating threshold voltages.</p>
<p id="p-0379" num="0378"><figref idref="DRAWINGS">FIG. 44</figref> is a block diagram exemplarily showing the flash memory shown in <figref idref="DRAWINGS">FIG. 43</figref>. The flash memory <b>4110</b> includes a memory cell array <b>4111</b>, a data input/output circuit <b>4112</b>, a row decoder <b>4113</b>, and a control logic and high voltage generator <b>4114</b>.</p>
<p id="p-0380" num="0379">The memory cell array <b>4111</b> includes pluralities of memory blocks. Each memory block is formed of plural pages. Each page is formed of plural memory cells. Each memory cell is capable of storing single bit data or multi-bit data. The flash memory <b>4110</b> conducts the erasing operation in the unit of memory block, and conducts the writing or reading operation in the unit of page.</p>
<p id="p-0381" num="0380"><figref idref="DRAWINGS">FIG. 44</figref> shows a memory block. Referring to <figref idref="DRAWINGS">FIG. 44</figref>, the memory block includes a string selection transistor connected to a string selection line SSL, memory cells coupled to pluralities of word lines WL<b>0</b>&#x2dc;WL<b>31</b>, and a ground selection transistor connected to a ground selection line GSL. The string selection transistors are connected to bit lines BL<b>0</b>&#x2dc;BLm and the ground selection transistors are connected to a common source line CSL.</p>
<p id="p-0382" num="0381">The data input/output circuit <b>4112</b> is connected to the memory cell array <b>4111</b> by way of the plural bit lines BL<b>0</b>&#x2dc;BLm. The data input/output circuit <b>4112</b> inputs data DATA through a data input/output line (not shown). Input data is stored in a corresponding memory cell. In the meantime, the data input/output circuit <b>4112</b> reads data from the memory cell through the bit line BL. Read data is output to external through the data input/output line.</p>
<p id="p-0383" num="0382">The row decoder <b>4113</b> is connected to the memory cell array by way of the plural word lines WL<b>0</b>&#x2dc;WL<b>31</b>. The row decoder <b>4113</b> inputs an address ADDR and selects a memory block or page. Here, an address for selecting a memory block is called a block address and an address for selecting a page is called page address.</p>
<p id="p-0384" num="0383">The control logic and high voltage generator <b>4114</b> controls the data input/output circuit <b>4112</b> and the row decoder <b>4113</b> in response to a command CMD and a control signal CTRL. Here, the control signal CTRL is provided from the memory interface <b>4121</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>). Meanwhile, the control logic and high voltage generator <b>4114</b> generates bias voltages such as program voltage, read voltage, erasure voltage, and so on which are to be provided to the word lines.</p>
<p id="p-0385" num="0384">In the meantime, the control logic and high voltage generator <b>4114</b> includes a trim circuit for trimming a bias voltage such as the read voltage or the program-verifying voltage in response to an external sense signal (e.g., signal indicating sensed temperature). The trim circuit (not shown) is to trim a threshold voltage change when threshold voltages of the memory cells are changed due to temperature variation.</p>
<p id="p-0386" num="0385"><figref idref="DRAWINGS">FIG. 45</figref> is a diagram exemplarily showing threshold voltage distributions of the memory cells shown in <figref idref="DRAWINGS">FIG. 44</figref>. <figref idref="DRAWINGS">FIG. 45</figref> shows the threshold voltage distributions of the multi-level cells having four levels. The memory cell has one of the four states E, P<b>1</b>, P<b>2</b>, and P<b>3</b>.</p>
<p id="p-0387" num="0386">During the reading operation, the selective read voltage Vrd<b>1</b>, Vrd<b>2</b>, or Vrd<b>3</b> is provided to a selected word line WL<b>0</b> (refer to <figref idref="DRAWINGS">FIG. 44</figref>) and a deselective read voltage Vread is provided to unselected word lines WL<b>0</b>&#x2dc;WL<b>31</b> (refer to <figref idref="DRAWINGS">FIG. 44</figref>). The first selective read voltage Vrd<b>1</b> has a voltage level between the erased state E and the first programmed state P<b>1</b>. The second selective read voltage Vrd<b>2</b> has a voltage level between the first programmed state P<b>1</b> and the second programmed state P<b>2</b>. The third selective read voltage Vrd<b>3</b> has a voltage level between the second and third programmed states P<b>2</b> and P<b>3</b>.</p>
<p id="p-0388" num="0387">In the meantime, during the program-verifying operation, the program-verifying voltage Vvf<b>1</b>, Vvf<b>2</b>, or Vvf<b>3</b> is provided to a selected word line. The first program-verifying voltage Vvf<b>1</b> is a voltage for programming a memory cell into the first programmed state P<b>1</b>. The second program-verifying voltage Vvf<b>2</b> is a voltage for programming a memory cell into the second programmed state P<b>2</b>. The third program-verifying voltage Vvf<b>3</b> is a voltage for programming a memory cell into the third programmed state P<b>3</b>.</p>
<p id="p-0389" num="0388"><figref idref="DRAWINGS">FIG. 46</figref> is a diagram showing a threshold voltage change of memory cells by temperature variation. Referring to <figref idref="DRAWINGS">FIG. 46</figref>, the memory cells are distributed as like the solid lines of <figref idref="DRAWINGS">FIG. 46</figref> at room temperature.</p>
<p id="p-0390" num="0389">But if the memory cells are programmed at cold temperature lower than the room temperature, their threshold voltages are seen as shifting to left. In other words, when programming memory cells in the cold temperature, it lowers potential barriers to generate the FN tunneling effect of the memory cells. And, channel electrons much more move to a floating gate of the memory cell. In this case, a channel can be easily formed therein even if a gate voltage of the memory cell is lower in the reading operation. For that reason, the threshold voltages of the memory cells are seen as shifting to left. Also, if the memory cells are programmed at hot temperature higher than the room temperature, their threshold voltages are seen as shifting to right.</p>
<p id="p-0391" num="0390">Programming the memory cells at the cold temperature and then conducting the reading operation at the room temperature, reduces a read margin of the flash memory. In <figref idref="DRAWINGS">FIG. 46</figref>, assuming the selective read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> are constant, if the threshold voltages of the memory cells shift to left, a read margin is reduced so much. Also, programming the memory cells at the hot temperature and then conducting the reading operation at the room temperature, reduces a read margin of the flash memory.</p>
<p id="p-0392" num="0391">Further, if the memory cells are programmed at the hot temperature and read at the cold temperature, or if the memory cells are programmed at the cold temperature and read at the hot temperature, it more reduces a read margin. When the flash memory is insufficiently secured of a read margin, it increases a probability of generating an ECC bit error. The present invention compensates a threshold voltage change by sensing temperature variation of the flash memory <b>4110</b> and trimming the program-verifying voltage or the read voltage in accordance with the compensation data. That is, the present invention shifts threshold voltage levels of the memory cells by varying the program-verifying voltage or the read voltage in accordance with temperature variation.</p>
<p id="p-0393" num="0392"><figref idref="DRAWINGS">FIG. 47</figref> is a flow chart showing a procedure for initializing the temperature sensor shown in <figref idref="DRAWINGS">FIG. 43</figref>. <figref idref="DRAWINGS">FIG. 47</figref> shows the procedure for initializing the temperature when the memory system <b>4100</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>) is powered on. In a step S<b>4110</b>, the memory system <b>4100</b> is powered on. In a step S<b>4120</b>, the temperature sensor <b>4126</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>) is initialized when the memory system <b>4100</b> is powered on. And in a step S<b>4140</b>, it measures current temperature of the initializing procedure. In a step S<b>4140</b>, it sets the temperature boundary with reference to the measured temperature. Here, setting the temperature boundary is for the purpose of generating the event signal in accordance with temperature variation.</p>
<p id="p-0394" num="0393"><figref idref="DRAWINGS">FIG. 48</figref> is a flow chart showing a verifying-voltage trimming method of the memory system shown in <figref idref="DRAWINGS">FIG. 43</figref>. <figref idref="DRAWINGS">FIG. 48</figref> shows a procedure for trimming the verifying voltage in correspondence with temperature variation during the programming operation.</p>
<p id="p-0395" num="0394">In a step S<b>4210</b>, a program command is provided to the flash memory <b>4110</b>. The flash memory <b>4110</b> begins the programming operation in response to the program command. Before internally executing the programming operation, the flash memory <b>4110</b> determines whether the temperature sensor <b>4126</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>) generates the event signal.</p>
<p id="p-0396" num="0395">In a step S<b>4220</b>, it determines whether the event signal is generated. A condition that there is no generation of the event signal means that temperature variation of the flash memory <b>4110</b> is ranged within the temperature boundary. Unless the temperature sensor generates the event signal, the flash memory <b>4110</b> conducts the programming operation normally without trimming the verifying voltage. To the contrary, if the event signal is generated, it means that temperature variation is out of the current temperature boundary. Accordingly, it is desirable to trim or compensate the program-verifying voltage in order to reduce ECC bit errors by temperature variation.</p>
<p id="p-0397" num="0396">In a step S<b>4230</b>, the temperature sensor <b>4126</b> measures current temperature. Here, the temperature sensor <b>4126</b> measures current temperature not during all of the programming operations but only when the event signal is generated. This is for the purpose of preventing the memory system from experiencing functional degradation caused by frequent temperature sensing.</p>
<p id="p-0398" num="0397">In a step S<b>4240</b>, the flash memory <b>4110</b> trims the program-verifying voltage. The memory system <b>4100</b> reads the compensation data with reference to the current temperature measured by the step S<b>4230</b>. Here, the compensation data are stored in the ransom access memory <b>4125</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>). The compensation data are loaded into the random access memory <b>4125</b> from the flash memory <b>4110</b>. The flash memory <b>4110</b> trims the program-verifying voltage in accordance with the compensation data.</p>
<p id="p-0399" num="0398">In a step S<b>4250</b>, the temperature sensor <b>4126</b> sets a new temperature boundary with reference to the temperature measured by the step S<b>4230</b>. And in a step S<b>4260</b>, the flash memory <b>4110</b> conducts the programming operation by using the trimmed verifying voltage. The verifying-voltage trimming method of the memory system according to the present invention compensates a threshold voltage change of the memory cells, which is caused by temperature variation, in response to the event signal generated from the temperature sensor. The flash memory <b>4110</b> will continue to use the trimmed or compensated voltages as the current voltages until another event signal is received.</p>
<p id="p-0400" num="0399"><figref idref="DRAWINGS">FIG. 49</figref> is a flow chart showing a read-voltage trimming method of the memory system shown in <figref idref="DRAWINGS">FIG. 43</figref>. <figref idref="DRAWINGS">FIG. 49</figref> shows a procedure for trimming the read voltage in correspondence with temperature variation during the reading operation.</p>
<p id="p-0401" num="0400">In a step S<b>4310</b>, a read command is provided to the flash memory <b>4110</b>. The flash memory <b>4110</b> begins the reading operation in response to the read command. Before internally executing the reading operation, the flash memory <b>4110</b> determines whether the temperature sensor <b>4126</b> (refer to <figref idref="DRAWINGS">FIG. 43</figref>) generates the event signal.</p>
<p id="p-0402" num="0401">In a step S<b>4220</b>, it determines whether the event signal is generated. Unless the temperature sensor generates the event signal, the flash memory <b>4110</b> conducts the reading operation normally without trimming the read voltage. To the contrary, if the event signal is generated, it is desirable to trim the read voltage in order to reduce ECC bit errors by temperature variation.</p>
<p id="p-0403" num="0402">In a step S<b>4230</b>, the temperature sensor <b>4126</b> measures current temperature. Here, the temperature sensor <b>4126</b> measures current temperature not during all of the reading operations but only when the event signal is generated. This is for the purpose of preventing the memory system from functional degradation caused by frequent temperature sensing.</p>
<p id="p-0404" num="0403">In a step S<b>4240</b>, the flash memory <b>4110</b> trims the read voltage. The memory system <b>4100</b> reads the compensation data with reference to the current temperature measured by the step S<b>4230</b>. The flash memory <b>4110</b> trims the read voltage in accordance with the compensation data.</p>
<p id="p-0405" num="0404">In a step S<b>4250</b>, the temperature sensor <b>4126</b> sets a new temperature boundary with reference to the temperature measured by the step S<b>4230</b>. And in a step S<b>4260</b>, the flash memory <b>4110</b> conducts the reading operation by using the trimmed verifying voltage. The verifying-voltage trimming method of the memory system according to the present invention compensates a threshold voltage change of the memory cells, which is caused by temperature variation, in response to the event signal generated from the temperature sensor. The flash memory <b>4110</b> will continue to use the trimmed or compensated voltages as the current voltages until another event signal is received.</p>
<p id="p-0406" num="0405"><figref idref="DRAWINGS">FIGS. 50 through 54</figref> are block diagrams showing various embodiments of the memory system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 50</figref>, the memory system <b>4200</b> communicates with a host <b>4201</b>. The memory system <b>4200</b> includes a flash memory <b>4210</b> and a memory controller <b>4220</b>. The memory controller <b>4220</b> includes a temperature sensor <b>4230</b>. The temperature sensor <b>4230</b> senses temperature variation of the flash memory <b>4210</b>.</p>
<p id="p-0407" num="0406">The memory controller <b>4220</b> analyzes temperature variation sensed by the temperature <b>4230</b> and provides a sensing signal SENS to the flash memory <b>4210</b>. Here, the sensing signal SENS may be a command, data, or a control signal provided to the flash memory <b>4210</b> from the memory controller <b>4220</b>. The flash memory <b>4210</b> trims the program-verifying voltage or the read voltage in response to the sensing signal SENS.</p>
<p id="p-0408" num="0407">Referring to <figref idref="DRAWINGS">FIG. 51</figref>, the memory system <b>4300</b> communicates with a host <b>4301</b>. The memory system <b>300</b> includes a flash memory <b>4310</b>, a memory controller <b>4320</b>, and a temperature sensor <b>4330</b>. The temperature sensor <b>4330</b> is located out of the memory controller <b>4320</b>. The temperature sensor <b>4330</b> senses temperature variation of the flash memory <b>4310</b>. The memory controller <b>4320</b> analyzes temperature variation sensed by the temperature sensor <b>4330</b> and provides the sensing signal SENS to the flash memory <b>4310</b>. The flash memory <b>4310</b> trims the program voltage or read voltage in response to the sensing signal SENS.</p>
<p id="p-0409" num="0408">Referring to <figref idref="DRAWINGS">FIG. 52</figref>, a memory system <b>4400</b> communicates with a host <b>4401</b>. The memory system <b>4400</b> includes a flash memory <b>4410</b>, a memory controller <b>4420</b>, and a buffer memory <b>4450</b>. The buffer memory <b>4450</b> includes a temperature sensor <b>4430</b>. Here, the buffer memory <b>4450</b> includes a volatile memory such as DRAM, mobile DRAM, or SRAM, or a nonvolatile memory such as flash memory, PRAM, MRAM, or EEPROM.</p>
<p id="p-0410" num="0409">The temperature sensor <b>4430</b> senses temperature variation of the flash memory <b>4410</b>. The memory controller <b>4420</b> analyzes temperature variation sensed by the temperature sensor <b>4430</b> and provides the sensing signal SENS to the flash memory <b>4410</b>. The flash memory <b>4410</b> trims the program voltage or read voltage in response to the sensing signal SENS.</p>
<p id="p-0411" num="0410">Referring to <figref idref="DRAWINGS">FIG. 53</figref>, a memory system <b>4500</b> communicates with a host <b>4501</b>. The memory system <b>4500</b> includes a flash memory <b>4510</b> and a memory controller <b>4520</b>. A nonvolatile memory NVM includes a flash memory, PRAM, MRAM, or EEPROM. The memory controller <b>4520</b> includes a temperature sensor <b>4530</b>. The temperature sensor <b>4530</b> senses temperature variation of the nonvolatile memory <b>4510</b>. The memory controller <b>4520</b> analyzes temperature variation sensed by the temperature sensor <b>4530</b> and provides the sensing signal SENS to the nonvolatile memory <b>4510</b>. The nonvolatile memory <b>4510</b> trims the program voltage or read voltage in response to the sensing signal SENS.</p>
<p id="p-0412" num="0411"><figref idref="DRAWINGS">FIG. 54</figref> is a flow chart showing a method for securing data reliability of the flash memory. <figref idref="DRAWINGS">FIG. 54</figref> shows another method of curing a bit error by threshold voltage change of memory cells. The flash memory may be experiencing a bit error due to program or read disturbance, besides the bit errors caused by temperature variation.</p>
<p id="p-0413" num="0412">The flash memory uses an ECC circuit for curing such bit errors. But a range capable of curing the bit error is no more than a desired (or, alternatively predetermined) bit number. For instance, in the case that the ECC circuit is able to cure a 4-bit error, it is not further practicable to cure more bits than 4 bits. <figref idref="DRAWINGS">FIG. 54</figref> shows the method for repairing such error bits in the above case.</p>
<p id="p-0414" num="0413">In a step S<b>4410</b>, the ECC circuit determines whether it is possible to correct bit errors. From the above case, if the number of error bits is more than four bits, they are incorrectable errors. If the number of error bits is less than four bits, they are correctable errors. If it is able to correct bit errors, the ECC circuit is used for correcting the bit errors. Being unable to correct bit errors, the ECC circuit changes a level of the read voltage Vrd and conducts the operation of error detection and correction.</p>
<p id="p-0415" num="0414">In a step S<b>4420</b>, the flash memory changes the first read voltage Vrd<b>1</b> and then conducts the error detection and correction operation. In the flash memory cell, it would be generated that erased memory cells are over-programmed due to program or read disturbance on the cell string architecture. In this time, as shown in <figref idref="DRAWINGS">FIG. 45</figref>, if the reading operation is carried out with the first read voltage Vrd<b>1</b>, the over-programmed memory cells can be partly read as off-cells. If the over-programmed memory cells are conditioned out of the ECC correction capability, there is no way of recovery by a conventional method. The present invention conducts the error detection and correction operation by increasing the first read voltage Vrd<b>1</b> by an incremental voltage level so as to make the over-programmed memory cells read as on-cells.</p>
<p id="p-0416" num="0415">In a step S<b>4430</b>, after changing the first read voltage Vrd<b>1</b>, the ECC circuit determines whether there is a bit error. If there is a correctable bit error, the procedure for curing bit errors is terminated. But if there is an uncorrectable bit error, the first read voltage Vrd<b>1</b> is changed again. In a step S<b>4440</b>, the ECC circuit determines whether the number of ECC loops is M (M is a natural number).</p>
<p id="p-0417" num="0416">In a step <b>4450</b>, if the ECC loops are repeated times, the ECC circuit changes the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b>, and conducts the error detection and correction operation. Here, levels of the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> can be alternately changed as like +a, &#x2212;a, +b, and &#x2212;b (a, b are natural numbers). This is because it is not possible to know whether the threshold voltages of the memory cells have been shifted to left or right.</p>
<p id="p-0418" num="0417">In a step S<b>4460</b>, after changing the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b>, it determines whether there is a bit error. If there is a correctable bit error, the procedure for curing bit errors is terminated. But if there is uncorrectable bit error, the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> are changed again. In a step S<b>4470</b>, it determines whether the number of ECC loops is M (M is a natural number). The memory system according to the present invention is able to cure bit errors caused by other reasons besides temperature variation.</p>
<p id="p-0419" num="0418">After the procedure for repairing data, the present invention makes the read voltage level to the original state. In a step S<b>4480</b>, it determines whether the aforementioned temperature sensor is being used or not. If the temperature sensor is being used, a step S<b>4490</b> is carried out. If the temperature sensor is not being used, a step S<b>4495</b> is carried out.</p>
<p id="p-0420" num="0419">The step S<b>4490</b> includes a step of measuring current temperature by means of the temperature sensor (S<b>4491</b>), a step of trimming the read voltage in accordance with the compensation data with reference to the measured temperature (S<b>4492</b>), and a step of setting a new temperature boundary for the next event on the measured temperature (S<b>4493</b>). The first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> which are changed in the previous step are reset.</p>
<p id="p-0421" num="0420">The memory system according to the present invention may be implemented in a unit product of flash memory, one-NAND flash memory, a semiconductor disk drive (SSD), a memory card, or so forth. If the present invention is applied to a memory card, the flash memory and the memory controller are integrated on a single card. This memory card includes a multimedia card (MMC), an SD card, an XD card, a CF card, a SIM card, or so on. The memory system according to the present invention can be used in a computer, a notebook, a mobile phone, an MP3 player, a PMP, an application chipset, a camera image processor, or so forth.</p>
<p id="p-0422" num="0421">A flash memory system according to a fourth embodiment of the present invention may achieve high data reliability by means of a temperature sensor as well as the multi-thread function. In addition, the flash memory system according to the fourth embodiment of the present invention may achieve speed-up by means of the multi-thread function described in the first embodiment, the free page described in the second embodiment, and the microcode described in the third embodiment as well as the temperature sensor. Performance of the flash memory system according to the fourth embodiment of the present invention may be improved through achievement of high data reliability and speed-up.</p>
<heading id="h-0016" level="1">Embodiment 5</heading>
<heading id="h-0017" level="1">Flash Memory System Repairing LSB Data</heading>
<p id="p-0423" num="0422">As discussed previously, in recent years apparatuses employing nonvolatile memories are increasingly used. For example, MP3 players, digital cameras, portable telephones, camcorders, flash memory cards, and solid state drives (SSDs) employ nonvolatile memories as storage devices.</p>
<p id="p-0424" num="0423">There are flash memory devices as kinds of nonvolatile memory devices. Generally, flash memory device are known as electrically programmable and erasable nonvolatile memory devices. Recently requiring large capacity or high frequency characteristics in applications such as large scale storage units or code memories for mobile apparatuses, they are much interesting in flash memories. Flash memory devices can be classified into NAND and NOR types.</p>
<p id="p-0425" num="0424">A NAND flash memory includes an array of memory cells composed of floating gate transistors. The memory cell array includes pluralities of memory blocks. Each memory block includes strings (or called &#x201c;NAND string&#x201d;) of floating gate transistors. Each string is formed of a string selection transistor, a ground selection transistor, and pluralities of memory cells connected between the string and ground selection transistors. Pluralities of word lines are arranged on the cell array, intersecting the strings. Each word line is connected to a control gate of a corresponding cell transistor of each string.</p>
<p id="p-0426" num="0425">A cell array of a NOR flash memory device has a structure where pluralities of memory cells are arranged in parallel to a bit line. Compared to the NAND flash memories, the NOR flash memory devices are widely used in the fields requiring high speed because they are operating with high frequency in programming and reading operations. But the NOR flash memory devices are more disadvantageous to a degree of integration than the NAND flash memories.</p>
<p id="p-0427" num="0426">As a proposal to overcome the limit of storage capacity, normally is adopted a multi-level cell (hereinafter referred to as &#x2018;MLC&#x2019;). An MLC structure conquers the physical limit of integration by storing plural bits in a unit memory cell.</p>
<p id="p-0428" num="0427"><figref idref="DRAWINGS">FIG. 55</figref> is a diagram showing threshold voltage distributions of multi-level cells each storing 2 bits (a most significant bit MSB and a least significant bit LSB), and data values corresponding to the distributions in a memory such a NAND flash memory. Referring to <figref idref="DRAWINGS">FIG. 55</figref>, data values of multi-level cells are correspondent with &#x2018;11&#x2019;, &#x2018;01&#x2019;, &#x2018;10&#x2019;, and &#x2018;00&#x2019; in order from the lowest state of threshold voltages. Generally, the state &#x2018;11&#x2019; is an erased state. A programming operation begins from the erased state &#x2018;11&#x2019;.</p>
<p id="p-0429" num="0428">A memory cell is programmed to have one of four states &#x2018;11&#x2019;, &#x2018;01&#x2019;, &#x2018;10&#x2019;, and &#x2018;00&#x2019; in accordance with threshold voltage distributions. First, it describes a procedure of programming the least significant bit (LSB) will be described. According to the LSB data, a threshold voltage of the memory cell maintains the erased state or changes to the state <b>10</b>&#x2032;. For instance, if the LSB is &#x2018;1&#x2019;, a threshold voltage of the memory cell maintains the erased state. If the LSB is &#x2018;0&#x2019;, a threshold voltage of the memory cell increases to the state <b>10</b>&#x2032; shown in dashed lines in <figref idref="DRAWINGS">FIG. 55</figref>.</p>
<p id="p-0430" num="0429">Next, the most significant bit (MSB) is programmed. A memory cells having the state <b>10</b>&#x2032; is programmed to be in the state &#x2018;00&#x2019;, or programmed to be in the state &#x2018;10&#x2019;, according to the MSB. For instance, the memory cell having the state <b>10</b>&#x2032; is programmed into the state &#x2018;00&#x2019; if the MSB is &#x2018;0&#x2019;, or programmed into the state &#x2018;10&#x2019; if the MSB is &#x2018;1&#x2019;. On the other hand, a memory cell having the state &#x2018;11&#x2019; maintains the state &#x2018;11&#x2019;, or is programmed into the state &#x2018;01&#x2019;, according to the MSB. For instance, the memory cell having the state &#x2018;11&#x2019; is programmed to be in the state &#x2018;01&#x2019; if the MSB is &#x2018;0&#x2019;, or maintains the state &#x2018;11&#x2019; if the MSB is &#x2018;1&#x2019;. Through such a manner, multi-bit data are programmed in a memory cell. In other words, the LSB is first programmed in a memory cell and then the MSB is programmed into the memory cell in which the LSB has been programmed.</p>
<p id="p-0431" num="0430">However, while programming the MSB into a memory cell in which the LSB has been programmed, there would be generated a program fail. For example, a program fail occurs if there is power failure while programming the MSB. Or, a program fail may occur by a defect of a memory cell. If there is a program fail while programming the MSB, the LSB already programmed is affected therefrom. This problem is called &#x2018;bit coupling&#x2019;.</p>
<p id="p-0432" num="0431"><figref idref="DRAWINGS">FIG. 56</figref> is a diagram showing a memory system according to an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 56</figref>, the memory system <b>5000</b> according to the present invention is comprised of a host <b>5010</b>, a memory controller <b>5020</b>, and a flash memory <b>5030</b>.</p>
<p id="p-0433" num="0432">The memory controller <b>5020</b> includes a buffer memory <b>5021</b>. The flash memory <b>5030</b> includes a cell array <b>5031</b> and a page buffer <b>5032</b>. Although not shown in <figref idref="DRAWINGS">FIG. 56</figref>, the flash memory <b>5030</b> also includes a decoder, a data buffer, and a control unit.</p>
<p id="p-0434" num="0433">The memory controller <b>5020</b> receives data and a writing command which are input from the host <b>5010</b>, and controls the flash memory <b>5030</b> to write data into the cell array <b>5031</b>. Further, the memory controller <b>5020</b> controls the flash memory <b>5030</b> to read data from the cell array <b>5031</b> in compliance with a read command input from the host <b>5010</b>.</p>
<p id="p-0435" num="0434">The buffer memory <b>5021</b> temporarily stores data to be written into the flash memory <b>5030</b> or data read from the flash memory <b>5030</b>. The buffer memory <b>5021</b> transfers temporary data therefrom to the host <b>5010</b> or the flash memory <b>5030</b> by control of the memory controller <b>5020</b>.</p>
<p id="p-0436" num="0435">The cell array <b>5030</b> of the flash memory <b>5030</b> is formed of plural memory cells. The memory cells are nonvolatile, from which data are not lost even if power is turned out after storing them therein. The page buffer <b>5032</b> is a buffer that stores data to be written into a selected page of the cell array <b>5031</b> or data read from a selected page of the cell array <b>5031</b>.</p>
<p id="p-0437" num="0436">The flash memory <b>5030</b> conducts the programming operation in the unit of page. The memory controller <b>5020</b>, during the programming operation, transfers data to the flash memory <b>5030</b> in the unit of page by means of the internal buffer memory <b>5021</b>. The page buffer <b>5032</b> temporarily stores data loaded from the buffer memory <b>5021</b> and programs the loaded data into a selected page at the same time. After programming, a program-verifying operation is carried out to check up whether data have been correctly programmed.</p>
<p id="p-0438" num="0437">From a result of program-verifying, if there is a program fail, the programming and program-verifying operations resume with incrementing a program voltage. After completing a programming with data of one page volume in this way, the programming operation is conducted by receiving the next data.</p>
<p id="p-0439" num="0438"><figref idref="DRAWINGS">FIG. 57</figref> is a flow chart for illustrating a programming method according to an embodiment of the present invention. In this embodiment, an MSB programming method is differently executed in accordance with reliability required therefor. There is a problem on reliability if previously programmed data is lost when it is programmed later. For that reason, the term &#x2018;reliability&#x2019; can be used as a meaning of protecting the previous data.</p>
<p id="p-0440" num="0439">Referring to <figref idref="DRAWINGS">FIG. 57</figref>, a request for programming is input from an external (e.g., a host) in a step S<b>5110</b>. If there is an input of request for programming, the memory controller <b>5020</b> finds LSB data of a memory cell to be programmed in a step S<b>5120</b>. In a step S<b>5130</b>, the memory controller <b>5020</b> or the flash memory <b>5030</b> (e.g., the control unit <b>5136</b> in <figref idref="DRAWINGS">FIG. 60</figref>) detects whether the LSB data is required to have high reliability. For instance, data such as personal information or password is required to have high reliability. If the LSB data is not required to have high reliability, it is programmed by a first programming method in a step S<b>5140</b>. To the contrary, if the LSB data is required to have high reliability, it is programmed by a second programming method in a step S<b>5150</b>.</p>
<p id="p-0441" num="0440">As aforementioned, in the embodiment according to the present invention, the first and second programming methods are alternatively adopted thereto in accordance with a degree of the reliability required therefrom. Adopting which one of the first and second programming methods may be determined by the memory controller <b>5020</b>. For example, the memory controller <b>5020</b> is able to control the flash memory <b>5030</b> to adopt the second programming method if LSB data stored in a memory cell to be programmed is required to have high reliability.</p>
<p id="p-0442" num="0441">Furthermore, adopting which one of the first and second programming methods may be determined by the flash memory <b>5030</b>. For instance, the flash memory <b>5030</b> is able to determine a programming method to be applied thereto with reference to an address of data to be stored therein. If an address to be stored is correspondent with a specific region of the memory cell array, the first programming method may be adopted thereto. If an address to be stored is correspondent with another region of the memory cell array, the second programming method may be adopted thereto. In this case, the conventional memory controller <b>5020</b> can be used without modification. Hereinafter, the first and second programming methods will be described with reference to the figures illustrated later.</p>
<p id="p-0443" num="0442"><figref idref="DRAWINGS">FIGS. 58A through 58C</figref> are diagrams showing the first programming method according to the present invention. <figref idref="DRAWINGS">FIG. 58A</figref> shows threshold voltage variation while programming LSB data. <figref idref="DRAWINGS">FIG. 58B</figref> shows threshold voltage variation while programming data to have the state &#x2018;00&#x2019;. <figref idref="DRAWINGS">FIG. 58C</figref> shows threshold voltage variation while programming data to have the states &#x2018;01&#x2019; and &#x2018;10&#x2019;.</p>
<p id="p-0444" num="0443">First, it will be described about a procedure of programming the LSB with reference to <figref idref="DRAWINGS">FIG. 58A</figref>. A memory cell having the state &#x2018;11&#x2019; (the erased state) is programmed to have the state <b>10</b>&#x2032; in accordance with the LSB data. For example, the memory cell maintains the state &#x2018;11&#x2019; if the LSB data is &#x2018;1&#x2019;. The memory cell transitions to the state <b>10</b>&#x2032; if the LSB data is &#x2018;0&#x2019;. During this, a verify-reading operation is carried out by using a verifying voltage Va. If threshold voltages of all memory cells having the LSB of &#x2018;0&#x2019; are higher than the verifying voltage, the programming operation is completed.</p>
<p id="p-0445" num="0444">Next, the memory controller transfers data of a page volume from the buffer memory to the flash memory in order to program the MSB. Referring to <figref idref="DRAWINGS">FIG. 58B</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;00&#x2019;. During this, the verify-reading operation is conducted by using a verifying voltage V<b>3</b>. If threshold voltages of all memory cells having the MSB of &#x2018;0&#x2019; are higher than the verifying voltage V<b>3</b>, the programming operation is completed.</p>
<p id="p-0446" num="0445">Referring to <figref idref="DRAWINGS">FIG. 58C</figref>, the MSB data is &#x2018;1&#x2019;, a memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;01&#x2019; and a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;10&#x2019;. During this, it detects whether a program pass succeeds or not by means of verifying voltages V<b>1</b> and V<b>2</b>. But, as aforementioned, there could be a program fail while programming the MSB into the memory cell in which the LSB has been programmed. If there is an error while programming the MSB, it may affect the LSB that has been already programmed in the memory cell.</p>
<p id="p-0447" num="0446">Therefore, in the embodiment of the present invention, the first programming method aforementioned is adopted thereto when not requiring high reliability, while the second programming method described later is adopted thereto when requiring high reliability. Adopting the second programming method described later, the LSB data is not lost even when there is a program fail while programming the MSB. As a result, the nonvolatile memory device is improved in reliability.</p>
<p id="p-0448" num="0447"><figref idref="DRAWINGS">FIGS. 59A through 59D</figref> are diagrams for illustrating the second programming method according to the present invention. <figref idref="DRAWINGS">FIGS. 59A through 59D</figref> show a procedure of programming the LSB and MSB, i.e., 2-bit data, into a memory cell. Different from the first programming method, the second programming method is carried out in the sequence from the state &#x2018;10&#x2032;&#x2019; to the state &#x2018;10&#x2019; and from the state &#x2018;11&#x2019; to the state &#x2018;01&#x2019;.</p>
<p id="p-0449" num="0448">Referring to <figref idref="DRAWINGS">FIG. 59A</figref>, first it will be described about a method for programming the LSB. A memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;11&#x2019; or 10&#x2032; in accordance with the LSB data. For instance, if the LSB data is &#x2018;1&#x2019;, the memory cell maintains the state &#x2018;11&#x2019;. If the LSB data is &#x2018;0&#x2019;, the memory cell goes to the state <b>10</b>&#x2032;. During this, the verify-reading operation is conducted by using the verifying voltage Va. If threshold voltages of all memory cells having the MSB of &#x2018;0&#x2019; are higher than the verifying voltage Va, the programming operation is completed.</p>
<p id="p-0450" num="0449">Next, the memory controller transfers data of a page volume from the buffer memory to the flash memory in order to program the MSB. Referring to <figref idref="DRAWINGS">FIG. 59B</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;00&#x2019;. During this, it detects a program pass by means of the verifying voltage V<b>3</b>. If threshold voltages of all memory cells having the MSB of &#x2018;0&#x2019; are higher than the verifying voltage V<b>3</b>, the programming operation is completed.</p>
<p id="p-0451" num="0450">Referring to <figref idref="DRAWINGS">FIG. 59C</figref>, if the MSB data is &#x2018;1&#x2019;, a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;10&#x2019;. During this, it detects a program pass by means of the verifying voltage V<b>2</b>. If threshold voltages of all memory cells having the MSB of &#x2018;1&#x2019; are higher than the verifying voltage V<b>2</b>, the programming operation is completed.</p>
<p id="p-0452" num="0451">Referring to <figref idref="DRAWINGS">FIG. 59D</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;01&#x2019;. During this, it detects a program pass by means of the verifying voltage V<b>1</b>. If threshold voltages of all memory cells having the MSB of &#x2018;0&#x2019; are higher than the verifying voltage V<b>1</b>, the programming operation is completed.</p>
<p id="p-0453" num="0452">Referring to <figref idref="DRAWINGS">FIGS. 59A through 59D</figref>, the programming stages respective to the states are carried out in sequence. Thus, it is able to detect where a program fail is generated. Further, as described later, it is possible to restore the LSB data if it finds a stage where program fail is generated.</p>
<p id="p-0454" num="0453">Which programming stage a program fail is generated in can be detected by various ways. The embodiments of the present invention will be described with relevance to a method using an error correction circuit and a method using a flag memory cell or a flag register. But, the present invention is not restricted thereto. It is also available to use other various ways in detecting a program fail stage.</p>
<p id="p-0455" num="0454"><figref idref="DRAWINGS">FIG. 60</figref> is a block diagram for illustrating a method of detecting a program fail stage in accordance with the present invention. Referring to <figref idref="DRAWINGS">FIG. 60</figref>, a memory system <b>5100</b> according to the present invention includes a host <b>5110</b>, a memory controller <b>5120</b>, and a flash memory <b>5130</b>. Here, the flash memory <b>5130</b> is able to store multi-bit data in a memory cell.</p>
<p id="p-0456" num="0455">In <figref idref="DRAWINGS">FIG. 60</figref>, the memory controller <b>5120</b> and the flash memory <b>5130</b> may be included in a memory card. This memory card includes a MMC (Multi Media Card), an SD card, an XD card, or a SIM card. Further, this memory card is used in connection with the host <b>5110</b> such as a digital camera, a mobile phone, an MP3 player, or a PMP.</p>
<p id="p-0457" num="0456">The memory controller <b>5120</b> inputs a command from the host <b>5110</b> and controls an overall operation (e.g., writing and reading operations) of the flash memory <b>5130</b> in compliance with the input command. Referring to <figref idref="DRAWINGS">FIG. 60</figref>, the memory controller <b>5120</b> includes a buffer memory <b>5121</b> and an error correction circuit <b>5122</b>.</p>
<p id="p-0458" num="0457">The buffer memory <b>5121</b> is used for temporarily storing data to be written into the flash memory <b>5130</b> or data read from the flash memory <b>5130</b>. Data stored in the buffer memory <b>5130</b> is transferred to the flash memory <b>5130</b> or the host <b>5110</b> by control of the memory controller <b>5120</b>. The buffer memory <b>5121</b> may be implemented in a random access memory (RAM), e.g., a SRAM or DRAM.</p>
<p id="p-0459" num="0458">The memory system <b>5100</b> according to the present invention includes the error correction circuit <b>5122</b> in the memory controller <b>5120</b>. Error correction is to detect and correct an error, even if the error is partly generated from data, by adding a check code to data, which is to be stored, according to a set rule.</p>
<p id="p-0460" num="0459">A conceptual operational of the error correction is to generate a check code from input data in an input operation and to store all the input data and check code. And, in an output operation, an error is detected and corrected by comparing the stored check code with the check code generated from the data.</p>
<p id="p-0461" num="0460">Continuously referring to <figref idref="DRAWINGS">FIG. 60</figref>, the flash memory <b>5130</b> is comprised of a cell array <b>5131</b>, a decoder <b>5132</b>, a page buffer <b>5133</b>, a bitline selection circuit <b>5134</b>, a data buffer <b>5135</b>, and a control unit <b>5136</b>. In <figref idref="DRAWINGS">FIG. 60</figref>, a NAND flash memory is illustrated as an example.</p>
<p id="p-0462" num="0461">The cell array <b>5131</b> is formed of plural memory blocks (not shown). Each memory block is formed of plural pages (e.g., 128 pages). Each page is formed of plural memory cells sharing a word line WL. In the case of NAND flash memory, an erasing operation is conducted in the unit of block and reading and writing operations are conducted in the unit of page.</p>
<p id="p-0463" num="0462">In the meantime, as aforementioned, each memory cell is able to store multi-bit data (e.g., 2-bit data). A 2-bit memory cell has four states or levels in accordance with threshold voltage distributions.</p>
<p id="p-0464" num="0463">The decoder <b>5132</b> is connected to the cell array <b>5131</b> through word lines WL<b>1</b>&#x2dc;WLn, and controlled by the control unit <b>5136</b>. The decoder <b>5132</b> inputs an address ADDR from the memory controller <b>5120</b>, and selects a word line (e.g., WL<b>1</b>) or generates a selection signal Yi to select a bit line BL. The page buffer <b>5133</b> is connected to the cell array <b>5131</b> through bit lines BL<b>1</b>&#x2dc;BLm.</p>
<p id="p-0465" num="0464">The page buffer <b>5133</b> stores data that are loaded from the buffer memory <b>5121</b>. In the page buffer <b>5133</b>, data is loaded in the volume of a page. The loaded data are simultaneously programmed in a selected page (e.g., page<b>0</b>) in the programming operation. On the other hand, the page buffer <b>5133</b> reads data from the page (e.g., page<b>0</b>) in the reading operation and temporarily stores read data. Data stored in the page buffer <b>5133</b> is transferred to the buffer memory <b>5121</b> in response to a read-enable signal (nRE; not shown).</p>
<p id="p-0466" num="0465">The bitline selection circuit <b>5134</b> is a circuit for selecting a bit line in response to the selection signal Yi. The data buffer <b>5155</b> is an input/output buffer used for data transmission between the memory controller <b>5155</b> and the flash memory <b>5130</b>. The control unit <b>5136</b> inputs a control signal from the memory controller <b>5120</b>, as a circuit for controlling an internal operation of the flash memory <b>5130</b>.</p>
<p id="p-0467" num="0466">The memory system <b>5100</b> is comprised of the error correction circuit <b>5122</b> in the memory controller <b>5120</b>. The error correction circuit <b>5122</b> detects which programming stage a fail is generated from. A method of detecting a program fail will be detailed with reference to the figures illustrated later.</p>
<p id="p-0468" num="0467"><figref idref="DRAWINGS">FIG. 61</figref> is a diagram for illustrating a method of detecting a program fail by the error correction circuit shown in <figref idref="DRAWINGS">FIG. 60</figref>. In this embodiment, the error correction circuit detects a program fail by finding whether an error is generated in an uncorrectable degree.</p>
<p id="p-0469" num="0468">Referring to <figref idref="DRAWINGS">FIG. 61</figref>, first, the reading operation is conducted by using a read voltage R<b>2</b>. The error correction circuit detects generation of an error with reference to read data. If an error is generated in an uncorrectable degree, this means there is a fail while programming the MSB data.</p>
<p id="p-0470" num="0469">For example, it is assumed that a program fail is generated during transition from the state <b>10</b>&#x2032; to the state &#x2018;10&#x2019;. Due to the program fail, among memory cells that must be programmed into the state &#x2018;10&#x2019;, threshold voltages of one group memory cells are lower than the read voltage R<b>2</b> and threshold voltage of the other group memory cells are higher than the read voltage R<b>2</b>. This means that the program fail is generated during transition from the state <b>10</b>&#x2032; to the state &#x2018;10&#x2019;. Thus, an error is detected by the error correction circuit.</p>
<p id="p-0471" num="0470">Thereby, the LSB data can be correctly read by conducting the reading operation with the read voltage V<b>2</b>. For instance, if a memory cell is turned on when a read voltage R<b>1</b> is applied thereto, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if a memory cell is turned off when the read voltage R<b>1</b> is applied thereto, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0472" num="0471">As stated above, the reason a program fail stage is detectable by the error correction circuit is because transitions from the state <b>10</b>&#x2032; to the state &#x2018;10&#x2019; and from the state &#x2018;11&#x2019; to the state &#x2018;01&#x2019; sequentially proceed by the second programming method. If as like the first programming method, the transitions from the state <b>10</b>&#x2032; to the state &#x2018;10&#x2019; and from the state &#x2018;11&#x2019; to the state &#x2018;01&#x2019; proceed at the same time, the error correction circuit is unable to correctly detect a program fail stage. This is because, if an error is generated while applying the read voltage R<b>2</b> thereto, it is impossible to find out whether the error is generated while programming the memory cell from the state &#x2018;11&#x2019; into the state &#x2018;01&#x2019; or from the state <b>10</b>&#x2032; into the state &#x2018;10&#x2019;.</p>
<p id="p-0473" num="0472">As a result, by the second programming operation according to the present invention, it is able to correctly detect a program fail stage. Through this manner, the LSB data can be correctly read even if there is an MSB program fail. While the NAND flash memory is exemplified in the embodiment, the present invention is applicable to a NOR flash memory.</p>
<p id="p-0474" num="0473">An implementation of blind testing algorithm determines the failed programming stage without help of &#x2018;flag cell memory&#x2019;. So called blind testing algorithm makes a series of assumption on a specific failed programming stage, and based on the assumption, applies appropriate read threshold voltage to read out the stored LSB data, and runs ECC algorithm on the read out data, and check whether the result of ECC is successful, and if the ECC result is successful then concludes the current assumption on the specific failed programming stage is correct, and then return the read out data, otherwise if the ECC result is not successful then concludes the current assumption is false and makes another assumption on the failed programming stage.</p>
<p id="p-0475" num="0474"><figref idref="DRAWINGS">FIG. 62</figref> is a block diagram showing an embodiment of a NOR flash memory device according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 62</figref>, a memory system <b>5200</b> according to the present invention includes a host <b>5210</b>, a memory controller <b>5220</b>, and a NOR flash memory <b>5230</b>. Here, the NOR flash memory <b>5230</b> is able to store multi-bit data in a memory cell.</p>
<p id="p-0476" num="0475">The NOR flash memory <b>5230</b> according to the present invention includes a cell array <b>5231</b>, a row selector <b>5234</b>, and a column selector <b>5235</b>. The cell array <b>5231</b> includes memory cells (not shown) placed at intersections of plural word and bit lines. The row selector <b>5234</b> selects a word line in response to a row address XA. The column selector <b>5235</b> selects bit lines in response to a column address YA.</p>
<p id="p-0477" num="0476">The NOR flash memory <b>5230</b> according to the present invention includes a data input buffer <b>5232</b>, a program driver <b>5233</b>, and a control circuit <b>5237</b>. The data input buffer <b>5232</b> inputs program data in parallel through data lines. The input program data are stored in input buffers IB<b>1</b>, IB<b>2</b>, and IB<b>3</b>. Further, the data input buffer <b>5232</b> outputs data to the program driver <b>5233</b> from the input buffers IB<b>1</b>, IB<b>2</b>, and IB<b>3</b> when a program selection signal Psel is high.</p>
<p id="p-0478" num="0477">The control circuit <b>5237</b> provides the program selection signal Psel and a data latch signal DLj (j=1&#x2dc;n). The program driver <b>5233</b> simultaneously applies program voltages BL<b>1</b><i>i</i>, BL<b>2</b><i>i</i>, BLni (i=1&#x2dc;16) in response to program data DB<b>1</b><i>i</i>, DB<b>2</b><i>i</i>, DBni (i=1&#x2dc;16). The program driver <b>5233</b> includes drivers PD<b>1</b>, PD<b>2</b>, and PD<b>3</b> corresponding to the input buffers IB<b>1</b>, IB<b>2</b>, and IB<b>3</b>.</p>
<p id="p-0479" num="0478"><figref idref="DRAWINGS">FIG. 63</figref> is a block diagram for illustrating another method of detecting a program fail stage in accordance with the present invention. Referring to <figref idref="DRAWINGS">FIG. 63</figref>, a memory system <b>5300</b> according to the present invention includes a host <b>5310</b>, a memory controller <b>5320</b>, and a flash memory <b>5330</b>. The flash memory <b>5330</b> is able to store multi-bit data in a memory cell. The memory controller <b>5320</b> includes a buffer memory <b>5231</b>. The flash memory <b>5330</b> includes a memory array <b>5331</b>, a decoder <b>5332</b>, a page buffer <b>5333</b>, a bit line selection circuit <b>5334</b>, a data buffer <b>5335</b> and a control unit <b>5336</b>. The elements of the memory controller <b>5320</b> and the flash memory <b>5330</b> are the same as the like named elements described with respect to <figref idref="DRAWINGS">FIG. 60</figref>.</p>
<p id="p-0480" num="0479">Here, to detect a program fail stage, memory cells of a memory cell array <b>5330</b> are partly used as flag memory cells. Threshold voltages of the flag memory cells vary whenever completing a programming stage. A method of changing threshold voltages of the flag memory cells by completing the programming stages will be described.</p>
<p id="p-0481" num="0480"><figref idref="DRAWINGS">FIG. 64</figref> is a flow chart for illustrating a method of changing threshold voltages of the flag memory cells by programming. Referring to <figref idref="DRAWINGS">FIG. 64</figref>, first through third MSB programming operations are carried out in sequence. The first MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;00&#x2019; from the state <b>10</b>&#x2032;. The second MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;10&#x2019; from the state <b>10</b>&#x2032;. And the third MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;01&#x2019; from the state &#x2018;11&#x2019;.</p>
<p id="p-0482" num="0481">First in a step S<b>5210</b>, the first MSB programming operations is carried out. By the first MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;00&#x2019; from the state <b>10</b>&#x2032;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5220</b>, the flash memory (e.g., the control unit) determines whether the first MSB programming operation has been passed or not. Determining a program pass or not can be carried out by means of a well-known method such as Y-scan checking or wired-OR checking. Thus, a pass/fail checking method will be detailed.</p>
<p id="p-0483" num="0482">Unless the first MSB programming operation has been passed, the first MSB programming operation resumes. If the first MSB programming operation has been passed, a step S<b>5230</b> is conducted. In the step S<b>5230</b>, the flag memory cells are programmed. By programming, the flag memory cells are changed in threshold voltage. For instance, if the first MSB programming operation has been passed, a threshold voltage of the flag memory cell can rise up to the state &#x2018;01&#x2019;. Thus, if a threshold voltage of the flag memory cell is in the state &#x2018;01&#x2019;, it can be seen that the first MSB programming operation is completed.</p>
<p id="p-0484" num="0483">After programming the flag memory cells, the second MSB programming operation is carried out in a step S<b>5240</b>. By the second MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;10&#x2019; from the state <b>10</b>&#x2032;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5250</b>, the flash memory (e.g., the control unit) determines whether the second MSB programming operation has been passed or not. Unless the second MSB programming operation has been passed, the second MSB programming operation resumes. If the second MSB programming operation has been passed, a step S<b>5260</b> is conducted.</p>
<p id="p-0485" num="0484">In the step S<b>5260</b>, the flag memory cells are programmed. By programming, the flag memory cells are changed in threshold voltage. For instance, if the second MSB programming operation has been passed, a threshold voltage of the flag memory cell can rise up to the state &#x2018;10&#x2019;. Thus, if a threshold voltage of the flag memory cell is in the state &#x2018;10&#x2019;, it can be seen that the second MSB programming operation is completed.</p>
<p id="p-0486" num="0485">After programming the flag memory cells, the third MSB programming operation is carried out in a step S<b>5270</b>. By the third MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;01&#x2019; from the state &#x2018;11&#x2019;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5280</b>, the flash memory (e.g., the control unit) determines whether the third MSB programming operation has been passed or not. Unless the third MSB programming operation has been passed, the third MSB programming operation resumes. If the third MSB programming operation has been passed, the MSB programming operation is terminated.</p>
<p id="p-0487" num="0486">As aforementioned, threshold voltage of the memory cells are changed whenever each programming stage is completed. Therefore, by referring to the threshold voltage of the flag memory cell, the flash memory (e.g., the control unit) is able to detect which stage the programming operation is completed up to. For instance, if a program fail is generated due to power failure during the second MSB programming operation, the flag memory cell has the state &#x2018;01&#x2019; in threshold voltage.</p>
<p id="p-0488" num="0487">It is here assumed that the flag memory cell is a multi-bit cell, however, it will be appreciated by those skilled in the art that the flag memory cell may be a plurality of single level cells. The aforementioned method is even applicable to a NOR flash memory device. In this case, the flag memory cells may be comprised in a memory cell array in the NOR flash memory device.</p>
<p id="p-0489" num="0488"><figref idref="DRAWINGS">FIG. 65</figref> is a block diagram for illustrating still another method of detecting program fails in a memory system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 65</figref>, the memory system <b>5400</b> according to the present invention includes a host <b>5410</b>, a memory controller <b>5420</b>, and a flash memory <b>5430</b>. The memory controller <b>5420</b> includes a buffer memory <b>5421</b>. The flash memory <b>5430</b> includes a memory cell array <b>5431</b>, a decoder <b>5432</b>, a page buffer <b>5433</b>, a bit line selection circuit <b>5434</b>, a data buffer <b>5435</b> and a circuit unit <b>5436</b>. The elements of the memory controller <b>5420</b> and the flash memory <b>5430</b> discussed above are the same as the like named elements described with respect to <figref idref="DRAWINGS">FIG. 60</figref>.</p>
<p id="p-0490" num="0489">In this embodiment, the memory controller <b>5420</b> also includes a flag register <b>5422</b> for detecting a program fail. Data stored in the flag register <b>5422</b> is updated whenever completing the programming stage. The flag register <b>5422</b> may be formed of a nonvolatile memory device that is free from data loss due to power failure or so on. Thus, referring to data stored in the flag register <b>5422</b>, the memory controller <b>5420</b> or flash memory <b>5430</b> (e.g., the control unit) is able to find which stage the programming operation is completed up to. A method of updating the flag register <b>5422</b> by completing the programming stage will be described with reference to the figures illustrated later.</p>
<p id="p-0491" num="0490"><figref idref="DRAWINGS">FIG. 66</figref> is a flow chart for illustrating a method changing data stored in the flag register by completing the programming stage. Referring to <figref idref="DRAWINGS">FIG. 66</figref>, the first through third MSB programming operations are conducted in sequence. The first MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;00&#x2019; from the state <b>10</b>&#x2032;. The second MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;10&#x2019; from the state <b>10</b>&#x2032;. And the third MSB programming operation means that a threshold voltage of the memory cell transitions to the state &#x2018;01&#x2019; from the state &#x2018;11&#x2019;.</p>
<p id="p-0492" num="0491">First in a step S<b>5310</b>, the first MSB programming operations is carried out. By the first MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;00&#x2019; from the state <b>10</b>&#x2032;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5320</b>, it determines whether the first MSB programming operation has been passed or not. Determining a program pass or not can be carried out by means of a well-known method such as Y-scan checking or wired-OR checking. Thus, a pass/fail checking method will be detailed. Unless the first MSB programming operation has been passed, the first MSB programming operation resumes. If the first MSB programming operation has been passed, a step S<b>5330</b> is conducted.</p>
<p id="p-0493" num="0492">In the step S<b>5330</b>, data stored in the flag register are updated. By updating, the flag register has data indicating that the first MSB programming operation has been passed. Therefore, referring to data stored in the flag register, the memory controller <b>5420</b> or flash memory <b>5430</b> (e.g., the control unit) are able to find which stage the programming operation is completed up to.</p>
<p id="p-0494" num="0493">After updating the flag register, the second MSB programming operation is carried out in a step S<b>5340</b>. By the second MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;10&#x2019; from the state <b>10</b>&#x2032;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5350</b>, it determines whether the second MSB programming operation has been passed or not. Unless the second MSB programming operation has been passed, the second MSB programming operation resumes. If the second MSB programming operation has been passed, a step S<b>5360</b> is conducted.</p>
<p id="p-0495" num="0494">In the step S<b>5360</b>, data stored in the flag register are updated. By updating, the flag register has data indicating that the second MSB programming operation has been passed. Therefore, referring to data stored in the flag register, it is able to find which stage the programming operation is completed up to.</p>
<p id="p-0496" num="0495">After updating the flag register, the third MSB programming operation is carried out in a step S<b>5370</b>. By the third MSB programming operation, threshold voltages of the memory cells partly transition into the state &#x2018;01&#x2019; from the state &#x2018;11&#x2019;. The rest of the memory cells do not vary in threshold voltage because they are prohibited in programming. In a step S<b>5380</b>, it determines whether the third MSB programming operation has been passed or not. Unless the third MSB programming operation has been passed, the third MSB programming operation resumes. If the third MSB programming operation has been passed, the MSB programming operation is terminated.</p>
<p id="p-0497" num="0496">As aforementioned, data stored in the flag register are changed whenever each programming stage is completed. Therefore, by referring to data stored in the flag register, it is able to detect which stage the programming operation is completed up to. For instance, if a program fail is generated due to power failure during the second MSB programming operation, the flag register stores data informing that the first MSB programming operation has been passed.</p>
<p id="p-0498" num="0497">The flag register may be formed of a nonvolatile memory free from an effect caused by power failure or so on. The aforementioned method is applicable even to a NOR flash memory device. In this case, the flag register may be comprised in a memory controller in the NOR flash memory device.</p>
<p id="p-0499" num="0498"><figref idref="DRAWINGS">FIGS. 67A through 67C</figref> are diagrams showing LSB reading methods according to the present invention. As aforementioned, after detecting which stage a program fail is generated from, the LSB reading methods are differently applied thereto in accordance with a result of the detection.</p>
<p id="p-0500" num="0499"><figref idref="DRAWINGS">FIG. 67A</figref> is a diagram showing the LSB reading method in the case that a program fail is generated due to power failure or so on during the first MSB programming operation. Referring to <figref idref="DRAWINGS">FIG. 67A</figref>, if a program fail is generated during transition from the state <b>10</b>&#x2032; into the state &#x2018;00&#x2019;, the LSB data can be read by applying the read voltage R<b>1</b> to a gate of a selected memory cell. For example, at the time of applying the read voltage R<b>1</b>, if the memory cell is turned on, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if the memory cell is turned off, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0501" num="0500"><figref idref="DRAWINGS">FIG. 67B</figref> is a diagram showing the LSB reading method in the case that a program fail is generated due to power failure or so on during the second MSB programming operation. Referring to <figref idref="DRAWINGS">FIG. 67B</figref>, if a program fail is generated during transition from the state <b>10</b>&#x2032; into the state &#x2018;10&#x2019;, the LSB data can be read by applying the read voltage R<b>1</b>. For example, at the time of applying the read voltage R<b>1</b>, if the memory cell is turned on, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if the memory cell is turned off, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0502" num="0501"><figref idref="DRAWINGS">FIG. 67C</figref> is a diagram showing the LSB reading method in the case that a program fail is generated due to power failure or so on during the third MSB programming operation. Referring to <figref idref="DRAWINGS">FIG. 67C</figref>, if a program fail is generated during transition from the state &#x2018;11&#x2019; into the state &#x2018;01&#x2019;, the LSB data can be read by applying the read voltage R<b>2</b>. For example, at the time of applying the read voltage R<b>2</b>, if the memory cell is turned on, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if the memory cell is turned off, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0503" num="0502">By the aforementioned methods, the LSB may be stably restored data even if a program fail is generated due to power failure or so on while programming the MSB data. Therefore, the semiconductor memory device is improved in reliability.</p>
<p id="p-0504" num="0503">As shown in <figref idref="DRAWINGS">FIG. 57</figref>, the first and second programming methods are alternatively selected in accordance with a degree of reliability required therefor. The first and second programming methods may be implemented in various embodiments. Hereinafter will be described the first and second programming methods in accordance with another embodiment of the present invention with reference to <figref idref="DRAWINGS">FIGS. 68 and 69</figref>.</p>
<p id="p-0505" num="0504"><figref idref="DRAWINGS">FIGS. 68A through 68C</figref> show the first programming method according to the present invention. <figref idref="DRAWINGS">FIG. 68A</figref> shows a threshold voltage variation when the LSB data is programmed. <figref idref="DRAWINGS">FIG. 68B</figref> shows a threshold voltage variation when programmed to have the state &#x2018;00&#x2019;. <figref idref="DRAWINGS">FIG. 68C</figref> shows a threshold voltage variation when programmed to have the states &#x2018;01&#x2019; and &#x2018;10&#x2019;.</p>
<p id="p-0506" num="0505">Referring to <figref idref="DRAWINGS">FIG. 68A</figref>, a procedure of programming the LSB is first described. A memory cell having the state &#x2018;11&#x2019; is programmed to have the state <b>10</b>&#x2032; in accordance with the LSB data. For instance, the memory cell maintains the state &#x2018;11&#x2019; if the LSB data is &#x2018;1&#x2019;. The memory cell transitions to the state <b>10</b>&#x2032; if the LSB data is &#x2018;0&#x2019;. During this, whether the programming has been passed is detected by means of the verifying voltage Va.</p>
<p id="p-0507" num="0506">Next, the memory controller <b>5020</b> transfers data of a page volume to the flash memory <b>5030</b> from the buffer memory <b>5021</b> in order to program the MSB. Referring to <figref idref="DRAWINGS">FIG. 68B</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;00&#x2019; in accordance with the MSB. During this, whether the programming has been passed is detected by means of the verifying voltage V<b>3</b>.</p>
<p id="p-0508" num="0507">Referring to <figref idref="DRAWINGS">FIG. 68C</figref>, if the MSB data is &#x2018;1&#x2019;, a memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;01&#x2019; and a memory cell having the state <b>10</b>&#x2032; is programmed to have the state &#x2018;10&#x2019;. During this, whether the programming has been passed is detected by means of the verifying voltages V<b>1</b> and V<b>2</b>.</p>
<p id="p-0509" num="0508">In the meantime, as aforementioned, there is a possibility of generating a program fail while programming the MSB into the memory cell in which the LSB is programmed. If an error is generated while programming the MSB, it may affect the LSB that has been already programmed therein.</p>
<p id="p-0510" num="0509">Therefore, in the embodiment of the present invention, the first programming method aforementioned is adopted thereto when not requiring high reliability, while the second programming method described later is adopted thereto when requiring high reliability. Adopting the second programming method, the LSB data is not lost even when there is a program fail while programming the MSB. As a result, the nonvolatile memory device is improved in reliability.</p>
<p id="p-0511" num="0510"><figref idref="DRAWINGS">FIGS. 69A through 69C</figref> illustrate the second programming method according to the present invention. <figref idref="DRAWINGS">FIGS. 69A through 69C</figref> show a procedure of programming the LSB and MSB, i.e., 2-bit data, into a memory cell.</p>
<p id="p-0512" num="0511">Referring to <figref idref="DRAWINGS">FIG. 69A</figref>, first it will be described about a procedure for programming the LSB. A memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;10&#x2019; in accordance with the LSB data. For instance, if the LSB data is &#x2018;1&#x2019;, the memory cell maintains the state &#x2018;11&#x2019;. If the LSB data is &#x2018;0&#x2019;, the memory cell goes to the state &#x2018;10&#x2019;. During this, whether the programming has been passed is detected by means of the verifying voltage Va.</p>
<p id="p-0513" num="0512">Next, the memory controller transfers data of a page volume from the buffer memory to the flash memory in order to program the MSB. Referring to <figref idref="DRAWINGS">FIG. 69B</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state &#x2018;10&#x2019; is programmed to have the state &#x2018;00&#x2019;. During this, it detects a program pass by means of the verifying voltage V<b>3</b>. To the contrary, if the MSB data is &#x2018;1&#x2019;, the memory cell maintains the state &#x2018;10&#x2019; in threshold voltage.</p>
<p id="p-0514" num="0513">Referring to <figref idref="DRAWINGS">FIG. 69C</figref>, if the MSB data is &#x2018;0&#x2019;, a memory cell having the state &#x2018;11&#x2019; is programmed to have the state &#x2018;01&#x2019;. During this, it detects a program pass by means of the verifying voltage V<b>1</b>. To the contrary, if the MSB data is &#x2018;1&#x2019;, the memory cell maintains the state &#x2018;11&#x2019; in threshold voltage.</p>
<p id="p-0515" num="0514">As aforementioned, while programming the LSB data, a threshold voltage of a memory cell rises up to the state &#x2018;10&#x2019;. Thus, the states &#x2018;11&#x2019; and &#x2018;01&#x2019; are clearly distinguished from the states &#x2018;10&#x2019; and &#x2018;00&#x2019;. Thus, it is possible to restore the LSB data. In this embodiment, the LSB data can be restored regardless of which stage a program fail is generated in. As described later, this is because the LSB reading operation is conducted by means of the same read voltage R<b>2</b> regardless of which stage a program fail is generated in.</p>
<p id="p-0516" num="0515"><figref idref="DRAWINGS">FIGS. 70A and 70B</figref> are diagrams showing an LSB reading method according to the present invention. In this method, the reading operation is conducted by means of the same read voltage R<b>2</b> regardless of which stage a program fail is generated in.</p>
<p id="p-0517" num="0516"><figref idref="DRAWINGS">FIG. 70A</figref> is a diagram showing the LSB reading method in the case that a program fail is generated due to power failure or so on during transition from the state &#x2018;10&#x2019; into the state &#x2018;00&#x2019;. Referring to <figref idref="DRAWINGS">FIG. 70A</figref>, if a program fail is generated during transition from the state &#x2018;10&#x2019; into the state &#x2018;00&#x2019;, the LSB data can be read by applying the read voltage R<b>2</b>. For example, at the time of applying the read voltage R<b>2</b>, if the memory cell is turned on, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if the memory cell is turned off, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0518" num="0517"><figref idref="DRAWINGS">FIG. 70B</figref> is a diagram showing the LSB reading method in the case that a program fail is generated due to power failure or so on during transition from the state &#x2018;11&#x2019; into the state &#x2018;01&#x2019;. Referring to <figref idref="DRAWINGS">FIG. 16C</figref>, if a program fail is generated during transition from the state &#x2018;11&#x2019; into the state &#x2018;01&#x2019;, the LSB data can be read by applying the read voltage R<b>2</b>. For example, at the time of applying the read voltage R<b>2</b>, if the memory cell is turned on, it means the LSB data is &#x2018;1&#x2019;. To the contrary, if the memory cell is turned off, it means the LSB data is &#x2018;0&#x2019;.</p>
<p id="p-0519" num="0518">By the aforementioned methods, it is able to stably restore the LSB data even if a program fail is generated due to power failure or so on while programming the MSB data. Therefore, the semiconductor memory device is improved in reliability.</p>
<p id="p-0520" num="0519"><figref idref="DRAWINGS">FIG. 71</figref> is a block diagram for illustrating another application of the present invention. Referring to <figref idref="DRAWINGS">FIG. 71</figref>, pages of the memory cell array are divided into a data area and a reserved area. The structure of the embodiment of <figref idref="DRAWINGS">FIG. 71</figref> is the same as <figref idref="DRAWINGS">FIG. 63</figref> except that the reference numerals start with <b>55</b> instead of <b>53</b> and flag cells do not necessarily exist in the embodiment of <figref idref="DRAWINGS">FIG. 71</figref>.</p>
<p id="p-0521" num="0520">The pages of memory block can be used divisionally for random access. As a flash memory device does not support an overwriting function, it is necessary to prepare a new page in order to correct data stored in a used page. During this, if there is no usable page in the memory block, it results in an overhead such as must be allocated with a new memory block. Thus, the memory block is preliminarily provided with usable pages, which are used for correcting the used pages. Thereby, such an overhead can be reduced. In this embodiment, these pages form a reserved area.</p>
<p id="p-0522" num="0521">In the meantime, after programming the MSB data to a word line of the memory cell array, if the LSB data is programmed to the next word line, data stored in memory cells coupled to the previous word line would be changed by interference. To prevent this problem is used an address scrambling technique.</p>
<p id="p-0523" num="0522">The address scrambling technique is a technique of programming the LSB data into memory cells coupled to the next word line before programming the MSB data into memory cells coupled to a first word line. Thereby, the memory cells coupled to the previous word line are free from interference by the LSB data programming to the next word line. The address scrambling technique will be detailed below.</p>
<p id="p-0524" num="0523"><figref idref="DRAWINGS">FIGS. 72A and 72B</figref> are diagrams for illustrating the address scrambling technique. <figref idref="DRAWINGS">FIG. 72A</figref> shows pages of a memory block. Exemplarily, a memory block includes 128 pages (page<b>0</b>&#x2dc;page<b>127</b>). But, it will be apparent to those skilled in the art that the present invention may not restricted thereto. A memory block may include an arbitrary number of pages.</p>
<p id="p-0525" num="0524">Referring to <figref idref="DRAWINGS">FIG. 72A</figref>, the pages <b>0</b>&#x2dc;<b>123</b> form a data area. The rest of pages <b>124</b>&#x2dc;<b>127</b> form a reserved area. Data are sequentially written into the pages of the data area. The pages of the reserved area are comprised therein for random access. For instance, after storing data in the pages from <b>0</b> to <b>123</b>, data are stored in pages of the next memory block. The pages of the reserved area are used later in order to correct the pages <b>0</b>&#x2dc;<b>123</b>.</p>
<p id="p-0526" num="0525"><figref idref="DRAWINGS">FIG. 72B</figref> is a diagram for explaining an order to store data into memory cells. A word line intersects even and odd bit lines. Memory cells connected to the even bit lines and memory cells connected to the odd bit lines form different pages. Further, a memory cell stores the LSB and MSB data. Accordingly, a word line is able to store four pages in full. For instance, the pages <b>0</b>, <b>1</b>, <b>4</b>, and <b>5</b> are stored in the word line <b>0</b>.</p>
<p id="p-0527" num="0526">The pages are stored according to a rule by address scrambling. The page <b>0</b> is stored in the memory cells placed at intersections of a word line WL<b>0</b> and the even bit lines in the form of the LSB data. The page <b>1</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the LSB data. The page <b>2</b> is stored in the memory cells placed at intersections of a word line WL<b>1</b> and the even bit lines in the form of the LSB data. The page <b>3</b> is stored in the memory cells placed at intersections of the word line WL<b>1</b> and the odd bit lines in the form of the LSB data.</p>
<p id="p-0528" num="0527">The page <b>4</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the even bit lines in the form of the MSB data. The page <b>5</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the MSB data. The page <b>6</b> is stored in the memory cells placed at intersections of a word line WL<b>2</b> and the even bit lines in the form of the MSB data. The page <b>7</b> is stored in the memory cells placed at intersections of the word line WL<b>2</b> and the odd bit lines in the form of the LSB data. In this manner, it is able to minimize the interference by the MSB data programming.</p>
<p id="p-0529" num="0528">Referring again to <figref idref="DRAWINGS">FIG. 72A</figref>, the reserved area is formed of pages <b>124</b> through <b>127</b>. As aforementioned, the reserved area is used for correcting data stored in the data area. However, if a program fail is generated due to power failure or so on while storing data in the reserved area, data stored in the data area would be damaged. For instance, if a program fail is generated while programming the page <b>126</b> in the reserved area, data stored in the page <b>122</b> of the data area would be damaged. This is because the pages <b>122</b> and <b>126</b> are stored in the same memory cells in the form of the LSB and MSB data. Therefore, it is necessary to restore the LSB data even if a program fail is generated while programming the MSB data. Such a problem is resolvable by the programming method according to the present invention.</p>
<p id="p-0530" num="0529">While the 2-bit MLC is illustrated as an example in this embodiment, the present invention is not restricted thereto in scope. The present invention is applicable to an n-bit MLC (n is an integer). A 4-bit MLC will be described with reference to the figures illustrated later.</p>
<p id="p-0531" num="0530"><figref idref="DRAWINGS">FIGS. 73A and 73B</figref> are diagrams for illustrating a programming sequence when 4 bits are stored in a memory cell. <figref idref="DRAWINGS">FIG. 73A</figref> shows pages in a memory block. Exemplarily, a memory block includes 256 pages. But, it will be apparent to those skilled in the art that the present invention is not restricted thereto in scope. A memory block may include an arbitrary number of pages.</p>
<p id="p-0532" num="0531">Referring to <figref idref="DRAWINGS">FIG. 73A</figref>, the pages <b>0</b>&#x2dc;<b>247</b> form a data area. The rest of pages <b>248</b>&#x2dc;<b>255</b> form a reserved area. Data are sequentially written into the pages of the data area. The pages of the reserved area are comprised for random access later. For example, after storing data the pages from <b>0</b> to <b>247</b>, data are stored in pages of the next memory block.</p>
<p id="p-0533" num="0532"><figref idref="DRAWINGS">FIG. 73B</figref> is a diagram for explaining an order to store data into memory cells. A word line intersects even and odd bit lines. Memory cells connected to the even bit lines and memory cells connected to the odd bit lines form different pages. Further, a memory cell stores 4 bits (first through fourth bits). Accordingly, a word line is able to store eight pages in full. For instance, the pages <b>0</b>&#x2dc;<b>3</b> and <b>8</b>&#x2dc;<b>11</b> are stored in the word line <b>0</b>.</p>
<p id="p-0534" num="0533">The pages are stored according to a rule by address scrambling. The page <b>0</b> is stored' in the memory cells placed at intersections of the word line WL<b>0</b> and the even bit lines in the form of the first bit data. The page <b>1</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the first bit data. The page <b>2</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the even bit lines in the form of the second bit data. The page <b>3</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the second bit data.</p>
<p id="p-0535" num="0534">The page <b>4</b> is stored in the memory cells placed at intersections of the word line WL<b>1</b> and the even bit lines in the form of the first bit data. The page <b>5</b> is stored in the memory cells placed at intersections of the word line WL<b>1</b> and the odd bit lines in the form of the first bit data. The page <b>6</b> is stored in the memory cells placed at intersections of the word line WL<b>1</b> and the even bit lines in the form of the second bit data. The page <b>7</b> is stored in the memory cells placed at intersections of the word line WL<b>1</b> and the odd bit lines in the form of the second bit data.</p>
<p id="p-0536" num="0535">The page <b>8</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the even bit lines in the form of the third bit data. The page <b>9</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the third bit data. The page <b>10</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the even bit lines in the form of the fourth bit data. The page <b>11</b> is stored in the memory cells placed at intersections of the word line WL<b>0</b> and the odd bit lines in the form of the fourth bit data. In this manner, it is able to minimize the interference by the LSB data programming.</p>
<p id="p-0537" num="0536">Referring again to <figref idref="DRAWINGS">FIG. 73A</figref>, the reserved area is formed of pages <b>248</b> through <b>255</b>. As aforementioned, the reserved area is used for correcting data stored in the data area. However, if a program fail is generated due to power failure or so on while storing data in the reserved area, data stored in the data area would be damaged. For instance, if a program fail is generated while programming the page <b>252</b> in the reserved area, data stored in the page <b>244</b> of the data area would be damaged. This is because the pages <b>252</b> and <b>244</b> are stored in the same memory cells in the form of the second and third bit data. Therefore, it is necessary to restore the LSB data even if a program fail is generated while programming the MSB data. Such a problem is resolvable by the programming method according to the present invention.</p>
<p id="p-0538" num="0537"><figref idref="DRAWINGS">FIG. 74</figref> is a block diagram briefly showing a computing system <b>5600</b> with a flash memory device according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 74</figref>, the computing system <b>5600</b> includes a processor <b>5610</b>, a memory controller <b>5620</b>, input units <b>5630</b>, output units <b>5640</b>, a flash memory <b>5650</b>, and a main memory unit <b>5660</b>. In the figure, the solid line denotes a system bus through which data or commands are transferred.</p>
<p id="p-0539" num="0538">The memory controller <b>5620</b> and the flash memory device <b>5650</b> may form a memory card. And, the processor <b>5610</b>, the input units <b>5630</b>, the output units <b>5640</b>, and the main memory unit <b>5660</b> may form a host using the memory card as a storage unit.</p>
<p id="p-0540" num="0539">The computing system <b>5600</b> according to the present invention inputs data from external through the input units <b>5630</b> (e.g., keyboards or cameras). The input data may be a command by a user or multimedia data such as image data taken by a camera. The input data is stored in the flash memory <b>5650</b> or the main memory unit <b>5660</b>.</p>
<p id="p-0541" num="0540">A result processed by the processor <b>5610</b> is stored in the flash memory <b>5650</b> or the main memory unit <b>5660</b>. The output units <b>5640</b> output data from the flash memory <b>5650</b> or the main memory unit <b>5660</b>. For example, the output units <b>5640</b> output data in visible forms for humans. For example, the output units <b>5640</b> include display devices or speakers.</p>
<p id="p-0542" num="0541">The word-line driving method according to the present invention may be applied to the flash memory <b>5650</b>. Along as the reliability of the flash memory <b>5650</b>, the reliability of the computing system <b>5600</b> will be improved in proportion thereto.</p>
<p id="p-0543" num="0542">The flash memory <b>5650</b> and/or the memory controller <b>5620</b> can be mounted by way of various types of packages. For instance, the flash memory <b>5650</b> and/or the memory controller <b>5620</b> may be placed thereon by any package type, e.g., Package-on-Package (PoP), Ball Grid Arrays (BGAs), Chip Scale Packages (CSPs), Plastic Leaded Chip Carrier (PLCC), Plastic Dual In-line Package (PDIP), Die in Waffle Pack, Die in Wafer Form, Chip-On-Board (COB), CERamic Dual In-line Package (CERDIP), Plastic Metric Quad Flat Pack (MQFP), Thin Quad Flat Pack (TQFP), Small Outline (SOIC), Shrink Small Outline Package (SSOP), Thin Small Outline (TSOP), Thin Quad Flat Pack (TQFP), System In Package (SIP), Multi-Chip Package (MCP), Wafer-level Fabricated Package (WFP), Wafer-level Processed Stack Package (WSP), or Wafer-level Processed Package (WSP). The nonvolatile memory <b>5650</b> and the controller <b>5620</b> may construct a memory card.</p>
<p id="p-0544" num="0543">Although not shown in the figure, it can be understood by those skilled in the art that a power supply is required for supplying power to the computing system <b>5600</b>. And, if the computing system <b>5600</b> is a mobile device, it may be further required of a battery for supplying power thereto.</p>
<p id="p-0545" num="0544"><figref idref="DRAWINGS">FIG. 75</figref> is a block diagram briefly showing an SSD system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 75</figref>, the SSD system <b>5700</b> includes an SSD controller <b>5710</b> and flash memories <b>5720</b>&#x2dc;<b>5723</b>.</p>
<p id="p-0546" num="0545">The semiconductor memory system according to the present invention is applicable to an SSD (solid state drive). In recent years, SSD products, which are expected to replace hard disk drives (HDDs), are being spotlighted in new generation markets. The SSD is a storage unit using memory chips such as flash memories for storing data, instead of a rotating plate used in a HDD. The SSD is more advantageous than the HDD, which operates mechanically, in operation rate, external impact, and power consumption.</p>
<p id="p-0547" num="0546">Referring again to <figref idref="DRAWINGS">FIG. 75</figref>, a central processing unit <b>5711</b> accepts a command from a host, and controls and determines to store data into the flash memory from the host or to transfer data to the host from the flash memory. An ATA interface <b>5712</b> exchanges data with the host in accordance with control of the central processing unit <b>5711</b>. The ATA interface <b>5712</b> fetches a command and address from the host and transfers the command and address to the central processing unit <b>5711</b> through a CPU bus. Data input from the host or data to be transferred to the host, through the ATA interface <b>5712</b>, is transferred to an SRAM cache <b>5713</b> in accordance with the central processing unit <b>5711</b> without passing through the CPU bus.</p>
<p id="p-0548" num="0547">The SRAM cache <b>5713</b> temporarily stores data moving between the host and the flash memories <b>5720</b>&#x2dc;<b>5723</b>. Further, the SRAM cache <b>5713</b> is used even for storing a program to be used by the central processing unit <b>5711</b>. The SRAM cache <b>5713</b> may be regarded as a buffer memory, which is not always organized in an SRAM. A flash interface <b>5714</b> exchanges data with the nonvolatile memories used as storage units. The flash interface <b>5714</b> may be configured to support a NAND flash memory, a one-NAND flash memory, or a multi-level flash memory.</p>
<p id="p-0549" num="0548">The semiconductor memory system according to the present invention may be used as a portable storage device. Thus, it can be used as a storage device for an MP3 player, a digital camera, a PDA, or an e-book. Further, it can be used as a storage unit for a digital TV or computer.</p>
<p id="p-0550" num="0549"><figref idref="DRAWINGS">FIG. 76</figref> is a block diagram showing a memory system according to another exemplary embodiment of the present invention. In the memory system shown in <figref idref="DRAWINGS">FIG. 76</figref>, a memory <b>5810</b> and a memory controller <b>5820</b> form a card <b>5830</b>. For example, the card <b>5830</b> may be a memory card such a flash memory card. That is, the card <b>5830</b> may be a card satisfying a certain industrial standard for an electronic apparatus such a digital camera or personal computer. It will be appreciated that the memory controller <b>5820</b> is able to control the memory <b>5810</b> on basis of control signals received from another (e.g., external) system by the card <b>5830</b>.</p>
<p id="p-0551" num="0550"><figref idref="DRAWINGS">FIG. 77</figref> is a block diagram showing a memory system according to another exemplary embodiment of the present invention. The system shown in <figref idref="DRAWINGS">FIG. 77</figref> denotes a portable system <b>5900</b>. The portable system <b>5900</b> may be an MP3 player, a video player, a combination video and audio player, or so forth. As shown, the portable system <b>5900</b> includes a memory <b>5910</b> and a memory controller <b>5920</b>. The portable system <b>5900</b> may further include an encoder and decoder <b>5930</b>, presentation components <b>5940</b>, and an interface <b>5950</b>.</p>
<p id="p-0552" num="0551">Data (video, audio, etc.) processed by the encoder and decoder (EDC) <b>1610</b> can be input to the memory <b>5910</b>, through the memory controller <b>5910</b>, and output from the memory <b>5910</b>. As illustrated by dotted lines in <figref idref="DRAWINGS">FIG. 77</figref>, data can be input directly into the memory <b>5910</b> from the EDC <b>5930</b> and/or output directly into the EDC <b>5930</b> from the memory <b>5910</b>.</p>
<p id="p-0553" num="0552">The EDC <b>5930</b> is able to encode data in order to store the data into the memory <b>5910</b>. For instance, the EDC <b>5930</b> is able to an MP3 encoding operation to audio data in order to store the data in the memory <b>5910</b>. In another way, the EDC <b>5930</b> is able to conduct an MPEG encoding operation (e.g., MPEG2, MPEG4, etc.) to video data in order to the data in the memory <b>5910</b>. Further, the EDC <b>5930</b> may include pluralities of encoders for encoding data of other types in accordance with other data formats. For instance, the EDC <b>5930</b> may include an MP3 encoder for audio data and an MPEG encoder for video data.</p>
<p id="p-0554" num="0553">The EDC <b>5930</b> is able to decode an output of the memory <b>5910</b>. For instance, the EDC <b>5930</b> is able to conduct an MP3 decoding operation to audio data output from the memory <b>5910</b>. In another way, the EDC <b>5930</b> is able to conduct an MPEG decoding operation (e.g., MPEG2, MPEG4, etc.) to video data output from the memory <b>5910</b>. Further, the EDC <b>5930</b> may include pluralities of decoders for decoding data of other types in accordance with other data formats. For instance, the EDC <b>5930</b> may include an MP3 decoder for audio data and an MPEG decoder for video data.</p>
<p id="p-0555" num="0554">It can be also understood that the EDC <b>5930</b> include decoders only. For example, previously encoded data can be received by the EDC <b>5930</b> and passed through the memory controller <b>5920</b> and/or the memory <b>5910</b>.</p>
<p id="p-0556" num="0555">The EDC <b>5930</b> is able to receive data for encoding by way of the interface <b>5950</b> or to receive preciously encoded data. The interface <b>5950</b> may accord to a known standard (e.g., firmware, USB, etc.). The interface <b>5950</b> may further include more one interface units. For instance, the interface <b>5950</b> may include a firmware interface, a USB interface, and so on. Data from the memory <b>5910</b> may be even output by way of the interface <b>5950</b>.</p>
<p id="p-0557" num="0556">The presentation components <b>5940</b> are able to display data output from the memory and/or decoded by the EDC <b>5930</b>. For instance, the presentation components <b>5940</b> may include a speaker jack for outputting audio data, a display screen for outputting video data, and so on.</p>
<p id="p-0558" num="0557"><figref idref="DRAWINGS">FIG. 78</figref> shows an embodiment where a host system <b>5840</b> is coupled to the card <b>5830</b> of <figref idref="DRAWINGS">FIG. 76</figref>. In the embodiment, the host system <b>5840</b> is able to apply control signals to the card <b>5830</b> so as to make the memory controller <b>5820</b> control an operation of the memory <b>5810</b>.</p>
<p id="p-0559" num="0558">A flash memory system according to a fifth embodiment of the present invention may achieve high data reliability by repairing LSB data. In addition, the flash memory system according to the fifth embodiment of the present invention may achieve speed-up by means of the multi-thread function described in the first embodiment, the free page described in the second embodiment, and the microcode described in the third embodiment as well as by repairing LSB data. Performance of the flash memory system according to the fifth embodiment of the present invention may be improved through achievement of high data reliability and speed-up.</p>
<heading id="h-0018" level="1">Embodiment 6</heading>
<heading id="h-0019" level="1">Flash Memory Device Saving Read Count Data</heading>
<p id="p-0560" num="0559">As discussed, semiconductor memory devices are classified into volatile memories such as DRAM, SRAM, and so on, and nonvolatile memories such as EEPROM, FRAM, PRAM, flash memory, and so on. The volatile memories lose data stored therein when power is interrupted, while the nonvolatile memories retain data stored therein even if power is interrupted. Especially, since the flash memories have advantages of high programming rate, low power consumption, large-capacity data storage, and so forth, they are being widely used in computer systems for example as storage media.</p>
<p id="p-0561" num="0560">The flash memory includes a memory cell array storing data. The memory cell array is composed of plural memory blocks. Each memory block is formed of plural pages. Each page is formed of plural memory cells. The flash memory conducts an erasing operation in the unit of memory block, and conducts a writing or reading operation in the unit of page.</p>
<p id="p-0562" num="0561">Each memory cell of the flash memory is discriminated into an on-cell or off-cell. The on-cell stores data &#x2018;1&#x2019;, which is even referred to as &#x2018;erased cell&#x2019;. The off-cell stores data &#x2018;0&#x2019;, which is even referred to as &#x2018;programmed cell&#x2019;. The on-cell may have a threshold voltage between &#x2212;3V and &#x2212;1V, and the off-cell may have a threshold voltage of +1V and +3V.</p>
<p id="p-0563" num="0562">The flash memory has a cell string (refer to <figref idref="DRAWINGS">FIG. 80</figref>). The cell string includes a string selection transistor connected to a string selection line (SSL), memory cells connected to pluralities of word lines (WL<b>0</b>&#x2dc;WL<b>31</b>), and a ground selection transistor connected to a ground selection line (GSL). The string selection transistor is connected to a bit line (BL), and the ground selection transistor is connected to a common source line (CSL).</p>
<p id="p-0564" num="0563">During a reading operation, a selective read voltage (Vrd) about 0V is applied to a selected word line of the flash memory and a deselective read voltage (Vread) about 4.5V is applied to unselected word lines. Here, the deselective read voltage (Vread) is a voltage enough to turn on a memory cell connected to the unselected word line.</p>
<p id="p-0565" num="0564">Meantime, a read fail could be caused due to various reasons in the reading operation of the flash memory. Here, the read fail means that a memory cell that has been programmed as on-cell (or data &#x2018;1&#x2019;) is read as an off-cell (or data &#x2018;0&#x2019;), or that a memory cell that has been programmed as off-cell is read as an on-cell. There are several reasons of read fail.</p>
<p id="p-0566" num="0565">A typical read fail occurs by soft programming. The read fail by soft programming is mostly generated when a threshold voltage of an on-cell increases. If there is a read fail, a conventional flash memory repairs the read fail by means of reprogramming. However, the conventional method for repairing a read fail after the read fail occurs is inconvenient because it is required to find out the reason.</p>
<p id="p-0567" num="0566"><figref idref="DRAWINGS">FIG. 79</figref> is a block diagram exemplarily showing a memory system according to an embodiment of the present invention. Referring to <figref idref="DRAWINGS">FIG. 79</figref>, the memory system <b>6010</b> includes a flash memory <b>6100</b> and a memory controller <b>6200</b>.</p>
<p id="p-0568" num="0567">The flash memory <b>6100</b> is a nonvolatile memory, conducting writing, reading, and erasing operations in compliance with control of the memory controller <b>6200</b>. The flash memory <b>6100</b> stores read count data <b>6105</b>. The read count data <b>6105</b> can be stored even in meta-block of the flash memory <b>6100</b> or in a user data field of the flash memory <b>6100</b>. The read count data <b>6105</b> means the number of reading operation times of the flash memory <b>6100</b>. The read count data <b>6105</b> will be described in detail hereinafter.</p>
<p id="p-0569" num="0568">The memory controller <b>6200</b> provides a read command RD_CMD, an address ADDR, and a control signal CTRL to the flash memory <b>6100</b> in a reading operation. The flash memory <b>6100</b> inputs the read command and address from the memory controller <b>6200</b> and provides a read voltage to a corresponding word line.</p>
<p id="p-0570" num="0569">The memory controller <b>6200</b> includes a memory interface <b>6210</b>, a host interface <b>6220</b>, an ECC circuit <b>6230</b>, a central processing unit (CPU) <b>6240</b>, and a buffer memory <b>6250</b>. The buffer memory <b>6250</b> is used as a working memory of the CPU <b>6240</b>. The buffer memory <b>6250</b> can be implemented by a random access memory (RAM). The host interface <b>6220</b> is comprised of protocol necessary for exchanging data with a host.</p>
<p id="p-0571" num="0570">The ECC circuit <b>6230</b> is used for analyzing and correcting a bit error of data stored in the flash memory <b>6100</b>. The memory interface <b>6210</b> is directly connected to the flash memory <b>6100</b> and used for exchanging a command, an address, and a control signal. The CPU <b>6240</b> conducts overall control operations for data exchange of the memory controller <b>6200</b>. Although not shown, it will be appreciated by those skilled in the art that the semiconductor memory device <b>100</b> is further comprised of a ROM (not shown) storing code data for interfacing with a host.</p>
<p id="p-0572" num="0571">The memory system <b>6010</b> according to the present invention stores the read count data <b>6105</b> into the flash memory <b>6100</b> in order to prevent a read fail of the flash memory <b>6100</b>. The memory controller <b>6200</b> increases and periodically updates the read count data <b>6105</b> every reading operation by means of the buffer memory <b>6250</b>. The memory system <b>6010</b> according to the present invention refreshes a corresponding memory block of the flash memory <b>6100</b> if the read count data <b>6105</b> reaches a read fail permission range. According to the present invention, it is able to preliminarily prevent a read fail.</p>
<p id="p-0573" num="0572">Additionally, the memory system <b>6010</b> according to the present invention is able to raise the reliability of the read count data that acts as a reference of flash programming and refreshing cycles. The flash programming and refreshing cycles will be detailed hereinafter. Especially, the memory system <b>6010</b> periodically updates the read count data to the flash memory <b>6100</b> in a normal operation and compensates the read count data in a sudden power-off mode, enhancing the reliability of the read count data <b>6105</b>.</p>
<p id="p-0574" num="0573"><figref idref="DRAWINGS">FIG. 80</figref> is a block diagram showing the flash memory shown in <figref idref="DRAWINGS">FIG. 79</figref>. Referring to <figref idref="DRAWINGS">FIG. 80</figref>, the flash memory <b>6100</b> includes a memory cell array <b>6110</b>, a data input/output circuit <b>6120</b>, an address decoder <b>6130</b>, and a control logic circuit <b>6140</b>.</p>
<p id="p-0575" num="0574">The memory cell array <b>6110</b> includes pluralities of memory blocks, e.g., BLK<b>1</b>&#x2dc;BLK<b>1024</b>. Each memory block is formed of plural pages. Each page is formed of plural memory cells. The memory cell stores single bit data or multi-bit data. The flash memory conducts an erasing operation in the unit of memory block and conducts a reading or writing operation in the unit of page.</p>
<p id="p-0576" num="0575">Referring to <figref idref="DRAWINGS">FIG. 80</figref>, the memory cell array <b>6110</b> can be divided into pluralities of sections. Each section is formed of the plural memory blocks. For instance, a first section is composed of first through fourth memory blocks BLK<b>1</b>&#x2dc;BLK<b>4</b> and a 256th section is composed of 1021st through 1024th memory blocks BLK<b>1021</b>&#x2dc;BLK<b>1024</b>. In this invention, the reason for dividing the memory cell array <b>6110</b> into the sections is to prevent degradation of the memory system <b>6010</b> in performance while compensating the read count data.</p>
<p id="p-0577" num="0576">In the meantime, although not shown in <figref idref="DRAWINGS">FIG. 80</figref> (see <figref idref="DRAWINGS">FIG. 81</figref>), each memory block includes a string selection transistor connected to a string selection line (SSL), memory cells connected to pluralities of word lines WL, and a ground selection transistor connected to a ground selection line (GSL). The string selection transistor is connected to a bit line BL, and the ground selection transistor is connected to a common source line (CSL).</p>
<p id="p-0578" num="0577">During a reading operation, the flash memory <b>6100</b> applies a power source voltage (Vcc) to the string selection line (SSL) and the ground selection line (GSL). A selective read voltage (Vrd) is applied to a selected word line and a deselective read voltage (Vread) is applied to unselected word lines. Here, the deselctive read voltage (Vread) is a voltage enough to turn on a memory cell connected to the unselected word line.</p>
<p id="p-0579" num="0578">The data input/output circuit <b>6120</b> is connected to the memory cell array <b>6110</b> through pluralities of bit lines BL. The data input/output circuit <b>6120</b> inputs data DATA by way of a data input/output line (not shown). The input data is stored in a corresponding memory cell. Meantime, the data input/output circuit <b>6120</b> reads data from a memory cell through the bit line BL. Read data is output to external through the data input/output line.</p>
<p id="p-0580" num="0579">The address decoder <b>6130</b> is connected to the memory cell array <b>6110</b> through the plural word lines WL. The address decoder <b>6130</b> inputs an address ADDR and selects a memory block or page. Here, an address for selecting a memory block is referred to as block address and an address for selecting a page is referred to as page address.</p>
<p id="p-0581" num="0580">The control logic circuit <b>6140</b> controls the data input/output circuit <b>6120</b> and the address decoder <b>6130</b> in response to a command CMD and a control signal CTRL. Here, the control signal CTRL is provided from the memory interface <b>6210</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>). Meanwhile, the control logic circuit <b>6140</b> generates bias voltages to be provided to the word lines in the writing, reading, and erasing operations.</p>
<p id="p-0582" num="0581">During the reading operation, the control logic circuit <b>6140</b> generates the selective read voltage (Vrd) provided to a selected word line and the deselective read voltage (Vread) provided to unselected word lines. Generally, the deselective read voltage (Vread) is higher than the selective read voltage (Vrd).</p>
<p id="p-0583" num="0582"><figref idref="DRAWINGS">FIG. 81</figref> is a diagram for illustrating a cell string of the flash memory shown in <figref idref="DRAWINGS">FIG. 80</figref> and a read fail. Referring to <figref idref="DRAWINGS">FIG. 81</figref>, between the common source line CSL and the bit line BLk are serially connected the ground selection transistor, the plural memory cells, and the string selection transistor. The ground selection transistor is connected to the ground selection line GSL, the plural memory cells are connected to the plural word lines WL<b>0</b>&#x2dc;WL<b>31</b>, and the string selection transistor is connected to the string selection line SSL.</p>
<p id="p-0584" num="0583">During the reading operation, the selective read voltage Vrd (about 0V) is applied to a selected word line (e.g., WL<b>8</b>) and the deselective read voltage Vread (about 4.5V) is applied to the unselected word lines WL<b>0</b>&#x2dc;WL<b>7</b> and WL<b>9</b>&#x222b;WL<b>31</b>. Here, the deselective read voltage Vread is a voltage enough to turn on the memory cells connected to the unselected word lines WL<b>0</b>&#x2dc;WL<b>7</b> and WL<b>9</b>&#x2dc;WL<b>31</b>.</p>
<p id="p-0585" num="0584">If a selected memory cell M<b>8</b> is softly programmed, a read fail occurs from the selected memory cell M<b>8</b>. Here, soft programming means that a threshold voltage of the memory cell M<b>8</b> conditioned in an erased state E increases due to read disturbance. In <figref idref="DRAWINGS">FIG. 81</figref>, the hatching area denotes that memory cells of the erased state E are softly programmed. If a threshold voltage of the selected memory cell M<b>8</b> becomes higher than the selective read voltage Vrd due to soft programming, a read fail occurs. That is, a memory cell of the erased state E is read as being in a programmed state P. This bit error is referred to as read fail due to soft programming.</p>
<p id="p-0586" num="0585"><figref idref="DRAWINGS">FIGS. 82 and 83</figref> illustrate an example that a selected memory cell is softly programmed. Referring to <figref idref="DRAWINGS">FIG. 82</figref>, memory cells of the erased state E have threshold voltages between &#x2212;3V and &#x2212;1V and memory cells of the programmed state P have threshold voltages between +1V and +3V. The selective read voltage Vrd provided to the selected word line WL<b>8</b> (refer to <figref idref="DRAWINGS">FIG. 81</figref>) is about 0V. The deselective read voltage Vread provided to the unselected word lines WL<b>0</b>&#x2dc;WL<b>7</b> and WL<b>9</b>&#x2dc;WL<b>31</b> (refer to <figref idref="DRAWINGS">FIG. 81</figref>) is about 4.5V.</p>
<p id="p-0587" num="0586">In the meantime, the flash memory conducts the reading operation in the unit of page. It is assumed that the reading operation is carried out to all pages (e.g., 32 pages) of the memory block. During this, the selective read voltage Vrd of one time and the deselective read voltage Vread of 31 times are applied to each word line. If the deselective read voltage Vread higher than the power source voltage (Vcc) is repeatedly applied to a gate of a memory cell, the memory cell is stressed.</p>
<p id="p-0588" num="0587">As show in <figref idref="DRAWINGS">FIG. 83</figref>, if the deselective read voltage Vread is repeatedly applied to a control gate CG of a memory cell, electrons may flow into a floating gate from a channel. At this time, a memory cell (on-cell) of the erased state E increases in threshold voltage. If a threshold voltage of the memory cell of the erased state E increases over &#x2212;1V, the memory cell does not have a sufficient read margin. The threshold voltage of the memory cell becomes higher than the selective read voltage Vrd, it can be read as a memory cell of the programmed state P.</p>
<p id="p-0589" num="0588">As such, if threshold voltages of the memory cells increase by the repetitive applying of the deselective read voltage Vread, a read fail occurs due to the soft programming. The hatching area of <figref idref="DRAWINGS">FIG. 82</figref> shows a result of increasing threshold voltages of the memory cells. If threshold voltages of the memory cells increase due to read fails by soft programming, the memory cells lose their data storage capability.</p>
<p id="p-0590" num="0589">On the other side, it is steadily demanding for the flash memory <b>6100</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) in extending data storage capacity, raising reading and writing rates, and safely protecting important data. For this requirement, the flash memory is being designed to coincidently have a memory block storing multi-bit data (hereinafter, referred to as MLC block) and a memory block storing single bit data (hereinafter, referred to as SLC block) in the memory cell array.</p>
<p id="p-0591" num="0590"><figref idref="DRAWINGS">FIG. 84</figref> is a flow chart showing a read fail preventing method of the memory system according to an embodiment of the present invention. According to the read fail preventing method by the present invention, the memory system <b>6010</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) preliminarily prevents a read fail, which is caused by soft programming, by means of flash programming and refreshing cycles.</p>
<p id="p-0592" num="0591">In a step S<b>6110</b>, the reading operation is carried out to a memory block BLKn. Here, the reading operation is conducted to a selected page of the memory block BLKn. The selective read voltage Vrd is provided to a word line of the selected page and the deselective read voltage Vread is provided to word lines of the rest unselected pages.</p>
<p id="p-0593" num="0592">In a step S<b>6120</b>, the read count data to the memory block BLKn increases. Although not shown in <figref idref="DRAWINGS">FIG. 84</figref>, the read count data <b>6105</b> stored in the flash memory <b>6100</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) is loaded into the buffer memory <b>6250</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) at a power-on time. The memory controller <b>6130</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) increases the read count data whenever conducting the reading operation to the memory block BLKn.</p>
<p id="p-0594" num="0593">In a step S<b>6130</b>, the memory controller <b>6200</b> determines whether the read count data correspond to the flash programming cycle. Here, the flash programming cycle means a cycle for periodically programming the read count data, which is restored in the buffer memory <b>6250</b>, into the flash memory <b>6100</b>. For example, if the flash programming cycle is 100, the memory system <b>6010</b> updates the read count data into the flash memory <b>6100</b> whenever the read count data reaches 100, 200, 300, . . . , etc. If the flash programming cycle is 1000, the memory system <b>6010</b> updates the read count data into the flash memory <b>6100</b> whenever the read count data reaches 1000, 2000, 3000, . . . , etc.</p>
<p id="p-0595" num="0594">In a step S<b>6140</b>, the read count data is programmed into the flash memory <b>6100</b>. In other words, if the read count data reaches the flash programming cycle in the step S<b>6130</b>, the memory system <b>6010</b> programs the read count data, which is stored in the buffer memory <b>6250</b>, into the flash memory <b>6100</b> in the step S<b>6140</b>.</p>
<p id="p-0596" num="0595">In a step S<b>6150</b>, the memory controller or flash memory determines whether the read count data corresponds to the refreshing cycle. Here, the refreshing cycle means a cycle for reprogramming the memory block BLKn. The refreshing cycle is variable by a programming-erasing (PE) cycle. Table 3 exemplarily shows the refreshing cycles to the PE cycle.</p>
<p id="p-0597" num="0596">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="center"/>
<colspec colname="2" colwidth="126pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" rowsep="1">TABLE 3</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>PE cycle</entry>
<entry>Refreshing cycle</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>0.1K</entry>
<entry>500K</entry>
</row>
<row>
<entry/>
<entry>0.5K</entry>
<entry>300K</entry>
</row>
<row>
<entry/>
<entry>1.0K</entry>
<entry>100K</entry>
</row>
<row>
<entry/>
<entry>5.0K</entry>
<entry>&#x2002;30K</entry>
</row>
<row>
<entry/>
<entry>less than 5.0K</entry>
<entry>&#x2002;10K</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0598" num="0597">From Table 3, if the PE cycle is 0.1K (K=1000), the refreshing cycle is 500K. If the PE cycle is 0.5K, the refreshing cycle is 300K. If the PE cycle is 1.0K, the refreshing cycle is 100K. If the PE cycle is 5.0K, the refreshing cycle is 30K. If the PE cycle is less than 5.0K, the refreshing cycle is 10K. Meanwhile, the refreshing cycle is variable in accordance with the SLC or MLC flash memory. In general, the refreshing cycle is set to be higher because the SLC flash memory is better than the MLC flash memory in security to bit error.</p>
<p id="p-0599" num="0598">In a step S<b>6160</b>, if the read count data reaches the refreshing cycle, the memory controller or flash memory refreshes the memory block BLKn and initiates the read count data. There are several ways to refresh the memory block BLKn. One of the ways is to program the memory block BLKn into another memory block. Another way is carried out by, after temporarily moving data from the memory block BLKn to another memory block, erasing the memory block BLKn and then reprogramming the memory block BLKn with the temporarily moved data. Any refreshing way may be helpful to preliminarily prevent a read fail that is caused by soft programming.</p>
<p id="p-0600" num="0599">In a step S<b>6170</b>, the read count data is programmed into the flash memory <b>6100</b>. That is, the initialized read count data is programmed into the flash memory <b>6100</b> during the step S<b>6150</b>. The step S<b>6170</b> is an operation for initializing the previous read count data stored in the flash memory <b>6100</b>.</p>
<p id="p-0601" num="0600">The read fail preventing method according to the present invention is able to preliminarily prevent a read fail due to soft programming by periodically updating the read count data and refreshing the flash memory <b>6100</b> according to a refreshing cycle.</p>
<p id="p-0602" num="0601"><figref idref="DRAWINGS">FIG. 85</figref> is a flow chart showing another embodiment of the read fail preventing method for the memory system according to the present invention. The memory system <b>6010</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) is operable in various modes such as sleep mode, idle mode, standby mode, active mode, and so on.</p>
<p id="p-0603" num="0602">If there is a change of mode (S<b>6210</b>), the memory system <b>6010</b> programs the read count data into the buffer memory <b>6250</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) (step S<b>6220</b>). Here, an operation of programming the read count data into the flash memory <b>6100</b> may be only at the time of change to a specific mode. For instance, the operation of programming the read count data into the flash memory <b>6100</b> may be carried out only when the active mode turns to the idle, sleep, or standby mode.</p>
<p id="p-0604" num="0603"><figref idref="DRAWINGS">FIG. 86</figref> is a flow chart for illustrating a method of compensating the read count data if sudden power-off occurs. Here, the sudden power-off means that power is abruptly shut off inadvertently due to various reasons such as carelessness during an operation of the memory system <b>6010</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>). The memory system according to the present invention <b>6010</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) effectively prevents a read fail due to soft programming by compensating the read count data with a proper value at the sudden power-off time.</p>
<p id="p-0605" num="0604">In a step S<b>6310</b>, it is assumed that during an operation of the memory system <b>6010</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>), the sudden power-off occurs in the memory system <b>6010</b>. If the sudden power-off occurs, the flash memory <b>6100</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) retains data but the buffer memory <b>6250</b> (refer to <figref idref="DRAWINGS">FIG. 79</figref>) loses data stored therein. Thus, when the sudden power-off occurs, the read count data stored in the buffer memory <b>6250</b> is lost while the read count data stored in the flash memory <b>6100</b> is maintained.</p>
<p id="p-0606" num="0605">In an initializing operation of the memory system <b>6010</b>, the read count data stored in the flash memory <b>6100</b> is loaded into the buffer memory <b>6250</b>. Whenever conducting the reading operation to the flash memory <b>6100</b>, the read count data stored in the buffer memory <b>6250</b> increases.</p>
<p id="p-0607" num="0606">Otherwise the read count data stored in the flash memory <b>6100</b> is updated only by an additional flash programming operation. Thus, since the read count data stored in the buffer memory <b>6250</b> is lost if the sudden power-off occurs, there is no way of learning the read count data corresponding to the sudden power-off time. The memory system <b>6010</b> according to the present invention is provided with a method capable of compensating the read count data when the sudden power-off occurs.</p>
<p id="p-0608" num="0607">In a step S<b>6320</b>, the memory system <b>6010</b> is powered on again. Here, a power-on operation is an initializing operation activated after the sudden power-off. In a step S<b>6330</b>, the read count data is loaded into the buffer memory <b>6250</b> from the flash memory <b>6100</b>.</p>
<p id="p-0609" num="0608">In a step S<b>6340</b>, the reading operation is carried out to the memory block BLKn. In a step S<b>6350</b>, the memory controller detects a section including the memory block BLKn. Here, the section includes pluralities of the memory blocks BLK<b>1</b>&#x2dc;BLK<b>4</b> as shown in <figref idref="DRAWINGS">FIG. 80</figref>.</p>
<p id="p-0610" num="0609">In a step S<b>6360</b>, the memory system <b>6010</b> compensates the read count data of all the memory blocks included in the detected section. For instance, it is assumed that the flash programming cycle of the read count data is 100, the detected section is Sectionl (refer to <figref idref="DRAWINGS">FIG. 80</figref>), and the read count data before compensating the memory blocks BLK<b>1</b>&#x2dc;BLK<b>4</b> is as shown in Table 4.</p>
<p id="p-0611" num="0610">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="63pt" align="center"/>
<colspec colname="4" colwidth="77pt" align="center"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="4" rowsep="1">TABLE 4</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Read count</entry>
<entry>Read count</entry>
</row>
<row>
<entry/>
<entry>Section</entry>
<entry>Block</entry>
<entry>before compensation</entry>
<entry>after compensation</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>BLK1</entry>
<entry>120</entry>
<entry>(120 + 50)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>BLK2</entry>
<entry>319</entry>
<entry>(319 + 50)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>BLK3</entry>
<entry>418</entry>
<entry>(418 + 50)</entry>
</row>
<row>
<entry/>
<entry/>
<entry>BLK4</entry>
<entry>502</entry>
<entry>(502 + 50)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0612" num="0611">In Table 4, a compensation value of the read count data is set to 50 that is an intermediate of the flash programming cycle <b>100</b>. The read count data after compensation are set to 170, 369, 468, and 552, respectively. But the compensation value of the read count data may be set to another value within the range of the flash programming cycle.</p>
<p id="p-0613" num="0612">From Table 4, if the reading operation is carried out to the memory block BLK<b>1</b>, it compensates the read count data to the memory blocks BLK<b>1</b>&#x2dc;BLK<b>4</b> included in the first section. Next, if the reading operation is carried out to the memory block BLK<b>1021</b>, it compensates the read count data to the memory blocks BLK<b>1021</b>&#x2dc;BLK<b>1024</b> included in the 256th section.</p>
<p id="p-0614" num="0613">The memory system <b>6010</b> according to the present invention does not compensate the read count data for all data blocks BLK<b>1</b>&#x2dc;BLK<b>1024</b> (refer to <figref idref="DRAWINGS">FIG. 80</figref>) at the sudden power-off time. Instead of that, it compensates the read count data for a section including a memory block where the reading operation is carried out. According to the present invention, it is able to prevent performance degradation of the memory system which is caused from compensating the read count data for all of the memory blocks.</p>
<p id="p-0615" num="0614">In the meantime, the memory system <b>6010</b> according to the present invention may include a subsidiary battery in preparation for the sudden power-off. If the sudden power-off occurs, the memory system <b>6010</b> updates the read count data to into the flash memory <b>6100</b> by means of the subsidiary battery.</p>
<p id="p-0616" num="0615">The memory system <b>6010</b> according to the present invention is applicable with an MLC flash memory. <figref idref="DRAWINGS">FIG. 87</figref> is a diagram exemplarily showing cell threshold voltage distributions of an MLC flash memory. <figref idref="DRAWINGS">FIG. 87</figref> shows threshold voltage distributions of multi-level cells with four levels. The memory cell has one of the four states E, P<b>1</b>, P<b>2</b>, and P<b>3</b>.</p>
<p id="p-0617" num="0616">During the reading operation, the selective read voltages Vrd<b>1</b> Vrd<b>2</b>, and Vrd<b>3</b> are applied to the selected word line WL<b>8</b> (refer to <figref idref="DRAWINGS">FIG. 81</figref>) and the deselective read voltage Vread is applied to the unselected word lines WL<b>0</b>&#x2dc;WL<b>7</b> and WL<b>9</b>&#x2dc;WL<b>31</b> (refer to <figref idref="DRAWINGS">FIG. 81</figref>). The first selective read voltage Vrd<b>1</b> has a voltage level between the erased state E and the first programmed state P<b>1</b>. The second selective read voltage Vrd<b>2</b> has a voltage level between the first and second programmed states P<b>1</b> and P<b>2</b>. The third selective read voltage Vrd<b>3</b> has a voltage level between the second and third programmed states P<b>2</b> and P<b>3</b>.</p>
<p id="p-0618" num="0617">Meanwhile, program-verifying voltages Vvf<b>1</b>, Vvf<b>2</b>, and Vvf<b>3</b> are provided to a selected word line during a program-verifying operation. The first program-verifying voltage Vvf<b>1</b> is a voltage for programming the memory cell in the first programmed state P<b>1</b>. The second program-verifying voltage Vvf<b>2</b> is a voltage for programming the memory cell in the second programmed state P<b>2</b>. The third program-verifying voltage Vvf<b>3</b> is a voltage for programming the memory cell in the third programmed state P<b>3</b>.</p>
<p id="p-0619" num="0618"><figref idref="DRAWINGS">FIG. 88</figref> is a flow chart showing a method of assuring the flash memory in data the reliability. <figref idref="DRAWINGS">FIG. 88</figref> shows a method for repairing a bit error. In the flash memory, a bit error may occur for various reasons such as program disturbance or read disturbance, or by soft programming as aforementioned.</p>
<p id="p-0620" num="0619">The flash memory uses the ECC circuit for repairing such a bit error. However a sphere of repairing bit errors by the ECC circuit is limited just to a certain number of bits. For instance, if the ECC circuit is capable of curing 4 bit errors, it is unable to repair bit errors more than 4 bits. <figref idref="DRAWINGS">FIG. 88</figref> shows an error bit repairing method for this case.</p>
<p id="p-0621" num="0620">In a step S<b>6410</b>, the ECC circuit determines whether a bit error is correctable. From the aforementioned case, error bits more than 4 bits are incorrectable and error bits less than 4 bits are correctable. If it is possible to correct bit errors, the ECC circuit is used for repairing the bit errors. But if it is impossible to correct bit errors by the ECC circuit, an error detecting and correcting operation is carried out after shifting a level of the read voltage Vrd.</p>
<p id="p-0622" num="0621">In a step S<b>6420</b>, the flash memory shifts the first read voltage Vrd<b>1</b> and conducts the error detecting and correcting operation. The flash memory cell may be over-programmed, even though it has been conditioned in the erased state, because of program disturbance or read disturbance on the structural property. For this case, as shown in <figref idref="DRAWINGS">FIG. 88</figref>, the reading operation with reference to the first read voltage Vrd<b>1</b> may cause the over-programmed memory cells to be partly read as off-cells. If the over-programmed memory cells are out of the range of ECC correction, there is no way of repairing bit errors by a conventional method. The present invention offers the error detecting and correcting operation by increasing the first read voltage Vrd<b>1</b> in a predetermined voltage unit so as to make the over-programmed memory cell read as an on-cell.</p>
<p id="p-0623" num="0622">In a step S<b>6430</b>, after shifting the first read voltage Vrd<b>1</b>, the ECC circuit determines whether there is a bit error. If there is no bit error or correctable bit error, the procedure of repairing bit error is completed. If there is uncorrectablebit error, the first read voltage Vrd<b>1</b> is shifted again. In a step S<b>6440</b>, it determines whether an ECC looping count is M (M is a natural number).</p>
<p id="p-0624" num="0623">In a step S<b>6450</b>, if the ECC looping count is repeated in M times, the ECC circuit shifts the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> and then conducts the error detecting and correcting operation. Here, levels of the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> can be shifted alternately as like +a, &#x2212;a, +b, and &#x2212;b (a and b are natural numbers). This is because it is hard to learn whether threshold voltages of the memory cells have been shifted left or right.</p>
<p id="p-0625" num="0624">In a step S<b>6460</b>, after shifting the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b>, the ECC circuit determines whether there is a correctable bit error. If there is no bit error or correctable bit error, the procedure of repairing bit error is completed. If there is uncorrectable bit error, the first through third read voltages Vrd<b>1</b>, Vrd<b>2</b>, and Vrd<b>3</b> are shifted again. In a step S<b>6470</b>, it determines whether the ECC looping count is M (M is a natural number). The memory system according to the present invention is able to cure bit errors caused by another reason, but bit errors due to temperature variation.</p>
<p id="p-0626" num="0625"><figref idref="DRAWINGS">FIG. 89</figref> is a block diagram showing a computer system including a memory system according to the present invention. Referring to <figref idref="DRAWINGS">FIG. 89</figref>, the computer system <b>6700</b> includes a memory system <b>6710</b>, a power supply unit <b>6720</b>, a CPU <b>6730</b>, a buffer memory <b>6740</b>, a user interface <b>6750</b>, and a system bus <b>6760</b>.</p>
<p id="p-0627" num="0626">The memory system <b>6710</b> includes a flash memory <b>6711</b> and a memory controller <b>6712</b>. The memory system <b>6710</b> may be designed by employing a unit product of the flash memory or an integrated circuit such as one NAND&#x2122; memory. The flash memory <b>6711</b> inputs a read command and an address from the memory controller <b>6712</b>, analyzes an error correction code (ECC), and controls the selective read voltage Vrd and the deselective read voltage Vread.</p>
<p id="p-0628" num="0627">The memory system <b>6710</b> is electrically connected to the power supply unit <b>6720</b>, the CPU <b>6730</b>, the buffer memory <b>6740</b>, and the user interface <b>6750</b> through the system bus <b>6760</b>. In the flash memory <b>6711</b> are stored data, which are provided through the user interface <b>6750</b> or processed by the CPU <b>6730</b>, by way of the memory controller <b>6712</b>.</p>
<p id="p-0629" num="0628">If the memory system <b>6710</b> is built in a semiconductor solid state disk (SSD), a booting rate of the computer system <b>6700</b> can be greatly enhanced. Although not shown, the computer system shown in <figref idref="DRAWINGS">FIG. 89</figref> may be used in an application chipset, a camera image processor, or so forth.</p>
<p id="p-0630" num="0629">The memory system may be mounted by way of various types of packages. For instance, the flash memory device and/or the memory controller may be placed thereon by any package type, e.g., Package-on-Package (PoP), Ball Grid Arrays (BGAs), Chip Scale Packages (CSPs), Plastic Leaded Chip Carrier (PLCC), Plastic Dual In-line Package (PDIP), Die in Waffle Pack, Die in Wafer Form, Chip-On-Board (COB), CERamic Dual In-line Package (CERDIP), Plastic Metric Quad Flat Pack (MQFP), Thin Quad Flat Pack (TQFP), Small Outline (SOIC), Shrink Small Outline Package (SSOP), Thin Small Outline (TSOP), Thin Quad Flat Pack (TQFP), System In Package (SIP), Multi-Chip Package (MCP), Wafer-level Fabricated Package (WFP), Wafer-level Processed Stack Package (WSP), or Wafer-level Processed Package (WSP).</p>
<p id="p-0631" num="0630">A flash memory system according to a sixth embodiment of the present invention may achieve high data reliability by saving read count data. In addition, the flash memory system according to the sixth embodiment of the present invention may achieve speed-up by means of the multi-thread function described in the first embodiment, the free page described in the second embodiment, and the microcode described in the third embodiment as well as by saving read count data. Performance of the flash memory system according to the sixth embodiment of the present invention may be improved through achievement of high data reliability and speed-up.</p>
<heading id="h-0020" level="1">Embodiment 7</heading>
<heading id="h-0021" level="1">Flash Memory Device Managing Read History</heading>
<p id="p-0632" num="0631">Error detection and correction techniques effectively recover data from damage caused by various factors. For example, data can be corrupted due to various factors while storing data in a memory and also due to perturbations of a data transmission channel during transmitting data from a source to a destination.</p>
<p id="p-0633" num="0632">Suggested are various methods for detecting and correcting damaged data. As well-known error detection techniques are a reed-solomon (RS) code, a hamming code, a bose-chaudhuri-hocquenghem (BCH) code, a cyclic redundancy code (CRC), etc. It is possible to detect and correct corrupted data through the above codes.</p>
<p id="p-0634" num="0633">In most application fields where non-volatile memory devices are used, data and an error correcting code (ECC) value, (hereinafter referred to as ECC data) are stored together in a flash memory device. The ECC data are used for correcting errors that occur during a read operation of a flash memory device, and the number of bit errors correctible using the ECC data is limited.</p>
<p id="p-0635" num="0634">The bit errors occurring during a read operation can be corrected through the error detection and correction techniques without an additional recovery process such as well-known block replacement. On the contrary, if bit errors occurring during a read operation is not correctible, data stored in a memory block having the bit errors will be lost.</p>
<p id="p-0636" num="0635"><figref idref="DRAWINGS">FIG. 90</figref> is a block diagram of a computing system according to exemplary embodiments of the present invention. <figref idref="DRAWINGS">FIG. 91</figref> is a block diagram of a memory controller of <figref idref="DRAWINGS">FIG. 90</figref> according to exemplary embodiments of the present invention.</p>
<p id="p-0637" num="0636">Referring to <figref idref="DRAWINGS">FIG. 90</figref>, the computing system includes a host <b>7100</b> and a memory-based storage device <b>7200</b>. The memory-based storage device <b>7200</b> stores data or outputs its stored data in response to a request of the host <b>7100</b>. The memory-based storage device <b>7200</b> is connected to the host <b>7100</b> through a serial AT attachment (SATA) interface, a parallel AT attachment (PATA) interface, a small computer system interface (SCSI), an enhanced small disk interface (ESDI), an integrated drive electronics (IDE) interface, a multi-media card (MMC) interface, a SD interface, or like interfaces. However, it is apparent to those skilled in the art that an interface between the host <b>7100</b> and the memory-based storage device <b>7200</b> is not limited to the above interfaces. Also, the host <b>7100</b> and the memory-based storage device <b>7200</b> can be connected to each other through at least two such interfaces.</p>
<p id="p-0638" num="0637">The memory-based storage device <b>7200</b> includes a controller <b>7220</b> and a storage medium <b>7240</b>. According to exemplary embodiments of the present invention, the storage medium <b>7240</b> is formed of a flash memory. However, it is apparent to those skilled in the art that the storage medium <b>7240</b> is not limited to the flash memory. For example, non-volatile memories such as a phase change memory, a magnetroresistive memory, etc. may be used as the storage medium <b>7240</b>. For convenience of explanation, the storage medium <b>7240</b> is only formed of one flash memory as illustrated in <figref idref="DRAWINGS">FIG. 90</figref>. The controller <b>7220</b>, as illustrated in <figref idref="DRAWINGS">FIG. 91</figref>, includes a host interface <b>7222</b>, a flash interface <b>7223</b>, a processing unit <b>7224</b>, a buffer memory <b>7225</b>, and an error checking and correcting (ECC) circuit <b>7226</b>. These components are well-known to those skilled in the art.</p>
<p id="p-0639" num="0638">In the memory-based storage device <b>7200</b>, the controller <b>7220</b> is configured to manage the flash memory <b>7240</b>. For example, the controller <b>7220</b> manages a read history of the flash memory <b>7240</b> in order to improve reliability of the memory-based storage device <b>7200</b>. The read history includes the number of error bits, error bit positions, plain information, die information, refresh information, etc. The controller <b>7220</b> manages memory blocks of the flash memory <b>7240</b> based on the read history. For example, the controller <b>7220</b> manages the memory blocks of the flash memory <b>7240</b> to be processed as a bad bock or a limited-purpose memory block according to the read history.</p>
<p id="p-0640" num="0639">The memory-based storage device <b>7200</b> records characteristic read history information (e.g., the number of error bits, error bit positions, plain information, die information, refresh information, etc.), which can be observed during a read operation, and also designates a memory block having a high possibility of problem occurrence as a danger block based on the read history information. Therefore, the memory-based storage device <b>7200</b> restricts the available usage of the danger block. For example, the memory-based storage device <b>7200</b> operates by managing the danger block as a different block from a general block. Through this management method, reliability of the memory-based storage device <b>7200</b> can be improved.</p>
<p id="p-0641" num="0640">According to a typical memory management method, based on whether an operation, requested through a result value of a program or erase operation, is successful or not, a method for determining a block of the requested operation as a defective block has been used until now. That is, whether a memory block is processed as a bad block or not is determined based on a result value of a program or erase operation. As the minimum feature size of a memory device is microminiaturized and its capacity is increased, reliability of a memory device becomes deteriorated. Accordingly, when a read operation is performed on a memory bock where a result of a program or erase operation is successful, possibility that data errors occur is gradually increased. Moreover, as aging of a memory device due to continuous usage of a memory device is progressed, circuit defects (i.e., physical defects) will be increased. That is, a progressive defect will be increased. In this case, data read from a memory block, (e.g., a danger block) having those circuit defects also have a high possibility that error correction is impossible.</p>
<p id="p-0642" num="0641">Accordingly, the memory-based storage device <b>7200</b> manages a read history of memory blocks, such that reliability deterioration due to a danger block can be prevented. This will be described in more detail below.</p>
<p id="p-0643" num="0642"><figref idref="DRAWINGS">FIG. 92</figref> is a flowchart illustrating a read process of a memory-based storage device according to exemplary embodiments of the present invention. Hereinafter, the read process of the memory-based storage device will be described in more detail with reference to the accompanying drawings.</p>
<p id="p-0644" num="0643">Once a read operation is requested from the host <b>7100</b>, data are read from the flash memory <b>7240</b> as a storage medium in operation S<b>7100</b>. As well-known, the read data are temporarily stored on the buffer memory <b>7225</b> of the controller <b>7220</b>. Simultaneously, the controller <b>7220</b> determines whether an error occurs or not in the data read through the ECC circuit <b>7226</b> in operation S<b>7110</b>. If there is no error in the read data, it proceeds to operation S<b>7130</b>. On the contrary, if there is an error in the read data, it proceeds to operation S<b>7120</b>. In operation S<b>7120</b>, the controller <b>7220</b> corrects an error of the data read through the ECC circuit <b>7226</b>. Furthermore, the controller <b>7220</b> updates a read history (i.e., an error history) with respect to a memory block from which data are read. Thereafter, it proceeds to operation S<b>7130</b>. In operation S<b>7130</b>, the read data are transferred to an external device, i.e., the host <b>7100</b>.</p>
<p id="p-0645" num="0644">Here, the controller <b>7220</b> of the memory-based storage device <b>7200</b>, as illustrated in <figref idref="DRAWINGS">FIG. 90</figref>, includes a table <b>7221</b> (hereinafter, referred to as a read history table) for managing a read history. The read history table <b>7221</b> stores an error history such as the number of error bits, error bit positions, plain information, etc. This read history table <b>7221</b> is stored in the flash memory <b>7240</b>. The read history table <b>7221</b> is loaded from the flash memory <b>7240</b> into the buffer memory <b>7225</b> during power-up, and, if necessary, is backup/restored to the flash memory <b>7240</b>.</p>
<p id="p-0646" num="0645"><figref idref="DRAWINGS">FIG. 93</figref> is a flowchart illustrating a block management method of the memory-based storage device <b>7200</b> according to exemplary embodiments of the present invention. <figref idref="DRAWINGS">FIG. 94</figref> is a view illustrating a refresh operation according to exemplary embodiments of the present invention.</p>
<p id="p-0647" num="0646">The memory-based storage device <b>7200</b> will be configured to refresh a memory block based on a read history. For example, the controller <b>7220</b> analyzes the read history information (e.g., the number of error bits) of the table <b>7221</b> to control a refresh operation of the memory block. In more detail, in operation S<b>7200</b>, the controller <b>7220</b> fetches the read history of the read history table <b>7221</b>. Then, in operation S<b>7210</b>, the controller <b>7220</b> determines whether the number of error bits in an arbitrary memory block exceeds a desired (or, alternatively predetermined) number of error bits (or, the reference number of error bits) or not, based on the read history. That is, the controller <b>7220</b> determines whether there are memory blocks to be refreshed or not according to a test result. If there is no memory blocks to be refreshed, its process will be terminated. If there are memory blocks to be refreshed, it proceeds to operation S<b>7220</b>.</p>
<p id="p-0648" num="0647">In operation S<b>7220</b>, the controller <b>7220</b> controls the flash memory <b>7240</b> to refresh the memory blocks exceeding the reference number of bit errors. More detailed description will be made with reference to <figref idref="DRAWINGS">FIG. 94</figref>. As illustrated in <figref idref="DRAWINGS">FIG. 94</figref>, data of a memory block to be refreshed is copied to a free block in operation <b>7001</b>. Then, the memory block to be refreshed is erased in operation <b>7002</b>. Finally, data stored in the free block is copied to the memory block in operation <b>7003</b>. The memory block is refreshed through the above operations. Then, the free block is erased.</p>
<p id="p-0649" num="0648">When the number of error bits is increased, possibility of read error occurrence becomes higher. If a read error occurs, data will be lost. Due to this, data loss can be prevented by refreshing a memory block according to whether the number or error bits of the memory block exceeds the reference number of error bits or not. Because memory cells are stressed due to a repeating read operation, the number of error bits can be increased. That is, a read error may be caused by read/program/erase operational stress. Hereinafter, a read error due to the stress will be referred to as a stress-based defect. Accordingly, the stress-based defect may be prevented by refreshing a memory block. Consequently, it is possible to improve reliability of the memory-based storage device <b>7200</b> by reducing a read error caused by the stress-based defect.</p>
<p id="p-0650" num="0649"><figref idref="DRAWINGS">FIG. 95</figref> is a flowchart illustrating a block management method of a memory-based storage device according to another exemplary embodiment of the present invention. Hereinafter, the block management method will be described in more detail with reference to the accompanying drawings.</p>
<p id="p-0651" num="0650">The controller <b>7220</b> fetches a read history from the read history table <b>7221</b> of the buffer memory <b>7225</b> in operation S<b>7300</b>. The controller <b>7220</b> determines whether there is a refreshed memory block or not based on the read history in operation S<b>7310</b>. If there is no refreshed memory block, an operation is terminated. If there is a refreshed memory block, it proceeds to operation S<b>7320</b>.</p>
<p id="p-0652" num="0651">In operation S<b>7320</b>, the controller <b>7220</b> determines whether a previously occurred error of the memory block is caused by a physical defect or a stress-based defect based on the read history. The stress-based defect may be resolved by the refresh operation as mentioned above. On the contrary, if the previously occurred error of the refreshed memory block is caused by a physical defect (e.g., a progressive defect), it proceeds to operation S<b>7330</b>. In operation S<b>7330</b>, the controller <b>7220</b> manages a history in order to limit the usage of the memory block having a physical defect.</p>
<p id="p-0653" num="0652">In the exemplary embodiment, whether the refreshed memory block has a physical defect or not can be determined based on the number of refreshed times. For example, a memory block refreshed more than one time can be determined as one having a physical defect.</p>
<p id="p-0654" num="0653">As mentioned above, a memory block is refreshed under the assumption that errors continuously occur due to the stress-based defect. However, if an error history among read history information is considered, errors may continuously occur due to the progressive defect not the stress-based defect. If the memory block is refreshed even when an error is caused by the progressive defect not the stress-based defect, all of data that are stored in that memory block can be lost. That is, it is impossible to recover the data stored in the memory block. Therefore, according to the block management method of the present invention, memory blocks determined to have a physical defect are classified as danger blocks in advance. This danger block may be processed as a bad block or used for different purposes than a normal block. For example, if it is assumed that the memory-based storage device <b>7200</b> stores M-bit data, that kind of a danger block may be used for storing N-bit data (M&#x3c;N). Additionally, read, erase, and program operations for that kind of a danger block will be limited. According to the error history, memory blocks that are physically or circuitously related to a specific block also can be processed as danger blocks.</p>
<p id="p-0655" num="0654"><figref idref="DRAWINGS">FIG. 96</figref> is a flowchart illustrating a block management method of a memory-based storage device according to another exemplary embodiment of the present invention. The block management method of <figref idref="DRAWINGS">FIG. 96</figref> is substantially identical to that of <figref idref="DRAWINGS">FIG. 95</figref> except that the determination operation S<b>7310</b> is omitted, and thus its overlapping description will be omitted for conciseness. The fact that the determination operation S<b>7310</b> is omitted is that danger blocks are not classified based on a refreshed memory block. That is, it is possible to classify danger blocks according to whether a previously occurred error of a memory block is a progressive defect (i.e., a physical defect) or a stress-based defect with reference to a read/error history.</p>
<p id="p-0656" num="0655">In exemplary embodiments of the present invention, the progressive defect (i.e., a physical defect) can be determined based on error patterns prepared according to a test result of a flash memory. Additionally, the progressive defect can be determined based on an error history including a phenomenon that errors repeatedly occur in a refreshed memory block.</p>
<p id="p-0657" num="0656">In exemplary embodiments of the present invention, it is possible to determine a memory block as a danger block (i.e., a memory block having a physical defect) based on the read history. For example, referring to <figref idref="DRAWINGS">FIG. 96</figref>, the controller <b>7220</b> fetches a read history from the read history table <b>7221</b> of the buffer memory <b>7225</b> in operation S<b>7400</b>, and it is determined whether a memory block has a physical defect or not based on the read history in operation S<b>7410</b>. According to a determination result, the memory block having a physical defect will be processed as a danger block in operation S<b>7420</b>.</p>
<p id="p-0658" num="0657">According to the block management method of the present invention, a refresh operation for a memory block may not precede.</p>
<p id="p-0659" num="0658">A flash memory device is a non-volatile memory device maintaining its stored data even when power supply is cut off. As mobile devices such as a cellular phone, a personal digital assistant (PDA), a digital camera, a portable game console, and an MP3 player become widely used, the flash memory device is extensively employed as a data storage and a code storage. Additionally, the flash memory device may be used for home applications such as a high-definition television (HDTV), a digital versatile disk or a digital video disk (DVD), a router, and a global positioning system (GPS). <figref idref="DRAWINGS">FIG. 97</figref> is a block diagram of a computing system <b>7300</b> including a memory system according to the present invention. The computing system <b>7300</b> includes a microprocessor <b>7310</b>, a user interface <b>7320</b>, a modem <b>7330</b> such as a baseband chipset, a controller <b>7340</b>, and a flash memory <b>7350</b>, which are connected through a bus <b>7301</b>. The controller <b>7340</b> corresponds to that of <figref idref="DRAWINGS">FIG. 90</figref>, and the flash memory <b>7350</b> is substantially identical to that of <figref idref="DRAWINGS">FIG. 90</figref>. N-bit data (N is an integer equal to or greater than 1) processed/to be processed by the microprocessor <b>7310</b> are stored in the flash memory <b>7350</b> through the controller <b>7340</b>. If the computing system is a mobile device, a battery <b>7360</b> is additionally provided to supply an operating voltage to the computing system. Although not illustrated in the drawings, it is apparent to those skilled in the art that an application chipset, a camera image processor (CIS), a mobile DRAM, etc. can be further provided in the computing system. The controller <b>7340</b> and the flash memory <b>7350</b> may constitute a solid state drive/disk (SSD) using a non-volatile memory to store data, for example. The exemplary SSD is disclosed in U.S. Pat. No. 2006-0152981, which is incorporated by reference in its entirety. Additionally, the controller <b>7340</b> and the flash memory <b>7350</b> may constitute a memory card with a non-volatile memory for storing data.</p>
<p id="p-0660" num="0659"><figref idref="DRAWINGS">FIG. 98</figref> is a block diagram of a memory-based storage device according to another exemplary embodiment of the present invention.</p>
<p id="p-0661" num="0660">A memory-based storage device of <figref idref="DRAWINGS">FIG. 98</figref> is realized with a card <b>7400</b> including a memory <b>7410</b> and a memory controller <b>7420</b>. For example, the card <b>7400</b> may be a memory card such as a flash memory card. That is, the card <b>7400</b> may be a card satisfying certain industrial standards to be used in electron devices such as a digital camera, a personal computer, etc. It will be understood that the card <b>7400</b> controls the memory <b>7410</b> through the memory controller <b>7420</b> based on control signals received from other devices (e.g., the external devices).</p>
<p id="p-0662" num="0661"><figref idref="DRAWINGS">FIG. 99</figref> is a block diagram illustrating a memory system including a memory-based storage device according to another exemplary embodiment of the present invention.</p>
<p id="p-0663" num="0662">The memory system of <figref idref="DRAWINGS">FIG. 99</figref> represents a portable device <b>7500</b>. The portable device <b>7500</b> may be an MP3 player, a video player, a combination of a video and audio player, etc. As illustrated, the portable device <b>7500</b> includes a memory <b>7510</b> and a memory controller <b>7520</b>. The portable device <b>7500</b> may include an encoder and decoder (EDC) <b>7530</b>, presentation components <b>7540</b>, and an interface <b>7550</b>.</p>
<p id="p-0664" num="0663">Data (video, audio, etc) processed by the EDC <b>7530</b> are inputted into the memory <b>7510</b> through the memory controller <b>7520</b>, or outputted from the memory <b>7510</b>. As illustrated using the dotted lines of <figref idref="DRAWINGS">FIG. 99</figref>, data are directly inputted from the EDC <b>7530</b> into the memory <b>7510</b>, and/or data are directly outputted from the memory <b>7510</b> into the EDC <b>7530</b>.</p>
<p id="p-0665" num="0664">The EDC <b>7530</b> can encode data to store them in the memory <b>7510</b>. For example, the EDC <b>7530</b> may perform an MP3 encoding operation on audio data to store them in the memory <b>7510</b>. In another method, the EDC <b>7530</b> may perform an MPEG encoding operation (e.g., MPEG2, MPEG4, etc.) on video data to store them in the memory <b>7510</b>. Furthermore, the EDC <b>7530</b> may include a plurality of encoders in order to encode various types of data according to different formats. For example, the EDC <b>7530</b> may include an MP3 encoder for audio data and an MPEG encoder for video data.</p>
<p id="p-0666" num="0665">The EDC <b>7530</b> can decode an output from the memory <b>7510</b>. For example, the EDC <b>7530</b> may perform an MP3 decoding operation on audio data outputted from the memory <b>7510</b>. In another method, the EDC <b>7530</b> may perform an MPEG decoding operation (e.g., MPEG2, MPEG4, etc.) on video data outputted from the memory <b>7510</b>. Furthermore, the EDC <b>7530</b> may include a plurality of decoders in order to decode various types of data according to different formats. For example, the EDC <b>7530</b> may include an MP3 decoder for audio data and an MPEG decoder for video data.</p>
<p id="p-0667" num="0666">It will be also understood that the EDC <b>7530</b> includes only decoders. For example, the already encoded data can be received by the EDC <b>7530</b> or transferred to the memory controller <b>7520</b> and/or the memory <b>7510</b>.</p>
<p id="p-0668" num="0667">The EDC <b>7530</b> can receive data for encoding through the interface <b>7550</b> or already encoded data. The interface <b>7550</b> may comply with well-known industrial standards (e.g., firmware, USB, etc.). The interface <b>7550</b> may include at least one interface. For example, the interface <b>7550</b> may include a firmware interface, a USB interface, etc. Data from the memory <b>7510</b> may be outputted through the interface <b>7550</b>.</p>
<p id="p-0669" num="0668">The presentation components <b>7540</b> may display data, outputted from the memory and/or decoded by the EDC <b>7530</b>, to a user. For example, the presentation components <b>7540</b> includes a speaker jack for outputting audio data or include s display screen for outputting video data.</p>
<p id="p-0670" num="0669">A flash memory system according to a seventh embodiment of the present invention may achieve high data reliability by managing read history. In addition, the flash memory system according to the seventh embodiment of the present invention may achieve speed-up by means of the multi-thread function described in the first embodiment, the free page described in the second embodiment, and the microcode described in the third embodiment as well as by managing read history. Performance of the flash memory system according to the seventh embodiment of the present invention may be improved through achievement of high data reliability and speed-up.</p>
<p id="p-0671" num="0670">The above-disclosed subject matter is to be considered illustrative, and not restrictive, and the appended claims are intended to cover all such modifications, enhancements, and other embodiments, which fall within the true spirit and scope of the present invention. Thus, to the maximum extent allowed by law, the scope of the present invention is to be determined by the broadest permissible interpretation of the following claims and their equivalents, and shall not be restricted or limited by the foregoing detailed description.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A memory system comprising:
<claim-text>a memory device configured to store data; and</claim-text>
<claim-text>an accelerator configured to control the memory device based on micro-codes, the accelerator connected to the memory device via a system bus, the accelerator configured to store the micro-codes, and including a channel control sequencer configured to perform operations according to the micro-codes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the channel control sequencer is configured to decode the micro-codes and performs operations according to the decoded micro-codes.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the memory device comprises:
<claim-text>a memory; and</claim-text>
<claim-text>an interface block configured to interface the memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The memory system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the micro-codes are instructions for controlling the memory.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The memory system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the instructions include at least one of &#x201c;Read&#x26;Load&#x201d;, &#x201c;Read&#x26;Verify&#x201d;, &#x201c;Write&#x201d;, &#x201c;Wait For Event&#x201d;, &#x201c;END&#x201d;, &#x201c;Read&#x26;Load&#x26;Index Increment&#x201d;, &#x201c;Mov&#x201d;, &#x201c;Add&#x201d;, &#x201c;Sub&#x201d;, &#x201c;Or&#x201d;, &#x201c;And&#x201d;, &#x201c;Shift Left&#x201d;, &#x201c;Shift Right&#x201d;, &#x201c;Swap&#x201d;, &#x201c;Jump Backward&#x201d;, &#x201c;Jump Backward If Equal&#x201d;, &#x201c;Jump Backward If Not Equal&#x201d;, &#x201c;Jump Forward&#x201d;, &#x201c;Jump Forward If Equal&#x201d;, &#x201c;Jump Forward If Not Equal&#x201d;, &#x201c;Jump Backward &#x26; Link&#x201d;, &#x201c;Jump Forward &#x26; Link&#x201d;, &#x201c;Return&#x201d; and &#x201c;Block Memory Transfer&#x201d;.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the memory is a One-NAND flash memory.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the accelerator further comprises:
<claim-text>a direct memory access (DMA) unit configured to transfer data from the memory device to the system bus, in response to the channel control sequencer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the accelerator further comprises:
<claim-text>an error correction code block configured to correct errors in data stored in the memory device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The memory system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the memory device is a NAND flash memory.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The memory system of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>a processor configured to control the accelerator and connected to the system bus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A driving method of a memory system including a memory device and an accelerator comprising:
<claim-text>loading micro-codes for controlling the memory device to the accelerator; and</claim-text>
<claim-text>storing the loaded micro-codes; and</claim-text>
<claim-text>performing operations based on the micro-codes under control of a host.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The driving method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>receiving an operation instruction at the accelerator from a processor; and wherein</claim-text>
<claim-text>the performing step-performs operations at the accelerator in response to the operation instruction based on the micro-codes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The driving method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:
<claim-text>ending the micro-codes and generating an interruption.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The driving method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the micro-codes control the memory device.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The driving method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the micro-codes indicate a source address and a target address of the memory device.</claim-text>
</claim>
</claims>
</us-patent-grant>

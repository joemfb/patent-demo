<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625789-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625789</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13245465</doc-number>
<date>20110926</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>167</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>380200</main-classification>
</classification-national>
<invention-title id="d2e43">Dynamic encryption</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5612742</doc-number>
<kind>A</kind>
<name>Krause et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6505169</doc-number>
<kind>B1</kind>
<name>Bhagavath et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6678332</doc-number>
<kind>B1</kind>
<name>Gardere et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6792047</doc-number>
<kind>B1</kind>
<name>Bixby et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6912315</doc-number>
<kind>B1</kind>
<name>Wong et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7096481</doc-number>
<kind>B1</kind>
<name>Forecast et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7116894</doc-number>
<kind>B1</kind>
<name>Chatterton</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7788581</doc-number>
<kind>B1</kind>
<name>Bauermeister</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7827298</doc-number>
<kind>B2</kind>
<name>Black et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7877511</doc-number>
<kind>B1</kind>
<name>Berger et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7925549</doc-number>
<kind>B2</kind>
<name>Looney et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7925849</doc-number>
<kind>B2</kind>
<name>Izumi</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7958007</doc-number>
<kind>B2</kind>
<name>Urbanski et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7992165</doc-number>
<kind>B1</kind>
<name>Ludewig et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>8027787</doc-number>
<kind>B2</kind>
<name>Odinak et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>8027876</doc-number>
<kind>B2</kind>
<name>Taylor</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>8099473</doc-number>
<kind>B2</kind>
<name>Biderman et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>8145782</doc-number>
<kind>B2</kind>
<name>McGowan et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>8165343</doc-number>
<kind>B1</kind>
<name>McGowan</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>8218651</doc-number>
<kind>B1</kind>
<name>Eshet et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>8239546</doc-number>
<kind>B1</kind>
<name>McGowan</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>8301733</doc-number>
<kind>B2</kind>
<name>McGowan</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2001/0029525</doc-number>
<kind>A1</kind>
<name>Lahr</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2002/0029282</doc-number>
<kind>A1</kind>
<name>Buddhikot et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2002/0046404</doc-number>
<kind>A1</kind>
<name>Mizutani</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2002/0073084</doc-number>
<kind>A1</kind>
<name>Kauffman et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2002/0104096</doc-number>
<kind>A1</kind>
<name>Cramer et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2002/0122430</doc-number>
<kind>A1</kind>
<name>Haberman et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2002/0144262</doc-number>
<kind>A1</kind>
<name>Plotnick et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2002/0150239</doc-number>
<kind>A1</kind>
<name>Carny et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2003/0004804</doc-number>
<kind>A1</kind>
<name>Landsman et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2003/0229900</doc-number>
<kind>A1</kind>
<name>Reisman</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2004/0022391</doc-number>
<kind>A1</kind>
<name>O'Brien</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2004/0268384</doc-number>
<kind>A1</kind>
<name>Stone</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2005/0076368</doc-number>
<kind>A1</kind>
<name>Lee</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2005/0163229</doc-number>
<kind>A1</kind>
<name>Okada et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2005/0193205</doc-number>
<kind>A1</kind>
<name>Jacobs et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2005/0207569</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2006/0015637</doc-number>
<kind>A1</kind>
<name>Chung</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2006/0114985</doc-number>
<kind>A1</kind>
<name>Linzer</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2006/0122882</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2006/0129907</doc-number>
<kind>A1</kind>
<name>Volk et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2006/0288112</doc-number>
<kind>A1</kind>
<name>Soelberg et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2007/0078712</doc-number>
<kind>A1</kind>
<name>Ott, IV et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2007/0162571</doc-number>
<kind>A1</kind>
<name>Gupta et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2007/0168542</doc-number>
<kind>A1</kind>
<name>Gupta et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2007/0198416</doc-number>
<kind>A1</kind>
<name>Ye</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 51</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2007/0233891</doc-number>
<kind>A1</kind>
<name>Luby et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2008/0005349</doc-number>
<kind>A1</kind>
<name>Li et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2008/0059310</doc-number>
<kind>A1</kind>
<name>Lettow et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2008/0141027</doc-number>
<kind>A1</kind>
<name>Kim et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2008/0207182</doc-number>
<kind>A1</kind>
<name>Maharajh et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2008/0215620</doc-number>
<kind>A1</kind>
<name>Folgner et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2009/0003432</doc-number>
<kind>A1</kind>
<name>Liu et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2009/0022172</doc-number>
<kind>A1</kind>
<name>Haberman et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2009/0031424</doc-number>
<kind>A1</kind>
<name>Ganesan et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2009/0063280</doc-number>
<kind>A1</kind>
<name>Wurster et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2009/0150941</doc-number>
<kind>A1</kind>
<name>Riedl et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2009/0172197</doc-number>
<kind>A1</kind>
<name>Kalaboukis et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2009/0217316</doc-number>
<kind>A1</kind>
<name>Gupta</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2009/0257435</doc-number>
<kind>A1</kind>
<name>Karlsson et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2009/0287841</doc-number>
<kind>A1</kind>
<name>Chapweske et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2009/0300145</doc-number>
<kind>A1</kind>
<name>Musayev et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2009/0327896</doc-number>
<kind>A1</kind>
<name>Pall et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2010/0057926</doc-number>
<kind>A1</kind>
<name>Cao et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2010/0095121</doc-number>
<kind>A1</kind>
<name>Shetty et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2010/0100742</doc-number>
<kind>A1</kind>
<name>Courington et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2010/0107200</doc-number>
<kind>A1</kind>
<name>Drang et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2010/0118973</doc-number>
<kind>A1</kind>
<name>Rodriguez et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2010/0129057</doc-number>
<kind>A1</kind>
<name>Kulkarni</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2010/0138892</doc-number>
<kind>A1</kind>
<name>Meuninck et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2010/0161425</doc-number>
<kind>A1</kind>
<name>Sideman</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2010/0189131</doc-number>
<kind>A1</kind>
<name>Branam et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2010/0205049</doc-number>
<kind>A1</kind>
<name>Long et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2011/0029999</doc-number>
<kind>A1</kind>
<name>Foti</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2011/0071911</doc-number>
<kind>A1</kind>
<name>Tung et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2011/0161181</doc-number>
<kind>A1</kind>
<name>Esteve Asensio et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2011/0238507</doc-number>
<kind>A1</kind>
<name>Ben-Rubi</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2011/0246603</doc-number>
<kind>A1</kind>
<name>Lee</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2011/0246659</doc-number>
<kind>A1</kind>
<name>Bouazizi</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2011/0264506</doc-number>
<kind>A1</kind>
<name>Grant et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2011/0287748</doc-number>
<kind>A1</kind>
<name>Angel et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2012/0005312</doc-number>
<kind>A1</kind>
<name>McGowan et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2012/0005313</doc-number>
<kind>A1</kind>
<name>McGowan et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2012/0047542</doc-number>
<kind>A1</kind>
<name>Lewis et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2012/0134355</doc-number>
<kind>A1</kind>
<name>Vendrow et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2012/0167132</doc-number>
<kind>A1</kind>
<name>Mathews et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2012/0179788</doc-number>
<kind>A1</kind>
<name>McGowan</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2012/0185530</doc-number>
<kind>A1</kind>
<name>Reza</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2012/0185608</doc-number>
<kind>A1</kind>
<name>McGowan et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2012/0197419</doc-number>
<kind>A1</kind>
<name>Dhruv et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2012/0198492</doc-number>
<kind>A1</kind>
<name>Dhruv et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>AU</country>
<doc-number>2010/202741</doc-number>
<kind>B1</kind>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>CN</country>
<doc-number>101282478</doc-number>
<kind>A</kind>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>GB</country>
<doc-number>2462732</doc-number>
<kind>A</kind>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>WO</country>
<doc-number>WO 2010/025686</doc-number>
<kind>A1</kind>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>WO</country>
<doc-number>2011/009205</doc-number>
<kind>A1</kind>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>Australian Patent Office, Examiner's First Report on Patent Application No. 2010202740 for Unicorn Media, Inc., dated Aug. 10, 2010, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>Australian Patent Office, Examiners First Report on Patent Application No. 2010202741 for Unicorn Media, Inc., dated Aug. 9, 2010, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00100">
<othercit>Ben Atallah, S., et al., &#x201c;Dynamic Configuration of Multimedia Applications,&#x201d; IFIP International Federation for Information Processing, 2003, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>International Search Report and Written Opinion of PCT/US2012/071669 mailed on Apr. 5, 2013, 74 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>International Search Report and Written Opinion of PCT/US2012/071629 mailed on Apr. 5, 2013, 92 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>Prangl, M. et al. &#x201c;Towards QoS Improvements of TCP-Based Media Delivery,&#x201d; Networking and Services, 2008, ICNS 2008: Fourth International Conference on IEEE, Piscataway, NJ, USA, Mar. 16, 2008, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>380200</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380277</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380286</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380 44</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713164</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713189</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713193</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>16</number-of-drawing-sheets>
<number-of-figures>16</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130080772</doc-number>
<kind>A1</kind>
<date>20130328</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>McGowan</last-name>
<first-name>Albert John</first-name>
<address>
<city>Phoenix</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>McGowan</last-name>
<first-name>Albert John</first-name>
<address>
<city>Phoenix</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Kilpatrick Townsend &#x26; Stockton LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Unicorn Media, Inc.</orgname>
<role>02</role>
<address>
<city>Tempe</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dada</last-name>
<first-name>Beemnet</first-name>
<department>2435</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and methods for encrypting a media file for streaming and/or downloading over a network are disclosed. These systems and methods may be part of a larger media servicing network that can be used to, among other things, process uploaded media content, provide it for streaming, and collect metric information regarding the streaming. The disclosed systems and methods provide for receiving requests for a media file or a chunk of a media file and responding to these requests by encrypting the requested chunks dynamically and providing the chunks to the requesting entity. These systems and methods, which can be utilized with a dynamic chunk generation and dynamic index file generation, enable a high degree of flexibility in streaming chunked media files and preclude the need to encrypt the chunks prior to streaming. The systems and methods may also be applied to encrypting files for continuous streaming protocols as well as for progressive download.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="192.96mm" wi="265.94mm" file="US08625789-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.46mm" wi="205.74mm" file="US08625789-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="263.23mm" wi="209.97mm" file="US08625789-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="253.41mm" wi="195.66mm" file="US08625789-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="242.15mm" wi="205.74mm" file="US08625789-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="253.75mm" wi="202.95mm" file="US08625789-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="236.14mm" wi="209.97mm" file="US08625789-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="236.81mm" wi="168.57mm" file="US08625789-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="207.94mm" wi="179.75mm" file="US08625789-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="228.01mm" wi="183.73mm" file="US08625789-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="226.99mm" wi="203.28mm" file="US08625789-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="236.81mm" wi="209.97mm" file="US08625789-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="214.63mm" wi="187.45mm" file="US08625789-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="216.07mm" wi="168.91mm" file="US08625789-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="218.86mm" wi="170.01mm" file="US08625789-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="227.33mm" wi="160.78mm" file="US08625789-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="282.62mm" wi="209.97mm" orientation="landscape" file="US08625789-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">This disclosure relates in general to cloud-based computer processing and, but not by way of limitation, to encrypting media for streaming.</p>
<p id="p-0003" num="0002">The delivery of media over networks such as the Internet can be accomplished in many ways, including progressive downloading or streaming. Streaming is often preferred to progressive downloading because it offers additional features such as content protection and the ability to seek to undownloaded parts of a media file. The process of preparing a media file for streaming typically involves &#x201c;chunking&#x201d; the file, or dividing media files up into smaller segments for delivery. Information including where chunks may be accessed can be stored in an index file, or manifest. This index file can be delivered to a client, such as a media player application, for use in streaming.</p>
<p id="p-0004" num="0003">The processes of chunking and indexing files for streaming present challenges to a media file delivery service provider or content provider desiring to host media files for streaming. For example, a significant amount of preprocessing is required to prepare media for streaming. Media content may be encoded into several different files to accommodate several different sub-streams. Each of these files typically are chunked, stored, and indexed before the media content is available for streaming. Where encryption is required, the chunks are additionally encrypted before they are stored. Such preprocessing leaves little flexibility for changing encryption keys.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0005" num="0004">Systems and methods for encrypting a media file for streaming over a network are disclosed. These systems and methods may be part of a larger media servicing network that can be used to, among other things, process uploaded media content, provide it for streaming, and collect metric information regarding the streaming. The disclosed systems and methods provide for receiving requests for a media file or a chunk of a media file and responding to these requests by encrypting the requested chunks dynamically and providing the chunks to the requesting entity. These systems and methods, which can be utilized with a dynamic chunk generation and dynamic index file generation, enable a high degree of flexibility in streaming chunked media files and preclude the need to encrypt the chunks prior to streaming.</p>
<p id="p-0006" num="0005">An example method for providing a plurality of encrypted segments of a media file over a data network, according to the disclosure, includes receiving a request for a first segment of the media file and retrieving the first segment of the media file. The first segment of the media file can comprise media content for playback over a period of time. The method further includes determining a first encryption key and creating an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key. The encrypting the first segment of the media file can occur after receiving the request for the first segment of the media file. The method further includes providing the encrypted first segment of the media file, receiving a request for a second segment of the media file, and retrieving the second segment of the media file. The second segment of the media file can comprise media content for playback over a period of time. The method also includes determining a second encryption key and creating an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key. The encrypting the second segment of the media file can occur after receiving the request for the second segment of the media file. Finally, the method includes providing the encrypted second segment of the media file.</p>
<p id="p-0007" num="0006">The example method for providing the plurality of encrypted segments of the media file over the data network also can include one or more of the following features. The second encryption key can be different than the first encryption key. The requests for the first and second segments of the media file can be received from a Media File Delivery Service Provider (MFDSP), which can be a media file delivery service provider, media streaming services provider, cloud data services provider, or other media file delivery services provider. The encrypted first and second segments of the media file can be provided to the MFDSP. The receiving the requests for the first and second segments of the media file and the providing the encrypted first and second segments of the media file can occur during playback of the media file by a device communicatively linked to the data network. The determining the first encryption key can comprise generating the first encryption key. The generating the first encryption key can comprise using an algorithm received over a communication link.</p>
<p id="p-0008" num="0007">The example method for providing the plurality of encrypted segments of the media file over the data network also can include one or more of the following additional features. Providing a first decryption key for decrypting the encrypted first segment of the media file. Determining the first encryption key can comprise requesting, over a communication link, the first encryption key, and receiving, over the communication link, the first encryption key. Determining the second encryption key can comprise requesting, over the communication link, the second encryption key, and receiving, over the communication link, the second encryption key. Determining the first encryption key comprises retrieving the first encryption key from data storage.</p>
<p id="p-0009" num="0008">An example a non-volatile computer-readable storage medium, according to the description, can have instructions embedded thereon, which, when executed by a processor, cause the processor to perform the method for providing the plurality of encrypted segments of the media file over the data network described above.</p>
<p id="p-0010" num="0009">An example a server for communicating, via a network, a media file having a plurality of segments, according to the description, can include a network interface, a memory configured to store one or more of the plurality of segments, and a processor communicatively coupled with the memory and the network interface and configured to cause the server to receive, using the network interface, a request for a first segment of the media file and retrieve the first segment of the media file from the memory. The first segment of the media file can comprise media content for playback over a period of time. The processor also can be configured to cause the server to determine a first encryption key, and create an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key. The encrypting the first segment of the media file can occur after receiving the request for the first segment of the media file. The processor also can be configured to cause the server to provide, using the network interface, the encrypted first segment of the media file, receive, using the network interface, a request for a second segment of the media file, and retrieve the second segment of the media file from the memory. The second segment of the media file can comprise media content for playback over a period of time. The processor also can be configured to cause the server to determine a second encryption key and create an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key. The encrypting the second segment of the media file can occur after receiving the request for the second segment of the media file. Finally, the processor can be configured to cause the server to provide, using the network interface, the encrypted second segment of the media file.</p>
<p id="p-0011" num="0010">The example server for communicating, via the network, the media file having the plurality of segments, can include one or more of the following features. The processor can be configured to cause the server to receive the requests for the first and second segments of the media file from a Media File Delivery Service Provider (MFDSP). The processor can be configured to cause the server to provide the encrypted first and second segments of the media file are to the MFDSP. The processor can be configured to cause the server to receive the requests for the first and second segments of the media file and provide the encrypted first and second segments of the media file during playback of the media file by a device communicatively linked to the network. Determining the first encryption key can comprise generating the first encryption key.</p>
<p id="p-0012" num="0011">The example server for communicating, via the network, the media file having the plurality of segments, also can include one or more of the following additional features. The processor can be configured to cause the server to receive an algorithm via the network interface, and use the algorithm to generate the first encryption key. The processor can be configured to cause the server to determine the first encryption key by requesting, using the network interface, the first encryption key, and receiving, using the network interface, the first encryption key. The processor can be configured to cause the server to determine the second encryption key by requesting, using the network interface, the second encryption key, and receiving, using the network interface, the second encryption key. The processor can be configured to cause the server to determine the first encryption key by retrieving the first encryption key from the memory.</p>
<p id="p-0013" num="0012">An example system for securely communicating, with a network, a media file, according to the disclosure, can include a data storage configured to store the media file, and a processing server communicatively coupled with the data storage. The processing server can be configured to receive a request for a first segment of the media file, retrieve at least a portion of the media file from the data storage, and generate the first segment of the media file. The first segment of the media file can comprise media content for playback over a period of time. The processing server also can be configured to determine a first encryption key and create an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key. The encrypting the first segment of the media file can occur after the request for the first segment of the media file is received. Additionally, the processing server can be configured to provide the encrypted first segment of the media file, receive a request for a second segment of the media file, and generate the second segment of the media file. The second segment of the media file can comprise media content for playback over a period of time. The processing server further can be configured to determine a second encryption key and create an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key. The encrypting the second segment of the media file can occur after receiving the request for the second segment of the media file. Finally, the processing server can be configured to provide the encrypted second segment of the media file.</p>
<p id="p-0014" num="0013">The example system for securely communicating, with the network, the media file can include one or more of the following features. A media caching server configured to send the requests for the first and second segments of the media file, via the network, to the processing server, receive the encrypted first and second segments of the media file, via the network, from the processing server, and store the encrypted first and second segments of the media file in a memory. The media caching server can be further configured to provide the encrypted first and second segments of the media file to a device communicatively coupled with the media caching server. The media caching server can be configured such that the media caching server will not send the requests for a segment of the media file via the network to the processing server if the media caching server has the segment of the media file stored in the memory.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">The present disclosure is described in conjunction with the appended figures:</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a media servicing system.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram of an embodiment of a kernel application center connected with application centers.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram of an alternative embodiment of a kernel application center.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an embodiment of an application center.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of processes and objects utilized by a cloud-hosted integrated multi-node pipelining system for media ingestion.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> is a system for providing an appropriate index file to any of a variety of clients utilizing a single URL.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6A</figref> is a simplified flowchart of a method for providing a media file to any of a variety of clients <b>510</b> utilizing a single URL.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 6B</figref> is a simplified flowchart of another method for providing a media file to any of a variety of clients <b>510</b> utilizing a single URL.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6C</figref> is a simplified flowchart of yet another method for providing a media file to any of a variety of clients <b>510</b> utilizing a single URL.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7A</figref> is an embodiment of a system for delivering content, including media files, which can be chunked and/or encrypted.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 7B</figref> is another embodiment of a system for delivering content, including media files, which can be chunked and/or encrypted.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 8</figref> s a simplified illustration of an embodiment of a system for dynamic encryption integrated into a traditional system that may not have dynamic chunking and/or dynamic indexing capabilities.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 9A</figref> is a simplified flowchart of a method for dynamically encrypting chunks of media for media streaming.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9B</figref> is a simplified flowchart of another method for dynamically encrypting chunks of media for media streaming.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 9C</figref> is a simplified flowchart of yet another method for dynamically encrypting chunks of media for media streaming.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 10</figref> is a simplified swim lane flowchart describing the interaction of components in a system configured to provide dynamically encrypt chunks of media for media streaming.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0032" num="0031">In the appended figures, similar components and/or features may have the same reference label. Further, various components of the same type may be distinguished by following the reference label by a dash and a second label that distinguishes among the similar components. If only the first reference label is used in the specification, the description is applicable to any one of the similar components having the same first reference label irrespective of the second reference label.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0033" num="0032">The ensuing description provides preferred exemplary embodiment(s) only, and is not intended to limit the scope, applicability or configuration of the disclosure. Rather, the ensuing description of the preferred exemplary embodiment(s) will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope as set forth in the appended claims.</p>
<p id="p-0034" num="0033">The increased availability of media content over data communications networks such as the Internet has mirrored the increased bandwidth for these networks. Because media has recently taken a more prominent role in data communications, the distribution of media and the data associated with such distribution has become increasingly important, particularly to media content providers. Media streaming has become a widely-used method of media distribution, but the preprocessing associated with streaming can be burdensome. Certain protocols, including forms of Hypertext Transfer Protocol (HTTP) streaming, require chunking and storing the chunked media files, and generating a corresponding index file(s) (also known as a &#x201c;manifest&#x201d; file). In a traditional approach, this can involve a large amount of preprocessing.</p>
<p id="p-0035" num="0034">Preprocessing media for streaming traditionally involves chunking media files, storing the chunks, then creating corresponding index files to indicate where chunks may be located to download for streaming. Streaming protocols often provide for frequently updating an index file for instances where the corresponding media is frequently updated, such as during live streaming. Thus, an index file does not need to contain all chunks for a requested media file. In addition, because media files are frequently stored in a format that requires little additional processing to chunk, the chunks can be created in real time, during the streaming of a media file. The systems and methods disclosed in U.S. patent application Ser. No. 12/976,883, entitled &#x201c;DYNAMIC CHINKING FOR MEDIA STREAMING,&#x201d; and U.S. patent application Ser. No. 12/976,890, entitled &#x201c;DYNAMIC INDEXING FOR AD INSERTION IN MEDIA STREAMING,&#x201d; which are incorporated herein by reference, take advantage of these features to enable dynamic index file creation and dynamic media file chunking.</p>
<p id="p-0036" num="0035">In instances where a media provider desires secure streaming, preprocessing traditionally involves encrypting chunks of a media file as well. Such preprocessing can result in a large amount of stored encrypted chunks that can prove burdensome to manage. For example, if a content provider of a media file desires to update or change the encryption key(s) used to encrypt the stored encrypted chunks corresponding to the media file, each chunk would either need to be decrypted and re-encrypted or replaced altogether with a new chunk, encrypted with the new encryption key.</p>
<p id="p-0037" num="0036">In contrast, the techniques provided herein enable dynamic encryption that can allow a system to encrypt chunks of a media file in real time, as the chunks are requested by a client streaming the media file. Such functionality can provide flexibility to a content provider to provide the encryption key(s) used to encrypt a media file at any time, including while media file is streaming to a client. In other embodiments, another entity, such as the content distributor, can provide the encryption key(s). This dynamic encryption can be utilized in a variety of systems, including those that preprocess and store chunks of a media file, as well as those that can dynamically create the chunks. Moreover, techniques described herein are not limited to encrypting chunks of a media file, but also can be utilized to encrypt whole files as well as non-media files and/or chunks of non-media files. Furthermore, the techniques described herein may also return a media file that has been dynamically stitched together from many chunks, which, to a client, can appear like a contagious file for continuous streaming protocols (Real Time Messaging Protocol (RTMP), Real Time Streaming Protocol (RTSP), etc.) as well as for progressive download.</p>
<p id="p-0038" num="0037">The index file(s) utilized to access chunks of a media file (or whole files, in some embodiments) can vary in content and format, depending on protocols utilized by a media player application configured to play the streamed media file. For example, different index files can include information corresponding to a different number of chunks and/or chunks of media having differing playback parameters (e.g., bit rate, resolution, frame rate, etc.). Despite the differences in format and content, the techniques described herein can be utilized to enable any number of clients, having different index file requirements, to utilize a single Uniform Resource Locator URL (URL), or other indicator, to retrieve the index file corresponding to a particular media file in a format suitable for that client. As a result, a media content provider can provide a single URL for each media file, regardless of the type of client and/or platform requesting the media file.</p>
<p id="p-0039" num="0038">Furthermore, when a client uses the URL to request a media file, an index file generator receiving the request can determine whether advertisements are to be played during the playback of the media file, and enable a content provider to select the advertisements to be played. Moreover, the content provider further can provide the index file generator with one or more beaconing URLs to insert into an index file, which can serve as beacons to indicate to the content provider that certain content, such as advertisements, is being and/or has been played. A content provider can find the beaconing information to be vital in determining the value of the media.</p>
<p id="p-0040" num="0039">The beaconing information may be used for various purposes. For example, it may be used to determine the state of a client (e.g., paused, skipping certain content, playing back certain content, etc.), which can be used in behavioral advertisement targeting and enforcement of session advertisement behavior, adjusting advertisement content and playback based on the behavior of a user. The state of a client also may be used to support individual encryption keys in an encryption scheme and allow the index file generator to return secure URLs (e.g., time expiring or Internet Protocol (IP) allowed) for chunks to support functions such as payment services.</p>
<p id="p-0041" num="0040">While the above embodiments may be implemented in a variety of different systems, some particular embodiments may be implemented as part of a media service system. <figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a media servicing system <b>100</b>, according to some embodiments of the present invention. The system may deliver media content to the end user device <b>140</b> through a network such as the Internet <b>120</b>. The end user device <b>140</b> can be one of any number of devices configured to receive media over the Internet <b>120</b>, such as a mobile phone, tablet computer, personal computer, portable media device, etc. A media file provided by a content provider <b>130</b> can be processed and indexed by cloud-hosted integrated multi-node pipelining system (CHIMPS) <b>110</b>, and further stored a media file delivery services provider (MFDSP) <b>150</b>. Additionally or alternatively, the CHIMPS <b>110</b> may also be adapted to store the media file.</p>
<p id="p-0042" num="0041">The media servicing system further enables a content provider <b>130</b> or other entity to gather information regarding user behavior during media playback. For example, a content provider <b>130</b> can be provided with data indicating that end users tend to stop watching a video at a certain point in playback, or that users tended to follow links associated with certain advertisements displayed during playback. With this data, a content provider <b>130</b> can adjust factors such as media content, advertisement placement and content, etc., to increase revenue associated with the media content and provide the end user device <b>140</b> with a more desirable playback experience.</p>
<p id="p-0043" num="0042">End user device <b>140</b> can request a media file to stream with a client program executed by the end user device <b>140</b>. The client program can be, for example, a media player, browser, or other application adapted to request and/or play media files. In response to a request for a media file, the CHIMPS <b>110</b> can utilize any number of application centers <b>112</b> and/or kernel application center(s) <b>111</b> to provide the client program with a data object concerning the requested media file. The data object can include information about the media file, including where the media file can be located, such as within the MFDSP <b>150</b> or within the CHIMPS <b>110</b> itself. Location information may be provided by a URL or other indicator. During playback of the media file, the CHIMPS <b>110</b> can collect data regarding the playback through beaconing provided by a client program executed by the end user device <b>140</b> and/or indexing service from within the CHIMPS and/or MFDSP. The CHIMPS <b>110</b> can subsequently provide the data and/or any analytics information derived from the data to the content provider <b>130</b>. Additionally, as discussed below, the content provider <b>130</b> can provide additional beaconing URLs to an index file generator with which the content provider can determine whether particular content has been viewed.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram illustrating an embodiment of a kernel application center <b>111</b>-<b>1</b> connected with application centers from within the CHIMPS <b>110</b>-<b>1</b>. The kernel application center <b>111</b>-<b>1</b> and application centers <b>112</b> can be geographically distant and can be connected via the Internet <b>120</b>, wide area network (WAN), and/or other data communication network. Because application centers can be geographically separated, DNS services (not shown) can be used to allow an end user device <b>140</b> to connect to the nearest available application center <b>112</b>. The kernel application center <b>111</b>-<b>1</b> can connect with application centers <b>112</b> within the CHIMPS <b>110</b>-<b>1</b> through an internal interface <b>270</b>, thereby enabling the application centers <b>112</b> access to the various components within the kernel application center <b>111</b>-<b>1</b>.</p>
<p id="p-0045" num="0044">Components within the kernel application center <b>111</b>-<b>1</b> can communicate through network <b>260</b> such as a local area network (LAN) and can include one or more origin servers <b>240</b> and a storage array <b>230</b> with which data objects and/or media files may be stored and distributed. The storage array <b>230</b> may also be utilized by services running on processing server(s) <b>220</b> and/or transcoding server(s) <b>250</b> that may require temporary or long-term storage. Kernel server <b>210</b> can utilize processing server(s) <b>220</b>, transcoding server(s) <b>250</b> to provide various functional capabilities to the CHIMPS <b>110</b>.</p>
<p id="p-0046" num="0045">For example, as described in more detail below, the CHIMPS <b>110</b>-<b>1</b> can provide transcoding service for media files provided by a content provider <b>130</b> for syndication. Such a service can allow a content provider <b>130</b> to upload a media file to an application center <b>112</b>, after which the application center <b>112</b> would notify the kernel server <b>210</b> that the media file has been uploaded. The kernel server can then notify services running on the processing server(s) <b>220</b> of the upload. These services can utilize transcoding server(s) to transcode the media file, which can then be moved to a MFDSP and/or stored locally by storage array <b>230</b> and origin server(s) <b>240</b>. Services running on the processing server(s) <b>220</b> can also update the associated data object stored by the storage array <b>230</b> and origin server(s) <b>240</b>.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram illustrating an alternative embodiment of a kernel application center <b>111</b>-<b>2</b>. In addition to the components of the embodiment of <figref idref="DRAWINGS">FIG. 2A</figref>, this embodiment incorporates an application center <b>112</b> within the kernel application center <b>111</b>-<b>2</b>. The application center <b>112</b> incorporated within kernel application center <b>111</b>-<b>2</b> may be located at or near the other components of the kernel application center <b>111</b>-<b>2</b>, and can be communicatively connected to the other components via network <b>260</b>. The incorporated application center <b>112</b> can therefore have faster access to kernel application center functionality because it does not need to communicate over long distances. In consideration of this advantage, it will be understood that the CHIMPS <b>110</b> can include multiple kernel centers with one or more application centers incorporated therein. Additionally or alternatively, components of the kernel application center may be incorporated into one or more application centers <b>112</b> in the CHIMPS <b>110</b> to provide quicker access to certain functionality.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an embodiment of an application center <b>112</b>. The application center <b>112</b> can include caching server(s) <b>330</b> and a storage array <b>310</b> for storing and distributing data objects of media files requested by end user devices through end user interface <b>360</b>. Caching server(s) <b>330</b> and storage array <b>310</b> can also be used to collect, process, and/or store metrics information from beaconing data, media chunk requests, and/or other data sources, including data collected through end user interface <b>360</b>. The application center can further include ingest server(s) <b>320</b> for ingesting uploaded media files from a content provider <b>130</b> through a content provider interface <b>370</b>. The media files may be stored on the storage array <b>310</b>. As with the kernel application center <b>111</b>, the components of the application center <b>112</b> can be communicatively linked through a network <b>340</b>, such as a LAN. The application center can further include an internal interface <b>350</b>, providing a communication link from the application center to the rest of the CHIMPS. It is through internal interface <b>350</b>, for example, that media files stored on storage array <b>310</b> can be made available to a kernel application center <b>111</b> for services such as transcoding.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram <b>400</b> of processes and objects utilized by the CHIMPS <b>110</b> for media ingestion, according to some embodiments. Although <figref idref="DRAWINGS">FIG. 4</figref> further indicates the physical systems in which my execute or store these processes and objects, it will be understood that the processes and objects disclosed may be executed or stored on more than one system, including systems not disclosed in <figref idref="DRAWINGS">FIG. 4</figref>. In other words, the processes and objects shown in <figref idref="DRAWINGS">FIG. 4</figref> allow for a variety of implementations through one or more of hardware, software, firmware, microcode, etc.</p>
<p id="p-0050" num="0049">Media can be ingested into the CHIMPS <b>110</b> when a content provider <b>130</b> uploads a media file to ingestion server(s) <b>410</b> in an application center <b>112</b> by utilizing a client <b>405</b>. The client <b>405</b> can be a stand-alone application or browser based, for example, and can communicate with ingest server(s) <b>410</b> through an application programming interface (API) configured for the ingestion of media files.</p>
<p id="p-0051" num="0050">Ingest server(s) <b>410</b> can communicate with devices in the kernel application center <b>111</b> executing programs such as kernel server <b>425</b> and file replication service <b>430</b>. The kernel server <b>425</b> can be configured organize the workflow among services such as transcoding <b>440</b> file system manager <b>435</b>, and other services <b>445</b> (e.g., analytics, dynamic API, etc.) Upon a particular event, for example, the kernel server can be configured to notify the relevant services of the event, causing the services to process tasks associated with the event.</p>
<p id="p-0052" num="0051">The file replication service <b>430</b>, under direction of the kernel server <b>425</b>, can coordinate the movement of the media files between services. For example, retrieving the uploaded media file from the ingest server(s) <b>410</b> and storing it on the file archive <b>450</b>, or retrieving transcoded media files from transcoding server(s) <b>460</b> and storing them in the media file origin.</p>
<p id="p-0053" num="0052">The data object updater <b>420</b> keeps the data object origin <b>415</b> up to date in response to any changes in the system. When, for example, a file is uploaded, transcoded, and stored in media file origin <b>455</b>, the location and other metadata concerning the transcoded media files need to be created or updated in the data object origin <b>415</b> to ensure an end user device that accesses the object in the data object origin <b>415</b> has the correct information regarding the related media file. Because the data object updater <b>420</b> receives updates from the kernel server <b>425</b> (which is notified when a transcoded media file is stored in the media file origin <b>455</b>, the system ensures the data objects in the data object origin are constantly up to date.</p>
<p id="p-0054" num="0053">The upload of a media file to the ingest server(s) <b>410</b>, as described above, can provide an example of how the kernel server <b>425</b> may coordinate workflow. For instance, in response to the upload, the ingest server(s) <b>410</b> can notify the kernel server <b>425</b> that a media file has been uploaded. The kernel server <b>425</b> informs the file replication service <b>430</b> of the uploaded media file, and the file replication service <b>430</b> moves the uploaded media file into the file archive <b>450</b> and notifies the kernel server <b>425</b> of the move. In response, the kernel server <b>425</b> notifies the file replication service <b>430</b>, the file system manager <b>435</b>, and the transcoding master <b>440</b> of the move. The file replication service <b>430</b> then will know it can delete the uploaded media file from the ingest server(s) <b>410</b>, the file system manager <b>435</b> will update the file system accordingly, and the transcoding master <b>440</b> will notify transcoding service(s) <b>460</b> of different transcoding tasks to be performed. The transcoding service(s) <b>460</b> can then retrieve the uploaded media file from the file archive <b>450</b> to create transcoded media files. The transcoding service(s) <b>460</b> notify the kernel server <b>425</b> once transcoding is complete, and the kernel server <b>425</b> relays this information to the file replication service <b>430</b>. The file replication service <b>430</b> then takes the transcoded media files from the transcoding services <b>460</b> and moves them to the media file origin <b>455</b>. Once the file replication service <b>430</b> notifies the kernel server <b>425</b> of the move, the kernel server <b>425</b>, in turn, notifies the file replication service <b>430</b> and the data object updater <b>420</b>. The data object updater <b>420</b> which updates the data object origin <b>415</b> accordingly, and the file replication service <b>430</b> deletes the transcoded media files from the transcoding services <b>460</b>.</p>
<p id="p-0055" num="0054">The modular nature of the system enables all tasks associated with an event to be completed quickly. As illustrated in the example above, workflow relating to a particular event, such as a media file upload, can be spread among the various services simultaneously. Moreover, because the system's modularity enables it to be scaled to accommodate differing hardware capacities, and because the system can be configured to dynamically allocate hardware to different services according to the needs of the system, the speed of completing tasks relating to a particular event can further be increased. For example, a server of the CHIMPS <b>110</b> can be configured to dynamically switch its purpose based on external conditions such as load and overall system performance, providing functions such as transcode, upload, metrics collection, application web service, and more, on an as-needed basis.</p>
<p id="p-0056" num="0055">Embodiments of such systems may include other systems that manage various requests from end users. For example, a system for providing an appropriate index file to any of a variety of clients utilizing a single URL. Referring to <figref idref="DRAWINGS">FIG. 5</figref>, an embodiment of such a system <b>500</b> is shown. Media may be streamed to end user device <b>140</b> though a client <b>510</b>. As mentioned above, the client <b>510</b> can be stand-alone media player, a plug-in, a browser, or other application, which can be executed on a personal computer or other electronic device.</p>
<p id="p-0057" num="0056">An index file (i.e. manifest file) generator <b>530</b> can be a program instantiated for media streaming to a particular client <b>510</b>. The index file generator <b>530</b> can be executed on a server or other computing device within an application center <b>112</b> of the CHIMPS <b>110</b>. Index files generated by the index file generator can include a wide variety of information such as starting, ending, and or run times for media chunks and locations for media chunks. This information can be embedded in a single string of data, such as a URL or other type of URI. If media includes various sub-streams (e.g., streams with alternative bitrates, captions, alternative languages, etc.) the index file can include data for chunks corresponding to each of the alternative sub-streams, as well as information regarding the bitrate and/or other unique information for each stream. Alternatively or in addition, index files indicating alternative sub-streams may be separate from index files indicating one or more media chunks for streaming.</p>
<p id="p-0058" num="0057">It should be understood that the index file can further comprise a wide variety of formats, which can depend on a particular streaming protocol utilized by the client <b>510</b>. HTTP streaming may, for example, require index files to comprise one or more of M3U, M3U8, XML, and XML-based formats. Of course, other formats can be used in accordance with relevant streaming protocols.</p>
<p id="p-0059" num="0058">The index file generator <b>530</b> can determine the relevant streaming protocol from information included in a request sent from the client <b>510</b> to stream a media file. For example, a client <b>510</b> can utilize a URL, obtained from a content provider <b>130</b> or other entity to stream a particular media file, to request the media file from the index file generator <b>530</b>. In addition to the URL, the request can included information regarding the identification of the client <b>510</b> (or &#x201c;client ID&#x201d;; e.g., a user agent identification in a request header) that the index file generator <b>530</b> can use to determine the proper format and content of an index file for the client <b>510</b>.</p>
<p id="p-0060" num="0059">A proper format and content of an index file can be determined in numerous ways. For example, the index file generator <b>530</b> itself may recognize the type of client from the client ID and determine a proper index file type accordingly. The index file generator <b>530</b>, therefore, may include information regarding common client IDs and/or special use cases for which particular index file types are used. This information can be updated periodically, and/or as index file types are determined for different client IDs.</p>
<p id="p-0061" num="0060">Alternatively, the index file generator <b>530</b> can access a client information database(s) <b>540</b> to determine the proper index file type. Such a database(s) can be located within the CHIMPS <b>110</b> (shown) and/or external to the CHIMPS <b>110</b> (not shown), depending on desired functionality. One example of an external client information database(s) <b>540</b> is the Wireless Universal Resource FiLe (WURFL), a device description repository maintained by ScientiaMobile, Inc. The proper index file type can be determined by identifying a index file type known to work for a particular client ID or matching a client ID to an index file type based on a profile of capabilities associated with the client ID.</p>
<p id="p-0062" num="0061">If a proper index file type cannot be determined, the index file generator <b>530</b> can provide an index file of a default index file type. The default index file type can include information for streaming the requested media file using a basic media stream compatible with virtually any media client. For example, parameters associated with a basic video stream could include a resolution of 160&#xd7;120, a 3GP (Third Generation Partnership Project file format) multimedia container format, and/or a streaming bit rate of 100 kilobits per second (kbps).</p>
<p id="p-0063" num="0062">The index file generator <b>530</b> further can utilize a file information database <b>550</b> in the creation of an index file. The file information database <b>550</b> can provide information regarding the requested media file (e.g., length, genre, author, etc.) as well as information regarding whether any advertisements are to be shown during the playback of the requested media file. If advertisements are to be shown during the playback of the requested media file, the database further can provide points at which advertisements are to be played during playback of the media file by the client.</p>
<p id="p-0064" num="0063">An advertisement server <b>520</b>, which can be maintained by a content provider <b>130</b>, can provide the index file generator <b>530</b> with additional information regarding advertisements to be shown during the playback of the requested media file. For example, the index file generator <b>530</b> can determine, using information from the file information database <b>550</b>, that three video advertisements are to be shown at certain points during the playback of a particular video file. The index file generator <b>530</b> then can request information from the advertisement server <b>520</b> regarding which advertisements to show. (This can be in the form of three different requests, or a single request, depending on the desired functionality of the system.) Moreover, the index file generator <b>530</b> can use the forwarded IP address and forwarded user agent of the client to identify the client, thereby allowing the content provider <b>130</b> to provide customized advertisements for the client. The advertisement server <b>520</b> can specify the advertisements to show (if an advertisements have been previously uploaded to the CHIMPS, and the index file generator can receive metadata regarding the advertisements from the file information database <b>550</b>. Alternatively, the advertisements may be uploaded to and chunked by the CHIMPS <b>110</b> after the index file generator <b>530</b> requests the information from the advertisement server <b>520</b> regarding which advertisements to show In this latter case, metadata regarding the advertisements would also be extracted and used in the creating of the index file. Regardless of when the advertisements are uploaded to the CHIMPS <b>110</b>, the advertisement server <b>520</b> enables a content provider <b>130</b> to traffic new advertisements into the playback of a media file shortly before the index file is generated, which can occur shortly before or even during the playback of a media file.</p>
<p id="p-0065" num="0064">In addition to providing information regarding advertisement content, the advertisement server <b>520</b> can designate certain URLs in the index file for beaconing. These beaconing URLs can be similar to normal URLs of an index file, but with additional information attached, designating it as a providing a &#x201c;beacon&#x201d; to report back to the content provider <b>130</b>. The content provider can use these beacons to determine, among other things, if a particular advertisement is played. For example, a beaconing URL can be a redirect URL included in a request for a first chunk of an advertisement. The request, which initially is directed to an API server of the CHIMPS <b>110</b>, is interpreted as a beacon by the API server and added to a list of items for which the API server requests of the advertisement server <b>520</b> (or other system of the content provider <b>130</b>). The beacon itself can be, for example, a getRequestURL( ) or similar request that the advertisement server <b>520</b> can use to determine that a particular URL was made. The API server can use the forwarded IP address and forwarded user agent of the client to help ensure that the content provider <b>130</b> can correctly determine that a beacon corresponds with a request from a particular client <b>510</b>. The API server also can redirect the client to a particular media file delivery service provider (MFDSP) (or other system hosting the requested chunk) to receive the requested chunk. In alternative embodiments, the content provider <b>130</b> can provide additional beaconing URLs that can be used to provide beaconing information regarding the playback of the media file itself. Through the use of such beaconing URLs, the content provider <b>130</b> to is able to provide its own beaconing data in addition or as an alternative to any beaconing data gathered by the CHIMPS <b>110</b>.</p>
<p id="p-0066" num="0065">The index file generator <b>530</b> then uses the information regarding the client ID, the requested media file, the advertisement(s) to be shown during playback of the media file, and the points of the media file at which the advertisement(s) are to be played, to create an index file of the right index file type to return to the client <b>510</b>. As indicated above, the index file can include, among other things, a number of URLs indicating the location of each chunk of the media file to be played by the client <b>510</b>, as well as chunks of the advertisement(s). The chunks of the advertisement(s) are included in an manner such that they are shown at a point(s) during the playback of the media file corresponding to the points designated by the file information database <b>550</b>. Additionally, the index file can include one or more beaconing URLs which, when used, can be indicative of the playback of an advertisement as discussed above.</p>
<p id="p-0067" num="0066">The URLs provided by an index file additionally can direct a client <b>510</b> to additional index files. For example, under certain adaptive bit rate streaming protocols, a first index file typically can include a number of URLs to additional index files, where each additional index file corresponds to a particular bit rate for streaming. The client <b>510</b> then can choose a bit rate based on one or more factors such as connection speed, device type, etc. Other streaming rates (bytes, etc.) may be used additionally or alternatively.</p>
<p id="p-0068" num="0067">To this end, the index file generator <b>530</b> can be configured to create an index file that provides the client <b>510</b> with a particular set of bit rates adapted to the client's circumstances. The client's circumstances not only can include the type of end user device <b>140</b> (also referred to herein as &#x201c;device type&#x201d;) on which the client is running, but also the type of network to which the device is connected, among other things. These circumstances may be determined from a request header provided by the client along with a URL, and/or they may be determined utilizing other data obtained from and/or regarding the client <b>510</b>. (The index file generator <b>530</b>, for example, can determine that the Autonomous System (AS) number of a particular client's IP address is associated with a provider of a mobile wireless network.) Because the set of bit rates provided in the index file provides a customized selection for the client <b>510</b>, the resulting playback can be optimized to provide the best user experience.</p>
<p id="p-0069" num="0068">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example Bit Rates for Certain Device/Network Types</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Device/Network Type</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="center"/>
<colspec colname="2" colwidth="49pt" align="center"/>
<colspec colname="3" colwidth="35pt" align="center"/>
<colspec colname="4" colwidth="35pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Smart Phone/</entry>
<entry/>
<entry>Tablet/</entry>
<entry/>
</row>
<row>
<entry/>
<entry>Mobile</entry>
<entry>Smart Phone/</entry>
<entry>Mobile</entry>
<entry>Tablet/</entry>
</row>
<row>
<entry/>
<entry>Wireless</entry>
<entry>Wired</entry>
<entry>Wireless</entry>
<entry>Wireless</entry>
</row>
<row>
<entry/>
<entry>Network</entry>
<entry>Network</entry>
<entry>Network</entry>
<entry>Network</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="6">
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="char" char="."/>
<colspec colname="3" colwidth="49pt" align="center"/>
<colspec colname="4" colwidth="49pt" align="center"/>
<colspec colname="5" colwidth="35pt" align="center"/>
<colspec colname="6" colwidth="35pt" align="center"/>
<tbody valign="top">
<row>
<entry>Stream-</entry>
<entry>1200</entry>
<entry/>
<entry/>
<entry>X</entry>
<entry>X</entry>
</row>
<row>
<entry>ing</entry>
<entry>800</entry>
<entry/>
<entry/>
<entry>(X)</entry>
<entry>X</entry>
</row>
<row>
<entry>Bit</entry>
<entry>600</entry>
<entry>X</entry>
<entry>(X)</entry>
<entry>X</entry>
<entry>(X)</entry>
</row>
<row>
<entry>Rate</entry>
<entry>400</entry>
<entry>(X)</entry>
<entry>X</entry>
<entry/>
<entry>X</entry>
</row>
<row>
<entry>(kbps)</entry>
<entry>200</entry>
<entry>X</entry>
<entry>X</entry>
<entry/>
<entry>X</entry>
</row>
<row>
<entry/>
<entry>100</entry>
<entry>X</entry>
<entry>X</entry>
<entry/>
<entry>X</entry>
</row>
<row>
<entry/>
<entry>64</entry>
<entry>X</entry>
<entry>X</entry>
<entry>X</entry>
<entry>X</entry>
</row>
<row>
<entry namest="1" nameend="6" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0070" num="0069">Table 1, provided merely as an example, illustrates the different sets of streaming bit rates an index file can make available to a client, based on the device type and the network type. Not only can the index file include a selection of available bitrates, indicated by &#x201c;X&#x201d;, but the index file further can designate an initial bit rate, indicated by &#x201c;(X)&#x201d;, for the client <b>510</b>. The client can then choose to steam the media file using the initial bit rate designated by the index file, or it may choose to stream the media file using one of the other bit rates provided in the index file. Alternatively, if the client <b>510</b> does not utilize an adaptive bit rate protocol, the index file generator can provide an index file of a single bit rate, where the single bit rate can be determined based on device type, network type, etc.</p>
<p id="p-0071" num="0070">For example, an index file for a smart phone connected to a mobile wireless network (e.g., a wireless carrier for mobile phones and other wireless devices) can provide URLs for streaming a requested media file at 600, 400, 200, 100, and 64 kbps, where 400 kbps is designated as the initial rate at which the client can begin streaming the media file. However, if a smart phone is connected with a wired network (e.g., a cable or DSL internet connection), including a wireless local area network (LAN) connected to the internet through a wired network, the index file may provide the same set of URLs for streaming the requested media file, but designate a higher initial bit rate at which the client can begin streaming the media file. On the other hand, because a tablet computer may have a monitor capable of displaying higher-quality resolutions associated with a higher bit rate, the index file can provide a tablet computer with different sets of bit rates and different starting bit rate designations, including higher bit rates, that are not included in an index file provided to a client <b>510</b> running on a smart phone.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 6A</figref> illustrates a simplified flowchart of a method <b>600</b>-<b>1</b> for providing a media file to any of a variety of clients <b>510</b> utilizing a single URL. This method can be executed, for example, by the index file generator <b>530</b> of <figref idref="DRAWINGS">FIG. 5</figref>. The method <b>600</b>-<b>1</b> begins at block <b>610</b> where a request for a media file is received. Among other things, the request can contain a URL corresponding to the media file.</p>
<p id="p-0073" num="0072">At block <b>612</b>, the device type and/or network type is determined. As discussed above, the request can include a header with client ID information. The client ID information can be indicative of a particular device type, including the type of physical device, as well as the type of operating system and/or client the physical device is running Determining the device type can include using one or more databases and/or resorting to a default device type if a particular device type is not identified. As discussed above, the network type can be determined, for example, from the AS number of the client's IP address, which can be associated with a particular network provider (e.g., wireless mobile network provider, wired network provider, etc.).</p>
<p id="p-0074" num="0073">At block <b>615</b>, metadata regarding the requested media file is retrieved. The metadata, which can be stored on one or more databases in the CHIMPS <b>110</b>, for example, can include information regarding the media file such as length, title, author, etc. Additionally, at block <b>620</b>, advertisement support can be determined. Information regarding advertisement support, which also can be stored on one or more databases, can include whether advertisements can be included in the playback of a media file, and if so, at what points during the playback of the media file.</p>
<p id="p-0075" num="0074">At block <b>625</b>, if the media file includes advertisement support, the advertisement(s) to include in the playback of the media file are determined. As discussed previously, determining the advertisement(s) to include can comprise communicating with a content provider <b>130</b> (or other entity), who can indicate the advertisement(s) to include. The advertisement(s) (which can be files with a video and/or audio) may be uploaded beforehand to a MFDSP <b>150</b>, server, or other delivery system, or they may be uploaded by the content provider <b>130</b> (or other entity) after the request for the media file is received. The advertisement(s) further may be chunked beforehand, dynamically chunked once requested, comprise complete file(s), or may be already included as part of a permutation of a media file.</p>
<p id="p-0076" num="0075">At block <b>630</b> metadata regarding the advertisement(s) is retrieved. Similar to the metadata for the media file, the metadata for the advertisement(s) can include length, title, etc., which can be used in creating the index file. At block <b>635</b>, the index file is created using the metadata of the media file and advertisement(s) as well as information regarding the device type, which can impact the format and/or content of the index file. Finally, at block <b>640</b>, the index file is returned.</p>
<p id="p-0077" num="0076">The method <b>600</b>-<b>1</b> can be executed with every time a media file is requested. Even though a single URL can correspond with a single media file, the content of the index file returned at block <b>640</b> may be different. Depending on the type of client (e.g., client ID) and/or type of network and the advertisements to be included in the playback, among other things, the index file can vary to conform to different formats, include different available streaming bit rates, include information regarding different advertisements, and more. Thus, despite the fact that a content provider <b>130</b> can provide a single URL to correspond to a particular media file, the streaming experience can be tailored to a particular client <b>510</b>.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 6B</figref> illustrates a simplified flowchart of a method <b>600</b>-<b>2</b> for providing a media file to any of a variety of clients <b>510</b> utilizing a single URL, similar to the method <b>600</b>-<b>1</b> of <figref idref="DRAWINGS">FIG. 6A</figref>. Here, however, the illustrated method <b>600</b>-<b>2</b> demonstrates how there can be a reduced number of blocks if it is determined, in block <b>620</b>, that there is no advertisement support for the requested media file. In this case, the index file can be built at block <b>635</b> without any additional determination of advertisement(s) to include in the playback of the media file. That said, there may be one or more advertisements already integrated into the media file.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 6C</figref> illustrates a simplified flowchart of a method <b>600</b>-<b>3</b> for enabling a system to provide a media file to any of a variety of clients <b>510</b> utilizing a single URL, similar to the methods <b>600</b>-<b>1</b>, <b>600</b>-<b>2</b> of <figref idref="DRAWINGS">FIGS. 6A-6B</figref>. In this method <b>600</b>-<b>3</b>, however, an index file is not returned. Instead, a URL (or other indicator) is determined, at block <b>637</b>, and returned, at block <b>642</b>, to the client <b>510</b>. This method <b>600</b>-<b>3</b> illustrates how the systems and methods described herein can be used in applications where the client does not utilize an index file, but rather requests an entire media file at once. The URL returned to the client at block <b>642</b> can indicate the location of a particular permutation of the requested media file with advertisements included as determined at block <b>625</b>. Depending on the capabilities of the system providing the media file, the particular permutation of the media file can be dynamically generated upon request by the client if not otherwise stored on the system.</p>
<p id="p-0080" num="0079">Dynamic generation of chunks and/or entire media files may or may not involve transcoding. The media file can be stored in a format where transcoding may not be needed, thereby reducing the processing requirements for creating chunks of media during streaming. For example, media files may be stored such as H.264 or MPEG-4 video format and/or AAC, HE-AAC, or MP3 audio format. According to some streaming protocols, such as some forms of HTTP streaming, chunks of media in these formats would not need transcoding before being wrapped in an MPEG-2 transport stream container format. Instead, such a conversion essentially would require the addition of metadata to create the streaming format from the format of the stored media file. In other words, generating a deliverable chunk of media may only require identifying the stored media file, extracting the relevant segment of the media from the media file, and adding certain metadata in accordance with a container format. This process requires little processing power and can be easily performed on the fly during streaming. More details regarding this process can be found in U.S. patent application Ser. No. 13/092,299, entitled &#x201c;TRANSCODELESS ON-THE-FLY AD INSERTION,&#x201d; which is incorporated herein in its entirety. Once the deliverable chunk of media is generated, it can be encrypted according to the techniques described herein.</p>
<p id="p-0081" num="0080">Where an index file is used, the client can stream the requested media file by using the URLs designated in the index file to download the chunks from a content delivery service. <figref idref="DRAWINGS">FIG. 7A</figref>, shows an embodiment of a system <b>700</b>-<b>1</b> for delivering content, including media files, which can be chunked and/or encrypted. The client <b>510</b> and index file generator <b>530</b> are also illustrated for reference.</p>
<p id="p-0082" num="0081">In this system <b>700</b>-<b>1</b>, chunks of media can be generated during media streaming by a dynamic segmentor, which of a dynamic permutation layer (DPL) <b>740</b> providing an HTTP service. The DPL <b>740</b>, as well as the media file origin <b>455</b> can be located within a kernel application center <b>111</b> of the CHIMPS <b>110</b> on, for example, a media file origin server. The system <b>700</b>-<b>1</b> can be configured such that the kernel application center <b>111</b> provides dynamically-created chunks of media to a MFDSP <b>150</b> for delivery to client <b>510</b>. The MFDSP <b>150</b> can store the chunks locally in, for example, a media file cache <b>720</b>, thereby forgoing the need to dynamically create a chunk again if the same chunk is requested in the future.</p>
<p id="p-0083" num="0082">After a chunk is dynamically created, if encryption is desired, the DPL <b>740</b> also can encrypt the chunk using an encryption key. The encryption key can be, for example, a private key of an asymmetric encryption scheme. Because the overhead of encrypting a chunk of a media file is relatively small, the DPL <b>740</b> can encrypt the chunks in real time, as the client <b>510</b> is streaming the media file (i.e., as the chunks are being requested). Such a scheme can be implemented in numerous ways.</p>
<p id="p-0084" num="0083">In one embodiment, the DPL <b>740</b> can request a private key through an Application Programming Interface (API) server <b>730</b> of the content provider <b>130</b>. The API server <b>730</b> can return the requested encryption key to the DPL <b>740</b> via a secure communication link <b>785</b>, which can be encrypted and/or otherwise secured to help ensure the security of the encryption key is not compromised. The DPL <b>740</b> can then use the encryption key to encrypt one or more chunks of a media file, returning the encrypted chunk(s) to the MFDSP <b>150</b> for delivery to the client <b>510</b>. The client can obtain the corresponding decryption key (e.g., public key) from the content provider <b>130</b>, the CHIMPS <b>110</b>, or other source.</p>
<p id="p-0085" num="0084">The functionality provided by this system <b>700</b>-<b>1</b> enables the content provider <b>130</b> to control encryption of chunks of media. Depending on the desired encryption scheme, the DPL <b>740</b> can request a new encryption key&#x2014;which is provided by the API server <b>730</b>&#x2014;for each chunk of a media file. Additionally or alternatively, the DPL <b>740</b> can request a new encryption key less frequently, such as with each media file and/or group of media files. Moreover, changing an encryption key may be time based, such that the DPL <b>740</b> requests a new encryption key every minute, hour, day, etc. In addition, or as an alternative, the API server <b>730</b> may provide a new encryption key to the DPL <b>740</b> without a request from the DPL <b>740</b>.</p>
<p id="p-0086" num="0085">In another embodiment, the DPL <b>740</b> can generate an encryption key. In this embodiment, the DPL <b>740</b> can utilize an algorithm provided by the API server <b>730</b> via the secure communication link <b>785</b>. The API server <b>730</b> and DPL <b>740</b> can run the algorithm in synchronization to generate identical encryption/decryption keys, such that the encryption key does not need to be communicated between the API server <b>730</b> and the DPL <b>740</b>. Moreover, the API server <b>730</b> can provide an algorithm in each response to the DPL's requests, thereby allowing the DPL <b>740</b> to generate the encryption key without the need to store an algorithm or otherwise have access to the algorithm beforehand. Alternatively, the DPL <b>740</b> can store a variety of algorithms for encryption key generation, and the API server <b>730</b> could indicate an algorithm to use in response to an algorithm request from the DPL <b>740</b>. Such functionality can give the allow content provider <b>130</b> control of encryption keys and/or encryption key generation.</p>
<p id="p-0087" num="0086">Alternatively, the DPL <b>740</b> can simply generate the encryption key (which can be generated for each chunk, media file, etc., or may be time based, as discussed above). In this case, the DPL <b>740</b> can provide the encryption key to the API server <b>730</b>, or retain the encryption key without sharing it, depending on the desired functionality.</p>
<p id="p-0088" num="0087">In sum, the system <b>700</b>-<b>1</b> for indexing and encrypting dynamically-created chunks of a media file can, after receiving a request for an index file from a client <b>510</b>, dynamically generate an index file with an index file generator <b>530</b>. The index file can, among other things, indicate where a next chunk of a media file may be located. A client can then request the chunk from the location indicated by the index file, which can comprise a media file cache <b>720</b> in a MFDSP <b>150</b>. If the chunk is not found in the media file cache <b>720</b>, or if the chunk is encrypted with an outdated encryption key, the cache miss can redirect the request to a DPL <b>740</b>, which can dynamically generate the requested chunk by accessing the corresponding media file in the media file origin <b>455</b>. The DPL <b>740</b> determines an encryption key (e.g., by generating the encryption key, receiving it from the API server, etc.) and creates an encrypted chunk by encrypting the requested chunk with the encryption key. The encrypted chunk then can be provided to the MFDSP <b>150</b> for storage in the media file cache <b>720</b> and delivery to the client <b>510</b>. If the same chunk is requested at a later point in time (and the chunk is not encrypted with an outdated encryption key) the MFDSP <b>150</b> can deliver the chunk from the media file cache <b>720</b>, thereby forgoing the need to redirect the request to the DPL <b>740</b> to regenerate the chunk.</p>
<p id="p-0089" num="0088">The determination of whether an encrypted chunk in the media file cache <b>720</b> of the MFDSP <b>150</b> has an outdated encryption key can be made in a variety of ways. For example, the DPL <b>740</b>, upon receiving and/or generating the encryption key, can notify the MFDSP <b>150</b> of the update so that the MFDSP <b>150</b> can delete and/or overwrite any affected files. Alternatively, the DPL <b>740</b> can inform the index file generator <b>530</b> of an update in the encryption key. The index file generator <b>530</b> can adjust index files accordingly, indicating, for example, an encryption key version number in a URL of the index file. If the MFDSP <b>150</b> cannot match the URL to any cashed location in the media file cache <b>720</b>, it will request an updated chunk from the DPL <b>740</b>. Other techniques for indicating expired encryption keys, and other methods of encryption (e.g., RSA, symmetric key, etc.) also are contemplated.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates an alternative embodiment <b>700</b>-<b>2</b> of a system for indexing and encrypting dynamically-created chunks of a media for media streaming. Rather than utilize a MFDSP, this embodiment <b>700</b>-<b>2</b> includes a media caching server <b>770</b> within an application center <b>112</b> of the CHIMPS <b>110</b>. The media caching server <b>770</b> can receive chunk requests from, and provide the corresponding chunks to, a client <b>510</b>. It will be understood that such a media caching server(s) <b>770</b> or similar device(s) can be located anywhere within the CHIMPS <b>110</b> and/or in a system(s) communicatively linked to the CHIMPS <b>110</b>.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 8</figref> is a simplified illustration of an embodiment <b>800</b> of a system for dynamic encryption integrated into a traditional system that may not have dynamic chunking and/or dynamic indexing capabilities. Here, an index file for streaming a media file can include a URL that directs a client <b>510</b> to a media server <b>811</b>. The media server <b>811</b> can include a chunk encrypter <b>840</b> communicatively connected with an API server <b>730</b> of a content provider <b>130</b>, as well as a media chunk storage <b>855</b> that stores media chunks for media file(s). After receiving a request for a media chunk from the client <b>510</b>, the chunk encrypter <b>840</b> can retrieve the requested chunk from media chunk storage <b>855</b> and determine an encryption key using techniques such as those disclosed above (e.g., receive an encryption key from the API server <b>730</b>, generate the encryption key, etc.). The chunk encrypter <b>840</b> then can create an encrypted media chunk by encrypting the requested media chunk with the encryption key, and provide the encrypted media chunk to the client.</p>
<p id="p-0092" num="0091">The embodiment <b>800</b> shown in <figref idref="DRAWINGS">FIG. 8</figref> is provided as an example and is not limiting. As with other illustrations provided herein, the embodiment <b>800</b> can be altered in numerous ways without departing from the spirit and scope of this disclosure. For example, the media chunks may be stored at a location and/or system remote from the media server <b>811</b>. Moreover, encrypted chunks may be cached by one or more caching server(s) that may be communicatively linked between the client <b>510</b> and the chunk encrypter <b>840</b>. Other such variations are contemplated.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 9A</figref> illustrates a simplified flowchart of a method <b>900</b>-<b>1</b> for dynamically encrypting chunks of media for media streaming, which can be executed, for example, by the DPL <b>740</b> or chunk encrypter <b>840</b>. The method <b>900</b>-<b>1</b> begins at block <b>910</b> where a request for a chunk of a media file is received. As indicated earlier, such a request can come from a MFDSP <b>150</b>, media caching server <b>770</b>, or other media servicing system. Alternatively, the request can come directly from a client <b>510</b> running on an end user device <b>140</b>. At block <b>915</b>, the requested chunk is retrieved.</p>
<p id="p-0094" num="0093">At block <b>916</b>, an encryption key is requested from a content provider <b>130</b>, and at block <b>920</b> the encryption key is received from the content provider <b>130</b>. Because this exchange involves an encryption key, it can be done over a secure communication link, as discussed above. Moreover, the request for the encryption key from the content provider may be sent prior to, or in conjunction with, the retrieval of the requested chunk. Such timing may increase efficiency by reducing the overall time it takes to execute the method <b>900</b>-<b>1</b> of <figref idref="DRAWINGS">FIG. 9A</figref>. Although the term &#x201c;content provider&#x201d; is used in the method <b>900</b>-<b>1</b> and in other figures provided herein, other entities can be used as an encryption key source. After the encryption key is received, the requested chunk is encrypted at block <b>925</b> and returned at block <b>930</b>.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 9B</figref> illustrates a simplified flowchart of a method <b>900</b>-<b>2</b> for dynamically encrypting chunks of media for media streaming, similar to the method <b>900</b>-<b>1</b> illustrated in <figref idref="DRAWINGS">FIG. 9A</figref>. Here, however, in response to receiving a request for a chunk at block <b>910</b>, the method <b>900</b>-<b>2</b> includes requesting a key-generation algorithm from a content provider <b>130</b> at block <b>917</b> and receiving the key-generation algorithm from the content provider at block <b>918</b>. Additionally, at block <b>922</b>, an encryption key is generated using the received key-generation algorithm. As indicated earlier, such functionality enables the system executing the method <b>900</b>-<b>2</b> to provide encryption without the need to store encryption keys and/or algorithms. It also enables the content provider <b>130</b> to control generation of the encryption keys, allowing the content provider <b>130</b> to rotate encryption keys at virtually any time.</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 9C</figref> illustrates a simplified flowchart of a method <b>900</b>-<b>3</b> for dynamically encrypting chunks of media for media streaming involving encryption key generation, similar to the method <b>900</b>-<b>2</b> illustrated in <figref idref="DRAWINGS">FIG. 9B</figref>. Rather than request a key-generation algorithm, however, the method includes generating the encryption key at block <b>923</b> and providing the corresponding decryption key to the content provider <b>130</b> at block <b>924</b>. Thus, unlike the methods <b>900</b>-<b>1</b>, <b>900</b>-<b>2</b> of <figref idref="DRAWINGS">FIGS. 9A and 9B</figref>, the content provider <b>130</b> has a more passive role in the encryption of the chunks, with little or no involvement in the generation of the encryption key. That said, the generation of the encryption key may be in accordance with techniques and/or algorithms provided by a content provider <b>130</b>.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIGS. 9A-9C</figref> are provided as examples and are not limiting. The methods <b>700</b> can be modified for different functionality. For example, the methods may be modified to encrypt multiple chunks with the same encryption key, such as all chunks of a certain media file, all chunks requested within a certain time window, etc.</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 10</figref> is an illustration of a simplified swim lane diagram showing the interaction of components in a system configured to provide dynamic encryption, according to one embodiment. In this embodiment, a client can send a request for a chunk at block <b>1005</b>. Depending on the streaming protocol, the request may be made while a client plays a chunk of media previously downloaded during streaming. The request received by a MFDSP <b>150</b> at <b>1010</b>. As discussed above, the use of a MFDSP <b>150</b> is optional; other embodiments may include components other than a MFDSP <b>150</b>.</p>
<p id="p-0099" num="0098">Blocks <b>1015</b> and <b>1017</b> help determine whether the MFDSP <b>150</b> can return the encrypted chunk corresponding to the requested chunk without a call to the DPL <b>740</b>. At block <b>1015</b>, the MFDSP <b>150</b> determines whether the requested chunk is in cache. If not, the process moves to block <b>1020</b>, where the MFDSP <b>150</b> requests the chunk from the DPL <b>740</b>.</p>
<p id="p-0100" num="0099">Otherwise, if the chunk is cached at the MFDSP <b>150</b>, the process moves to block <b>1017</b> where the MFDSP <b>150</b> determines whether the encryption of the chunk is current. As discussed above, such a determination can be made in several ways. For example, an encryption version can be embedded in the URL, the MFDSP <b>150</b> can be notified by the DPL <b>740</b> of a change in the encryption key, etc. If the encryption is current, the MFDSP <b>150</b> can simply return the encrypted chunk, at block <b>1080</b>. Otherwise, the MFDSP <b>150</b> requests the chunk from the DPL <b>740</b> at block <b>1020</b>.</p>
<p id="p-0101" num="0100">At block <b>1025</b>, the DPL <b>740</b> receives the request for the chunk, and at block <b>1030</b> retrieves the chunk. As discussed previously, certain embodiments can allow for the chunk to be created dynamically by the DPL <b>740</b>. Otherwise, the DPL <b>740</b> (or other system configured to encrypt chunks) can retrieve the chunk from storage. Before the chunk is encrypted, the encryption key must be obtained. Thus, at block <b>1035</b>, the DPL <b>740</b> requests the encryption key.</p>
<p id="p-0102" num="0101">At block <b>1040</b>, the API server (which can be hosted by the content provider of the media file corresponding to the chunk, or other entity) receives the DPL's request for an encryption key. The API server then generates or otherwise obtains the encryption key, at block <b>1045</b>. The encryption key can be, for example, stored in memory and used for multiple requests, rotated on a time and/or file basis, etc. Alternatively, a new key can be generated for each request received by the DPL <b>740</b>. In any case, the encryption key is returned to the DPL <b>740</b> at block <b>1050</b>.</p>
<p id="p-0103" num="0102">The DPL <b>740</b> receives the encryption key from the API server at block <b>1055</b>. With the encryption key, the DPL <b>540</b> encrypts the chunk, at block <b>1060</b>. The encrypted chunk is then returned to the MFDSP <b>150</b> at block <b>1065</b>.</p>
<p id="p-0104" num="0103">At block <b>1070</b>, the MFDSP <b>150</b> receives the encrypted chunk from the DPL <b>740</b>. The MFDSP <b>150</b> then can cache the encrypted chunk at block <b>1075</b>, thereby enabling the MFDSP <b>150</b> to provide it to clients who request the chunk in the future (provided, of course, that the encryption is current at the time of the future client requests). At block <b>1080</b>, the MFDSP <b>150</b> returns the encrypted chunk to the client, which is received at block <b>1085</b>. The client <b>510</b> can decrypt the encrypted chunk by utilizing a corresponding decryption key, which, in asymmetric encryption, can be provided by the API server <b>730</b> (or another system of the content provider) in a variety of ways.</p>
<p id="p-0105" num="0104">It should be noted that the methods, systems, and devices discussed above are intended merely to be examples. It must be stressed that various embodiments may omit, substitute, or add various procedures or components as appropriate. For instance, it should be appreciated that, in alternative embodiments, the methods may be performed in an order different from that described, and that various steps may be added, omitted, or combined. Also, features described with respect to certain embodiments may be combined in various other embodiments. Different aspects and elements of the embodiments may be combined in a similar manner. Also, it should be emphasized that technology evolves and, thus, many of the elements are examples and should not be interpreted to limit the scope of the invention.</p>
<p id="p-0106" num="0105">Specific details are given in the description to provide a thorough understanding of the embodiments. However, it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example, well-known circuits, processes, algorithms, structures, and techniques have been shown without unnecessary detail in order to avoid obscuring the embodiments. This description provides example embodiments only, and is not intended to limit the scope, applicability, or configuration of the invention. Rather, the preceding description of the embodiments will provide those skilled in the art with an enabling description for implementing embodiments of the invention. Various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention.</p>
<p id="p-0107" num="0106">Also, it is noted that the embodiments may be described as a process which is depicted as a flow diagram or block diagram. Although each may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be rearranged. A process may have additional steps not included in the figure. Furthermore, embodiments of the methods may be implemented by hardware, software, firmware, middleware, microcode, hardware description languages, or any combination thereof. When implemented in software, firmware, middleware, or microcode, the program code or code segments to perform the necessary tasks may be stored in a non-volatile computer-readable medium such as a storage medium. Processors may perform the necessary tasks.</p>
<p id="p-0108" num="0107">Having described several embodiments, it will be recognized by those of skill in the art that various modifications, alternative constructions, and equivalents may be used without departing from the spirit of the invention. For example, the above elements may merely be a component of a larger system, wherein other rules may take precedence over or otherwise modify the application of the invention. Also, a number of steps may be undertaken before, during, or after the above elements are considered. Accordingly, the above description should not be taken as limiting the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for providing a plurality of encrypted segments of a media file over a data network, the method comprising:
<claim-text>receiving, at a server, a request for a first segment of the media file;</claim-text>
<claim-text>retrieving the first segment of the media file, wherein the first segment of the media file comprises one of a plurality of segments of the media file that are each separately-addressable from an application layer using a corresponding URI, the first segment of the media file having media content for playback over a period of time;</claim-text>
<claim-text>determine a first encryption key;</claim-text>
<claim-text>creating an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key, wherein the encrypting the first segment of the media file occurs after receiving the request for the first segment of the media file;</claim-text>
<claim-text>providing, with the server, the encrypted first segment of the media file;</claim-text>
<claim-text>receiving, at the server, a request for a second segment of the media file;</claim-text>
<claim-text>retrieving the second segment of the media file, wherein the second segment of the media file comprises one of the plurality of segments of the media file that are each separately-addressable from the application layer using the corresponding URI, the second segment of the media file having media content for playback over a period of time;</claim-text>
<claim-text>determining a second encryption key;</claim-text>
<claim-text>creating an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key, wherein the encrypting the second segment of the media file occurs after receiving the request for the second segment of the media file; and</claim-text>
<claim-text>providing, with the server, the encrypted second segment of the media.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second encryption key is different than the first encryption key.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the requests for the first and second segments of the media file are received from a Media File Delivery Service Provider (MFDSP).</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the encrypted first and second segments of the media file are provided to the MFDSP.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the receiving the requests for the first and second segments of the media file and the providing the encrypted first and second segments of the media file occur during playback of the media file by a device communicatively linked to the data network.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining the first encryption key comprises generating the first encryption key.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the generating the first encryption key comprises using an algorithm received over a communication link.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising providing a first decryption key for decrypting the encrypted first segment of the media file.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the first encryption key comprises:
<claim-text>requesting, over a communication link, the first encryption key; and</claim-text>
<claim-text>receiving, over the communication link, the first encryption key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein determining the second encryption key comprises:
<claim-text>requesting, over the communication link, the second encryption key; and</claim-text>
<claim-text>receiving, over the communication link, the second encryption key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, determining the first encryption key comprises retrieving the first encryption key from data storage.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A non-volatile computer-readable storage medium having instructions embedded thereon, which, when executed by a processor, cause the processor to perform the method for providing the plurality of encrypted segments of the media file over the data network as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A server for communicating, via a network, a media file having a plurality of segments, the server comprising:
<claim-text>a network interface;</claim-text>
<claim-text>a memory configured to store one or more of the plurality of segments; and</claim-text>
<claim-text>a processor communicatively coupled with the memory and the network interface and configured to cause the server to:
<claim-text>receive, using the network interface, a request for a first segment of the media file;</claim-text>
<claim-text>retrieve the first segment of the media file from the memory, wherein the first segment of the media file comprises one of a plurality of segments of the media file that are each separately-addressable from an application layer using a corresponding URI, the first segment of the media file having media content for playback over a period of time;</claim-text>
<claim-text>determine a first encryption key;</claim-text>
<claim-text>create an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key, wherein encrypting the first segment of the media file occurs after receiving the request for the first segment of the media file;</claim-text>
<claim-text>provide, using the network interface, the encrypted first segment of the media file;</claim-text>
<claim-text>receive, using the network interface, a request for a second segment of the media file;</claim-text>
<claim-text>retrieve the second segment of the media file from the memory, wherein the second segment of the media file comprises one of the plurality of segments of the media file that are each separately-addressable from the application layer using the corresponding URI, the second segment of the media file having media content for playback over a period of time;</claim-text>
<claim-text>determine a second encryption key;</claim-text>
<claim-text>create an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key, wherein the encrypting the second segment of the media file occurs after receiving the request for the second segment of the media file; and</claim-text>
<claim-text>provide, using the network interface, the encrypted second segment of the media file.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor is configured to cause the server to receive the requests for the first and second segments of the media file from a Media File Delivery Service Provider (MFDSP).</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor is configured to cause the server to provide the encrypted first and second segments of the media file are to the MFDSP.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, the processor is configured to cause the server to receive the requests for the first and second segments of the media file and provide the encrypted first and second segments of the media file during playback of the media file by a device communicatively linked to the network.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein determining the first encryption key comprises generating the first encryption key.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00017">claim 17</claim-ref>, the processor is configured to cause the server to:
<claim-text>receive an algorithm via the network interface; and</claim-text>
<claim-text>use the algorithm to generate the first encryption key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor is configured to cause the server to determine the first encryption key by:
<claim-text>requesting, using the network interface, the first encryption key; and</claim-text>
<claim-text>receiving, using the network interface, the first encryption key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the processor is configured to cause the server to determine the second encryption key by:
<claim-text>requesting, using the network interface, the second encryption key; and</claim-text>
<claim-text>receiving, using the network interface, the second encryption key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The server for communicating, via the network, the media file having the plurality of segments as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the processor is configured to cause the server to determine the first encryption key by retrieving the first encryption key from the memory.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A system for securely communicating, with a network, a media file, the system comprising:
<claim-text>a data storage configured to store the media file; and</claim-text>
<claim-text>a processing server communicatively coupled with the data storage, the processing server configured to:
<claim-text>receive a request for a first segment of the media file, the first segment of the media file comprising one of a plurality of segments of the media file that are each separately-addressable from an application layer using a corresponding URI;</claim-text>
<claim-text>retrieve at least a portion of the media file from the data storage;</claim-text>
<claim-text>generate the first segment of the media file, wherein the first segment of the media file comprises media content for playback over a period of time;</claim-text>
<claim-text>determine a first encryption key;</claim-text>
<claim-text>create an encrypted first segment of the media file by encrypting the first segment of the media file using the first encryption key, wherein the encrypting the first segment of the media file occurs after the request for the first segment of the media file is received;</claim-text>
<claim-text>provide the encrypted first segment of the media file;</claim-text>
<claim-text>receive a request for a second segment of the media file, the second segment of the media file comprising one of the plurality of segments of the media file that are each separately-addressable from the application layer using the corresponding URI;</claim-text>
<claim-text>generate the second segment of the media file, wherein the second segment of the media file comprises media content for playback over a period of time;</claim-text>
<claim-text>determine a second encryption key;</claim-text>
<claim-text>create an encrypted second segment of the media file by encrypting the second segment of the media file using the second encryption key, wherein the encrypting the second segment of the media file occurs after receiving the request for the second segment of the media file; and</claim-text>
<claim-text>provide the encrypted second segment of the media file.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system for securely communicating, with the network, the media file as recited in <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising a media caching server configured to:
<claim-text>send the requests for the first and second segments of the media file, via the network, to the processing server;</claim-text>
<claim-text>receive the encrypted first and second segments of the media file, via the network, from the processing server; and</claim-text>
<claim-text>store the encrypted first and second segments of the media file in a memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system for securely communicating, with the network, the media file as recited in <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the media caching server is further configured to provide the encrypted first and second segments of the media file to a device communicatively coupled with the media caching server.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system for securely communicating, with the network, the media file as recited in <claim-ref idref="CLM-00024">claim 24</claim-ref> configured such that the media caching server will not send the requests for a segment of the media file via the network to the processing server if the media caching server has the segment of the media file stored in the memory. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627081-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627081</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11995677</doc-number>
<date>20060714</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>GB</country>
<doc-number>0514492.8</doc-number>
<date>20050714</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1020</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>5</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713171</main-classification>
<further-classification>713168</further-classification>
<further-classification>725105</further-classification>
</classification-national>
<invention-title id="d2e71">Multimedia data protection</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6185685</doc-number>
<kind>B1</kind>
<name>Morgan et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713183</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6880149</doc-number>
<kind>B2</kind>
<name>Cronce</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717126</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7080257</doc-number>
<kind>B1</kind>
<name>Jakubowski et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713187</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7124445</doc-number>
<kind>B2</kind>
<name>Cronce et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7243226</doc-number>
<kind>B2</kind>
<name>Newcombe et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713155</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7346780</doc-number>
<kind>B2</kind>
<name>Sinha et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713187</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7403618</doc-number>
<kind>B2</kind>
<name>Van Rijnsoever et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380239</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7779394</doc-number>
<kind>B2</kind>
<name>Homing et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717136</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2001/0021975</doc-number>
<kind>A1</kind>
<name>Pockrandt</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2001/0036271</doc-number>
<kind>A1</kind>
<name>Javed</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2002/0085713</doc-number>
<kind>A1</kind>
<name>Feig et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2002/0108050</doc-number>
<kind>A1</kind>
<name>Raley et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713193</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0164023</doc-number>
<kind>A1</kind>
<name>Koelle et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2003/0042301</doc-number>
<kind>A1</kind>
<name>Rajasekaran et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>235380</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2004/0230797</doc-number>
<kind>A1</kind>
<name>Ofek et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2004/0243805</doc-number>
<kind>A1</kind>
<name>Enokida</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713175</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2005/0120125</doc-number>
<kind>A1</kind>
<name>Morten et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0074807</doc-number>
<kind>A1</kind>
<name>Gauba et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 51</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2006/0085645</doc-number>
<kind>A1</kind>
<name>Bangui</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2006/0090209</doc-number>
<kind>A1</kind>
<name>Garay et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>EP</country>
<doc-number>1 187 483</doc-number>
<kind>A2</kind>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>EP</country>
<doc-number>1 246 463</doc-number>
<kind>A</kind>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>EP</country>
<doc-number>1418725</doc-number>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>GB</country>
<doc-number>2 401 008</doc-number>
<kind>A</kind>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>JP</country>
<doc-number>09-139849</doc-number>
<kind>A</kind>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>JP</country>
<doc-number>2002-092044</doc-number>
<kind>A</kind>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>JP</country>
<doc-number>2004-133801</doc-number>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>JP</country>
<doc-number>2004-164640</doc-number>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>JP</country>
<doc-number>2005-085188</doc-number>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>WO</country>
<doc-number>WO 99/27676</doc-number>
<kind>A2</kind>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>WO</country>
<doc-number>WO 02/21761</doc-number>
<kind>A</kind>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>WO</country>
<doc-number>WO 02/23315</doc-number>
<kind>A2</kind>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>Chang et al., &#x201c;Protecting software code by guards&#x201d;, <i>Lecture Notes in Computer Science </i>(2002), 2320(10):160-175.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Grimen et al., &#x201c;Software-based copy protection for temporal media during dissemination and playback&#x201d;, <i>ISISC 2005, LNCS 3935 </i>(2006), 362-377.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>Grimen et al., &#x201c;Tamper protection of online clients through random checksum algorithms&#x201d;, <i>ISTA 2006</i>, 67-79.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>Internet Streaming Media Alliance: &#x201c;Internet streaming and alliance encryption and authentication specification version 1.0&#x201d;, http://www.isma.tv (2004), 9-10.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>Macq et al., &#x201c;Cryptology for digital tv broadcasting&#x201d;, <i>Proceedings of the IEEE </i>(1995), 83(6):944-957.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>Messerges et al., &#x201c;Digital rights management in a 3G mobile phone and beyond&#x201d;, <i>DRM '03 </i>(2003), 27-38.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>PCT international Search Report issued on Mar. 30, 2007 in Application No. PCT/GB2006/002619, filed Jul. 14, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>33</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713187</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090132823</doc-number>
<kind>A1</kind>
<date>20090521</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Grimen</last-name>
<first-name>Gisle</first-name>
<address>
<city>Trondheim</city>
<country>NO</country>
</address>
</addressbook>
<residence>
<country>NO</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>M&#xf6;nch</last-name>
<first-name>Christian</first-name>
<address>
<city>Trondheim</city>
<country>NO</country>
</address>
</addressbook>
<residence>
<country>NO</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Grimen</last-name>
<first-name>Gisle</first-name>
<address>
<city>Trondheim</city>
<country>NO</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>M&#xf6;nch</last-name>
<first-name>Christian</first-name>
<address>
<city>Trondheim</city>
<country>NO</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Knobbe, Martens, Olson &#x26; Bear LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Conax AS</orgname>
<role>03</role>
<address>
<city>Oslo</city>
<country>NO</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Arani</last-name>
<first-name>Taghi</first-name>
<department>2492</department>
</primary-examiner>
<assistant-examiner>
<last-name>Gao</last-name>
<first-name>Shu Chun</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/GB2006/002619</doc-number>
<kind>00</kind>
<date>20060714</date>
</document-id>
<us-371c124-date>
<date>20080807</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2007/007112</doc-number>
<kind>A </kind>
<date>20070118</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The invention provides a method of transmitting a media work such as a movie to a client comprising the steps of (a) encrypting the work using a sequence of different keys corresponding to respective temporally spaced segments of the document, (b) transmitting software code containing an algorithm from a security server to the client, the algorithm having a result that is a function of the state of the client, (c) executing the code at the client and returning the result to the security server, (d) determining whether the result is indicative of an unmodified client, and further comprising the steps of: (e) transmitting a segment from a server to the client, (f) securely streaming a key corresponding to the transmitted segment from a secure remote server to the client, (g) decrypting the segment using the obtained media key, (h) if step (d) indicates a modified client, preventing further keys from being transmitted, otherwise repeating steps (e) to (g) and repeating steps (b) to (d).</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="189.06mm" wi="170.77mm" file="US08627081-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="229.62mm" wi="166.54mm" file="US08627081-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="239.27mm" wi="153.67mm" file="US08627081-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="189.15mm" wi="169.76mm" file="US08627081-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims benefit and priority to and is a U.S. National Phase of PCT Application Number PCT/GB2005/002619, filed on Jul. 14, 2006, designating the United States of America and published in the English language, which claims priority to Application No: GB 0514492.8, filed Jul. 14, 2005. The disclosures of the above-referenced applications are hereby expressly incorporated by reference in their entireties.</p>
<p id="p-0003" num="0002">The present invention relates to the secure distribution of multi-media works that have a temporal dimension such as movies, TV shows, audio documents, etc. In particular, it relates to a system for securely delivering such works to a user in a manner that prevents the user from obtaining an unauthorized copy of the work. Aspects of the invention also have applications in other server-client situations such as on-line banking, gaming, etc.</p>
<p id="p-0004" num="0003">Illicit copying of artistic works is a perennial problem. In the early days of the movie industry, whilst it was possible for unauthorized copies of films to be made, it was expensive to do so and not practicable except for persons with access to specialist equipment. With the advent of home video recorders a new market for movies and other recorded programmes became available to producers whilst simultaneously it became possible for those recordings to be illicitly copied and distributed.</p>
<p id="p-0005" num="0004">Today the DVD format, which provides higher quality playback and a more convenient and compact data carrier, is rapidly supplanting the video. In addition, with the advent of affordable broadband Internet connections, there is now an emerging market for downloading or streaming movies and other media from remote servers onto home computers.</p>
<p id="p-0006" num="0005">Where a media work is downloaded, a copy of it is stored on the hard drive of the computer and it can normally be viewed repeatedly by the user, analogously to watching a video recording. Streaming content, whether live or recorded, is watched as it is transmitted to the computer (as with a conventional TV programme) in almost real-time (there is a short delay due to the need to provide some buffering). It is well known for radio and some TV stations to offer their content in this manner.</p>
<p id="p-0007" num="0006">Whilst these improvements in technology have allowed the development of a promising new market for media companies, there is also a corresponding problem in preventing the production and distribution of unauthorized copies of the works. It now is commonplace for even low-cost home computers to have the capability to record content onto DVDs.</p>
<p id="p-0008" num="0007">Techniques have therefore been developed with the aim of preventing such copying. In a conventional approach, the media supplier, who is referred to here as a &#x201c;content provider&#x201d;, owns encoded media works, for example movies, which will be referred to generically as &#x201c;media works&#x201d;. These are to be distributed and presented to a user's client program/viewer in a way that does not allow the user to create a copy of the encoded media work. The delivery can be carried out by either streaming over a network or by delivering a physical medium, for example a DVD, to the client.</p>
<p id="p-0009" num="0008">Where the work is transported over a network it is usually secured by cryptographic means to protect the work from being intercepted and copied by a third party. We refer to these cryptographic means as &#x201c;transport encryption&#x201d;. (Encryption, which is a security measure, is to be distinguished from encoding, whereby the work is converted and usually compressed into a form that can readily and efficiently be transmitted.) Encryption techniques are sufficiently well developed and secure that the communication over computer networks can be secured in an appropriate way.</p>
<p id="p-0010" num="0009">Before the media work is delivered to the client, the content owner protects the encoded media document using cryptographic means. Within a secure &#x201c;provider environment&#x201d;, an encryption tool is used to encrypt the work with a &#x201c;media key&#x201d; to create an encrypted encoded media work, the &#x201c;encrypted work&#x201d;.</p>
<p id="p-0011" num="0010">The intention is that the client can then only use the work if he has the media key that allows him to decrypt it. This can be embedded in the client program/viewer/player and/or the media, for example in DVD-players and DVDs. (The client program/viewer/player may be a free-standing device or a viewer software program on a computer.)</p>
<p id="p-0012" num="0011">Another option, which is illustrated schematically in <figref idref="DRAWINGS">FIG. 1</figref>, is for the media key to be retrieved from a license server <b>1</b> on demand. This allows for streaming of the media work. To support this model, the encryption tool <b>2</b> wraps the media key, together with additional information, in a license <b>3</b> and sends this to the license server <b>1</b>. The client then receives an encrypted, encoded media stream <b>4</b> from the streaming server <b>5</b> that has to be decrypted in a viewer <b>6</b> before it can be presented to the client. In order to watch the encrypted movie <b>7</b>, the viewer requests a license containing the media key from the license server (see &#x201c;Start-up Phase&#x201d; in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0013" num="0012">Once the viewer has received the license <b>3</b> (and therefore the media key), it connects to the streaming server <b>5</b> from which it receives an encrypted encoded media stream <b>4</b>. The viewer uses the media key to decrypt the encrypted encoded media stream and present it to the client (see &#x201c;Streaming phase&#x201d; in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0014" num="0013">A major problem in the scenario described above is that the viewer is executed on a host that is controlled by the client. Thus, the viewer is not executed in the trusted environment <b>8</b> (where the movie <b>9</b> was originally encrypted). There is, therefore, a risk that the client could modify the viewer. Even though the viewer will usually only decrypt and decode part of the media stream, during the whole presentation process every part of the encoded media stream will at some point be present in the viewer memory-image. Another risk is that, since the memory image of the viewer has to contain the key, the user could extract the media key, in which case he would be able to create a copy of the unencrypted encoded media.</p>
<p id="p-0015" num="0014">The problem of modification exists for purely software-based viewers as well as for hardware-based viewers, for example, designated DVD players. Though it is more difficult to modify a hardware-based viewer than to modify a software-based viewer, it is not impossible. Thus there exists a need for a system that addresses these drawbacks.</p>
<p id="p-0016" num="0015">General requirements for any effective protection mechanisms include the following: It should be resource-intensive to break so that the cost of breaking is at least of the same magnitude as the value of the work. Any successful attack should not be generalisable so that it can be applied elsewhere. It should preferably also facilitate detection. The various aspects of the invention described below address these requirements individually and the preferred forms of the invention provide a system that satisfies them all.</p>
<p id="p-0017" num="0016">In the following discussion, a media work is a work that has a temporal aspect, i.e. it contains a number of presentational steps that have to be performed in an appropriate order. The steps are normally computationally independent of each other and can be processed independently. In most cases, the complete presentation takes a significant amount of time: many minutes or some hours in the case of a movie.</p>
<p id="p-0018" num="0017">According to one aspect of the invention there is provided a method of transmitting a media work to a client comprising the steps of:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0018">(a) encrypting the work using a sequence of different keys corresponding to respective temporally spaced segments of the work,</li>
        <li id="ul0002-0002" num="0019">(b) securely transmitting a first key from a secure server to the client and transmitting the corresponding segment from a server to the client,</li>
        <li id="ul0002-0003" num="0020">(c) in the client, using the first key to decrypt the corresponding segment,</li>
        <li id="ul0002-0004" num="0021">(d) in the viewer, presenting the decrypted portion,</li>
        <li id="ul0002-0005" num="0022">(e) repeating steps (b) to (d) in respect of further segments and keys.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0019" num="0023">The invention may be applied to any kind of media work (as defined above) that has a temporal aspect, and is particularly useful for distributing movies, for example streaming them over the Internet.</p>
<p id="p-0020" num="0024">By dividing the document into a sequence of segments, it becomes impracticable to copy more than a small part because each key can decrypt only one segment, i.e. the keys are functionally independent. Thus, only one segment of the movie at a time can be copied. Furthermore, there should not be a master key that can unlock other keys, i.e. the keys should preferably be structurally independent. Preferably, thousands of different keys are used for a typical length of film such that each corresponds to a segment of a pre-determined length, e.g. of only a few seconds, say less than two or three seconds, and most preferably a second or less. Most kinds of media works only have significant value if they are substantially complete. For example, a movie with only the last few minutes missing will usually be of little value. Thus, someone seeking to illicitly copy a movie will have to decrypt each of the segments.</p>
<p id="p-0021" num="0025">In order to maintain a continuous flow of data decryption, in some embodiments the client may ask for the current key and the next key(s) and cache a small number of keys (e.g. 2, 3, 4 or so) in memory.</p>
<p id="p-0022" num="0026">Normally, the secure server is remote from the viewer, and is referred to herein as a &#x2018;security server&#x2019;.</p>
<p id="p-0023" num="0027">The movie is generally encrypted in a trusted environment. Preferably, the keys generated during encryption are supplied to the security server, which is within the trusted provider environment. However, although the keys are then transmitted from the security server to the viewer, the movie or other work may be transmitted from elsewhere. For example, it may be streamed from a separate server that is outside the trusted environment. Therefore, in one preferred embodiment, once the movie has been encrypted in the trusted provider environment, it is then supplied to a non-secure streaming server.</p>
<p id="p-0024" num="0028">Thus, in this arrangement, the client, which may be a software viewer program running on a remote computer (e.g. a user's PC) communicates with a security server to receive the keys (referred to as media keys) and with a separate streaming server.</p>
<p id="p-0025" num="0029">The media keys are preferably transmitted to the client following a request from the client, and this is preferably done using a key exchange protocol that makes use of a random data generator and the public key of the security server, which is known to the viewer.</p>
<p id="p-0026" num="0030">In one implementation, when it is necessary to obtain the next media key, the client generates random data and encrypts it with the public key of the security server. The encrypted data may then be included in a request for the next media key, preferably with data identifying the client, which is sent to the security server. When it receives the request, the security server checks whether that client is entitled to receive the media work, decrypts and extracts the random data and performs a function using it and the requested key, to encrypt the key using the random data. In one embodiment, they may be XOR'ed. The result is then sent back to the client. When the client receives the result, it can then extract the requested key from the result by carrying out a corresponding function, for example by XORing it with the same random data that was provided in the original request for the key. In this way the encrypted, encoded media stream can be decrypted without any secret keys hidden in the source code of the viewer.</p>
<p id="p-0027" num="0031">Preferably, the public key is included in the checksum calculation in order to prevent a &#x201c;man in the middle&#x201d; attack in which the public key is exchanged.</p>
<p id="p-0028" num="0032">In a preferred form of the protocol, steps are also taken to ensure that the client checked by the mobile guard is the same one as the one generating the random data. This may be done by extending the input to the checksum to include the random data used to request the media key. Thus, the input to the checksum may include code from the client, the public key of the security server and the random data sent with the key request.</p>
<p id="p-0029" num="0033">As external entropy sources can be monitored, the entropy source used for generating the random numbers may be that generated by the executing environment itself in the form of how tasks are scheduled and interrupted. Thus, the random generation process may consist of creating several threads that work on different computational tasks that can be input into a secure hash algorithm along with data from the current state of the viewer and the executing mobile guard.</p>
<p id="p-0030" num="0034">The need for a continuing sequence of keys to be received by the client can be used to enforce user co-operation. Thus, if a certain step required by the provider is not carried out by the client, the supply of keys can be ceased. As will be discussed further below, this step may be an integrity check of the client, and preferably, the request for a new key is only responded to when a so-called &#x201c;mobile guard&#x201d; indicates that the viewer is unmodified.</p>
<p id="p-0031" num="0035">Where the a mobile guard is employed, it is possible for it to generate the random number used in the preferred key exchange protocol described above, rather than the actual client viewer/player program.</p>
<p id="p-0032" num="0036">It will be appreciated that this enforcement of co-operation is possible because the content provider controls the media work and because of the work's temporal nature, the work can be supplied in small parts with the user being required to co-operate in order to receive subsequent parts. This is in contrast to conventional systems where a licence unlocks the whole document, effectively neutralising the temporal property.</p>
<p id="p-0033" num="0037">In an alternative embodiment of the invention the trusted environment is extended so that the streaming server is included within it. When this is done it is possible to have the streaming server generate media keys and encrypt the media stream on the fly. This ensures that each media stream is encrypted with a unique set of media keys. That means that a leaked media key cannot be used to decrypt a different copy of the same movie. To facilitate distribution of the media keys the streaming server sends them to the security server, which will distribute them to the viewer as described above. The downside is that another entity needs to be trusted and that the encryption on the fly is computationally expensive. Thus, there is a trade off here between very high security on the one side and complexity of the trusted environment and computational costs on the other side.</p>
<p id="p-0034" num="0038">The invention is not limited to arrangements where the document is streamed from a remote server. Because it is encrypted, the document can be distributed in any convenient manner. Thus, the encrypted document may be provided to the client from a local server or on a physical medium (e.g. a DVD). The document may then be transmitted from the local server or physical medium to the viewer and decrypted in the same manner as previously discussed.</p>
<p id="p-0035" num="0039">Although this arrangement provides a significant improvement over the prior art system, there still remains the risk that the viewer could be tampered with so that the decrypted work (movie etc.) could be recorded and copied. Thus, preferably, the invention further comprises means for checking the integrity of the viewer to ensure that it has not been tampered with. This may be done by programming it to send a signal such as a checksum to the security server at regular intervals, and/or when a key is requested. Such a signal would be designed to depend on the state of the viewer so that any modification to the viewer would change the signal.</p>
<p id="p-0036" num="0040">However, there is a risk that such a measure could be overcome by programming the modified viewer to send the &#x201c;correct&#x201d; signal regardless of its true state. Preferably, therefore, the method further requires that the security server interrogate the viewer using a number of different tests, which vary with time. In a particularly preferred form, the tests comprise the use of randomly generated algorithms which will only return the correct result if the viewer is unmodified. Furthermore, failure to respond or an undue delay in responding can be taken as an indication of viewer modification.</p>
<p id="p-0037" num="0041">Thus, preferably the security server is arranged to cease the supply of keys in the event that viewer modification is detected and/or if such a viewer integrity check is not successful.</p>
<p id="p-0038" num="0042">The most preferred arrangement is for the algorithms to be transmitted by the security server to the client in the form of software code (e.g. machine code). The software code may be termed a &#x201c;mobile guard&#x201d;, and is described further herein.</p>
<p id="p-0039" num="0043">Such a system of integrity checking is considered to be an inventive concept in its own right and therefore, viewed from a further aspect, there is provided a method of transmitting data to a client comprising the steps of:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0044">(a) transmitting the data to the client,</li>
        <li id="ul0004-0002" num="0045">(b) transmitting software code containing an algorithm from a security server to the client, the algorithm having a result that is a function of the state of the client,</li>
        <li id="ul0004-0003" num="0046">(c) executing the code at the client,</li>
        <li id="ul0004-0004" num="0047">(d) returning the result to the security server, and</li>
        <li id="ul0004-0005" num="0048">(e) determining whether the result is indicative of an unmodified viewer.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0040" num="0049">The data may be a media work that is streamed to the client, for example over the Internet, or it can be supplied from a local server, DVD or other media as discussed above. However, as will be discussed more fully below, it may be any kind of data that can be transmitted between server and client. The client may be a program running on a computer or a hardware device such as a TV set-top box. The algorithm referred to in step (b) may be transmitted before any part of the document has been transmitted, or the whole or part of the work may be transmitted before the algorithm. Preferably, the document is not viewed until after step (d) has been carried out.</p>
<p id="p-0041" num="0050">Depending on the outcome in step (d), appropriate action can be taken. Where the work is being streamed, if the viewer is found to be unmodified, the transmission of the work and of any keys required to decrypt it would normally be allowed to continue. However, there may be a further step of (e) ceasing the transmission of the work and/or of keys necessary to decrypt it in the event that the result is not indicative of an unmodified client. Preferably, if no result is returned from the mobile guard, this is also deemed to indicate that the client has been modified.</p>
<p id="p-0042" num="0051">Where the work is being transmitted from a local source such as a local server, DVD, etc. the action may be to cease the transmission of the keys needed to decrypt the document.</p>
<p id="p-0043" num="0052">Alternatively, other action may be taken if it is found that the client has been modified. For example, the transmission could be allowed to continue and evidence gathered to identify the user. This may be appropriate if it is desired to take legal or investigative action, e.g. to detect criminal activity or to prevent future illicit copying of documents.</p>
<p id="p-0044" num="0053">As noted above, the action taken in response to the identification of a modified client may be to cease transmission of decryption keys. It will therefore be appreciated that the method may further comprise dividing the work into a plurality of temporally spaced segments, which are encrypted using different keys. These keys may be distributed to the client sequentially, and preferably as discussed above. Thus, if their distribution is ceased, the remaining part of the work cannot be decrypted.</p>
<p id="p-0045" num="0054">The method is preferably carried out using randomly generated secret algorithms in the software code (as mentioned above). These so-called enforcement algorithms generate a result that is dependent on the state of the client (e.g. of a viewer program), but the correct result is not guessable by the user because of the random aspect. Preferably, they contain a checksum calculation into which the viewer program's code is input. Although the algorithm as a whole is secret, the checksum calculation may be a known one such as the Message Digest Algorithm 5 (MD5) (RFC1321 www.faqs.org/rfcs/rfc1321.html), which may be used in combination with randomized input modification.</p>
<p id="p-0046" num="0055">Input modification refers to the random creation of a modifier that permutates the data that will be input into the checksum. In one implementation, when the software code (referred to here as a &#x201c;mobile guard&#x201d;) is generated, a random sequence is determined. When the algorithm is executed, the input code from the viewer is divided into n blocks of the same size. These are then shuffled into the above-mentioned random sequence and the result is then input into the checksum algorithm. Although in this arrangement the checksum algorithm itself is public, its result is a function of the order in which the n blocks are input to it. This order is known to the security server and so the security server can determine whether the result returned to it indicates an intact viewer.</p>
<p id="p-0047" num="0056">An alternative approach to creating an input-filtered checksum is to decompose a known checksum algorithm and reassemble it in a way that reads the input in a given sequence.</p>
<p id="p-0048" num="0057">Instead of using input filtering, it is possible to generate a checksum function from scratch. Thus the input can be split into l words (32 bits) and a function f is created that reads l words from the input and m words from a variable area that outputs a word. The function may comprise a random number of assignments that are performed one after another and the checksum may be the sum modulo 2<sup>32 </sup>of all the results of the application of f.</p>
<p id="p-0049" num="0058">Composing functions has the advantage that almost all code of the checksum algorithm is randomly created, leading to more structural diversity in the code. Since the building blocks are quite small, it allows for easier interleaving with other algorithms.</p>
<p id="p-0050" num="0059">The software code also preferably contains additional algorithms, which may be secret or non-secret. They are preferably functionally and/or spatially entangled with the secret algorithm. In this way the client's computer/viewer can be forced to carry out the additional algorithms because if it does not the secret one will not be implemented. The additional algorithms may be used, for example, to check the integrity of viewer hardware.</p>
<p id="p-0051" num="0060">As the mobile guard is present in the same environment as the viewer, it is potentially vulnerable to attacks. A user might try to modify it in order to circumvent the protection methods it implements. Automated attacks on it can be prevented by ensuring that the mobile guards are partly randomly created, as discussed above. In addition, obfuscation transformations may be applied to the mobile guards. The mobile guard may hide the checksum in an opaque data structure that is interleaved with the checksum in a way that is specific to the mobile guard. Variables may be located randomly in the mobile guard's memory and, in addition, the mobile guard's instructions may be split into blocks, which are also located randomly in memory. This preferably includes the entry point into the mobile guard. Indeed, the entry point for one mobile guard can be provided by the previous one.</p>
<p id="p-0052" num="0061">If these steps are carried out, a human attack then becomes necessary to overcome the obfuscation before any automated attack can commence. Such an approach inevitably takes a significant amount of time and so provided the &#x201c;trust interval&#x201d; between successive mobile guards is sufficiently short, it will not be effective. In other words, because the mobile guards are replaced frequently, there is insufficient time for this to be worthwhile. Thus, the obfuscation process protects the mobile guard from tampering in the time interval before it is replaced by another mobile guard.</p>
<p id="p-0053" num="0062">There is a risk of an observer spying on memory locations in a computer where the decrypted movie data is stored. If a known memory location is used then the data could be copied. Therefore, it is undesirable for it to be practicable to locate code by identifying a certain memory location (location-based identification) and preferably, once locations have been used, they should not be re-used. Also, pattern-based identification&#x2014;where code may be sought by looking for sequences like MPEG headers&#x2014;should preferably be prevented too.</p>
<p id="p-0054" num="0063">The viewer is, therefore, preferably protected by the mobile guard against its state being determined by spying. To do this the mobile guard will preferably further comprise one or more protection algorithms to protect against such attacks. This it may perform obfuscation tasks on the client (e.g. on a viewer program), referred to hereinbelow as &#x201c;runtime viewer obfuscation&#x201d;, i.e. obfuscation is carried out on the viewer as it runs. This changes the memory image of the running viewer.</p>
<p id="p-0055" num="0064">This runtime viewer obfuscation is considered a further inventive concept, and thus from another aspect, the invention provides a method of obfuscating an executing viewer, comprising randomising the memory image of the executing viewer.</p>
<p id="p-0056" num="0065">Runtime obfuscation may comprise one or more of the following techniques.</p>
<p id="p-0057" num="0066">Code relocation comprises moving code blocks around in memory. As the program executes, the mobile guard will move the code to other parts of memory, which will then later be executed. This algorithm is preferably tightly interleaved with the checksum calculation.</p>
<p id="p-0058" num="0067">Preferably, code relocation is implemented by (1) identifying all the basic building blocks in the program and partitioning it into small relocatable segments; (2) during execution of the mobile guard these segments may be rearranged in memory to random locations; and (3) modifying all jump instructions to correspond to the new code locations. As a result, an attacker will be confronted by a memory image that changes during the execution of the mobile guard. Since the location of the segments is determined by the mobile guard provided by the security server, it is unpredictable to the attacker who cannot then rely on the assumption that certain memory locations contain certain data.</p>
<p id="p-0059" num="0068">Data relocation comprises moving the data and changing the instructions that access it. Again, the new locations can be determined randomly.</p>
<p id="p-0060" num="0069">Data hiding addresses the problem of location and pattern-based identification. One approach is to apply a two-way function to alter the appearance of the data&#x2014;effectively to mask it. Preferably, a simple one-time pad approach is used. It may comprise a newly created modulo function that creates an index into an array of random data. The random data may be used to alter the sensitive data by applying the XOR operator between the random and sensitive parts. Preferably it is applied between these and part of the address of the sensitive data.</p>
<p id="p-0061" num="0070">One approach is to scramble (mask) and unscramble the data so that sensitive data is stored in scrambled form, unscrambled when needed, and then re-scrambled or deleted. However, this does leave a short window when the data is unscrambled.</p>
<p id="p-0062" num="0071">However, it is possible to take advantage of stream processing to delay the unscrambling until the data is in the processor's registry.</p>
<p id="p-0063" num="0072">Thus, the actual content decoder may be modified to perform the last decryption operation, as it needs new data. This means that there will not be any decrypted data present in main memory at all. It may be provided using the following steps:</p>
<p id="p-0064" num="0073">a) The Mobile guard modifies the decoder to perform the last decryption step as needed;</p>
<p id="p-0065" num="0074">b) The next encrypted segment is obtained;</p>
<p id="p-0066" num="0075">c) Media key for the encrypted segment is obtained;</p>
<p id="p-0067" num="0076">d) The decryption stream is generated and placed in random places in memory according to how the decoder was modified;</p>
<p id="p-0068" num="0077">e) The decoder will then read a byte or a word at a time and decrypt them as needed.</p>
<p id="p-0069" num="0078">Code diversification comprises operations performed by the mobile guard on the client program during execution. The operations performed change the code such that it consists of different instructions without changing its semantics. This is to prevent pattern-based identification. One or more of the following steps may be carried out:</p>
<p id="p-0070" num="0079">Context-independent instructions may be inserted. These are instructions whose input context may be shared with contexts in the program but whose output context is different from any input context in the program. Since they cannot alter any input context of the program, it does not matter what they process.</p>
<p id="p-0071" num="0080">Context dependent instructions may be replaced by instructions that perform the same function. It will be appreciated that this is more difficult to achieve, but it is also more effective because they cannot be identified by data-flow analysis.</p>
<p id="p-0072" num="0081">Functional independent changes that can be made include changing the order of execution of instructions, inserting instructions with or without temporary variables, re-ordering instructions in memory and making control flow changes.</p>
<p id="p-0073" num="0082">Functional dependent changes require care in order to keep the function and side effects intact. They include replacing instructions with functional equivalents, introducing identity functions, introducing operators so that literal values are replaced by instructions that initialise the value arbitrarily and perform an operation that corrects the value to match the original literal. Also, variables can be introduced so that copies to a destination are replaced by copies of a newly created variable.</p>
<p id="p-0074" num="0083">In an embodiment in which a hardware-based viewer solution is employed, for example a TV set-top box, the distributor of the viewer controls not only the viewer software, but also the viewer environment, i.e. the hardware and operating system. Therefore, a hardware based viewer can generally be checked by a mobile guard in a much more complete manner than a purely software based solution. In this embodiment, the checksum algorithm in the mobile guard is not restricted to checking the viewer software but can also check different aspects of the operating system and the hardware.</p>
<p id="p-0075" num="0084">Thus, the system can be used in two ways in connection with hardware-based viewers. Firstly, it can be used to replace solutions that are based on expensive tamper-proof hardware. Secondly, it can provide additional security measures that come into play in the event that the tamper-proof hardware should be compromised.</p>
<p id="p-0076" num="0085">It will be seen that the invention preferably relates to the combination of individually encrypted segments of the document and the use of the &#x201c;mobile guard&#x201d; concept. Thus, viewed from a still further aspect, the invention provides a method of transmitting a media work to a client comprising the steps of:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0086">(a) encrypting the work using a sequence of different keys corresponding to respective temporally spaced segments of the work,</li>
        <li id="ul0006-0002" num="0087">(b) transmitting software code containing an algorithm from a security server to the client, the algorithm having a result that is a function of the state of the client,</li>
        <li id="ul0006-0003" num="0088">(c) executing the code at the client and returning the result to the security server,</li>
        <li id="ul0006-0004" num="0089">(d) determining whether the result is indicative of an unmodified viewer,</li>
        <li id="ul0006-0005" num="0090">(e) transmitting a segment from a server to the viewer,</li>
        <li id="ul0006-0006" num="0091">(f) in the event that the result is indicative of an unmodified viewer, securely streaming a key corresponding to the transmitted segment from a secure remote server to the viewer,</li>
        <li id="ul0006-0007" num="0092">(g) decrypting the segment using the key.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0077" num="0093">It will be appreciated that although the steps may be executed in the order in which they are given above, at least some of the steps may be executed in a different order, or concurrently. For example, step (e) may be carried out concurrently with steps (b), (c), (d) or (f), such that the segments are transported before, with or after the keys. However the keys must be available before the segment is decrypted.</p>
<p id="p-0078" num="0094">In one embodiment, the method comprises a further step (h) wherein steps (b) to (g) are repeated.</p>
<p id="p-0079" num="0095">However, generally, the transmitted software code has a certain &#x2018;lifetime&#x2019; or &#x2018;trust interval&#x2019;, for example less than 30 seconds. On the other hand, segments are generally transmitted more frequently than the lifetime of the software code, for example one per second. As such, new software code does not need to be transmitted each time a segment is transmitted, but will generally only need to be transmitted once the lifetime of the present software code has expired. Thus, steps (e) to (g) will generally be repeated until new software code is required, when step (b) will be repeated. In this way one piece of software code (mobile guard) protects the delivery of many keys.</p>
<p id="p-0080" num="0096">Although the execution of the code and determination of whether the result is indicative of an unmodified viewer (steps c and d) can be done more than once for each piece of software code, generally, it will only be necessary to do it once during the lifetime of the software code. As such, steps (c) and (d) will generally only be repeated after step (b) has been repeated.</p>
<p id="p-0081" num="0097">Viewed from a still further aspect, the invention provides a method of transmitting a media work to a client comprising the steps of:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0098">(a) encrypting the work using a sequence of different keys corresponding to respective temporally spaced segments of the work,</li>
        <li id="ul0008-0002" num="0099">(b) transmitting software code containing an algorithm from a security server to the client, the algorithm having a result that is a function of the state of the client,</li>
        <li id="ul0008-0003" num="0100">(c) executing the code at the client and returning the result to the security server,</li>
        <li id="ul0008-0004" num="0101">(d) determining whether the result is indicative of an unmodified viewer,
<br/>
and further comprising the steps of:
</li>
        <li id="ul0008-0005" num="0102">(e) transmitting a segment from a server to the viewer,</li>
        <li id="ul0008-0006" num="0103">(f) securely streaming a key corresponding to the transmitted segment from a secure remote server to the viewer,</li>
        <li id="ul0008-0007" num="0104">(g) decrypting the segment using the obtained media key,</li>
        <li id="ul0008-0008" num="0105">(h) if step (d) indicates a modified viewer, preventing further keys from being transmitted, otherwise repeating steps (e) to (g).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0082" num="0106">Preferably, the method further comprises the step (i) of repeating steps (b) to (d).</p>
<p id="p-0083" num="0107">It will be appreciated that although the steps may be executed in the order in which they are given above, at least some of the steps may be executed in a different order, or concurrently. In fact, some steps may be carried out more times than others.</p>
<p id="p-0084" num="0108">Steps (b) to (d) can be carried out independently of steps (e) to (h), and are preferably carried out concurrently therewith. As mentioned previously, the software code generally has a lifetime that will encompass the sending of many segments and keys. As such, the repetition of steps (b) to (d) (mentioned in step (i)) will generally be carried out less frequently than the repetition of steps (e) to (g) (mentioned in step (h)). Preferably, step (i) is only carried out if the lifetime of the software code has expired.</p>
<p id="p-0085" num="0109">The invention also extends to apparatus configured to operate as discussed above, including a client configured to receive such streamed media and also the server arrangement, both in combination and separately. Thus, from a still further aspect it may provide a system for delivering a media work to a client comprising:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0110">(a) means for transmitting the work to the client,</li>
        <li id="ul0010-0002" num="0111">(b) means for transmitting software code containing an algorithm from a security server to the client, the algorithm having a result that is a function of the state of the client, and</li>
        <li id="ul0010-0003" num="0112">(c) means associated with the security server for receiving the result and determining whether the result is indicative of an unmodified client.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0086" num="0113">Another aspect provides a client, e.g. a viewer for playing a work such as a movie, the client being arranged to: receive the work and to receive software code containing an algorithm from a remote source; to execute the algorithm on the client; and to return a result of the algorithm to the remote source, thereby demonstrating the integrity of the client to the remote source and enabling the playing of the document.</p>
<p id="p-0087" num="0114">The client preferably enables the playing of the work by decrypting it, or decrypting a segment of it using a key supplied to it by the remote source. Preferably the client is configured to request a sequence of keys and uses the keys in sequence to decrypt consecutive sections of the work, which are then played as a continuous presentation. Preferably, as discussed above, the provision of keys is dependent on the client demonstrating its integrity to the source.</p>
<p id="p-0088" num="0115">The invention also extends to a combination of a system for delivering works as described above, in combination with a client, whereby documents are delivered to the client and can only be played if the viewer demonstrates its integrity to the source.</p>
<p id="p-0089" num="0116">It will be seen that, in contrast to prior art software solutions, the present invention does not rely on secrets that are contained in the data that is made available to the user, whether in the program code or in the media documents. It allows the early detection of copy attempts and allows the content provider to initiate counter-measures before a substantial part of the media document can be copied.</p>
<p id="p-0090" num="0117">It has also been recognized that the concept of checking system integrity using a mobile guard has other applications beyond the transmission of documents (as defined) to a client. It can be used generally to verify the integrity and authenticity of code that is run in uncontrolled environments that perform calculations on input data. It can be used to prevent a party from changing the way that data is processed without this being detected. Thus, the discussion above in relation to a media viewer can be applied to any client program. Applications include games, banking, audio, etc.</p>
<p id="p-0091" num="0118">Thus, viewed from a still further aspect, the invention comprises transmitting software code (such as a mobile guard) from a secure source to a client computer running a client program, the software code comprising an algorithm having a result that is dependent on the state of the client program, executing the software code and returning the result to the source, whereby the source can determine the integrity of the client program. The invention also extends to apparatus arranged to operate in accordance with such a method.</p>
<p id="p-0092" num="0119">This aspect of the invention may employ any or all of the preferred features discussed above, in particular concerning the mobile guard. References above to media works apply likewise to temporal payload data sent between server and client. Thus, the service provider can enforce the cooperation of the user's client in the same manner and can withhold further payload data if either cooperation ceases or tampering is detected.</p>
<p id="p-0093" num="0120">Thus, it will be appreciated that any client that is in communication with a server can have its integrity checked on an on-going basis. The invention therefore allows a client that operates in an uncontrolled environment to be trusted. If it transpires that the integrity of a client has been compromised then action can be taken. For example, communication with the client could be terminated, the provision of decryption keys suspended (as with the media streaming applications discussed above) and/or steps taken to gather evidence (e.g. in the case of suspected fraudulent attacks on banking systems).</p>
<p id="p-0094" num="0121">The invention is useful in the context of distributed calculations where, although confidentiality and dishonesty are not usually issues, the correct execution of software is. Thus, the mobile guard may be used to protect against intentional or unintentional modification of the client&#x2014;both its software and, if required, hardware. Thus, the instance that launches the distributed computing job can use mobile guards to check the correct operation of the clients at remote nodes that carry out calculations.</p>
<p id="p-0095" num="0122">In the context of on-line gaming, modification of client programs can enable cheating which, if uncontrolled could cause customer dissatisfaction and lead to loss of revenue. The data concerned is not confidential and there is little point in recording it (as with a media work), so it is normally sufficient to verify only the integrity of the client software. Where the game operated on a client-server basis, mobile guards can be applied as discussed previously. If the user does not allow cooperation with the mobile guard then he can be refused updates on the global game-state.</p>
<p id="p-0096" num="0123">In the case of home banking, mobile guards can be used to make sure that third parties do not access confidential data. While a normal user will not normally be interested in modifying his client program, he may be the victim of a man-in-the-middle attack. The banking server could therefore use a mobile guard to verify the integrity and authenticity of the home banking client and it may also contain the public key of the banking server. This public key is used to encrypt all data that is passed from the home banking client to the banking server and since the integrity of the mobile guard is guaranteed, the user can be sure that his data is kept confidential.</p>
<p id="p-0097" num="0124">The invention extends to apparatuses configured to employ the methods described above and to software products containing instructions to cause computers to operate in such manner. It also extends to server-client combinations and/or networks where data is supplied to the client in accordance with the aspects of the invention discussed above.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<p id="p-0098" num="0125">Certain embodiments of the invention will now be described, by way of example only, with reference to the accompanying drawings:</p>
<p id="p-0099" num="0126"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic drawing of a prior art media streaming system as described above;</p>
<p id="p-0100" num="0127"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic overview of a first embodiment of the invention;</p>
<p id="p-0101" num="0128"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram showing the components of a randomly generated checksum algorithm as used in the embodiment;</p>
<p id="p-0102" num="0129"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart showing the operation of the embodiment; and</p>
<p id="p-0103" num="0130"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart of the server algorithm employed in the embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0104" num="0131">As may be seen from <figref idref="DRAWINGS">FIG. 2</figref>, a client is provided with a viewer <b>10</b> which can be used to view media (e.g. a movie) that is streamed from a streaming server <b>11</b> or alternatively from a local storage media, e.g. CD <b>12</b>. Each of these components of the system is outside the trusted environment <b>13</b>. Within the trusted environment is the unencrypted movie <b>14</b>, a protection tool <b>15</b> to generate a protected movie <b>16</b> and a security server <b>17</b>.</p>
<p id="p-0105" num="0132">As in the prior art system illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the content owner protects the encoded media document, before it is delivered to the client. However, instead of using a single media key, protection tool <b>15</b> encrypts the movie with a very large number (thousands) of media keys <b>20</b>. This process yields an encrypted, encoded media, the protected movie <b>16</b>.</p>
<p id="p-0106" num="0133">The media keys <b>20</b> are distributed so that they are spread out in time; during presentation of a media resource, they are securely streamed to the client one at a time at intervals on request as will be described below. The media itself is streamed separately. Each key comprises only a few bytes (about sixteen) so the resources needed to stream the keys create a very low overhead.</p>
<p id="p-0107" num="0134">Each key can be used to decrypt only about a second, or at most a few seconds, of the movie so that obtaining only a single key is of little value.</p>
<p id="p-0108" num="0135">In the first embodiment of the invention, the protected movie is delivered to the client in form of a data stream via path A, streaming server <b>11</b> and media stream <b>18</b>. In further embodiments, tangible media, e.g. a CD or DVD <b>12</b> are used.</p>
<p id="p-0109" num="0136">The viewer <b>10</b> is executed on the client's host and is arranged to receive the protected movie <b>16</b> from the streaming server <b>11</b> via media stream <b>18</b> (or from the CD/DVD in other embodiments). During the presentation process, the viewer <b>10</b> communicates with a security server <b>17</b> to download the necessary media keys <b>20</b> to decrypt the protected movie <b>16</b>.</p>
<p id="p-0110" num="0137">In addition, the viewer <b>10</b> also downloads pieces of code called mobile guards <b>19</b> at regular intervals of about 30 seconds. These each have embedded within them secret information in the form of an algorithm that is created in the security server <b>17</b>. The execution of these algorithms is necessary to make use of the streamed data <b>18</b>. When each mobile guard <b>19</b> is transferred into the viewer it performs calculations determined by the secret algorithm and returns the result to the security server. The mobile guard is structured in such a way that the result of the calculation is only correct if the viewer has not been tampered with. The result of the secret algorithm contains a checksum that proves the integrity of the viewer to the security server.</p>
<p id="p-0111" num="0138">The mobile guard can also have other additional algorithms functionally and spatially entangled with the secret algorithm. In this way the client's computer/viewer can be forced to carry out the additional algorithms because if it does not the secret one will not be implemented. In this way, the viewer may be fully checked.</p>
<p id="p-0112" num="0139">If the result returned to the security server <b>17</b> by the mobile guard does not match the expected result, the security server stops the distribution of the media keys <b>20</b> to the viewer. The same happens if the viewer <b>10</b> refuses a mobile guard or if the correct result does not arrive within a certain time. The key exchange protocol will be explained in more detail later.</p>
<p id="p-0113" num="0140">The secret algorithms are based on checksum calculations that have a high probability of detecting changes in the checked data (i.e. the viewer code). As may be seen from <figref idref="DRAWINGS">FIG. 3</figref>, a randomly generated checksum algorithm <b>21</b> (for use in a mobile guard) uses a checksum calculation divided into two steps: input modification <b>22</b>, which is randomized, and a known checksum calculation <b>23</b> which is performed on the modified input. These steps together make the randomized and secret checksum algorithm.</p>
<p id="p-0114" num="0141">Input modification refers to the random creation of a modifier that permutates the data that will be input into checksum calculation <b>23</b>. When a mobile guard is generated by the security server, a random sequence is determined. When the checksum algorithm <b>21</b> is executed by the viewer, the input Program Code from the viewer is divided into n blocks of the same size. These are then shuffled into the above-mentioned random sequence in the Input Modification stage <b>22</b>. The result of this is then input into the Checksum Calculation stage <b>23</b>. This uses the known Message Digest Algorithm (MD5). The checksum calculation is then carried out and its result returned to the security server.</p>
<p id="p-0115" num="0142">It will be appreciated that although the checksum algorithm itself is public, its result is a function of the order in which the n blocks are input to it. This order is known to the security server and so the security server can determine whether the result returned to it indicates an intact viewer.</p>
<p id="p-0116" num="0143">The mobile guard needs to be protected against tampering and against the spying out of its inner workings. The first aspect of the protection of the mobile guard is to randomly create new versions each time a viewer needs to be checked. Secondly the lifetime of the mobile guard in the viewer environment when it is being used is short (less than thirty seconds). Although human (i.e. intelligent, as opposed to automated) attacks on the mobile guard are theoretically possible, they would take a significant amount of time. By having an expiration time of some seconds for each mobile guard, human-assisted attacks therefore become virtually impossible because the mobile guard is redundant long before any attack can be completed.</p>
<p id="p-0117" num="0144">The mobile guard is obfuscated, as previously discussed, to defend against an automated attack.</p>
<p id="p-0118" num="0145">The mobile guard randomises the memory image of the running viewer, referred to herein as &#x2018;runtime viewer obfuscation&#x2019;. Code and data areas of the viewer are swapped and the stack is scrambled. This is discussed more fully below.</p>
<p id="p-0119" num="0146">The effect of runtime viewer obfuscation is to make sure that only intellectual attacks can be performed on the runtime image of the viewer because it randomises and thereby hides the memory locations of the decrypted, encoded stream.</p>
<p id="p-0120" num="0147">In order to randomize the location of memory accesses, the mobile guard modifies the structure of the viewer code and the data area. The code and data area are split into logical segments. Care is taken that segment borders are not located inside opcodes.</p>
<p id="p-0121" num="0148">After a newly downloaded mobile guard receives control and before starting with the decryption of the stream, the mobile guard relocates the segments to new positions. This process includes the modification of code segments&#x2014;similar to relocation performed by dynamic linkers&#x2014;to make sure that:</p>
<p id="p-0122" num="0149">1. Jump- and Branch-instructions are transferring control to the relocated positions.</p>
<p id="p-0123" num="0150">2. Read- and Write-instruction are accessing the data at the relocated positions.</p>
<p id="p-0124" num="0151">After relocating the segments, the mobile guard performs its operation until it is replaced by the next mobile guard.</p>
<p id="p-0125" num="0152">The mobile guard needs to know the entry points of certain functions in the viewer. The new positions of the segments are known by the security server and provided to the mobile guard. In this way there is no need to transfer information between two mobile guards on the client side.</p>
<p id="p-0126" num="0153">With regard to stack scrambling, the stack contains the return addresses to prior function calls. This can be used to either spy out control flow or to alter the control flow of the viewer by changing a return address on the stack. In such an attack, when the program is about to jump back to the calling function, it could instead be transferring control to possible hostile code.</p>
<p id="p-0127" num="0154">To protect the stack against such an attack, a method is used that gradually scrambles the stack as new return addresses are added to it. The checked code will, after a function call, transfer control to a scramble function in the mobile guard, which scrambles the new return address on the stack before returning control back to the calling function. To unscramble the stack a corresponding unscramble function in the mobile guard is called before using any return address.</p>
<p id="p-0128" num="0155">The implementation of the scramble function takes advantage of the fact that mobile guards are created as needed in order to check the viewer. This enables a unique scramble and unscramble function to be created in each mobile guard. The scramble function basically consists of a set of random data created by the security server and contained in the mobile guard that is XORed with the return addresses on the stack of the viewer. To select which part of the random data to use, a simple mathematical function is applied to compute an index into the set of random data.</p>
<p id="p-0129" num="0156">The viewer is therefore protected by the mobile guard against its state (including the position of the control flow and variable content) being determined by spying (as discussed previously).</p>
<p id="p-0130" num="0157">The media keys are transmitted at a rate of approximately one per second to the viewer. This is done using a key exchange protocol that makes use of a random data generator and the public key of the security server, which is known to the viewer. When it is necessary to obtain the next media key the viewer <b>10</b> generates sixteen bytes of random data and encrypts them with the public key of the security server <b>17</b>. The encrypted data is then included in a request for the key, which is sent to the security server.</p>
<p id="p-0131" num="0158">The security server examines the request and only approves it if the mobile guard indicates that everything is correct in the viewer. If the mobile guard indicates that everything is fine, the security server extracts the random data, XOR's it with the requested key and sends the result back to the viewer.</p>
<p id="p-0132" num="0159">When the viewer receives the result, it extracts the requested key from the result by XORing it with the same random data that was provided in the original request for the key.</p>
<p id="p-0133" num="0160">This protocol provides a way to decrypt the encrypted, encoded media stream, without any secret keys hidden in the source code of the viewer. The lifetime of a key is a only few seconds, which prevents the secure streaming process from constituting a single point of failure in the event of the extraction of one or a few secret keys.</p>
<p id="p-0134" num="0161">It will be appreciated that there are effectively two separate threads that are carried out by the client and these are summarised in the flow chart of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0135" num="0162">The first thread is verification. The client receives a mobile guard, which then verifies the client program. Once verification has been confirmed, a number n of keys can be received during the following trust interval until the mobile guard expires. The thread must then be repeated with a new mobile guard.</p>
<p id="p-0136" num="0163">Running in parallel to this is the presentation thread. For each key, a segment of the media stream is received decrypted and presented.</p>
<p id="p-0137" num="0164"><figref idref="DRAWINGS">FIG. 5</figref> summarises the operation of the server. On receiving a key request, it sends a key to the client if, and only if, the mobile guard is still alive (i.e. if it is still within the trust interval of that mobile guard). If the mobile guard has expired, a new mobile guard is sent to the client and this is used to verify the client. If the result is incorrect, the client is deemed to have been tampered with and key transmission is then stopped. If the result is satisfactory, then a new trust interval commences and during it the keys are sent to the client.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of transmitting data to a client computer running a client program, the method comprising:
<claim-text>(a) transmitting the data to the client program,</claim-text>
<claim-text>(b) transmitting software code containing a randomly generated algorithm from a security server to the client program, the algorithm having a result that is a function of a state of client program, the software code further containing a checksum calculation into which a random number and code of the client program and memory image of the client program is input,</claim-text>
<claim-text>(c) executing the software code at the client to provide a result of the algorithm, a first calculated checksum, wherein the client program encrypts the random number with a public key of the security server and the encrypted random number is transmitted to the security server with a request for a key and the first calculated checksum, and</claim-text>
<claim-text>(d) determining whether the result is indicative of an unmodified client program, wherein the security server decrypts the random number and uses it to encrypt the key, and wherein the security server uses the random number to calculate a second checksum, and the security server then compares the first and second calculated checksums.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data is a media work.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the data is one of a plurality of temporally spaced segments of the work and wherein each segment is encrypted using an encryption key.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as claimed in <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein if step (d) indicates that the result is indicative of an unmodified client program, the method further comprises the step of transmitting a decryption key corresponding to the transmitted segment to the client program.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as claimed in <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising the step of (e) ceasing the transmission of the data and/or of keys necessary to decrypt the data in the event that the result is not indicative of an unmodified client program.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as claimed in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the method further comprises the step of transmitting a decryption key corresponding to the transmitted segment to the client program.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method as claimed in <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising the step of ceasing the transmission of the data and/or of keys necessary to decrypt the data in the event that the result is not indicative of an unmodified client program.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client program is prevented from using the data until after step (d) has been carried out.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein if, and only if, the two values are equal the encrypted key is transmitted to the client program such that the client program may decrypt the key.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein, if the two values are not equal, it is determined that the client program has been tampered with.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the code performs obfuscation task(s) on the client program.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method as claimed in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the obfuscation task(s) comprise randomising the memory image of the executing client program.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method as claimed in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the obfuscation tasks include one or more of the following: code relocation, code diversification, data relocation, and data hiding.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the software code transmitted from the security server to the client program is obfuscated.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein steps (b) to (d) are repeated and the algorithms vary.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising returning the result of the algorithm to the security server.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the step of determining is carried out at the security server.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising returning the result of the algorithm to the trusted environment.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method as claimed in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the step of determining is carried out at the trusted environment.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the software code contains a checksum calculation into which at least a part of the memory image of the client is input.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the software code contains a checksum calculation into which instructions of the client program are input.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A method of transmitting a media work to a client computer running a client program, the method comprising:
<claim-text>(a) encrypting the work using a sequence of different keys corresponding to respective temporally spaced segments of the work,</claim-text>
<claim-text>(b) transmitting software code having an associated trust interval and containing a randomly generated algorithm from a security server to the client program, the algorithm having a result that is a function of a state of the client program, the software code further containing a checksum calculation into which a random number and the software code of the client program or memory image of the client program is input,</claim-text>
<claim-text>(c) receiving the result from the software code at the client program, including a first calculated checksum, the random number encrypted with a public key of the security server, and a request for a key,</claim-text>
<claim-text>(d) determining whether the result is indicative of an unmodified client program, wherein the security server decrypts the random number and uses it to encrypt the key, the security server uses the random number to calculate a second checksum and the security server then compares the two checksum calculations,</claim-text>
<claim-text>(e) transmitting a segment from a server to the client program,</claim-text>
<claim-text>(f) in the event that the result is indicative of an unmodified client program, securely streaming a key corresponding to the transmitted segment from a secure remote server to the client program during the associated trust interval, and</claim-text>
<claim-text>(g) decrypting the segment using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A method as claimed in <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising a further step (h) wherein steps (b) to (g) are repeated.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. An apparatus for delivering data to a client computer running a client program, comprising:
<claim-text>(a) a first hardware processor configured to execute software code;</claim-text>
<claim-text>(b) first software code, executed by the first hardware processor, configured to transmit the data to the client program;</claim-text>
<claim-text>(c) second software code, executed by the first hardware processor, configured to transmit third software code containing a randomly generated algorithm to the client program, the algorithm having a result that is a function of a state of the client program, the third software code further containing a checksum calculation into which a random number and at least one of code of the client program and a memory image of the client program is input to provide a first calculated checksum; and</claim-text>
<claim-text>(d) the third software code, executed by a one of the first hardware processor and a second hardware processor, configured to receive the result, the result including the random number encrypted by the client program with a public key, a request for a key, and the calculated checksum, and determine whether the result is indicative of an unmodified client program, wherein the random number is decrypted and used to encrypt the key, the random number is used to calculate a second checksum to provide an updated checksum, and the first calculated checksum from the client and the second checksum are compared.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The apparatus of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the data is a media work.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The apparatus of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the software code containing the algorithm contains a checksum calculation into which code of the client program and/or memory image of the client program is input.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The apparatus of <claim-ref idref="CLM-00026">claim 26</claim-ref>, wherein the checksum calculation includes in its input a random number.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The apparatus of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the software code containing the algorithm performs obfuscation task(s) on the client program.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The apparatus of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the software code containing the algorithm is obfuscated.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A method of transmitting data to a client computer running a client program, the method comprising:
<claim-text>(a) encrypting the data using a sequence of different keys corresponding to respective temporally spaced segments of the data,</claim-text>
<claim-text>(b) transmitting a temporally spaced segment of data to the client program,</claim-text>
<claim-text>(c) transmitting software code containing a randomly generated algorithm from a security server to the client program, the algorithm having a result that is a function of a state of client program,</claim-text>
<claim-text>(d) executing the software code at the client to provide a result of the algorithm,</claim-text>
<claim-text>(e) determining whether the result is indicative of an unmodified client program,</claim-text>
<claim-text>(f) in an event that the result is indicative of an unmodified client program, securely streaming a key corresponding to the transmitted segment from a secure remote server to the client program, and</claim-text>
<claim-text>(g) decrypting the segment using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A method as claimed in <claim-ref idref="CLM-00030">claim 30</claim-ref>, further comprising repeating steps (b) and (f).</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A method of transmitting a media work to a client computer running a client program, the method comprising:
<claim-text>(a) encrypting the media work using a sequence of different keys corresponding to respective temporally spaced segments of the media work,</claim-text>
<claim-text>(b) transmitting software code having an associated trust interval and containing a randomly generated algorithm from a security server to the client program, the algorithm having a result that is a function of a state of the client program,</claim-text>
<claim-text>(c) receiving the result from the software code at the client program,</claim-text>
<claim-text>(d) determining whether the result is indicative of an unmodified client program,</claim-text>
<claim-text>(e) transmitting a temporally spaced segment to the client program,</claim-text>
<claim-text>(f) in an event that the result is indicative of an unmodified client program, securely streaming a key corresponding to the transmitted segment to the client program during the associated trust interval, and</claim-text>
<claim-text>(g) decrypting the segment using the key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. An apparatus for delivering data to a client computer running a client program, comprising:
<claim-text>(a) a first hardware processor configured to execute software code;</claim-text>
<claim-text>(b) first software code, executed by the first hardware processor, configured to encrypt the data using a sequence of different keys corresponding to respective temporally spaced segments of the data and then transmit the temporally spaced segments of data to the client program;</claim-text>
<claim-text>(c) second software code, executed by the first hardware processor, configured to transmit third software code containing a randomly generated algorithm to the client program, the algorithm having a result that is a function of a state of the client program; and</claim-text>
<claim-text>(d) fourth software code, executed by one of the first processor and a second hardware processor, configured to receive the result and determine whether the result is indicative of an unmodified client program;</claim-text>
<claim-text>(e) fifth software code, executed by one of the first hardware processor, the second hardware processor, and a third hardware processor, configured to securely stream a key corresponding to the transmitted segment to the client program in an event that the result is indicative of an unmodified client program, and</claim-text>
<claim-text>(f) sixth software code, executed by one of the first hardware processor, the second hardware processor, the third hardware processor, and a fourth hardware processor, configured to decrypt the transmitted temporally spaced segment using the key.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

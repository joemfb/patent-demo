<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627046-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627046</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13113511</doc-number>
<date>20110523</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2002-261881</doc-number>
<date>20020906</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>52</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>712221</main-classification>
</classification-national>
<invention-title id="d2e69">Data processing device</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>3684879</doc-number>
<kind>A</kind>
<name>Koehler</name>
<date>19720800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4817048</doc-number>
<kind>A</kind>
<name>Rawlinson et al.</name>
<date>19890300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708650</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4958275</doc-number>
<kind>A</kind>
<name>Yokouchi</name>
<date>19900900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5168571</doc-number>
<kind>A</kind>
<name>Hoover et al.</name>
<date>19921200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5185870</doc-number>
<kind>A</kind>
<name>Lenoski</name>
<date>19930200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5220651</doc-number>
<kind>A</kind>
<name>Larson</name>
<date>19930600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5272660</doc-number>
<kind>A</kind>
<name>Rossbach</name>
<date>19931200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5576982</doc-number>
<kind>A</kind>
<name>Wu et al.</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708211</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5604499</doc-number>
<kind>A</kind>
<name>Miyagoshi et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 67</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5604876</doc-number>
<kind>A</kind>
<name>Matsui</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5790827</doc-number>
<kind>A</kind>
<name>Leung</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5881259</doc-number>
<kind>A</kind>
<name>Glass et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5923862</doc-number>
<kind>A</kind>
<name>Nguyen et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5948096</doc-number>
<kind>A</kind>
<name>Ginosar et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6061781</doc-number>
<kind>A</kind>
<name>Jain et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6154829</doc-number>
<kind>A</kind>
<name>Mino et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6170050</doc-number>
<kind>B1</kind>
<name>Koppala et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6173305</doc-number>
<kind>B1</kind>
<name>Poland</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6378022</doc-number>
<kind>B1</kind>
<name>Moyer et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6490669</doc-number>
<kind>B1</kind>
<name>Yabe</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6496924</doc-number>
<kind>B2</kind>
<name>Sakamoto</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6560624</doc-number>
<kind>B1</kind>
<name>Otani et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6622234</doc-number>
<kind>B1</kind>
<name>Pechanek et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7000135</doc-number>
<kind>B2</kind>
<name>Kaneko</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2001/0037445</doc-number>
<kind>A1</kind>
<name>Mukherjee</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2002/0103991</doc-number>
<kind>A1</kind>
<name>Overkamp et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>EP</country>
<doc-number>0 438 961</doc-number>
<kind>A2</kind>
<date>19910700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>EP</country>
<doc-number>0 919 911</doc-number>
<kind>A2</kind>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>JP</country>
<doc-number>2001-034472</doc-number>
<kind>A</kind>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>&#x201c;M32R-Family Mitsubishi Single-Chip Microcomputer Software Manual,&#x201d; Mitsubishi Electric Corporation, Ver 0.10, Jul. 1, 1998, pp. 2-16-17, 3-34-37 (with translation).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>David A. Patterson et al., &#x201c;Computer Organization &#x26; Design: The Hardware/Software Interface,&#x201d; Nikkei Business Publications, Inc., Apr. 19, 1996, pp. 190-199 (with translation).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>John L. Hennessey et al., &#x201c;Computer Architecture: A Quantitative Approach,&#x201d; Nikkei Business Publications, Inc., Feb. 18, 1994, pp. 626-631, 666-671 (with translation).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>Motorola, MC68020 32-Bit Microprocessor User's Manual, 1985, Prentice-Hall Inc., 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Motorola, MC88110 Second Generation RISC Microprocessor User's Manual, 1991, Motorola, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>4</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>14</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12472193</doc-number>
<date>20090526</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7971037</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13113511</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11878737</doc-number>
<date>20070726</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7555635</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12472193</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10654927</doc-number>
<date>20030905</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7337302</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11878737</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110238958</doc-number>
<kind>A1</kind>
<date>20110929</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ohtani</last-name>
<first-name>Sugako</first-name>
<address>
<city>Chiyoda-ku</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kondo</last-name>
<first-name>Hiroyuki</first-name>
<address>
<city>Chiyoda-ku</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ohtani</last-name>
<first-name>Sugako</first-name>
<address>
<city>Chiyoda-ku</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kondo</last-name>
<first-name>Hiroyuki</first-name>
<address>
<city>Chiyoda-ku</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Buchanan Ingersoll &#x26; Rooney PC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Renesas Electronics Corporation</orgname>
<role>03</role>
<address>
<city>Kawasaki-Shi, Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Coleman</last-name>
<first-name>Eric</first-name>
<department>2183</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A data processing device has an instruction decoder, a control logic unit, and ALU. The instruction decoder decodes instruction codes of an arithmetic instruction. The control logic unit detects the effective data width of operation data to be processed according to the decode result from the instruction decoder and determines the number of cycles for the instruction execution corresponding to the effective, data width. The ALU executes the instruction with the number of cycles of the instruction execution determined by the control logic unit.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="159.94mm" wi="219.63mm" file="US08627046-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="223.10mm" wi="176.19mm" orientation="landscape" file="US08627046-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="183.90mm" wi="148.17mm" file="US08627046-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="217.25mm" wi="175.09mm" file="US08627046-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="226.23mm" wi="177.55mm" file="US08627046-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="226.99mm" wi="175.85mm" orientation="landscape" file="US08627046-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="178.65mm" wi="145.37mm" file="US08627046-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="217.85mm" wi="170.18mm" file="US08627046-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="228.35mm" wi="168.83mm" orientation="landscape" file="US08627046-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="226.65mm" wi="174.07mm" orientation="landscape" file="US08627046-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="167.39mm" wi="154.43mm" orientation="landscape" file="US08627046-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims priority under 35 U.S.C. &#xa7;120 to U.S. patent application Ser. No. 12/472,193, filed May 26, 2009, which claims priority under 35 U.S.C. &#xa7;120 to U.S. patent application Ser. No. 11/878,737, filed Jul. 26, 2007, which claims priority under 35 U.S.C. &#xa7;119 to U.S. patent application Ser. No. 10/654,927, filed Sep. 5, 2003. This application is based on Japanese patent application No. 2002-261881, the content of which is incorporated hereinto by reference.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention relates to a data processing device for executing arithmetic instructions such as division and remainder instructions, and in particular, relates to a data processing device for setting the number of cycles for the instruction according to an effective data width obtained from operation data during the execution of an arithmetic instruction, and then executing the operation process within the number of cycles obtained.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">A conventional data processing device handles an instruction code having a size field in which data size information is stored, and determines the number of cycles, such as a loop iteration number of the operation for division and remainder instructions, based on the data size information of a dividend stored in a size field S in the instruction code (For example, see Document 1).
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0006">Document 1: Japanese laid-open publication number: JP-2001-034472.</li>
</ul>
</p>
<p id="p-0007" num="0007">The conventional data processing device, as shown in Document 1, involves a drawback where it is necessary to set the size (or an effective data width) of the operation data to be processed in a size information field for the operation data in an instruction code before arithmetic been compiled. That is, in the conventional technique, in order to select the optimum cycle number for the execution of the instruction obtained by the effective data width of the operation data to be processed, it is necessary to determine the effective data width for each operation data in advance.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0008" num="0008">The present invention is made to overcome the above drawback of the conventional technique. It is therefore an object of the present invention to provide a data processing device having means for detecting an effective data width of operation data to be processed during the execution of an arithmetic instruction. Then, the data processing device can select the optimum cycle number based on the effective data width for each target arithmetic data during the execution of the operation instruction without setting any effective data width for each operation data in an instruction code in advance.</p>
<p id="p-0009" num="0009">In accordance with an aspect of the present invention, there is provided a data processing device having an instruction decoder, a controller, and an operation unit. The instruction decoder decodes instruction codes for the arithmetic instruction. The controller detects the effective data width for the operation data to be processed in the execution of the arithmetic instruction based on the decode result transferred from the instruction decoder, and determines an instruction execution cycle number according to the effective data width. The operation unit executes the arithmetic instruction within the instruction execution cycle number determined by the controller</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0010">Other objects, features and advantages of the present invention will become apparent from the following description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0011" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing a configuration of a data processing device according to a first embodiment of the present invention;</p>
<p id="p-0012" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing an instruction format for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0013" num="0013"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> are diagrams showing data formats for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0014" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart showing operation for setting an instruction cycle number by the data processing device according to the first embodiment;</p>
<p id="p-0015" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart showing an operation of a division instruction executed by the data processing device;</p>
<p id="p-0016" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing a configuration of a data processing device according to a second embodiment of the present invention;</p>
<p id="p-0017" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram showing an instruction format for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 6</figref>;</p>
<p id="p-0018" num="0018"><figref idref="DRAWINGS">FIGS. 8A and 8B</figref> are diagrams showing data formats for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 6</figref>;</p>
<p id="p-0019" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart showing operation for setting the number of cycles for the instruction by the data processing device according to the second embodiment;</p>
<p id="p-0020" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram showing a configuration of a data processing device according to a third embodiment of the present invention;</p>
<p id="p-0021" num="0021"><figref idref="DRAWINGS">FIG. 11</figref> is a block diagram showing a configuration of a data processing device according to a fourth embodiment of the present invention; and</p>
<p id="p-0022" num="0022"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram showing a control logic unit and various data items to be inputted to the control logic unit.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0023" num="0023">A detailed description will be given, with reference to the accompanying drawings, of the preferred embodiments of the present invention.</p>
<heading id="h-0006" level="1">First Embodiment</heading>
<p id="p-0024" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing a configuration of a data processing device according to a first embodiment of the present invention. <figref idref="DRAWINGS">FIG. 1</figref> shows hardware to execute a division instruction, for example.</p>
<p id="p-0025" num="0025">In the diagram, the instruction decoder <b>1</b> receives an instruction code to be processed, decodes the received one, and then transfers the decode result to the control logic unit <b>3</b>. For example, the decode result provides various information such as the information to specify the type of the instruction (a division instruction, a remainder instruction, and so on), the information (or data type information) to specify the presence of a sign of the operation data, and control information (or instruction code information) for controlling the instruction cycle number to be used upon the determination of the instruction cycle number for the execution of the instruction. The general purpose register file <b>2</b> is made up of a register group having a plurality of registers. The operation data to be handled in the operation process are stored in the registers.</p>
<p id="p-0026" num="0026">The control logic unit (forming a controller) <b>3</b> comprises a size information detector <b>6</b> and a loop iteration completion detector <b>7</b>. The control logic unit <b>3</b> controls various operations during the execution of the division instruction and the remainder instruction.</p>
<p id="p-0027" num="0027">An ALU (Arithmetic and Logical Unit) <b>4</b> comprises an ALU <b>9</b> and a remainder register <b>10</b>. The ALU <b>9</b> inputs information to specify both arithmetic data items and the operation to be executed, and executes the specified operation with those data items. The remainder register <b>10</b> includes an extended register <b>11</b>. The shifter <b>5</b> executes a shifting of the dividend data according to a control signal transferred form the control logic unit <b>3</b>. In the example shown in <figref idref="DRAWINGS">FIG. 1</figref>, reference characters &#x201c;*&#x201d; and &#x201c;**&#x201d; are added to the control signals SF<b>1</b> and CTS to be transferred from the control logic unit <b>3</b> to the shifter <b>5</b>. Those characters &#x201c;*&#x201d; and &#x201c;**&#x201d; indicate the connection relationship between the control logic unit <b>3</b> and the shifter <b>5</b>. For example, reference character &#x201c;**&#x201d; means to directly transfer the control signal SF<b>1</b> from the control logic unit <b>3</b> to the shifter <b>5</b>.</p>
<p id="p-0028" num="0028">The size information detector (forming the controller) <b>6</b> detects the size information &#x201c;n&#x201d; (as the effective data width) of the dividend during the execution of division and remainder instructions and outputs the detected one as the effective data width to the loop iteration completion detector <b>7</b>. This size information detector <b>6</b> comprises a priority encoder, for example. The loop iteration completion detector <b>7</b> in the control logic unit <b>3</b> detects the completion time of the loop-iteration for the division process based on the counted value in the counter <b>8</b> and the effective data width transferred from the size information detector <b>6</b>. The counter <b>8</b> is incremented every completion of a loop iteration based on a nonrestoring division. The 64-bit remainder register <b>10</b> stores operation data generated by the division process performed by the ALU <b>9</b>, and also has an extended register <b>11</b> for storing the dividend data shifted by the shifter <b>5</b>.</p>
<p id="p-0029" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing an instruction format to be handled by the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 2</figref> shows an instruction code of a division instruction and a remainder instruction, for example. In <figref idref="DRAWINGS">FIG. 2</figref>, information specifying the type (for example, a division instruction, a remainder instruction, and so on) of the operation instruction to be executed is stored in the first operand code (opcode) OP<b>1</b> and second operand code (opcode) OP<b>2</b>. The type of data (as data type information) to be stored in registers specified by a destination register identifier R<b>1</b> and a source register identifier R<b>2</b> is defined in the opcode OP<b>1</b> and the opcode OP<b>2</b> as a part of the instruction. Here, the data type is the information to specify one of the signed operand (signed) and the unsigned operand (unsigned) for the process.</p>
<p id="p-0030" num="0030">It is possible to place the information to specify the data type in a bit position other than the opcode of the instruction code. The information to specify the register storing a dividend in the register group in the general purpose register file <b>2</b> is stored in the destination register identifier R<b>1</b>. The information to specify the register storing a divisor in the register group in the general purpose register file <b>2</b> is stored into the source register identifier R<b>2</b>. Contrary to the conventional technique, the size information of the dividend data for the division and remainder instructions is not stored in a constant number field C in the instruction code.</p>
<p id="p-0031" num="0031"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> are diagrams showing data formats for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 3A</figref> shows the unsigned data format (without any sign bit) and <figref idref="DRAWINGS">FIG. 3B</figref> shows the signed data format (with a sign bit). In the unsigned data format shown in <figref idref="DRAWINGS">FIG. 3A</figref>, the first bit position of the logical value &#x201c;1&#x201d; searched from the most significant bit (&#x201c;0&#x201d; bit) is defined as k<sup>th </sup>bit. On the other hand, in the data format with a sign bit shown in <figref idref="DRAWINGS">FIG. 3B</figref>, the first bit position of the reversed logical value of the sign bit &#x201c;sgn&#x201d; searched from the first bit excepting the sign bit &#x201c;sgn&#x201d; is defined as k<sup>th </sup>bit. <figref idref="DRAWINGS">FIG. 3B</figref> shows the case where effective data are stored in the field of k<sup>th </sup>bit to 31<sup>th </sup>bit in the 32 bit data format.</p>
<p id="p-0032" num="0032">Next, a description will be given of the operation of the data processing device.</p>
<p id="p-0033" num="0033"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart showing the operation for setting the instruction number cycle by the data processing device according to the first embodiment. <figref idref="DRAWINGS">FIG. 4</figref> shows a pre-processing for a division based on a nonrestoring division that will be described later. The detection process of the size information &#x201c;n&#x201d; (as the effective data width) of the dividend data in the division and remainder instructions will be explained according to the <figref idref="DRAWINGS">FIG. 4</figref>. For example, in the data processing device of a 32 bit date length, &#x201c;n&#x201d; becomes an integer satisfying the range of 0&#x3c;n 32. Hereinafter, we assume that the data processing device handles the data of a 32 bit length.</p>
<p id="p-0034" num="0034">First, when receiving an instruction code generated by the compilation of a source code, the instruction decoder <b>1</b> decodes the instruction code received. The instruction written in the source code is arranged in the hardware in the data processing device for operation. At this time, the kind of the instruction (for example, division and remainder instructions) and the data type of the operand to be processed, which are set in the first opcode OP<b>1</b> and the second opcode OP<b>2</b> in the instruction code, are retrieved as the instruction code information.</p>
<p id="p-0035" num="0035">The instruction decoder <b>1</b> transfers the instruction code information as the decode result to the control logic unit <b>3</b>. The size information detector <b>6</b> in the control logic unit <b>3</b> inputs the decode result. After this, the data processing device of the first embodiment starts the execution of the division instruction.</p>
<p id="p-0036" num="0036">Next, the control logic unit <b>3</b> reads the dividend data stored in the register in the general purpose register file <b>2</b> based on the information set in the destination register identifier R<b>1</b> and transfers it onto the bus Si and also transfers it to the size information detector <b>6</b> (Step ST<b>1</b>).</p>
<p id="p-0037" num="0037">The size information detector <b>6</b> judges whether the dividend data has a sign bit or not based on the data type of the dividend data retrieved from the instruction code information as the decode result (Step ST<b>2</b>). When the dividend data has no sign bit, the size information detector <b>6</b> detects the most bit position &#x201c;k&#x201d; (as the kth bit) of the logical value &#x201c;1&#x201d; that is firstly detected while searching it from O<sup>th </sup>bit as the most significant bit (Step ST<b>3</b>). When does not detect any logical value &#x201c;1&#x201d;, the detector <b>6</b> judges that the dividend data is zero.</p>
<p id="p-0038" num="0038">On the other hand, when the dividend data is signed data, the size information detector <b>6</b> judges whether the sign is a positive or negative value (Step ST<b>4</b>). When the sign is a positive value, that is, when the sign bit as the 0 bit in the dividend data is the logical value &#x201c;0&#x201d;, the detector <b>6</b> detects the first bit position &#x201c;k&#x201d; where the revprsed value &#x201c;1&#x201d; of this sign bit &#x201c;0&#x201d; is firstly detected (Step ST<b>5</b>). On the contrary, when the sign is a negative value, that is, when the sign bit as the O<sup>th </sup>bit in the dividend data is the logical value &#x201c;1&#x201d;, the detector <b>6</b> detects the bit position &#x201c;k&#x201d; where the reversed value &#x201c;0&#x201d; of this sign bit &#x201c;1&#x201d; is firstly detected (Step ST<b>6</b>).</p>
<p id="p-0039" num="0039">After the detection of the bit position &#x201c;k&#x201d; by the manner previously described, the detector <b>6</b> calculates (32&#x2212;k) bit data by subtracting k from the 32 bit data length, handled by the data processing device of the first embodiment. The size information detector <b>6</b> transfers the calculation result, namely, the data size information &#x201c;n&#x201d; of the dividend data as the effective data width to the loop iteration completion detector <b>7</b>. In addition, the size information detector <b>6</b> determines that the magnitude of the shifting is k, and generates the control signal SF<b>1</b> to specify the shift width k and outputs it onto the bus S<b>2</b> because the data of the O<sup>th </sup>bit to (k&#x2212;1)<sup>th </sup>bit is un-effective data for calculation (Step ST<b>7</b>).</p>
<p id="p-0040" num="0040">Next, a description will now be given of the division process based on nonrestoring division.</p>
<p id="p-0041" num="0041"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart showing the operation for a division instruction executed by the data processing device. The algorithm of the execution of the division instruction based on nonrestoring division will be explained with reference to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0042" num="0042">Firstly, the shifter <b>5</b> inputs the shift width k and the dividend data, where the shift width k is specified by the control signal SF<b>1</b> transferred from the control logic unit <b>3</b> and the dividend data is obtained under the control of the control logic unit <b>3</b>. The shifter <b>5</b> receives the control signal CTS transferred from the control logic unit <b>3</b>. This control signal CTS indicates that the shifting direction is left. The shifter <b>5</b> shifts the position in the dividend data left by the shift width k. As shown in <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>, the data items of O<sup>th </sup>bit (including the sign bit) to (k&#x2212;1) bit in the dividend data is out of operation, namely, those are not effective data items. Accordingly, by shifting the dividend data left by the shift width k, it is possible to eliminate the unnecessary data items from the dividend data.</p>
<p id="p-0043" num="0043">The shift result by the shifter <b>5</b> is stored in the extended register <b>11</b> in the remainder register <b>10</b> through the path SF<b>3</b>. The value &#x201c;zero&#x201d; is stored into the 32 bit left half of the remainder register <b>10</b>. Step ST<b>1</b><i>a </i>includes from the process where the shifter <b>5</b> obtains the shift width and the dividend data transferred from the control logic unit <b>3</b> to the process where the value &#x201c;zero&#x201d; is stored in the 32 bit left half of the remainder register <b>10</b>.</p>
<p id="p-0044" num="0044">Next, the control logic unit <b>3</b> outputs the control signals CT<b>1</b> and CT<b>2</b> to the remainder register <b>10</b> in order to shift the data left by one bit, which is stored in the remainder register <b>10</b> (Step ST<b>2</b><i>a</i>). The control signal CT<b>1</b> is a signal to control the shifting direction of the data in the remainder register <b>10</b>, like the conventional one. The control signal CT<b>2</b> is a signal to specify data to be stored into the LSB (Least Significant Bit) of the remainder register <b>10</b>.</p>
<p id="p-0045" num="0045">Following the process, the loop iteration completion detector <b>7</b> sets the initial value &#x201c;zero&#x201d; to the counter <b>8</b>. Thereby, the loop iteration of the division is initiated based on nonrestoring division.</p>
<p id="p-0046" num="0046">First, the ALU <b>4</b> reads the divisor data stored in the general purpose register file S<b>2</b> on the internal bus <b>2</b> under the control of the control logic unit <b>3</b> based on the information set in the source register identifier R<b>2</b>, and transfers the divisor data to the ALU <b>9</b> through the path AU<b>2</b>. Further, the ALU <b>9</b> gets the 32 bit left half data of the remainder register <b>10</b> through the path AU<b>1</b>. When receiving the control signal CTA generated by and transferred from the control logic unit <b>3</b>, the ALU <b>9</b> starts the subtraction process where the divisor on the path AU<b>2</b> from the data on the path AU<b>1</b>. The ALU <b>9</b> stores the subtraction result into the 32 bit left half of the remainder register <b>10</b> (Step ST<b>3</b><i>a</i>).</p>
<p id="p-0047" num="0047">When the subtraction process is executed, the control logic 3 judges whether the remainder is not less than zero or not (Step ST<b>4</b><i>a</i>). In a concrete example, like the conventional technique, the control logic unit <b>3</b> retrieves the MSB (Most Significant Bit) in the operation result in the ALU <b>9</b> as the control signal DVSGN. At this time, because the remainder becomes not less than zero when the control signal DVSGN is zero, the control logic unit <b>3</b> outputs the control signal CT<b>1</b> to indicate &#x201c;Shifting left by one bit&#x201d; to the ALU <b>4</b> in order to shift the data in the remainder register <b>10</b> left by one bit. The control logic unit <b>3</b> sets the value &#x201c;1&#x201d; to the LSB (Least Significant Bit) in the remainder register <b>10</b> (Step ST<b>5</b><i>a</i>). That is, when the data in the remainder register <b>10</b> is shifted left by one bit, the value &#x201c;1&#x201d; is set to the most significant right-hand bit.</p>
<p id="p-0048" num="0048">On the other hand, because the remainder is less than zero when the control signal DVSGN is the value &#x201c;1&#x201d;, the control logic unit <b>3</b> transfers the divisor data on the internal bus <b>52</b> to the ALU <b>9</b>. Further, the left half data of the remainder register <b>10</b> is set in the AU <b>1</b>. After this process, the ALU <b>9</b> adds the data on the path AU<b>1</b> and the data on the path AU<b>2</b>, and then stores the operation result of the addition into the 32 bit left half of the remainder register <b>10</b>. That is, the divisor data in the general purpose register file <b>2</b> is added to the left half of the remainder register <b>10</b>. The data in the remainder register <b>10</b> is replaced with the original data before the execution of the subtraction process previously described.</p>
<p id="p-0049" num="0049">Next, the control logic unit <b>3</b> outputs the control signal CT<b>1</b> to indicate &#x201c;Shifting left by one bit&#x201d; to the ALU <b>4</b> in order to shift the data in the remainder register <b>10</b> left by one bit. Following this, the control logic unit <b>3</b> outputs the control signal CT<b>2</b> of zero (CT<b>2</b>=0) to the remainder register <b>10</b> in order to set the value &#x201c;zero&#x201d; to the LSB in the remainder register <b>10</b>. That is, the data in the remainder register <b>10</b> is shifted left by one bit and the value &#x201c;zero&#x201d; is set to the most significant right bit in the remainder register <b>10</b> (Step ST<b>6</b><i>a</i>).</p>
<p id="p-0050" num="0050">Following this process, the control logic unit <b>3</b> judges the number of the loop-iterations (Step ST<b>7</b><i>a</i>). In a concrete example, the loop iteration completion detector <b>7</b> increments the value of the counter <b>8</b> by one every the execution of the loop iteration for the subtraction based on nonrestoring division.</p>
<p id="p-0051" num="0051">After this, the loop iteration completion detector <b>7</b> compares the size information &#x201c;n&#x201d; of the dividend data, stored as the completion number for the loop iteration based on nonrestoring division, with the value of the counter <b>8</b>. When the value of the counter <b>8</b> is less than &#x201c;n&#x201d;, that is, when the number of the loop-iteration processes is less than &#x201c;n&#x201d;, the processes previously described is repeated again.</p>
<p id="p-0052" num="0052">On the other hand, when the value of the counter <b>8</b> is &#x201c;n&#x201d;, that is, when the number of the loop-iteration processes is reached to the value &#x201c;n&#x201d;, the control logic unit <b>3</b> outputs the control signal to indicate &#x201c;Shifting right by one bit&#x201d; to the ALU <b>4</b> in order to shift the data in the remainder register <b>10</b> right by one bit (Step ST<b>8</b><i>a</i>).</p>
<p id="p-0053" num="0053">Upon executing a division instruction, the control logic unit <b>3</b> outputs the data (quotient) stored in the extended register <b>11</b> to the internal bus D<b>1</b> through the path OUT<b>1</b>. When a remainder instruction is executed, the control logic unit <b>3</b> outputs data (remainder) stored in the upper 32 bit of the remainder register <b>10</b> to the internal bus D<b>1</b> through the path OUT<b>2</b>. Finally, the operation result of the data processing device is transferred to and stored in the register (specified by the destination register identifier in the instruction code) in the general purpose register file <b>2</b> through the internal bus D<b>1</b>.</p>
<p id="p-0054" num="0054">As described above, because the data processing device according to the first embodiment has the size, information detector <b>6</b> to directly detect the size information of the dividend data from the dividend data itself during the execution of the division instruction, it is possible to select the optimum number of cycles for each dividend data during the execution of the division instruction.</p>
<heading id="h-0007" level="1">Second Embodiment</heading>
<p id="p-0055" num="0055"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing a configuration of a data processing device according to a second embodiment of the present invention. <figref idref="DRAWINGS">FIG. 6</figref> shows hardware to execute a division process, for example. In the diagram, the size information detector <b>6</b><i>a </i>(forming the controller) detects the size information (effective data width) of a dividend data during the execution of division and remainder instructions based on the decode result of the dividend data including the size upper-limit value L transferred from the instruction decoder, and outputs the detected one to the loop iteration completion detector <b>7</b>. This size information detector <b>6</b><i>a </i>comprises a priority encoder which searches only the L bit width data based on the size upperlimit value L. The same components in the data processing device of the first embodiment will be referred to with the same reference numbers, and the explanation for the same components is omitted here for brevity.</p>
<p id="p-0056" num="0056"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram showing an instruction format for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 6</figref>. In the diagram, the information to specify the type (for example, a division instruction and a remainder instruction) of the instruction to be executed is stored in the first and second opcodes OP<b>1</b> and OP<b>2</b>.</p>
<p id="p-0057" num="0057">The type of data (as data type information) to be stored in registers specified by the destination register identifier Ri and the source register identifier R<b>2</b> is defined in the opcode OP<b>1</b> and the opcode OP<b>2</b> as a part of the instruction. Here, like the first embodiment, the data type is the information to specify one of the signed operand (with sign) and the unsigned operand (without sign) for the process.</p>
<p id="p-0058" num="0058">It is possible to place the information to specify the data type in a bit position other than the opcode of the instruction code. The information to specify the register storing a dividend in the register group in the general purpose register file <b>2</b> is stored in the destination register identifier R<b>1</b>. The information to specify the register storing a divisor in the register group in the general purpose register file <b>2</b> is stored into the source register identifier R<b>2</b>.</p>
<p id="p-0059" num="0059">The information to specify the size upper-limit value L of the dividend data is stored in a size field UL (size upper-limit information) placed in a part in the constant field C in the instruction code. For example, in the data processing device handling 32 bit data, the size upper-limit value L takes within the range O&#x3c;L&#x2266;32.</p>
<p id="p-0060" num="0060"><figref idref="DRAWINGS">FIGS. 8A and 8B</figref> are diagrams showing data formats, each having the size upper-limit value of 16 bits for use in the data processing device shown in <figref idref="DRAWINGS">FIG. 6</figref>. In particular, <figref idref="DRAWINGS">FIG. 8A</figref> shows the unsigned data format (without sign) and <figref idref="DRAWINGS">FIG. 8B</figref> shows the signed data format (with sign). In <figref idref="DRAWINGS">FIGS. 8A and 8B</figref>, DIVUH and DIVH are mnemonics for a division instruction. The former is the unsigned division instruction and the latter is the signed division instruction. Because the size upper-limit value L of the dividend data is 16-bit long, the data processing device processes the value from the O<sup>th </sup>bit to 15<sup>th </sup>bit as invalid data in the data formats corresponding to the mnemonics DIVUH and DIVH.</p>
<p id="p-0061" num="0061">Next, a description will be given of the operation of the data processing device.</p>
<p id="p-0062" num="0062"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart showing the operation for setting the number of cycles for the instruction by the data processing device according to the second embodiment.</p>
<p id="p-0063" num="0063">This process shown in <figref idref="DRAWINGS">FIG. 9</figref> corresponds to the preprocessing of the division based on nonrestoring division that will be described in detail.</p>
<p id="p-0064" num="0064">The detection process of the size information &#x201c;n&#x201d; of the dividend data in the division and remainder instructions will be explained according to the <figref idref="DRAWINGS">FIG. 4</figref>. For example, in the data processing device handling a 32 bit data length, &#x201c;n&#x201d; becomes an integer satisfying the range of 0&#x3c;n&#x2266;32. Hereinafter, we assume that the data processing device handles data of a 32 bit data length.</p>
<p id="p-0065" num="0065">First, when receiving an instruction code generated by the compilation of a source code, the instruction decoder <b>1</b> decodes the instruction code received. The instruction written in the source code is arranged in the hardware in the data processing device for operation. At this time, the kind of the instruction (for example, a division instruction and a remainder instruction) and the data type of the operand to be processed, which are set in the first opcode OP<b>1</b> and the second opcode OP<b>2</b> in the instruction code, are retrieved as the instruction code information.</p>
<p id="p-0066" num="0066">The instruction decoder <b>1</b> transfers the instruction code information as the decode result to the control logic unit <b>3</b>. The size information detector <b>6</b><i>a </i>in the control logic unit <b>3</b> inputs the decode result. After this, the data processing device of the second embodiment starts the execution of the division instruction.</p>
<p id="p-0067" num="0067">Next, the control logic unit <b>3</b> reads the dividend data stored in the register in the general purpose register file <b>2</b> based on the information set in the destination register identifier R<b>1</b> in the decode result and transfers it onto the bus S<b>1</b> and also transfers it to the size information detector <b>6</b><i>a </i>(Step ST<b>1</b>).</p>
<p id="p-0068" num="0068">The size information detector <b>6</b><i>a </i>judges whether the dividend data has a sign bit or not based on the data type of the dividend data retrieved from the instruction code information as the decode result (Step ST<b>2</b>). When the dividend data has no sign bit (unsigned data), the size information detector <b>6</b><i>a </i>detects the first bit position &#x201c;k&#x201d; (as k<sup>th </sup>bit) of the logical value &#x201c;1&#x201d; that is firstly detected while searching from (32&#x2212;L)<sup>th </sup>bit to 31<sup>st </sup>bit other than the O<sup>th </sup>bit (most significant bit) to (31&#x2212;L)<sup>th </sup>bit in the dividend data. The detector <b>6</b><i>a </i>treats the range of O<sup>th </sup>bit to (31&#x2212;L)<sup>th </sup>bit in the dividend data as invalid data items (Step ST<b>3</b><i>b</i>). When does not detect any logical value &#x201c;1&#x201d;, the detector <b>6</b><i>a </i>judges that the dividend data is zero.</p>
<p id="p-0069" num="0069">On the other hand, when the dividend data is signed data, the size information detector <b>6</b><i>a </i>judges whether the sign is a positive or negative value (Step ST<b>4</b>). Here, when the upper-limit value of the dividend data is L and the sign is a positive value, that is, when the value of the (32&#x2212;L)<sup>th </sup>sign bit in the dividend data is a logical value &#x201c;0&#x201d;, the detector <b>6</b><i>a </i>searches from the (32&#x2212;L+1)<sup>th </sup>bit to 31<sup>st </sup>bit in order to detect the first bit position &#x201c;k&#x201d; of the reversed value (namely, the logical value &#x201c;1&#x201d;) of the logical value &#x201c;0&#x201d; (Step ST<b>5</b><i>b</i>).</p>
<p id="p-0070" num="0070">On the contrary, when the sign is a negative value, that is, when the value of the (32&#x2212;L)<sup>th </sup>sign bit in the dividend data is a logical value &#x201c;1&#x201d;, the detector <b>6</b><i>a </i>searches from the (32&#x2212;L+1)<sup>th </sup>bit to 31<sup>5t </sup>bit in order to detect the first bit position &#x201c;k&#x201d; of the reversed value (namely, the logical value &#x201c;0&#x201d;) of the logical value &#x201c;1&#x201d; (Step ST<b>5</b><i>b</i>). In the example shown in <figref idref="DRAWINGS">FIG. 8B</figref>, the bit values from 16<sup>th </sup>bit position to 23<sup>rd </sup>bit position take the same value &#x201c;S&#x201d; of the sign bit (which is 16<sup>th </sup>bit position as the logical value S). Therefore the effective data is from 24<sup>th </sup>bit position to 31<sup>st </sup>bit position.</p>
<p id="p-0071" num="0071">After the detection of the bit position &#x201c;k&#x201d; by the manner previously described, the detector <b>6</b><i>a </i>calculates (32&#x2212;k) value as the data size information &#x201c;n&#x201d; of the dividend data and the number of cycles for the loop iteration by subtracting k from the 32 bit data length, handled by the data processing device of the second embodiment.</p>
<p id="p-0072" num="0072">The size information detector <b>6</b><i>a </i>transfers the calculation result, namely, the data size information &#x201c;n&#x201d; of the dividend data as the effective data width to the loop iteration completion detector <b>7</b>.</p>
<p id="p-0073" num="0073">In addition, the size information detector <b>6</b><i>a </i>determines that the magnitude of the shifting of the dividend data is k, and generates the control signal SF<b>1</b> to specify the shift width k and outputs it onto the bus S<b>2</b> because the data of the <sup>0th </sup>bit (including the sign bit) to (k&#x2212;1)<sup>th </sup>bit is un-effective data for calculation (Step ST<b>7</b>).</p>
<p id="p-0074" num="0074">Because the division process based on nonrestoring division after the process described above is the same of that in the first embodiment, the explanation is therefore omitted here.</p>
<p id="p-0075" num="0075">As described above, according to the data processing device of the second embodiment, because the upper-limit value L to be used for the determination of the searching range to detect the size information of the dividend data is set in the instruction code, it is possible to perform the detection process of the size information of the dividend data at high speed. In addition, it is not necessary to correct the dividend data in a 32 bit data format when it is stored because the data items of the bit positions out of the range specified by the size upper-limit value L become invalid data.</p>
<heading id="h-0008" level="1">Third Embodiment</heading>
<p id="p-0076" num="0076"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram showing a configuration of a data processing device according to a third embodiment of the present invention. <figref idref="DRAWINGS">FIG. 10</figref> shows hardware to execute a division process, for example. In the diagram, the mode register (as a memory) <b>12</b> stores the information (as data type information) to specify the data type of dividend data and the size upper-limit value L (as a size upper-limit value) of the dividend data.</p>
<p id="p-0077" num="0077">The same components in the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref> and <figref idref="DRAWINGS">FIG. 6</figref> will be referred to with the same reference numbers, and the explanation for the same components is omitted here for brevity.</p>
<p id="p-0078" num="0078">First, the data processing device of the third embodiment uses the same instruction formats of the first embodiment shown in <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>. That is, no size information of dividend data for division and remainder instructions is stored in the constant field C in the instruction code. The data processing device of the third embodiment uses the same data format of the second embodiment shown in <figref idref="DRAWINGS">FIGS. 8A and 88</figref>. The data items of the bit positions out of the range specified by the size upperlimit value L become invalid.</p>
<p id="p-0079" num="0079">Next, a description will now be given of the operation of the third embodiment.</p>
<p id="p-0080" num="0080">The detection process of the size information &#x201c;n&#x201d; of a dividend data on the execution of division and remainder instructions will be explained. For example, in the data processing device using 32 bit data, the size information &#x201c;n&#x201d; becomes an integer satisfying the range 0&#x3c;n&#x2266;32. Hereinafter, we assume that the data processing device handles data of 32 bit data length.</p>
<p id="p-0081" num="0081">First, when receiving an instruction code generated by the compilation of a source code, the instruction decoder <b>1</b> decodes the instruction code received. The instruction written in the source code is arranged in the hardware in the data processing device. At this time, the kind of the instruction (for example, division and remainder instructions) and the data type of the operand to be processed, which are set in the first opcode OP<b>1</b> and the second opcode OP<b>2</b> in the instruction code, are retrieved as the instruction code information.</p>
<p id="p-0082" num="0082">The instruction decoder <b>1</b> transfers the instruction code information as the decode result to the control logic unit <b>3</b>. The size information detector <b>6</b><i>a </i>in the control logic unit <b>3</b> inputs the decode result.</p>
<p id="p-0083" num="0083">Next, the control logic unit <b>3</b> reads the dividend data stored in the register in the general purpose register file and transfers it onto the bus Si and also transfers it to the size information detector Ga. Further, the control logic unit <b>3</b> reads the data type and the size upper-limit value L, corresponding to the dividend data, stored in the mode register <b>12</b> and transfers those data to the size information detector <b>6</b><i>a</i>. The data processing device of the third embodiment thereby starts to execute the division instruction.</p>
<p id="p-0084" num="0084">The size information detector <b>6</b><i>a </i>judges whether the dividend data has a sign bit or not based on the data type of the dividend data retrieved from the mode register <b>12</b>. When the dividend data has no sign bit (unsigned data), the size information detector <b>6</b><i>a </i>detects the first bit position &#x201c;k&#x201d; (as k<sup>th </sup>bit) of the logical value &#x201c;1&#x201d; that is firstly detected while searching from (32&#x2212;L)<sup>th </sup>bit to 31<sup>th </sup>bit other than the 0<sup>th </sup>bit (most significant bit) to (31&#x2212;L)<sup>th </sup>bit in the dividend data. The detector <b>6</b><i>a </i>treats the range of 0th bit to (31&#x2212;L)<sup>th </sup>bit in the dividend data as invalid data items.</p>
<p id="p-0085" num="0085">On the other hand, when the dividend data is signed data, the size information detector <b>6</b><i>a </i>judges whether the sign is a positive or negative value. Here, when the upperlimit value of the dividend data is L and the sign is a positive value, that is, when the value of the (32&#x2212;L)<sup>th </sup>sign bit in the dividend data is a logical value &#x201c;0&#x201d;, the detector <b>6</b><i>a </i>searches from the (32&#x2212;L+1)<sup>th </sup>bit to 31<sup>st </sup>bit in order to detect the first bit position &#x201c;k&#x201d; of the reversed value (namely, the logical value &#x201c;1&#x201d;) of the logical value &#x201c;0&#x201d;.</p>
<p id="p-0086" num="0086">On the contrary, when the sign is a negative value, that is, when the value of the (32&#x2212;L)<sup>th </sup>sign bit in the dividend data is a logical value &#x201c;1&#x201d;, the detector <b>6</b><i>a </i>searches from the (32&#x2212;L+1)<sup>th </sup>bit to 31<sup>st </sup>bit in order to detect the first bit position &#x201c;k&#x201d; of the reversed value (namely, the logical value &#x201c;0&#x201d;) of the logical value &#x201c;1&#x201d;.</p>
<p id="p-0087" num="0087">After the detection of the bit position &#x201c;k&#x201d; by the manner previously described, the size information detector <b>6</b><i>a </i>calculates (32&#x2212;k) value as the data size information &#x201c;n&#x201d; of the dividend data and the number of cycles for the loop iteration by subtracting k from the 32 bit data length, handled by the data processing device of the second embodiment.</p>
<p id="p-0088" num="0088">The size information detector <b>6</b><i>a </i>transfers the calculation result, namely, the data size information &#x201c;n&#x201d; of the dividend data as the effective data width to loop iteration completion detector <b>7</b>.</p>
<p id="p-0089" num="0089">In addition, the size information detector <b>6</b><i>a </i>determines that the magnitude of the shifting of the dividend data is k, and generates the control signal SF<b>1</b> to specify the shift width k and outputs it onto the bus S<b>2</b> because the data of the 0<sup>th </sup>bit (including the sign bit) to (k&#x2212;1)<sup>th </sup>bit is un-effective data for calculation (Step ST<b>7</b>).</p>
<p id="p-0090" num="0090">Because the division process based on nonrestoring division after the process described above is the same of that in the second embodiment, the explanation is therefore omitted here.</p>
<p id="p-0091" num="0091">As described above, according to the data processing device of the third embodiment, because the data processing device incorporates the mode register <b>12</b> into which the data type and the size upper-limit value L for dividend data are stored, it is possible to obtain the same effect of the second embodiment without any size information field in the instruction format.</p>
<p id="p-0092" num="0092">The first through third embodiments have explained the hardware and arithmetic operation for the division process. The present invention is not limited by those cases, that is, the present invention can apply arithmetic processes of various types unless the instruction cycle number is determined based on the effective data width of operation. For example, it is possible to control the lower-limit of the number of cycles for the instruction execution and to control the lower-limit value of the operation result by setting the size lower-limit value of the arithmetic data other than the size upper-limit value thereof as the instruction code information.</p>
<heading id="h-0009" level="1">Fourth Embodiment</heading>
<p id="p-0093" num="0093"><figref idref="DRAWINGS">FIG. 11</figref> is a block diagram showing a configuration of a data processing device according to a fourth embodiment of the present invention. <figref idref="DRAWINGS">FIG. 11</figref> shows hardware to execute a division process, for example. In the diagram, the mode register (as a memory) <b>12</b><i>a </i>stores process setting information to specify whether or not the size information detector <b>6</b><i>b </i>performs the detection process of the effective data width of a dividend data. The same components in the data processing device shown in <figref idref="DRAWINGS">FIG. 1</figref> and <figref idref="DRAWINGS">FIG. 6</figref> will be referred to with the same reference numbers, and the explanation for the same components is omitted here for brevity.</p>
<p id="p-0094" num="0094">The data processing device of the fourth embodiment performs the process to determine and set the instruction cycle number which has already been shown in the first embodiment. Further, the data processing device of the fourth embodiment selects the processes of the second and third embodiments previously described based on the process setting information stored in the mode register <b>12</b><i>a </i>and determines the instruction cycle number based on a data width which is determined in advance and stored in the mode register <b>12</b><i>a. </i></p>
<p id="p-0095" num="0095">Next, a description will now be given of the operation of the fourth embodiment.</p>
<p id="p-0096" num="0096">The detection process of the size information &#x201c;n&#x201d; of a dividend data on the execution of division and remainder instructions will be explained. For example, in the data processing device using 32 bit data, the size information &#x201c;n&#x201d; becomes an integer satisfying the range 0&#x3c;n&#x2266;32. Hereinafter, we assume that the data processing device handles data of 32 bit data length.</p>
<p id="p-0097" num="0097">First, when receiving an instruction code generated by the compilation of a source code, the instruction decoder <b>1</b> decodes the instruction code received. The instruction described in the source code is arranged in the hardware in the data processing device for operation. At this time, the kind of the instruction (for example, division and remainder instructions) and the data type of the operand to be processed, which are set in the first opcode OP<b>1</b> and the second opcode OP<b>2</b> in the instruction code, are retrieved as the instruction code information.</p>
<p id="p-0098" num="0098">The instruction decoder <b>1</b> transfers the instruction code information as the decode result to the control logic unit <b>3</b>. The size information detector <b>6</b><i>b </i>in the control logic unit <b>3</b> inputs the decode result. Next, the control logic unit <b>3</b> reads the dividend data stored in the register in the general purpose register file and transfers it onto the bus Si and also transfers it to the size information detector <b>6</b><i>b. </i></p>
<p id="p-0099" num="0099">At this time, the size information detector <b>6</b><i>b </i>in the control logic unit <b>3</b> inputs the process setting information stored in the mode register <b>12</b><i>a </i>and then judges whether or not the detection function is valid or invalid, namely, whether or not the detection process of the effective data width of the dividend data is performed based on the process setting information inputted. In a concrete example, the mode register <b>12</b><i>a </i>stores the digital value to specify whether the detection function for the effective data width of the dividend data by the size information detector <b>6</b><i>b </i>is effective or ineffective. The size information detector <b>6</b><i>b </i>judges the effective or ineffective of the detection function based on the value of the process setting information.</p>
<p id="p-0100" num="0100">When the detection function is effective, the detector <b>6</b><i>b </i>calculates the effective data width &#x201c;n&#x201d; of the dividend data corresponding to the number of cycles for the instruction execution of the division instruction by performing the same manner of the first embodiment prescribed. The processes following after the effective data width &#x201c;n&#x201d; is set into the loop iteration completion unit <b>7</b> are the same of those of the first embodiment.</p>
<p id="p-0101" num="0101">On the contrary, when the process setting information indicates that the detection function for the effective data width of the dividend data is invalid, the detector <b>6</b><i>b </i>sets the 32 bit data for a processor of the data processing device into the loop iteration detector <b>7</b> as the effective data width &#x201c;n&#x201d; without detecting any effective data width &#x201c;n&#x201d;. After this process described above, the fourth embodiment performs the same processes of the first embodiment, that is, the feature of the fourth embodiment can be applied to the first embodiment.</p>
<p id="p-0102" num="0102"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram showing a control logic unit and peripherals.</p>
<p id="p-0103" num="0103">With reference to <figref idref="DRAWINGS">FIG. 12</figref>, it will be explained that the feature of the fourth embodiment is applied to the cases of the first to third embodiments.</p>
<p id="p-0104" num="0104">As shown in <figref idref="DRAWINGS">FIG. 12</figref>, when the configuration of the fourth embodiment is applied to the cases of the second and third embodiments, the size information detector <b>6</b><i>b </i>inputs the size upper-limit value L of the dividend data based on the decode result of the instruction code or from the mode register <b>12</b>. The size upper-limit value L of the dividend data can be stored with the process setting information into the mode register <b>12</b><i>a. </i></p>
<p id="p-0105" num="0105">When the process setting information indicates that the detection function for the effective data width of the dividend data is valid, the size information-detector <b>6</b><i>b </i>performs the same processes of the second or third embodiment in order to calculate the effective data width &#x201c;n&#x201d; of the dividend data corresponding to the number of the instruction execution cycles for the division process. The processes following to the setting process to set the effective data width &#x201c;n&#x201d; to the loop iteration completion detector <b>7</b> are the same processes of the second or third embodiment.</p>
<p id="p-0106" num="0106">On the contrary, when the process setting information indicates that the detection function for the effective data width of the dividend data is invalid, the size information detector <b>6</b><i>b </i>sets to the loop iteration completion detector <b>7</b> the size upper-limit value L of the dividend data as the predetermined effective data width &#x201c;n&#x201d; without detecting any effective data width &#x201c;n&#x201d;. The processes after the setting of the effective data width &#x201c;n&#x201d; into the detector <b>7</b> are the same of those in the second or third embodiment.</p>
<p id="p-0107" num="0107">It is acceptable to include the information as the process setting information to be stored in the mode register <b>12</b><i>a</i>, which specifies whether or not the instruction code information such as the size upper-limit value L of the dividend data is used, other than the information to specify whether or not the detection process of the effective data width of the dividend data is performed.</p>
<p id="p-0108" num="0108">In a concrete example, as shown in <figref idref="DRAWINGS">FIG. 12</figref>, the size information detector <b>6</b><i>b </i>stores both the size upper-limit value L of the dividend data and the data length to be handled by the processor of the data processing device. In this case, when the process setting information includes data to specify that the detection function for the effective data width of the dividend data is invalid and data to specify that the use of the instruction code information such as the size upper-limit L of the dividend data is invalid, the size information detector <b>6</b><i>b </i>sets the 32 bit data as the effective data width &#x201c;n&#x201d; into the loop iteration completion detector <b>7</b> without using the size upper-limit value L of the dividend data as the effective data width &#x201c;n&#x201d;.</p>
<p id="p-0109" num="0109">Further, when the process setting information includes data to specify that the detection function for the effective data width of the dividend data is invalid and data to specify that the use of the instruction code information such as the size upper-limit L of the dividend data is valid, the size information detector <b>6</b><i>b </i>sets the size upper-limit value L of the dividend data as the predetermined effective data width &#x201c;n&#x201d; into the loop iteration detector <b>7</b>.</p>
<p id="p-0110" num="0110">As described above, according to the data processing device of the fourth embodiment, because one of the following processes can be selected, it is possible to obtain the same effect of the second embodiment without forming any size information field in the instruction format:</p>
<p id="p-0111" num="0111">The process to determine the instruction cycle number based on the effective data width of the dividend data; and</p>
<p id="p-0112" num="0112">The process to determine the instruction cycle number based on the data width which has been determined in advance.</p>
<p id="p-0113" num="0113">In addition, the fourth embodiment can select optionally how to determine the instruction cycle number and can also determine the instruction cycle number according to the type of the arithmetic instruction optionally.</p>
<p id="p-0114" num="0114">As set forth in detail, according to the present invention, the data processing device has the instruction decoder for decoding instruction codes of an arithmetic instruction, the controller for detecting the effective data width of the operation data to be processed according to the decode result from the instruction decoder and for determining the instruction cycle number corresponding to the effective data width, and the operation unit, for executing the operation of the instruction with the instruction cycle number determined by the controller. Therefore it is not necessary to set the effective data width in advance to the instruction code every operation data and it is possible to optionally select the optimum instruction cycle number of obtained from the effective data width for each operation data during the execution of the arithmetic instruction.</p>
<p id="p-0115" num="0115">Further, according to the present invention, it is possible to eliminate the limitation of the instruction code because the instruction code information to control the instruction cycle number for the arithmetic instruction is stored into the memory in the data processing device, and the instruction cycle number corresponding to the effective data width of the operation data to be processed in the arithmetic instruction is determined based on the instruction code information, or because the instruction code information to control the instruction cycle number is stored in the memory such as the mode register, and the operation process is performed based on the information stored in the memory.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of execution of a divide instruction for a data processor, comprising the steps of:
<claim-text>determining whether a dividend instructed in the divide instruction is a signed form number or an unsigned form number based on the divide instruction;</claim-text>
<claim-text>determining an uppermost bit location, which has a first value when the dividend is unsigned data or when the dividend is signed data and a sign of the dividend data is positive, and which has a second value when the dividend is signed data and the sign of the dividend data is negative;</claim-text>
<claim-text>determining a data size of the dividend during an execution of the divide instruction based on the determined uppermost bit location in the dividend; and</claim-text>
<claim-text>executing a divide calculation based on the divide instruction,</claim-text>
<claim-text>wherein a calculation cycle count of the divide calculation is determined depending on the data size of the dividend.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method of execution of a divide instruction for a data processor, comprising the steps of:
<claim-text>decoding the divide instruction;</claim-text>
<claim-text>determining a data size of a dividend instructed in the divide instruction during an execution of the divide instruction; and</claim-text>
<claim-text>executing a divide calculation based on a decode result of the divide instruction,</claim-text>
<claim-text>wherein a calculation cycle count of the divide calculation is determined depending on the data size of the dividend,</claim-text>
<claim-text>wherein the divide instruction contains information indicating whether the dividend is the signed form number or the unsigned form number, and</claim-text>
<claim-text>wherein the data size of the dividend is determined based on the information in the divide instruction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data size of the dividend is determined based on information indicating a size upper limit value of the dividend.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the data size of the dividend is determined based on information indicating a size upper limit value of the dividend.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626320-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626320</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12300815</doc-number>
<date>20070514</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>IE</country>
<doc-number>S2006/0391</doc-number>
<date>20060515</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>1084</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>05</class>
<subclass>B</subclass>
<main-group>19</main-group>
<subgroup>42</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>700 87</main-classification>
</classification-national>
<invention-title id="d2e71">Process control method</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2003/0005099</doc-number>
<kind>A1</kind>
<name>Sven et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2005/0157543</doc-number>
<kind>A1</kind>
<name>Masuda et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2005/0159835</doc-number>
<kind>A1</kind>
<name>Yamada et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700109</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>DE</country>
<doc-number>19910536</doc-number>
<kind>A1</kind>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>DE</country>
<doc-number>10007826</doc-number>
<kind>A1</kind>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>700  9</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700 19</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700 23- 25</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700 27</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700 87</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100017036</doc-number>
<kind>A1</kind>
<date>20100121</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sexton</last-name>
<first-name>Timothy</first-name>
<address>
<city>County Louth Dundalk</city>
<country>IE</country>
</address>
</addressbook>
<residence>
<country>IE</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Keogh</last-name>
<first-name>Eoai</first-name>
<address>
<city>County Dublin Howth</city>
<country>IE</country>
</address>
</addressbook>
<residence>
<country>IE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Sexton</last-name>
<first-name>Timothy</first-name>
<address>
<city>County Louth Dundalk</city>
<country>IE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Keogh</last-name>
<first-name>Eoai</first-name>
<address>
<city>County Dublin Howth</city>
<country>IE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Christopher &#x26; Weisberg, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<examiners>
<primary-examiner>
<last-name>Shechtman</last-name>
<first-name>Sean P.</first-name>
<department>2121</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rapp</last-name>
<first-name>Chad</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/EP2007/054634</doc-number>
<kind>00</kind>
<date>20070514</date>
</document-id>
<us-371c124-date>
<date>20090821</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2007/131984</doc-number>
<kind>A </kind>
<date>20071122</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A process in an electro-mechanical system having a plurality of controllable components, is controlled by: (a) storing component objects each corresponding to a component and having activation and/or feedback data for that component; (b) storing operation objects each referencing an operation to be carried out on a component and a pointer to the relevant component object; (c) storing process steps each referring to operation objects; and (d) sequentially processing process steps, by: following each reference to an operation object to determine the operation type and the component object, and performing a data operation to be component object to cause the operation to be carried out on the relevant component. In this way, a system controller can be used to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from the components.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="189.91mm" wi="157.06mm" file="US08626320-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="196.51mm" wi="158.07mm" file="US08626320-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="158.75mm" wi="101.68mm" file="US08626320-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="162.39mm" wi="158.75mm" file="US08626320-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="217.09mm" wi="181.69mm" file="US08626320-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="247.99mm" wi="185.50mm" file="US08626320-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="249.43mm" wi="177.04mm" file="US08626320-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a Submission Under 35 U.S.C. &#xa7;371 for U.S. National Stage Patent Application of International Application Number: PCT/EP2007/054634, filed May 14, 2007, entitled &#x201c;PROCESS CONTROL METHOD&#x201d; which claims priority to Irish Application No. S2006/0391, filed May 15, 2006, the entirety of which are incorporated herein by reference.</p>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to the control of processes in all types of plants and electro-mechanical systems and to methods, computer systems and computer programs for controlling such processes.</p>
<heading id="h-0003" level="1">BACKGROUND ART</heading>
<p id="p-0004" num="0003">Conventional control systems employ an industrial programmable controller, known as a PLC (Programmable Logic Controller) and the program written for the specific control application. These programs are generated using low-level machine code type language editors or higher level editors which often provide a graphical platform for linking aspects of the system.</p>
<p id="p-0005" num="0004">Common repeatable functions can be utilised in both cases by using paramaterisable routines, with each instance use of the function represented by a call of the function to carry out required examination or operation on the items specified by the parameters assigned to the call of the function. The advantage of this is that the routine code does not require full testing and validation in each call instance.</p>
<p id="p-0006" num="0005">Conventional PLC code generation, therefore, is accomplished using either low level or high level editors. While it might appear that some of the high level editors do not produce PLC code, such editors will produce code which itself compiles to produce the PLC code.</p>
<heading id="h-0004" level="1">DISCLOSURE OF THE INVENTION</heading>
<p id="p-0007" num="0006">The invention provides a method of computer controlling a process in an electro-mechanical system having a plurality of controllable components, the method comprising:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0007">(a) storing a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</li>
        <li id="ul0002-0002" num="0008">(b) storing a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</li>
        <li id="ul0002-0003" num="0009">(c) storing a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</li>
        <li id="ul0002-0004" num="0010">(d) sequentially processing a plurality of said process steps, each process step being processed by:
        <ul id="ul0003" list-style="none">
            <li id="ul0003-0001" num="0011">(i) following the or each reference to an operation object,</li>
            <li id="ul0003-0002" num="0012">(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</li>
            <li id="ul0003-0003" num="0013">(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</li>
        </ul>
        </li>
        <li id="ul0002-0005" num="0014">whereby a system controller can be used to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0008" num="0015">As used herein, &#x201c;electro-mechanical system having a plurality of controllable components&#x201d; includes bespoke systems such as liquid material processing plants, plants, conveying systems, power generation plants, bulk handling plants (such as for milling or crushing bulk material), refining systems, fermentation systems, reactors, airfield lighting systems, energy management systems, building management systems and powder dryers. The term also includes systems which are built by an Original Equipment Manufacturer to a common general design requiring final modifications to suit particular orders, such as filling machines, blending systems, centrifuges, separators, homogenisers, packaging machines, and sterilising tunnels. The term does not embrace mass-produced or consumer goods which would not require dedicated programmable controllers to be programmed and configured in order to satisfactorily operate them.</p>
<p id="p-0009" num="0016">As discussed above, conventional computer control methods employ PLC code which is written specifically to control every step of operation of a PLC controller. The code specifies the circumstances in which devices are activated and addresses the devices to be activated.</p>
<p id="p-0010" num="0017">In contrast, the present invention operates by means of software objects (component objects and operation objects), with component objects being objects which reference a field electrical or bus-based device or instrument, and operation objects being objects which reference an internal controller based memory function. To put it another way, operation objects reference operations and the component objects on which the operations in question are carried out. Process steps include pointers to the operation objects. This means that the code for processing the process steps can be universal and significantly simplified when compared to customised code for controlling a PLC. While the present invention may be implemented using a PLC, the control system could equally be PC-based, or a combination of a conventional PC and a PLC might be employed.</p>
<p id="p-0011" num="0018">In addition to processing of process steps and the operation and component objects referenced by the method steps, the system controller also processes the various components of the system and examines in turn the objects associated with those components, taking any necessary actions to activate components which are flagged for activation, and updating the feedback state of components which have a feedback state.</p>
<p id="p-0012" num="0019">The result of this is that the programming of the control method becomes much more configurable to a wide range of electro-mechanical system types and processes, and the process control program can be modified more easily. Data objects can be set up for each of the components of the electro-mechanical system, and generic operation objects can then be duplicated for each instance where a device needs to be activated or a condition within the system needs to be checked.</p>
<p id="p-0013" num="0020">Preferably, the process steps are grouped in phases each comprising one or more of said process steps, and the phases each include an identification of a set of said controllable components on which the operations defined by the process steps are to be carried out.</p>
<p id="p-0014" num="0021">The term &#x201c;phase&#x201d; as used herein is intended to denote a sequence of steps to implement a process. The phase may implement a complete process or the process which the phase implements may be part of a larger process. A &#x201c;phase&#x201d; in this sense might also be referred to as a &#x201c;program&#x201d; whereby a number of different programs can be run within an overall electro-mechanical system (or sometimes, a single program will describe the entire process in a simpler electro-mechanical system).</p>
<p id="p-0015" num="0022">In this way, each phase can deal with a few subsystems of the overall system, and this intermediate distinction between method steps and the complete process is useful for allowing duplication and re-use of aspects of phases of a process at various stages of a process and in various areas of an electro-mechanical system. The particular area of the electro-mechanical system in which the phase is intended to be carried out can be specified by this identification of the set of components involved.</p>
<p id="p-0016" num="0023">Preferably, the phases further comprise an indication of parameters to be employed during the processing of the process steps of the phase.</p>
<p id="p-0017" num="0024">Again this allows a phase of, for example, &#x201c;heating a solution&#x201d; to be duplicated for different parts of an electro-mechanical system or a process, with parameters such as temperature setpoint and prescribed step duration being specified for each instance where the heating of an solution is being carried out. The individual process steps and operation objects can access these parameters to operate the correct regime for that particular heating step.</p>
<p id="p-0018" num="0025">Further, preferably, the phases further comprise an indication of variables to be employed during the processing of the process steps of the phase.</p>
<p id="p-0019" num="0026">The distinction between &#x201c;parameters&#x201d; and &#x201c;variables&#x201d; as used herein is that parameters are supplied from an external source or pre-set during configuration and are not modified by the process; variables however, are available to be modified, for example the contents of a parameter can be transferred to, or form part of, a variable, but not the other way around.</p>
<p id="p-0020" num="0027">The method also allows, in preferred embodiments, the step of storing a plurality of &#x201c;abstract steps&#x201d; each comprising a reference to one or more abstract operation objects, the abstract operation objects defining an operation to be carried out on data without directly employing the component objects.</p>
<p id="p-0021" num="0028">It is recognised that not every step of a process will involve operations on component objects. Abstract steps complement the process steps which directly involve components, by allowing manipulation of numbers, data and variables to provide useful results in later stages of the process. Such abstract steps include the &#x201c;tasks&#x201d; and the &#x201c;combined conditions&#x201d; referred to below.</p>
<p id="p-0022" num="0029">If a method includes abstract steps, and the phases of the method include reference to parameters and variables, the abstract operation objects preferably define one or more operations to be carried out on data such as manipulating the variables and the parameters.</p>
<p id="p-0023" num="0030">As an example, the value of a variable can be set to different parameters for different process steps, and this can be accomplished by abstract operation objects in abstract steps. Similarly, feedback values from instruments within the system can be mathematically manipulated with parameters and variables to provide useful results.</p>
<p id="p-0024" num="0031">Preferably, one or more of the operation types is a device activation.</p>
<p id="p-0025" num="0032">Further, preferably, one or more of the operation types is a determination of a feedback state of a component and the recordal of the result of the determination.</p>
<p id="p-0026" num="0033">Preferably, the determination includes comparing the feedback state to a predetermined condition and recordal includes an indication of whether the predetermined condition is met.</p>
<p id="p-0027" num="0034">In preferred embodiments, one or more of the operation types is a conditional device activation whereby a device is activated in dependence on the feedback state recorded as a result of a determination.</p>
<p id="p-0028" num="0035">The method of the invention preferably further comprises periodically reviewing the component objects in sequence, activating the components when required according to the activation states of the component objects and updating the feedback states of the component objects in dependence on signals received from the components.</p>
<p id="p-0029" num="0036">In this way, two routines can be run in conjunction, in alteration, or in parallel: a first routine processes process steps, follows the references to operation objects in those steps, and operates on the component objects referenced in the operation objects, as described previously, while a second routine interfaces between the component objects and the physical components which those objects represents, reading signals from and writing signals to those components.</p>
<p id="p-0030" num="0037">When the method includes phases and those phases identify sets of components on which they act, the method preferably further comprises the step of storing an indication of units of component objects corresponding to functionally linked components forming subsystems within the mechanised system, whereby the identification of a set of controllable components in a phase comprises an identification of one or more of the stored units.</p>
<p id="p-0031" num="0038">Thus, rather than simply listing every component as a reference for a phase, the components are pre-grouped into functional units, and these units of components are referenced. An example of a unit of associated components would be a liquid holding tank, the inlet valve, outlet valve, level sensors and alarms, the heating elements in that tank, and the pressure sensor within the tank. By referencing the unit, the phase could implicitly involve any or all of the components of the group. Furthermore, when a phase is actively processing any device in that unit, every other phase can be locked out from accessing that unit.</p>
<p id="p-0032" num="0039">In another aspect the invention provides a computer program product comprising instructions which when executed in a computer for controlling a process in an electro-mechanical system having a plurality of controllable components, are effective to cause said computer to:
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0000">
    <ul id="ul0005" list-style="none">
        <li id="ul0005-0001" num="0040">(a) store a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</li>
        <li id="ul0005-0002" num="0041">(b) store a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</li>
        <li id="ul0005-0003" num="0042">(c) store a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</li>
        <li id="ul0005-0004" num="0043">(d) sequentially process a plurality of said process steps, each process step being processed by:
        <ul id="ul0006" list-style="none">
            <li id="ul0006-0001" num="0044">(i) following the or each reference to an operation object,</li>
            <li id="ul0006-0002" num="0045">(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</li>
            <li id="ul0006-0003" num="0046">(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</li>
        </ul>
        </li>
        <li id="ul0005-0005" num="0047">whereby a plant controller can be used to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0033" num="0048">The invention also provides a computer programmed to control a process in an electro-mechanical system having a plurality of controllable components, the computer comprising:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0049">a component object storage area for storing a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</li>
        <li id="ul0008-0002" num="0050">an operation object storage area for storing a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</li>
        <li id="ul0008-0003" num="0051">a process step storage area for storing a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</li>
        <li id="ul0008-0004" num="0052">a processor programmed to sequentially process a plurality of said process steps, each process step being processed by:
        <ul id="ul0009" list-style="none">
            <li id="ul0009-0001" num="0053">(i) following the or each reference to an operation object,</li>
            <li id="ul0009-0002" num="0054">(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</li>
            <li id="ul0009-0003" num="0055">(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</li>
        </ul>
        </li>
        <li id="ul0008-0005" num="0056">whereby a plant controller can be used to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0034" num="0057">In one embodiment, the computer is implemented as a dedicated plant controller.</p>
<p id="p-0035" num="0058">In another embodiment, the computer is implemented as a general purpose computer communicating with a plant controller.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0036" num="0059">The invention will now be further illustrated by the following description of embodiments thereof given by way of example only, with reference to the accompanying drawings, in which:</p>
<p id="p-0037" num="0060"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of an electro-mechanical system architecture incorporating a system according to the invention;</p>
<p id="p-0038" num="0061"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of a simple plant used to exemplify the invention;</p>
<p id="p-0039" num="0062"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the items of equipment of the plant of <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0040" num="0063"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating the data maintained for the equipment groups of the plant of <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0041" num="0064"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart illustrating the operation of an equipment routines called from a main routine for operating the plant;</p>
<p id="p-0042" num="0065"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating the operation of a phase routine called from the main routine of <figref idref="DRAWINGS">FIG. 5</figref> for operating the plant;</p>
<p id="p-0043" num="0066"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram representing the data maintained for each phase of a process; and</p>
<p id="p-0044" num="0067"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram representing the data maintained for the various steps of a phase of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0045" num="0068"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing the systems used to control the operation of a physical plant <b>10</b>. The plant itself comprises a number of digital devices <b>12</b>, analog devices <b>14</b>, digital instruments <b>16</b> and analog instruments <b>18</b>.</p>
<p id="p-0046" num="0069">As used herein, &#x201c;digital devices&#x201d; refers to devices such as valves and motors known in the art as individual control modules (ICMs) having two output or activation states (on/off, or 1/0). These states correspond to the presence or not of an electrical signal activating the device, i.e. which are driven to a digital value corresponding to one of two electrical signals provided by a PLC <b>20</b> (one such signal can of course be zero). Such devices generally also provide feedback or input states of on/off or 1.0, indicating the actual state of the device. Simper digital devices such as solenoids may not be provided with feedback or input states and may simply have a digital output or activation state.</p>
<p id="p-0047" num="0070">As used herein, &#x201c;analog devices&#x201d; refers to devices which operate on a variable output, i.e. which are driven to a variable value corresponding to a variable electrical signal provided by PLC <b>20</b>. The value of the electrical signal to which an analog device is driven at any time is referred to as its &#x201c;setpoint&#x201d;. This can be manually fixed or it can be set to various different values at different points during the process according to the control logic which controls the process. Examples of analog devices are control valves, variable speed drives and pumps, and modulating motors.</p>
<p id="p-0048" num="0071">As used herein, &#x201c;digital instruments&#x201d; refers to components providing digital inputs from the mechanised system to the control system which are indicative of a condition or state within the plant. The feedback or input provided by such an instrument is 0 or 1, corresponding to a predefined electrical state, and examples of such digital inputs are temperature switches and flow switches. Digital inputs can also include any other Boolean plant state sensors. Digital inputs may be accorded a switching or hysteresis time to avoid multiple switching of result states at a threshold value due to fluctuating levels.</p>
<p id="p-0049" num="0072">As used herein &#x201c;analog instruments&#x201d; refers to plant instruments and sensors providing a variable electrical signal indicative of a condition or state within the plant. Examples of analog inputs are flow transmitters and pressure transmitters. Setpoints can be accorded to analog instruments so that they provide alarm signals when the measured value is above or below a threshold set manually or by the process controller.</p>
<p id="p-0050" num="0073">The interaction of PLC <b>20</b> and the physical plant is well known and operates briefly as follows. Each instrument and device is accorded an address. This address corresponds to a particular channel on a particular I/O (input/output) card on a particular rack or node on the PLC network. The addresses are unique for their function, i.e. there is only one digital output of address a.b or one analog input of address xyz, where a,b,x,y,z are bounded integers. The address of each item is contained in the object data.</p>
<p id="p-0051" num="0074">Thus when an instrument or device <b>12</b>,<b>14</b>,<b>16</b>,<b>18</b> is to be read or activated, the PLC <b>20</b> is instructed to examine or affect the electrical base state of the channel referenced by the address. The card holding the referenced channel may be located in the same &#x201c;rack&#x201d; subsystem as the Central Processing Unit card of the controller, or the card may be located in a &#x201c;remote&#x201d; or &#x201c;extension&#x201d; rack or node, in which case bus based communication (multi-drop serial, Ethernet, telemetric) between the CPU and the remote rack is required.</p>
<p id="p-0052" num="0075">Providing the addressing is unique as stated the operating system of the controller will address the correct channel, whether channel is located &#x201c;centrally&#x201d; or &#x201c;remotely&#x201d;.</p>
<p id="p-0053" num="0076">While the examples given above relate to the types of devices and instruments normally found in fluid handling plants, this is by way of example only and the skilled person will appreciate that the following description of control systems and methods is equally applicable to other types of processes requiring control within an electro-mechanical system of any type.</p>
<p id="p-0054" num="0077">In contrast to conventional systems which program the PLC <b>20</b> with a program detailing the activations of devices and the measurements to be taken from instruments, the timings of various steps and the logic to be applied, the programmable logic controller <b>20</b> of the present invention is programmed with a main routine calling an equipment routine and a process routine. (It will be appreciated of course that &#x201c;the controller&#x201d; referenced as <b>20</b> may be a networked control system and not necessarily a single PLC per se).</p>
<p id="p-0055" num="0078">The equipment routine comprises the following distinct modules of code:
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0000">
    <ul id="ul0011" list-style="none">
        <li id="ul0011-0001" num="0079">Digital device routine.</li>
        <li id="ul0011-0002" num="0080">Digital input routine.</li>
        <li id="ul0011-0003" num="0081">Digital output routine.</li>
        <li id="ul0011-0004" num="0082">Analog input routine.</li>
        <li id="ul0011-0005" num="0083">Analog output routine.</li>
        <li id="ul0011-0006" num="0084">Loop control</li>
        <li id="ul0011-0007" num="0085">Unit routine.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0056" num="0086">Each of these routines processes all of the configured objects for that routine in turn, and each will be explained briefly.</p>
<p id="p-0057" num="0087">Thus, the digital device routine will process each configured digital device in turn. It does this by loading the component object data stored for each digital device in a digital device data area. The device data for each device includes addresses for the device allowing the PLC to address the output and to obtain feedback or input from the device, data indicating how errors are to be determined, pointers to devices to be checked for interlock conditions, indications of the electrical signal to be applied, and various flags indicating special conditions or states of the device. As will be described further below, when a device is to be activated, a flag is set in the device object and this flag is picked up by the PLC during the digital device routine, causing the device to then be activated according to the flag (or, if the device is already in the state required by the flag, the digital device routine checks its feedback state and takes no action).</p>
<p id="p-0058" num="0088">The digital input routine operates in similar manner, loading the object data for each digital input or instrument from a digital input data area, performing the required operations and restoring the modified data to the digital input data area. The operations performed include reading the digital input state from the device identified in the digital input data, reading from the object the values which are the setpoints for the electrical signal to be treated as true/false (or on/off); comparing the measured electrical signal from the device with these factors and writing the result to the object associated with the digital input. The modified data (object) is then restored to the digital input data area.</p>
<p id="p-0059" num="0089">The digital output routine is similar to the digital device routine, but digital outputs are distinguished by not having an electrical feedback (unlike digital devices, as the terms are used here).</p>
<p id="p-0060" num="0090">The analog input and analog device routines operate in similar fashion to their digital counterparts, loading the data for each of the devices and instruments in turn, performing the operations required to set or activate the device or to read and interpret the input, and then restoring the modified data to the appropriate data area.</p>
<p id="p-0061" num="0091">The loop controller routine is a standard feature of control systems. A loop controller provides a method of controlling an analog device such that a process operating parameter is maintained, despite changes in associated conditions. As an example, an analog input such as a thermometer may be monitored and compared to a setpoint, and an analog device such as a steam control valve can be varied in order to maintain the input within a desired range. The controller implements a general proportional integral derivative (PID) controller which performs the control of a setpoint for an analog device with respect to the setpoint, analog input and PID parameters assigned. Each such configured loop controller is processed in turn by loading the object data for the loop controller from an appropriate data area, performing the required operations and restoring the modified data.</p>
<p id="p-0062" num="0092">The unit routine notes which units are specified for use by the phase and after checking that the component is not already in use, places each component of such units in a state such as &#x201c;reserved for automatic&#x201d;. The unit routine of any other phase operating at the same time would note this state and would be locked out from accessing the unit. Similarly, any attempt to place any device within the unit in manual mode or in maintenance mode from the SCADA would be prevented. The SCADA can place idle units in a state such as &#x201c;maintenance mode&#x201d; or &#x201c;manual override&#x201d;, and the unit routine would then be prevented from accessing this unit and would report an error.</p>
<p id="p-0063" num="0093">Each of the routines can be configured to process any type of device according to any criteria which can be specified in the component object for that device. The programmable logic controller <b>20</b> simply needs to be provided with a routine to process components of that generic type and it will then check for each such software object, look at the inputs provided by the plant component addressed in each loaded object, and write the values (i.e. generate the electrical signals) specified for those devices where appropriate. Actual control of which devices to activate, and what should be done with measured feedback results and plant conditions, are performed externally to the equipment routine by the process routine which writes to and reads from the data (objects) for the various devices.</p>
<p id="p-0064" num="0094">The control system which provides this process control is indicated generally at <b>22</b>. The system can be implemented as a general computer program specifically written for the task (soft PLC), or as a dedicated piece of electronics which is built to implement the functionality or as a combination or network of either. The computer may be a single computer or may be distributed as is well known in the art.</p>
<p id="p-0065" num="0095">The system <b>22</b> has a CPU <b>24</b> which processes the various steps. A HMI or human machine interface <b>26</b> (also known as a supervisory control and data acquisition or SCADA system) is used to interface with the control system allowing manual control of devices and phases.</p>
<p id="p-0066" num="0096">An optional reporting module <b>28</b> is provided to generate reports of aspects of the system and the process. A computer memory <b>30</b> which may be provided as volatile or non-volatile memory, as magnetic or optical storage, or as any other type of storage medium, includes a number of data blocks for storing data relating to devices <b>32</b>, conditions <b>34</b>, combined conditions <b>36</b>, tasks <b>38</b>, groups <b>40</b>, unconditional activations <b>42</b>, conditional activations <b>44</b>, faults <b>46</b>, steps <b>48</b>, parameters <b>50</b>, variables <b>52</b> and phases <b>54</b>. Within each of these individual data storage areas are data areas relating to individual devices, conditions, etc.</p>
<p id="p-0067" num="0097">Accordingly, taking the example of the devices data storage area <b>32</b>, a representative number of data areas <b>56</b> are indicated to illustrate that this data storage area contains the data on all of the devices (this term being used generically to denote the devices or outputs on the instruments or input) making up the plant. Each set of device data is a software object (component object).</p>
<p id="p-0068" num="0098">It is appropriate at this point to describe the data stored in the other data blocks, as an understanding of what each type of data represents is useful for an understanding of the operation of the system. This will be done hierarchically beginning with the overall phases of a process.</p>
<p id="p-0069" num="0099">Phases (data block <b>54</b>): the phases of a process are sequences of steps used to implement specific sub-processes within the plant. Each phase will usually be made up of a number of steps to be carried out in sequence according to the rules specified for that phase. The data for each phase specifies the units of equipment on which the phase is to operate (a unit being a collection of devices and instruments which are monitored and regulated functionally as a whole, such as a storage tank and its associated valves and sensors). A phase may operate on more than one equipment unit, such as a transfer phase which specifies a source tank, a destination tank and a transfer line connecting the two. As well as the indication of the steps and the units on which the phase is to operate, the phase will also specify the parameters and variables for that phase.</p>
<p id="p-0070" num="0100">Variables (data block <b>52</b>): variables are registers whose values can be modified, for example to control tasks (see below) or as variable setpoints for an analog output or a PID controller. A simple example of a variable would be a flow setpoint at which a pump is to operate. This variable might be set at a first given value where the pump was being used to pump water as part of a phase, and to another value where the pump was being used to pump a viscous syrup.</p>
<p id="p-0071" num="0101">Parameters (data block <b>50</b>): parameters are registers holding a setpoint value to be used as part of a process step. Examples of parameters would include a pressure alarm setpoint for a particular tank during a certain sequence of steps. Unlike variables, parameters are not modified during the process.</p>
<p id="p-0072" num="0102">Steps (data block <b>48</b>): a step (process step) is a collection of device activations (activations may be conditional or unconditional), tasks, faults or errors, conditions and combined conditions, all of which will be described below. An example of a step would be, as part of a transfer sequence between two tanks, the various conditions to be checked, errors to be avoided, and devices to be activated when flushing the transfer line with water as preparation for the actual product transfer.</p>
<p id="p-0073" num="0103">Faults (data block <b>46</b>): faults are those error states which are to be checked for and which will cause the operation of the steps or of the phase to be altered or aborted.</p>
<p id="p-0074" num="0104">Conditions (data block <b>34</b>): each condition is a comparison of values, examples of such values being analog inputs or analog device setpoints, parameters or variables. Thus, for example, a condition might specify that a tank low level sensor is to be checked. If the result of this check is that the liquid has dropped below the tank low level sensor, then the result of this condition would be recorded in a condition object. The result of this condition object is then available to other aspects of this system. In this way, the result might be used to control a device, such as to open a tank fill valve and restore the level of liquid in the tank. The results of conditions can also be combined with other conditions as will now be described.</p>
<p id="p-0075" num="0105">Combined conditions (data block <b>36</b>): combined conditions specify logic to be applied when various Boolean combinations of conditions are met. Taking the previous example of a detection of low liquid levels in a particular tank, this might be combined with a check for a condition of a low liquid level in a sister tank. If both tanks show a low level, then the process might terminate, whereas if only one tank shows a low level, then the process might continue until both tanks are shown as empty. Accordingly, the data for a combined condition will specify the conditions to be checked and the Boolean operations to be performed, and the result to be written when the Boolean logic provides particular outputs.</p>
<p id="p-0076" num="0106">Tasks (data block <b>28</b>): a task allows mathematical operations to be performed by the system. The result of the task may be used for writing values to analog or PID setpoints or for other tasks. Each task is made up of operands and a mathematical operator, and temporary or intermediate registers or variables can be used to provide the function of combining tasks to produce a formula. Examples of the operators include the various arithmetical operators, logarithmic operators, trigonometric operators, square roots, and so on.</p>
<p id="p-0077" num="0107">As an example of a mathematical task, assume an error check is to be performed on a liquid flow rate measured by an analog flow transmitter (to avoid shearing of the liquid at a molecular level). Assume the flow rate cannot exceed 120% of the &#x201c;product flow setpoint&#x201d; parameter. We could implement this error check with the following:
<ul id="ul0012" list-style="none">
    <li id="ul0012-0001" num="0000">
    <ul id="ul0013" list-style="none">
        <li id="ul0013-0001" num="0108">Parameters: &#x201c;product flow setpoint&#x201d;, &#x201c;max flow percentage&#x201d; (value=120), &#x201c;constant 100&#x201d; (this as one would expect is a parameter defining a constant value=100)</li>
        <li id="ul0013-0002" num="0109">Variables: &#x201c;Max flow actual stage 1&#x201d;, &#x201c;max flow actual&#x201d;</li>
        <li id="ul0013-0003" num="0110">Task 1: Set Max Flow Actual stage 1==&#x201c;product flow setpoint&#x201d;*&#x201c;max flow percentage&#x201d;</li>
        <li id="ul0013-0004" num="0111">Task 2: Set &#x201c;Max Flow Actual&#x201d;==&#x201c;Max Flow actual stage 1&#x201d;\&#x201c;Constant 100&#x201d;</li>
        <li id="ul0013-0005" num="0112">Condition: Compare output value from flow transmitter to &#x201c;max flow actual&#x201d;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0078" num="0113">Unconditional activations (data block <b>42</b>): the unconditional activations specify quite simply that analog or digital devices are to be activated at particular points during a step. The list of unconditional activations for a particular step will contain pointers to the devices to be unconditionally activated. The automatic activation flags for the required component objects are set accordingly. A subset of unconditional activations (not shown separately in <figref idref="DRAWINGS">FIG. 1</figref>) are pulsed activations which include pointers to devices to be activated in a pulsed manner and the parameters of operation.</p>
<p id="p-0079" num="0114">Conditional activation (data block <b>44</b>): the conditional activations allow the application of logic as specified in the conditions and combined conditions, to be used to determine whether or not to activate devices. As an example, a conditional activation for a gas vent valve on a tank might contain a reference to activate that valve and to check the result of a condition. The condition object would be examined to see if the condition had been met (e.g. tank pressure value from a pressure sensor greater than a high pressure setpoint). If the condition is met, then the device is activated, venting gas from the tank.</p>
<p id="p-0080" num="0115">Groups (data block <b>40</b>): the devices and inputs stored as component objects in data block <b>32</b> comprise every single device and instrument in the plant. In order to allow phases and steps to be addressed to the correct combinations of devices, the components are grouped together in groups. This will be explained further below with reference to the example of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0081" num="0116">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, an example is given of a small section of an electro-mechanical system in the form of a liquid handling plant comprising a source tank ST, a destination tank DT, and a transfer line TL. The complete list of items of equipment in the system is provided in the block diagram of <figref idref="DRAWINGS">FIG. 3</figref>. The abbreviations used in <figref idref="DRAWINGS">FIGS. 2 and 3</figref> are as follows:</p>
<p id="p-0082" num="0117">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>List of Equipment Units 56</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="left"/>
<colspec colname="3" colwidth="91pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>ST</entry>
<entry>Source Tank</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>DT</entry>
<entry>Destination Tank</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>TL</entry>
<entry>Transfer Line</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0083" num="0118">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>List Of Digital Inputs 58</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="56pt" align="left"/>
<colspec colname="3" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>ST_HL</entry>
<entry>ST High Level Sensor</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>ST_LL</entry>
<entry>ST Low Level Sensor</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>DT_HL</entry>
<entry>DT High Level Sensor</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>DT_LL</entry>
<entry>DT Low Level Sensor</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0084" num="0119">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>List of Digital Devices 60</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="left"/>
<colspec colname="3" colwidth="84pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>ST_GV</entry>
<entry>ST Gas Valve</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>ST_PV</entry>
<entry>ST Product Valve</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>DT_GV</entry>
<entry>DT Gas Valve</entry>
</row>
<row>
<entry/>
<entry>4</entry>
<entry>DT_PV</entry>
<entry>DT Product Valve</entry>
</row>
<row>
<entry/>
<entry>5</entry>
<entry>TP</entry>
<entry>TL Transfer Line</entry>
</row>
<row>
<entry/>
<entry>6</entry>
<entry>FV</entry>
<entry>TL Flush Valve</entry>
</row>
<row>
<entry/>
<entry>7</entry>
<entry>DV</entry>
<entry>TL Drain Valve</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0085" num="0120">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>List of Analog Inputs 62</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="49pt" align="left"/>
<colspec colname="3" colwidth="105pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>ST_PT</entry>
<entry>ST Pressure Transmitter</entry>
</row>
<row>
<entry/>
<entry>2</entry>
<entry>DT_PT</entry>
<entry>DT Pressure Transmitter</entry>
</row>
<row>
<entry/>
<entry>3</entry>
<entry>FT</entry>
<entry>TL Flow Transmitter</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0086" num="0121">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>List of Analog Devices 64</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="56pt" align="left"/>
<colspec colname="3" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>1</entry>
<entry>TP_VSD</entry>
<entry>TP Variable Speed Drive</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0087" num="0122">The system shown in <figref idref="DRAWINGS">FIG. 2</figref> would normally form part of a larger plant. However, to illustrate its operation, a simple description of a phase will be given which involves only the system of <figref idref="DRAWINGS">FIG. 2</figref> in isolation. The described phase is a transfer phase, to effect the transfer of product from the source tank ST to the destination tank DT via the transfer line TL.</p>
<p id="p-0088" num="0123">The transfer is to occur in five steps. The transfer line TL is to be flushed with water (from flush valve FV to drain valve DV) before and after the product transfer. No product is to be sent to drain. The pressure in the source tank is to be monitored and gas is to be supplied to the tank to maintain a minimum required pressure. The pressure in the destination tank is to be monitored and gas recovered to maintain a maximum required pressure. The program must check that pressures do not exceed alarm points. The program must check that the low level in the source tank is covered and the high level in the destination tank is uncovered at all times.</p>
<p id="p-0089" num="0124">In order to properly target the various steps at the appropriate pieces of equipment and individual devices and instruments, various equipment groups are defined. There are two generic types of equipment group for this plant, as indicated in <figref idref="DRAWINGS">FIG. 4</figref>. These generic types are vessels <b>66</b> and lines <b>68</b>. To configure the system, therefore, the source tank ST and destination tank DT are placed into the vessels area, and the transfer line TL is placed into the lines area.</p>
<p id="p-0090" num="0125">Then the various valve sensors and transmitters are associated with the appropriate units. Thus, for example, it can be seen that the source tank gas valve ST_GV, source tank product valve ST_PV, source tank high level sensor ST_HL, source tank low level sensor ST_LL and source tank pressure transmitter ST_PT are all associated with the source tank unit. For each of these, data including the input and output addresses, and the time setpoints for activation and error checking are stored in the device data.</p>
<p id="p-0091" num="0126">The primary use of units is for safety&#x2014;to ensure that only one phase can utilise a piece of equipment at any time, to ensure that all devices in the unit can not be activated manually if a phase is using the unit, to ensure that a device placed in &#x201c;maintenance&#x201d; mode causes related devices to be &#x201c;affected by maintenance&#x201d; and thus disabled from activation. For example, when a fitter is replacing a valve body the entire unit can be placed in maintenance mode, and thus flagged as unavailable for use by any phase. This prevents a phase opening an adjacent valve while the fitter is at work. A stand-alone machine might be configured as a single unit, to mutually exclude automated operation, manual operation, and maintenance.</p>
<p id="p-0092" num="0127">The corresponding items DT_GV, DT_PV, DT_HL, DT_LL, DT_PT are inserted for the destination tank as shown, and in the transfer line group, the transfer pump TP, flow transmitter FT, drain valve DV, flush valve FV, variable speed drive TP_VSD, product valve for both the source tank ST_PV and destination tank DT_PV are inserted.</p>
<p id="p-0093" num="0128">It is to be noted that the product valves for the source tank (ST_PV) and destination tank (DT_PV) are associated both with the tank and with the transfer line between which they provide a valved connection. It is in this way that the functional connection between the source tank, the transfer line and the destination tank is maintained.</p>
<p id="p-0094" num="0129">The overall operation of the main routine (which calls the equipment routine and phase routine) is shown in <figref idref="DRAWINGS">FIG. 5</figref>, which also details the operation of the equipment routine itself (the phase routine mentioned in <figref idref="DRAWINGS">FIG. 5</figref> is itself detailed in <figref idref="DRAWINGS">FIGS. 6-10</figref>).</p>
<p id="p-0095" num="0130">As shown in <figref idref="DRAWINGS">FIG. 5</figref>, the main routine <b>70</b> loaded into the PLC <b>20</b> calls two sub-routines, namely the equipment routine <b>72</b> and the phase routine <b>74</b>. In use the PLC will call the equipment routine, processing that fully (i.e. each device and input specified, and then the phase routine will be processed fully as described below, following which the method iterates back to the equipment routine, and so on.</p>
<p id="p-0096" num="0131">The equipment routine has been described previously and comprises a repeating sequence of the operations: digital device routine, digital input routine, digital output routine, analog input routine, analog output routine, loop control (which may be implemented by referencing the inherent loop control functionality built into the PLC <b>20</b>), and a unit routine (the latter is not explicitly shown in <figref idref="DRAWINGS">FIG. 5</figref>).</p>
<p id="p-0097" num="0132"><figref idref="DRAWINGS">FIG. 5</figref> shows that, taking the example of the digital input routine, each of the digital inputs <b>76</b> (nominally numbered from 1 to N) is updated in turn in the manner described above. The same then happens for each of the analog inputs (the number N simply denotes the last input sampled and is usually not the same number for the digital inputs and the analog inputs), and so on. On the next iteration, each input and device is again updated so that the state of the physical inputs (instruments) is correctly recorded in the corresponding software objects and the desired state of the physical devices is correctly implemented as set out in the respective software objects.</p>
<p id="p-0098" num="0133">After each iteration of the equipment routine, each active phase is processed in the phase routine <b>74</b> as described below. This means that any changed inputs which affect one of the phases are picked up. If, during an iteration of the phase routine an output is changed (such as an instruction to activate a device) then this is picked up when the next iteration of the equipment routine occurs, and so the main routine alternates between the two. If an output is unchanged, then the PLC continues to apply the signal specified for that output.</p>
<p id="p-0099" num="0134"><figref idref="DRAWINGS">FIG. 6</figref> shows the phase routine <b>74</b> called by the main routine <b>70</b>. It indicates a number of phases <b>78</b> which are active and are numbered from phase <b>1</b> to phase N (i.e. all the phases which have been started from the HMI <b>26</b>) including the particular phase being processed, phase n, at any given time when a snapshot of the phase routine is taken. (Thus, each phase from phase <b>1</b> to phase N will operate in the same manner as will now be described).</p>
<p id="p-0100" num="0135">For each phase such as phase n, a list of steps is specified in the data maintained for that phase by denoting a starting step and a count of steps (e.g. start with step number <b>109</b> and count 5 steps). A pointer is maintained to the current active step. When any given step is completed the pointer for that phase moves on to the next step until the last of the specified steps is complete. The phase can also be moved to a step other than that in the normal recipe list. This is achieved by allowing for abnormal step transitions, e.g. when a condition is met, the next step is specified as being different from normal. This is important in the matter of sudden process faults (such as a pasteurizer temperature falling causing pasteurizer to be put into recirculation).</p>
<p id="p-0101" num="0136">The phase routine, on each iteration, processes each active phase <b>78</b> by following the pointer to the current active step <b>80</b> for that phase and processing in turn all of the objects specified for that step. The objects to be processed in the illustrated embodiment of <figref idref="DRAWINGS">FIG. 6</figref> are conditions, combined conditions, errors, tasks, unconditional activations (including pulsed activations) and conditional activations).</p>
<p id="p-0102" num="0137">Accordingly, with reference to <figref idref="DRAWINGS">FIG. 6</figref>, suppose there are N phases <b>78</b> and each phase has a currently active step <b>80</b> denoted by an arbitrary letter: phase <b>1</b> has step v active, phase <b>2</b> has step w active, . . . phase n has step x active, . . . phase N-1 has step y active, step N has step z active. (Note that the labelling of the steps as v,w,x,y,z is arbitrary and does not indicate that the steps are consecutive in any sense. Indeed the steps will, as a rule be entirely unrelated, as phase <b>1</b> might refer to a filling operation on one tank while phase <b>2</b> might refer to a program for flushing a line in an entirely different part of the plant.</p>
<p id="p-0103" num="0138">What <figref idref="DRAWINGS">FIG. 6</figref> illustrates is that on each iteration, the phase routine looks at each active phase, and follows a pointer to a single active step for that phase. The 1:1 label means that the PLC, for each phase, follows the pointer, processes the single identified step, then reverts to the phase level where it moves onto the next phase and its active step.</p>
<p id="p-0104" num="0139">Over time the particular active step for any phase will change, possibly after a single iteration (such as a step of actuating a valve when a condition occurs), but a step might equally remain active through many iterations (until a tank is filled, for example).</p>
<p id="p-0105" num="0140">One of the steps, step x which is active for phase n, is indicated in more detail. When the pointer to this step is followed, the PLC will retrieve the step object <b>80</b> and this will reference the various conditions, combined conditions, etc. All of these are individual objects which are pointed to in lists referenced within the step object. So the PLC loads the step object, then each condition object for that step is loaded in turn and processed (as indicated by the &#x201c;1:Many&#x201d; labels). Then the combined conditions are processed in turn. This is followed by checks on all the errors, then all the tasks are processed, and so on. When the last of the conditional activations has been processed, the step is complete, and the PLC returns to the phase level to process the next phase and its associated active step.</p>
<p id="p-0106" num="0141">Returning now to our specific example of the transfer operation between the source and destination tanks of <figref idref="DRAWINGS">FIG. 2</figref>, this is accomplished using a phase entitled &#x201c;transfer&#x201d;. Referring additionally to <figref idref="DRAWINGS">FIG. 7</figref>, a schematic illustration of the contents of the phases data block is shown. There are three phases indicated for illustrative purposes, and the third of these (Phase<b>03</b>: Transfer) is the transfer phase with which this example is concerned. This transfer phase has the units ST, TL and DT associated with it, as described above, and has various parameters <b>86</b> referenced, has variables <b>88</b> referenced, and has a number of steps <b>90</b> referenced. (These are all referenced within separate lists by pointers to a start point within the respective list and by an indication of the number of items to count forward from that start point. For the transfer being described, the parameters might include the flow setpoint for the product, the flow setpoint for the flush step, the pressure setpoint for the source and destination tanks, the low flow alarm setpoint, the low pressure alarm setpoint for the source tank and the high pressure alarm setpoint for the destination tank. The variables associated with the transfer phase might be a single variable which is the flow setpoint for the pump. This can be set with the value for the product (obtained from the parameters) or the flow setpoint for the flush (also obtained from the parameters).</p>
<p id="p-0107" num="0142">It then remains to carry out the individual steps defined for that phase. The list of steps shown in <figref idref="DRAWINGS">FIG. 7</figref> identifies the first step of the phase as step <b>109</b> and the number of steps to be counted (i.e. 5 steps).</p>
<p id="p-0108" num="0143">If additional reference is made to <figref idref="DRAWINGS">FIG. 8</figref>, the steps data block <b>92</b> is shown. This includes the step list <b>94</b>, a portion of which shown in bold, to illustrate the particular steps associated with the transfer phase, beginning with &#x201c;step <b>109</b>: flush&#x201d;. Counting forward five steps, it can be seen that the last step in the phase is &#x201c;<b>113</b>: flush&#x201d;. Accordingly, the same step (&#x201c;flush&#x201d;) is carried out twice in this phase. Between the two flush steps, there is a step of &#x201c;push water to drain with product&#x201d;, a step of &#x201c;transfer product&#x201d;, and of &#x201c;push product to DT [destination tank] with water&#x201d;.</p>
<p id="p-0109" num="0144">Within the data <b>96</b> stored for each step (<figref idref="DRAWINGS">FIG. 8</figref>) there is an identification of the conditions are to be evaluated during that step, and combined conditions which are to be evaluated, the tasks which need to be carried out during that step, the errors which are to be monitored for, the devices which are to be subjected to unconditional activations, and the devices which are to be subjected to conditional activations.</p>
<p id="p-0110" num="0145">During the running of a phase each step is generally processed, one at a time, according to the listing order in the recipe, as described above with reference to <figref idref="DRAWINGS">FIG. 6</figref>, until all steps are complete for the phase or until interrupted by a command from the SCADA-HMI (human machine interface). The actual processing of the active step is repeated on each iteration of the phases routine until the conditions for completing that step have been met, at which point the active step pointer for that phase is updated. When all steps are processed in that phase, the phase terminates.</p>
<p id="p-0111" num="0146">In reference to <figref idref="DRAWINGS">FIG. 6</figref>, it was mentioned that the conditions, combined conditions, errors, tasks, unconditional activations and conditional activations are processed in turn for each active step. Each of these individual components of the step will now be described in more detail, with reference to the process of transferring liquid from ST to DT via TL in the simple system of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0112" num="0147">First, all of the conditions referenced in the step are processed. The conditions are stored in a numbered list, and the list in the case of the present example is as follows:</p>
<p id="p-0113" num="0148">1. Compare DT_PT to Pressure Setpoint for time</p>
<p id="p-0114" num="0149">2. Compare ST_PT to Pressure Setpoint for time</p>
<p id="p-0115" num="0150">3. Compare DT_PT to High Alarm Pressure Setpt for time</p>
<p id="p-0116" num="0151">4. Compare ST_PT to Low Alarm Pressure Setpt for time</p>
<p id="p-0117" num="0152">5. Compare FT to Low Flow Alarm Setpoint</p>
<p id="p-0118" num="0153">Thus, during the first step of the phase, the flush step, <figref idref="DRAWINGS">FIG. 8</figref> shows that condition 5 is checked, i.e. the flow transmitter is compared to the low flow alarm setpoint. The reason for checking this condition is that the result needs to be known in order to determine subsequently whether or not one of the error conditions has occurred.</p>
<p id="p-0119" num="0154">The tasks to be carried out are stored in a numbered list, which in the present example is as follows:</p>
<p id="p-0120" num="0155">1. Transfer Water Flow setpoint to TP_VSD</p>
<p id="p-0121" num="0156">2. Transfer Product Flow setpoint to TP_VSD</p>
<p id="p-0122" num="0157">Thus, for the flush step, the simple mathematical task is carried out of setting the variable TP_VSD to be equal to the parameter called &#x201c;water flow setpoint&#x201d;. When that task has been carried out, any operation of the transfer pump will call on the variable value and thus the transfer pump will operate at the speed referenced by the value in the nominated variable register.</p>
<p id="p-0123" num="0158">A check is then made that the error conditions are not met, and the error list specifies that an error has occurred if condition 5 is met.</p>
<p id="p-0124" num="0159">Next, the unconditional activations are processed in turn. The devices which are to be unconditionally activated in the flush step, as specified in <figref idref="DRAWINGS">FIG. 8</figref>, are the drain valve, the flush valve, and the transfer pump. The various activation flags are thus set in the component objects for each of these devices to be activated, and this will have the result that the PLC will be informed that each of these devices is to be activated, during the next iteration of the equipment routine when the component object of each of the three devices is examined. The three devices will therefore be activated and water will be pumped through the transfer line between the flush and drain valves at the speed set in the variable speed drive for the transfer pump.</p>
<p id="p-0125" num="0160">Next any conditional activations are carried out, and in the case of the flush step, there are no conditional activations defined.</p>
<p id="p-0126" num="0161">Steps may be configured to end on duration or on a Boolean event such as a condition result or a digital input result or an analog input alarm point or setpoint. In the case of the flush step the step object will include a step duration register in the step object, so that the line is flushed for e.g. 10 seconds. Once that duration is complete, the pointer will be moved to step <b>110</b> in step list <b>94</b>, namely &#x201c;Push Water to Drain with Product&#x201d;.</p>
<p id="p-0127" num="0162">Accordingly, on the following iteration of the phase routine, the &#x201c;transfer&#x201d; phase will be point to the same list of steps, but the pointer in this list will now point to step <b>110</b> and it is that step that will be processed.</p>
<p id="p-0128" num="0163">This next step, pushing water to drain with product, involves checking for conditions 2, 4 and 5 above, and carrying out task no. 2 (i.e. setting the variable value for the variable speed drive to the value specified in the product setpoint parameter). The errors for this step are conditions 4 and 5: i.e. the PLC returns an error message if the low pressure alarm setpoint has been detected in the source tank, or if the flow rate is below the low alarm setpoint. The former condition should be avoided because of the conditional activation in this step (described below) and the latter condition should be avoided provided the transfer pump is operating correctly at the required rate and the line is full of fluid. However, as valves can stick and pumps can break, it is necessary to check that the flow rate is within acceptable limits and that is the reason for that error.</p>
<p id="p-0129" num="0164">The unconditional activations required to carry out this step are that the source tank product valve should be opened, the drain valve should be opened and the transfer pump is to be operated (according to the speed set in the TP_VSD variable). In this case, the drain valve is already opened and the flag is thus correctly set already, so no change is made to the component object for the drain valve.</p>
<p id="p-0130" num="0165">In the final part of this step, a conditional activation must be carried out. This conditional activation specifies that the source tank gas valve is to be opened if condition 2 is met. It will be recalled that it was specified in the initial description of this process that the pressure in the source tank must be monitored and gas supplied to the tank to maintain a minimum required pressure. Accordingly, since product is now being transferred from the source tank, the purpose of this conditional activation is to check whether the condition has been met (pressure less than specified minimum) and if so, to activate the gas valve and admit more gas. The setpoint at which this will occur is a pressure above the low pressure alarm setpoint (condition 4), and so it can be seen that in a correctly operating system a drop in pressure within the source tank should be remedied by the conditional activation before the alarm point is reached.</p>
<p id="p-0131" num="0166">Because condition 2 is checked during each iteration of the equipment routine, i.e. the pressure in the source tank is compared with the parameter for the minimum pressure setpoint, the condition object for condition 2 is kept updated to reflect a value of false if the pressure is greater than the allowed minimum, and a value of true when it has dropped below this allowed minimum. Thus when the step is being processed and the conditional activation object is loaded, a pointer to condition 2 returns a value of either true or false, and this result determines if the activation flag should be set in the component (digital device) object for the gas valve on the source tank.</p>
<p id="p-0132" num="0167">The process continues in this way, following through each of the steps for transfer product, push product to destination tank with water, and the final flush step, and when this last step is carried out (i.e. the fifth step, counting from step <b>109</b>, according to the list maintained for phase <b>03</b>: transfer), then the phase is complete. The overall process routine of <figref idref="DRAWINGS">FIG. 5</figref> will only operate on active phases and will report back to the SCADA when any phase is complete, so that the phase can be marked inactive. It is possible to implement the system so that individual phases are linked functionally, with one phase calling another to implement a fully automated plant, but in the described embodiment the phases are started by human command from the SCADA.</p>
<p id="p-0133" num="0168">The invention is not limited to the embodiments set out above which may be modified or varied without departing from the scope of the claimed invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of computer controlling a process in an electro-mechanical system having a plurality of controllable components, the method comprising:
<claim-text>(a) storing a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</claim-text>
<claim-text>(b) storing a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</claim-text>
<claim-text>(c) storing a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</claim-text>
<claim-text>(d) sequentially processing a plurality of said process steps, each process step being processed by:
<claim-text>(i) following the or each reference to an operation object,</claim-text>
<claim-text>(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</claim-text>
<claim-text>(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</claim-text>
</claim-text>
<claim-text>whereby a system controller is configured to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the process steps are grouped in phases each comprising one or more of said process steps, and the phases each include an identification of a set of said controllable components on which the operations defined by the process steps are to be carried out.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the phases further comprise an indication of parameters to be employed during the processing of the process steps of the phase.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref> or <claim-ref idref="CLM-00003">3</claim-ref>, wherein the phases further comprise an indication of variables to be employed during the processing of the process steps of the phase.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising the step of storing an indication of units of component objects corresponding to functionally linked components forming subsystems within the mechanised system, whereby the identification of a set of controllable components in a phase comprises an identification of one or more of the stored units.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the step of storing a plurality of abstract steps each comprising a reference to one or more abstract operation objects, the abstract operation objects defining an operation to be carried out on data without directly employing the component objects.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the phases further comprise an indication of parameters or variables to be employed during the processing of the process steps of the phase, and wherein the phases of the method reference said parameters or variables, and wherein the abstract operation objects define one or more operations to be carried out on said parameters or said variables.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or more of the operation types is a device activation.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or more of the operation types is a determination of a feedback state of a component and the recordal of the result of the determination.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the determination includes comparing the feedback state to a predetermined condition and recordal includes an indication of whether the predetermined condition is met.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one or more of the operation types is a conditional device activation whereby a device is activated in dependence on the feedback state recorded as a result of a determination.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of computer controlling a process as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising periodically reviewing the component objects in sequence, activating the components when required according to the activation states of the component objects and updating the feedback states of the component objects in dependence on signals received from the components.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A non-transitory computer program product comprising instructions which when executed in a computer for controlling a process in an electro-mechanical system having a plurality of controllable components, are effective to cause said computer to:
<claim-text>(a) store a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</claim-text>
<claim-text>(b) store a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</claim-text>
<claim-text>(c) store a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</claim-text>
<claim-text>(d) sequentially process a plurality of said process steps, each process step being processed by:
<claim-text>(i) following the or each reference to an operation object,</claim-text>
<claim-text>(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</claim-text>
<claim-text>(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</claim-text>
</claim-text>
<claim-text>whereby a plant controller is configured to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A computer programmed to control a process in an electro-mechanical system having a plurality of controllable components, the computer comprising:
<claim-text>a component object storage area for storing a plurality of component objects each corresponding to one of said components and comprising data which is indicative of an activation state and/or a feedback state of the component to which it relates;</claim-text>
<claim-text>an operation object storage area for storing a plurality of operation objects each comprising an indication of an operation type to be carried out in relation to a component and a reference to a component object identifying said component;</claim-text>
<claim-text>a process step storage area for storing a plurality of process steps each of which comprises a reference to one or more of said operation objects; and</claim-text>
<claim-text>a processor programmed to sequentially process a plurality of said process steps, each process step being processed by:
<claim-text>(i) following the or each reference to an operation object,</claim-text>
<claim-text>(ii) determining from the operation object the operation type and the component object referenced by said operation object; and</claim-text>
<claim-text>(iii) performing a data operation on said component object effective to cause said operation to be carried out in relation to said identified component;</claim-text>
</claim-text>
<claim-text>whereby a plant controller is configured to address said components in order to activate components in dependence on the activation state of corresponding component objects and to update the feedback states of component objects in dependence on signals received from said components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>, when implemented as a dedicated plant controller.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>, when implemented as a general purpose computer communicating with a plant controller. </claim-text>
</claim>
</claims>
</us-patent-grant>

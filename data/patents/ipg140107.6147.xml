<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627271-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627271</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12617696</doc-number>
<date>20091112</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>761</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20120101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>Q</subclass>
<main-group>20</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717102</main-classification>
<further-classification>717101</further-classification>
<further-classification>717103</further-classification>
<further-classification>717104</further-classification>
<further-classification>717105</further-classification>
<further-classification>717106</further-classification>
<further-classification>717107</further-classification>
<further-classification>717108</further-classification>
<further-classification>717109</further-classification>
<further-classification>705 50</further-classification>
<further-classification>705 51</further-classification>
<further-classification>705 52</further-classification>
<further-classification>705 53</further-classification>
<further-classification>705 54</further-classification>
<further-classification>705 55</further-classification>
<further-classification>705 56</further-classification>
<further-classification>705 57</further-classification>
<further-classification>705 58</further-classification>
<further-classification>705 59</further-classification>
<further-classification>705 60</further-classification>
<further-classification>705 61</further-classification>
<further-classification>705 62</further-classification>
<further-classification>705 63</further-classification>
<further-classification>705 64</further-classification>
<further-classification>705 65</further-classification>
<further-classification>705 66</further-classification>
<further-classification>705 67</further-classification>
<further-classification>705 68</further-classification>
<further-classification>705 69</further-classification>
<further-classification>705 70</further-classification>
<further-classification>705 71</further-classification>
<further-classification>705 72</further-classification>
<further-classification>705 73</further-classification>
<further-classification>705 74</further-classification>
<further-classification>705 75</further-classification>
<further-classification>705 76</further-classification>
<further-classification>705 77</further-classification>
<further-classification>705 78</further-classification>
<further-classification>705 79</further-classification>
<further-classification>705 80</further-classification>
</classification-national>
<invention-title id="d2e53">Reusable business sub-processes and run-time assembly</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7506072</doc-number>
<kind>B2</kind>
<name>Waldorf et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709249</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7703071</doc-number>
<kind>B2</kind>
<name>Kuester et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>8209672</doc-number>
<kind>B2</kind>
<name>Ivanov</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717136</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8296725</doc-number>
<kind>B2</kind>
<name>Allam et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8495559</doc-number>
<kind>B2</kind>
<name>Akkiraju et al.</name>
<date>20130700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0144860</doc-number>
<kind>A1</kind>
<name>Casati et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0024688</doc-number>
<kind>A1</kind>
<name>Bi et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 37</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0139176</doc-number>
<kind>A1</kind>
<name>Farrell et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2006/0074915</doc-number>
<kind>A1</kind>
<name>Bhandarkar et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2006/0143229</doc-number>
<kind>A1</kind>
<name>Bou-Ghannam et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>7071041</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2007/0016573</doc-number>
<kind>A1</kind>
<name>Nanavati et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2007/0094638</doc-number>
<kind>A1</kind>
<name>DeAngelis et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0282864</doc-number>
<kind>A1</kind>
<name>Parees et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2009/0106278</doc-number>
<kind>A1</kind>
<name>Ramacher et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2009/0150860</doc-number>
<kind>A1</kind>
<name>Gschwind et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2010/0211926</doc-number>
<kind>A1</kind>
<name>Dan et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>WS-BPEL Extension for Sub-processes&#x2014;BPEL-SPE; A Joint White Paper by IBM and SAP; Sep. 2005; 17 pages.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;On Demand Web Services-Based Business Process Composition&#x201d;&#x2014;Liang-Jie Zhang, Bing Li, Tian Chao &#x26; Henry Chang&#x2014;Systems, Man and Cybernetics, 2003 IEEE International Conference date: Oct. 5-8, 2003 vol. 4, pp. 4057-4064.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>&#x201c;Executing Abstract Web Process Flows&#x201d;&#x2014;Akkiraju et al.&#x2014;Proc. 14th International Conference on Automated Planning and Scheduling, 2004&#x2014;CITESEER (pp. 1-7).</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>&#x201c;On Accommodating inter service Dependencies in web process flow composition&#x201d;&#x2014;Verma et al.&#x2014;2004 AAAI Spring Symposium Series, 2004&#x2014;aaai.org (p. 1-7).</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>Liangzhao Zeng, Hui Lei, Michael Dikun, Henry Chang, Kumar Bhaskaran, &#x201c;Model-Driven Business Performance Management,&#x201d; icebe, pp. 295-304, IEEE International Conference on e-Business Engineering (ICEBE'05), Oct. 18-21, 2005, Beijing, China.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Oracle Application Integration Architecture for Communications 2.0: Release Note; Nov. 2007; 37 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61114273</doc-number>
<date>20081113</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100122232</doc-number>
<kind>A1</kind>
<date>20100513</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Reed</last-name>
<first-name>Lynn Leah</first-name>
<address>
<city>Newburyport</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Butt</last-name>
<first-name>Muhammad Zeeshan</first-name>
<address>
<city>Foster City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nene</last-name>
<first-name>Shrikant</first-name>
<address>
<city>Fairfield</city>
<state>CT</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Singh</last-name>
<first-name>Alok</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Addala</last-name>
<first-name>Krishna Raju Venkata</first-name>
<address>
<city>Westford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Reed</last-name>
<first-name>Lynn Leah</first-name>
<address>
<city>Newburyport</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Butt</last-name>
<first-name>Muhammad Zeeshan</first-name>
<address>
<city>Foster City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Nene</last-name>
<first-name>Shrikant</first-name>
<address>
<city>Fairfield</city>
<state>CT</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Singh</last-name>
<first-name>Alok</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Addala</last-name>
<first-name>Krishna Raju Venkata</first-name>
<address>
<city>Westford</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Trellis IP Law Group, PC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tsai</last-name>
<first-name>Henry</first-name>
<department>2184</department>
</primary-examiner>
<assistant-examiner>
<last-name>Shyu</last-name>
<first-name>Jing-Yih</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Particular embodiments provide a method for orchestrating an order fulfillment business process that includes a sub-process. In one embodiment, abstraction of business processes from an underlying information technology (IT) infrastructure is provided. An orchestration process can be designed using sub-processes such that the sub-process is assembled at run-time into an executable process. The sub-process may be defined in an interface as a single step. A plurality of services as then assembled as steps in the executable process at run-time.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="199.39mm" wi="158.75mm" file="US08627271-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="212.85mm" wi="154.18mm" orientation="landscape" file="US08627271-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="197.02mm" wi="158.75mm" file="US08627271-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="268.39mm" wi="204.55mm" file="US08627271-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="201.51mm" wi="158.75mm" file="US08627271-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="257.30mm" wi="174.33mm" file="US08627271-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="224.37mm" wi="142.32mm" file="US08627271-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCES TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This invention claims priority from U.S. Provisional Patent application Ser. No. 61/114,273 filed on Nov. 13, 2008 which is hereby incorporated by reference as if set forth in full in this application.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Particular embodiments generally relate to the orchestration of business processes.</p>
<p id="p-0004" num="0003">Business processes are typically modeled by business architects/analysts. A business process may include a series of services that are invoked during the business process. Services may be considered the smallest unit that can be modeled in the business process.</p>
<p id="p-0005" num="0004">Some business processes may include a large number of services or may re-use certain sets of services. Instead of individually specifying each service that is used in a model, sub-processes are useful to specify a series of services. For example, a user may choose to include a sub-process in a larger business process. However, in an orchestration language, such as business process execution language (BPEL), it is not possible to use a sub-process unless the sub-process is deployed. That is, an information technology (IT) designer would have to have deployed the sub-process as a stand-alone executable process for it to be used by another business process. This restricts the use of sub-processes and decreases flexibility.</p>
<p id="p-0006" num="0005">Also, currently, it is only possible to create BPEL processes in a BPEL editor and invoke a deployed BPEL process. Because the IT designer and business architects/analysts have different skill sets (the business architects/analysts are familiar with the business process being modeled and the IT designer is familiar with the orchestration language but not the business process), the resulting BPEL process developed by the IT designer may not work as the business architects/analysts imagined. Accordingly, there may be a wide divide between the originally conceived business process model and the implemented model.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">Particular embodiments provide a method for orchestrating an order fulfillment business process that includes a sub-process. In one embodiment, abstraction of business processes from an underlying information technology (IT) infrastructure is provided. An orchestration process can be designed using sub-processes such that services of the sub-process are assembled at run-time into an executable process.</p>
<p id="p-0008" num="0007">A service library including services that can be used in the order fulfillment business process is provided. The library includes one or more sub-processes where a sub-process may be an existing process or process fragment that can be included in another business process. For example, the sub-process may include a plurality of services. A definition of a business process including sub-processes is received from an interface. For example, a business user may model the business process using the interface. A sub-process may be selected from the library and included in the business process as a step.</p>
<p id="p-0009" num="0008">The business process is defined in steps to be performed in the order fulfillment business process. Metadata for the definition is determined during run-time to assemble an executable process. An executable process is assembled at run-time where the services included in the sub-process are included as individual steps in the executable process. An additional number of services that were defined in the business process may also be included. Services for the executable process are then dynamically invoked where invoking a service facilitates performance of a service associated with the service module.</p>
<p id="p-0010" num="0009">Accordingly, the orchestration of the business process may be created using the interface. The interface may be a web-based administration user interface in which the business processes are built using the service/sub-processes defined in the business process provided. The executable process is assembled at run-time into a single executable process. Thus, the sub-process may not need to be a deployed executable process. Rather, the code for the services in the sub-process is added to code for other services that were defined in the business process to create the executable process. This allows for re-usability of sub-processes and also no special treatment is required for the sub-process, such as error (fault) handling and defined partner links that are needed to call the sub-process from a parent process.</p>
<p id="p-0011" num="0010">A further understanding of the nature and the advantages of particular embodiments disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> depicts an example of a system for providing an orchestration process design and authoring environment according to one embodiment.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> shows the re-usability of sub-processes according to one embodiment.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example of an interface according to one embodiment.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of building executable processes using sub-processes according to one embodiment.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> describes the run-time operation according to one embodiment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> depicts a simplified flowchart of a method for performing an executable process at run-time using sub-processes according to one embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading>
<p id="p-0018" num="0017">Particular embodiments provide for creation, use, and re-use of sub-processes. A sub-process may be an existing process or process fragment that can run within another process. Business processes may be modeled by users, such as business analysts. In modeling the business process, it may be desirable to include sub-processes. Sub-processes may be re-usable among different business processes. That is, different business processes that share common subsets of services may use a sub-process. For example, a sub-process may include a plurality of services that are performed. Instead of modeling the business process with each of the services as individual steps, a sub-process may be selected and included as a step in the business process.</p>
<p id="p-0019" num="0018">The following describes an overall system that may be used to generate and run an executable process in <figref idref="DRAWINGS">FIG. 1</figref>. Sub-processes will then be described in <figref idref="DRAWINGS">FIG. 2</figref>. An interface that may be used to abstract the authoring of business processes is described in <figref idref="DRAWINGS">FIG. 3</figref>. <figref idref="DRAWINGS">FIG. 4</figref> describes use of the interface to specify sub-processes. <figref idref="DRAWINGS">FIG. 5</figref> describes the run-time environment and <figref idref="DRAWINGS">FIG. 6</figref> describes the run-time environment with respect to sub-processes.</p>
<p id="h-0006" num="0000">System Overview</p>
<p id="p-0020" num="0019">Particular embodiments provide a tool that provides a high degree of abstraction for orchestration business process design and authoring/modeling in an order fulfillment business process. Business processes may be modeled by users, such as business analysts, and do not need any coding from an IT designer to have the business process executed. Users are provided the flexibility to define executable business processes in a user interface, such as a web-based administration user interface. The executable business process may identify one or more services that define steps to be performed in the order fulfillment process. A run-time engine then uses the definition to dynamically invoke the services based on the definition of the executable business process.</p>
<p id="p-0021" num="0020">In the business environment, business users are often process modelers, not IT personnel. By providing a web-based administration environment, the business users may be able to design the business process. The process definitions may be defined in business terms and not in IT terms. Particular embodiments allow an administrative environment outside of a code editor, such as a BPEL editor, for defining processes using associated services. Users can configure processes that can be executed at runtime as executable processes without IT involvement. This alleviates the need for deploying the processes every time a modification of the executable business process is needed. The user sets up the sequence of services on a data table. The modeled business process is then used to perform an executable process, which is assembled and executed at run-time. In one embodiment, &#x2018;run-time&#x2019; can be defined as the time when an order is received for processing. Metadata is assembled in the data run-time table to and used to define the executable process for the business process. The metadata may be read into a runtime table and is used to invoke services in the executable process.</p>
<p id="p-0022" num="0021">In one example, the services invoked are encapsulated and reusable. The metadata is used to determine how and when to invoke services. Also, depending on the metadata, input arguments are generated and sent to the services to invoke the service. A common signature is used to send data to invoke the services. Different input arguments can be formulated for different services used in different business executable processes. The input arguments are formatted in the same way such that a service can read the different sets of data and invoke the service. Thus, services can be re-used in different business processes without the need to be re-coded and redeployed. Deployment of services indicates the Services are deployed by setting a flag on the process definition that signals that the process is ready to be released for testing or production. An IT developer is not needed for deployment.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> depicts an example of a system <b>100</b> for providing an orchestration process design and authoring environment according to one embodiment. System <b>100</b> includes an orchestration system <b>102</b> and a client <b>104</b>. Although single instances of orchestration system <b>102</b> and client <b>104</b> are provided, it will be understood that multiple instances may be used. Also, orchestration system <b>102</b> and client <b>104</b> may be part of a distributed computing system. That is, functions described may be distributed among various computing devices.</p>
<p id="p-0024" num="0023">Orchestration system <b>102</b> may be a computing device or set of computing devices that are configured to allow a business process to be modeled. Orchestration system <b>102</b> also orchestrates the invocation and running of services in for an executable process <b>110</b> for the business process. Orchestration, as described, may be the coordination and invoking of services that need to be performed in the business process.</p>
<p id="p-0025" num="0024">As used, a business process may be modeled by a user. The business process is a definition of steps to be performed. The steps are defined in interface <b>108</b>. An executable process is the process that is executed by run-time engine <b>112</b>. The executable process includes code that is executed to coordination performing of services.</p>
<p id="p-0026" num="0025">A service library <b>106</b> that includes multiple services that can be included in an executable process <b>110</b> of a business process. In one embodiment, a service library <b>106</b> includes services that can be performed in an order fulfillment business process. Order fulfillment involves processes that are performed to fulfill an order. For example, an order may be received from an order capture system. The order may be for a good, service, etc. Different services may be performed to fulfill the order, such as shipment, installation, invoicing, etc. The order fulfillment process may be characterized in these different services. It is expected for any given order, some or all of these processes may need to be performed to fulfill the order. Accordingly, particular embodiments create services for the services that are expected to be performed in an order fulfillment process.</p>
<p id="p-0027" num="0026">Services can be non-configurable units and configurable units. Non-configurable units are services that are built and provided to customers. The non-configurable units are units that likely may be used in an order fulfillment process. For example, it is expected that different steps services may have to be performed in the order fulfillment process, such as account receivable. Accordingly, these steps services may be modeled using a language, such as BPEL. Although BPEL is described, it will be understand that other languages may be used.</p>
<p id="p-0028" num="0027">Configurable units are services that are built and defined by a customer. For example, a wrapper is provided around a service that is configured by a user. For example, a customer may want a shipping service that is specific to the customer's company. Accordingly, the service performed by the configurable unit may be defined and built by a customer, but the wrapper allows runtime engine <b>112</b> to invoke the service automatically. This allows customers to define services that are needed for their individual organizations.</p>
<p id="p-0029" num="0028">The services may be re-used in different business processes. The services are encapsulated and configured to receive a common signature for the service to be performed. For example, for each business process, different parameters may be provided (i.e., different products may be ordered for different prices, etc.). This causes different input arguments to be inputted into the service. The common signature defines a data structure that allows the service to be re-used for different business executable processes <b>110</b>. Thus, the same deployed service is used to process different input arguments for the different orders, but different results may be obtained. In this way, the order fulfillment process can be abstracted. Different users can define which services need to be performed without regard to how the processes are coded in an orchestration language.</p>
<p id="p-0030" num="0029">Interface <b>108</b> may be an administration user interface. For example, a graphical user interface allows a user to model a business process at an abstract level. For example, service library <b>106</b> may be provided to client <b>104</b>. The user may then use interface <b>108</b> to define steps of executable process <b>110</b> for the business process using services in service library <b>106</b>. A user may define a plurality of steps in executable business process <b>110</b>. Each step may be associated with a service in service library <b>106</b>.</p>
<p id="p-0031" num="0030">The steps may be stored in a data table, which may include metadata that may be used by runtime engine <b>112</b> to orchestrate executable process <b>110</b>. The data table is shown as being stored in storage <b>114</b>. It will be understood that the data table may be stored in any area, such as in client <b>104</b>, orchestration system <b>102</b>, or any other device. The metadata may be defined by the user, determined from data tables, and/or orchestration rules. The user defines the sequence in which the services are to be invoked as well as conditional or parallel branching that may be required to effect the business processing rules. When the user selects a service for a process step, the user also provides additional metadata that is used to determine how the processing data is to be displayed to users during the processing of an order at runtime. For example, conditional or parallel branching is defined.</p>
<p id="p-0032" num="0031">At runtime, runtime engine <b>112</b> may receives the metadata for executable process <b>110</b>. The metadata is then used to determine parameters for the orchestration of executable process <b>110</b>. Runtime engine <b>112</b> uses the parameters to determine which steps to perform and when in executable process <b>110</b>. For example, runtime engine <b>112</b> orchestrates executable process <b>110</b> by invoking services in the series of steps that have been defined by the user. As will be described in more detail below, parallel and conditional processing of steps can also be performed. Also, the metadata can be used to determine the input arguments used to invoke the services.</p>
<p id="p-0033" num="0032">The metadata for the table is read at runtime and services are invoked, which allows changes to the executable process <b>110</b> to be performed and realized at runtime automatically. Runtime engine <b>112</b> reads through each step that is defined and performs the steps. If a change in service is desired, the user may use interface <b>108</b> to add/delete/replace a service. At run-time, when the table is read, the change may be automatically performed.</p>
<p id="h-0007" num="0000">Sub-Processes</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 2</figref> shows the re-usability of sub-processes according to one embodiment. A sub-process <b>250</b> is shown as a Process Flow for Service Request Before Shipping. A sub-process may be defined as an existing process or process fragment that can run within another process. For example, services <b>252</b> may be provided in sub-process <b>250</b>. Services may be the smallest unit of work in a service library <b>106</b>. For example, services may include Call Customer <b>252</b>-<b>0</b>, Schedule Appointment <b>252</b>-<b>1</b>, Perform Task at Customer Location <b>252</b>-<b>2</b>, and Confirm with Client <b>252</b>-<b>3</b>.</p>
<p id="p-0035" num="0034">Sub-process <b>250</b> may include a series of services. Sub-process <b>250</b> may be thought of as a stand-alone business process or a fragment of a business process. Sub-process <b>250</b> allows users to re-use a series of services in different business processes. Each service in the sub-process may be individually found in service library <b>106</b>. However, instead of having to individually specify that each service of sub-process <b>250</b> should be used for multiple steps in business processes, sub-process <b>250</b> may just be specified.</p>
<p id="p-0036" num="0035">Sub-process <b>250</b> may be re-used in different business processes, such as a carpet business process <b>110</b>-<b>1</b> and a window/door business process <b>110</b>-<b>2</b>. Business processes may include services <b>252</b> in addition to sub-processes <b>250</b>. As shown, carpet business process <b>110</b>-<b>1</b> includes Check Availability service <b>252</b>-<b>4</b> and Service A <b>252</b>-<b>5</b>, and window/door business process <b>110</b>-<b>2</b> includes Service B<b>252</b>-<b>6</b> and Service C <b>252</b>-<b>7</b>. Also, each of the business processes uses the services included in sub-process <b>250</b>.</p>
<p id="p-0037" num="0036">Accordingly, sub-process <b>250</b> is re-used in different business process flows. Sub-processes <b>250</b> may or may not be executable themselves. For example, sub-processes <b>250</b> may not already be deployed executable sub-processes. In one embodiment, &#x201c;executable&#x201d; in a BPEL context or other context as contemplated by particular embodiments means that the sub-process is a complete, functional process that has been deployed. In particular embodiments, the sub-process may be a fragment, containing a set of invocations that would not be deployed or executable on their own. However, as will be described below, because an executable process <b>110</b> is assembled at run-time, sub-processes <b>250</b> do not need to be deployed or executable at run-time. The use of re-usable sub-processes allows users to define sub-processes and re-use them in several different business process flows.</p>
<p id="p-0038" num="0037">The ability to define business processes is convenient for a user using a user interface as described in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="h-0008" num="0000">Interface</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example of an interface <b>108</b> according to one embodiment. Process level table <b>216</b> summarizes different business processes that have been modeled. As shown, the business processes&#x2014;Carpet Installation and Process <b>1</b>&#x2014;have been modeled by a user.</p>
<p id="p-0040" num="0039">In process level table <b>216</b>, a process name column <b>218</b> shows a carpet installation business process and process <b>1</b> have been modeled. A description column <b>220</b> describes the process. A process class column <b>222</b> describes the class of the process. A status column <b>226</b> is the status of the executable process. There may be different statuses of executable processes <b>110</b>. For example, some business processes may be approved for production, approved for test, or may be new. Production means that the service is approved for regular business use, approved for test is approved for testing, and new is a service in development.</p>
<p id="p-0041" num="0040">A business process in table <b>216</b> can be selected and data table <b>200</b> may show the step details for individual business processes. One business process is entitled Carpet Installation and a data table <b>200</b> of step details shows each service that has been defined for the Carpet Installation.</p>
<p id="p-0042" num="0041">In data table <b>200</b>, a step column <b>204</b> identifies the steps in the business process. For example, steps <b>10</b>-<b>60</b> are provided. Services for these steps may be performed at runtime. The steps may be run in sequence from top to bottom (or in any other order). In this case, a step <b>10</b> is performed and when finished, a step <b>20</b> is performed, and so on. Additionally, although not shown, conditional and parallel steps may also be defined using interface <b>108</b>. Conditional steps are steps that depend on a result occurring (e.g., another step finishing) and parallel steps are performed in parallel. A user defines whether steps should be conditional or parallel.</p>
<p id="p-0043" num="0042">Step name column <b>206</b> provides a descriptive name for the steps. For example, ship carpet, wait for shipped, install carpet, wait for complete, and invoice steps are provided.</p>
<p id="p-0044" num="0043">A task type column <b>208</b> describes what type of task is being performed. For example, for the ship carpet task, an external system may perform a shipping task and for the invoice step, an invoice system may invoice for a bill.</p>
<p id="p-0045" num="0044">A service column <b>210</b> identifies the service associated with the step. A task name column <b>214</b> is the name of the task. For example, theses tasks have to do with carpet and are named carpet shipment, carpet installation, and invoice for carpet. It is possible that if something other than a carpet is being installed, the task name may be different. For example, a sink shipment, sink installation, and invoice for sink may be the names of these tasks.</p>
<p id="p-0046" num="0045">Users may use interface <b>108</b> to generate data table <b>200</b>. A user may select services from a menu for service library <b>106</b>. For example, a user uses a menu interface <b>212</b> to select services from service library <b>106</b>. Drop-down menus, drag-and-drop options, and other visual processes may be used to define executable process <b>110</b>. Users are provided with an orchestration-specific interface that presents the business process data with suitable validations, rather than being required to learn the complexities of a multipurpose IT development environment. This allows a user to model a business process in an abstract manner, but have executable process <b>110</b> be generated and executed from the model.</p>
<p id="p-0047" num="0046">The services in service library <b>106</b> may be made up of non-configurable units and configurable units. For example, non-configurable units are provided in a column <b>252</b> and configurable units are provided in a column <b>253</b>. As shown, services that are non-configurable include shipping, accounts receivable (AR), invoice, and gross operating profit (GOP). Also, configurable units are designated as A, B, C, and D.</p>
<p id="p-0048" num="0047">Table <b>200</b> is generated as shown in interface <b>108</b> using menu interface <b>212</b>. Table <b>200</b> is associated with metadata that describes the services to be performed and any arguments that are needed to invoke the services.</p>
<p id="h-0009" num="0000">Sub-Process Modeling Using Interface <b>108</b></p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of defining business processes using sub-processes <b>250</b> in interface <b>108</b> according to one embodiment. As shown, service library <b>106</b> includes non-configurable units, configurable units, and sub-processes <b>250</b>. Sub-processes <b>250</b> include a series of services (e.g., as shown in <figref idref="DRAWINGS">FIG. 2</figref>).</p>
<p id="p-0050" num="0049">Instead of having a user individually define a series of steps associated with individual services, the user may select sub-processes <b>250</b> in interface <b>108</b>. Sub-processes <b>250</b> may be included in menu interface <b>212</b>. As shown, non-configurable services <b>252</b>, configurable services <b>252</b>, and sub-processes <b>250</b> are provided. Sub-processes <b>250</b> may be non-configurable sub-processes and/or configurable sub-processes.</p>
<p id="p-0051" num="0050">A user may use interface <b>108</b> to define business processes. For example, carpet business process <b>110</b>-<b>1</b> and window/door business process <b>110</b>-<b>2</b> include the services and sub-process described in <figref idref="DRAWINGS">FIG. 2</figref>. However, a user is free to use any of the services and sub-processes included in service library <b>106</b>.</p>
<p id="p-0052" num="0051">Data tables <b>200</b>-<b>1</b> and <b>200</b>-<b>2</b> include the services that are included for different steps in carpet business process <b>110</b>-<b>1</b> and window/door business process <b>110</b>-<b>2</b> respectively. In one embodiment, when sub-process <b>250</b> is selected, it is included in data table <b>200</b> as a step. For example, a sub-process <b>250</b> may be defined in step <b>20</b> in data tables <b>200</b>-<b>1</b> and <b>200</b>-<b>2</b>. Sub-process <b>250</b> may include the services Call Customer <b>252</b>-<b>0</b>, Schedule Appointment <b>252</b>-<b>1</b>, Perform Task at Customer Location <b>252</b>-<b>2</b>, and Confirm with Client <b>252</b>-<b>3</b>. However, instead of having the sub-process specify the four services in four different steps, the sub-process is defined for a step.</p>
<p id="p-0053" num="0052">Carpet business process <b>110</b>-<b>1</b> is different from Window/Door business process <b>110</b>-<b>2</b> in that steps <b>10</b> and <b>30</b> are different (e.g., carpet business process <b>110</b>-<b>1</b> includes the steps check availability and service A and window/door process includes the steps of service B and service C). Sub-process <b>250</b> has been re-used in the two business processes though.</p>
<p id="p-0054" num="0053">A column <b>402</b> indicates whether a service for a step is executable or not. In this case, sub-process <b>250</b> is not executable. This means that sub-process <b>250</b> cannot be deployed as a BPEL process. However, a deployable BPEL process could be specified for sub-process <b>250</b>. In either case, the services of the sub-process are assembled at run-time as steps in a single executable process. The difference is that in one case, the sub-process is complete enough to represent a deployable process and in the other case, it is only a fragment and not deployable.</p>
<p id="h-0010" num="0000">Run-Time Operation</p>
<p id="p-0055" num="0054">Once the business process is defined in interface <b>108</b>, run-time engine <b>112</b> is used to orchestrate the invocation of the services. <figref idref="DRAWINGS">FIG. 5</figref> describes the run-time operation according to one embodiment. A table reader <b>302</b> receives metadata from interface <b>108</b> defining the business process. Table reader <b>302</b> may copy the data to a runtime table <b>306</b> but this is not necessary.</p>
<p id="p-0056" num="0055">During run-time, a step reader <b>304</b> is configured to read the steps in runtime table <b>306</b>. Step reader <b>304</b> may analyze the metadata and determine which steps should be executed and when. For example, step reader <b>304</b> checks to see if parallel or conditional branching is associated with a step. The metadata is also used to determine input arguments for the services. The input arguments may be determined from the metadata, from data in lookup tables, or determined using rules.</p>
<p id="p-0057" num="0056">Step reader <b>304</b> may assemble executable process <b>110</b> using encapsulated services from service library <b>106</b> and the metadata, For example, code tor each service that was modeled in the steps is determined for executable process <b>110</b>. The input arguments for each service are also determined. For example, the metadata is used to determine the input arguments such that the services can process an order for the business process. Also, any partner links are determined using the metadata to allow the services to interact with external systems. Executable process <b>110</b> is assembled based on the definition of steps in the business process. Because services are re-usable, the same code for a service can be used for different business processes. However, the input arguments or partner links may be different. Because the same code is re-used, automatic assembly of executable process <b>110</b> is provided.</p>
<p id="p-0058" num="0057">Sub-processes are assembled into a single executable process <b>110</b> as shown in <b>307</b>. Step <b>20</b> is assembled into steps <b>20</b>-<b>50</b> to represent the four services that were part of sub-process <b>250</b>. Previous step <b>30</b> is now step <b>60</b> in executable process <b>110</b>. As shown in <b>307</b>, a step <b>10</b> may be performed and then steps <b>20</b>, <b>30</b>, <b>40</b>, and <b>50</b> are performed in parallel. When these steps have been performed, a step <b>60</b> is performed.</p>
<p id="p-0059" num="0058">Even though a sub-process was selected for a step, services may be treated as if individual services were selected for executable process <b>110</b>. Thus, sub-processes may be included in a business process without being deployed executable processes and having associated partner links for the sub-process with a calling parent process. Conventionally, a sub-process would need to be deployed as an executable process. A parent process is then configured with partner links that are used to call the sub-process and to manage the variables used in the sub-process. This requires an IT designer to code and configure the parent process and sub-process to work together. If the sub-process was a deployed sub-process that is called by a parent process using, for example, receive/reply calls, then associated partner links need to be prepared. That is, the parent process needs to be coded with a method for calling the sub-process. Partner links need to be defined to pass variables to the sub-process and also special error (fault) handling needs to be coded into the executable process.</p>
<p id="p-0060" num="0059">Particular embodiments assemble the services of the business process into a single executable process that is a series of steps of services at run-time and partner links do not need to be assembled to call the sub-process. Rather, executable process <b>110</b> runs as if it is a single executable process in which the services of the sub-process were defined as a series of steps. The sub-process itself is not invoked, rather the services assigned to the steps of the sub-process are invoked in the correct sequence as individual steps in executable process <b>110</b>. Partner links are already available for the individual services assembled into the sub-process. Also, special treatment is not required for error (fault) handling in compensation or for the management of data variables within the sub-process because it does not have a separate invocation. The executable process generated at run-time is as if the user had individually defined the services in the business process.</p>
<p id="p-0061" num="0060">A flow sequencer <b>308</b> is used to dynamically invoke the steps at the appropriate time based on executable process <b>110</b>. As shown, a step <b>10</b> may be performed and then steps <b>20</b>, <b>30</b>, <b>40</b>, and <b>50</b> are performed in parallel. When these steps have been performed, a step <b>60</b> is performed. Flow sequencer <b>308</b> may determine relevant input arguments depending on the content of the metadata received. These input arguments are then used to invoke a service. For example, flow sequencer <b>308</b> may include a task layer reader <b>310</b> that determines a service to invoke. A task invoker <b>312</b> then dynamically invokes the service. Any input arguments are used to invoke the service. In invoking the service, code for the encapsulated service is executed to coordinate performing of the service. For example, the executed code may prepare and send a message to an external system to perform the service.</p>
<p id="p-0062" num="0061">The service may then be performed and the result is received at result receiver <b>314</b>. In one example, if the task is shipping, then a shipping service generates a message for a shipping system regarding the shipping of a good. Once the shipping system ships the good, a message is returned to the shipping service, which stores the result.</p>
<p id="p-0063" num="0062">After receiving a result, it is then checked whether further sequences need to be performed. For example, a while activity module checks to see whether further services need to be processed. For example, the process may be returned to flow sequencer <b>308</b> to allow for dynamic invocation of other steps in the process. Also, the while activity module may wait until parallel branches are completed.</p>
<p id="p-0064" num="0063">Accordingly, the information required to invoke the services is determined automatically based on the runtime table. In one example, in BPEL, necessary partner links for all invocations have been created and are used to invoke the services. The services represented in the BPEL partner links are deployed BPEL processes that require no further configuration in order to be used in multiple business process definitions. When a service is invoked by the runtime engine, the corresponding partner link is accessed in the underlying BPEL process. Assembly of a service and modification of any service take place through the use of the metadata found in the runtime table and may be managed through interface <b>108</b>.</p>
<p id="p-0065" num="0064">Accordingly, a user can set up the steps in a business process. Executable process <b>110</b> can be automatically assembled at run-time. The code used in executable process <b>110</b> is not generated by the user who set up the business process. Rather, metadata can be defined and is used to assemble encapsulated services for executable process <b>110</b>.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 6</figref> depicts a simplified flowchart <b>600</b> of a method for running an executable process at run-time using sub-processes according to one embodiment. Step <b>602</b> reads metadata from run-time table <b>306</b>. Step <b>604</b> determines orchestration requirements based on the metadata. For example, the sequence and processing requirements may be determined. The sequence may be a sequence in which steps should be performed for services defined. Also, processing requirements, such as parallel, branching, and other requirements are determined.</p>
<p id="p-0067" num="0066">Step <b>606</b> assembles executable process <b>110</b> using a sub-process that has been defined and any other services based on the orchestration requirements. For example, the metadata may define a series of steps. Some of the steps may have been defined using a sub-process. The services that are included in the sub-process are assembled into executable process <b>110</b> as if the individual services of sub-processes <b>250</b> were defined. This provides a single executable process <b>110</b>.</p>
<p id="p-0068" num="0067">Step <b>608</b> then invokes the services based on the assembled executable process <b>110</b>. For example, the invocation is based on the orchestration requirements determined.</p>
<p id="p-0069" num="0068">Particular embodiments provide sub-processes that may be re-used among different business processes. This functionality is not available in the BPEL specification. In a business environment, the sub-process re-usability and modularity is needed. Because business users are often process modelers, and not IT personnel, sub-processes reduce the burden on administration by allowing users to define multiple services in one sub-process. Particular embodiments allow sub-processes to be defined in an administrative environment outside of an orchestration language editor, such as a BPEL editor. Metadata is used to define what sub-processes should be used to assemble an executable process. Because of the high level of abstraction provided by interface <b>108</b>, business process models may be synchronized with what a business analyst has envisioned. Also, by assembling sub-processes into an executable process at run-time, deployment and other requirements such as partner links and what variables are needed are not necessary.</p>
<p id="p-0070" num="0069">Re-usability of sub-processes increases flexibility and reduces administrative costs. Self-assembly allows a running process to respond to change, such as the changing of the business process model or the receipt of additional information from external systems. Accordingly, sub-processes do not need to be re-deployed every time a modification to a sub-process is performed. Rather, the services that have been changed in a sub-process will be assembled at run-time.</p>
<p id="p-0071" num="0070">Further description of a distributed order orchestration system is described in U.S. patent application Ser. No. 12/617,698, entitled &#x201c;DISTRIBUTED ORDER ORCHESTRATION&#x201d;, filed concurrently and incorporated by reference for all purposes. Also, further details on orchestration are described U.S. patent application Ser. No. 12/617,695, entitled &#x201c;DATA DRIVEN ORCHESTRATION OF BUSINESS PROCESSES&#x201d; and U.S. patent application Ser. No. 12/617,697, entitled &#x201c;VERSIONING AND EFFECTIVITY DATES FOR ORCHESTRATION BUSINESS PROCESS DESIGN&#x201d;, all of which are filed concurrently with this application and all of which are incorporated by reference for all purposes.</p>
<p id="p-0072" num="0071">Although the description has been described with respect to particular embodiments thereof, these particular embodiments are merely illustrative, and not restrictive. Although BPEL is discussed, it will be understood that other languages may be used.</p>
<p id="p-0073" num="0072">Any suitable programming language can be used to implement the routines of particular embodiments including C, C++, Java, assembly language, etc. Different programming techniques can be employed such as procedural or object oriented. The routines can execute on a single processing device or multiple processors. Although the steps, operations, or computations may be presented in a specific order, this order may be changed in different particular embodiments. In some particular embodiments, multiple steps shown as sequential in this specification can be performed at the same time.</p>
<p id="p-0074" num="0073">Particular embodiments may be implemented in a computer-readable storage medium for use by or in connection with the instruction execution system, apparatus, system, or device. Particular embodiments can be implemented in the form of control logic in software or hardware or a combination of both. The control logic, when executed by one or more processors, may be operable to perform that which is described in particular embodiments.</p>
<p id="p-0075" num="0074">Particular embodiments may be implemented by using a programmed general purpose digital computer, by using application specific integrated circuits, programmable logic devices, field programmable gate arrays, optical, chemical, biological, quantum or nanoengineered systems, components and mechanisms may be used. In general, the functions of particular embodiments can be achieved by any means as is known in the art. Distributed, networked systems, components, and/or circuits can be used. Communication, or transfer, of data may be wired, wireless, or by any other means.</p>
<p id="p-0076" num="0075">It will also be appreciated that one or more of the elements depicted in the drawings/figures can also be implemented in a more separated or integrated manner, or even removed or rendered as inoperable in certain cases, as is useful in accordance with a particular application. It is also within the spirit and scope to implement a program or code that can be stored in a machine-readable medium to permit a computer to perform any of the methods described above.</p>
<p id="p-0077" num="0076">As used in the description herein and throughout the claims that follow, &#x201c;a&#x201d;, &#x201c;an&#x201d;, and &#x201c;the&#x201d; includes plural references unless the context clearly dictates otherwise. Also, as used in the description herein and throughout the claims that follow, the meaning of &#x201c;in&#x201d; includes &#x201c;in&#x201d; and &#x201c;on&#x201d; unless the context clearly dictates otherwise.</p>
<p id="p-0078" num="0077">Thus, while particular embodiments have been described herein, latitudes of modification, various changes, and substitutions are intended in the foregoing disclosures, and it will be appreciated that in some instances some features of particular embodiments will be employed without a corresponding use of other features without departing from the scope and spirit as set forth. Therefore, many modifications may be made to adapt a particular situation or material to the essential scope and spirit.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for processing, using a computer having one or more processors, an interface and a non-transitory computer readable storage medium in data communication with the one or more processors, one or more sub-processes in one or more business processes, the method comprising:
<claim-text>receiving, using the computer, user input from a menu in the interface to select one or more services and one or more sub-processes for inclusion as metadata in a first data table defining steps of a first business process, where a service is encapsulated, executable and configured to receive data in a common format for ease of reuse and where a sub-process includes a plurality of services;</claim-text>
<claim-text>assembling, using the computer, a first executable process at run-time based on the sequence of steps read from the metadata included in the first data table, where a step comprising a sub-process is assembled into a single executable process as if the plurality of services included in the sub-process were selected as individual steps so that the sub-process is assembled at runtime;</claim-text>
<claim-text>deploying, using the computer, the first executable process at runtime;</claim-text>
<claim-text>adding, using the computer, the plurality of services to a run-time table in the non-transitory computer readable storage medium;</claim-text>
<claim-text>determining, using the computer, orchestration requirements for the plurality of services; and</claim-text>
<claim-text>invoking, using the computer, the plurality of services based on the orchestration requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the sub-process is reusable in a second business process.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>invoking at runtime, using the computer, the services assigned to steps of the subprocess an assembled executable process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the executable process invokes, using the computer, the plurality of services as individual steps and does not use partner links to call the sub-process.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the executable process invokes, using the computer, the plurality of services of the sub-process as individual steps and does not require the setup of error handling specific to the sub-process in order to call the sub-process.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the sub-process is a process fragment that is not deployed as an executable process.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the executable process is assembled in a business process execution language (BPEL).</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A non-transitory computer-readable storage medium comprising encoded logic for execution by one or more processors in data communication with the non-transitory computer readable storage medium, and the encoded logic when executed configured to process one or more sub-processes in one or more business processes, the logic configured to:
<claim-text>receive user input from a menu in an interface to select one or more services and one or more sub-processes for inclusion as metadata in a first data table defining steps of a first business process, where a service is encapsulated, executable and configured to receive data in a common format for ease of reuse and where a sub-process includes a plurality of services;</claim-text>
<claim-text>assemble a first executable process at run-time based on the sequence of steps read from the metadata included in the first data table, where a step comprising a sub-process is assembled into a single executable process as if the plurality of services included in the sub-process were selected as individual steps so that the sub-process is assembled at runtime;</claim-text>
<claim-text>deploy the first executable process at runtime;</claim-text>
<claim-text>add the plurality of services to a run-time table in the non-transitory computer readable storage medium;</claim-text>
<claim-text>determine orchestration requirements for the plurality of services; and</claim-text>
<claim-text>invoke the plurality of services based on the orchestration requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the sub-process is reusable in a second business process.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the encoded logic is further configured to:
<claim-text>invoke at runtime the services assigned to steps of the sub-process an assembled executable process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the executable process invokes the plurality of services as individual steps and does not use partner links to call the sub-process.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the executable process invokes the plurality of services of the subprocess as individual steps and does not require the setup of error handling specific to the subprocess in order to call the sub-process.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the sub-process is a process fragment that is not deployed as an executable process.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the executable process is assembled in a business process execution language (BPEL).</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. An apparatus configured to process one or more sub-processes in one or more business processes, the apparatus comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>an interface; and</claim-text>
<claim-text>logic encoded in one or more non-transitory tangible media for execution by the one or more processors, and when executed configured to:</claim-text>
<claim-text>receive user input from a menu in the interface to select one or more services and one or more sub-processes for inclusion as metadata in a first data table defining steps of a first business process, where a service is encapsulated, executable and configured to receive data in a common format for ease of reuse and where a sub-process includes a plurality of services;</claim-text>
<claim-text>assemble a first executable process at run-time based on the sequence of steps read from the metadata included in the first data table, where a step comprising a sub-process is assembled into a single executable process as if the plurality of services included in the sub-process were selected as individual steps so that the sub-process is assembled at runtime;</claim-text>
<claim-text>deploy the first executable process at runtime;</claim-text>
<claim-text>add the plurality of services to a run-time table in the non-transitory computer readable storage medium;</claim-text>
<claim-text>determine orchestration requirements for the plurality of services; and</claim-text>
<claim-text>invoke the plurality of services based on the orchestration requirements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the sub-process is reusable in a second business process. </claim-text>
</claim>
</claims>
</us-patent-grant>

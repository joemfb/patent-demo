<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627189-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627189</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12630774</doc-number>
<date>20091203</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>535</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714795</main-classification>
<further-classification>714792</further-classification>
</classification-national>
<invention-title id="d2e53">High performance digital signal processing in software radios</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5099417</doc-number>
<kind>A</kind>
<name>Magar et al.</name>
<date>19920300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5212777</doc-number>
<kind>A</kind>
<name>Gove et al.</name>
<date>19930500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5708593</doc-number>
<kind>A</kind>
<name>Saby et al.</name>
<date>19980100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5784640</doc-number>
<kind>A</kind>
<name>Asghar et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5930298</doc-number>
<kind>A</kind>
<name>Choi</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6114971</doc-number>
<kind>A</kind>
<name>Nysen</name>
<date>20000900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6167031</doc-number>
<kind>A</kind>
<name>Olofsson et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6182030</doc-number>
<kind>B1</kind>
<name>Hagen et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6188702</doc-number>
<kind>B1</kind>
<name>Tornetta et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6298370</doc-number>
<kind>B1</kind>
<name>Tang et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6351499</doc-number>
<kind>B1</kind>
<name>Paulraj et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6415415</doc-number>
<kind>B1</kind>
<name>Karabed</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6557062</doc-number>
<kind>B1</kind>
<name>Shaler et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6578153</doc-number>
<kind>B1</kind>
<name>Sankey et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6587671</doc-number>
<kind>B1</kind>
<name>Kanago et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6654428</doc-number>
<kind>B1</kind>
<name>Bose et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6665311</doc-number>
<kind>B2</kind>
<name>Kondylis et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6735448</doc-number>
<kind>B1</kind>
<name>Krishnamurthy et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6748034</doc-number>
<kind>B2</kind>
<name>Hattori et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6788702</doc-number>
<kind>B1</kind>
<name>Garcia-Luna-Aceves et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6825827</doc-number>
<kind>B2</kind>
<name>Miura</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6864715</doc-number>
<kind>B1</kind>
<name>Bauer et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6963579</doc-number>
<kind>B2</kind>
<name>Suri</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7072818</doc-number>
<kind>B1</kind>
<name>Beardslee et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7142617</doc-number>
<kind>B2</kind>
<name>Mohan</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7162204</doc-number>
<kind>B2</kind>
<name>Hansen et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7174145</doc-number>
<kind>B2</kind>
<name>Chatelier et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7230978</doc-number>
<kind>B2</kind>
<name>Bitterlich et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7404074</doc-number>
<kind>B2</kind>
<name>Murotake</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7444168</doc-number>
<kind>B2</kind>
<name>Nakagawa et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7565140</doc-number>
<kind>B2</kind>
<name>Levy et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7610017</doc-number>
<kind>B2</kind>
<name>Girardeau, Jr. et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7738913</doc-number>
<kind>B2</kind>
<name>Hilpisch et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7774017</doc-number>
<kind>B2</kind>
<name>Irita et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7894556</doc-number>
<kind>B2</kind>
<name>Casabona et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2002/0126704</doc-number>
<kind>A1</kind>
<name>Cam et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2002/0155811</doc-number>
<kind>A1</kind>
<name>Prismantas et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2004/0068730</doc-number>
<kind>A1</kind>
<name>Miller et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2004/0153957</doc-number>
<kind>A1</kind>
<name>Feldman et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714795</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2004/0156449</doc-number>
<kind>A1</kind>
<name>Bose et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2004/0252684</doc-number>
<kind>A1</kind>
<name>Evans et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2005/0124330</doc-number>
<kind>A1</kind>
<name>Hong et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2005/0202848</doc-number>
<kind>A1</kind>
<name>Chang</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2006/0015674</doc-number>
<kind>A1</kind>
<name>Murotake</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2006/0115012</doc-number>
<kind>A1</kind>
<name>Sadowsky et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2006/0145897</doc-number>
<kind>A1</kind>
<name>Kadono et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2006/0168587</doc-number>
<kind>A1</kind>
<name>Aslam-Mir</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2006/0190904</doc-number>
<kind>A1</kind>
<name>Haji-Aghajani et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2006/0212624</doc-number>
<kind>A1</kind>
<name>Kim</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2006/0227856</doc-number>
<kind>A1</kind>
<name>Ledvina et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2007/0076649</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2007/0083786</doc-number>
<kind>A1</kind>
<name>Chiang</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2007/0092018</doc-number>
<kind>A1</kind>
<name>Fonseka et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375265</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2007/0155429</doc-number>
<kind>A1</kind>
<name>Levy et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2007/0178841</doc-number>
<kind>A1</kind>
<name>Oliynyk et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2007/0247139</doc-number>
<kind>A1</kind>
<name>Veroni et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2008/0003949</doc-number>
<kind>A1</kind>
<name>Voonna et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2008/0043668</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2008/0095100</doc-number>
<kind>A1</kind>
<name>Cleveland et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2008/0095135</doc-number>
<kind>A1</kind>
<name>Cleveland</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2008/0098133</doc-number>
<kind>A1</kind>
<name>Shaanan et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2008/0130519</doc-number>
<kind>A1</kind>
<name>Bahl et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2008/0165754</doc-number>
<kind>A1</kind>
<name>Hu</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2008/0175421</doc-number>
<kind>A1</kind>
<name>Chizari</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2008/0178062</doc-number>
<kind>A1</kind>
<name>Norris et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714786</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2008/0232487</doc-number>
<kind>A1</kind>
<name>Cleveland et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2008/0261639</doc-number>
<kind>A1</kind>
<name>Sun et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2008/0261650</doc-number>
<kind>A1</kind>
<name>Piriyapoksombut et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2008/0300006</doc-number>
<kind>A1</kind>
<name>Rofougaran et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2008/0320529</doc-number>
<kind>A1</kind>
<name>Louchkoff et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2009/0034457</doc-number>
<kind>A1</kind>
<name>Bahl et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2009/0061783</doc-number>
<kind>A1</kind>
<name>Choi et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2009/0063057</doc-number>
<kind>A1</kind>
<name>Miettinen</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2009/0088104</doc-number>
<kind>A1</kind>
<name>Cheng et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2009/0089556</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2009/0110033</doc-number>
<kind>A1</kind>
<name>Shattil</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2009/0119570</doc-number>
<kind>A1</kind>
<name>Eder et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2009/0156129</doc-number>
<kind>A1</kind>
<name>Hassan et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2009/0160486</doc-number>
<kind>A1</kind>
<name>Lee</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2009/0175381</doc-number>
<kind>A1</kind>
<name>Bougard</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375316</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2009/0196180</doc-number>
<kind>A1</kind>
<name>Bahl et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2009/0197627</doc-number>
<kind>A1</kind>
<name>Kuffner et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2009/0204725</doc-number>
<kind>A1</kind>
<name>Liu et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2009/0235316</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2009/0253376</doc-number>
<kind>A1</kind>
<name>Parssinen et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2009/0258603</doc-number>
<kind>A1</kind>
<name>Ghaboosi et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2009/0298522</doc-number>
<kind>A1</kind>
<name>Chaudhri et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2009/0323600</doc-number>
<kind>A1</kind>
<name>Chandra et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2010/0031098</doc-number>
<kind>A1</kind>
<name>Kobayashi</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2010/0048234</doc-number>
<kind>A1</kind>
<name>Singh</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2010/0075704</doc-number>
<kind>A1</kind>
<name>McHenry et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2010/0159855</doc-number>
<kind>A1</kind>
<name>Hardacker et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2010/0232369</doc-number>
<kind>A1</kind>
<name>Jing et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370329</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>2010/0246506</doc-number>
<kind>A1</kind>
<name>Krishnaswamy</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>2010/0260137</doc-number>
<kind>A1</kind>
<name>Vrzic et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2010/0301992</doc-number>
<kind>A1</kind>
<name>Chandra et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2010/0309806</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2011/0096658</doc-number>
<kind>A1</kind>
<name>Yang et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>WO</country>
<doc-number>WO9901945</doc-number>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>WO</country>
<doc-number>WO2006083495</doc-number>
<kind>A2</kind>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>Advanced Concept Engineering Corp., &#x201c;Ultra High-Performance Viterbi Decoder Core ACIP Viterbi<sub>&#x2014;</sub>K7&#x2014;&#x201d;, retrived at &#x3c;&#x3c;http://www.acengr.com/datasheet/ACIP<sub>&#x2014;</sub>Viterbi<sub>&#x2014;</sub>DataSheet.pdf&#x3e;&#x3e; on Aug. 11, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>Arslan, &#x201c;Teaching SDR through a Laboratory Based Course with Modern Measurement and Test Instruments&#x201d;, published Nov. 5-9, 2007, retrieved from the Internet at &#x3c;&#x3c;http://www.sdrforum.org/pages/sdr07/Proceedings/Papers/1.2/1.2-3.pdf.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>Bougard, et al., &#x201c;A Coarse-Grained Array Accelorator for Software-Defined Radio Baseband Processing&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=4626817&#x26;isnumber=4626808, IEEE Micro, Jul.-Aug. 2008, pp. 41-50.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00104">
<othercit>Boyd-Wickizer, et al., &#x201c;Corey: an operating system for many cores&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.mit.edu/&#x2dc;y<sub>&#x2014;</sub>z/papers/corey-osdi08.pdf&#x3e;&#x3e;, pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00105">
<othercit>Burton, &#x201c;16-Channel, DDS LVDS Interface with Per-Channel Alignment&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.xilinx.com/support/documentation/application<sub>&#x2014;</sub>notes/xapp855.pdf&#x3e;&#x3e;, Xilinx, Application Note: Virtex-5 FPGAs, XAPP855, Oct. 13, 2006, pp. 1-43.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00106">
<othercit>Cummings, et al., &#x201c;FPGA in the Software Radio&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=747258, IEEE Communications Magazine, Feb. 2009, pp. 108-112.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00107">
<othercit>Dong et al., &#x201c;Neural Networks Based Parallel Viterbi Decoder by Hybrid Design&#x201d;, Proceeding of the 5th World Congress on Intelligent Control and Automation, Jun. 15-19, 2004, pp. #1923-pp. #1926.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00108">
<othercit>&#x201c;GAO USB PC Based Oscilloscope (1Mega) Model A0130005&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.gaoinstruments.com/gao2902<sub>&#x2014;</sub>usb<sub>&#x2014;</sub>pc<sub>&#x2014;</sub>based<sub>&#x2014;</sub>oscilloscope<sub>&#x2014;</sub>1mega-p-53.html.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00109">
<othercit>Glossner, et al., &#x201c;A Software-Defined Communications Baseband Design&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=1166669&#x26;isnumber=26307&#x3e;&#x3e;, IEEE Communications Magazine, Jan. 2003, pp. 120-128.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00110">
<othercit>Glossner, et al., &#x201c;The Sandbridge Sandblaster Communications Processor&#x201d;, 3rd Workshop on Application Specific Processors, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00111">
<othercit>&#x201c;GNU Radio&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.gnu.org/software/gnuradio/&#x3e;&#x3e;, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00112">
<othercit>Goldsmith, &#x201c;Wireless Communications&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://assets.cambridge.org/97805218/37163/copyright/9780521837163<sub>&#x2014;</sub>copyright.pdf&#x3e;&#x3e;, Cambridge University Press, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00113">
<othercit>&#x201c;Host AP driver for Intersil Prism2/2.5/3, hostapd, and WPA Supplicant&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://hostap.epitest.fi/&#x3e;&#x3e;, Mar. 23, 2009, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00114">
<othercit>Jamieson, et al., &#x201c;PPR: Partial Packet Recovery for Wireless Networks&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://nms.lcs.mit.edu/papers/fp315-jamieson.pdf&#x3e;&#x3e;, SIGCOMM 2007, ACM 2007, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00115">
<othercit>Katti, et al., &#x201c;Embracing Wireless Interference: Analog Network Coding&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://nms.lcs.mit.edu/&#x2dc;dina/pub/anc.pdf&#x3e;&#x3e;, SIGCOMM 2007, ACM 2007, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00116">
<othercit>Kim et al., &#x201c;Low Power, High-Rate Viterbi Decoder Employing the SST (Scarce State Transition) Scheme and Radix-4 Trellis&#x201d; Department of Electrical and Computer Engineering, Sungkyunkwan University, pp. #1-pp. #4, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00117">
<othercit>Kim et al., &#x201c;Power Efficient Viterbi Decoder based on Pre-computation Technique for Portable Digital Multimedia Broadcasting Receiver&#x201d;, IEEE Transactions on Consumer Electronics, vol. 53, No. 2, May 2007, pp. #350-pp. #356.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00118">
<othercit>Lin, et al., &#x201c;IBM Research Report Wireless Base Station Design on General Purpose Processor with Multicore Technology&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://domino.watson.ibm.com/library/cyberdig.nsf/papers/B4C36233C8280F27852575FD005991DF/$File/rc24823.pdf&#x3e;&#x3e;, IBM Research Division, China Research Laboratory, Electrical Engineering, RC24823, Jul. 14, 2009, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00119">
<othercit>Lin, et al., &#x201c;SODA: A Low-power Architecture for Software Radio&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=1635943&#x3e;&#x3e;, Proceedings of the 33rd International Symposium on Computer Architecture (ISCA 2006), IEEE, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00120">
<othercit>Lin, et al., &#x201c;Software Defined Radio&#x2014;A High Performance Challenge&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.7327&#x26;rep=rep1&#x26;type=pdf&#x3e;&#x3e;, SDRG, pp. 1-41.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00121">
<othercit>&#x201c;LVDS-Based SerDes for Video Interconnects&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.epn-online.com/page/new51279&#x3e;&#x3e;, EPN, Electronic Product News, pp. 1-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00122">
<othercit>Madwifi, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://sourceforge.net/projects/madwifi&#x3e;&#x3e;, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00123">
<othercit>Minden, et al., &#x201c;KUAR: A Flexible Software-Defined Radio Development Platform&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.ittc.ku.edu/publications/documents/minden2007<sub>&#x2014;</sub>dyspan07.pdf&#x3e;&#x3e;, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00124">
<othercit>Neel, et al., &#x201c;A Formal Methodology for Estimating the Feasible Processor Solution Space for a Software Radio&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.sdrforum.org/pages/sdr05/1.2%20Reconfigurable%20Hardware/1.2-03% 20Neel%20et%20al.pdf&#x3e;&#x3e;, Proceeding of the SDR 2005 Technical Conference and Product Exposition, SDR, 2005, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00125">
<othercit>Neufeld, et al., &#x201c;SoftMAC&#x2014;Flexible Wireless Research Platform&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://conferences.sigcomm.org/hotnets/2005/papers/grunwald.pdf&#x3e;&#x3e;, Department of Computer Science, University of Colorado, Boulder, Nov. 4, 2005, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00126">
<othercit>&#x201c;Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.csse.uwa.edu.au/adhocnets/802.11-1999.pdf&#x3e;&#x3e;, ANSI/IEEE Std 802.11, 1999 Edition, pp. i-xiv and 1-512.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00127">
<othercit>&#x201c;Rt2x00&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://rt2x00.serialmonkey.com&#x3e;&#x3e;, Apr. 12, 2009, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00128">
<othercit>Savvopoulos, et al., &#x201c;A Software-Radio Test-bed for Measuring the Performance of DVB-S2 Receiver Circuits&#x201d;, published Oct. 6-8, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00129">
<othercit>Sawyer, &#x201c;High-Speed Data Serialization and Deserialization (840 Mb/s LVDS)&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.eetindia.co.in/ARTICLES/2002JUN/2002JUN28<sub>&#x2014;</sub>AMD<sub>&#x2014;</sub>NTEK<sub>&#x2014;</sub>AN.PDF?SOURCES=DOWNLOAD&#x3e;&#x3e;, Xilinx, Application Note: Virtex-II Family, XAPP265, Jun. 19, 2002, pp. 1-13.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00130">
<othercit>Schmid, et al., &#x201c;An Experimental Study of Network Performance Impact of Increased Latency in Software Defined Radios&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://nesl.ee.ucla.edu/fw/thomas/wintech401-schmid.pdf&#x3e;&#x3e;,WiNTEC 2007, Networked and Embedded Systems Laboratory, Electrical Engineering Department, University of California, Los Angeles, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00131">
<othercit>Siu et al., &#x201c;A Robust Viterbi Algorithm against Impulsive Noise with Application to Speech Recognition&#x201d;, IEEE Transactions on Audio, Speech, and Language Processing, vol. 14, No. 6, Nov. 2006, pp. #2122-pp. #2133.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00132">
<othercit>&#x201c;Small Form Factor SDR Development Platform&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.kanecomputing.co.uk/lyrtech<sub>&#x2014;</sub>sff<sub>&#x2014;</sub>sdr<sub>&#x2014;</sub>dev<sub>&#x2014;</sub>platform.htm&#x3e;&#x3e;, Kane Computing Ltd., 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00133">
<othercit>&#x201c;Software-Defined Radio System&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://zone.ni.com/devzone/cda/tut/p/id/8787&#x3e;&#x3e;, National Instruments, May 26, 2009, pp. 1-5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00134">
<othercit>Tan, et al., &#x201c;Sora: High Performance Software Radio Using General Purpose Multi-Core Processors&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.usenix.org/event/nsdi09/tech/slides/tan.pdf&#x3e;&#x3e;, NSDI, 2009, pp. 1-27.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00135">
<othercit>Tennenhouse, et al., &#x201c;SpectrumWare&#x2014;A Software-Oriented Approach to Wireless Signal Processing&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=D99E57C2A2A3CEEF89F66CBA544F774F?doi=10.1.1.17.9618&#x26;rep=rep1&#x26;type=pdf&#x3e;&#x3e;, Telemedia Networks and Systems Group Laboratory for Computer Science, MIT, pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00136">
<othercit>&#x201c;The Kill Rule for Multicore&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=04261283&#x3e;&#x3e;, DAC 2007, ACM 2007, pp. 750-753.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00137">
<othercit>&#x201c;Think Beyond the Box&#x2014;A Software-Defined Approach to RF Test&#x201d;, Published May 13, 2009, retrieved from the internet at &#x3c;&#x3c;http://zone.ni.com/devzone/cda/pub/p/id/750&#x3e;&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00138">
<othercit>Tsou, et al., &#x201c;Latency Profiling for SCA Software Radio&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.sdrforum.org/pages/sdr07/Proceedings/Papers/2.2/2.2-1.pdf&#x3e;&#x3e;, SDR Forum Technical Conference 2007, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00139">
<othercit>&#x201c;Using Flexible-LVDS I/O Pins in APEX II Devices&#x201d;, retrieved on Aug. 13, 2009 at &#x3c;&#x3c;http://www.altera.com/literature/an/an167.pdf&#x3e;&#x3e;, Altera Corporation, Application Note 167, ver 1.1, Aug. 2002, pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00140">
<othercit>Verdu, &#x201c;Multiuser Detection&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://www.cambridge.org/US/catalogue/catalogue.asp?isbn=0521593735&#x3e;&#x3e;, Aug. 1998, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00141">
<othercit>&#x201c;WARP: Wireless Open Access Research Platform&#x201d;, retrieved on Jun. 19, 2009 at &#x3c;&#x3c;http://warp.rice.edu/trac&#x3e;&#x3e;, Rice University, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00142">
<othercit>&#x201c;Waveform Creator has Object-Oriented GUI Optimized for MIMO&#x201d;, Published Jun. 30, 2008, retrieved from the internet at &#x3c;&#x3c;http://news.thomasnet.com/fullstory/545867&#x3e;&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00143">
<othercit>Wu, et al., &#x201c;A Novel Software Radio Platform Based on General PC and Network&#x201d;, 2006 IEEE, Published 2006, retrieved from the internet at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=04149565&#x3e;&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00144">
<othercit>Bahl et al, &#x201c;White Space Networking with Wi-FI like Connectivity,&#x201d; SIGCOMM '09, Barcelona, Spain, Aug. 17-21, 2009, 12 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00145">
<othercit>Chandra et al, &#x201c;A Case for Adapting Channel Width in Wireless Networks,&#x201d; In Proceedings of the ACM SIGCOMM '08 Conference on Data Communication, Aug. 17-22, 2008, Seattle, Washington, 12 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00146">
<othercit>Dutta et al, &#x201c;An Intelligent Physical Layer for Cognitive Radio Networks,&#x201d; Proceedings of the 4th Annual International Conference on Wireless Internet, WICON '08, Nov. 17-19, 2008, 9 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00147">
<othercit>&#x201c;WBX,&#x201d; Ettus Research LLC, retreived from &#x3c;&#x3c;http://www.ettus.com/WBX&#x3e;&#x3e; on Apr. 25, 2011, 1 pg.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00148">
<othercit>&#x201c;Welcome to Ettus Research,&#x201d; Ettus Research LLC, retrieved from &#x3c;&#x3c;http://www.ettus.com&#x3e;&#x3e; on Apr. 25, 2011, 2 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00149">
<othercit>Gockler et al, &#x201c;Parallelisation of Digital Signal Processing in Uniform and Reconfigurable Filter Banks for Satellite Communications,&#x201d; IEEE Asia Pacific Conference on Circuits and Systems, APCCAS 2006, Dec. 4-7, 2006, 4 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00150">
<othercit>Li et al, &#x201c;A Frequency Hopping Spread Spectrum Transmission Scheme for Uncoordinated Cognitive Radios,&#x201d; IEEE International Conference on Acoustics, Speech and Signal Processing, ICASSP 2009, Taipei, Apr. 19-24, 2009, pp. 2345-2348.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00151">
<othercit>Microsoft Research, &#x201c;WhiteFiService Home,&#x201d; retrieved from &#x3c;&#x3c;http://whitespaces.msresearch.us&#x3e;&#x3e; on Apr. 25, 2011, 2 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00152">
<othercit>Mody et al, &#x201c;Machine Learning Based Cognitive Communications in White as Well as the Gray Space,&#x201d; IEEE, Oct. 2007, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00153">
<othercit>Narlanka et al, &#x201c;A Hardware Platform for Utilizing TV Bands With a Wi-Fi Radio,&#x201d; 15th IEEE Workshop on Local &#x26; Metropolitan Area Networks, Lanman 2007, New York, NY, Jun. 10-13, 2007, 5 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00154">
<othercit>Office Action for U.S. Appl. No. 12/631,548, mailed on Jan. 10, 2012, Kun Tan, &#x201c;Analyzing Wireless Technologies Based on Software-Defined Radio&#x201d;, 8 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00155">
<othercit>Park et al, &#x201c;Frequency-Domain Channel Estimation and Equalization for Continuous-Phase Modulations With Superimposed Pilot Sequences,&#x201d; IEEE Transactions on Vehicular Technology, vol. 58, No. 9, Nov. 2009, pp. 4903-4908.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00156">
<othercit>&#x201c;Radio Technology from Full Spectrum used in White Space,&#x201d; Radio Electronics.com, retrieved from &#x3c;&#x3c;http://www.radio-electronics.com/news/radio-receivers/radio-technology-from-full-spectrum-used-48&#x3e;&#x3e;, Sep. 22, 2010, 2 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00157">
<othercit>Rahul et al, &#x201c;Learning to Share: Narrowband-Friendly Wideband Networks,&#x201d; In Proceedings of the ACM SIGCOMM '08 Conference on Data Communication, Aug. 17-22, 2008, Seattle, Washington, 12 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00158">
<othercit>Smirnov et al, &#x201c;The Use of Spectral Analysis in Identifying Applications Runny on Enterprise Data Center Systems,&#x201d; CMG Computer Measurement Group, retrieved from &#x3c;&#x3c;http://www.cmg.org/measureit/issues/mit62/m<sub>&#x2014;</sub>62<sub>&#x2014;</sub>11.html&#x3e;&#x3e;, Aug. 2009, 6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00159">
<othercit>&#x201c;Software Radio,&#x201d; Microsoft Research, retreived from &#x3c;&#x3c;http://research.microsoft.com/sora&#x3e;&#x3e; on Apr. 25, 2011, 3 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00160">
<othercit>Suzuki et al, &#x201c;Proposal of Band-Limited Divided-Spectrum Single Carrier Transmission for Dynamic Spectrum Controlled Access in ISM Band,&#x201d; Personal, Indoor and Mobile Radio Communications, 2009 IEEE 20th International Symposium, Sep. 3-16, 2009, pp. 132-136.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00161">
<othercit>Wang et al, &#x201c;List-Coloring Based Channel Allocation for Open-Spectrum Wireless Networks,&#x201d; IEEE, Sep. 2005, pp. 690-694.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00162">
<othercit>Yang et al, &#x201c;Supporting Demanding Wireless Applications with Frequency-agile Radios,&#x201d; Proceedings of 7th USENIX Symposium on Networked Systems Design and Implementation (NSDI 2010), San Jose, California, Apr. 2010, pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00163">
<othercit>Zaki et al, &#x201c;LTE Wireless Virtualization and Spectrum Management,&#x201d; 2010 Third Joint IFIP, Wireless and Mobile Networking Conference (WMNC), Budapest, Oct. 13-15, 2010, 6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00164">
<othercit>PCT Intl Search Report (PCT/US2010/049013) dtd May 13, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00165">
<othercit>Office Action for U.S. Appl. No. 12/535,415, mailed on Apr. 11, 2012, Kun Tan, &#x201c;Software-Defined Radio Using Multi-Core Processor&#x201d;, 15 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00166">
<othercit>&#x201c;8b/10b encoding&#x201d;, Wikipedia, accessed on Apr. 21, 2011 &#x3c;http://en.wikipedia.org/wiki/8b/10B&#x3e;, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00167">
<othercit>&#x201c;Ethernet Frame&#x201d;, Wikipedia, accessed on Apr. 21, 2011, &#x3c;http://en.wikipedia.org/wiki/Ethernet<sub>&#x2014;</sub>frame&#x3e;, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00168">
<othercit>&#x201c;Low-Voltage Differential Signaling&#x201d;, Wikipedia, accessed on Apr. 21, 2011 &#x3c;http:://en.wikipedia.org/wiki/Low-voltage<sub>&#x2014;</sub>differential<sub>&#x2014;</sub>signaling&#x3e;, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00169">
<othercit>Ma, &#x201c;A Closer Look at LVDS Technology&#x201d;, Pericom, Application Note 41, Nov. 16, 2001. 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00170">
<othercit>Office action for U.S. Appl. No. 12/571,188, mailed on Jun. 6, 2012, Tan et al., &#x201c;Radio Control Board for Software-Defined Radio Platform&#x201d;, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00171">
<othercit>Office action for U.S. Appl. No. 12/631,548, mailed on Jul. 2, 2012, Tan et al., &#x201c;Analyzing Wireless Technologies Based on Software-Defined Radio&#x201d;, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00172">
<othercit>System Packet Interface Level 4 (SPI-4) Phase 2 Revision 1: OC-192 System Interface for Physical and Link Layer Devices, Optical Internetworkig Forum, Oct. 15, 2003, 72 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00173">
<othercit>Office action for U.S. Appl. No. 12/535,415, mailed on Apr. 8, 2013, Tan et al., &#x201c;Software-Defined Radio Using Multi-Core Processor&#x201d;, 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00174">
<othercit>Alocci et al., &#x201c;Development of an IEEE 802.11s Simulation Model for QualNet&#x201d;, Dublin, Ireland, retrieved at http://www.csi.ucd.ie/Staff/jmurphy/publications/1551.pdf, Sep. 2008, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00175">
<othercit>&#x201c;Authorized Ex Parte Contact&#x2014;Unlicensed Operation in the TV Broadcast Bands (ET Docket No. 04-186), FCC.&#x201d;, Retrieved at &#x3c;&#x3c; http://hraunfoss.fcc.gov/edocs<sub>&#x2014;</sub>public/attachmatch /DA-04-4013A1.pdf &#x3e;&#x3e;, Dec. 22, 2004, Pages 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00176">
<othercit>Bhatt, &#x201c;Creating a PCI Express Interconnect&#x201d;, Intel Corporation, 2002, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00177">
<othercit>Borth et al., &#x201c;Considerations for Successful Cognitive Radio Systems in US TV White Space&#x201d;, Proceedings of the 3rd IEEE Symposium on New Frontiers in Dynamic Spectrum Access Networks, Oct. 14-17, 2008, retrieved at &#x3c;&#x3c;http://ieeexplore.ieee.org/stamp/stamp.jsp? tp=&#x26;isnumber=&#x26;arnumber=4658272, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00178">
<othercit>Broch et al., &#x201c;A Performance Comparison of Multi-Hop Wireless Ad Hoc Network Routing Protocols&#x201d;, International Conference on Mobile Computing and Networking, Proceedings of the 4th annual ACM/IEEE international conference on Mobile computing and Networking, Oct. 25-30, 1998, pp. 85-97.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00179">
<othercit>Broch, et al., &#x201c;A Performance Comparison of Multi-Hop Wireless Ad Hoc Network Routing Protocols&#x201d;, Retrieved at &#x3c;&#x3c; http://delivery.acm.org/10.1145/290000/ 288256/p85-broch.pdf?key1=288256&#x26;key2=2437561621&#x26;coll=GUIDE&#x26;dl=GUIDE&#x26;CFID=68071891&#x26;CFTOKEN=72132090 &#x3e;&#x3e;, International Conference on Mobile Computing and Networking, Proceedings of the 4th annual ACM/IEEE international conference on Mobile computing and networking, Oct. 25-30, 1998, pp. 85-97.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00180">
<othercit>Cabric et al., &#x201c;Experimental Study of Spectrum Sensing Based on Energy Detection and Network Cooperation&#x201d;, Proc. of the 1st Int'l Workshop on Technology and Policy for Accessing Spectrum, 2006, retrieved at &#x3c;&#x3c;http://delivery.acm.org/10.1145/1240000/ 1234400/a12-cabric.pdf?key1=1234400&#x26;key2=4956848321&#x26;coll=GUIDE&#x26;dl=GUIDE&#x26;CFID=29023570&#x26;CFTOKEN=14990252, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00181">
<othercit>Chandra et al., &#x201c;Wireless Networking in the TV Bands&#x201d;, retrieved at http://sdr08.cs.ucdavis.edu/sdr-workshop.ppt, Apr. 1, 2009, 34 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00182">
<othercit>Chu, et al., &#x201c;A Case for End System Multicast&#x201d;, Proceedings of the 2000 ACM SIGMETRICS International Conference. 28, Issue 1, Jun. 2000, pp. 1-12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00183">
<othercit>Chu, et al., &#x201c;A Case for End SystemMulticast&#x201d;, Retrieved at &#x3c;&#x3c;http://delivery.acm.org/ 10.1145/340000/339337/p1-chu.pdf?key1=339337&#x26;key2=4147561621&#x26;coll=GUIDE&#x26;dl =GUIDE&#x26;CFID=68072143&#x26;CFTOKEN=60353992 &#x3e;&#x3e;, SIGMETRICS, 2000, pp. 1-12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00184">
<othercit>&#x201c;Cognitive Radio Networks&#x201d;, retrieved at http://www.ece.gatech.edu/research/labs/bwn/CR/Projectdescription.html, Apr. 1, 2009, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00185">
<othercit>Dandawate, et al., &#x201c;Statistical Tests for Presence of Cyclostationarity&#x201d;, Retrieved at &#x3c;&#x3c; http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&#x26;arnumber=317857&#x26;isnumber=7659 &#x3e;&#x3e;, IEEE Transactions on Signal Processing, vol. 42, No. 9, Sep. 1994, pp. 2355-2369.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00186">
<othercit>Deb et al., &#x201c;Dynamic Spectrum Access in DTV Whitespaces Design Rules, Architecture and Algorithms&#x201d;, ACM 978-1-60558-702-8/09/09, MobiCom '09, Sep. 20-25, 2009, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00187">
<othercit>Web page for Ettus Research LLC, &#x201c;The USRP Product Family&#x201d;, Mountain View, California, retrieved at&#x3c;&#x3c;http://www.ettus.com&#x3e;&#x3e;, retrieved on Mar. 31, 2009, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00188">
<othercit>Ettus Research LLC, &#x201c;USRP FAQ&#x201d;, Mountain View, California, retrieved at &#x3c;&#x3c;http://www.ettus.com/faq.html&#x3e;&#x3e;, retrieved retrieved on Mar. 31, 2009, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00189">
<othercit>&#x201c;FCC Adopts Rule for Unlicensed Use of Television White Spaces&#x201d;, Retrieved at &#x3c;&#x3c;http://radiomagonline.com/currents/news/fcc-adopts-rules-unlicensed-white-spaces-1105/&#x3e;&#x3e;, Nov. 5, 2008, pp. 4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00190">
<othercit>&#x201c;FCC Adopts Rules for Unlicensed Use of Television White Spaces&#x201d;, news release from the Federal Communications Commission, Nov. 4, 2008, retrieved at &#x3c;&#x3c;hraunfoss.fcc.gov/edocs<sub>&#x2014;</sub>public/attachmatch/DOC-286566A1.pdf&#x3e;&#x3e;, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00191">
<othercit>FCC Media Bureau, &#x201c;TVQ TV Database&#x201d;, Retrieved at: &#x3c;&#x3c;http://www.fcc.gov/mb/video/tvq. html&#x3e;&#x3e;, Dec. 24, 2009, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00192">
<othercit>&#x201c;FCC Acts to Expedite DTV Tranisition and Clarify DTV Build-Out Rules&#x201d;, news release from the Federal Communications Commission, Nov. 8, 2001, retrieved at http://www.fcc.gov/Bureaus/Mass<sub>&#x2014;</sub>Media/News<sub>&#x2014;</sub>Releases/2001/nrmm0114.html, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00193">
<othercit>Final Office Action for U.S. Appl. No. 12/473,963, mailed on May 1, 2012, Ranveer Chandra, &#x201c;Spectrum Assignment for Networks Over White Spaces and Other Portions of the Spectrum&#x201d;, 14 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00194">
<othercit>Garroppo et al., &#x201c;Notes on Implementing a IEEE 802.11s Mesh Point&#x201d; retrieved at http://recerca.ac.upc.edu/eurongi08/slides/6-1-s.pdf, Apr. 1, 2009, 39 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00195">
<othercit>Goldsmith, Andrea Jo, &#x201c;Design and Performance of High-Speed Communication Systems over Time-Varying Radio Channels&#x201d;, UC Berkeley, Berkeley, California, 1994, 210 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00196">
<othercit>Gurney et al., Geo-location Database Techniques for Incumbent Protection in the TV White Space, IEEE, 978-1-4244-2017-9/08, Jun. 6, 2008, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00197">
<othercit>&#x201c;IEEE 802.22 Working Group on WRANs&#x201d; web page for IEEE 802 LAN/MAN Standards Committee, retrieved at &#x3c;&#x3c;http://www.ieee802.org/22/&#x3e;&#x3e;, retrieved on Mar. 31, 2009, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00198">
<othercit>&#x201c;Demonstrations and Experimentation&#x201d;, IEEE Symposia on New Frontiers in Dynamic Spectrum Access Networks, http://cms.comsoc.org/eprise/main/SiteGen/DYSPAN<sub>&#x2014;</sub>2008/ Content/Home/demonstrations.html, retrieved Mar. 31, 2009, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00199">
<othercit>Jones, et al., &#x201c;FCC Press Release, Evaluation of the Performance of Prototype TV-Band White Space Devices&#x201d;, Retrieved at &#x3c;&#x3c; http://online.wsj.com/public/resources/documents/ fcc10152008.pdf &#x3e;&#x3e;, Oct. 15, 2008, pp. 149.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00200">
<othercit>Katabi, Dina, &#x201c;The Use of IP Anycast for Building Efficient Multicast&#x201d;, Proceedings in Global Telecommunications Conference, Lab. for Computer Science, vol. 3, Dec. 5-9, 1999, pp. 1679-1688.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00201">
<othercit>Kim, et al., &#x201c;In-band Spectrum Sensing in Cognitive Radio Networks: Energy Detection or Feature Detection?&#x201d;, Retr'd at &#x3c;&#x3c; http://fuxi.cs.txstate.edu/&#x2dc;nasdg/papers/2008mobicom/In-band spectrum sensing in cognitive radio networks energy detection or feature detection 2008.pdf &#x3e;&#x3e;, Proc. of 14th ACM Int'l Conf. Mobile computing and networking, Sep. 14-19, 2008, pp. 14-25.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00202">
<othercit>Kim et al., &#x201c;Fast Discovery of Spectrum Opportunities in Cognitive Radio Networks&#x201d;, Proceedings of the 3rd IEEE Symposium on New Frontiers in Dynamic Spectrum Access Networks, Oct. 14-17, 2008, retrieved at &#x3c;&#x3c;http://kabru.eecs.umich.edu//papers/ publications/2008/main.pdf&#x3e;&#x3e;, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00203">
<othercit>Kim, et al., &#x201c;In-band Spectrum Sensing in Cognitive Radio Networks: Energy Detection or Feature Detection?&#x201d;,Proc. of 14th ACM Int'l Conf. on Mobile computing and networking,Sep. 14-19, 2008, http://kabru.eecs.umich.edu//papers/publications/2008/com0950-km.pdf, pp. 14-25.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00204">
<othercit>Kotz, et al., &#x201c;Analysis of a Campus-wide Wireless Network&#x201d;. In Proceedings of the Eighth Annual International Conference on Mobile Computing and Networking, pp. 107-118. (MOBICOM'02, Sep. 23-26, 2002, Atlanta, Georgia, USA). Revised and corrected as Dartmouth CS Technical Report TR2002-432.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00205">
<othercit>Liu, et al., &#x201c;Sensing-based Opportunistic Channel Access&#x201d;, Retrieved at &#x3c;&#x3c; http://www.cs.ucdavis.edu/&#x2dc;liu/paper/sensing.pdf &#x3e;&#x3e;, Mobile Networks and Applications, vol. 11, No. 4, Aug. 2006, pp. 1-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00206">
<othercit>Liu, et al., &#x201c;Sensing-based Opportunistic Channel Access&#x201d;, Retrieved at &#x3c;&#x3c;http://www.cs.ucdavis.edu/&#x2dc;liu/paper/sensing.pdf &#x3e;&#x3e;, Mobile Networks and Applications, vol. 11, No. 4, Aug. 2006, pp. 1-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00207">
<othercit>&#x201c;Longley-Rice Methodology for Evaluating TV Coverage and Interference.&#x201d;, Retrieved at &#x3c;&#x3c; http://www.fcc.gov/Bureaus/Engineering<sub>&#x2014;</sub>Technology/Documents/bulletins/oet69/oet69 .pdf &#x3e;&#x3e;, Feb. 6, 2004, pp. 15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00208">
<othercit>Matinmikko et al., &#x201c;Cognitive Radio: An intelligent Wireless Communication System&#x201d;, Retrieved at &#x3c;&#x3c; http://www.vtt.fi/inf/julkaisut/muut/2008/CHESS <sub>&#x2014;</sub>Research<sub>&#x2014;</sub>Report.pdf &#x3e;&#x3e;, Mar. 14, 2008, pp. 155.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00209">
<othercit>Mishra et al., &#x201c;How much white space is there?&#x201d;, Technical Report No. UCB/EECS-2009-3, Jan. 11, 2009, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00210">
<othercit>Moscibroda et al., &#x201c;Load-Aware Spectrum Distribution in Wireless LANs&#x201d;, IEEE International Conference on Network Protocols, Oct. 19-22, 2008, retrieved at &#x3c;&#x3c;http://www.ieee-icnp.org/2008/papers/Index14.pdf&#x3e;&#x3e;, pp. 137-146.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00211">
<othercit>Nekovee, Maziar., &#x201c;Quantifying the TV White Spaces Spectrum Opportunity for Cognitive Radio Access&#x201d;, Retrieved at &#x3c;&#x3c; www.springerlink.com/index/p1hrw58u75027542.pdf &#x3e;&#x3e;, First International ICST Conference, EuropeComm, Aug. 11-13, 2009, pp. 46-57.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00212">
<othercit>National Geophysical Data Center, &#x201c;The Global Land One-Km Base Elevation Project (GLOBE), &#x201d;, Retrieved at &#x3c;&#x3c;http://www.ngdc.noaa.gov/mgg/topo/globe.html &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00213">
<othercit>NYCwireless Testimony for NY City Council Hearing: The Regulation and Use of the Unallocated Portion of the Radio Spectrum, Also Known as White Spaces http://www.nycwireless.net/2008/09/nycwireless-testimony-for-ny-city-council-hearing-the-regulation-and-use-of-the-unallocated-portion-of-the-radio-spectrum-also-known-as-white-spaces/, Mar. 30, 2009, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00214">
<othercit>Office action for U.S. Appl. No. 12/571,188, mailed on Oct. 25, 2012, Tan et al., &#x201c;Radio Control Board for Software-Defined Radio Platform&#x201d;, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00215">
<othercit>Office action for U.S. Appl. No. 12/535,415, mailed on Nov. 21, 2012, Tan et al., &#x201c;Software-Defined Radio Using Multi-Core Processor&#x201d;, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00216">
<othercit>Office Action for U.S. Appl. No. 12/473,963, mailed on Nov. 9, 2011, Ranveer Chandra, &#x201c;Spectrum Assignment for Networks Over White Spaces and Other Portions of the Spectrum&#x201d;, 12 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00217">
<othercit>Otsason et al., &#x201c;Accurate GSM Indoor Localization&#x201d;, UbiComp Sep. 11-14, 2005, LNCS vol. 3660, 2005, pp. 141-158.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00218">
<othercit>PCT International Search Report and Written Opinion for PCT Application No. PCT/US2010/036752 mailed May 13, 2011, 9 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00219">
<othercit>PCT International Search Report and Written Opinion for PCT Application No. PCT/US2010/036756 mailed May 13, 2011, 9 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00220">
<othercit>PCT International Search Report and Written Opinion for PCT Application No. PCT/US2011/0341302 mailed Dec. 28, 2011, 9 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00221">
<othercit>Plummer Jr., et al., &#x201c;A Cognitive Spectrum Assignment Protocol Using Distributed Conflict Graph Construction&#x201d;, &#x3c;&#x3c; http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=04455299 &#x3e;&#x3e;, In Proceedings IEEE MILCOM, Oct. 2007, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00222">
<othercit>Plummer, et al., &#x201c;A Cognitive Spectrum Assignment Protocol Using Distributed Conflict Graph Construction&#x201d;, Retrieved at &#x3c;&#x3c; http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=04455299 &#x3e;&#x3e;, In Proceedings IEEE MILCOM, Oct. 2007, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00223">
<othercit>Radio Magazine, &#x201c;FCC Adopts Rules for Unlicensed Use of Television White Spaces&#x201d;, Retrieved at &#x3c;&#x3c;http://radiomagonline.com/currents/news/fcc-adopts-rules-unlicensed-white-spaces-1105/ &#x3e;&#x3e;, Nov. 5, 2008, pp. 4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00224">
<othercit>Ratnasamy et al., &#x201c;Revisiting IP Multicast&#x201d;, ACM, 1-59593-308-5/06/0009, SigComm '06, Sep. 11-15, 2006, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00225">
<othercit>Rix et al., &#x201c;Perceptual Evaluation of Speech Quality (PESQ)&#x2014;A New Method for Speech Quality Assessment of Telephone Networks and Codecs&#x201d;, Proceedings of the 2001 IEEE International Conference Acoustics, Speech and Signal Processing, vol. 2, 2001, http://ieeexplore. ieee.org/stamp/stamp.jsp?tp=&#x26;isnumber=&#x26;arnumber=941023, retrieved on Apr. 1, 2009, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00226">
<othercit>&#x201c;Rosum Corporation&#x201d;, Retrieved at &#x3c;&#x3c; http://rosum.com/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00227">
<othercit>Rosum Corporation, &#x201c;Reliable, In-Building&#x201d;, Retrieved at &#x3c;&#x3c; http://rosum.com/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00228">
<othercit>Sahai et al., Spectrum Sensing Fundamental Limits and Practical Challenges, Retrieved at: &#x3c;&#x3c; http://www.eecs.berkeley.edu/&#x2dc;sahai/Presentations/Dyspan<sub>&#x2014;</sub>2005 tutorial<sub>&#x2014;</sub>part<sub>&#x2014;</sub>I.pdf, 2005, 138 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00229">
<othercit>Web page for Scalable Network Technologies, Inc., Los Angeles, California, retrieved at &#x3c;&#x3c; http://www.scalable-networks.com&#x3e;&#x3e;, retrieved on Mar. 31, 2009, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00230">
<othercit>Shellhammer et al., &#x201c;Technical Challenges for Cognitive Radio in the TV White Space Spectrum&#x201d;, ITA Conference, San Diego, CA, Feb. 8-13, 2009, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00231">
<othercit>&#x201c;Show My White Space&#x201d;, Retrieved at &#x3c;&#x3c; http://showmywhitespace.com/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00232">
<othercit>&#x201c;Shuttle Radar Topograph Mission (SRTM)&#x201d;, Retrieved at &#x3c;&#x3c; http://www2.jpl.nasa.gov/srtm/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00233">
<othercit>&#x201c;Shuttle Radar Topography Mission (SRTM)&#x201d;, Retrieved at &#x3c;&#x3c; http://www2.jpl.nasa.gov/srtm/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00234">
<othercit>&#x201c;Skyhook Wireless&#x201d;, Retrieved at &#x3c;&#x3c; http://skyhookwireless.com/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00235">
<othercit>Stirling, &#x201c;White Spaces&#x2014;the New Wi-Fi?&#x201d;, Retrieved at &#x3c;&#x3c; http://www.intellectbooks.co.uk/ File:download,id=761/JDTV.1.1.69.pdf &#x3e;&#x3e;, International Journal of Digital Television, vol. 1, No. 1, 2010, pp. 16.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00236">
<othercit>Subramani, et al., &#x201c;Spectrum Scanning and Reserve Channel Methods for Link Maintenance in Cognitive Radio Systems&#x201d;, Retrieved at &#x3c;&#x3c; http://rose.bris.ac.uk /dspace/bitstream/1983/1232/1/siva<sub>&#x2014;</sub>IEEE<sub>&#x2014;</sub>VTC<sub>&#x2014;</sub>spring%202008.pdf &#x3e;&#x3e;, Proceedings of the 67th IEEE Vehicular Technology Conference, VTC, May 11-14, 2008, pp. 1944-1948.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00237">
<othercit>Subramani, et al., &#x201c;Spectrum Scanning and Reserve Channel Methods for Link Maintenance in Cognitive Radio Systems&#x201d;, Retrieved at &#x3c;&#x3c; http://rose.bris.ac.uk /dspace/bitstream/1983/1232/1/siva<sub>&#x2014;</sub>IEEE<sub>&#x2014;</sub>VTC<sub>&#x2014;</sub>spring%202008.pdf &#x3e;&#x3e;, Proceedings of the 67th IEEE Vehicular Technology Conference, VTC, May 11-14, 2008, pp. 1944-1948.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00238">
<othercit>Tan et al., &#x201c;SORA: High Performance Software Radio Using General Purpose Multi-core Processors&#x201d;, Proceedings of the 6th USENIX Symposium of Networked Systems Design and Implementation, 2009, http://research.microsoft.com/pubs/79927/Sora-camera-ready.pdf, Apr. 1, 2009, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00239">
<othercit>Tandra et al., &#x201c;SNR Wall for Signal Detection&#x201d;, IEEE Journal of Selected Topics in Signal Processing, vol. 2, No. 1, Feb. 2008, pp. 4-17.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00240">
<othercit>Texas Instruments, &#x201c;Texas Instruments, 10-MHz to 66-MHz, 10:1 LVDS Serializer/Deserializer&#x201d;, &#x3c;http://www.ti.com&#x3e;, 2004, 29 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00241">
<othercit>&#x201c;The ITS Irregular Terrain Model Algorithm, NTIA, Department of Commerce.&#x201d;, Retrieved at &#x3c;&#x3c; http://flattop.its.bldrdoc.gov/itm.html &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00242">
<othercit>&#x201c;TV Fool&#x201d;, Retrieved at &#x3c;&#x3c; http://www.tvfool.com/ &#x3e;&#x3e;, Retrieved Date: Dec. 24, 2009, pp. 2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00243">
<othercit>Web page for &#x201c;TV Fool&#x201d;, retrieved at http://www.tvfool.com, retrieved on Mar. 31, 2009, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00244">
<othercit>Urkowitz, &#x201c;Energy Detection of Unknown Deterministic Signals&#x201d;, Proceedings of the IEEE, vol. 55, No. 4, Apr. 1967, pp. 523-531.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00245">
<othercit>Whitt, Richard., &#x201c;Introducing the White Spaces Database Group&#x201d;, Retrieved at &#x3c;&#x3c;http://googlepublicpolicy.blogspot.com/2009/02/introducing-white-spaces-database-group.html &#x3e;&#x3e;, Feb. 4, 2009, pp. 4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00246">
<othercit>Yuan, et al., &#x201c;KNOWS: Kognitiv Networking Over White Spaces&#x201d;, Retrieved at &#x3c;&#x3c; http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.123.4056&#x26;rep=rep1&#x26;type=pdf &#x3e;&#x3e;, IEEE Dynamic Spectrum Access Networks (DySPAN), Apr. 2007, pp. 12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>25</number-of-drawing-sheets>
<number-of-figures>25</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110138259</doc-number>
<kind>A1</kind>
<date>20110609</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tan</last-name>
<first-name>Kun</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Jiansong</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Yongguang</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Liu</last-name>
<first-name>He</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Tan</last-name>
<first-name>Kun</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Jiansong</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Yongguang</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Liu</last-name>
<first-name>He</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &#x26; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>McCarthy</last-name>
<first-name>Christopher</first-name>
<department>2113</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An extensive use of look-up table (LUT) and single instruction multiple data (SIMD) in different algorithms in a software-defined radio (SDR) system is described. In particular, the LUT is used during spreading modulation, mapping and spreading, scrambling, de-scrambling, soft demapping, and the like. The SIMD is executed by a multi-core processor during implementation of a &#x201c;min&#x201d; operation to find an optimal path in a Trellis diagram for a Viterbi decoder.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="148.42mm" wi="186.35mm" file="US08627189-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="266.11mm" wi="187.28mm" orientation="landscape" file="US08627189-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="218.61mm" wi="158.58mm" orientation="landscape" file="US08627189-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="257.56mm" wi="172.04mm" orientation="landscape" file="US08627189-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="256.29mm" wi="131.74mm" orientation="landscape" file="US08627189-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="220.39mm" wi="175.18mm" orientation="landscape" file="US08627189-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="283.55mm" wi="186.35mm" orientation="landscape" file="US08627189-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="263.40mm" wi="159.94mm" orientation="landscape" file="US08627189-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="272.37mm" wi="191.26mm" orientation="landscape" file="US08627189-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="267.46mm" wi="187.71mm" orientation="landscape" file="US08627189-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="270.17mm" wi="145.12mm" file="US08627189-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="255.78mm" wi="181.86mm" orientation="landscape" file="US08627189-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="262.97mm" wi="157.65mm" file="US08627189-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="251.29mm" wi="185.50mm" orientation="landscape" file="US08627189-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="265.18mm" wi="155.02mm" file="US08627189-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="172.89mm" wi="173.40mm" orientation="landscape" file="US08627189-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="195.33mm" wi="176.53mm" orientation="landscape" file="US08627189-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="252.22mm" wi="156.38mm" file="US08627189-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="224.45mm" wi="179.66mm" orientation="landscape" file="US08627189-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="271.02mm" wi="181.44mm" file="US08627189-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="211.41mm" wi="176.95mm" orientation="landscape" file="US08627189-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="264.75mm" wi="156.80mm" file="US08627189-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="267.46mm" wi="150.54mm" file="US08627189-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="240.54mm" wi="175.18mm" orientation="landscape" file="US08627189-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="249.51mm" wi="108.88mm" file="US08627189-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="235.20mm" wi="181.02mm" orientation="landscape" file="US08627189-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Software-defined radio (SDR) holds the promise of fully programmable wireless communication systems, effectively supplanting conventional radio technologies, which typically have the lowest communication layers implemented primarily in fixed, custom hardware circuits. The SDR may include an architecture that optimizes hardware and software sections to cope up with relatively higher data rates transfer during a digital signal processing. In an implementation, the SDR&#x2014;in wireless communication systems&#x2014;uses the hardware section to support the relatively higher data rates transfer, which can be implemented by software algorithms in the software section.</p>
<p id="p-0003" num="0002">In wireless communication systems, streams of data can be transmitted and/or received by the SDR architecture. The streams of data can include sequence of bits that were encoded at a transmitting side, and decoded at a receiving end. In an implementation, decoding errors may result due to different sources, such as, noise, interferences, and the like, during the transmission of the sequence of bits (i.e., streams of data).</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview of the disclosed subject matter, and is not intended to identify key/critical elements or to delineate the scope of such subject matter. A purpose of the summary is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.</p>
<p id="p-0005" num="0004">In an implementation, software-defined radio (SDR) architecture includes transmitting and receiving of data streams. During the transmitting and/or receiving of the data streams, a look-up table (LUT) and Single Instruction Multiple Data (SIMD) instruction sets can be extensively used in a transmitting block and/or a receiving block of the SDR architecture.</p>
<p id="p-0006" num="0005">To the accomplishment of the foregoing and related ends, certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the disclosed subject matter can be practiced, all of which are intended to be within the scope of the disclosed subject matter. Other advantages and novel features can become apparent from the following detailed description when considered in conjunction with the drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">The detailed description is set forth with reference to the accompanying drawing figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items or features.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary architecture according to some implementations disclosed herein.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary hardware and logical configuration of a computing device according to some implementations.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a representation of an exemplary radio control board and RF front end according to some implementations.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> illustrates exemplary DMA memory access according to some implementations.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary logical configuration according to some implementations.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6A</figref> illustrates an algorithm optimization table according to some implementations.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6B</figref> illustrates optimized PHY blocks according to some implementations.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6C</figref> illustrates optimized PHY blocks according to some implementations.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates an exemplary memory layout for SIMD (Single Instruction Multiple Data) processing according to some implementations.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates a flowchart of an exemplary process for SIMD processing according to some implementations.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7C</figref> illustrates an exemplary diagram showing processing using lookup tables according to some implementations.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7D</figref> illustrates a flowchart of an exemplary process using lookup tables according to some implementations.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary convolutional encoder.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a flowchart of an exemplary process using lookup tables according to some implementations.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an exemplary spread modulation using a look up table.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an exemplary decoder according to some implementations.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 12</figref> illustrates a flowchart of an exemplary process using lookup tables according to some implementations.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an exemplary soft demapper using a look up table</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 14</figref> illustrates a flowchart of an exemplary process using lookup tables according to some implementations.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 15A</figref> illustrates an exemplary synchronized First-In-First-Out (FIFO) buffer according to some implementations.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 15B</figref> illustrates a flowchart of an exemplary process of a producer according to some implementations.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 15C</figref> illustrates a flowchart of an exemplary process of a consumer according to some implementations.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 16A</figref> illustrates an example of an SDR according to some implementations.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 16B</figref> illustrates an exemplary process for exclusively performing SDR processing on the one or more cores.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 17</figref> illustrates exemplary MAC processing according to some implementations.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<heading id="h-0005" level="1">Overview</heading>
<p id="p-0033" num="0032">Implementations disclosed herein present a fully programmable software-defined radio (SDR) platform and system able to be implemented on general-purpose computing devices, including personal computer (PC) architectures. Implementations of the SDR herein combine the performance and fidelity of specialized-hardware-based SDR platforms with the programmability and flexibility of general-purpose processor (GPP) SDR platforms. Implementations of the SDR herein use both hardware and software techniques to address the challenges of using general-purpose computing device architectures for high-speed SDR platforms. In some implementations of the SDR herein, hardware components include a radio front end for radio frequency (RF) reception and transmission, and a radio control board for high-throughput and low-latency data transfer between the radio front end and a memory and processor on the computing device.</p>
<p id="p-0034" num="0033">Implementations of the SDR herein make use of features of multi-core processor architectures to accelerate wireless protocol processing and satisfy protocol-timing requirements. For example, implementations herein may use dedicated CPU cores, lookup tables stored in large low-latency caches, and SIMD (Single Instruction Multiple Data) processor extensions for carrying out highly efficient physical layer processing on general-purpose multiple-core processors. Some exemplary implementations described herein include an SDR that seamlessly interoperates with commercial 802.11a/b/g network interface controllers (NICs), and achieve performance that is equivalent to that of commercial NICs at multiple different modulations.</p>
<p id="p-0035" num="0034">Furthermore, some implementations are directed to a fully programmable software radio platform and system that provides the high performance of specialized SDR architectures on a general-purpose computing device, thereby resolving the SDR platform dilemma for developers. Using implementations of the SDR herein, developers can implement and experiment with high-speed wireless protocol stacks, e.g., IEEE 802.11a/b/g/n, using general-purpose computing devices. For example, using implementations herein, developers are able to program in familiar programming environments with powerful programming and debugging tools on standard operating systems. Software radios implemented on the SDR herein may appear like any other network device, and users are able to run unmodified applications on the software radios herein while achieving performance similar to commodity hardware radio devices.</p>
<p id="p-0036" num="0035">Furthermore, implementations of the SDR herein use both hardware and software techniques to address the challenges of using general-purpose computing device architectures for achieving a high-speed SDR. Implementations are further directed to an inexpensive radio control board (RCB) coupled with a radio frequency (RF) front end for transmission and reception. The RCB bridges the RF front end with memory of the computing device over a high-speed and low-latency PCIe (Peripheral Component Interconnect Express) bus. By using a PCIe bus, some implementations of the RCB can support 16.7 Gbps throughput (e.g., in PCIe &#xd7;8 mode) with sub-microsecond latency, which together satisfies the throughput and timing requirements of modern wireless protocols, while performing all digital signal processing using the processor and memory of a general purpose computing device. Further, while examples herein use PCIe protocol, other high-bandwidth protocols may alternatively be used, such as, for example, HyperTransport&#x2122; protocol.</p>
<p id="p-0037" num="0036">Additionally, to meet physical layer (PHY) processing requirements, implementations of the SDR herein leverage various features of multi-core architectures in commonly available general-purpose processors. Implementations of the SDR herein also include a software arrangement that explicitly supports streamlined processing to enable components of a signal-processing pipeline to efficiently span multiple cores. For example, implementations herein change the conventional implementation of PHY components to extensively take advantage of lookup tables (LUTs), thereby trading off memory in place of computation, which results in reduced processing time and increased performance. For instance, implementations herein substantially reduce the computational requirements of PHY processing by utilizing large, low-latency caches available on conventional GPPs to store the LUTs that have been previously computed. In addition, implementations of the SDR herein use SIMD (Single Instruction Multiple Data) extensions in existing processors to further accelerate PHY processing. Furthermore, to meet the real-time requirements of high-speed wireless protocols, implementations of the SDR herein provide a new kernel service, core dedication, which allocates processor cores exclusively for real-time SDR tasks. The core dedication can be used to guarantee the computational resources and precise timing control necessary for SDR on a general-purpose computing device. Thus, implementations of the SDR herein are able fully support the complete digital processing of high-speed radio protocols, such as 802.11a/b/g/n, CDMA, GSM, WiMax and various other radio protocols, while using a general purpose computing device. Further, it should be noted that while various radio protocols are discussed in the examples herein, the implementations herein are not limited to any particular radio protocol.</p>
<p id="h-0006" num="0000">Architecture Implementations</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary architecture of an SDR platform and system <b>100</b> according to some implementations herein. The SDR platform and system <b>100</b> includes one or more multi-core processors <b>102</b> having a plurality of cores <b>104</b>. In the illustrated implementation, multi-core processor <b>102</b> has eight cores <b>104</b>-<b>1</b>, . . . , <b>104</b>-<b>8</b>, but other implementations herein are not limited to any particular number of cores. Each core <b>104</b> includes one or more corresponding onboard local caches <b>106</b>-<b>1</b>, . . . , <b>106</b>-<b>8</b> that are used by the corresponding core <b>104</b>-<b>1</b>, . . . <b>104</b>-<b>8</b>, respectively, during processing. Additionally, multi-core processor <b>102</b> may also include one or more shared caches <b>108</b> and a bus interface <b>110</b>. Examples of suitable multi-core processors include the Xenon&#x2122; processor available from Intel Corporation of Santa Clara, Calif., USA, and the Phenom&#x2122; processor available from Advanced Micro Devices of Sunnyvale, Calif., USA, although implementations herein are not limited to any particular multi-core processor. In the example illustrated, two of the cores, cores <b>104</b>-<b>5</b> and <b>104</b>-<b>6</b> are performing processing for the SDR, while the remaining cores <b>104</b>-<b>1</b> through <b>104</b>-<b>4</b> and <b>104</b>-<b>7</b> through <b>104</b>-<b>8</b> are performing processing for other applications, the operating system, or the like, as will be described additionally below. Further, in some implementations, two or more multi-core processors <b>102</b> can be provided, and cores <b>104</b> across the two or more multi-core processors can be used for SDR processing.</p>
<p id="p-0039" num="0038">Multi-core processor <b>102</b> is in communication via bus interface <b>110</b> with a high-throughput, low-latency bus <b>112</b>, and thereby to a system memory <b>114</b>. As mentioned above, bus <b>112</b> may be a PCIe bus or other suitable bus having a high data throughput with low latency. Further, bus <b>112</b> is also in communication with a radio control board (RCB) <b>116</b>. As is discussed further below, radio control board <b>116</b> may be coupled to an interchangeable radio front end (RF front end) <b>118</b>. The RF front end <b>118</b> is a hardware module that receives and/or transmits radio signals through an antenna (not shown in <figref idref="DRAWINGS">FIG. 1</figref>). In some implementations of the SDR architecture herein, the RF front end <b>118</b> represents a well-defined interface between the digital and analog domains. For example, in some implementations, RF front end <b>118</b> may contain analog-to-digital (A/D) and digital-to-analog (D/A) converters, and necessary circuitry for radio frequency transmission, as is discussed further below.</p>
<p id="p-0040" num="0039">During receiving, the RF front end <b>118</b> acquires an analog RF waveform <b>120</b> from the antenna, possibly down-converts the waveform to a lower frequency, and then digitizes the analog waveform into discrete digital samples <b>122</b> before transferring the digital samples <b>122</b> to the RCB <b>116</b>. During transmitting, the RF front end <b>118</b> accepts a stream of software-generated digital samples <b>122</b> from a software radio stack <b>124</b> (i.e., software that generates the digital samples, as discussed below), and synthesizes the corresponding analog waveform <b>120</b> before emitting the waveform <b>120</b> via the antenna. Since all signal processing is done in software on the multi-core processor <b>102</b>, the design of RF front end <b>118</b> can be rather generic. For example, RF front end <b>118</b> can be implemented in a self-contained module with a standard interface to the RCB <b>116</b>. Multiple wireless technologies defined on the same frequency band can use the same RF front end hardware <b>118</b>. Furthermore, various different RF front ends <b>118</b> designed for different frequency bands can be coupled to radio control board <b>116</b> for enabling radio communication on various different frequency bands. Therefore, implementations herein are not limited to any particular frequency or wireless technology.</p>
<p id="p-0041" num="0040">According to some implementations herein, RCB <b>116</b> is a PC interface board optimized for establishing a high-throughput, low-latency path for transferring high-fidelity digital signals between the RF front end <b>118</b> and memory <b>114</b>. The interfaces and connections between the radio front end <b>118</b> and multi-core processor <b>102</b> must enable sufficiently high throughput to transfer high-fidelity digital waveforms. For instance, in order to support a 20 MHz channel for 802.11 protocol, the interfaces should sustain 1.28 Gbps. By way of comparison, conventional interfaces, such as USB 2.0 (&#x2266;480 Mbps) or Gigabit Ethernet (&#x2266;1 Gbps) are not able to meet this requirement. Accordingly, to achieve the required system throughput, some implementations of the RCB <b>116</b> use a high-speed, low-latency bus <b>112</b>, such as PCIe. With a maximum throughput of 64 Gbps (e.g., PCIe &#xd7;32) and sub-microsecond latency, PCIe is easily able to support multiple gigabit data rates for sending and receiving wireless signals over a very wide band or over many MIMO channels. Further, the PCIe interface is typically common in many conventional general-purpose computing devices.</p>
<p id="p-0042" num="0041">A role of the RCB <b>116</b> is to act as a bridge between the synchronous data transmission at the RF front end <b>118</b> and the asynchronous processing on the processor <b>102</b>. The RCB <b>116</b> implements various buffers and queues, together with a large onboard memory, to convert between synchronous and asynchronous streams and to smooth out bursty transfers between the RCB <b>116</b> and the system memory <b>114</b>. The large onboard memory further allows caching of pre-computed waveforms for quick transmission of the waveforms, such as when acknowledging reception of a transmission, thereby adding additional flexibility for software radio processing.</p>
<p id="p-0043" num="0042">Finally, the RCB <b>116</b> provides a low-latency control path for software to control the RF front end hardware <b>118</b> and to ensure that the RF front end <b>118</b> is properly synchronized with the processor <b>102</b>. For example, wireless protocols have multiple real-time deadlines that need to be met. Consequently, not only is processing throughput a critical requirement, but the processing latency should also meet certain response deadlines. For example, some Media Access Control (MAC) protocols also require precise timing control at the granularity of microseconds to ensure certain actions occur at exactly pre-scheduled time points. The RCB <b>116</b> of implementations herein also provides for such low latency control. Additional details of implementations of the RCB <b>116</b> are described further below.</p>
<p id="h-0007" num="0000">Exemplary Computing Device Implementation</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary depiction of a computing device <b>200</b> that can be used to implement the SDR implementations described herein, such as the SDR platform and system <b>100</b> described above with reference to <figref idref="DRAWINGS">FIG. 1</figref>. The computing device <b>200</b> includes one or more multi-core processors <b>202</b>, a memory <b>204</b>, one or more mass storage devices or media <b>206</b>, communication interfaces <b>208</b>, and a display and other input/output (I/O) devices <b>210</b> in communication via a system bus <b>212</b>. Memory <b>204</b> and mass storage media <b>206</b> are examples of computer-readable storage media able to store instructions which cause computing device <b>200</b> to perform the various functions described herein when executed by the processor(s) <b>202</b>. For example, memory <b>204</b> may generally include both volatile memory and non-volatile memory (e.g., RAM, ROM, or the like). Further, mass storage media <b>206</b> may generally include hard disk drives, solid-state drives, removable media, including external and removable drives, memory cards, Flash memory, or the like. The computing device <b>200</b> can also include one or more communication interfaces <b>208</b> for exchanging data with other devices, such as via a network, direct connection, or the like, as discussed above. The display and other input/output devices <b>210</b> can include a specific output device for displaying information, such as a display, and various other devices that receive various inputs from a user and provide various outputs to the user, and can include, for example, a keyboard, a mouse, audio input/output devices, a printer, and so forth.</p>
<p id="p-0045" num="0044">Computing device <b>200</b> further includes radio control board <b>214</b> and RF front end <b>216</b> for implementing the SDR herein. For example, system bus <b>212</b> may be a PCIe compatible bus, or other suitable high throughput, low latency bus. Radio control board <b>214</b> and RF front end <b>216</b> may correspond to radio control board <b>116</b> and RF front end <b>118</b> described above with reference to <figref idref="DRAWINGS">FIG. 1</figref>, and as also described below, such as with reference to <figref idref="DRAWINGS">FIG. 3</figref>. Furthermore, an RCB control module <b>218</b> may be stored in memory <b>204</b> or other computer-readable storage media for controlling operations on RCB <b>214</b>, as is described additionally below. The computing device <b>200</b> described herein is only one example of a computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer architectures that can implement the SDR herein. Neither should the computing device <b>200</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the computing device <b>200</b>.</p>
<p id="p-0046" num="0045">Furthermore, implementations of SDR platform and system <b>100</b> described above can be employed in many different computing environments and devices for enabling a software-defined radio in addition to the example of computing device <b>200</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. Generally, many of the functions described with reference to the figures can be implemented using software, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The term &#x201c;logic&#x201d;, &#x201c;module&#x201d; or &#x201c;functionality&#x201d; as used herein generally represents software, hardware, or a combination of software and hardware that can be configured to implement prescribed functions. For instance, in the case of a software implementation, the term &#x201c;logic,&#x201d; &#x201c;module,&#x201d; or &#x201c;functionality&#x201d; can represent program code (and/or declarative-type instructions) that perform specified tasks when executed on a processing device or devices (e.g., CPUs or processors). The program code can be stored in one or more computer readable memory devices, such as memory <b>204</b> and/or mass storage media <b>206</b>, or other computer readable storage media. Thus, the methods and modules described herein may be implemented by a computer program product. The computer program product may include computer-readable media having a computer-readable program code embodied therein. The computer-readable program code may be adapted to be executed by one or more processors to implement the methods and/or modules of the implementations described herein. The terms &#x201c;computer-readable storage media&#x201d;, &#x201c;processor-accessible storage media&#x201d;, or the like, refer to any kind of machine storage medium for retaining information, including the various kinds of memory and storage devices discussed above.</p>
<p id="h-0008" num="0000">Radio Control Board</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an exemplary implementation of a radio control board (RCB) <b>302</b> and RF front end <b>304</b>, that may correspond to the RCB <b>116</b>, <b>214</b> and RF front end <b>118</b>, <b>216</b> described above. In the example illustrated, RCB <b>302</b> includes functionality for controlling the transfer of data between the RF front end <b>304</b> and a system bus <b>306</b>, such as buses <b>112</b>, <b>212</b> discussed above. In the illustrated embodiment, the functionality is a field-programmable gate array (FPGA) <b>308</b>, which may be a Virtex-5 FPGA available from Xilinx, Inc., of San Jose, Calif., USA, one or more other suitable FPGAs, or other equivalent circuitry configured to accomplish the functions described herein. RCB <b>302</b> includes a direct memory access (DMA) controller <b>310</b>, a bus controller <b>312</b>, registers <b>314</b>, an SDRAM controller <b>316</b>, and an RF controller <b>318</b>. RCB <b>302</b> further includes a first FIFO buffer <b>320</b> for acting as a first FIFO for temporarily storing digital samples received from RF front end <b>304</b>, and a second FIFO buffer <b>322</b> for temporarily storing digital samples to be transferred to RF front end <b>304</b>. The DMA controller <b>310</b> controls the transfer of received digital samples to the system bus <b>306</b> via the bus controller <b>312</b>. SDRAM controller <b>316</b> controls the storage of data in onboard memory <b>324</b>, such as digital samples, pre-generated waveforms, and the like. As an example only, memory <b>324</b> may consist of 256 MB of DDR2 SDRAM.</p>
<p id="p-0048" num="0047">The RCB <b>302</b> can connect to various different RF front ends <b>304</b>. One suitable such front end <b>304</b> is available from Rice University, Houston, Tex., USA, and is referred to as the Wireless Open-Access Research Platform (WARP) front end. The WARP front end is capable of transmitting and receiving a 20 MHz channel at 2.4 GHz or 5 GHz. In some implementations, RF front end <b>304</b> includes an RF circuit <b>326</b> configured as an RF transceiver for receiving radio waveforms from an antenna <b>328</b> and for transmitting radio waveforms via antenna <b>328</b>. RF front end <b>304</b> further may include an analog-to-digital converter <b>330</b> and a digital-to-analog converter <b>332</b>. As discussed above, analog-to-digital converter <b>330</b> converts received radio waveforms to digital samples for processing, while digital-to-analog converter <b>332</b> converts digital samples generated by the processor to radio waveforms for transmission by RF circuit <b>326</b>. Furthermore, it should be noted that implementations herein are not limited to any particular front end <b>304</b>, and in some implementations, the entire front end <b>304</b> may be incorporated into RCB <b>302</b>. Alternatively, in other implementations, analog-to-digital converter <b>330</b> and digital-to-analog converter <b>332</b> may be incorporated into RCB <b>302</b>, and RF front end <b>304</b> may merely have an RF circuit <b>326</b> and antenna <b>328</b>. Other variations will also be apparent in view of the disclosure herein.</p>
<p id="p-0049" num="0048">In the implementation illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the DMA controller <b>310</b> and bus controller <b>312</b> interface with the memory and processor on the computing device (not shown in <figref idref="DRAWINGS">FIG. 3</figref>) and transfer digital samples between the RCB <b>302</b> and the system memory on the computing device, such as memory <b>114</b>, <b>204</b> discussed above. RCB software control module <b>218</b> discussed above with reference to <figref idref="DRAWINGS">FIG. 2</figref> sends commands and reads RCB states through RCB registers <b>314</b>. The RCB <b>302</b> further uses onboard memory <b>324</b> as well as small FIFO buffers <b>320</b>, <b>322</b> on the FPGA <b>308</b> to bridge data streams between the processor on the computing device and the RF front end <b>304</b>. When receiving radio waveforms, digital signal samples are buffered in on-chip FIFO buffer <b>320</b> and delivered into the system memory on the computing device when the digital samples fit in a DMA burst (e.g., 128 bytes). When transmitting radio waveforms, the large RCB memory <b>324</b> enables implementations of the RCB manager module <b>218</b> (e.g., <figref idref="DRAWINGS">FIG. 2</figref>) to first write the generated samples onto the RCB memory <b>324</b>, and then trigger transmission with another command to the RCB. This functionality provides flexibility to the implementations of the SDR manager module <b>218</b> for pre-calculating and storing of digital samples corresponding to several waveforms before actually transmitting the waveforms, while allowing precise control of the timing of the waveform transmission.</p>
<p id="p-0050" num="0049">It should be noted that in some implementations of the SDR herein, a consistency issue may be encountered in the interaction between operations carried out by DMA controller <b>310</b> and operations on the processor cache system. For example, when a DMA operation modifies a memory location that has been cached in the processor cache (e.g., L2 or L3 cache), the DMA operation does not invalidate the corresponding cache entry. Accordingly, when the processor reads that location, the processor might read an incorrect value from the cache. One naive solution is to disable cached accesses to memory regions used for DMA, but doing so will cause a significant degradation in memory access throughput.</p>
<p id="p-0051" num="0050">As illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, implementations herein address this issue by using a smart-fetch strategy, thereby enabling implementations of the SDR to maintain cache coherency with DMA memory without drastically sacrificing throughput. <figref idref="DRAWINGS">FIG. 4</figref> illustrates a memory <b>402</b> which may correspond to system memory <b>114</b>, <b>204</b> discussed above, and which includes a portion set aside as DMA memory <b>404</b> that can be directly accessed by DMA controller <b>310</b> on the RCB <b>302</b> for storing digital samples as data. In some implementations, the SDR organizes DMA memory <b>404</b> into small slots <b>406</b>, whose size is a multiple of the size of a cache line. Each slot <b>406</b> begins with a descriptor <b>408</b> that contains a flag <b>410</b> or other indicator to indicate whether the data has been processed. The RCB <b>302</b> sets the flag <b>410</b> after DMA controller <b>310</b> writes a full slot of data to DMA memory <b>404</b>. The flag <b>410</b> is cleared after the processor processes all data in the corresponding slot in the cache <b>412</b>, which may correspond to caches <b>106</b> and/or <b>108</b> described above. When the processor moves to a cache location corresponding to a new slot <b>406</b>, the processor first reads the descriptor of the slot <b>406</b>, causing a whole cache line to be filled. If the flag <b>410</b> is set (e.g., a value of &#x201c;1&#x201d;), the data just fetched is valid and the processor can continue processing the data. Otherwise, if the flag is not set (e.g., a value of &#x201c;0&#x201d;), the DMA controller on the RCB has not updated this slot <b>406</b> with new data, and the processor explicitly flushes the cache line and repeats reading the same location. The next read refills the cache line, loading the most recent data from DMA memory <b>404</b>. Accordingly, the foregoing process ensures that the processor does not read an incorrect value from the cache <b>412</b>. Furthermore, while an exemplary RCB <b>302</b> has been illustrated and described, it will be apparent to those of skill in the art in light of the disclosure here in that various other implementations of the RCB <b>302</b> also fall within the scope of the disclosure herein.</p>
<p id="h-0009" num="0000">SDR Software Implementations</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary implementation of a software and logical architecture of the SDR herein showing a number of software components and a logical arrangement of the SDR. An SDR stack <b>502</b> includes a wireless MAC layer module <b>504</b>, a wireless physical layer (PHY) module <b>506</b>, and an RCB manager module <b>508</b> that includes a DMA memory manager <b>510</b>, and that may correspond to RCB manager <b>218</b>, discussed above. These components provide for system support, including driver framework, memory management, streamline processing, and the like. The role of the PHY module <b>506</b> is to convert information bits into a radio waveform, or vice versa. The role of the MAC layer module <b>504</b> is to coordinate transmissions in wireless networks to avoid collisions. Also included is an SDR supporting library <b>512</b> that includes an SDR Digital Signal Processing (DSP) library <b>514</b>, streamline processing support <b>516</b> and real-time support <b>518</b> (e.g., for ensuring core dedication). The SDR stack software components may exist at various times in system memory, cache, and/or mass storage or other computer readable storage media, as is known in the art.</p>
<p id="p-0053" num="0052">The software components in implementations of the SDR herein provide necessary system services and programming support for implementing various wireless PHY and MAC protocols in a general-purpose operating system, such as Windows&#xae; XP, Windows Vista&#xae;, Windows&#xae; 7, Linux&#xae;, Mac OS&#xae; X, or other suitable operating system. In addition to facilitating the interaction with the RCB, the implementations of the SDR stack <b>502</b> provide a set of techniques to greatly improve the performance of PHY and MAC processing on a general-purpose processor. To meet the processing and real-time requirements, these techniques make full use of various features in multi-core processor architectures, including the extensive use of lookup tables (LUTs), substantial data-parallelism with processor SIMD extensions, the efficient partitioning of streamlined processing over multiple cores, and exclusive dedication of cores for software radio tasks.</p>
<p id="p-0054" num="0053">Implementations of the SDR software may be written in any suitable programming language(s). For example, in some implementations, the software may be written in C, with, additionally, some assembly language for performance-critical processing. Further, some implementations of the SDR stack <b>502</b> may be implemented as a network device driver on a general-purpose operating system. Thus, RCB manager module <b>508</b> functions as a driver in the operating system for operating and managing the RCB and may include a PCIe driver for enabling use of the PCIe system bus. The SDR stack <b>502</b> exposes a virtual Ethernet interface <b>520</b> to the upper TCP/IP layer <b>522</b> of the kernel side, thereby enabling the SDR to appear and function as a network device. Since any software radio implemented on the SDR herein can appear as a normal network device, all existing network applications <b>524</b> used by a user are able to execute and interact with the SDR in an unmodified form. Further, on the other end, the SDR stack logically interacts with RCB firmware <b>522</b> via the system bus <b>524</b>, which may be a PCIe system bus, as discussed above.</p>
<p id="p-0055" num="0054">In some implementations of the SDR herein, SDR DSP processing library <b>514</b> extensively exploits the use of look-up tables (LUTs) and SIMD instructions to optimize the performance of PHY algorithms. For example, more than half of the PHY algorithms can be replaced with LUTs. Some LUTs are straightforward pre-calculations, others require more sophisticated implementations to keep the LUT size small. For instance, in the soft-demapper example discussed below, the LUT size (e.g., 1.5 KB for 802.11a/g 54 Mbps modulation) can be greatly reduced by exploiting the symmetry of the algorithm. Further, in the exemplary WiFi implementation described below, the overall size of the LUTs used in 802.11a/g is around 200 KB and in 802.11b is around 310 KB, both of which fit comfortably within the L2 caches of conventional multi-core processors.</p>
<p id="p-0056" num="0055">Further, as discussed above, some implementations use SIMD (Single Instruction Multiple Data) instructions, such as the SSE2 (Streaming SMID Extensions <b>2</b>) instruction set designed for Intel CPUs for speeding parallel processing of large numbers of data points, such as when processing digital samples. Since the SSE registers are 128 bits wide while most PHY algorithms require only 8-bit or 16-bit fixed-point operations, one SSE instruction can perform 8 or 16 simultaneous calculations. SSE2 also has rich instruction support for flexible data permutations, and most PHY algorithms, e.g., Fast Fourier Transform (FFT), Finite Impulse Response (FIR) Filter and Viterbi decoder algorithms, can fit naturally into this SIMD model. For example, the implementations of the Viterbi decoder according to the SDR herein uses only 40 cycles to compute the branch metric and select the shortest path for each input. As a result, Viterbi implementations can handle 802.11a/g at 54 Mbps modulation using only one 2.66 GHz CPU core in a multi-core processor, whereas conventional designs had to rely on specialized hardware implementations.</p>
<p id="p-0057" num="0056">Additionally, it should be noted that other brands of processor architectures, such processors available from AMD, and PowerPC&#xae; processors available from Apple Inc. of Cupertino, Calif., USA, have very similar SIMD models and instruction sets that can be similarly utilized. For example, AMD's Enhanced 3DNow!&#xae; processor includes an SSE instruction set plus a set of DSP (Digital Signal Processor) extensions. The optimization techniques described herein can be directly applied to these and other GPP architectures as well. An example of a functional block using SIMD instruction optimizations is discussed further below.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 6A</figref> illustrates an algorithm optimization table <b>600</b> that summarizes some PHY processing algorithms implemented in the SDR herein, together with the LUT and SIMD optimization techniques applied for improving the processing speed. The algorithm table <b>600</b> includes an algorithm identification column <b>602</b>, a configuration column <b>604</b>, and I/O size column <b>606</b>, an optimization method column <b>608</b>, number of computations required for a conventional implementation column <b>610</b>, computations required for the SDR implementation <b>612</b>, and the amount of speed up <b>614</b> gained by the optimization. For example, for the IEEE 802.11b standard, algorithms that maybe optimize using LUTs according to the SDR herein include the scramble algorithm <b>620</b>, the descramble algorithm <b>622</b>, the mapping and spreading algorithm <b>624</b>, and the CCK (Complementary Code Keying) modulator algorithm <b>626</b>, while algorithms that maybe optimized using SIMD extensions include the FIR filter <b>628</b>, and the decimation algorithm <b>630</b>. Additionally, for the IEEE 802.11a standard, algorithms that maybe optimized using SIMD extensions include the FFT/IFFT (Fast Fourier Transform/Inverse Fast Fourier Transform) algorithm <b>632</b>, algorithms that may be optimized using LUTs according to the SDR herein include the convolutional encoder algorithm <b>634</b>, the Viterbi algorithm <b>636</b>, the soft demapper algorithm <b>638</b>, and the scramble and descramble algorithms <b>640</b>. Further, the Viterbi algorithm <b>636</b> may also be further optimized using SIMD extensions.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 6B</figref> illustrates an example of PHY operations for IEEE 802.11b at 2 Mbps, further showing examples of functional blocks that are optimized according to some implementations here, as discussed above with reference to <figref idref="DRAWINGS">FIG. 6A</figref>. The role of the PHY layer is to convert information bits into a radio waveform, or vice versa. As illustrated in <figref idref="DRAWINGS">FIG. 6B</figref>, at the transmitter side, the wireless PHY component first modulates the message (i.e., a packet or a MAC frame) into a time sequence of baseband signals. Baseband signals are then passed to the radio front end, where they are multiplied by a high frequency carrier and transmitted into the wireless channel. In the illustrated example, the data from the MAC goes to a scramble block <b>650</b>, a DQPSK modulator block <b>652</b>, a direct sequence spread spectrum block <b>654</b>, a symbol wave shaping block <b>656</b>, and then is passed to the RF front end. At the receiver side, the RF front end detects signals in the channel and extracts the baseband signal by removing the high-frequency carrier. The extracted baseband signal is then fed into the receiver's PHY layer to be demodulated into the original message. In the illustrated example, the signal from the RF front end is passed to a decimation block <b>658</b>, a despreading block <b>660</b>, a DQPSK demodulator block <b>662</b>, a descramble block <b>664</b>, and then to the MAC layer. Accordingly, advanced communication systems (e.g., IEEE 802.11a/b/g) contain multiple functional blocks in their PHY components. These functional blocks are pipelined with one another. Data is streamed through these blocks sequentially, but with different data types and sizes. For instance, as illustrated in <figref idref="DRAWINGS">FIG. 6B</figref>, different blocks may consume or produce different types of data at different rates arranged in small data blocks. For example, in 802.11b, as illustrated in <figref idref="DRAWINGS">FIG. 6B</figref>, the scrambler block <b>650</b> may consume and produce one bit, while DQPSK modulation block <b>652</b> maps each two-bit data block onto a complex symbol which uses two 16-bit numbers to represent the in-phase and quadrature (I/Q) components.</p>
<p id="p-0060" num="0059">Each PHY block performs a fixed amount of computation on every transmitted or received bit. When the data rate is high, e.g., 11 Mbps for 802.11b and 54 Mbps for 802.11a/g, PHY processing blocks consume a significant amount of computational power. It is estimated that a direct implementation of 802.11b may require 10 Gops while 802.11a/g requires at least 40 Gops. These requirements are very demanding for software processing in GPPs.</p>
<p id="p-0061" num="0060">PHY processing blocks directly operate on the digital waveforms after modulation on the transmitter side and before demodulation on the receiver side. Therefore, high-throughput interfaces are desired to connect these processing blocks as well as to connect the PHY with the radio front end. The required throughput linearly scales with the bandwidth of the baseband signal. For example, the channel bandwidth is 20 MHz in 802.11a. This requires a data rate of at least 20 Million complex samples per second to represent the waveform. These complex samples normally require 16-bit quantization for both I and Q components to provide sufficient fidelity, translating into 32 bits per sample, or 640 Mbps for the full 20 MHz channel. Over-sampling, a technique widely used for better performance, doubles the requirement to 1.28 Gbps to move data between the RF frond-end and PHY blocks for one 802.11a channel.</p>
<p id="p-0062" num="0061">As discussed above with reference to <figref idref="DRAWINGS">FIG. 6A</figref>, in order to speed up processing of some blocks, implementations herein optimize certain functional blocks by using LUT and SIMD optimization techniques discussed above. In the illustrated example of <figref idref="DRAWINGS">FIG. 6B</figref>, as shown in bold, scramble block <b>650</b>, descramble block <b>664</b>, and DQPSK Modulator and DQPSK demodulator blocks <b>624</b> are optimized using LUTs stored in cache on the processor, corresponding to scramble algorithm <b>620</b>, descramble algorithm <b>622</b>, and mapping and spreading algorithm <b>624</b> discussed above with respect to <figref idref="DRAWINGS">FIG. 6A</figref>. Further, decimation block <b>658</b> is optimized using SIMD processor extensions corresponding to decimation algorithm <b>630</b> discussed above with respect to <figref idref="DRAWINGS">FIG. 6A</figref>.</p>
<p id="p-0063" num="0062">Similarly, <figref idref="DRAWINGS">FIG. 6C</figref> illustrates an example of PHY operations for IEEE 802.11a at 24 Mbps, showing in bold which functional blocks are optimized according to some implementations here, as discussed above with reference to <figref idref="DRAWINGS">FIG. 6A</figref>. On the transmitter side, the data received from the MAC layer is passed to a scramble block <b>670</b>, convolutional encoder block <b>672</b>, an interleaving block <b>674</b>, a QAM modulator block <b>676</b>, an IFFT block <b>670</b>, a GI addition block <b>680</b>, a symbol wave shaping block <b>682</b>, and then is passed to the RF front end. On the receiver side, the signal from the RF front end is passed to a decimation block <b>684</b>, a remove GI block <b>686</b>, an FFT block <b>688</b>, a demodulating and interleaving block <b>690</b>, a Viterbi decoding block <b>692</b>, a descramble block <b>694</b>, and then to the MAC processing. In order to speed up processing of some blocks, implementations herein optimize certain blocks by using LUT and SIMD optimization techniques discussed above with respect to <figref idref="DRAWINGS">FIG. 6A</figref>. In the illustrated example of <figref idref="DRAWINGS">FIG. 6C</figref>, scramble block <b>670</b> and descramble block <b>694</b> are optimized using LUTs stored in cache on the processor corresponding to scramble and descramble algorithm <b>640</b> discussed above; FFT Block <b>688</b> and IFFT block <b>670</b> are optimized using SIMD processor extensions corresponding to FFT/IFFT algorithm <b>632</b> discussed above; convolutional encoder block <b>672</b> is optimized using LUTs corresponding to convolutional encoder algorithm <b>634</b> discussed above; and Viterbi decoding block <b>692</b> is optimized using both LUTs and SIMD processor extensions corresponding to Viterbi algorithm <b>636</b> discussed above. Furthermore, in addition to the optimizations illustrated in this example, other optimization opportunities may be apparent to those of skill in the art in light of the disclosure herein.</p>
<p id="h-0010" num="0000">SIMD Example Based on Fir Filter</p>
<p id="p-0064" num="0063">The following provides an example of how to use SSE instructions to optimize the implementation of a FIR (Finite Impulse Response) filter in implementations of the SDR herein, corresponding to FIR filter algorithm <b>628</b> discussed above with respect to <figref idref="DRAWINGS">FIG. 6A</figref>, with it being understood that the optimizations of the other algorithms, such as decimation <b>630</b>, may be similarly implemented. FIR filters are widely used in various PHY layers. An n-tap FIR filter is defined as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>y[t]=&#x3a3;</i><sub>k=0</sub><sup>n-1</sup><i>c</i><sub>k</sub><i>*x[t&#x2212;k], </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0065" num="0064">where x are the input samples, y are the output samples, and c<sub>k </sub>are the filter coefficients. With SIMD instructions, it is possible to process multiple samples at the same time. For example, Intel SSE supports a 128-bit packed vector and each FIR sample takes 16 bits. Therefore, it is possible to perform m=8 calculations simultaneously. To facilitate SSE processing, the data layout in memory should be carefully designed.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 7A</figref> illustrates a memory layout <b>700</b> of the FIR coefficients according to implementations herein. Each row <b>702</b>-<b>1</b>, . . . , <b>702</b>-(<i>n+m&#x2212;</i>1) forms a packed-vector containing m components for SIMD operations. The coefficient vector of the FIR filter is replicated in each column <b>704</b>-<b>1</b>, . . . , <b>704</b>-<i>m </i>in a zigzag layout. Thus, the total number of rows is (n+m&#x2212;1). There are also n temporary variables <b>706</b> containing the accumulated sum up to each FIR tap for each sample.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 7B</figref> illustrates a flowchart of an exemplary process for performing the SIMD operations of the FIR filter executed by the PHY layer of the SDR stack on a core of a multi-core processor. The process receives an array of input samples and a coefficient array, and outputs the filtered samples in an output sample buffer.</p>
<p id="p-0068" num="0067">At block <b>712</b>, the process receives an array of input samples and a coefficient array. The input samples contain two separate sample streams, with the even and odd indexed samples representing the I and Q samples, respectively. The coefficient array is arranged similarly to the layout of <figref idref="DRAWINGS">FIG. 7A</figref>, but with two sets of FIR coefficients for I and Q samples, respectively.</p>
<p id="p-0069" num="0068">At block <b>714</b>, for each iteration, four I and four Q samples are loaded into an SSE register.</p>
<p id="p-0070" num="0069">At block <b>716</b>, the process multiplies the data in each row and adds the result to the corresponding temporal accumulative sum variable.</p>
<p id="p-0071" num="0070">At block <b>718</b>, the process determines whether all the samples in the array of input samples have been processed to calculate all taps. If not, the process returns to block <b>714</b> to load more I and Q samples into the SSE registers.</p>
<p id="p-0072" num="0071">At block <b>720</b>, the results are output for the input samples when all taps have been calculated for the input samples. When the input sample stream is long, there are nm samples in the pipeline and m outputs are generated in each iteration. Note that the output samples may not be in the same order as the input samples. For example, some algorithms do not always require the output to have exactly the same order as the input.</p>
<p id="p-0073" num="0072">Accordingly, at block <b>722</b>, the output results can be reordered to the original order. This can be accomplished using a few shuffle instructions to place the output samples in original order, if needed. The process then returns to block <b>714</b> to continue to receive the stream of input samples from block <b>712</b> until all samples have been processed. Thus, while the foregoing provides a specific example of SIMD processing for speeding processing of digital samples in the SDR herein, it will be apparent to those of skill in the art in light of the disclosure herein that this process can be applied to optimize other SDR algorithms on one or more cores of a multi-core processor according to the implementations herein, such as the examples discussed above with respect to <figref idref="DRAWINGS">FIGS. 6A-6C</figref>.</p>
<p id="h-0011" num="0000">High-Performance SDR Processing</p>
<p id="p-0074" num="0073">Implementations of the SDR herein achieve high-performance SDR processing using software techniques that include efficient physical layer processing, multi-core streamline processing, and real-time support, each of which is described additionally below.</p>
<p id="h-0012" num="0000">Convolutional Encoder Using LUT</p>
<p id="p-0075" num="0074">In a memory-for-computation tradeoff, implementations of the SDR herein rely upon the large-capacity, high-speed cache memory in multi-core processors to accelerate PHY processing using pre-calculated LUTs stored in the PHY library. Contemporary processor architectures, such as Intel Core 2, usually have at least several megabytes of onboard cache with a low (e.g., 10&#x2dc;20 cycles) access latency. If LUTs are pre-calculated for a large portion of PHY algorithms and stored in the onboard cache for a corresponding core, this can greatly reduce the computational requirement for online processing and speed up overall processing time.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIGS. 7C-7D</figref> illustrate an example of SDR processing using a LUT according to some implementations herein. <figref idref="DRAWINGS">FIG. 7C</figref> illustrates how processing of a functional block can be speeded up by using a precomputed LUT instead of performing the actual processing of the bits using the processing algorithm. For example, when there are a finite combination of input bits and corresponding output data, then an LUT can be precomputed to be used to quickly match the input with corresponding output. In FIG. <b>7</b>C, an array of input bits of a digital sample is received as a bit stream for processing, such as in one of the functional processing blocks described above with reference to <figref idref="DRAWINGS">FIGS. 6A-6C</figref> that is able to use an LUT to speed processing (e.g., the convolutional encoder algorithm). The convolutional encoder normally works in the following way. The convolutional encoder algorithm maintains seven shift registers <b>734</b>, which form the state of the encoder. For each incoming bit, the algorithm <b>736</b> selects several bits in the shift registers <b>734</b> and performs eXclusive OR (XOR) operations on them, then two encoded output bits are generated as output data A <b>738</b> and output data B <b>740</b>. Then, the shift registers <b>734</b> shift right and the input bit is put into the left-most register. Conventionally, to process one bit, it takes eight operations to compute the outputs (i.e., to produce a 2-bit output from one bit input). However, as discussed above, the processing can avoid the actual processing of the algorithm <b>736</b> by using LUT <b>742</b>. Thus, instead of processing one bit at a time, an 8-bit data can be a single input for processing using the LUT. The 8-bit input and the 7-bit states of the current state can be combined to generate a 15-bit index <b>744</b>. The 15-bit index is then located in the LUT <b>742</b>, and the corresponding precomputed new 7-bit states <b>746</b> and a 16-bit output <b>748</b> are determined from the LUT <b>742</b> instead of processing each bit individually by processing the algorithm <b>736</b>. Thus, it may be seen that if all possible 15-bit indices and their corresponding output 7-bit states <b>746</b> and 16-bit outputs <b>748</b> are precomputed and stored in LUT <b>742</b>, the actual processing time for the SDR sample stream can be greatly expedited (i.e., encoding of eight bits can be carried out using a single lookup operation).</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 7D</figref> illustrates an exemplary process <b>750</b> that may be executed by the PHY layer of the SDR stack on a core of a multi-core processor by using an LUT instead of processing the bit stream using a conventional algorithm, such as the convolutional encoder algorithm. Other algorithms in the SDR pipeline may similarly be expedited by the use of precomputed LUTs, as discussed above with reference to <figref idref="DRAWINGS">FIGS. 6A-6C</figref>.</p>
<p id="p-0078" num="0077">At block <b>752</b>, an array of input sample bits is received for processing as a stream of bits.</p>
<p id="p-0079" num="0078">At block <b>754</b>, the process loads the first byte (8 bits) and generates an index with the current encoder state (the 7 bit state).</p>
<p id="p-0080" num="0079">At block <b>756</b>, the process accesses the precomputed LUT using the generated index and locates two values: two output bytes (i.e., a 16-bit output) and a 7-bit new state.</p>
<p id="p-0081" num="0080">At block <b>758</b>, the two output bytes are passed as output to the next processing block in the SDR processing stream, e.g., as illustrated in <figref idref="DRAWINGS">FIG. 6B</figref> or <b>6</b>C, and the 7-bit new state is used for processing the next byte in the sample bit stream.</p>
<p id="p-0082" num="0081">At block <b>760</b>, the head pointer is increased to encompass the next eight bits.</p>
<p id="p-0083" num="0082">At block <b>762</b>, the process determines whether the end of the bit array has been reached. If not, the process returns to block <b>754</b> to process the next byte; if so, the process goes to block <b>752</b> to receive the next array of input bits.</p>
<p id="p-0084" num="0083">As discussed above with reference to <figref idref="DRAWINGS">FIGS. 6A-6C</figref>, more than half of the common PHY algorithms of the IEEE 802.11 standards can be supplanted with LUTs, thereby resulting in a processing time speedup <b>614</b> from between approximately 1.5&#xd7; to 50&#xd7; (see, e.g., <figref idref="DRAWINGS">FIG. 6A</figref>). Since the size of each LUT is sufficiently small, the sum of all LUTs in a processing path can easily fit in the L2 caches of typical multi-core processor cores. Accordingly, when combined with core dedication, as discussed below, the possibility of cache collisions is very small. As a result, the LUTs of the implementations herein are almost always located in onboard caches during PHY processing. Additionally, while an exemplary implementation has been illustrated in <figref idref="DRAWINGS">FIGS. 7C-7D</figref> to describe how an LUT can be used to speed SDR processing, it should be understood that the other algorithms discussed above as being able to be expedited with LUTs can be similarly processed using precomputed LUTs.</p>
<p id="p-0085" num="0084">Further, in order to accelerate PHY processing with data-level parallelism, implementations of the SDR herein also use the SIMD processor extensions discussed above, such as SSE, SEE2, 3DNow!&#xae;, and AltiVec&#xae; provided in conventional multi-core processors. Although these extensions were originally designed for multimedia and graphics applications, the extensions also match the needs of wireless signal processing very well because many PHY algorithms have fixed computation structures that can easily map to large vector operations. Measurements show that such SIMD extensions substantially speed up PHY processing in implementations of the SDR herein.</p>
<p id="h-0013" num="0000">Turbo Encoder Using LUT</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary implementation for Turbo encoder <b>800</b> using a look-up table (LUT) during encoding process. The Turbo encoder <b>800</b> can include two convolutional codes (e.g., 1<sup>st </sup>constituent encoder <b>802</b> and 2<sup>nd </sup>constituent encoder <b>804</b>) in parallel with an interleaving (e.g., turbo code interleaving <b>806</b>) in-between the two convolutional codes. The 1<sup>st </sup>constituent encoder <b>802</b> and the 2<sup>nd </sup>constituent encoder <b>804</b> can be used to encode continuous stream of data in finite blocks, which correspond to the turbo code interleaving <b>806</b> size. The finite block can be processed using the LUT as further discussed below.</p>
<p id="p-0087" num="0086">Conventionally, each bit in the block can be serially inserted and processed by the 1<sup>st </sup>constituent encoder <b>802</b> and the 2<sup>nd </sup>constituent encoder <b>804</b> to provide a 4-bit output <b>808</b>. The 1<sup>st </sup>constituent encoder <b>802</b> and the 2<sup>nd </sup>constituent encoder <b>804</b> include an algorithm that combines and processes existing 6-bit states <b>810</b> with the inserted bit in the (bit) block. At the end of multiple clock cycles, the 4-bit output <b>808</b> for the Turbo encoder <b>800</b> can provide the codes for a given sequence of bits in the bit block. In other implementations, the Turbo encoder <b>800</b> can be forced into a known state (i.e., frames can be terminated) after processing of the finite block. The known state (i.e., termination tail) is then appended to the 4-bit output <b>808</b> (of the Turbo encoder <b>800</b>) to be used in a decoder.</p>
<p id="p-0088" num="0087">In an implementation, a LUT <b>812</b> is used to predefine a 14-bit index <b>814</b> that can be used as an input to the Turbo encoder <b>800</b>. The 14-bit index <b>814</b> can include an 8-bit input <b>816</b> (from the bit block) and the 6-bit states <b>810</b>. For the 14-bit index <b>814</b>, the LUT <b>812</b> can provide a 32-bit output <b>818</b> and new 6-bit states <b>820</b>. The new 6-bit states <b>820</b> can be used to process the next byte of data (i.e., next 8 bits) in the bit block.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart diagram <b>900</b> for an exemplary process for using LUT during encoding process. The order in which the method is described is not intended to be construed as a limitation, and any number of the described method blocks can be combined in any order to implement the method, or alternate method. Additionally, individual blocks can be deleted from the method without departing from the spirit and scope of the subject matter described herein. Furthermore, the method can be implemented in any suitable hardware, software, firmware, or a combination thereof, without departing from the scope of the invention.</p>
<p id="p-0090" num="0089">At block <b>902</b>, receiving an array of input bits is performed. In an implementation, the array of input bits includes finite blocks (i.e., bit blocks).</p>
<p id="p-0091" num="0090">At block <b>904</b>, the process loads the first byte (8 bits) and generates an index with the current encoder state. In an implementation, the current encoder state (6-bit states <b>810</b>) is combined with 8-bit input <b>816</b> to generate a 14-bit index <b>814</b>.</p>
<p id="p-0092" num="0091">At block <b>906</b>, the process accesses the precomputed LUT (i.e., LUT <b>812</b>) using the generated index (i.e., 14-bit index <b>814</b>) and locates two values: four output bytes (i.e., a 32-bit output <b>818</b>) and a new 6-bit state (i.e., new 6-bit states <b>820</b>).</p>
<p id="p-0093" num="0092">At block <b>908</b>, the four output bytes are passed as output to the next processing block in the SDR processing stream, e.g., as illustrated in <figref idref="DRAWINGS">FIG. 6B</figref> or <b>6</b>C, and the 6-bit new state <b>820</b> is used for processing the next byte in the sample bit stream.</p>
<p id="p-0094" num="0093">At block <b>910</b>, the head pointer is increased to encompass the next eight bits.</p>
<p id="p-0095" num="0094">At block <b>912</b>, the process determines whether the end of the bit array (i.e., bit block) has been reached. If not, the process returns to block <b>904</b> to process the next byte; if so, the process goes to block <b>902</b> to receive the next array of input bits (i.e., bit block).</p>
<p id="h-0014" num="0000">Spread Modulation Using LUT</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an exemplary diagram <b>1000</b> for spread modulation in the QAM modulator <b>676</b> of <figref idref="DRAWINGS">FIG. 6C</figref>. The spread (spectrum) modulation includes a modulation technique that can secure communications through spreading of a signal over a large frequency band. In an implementation, a pseudo-random noise (PN) is added to the modulating signal to provide a uniform frequency distribution in the large frequency band. The PN can further provide greater bandwidth than a modulating signal bandwidth; however, power used during transmission of signal can remain the same.</p>
<p id="p-0097" num="0096">In an implementation, in a direct sequence spreading modulation, a sequence of signal samples (or symbols) can be multiplied by PN values (e.g., 1, &#x2212;1) at a relatively higher frequency signal to spread energy of the modulating data streams into the large frequency band. The multiplication can be derived from an algorithm that can be implemented by the direct sequence spreading modulation. As a result, a modulated signal can include sequence of symbols that are multiplied with a high frequency spreading signal (i.e., PN values) before transmission. At the receiving end, the algorithm implemented by the direct sequence spreading modulation (e.g., multiplication of the PN values) can be adopted for proper demodulation.</p>
<p id="p-0098" num="0097">Since the spreading sequence is pre-defined and the all possible modulated signals are also pre-defined, a LUT <b>1002</b> can be used to map information bits directly to the spread signal sequence. In an implementation, the LUT <b>1002</b> includes an input symbol <b>1004</b>, which contains separate samples for the I and Q components. The LUT <b>1002</b> further includes output symbols <b>1006</b>, which contain &#x201c;p&#x201d; samples for the I and Q components. The output symbols <b>1106</b> can represent precomputed outputs (or values) for the all possible modulated signals to be transmitted.</p>
<p id="h-0015" num="0000">Decoder Using SIMD Instructions</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an exemplary processing diagram <b>1100</b> for a decoder, such as, Viterbi decoding <b>692</b> in <figref idref="DRAWINGS">FIG. 6C</figref> (for IEEE 802.11a/g). As discussed above, the Viterbi decoding <b>692</b> (or Viterbi <b>636</b> in <figref idref="DRAWINGS">FIG. 6A</figref>) may include a Viterbi algorithm, such as, the Viterbi Algorithm <b>636</b> (of <figref idref="DRAWINGS">FIG. 6A</figref>) that uses the LUT and the SIMD for optimization method. In an implementation, the Viterbi algorithm can be used as a dynamic programming method to find the best solution for a problem, such as, searching for an optimal path (or shortest path) in a Trellis diagram <b>1102</b>. The optimal path or the shortest path in the Trellis diagram <b>1102</b> can be used to decode convolutional codes or block codes that were encoded at a transmitting side. In other implementations, an array of input data bits to the Viterbi decoding <b>692</b> includes hard codes (i.e., smallest hamming distance or bit disagreement is observed) or one or more soft values (i.e., bits were derived through best correlation).</p>
<p id="p-0100" num="0099">The trellis diagram <b>1102</b> can be used to derive a correct sequence of demodulated baseband signals from demodulator and de-interleaving block <b>690</b> of <figref idref="DRAWINGS">FIG. 6C</figref>. The correct sequence can be determined by finding the optimal path (or shortest path) in the trellis diagram <b>1102</b> based on the demodulated baseband signals. In other implementations, for maximum likelihood sequence detection, the optimal path (or the shortest path) is the most probable encoded data streams (i.e., baseband signals) in the convolutional encoder <b>672</b> of <figref idref="DRAWINGS">FIG. 6C</figref>.</p>
<p id="p-0101" num="0100">During decoding, the Trellis diagram <b>1102</b> is expanded with each stage (at every clock cycle) of the array or sequence of data bits received from the demodulator and de-interleaving block <b>690</b>. The Trellis diagram <b>1102</b> can start with a known state in circle <b>1104</b>-<b>2</b> (i.e., zero state). Circles <b>1104</b>-<b>4</b>, <b>1104</b>-<b>6</b>, to <b>1104</b>-<i>x </i>can include all possible states in the Trellis diagram <b>1102</b> for subsequent clock cycles after the starting state (i.e., zero state). In an implementation, for the sequence of data bits from the demodulator and de-interleaving block <b>690</b>, the Trellis diagram <b>1102</b> expands to a new stage relative to the initial state in the circle <b>1104</b>-<b>2</b>. A solid line <b>1106</b> can represent the possible transitions from one state to another state based on the input information (i.e., sequence of data bits). At the end of the Trellis diagram <b>1102</b> (i.e., circle <b>1104</b>-<i>x</i>), a trace back procedure (for the solid line <b>1106</b>) can be performed to define the actual codes encoded (in the convolutional encoder <b>672</b> of <figref idref="DRAWINGS">FIG. 6C</figref>). In other implementations, a path metric (e.g., the probability of the incoming bit) is associated with each line (in the solid line <b>1106</b>), and each state&#x2014;at each stage&#x2014;records a minimal path metric sum for all paths that reach that state.</p>
<p id="p-0102" num="0101">The output of the algorithm in the Trellis diagram <b>1102</b> can provide the path with the shortest path metric. To find the path with the shortest path metric, the Viterbi algorithm can include add-compare-select (ACS) operations to arrive at the path metric as shown in the solid line <b>1106</b>. As discussed above, the path metric is associated and/or linked with each line in the solid line <b>1106</b>. The link for the path metric should be recorded and/or stored into memory. To this end, the trace back procedure can be used to define the paths that were traversed during expansion to the new stage for every incoming data bit, such as, the sequence of data bits described above. In other implementations, the trace back procedure is required to store the path metric for every expanded stage relative to the incoming data bits for determining the shortest path at the end of Trellis expanding.</p>
<p id="p-0103" num="0102">In an implementation, a major optimization for the Viterbi decoding <b>692</b> is to make use of a &#x201c;min&#x201d; operation during the ACS operation to select the path with the shortest path metric. The &#x201c;min&#x201d; operation can be executed by a processor (e.g., processors <b>102</b>) that executes the SIMD instructions. To find the minimal path (i.e., shortest path), the &#x201c;min&#x201d; operation can require one operation instead of multiple comparison instructions used in the conventional processing; however, the &#x201c;min&#x201d; operation generally gives only the minimal metric value but not link leads to that minimal metric value. To this end, a data structure <b>1108</b> can be introduced to provide the link to the minimal metric value during the &#x201c;min&#x201d; operation.</p>
<p id="p-0104" num="0103">In an implementation, the data structure <b>1108</b> includes a path index <b>1110</b> that is embedded in least significant bits of the data structure <b>1108</b>, and a path metric <b>1112</b> that is embedded in most significant bits of the data structure <b>1108</b>. When performing the ACS operation in the Trellis diagram <b>1102</b>, the path metric <b>1112</b> is updated to provide the (shortest) link to each state (e.g., circle <b>1104</b>-<b>4</b>) in the Trellis diagram <b>1102</b>. In addition, the path index <b>1110</b> is further updated to contain link information for the shortest link defined by the path metric <b>1112</b>. The link information can be used during the trace back to find the optimal path (e.g., solid lines <b>1106</b>) by simply checking the path index <b>1110</b> that are associated with the path metric <b>1112</b>. The optimal path can be the output algorithm for the Viterbi decoding <b>692</b>.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. 12</figref> is a flow chart diagram <b>1200</b> for an exemplary process for finding an algorithm output for Viterbi decoding <b>692</b>. The order in which the method is described is not intended to be construed as a limitation, and any number of the described method blocks can be combined in any order to implement the method, or alternate method. Additionally, individual blocks can be deleted from the method without departing from the spirit and scope of the subject matter described herein. Furthermore, the method can be implemented in any suitable hardware, software, firmware, or a combination thereof, without departing from the scope of the invention.</p>
<p id="p-0106" num="0105">At block <b>1202</b>, receiving an array or sequence of data bits is performed. In an implementation, the sequence of data bits includes demodulated signals from a demodulator and de-interleaving block (e.g., demodulator and interleaving block <b>690</b> of <figref idref="DRAWINGS">FIG. 6C</figref>). Depending upon a size of a Trellis diagram (e.g., Trellis diagram <b>1102</b>), the array of (input) data bits can be truncated (e.g., 1 byte at one clock cycle) for processing.</p>
<p id="p-0107" num="0106">At block <b>1204</b>, loading a first data (e.g. a byte) and expanding the Trellis diagram <b>1102</b> is performed. In an implementation, all possible new states are packed into several (e.g., four in 802.11a) data vectors and SIMD instructions are used to compute new path metric for each possible path. Afterwards, a &#x201c;min&#x201d; operation on the new path metrics is performed to find the minimal path as well as the link that leads path (with embedded path index).</p>
<p id="p-0108" num="0107">At block <b>1206</b>, updating a data structure is performed. In an implementation, the &#x201c;min&#x201d; operation for each expansion in the Trellis diagram <b>1102</b> results to an updated path metric (e.g., path metric <b>1112</b>) that defines the shortest path link for the expansion, and path index (e.g., path index <b>1110</b>) that defines and/or stores the link for the path metric <b>1112</b>.</p>
<p id="p-0109" num="0108">At block <b>1208</b>, the head pointer is increased to encompass the next eight bits.</p>
<p id="p-0110" num="0109">At block <b>1210</b>, determining whether end of the sequence of data bits has been reached. If not, the process returns to block <b>1204</b> to process the next byte. If the sequence of data bits has been reached, the process goes to block <b>1212</b> to perform a trace back in the Trellis diagram <b>1102</b>.</p>
<p id="p-0111" num="0110">At block <b>1212</b>, tracing back an optimal path is performed. In an implementation, an optimal path (e.g., solid line <b>1106</b>) can be traced back by simply checking the stored path index <b>1110</b> for each expansion in the Trellis diagram <b>1102</b>. In other implementation, the solid line <b>1106</b> is the output algorithm for the Viterbi decoding <b>692</b>. After the tracing back is performed, the process can go back to block <b>1202</b> to process another array or sequence of data bits.</p>
<p id="h-0016" num="0000">Soft Demapper Using LUT</p>
<p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an exemplary processing block <b>1300</b> for a soft-demapper. As shown in <figref idref="DRAWINGS">FIG. 6A</figref>, the soft demapper <b>638</b> used for demodulation in the IEEE 802.11a standard needs to calculate the confidence level of each bit contained in an incoming symbol. This task involves rather complex computations proportional to the modulation density. More precisely, the soft demapper <b>638</b> conducts an extensive search for all modulation points in a constellation graph and calculates a ratio between the minimum of Euclidean distances to all points representing one and the minimum of distances to all points representing zero. In implementations of the SDR herein, the confidence levels for all possible incoming symbols are pre-calculated based on their I and Q values, and LUTs are built to directly map the input symbol to confidence level. Such LUTs need not be large. For example, as shown in constellation diagram <b>1302</b>, all possible inputs for I and Q value may be limited between &#x2212;128 to 127. Thus, it requires 64K entries at most for Soft-Demapper. Actually, by exploiting symmetry, in 802.11a/g with a 54 Mbps modulation rate (64-QAM), the size of the LUT for the soft demapper <b>638</b> is about 1.5 KB.</p>
<p id="p-0113" num="0112">Conventionally, a processing of demapper functions requires significant computational power to provide the confidence levels of the received symbols. In an implementation, as an optimization method for the soft-demapper computing, a LUT <b>1304</b> predefines the computed values for demapper functions that provide soft-values for the I and Q components of the received symbols. The received symbol is first quantize into 16-bit, with 8-bit for 1 (in-phase) and 8-bit for Q (quadrature-phase) components (i.e., 16-bit I/Q input <b>1306</b>). In 802.11a/g standard, an approximation of the soft-value includes a sum of the soft value for 1 and Q, which are computed independently. To this end, an 8-bit index LUT can be built instead of 16-bit table. In addition, the computation of the soft-value for the I and Q component are identical such that, the I and Q can share the same LUT <b>1304</b>. An output <b>1308</b> may include four soft values for four information bits (i.e., 16-bit I/Q pair <b>1306</b>).</p>
<p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. 14</figref> is a flow chart diagram <b>1400</b> for an exemplary process for generating soft values for received symbols in a soft demapper <b>638</b>. The order in which the method is described is not intended to be construed as a limitation, and any number of the described method blocks can be combined in any order to implement the method, or alternate method. Additionally, individual blocks can be deleted from the method without departing from the spirit and scope of the subject matter described herein. Furthermore, the method can be implemented in any suitable hardware, software, firmware, or a combination thereof, without departing from the scope of the invention.</p>
<p id="p-0115" num="0114">At block <b>1402</b>, receiving an array or sequence of data bits is performed. In an implementation, the sequence of data bits include received symbols from the FFT <b>688</b> in <figref idref="DRAWINGS">FIG. 6C</figref>.</p>
<p id="p-0116" num="0115">At block <b>1404</b>, quantizing the received symbols into 16-bit is performed. In an implementation, the 16-bit includes an 8-bit for the I component and another 8-bit for the Q component.</p>
<p id="p-0117" num="0116">At block <b>1406</b>, loading the 16-bit for the I/Q pair is performed. In an implementation, the 16-bit I/Q pair input (e.g., 16 bit I/Q input <b>1306</b>) uses an 8-bit LUT (e.g., 8-bit LUT <b>1304</b>) to output four soft values for four information bits (e.g., output <b>1308</b>).</p>
<p id="p-0118" num="0117">At block <b>1408</b>, outputting the soft values for the 16-bit I/Q pair is performed.</p>
<p id="p-0119" num="0118">At block <b>1410</b>, the head pointer is increased to encompass the next eight bits.</p>
<p id="p-0120" num="0119">At block <b>1412</b>, determining whether end of the quantized sequence of data bits has been reached. If not, the process returns to block <b>1406</b> to process the next byte. If the quantized sequence of data bits has been reached, the process goes to block <b>1414</b> to generate soft values for the I and Q components.</p>
<p id="p-0121" num="0120">At block <b>1414</b>, generating the soft value for the I and Q components is performed.</p>
<p id="h-0017" num="0000">Multi-Core Streamline Processing</p>
<p id="p-0122" num="0121">Even with the above optimizations, a single CPU core may not have sufficient processing capacity to meet the processing requirements of high-speed wireless communication technologies. As a result, implementations of the SDR herein are able to use more than one core in a multi-core processor for PHY processing. In some implementations, the multi-core technique is also scalable to provide for compatibility with increasingly more complex signal processing algorithms as wireless technologies progress.</p>
<p id="p-0123" num="0122">As discussed above, such as with respect to <figref idref="DRAWINGS">FIGS. 6B and 6C</figref>, physical layer processing typically contains a number of functional blocks or distinct stages in a pipeline. These blocks differ in processing speed and in input/output data rates and units. A block is only ready to execute when the block has received sufficient input data from the preceding block. Therefore, a key issue is how to schedule a functional block on multiple cores when the block is ready for processing.</p>
<p id="p-0124" num="0123"><figref idref="DRAWINGS">FIG. 15A</figref> illustrates an exemplary implementation for processing data in functional blocks on different cores in a multi-core processor <b>1502</b>, which may correspond to multi-core processors <b>102</b>, <b>202</b> discussed above. For example a first core <b>1504</b> and a second core <b>1506</b> may be used to process the functional blocks discussed above with reference to <figref idref="DRAWINGS">FIGS. 6A-6C</figref>. First core <b>1504</b> may be located on the same multi-core processor as second core <b>1506</b>, or the cores <b>1504</b>, <b>1506</b> may be located on separate processors.</p>
<p id="p-0125" num="0124">In <figref idref="DRAWINGS">FIG. 15A</figref>, the first core <b>1504</b> and the second core <b>1506</b> process a plurality of functional blocks <b>1508</b> using a static scheduling scheme. This implementation is based on the observation that the schedule of each block in a PHY processing pipeline is actually static, i.e., the processing pattern of previous blocks can determine whether a subsequent block is ready or not. Implementations of the SDR herein can thus partition the whole PHY processing pipeline into several sub-pipelines <b>1510</b> and statically assign the sub-pipelines <b>1510</b> to different cores <b>1504</b>, <b>1506</b>. Within one sub-pipeline <b>1510</b>, when a first block <b>1508</b> has accumulated enough data for the next block to be ready, the first block explicitly schedules the next block. Adjacent sub-pipelines from different blocks are connected with a synchronized FIFO <b>1512</b> that manages the delivery of data between the sub-pipelines <b>1510</b>. For example, the synchronized FIFO <b>1512</b> may be established in one of caches <b>106</b>, <b>108</b> discussed above with respect to <figref idref="DRAWINGS">FIG. 1</figref>. Thus, implementations herein allow different PHY processing blocks <b>1508</b> to streamline across multiple cores <b>1504</b>, <b>1506</b> while communicating with one another through one or more shared memory synchronized FIFO queues. For example, if two blocks <b>1508</b> (e.g., Block <b>2</b> and Block <b>3</b> of <figref idref="DRAWINGS">FIG. 15A</figref>) are running on different cores <b>1504</b>, <b>1506</b>, their access to the shared FIFO <b>1512</b> must be synchronized. The traditional implementation of a synchronized FIFO uses a counter to synchronize the writer (producer) and reader (consumer) in what is referred to as a counter-based FIFO (CBFIFO).</p>
<p id="p-0126" num="0125">However, this counter is shared by two processor cores, and every write to the variable by one core will cause a cache miss on the other core. Since both the producer and consumer modify this variable, two cache misses are unavoidable for each datum. It is also quite common to have very fine data granularity in PHY (e.g., 4-16 bytes as summarized in <figref idref="DRAWINGS">FIG. 6</figref> discussed above). Therefore, such cache misses will result in significant overhead when synchronization has to be performed very frequently (e.g., once per microsecond) for such small pieces of data. In implementations of the SDR herein, an inter-core synchronized circular FIFO buffer <b>1512</b> is implemented that does not use a shared synchronization variable. Instead of having a shared variable, implementations herein augment each data slot <b>1514</b> in the synchronized FIFO buffer <b>1512</b> with a header that indicates whether the slot is empty or full (i.e., &#x201c;E&#x201d; or &#x201c;F&#x201d;). Furthermore, each data slot <b>1514</b> is padded to be a size that is equal to a multiple of a cache line size. Thus, the consumer is always chasing the producer in the circular buffer <b>1512</b> for filled slots, as outlined in the following pseudo code:</p>
<p id="p-0127" num="0126">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>// Producer:</entry>
</row>
<row>
<entry/>
<entry>void write_fifo ( DATA_TYPE data ) {</entry>
</row>
<row>
<entry/>
<entry>while (q[w_tail].flag&#x3e;0); // spin wait</entry>
</row>
<row>
<entry/>
<entry>q[w_tail].data = data;</entry>
</row>
<row>
<entry/>
<entry>q[w_tail].flag = 1; // occupied</entry>
</row>
<row>
<entry/>
<entry>w_tail = (w_tail+1) % q_size;</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>// Consumer:</entry>
</row>
<row>
<entry/>
<entry>void read_fifo ( DATA_TYPE * pdata ) {</entry>
</row>
<row>
<entry/>
<entry>while (q[r_head].flag==0); // spin</entry>
</row>
<row>
<entry/>
<entry>*data = q[r_head].data;</entry>
</row>
<row>
<entry/>
<entry>q[r_head].flag = 0; // release</entry>
</row>
<row>
<entry/>
<entry>r_head = (r_head + 1) % q_size;</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0128" num="0127">This chasing-pointer FIFO (CPFIFO) largely mitigates the overhead even for very fine-grained synchronization through implementation of a producer pointer <b>1516</b> and a consumer pointer <b>1518</b>. For example, if the speed of the producer (e.g., Block <b>2</b> on first core <b>1504</b>) and consumer (e.g., Block <b>3</b> on second core <b>1506</b>) is the same, and the two pointers are separated by a particular offset (e.g., two cache lines in the Intel architecture), no cache miss will occur during synchronized streaming since the local cache will pre-fetch the following slots before the actual access. If the producer and the consumer have different processing speeds, e.g., the consumer (reader) is faster than the producer (writer), then eventually the consumer will wait for the producer to release a slot. In this case, each time the producer writes to a slot, the write will cause a cache miss at the consumer. However, the producer will not suffer a miss since the next free slot will be prefetched into its local cache. Further, the cache misses experienced by the consumer will not cause significant impact on the overall performance of the streamline processing since the consumer is not the bottleneck element. Additionally, while the FIFO buffer <b>1512</b> is illustrated as being circular, it is understood in the art that this is only for illustration purposes and that the buffer is actually a logical location in the cache memory and that the locations of the empty and full data slots in the buffer <b>1512</b> are actually maintained by the relative locations of the pointers <b>1516</b>, <b>1518</b>.</p>
<p id="p-0129" num="0128"><figref idref="DRAWINGS">FIG. 15B</figref> illustrates a flowchart of an exemplary process <b>1520</b> carried out by the producer (e.g., first core <b>1504</b>) for processing digital samples using the synchronized FIFO buffer <b>1512</b>. The process is executed by the PHY module of the SDR stack using multiple cores of a multi-core processor <b>1502</b>.</p>
<p id="p-0130" num="0129">At block <b>1522</b>, the producer generates data. For example, first core <b>1504</b> processes data in functional blocks <b>1508</b> (e.g., Block <b>1</b> and Block <b>2</b>) to generate the data.</p>
<p id="p-0131" num="0130">At block <b>1524</b>, the producer determines whether an available data slot is open in the FIFO buffer <b>1512</b> by referring to the data slot to which the producer pointer <b>1516</b> is currently pointing and checking the header for that data slot.</p>
<p id="p-0132" num="0131">At block <b>1526</b>, if the header indicates that the current slot is empty the producer stores the generated data in the empty data slot, and increments the producer pointer <b>1516</b> by one data slot.</p>
<p id="p-0133" num="0132">At block <b>1528</b>, if the header indicates that the data slot to which the producer pointer is currently pointing is full, the producer waits for an empty data slot to become available. A termination condition can also be set by a user when it is desired to stop the process.</p>
<p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. 15C</figref> illustrates a flowchart of an exemplary process <b>1530</b> carried out by the consumer (e.g., second core <b>1506</b>) for processing digital samples using the synchronized FIFO buffer <b>1512</b>. The process is executed by the PHY module of the SDR stack using multiple cores of a multi-core processor <b>1502</b>.</p>
<p id="p-0135" num="0134">At block <b>1532</b>, the consumer is ready to receive and process data. For example, in the pipeline of Block <b>3</b> and Block <b>4</b> in second core <b>1506</b>, data may have been passed from Block <b>3</b> to Block <b>4</b>, and Block <b>3</b> is now ready for more data.</p>
<p id="p-0136" num="0135">At block <b>1534</b>, the consumer checks the data slot to which the consumer pointer <b>1518</b> is currently pointing to determine if the slot contains available data by checking the header to determine whether the header indicates that the slot is full or empty.</p>
<p id="p-0137" num="0136">At block <b>1536</b>, when the slot contains data, the consumer takes the data from the data slot, thereby opening the data slot and changing the header of the data slot to indicate that the data slot is now empty. The consumer also increments the consumer pointer to the next data slot.</p>
<p id="p-0138" num="0137">At block <b>1538</b>, if no data is available in the current data slot, the consumer continues to check the data slot and waits until the data slot is filled with data.</p>
<p id="h-0018" num="0000">Real-Time Support</p>
<p id="p-0139" num="0138">SDR processing is a time-critical task that requires strict guarantees of computational resources and hard real-time deadlines. For example, in the 802.11 protocols, the wireless channel is a resource shared by all transceivers operating on the same spectrum. Thus, because simultaneously transmitting neighbors may interfere with each other, various MAC protocols have been developed to coordinate transmissions in wireless networks to avoid collisions.</p>
<p id="p-0140" num="0139">Further, most modern MAC protocols, such as 802.11, require timely responses to critical events. For example, 802.11 uses a CSMA (Carrier-Sense Multiple Access) MAC protocol to coordinate transmissions. Transmitters are required to sense the channel before starting their transmission, and channel access is only allowed when no energy is sensed, i.e., the channel is free. The latency between sense and access should be as small as possible. Otherwise, the sensing result could be outdated and inaccurate, resulting in a collision. Another example is the link-layer retransmission mechanisms in wireless protocols, which may require an immediate acknowledgement (ACK) to be returned in a limited time window. Commercial standards like IEEE 802.11 mandate a response latency within tens of microseconds, which is challenging to achieve in software on a general-purpose processor running a general purpose OS.</p>
<p id="p-0141" num="0140">Thus, as an alternative to relying upon the full generality of real-time operating systems, implementations herein obtain real-time guarantees by dedicating one or more processor cores to SDR processing in a multi-core processing system. Thus, because one or more cores are dedicated to the SDR, implementations herein guarantee sufficient computational resources, without being affected by other concurrent tasks in the system.</p>
<p id="p-0142" num="0141">For example, wireless communications often require the PHY to constantly monitor the channel for incoming signals. Therefore, the PHY processing may need to be active all the times. It is desirable to schedule this monitoring task to operate continually on the same core to minimize overhead, such as cache misses or TLB flushes. Furthermore, isolating applications into different cores can result in better performance as compared to symmetric scheduling, since an effective use of cache resources and a reduction in locks can outweigh dedicating cores. Moreover, a core dedication mechanism is much easier to implement than a real-time scheduler, sometimes even without modifying an OS kernel. One example of a method for achieving core dedication according to implementations of the SDR herein is raising the priority of a kernel thread so that the kernel thread is pinned on a particular core and runs exclusively on that core until termination.</p>
<p id="p-0143" num="0142">Implementations of the SDR herein use exclusive threads (i.e., &#x201c;ethreads&#x201d;) to dedicate cores for real-time SDR tasks. The ethreads can be implemented without any modification to the kernel code. For example, an ethread can be implemented as a kernel-mode thread, and thereby exploit the processor affiliation that is commonly supported in conventional operating systems to provide control regarding on which core the kernel mode thread runs. Once the OS has scheduled the ethread on a specified physical core, the OS raises the priority and/or the IRQL (interrupt request level) on the thread to a level as high as the kernel scheduler, e.g., dispatch level in Windows&#xae;. Thus, the ethread takes control of the core and prevents itself from being preempted by other threads by raising the interrupt request level.</p>
<p id="p-0144" num="0143">Running at such an IRQL, however, does not prevent the core from responding to hardware interrupts. Therefore, the interrupt affiliations of all devices attached to the host are also constrained. For example, if an ethread is running on a particular core, all interrupt handlers for installed devices are removed from the core, thus preventing the core from being interrupted by hardware. Furthermore, to ensure the correct operation of the computing device and operating system, implementations of the SDR herein always ensure core zero is able to respond to all hardware interrupts. Consequently, implementations of the SDR herein only allow ethreads to run on cores whose ID is greater than zero.</p>
<p id="h-0019" num="0000">Exemplary Implementations</p>
<p id="p-0145" num="0144">Exemplary implementations of the SDR herein include a fully functional WiFi transceiver on the SDR platform as an exemplary WiFi implementation. The exemplary WiFi implementation SDR stack supports all IEEE 802.11a/b/g modulations and can communicate seamlessly with commercial WiFi network cards. For instance, implementations of high-speed wireless protocols on general-purpose computing device architectures must overcome a number of challenges that stem from existing hardware interfaces and software architectures. First, transferring high-fidelity digital waveform samples into system memory for processing requires very high bus throughput. Conventional software radio platforms use USB 2.0 or Gigabit Ethernet, which cannot satisfy this requirement for sustaining high-speed wireless protocols. Second, physical layer (PHY) signal processing has very high computational requirements for generating information bits from waveforms, and vice versa, particularly at high modulation rates. Lastly, wireless PHY and media access control (MAC) protocols have low-latency real-time deadlines that must be met for correct operation. For example, the 802.11 MAC protocol requires precise timing control and ACK response latency on the order of tens of microseconds. Existing software architectures on the general-purpose computing devices cannot consistently meet this timing requirement.</p>
<p id="p-0146" num="0145"><figref idref="DRAWINGS">FIG. 16A</figref> illustrates an exemplary WiFi implementation <b>1600</b> of the SDR herein implemented on hardware, such as a computing device <b>1602</b>, having a multi-core processor as described above with reference to <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, and coupled to an RCB <b>1604</b> corresponding to RCBs <b>116</b>, <b>214</b>, and/or <b>302</b>. In the illustrated implementation, the MAC state machine (SM) is implemented as an ethread <b>1606</b> by raising the priority of a kernel thread so that the kernel thread is pinned on a particular core and runs exclusively on that core until termination. Since a radio according to the 802.11 standard is a half-duplex radio, the demodulation components of the PHY can run directly within a MAC SM thread. Furthermore, if a single core is insufficient for all PHY processing (e.g., as may be the case with 802.11a/g), the PHY processing can be partitioned across two ethreads comprising MAC_SM thread <b>1606</b> and a PHY_Thread <b>1608</b>. These two ethreads <b>1606</b>, <b>1608</b> are streamlined using a synchronized CPFIFO <b>1610</b>, as discussed above with respect to <figref idref="DRAWINGS">FIGS. 15A-8C</figref>. An additional thread, Snd_thread <b>1612</b>, modulates the outgoing frames into waveform samples in the background. As discussed above, these modulated waveforms can be pre-stored in the RCB's memory to facilitate speedy transmission. Further, a Completion_thread <b>1614</b> monitors a receive buffer, Rcv_buf <b>1616</b> and notifies upper software layers of any correctly received frames. The completion thread <b>1614</b> also cleans up Rcv_buf <b>1616</b> and a send buffer, Snd_buf <b>1618</b> after they are used. Because the functions of the Completion_thread <b>1614</b> and the Snd_thread <b>1612</b> do not require the same high performance and low latency of the PHY ethreads <b>1606</b>, <b>1608</b>, these other threads are not implemented as ethreads, and can be run on any available core.</p>
<p id="p-0147" num="0146">In the illustrated example, DMA memory <b>1620</b> includes a transmitter buffer TX_buf <b>1622</b> and a receiver buffer RX_buf <b>1624</b> for storing digital samples for transmission and reception on transmitter hardware <b>1626</b> and receiver hardware <b>1628</b>, respectively, on the RF front end <b>1630</b> as discussed above, such as with respect to <figref idref="DRAWINGS">FIG. 4</figref>. Furthermore, RCB <b>1604</b> includes control modules <b>1632</b>, such as the DMA controller, bus controller, memory controller, and RF controller described above with respect to <figref idref="DRAWINGS">FIG. 4</figref>, and collectively represented as Ctrl <b>1624</b>, which exchange commands with MAC_SM_Thread <b>1606</b> for ensuring proper interaction between RCB <b>1604</b> and computing device <b>1602</b>. During streamline processing, MAC_SM thread <b>1606</b> and PHY thread <b>1608</b> access the PHY library <b>1634</b> for accessing LUTs and SIMD instructions for carrying out optimized PHY processing, as discussed above with respect to <figref idref="DRAWINGS">FIGS. 6A-6C</figref> and <b>7</b>A-<b>7</b>B. The processed digital samples are delivered to the receive buffer <b>1616</b>, are then presented via the completion thread <b>1614</b> to virtual Ethernet interface <b>1636</b>, thereby to the TCP/IP layer <b>1638</b>, and thus, to one or more applications <b>1640</b> also running on one or more cores of computing device <b>1602</b>.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 16B</figref> illustrates an exemplary process <b>1650</b> that may be executed using one or more cores of a multi-core processor for exclusively performing SDR processing on the one or more cores.</p>
<p id="p-0149" num="0148">At block <b>1652</b>, digital samples are passed from the RCB to the memory in the computing device. The digital samples are received from the RF front end by the RCB and then may be passed to the memory in the computing device using direct memory access (DMA), or the like. The passing of the digital samples to the memory in the computing device may be controlled by a DMA controller on the RCB, and the DMA may also temporarily store the digital samples on the RCB in a buffer or onboard memory.</p>
<p id="p-0150" num="0149">At block <b>1654</b>, threads may be initiated on one or more cores of the multi-core processor for performing SDR processing, such as PHY and MAC processing.</p>
<p id="p-0151" num="0150">At block <b>1656</b>, the interrupt request level for the one or more cores may be raised to ensure that the threads are not interrupted so that the cores are able to exclusively perform SDR processing of the digital samples. Further, the interrupt handler for the one or more cores may also be removed to prevent hardware interrupts as well.</p>
<p id="p-0152" num="0151">At block <b>1658</b>, when multiple threads operate on different cores, the processing between cores may be streamlined as discussed above using a synchronized FIFO between the cores.</p>
<p id="p-0153" num="0152">At block <b>1660</b>, SMID and LUTs may be used where applicable to expedite the SDR processing of the digital samples.</p>
<p id="p-0154" num="0153">At block <b>1662</b>, the processed digital samples are output for use, such as by an application on the computing device. Further, while the foregoing process illustrates exclusive core processing of digital samples received from the RF front end, it may be seen that digital samples generated by the computing device for transmission by the RF front end are similarly processed. For example, in the case of digital samples to be transmitted, steps <b>1654</b>-<b>1660</b> are the same, with the input being a bit stream generated or received by the computing device, such as from an application, and the output being processed digital samples ready for conversion to analog and transmission by the RF front end.</p>
<p id="p-0155" num="0154">Further, the exemplary WiFi implementation <b>1600</b> is able to implement the basic access mode of the 802.11 standard. Exemplary details of the MAC State Machine are illustrated in <figref idref="DRAWINGS">FIG. 17</figref>. Normally, the SM is in the Frame Detection (FD) state <b>1702</b>. In the frame detection state <b>1702</b>, the RCB <b>1604</b> constantly writes samples into the Rx_buf <b>1624</b>. The SM (i.e. MAC_SM_Thread <b>1606</b>) continuously measures the average energy to determine whether the channel is clean or whether there is an incoming frame.</p>
<p id="p-0156" num="0155">The transmission of a frame follows the carrier-sense multiple access (CSMA) mechanism. When there is a pending frame to be transmitted, the SM first checks whether the energy on the channel is low (i.e., no frame is currently being received). If the channel is busy, the transmission is deferred and a backoff timer <b>1704</b> is started. Each time the channel becomes free, the SM checks if any backoff time remains. If the timer goes to zero, the SM transmits the pending frame at block Tx <b>1706</b>.</p>
<p id="p-0157" num="0156">Further, when the exemplary WiFi implementation starts to receive a frame, it detects a high energy in the frame detection state <b>1702</b>. In 802.11, SM uses three steps in the PHY layer to receive a frame at block Rx <b>1708</b>. First, the PHY layer needs to synchronize to the frame, i.e., find the starting point of the frame (timing synchronization) and the frequency offset and phase of the sample stream (carrier synchronization). Synchronization is usually done by correlating the incoming samples with a pre-defined preamble. Subsequently, the PHY layer needs to demodulate the PLCP (Physical Layer Convergence Protocol) header, which is always transmitted using a fixed low-rate modulation mode. The PLCP header contains the length of the frame as well as the modulation mode, possibly a higher rate, of the frame data that follows. Thus, only after successful reception of the PLCP header will the PHY layer know how to demodulate the remainder of the frame.</p>
<p id="p-0158" num="0157">After successfully receiving a frame at Rx <b>1708</b>, the 802.11 MAC standard requires a receiving station to transmit an ACK frame in a timely manner as indicated at block ACK Tx <b>1710</b>. For example, 802.11b requires that an ACK frame be sent with no more than a 10 &#x3bc;s delay to acknowledge receipt of the received frame. However, this short ACK requirement is quite difficult for an SDR implementation to achieve in software on a general-purpose computing device. Both generating and transferring the waveform across the system bus can cause a latency of several microseconds, and total time required is usually larger than the maximum amount mandated by the standard. Fortunately, an ACK frame generally has a fixed pattern. For example, in 802.11 all data in an ACK frame is fixed except for the sender address of the corresponding data frame. Thus, in the exemplary WiFi implementation <b>1600</b>, it is possible to pre-calculate most of an ACK frame (19 bytes), and update only the address (10 bytes). Further, this can be done early in the processing, immediately after demodulating the MAC header, and without waiting for the end of a frame. The waveform is then pre-stored into the memory of the RCB. Thus, the time for ACK generation and transferring can overlap with the demodulation of the data frame being received. After the MAC SM demodulates the entire frame and validates the CRC32 checksum, the MAC SM instructs the RCB to transmit the ACK, which has already been stored on the RCB. Thus, the latency for ACK transmission is very small because the ACK is already stored in the RCB and can be immediately transmitted without having to be generated or sent along the system bus.</p>
<p id="p-0159" num="0158">In rare cases when the incoming data frame is quite small (e.g., the frame contains only a MAC header and zero payload), then the exemplary WiFi implementation cannot fully overlap ACK generation and the DMA transfer with demodulation to completely hide the latency. In this case, the exemplary WiFi implementation may fail to send the ACK in time. This problem is addressed by maintaining a cache of previous ACKs in the RCB. With 802.11, all data frames from one node will have exactly the same ACK frame. Thus, pre-allocated memory slots in the RCB can be used to store ACK waveforms for different senders (in some implementations, 64 different slots are allocated). Therefore, when demodulating a frame, if the ACK frame is already in the RCB cache, the MAC SM simply instructs the RCB to transmit the pre-cached ACK. With this scheme, the exemplary WiFi implementation may be late on the first small frame from a sender, effectively dropping the packet from the sender's perspective. But the retransmission, and all subsequent transmissions, will find the appropriate ACK waveform already stored in the RCB cache.</p>
<p id="p-0160" num="0159">The exemplary WiFi implementation <b>1600</b> has been implemented and tested as a full 802.11a/g/b transceiver, which support DSSS (Direct Sequence Spreading: 1 and 2 Mbps in 11b), CCK (Complementary Code Keying: 5.5 and 11 Mbps in 11b), and OFDM (Orthogonal Frequency Division Multiplexing: 6, 9 and up to 54 Mbps in 802.11a/g).</p>
<p id="p-0161" num="0160">Accordingly, implementations of the SDR herein have been found to interoperate seamlessly with commercial hardware-based 802.11 devices, while supporting the full suite of 802.11a/b/g modulation rates and achieving substantially equivalent performance to the hardware-based devices at each modulation. As a result, it may be seen that implementations of the SDR herein can process signals sufficiently fast to achieve full channel utilization, and that the SDR can satisfy all timing requirements of the 802.11 standards with a software implementation on a general-purpose computing device.</p>
<heading id="h-0020" level="1">CONCLUSION</heading>
<p id="p-0162" num="0161">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claims. For example, the systems described could be configured as networked communication devices, computing devices, and other electronic devices.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method implemented on a computing device&#x2014;in a software defined radio (SDR) system&#x2014;by a processor configured to execute instructions that, when executed by the processor, direct the computing to device to perform acts comprising:
<claim-text>receiving an array of data bits;</claim-text>
<claim-text>loading a set of bits of the array of data bits;</claim-text>
<claim-text>performing a &#x201c;min&#x201d; operation to find an optimal path in a Trellis diagram of a Viterbi decoder, wherein the &#x201c;min&#x201d; operation includes:
<claim-text>starting from a known state in the Trellis diagram; and</claim-text>
<claim-text>updating a data structure for each expansion in the Trellis diagram relative to the known state, the data structure containing a path metric embedded in most significant bits to define a minimal value for each state in the expansion, and a path index embedded in least significant bits to define link information for the minimal value; and</claim-text>
</claim-text>
<claim-text>tracing back the minimal values relative to an end state of the Trellis diagram to obtain the optimal path.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the array of data bits includes one or more soft values from a soft demapper in the SDR system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the soft demapper further comprises:
<claim-text>receiving a sequence of data;</claim-text>
<claim-text>quantizing the sequence of data into in-phase (I) component and quadrature phase (Q) component, wherein the I component and the Q component are combined to form an I-Q pair input;</claim-text>
<claim-text>using the I-Q pair input in a look-up table (LUT) that provides the one or more soft values for the I component and the Q component, wherein the LUT is shared and used by the I component and the Q component, which are computed separately; and</claim-text>
<claim-text>outputting the one or more soft values for the I-Q pair input.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the SDR system further includes a finite impulse response (FIR) filter, which comprises:
<claim-text>receiving an array of input samples, wherein the array of input samples includes an in-phase (I) sample and a quadrature phase (Q) sample, wherein the coefficient arrays include a first coefficient array for the I sample and a second coefficient array for the Q sample;</claim-text>
<claim-text>loading the I sample and the Q sample;</claim-text>
<claim-text>multiplying the I sample with the first coefficient array to provide a first product, multiplying the Q sample with the second coefficient array to provide a second product, wherein the first product and the second product are stored in a temporal accumulative sum, wherein the temporal accumulative sum includes a summation of the first product for the I sample and summation of the second product for the Q sample; and</claim-text>
<claim-text>outputting the temporal accumulative sum for the I sample and the Q sample; and</claim-text>
<claim-text>wherein the FIR filter includes a memory layout that contains:
<claim-text>one or more rows forming a packed-vector of &#x201c;m&#x201d; components for single input multiple data (SIMD) operations;</claim-text>
<claim-text>a coefficient vector that is replicated in each of &#x201c;m&#x201d; columns in a zigzag layout; and</claim-text>
<claim-text>an &#x201c;n&#x201d; temporary variables containing accumulated sum for each FIR filter tap for the I sample and the Q sample;</claim-text>
</claim-text>
<claim-text>wherein a total number of the one or more rows is equivalent to a value of&#x2014;&#x201c;n&#x201d; plus &#x201c;m&#x201d; minus one&#x2014;the &#x201c;m&#x201d; and &#x201c;n&#x201d; are integers, and wherein the SIMD operations are used to accelerate processing in the FIR filter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the array of data bits are encoded using at least one of convolutional encoder or turbo encoder, the convolutional encoder and the turbo encoder each uses a look-up table (LUT) to reduce computational requirements for online processing and to speed up overall processing time.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the LUT includes an input index that combines input bits with present bit-states in the convolutional encoder or the turbo encoder.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the LUT includes an output that contains new bit-states and output bits, wherein the new bit-states are used to update the present bit-states.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the &#x201c;min&#x201d; operation is implemented by at least one or more multi-core processors that execute single input multiple data (SIMD) instructions.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data structure is used during the trace back by tracing stored path index for each expansion.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedding of the path index in the least significant bits of the data structure does not affect an output of the &#x201c;min&#x201d; operation.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer-readable storage device having computer-readable instructions thereon which, when executed by a computer in a software defined radio (SDR) system, implement a method comprising:
<claim-text>receiving an array of data bits;</claim-text>
<claim-text>loading a byte of the array of data bits;</claim-text>
<claim-text>performing an algorithm to find an optimal path in a Trellis diagram, wherein the algorithm includes:
<claim-text>starting from a known state in the Trellis diagram; and</claim-text>
<claim-text>updating a data structure for each expansion in the Trellis diagram relative to the known state, the data structure containing a path metric embedded in most significant bits to define a minimal value for each state in the expansion, and a path index embedded in least significant bits to define link information for the minimal value; and</claim-text>
</claim-text>
<claim-text>tracing back the minimal values relative to an end state of the Trellis diagram, wherein the tracing back uses single input multiple data (SIMD) instructions to accelerate processing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer-readable storage device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the array of data bits includes data bits that were transmitted using spreading modulation.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer-readable storage device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the spreading modulation uses a look-up table (LUT) as an optimization method, the LUT is used to map information bits directly to spread signal sequence.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer-readable storage device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the Trellis diagram is used in different algorithms employed in the SDR system.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer-readable storage device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the SDR system further comprises a finite impulse response (FIR) filter, which includes a memory layout that contains:
<claim-text>one or more rows forming a packed-vector of &#x201c;m&#x201d; components for single input multiple data (SIMD) operations;</claim-text>
<claim-text>a coefficient vector that is replicated in each of &#x201c;m&#x201d; columns in a zigzag layout; and</claim-text>
<claim-text>an &#x201c;n&#x201d; temporary variables containing accumulated sum for each FIR filter tap for in-phase (I) sample and quadrature phase (Q) sample;</claim-text>
<claim-text>wherein a total number for the one or more rows is equivalent to a value of&#x2014;&#x201c;n&#x201d; plus &#x201c;m&#x201d; minus one&#x2014;the &#x201c;m&#x201d; and &#x201c;n&#x201d; are integers, and wherein the SIMD operations are used to accelerate processing in the FIR filter.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer-readable storage device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein SDR system further comprises at least one of:
<claim-text>a scrambler or a de-scrambler that use a look-up table (LUT) as an optimization method, wherein the LUT is constructed by combining input bits with present bit-states as an input index; and</claim-text>
<claim-text>an output for the LUT includes output bits and new bit-states.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer-readable storage device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the present bit-states are updated using the new-bit states.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A software-defined radio (SDR) stack comprising:
<claim-text>a memory; and</claim-text>
<claim-text>a multi-core processor coupled to the memory, which is configured to:
<claim-text>receive an array of data bits comprising one or more soft values from a soft-demapper that uses a look-up table (LUT) as an optimization method;</claim-text>
<claim-text>load a byte of the array of data bits;</claim-text>
<claim-text>perform an algorithm to find an optimal path in a Trellis diagram, wherein the algorithm includes:
<claim-text>starting from a known state in the Trellis diagram; and</claim-text>
<claim-text>updating a data structure for each expansion in the Trellis diagram relative to the known state, the data structure containing a path metric and a path index; and</claim-text>
</claim-text>
<claim-text>trace back the optimal path relative to an end state of the Trellis diagram.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The SDR stack of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the LUT is shared and used by in-phase (I) component and quadrature phase (Q) component, which are computed separately.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The SDR stack of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the LUT includes an input of I-Q pair that is derived from a quantized received symbol, the quantized received symbol includes the I component and the Q component that are combined to provide the I-Q pair.</claim-text>
</claim>
</claims>
</us-patent-grant>

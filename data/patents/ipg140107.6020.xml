<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627143-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627143</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12834603</doc-number>
<date>20100712</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>351</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714 19</main-classification>
</classification-national>
<invention-title id="d2e53">Dynamically modeling and selecting a checkpoint scheme based upon an application workload</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6161219</doc-number>
<kind>A</kind>
<name>Ramkumar et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717130</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7996717</doc-number>
<kind>B1</kind>
<name>Colgrove et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 19</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>8145947</doc-number>
<kind>B1</kind>
<name>Hayden et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 20</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0053088</doc-number>
<kind>A1</kind>
<name>Ali et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0168698</doc-number>
<kind>A1</kind>
<name>Coulson et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2007/0283325</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717122</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0120620</doc-number>
<kind>A1</kind>
<name>Lett et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0031084</doc-number>
<kind>A1</kind>
<name>Tremblay et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 13</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0122052</doc-number>
<kind>A1</kind>
<name>Waldspurger et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2011/0029490</doc-number>
<kind>A1</kind>
<name>Agarwal et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707684</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714 19</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120011401</doc-number>
<kind>A1</kind>
<date>20120112</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ranganathan</last-name>
<first-name>Parthasarathy</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Walker</last-name>
<first-name>Bruce J.</first-name>
<address>
<city>Rolling Hills Estates</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Byrne</last-name>
<first-name>John L.</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ramirez</last-name>
<first-name>Laura L.</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ranganathan</last-name>
<first-name>Parthasarathy</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Walker</last-name>
<first-name>Bruce J.</first-name>
<address>
<city>Rolling Hills Estates</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Byrne</last-name>
<first-name>John L.</first-name>
<address>
<city>Pasadena</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Ramirez</last-name>
<first-name>Laura L.</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Baderman</last-name>
<first-name>Scott T</first-name>
<department>2114</department>
</primary-examiner>
<assistant-examiner>
<last-name>Leibovich</last-name>
<first-name>Yair</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Illustrated is a system and method for executing a checkpoint scheme as part of processing a workload using an application. The system and method also includes identifying a checkpoint event that requires an additional checkpoint scheme. The system and method includes retrieving checkpoint data associated with the checkpoint event. It also includes building a checkpoint model based upon the checkpoint data. The system and method further includes identifying the additional checkpoint scheme, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload using the application.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="235.54mm" wi="174.84mm" file="US08627143-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="249.94mm" wi="118.53mm" orientation="landscape" file="US08627143-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="242.91mm" wi="159.60mm" orientation="landscape" file="US08627143-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="231.99mm" wi="187.79mm" file="US08627143-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="234.53mm" wi="176.87mm" file="US08627143-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="224.96mm" wi="178.82mm" file="US08627143-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="145.46mm" wi="173.65mm" file="US08627143-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="127.51mm" wi="171.70mm" file="US08627143-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="230.72mm" wi="179.41mm" file="US08627143-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="230.04mm" wi="185.84mm" file="US08627143-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="190.92mm" wi="158.75mm" file="US08627143-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Checkpointing is a technique for inserting fault tolerance into computing systems. It includes, for example, storing a snapshot of a current application state, and using it for restarting the execution of an application in case of failure. The computing system that employs checkpointing may be virtualized such that a single computer system may have multiple operating systems, in the form of Virtual Machines (VMs), managed by a hypervisor (e.g., XEN), or other suitable virtual machine monitor. Software checkpointing schemes may be incremental stop (e.g., Copy On Write (COW), or Dirty Bit) or full stop.</p>
<p id="p-0003" num="0002">In COW, all memory pages of each VM in the computer system are initially marked as read/only. The first modification of any page causes a hypervisor trap (i.e., an exception is thrown due to the attempted modification of the page). In servicing the trap, the hypervisor copies the original page into a ring buffer until the next checkpoint is declared. A checkpoint is declared either after a fixed time (e.g., 1 second), or if the ring buffer gets more than half full. Declaring a checkpoint pauses the VM just long enough to mark all pages r/o and start a new checkpoint ring (R<b>2</b>). The checkpoint can be saved (stable storage or remotely) by copying the new version of each page in previous ring (R<b>1</b>) (either from the VM if that page is still r/o or from R<b>2</b>).</p>
<p id="p-0004" num="0003">Dirty Bit checkpointing is similar. All pages of the VM are initially marked clean. Any page modified will have the hardware dirty bit for that page. Declaring a checkpoint pauses the VM while all pages marked dirty are copied and then all pages marked clean again. The VM is executed with no overhead until the next checkpoint.</p>
<p id="p-0005" num="0004">In full stop, the VM is paused and a full checkpoint is taken before execution of an application is continued. As compared to COW, there is no overhead (i.e., no COW overhead and no ring buffer of modified pages) before the checkpoint event. This said, there is, however, significant overhead at checkpoint time due to the taking of a full stop checkpoint.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">Some embodiments of the invention are described, by way of example, with respect to the following figures:</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of a system, according to an example embodiment, for implementing adaptive checkpointing.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram of a software and hardware stack, according to an example embodiment, associated with a compute blade.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of a system that includes a computer-readable media, according to an example embodiment, used for adaptive checkpointing.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of a system, according to an example embodiment, used for adaptive checkpointing.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart illustrating an example method, according to an example embodiment, executed for adaptive checkpointing.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart illustrating the execution of a method, according to an example embodiment, for adaptive checkpointing that includes the use of a threshold or range based system for determining an appropriate checkpoint scheme.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart illustrating the execution of an operation, according to an example embodiment, to build a model for each available checkpoint scheme.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 8</figref> is a flow chart illustrating the execution of an operation, according to an example embodiment, that executes a simulation engine to simulate the execution of each available checkpoint scheme.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart illustrating the execution of a method, according to an example embodiment, to implement a scoring system for determining the appropriate checkpoint scheme.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 10</figref> is a flow chart illustrating the execution of a method, according to an example embodiment, to select the best checkpoint scheme based upon a model.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 11</figref> is a diagram of an example computer system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">Illustrated is a system and method for adaptive checkpointing where the workload behavior of an application is examined, and the appropriate checkpoint scheme is dynamically selected. This adaptive checkpointing may be performed at the granularity of entire applications, or at the level of individual phases of the application. Further, as will be discussed in more detail below, different decisions could be taken based on different operating conditions of the computing system (&#x201c;system&#x201d;) upon which the checkpoint scheme is being implemented. For example, when the system is lightly loaded, a more memory intensive scheme could be used, while if the system is heavily loaded, a more infrequent checkpointing scheme such as full stop checkpoint could be used.</p>
<p id="p-0019" num="0018">In some example embodiments, adaptive checkpointing is used to select an incremental or full stop checkpointing scheme. The selection of the appropriate checkpointing scheme is based upon modeling each respective checkpoint scheme, and the selection of an appropriate scheme based upon the results of the modeling. During the modeling of each respective checkpointing scheme, certain considerations are taken into account by each model. These considerations include calibration and instrumentation, external events, and system and/or application requirements. The selection of an appropriate checkpoint scheme may include considering the relative costs of using each checkpoint scheme as reflected in the model of each. This adaptive checkpointing can occur on a periodic of event driven basis such that the adaptive checkpointing is implemented on an on-going basis by a hypervisor.</p>
<p id="p-0020" num="0019">In some example embodiments, the system and method for adaptive checkpointing includes the use of a threshold or range based system for determining an appropriate checkpoint scheme. In this threshold or range based system, one or more thresholds are set for system. These thresholds are based upon the previously discussed considerations that include calibration and instrumentation, external events, and system and/or application requirements. For example, regarding calibration and instrumentation, the checkpointing scheme is modeled with certain assumptions regarding memory pages accessed, number of dirty pages, and/or the size of the VM image. Additionally, regarding external events, the checkpointing scheme may be modeled with certain assumptions regarding system load, or previous violations of utility functions. As to system and/or application requirements, the checkpointing scheme may be modeled based upon assumptions regarding the particular Service Level Agreement (SLA) to be enforced by the system. Further, the system and/or application requirements may take into account the runtime resource requirements of the application that is to be executed for which a checkpoint scheme is being modeled.</p>
<p id="p-0021" num="0020">In one example implementation of this threshold or range based system for determining the appropriate checkpoint scheme, an incremental checkpoint scheme is implemented for a computer system. Further, a threshold value or value range is set for at least one of calibration and instrumentation, external events, and/or system and/or application requirements. If during the processing of a job, the load on the computer system is high, and the threshold value or value range exceeded, a switch may occur from the incremental stop checkpoint scheme to the full stop checkpoint scheme. Prior to making this switch, however, the full stop checkpoint scheme may be modeled using the current load information so as to determine whether the full stop checkpoint is appropriate. Further, in some example cases, prior to making the switch, the threshold value or value range may be allowed to be exceeded for a predetermined number of compute cycles so as to ensure that the high load on the computer system is not an anomaly. As will be discussed in more detail below, a similar implementation may be used to switch from a full stop checkpoint scheme to an incremental stop checkpoint scheme.</p>
<p id="p-0022" num="0021">An alternative example embodiment of the system and method for adaptive checkpointing is also illustrated that uses a scoring system for determining the appropriate checkpoint scheme. In this scoring system, checkpoint schemes are assigned a score based upon the previously discussed considerations. From these scores a checkpoint scheme is assign a best model designation, and the checkpoint scheme having the best model designation is implemented on the computer system. This scoring system may be implemented prior to the processing of a job by the computer system, or during the processing of the job so as to allow for adaptive implementation of a checkpoint scheme. The details of this scoring system for determining the appropriate checkpoint scheme are outlined below.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of an example system <b>100</b> for implementing adaptive checkpointing. Shown are compute blades <b>101</b>-<b>102</b> upon which the adaptive checkpointing may be implemented. These compute blades <b>101</b>-<b>102</b> reside upon a blade rack <b>103</b>. This blade rack <b>103</b> is operatively connected to a domain <b>104</b>. The domain <b>104</b> may be a Local Area Network, (LAN), a Wide Area Network (WAN), internet, or other suitable network and associated topology.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram of an example software and hardware stack associated with the compute blade <b>102</b>. Shown are a physical layer <b>201</b>, hypervisor layer <b>202</b>, and a Virtual Machine (VM) layer <b>203</b>. Residing within the hypervisor layer <b>202</b>, is an adaptive checkpoint module <b>204</b>. Included as part of this adaptive checkpoint module <b>204</b> is a calibration and instrumentation module <b>205</b>, event monitor module <b>206</b>, requirements module <b>207</b>, function and modeling module <b>208</b>, and a selection logic module <b>209</b>. Included in the VM layer <b>203</b> is an application <b>211</b> that resides upon an Operating System (OS) 210. In some example cases, the application <b>211</b> provides the job that is processed by compute blade <b>102</b> (i.e., the computer system) for which adaptive checkpointing is performed.</p>
<p id="p-0025" num="0024">Regarding the adaptive checkpointing module <b>204</b>, this module may be used to implement a threshold or range based system for determining an appropriate checkpoint scheme. Additionally, the adaptive checkpointing module <b>204</b> may be used to implement a scoring system for determining the appropriate checkpoint scheme. The modules <b>205</b>-<b>209</b>, included as part of the module <b>204</b>, have functionality that relates to the previously discussed consideration. For example, the calibration and instrumentation module <b>205</b> collects application data (e.g., cycles to execute the application <b>211</b>, and memory to be used by the application <b>211</b>) and checkpoint overhead (i.e., the cost in terms of compute cycles). The event monitor module <b>206</b> monitors the current state of the compute blade <b>102</b> in terms of compute cycle usage, and memory usage. The requirements module <b>207</b> monitors and retrieves SLA requirement data regarding the system <b>100</b>, and applications running on this system <b>100</b>. For example, the SLA requirements data may dictate the allowable downtime for the system <b>100</b>, and one or more of the compute blades <b>101</b>-<b>102</b>. Additionally, the SLA requirements data may dictate how far back in the history of the execution of an application the checkpointing may occur. This is known herein as a checkpoint rollback. Moreover, the SLA requirements data may dictate when the checkpoint may occur (i.e., under what circumstances) and whether there is a preference for a particular type of checkpoint scheme (e.g., full stop versus incremental stop checkpointing). The function and modeling module <b>208</b> performs the modeling of the checkpoint schemes given the above referenced considerations and assumptions. During the course of the modeling engaged in by the function and modeling module <b>208</b>, data from the modules <b>205</b>-<b>207</b> may be used as inputs in the form of assumptions in modeling the checkpoint scheme(s). The selection logic block <b>209</b> is used to select of an appropriate scheme based upon the results of the modeling. This selection logic may use the aforementioned threshold or range based system for determining an appropriate checkpoint scheme, or a scoring system for determining the appropriate checkpoint scheme. Further, the selection logic block <b>209</b> may rely upon the SLA requirements data in determining an appropriate checkpoint scheme. The execution of these various blocks may be triggered based upon a checkpoint event, and may be adaptive in nature.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an example system <b>300</b> used for adaptive checkpointing that includes a computer-readable media. These various blocks may be implemented in hardware, firmware, or software. The compute blade <b>102</b> is an example of the system <b>300</b>. Further, these various blocks are operatively connected in terms of being logically or physically connected. Shown is a CPU <b>301</b> operatively connected to a memory <b>302</b>. The memory <b>302</b> may include logic encoded in one or more tangible media to execute a checkpoint scheme as part of processing a workload with an application. Further, the logic may be executed to identify a checkpoint event that requires an additional checkpoint scheme. Additionally, the logic may be executed to retrieve checkpoint data associated with the checkpoint event. The logic may also be executed to build a checkpoint model based upon the checkpoint data. Further, the logic may be executed to identify the additional checkpoint scheme, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application. In some example embodiments, the checkpoint event includes an exceeding of a range value, or threshold value. Moreover, in some example embodiments, the checkpoint event includes a failure to meet a range value or threshold value. The value includes at least one of a memory page modification rate, a CPU cycle rate, a memory usage rate, or a power usage rate. Additionally, the checkpoint scheme includes at least one of a full stop checkpoint, or an incremental stop checkpoint. The logic may be executed to build of the checkpoint model the logic executed to retrieve calibration and instrumentation data, retrieve system information, and retrieve requirements information. The logic may be executed to switch from the checkpoint scheme to the additional checkpoint scheme, as part of the processing of the workload using the application.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an example system <b>400</b> used for adaptive checkpointing. These various blocks may be implemented in hardware, firmware, or software, The compute blade <b>102</b> is an example of the system <b>400</b>. Further, these various blocks are operatively connected in terms of being logically or physically connected. Shown is a CPU <b>401</b> operatively connected to a memory <b>402</b>. Operatively connected to the CPU <b>401</b> is a checkpoint module <b>403</b> to execute a checkpoint scheme as part of processing a workload with an application. Operatively connected to the CPU <b>401</b> is an adaptive checkpointing module <b>404</b> to identify a checkpoint event that requires an additional checkpoint scheme. Operatively connected to the CPU <b>401</b> is an event monitor module <b>405</b> to retrieve checkpoint data associated with the checkpoint event. Operatively connected to the CPU <b>401</b> is a function and modeling module <b>406</b> to build a checkpoint model based upon the checkpoint data. Operatively connected to the CPU <b>401</b> is a selection logic module <b>407</b> to identify the additional checkpoint scheme, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application. Operatively connected to the CPU <b>401</b> is a requirements module <b>408</b> to monitor and retrieve SLA requirement data regarding the apparatus. Operatively connected to the CPU <b>401</b> is a calibration and instrumentation module <b>409</b> to collect data associated with an execution of the application. In some example embodiments, the checkpoint model includes at least one of a full stop checkpoint model, or an incremental stop checkpoint model.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart illustrating an example method <b>500</b> executed for adaptive checkpointing. This method <b>500</b> may be executed by the compute blade <b>102</b>. Operation <b>501</b> executes a checkpoint scheme as part of processing a workload with an application. Operation <b>502</b> is executed to identify a checkpoint event that requires an additional checkpoint scheme.</p>
<p id="p-0029" num="0028">Operation <b>503</b> is executed to retrieve checkpoint data associated with the checkpoint event. Operation <b>504</b> is executed to build a checkpoint model based upon the checkpoint data. Operation <b>505</b> is executed to identify the additional checkpoint scheme, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application. In some example embodiments, the checkpoint event includes an exceeding of a range value, or a threshold value. In some example embodiments, the checkpoint event includes failing to meet a range value or threshold value. In some example embodiments, the value includes at least one of a memory page modification rate, a system load value, a CPU cycle rate, a memory usage rate, or a power usage rate. Operation <b>506</b> executes the checkpoint scheme base upon the checkpoint model. In some example embodiments, the checkpoint scheme includes at least one of a full stop checkpoint, or an incremental stop checkpoint. In some example embodiments, the building of the checkpoint model includes retrieving calibration and instrumentation data, retrieving system information, and retrieving requirements information. In some example embodiments, the requirements information includes SLA data. Operation <b>507</b> is executed to switch from the checkpoint scheme to the additional checkpoint scheme, as part of the processing of the workload with the application.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart illustrating the example execution of a method <b>600</b> for adaptive checkpointing that includes the use of a threshold or range based system for determining an appropriate checkpoint scheme. This method <b>600</b> may be executed as part of the adaptive checkpointing module <b>204</b>. Shown is an operation <b>601</b> that is executed to set a checkpoint scheme (e.g., a full stop or incremental stop checkpoint scheme) for the system <b>100</b>. This checkpoint scheme may be dictated by SLA requirement data. Operation <b>602</b> is executed to set a range or threshold value(s) for the system <b>100</b>. These range or threshold value(s) may be set for memory pages accessed, the number of dirty pages, CPU cycles used, memory used, power consumption, or the load placed on the system <b>100</b> during the processing of a job. The threshold or range may be dictated by the SLA requirement data. Decision operation <b>603</b> is executed to determine whether the threshold or range (i.e., a checkpoint event) has been exceeded. In some cases, the decision operation <b>603</b> may be executed to determine whether the threshold or range (i.e., a checkpoint event) has failed to be met. In cases where the decision operation <b>603</b> evaluates to &#x201c;false,&#x201d; the decision operation <b>603</b> is re-executed. In cases where decision operation <b>603</b> evaluates to &#x201c;true,&#x201d; an operation <b>604</b> is executed. Further, the decision operation <b>603</b> may rely, in part, upon the SLA requirements data in determining an appropriate checkpoint scheme. Operation <b>604</b> is executed to retrieve instrumentation and calibration data for a workload. This data may be retrieved using the module <b>205</b>. Operation <b>605</b> is executed to retrieve system information for the system <b>100</b>. This operation <b>605</b> may be executed using the event monitor module <b>206</b>. Operation <b>606</b> is executed to retrieve SLA requirement data, and is executed by the requirements module <b>207</b>. Operation <b>607</b> is executed to build a model for each available checkpoint scheme using the function and modeling module <b>208</b>. Operation <b>608</b> is executed to select the appropriate checkpoint scheme based upon the model built using operation <b>607</b>. Decision operation <b>603</b> may be re-executed after the execution of operation <b>608</b>. This operation <b>608</b> may be executed using the selection logic module <b>209</b>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 7</figref> is a flow chart illustrating the execution of the operation <b>607</b> to build a model for each available checkpoint scheme. Shown is an operation <b>701</b> that is executed to receive data. This data may be the instrumentation and calibration data, external events data, or SLA requirements data. Operation <b>702</b> may be executed to execute a simulation engine to simulate the execution of each available checkpoint scheme using the data from the execution of operation <b>701</b>. Decision operation <b>703</b> is executed to determine whether an additional checkpoint schemes need to be simulated. In cases where decision operation <b>703</b> evaluates to &#x201c;false,&#x201d; an operation an operation <b>705</b> is executed. In cases where a decision operation <b>703</b> evaluates to &#x201c;true,&#x201d; an operation <b>704</b> is executed. Operation <b>704</b> is executed to retrieve the next checkpoint scheme for which a simulation needs to occur. Operation <b>705</b> is executed to generate an output model object.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 8</figref> is a flow chart illustrating the execution of operation <b>702</b> that executes a simulation engine to simulate the execution of each available checkpoint scheme. Operation <b>801</b> is executed to identify a checkpoint scheme &#x201c;S.&#x201d; Identify, as used herein, includes to get or retrieve. Operation <b>802</b> is executed to determine VM downtime, where &#x201c;S&#x201d; is executed. Operation <b>803</b> is executed to overhead &#x201c;0,&#x201d; necessary to executed &#x201c;S.&#x201d; Operation <b>804</b> is executed to identify memory &#x201c;M,&#x201d; necessary to execute &#x201c;S.&#x201d; Operation <b>805</b> is executed to identify power consumption &#x201c;P,&#x201d; necessary to execute &#x201c;S.&#x201d; Operation <b>806</b> is executed to build object &#x201c;S-O,&#x201d; with attributes &#x201c;T,&#x201d; &#x201c;O,&#x201d; &#x201c;P,&#x201d; and &#x201c;M.&#x201d;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 9</figref> is a flow chart illustrating the execution of example method <b>900</b> to implement a scoring system for determining the appropriate checkpoint scheme. This method <b>900</b> may be executed as part of the adaptive checkpointing module <b>204</b>. Shown is a decision operation <b>901</b> that is executed to determine whether a checkpoint event has occurred. This checkpoint event may be the expiration of a period of time, the exceeding of a memory allocation for a compute blade, a hard failure/fault or soft failure/fault, an exceeding of a predefined number of CPU cycles, the exceeding of a page modification rate. Additionally, the decision operation <b>901</b> may rely, in part, upon the SLA requirement data in determining whether a checkpoint event has occurred. Operations <b>902</b>-<b>905</b> are akin to operations <b>904</b>-<b>907</b> respectively. Operation <b>906</b> is executed to select the best checkpoint scheme based upon the model. Operation <b>907</b> is executed to execute the checkpoint scheme corresponding to a &#x201c;best model&#x201d; designation.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 10</figref> is a flow chart illustrating the example execution of a method <b>906</b> to select the best checkpoint scheme based upon a model. Shown is an operation <b>1001</b> that is executed to identify a checkpoint scheme object &#x201c;S-O.&#x201d; Operation <b>1002</b> is executed to identify an attribute(s) associated with checkpoint scheme object &#x201c;S-O.&#x201d; Decision operation <b>1003</b> is executed to determine whether the attribute is within the range of requirements dictated by the SLA requirements data. In cases where decision operation <b>1003</b> evaluates to &#x201c;false,&#x201d; decision operation <b>1005</b> is executed. In cases where decision operation <b>1003</b> evaluates to &#x201c;true,&#x201d; an operation <b>1004</b> is executed. Operation <b>1004</b> is executed to assign a score to an attribute identified at operation <b>1002</b>. The score may be a numeric value, a character designation denoting a rating of an attribute, or some other suitable way to distinguish an attribute of a checkpoint object based upon whether it is within the range of requirements dictated by an SLA requirements data. Decision operation <b>1005</b> is executed to determine whether there is a next attribute. In cases where decision operation <b>1005</b> evaluates to &#x201c;true,&#x201d; the operation <b>1002</b> is re-executed. In cases where decision operation <b>1002</b> evaluates to &#x201c;false,&#x201d; a decision operation <b>1006</b> is executed. Decision operation <b>1006</b> is executed to determine whether the attribute score of the current object (i.e., &#x201c;S-O&#x201d;) is higher than the previous object. In cases where decision operation <b>1006</b> evaluates to &#x201c;false,&#x201d; decision operation <b>1007</b> is executed. In cases where decision operation <b>1006</b> evaluates to &#x201c;true,&#x201d; operation <b>1008</b> is executed. Decision operation <b>1007</b> is executed to determine whether a next object (i.e., another checkpoint scheme) exists. In cases where decision operation <b>1007</b> evaluates to &#x201c;true,&#x201d; operation <b>1001</b> is re-executed. In cases where decision operation <b>1007</b> evaluates to &#x201c;false,&#x201d; a termination condition is executed.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 11</figref> is a diagram of an example computer system <b>1100</b>. Shown is a CPU <b>1101</b>. The processor die <b>201</b> may be a CPU <b>1101</b>. In some example embodiments, a plurality of CPU may be implemented on the computer system <b>1100</b> in the form of a plurality of core (e.g., a multi-core computer system), or in some other suitable configuration. Some example CPUs include the x86 series CPU. Operatively connected to the CPU <b>1101</b> is Static Random Access Memory (SRAM) <b>1102</b>. Operatively connected includes a physical or logical connection such as, for example, a point to point connection, an optical connection, a bus connection or some other suitable connection. A North Bridge <b>1104</b> is shown, also known as a Memory Controller Hub (MCH), or an Integrated Memory Controller (IMC), that handles communication between the CPU and PCIe, Dynamic Random Access Memory (DRAM), and the South Bridge. An ethernet port <b>1105</b> is shown that is operatively connected to the North Bridge <b>1104</b>. A Digital Visual Interface (DVI) port <b>1107</b> is shown that is operatively connected to the North Bridge <b>1104</b>. Additionally, an analog Video Graphics Array (VGA) port <b>1106</b> is shown that is operatively connected to the North Bridge <b>1104</b>. Connecting the North Bridge <b>1104</b> and the South Bridge <b>1111</b> is a point to point link <b>1109</b>. In some example embodiments, the point to point link <b>1109</b> is replaced with one of the above referenced physical or logical connections. A South Bridge <b>1111</b>, also known as an I/O Controller Hub (ICH) or a Platform Controller Hub (PCH), is also illustrated. A PCIe port <b>1103</b> is shown that provides a computer expansion port for connection to graphics cards and associated GPUs. Operatively connected to the South Bridge <b>1111</b> are a High Definition (HD) audio port <b>1108</b>, boot RAM port <b>1112</b>, PCI port <b>1110</b>, Universal Serial Bus (USB) port <b>1113</b>, a port for a Serial Advanced Technology Attachment (SATA) <b>1114</b>, and a port for a Low Pin Count (LPC) bus <b>1115</b>. Operatively connected to the South Bridge <b>1111</b> is a Super Input/Output (I/O) controller <b>1116</b> to provide an interface for low-bandwidth devices (e.g., keyboard, mouse, serial ports, parallel ports, disk controllers). Operatively connected to the Super I/O controller <b>1116</b> is a parallel port <b>1117</b>, and a serial port <b>1118</b>.</p>
<p id="p-0036" num="0035">The SATA port <b>1114</b> may interface with a persistent storage medium (e.g., an optical storage devices, or magnetic storage device) that includes a machine-readable medium on which is stored one or more sets of instructions and data structures (e.g., software) embodying or utilized by any one or more of the methodologies or functions illustrated herein. The software may also reside, completely or at least partially, within the SRAM <b>1102</b> and/or within the CPU <b>1101</b> during execution thereof by the computer system <b>1100</b>. The instructions may further be transmitted or received over the 10/100/1000 ethernet port <b>1105</b>, USB port <b>1113</b> or some other suitable port illustrated herein.</p>
<p id="p-0037" num="0036">In some example embodiments, a removable physical storage medium is shown to be a single medium, and the term &#x201c;machine-readable medium&#x201d; should be taken to include a single medium or multiple medium (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable medium&#x201d; shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any of the one or more of the methodologies illustrated herein. The term &#x201c;machine-readable medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic medium, and carrier wave signals.</p>
<p id="p-0038" num="0037">In some example embodiments, the methods illustrated herein are implemented as one or more computer-readable or computer-usable storage media or mediums. The storage media include different forms of memory including semiconductor memory devices such as DRAM, or SRAM, Erasable and Programmable Read-Only Memories (EPROMs), Electrically Erasable and Programmable Read-Only Memories (EEPROMs) and flash memories; magnetic disks such as fixed, floppy and removable disks; other magnetic media including tape; and optical media such as Compact Disks (CDs) or Digital Versatile Disks (DVDs). Note that the instructions of the software discussed above can be provided on one computer-readable or computer-usable storage medium, or alternatively, can be provided on multiple computer-readable or computer-usable storage media distributed in a large system having possibly plural nodes. Such computer-readable orcomputer-usable storage medium or media is (are) considered to be part of an article (or article of manufacture). An article or article of manufacture can refer to any manufactured single component or multiple components.</p>
<p id="p-0039" num="0038">In the foregoing description, numerous details are set forth to provide an understanding of the present invention. However, it will be understood by those skilled in the art that the present invention may be practiced without these details. While the invention has been disclosed with respect to a limited number of embodiments, those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover such modifications and variations as fall within the &#x201c;true&#x201d; spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method comprising:
<claim-text>executing a first checkpoint scheme as part of processing a workload with an application;</claim-text>
<claim-text>monitoring during the processing, for a checkpoint event that necessitates an additional checkpoint scheme;</claim-text>
<claim-text>retrieving checkpoint data associated with the checkpoint event;</claim-text>
<claim-text>adaptively building a checkpoint model of a plurality of checkpoint schemes based upon the checkpoint data; and</claim-text>
<claim-text>dynamically selecting the additional checkpoint scheme from the plurality of checkpoint schemes, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the checkpoint event includes an exceeding of a range value, or a threshold value.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the checkpoint event includes failing to meet a range value or threshold value.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the value includes at least one of a memory page modification rate, a system load value, a CPU cycle rate, a memory usage rate, or a power usage rate.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising executing the checkpoint scheme based upon the checkpoint model.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the plurality of checkpoint schemes includes at least one of a full stop checkpoint, or an incremental stop checkpoint.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer implemented model of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the building of the checkpoint model includes:
<claim-text>retrieving calibration and instrumentation data;</claim-text>
<claim-text>retrieving system information; and</claim-text>
<claim-text>retrieving requirements information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer implemented method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the requirements information includes Service Level Agreement (SLA) data.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising switching from the checkpoint scheme to the additional checkpoint scheme, as part of the processing of the workload with the application.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A compute blade system comprising:
<claim-text>at least one hardware processor;</claim-text>
<claim-text>a memory coupled to the processor, the memory including instructions that upon execution cause the processor to:
<claim-text>execute a first checkpoint scheme as part of processing a workload with an application;</claim-text>
<claim-text>monitor during the processing, for a checkpoint event that necessitates an additional checkpoint scheme;</claim-text>
<claim-text>retrieve checkpoint data associated with the checkpoint event;</claim-text>
<claim-text>adaptively build a checkpoint model of a plurality of checkpoint schemes based upon the checkpoint data; and</claim-text>
<claim-text>dynamically select the additional checkpoint scheme from the plurality of checkpoint schemes, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the checkpoint event includes an exceeding of a range value, or threshold value.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the checkpoint event includes a failure to meet a range value or threshold value.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the value includes at least one of a memory page modification rate, a CPU cycle rate, a memory usage rate, or a power usage rate.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the plurality of checkpoint schemes includes at least one of a full stop checkpoint, or an incremental stop checkpoint.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the building of the checkpoint model includes logic encoded in one or more tangible media for execution and when executed operable to:
<claim-text>retrieve calibration and instrumentation data;</claim-text>
<claim-text>retrieve system information; and</claim-text>
<claim-text>retrieve requirements information.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the memory further comprises instructions that when executed cause the processor to switch from the checkpoint scheme to the additional checkpoint scheme, as part of the processing of the workload using the application.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A compute blade apparatus comprising:
<claim-text>at least one hardware processor;</claim-text>
<claim-text>a checkpoint module to execute a first checkpoint scheme as part of processing a workload with an application;</claim-text>
<claim-text>an adaptive checkpointing module to monitor during the processing, for a checkpoint event that necessitates an additional checkpoint scheme;</claim-text>
<claim-text>an event monitor module to retrieve checkpoint data associated with the checkpoint event;</claim-text>
<claim-text>a function and modeling module to adaptively build a checkpoint model of a plurality of checkpoint schemes based upon the checkpoint data; and</claim-text>
<claim-text>a selection logic module to dynamically select the additional checkpoint scheme from the plurality of checkpoint schemes, based upon the checkpoint model, the additional checkpoint scheme to be executed as part of the processing of the workload with the application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The compute blade apparatus of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising a requirements module to monitor and retrieve Service Level Agreement (SLA) requirement data regarding the apparatus.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The compute blade apparatus of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising a calibration and instrumentation module to collect data associated with an execution of the application.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The compute blade apparatus of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the checkpoint model includes at least one of a full stop checkpoint model, or an incremental stop checkpoint model. </claim-text>
</claim>
</claims>
</us-patent-grant>

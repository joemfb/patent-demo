<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626946-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626946</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11462345</doc-number>
<date>20060803</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>929</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709238</main-classification>
</classification-national>
<invention-title id="d2e53">Systems and methods for hierarchical global load balancing</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6061341</doc-number>
<kind>A</kind>
<name>Andersson et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370338</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6606744</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6671818</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7124101</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7130807</doc-number>
<kind>B1</kind>
<name>Mikurak</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0243709</doc-number>
<kind>A1</kind>
<name>Kalyanavarathan et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0125553</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709233</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2005/0198200</doc-number>
<kind>A1</kind>
<name>Subramanian et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709218</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0237952</doc-number>
<kind>A1</kind>
<name>Punj et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370260</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0267952</doc-number>
<kind>A1</kind>
<name>Ricciardi et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2006/0072482</doc-number>
<kind>A1</kind>
<name>Voiss et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370254</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2006/0123467</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0245409</doc-number>
<kind>A1</kind>
<name>Harris et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2008/0034416</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0046616</doc-number>
<kind>A1</kind>
<name>Verzunov et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2008/0049786</doc-number>
<kind>A1</kind>
<name>Ram et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0225720</doc-number>
<kind>A1</kind>
<name>Khemani et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2008/0225748</doc-number>
<kind>A1</kind>
<name>Khemani et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2008/0225753</doc-number>
<kind>A1</kind>
<name>Khemani et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2008/0229381</doc-number>
<kind>A1</kind>
<name>Sikka et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2008/0320151</doc-number>
<kind>A1</kind>
<name>McCanne et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>CN</country>
<doc-number>1503523</doc-number>
<kind>A</kind>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>WO</country>
<doc-number>WO-2006074072</doc-number>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>WO</country>
<doc-number>WO-2008/112691</doc-number>
<kind>A2</kind>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>WO</country>
<doc-number>WO-2008112698</doc-number>
<kind>A2</kind>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>International Search Report, PCT/US2007/075037, mailed on Jan. 10, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>Written Opinion of the International Searching Authority, PCT/US2007/075037, mailed on Jan. 10, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>First Office Action issued Nov. 23, 2011 in Chinese Patent Application No. 200780037294.3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>Second Office Action issued Aug. 22, 2012 in Chinese Patent Application No. 200780037294.3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Third Office Action issued Jan. 15, 2013 in Chinese Patent Application No. 200780037294.3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>26</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709238</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080034111</doc-number>
<kind>A1</kind>
<date>20080207</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kamath</last-name>
<first-name>Sandeep</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Suganthi</last-name>
<first-name>Josephine</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Shetty</last-name>
<first-name>Anil</first-name>
<address>
<city>Union City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kamath</last-name>
<first-name>Sandeep</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Suganthi</last-name>
<first-name>Josephine</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Shetty</last-name>
<first-name>Anil</first-name>
<address>
<city>Union City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Foley &#x26; Lardner LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>McKenna</last-name>
<first-name>Christopher J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Citrix Systems, Inc.</orgname>
<role>02</role>
<address>
<city>Fort Lauderdale</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Goodchild</last-name>
<first-name>William</first-name>
<department>2433</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and methods are disclosed for providing a hierarchy of appliances to access resources across branch offices. A method comprises: establishing, by a first aggregator appliance, connections with a first plurality of branch office appliances; establishing, by a second aggregator appliance, connections with a second plurality of branch office appliances, the first plurality not having information identifying the second plurality; receiving, by the first aggregator appliance, from a first branch office appliance a request from a client for access to a resource; identifying, by the first aggregator appliance via the second aggregator appliance, a second branch office appliance from the second plurality to service the request; transmitting, by the first aggregator appliance, to the first branch office appliance information identifying the second branch office appliance; and establishing, by the first branch office appliance, a connection with the second branch office appliance. Corresponding systems are also described.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="174.58mm" wi="236.73mm" file="US08626946-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="250.87mm" wi="197.87mm" orientation="landscape" file="US08626946-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="234.02mm" wi="149.44mm" orientation="landscape" file="US08626946-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.24mm" wi="160.78mm" file="US08626946-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="182.71mm" wi="165.18mm" file="US08626946-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="239.10mm" wi="182.12mm" orientation="landscape" file="US08626946-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="238.42mm" wi="158.92mm" orientation="landscape" file="US08626946-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="224.54mm" wi="174.07mm" file="US08626946-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="238.76mm" wi="185.84mm" orientation="landscape" file="US08626946-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="241.30mm" wi="181.69mm" orientation="landscape" file="US08626946-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="245.45mm" wi="155.45mm" file="US08626946-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention generally relates to data communication networks. In particular, the present invention relates to systems and methods for providing aggregator appliances for global and hierarchical load balancing of branch offices.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">A corporate or enterprise network may service many branch offices. Each branch office may have its own network, servers and resources. An appliance may be deployed at a branch office to provide gateway services locally to the client or servers located at the branch office. In the corporate-wide network, branch office appliances may be deployed at each of the branch offices. Many resources, such as servers, applications, data files may be deployed across these branch offices. Additionally, a branch office may have under utilized resources and available computing time.</p>
<p id="p-0004" num="0003">At any of the branch offices there may be resources that could be available or useful to access by users or computing devices at other branch offices. For example, a client of a first branch office may want to access a resource, such as an application, on a server at a second branch office. In some cases, the client of the first branch office is not aware of the existence or availability of resources at the second branch office. In other cases, resources at branch offices lay idle as they are not easily available to users across the corporate network. This results in inefficient use of the corporate network and deployed resource. In order to avail a client of a branch office access to resources from another branch office, an administrator may need to manually and specifically configure the gateway or branch office appliance to know of the other appliances in the network. With resources deployed across many branch offices, each of the branch office appliances may need to be manually configured to know of the other branch office appliances. This leads to significant amount of time and costs in configuring and maintaining multiple branch office appliances or gateway.</p>
<p id="p-0005" num="0004">It would, therefore, be desirable to provide systems and methods to reduce branch office configuration while load-balancing resources globally across the enterprise and branch offices.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0006" num="0005">The present invention is directed towards an aggregator appliance that provides aggregation and load-balancing of branch office appliances in a hierarchical fashion and a manner that reduces configuration of the branch office appliance. Any of the branch office appliances may be configured to know of or identify a single aggregator appliance <b>400</b>. For example, a first branch office appliance may be configured to identify and connect to the first aggregator appliance. The first branch office appliance may not be configured to have any information and therefore may not know of the second aggregator appliance or any branch office appliances connected to the second aggregator appliance. In this manner, the configuration of branch office appliance is reduced. Even though the configuration is reduced, a branch office appliance servicing a request may access any of the other appliances known to an aggregator appliance. Since the aggregator appliances share information on branch office appliance, a first aggregator appliance can identify to a first branch office appliance information identifying any of the branch office appliances connected via any of the aggregator appliances. In this way, resource requests can be load balanced globally across all branch offices and branch office appliances.</p>
<p id="p-0007" num="0006">In one aspect, the present invention is related to a method for providing a hierarchy of appliances to more efficiently access resources across a plurality of branch offices. The method includes the steps of: establishing, by a first aggregator appliance, connections with a first plurality of branch office appliances, and establishing, by a second aggregator appliance, connections with a second plurality of branch office appliances. The first plurality of branch office appliances may not have information identifying the second plurality of branch office appliances. The second plurality of branch office appliances may also not have information identifying the first plurality of branch office appliances. The method includes receiving, by the first aggregator appliance, from a first branch office appliance of the first plurality of branch office a request from a client for access to a resource. The first aggregator appliance identifies via the second aggregator appliance a second branch office appliance from the second plurality of branch office appliances to service the request. The first aggregator appliance transmits to one of the client or a first branch office appliance information identifying the second branch office appliance. The method includes the client establishing a connection with the second branch office appliance.</p>
<p id="p-0008" num="0007">In one embodiment, the method includes transmitting, by the first branch office appliance, information identifying the second branch office appliance to the client. In another embodiment, the method includes establishes, by the client via the first branch office appliance, a second connection via the second branch office appliance with a server. In some embodiments, the method includes establishing, by the first aggregator appliance, communications with the second aggregator appliance. In one embodiment, the first aggregator appliance communicates information about the first plurality of branch office appliances to the second aggregator appliance. In another embodiments, the second aggregator appliance communicates information about the second plurality of branch office appliances to the first aggregator appliance.</p>
<p id="p-0009" num="0008">In another embodiment, the method includes determining, by the first aggregator appliance, information on performance or operational characteristics for each of the first plurality of branch office appliances. In some embodiments, the method includes determining, by the second aggregator appliance, performance or operational characteristics of each of the second plurality of branch office appliances. In one embodiment, the method includes selecting, by the first or second aggregator appliance, the second branch office appliance based on one of the performance or operational characteristics.</p>
<p id="p-0010" num="0009">In yet another embodiment, the method includes by the first office branch office appliance or the second branch office appliance, communications between the client and the server. The method may include accelerating using one or more of the following techniques: 1) compression, 2) TCP connection pooling, 3) TCP connection multiplexing, 4) TCP buffering, and 5) caching. In some embodiments, the first aggregator appliance or the second aggregator appliance is deployed at a data center. In another embodiment, the client is deployed at the first branch office.</p>
<p id="p-0011" num="0010">In another aspect, the present invention is related to a system for providing a hierarchy of appliances to more efficiently access resources across a plurality of branch offices, the system comprises a first aggregator appliance and a second aggregator appliance. The first aggregator appliance establishes connections with a first plurality of branch office appliances. The second aggregator appliance establishes connections with a second plurality of branch office appliances. The first plurality of branch office appliances may not have information identifying the second plurality of branch office appliances. The second plurality of branch office appliances may also not have information identifying the first plurality of branch office appliances. The system also includes a first branch office appliance of the first plurality of branch offices transmitting to the first aggregator appliance a request from a client for access to a resource. The first aggregator appliance identifies via the second aggregator appliance a second branch office appliance from the second plurality of branch office appliances to service the request and transmits to the first branch office appliance information identifying the second branch office appliance. The system also includes the client establishing a connection with the second branch office appliance.</p>
<p id="p-0012" num="0011">In one embodiment, the first branch office appliance transmits information identifying the second branch office appliance to the client. In another embodiment, the client establishes via the first branch office appliance a second connection via the second branch office appliance with a server. In some embodiments, the first aggregator appliance establishes communications with the second aggregator appliance. In one embodiment, the first aggregator appliance communicates information about the first plurality of branch office appliances to the second aggregator appliance. In yet another embodiment, the second aggregator appliance communicates information about the second plurality of branch office appliances to the first aggregator appliance. In some embodiments, the first or second aggregator appliance determines information on performance or operational charactersitics for each of the first plurality of branch office appliances. In another embodiment of the system, the first aggregator appliance selects the second branch office appliance based on one of the performance or operational characteristics.</p>
<p id="p-0013" num="0012">In some embodiments, the first office branch office appliance or the second branch office appliance accelerates communications between the client and a server. The acceleration techniques may include one or more of the following: 1) compression, 2) TCP connection pooling, 3) TCP connection multiplexing, 4) TCP buffering, and 5) caching. In other embodiments, the first aggregator appliance or the second aggregator appliance is deployed at a data center. In one embodiment, the client is deployed at the first branch office.</p>
<p id="p-0014" num="0013">The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0015" num="0014">The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1A</figref> is a block diagram of an embodiment of a network environment for a client to access a server via an appliance;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1B</figref> is a block diagram of an embodiment of an environment for delivering a computing environment from a server to a client via an appliance;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 1C and 1D</figref> are block diagrams of embodiments of a computing device;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram of an embodiment of an appliance for processing communications between a client and a server;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram of another embodiment of an appliance for optimizing, accelerating, load-balancing and routing communications between a client and a server;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an embodiment of a client for communicating with a server via the appliance;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4A</figref> is a block diagram of an embodiment of aggregator appliances to access resources across branch offices;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 4B</figref> is a block diagram of another embodiment of a deployment of aggregator appliances to load balance a plurality of branch offices; and</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of steps of an embodiment of a method for practicing hierarchical load balancing with aggregator appliances to access resources across branch offices.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0025" num="0024">The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and/or structurally similar elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="h-0006" num="0000">A. Network and Computing Environment</p>
<p id="p-0026" num="0025">Prior to discussing the specifics of embodiments of the systems and methods of an appliance and/or client, it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to <figref idref="DRAWINGS">FIG. 1A</figref>, an embodiment of a network environment is depicted. In brief overview, the network environment comprises one or more clients <b>102</b><i>a</i>-<b>102</b><i>n </i>(also generally referred to as local machine(s) <b>102</b>, or client(s) <b>102</b>) in communication with one or more servers <b>106</b><i>a</i>-<b>106</b><i>n </i>(also generally referred to as server(s) <b>106</b>, or remote machine(s) <b>106</b>) via one or more networks <b>104</b>, <b>104</b>&#x2032; (generally referred to as network <b>104</b>). In some embodiments, a client <b>102</b> communicates with a server <b>106</b> via an appliance <b>200</b>.</p>
<p id="p-0027" num="0026">Although <figref idref="DRAWINGS">FIG. 1A</figref> shows a network <b>104</b> and a network <b>104</b>&#x2032; between the clients <b>102</b> and the servers <b>106</b>, the clients <b>102</b> and the servers <b>106</b> may be on the same network <b>104</b>. The networks <b>104</b> and <b>104</b>&#x2032; can be the same type of network or different types of networks. The network <b>104</b> and/or the network <b>104</b>&#x2032; can be a local-area network (LAN), such as a company Intranet, a metropolitan area network (MAN), or a wide area network (WAN), such as the Internet or the World Wide Web. In one embodiment, network <b>104</b>&#x2032; may be a private network and network <b>104</b> may be a public network. In some embodiments, network <b>104</b> may be a private network and network <b>104</b>&#x2032; a public network. In another embodiment, networks <b>104</b> and <b>104</b>&#x2032; may both be private networks. In some embodiments, clients <b>102</b> may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network <b>104</b> to the servers <b>106</b> located at a corporate data center.</p>
<p id="p-0028" num="0027">The network <b>104</b> and/or <b>104</b>&#x2032; be any type and/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. In some embodiments, the network <b>104</b> may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network <b>104</b> and/or <b>104</b>&#x2032; may be a bus, star, or ring network topology. The network <b>104</b> and/or <b>104</b>&#x2032; and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.</p>
<p id="p-0029" num="0028">As shown in <figref idref="DRAWINGS">FIG. 1A</figref>, the appliance <b>200</b>, which also may be referred to as an interface unit <b>200</b> or gateway <b>200</b>, is shown between the networks <b>104</b> and <b>104</b>&#x2032;. In some embodiments, the appliance <b>200</b> may be located on network <b>104</b>. For example, a branch office of a corporate enterprise may deploy an appliance <b>200</b> at the branch office. In other embodiments, the appliance <b>200</b> may be located on network <b>104</b>&#x2032;. For example, an appliance <b>200</b> may be located at a corporate data center. In yet another embodiment, a plurality of appliances <b>200</b> may be deployed on network <b>104</b>. In some embodiments, a plurality of appliances <b>200</b> may be deployed on network <b>104</b>&#x2032;. In one embodiment, a first appliance <b>200</b> communicates with a second appliance <b>200</b>&#x2032;. In other embodiments, the appliance <b>200</b> could be a part of any client <b>102</b> or server <b>106</b> on the same or different network <b>104</b>,<b>104</b>&#x2032; as the client <b>102</b>. One or more appliances <b>200</b> may be located at any point in the network or network communications path between a client <b>102</b> and a server <b>106</b>.</p>
<p id="p-0030" num="0029">In one embodiment, the system may include multiple, logically-grouped servers <b>106</b>. In these embodiments, the logical group of servers may be referred to as a server farm <b>38</b>. In some of these embodiments, the serves <b>106</b> may be geographically dispersed. In some cases, a farm <b>38</b> may be administered as a single entity. In other embodiments, the server farm <b>38</b> comprises a plurality of server farms <b>38</b>. In one embodiment, the server farm executes one or more applications on behalf of one or more clients <b>102</b>.</p>
<p id="p-0031" num="0030">The servers <b>106</b> within each farm <b>38</b> can be heterogeneous. One or more of the servers <b>106</b> can operate according to one type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash.), while one or more of the other servers <b>106</b> can operate on according to another type of operating system platform (e.g., Unix or Linux). The servers <b>106</b> of each farm <b>38</b> do not need to be physically proximate to another server <b>106</b> in the same farm <b>38</b>. Thus, the group of servers <b>106</b> logically grouped as a farm <b>38</b> may be interconnected using a wide-area network (WAN) connection or medium-area network (MAN) connection. For example, a farm <b>38</b> may include servers <b>106</b> physically located in different continents or different regions of a continent, country, state, city, campus, or room. Data transmission speeds between servers <b>106</b> in the farm <b>38</b> can be increased if the servers <b>106</b> are connected using a local-area network (LAN) connection or some form of direct connection.</p>
<p id="p-0032" num="0031">Servers <b>106</b> may be referred to as a file server, application server, web server, proxy server, or gateway server. In some embodiments, a server <b>106</b> may have the capacity to function as either an application server or as a master application server. In one embodiment, a server <b>106</b> may include an Active Directory. The clients <b>102</b> may also be referred to as client nodes or endpoints. In some embodiments, a client <b>102</b> has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients <b>102</b><i>a</i>-<b>102</b><i>n. </i></p>
<p id="p-0033" num="0032">In some embodiments, a client <b>102</b> communicates with a server <b>106</b>. In one embodiment, the client <b>102</b> communicates directly with one of the servers <b>106</b> in a farm <b>38</b>. In another embodiment, the client <b>102</b> executes a program neighborhood application to communicate with a server <b>106</b> in a farm <b>38</b>. In still another embodiment, the server <b>106</b> provides the functionality of a master node. In some embodiments, the client <b>102</b> communicates with the server <b>106</b> in the farm <b>38</b> through a network <b>104</b>. Over the network <b>104</b>, the client <b>102</b> can, for example, request execution of various applications hosted by the servers <b>106</b><i>a</i>-<b>106</b><i>n </i>in the farm <b>38</b> and receive output of the results of the application execution for display. In some embodiments, only the master node provides the functionality required to identify and provide address information associated with a server <b>106</b>&#x2032; hosting a requested application.</p>
<p id="p-0034" num="0033">In one embodiment, the server <b>106</b> provides functionality of a web server. In another embodiment, the server <b>106</b><i>a </i>receives requests from the client <b>102</b>, forwards the requests to a second server <b>106</b><i>b </i>and responds to the request by the client <b>102</b> with a response to the request from the server <b>106</b><i>b</i>. In still another embodiment, the server <b>106</b> acquires an enumeration of applications available to the client <b>102</b> and address information associated with a server <b>106</b> hosting an application identified by the enumeration of applications. In yet another embodiment, the server <b>106</b> presents the response to the request to the client <b>102</b> using a web interface. In one embodiment, the client <b>102</b> communicates directly with the server <b>106</b> to access the identified application. In another embodiment, the client <b>102</b> receives application output data, such as display data, generated by an execution of the identified application on the server <b>106</b>.</p>
<p id="p-0035" num="0034">Referring now to <figref idref="DRAWINGS">FIG. 1B</figref>, a network environment for delivering and/or operating a computing environment on a client <b>102</b> is depicted. In some embodiments, a server <b>106</b> includes an application delivery system <b>190</b> for delivering a computing environment or an application and/or data file to one or more clients <b>102</b>. In brief overview, a client <b>10</b> is in communication with a server <b>106</b> via network <b>104</b>, <b>104</b>&#x2032; and appliance <b>200</b>. For example, the client <b>102</b> may reside in a remote office of a company, e.g., a branch office, and the server <b>106</b> may reside at a corporate data center. The client <b>102</b> comprises a client agent <b>120</b>, and a computing environment <b>15</b>. The computing environment <b>15</b> may execute or operate an application that accesses, processes or uses a data file. The computing environment <b>15</b>, application and/or data file may be delivered via the appliance <b>200</b> and/or the server <b>106</b>.</p>
<p id="p-0036" num="0035">In some embodiments, the appliance <b>200</b> accelerates delivery of a computing environment <b>15</b>, or any portion thereof, to a client <b>102</b>. In one embodiment, the appliance <b>200</b> accelerates the delivery of the computing environment <b>15</b> by the application delivery system <b>190</b>. For example, the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location, such as a branch office of the company. In another embodiment, the appliance <b>200</b> accelerates transport layer traffic between a client <b>102</b> and a server <b>106</b>. The appliance <b>200</b> may provide acceleration techniques for accelerating any transport layer payload from a server <b>106</b> to a client <b>102</b>, such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression and 5) caching. In some embodiments, the appliance <b>200</b> provides load balancing of servers <b>106</b> in responding to requests from clients <b>102</b>. In other embodiments, the appliance <b>200</b> acts as a proxy or access server to provide access to the one or more servers <b>106</b>. In another embodiment, the appliance <b>200</b> provides a secure virtual private network connection from a first network <b>104</b> of the client <b>102</b> to the second network <b>104</b>&#x2032; of the server <b>106</b>, such as an SSL VPN connection. It yet other embodiments, the appliance <b>200</b> provides application firewall security, control and management of the connection and communications between a client <b>102</b> and a server <b>106</b>.</p>
<p id="p-0037" num="0036">In some embodiments, the application delivery management system <b>190</b> provides application delivery techniques to deliver a computing environment to a desktop of a user, remote or otherwise, based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine <b>195</b>. With these techniques, a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device <b>100</b>. In one embodiment, the application delivery system <b>190</b> may reside or execute on a server <b>106</b>. In another embodiment, the application delivery system <b>190</b> may reside or execute on a plurality of servers <b>106</b><i>a</i>-<b>106</b><i>n</i>. In some embodiments, the application delivery system <b>190</b> may execute in a server farm <b>38</b>. In one embodiment, the server <b>106</b> executing the application delivery system <b>190</b> may also store or provide the application and data file. In another embodiment, a first set of one or more servers <b>106</b> may execute the application delivery system <b>190</b>, and a different server <b>106</b><i>n </i>may store or provide the application and data file. In some embodiments, each of the application delivery system <b>190</b>, the application, and data file may reside or be located on different servers. In yet another embodiment, any portion of the application delivery system <b>190</b> may reside, execute or be stored on or distributed to the appliance <b>200</b>, or a plurality of appliances.</p>
<p id="p-0038" num="0037">The client <b>102</b> may include a computing environment <b>15</b> for executing an application that uses or processes a data file. The client <b>102</b> via networks <b>104</b>, <b>104</b>&#x2032; and appliance <b>200</b> may request an application and data file from the server <b>106</b>. In one embodiment, the appliance <b>200</b> may forward a request from the client <b>102</b> to the server <b>106</b>. For example, the client <b>102</b> may not have the application and data file stored or accessible locally. In response to the request, the application delivery system <b>190</b> and/or server <b>106</b> may deliver the application and data file to the client <b>102</b>. For example, in one embodiment, the server <b>106</b> may transmit the application as an application stream to operate in computing environment <b>15</b> on client <b>102</b>.</p>
<p id="p-0039" num="0038">In some embodiments, the application delivery system <b>190</b> comprises any portion of the Citrix Access Suite&#x2122; by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server&#x2122; and/or any of the Microsoft&#xae; Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application delivery system <b>190</b> may deliver one or more applications to clients <b>102</b> or users via a remote-display protocol or otherwise via remote-based or server-based computing. In another embodiment, the application delivery system <b>190</b> may deliver one or more applications to clients or users via steaming of the application.</p>
<p id="p-0040" num="0039">In one embodiment, the application delivery system <b>190</b> includes a policy engine <b>195</b> for controlling and managing the access to, selection of application execution methods and the delivery of applications. In some embodiments, the policy engine <b>195</b> determines the one or more applications a user or client <b>102</b> may access. In another embodiment, the policy engine <b>195</b> determines how the application should be delivered to the user or client <b>102</b>, e.g., the method of execution. In some embodiments, the application delivery system <b>190</b> provides a plurality of delivery techniques from which to select a method of application execution, such as a server-based computing, streaming or delivering the application locally to the client <b>120</b> for local execution.</p>
<p id="p-0041" num="0040">In one embodiment, a client <b>102</b> requests execution of an application program and the application delivery system <b>190</b> comprising a server <b>106</b> selects a method of executing the application program. In some embodiments, the server <b>106</b> receives credentials from the client <b>102</b>. In another embodiment, the server <b>106</b> receives a request for an enumeration of available applications from the client <b>102</b>. In one embodiment, in response to the request or receipt of credentials, the application delivery system <b>190</b> enumerates a plurality of application programs available to the client <b>102</b>. The application delivery system <b>190</b> receives a request to execute an enumerated application. The application delivery system <b>190</b> selects one of a predetermined number of methods for executing the enumerated application, for example, responsive to a policy of a policy engine. The application delivery system <b>190</b> may select a method of execution of the application enabling the client <b>102</b> to receive application-output data generated by execution of the application program on a server <b>106</b>. The application delivery system <b>190</b> may select a method of execution of the application enabling the local machine <b>10</b> to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment, the application delivery system <b>190</b> may select a method of execution of the application to stream the application via the network <b>104</b> to the client <b>102</b>.</p>
<p id="p-0042" num="0041">A client <b>102</b> may execute, operate or otherwise provide an application, which can be any type and/or form of software, program, or executable instructions such as any type and/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and/or form of executable instructions capable of executing on client <b>102</b>. In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client <b>102</b> on a server <b>106</b>. In one embodiments the server <b>106</b> may display output to the client <b>102</b> using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to VoIP communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and/or audio.</p>
<p id="p-0043" num="0042">In some embodiments, the server <b>106</b> or a server farm <b>38</b> may be running one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server <b>106</b> or server farm <b>38</b> executes as an application, any portion of the Citrix Access Suite&#x2122; by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server&#x2122;, and/or any of the Microsoft&#xae; Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In other embodiments, the application includes a Remote Desktop (RDP) client, developed by Microsoft Corporation of Redmond, Wash. Also, the server <b>106</b> may run an application, which for example, may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In some embodiments, any of the applications may comprise any type of hosted service or products, such as GoToMeeting&#x2122; provided by Citrix Online Division, Inc. of Santa Barbara, Calif., WebEX&#x2122; provided by WebEx, Inc. of Santa Clara, Calif., or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond, Wash.</p>
<p id="p-0044" num="0043">The client <b>102</b>, server <b>106</b>, and appliance <b>200</b> may be deployed as and/or executed on any type and form of computing device, such as a computer, network device or appliance capable of communicating on any type and form of network and performing the operations described herein. <figref idref="DRAWINGS">FIGS. 1C and 1D</figref> depict block diagrams of a computing device <b>100</b> useful for practicing an embodiment of the client <b>102</b>, server <b>106</b> or appliance <b>200</b>. As shown in <figref idref="DRAWINGS">FIGS. 1C and 1D</figref>, each computing device <b>100</b> includes a central processing unit <b>101</b>, and a main memory unit <b>122</b>. As shown in <figref idref="DRAWINGS">FIG. 1C</figref>, a computing device <b>100</b> may include a visual display device <b>124</b>, a keyboard <b>126</b> and/or a pointing device <b>127</b>, such as a mouse. Each computing device <b>100</b> may also include additional optional elements, such as one or more input/output devices <b>130</b><i>a</i>-<b>130</b><i>b </i>(generally referred to using reference numeral <b>130</b>), and a cache memory <b>140</b> in communication with the central processing unit <b>101</b>.</p>
<p id="p-0045" num="0044">The central processing unit <b>101</b> is any logic circuitry that responds to and processes instructions fetched from the main memory unit <b>122</b>. In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Motorola Corporation of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS/6000 processor, those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computing device <b>100</b> may be based on any of these processors, or any other processor capable of operating as described herein.</p>
<p id="p-0046" num="0045">Main memory unit <b>122</b> may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor <b>101</b>, such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory <b>122</b> may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in <figref idref="DRAWINGS">FIG. 1C</figref>, the processor <b>101</b> communicates with main memory <b>122</b> via a system bus <b>150</b> (described in more detail below). <figref idref="DRAWINGS">FIG. 1C</figref> depicts an embodiment of a computing device <b>100</b> in which the processor communicates directly with main memory <b>122</b> via a memory port <b>103</b>. For example, in <figref idref="DRAWINGS">FIG. 1D</figref> the main memory <b>122</b> may be DRDRAM.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 1D</figref> depicts an embodiment in which the main processor <b>101</b> communicates directly with cache memory <b>140</b> via a secondary bus, sometimes referred to as a backside bus. In other embodiments, the main processor <b>101</b> communicates with cache memory <b>140</b> using the system bus <b>150</b>. Cache memory <b>140</b> typically has a faster response time than main memory <b>122</b> and is typically provided by SRAM, BSRAM, or EDRAM. In the embodiment shown in <figref idref="DRAWINGS">FIG. 1C</figref>, the processor <b>101</b> communicates with various I/O devices <b>130</b> via a local system bus <b>150</b>. Various busses may be used to connect the central processing unit <b>101</b> to any of the I/O devices <b>130</b>, including a VESA VL bus, an ISA bus, an EISA bus, a MicroChannel Architecture (MCA) bus, a PCI bus, a PCI-X bus, a PCI-Express bus, or a NuBus. For embodiments in which the I/O device is a video display <b>124</b>, the processor <b>101</b> may use an Advanced Graphics Port (AGP) to communicate with the display <b>124</b>. <figref idref="DRAWINGS">FIG. 1D</figref> depicts an embodiment of a computer <b>100</b> in which the main processor <b>101</b> communicates directly with I/O device <b>130</b> via HyperTransport, Rapid I/O, or InfiniBand. <figref idref="DRAWINGS">FIG. 1D</figref> also depicts an embodiment in which local busses and direct communication are mixed: the processor <b>101</b> communicates with I/O device <b>130</b> using a local interconnect bus while communicating with I/O device <b>130</b> directly.</p>
<p id="p-0048" num="0047">The computing device <b>100</b> may support any suitable installation device <b>116</b>, such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent <b>120</b>, or portion thereof. The computing device <b>100</b> may further comprise a storage device <b>128</b>, such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent <b>120</b>. Optionally, any of the installation devices <b>116</b> could also be used as the storage device <b>128</b>. Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX&#xae;, a bootable CD for GNU/Linux that is available as a GNU/Linux distribution from knoppix.net.</p>
<p id="p-0049" num="0048">Furthermore, the computing device <b>100</b> may include a network interface <b>118</b> to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface <b>118</b> may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device <b>100</b> to any type of network capable of communication and performing the operations described herein. A wide variety of I/O devices <b>130</b><i>a</i>-<b>130</b><i>n </i>may be present in the computing device <b>100</b>. Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I/O devices <b>130</b> may be controlled by an I/O controller <b>123</b> as shown in <figref idref="DRAWINGS">FIG. 1C</figref>. The I/O controller may control one or more I/O devices such as a keyboard <b>126</b> and a pointing device <b>127</b>, e.g., a mouse or optical pen. Furthermore, an I/O device may also provide storage <b>128</b> and/or an installation medium <b>116</b> for the computing device <b>100</b>. In still other embodiments, the computing device <b>100</b> may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.</p>
<p id="p-0050" num="0049">In some embodiments, the computing device <b>100</b> may comprise or be connected to multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>, which each may be of the same or different type and/or form. As such, any of the I/O devices <b>130</b><i>a</i>-<b>130</b><i>n </i>and/or the I/O controller <b>123</b> may comprise any type and/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n </i>by the computing device <b>100</b>. For example, the computing device <b>100</b> may include any type and/or form of video adapter, video card, driver, and/or library to interface, communicate, connect or otherwise use the display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In other embodiments, the computing device <b>100</b> may include multiple video adapters, with each video adapter connected to one or more of the display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In some embodiments, any portion of the operating system of the computing device <b>100</b> may be configured for using multiple displays <b>124</b><i>a</i>-<b>124</b><i>n</i>. In other embodiments, one or more of the display devices <b>124</b><i>a</i>-<b>124</b><i>n </i>may be provided by one or more other computing devices, such as computing devices <b>100</b><i>a </i>and <b>100</b><i>b </i>connected to the computing device <b>100</b>, for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device <b>124</b><i>a </i>for the computing device <b>100</b>. One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device <b>100</b> may be configured to have multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n. </i></p>
<p id="p-0051" num="0050">In further embodiments, an I/O device <b>130</b> may be a bridge <b>170</b> between the system bus <b>150</b> and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire <b>800</b> bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.</p>
<p id="p-0052" num="0051">A computing device <b>100</b> of the sort depicted in <figref idref="DRAWINGS">FIGS. 1C and 1D</figref> typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device <b>100</b> can be running any operating system such as any of the versions of the Microsoft&#xae; Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS&#xae; for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and/or form of a Unix operating system, among others.</p>
<p id="p-0053" num="0052">In other embodiments, the computing device <b>100</b> may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer <b>100</b> is a Treo 180, 270, 1060, 600 or 650 smart phone manufactured by Palm, Inc. In this embodiment, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device <b>100</b> can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.</p>
<p id="h-0007" num="0000">B. Appliance Architecture</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates an example embodiment of the appliance <b>200</b>. The architecture of the appliance <b>200</b> in <figref idref="DRAWINGS">FIG. 2A</figref> is provided by way of illustration only and is not intended to be limiting. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, appliance <b>200</b> comprises a hardware layer <b>206</b> and a software layer divided into a user space <b>202</b> and a kernel space <b>204</b>.</p>
<p id="p-0055" num="0054">Hardware layer <b>206</b> provides the hardware elements upon which programs and services within kernel space <b>204</b> and user space <b>202</b> are executed. Hardware layer <b>206</b> also provides the structures and elements which allow programs and services within kernel space <b>204</b> and user space <b>202</b> to communicate data both internally and externally with respect to appliance <b>200</b>. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the hardware layer <b>206</b> includes a processing unit <b>262</b> for executing software programs and services, a memory <b>264</b> for storing software and data, network ports <b>266</b> for transmitting and receiving data over a network, and an encryption processor <b>260</b> for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments, the central processing unit <b>262</b> may perform the functions of the encryption processor <b>260</b> in a single processor. Additionally, the hardware layer <b>206</b> may comprise multiple processors for each of the processing unit <b>262</b> and the encryption processor <b>260</b>. The processor <b>262</b> may include any of the processors <b>101</b> described above in connection with <figref idref="DRAWINGS">FIGS. 1C and 1D</figref>. In some embodiments, the central processing unit <b>262</b> may perform the functions of the encryption processor <b>260</b> in a single processor. Additionally, the hardware layer <b>206</b> may comprise multiple processors for each of the processing unit <b>262</b> and the encryption processor <b>260</b>. For example, in one embodiment, the appliance <b>200</b> comprises a first processor <b>262</b> and a second processor <b>262</b>&#x2032;. In other embodiments, the processor <b>262</b> or <b>262</b>&#x2032; comprises a multi-core processor.</p>
<p id="p-0056" num="0055">Although the hardware layer <b>206</b> of appliance <b>200</b> is generally illustrated with an encryption processor <b>260</b>, processor <b>260</b> may be a processor for performing functions related to any encryption protocol, such as the Secure Socket Layer (SSL) or Transport Layer Security (TLS) protocol. In some embodiments, the processor <b>260</b> may be a general purpose processor (GPP), and in further embodiments, may be have executable instructions for performing processing of any security related protocol.</p>
<p id="p-0057" num="0056">Although the hardware layer <b>206</b> of appliance <b>200</b> is illustrated with certain elements in <figref idref="DRAWINGS">FIG. 2</figref>, the hardware portions or components of appliance <b>200</b> may comprise any type and form of elements, hardware or software, of a computing device, such as the computing device <b>100</b> illustrated and discussed herein in conjunction with <figref idref="DRAWINGS">FIGS. 1C and 1D</figref>. In some embodiments, the appliance <b>200</b> may comprise a server, gateway, router, switch, bridge or other type of computing or network device, and have any hardware and/or software elements associated therewith.</p>
<p id="p-0058" num="0057">The operating system of appliance <b>200</b> allocates, manages, or otherwise segregates the available system memory into kernel space <b>204</b> and user space <b>204</b>. In example software architecture <b>200</b>, the operating system may be any type and/or form of Unix operating system although the invention is not so limited. As such, the appliance <b>200</b> can be running any operating system such as any of the versions of the Microsoft&#xae; Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS&#xae; for Macintosh computers, any embedded operating system, any network operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices or network devices, or any other operating system capable of running on the appliance <b>200</b> and performing the operations described herein.</p>
<p id="p-0059" num="0058">The kernel space <b>204</b> is reserved for running the kernel <b>230</b>, including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, the kernel <b>230</b> is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of the application <b>104</b>. In accordance with an embodiment of the appliance <b>200</b>, the kernel space <b>204</b> also includes a number of network services or processes working in conjunction with a cache manager <b>232</b>. sometimes also referred to as the integrated cache, the benefits of which are described in detail further herein. Additionally, the embodiment of the kernel <b>230</b> will depend on the embodiment of the operating system installed, configured, or otherwise used by the device <b>200</b>.</p>
<p id="p-0060" num="0059">In one embodiment, the device <b>200</b> comprises one network stack <b>267</b>, such as a TCP/IP based stack, for communicating with the client <b>102</b> and/or the server <b>106</b>. In one embodiment, the network stack <b>267</b> is used to communicate with a first network, such as network <b>108</b>, and a second network <b>110</b>. In some embodiments, the device <b>200</b> terminates a first transport layer connection, such as a TCP connection of a client <b>102</b>, and establishes a second transport layer connection to a server <b>106</b> for use by the client <b>102</b>, e.g., the second transport layer connection is terminated at the appliance <b>200</b> and the server <b>106</b>. The first and second transport layer connections may be established via a single network stack <b>267</b>. In other embodiments, the device <b>200</b> may comprise multiple network stacks, for example <b>267</b> and <b>267</b>&#x2032;, and the first transport layer connection may be established or terminated at one network stack <b>267</b>, and the second transport layer connection on the second network stack <b>267</b>&#x2032;. For example, one network stack may be for receiving and transmitting network packet on a first network, and another network stack for receiving and transmitting network packets on a second network. In one embodiment, the network stack <b>267</b> comprises a buffer <b>243</b> for queuing one or more network packets for transmission by the appliance <b>200</b>.</p>
<p id="p-0061" num="0060">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the kernel space <b>204</b> includes the cache manager <b>232</b>, a high-speed layer 2-7 integrated packet engine <b>240</b>, an encryption engine <b>234</b>, a policy engine <b>236</b> and multi-protocol compression logic <b>238</b>. Running these components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> in kernel space <b>204</b> or kernel mode instead of the user space <b>202</b> improves the performance of each of these components, alone and in combination. Kernel operation means that these components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> run in the core address space of the operating system of the device <b>200</b>. For example, running the encryption engine <b>234</b> in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel, thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example, data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode, such as from a kernel level data structure to a user level data structure. In another aspect, the number of context switches between kernel mode and user mode are also reduced. Additionally, synchronization of and communications between any of the components or processes <b>232</b>, <b>240</b>, <b>235</b>, <b>236</b> and <b>238</b> can be performed more efficiently in the kernel space <b>204</b>.</p>
<p id="p-0062" num="0061">In some embodiments, any portion of the components <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> may run or operate in the kernel space <b>204</b>, while other portions of these components <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> may run or operate in user space <b>202</b>. In one embodiment, the appliance <b>200</b> uses a kernel-level data structure providing access to any portion of one or more network packets, for example, a network packet comprising a request from a client <b>102</b> or a response from a server <b>106</b>. In some embodiments, the kernel-level data structure may be obtained by the packet engine <b>240</b> via a transport layer driver interface or filter to the network stack <b>267</b>. The kernel-level data structure may comprise any interface and/or data accessible via the kernel space <b>204</b> related to the network stack <b>267</b>, network traffic or packets received or transmitted by the network stack <b>267</b>. In other embodiments, the kernel-level data structure may be used by any of the components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> to perform the desired operation of the component or process. In one embodiment, a component <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> is running in kernel mode <b>204</b> when using the kernel-level data structure, while in another embodiment, the component <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> is running in user mode when using the kernel-level data structure. In some embodiments, the kernel-level data structure may be copied or passed to a second kernel-level data structure, or any desired user-level data structure.</p>
<p id="p-0063" num="0062">The cache manager <b>232</b> may comprise software, hardware or any combination of software and hardware to provide cache access, control and management of any type and form of content, such as objects or dynamically generated objects served by the originating servers <b>106</b>. The data, objects or content processed and stored by the cache manager <b>232</b> may comprise data in any format, such as a markup language, or communicated via any protocol. In some embodiments, the cache manager <b>232</b> duplicates original data stored elsewhere or data previously computed, generated or transmitted, in which the original data may require longer access time to fetch, compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element, future use can be made by accessing the cached copy rather than refetching or recomputing the original data, thereby reducing the access time. In some embodiments, the cache memory element that comprise a data object in memory <b>264</b> of device <b>200</b>. In other embodiments, the cache memory element may comprise memory having a faster access time than memory <b>264</b>. In another embodiment, the cache memory element may comprise any type and form of storage element of the device <b>200</b>, such as a portion of a hard disk. In some embodiments, the processing unit <b>262</b> may provide cache memory for use by the cache manager <b>232</b>. In yet further embodiments, the cache manager <b>232</b> may use any portion and combination of memory, storage, or the processing unit for caching data, objects, and other content.</p>
<p id="p-0064" num="0063">Furthermore, the cache manager <b>232</b> includes any logic, functions, rules, or operations to perform any embodiments of the techniques of the appliance <b>200</b> described herein. For example, the cache manager <b>232</b> includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client <b>102</b> or server <b>106</b>. In some embodiments, the cache manager <b>232</b> may operate as a program, service, process or task executing in the kernel space <b>204</b>, and in other embodiments, in the user space <b>202</b>. In one embodiment, a first portion of the cache manager <b>232</b> executes in the user space <b>202</b> while a second portion executes in the kernel space <b>204</b>. In some embodiments, the cache manager <b>232</b> can comprise any type of general purpose processor (GPP), or any other type of integrated circuit, such as a Field Programmable Gate Array (FPGA), Programmable Logic Device (PLD), or Application Specific Integrated Circuit (ASIC).</p>
<p id="p-0065" num="0064">The policy engine <b>236</b> may include, for example, an intelligent statistical engine or other programmable application(s). In one embodiment, the policy engine <b>236</b> provides a configuration mechanism to allow a user to identifying, specify, define or configure a caching policy. Policy engine <b>236</b>, in some embodiments, also has access to memory to support data structures such as lookup tables or hash tables to enable user-selected caching policy decisions. In other embodiments, the policy engine <b>236</b> may comprise any logic, rules, functions or operations to determine and provide access, control and management of objects, data or content being cached by the appliance <b>200</b> in addition to access, control and management of security, network traffic, network access, compression or any other function or operation performed by the appliance <b>200</b>. Further examples of specific caching policies are further described herein.</p>
<p id="p-0066" num="0065">The encryption engine <b>234</b> comprises any logic, business rules, functions or operations for handling the processing of any security related protocol, such as SSL or TLS, or any function related thereto. For example, the encryption engine <b>234</b> encrypts and decrypts network packets, or any portion thereof, communicated via the appliance <b>200</b>. The encryption engine <b>234</b> may also setup or establish SSL or TLS connections on behalf of the client <b>102</b><i>a</i>-<b>102</b><i>n</i>, server <b>106</b><i>a</i>-<b>106</b><i>n</i>, or appliance <b>200</b>. As such, the encryption engine <b>234</b> provides offloading and acceleration of SSL processing. In one embodiment, the encryption engine <b>234</b> uses a tunneling protocol to provide a virtual private network between a client <b>102</b><i>a</i>-<b>102</b><i>n </i>and a server <b>106</b><i>a</i>-<b>106</b><i>n</i>. In some embodiments, the encryption engine <b>234</b> is in communication with the Encryption processor <b>260</b>. In other embodiments, the encryption engine <b>234</b> comprises executable instructions running on the Encryption processor <b>260</b>.</p>
<p id="p-0067" num="0066">The multi-protocol compression engine <b>238</b> comprises any logic, business rules, function or operations for compressing one or more protocols of a network packet, such as any of the protocols used by the network stack <b>267</b> of the device <b>200</b>. In one embodiment, multi-protocol compression engine <b>238</b> compresses bi-directionally between clients <b>102</b><i>a</i>-<b>102</b><i>n </i>and servers <b>106</b><i>a</i>-<b>106</b><i>n </i>any TCP/IP based protocol, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In other embodiments, multi-protocol compression engine <b>238</b> provides compression of Hypertext Markup Language (HTML) based protocols and in some embodiments, provides compression of any markup languages, such as the Extensible Markup Language (XML). In one embodiment, the multi-protocol compression engine <b>238</b> provides compression of any high-performance protocol, such as any protocol designed for appliance <b>200</b> to appliance <b>200</b> communications. In another embodiment, the multi-protocol compression engine <b>238</b> compresses any payload of or any communication using a modified transport control protocol, such as Transaction TCP (T/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol.</p>
<p id="p-0068" num="0067">As such, the multi-protocol compression engine <b>238</b> accelerates performance for users accessing applications via desktop clients, e.g., Microsoft Outlook and non-Web thin clients, such as any client launched by popular enterprise applications like Oracle, SAP and Siebel, and even mobile clients, such as the Pocket PC. In some embodiments, the multi-protocol compression engine <b>238</b> by executing in the kernel mode <b>204</b> and integrating with packet processing engine <b>240</b> accessing the network stack <b>267</b> is able to compress any of the protocols carried by the TCP/IP protocol, such as any application layer protocol.</p>
<p id="p-0069" num="0068">High speed layer 2-7 integrated packet engine <b>240</b>, also generally referred to as a packet processing engine or packet engine, is responsible for managing the kernel-level processing of packets received and transmitted by appliance <b>200</b> via network ports <b>266</b>. The high speed layer 2-7 integrated packet engine <b>240</b> may comprise a buffer for queuing one or more network packets during processing, such as for receipt of a network packet or transmission of a network packer. Additionally, the high speed layer 2-7 integrated packet engine <b>240</b> is in communication with one or more network stacks <b>267</b> to send and receive network packets via network ports <b>266</b>. The high speed layer 2-7 integrated packet engine <b>240</b> works in conjunction with encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b>. In particular, encryption engine <b>234</b> is configured to perform SSL processing of packets, policy engine <b>236</b> is configured to perform functions related to traffic management such as request-level content switching and request-level cache redirection, and multi-protocol compression logic <b>238</b> is configured to perform functions related to compression and decompression of data.</p>
<p id="p-0070" num="0069">The high speed layer 2-7 integrated packet engine <b>240</b> includes a packet processing timer <b>242</b>. In one embodiment, the packet processing timer <b>242</b> provides one or more time intervals to trigger the processing of incoming, i.e., received, or outgoing, i.e., transmitted, network packets. In some embodiments, the high speed layer 2-7 integrated packet engine <b>240</b> processes network packets responsive to the timer <b>242</b>. The packet processing timer <b>242</b> provides any type and form of signal to the packet engine <b>240</b> to notify, trigger, or communicate a time related event, interval or occurrence. In many embodiments, the packet processing timer <b>242</b> operates in the order of milliseconds, such as for example 100 ms, 50 ms or 25 ms. For example, in some embodiments, the packet processing timer <b>242</b> provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2-7 integrated packet engine <b>240</b> at a 10 ms time interval, while in other embodiments, at a 5 ms time interval, and still yet in further embodiments, as short as a 3, 2, or 1 ms time interval. The high speed layer 2-7 integrated packet engine <b>240</b> may be interfaced, integrated or in communication with the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression engine <b>238</b> during operation. As such, any of the logic, functions, or operations of the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b> may be performed responsive to the packet processing timer <b>242</b> and/or the packet engine <b>240</b>. Therefore, any of the logic, functions, or operations of the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b> may be performed at the granularity of time intervals provided via the packet processing timer <b>242</b>, for example, at a time interval of less than or equal to 10 ms. For example, in one embodiment, the cache manager <b>232</b> may perform invalidation of any cached objects responsive to the high speed layer 2-7 integrated packet engine <b>240</b> and/or the packet processing timer <b>242</b>. In another embodiment, the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer <b>242</b>, such as at every 10 ms.</p>
<p id="p-0071" num="0070">In contrast to kernel space <b>204</b>, user space <b>202</b> is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space <b>204</b> directly and uses service calls in order to access kernel services. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, user space <b>202</b> of appliance <b>200</b> includes a graphical user interface (GUI) <b>210</b>, a command line interface (CLI) <b>212</b>, shell services <b>214</b>, health monitoring program <b>216</b>, and daemon services <b>218</b>. GUI <b>210</b> and CLI <b>212</b> provide a means by which a system administrator or other user can interact with and control the operation of appliance <b>200</b>, such as via the operating system of the appliance <b>200</b> and either is user space <b>202</b> or kernel space <b>204</b>. The GUI <b>210</b> may be any type and form of graphical user interface and may be presented via text, graphical or otherwise, by any type of program or application, such as a browser. The CLI <b>212</b> may be any type and form of command line or text-based interface, such as a command line provided by the operating system. For example, the CLI <b>212</b> may comprise a shell, which is a tool to enable users to interact with the operating system. In some embodiments, the CLI <b>212</b> may be provided via a bash, csh, tcsh, or ksh type shell. The shell services <b>214</b> comprises the programs, services, tasks, processes or executable instructions to support interaction with the appliance <b>200</b> or operating system by a user via the GUI <b>210</b> and/or CLI <b>212</b>.</p>
<p id="p-0072" num="0071">Health monitoring program <b>216</b> is used to monitor, check, report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program <b>216</b> comprises one or more programs, services, tasks, processes or executable instructions to provide logic, rules, functions or operations for monitoring any activity of the appliance <b>200</b>. In some embodiments, the health monitoring program <b>216</b> intercepts and inspects any network traffic passed via the appliance <b>200</b>. In other embodiments, the health monitoring program <b>216</b> interfaces by any suitable means and/or mechanisms with one or more of the following: the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b>, multi-protocol compression logic <b>238</b>, packet engine <b>240</b>, daemon services <b>218</b>, and shell services <b>214</b>. As such, the health monitoring program <b>216</b> may call any application programming interface (API) to determine a state, status, or health of any portion of the appliance <b>200</b>. For example, the health monitoring program <b>216</b> may ping or send a status inquiry on a periodic basis to check if a program, process, service or task is active and currently running. In another example, the health monitoring program <b>216</b> may check any status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of the appliance <b>200</b>.</p>
<p id="p-0073" num="0072">Daemon services <b>218</b> are programs that run continuously or in the background and handle periodic service requests received by appliance <b>200</b>. In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service <b>218</b> as appropriate. As known to those skilled in the art, a daemon service <b>218</b> may run unattended to perform continuous or periodic system wide functions, such as network control, or to perform any desired task. In some embodiments, one or more daemon services <b>218</b> run in the user space <b>202</b>, while in other embodiments, one or more daemon services <b>218</b> run in the kernel space.</p>
<p id="p-0074" num="0073">Referring now to <figref idref="DRAWINGS">FIG. 2B</figref>, another embodiment of the appliance <b>200</b> is depicted. In brief overview, the appliance <b>200</b> provides one or more of the following services, functionality or operations: SSL VPN connectivity <b>280</b>, switching/load balancing <b>284</b>, Domain Name Service resolution <b>286</b>, acceleration <b>288</b> and an application firewall <b>290</b> for communications between one or more clients <b>102</b> and one or more servers <b>106</b>. In one embodiment, the appliance <b>200</b> comprises any of the network devices manufactured by Citrix Systems, Inc. of Ft. Lauderdale Fla., referred to as Citrix NetScaler devices. Each of the servers <b>106</b> may provide one or more network related services <b>270</b><i>a</i>-<b>270</b><i>n </i>(referred to as services <b>270</b>). For example, a server <b>106</b> may provide an http service <b>270</b>. The appliance <b>200</b> comprises one or more virtual servers or virtual internet protocol servers, referred to as a vServer, VIP server, or just VIP <b>275</b><i>a</i>-<b>275</b><i>n </i>(also referred herein as vServer <b>275</b>). The vServer <b>275</b> receives, intercepts or otherwise processes communications between a client <b>102</b> and a server <b>106</b> in accordance with the configuration and operations of the appliance <b>200</b>.</p>
<p id="p-0075" num="0074">The vServer <b>275</b> may comprise software, hardware or any combination of software and hardware. The vServer <b>275</b> may comprise any type and form of program, service, task, process or executable instructions operating in user mode <b>202</b>, kernel mode <b>204</b> or any combination thereof in the appliance <b>200</b>. The vServer <b>275</b> includes any logic, functions, rules, or operations to perform any embodiments of the techniques described herein, such as SSL VPN <b>280</b>, switching/load balancing <b>284</b>, Domain Name Service resolution <b>286</b>, acceleration <b>288</b> and an application firewall <b>290</b>. In some embodiments, the vServer <b>275</b> establishes a connection to a service <b>270</b> of a server <b>106</b>. The service <b>275</b> may comprise any program, application, process, task or set of executable instructions capable of connecting to and communicating to the appliance <b>200</b>, client <b>102</b> or vServer <b>275</b>. For example, the service <b>275</b> may comprise a web server, http server, ftp, email or database server. In some embodiments, the service <b>270</b> is a daemon process or network driver for listening, receiving and/or sending communications for an application, such as email, database or an enterprise application. In some embodiments, the service <b>270</b> may communicate on a specific IP address, or IP address and port.</p>
<p id="p-0076" num="0075">In some embodiments, the vServer <b>275</b> applies one or more policies of the policy engine <b>236</b> to network communications between the client <b>102</b> and server <b>106</b>. In one embodiment, the policies are associated with a VServer <b>275</b>. In another embodiment, the policies are based on a user, or a group of users. In yet another embodiment, a policy is global and applies to one or more vServers <b>275</b><i>a</i>-<b>275</b><i>n</i>, and any user or group of users communicating via the appliance <b>200</b>. In some embodiments, the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication, such as internet protocol address, port, protocol type, header or fields in a packet, or the context of the communication, such as user, group of the user, vServer <b>275</b>, transport layer connection, and/or identification or attributes of the client <b>102</b> or server <b>106</b>.</p>
<p id="p-0077" num="0076">In other embodiments, the appliance <b>200</b> communicates or interfaces with the policy engine <b>236</b> to determine authentication and/or authorization of a remote user or a remote client <b>102</b> to access the computing environment <b>15</b>, application, and/or data file from a server <b>106</b>. In another embodiment, the appliance <b>200</b> communicates or interfaces with the policy engine <b>236</b> to determine authentication and/or authorization of a remote user or a remote client <b>102</b> to have the application delivery system <b>190</b> deliver one or more of the computing environment <b>15</b>, application, and/or data file. In yet another embodiment, the appliance <b>200</b> establishes a VPN or SSL VPN connection based on the policy engine's <b>236</b> authentication and/or authorization of a remote user or a remote client <b>103</b> In one embodiment, the appliance <b>102</b> controls the flow of network traffic and communication sessions based on policies of the policy engine <b>236</b>. For example, the appliance <b>200</b> may control the access to a computing environment <b>15</b>, application or data file based on the policy engine <b>236</b>.</p>
<p id="p-0078" num="0077">In some embodiments, the vServer <b>275</b> establishes a transport layer connection, such as a TCP or UDP connection with a client <b>102</b> via the client agent <b>120</b>. In one embodiment, the vServer <b>275</b> listens for and receives communications from the client <b>102</b>. In other embodiments, the vServer <b>275</b> establishes a transport layer connection, such as a TCP or UDP connection with a client server <b>106</b>. In one embodiment, the vServer <b>275</b> establishes the transport layer connection to an internet protocol address and port of a server <b>270</b> running on the server <b>106</b>. In another embodiment, the vServer <b>275</b> associates a first transport layer connection to a client <b>102</b> with a second transport layer connection to the server <b>106</b>. In some embodiments, a vServer <b>275</b> establishes a pool of transport layer connections to a server <b>106</b> and multiplexes client requests via the pooled transport layer connections.</p>
<p id="p-0079" num="0078">In some embodiments, the appliance <b>200</b> provides a SSL VPN connection <b>280</b> between a client <b>102</b> and a server <b>106</b>. For example, a client <b>102</b> on a first network <b>102</b> requests to establish a connection to a server <b>106</b> on a second network <b>104</b>&#x2032;. In some embodiments, the second network <b>104</b>&#x2032; is not routable from the first network <b>104</b>. In other embodiments, the client <b>102</b> is on a public network <b>104</b> and the server <b>106</b> is on a private network <b>104</b>&#x2032;, such as a corporate network. In one embodiment, the client agent <b>120</b> intercepts communications of the client <b>102</b> on the first network <b>104</b>, encrypts the communications, and transmits the communications via a first transport layer connection to the appliance <b>200</b>. The appliance <b>200</b> associates the first transport layer connection on the first network <b>104</b> to a second transport layer connection to the server <b>106</b> on the second network <b>104</b>. The appliance <b>200</b> receives the intercepted communication from the client agent <b>102</b>, decrypts the communications, and transmits the communication to the server <b>106</b> on the second network <b>104</b> via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such, the appliance <b>200</b> provides an end-to-end secure transport layer connection for the client <b>102</b> between the two networks <b>104</b>, <b>104</b>&#x2032;.</p>
<p id="p-0080" num="0079">In one embodiment, the appliance <b>200</b> hosts an intranet internet protocol or intranetIP <b>282</b> address of the client <b>102</b> on the virtual private network <b>104</b>. The client <b>102</b> has a local network identifier, such as an internet protocol (IP) address and/or host name on the first network <b>104</b>. When connected to the second network <b>104</b>&#x2032; via the appliance <b>200</b>, the appliance <b>200</b> establishes, assigns or otherwise provides an IntranetIP, which is network identifier, such as IP address and/or host name, for the client <b>102</b> on the second network <b>104</b>&#x2032;. The appliance <b>200</b> listens for and receives on the second or private network <b>104</b>&#x2032; for any communications directed towards the client <b>102</b> using the client's established IntranetIP <b>282</b>. In one embodiment, the appliance <b>200</b> acts as or on behalf of the client <b>102</b> on the second private network <b>104</b>. For example, in another embodiment, a vServer <b>275</b> listens for and responds to communications to the IntranetIP <b>282</b> of the client <b>102</b>. In some embodiments, if a computing device <b>100</b> on the second network <b>104</b>&#x2032; transmits a request, the appliance <b>200</b> processes the request as if it were the client <b>102</b>. For example, the appliance <b>200</b> may respond to a ping to the client's IntranetIP <b>282</b>. In another example, the appliance may establish a connection, such as a TCP or UDP connection, with computing device <b>100</b> on the second network <b>104</b> requesting a connection with the client's IntranetIP <b>282</b>.</p>
<p id="p-0081" num="0080">In some embodiments, the appliance <b>200</b> provides one or more of the following acceleration techniques <b>288</b> to communications between the client <b>102</b> and server <b>106</b>: 1) compression; 2) decompression; 3) Transmission Control Protocol pooling; 4) Transmission Control Protocol multiplexing; 5) Transmission Control Protocol buffering; and 6) caching. In one embodiment, the appliance <b>200</b> relieves servers <b>106</b> of much of the processing load caused by repeatedly opening and closing transport layers connections to clients <b>102</b> by opening one or more transport layer connections with each server <b>106</b> and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as &#x201c;connection pooling&#x201d;.</p>
<p id="p-0082" num="0081">In some embodiments, in order to seamlessly splice communications from a client <b>102</b> to a server <b>106</b> via a pooled transport layer connection, the appliance <b>200</b> translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as &#x201c;connection multiplexing&#x201d;. In some embodiments, no application layer protocol interaction is required. For example, in the case of an in-bound packet (that is, a packet received from a client <b>102</b>), the source network address of the packet is changed to that of an output port of appliance <b>200</b>, and the destination network address is changed to that of the intended server. In the case of an outbound packet (that is, one received from a server <b>106</b>), the source network address is changed from that of the server <b>106</b> to that of an output port of appliance <b>200</b> and the destination address is changed from that of appliance <b>200</b> to that of the requesting client <b>102</b>. The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client <b>102</b> on the appliance's <b>200</b> transport layer connection to the client <b>102</b>. In some embodiments, the packet checksum of the transport layer protocol is recalculated to account for these translations.</p>
<p id="p-0083" num="0082">In another embodiment, the appliance <b>200</b> provides switching or load-balancing functionality <b>284</b> for communications between the client <b>102</b> and server <b>106</b>. In some embodiments, the appliance <b>200</b> distributes traffic and directs client requests to a server <b>106</b> based on layer 4 or application-layer request data. In one embodiment, although the network layer or layer 2 of the network packet identifies a destination server <b>106</b>, the appliance <b>200</b> determines the server <b>106</b> to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment, the health monitoring programs <b>216</b> of the appliance <b>200</b> monitor the health of servers to determine the server <b>106</b> for which to distribute a client's request. In some embodiments, if the appliance <b>200</b> detects a server <b>106</b> is not available or has a load over a predetermined threshold, the appliance <b>200</b> can direct or distribute client requests to another server <b>106</b>.</p>
<p id="p-0084" num="0083">In some embodiments, the appliance <b>200</b> acts as a Domain Name Service (DNS) resolver or otherwise provides resolution of a DNS request from clients <b>102</b>. In some embodiments, the appliance intercepts' a DNS request transmitted by the client <b>102</b>. In one embodiment, the appliance <b>200</b> responds to a client's DNS request with an IP address of or hosted by the appliance <b>200</b>. In this embodiment, the client <b>102</b> transmits network communication for the domain name to the appliance <b>200</b>. In another embodiment, the appliance <b>200</b> responds to a client's DNS request with an IP address of or hosted by a second appliance <b>200</b>&#x2032;. In some embodiments, the appliance <b>200</b> responds to a client's DNS request with an IP address of a server <b>106</b> determined by the appliance <b>200</b>.</p>
<p id="p-0085" num="0084">In yet another embodiment, the appliance <b>200</b> provides application firewall functionality <b>290</b> for communications between the client <b>102</b> and server <b>106</b>. In one embodiment, the policy engine <b>236</b> provides rules for detecting and blocking illegitimate requests. In some embodiments, the application firewall <b>290</b> protects against denial of service (DoS) attacks. In other embodiments, the appliance inspects the content of intercepted requests to identify and block application-based attacks. In some embodiments, the rules/policy engine <b>236</b> comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities, such as one or more of the following: 1) buffer overflow, 2) CGI-BIN parameter manipulation, 3) form/hidden field manipulation, 4) forceful browsing, 5) cookie or session poisoning, 6) broken access control list (ACLs) or weak passwords, 7) cross-site scripting (XSS), 8) command injection, 9) SQL injection, 10) error triggering sensitive information leak, 11) insecure use of cryptography, 12) server misconfiguration, 13) back doors and debug options, 14) website defacement, 15) platform or operating systems vulnerabilities, and 16) zero-day exploits. In an embodiment, the application firewall <b>290</b> provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following: 1) required fields are returned, 2) no added field allowed, 3) read-only and hidden field enforcement, 4) drop-down list and radio button field conformance, and 5) form-field max-length enforcement. In some embodiments, the application firewall <b>290</b> ensures cookies are not modified. In other embodiments, the application firewall <b>290</b> protects against forceful browsing by enforcing legal URLs.</p>
<p id="p-0086" num="0085">In still yet other embodiments, the application firewall <b>290</b> protects any confidential information contained in the network communication. The application firewall <b>290</b> may inspect or analyze any network communication in accordance with the rules or polices of the engine <b>236</b> to identify any confidential information in any field of the network packet. In some embodiments, the application firewall <b>290</b> identifies in the network communication one or more occurrences of a credit card number, password, social security number, name, patient code, contact information, and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences, in one embodiment, the application firewall <b>290</b> may take a policy action on the network communication, such as prevent transmission of the network communication. In another embodiment, the application firewall <b>290</b> may rewrite, remove or otherwise mask such identified occurrence or confidential information.</p>
<p id="h-0008" num="0000">C. Client Agent</p>
<p id="p-0087" num="0086">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, an embodiment of the client agent <b>120</b> is depicted. The client <b>102</b> includes a client agent <b>120</b> for establishing and exchanging communications with the appliance <b>200</b> and/or server <b>106</b> via a network <b>104</b>. In brief overview, the client <b>102</b> operates on computing device <b>100</b> having an operating system with a kernel mode <b>302</b> and a user mode <b>303</b>, and a network stack <b>310</b> with one or more layers <b>310</b><i>a</i>-<b>310</b><i>b</i>. The client <b>102</b> may have installed and/or execute one or more applications. In some embodiments, one or more applications may communicate via the network stack <b>310</b> to a network <b>104</b>. One of the applications, such as a web browser, may also include a first program <b>322</b>. For example, the first program <b>322</b> may be used in some embodiments to install and/or execute the client agent <b>120</b>, or any portion thereof. The client agent <b>120</b> includes an interception mechanism, or interceptor <b>350</b>, for intercepting network communications from the network stack <b>310</b> from the one or more applications.</p>
<p id="p-0088" num="0087">The network stack <b>310</b> of the client <b>102</b> may comprise any type and form of software, or hardware, or any combinations thereof, for providing connectivity to and communications with a network. In one embodiment, the network stack <b>310</b> comprises a software implementation for a network protocol suite. The network stack <b>310</b> may comprise one or more network layers, such as any networks layers of the Open Systems Interconnection (OSI) communications model as those skilled in the art recognize and appreciate. As such, the network stack <b>310</b> may comprise any type and form of protocols for any of the following layers of the OSI model: 1) physical link layer, 2) data link layer, 3) network layer, 4) transport layer, 5) session layer, 6) presentation layer, and 7) application layer. In one embodiment, the network stack <b>310</b> may comprise a transport control protocol (TCP) over the network layer protocol of the internet protocol (IP), generally referred to as TCP/IP. In some embodiments, the TCP/IP protocol may be carried over the Ethernet protocol, which may comprise any of the family of IEEE wide-area-network (WAN) or local-area-network (LAN) protocols, such as those protocols covered by the IEEE 802.3. In some embodiments, the network stack <b>310</b> comprises any type and form of a wireless protocol, such as IEEE 802.11 and/or mobile internet protocol.</p>
<p id="p-0089" num="0088">In view of a TCP/IP based network, any TCP/IP based protocol may be used, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In another embodiment, the network stack <b>310</b> comprises any type and form of transport control protocol, such as a modified transport control protocol, for example a Transaction TCP (T/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol. In other embodiments, any type and form of user datagram protocol (UDP), such as UDP over IP, may be used by the network stack <b>310</b>, such as for voice communications or real-time data communications.</p>
<p id="p-0090" num="0089">Furthermore, the network stack <b>310</b> may include one or more network drivers supporting the one or more layers, such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device <b>100</b> or as part of any network interface cards or other network access components of the computing device <b>100</b>. In some embodiments, any of the network drivers of the network stack <b>310</b> may be customized, modified or adapted to provide a custom or modified portion of the network stack <b>310</b> in support of any of the techniques described herein. In other embodiments, the acceleration program <b>120</b> is designed and constructed to operate with or work in conjunction with the network stack <b>310</b> installed or otherwise provided by the operating system of the client <b>102</b>.</p>
<p id="p-0091" num="0090">The network stack <b>310</b> comprises any type and form of interfaces for receiving, obtaining, providing or otherwise accessing any information and data related to network communications of the client <b>102</b>. In one embodiment, an interface to the network stack <b>310</b> comprises an application programming interface (API). The interface may also comprise any function call, hooking or filtering mechanism, event or call back mechanism, or any type of interfacing technique. The network stack <b>310</b> via the interface may receive or provide any type and form of data structure, such as an object, related to functionality or operation of the network stack <b>310</b>. For example, the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments, the data structure comprises a portion of the network packet processed at a protocol layer of the network stack <b>310</b>, such as a network packet of the transport layer. In some embodiments, the data structure <b>325</b> comprises a kernel-level data structure, while in other embodiments, the data structure <b>325</b> comprises a user-mode data structure. A kernel-level data structure may comprise a data structure obtained or related to a portion of the network stack <b>310</b> operating in kernel-mode <b>302</b>, or a network driver or other software running in kernel-mode <b>302</b>, or any data structure obtained or received by a service, process, task, thread or other executable instructions running or operating in kernel-mode of the operating system.</p>
<p id="p-0092" num="0091">Additionally, some portions of the network stack <b>310</b> may execute or operate in kernel-mode <b>302</b>, for example, the data link or network layer, while other portions execute or operate in user-mode <b>303</b>, such as an application layer of the network stack <b>310</b>. For example, a first portion <b>310</b><i>a </i>of the network stack may provide user-mode access to the network stack <b>310</b> to an application while a second portion <b>310</b><i>a </i>of the network stack <b>310</b> provides access to a network. In some embodiments, a first portion <b>310</b><i>a </i>of the network stack may comprise one or more upper layers of the network stack <b>310</b>, such as any of layers 5-7. In other embodiments, a second portion <b>310</b><i>b </i>of the network stack <b>310</b> comprises one or more lower layers, such as any of layers 1-4. Each of the first portion <b>310</b><i>a </i>and second portion <b>310</b><i>b </i>of the network stack <b>310</b> may comprise any portion of the network stack <b>310</b>, at any one or more network layers, in user-mode <b>203</b>, kernel-mode, <b>202</b>, or combinations thereof, or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user-mode <b>203</b> and kernel-mode <b>203</b>.</p>
<p id="p-0093" num="0092">The interceptor <b>350</b> may comprise software, hardware, or any combination of software and hardware. In one embodiment, the interceptor <b>350</b> intercept a network communication at any point in the network stack <b>310</b>, and redirects or transmits the network communication to a destination desired, managed or controlled by the interceptor <b>350</b> or client agent <b>120</b>. For example, the interceptor <b>350</b> may intercept a network communication of a network stack <b>310</b> of a first network and transmit the network communication to the appliance <b>200</b> for transmission on a second network <b>104</b>. In some embodiments, the interceptor <b>350</b> comprises any type interceptor <b>350</b> comprises a driver, such as a network driver constructed and designed to interface and work with the network stack <b>310</b>. In some embodiments, the client agent <b>120</b> and/or interceptor <b>350</b> operates at one or more layers of the network stack <b>310</b>, such as at the transport layer. In one embodiment, the interceptor <b>350</b> comprises a filter driver, hooking mechanism, or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack, such as via the transport driver interface (TDI). In some embodiments, the interceptor <b>350</b> interfaces to a first protocol layer, such as the transport layer and another protocol layer, such as any layer above the transport protocol layer, for example, an application protocol layer. In one embodiment, the interceptor <b>350</b> may comprise a driver complying with the Network Driver Interface Specification (NDIS), or a NDIS driver. In another embodiment, the interceptor <b>350</b> may comprise a min-filter or a mini-port driver. In one embodiment, the interceptor <b>350</b>, or portion thereof, operates in kernel-mode <b>202</b>. In another embodiment, the interceptor <b>350</b>, or portion thereof, operates in user-mode <b>203</b>. In some embodiments, a portion of the interceptor <b>350</b> operates in kernel-mode <b>202</b> while another portion of the interceptor <b>350</b> operates in user-mode <b>203</b>. In other embodiments, the client agent <b>120</b> operates in user-mode <b>203</b> but interfaces via the interceptor <b>350</b> to a kernel-mode driver, process, service, task or portion of the operating system, such as to obtain a kernel-level data structure <b>225</b>. In further embodiments, the interceptor <b>350</b> is a user-mode application or program, such as application.</p>
<p id="p-0094" num="0093">In one embodiment, the interceptor <b>350</b> intercepts any transport layer connection requests. In these embodiments, the interceptor <b>350</b> execute transport layer application programming interface (API) calls to set the destination information, such as destination IP address and/or port to a desired location for the location. In this manner, the interceptor <b>350</b> intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor <b>350</b> or client agent <b>120</b>. In one embodiment, the interceptor <b>350</b> sets the destination information for the connection to a local IP address and port of the client <b>102</b> on which the client agent <b>120</b> is listening. For example, the client agent <b>120</b> may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments, the client agent <b>120</b> then communicates the redirected transport layer communication to the appliance <b>200</b>.</p>
<p id="p-0095" num="0094">In some embodiments, the interceptor <b>350</b> intercepts a Domain Name Service (DNS) request. In one embodiment, the client agent <b>120</b> and/or interceptor <b>350</b> resolves the DNS request. In another embodiment, the interceptor transmits the intercepted DNS request to the appliance <b>200</b> for DNS resolution. In one embodiment, the appliance <b>200</b> resolves the DNS request and communicates the DNS response to the client agent <b>120</b>. In some embodiments, the appliance <b>200</b> resolves the DNS request via another appliance <b>200</b>&#x2032; or a DNS server <b>106</b>.</p>
<p id="p-0096" num="0095">In yet another embodiment, the client agent <b>120</b> may comprise two agents <b>120</b> and <b>120</b>&#x2032;. In one embodiment, a first agent <b>120</b> may comprise an interceptor <b>350</b> operating at the network layer of the network stack <b>310</b>. In some embodiments, the first agent <b>120</b> intercepts network layer requests such as Internet Control Message Protocol (ICMP) requests (e.g., ping and traceroute). In other embodiments, the second agent <b>120</b>&#x2032; may operate at the transport layer and intercept transport layer communications. In some embodiments, the first agent <b>120</b> intercepts communications at one layer of the network stack <b>210</b> and interfaces with or communicates the intercepted communication to the second agent <b>120</b>&#x2032;.</p>
<p id="p-0097" num="0096">The client agent <b>120</b> and/or interceptor <b>350</b> may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack <b>310</b>. For example, in one embodiment, the interceptor <b>350</b> operates or interfaces with the transport layer of the network stack <b>310</b> transparently to any protocol layer below the transport layer, such as the network layer, and any protocol layer above the transport layer, such as the session, presentation or application layer protocols. This allows the other protocol layers of the network stack <b>310</b> to operate as desired and without modification for using the interceptor <b>350</b>. As such, the client agent <b>120</b> and/or interceptor <b>350</b> can interface with the transport layer to secure, optimize, accelerate, route or load-balance any communications provided via any protocol carried by the transport layer, such as any application layer protocol over TCP/IP.</p>
<p id="p-0098" num="0097">Furthermore, the client agent <b>120</b> and/or interceptor may operate at or interface with the network stack <b>310</b> in a manner transparent to any application, a user of the client <b>102</b>, and any other computing device, such as a server, in communications with the client <b>102</b>. The client agent <b>120</b> and/or interceptor <b>350</b> may be installed and/or executed on the client <b>102</b> in a manner without modification of an application. In some embodiments, the user of the client <b>102</b> or a computing device in communications with the client <b>102</b> are not aware of the existence, execution or operation of the client agent <b>120</b> and/or interceptor <b>350</b>. As such, in some embodiments, the client agent <b>120</b> and/or interceptor <b>350</b> is installed, executed, and/or operated transparently to an application, user of the client <b>102</b>, another computing device, such as a server, or any of the protocol layers above and/or below the protocol layer interfaced to by the interceptor <b>350</b>.</p>
<p id="p-0099" num="0098">The client agent <b>120</b> includes an acceleration program <b>302</b>, a streaming client <b>306</b>, and/or a collection agent <b>304</b>. In one embodiment, the client agent <b>120</b> comprises an Independent Computing Architecture (ICA) client, or any portion thereof, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is also referred to as an ICA client. In some embodiments, the client <b>120</b> comprises an application streaming client <b>306</b> for streaming an application from a server <b>106</b> to a client <b>102</b>. In some embodiments, the client agent <b>120</b> comprises an acceleration program <b>302</b> for accelerating communications between client <b>102</b> and server <b>106</b>. In another embodiment, the client agent <b>120</b> includes a collection agent <b>304</b> for performing end-point detection/scanning and collecting end-point information for the appliance <b>200</b> and/or server <b>106</b>.</p>
<p id="p-0100" num="0099">In some embodiments, the acceleration program <b>302</b> comprises a client-side acceleration program for performing one or more acceleration techniques to accelerate, enhance or otherwise improve a client's communications with and/or access to a server <b>106</b>, such as accessing an application provided by a server <b>106</b>. The logic, functions, and/or operations of the executable instructions of the acceleration program <b>302</b> may perform one or more of the following acceleration techniques: 1) multi-protocol compression, 2) transport control protocol pooling, 3) transport control protocol multiplexing, 4) transport control protocol buffering, and 5) caching via a cache manager. Additionally, the acceleration program <b>302</b> may perform encryption and/or decryption of any communications received and/or transmitted by the client <b>102</b>. In some embodiments, the acceleration program <b>302</b> performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally, the acceleration program <b>302</b> can perform compression on any of the protocols, or multiple-protocols, carried as a payload of a network packet of the transport layer protocol.</p>
<p id="p-0101" num="0100">The streaming client <b>306</b> comprises an application, program, process, service, task or executable instructions for receiving and executing a streamed application from a server <b>106</b>. A server <b>106</b> may stream one or more application data files to the streaming client <b>306</b> for playing, executing or otherwise causing to be executed the application on the client <b>102</b>. In some embodiments, the server <b>106</b> transmits a set of compressed or packaged application data files to the streaming client <b>306</b>. In some embodiments, the plurality of application files are compressed and stored on a file server within an archive file such as a CAB, ZIP, SIT, TAR, JAR or other archives In one embodiment, the server <b>106</b> decompresses, unpackages or unarchives the application files and transmits the files to the client <b>102</b>. In another embodiment, the client <b>102</b> decompresses, unpackages or unarchives the application files. The streaming client <b>306</b> dynamically installs the application, or portion thereof, and executes the application. In one embodiment, the streaming client <b>306</b> may be an executable program. In some embodiments, the streaming client <b>306</b> may be able to launch another executable program.</p>
<p id="p-0102" num="0101">The collection agent <b>304</b> comprises an application, program, process, service, task or executable instructions for identifying, obtaining and/or collecting information about the client <b>102</b>. In some embodiments, the appliance <b>200</b> transmits the collection agent <b>304</b> to the client <b>102</b> or client agent <b>120</b>. The collection agent <b>304</b> may be configured according to one or more policies of the policy engine <b>236</b> of the appliance. In other embodiments, the collection agent <b>304</b> transmits collected information on the client <b>102</b> to the appliance <b>200</b>. In one embodiment, the policy engine <b>236</b> of the appliance <b>200</b> uses the collected information to determine and provide access, authentication and authorization control of the client's connection to a network <b>104</b>.</p>
<p id="p-0103" num="0102">In one embodiment, the collection agent <b>304</b> comprises an end-point detection and scanning mechanism, which identifies and determines one or more attributes or characteristics of the client. For example, the collection agent <b>304</b> may identify and determine any one or more of the following client-side attributes: 1) the operating system an/or a version of an operating system, 2) a service pack of the operating system, 3) a running service, 4) a running process, and 5) a file. The collection agent <b>304</b> may also identify and determine the presence or versions of any one or more of the following on the client: 1) antivirus software, 2) personal firewall software, 3) anti-spam software, and 4) internet security software. The policy engine <b>236</b> may have one or more policies based on any one or more of the attributes or characteristics of the client or client-side attributes.</p>
<p id="p-0104" num="0103">In some embodiments and still referring to <figref idref="DRAWINGS">FIG. 3</figref>, a first program <b>322</b> may be used to install and/or execute the client agent <b>120</b>, or portion thereof, such as the interceptor <b>350</b>, automatically, silently, transparently, or otherwise. In one embodiment, the first program <b>322</b> comprises a plugin component, such an ActiveX control or Java control or script that is loaded into and executed by an application. For example, the first program comprises an ActiveX control loaded and run by a web browser application, such as in the memory space or context of the application. In another embodiment, the first program <b>322</b> comprises a set of executable instructions loaded into and run by the application, such as a browser. In one embodiment, the first program <b>322</b> comprises a designed and constructed program to install the client agent <b>120</b>. In some embodiments, the first program <b>322</b> obtains, downloads, or receives the client agent <b>120</b> via the network from another computing device. In another embodiment, the first program <b>322</b> is an installer program or a plug and play manager for installing programs, such as network drivers, on the operating system of the client <b>102</b>.</p>
<p id="h-0009" num="0000">D. Hierarchical Global Load Balancing</p>
<p id="p-0105" num="0104">Referring now to <figref idref="DRAWINGS">FIG. 4A</figref>, an embodiment of a hierarchy of aggregator appliances <b>400</b>A-<b>400</b>B (also referred herein as aggregator appliance <b>400</b>) for load balancing resources across branch offices is depicted. In brief overview, a first aggregator appliance <b>400</b>A is connected to a first set of branch office appliances <b>200</b>A-<b>200</b>N (also referred herein as branch office appliance <b>200</b>) providing services to branch offices <b>405</b>A-<b>405</b>N. A second aggregator appliance <b>400</b>B is connected to a second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; providing services to branch offices <b>405</b>A&#x2032;-<b>405</b>N&#x2032;. The first aggregator appliance <b>405</b>A and the second aggregator appliance <b>400</b>B establish connections with each other to communicate information <b>410</b>A, <b>410</b>A&#x2032; and <b>410</b>B, <b>410</b>B&#x2032; on performance and operational characteristics of respective branch office appliances. With this information <b>410</b>, <b>420</b>, either of the aggregator appliances <b>400</b>A-<b>400</b>N can perform load balancing/switching <b>284</b> to select a branch office appliance <b>200</b> from the first set of branch office appliances <b>200</b>A-<b>200</b>N or the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; to service requests to access resources from a client <b>102</b>.</p>
<p id="p-0106" num="0105">Any of the branch office appliances <b>200</b>A-<b>200</b>N or <b>200</b>A&#x2032;-<b>200</b>N&#x2032; may be configured to know of or identify a single aggregator appliance <b>400</b>. For example, a first branch office appliance <b>200</b>A may be configured to identify and connect to the first aggregator appliance <b>400</b>A. The first branch office appliance <b>200</b>A may not be configured to have any information and therefore may not know of the second aggregator appliance <b>400</b>B or any branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; connected to the second aggregator appliance <b>400</b>B. In this manner, the configuration of branch office appliance <b>200</b> is reduced. Even though the configuration is reduced, a branch office appliance servicing a request may access any of the other appliances <b>200</b>A-<b>200</b>N&#x2032; known to an aggregator appliance <b>400</b>. Since the aggregator appliances <b>400</b>A-<b>400</b>B share information on branch office appliance <b>200</b>A-<b>200</b>N&#x2032;, a first aggregator appliance <b>200</b> can identify to a first branch office appliance <b>200</b> information identifying any of the branch office appliances <b>200</b>A-<b>200</b>N&#x2032; connected via any of the aggregator appliances <b>400</b>A-<b>400</b>B.</p>
<p id="p-0107" num="0106">In some embodiments, the branch office appliances <b>200</b> provide any of the functionality, operations and services of an appliance <b>200</b> described in conjunction with <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>. The branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; provide acceleration <b>288</b>, load balancing/switching <b>284</b>, SSL VPN <b>280</b> and/or application firewall services <b>290</b> to any of the computing devices and users of its respective branch office <b>405</b>A&#x2032;-<b>405</b>N&#x2032;. The branch office appliances <b>200</b>A-<b>200</b>N provide acceleration <b>288</b>, load balancing <b>284</b>, switching, SSL VPN <b>280</b> and/or application firewall services <b>290</b> to any of the computing devices and users of its respective branch office <b>405</b>A-<b>405</b>N. In one embodiment, each of the branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; provide the same functionality, operations and service. In other embodiments, each of the branch office appliance <b>200</b> may provide different functionality, operations or services than another branch office appliance. For example, a first branch office appliance <b>200</b>A may provide for SSL VPN <b>280</b> and acceleration <b>288</b>, and a second branch office appliance <b>200</b>A&#x2032; may provide load balancing/switching <b>284</b> with SSL VPN <b>280</b>. A third branch office appliance <b>200</b>N may provide only SSL VPN <b>280</b> and a fourth branch office appliance <b>200</b>N, acceleration <b>288</b>. Further to the example, a fifth branch office appliance <b>200</b>B may provide acceleration <b>288</b> while a sixth branch office appliance <b>200</b>C provides application firewall <b>290</b> functionality.</p>
<p id="p-0108" num="0107">Although branch office appliances <b>200</b> are generally described as an appliance <b>200</b> in a branch office <b>405</b>, the branch office appliance <b>200</b> may be an appliance <b>200</b> deployed at any location in a network <b>104</b>, <b>105</b>&#x2032;. For example, a branch office appliance <b>200</b> may be deployed at a data center. In another example, a branch office appliance <b>200</b> may be deployed on a subnet or network segment of a corporate LAN <b>104</b>. In another embodiment, a branch office appliance <b>200</b>A may be deployed on a first corporate LAN and a second branch office appliance <b>200</b>B&#x2032; on a second corporate LAN. In some embodiments, a branch office appliance <b>200</b> may be deployed on the same network <b>104</b>, <b>104</b>&#x2032; as an aggregator appliance <b>400</b>. So, although the appliance <b>200</b> is described in <figref idref="DRAWINGS">FIG. 4A</figref> as a branch office appliance <b>200</b>, it is not limited to operations only at a branch office <b>405</b>.</p>
<p id="p-0109" num="0108">The aggregator appliance <b>400</b> comprises software, hardware or any combination of software and hardware. In one embodiment, the aggregator appliance <b>400</b> comprises logic, functions or operations, such as via the aggregator <b>450</b>, to determine, collect and aggregates information <b>410</b> about one or more branch office appliances <b>200</b>. For example, the information <b>410</b> may comprise information on the status, load or performance of a branch office appliance <b>200</b>. In one embodiment, the aggregator <b>450</b> comprises an application, process, service, task or set of executable instructions. The aggregator <b>450</b> comprises any type, form and combination of data structures, objects, files and/or databases for receiving and storing information <b>410</b> about any of the branch office appliances <b>200</b>. In some embodiments, the aggregator <b>450</b> stores the information <b>410</b> in an organized or arranged manner associated with or identified by a name or identifier of the branch office appliance <b>200</b>. For example, the information <b>410</b> may be indexed via an identifier of the appliance <b>200</b>. In some embodiments, the aggregator <b>450</b> stores or associates temporal data with the information <b>410</b>, such as time of recording or time related to an event.</p>
<p id="p-0110" num="0109">In one embodiment, the aggregator appliance <b>400</b> and/or aggregator <b>450</b> receive information <b>410</b> from the branch office appliance via a connection. In some embodiments, the aggregator appliance <b>400</b> and a branch office appliance <b>200</b> establish or communicate via a transport layer connection, such as a TCP or UDP connection. In other embodiments, the aggregator appliance <b>400</b> and branch office appliance <b>200</b> maintain a connection. In other embodiments, the aggregator appliance <b>400</b> and branch office appliance <b>200</b> establish a connection on an as needed basis, e.g., connect and reconnect when they need to communicate.</p>
<p id="p-0111" num="0110">In some embodiments, the aggregator appliance <b>400</b> establishes a connection or communicates with a predetermined number of branch office appliances <b>200</b>. In other embodiments, the aggregator appliance <b>400</b> collects and aggregates information on a predetermined number of branch office appliances <b>200</b>. In one embodiment, the predetermined number of branch offices is 31. In another embodiments, the predetermined number of branch offices is 32. In yet other embodiments, the predetermined number of branch offices is 16, 48, 60, 96, 128 or 256. In a further embodiment, the predetermined number of branch offices is 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200 or 250. The number of branch offices an aggregator appliance <b>400</b> may connect to or collect information from may depend on the operational or performance characteristics of the networks <b>104</b>, <b>104</b>&#x2032;, the appliance <b>200</b>, the branch offices <b>405</b>, and branch office networks <b>104</b> along with the applications, data, and resource usage of the users across branch offices. In some embodiments, the predetermined number of branch office appliance <b>200</b> may not be set or configured, or otherwise limited only by the memory, capacity and performance of the aggregator appliance <b>400</b>.</p>
<p id="p-0112" num="0111">In another embodiment, the aggregator appliance <b>400</b> requests information <b>410</b> from each of the branch office appliance <b>200</b> it is connected to. In some embodiments, the aggregator appliance <b>400</b> requests information upon establishment of the connection to the branch office appliance <b>200</b>. In another embodiment, the aggregator appliance <b>400</b> requests information <b>410</b> from the branch office appliance <b>200</b> on a predetermined frequency, such as every 1 sec, or 1 msec. For example, the aggregator appliance <b>400</b> may poll each of its branch office appliances <b>200</b>A-<b>200</b>N every 1 sec for information <b>410</b>. In some embodiments, the aggregator appliance <b>400</b> requests information <b>410</b> from the branch office appliance <b>200</b> over a predetermined time period, such as every 1 sec for an hour. In yet another embodiment, the aggregator appliance <b>400</b> requests information <b>410</b> from a branch office appliance <b>200</b> upon an event, such as receiving a request from a client <b>102</b>, or receiving a DNS request.</p>
<p id="p-0113" num="0112">The information <b>410</b> may comprise any type and form of data, statistics, status or information related to or associated with the operational and/or performance characteristics of the branch office appliance <b>200</b>, the network <b>104</b> of the branch office appliance <b>200</b>, and/or any connection to the branch office appliance <b>200</b>, such as via a client <b>102</b>, server <b>106</b> or the aggregator appliance <b>400</b>. In some embodiments, the information <b>410</b> comprises operational and/or performance data on any client <b>102</b> and/or server <b>106</b> connected to the branch office appliance <b>200</b>. In one embodiment, the branch office appliance <b>200</b> determines operational and/or performance information about any client <b>102</b> or server <b>106</b> it is connected to or servicing, and creates information <b>410</b> on these clients <b>102</b> and/or server <b>106</b>. In this embodiment, the branch office appliance <b>200</b> may provide this information <b>410</b> to the aggregator appliance <b>400</b>.</p>
<p id="p-0114" num="0113">In some embodiments, the operational and/or performance characteristic information <b>410</b> includes information on any of the following for a branch office appliance <b>200</b>, client <b>102</b> or server: 1) load; 2) numbers and types of connections, 3) resource usage, 4) resource availability, 5) number of requests outstanding, 6) number of requests transmitted, 7) number of clients servicing, 8) response time information, including average and historical response times, 9) errors, status, performance or bandwidth of a connection, and 10) number of sessions, and states or status thereof. In another embodiment, the information <b>410</b> includes information on any IP or network layer information of the appliance <b>200</b>, or the connections of the appliance <b>200</b>, or of the clients and/or servers serviced by the appliance <b>200</b>. For example, the information <b>410</b> may include a routing table of the appliance <b>200</b> for performing network address translation, such as for an SSL VPN connection.</p>
<p id="p-0115" num="0114">Each of the aggregator appliances <b>400</b>A-<b>400</b>B may share or otherwise communicate the aggregated information <b>410</b> with the other aggregator appliance. The first aggregator appliance <b>400</b>A establishes a connection, such as a TCP or UDP transport layer connection with the second aggregator appliance <b>400</b>B. In one embodiment, the second aggregator appliance <b>400</b>B uses this connection. In another embodiment, the second aggregator appliance <b>400</b>B establishes a connection, such as a TCP or UDP transport layer connection, to the first aggregator appliance <b>400</b>A. In one embodiment, the aggregator appliances <b>400</b>A-<b>400</b>B may establish a connection or communication channel with each other upon bootup or startup. In other embodiments, the aggregator appliances <b>400</b>A-<b>400</b>B may establish connections upon a configuration change or event. In another embodiment, the aggregator appliances <b>400</b>A-<b>400</b>B may send out a broadcast on the network <b>104</b> to determine the existence or availability of another aggregator appliance <b>400</b>.</p>
<p id="p-0116" num="0115">In one embodiment, the first aggregator appliance <b>400</b>A transmits its information <b>410</b>A to the second aggregator appliance <b>400</b>B. The second aggregator appliance <b>400</b>B stores the received information <b>410</b>A as information <b>410</b>A&#x2032; as illustrated in <figref idref="DRAWINGS">FIG. 4A</figref>. In some embodiments, information <b>410</b>A&#x2032; is aggregated or combined with information <b>410</b>A. In other embodiments, information <b>410</b>A&#x2032; is associated with information <b>410</b>A. In another embodiment, the second aggregator appliance <b>400</b>B transmits its information <b>410</b>B to the first aggregator appliance <b>400</b>A. The first aggregator appliance <b>400</b>A stores the received information <b>410</b>B as information <b>410</b>B&#x2032; as illustrated in <figref idref="DRAWINGS">FIG. 4A</figref>. In some embodiments, information <b>410</b>B&#x2032; is aggregated or combined with information <b>410</b>B. In other embodiments, information <b>410</b>B&#x2032; is associated with information <b>410</b>B. The first and second aggregator appliances <b>400</b>A-<b>400</b>B may exchange or provide information <b>410</b>A and <b>410</b>B once, or on a predetermined frequency, such as every 1 msec or 1 sec. In some embodiments, the first and second aggregator appliances <b>400</b>A-<b>400</b>B use a request/reply messaging mechanism or protocol to transmit information <b>410</b>A-<b>410</b>B to each other. In other embodiments, the first and second aggregator appliances <b>400</b>A-<b>400</b>B have a custom or proprietary exchange protocol for exchanging information <b>410</b>A-<b>410</b>B about branch office appliances <b>200</b>A-<b>200</b>N&#x2032;.</p>
<p id="p-0117" num="0116">By exchanging information <b>410</b>A-<b>410</b>B, each of the first aggregator appliance <b>400</b>A and second aggregator appliance <b>400</b>B have information <b>410</b>A and <b>410</b>B on both the first set of one or more branch office appliances <b>200</b>A-<b>200</b>N and the second set of one or more branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. Although the first aggregator appliance <b>400</b>A is collecting, aggregating and monitoring information <b>410</b>A about the branch office appliances <b>200</b>A-<b>200</b>N, the first aggregator appliance <b>400</b>A obtains information <b>410</b>B about the branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; collected, aggregated and monitored by the second aggregator appliance <b>400</b>B. Likewise, although the second aggregator appliance <b>400</b>B is collecting, aggregating and monitoring information <b>410</b>B about the branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;, the second aggregator appliance <b>400</b>B obtains information <b>410</b>A about the branch office appliances <b>200</b>A-<b>200</b>N collected, aggregated and monitored by the first aggregator appliance <b>400</b>A.</p>
<p id="p-0118" num="0117">With the aggregator appliances <b>400</b>A-<b>400</b>B, a first branch office appliance <b>200</b>A, in one embodiment, need only know the identity or internet protocol information of the first aggregator appliance <b>400</b>A, but obtains the identify other branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; via the aggregator appliance <b>400</b>A. For example, upon receiving a request from a client for a resource, the first branch office appliance <b>200</b>A may forward the request to the aggregator appliance <b>400</b><i>a</i>. In response, the aggregator appliance <b>400</b>A may transmit the identity of a branch office appliance <b>200</b>A&#x2032;-<b>200</b>N&#x2032; monitored by aggregator appliance <b>400</b>B in order to service the request. In some embodiments, this simplifies the configuration of each or any of the branch office appliances <b>200</b>, yet, at the same time, allows any branch office appliance <b>200</b>A-<b>200</b>N to access the services of or connect to a resource via another branch office appliance <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. In this way, clients can access resources across any of the branch offices <b>405</b>A-<b>405</b>N via any of the branch office appliances <b>200</b>A-<b>200</b>N&#x2032; using the information <b>410</b>A-<b>410</b>B collected via the aggregator appliances <b>400</b>A-<b>400</b>B. In other embodiments, a client <b>102</b> can connect directly to any of the aggregators <b>400</b>A-<b>400</b>N and get load balanced to any of the branch office appliances <b>200</b>.</p>
<p id="p-0119" num="0118">The aggregator appliances <b>400</b>A-<b>400</b>B comprises load-balancing/switching <b>284</b> functionality, operations and/or logic for determining and providing load-balancing services to any of the branch office appliances <b>200</b>, clients <b>102</b> of the branch offices <b>405</b>, or servers <b>106</b> accessed via the branch offices <b>405</b> or branch office appliances <b>200</b>. Using the information <b>410</b>A and <b>410</b>B&#x2032;, in one embodiment, the first aggregator appliance <b>400</b>A can determine a branch office appliance <b>200</b> from any of the branch office appliances <b>200</b>A-<b>200</b>N&#x2032; to service a request from a client <b>102</b>. Using the information <b>410</b>A&#x2032; and <b>410</b>B, in another embodiment, the first second appliance <b>400</b>B can determine a branch office appliance <b>200</b> from any of the branch office appliances <b>200</b>A-<b>200</b>N&#x2032; to service a request from a client <b>102</b>. Additionally, the aggregator appliances <b>400</b>A-<b>400</b>N can use information <b>410</b>A, <b>410</b>N to determine a resource, such as server <b>106</b>, access via a branch office appliance <b>200</b> to service a request. In this manner and in some embodiments, the aggregator appliances <b>400</b>A-<b>440</b>N provide load-balancing and switching information for the aggregation of all resources and branch office appliances <b>200</b>A-<b>200</b>N across all the branch office <b>405</b>A-<b>405</b>N&#x2032;.</p>
<p id="p-0120" num="0119">The aggregator appliance <b>400</b>, in some embodiments, comprises any of the functionality, operations or services of a branch office appliance <b>200</b>. For example, in addition to the load balancing <b>284</b> and aggregation operations of the aggregator appliance <b>400</b> described herein, the aggregator appliance may perform acceleration, SSL VPN or application firewall functionality. The first aggregator appliance <b>400</b>A and the second aggregator appliance <b>400</b>B may be deployed on the same network <b>104</b> and/or different networks <b>104</b>, <b>104</b>&#x2032;. In some embodiments, additional aggregator appliances <b>400</b> may be deployed to scale up to service a plurality of branch offices <b>405</b> and branch office appliances <b>200</b>.</p>
<p id="p-0121" num="0120">Referring now to <figref idref="DRAWINGS">FIG. 4B</figref>, another embodiment of a deployment of multiple aggregator appliances is depicted. In brief overview, a plurality of aggregator appliances <b>400</b>A, <b>400</b>B and <b>400</b>N are deployed to provide aggregation and/or load-balancing services to a plurality of branch offices: branch offices <b>1</b>-<b>31</b> <b>405</b>A-<b>405</b>N, branch offices <b>32</b>-<b>63</b> <b>405</b>A&#x2032;-<b>405</b>N, and branch offices <b>64</b>-N <b>405</b>A&#x2033;-<b>405</b>N&#x2033;. The first aggregator appliance <b>400</b>A is connected to and obtains information <b>410</b> on a first set of one or more branch office appliances <b>405</b>A-<b>405</b>N. The second aggregator appliance <b>400</b>B is connected to and obtains information <b>410</b> on a second set of one or more branch office appliances <b>405</b>A&#x2032;-<b>405</b>N&#x2032;. The third aggregator appliance <b>400</b>N is connected to and obtains information <b>410</b> on a third set of one or more branch office appliances <b>405</b>A&#x2033;-<b>405</b>N&#x2033;.</p>
<p id="p-0122" num="0121">Each of the aggregator appliances <b>400</b>A-<b>400</b>N can exchange information <b>410</b> with each other to identify, learn about and obtain information <b>410</b> on other branch office appliances <b>200</b>A-<b>220</b>N, <b>200</b>A&#x2032;-<b>200</b>N&#x2032; and <b>200</b>A&#x2033;-<b>200</b>N&#x2033;&#x2033;. In one embodiment, the first aggregator appliance <b>400</b>A establishes a connection with the second aggregator appliance <b>400</b>B and third aggregator appliance <b>400</b>N. In another embodiment, the second aggregator appliance <b>400</b>B establishes a connection with the first aggregator appliance <b>400</b>A and third aggregator appliance <b>400</b>N. In yet another embodiment, the third aggregator appliance <b>400</b>N establishes a connection with the second aggregator appliance <b>400</b>B and first aggregator appliance <b>400</b>A. Through any of these connections, the aggregator appliances <b>400</b> can ask, receive, transmit, or otherwise obtain information <b>410</b> on a set of one or more branch office appliances <b>200</b> to which it may not be currently connected.</p>
<p id="p-0123" num="0122">In some embodiments, each of the aggregator appliances <b>400</b> may be connected to, obtain and monitor information <b>410</b> on a number of branch office appliances <b>200</b> different than another aggregator appliance <b>400</b>. For example, the first aggregator appliance <b>400</b>A may monitor and obtain information <b>410</b> on 2, 3, 4, 5 or 10 appliances <b>200</b> while the second aggregator appliance <b>200</b> monitors and obtains information <b>410</b> on 20, 30 or 31 appliances <b>200</b>. Further to the example, the third aggregator appliance <b>400</b>C may monitor and obtain information <b>410</b> on a single branch office appliance <b>200</b> or any number of branch office appliances <b>200</b>. Although the deployment illustrated in <figref idref="DRAWINGS">FIG. 4B</figref> depicts three aggregator appliances <b>400</b>A-<b>400</b>N servicing three sets of multiple branch offices, any number of aggregator appliances <b>400</b> may be deployed to service any number of branch offices <b>405</b>.</p>
<p id="p-0124" num="0123">In one embodiment, an aggregator appliance, such as aggregator appliance <b>400</b>N&#x2032;, depicted with dotted connected lines in <figref idref="DRAWINGS">FIG. 4B</figref> may be used as a master aggregator node or appliance <b>400</b>. For example, in some embodiments, the master aggregator appliance <b>400</b>N&#x2032; may not collect information <b>410</b> from branch office appliances <b>200</b> directly, but instead aggregates the information <b>410</b> from the other aggregator appliances <b>400</b>A-<b>400</b>N that collected such information. In some embodiments, the master aggregator appliance <b>400</b>N acts as a backup service to any of the other aggregator appliances <b>400</b>. For example, in one case, if an aggregator appliance <b>400</b>A went down or was rebooted, upon startup the aggregator appliance <b>400</b>A can obtain the latest saved information <b>410</b> from the master aggregator appliance <b>400</b>N&#x2032;. In other embodiments, each of the aggregator appliance <b>400</b>A-<b>400</b>N establish a connection with the master aggregator appliance <b>400</b>N&#x2032; to provide or update the information <b>410</b> on the master aggregator appliance <b>400</b>N&#x2032; and/or to also obtain information <b>410</b> from the other appliances <b>400</b> it may not yet have.</p>
<p id="p-0125" num="0124">With the deployment architecture illustrated in <figref idref="DRAWINGS">FIG. 4B</figref>, in some embodiments, any number of aggregator appliances <b>400</b> can be deployed to scale load-balancing and aggregation services to any number of branch offices <b>405</b>. As the number of branch offices <b>405</b> and/or branch office appliances <b>200</b> increases, the configuration of a branch office appliance <b>200</b> remains relatively simple in that it needs only to be configured to know of an existing aggregator appliance <b>400</b>A or a newly deployed aggregator appliance <b>400</b>N. Through the aggregation and exchanging of information <b>410</b> among the aggregation appliances <b>200</b>, any client or branch office appliance <b>200</b> can access resources across any of the branch offices <b>405</b>.</p>
<p id="p-0126" num="0125">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, steps of an embodiment of a method <b>500</b> for practicing aggregations and load-balancing via the aggregation appliances <b>400</b> is depicted. In brief overview, at step <b>505</b>, a first aggregator appliance <b>405</b>A establishes connections with and obtains information <b>410</b>A on a first plurality of branch office appliances <b>200</b>A-<b>200</b>N. At step <b>510</b>, a second aggregator appliance <b>410</b>A establishes connections with and obtains information <b>410</b>B a second plurality of branch offices <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. One or more of the first set of branch office appliances <b>200</b>A-<b>200</b>N may not have any information or be configured to identify any of the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. At step <b>515</b>, the first and second aggregator appliances <b>400</b>A-<b>400</b>B establish a connection or communication between each other. At step <b>520</b>, the first and second aggregator appliances <b>400</b>A-<b>400</b>N exchange identification, operational and performance information <b>410</b> about the first and second set of branch office appliances <b>200</b>. At step <b>525</b>, a first aggregator appliance <b>400</b>A receives a request from a client <b>102</b> to access a resource. For example, a first branch office appliance <b>200</b>A may transmit the request to the first aggregator appliance <b>400</b>A, such a for client <b>102</b><i>a </i>depicted in <figref idref="DRAWINGS">FIG. 4A</figref>. In another example, a client <b>102</b> may transmit the request to an aggregator appliance <b>400</b>A, such as clients <b>102</b><i>b </i>and <b>102</b><i>n </i>as illustrated in <figref idref="DRAWINGS">FIG. 4A</figref>. At step <b>530</b>, the first aggregator appliance selects via information <b>410</b> received from the second aggregator appliance <b>400</b>B a second branch office appliance <b>200</b>A&#x2032; from the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; to service the request. At step <b>540</b>, the first aggregator appliance <b>200</b> transmits the information on the selected second branch office appliance <b>200</b>A&#x2032; to the client <b>102</b>, directly or via a first branch office appliance <b>200</b>A servicing the client <b>102</b>. At step <b>545</b>, the client <b>102</b> establishes a connection with the second branch office appliance <b>200</b>A&#x2032;, directly or via the first branch office appliance <b>200</b>A.</p>
<p id="p-0127" num="0126">In further detail, at step <b>505</b>, a first aggregator appliance <b>200</b>A establishes any type and form of connection to one or more branch office appliances <b>200</b>A-<b>200</b>N. In one embodiment, the first aggregator appliance <b>200</b>A established a transport layer connection, such as TCP or UDP, to the branch office appliances <b>200</b>A-<b>200</b>N. In one embodiment, any of the branch office appliances <b>200</b>A-<b>200</b>N requests the connection to the aggregator appliance <b>400</b>A. In another embodiment, the aggregator appliance <b>400</b>A requests the connection to any of the branch office appliance <b>200</b>A-<b>200</b>N. In some embodiments, any of the branch office appliances <b>200</b>A-<b>200</b>N may have a transport layer connection to one or more clients <b>102</b>, such as with a client agent <b>120</b>. In another embodiment, any of the branch office appliances <b>200</b>A-<b>200</b>N may have a transport layer connection to one or more servers <b>106</b>, such as with a service <b>270</b>.</p>
<p id="p-0128" num="0127">The first aggregator appliance <b>400</b>A may obtain information <b>410</b> about any of the first set of branch office appliances <b>200</b>A-<b>200</b>N via any of its connections to these appliances. In one embodiment, the first aggregator appliance <b>400</b>A obtains information <b>410</b> from a branch office appliance <b>200</b> upon establishment of the connection. In another embodiment, the first aggregator appliance <b>400</b>A obtains information <b>410</b> from a branch office appliance <b>200</b> upon a predetermined frequency, such as polling every 1 msec or 1 sec. In some embodiments, the first aggregator appliance <b>400</b>A obtains information <b>410</b> from a branch office appliance <b>200</b> via a request/reply mechanism. In yet another embodiment, a branch office appliance <b>200</b> transmits the information <b>410</b> to the aggregator appliance <b>400</b>A upon startup or on a predetermined frequency, such as pushing the information to the aggregator <b>400</b> every 1 msec or 1 sec.</p>
<p id="p-0129" num="0128">Likewise to step <b>505</b>, at step <b>510</b>, the second aggregator appliance <b>400</b>B establishes a connection, such as a transport layer connection, to a second set of one or more branch offices appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. The second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; may have transport layer connections to one or more clients <b>102</b> and/or servers <b>106</b>. The second aggregator appliance <b>400</b>B may obtain information <b>410</b> about any of the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; via any of its connections to these appliances. The second aggregator appliance <b>400</b>B may receive, request or obtain information <b>410</b> at any time or frequency.</p>
<p id="p-0130" num="0129">Although the first aggregator appliance <b>400</b>A has information <b>410</b>A on the first set of branch office appliances <b>200</b>A-<b>200</b>N and the second aggregator appliance <b>400</b>B has information <b>410</b>B on the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;, the first aggregator appliance <b>400</b>A may not know the identification of or have information on any of the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. Likewise, the second aggregator appliance <b>400</b>B may not know the identification or have information on any of the firs set of branch office appliances <b>200</b>A-<b>200</b>N. In some embodiments, a first branch office appliance <b>200</b>A of the first set of branch office appliances <b>200</b>A-<b>200</b>N does not know the identification of or have information on any of the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. In other embodiments, a second branch office appliance <b>200</b>A&#x2032; of the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032; does not know the identification of or have information on any of the second set of branch office appliances <b>200</b>A-<b>200</b>N.</p>
<p id="p-0131" num="0130">At step <b>515</b>, the first aggregator appliance <b>400</b>A and the second aggregator appliance <b>400</b>B establish communications, such as via a transport layer connection, for example, TCP or UDP. In some embodiments, the first aggregator appliance <b>400</b>A and second aggregator appliance <b>400</b>B establish one connection between each other for communications. In other embodiments, the first aggregator appliance <b>400</b>A establishes a connection with the second aggregator appliance <b>400</b>B, and the second aggregator appliance <b>400</b>B establishes a connection with the first aggregator appliance <b>400</b>A.</p>
<p id="p-0132" num="0131">At step <b>520</b>, the aggregator appliances <b>400</b>A and <b>400</b>B may exchange information <b>410</b> on a periodic basis, such as a frequency of every 1 sec or 1 msec. In some embodiments, an aggregator appliance <b>400</b>A transmits information <b>410</b> to another aggregator appliance <b>400</b>B upon receipt of such information <b>410</b> from a branch office appliance <b>200</b>. In one embodiment, the aggregator appliances <b>400</b>A and <b>400</b>B exchange or receive information <b>410</b> from a master aggregator appliance <b>400</b>N&#x2032;. By the exchange or receipt of information <b>410</b>, each aggregator appliance <b>400</b>A-<b>400</b>B has information <b>410</b>A, <b>410</b>B on each of the sets of branch office appliances. Although the first aggregator appliance <b>400</b>A is connected to the first set of branch office appliances <b>200</b>A-<b>200</b>N, the first aggregator appliance <b>400</b>A has also obtained information <b>410</b>B&#x2032; on the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. Likewise, although the second aggregator appliance <b>400</b>B is connected to the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;, the second aggregator appliance <b>400</b>B has also obtained information <b>410</b>A&#x2032; on the first set of branch office appliances <b>200</b>&#x2032;-<b>200</b>N. With both sets of information <b>410</b>A, <b>410</b>B, an aggregator appliance <b>400</b> can make switching and load-balancing decisions to access resources across all of the branch office appliances <b>200</b> and branch office <b>405</b>.</p>
<p id="p-0133" num="0132">At step <b>525</b>, one of the aggregator appliances <b>400</b> received a request from a client to access a resource. In one embodiment, the client <b>102</b> transmits the request to the aggregator appliance <b>400</b>. In another embodiment, a branch office appliance <b>200</b> transmits the request on behalf of the client <b>102</b> to the aggregator appliance <b>400</b>. In yet another embodiment, another aggregator appliance <b>400</b>B may transmit the request to the aggregator appliance <b>400</b>A. In some embodiments, the request comprises a connect request, such as a TCP or UDP connection request or a VPN request. In other embodiments, the request comprises a session request, such as an SSL or TLS session or an application session such as to a hosted service. In another embodiment, the request comprises a Domain Name Service (DNS) request, such as to resolve a domain name. In one embodiment, the request comprises a request to execute an application, such as via the application delivery system <b>500</b>. In other embodiments, the request comprises an authentication or authorization request. In yet another embodiment, the request comprises a request to receive a portion of a computing environment <b>15</b>, such as an application, or portion thereof, or a data file.</p>
<p id="p-0134" num="0133">At step <b>535</b>, in response to receipt of the request, the aggregator appliance <b>400</b> determines, identifies and selects a branch office appliance <b>200</b> to service the request. The aggregator appliance <b>400</b> uses any of the information <b>410</b>A, <b>410</b>B to determine a branch office appliance <b>200</b> suitable to service the request. In one embodiment, the aggregator appliance <b>400</b> uses the information <b>410</b> to determine, identify and select a server <b>106</b> access or serviced by a branch office appliance <b>200</b>. In some embodiments, the aggregator appliance <b>400</b> analyzes or processes any of the operational and/or performance characteristics of the information <b>410</b> to determine an appliance <b>200</b> suitable for the request. In other embodiments, the aggregator appliance <b>400</b> may maintain persistence between a client <b>102</b> and a branch office appliance <b>200</b>. For example, the aggregator appliance <b>400</b> may assign a client <b>102</b> to a branch office appliance <b>200</b> that is currently servicing the client <b>102</b>, recently serviced the client <b>102</b> or has previously serviced the client <b>102</b>.</p>
<p id="p-0135" num="0134">In some embodiments, the first aggregator appliance <b>400</b>A identifies and selects a second branch office appliance <b>200</b>A&#x2032; from the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;. In one embodiment, the first aggregator appliance <b>400</b>A identifies and selects a first branch office appliance <b>200</b>A from the first set of branch office appliances <b>200</b>A-<b>200</b>N. In other embodiments, the second aggregator appliance <b>400</b>B identifies and selects a first branch office appliance <b>200</b>A from the first set of branch office appliances <b>200</b>A-<b>200</b>N. In yet another embodiment, the second aggregator appliance <b>400</b>B identifies and selects a second branch office appliance <b>200</b>A&#x2032; from the second set of branch office appliances <b>200</b>A&#x2032;-<b>200</b>N&#x2032;.</p>
<p id="p-0136" num="0135">At step <b>540</b>, the aggregator appliance <b>400</b> in response to the client request, transmits information about the selected branch office appliance <b>200</b> to the client <b>102</b> or the appliance <b>200</b> servicing the client <b>102</b>. In one embodiment, the aggregator appliance <b>400</b> transmits the identification or selection of the appliance <b>200</b> directly to the client <b>102</b>, such as to client agent <b>120</b>. In another embodiment, the aggregator appliance <b>400</b> transmits the identification or selection of the appliance <b>200</b> to the branch office appliance <b>2</b>&#x2014;. In some embodiments, the aggregator appliance <b>400</b> identifies to the client <b>102</b> or branch office appliance the IP address or domain name, or other IP layer information, of the selected branch office appliance <b>200</b>. In other embodiments, the aggregator appliance <b>400</b> identifies to the client <b>102</b> or branch office appliance <b>200</b> information to connect to the selected branch office appliance <b>200</b>.</p>
<p id="p-0137" num="0136">At step <b>545</b>, the client <b>102</b> establishes a connection with the branch office appliance <b>200</b> selected or identified by the aggregator appliance <b>400</b>. In some embodiments, the client <b>102</b>, such a via client agent <b>120</b>, establishes a transport layer connection, for example, a TCP or UDP with the selected branch office appliance <b>200</b>. In other embodiments, the branch office appliance <b>200</b> connected to the client <b>102</b> establishes a transport layer connection to the selected branch office appliance, for example, on behalf of the client <b>102</b>. In some embodiments, the client <b>102</b> establishes an SSL VPN connection with the selected branch office appliance <b>200</b>. In some embodiments, the selected branch office appliance <b>200</b> provides or establishes connections to one or more servers <b>106</b>. For example, the branch office appliance <b>200</b> may have pooled transport layer connections to the servers <b>106</b> over which client requests are multiplexed. In yet other embodiments, the selected branch office appliance <b>200</b> may provide additional load-balancing/switching functionality <b>284</b> for the client <b>102</b>. In another embodiments, the selected branch office appliance <b>200</b> provides acceleration or application firewall services to the client <b>102</b>.</p>
<p id="p-0138" num="0137">Although an embodiment of the method <b>500</b> is generally described above in connection with a client <b>102</b> accessing the resource from a branch office <b>405</b> and/or branch office appliance <b>200</b>, the method <b>500</b> may be practiced with any client <b>102</b> accessing the aggregator appliances <b>400</b> from any location. For example, as illustrated in <figref idref="DRAWINGS">FIG. 4A</figref>, clients <b>102</b><i>b </i>and <b>102</b><i>n </i>may access an aggregator appliance <b>400</b> without first accessing a branch office appliance <b>200</b>. In one embodiment, a client <b>102</b><i>b </i>or <b>102</b><i>n </i>may be on the Internet and connect to an aggregator appliance <b>200</b>. In other embodiments, the client <b>102</b> or <b>102</b><i>n </i>may be on the same network <b>104</b>, such as a LAN, as the aggregator appliance <b>400</b>A-<b>400</b>N. The aggregator appliance <b>400</b> can load-balance the client's request and direct the client <b>102</b><i>b</i>-<b>102</b><i>n </i>to a selected branch office appliance <b>200</b>.</p>
<p id="p-0139" num="0138">In view of the structure, functions and operations of the aggregator appliances described herein, the aggregator appliances provide for reduced configuration of branch office appliances while also providing a scalable, hierarchical deployment of branch office appliances. By exchanging branch office appliance information among aggregator appliances deployed in a hierarchical fashion, any of the aggregator appliances can make load-balancing and switching decisions to access any of the branch office appliances, or any resources provided via branch office appliances. Although a branch office appliance may be configured to communicate with or know of an aggregator appliance, the branch office appliance may learn of or obtain information of other branch office resources via the aggregation and load-balancing techniques discussed herein. The aggregator appliances globally load-balance resource requests of any client from any location across all branch offices and branch office appliances.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for providing a hierarchy of appliances to more efficiently access resources across a plurality of branch offices, the method comprising:
<claim-text>(a) establishing, by a first aggregator appliance, connections with a first plurality of branch office appliances, each of the first plurality of branch office appliances providing access via one or more connections to one or more services of a first plurality of servers to a first plurality of client devices in a first branch office;</claim-text>
<claim-text>(b) establishing, by a second aggregator appliance, connections with a second plurality of branch office appliances, each of the second plurality of branch office appliances providing access via one or more connections to one or more services of a second plurality of servers to a second plurality of client devices in a second branch office, the first plurality of branch office appliances not having information identifying the second plurality of branch office appliances;</claim-text>
<claim-text>(c) establishing a connection between the first aggregator appliance and the second aggregator appliance to exchange aggregated information about branch office appliances not connected to an aggregator appliance receiving the information, the first aggregator appliance receiving from the second aggregator appliance aggregated information about operation of the second plurality of branch office appliances collected by the second aggregator appliance;</claim-text>
<claim-text>(d) receiving, by the first aggregator appliance, from a first branch office appliance of the first plurality of branch offices appliances a request from a client device for access to a resource;</claim-text>
<claim-text>(e) identifying, by the first aggregator appliance via the aggregated information from the second aggregator appliance, a second branch office appliance from the second plurality of branch office appliances to service the request;</claim-text>
<claim-text>(f) transmitting, by the first aggregator appliance, to the first branch office appliance information identifying the second branch office appliance; and</claim-text>
<claim-text>(g) establishing, by the client device, a connection with the second branch office appliance.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (f) further comprises transmitting, by the first branch office appliance, information identifying the second branch office appliance to the client device.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising establishing, by the client device via the first branch office appliance, a second connection via the second branch office appliance with a server.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, comprising communicating, by the first aggregator appliance, information about the first plurality of branch office appliances to the second aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, comprising communicating, by the second aggregator appliance, information about the second plurality of branch office appliances to the first aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising establishing, by the first aggregator appliance, communications with the second aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, determining, by the first aggregator appliance, information on one of performance or operational characteristics for each of the first plurality of branch office appliances.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein step (e) comprising selecting, by the first aggregator appliance, the second branch office appliance based on one of the performance or operational characteristics.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, determining, by the second aggregator appliance, one of performance or operational characteristics of each of the second plurality of branch office appliances.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising accelerating, by one of the first office branch office appliance or the second branch office appliance, communications between the client device and the server.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein accelerating comprises using one or more of the following techniques: compression; TCP connection pooling; TCP connection multiplexing; TCP buffering; and caching.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one of the first aggregator appliance or the second aggregator appliance is deployed at a data center.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client device is deployed at the first branch office.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A system for providing a hierarchy of appliances to more efficiently access resources across a plurality of branch offices, the system comprising:
<claim-text>a first aggregator appliance establishing connections with a first plurality of branch office appliances, each of the first plurality of branch office appliances providing access via one or more connections to one or more services of a first plurality of servers to a first plurality of client devices in a first branch office;</claim-text>
<claim-text>a second aggregator appliance establishing connections with a second plurality of branch office appliances, each of the second plurality of branch office appliances providing access via one or more connections to one or more services of second plurality of servers to a second plurality of client devices in a second branch office, the first plurality of branch office appliances not having information identifying the second plurality of branch office appliances; and
<claim-text>wherein a connection is established between the first aggregator appliance and the second aggregator appliance to exchange aggregated information about branch office appliances not connected to an aggregator appliance receiving the information, the first aggregator appliance receiving from the second aggregator appliance aggregated information about operation of the second plurality of branch office appliances collected by the second aggregator appliance; and</claim-text>
</claim-text>
<claim-text>a first branch office appliance of the first plurality of branch offices transmitting to the first aggregator appliance a request from a client device for access to a resource;</claim-text>
<claim-text>wherein the first aggregator appliance identifies via the second aggregator appliance, a second branch office appliance from the second plurality of branch office appliances to service the request, and transmitting to the first branch office appliance information identifying the second branch office appliance; and</claim-text>
<claim-text>the client device establishes a connection with the second branch office appliance.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the first branch office appliance transmits information identifying the second branch office appliance to the client device.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the client device establishes via the first branch office appliance a second connection via the second branch office appliance with a server.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the first aggregator appliance establishes communications with the second aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the first aggregator appliance communicates information about the first plurality of branch office appliances to the second aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the second aggregator appliance communicates information about the second plurality of branch office appliances to the first aggregator appliance.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the first aggregator appliance determines information on one of performance or operational characteristics for each of the first plurality of branch office appliances.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the second aggregator appliance determines one of performance or operational characteristics of each of the second plurality of branch office appliances.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the first aggregator appliance selects the second branch office appliance based on one of the performance or operational characteristics.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein one of the first office branch office appliance or the second branch office appliance accelerates communications between the client device and a server.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein accelerating comprises using one or more of the following techniques: compression; TCP connection pooling; TCP connection multiplexing; TCP buffering; and caching.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein one of the first aggregator appliance or the second aggregator appliance is deployed at a data center.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A method for providing a hierarchy of aggregator appliances and branch office appliances to more efficiently access resources on servers across branch offices, the method comprising the steps of:
<claim-text>(a) establishing, by a first aggregator appliance, a first connection with a first branch office appliance, the first branch office appliance intermediary to the first aggregator appliance, a first plurality of client devices, and a first plurality of servers;</claim-text>
<claim-text>(b) establishing, by a second aggregator appliance, a second connection with a second branch office appliance, the second branch office appliance intermediary to the second aggregator appliance, a second plurality of client devices, and a second plurality of servers, the first branch office appliance lacking information identifying the second branch office appliance;</claim-text>
<claim-text>(c) establishing a connection between the first aggregator appliance and the second aggregator appliance to exchange aggregated information about branch office appliances not connected to an aggregator appliance receiving the information, the first aggregator appliance receiving from the second aggregator appliance aggregated information about operation of the second plurality of branch office appliances collected by the second aggregator appliance;</claim-text>
<claim-text>(d) transmitting, by the second branch office appliance, to the second aggregator appliance aggregated information about the second branch office appliance created from information received from the second plurality of servers;</claim-text>
<claim-text>(e) receiving, by the first aggregator appliance, via the first branch office appliance a request for access to a resource from a client device of the first plurality of client devices;</claim-text>
<claim-text>(f) identifying, by the first aggregator appliance based on information about the second branch office appliance received from the second aggregator appliance, the second branch office appliance to service the request; and</claim-text>
<claim-text>(g) establishing, by the client device of the first plurality of client devices, a third connection with the second branch office appliance to access the requested resource on a server of the second plurality of servers. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

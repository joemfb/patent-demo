<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626970-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626970</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12821184</doc-number>
<date>20100623</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>385</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>5</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>12</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>38</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710 64</main-classification>
<further-classification>710 36</further-classification>
</classification-national>
<invention-title id="d2e53">Controlling access by a configuration to an adapter function</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>3976979</doc-number>
<kind>A</kind>
<name>Parkinson et al.</name>
<date>19760800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4028668</doc-number>
<kind>A</kind>
<name>Riikonen</name>
<date>19770600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4271468</doc-number>
<kind>A</kind>
<name>Christensen et al.</name>
<date>19810600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>4323963</doc-number>
<kind>A</kind>
<name>Wu</name>
<date>19820400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5053952</doc-number>
<kind>A</kind>
<name>Koopman, Jr. et al.</name>
<date>19911000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5170472</doc-number>
<kind>A</kind>
<name>Cwiakala et al.</name>
<date>19921200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5265240</doc-number>
<kind>A</kind>
<name>Galbraith et al.</name>
<date>19931100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5282274</doc-number>
<kind>A</kind>
<name>Liu</name>
<date>19940100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5430856</doc-number>
<kind>A</kind>
<name>Kinoshita</name>
<date>19950700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5465332</doc-number>
<kind>A</kind>
<name>Deloye et al.</name>
<date>19951100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5465355</doc-number>
<kind>A</kind>
<name>Cook et al.</name>
<date>19951100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5535352</doc-number>
<kind>A</kind>
<name>Bridges et al.</name>
<date>19960700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5551013</doc-number>
<kind>A</kind>
<name>Beausoleil et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5574873</doc-number>
<kind>A</kind>
<name>Davidian</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5586268</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>19961200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5600805</doc-number>
<kind>A</kind>
<name>Fredericks et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5617554</doc-number>
<kind>A</kind>
<name>Alpert et al.</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5742785</doc-number>
<kind>A</kind>
<name>Stone et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5761448</doc-number>
<kind>A</kind>
<name>Adamson et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>5790825</doc-number>
<kind>A</kind>
<name>Traut</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>5802590</doc-number>
<kind>A</kind>
<name>Draves</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>5819053</doc-number>
<kind>A</kind>
<name>Goodrum et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>5822616</doc-number>
<kind>A</kind>
<name>Hirooka</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>5826084</doc-number>
<kind>A</kind>
<name>Brooks et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>5838960</doc-number>
<kind>A</kind>
<name>Harriman, Jr.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>5870598</doc-number>
<kind>A</kind>
<name>White et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>5875343</doc-number>
<kind>A</kind>
<name>Binford et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>5875463</doc-number>
<kind>A</kind>
<name>Crump et al.</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>5901312</doc-number>
<kind>A</kind>
<name>Radko</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>5960213</doc-number>
<kind>A</kind>
<name>Wilson</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>5974440</doc-number>
<kind>A</kind>
<name>Brooks et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>5995745</doc-number>
<kind>A</kind>
<name>Yodaiken</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6009261</doc-number>
<kind>A</kind>
<name>Scalzi et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6023736</doc-number>
<kind>A</kind>
<name>Lambeth et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6067595</doc-number>
<kind>A</kind>
<name>Lindenstruth</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6078970</doc-number>
<kind>A</kind>
<name>Nordstrom et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6205530</doc-number>
<kind>B1</kind>
<name>Kang</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6308255</doc-number>
<kind>B1</kind>
<name>Gorishek, IV et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6330647</doc-number>
<kind>B1</kind>
<name>Jeddeloh et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6330656</doc-number>
<kind>B1</kind>
<name>Bealkowski et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6349380</doc-number>
<kind>B1</kind>
<name>Shahidzadeh et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6397350</doc-number>
<kind>B1</kind>
<name>Baskey et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6408347</doc-number>
<kind>B1</kind>
<name>Smith et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>6463582</doc-number>
<kind>B1</kind>
<name>Lethin et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>6493741</doc-number>
<kind>B1</kind>
<name>Emer et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>6519645</doc-number>
<kind>B2</kind>
<name>Markos et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>6529978</doc-number>
<kind>B1</kind>
<name>Eide et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>6557035</doc-number>
<kind>B1</kind>
<name>McKnight</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>6578191</doc-number>
<kind>B1</kind>
<name>Boehme et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>6581130</doc-number>
<kind>B1</kind>
<name>Brinkmann, Jr. et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>6615305</doc-number>
<kind>B1</kind>
<name>Olesen et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>6629175</doc-number>
<kind>B1</kind>
<name>Manning et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>6654818</doc-number>
<kind>B1</kind>
<name>Thurber</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>6658521</doc-number>
<kind>B1</kind>
<name>Biran et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>6704831</doc-number>
<kind>B1</kind>
<name>Avery</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>6715011</doc-number>
<kind>B1</kind>
<name>Buckland et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>6721839</doc-number>
<kind>B1</kind>
<name>Bauman et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>6772097</doc-number>
<kind>B1</kind>
<name>Kromenaker et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>6772264</doc-number>
<kind>B1</kind>
<name>Dayan et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>6792492</doc-number>
<kind>B1</kind>
<name>Griffin</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>6820164</doc-number>
<kind>B2</kind>
<name>Holm et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>6901537</doc-number>
<kind>B2</kind>
<name>Dawkins et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>6907510</doc-number>
<kind>B2</kind>
<name>Bennett et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>6963940</doc-number>
<kind>B1</kind>
<name>Glassen et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>6968446</doc-number>
<kind>B1</kind>
<name>McGrath</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>6970992</doc-number>
<kind>B2</kind>
<name>Gurumoorthy et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>6978338</doc-number>
<kind>B2</kind>
<name>Wang et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>6996638</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>7065598</doc-number>
<kind>B2</kind>
<name>Connor et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>7107384</doc-number>
<kind>B1</kind>
<name>Chen et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>7127599</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>7130938</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>7139940</doc-number>
<kind>B2</kind>
<name>Arbeitman et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>7174550</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>7177961</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>7200704</doc-number>
<kind>B2</kind>
<name>Njoku et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>7209994</doc-number>
<kind>B1</kind>
<name>Klaiber et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>7225287</doc-number>
<kind>B2</kind>
<name>Wooten</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>7260664</doc-number>
<kind>B2</kind>
<name>Arndt et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>7277968</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>7296120</doc-number>
<kind>B2</kind>
<name>Corrigan et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>7302692</doc-number>
<kind>B2</kind>
<name>Bae et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>7328296</doc-number>
<kind>B1</kind>
<name>Marmash et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>7334107</doc-number>
<kind>B2</kind>
<name>Schoinas et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>7340582</doc-number>
<kind>B2</kind>
<name>Madukkarumukumana</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>7380041</doc-number>
<kind>B2</kind>
<name>Belmar et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>7398343</doc-number>
<kind>B1</kind>
<name>Marmash et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>7412488</doc-number>
<kind>B2</kind>
<name>Jha et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>7418572</doc-number>
<kind>B2</kind>
<name>Hepkin</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>7420931</doc-number>
<kind>B2</kind>
<name>Nanda et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>7444493</doc-number>
<kind>B2</kind>
<name>Schoinas et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>7454548</doc-number>
<kind>B2</kind>
<name>Belmar et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>7464191</doc-number>
<kind>B2</kind>
<name>Arndt et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>7464209</doc-number>
<kind>B2</kind>
<name>Armstrong et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>7475183</doc-number>
<kind>B2</kind>
<name>Traut et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>7493425</doc-number>
<kind>B2</kind>
<name>Arndt et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>7496706</doc-number>
<kind>B2</kind>
<name>Nguyen et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>7496707</doc-number>
<kind>B2</kind>
<name>Freking et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>7502872</doc-number>
<kind>B2</kind>
<name>Boyd et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>7506087</doc-number>
<kind>B2</kind>
<name>Ho et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>7516252</doc-number>
<kind>B2</kind>
<name>Krithivas</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>7526592</doc-number>
<kind>B2</kind>
<name>Tsuruta</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>7529860</doc-number>
<kind>B2</kind>
<name>Freimuth et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>7530071</doc-number>
<kind>B2</kind>
<name>Billau et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>7546406</doc-number>
<kind>B2</kind>
<name>Armstrong et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>7546487</doc-number>
<kind>B2</kind>
<name>Marisetty et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>7549090</doc-number>
<kind>B2</kind>
<name>Bailey et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>7552298</doc-number>
<kind>B2</kind>
<name>Bestler</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>7562366</doc-number>
<kind>B2</kind>
<name>Pope et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>7567567</doc-number>
<kind>B2</kind>
<name>Muller et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>7587531</doc-number>
<kind>B2</kind>
<name>Brice, Jr. et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>7600053</doc-number>
<kind>B2</kind>
<name>Carlson et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>7606965</doc-number>
<kind>B2</kind>
<name>Njoku et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>7613847</doc-number>
<kind>B2</kind>
<name>Kjos et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>7617340</doc-number>
<kind>B2</kind>
<name>Gregg</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>7617345</doc-number>
<kind>B2</kind>
<name>Clark et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>7623460</doc-number>
<kind>B2</kind>
<name>Miyazaki</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>7624235</doc-number>
<kind>B2</kind>
<name>Wadhawan et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>7627723</doc-number>
<kind>B1</kind>
<name>Buck et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>7631097</doc-number>
<kind>B2</kind>
<name>Moch et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>7886086</doc-number>
<kind>B2</kind>
<name>Sharma et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>8112556</doc-number>
<kind>B2</kind>
<name>Hanson et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>8504754</doc-number>
<kind>B2</kind>
<name>Craddock et al.</name>
<date>20130800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>2001/0021971</doc-number>
<kind>A1</kind>
<name>Gibson et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>2002/0152334</doc-number>
<kind>A1</kind>
<name>Holm et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>2002/0161907</doc-number>
<kind>A1</kind>
<name>Moon</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>2003/0056155</doc-number>
<kind>A1</kind>
<name>Austen et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>2003/0074541</doc-number>
<kind>A1</kind>
<name>Plambeck</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>2004/0015622</doc-number>
<kind>A1</kind>
<name>Avery</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>2004/0025166</doc-number>
<kind>A1</kind>
<name>Adlung et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>2004/0049600</doc-number>
<kind>A1</kind>
<name>Boyd et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>2004/0064618</doc-number>
<kind>A1</kind>
<name>Farrell et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>2004/0073905</doc-number>
<kind>A1</kind>
<name>Emer et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>2004/0093452</doc-number>
<kind>A1</kind>
<name>Easton et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>2004/0117534</doc-number>
<kind>A1</kind>
<name>Parry et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>2004/0122988</doc-number>
<kind>A1</kind>
<name>Han et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>2004/0139304</doc-number>
<kind>A1</kind>
<name>Arimilli et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>2004/0139305</doc-number>
<kind>A1</kind>
<name>Arimilli et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>2004/0199700</doc-number>
<kind>A1</kind>
<name>Clayton</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>2004/0236880</doc-number>
<kind>A1</kind>
<name>Barrett</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>2005/0033895</doc-number>
<kind>A1</kind>
<name>Lueck et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>2005/0071472</doc-number>
<kind>A1</kind>
<name>Arndt et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>2005/0114586</doc-number>
<kind>A1</kind>
<name>Brice, Jr. et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>2005/0114623</doc-number>
<kind>A1</kind>
<name>Craddock et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00145">
<document-id>
<country>US</country>
<doc-number>2005/0289271</doc-number>
<kind>A1</kind>
<name>Martinez et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00146">
<document-id>
<country>US</country>
<doc-number>2006/0005083</doc-number>
<kind>A1</kind>
<name>Genden et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00147">
<document-id>
<country>US</country>
<doc-number>2006/0064618</doc-number>
<kind>A1</kind>
<name>Wu et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00148">
<document-id>
<country>US</country>
<doc-number>2006/0101181</doc-number>
<kind>A1</kind>
<name>Post et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00149">
<document-id>
<country>US</country>
<doc-number>2006/0130071</doc-number>
<kind>A1</kind>
<name>Martin et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00150">
<document-id>
<country>US</country>
<doc-number>2006/0195617</doc-number>
<kind>A1</kind>
<name>Arndt et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00151">
<document-id>
<country>US</country>
<doc-number>2006/0195644</doc-number>
<kind>A1</kind>
<name>Arndt et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00152">
<document-id>
<country>US</country>
<doc-number>2006/0230208</doc-number>
<kind>A1</kind>
<name>Gregg et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00153">
<document-id>
<country>US</country>
<doc-number>2006/0253619</doc-number>
<kind>A1</kind>
<name>Torudbakken et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00154">
<document-id>
<country>US</country>
<doc-number>2006/0281630</doc-number>
<kind>A1</kind>
<name>Bailey et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00155">
<document-id>
<country>US</country>
<doc-number>2006/0288130</doc-number>
<kind>A1</kind>
<name>Madukkarumukumana</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00156">
<document-id>
<country>US</country>
<doc-number>2007/0028087</doc-number>
<kind>A1</kind>
<name>Yu et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00157">
<document-id>
<country>US</country>
<doc-number>2007/0073955</doc-number>
<kind>A1</kind>
<name>Murray et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00158">
<document-id>
<country>US</country>
<doc-number>2007/0136554</doc-number>
<kind>A1</kind>
<name>Biran et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00159">
<document-id>
<country>US</country>
<doc-number>2007/0168636</doc-number>
<kind>A1</kind>
<name>Hummel et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00160">
<document-id>
<country>US</country>
<doc-number>2007/0168643</doc-number>
<kind>A1</kind>
<name>Hummel et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00161">
<document-id>
<country>US</country>
<doc-number>2007/0168644</doc-number>
<kind>A1</kind>
<name>Hummel et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00162">
<document-id>
<country>US</country>
<doc-number>2007/0168934</doc-number>
<kind>A1</kind>
<name>Chandrasekharan et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00163">
<document-id>
<country>US</country>
<doc-number>2007/0186074</doc-number>
<kind>A1</kind>
<name>Bradford et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00164">
<document-id>
<country>US</country>
<doc-number>2007/0226386</doc-number>
<kind>A1</kind>
<name>Sharp et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00165">
<document-id>
<country>US</country>
<doc-number>2007/0234018</doc-number>
<kind>A1</kind>
<name>Feiste</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00166">
<document-id>
<country>US</country>
<doc-number>2007/0245041</doc-number>
<kind>A1</kind>
<name>Hua et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00167">
<document-id>
<country>US</country>
<doc-number>2007/0260768</doc-number>
<kind>A1</kind>
<name>Bender et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00168">
<document-id>
<country>US</country>
<doc-number>2007/0271559</doc-number>
<kind>A1</kind>
<name>Easton et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00169">
<document-id>
<country>US</country>
<doc-number>2008/0091851</doc-number>
<kind>A1</kind>
<name>Sierra</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00170">
<document-id>
<country>US</country>
<doc-number>2008/0091868</doc-number>
<kind>A1</kind>
<name>Mizrachi et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00171">
<document-id>
<country>US</country>
<doc-number>2008/0091915</doc-number>
<kind>A1</kind>
<name>Moertl et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00172">
<document-id>
<country>US</country>
<doc-number>2008/0098197</doc-number>
<kind>A1</kind>
<name>Craddock et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00173">
<document-id>
<country>US</country>
<doc-number>2008/0114734</doc-number>
<kind>A1</kind>
<name>Suwabe</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00174">
<document-id>
<country>US</country>
<doc-number>2008/0114906</doc-number>
<kind>A1</kind>
<name>Hummel et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00175">
<document-id>
<country>US</country>
<doc-number>2008/0126648</doc-number>
<kind>A1</kind>
<name>Brownlow et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00176">
<document-id>
<country>US</country>
<doc-number>2008/0126652</doc-number>
<kind>A1</kind>
<name>Vembu et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00177">
<document-id>
<country>US</country>
<doc-number>2008/0148295</doc-number>
<kind>A1</kind>
<name>Freimuth et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00178">
<document-id>
<country>US</country>
<doc-number>2008/0168208</doc-number>
<kind>A1</kind>
<name>Gregg</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00179">
<document-id>
<country>US</country>
<doc-number>2008/0222406</doc-number>
<kind>A1</kind>
<name>Tabuchi</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00180">
<document-id>
<country>US</country>
<doc-number>2008/0235425</doc-number>
<kind>A1</kind>
<name>Belmar et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00181">
<document-id>
<country>US</country>
<doc-number>2009/0024823</doc-number>
<kind>A1</kind>
<name>Ko et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00182">
<document-id>
<country>US</country>
<doc-number>2009/0049220</doc-number>
<kind>A1</kind>
<name>Conti et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00183">
<document-id>
<country>US</country>
<doc-number>2009/0070760</doc-number>
<kind>A1</kind>
<name>Khatri et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00184">
<document-id>
<country>US</country>
<doc-number>2009/0089780</doc-number>
<kind>A1</kind>
<name>Johnson et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00185">
<document-id>
<country>US</country>
<doc-number>2009/0125666</doc-number>
<kind>A1</kind>
<name>Freking et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00186">
<document-id>
<country>US</country>
<doc-number>2009/0144462</doc-number>
<kind>A1</kind>
<name>Arndt et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00187">
<document-id>
<country>US</country>
<doc-number>2009/0144731</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00188">
<document-id>
<country>US</country>
<doc-number>2009/0172211</doc-number>
<kind>A1</kind>
<name>Perry et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00189">
<document-id>
<country>US</country>
<doc-number>2009/0182966</doc-number>
<kind>A1</kind>
<name>Greiner et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00190">
<document-id>
<country>US</country>
<doc-number>2009/0182969</doc-number>
<kind>A1</kind>
<name>Norgaard et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00191">
<document-id>
<country>US</country>
<doc-number>2009/0210646</doc-number>
<kind>A1</kind>
<name>Bauman et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00192">
<document-id>
<country>US</country>
<doc-number>2009/0222814</doc-number>
<kind>A1</kind>
<name>Astrand</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00193">
<document-id>
<country>US</country>
<doc-number>2009/0240849</doc-number>
<kind>A1</kind>
<name>Corneli et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00194">
<document-id>
<country>US</country>
<doc-number>2009/0249039</doc-number>
<kind>A1</kind>
<name>Hook et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00195">
<document-id>
<country>US</country>
<doc-number>2009/0276774</doc-number>
<kind>A1</kind>
<name>Kinoshita</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00196">
<document-id>
<country>US</country>
<doc-number>2009/0276775</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00197">
<document-id>
<country>US</country>
<doc-number>2009/0328035</doc-number>
<kind>A1</kind>
<name>Ganguly</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00198">
<document-id>
<country>US</country>
<doc-number>2010/0005234</doc-number>
<kind>A1</kind>
<name>Ganga et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00199">
<document-id>
<country>US</country>
<doc-number>2010/0082855</doc-number>
<kind>A1</kind>
<name>Accapadi et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00200">
<document-id>
<country>US</country>
<doc-number>2010/0169528</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00201">
<document-id>
<country>US</country>
<doc-number>2011/0153893</doc-number>
<kind>A1</kind>
<name>Foong et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00202">
<document-id>
<country>US</country>
<doc-number>2011/0321061</doc-number>
<kind>A1</kind>
<name>Craddock et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00203">
<document-id>
<country>US</country>
<doc-number>2013/0067194</doc-number>
<kind>A1</kind>
<name>Craddock et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00204">
<document-id>
<country>EP</country>
<doc-number>0076921</doc-number>
<kind>A2</kind>
<date>19830400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00205">
<document-id>
<country>EP</country>
<doc-number>0552873</doc-number>
<kind>A1</kind>
<date>19930700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00206">
<document-id>
<country>EP</country>
<doc-number>0902355</doc-number>
<kind>A2</kind>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00207">
<document-id>
<country>EP</country>
<doc-number>0955585</doc-number>
<kind>A2</kind>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00208">
<document-id>
<country>EP</country>
<doc-number>1096376</doc-number>
<kind>A2</kind>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00209">
<document-id>
<country>EP</country>
<doc-number>1489491</doc-number>
<kind>A1</kind>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00210">
<document-id>
<country>JP</country>
<doc-number>57191826</doc-number>
<kind>A</kind>
<date>19821100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00211">
<document-id>
<country>JP</country>
<doc-number>359081724</doc-number>
<kind>A</kind>
<date>19840500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00212">
<document-id>
<country>JP</country>
<doc-number>362079557</doc-number>
<kind>A</kind>
<date>19870400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00213">
<document-id>
<country>JP</country>
<doc-number>405053973</doc-number>
<kind>A</kind>
<date>19930300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00214">
<document-id>
<country>JP</country>
<doc-number>510996</doc-number>
<kind>A</kind>
<date>19930400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00215">
<document-id>
<country>WO</country>
<doc-number>WO9600940</doc-number>
<kind>A1</kind>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00216">
<document-id>
<country>WO</country>
<doc-number>WO9938074</doc-number>
<kind>A1</kind>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00217">
<document-id>
<country>WO</country>
<doc-number>WO 02/41157</doc-number>
<kind>A2</kind>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00218">
<othercit>U.S. Appl. No. 12/708,284, &#x201c;Load Pair Disjoint Facility and Instruction Therefore,&#x201d; filed Jun. 24, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00219">
<othercit>U.S. Appl. No. 12/820,735, &#x201c;High-Word Facility for Extending the Number of General Purpose Registers Available to Instructions,&#x201d; filed Jun. 22, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00220">
<othercit>U.S. Appl. No. 12/820,768, &#x201c;Instructions for Performing an Operation on Two Operands and Subsequently Storing an Original Value of Operand,&#x201d; filed Jun. 22, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00221">
<othercit>U.S. Appl. No. 12/821,224, &#x201c;Associating Input/Output Device Requests With Memory Associated With a Logical Partition,&#x201d; filed Jun. 21, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00222">
<othercit>U.S. Appl. No. 12/821,239, &#x201c;Input/Output (I/O) Expansion Response Processing in a Peripheral Component Interconnect Express (PCIE) Environment,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00223">
<othercit>U.S. Appl. No. 12/821,242, &#x201c;A System and Method for Downbound I/O Expansion Request and Response Processing in a PCIe Architecture,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00224">
<othercit>U.S. Appl. No. 12/821,243, &#x201c;Upbound Input/Output Expansion Request and Response Processing in a PCIE Architecture,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00225">
<othercit>U.S. Appl. No. 12/821,245, &#x201c;A System and Method for Routing I/O Expansion Requests and Responses in a PCIE Architecture,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00226">
<othercit>U.S. Appl. No. 12/821,247, &#x201c;Scalable I/O Adapter Function Level Error Detection, Isolation, and Reporting,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00227">
<othercit>U.S. Appl. No. 12/821,248, &#x201c;Connected Input/Output HUB Management,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00228">
<othercit>U.S. Appl. No. 12/821,256, &#x201c;Switch Failover Control in a Multiprocessor Computer System,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00229">
<othercit>U.S. Appl. No. 12/821,271, &#x201c;Memory Error Isolation and Recovery in a Multiprocessor Computer System,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00230">
<othercit>U.S. Appl. No. 12/822,358, &#x201c;Function Virtualization Facility for Function Query of a Processor,&#x201d; filed Jun. 24, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00231">
<othercit>U.S. Appl. No. 12/822,368, &#x201c;Function Virtualization Facility for Blocking Instruction Function of a Multi-Function Instruction of a Virtual Processor,&#x201d; filed Jun. 24, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00232">
<othercit>Craddock et al., U.S. Appl. No. 12/821,170, &#x201c;Translation of Input/Output Address to Memory Addresses&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00233">
<othercit>Craddock et al., U.S. Appl. No. 12/821,171, &#x201c;Runtime Determination of Translation Formats for Adapter Functions,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00234">
<othercit>Craddock et al., U.S. Appl. No. 12/821,172, &#x201c;Resizing Address Spaces Concurrent to Accessing the Address Spaces,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00235">
<othercit>Craddock et al., U.S. Appl. No. 12/821,174, &#x201c;Multiple Address Spaces Per Adapter,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00236">
<othercit>Craddock et al., U.S. Appl. No. 12/821,175, &#x201c;Converting a Message Signaled Interruption Into an I/O Adapter Event Notification,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00237">
<othercit>Brice et al., U.S. Appl. No. 12/821,177, &#x201c;Converting a Message Signaled Interruption Into an I/O Adapter Event Notification to a Guest Operating System,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00238">
<othercit>Craddock et al., U.S. Appl. No. 12/821,178, &#x201c;Identification of Types of Sources of Adapter Interruptions,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00239">
<othercit>Belmar et al., U.S. Appl. No. 12/821,179, &#x201c;Controlling a Rate at Which Adapter Interruption Requests Are Processed,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00240">
<othercit>Craddock et al., U.S. Appl. No. 12/821,181, &#x201c;Controlling the Selectively Setting of Operational Parameters for an Adapter,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00241">
<othercit>Craddock et al., U.S. Appl. No. 12/821,182, &#x201c;Load Instruction for Communicating With Adapters,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00242">
<othercit>Coneski et al., U.S. Appl. No. 12/821,185, &#x201c;Discovery by Operating System of Information Relating to Adapter Functions Accessible to the Operating System,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00243">
<othercit>Coneski et al., U.S. Appl. No. 12/821,187, &#x201c;Enable/Disable Adapters of a Computing Environment,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00244">
<othercit>Craddock et al., U.S. Appl. No. 12/821,190, &#x201c;Guest Access to Address Spaces of Adapter,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00245">
<othercit>Coneski et al., U.S. Appl. No. 12/821,191, &#x201c;Managing Processing Associated With Hardware Events,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00246">
<othercit>Craddock et al., U.S. Appl. No. 12/821,192, &#x201c;Operating System Notification of Actions to Be Taken Responsive to Adapter Events,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00247">
<othercit>Brice et al., U.S. Appl. No. 12/821,193, &#x201c;Measurement Facility for Adapter Functions,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00248">
<othercit>Craddock et al., U.S. Appl. No. 12/821,194, &#x201c;Store/Store Block Instructions for Communicating With Adapters,&#x201d; filed Jun. 23, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00249">
<othercit>Paulsen, Eric; &#x201c;Local Memory Coaxes Top Speed from SCSI Masters,&#x201d; Electronic Design, v. 41, Apr. 15, 1993, pp. 76-6+.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00250">
<othercit>Ganapathy, Narayanan; &#x201c;General Purpose Operating System Support for Multiple Page Sizes,&#x201d; USENIX Annual Technical Conference (No. 98), 1998, pp. 91-104.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00251">
<othercit>Talluri et al., &#x201c;A New Page Table for 64-bit Address Spaces,&#x201d; ACM SIGOPS Operating Systems Review, vol. 29, Issue 5 (Dec. 1995), pp. 194-200.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00252">
<othercit>&#x201c;Large Page Support in the Linux Kernel,&#x201d; http://lwn.net/Articles/6969/ &#x3c;retrieved on Jan. 26, 2010&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00253">
<othercit>Crawford, Catherine H. et al., &#x201c;Accelerating Computing with the Cell Broadband Engine Processor,&#x201d; May 2008, CF '08, May 5-7, 2008, Ischia, Italy, pp. 3-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00254">
<othercit>Baumann, Andrew, et al., &#x201c;The Multikernel: A New OS Architecture for Scalable Multicore Systems,&#x201d; Oct. 2009, SOSP '09, Oct. 11-14, 2009, Big Sky, Montana, USA, pp. 29-43.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00255">
<othercit>Swift, Michael M. et al., &#x201c;Improving the Reliability of Commodity Operating Systems,&#x201d; ACM Transactions on Computer Systems, vol. 23, No. 1, Feb. 2005, pp. 77-110.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00256">
<othercit>Xu, Min et al., &#x201c;Towards a VMM-based Usage Control Framework for OS Kernel Integrity Protection,&#x201d; SACMAT '07, Jun. 20-22, 2007, Sophia Antipolis, France, pp. 71-80.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00257">
<othercit>Huang, Wei et al., &#x201c;A Case for High Performance Computing with Virtual Machines,&#x201d; ISC '06, Jun. 3 28 30, Carins, Queensland, Australia, pp. 125-134, Jun. 3, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00258">
<othercit>Mysore, Shashidhar et al., &#x201c;Understanding and Visualizing Full Systems with Data Flow Tomography,&#x201d; SPOLOS '08, Mar. 1-5, 2008, Seattle, Washington, USA, pp. 211-221.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00259">
<othercit>&#x201c;DMA Engines Bring Multicast to PCI Express Systems,&#x201d; http://electronicdesign.com, Aug. 13, 2009, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00260">
<othercit>&#x201c;Xen Wiki,&#x201d; http://wiki.xensource.com/xenwiki/VTdHowTo, 5 pages, Apr. 16, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00261">
<othercit>Vaidyanathan, K., et al., &#x201c;Exploiting RDMA Operations for Providing Efficient Fine-Grained Resource Monitoring in Cluster-based Servers,&#x201d; 1-4244-0328&#x2014;Jun. 2006, 10 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00262">
<othercit>&#x201c;IBM Enhances the IBM eServer zSeries 990 Family of Servers,&#x201d; Hardware Announcement, Oct. 7, 2003, pp. 1-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00263">
<othercit>&#x201c;Intel&#xae; Virtualization Technology for Directed I/O,&#x201d; Intel&#xae; Technology Journal, vol. 10, Issue 3, Aug. 10, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00264">
<othercit>&#x201c;I/O Virtualization and AMD's IOMMU,&#x201d; AMD Developer Central, http://developer.amd.com/documentation/articles/pages/892006101.aspx, Aug. 9, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00265">
<othercit>&#x201c;z/Architecture Principles of Operation,&#x201d; IBM Publication No. SA22-7832-07, Feb. 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00266">
<othercit>&#x201c;z/VM: Running Guest Operating Systems,&#x201d; IBM Publication No. SC24-5997-02, Oct. 2001.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00267">
<othercit>&#x201c;z/VM: General Information Manual,&#x201d; IBM Publication No. GC24-5991-05, May 2003.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00268">
<othercit>Winwood, Simon, et al., &#x201c;Multiple Page Size Support in the Linux Kernel&#x201d;, Proceedings of Ottawa Linux Symposium, 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00269">
<othercit>&#x201c;z/Architecture Principles of Operation,&#x201d; Chapter 17, pp. 17-1-17-30, IBM Publication No. SA22-7832-07, Feb. 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00270">
<othercit>&#x201c;Intel&#xae; Itanium&#xae; Architecture Software Developer's Manual,&#x201d; vol. 2, Rev. 2.2, Jan. 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00271">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067039 dated Feb. 25, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00272">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067036 dated Feb. 14, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00273">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067030 dated Feb. 7, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00274">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067020 dated Apr. 5, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00275">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067025 dated Apr. 13, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00276">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067024 dated Apr. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00277">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067019 dated Apr. 26, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00278">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067021 dated Apr. 28, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00279">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067043 dated Apr. 21, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00280">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067041 dated Apr. 26, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00281">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067031 dated Apr. 26, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00282">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067034 dated May 18, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00283">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067023 dated Jun. 15, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00284">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067032 dated May 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00285">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067038 dated Jun. 15, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00286">
<othercit>&#x201c;Chapter 6: Configuration Space&#x201d; in PCI-SIG: &#x201c;PCI Local Bus Specification Revision 3.0&#x201d;, Feb. 2004, pp. 213-254.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00287">
<othercit>Hennet, P. et al., &#x201c;Programmable Interrupt Vectors in Processors,&#x201d; IBM Technical Disclosure Bulletin, vol. 25, No. 5, Oct. 1, 1982, pp. 2641-2642.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00288">
<othercit>Plambeck et al., &#x201c;Development and Attributes of z/Architecture,&#x201d; IBM Journal of Research and Development, IBM Corporation, vol. 46, No. 4/05, Jul. 1, 2002, pp. 367-379.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00289">
<othercit>&#x201c;z/Architecture Principles of Operation, Chapter 3&#x201d;, Feb. 2008, pp. 1-71.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00290">
<othercit>Gehringer, E. F., et al., &#x201c;Virtual Memory Systems,&#x201d; CSC-506&#x2014;Architecture of Parallel Computers Computer Science Department, College of Engineering, North Carolina, Dec. 31, 1999, XP002631523.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00291">
<othercit>&#x201c;z/Architecture&#x2014;Principles of Operation,&#x201d; IBM Publication No. SA22-7832-05, Sixth Edition, Apr. 2007, Chapter 10, 10-1-10-138.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00292">
<othercit>&#x201c;PCI Local Bus Specification,&#x201d; Mar. 29, 2002, pp. 1-328.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00293">
<othercit>McGee, H.T., &#x201c;Technique for Resetting a Single Channel Path Under Operator Control in IBM System/370XA,&#x201d; IBM Technical Disclosure Bulletin, vol. 26, No. 10B, Mar. 1984.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00294">
<othercit>&#x201c;Decreased Latency Across PCI Express With I/O Virtualization Via a Hint Interface,&#x201d; IPCOM000185226D, Jul. 16, 2009, pp. 1-2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00295">
<othercit>Office Action for U.S. Appl. No. 12/821,171 dated Oct. 7, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00296">
<othercit>Office Action for U.S. Appl. No. 12/821,182 dated Oct. 13, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00297">
<othercit>Office Action for U.S. Appl. No. 12/821,179 dated Apr. 24, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00298">
<othercit>Office Action for U.S. Appl. No. 12/821,177 dated May 2, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00299">
<othercit>Final Office Action for U.S. Appl. No. 12/821,185 dated Jun. 6, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00300">
<othercit>&#x201c;Atari PCI BIOS and Device Drive Specification 1.13,&#x201d; Chapters 2, 3, 4 and 6; [online], internet archive dates Dec. 12, 2007 and Feb. 8, 2007; retrieved on May 24, 2012, 13 pages &#x3c;URL:http://kunden.wvnet.at/fichti/docs/pcibios-2.htm; pcibios-3.htm; pcibios-4.htm, pcibios-6.htm&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00301">
<othercit>&#x201c;PCI Device Access Under 32-bit PM DOS from Open Watcom,&#x201d; [online], internet archive date Jul. 19, 2006; retrieved May 26, 2012, 14 pages &#x3c;URL:http://www.openwatcom.org/index.php/PCI<sub>&#x2014;</sub>Device<sub>&#x2014;</sub>access<sub>&#x2014;</sub>under<sub>&#x2014;</sub>32-Bit<sub>&#x2014;</sub>PM<sub>&#x2014;</sub>DOS&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00302">
<othercit>Device Identification Strings from OSR online; [online], internet archive date Mar. 13, 2005; retrieved May 26, 2012, 3 pages &#x3c;URL:http//www.osronline.com/ddkx/install/idstrings<sub>&#x2014;</sub>8tt3.htm&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00303">
<othercit>Office Action for U.S. Appl. No. 12/821,190 dated Jun. 12, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00304">
<othercit>Office Action for U.S. Appl. No. 12/821,174 dated Jun. 15, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00305">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067035 dated Mar. 8, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00306">
<othercit>Final Office Action for U.S. Appl. No. 12/821,187 dated Jul. 16, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00307">
<othercit>Office Action for U.S. Appl. No. 12/821,178 dated Jul. 16, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00308">
<othercit>Office Action for U.S. Appl. No. 12/821,171 dated Jul. 19, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00309">
<othercit>Communication Pursuant to Article 94(3) EPC for Application No. 10 776 350.0-2212 dated Oct. 31, 2012, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00310">
<othercit>Final Office Action for U.S. Appl. No. 12/821,174 dated Nov. 13, 2012, pp. 1-29.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00311">
<othercit>Office Action for U.S. Appl. No. 12/821,170 dated Feb. 1, 2013, pp. 1-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00312">
<othercit>Office Action for U.S. Appl. No. 13/672,028 dated Feb. 1, 2013, pp. 1-20.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00313">
<othercit>Communication Pursuant to Article 94(3) EPC for Application No. 10 784 272.6-1243 dated Feb. 6, 2013, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00314">
<othercit>Final Office Action for U.S. Appl. No. 12/821,171 dated Mar. 18, 2013, pp. 1-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00315">
<othercit>Office Action for U.S. Appl. No. 12/821,181 dated Mar. 26, 2013, pp. 1-37.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00316">
<othercit>Notice of Allowance for U.S. Appl. No. 12/821,172 dated Apr. 30, 2013, pp. 1-30.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00317">
<othercit>Communication Pursuant to Article 94(3) EPC for Application No. 10 776 345.0-1956, dated May 31, 2013, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00318">
<othercit>Notice of Allowance for U.S. Appl. No. 13/462,152 dated Jun. 7, 2013, pp. 1-13.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00319">
<othercit>Notice of Allowance for U.S. Appl. No. 12/821,175 dated Jun. 20, 2013, pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00320">
<othercit>Communication Pursuant to Article 94(3) EPC for Application No. 10 778 994.3-1960, dated Jul. 3, 2013, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00321">
<othercit>Office Action for U.S. Appl. No. 12/821,174 dated Jan. 19, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00322">
<othercit>Office Action for U.S. Appl. No. 12/821,193 dated Feb. 24, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00323">
<othercit>&#x201c;PCI Local Bus Specification Revision 3.0,&#x201d; Aug. 2002, pp. 39,44, 28,49,58.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00324">
<othercit>Final Office Action for U.S. Appl. No. 12/821,171 dated Mar. 29, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00325">
<othercit>Office Action for U.S. Appl. No. 12/821,175 dated Sep. 17, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00326">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067029 dated Mar. 2, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00327">
<othercit>&#x201c;IBM System/390 I/O Call Reporting Process,&#x201d; IBM Technical Disclosure Bulletin, vol. 36, No. 1, Jan. 1993, pp. 164-169, XP000222812.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00328">
<othercit>&#x201c;Means for Channel Subsystem-Initiated Communication,&#x201d; IBM Technical Disclosure Bulletin, vol. 33, No. 12, May 1991, p. 169, XP000121623.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00329">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067028 dated Mar. 8, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00330">
<othercit>International Search Report and Written Opinion for PCT/EP2010/067042 dated Apr. 28, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00331">
<othercit>Office Action for U.S. Appl. No. 12/821,190 dated Sep. 4, 2013, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00332">
<othercit>Office Action for U.S. Appl. No. 12/821,174 dated Nov. 19, 2013, pp. 1-35.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>29</number-of-drawing-sheets>
<number-of-figures>42</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110320652</doc-number>
<kind>A1</kind>
<date>20111229</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Craddock</last-name>
<first-name>David</first-name>
<address>
<city>New Paltz</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Farrell</last-name>
<first-name>Mark S.</first-name>
<address>
<city>Pleasant Valley</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Glendening</last-name>
<first-name>Beth A.</first-name>
<address>
<city>Poughkeepsie</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gregg</last-name>
<first-name>Thomas A.</first-name>
<address>
<city>Highland</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Greiner</last-name>
<first-name>Dan F.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Craddock</last-name>
<first-name>David</first-name>
<address>
<city>New Paltz</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Farrell</last-name>
<first-name>Mark S.</first-name>
<address>
<city>Pleasant Valley</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Glendening</last-name>
<first-name>Beth A.</first-name>
<address>
<city>Poughkeepsie</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Gregg</last-name>
<first-name>Thomas A.</first-name>
<address>
<city>Highland</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Greiner</last-name>
<first-name>Dan F.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Campbell</last-name>
<first-name>John E.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Schiller, Esq.</last-name>
<first-name>Blanche E.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<orgname>Heslin Rothenberg Farley &#x26; Mesiti P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rhu</last-name>
<first-name>Kris</first-name>
<department>2184</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Access to an input/output adapter by a configuration is controlled. For each requested access to an adapter, checks are made to determine whether the configuration is authorized to access the adapter. If it is not authorized, then access is denied. If it is authorized, but access should be temporarily blocked, then instruction execution is altered to indicate such. If access is permitted, but should be blocked for another reason (other than temporarily), then access is denied.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="251.71mm" wi="178.73mm" file="US08626970-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="237.07mm" wi="187.37mm" file="US08626970-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="222.08mm" wi="188.04mm" orientation="landscape" file="US08626970-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="269.07mm" wi="189.40mm" orientation="landscape" file="US08626970-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="214.55mm" wi="151.89mm" file="US08626970-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="223.77mm" wi="183.90mm" file="US08626970-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="250.70mm" wi="177.80mm" file="US08626970-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="233.68mm" wi="180.51mm" file="US08626970-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="267.72mm" wi="183.90mm" orientation="landscape" file="US08626970-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="214.55mm" wi="144.44mm" file="US08626970-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="168.23mm" wi="166.88mm" file="US08626970-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="263.65mm" wi="190.08mm" orientation="landscape" file="US08626970-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="212.51mm" wi="190.08mm" file="US08626970-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="254.76mm" wi="188.04mm" orientation="landscape" file="US08626970-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="222.76mm" wi="190.08mm" file="US08626970-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="208.45mm" wi="179.15mm" file="US08626970-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="255.95mm" wi="195.58mm" orientation="landscape" file="US08626970-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="223.44mm" wi="174.41mm" file="US08626970-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="261.62mm" wi="174.41mm" file="US08626970-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="249.34mm" wi="198.20mm" orientation="landscape" file="US08626970-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="197.53mm" wi="144.44mm" file="US08626970-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="169.59mm" wi="140.97mm" file="US08626970-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="224.11mm" wi="179.15mm" file="US08626970-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="173.06mm" wi="173.74mm" file="US08626970-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="207.09mm" wi="191.43mm" file="US08626970-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="179.83mm" wi="183.22mm" file="US08626970-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="218.69mm" wi="178.48mm" file="US08626970-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="198.88mm" wi="177.80mm" file="US08626970-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="213.87mm" wi="181.19mm" file="US08626970-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="244.26mm" wi="184.66mm" file="US08626970-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">This invention relates, in general, to input/output (I/O) processing, and in particular, to controlling access to input/output adapters of a computing environment.</p>
<p id="p-0003" num="0002">Many system architectures that use input/output adapters control access to those adapters by using central processing unit (CPU) based address translation mechanisms. In such systems, memory mapped input/output (MMIO) is used, and the hardware knows, based on the manner in which the memory is set up, whether an instruction executed by a processor is pointing to real memory or whether it is actually pointing to memory in one of the adapters. The hardware is then able to steer it accordingly.</p>
<p id="p-0004" num="0003">Some systems, however, may not use the traditional memory mapped I/O.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0005" num="0004">In accordance with an aspect of the present invention, access to I/O adapters is controlled such that only an authorized configuration can access a given I/O adapter (e.g., adapter function). In one example, it is controlled in those computing environments that are not using, for instance, memory mapped I/O.</p>
<p id="p-0006" num="0005">The shortcomings of the prior art are overcome and advantages are provided through the provision of a computer program product for controlling access to adapters of a computing environment. The computer program product includes a computer readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method. The method includes, for instance, executing an instruction including a request by a configuration to access an adapter, the adapter identified by a function handle provided with the request, the executing including using, by the processor, the function handle to obtain a function table entry for the adapter, the function table entry including information associated with the adapter; determining based on information in the function table entry whether the configuration is permitted access to the adapter; and allowing access to the adapter, responsive to determining the configuration is permitted access to the adapter.</p>
<p id="p-0007" num="0006">Methods and systems relating to one or more aspects of the present invention are also described and claimed herein. Further, services relating to one or more aspects of the present invention are also described and may be claimed herein.</p>
<p id="p-0008" num="0007">Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">One or more aspects of the present invention are particularly pointed out and distinctly claimed as examples in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1A</figref> depicts one embodiment of a computing environment to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1B</figref> depicts another embodiment of a computing environment to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1C</figref> depicts one example of a computing environment in which each adapter function of a plurality of adapter functions has associated therewith a function table entry, in accordance with an aspect of the present invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2A</figref> depicts one embodiment of a function table entry used in accordance with an aspect of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2B</figref> depicts one embodiment of a function handle used to locate a function table entry, in accordance with an aspect of the present invention;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3A</figref> depicts one example of an operating system executing a PCI load instruction to access a particular PCI function, in accordance with an aspect of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 3B</figref> depicts one example of an operating system issuing a PCI store instruction against a particular PCI function, in accordance with an aspect of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 4</figref> depicts one embodiment of the logic to control access by an operating system to a particular adapter function, in accordance with an aspect of the present invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 5A</figref> depicts one embodiment of a Call Logical Processor instruction used in accordance with an aspect of the present invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5B</figref> depicts one embodiment of a request block used by the Call Logical Processor instruction of <figref idref="DRAWINGS">FIG. 5A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5C</figref> depicts one embodiment of a response block provided by the Call Logical Processor instruction of <figref idref="DRAWINGS">FIG. 5A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> depicts one embodiment of the logic to enable a PCI function, in accordance with an aspect of the present invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7A</figref> depicts one embodiment of a Modify PCI Function Controls instruction used in accordance with an aspect of the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 7B</figref> depicts one embodiment of a field used by the Modify PCI Function Controls instruction of <figref idref="DRAWINGS">FIG. 7A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 7C</figref> depicts one embodiment of another field used by the Modify PCI Function Controls instruction of <figref idref="DRAWINGS">FIG. 7A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7D</figref> depicts one embodiment of the contents of a function information block (FIB), used in accordance with an aspect of the present invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 8</figref> depicts one embodiment of an overview of the logic of the Modify PCI Function Controls instruction, in accordance with an aspect of the present invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 9A</figref> depicts one embodiment of a PCI Load instruction used in accordance with an aspect of the present invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 9B</figref> depicts one embodiment of a field used by the PCI Load instruction of <figref idref="DRAWINGS">FIG. 9A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 9C</figref> depicts one embodiment of another field used by the PCI Load instruction of <figref idref="DRAWINGS">FIG. 9A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. 10A-10B</figref> depict one embodiment of the logic to perform a PCI Load operation, in accordance with an aspect of the present invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 11A</figref> depicts one embodiment of a PCI Store instruction used in accordance with an aspect of the present invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 11B</figref> depicts one embodiment of a field used by the PCI Store instruction of <figref idref="DRAWINGS">FIG. 11A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 11C</figref> depicts one embodiment of another field used by the PCI Store instruction of <figref idref="DRAWINGS">FIG. 11A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIGS. 12A-12B</figref> depict one embodiment of the logic to perform a PCI Store operation, in accordance with an aspect of the present invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 13A</figref> depicts one embodiment of a PCI Store Block instruction used in accordance with an aspect of the present invention;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 13B</figref> depicts one embodiment of a field used by the PCI Store Block instruction of <figref idref="DRAWINGS">FIG. 13A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 13C</figref> depicts one embodiment of another field used by the PCI Store Block instruction of <figref idref="DRAWINGS">FIG. 13A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 13D</figref> depicts one embodiment of yet another field used by the PCI Store Block instruction of <figref idref="DRAWINGS">FIG. 13A</figref>, in accordance with an aspect of the present invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIGS. 14A-14B</figref> depict one embodiment of the logic to perform a PCI Store Block operation, in accordance with an aspect of the present invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 15</figref> depicts one embodiment of a computer program product incorporating one or more aspects of the present invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 16</figref> depicts one embodiment of a host computer system to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 17</figref> depicts a further example of a computer system to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 18</figref> depicts another example of a computer system comprising a computer network to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 19</figref> depicts one embodiment of various elements of a computer system to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 20A</figref> depicts one embodiment of the execution unit of the computer system of <figref idref="DRAWINGS">FIG. 19</figref> to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 20B</figref> depicts one embodiment of the branch unit of the computer system of <figref idref="DRAWINGS">FIG. 19</figref> to incorporate and use one or more aspects of the present invention;</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 20C</figref> depicts one embodiment of the load/store unit of the computer system of <figref idref="DRAWINGS">FIG. 19</figref> to incorporate and use one or more aspects of the present invention; and</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 21</figref> depicts one embodiment of an emulated host computer system to incorporate and use one or more aspects of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0049" num="0048">In accordance with an aspect of the present invention, access to an adapter by a configuration is controlled. In particular, a capability is provided to control access such that only an authorized configuration can access a given adapter, such as a given adapter function (e.g., a PCI function). A configuration is, for instance, an operating system, a processor, a logical partition, an operating system executing in a logical partition, a pageable storage mode guest (e.g., a guest operating system), etc. As used herein, the term operating system includes device drivers.</p>
<p id="p-0050" num="0049">In one example, in the z/Architecture&#xae;, a pageable guest is interpretively executed via the Start Interpretive Execution (SIE) instruction, at level 2 of interpretation. For instance, the logical partition (LPAR) hypervisor executes the SIE instruction to begin the logical partition in physical, fixed memory. If z/VM&#xae; is the operating system in that logical partition, it issues the SIE instruction to execute its guests (virtual) machines in its V=V (virtual) storage. Therefore, the LPAR hypervisor uses level-1 SIE, and the z/VM&#xae; hypervisor uses level-2 SIE.</p>
<p id="p-0051" num="0050">Further, as used herein, the term adapter includes any type of adapter (e.g., storage adapter, processing adapter, network adapter, cryptographic adapter, PCI adapter, other type of input/output adapters, etc.). In one embodiment, an adapter includes one adapter function. However, in other embodiments, an adapter may include a plurality of adapter functions. One or more aspects of the present invention are applicable whether an adapter includes one adapter function or a plurality of adapter functions. In one embodiment, if an adapter includes a plurality of adapter functions, then the control capability herein applies to each adapter function, in accordance with an aspect of the present invention. In the examples presented herein, adapter is used interchangeably with adapter function (e.g., PCI function) unless otherwise noted.</p>
<p id="p-0052" num="0051">Moreover, the term firmware, used further below, includes, e.g., the microcode, millicode and/or macrocode of the processor. It includes, for instance, the hardware-level instructions and/or data structures used in implementation of higher-level machine code. In one embodiment, it includes, for instance, proprietary code that is typically delivered as microcode that includes trusted software or microcode specific to the underlying hardware and controls operating system access to the system hardware.</p>
<p id="p-0053" num="0052">One embodiment of a computing environment to incorporate and use one or more aspects of the present invention is described with reference to <figref idref="DRAWINGS">FIG. 1A</figref>. In one example, a computing environment <b>100</b> is a System z&#xae; server offered by International Business Machines Corporation. System z&#xae; is based on the z/Architecture&#xae; offered by International Business Machines Corporation. Details regarding the z/Architecture&#xae; are described in an IBM&#xae; publication entitled, &#x201c;z/Architecture Principles of Operation,&#x201d; IBM Publication No. SA22-7832-07, February 2009, which is hereby incorporated herein by reference in its entirety. IBM&#xae;, System z&#xae; and z/Architecture&#xae; are registered trademarks of International Business Machines Corporation, Armonk, N.Y. Other names used herein may be registered trademarks, trademarks or product names of International Business Machines Corporation or other companies.</p>
<p id="p-0054" num="0053">In one example, computing environment <b>100</b> includes one or more central processing units (CPUs) <b>102</b> coupled to a system memory <b>104</b> (a.k.a., main memory) via a memory controller <b>106</b>. To access system memory <b>104</b>, a central processing unit <b>102</b> issues a read or write request that includes an address used to access system memory. The address included in the request is typically not directly usable to access system memory, and therefore, it is translated to an address that is directly usable in accessing system memory. The address is translated via a translation mechanism (XLATE) <b>108</b>. For example, the address is translated from a virtual address to a real or absolute address using, for instance, dynamic address translation (DAT).</p>
<p id="p-0055" num="0054">The request, including the address (translated, if necessary), is received by memory controller <b>106</b>. In one example, memory controller <b>106</b> is comprised of hardware and is used to arbitrate for access to the system memory and to maintain the memory's consistency. This arbitration is performed for requests received from CPUs <b>102</b>, as well as for requests received from one or more adapters <b>110</b>. Like the central processing units, the adapters issue requests to system memory <b>104</b> to gain access to the system memory.</p>
<p id="p-0056" num="0055">In one example, adapter <b>110</b> is a Peripheral Component Interconnect (PCI) or PCI Express (PCIe) adapter that includes one or more PCI functions. A PCI function issues a request that is routed to an input/output hub <b>112</b> (e.g., a PCI hub) via one or more switches (e.g., PCIe switches) <b>114</b>. In one example, the input/output hub is comprised of hardware, including one or more state machines, and is coupled to memory controller <b>106</b> via an I/O-to-memory bus <b>120</b>.</p>
<p id="p-0057" num="0056">The input/output hub includes, for instance, a root complex <b>116</b> that receives the request from a switch. The request includes an input/output address that is provided to an address translation and protection unit <b>118</b> which accesses information used for the request. As examples, the request may include an input/output address used to perform a direct memory access (DMA) operation or to request a message signaled interruption (MSI). Address translation and protection unit <b>118</b> accesses information used for the DMA or MSI request. As a particular example, for a DMA operation, information may be obtained to translate the address. The translated address is then forwarded to the memory controller to access system memory.</p>
<p id="p-0058" num="0057">In one example, information used for the DMA or MSI request issued by an adapter is obtained from a device table entry located in the I/O hub (e.g., in the address translation and protection unit). The device table entry includes information for the adapter, and each adapter has at least one device table entry associated therewith. For instance, there is one device table entry per address space assigned to the adapter. For requests issued from adapters, a device table entry is located using a requestor id provided in the request.</p>
<p id="p-0059" num="0058">In a further embodiment of a computing environment, in addition to or instead of one or more CPUs <b>102</b>, a central processing complex is coupled to memory controller <b>106</b>, as shown in <figref idref="DRAWINGS">FIG. 1B</figref>. In this example, a central processing complex <b>150</b> includes, for instance, one or more partitions or zones <b>152</b> (e.g., logical partitions LP<b>1</b>-LPn), one or more central processors (e.g., CP<b>1</b>-CPm) <b>154</b>, and a hypervisor <b>156</b> (e.g., a logical partition manager), each of which is described below.</p>
<p id="p-0060" num="0059">Each logical partition <b>152</b> is capable of functioning as a separate system. That is, each logical partition can be independently reset, initially loaded with an operating system or a hypervisor (such as z/VM&#xae; offered by International Business Machines Corporation, Armonk, N.Y.), if desired, and operate with different programs. An operating system, a hypervisor, or an application program running in a logical partition appears to have access to a full and complete system, but only a portion of it is available. A combination of hardware and Licensed Internal Code (also referred to as microcode or millicode) keeps a program in a logical partition from interfering with the program in a different logical partition. This allows several different logical partitions to operate on a single or multiple physical processor in a time slice manner. In this particular example, each logical partition has a resident operating system <b>158</b>, which may differ for one or more logical partitions. In one embodiment, operating system <b>158</b> is a z/OS&#xae; or zLinux operating system, offered by International Business Machines Corporation, Armonk, N.Y. z/OS&#xae; and z/VM&#xae; are registered trademarks of International Business Machines Corporation, Armonk, N.Y.</p>
<p id="p-0061" num="0060">Central processors <b>154</b> are physical processor resources that are allocated to the logical partitions. For instance, a logical partition <b>152</b> includes one or more logical processors, each of which represents all or a share of the physical processor resource <b>154</b> allocated to the partition. The underlying processor resource may either be dedicated to that partition or shared with another partition.</p>
<p id="p-0062" num="0061">Logical partitions <b>152</b> are managed by hypervisor <b>156</b> implemented by firmware running on processors <b>154</b>. Logical partitions <b>152</b> and hypervisor <b>156</b> each comprise one or more programs residing in respective portions of central storage associated with the central processors. One example of hypervisor <b>156</b> is the Processor Resource/Systems Manager (PR/SM), offered by International Business Machines Corporation, Armonk, N.Y.</p>
<p id="p-0063" num="0062">Although, in this example, a central processing complex having logical partitions is described, one or more aspects of the present invention may be incorporated in and used by other processing units, including single or multi-processor processing units that are not partitioned, among others. The central processing complex described herein is only one example.</p>
<p id="p-0064" num="0063">As described above, an adapter may include one or more adapter functions. Further details regarding adapter functions are described with reference to <figref idref="DRAWINGS">FIG. 1C</figref>. As shown in <figref idref="DRAWINGS">FIG. 1C</figref>, each adapter function <b>180</b> is coupled to I/O hub <b>112</b> via one or more PCI switches <b>114</b>. I/O hub <b>112</b> is coupled to logical partitions <b>152</b> via I/O-to-memory bus <b>120</b>. In this example, the memory controller is not shown, but may be used. The I/O hub may be coupled to the logical partitions directly or via a memory controller.</p>
<p id="p-0065" num="0064">Each adapter function <b>180</b> has associated therewith a function table entry <b>182</b> that includes information regarding its associated adapter function. For instance, as shown in <figref idref="DRAWINGS">FIG. 2A</figref>, function table entry <b>182</b> has a plurality of fields including, for example:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0065">Zone Number <b>202</b>: This field includes a value that is used in a logical partition environment to designate a zone or logical partition. The value of this field indicates which zone (e.g., operating system within the zone) owns or has access to the adapter function associated with this function table entry.</li>
        <li id="ul0002-0002" num="0066">In a further embodiment, zone number may be used to identify the configuration regardless if it is a logical partition environment. For instance, it may be an operating system identifier or an identifier of another configuration.</li>
        <li id="ul0002-0003" num="0067">Guest Identifier <b>204</b>: This field is used when the system is in a pageable storage mode to identify a guest that is allowed access to this adapter function;</li>
        <li id="ul0002-0004" num="0068">Status Indicator <b>206</b>: This provides an indication of whether the function table entry itself is valid, whether the function is enabled, and/or whether the function is in error state, etc.;</li>
        <li id="ul0002-0005" num="0069">Function Type <b>208</b>: This provides an indication of a type of the adapter function (e.g., one function per adapter; multiple functions per adapter, etc.);</li>
        <li id="ul0002-0006" num="0070">Requestor ID (RID) <b>210</b>: This is an identifier of the adapter function that may include an adapter bus number, device number and function number. This field is used for accesses by the configuration of a configuration space of an adapter function.</li>
        <li id="ul0002-0007" num="0071">As shown in <figref idref="DRAWINGS">FIG. 3A</figref>, an adapter function includes storage <b>300</b>, which has a plurality of address spaces, including, for instance, a configuration space (e.g., PCI configuration space for a PCI function), an I/O space (e.g., PCI I/O space), and one or more memory spaces (e.g., PCI memory space).</li>
        <li id="ul0002-0008" num="0072">The configuration space may be accessed by specifying the configuration space in an instruction issued by the configuration to the adapter function. Also specified in the instruction is an offset into the configuration space and a function handle used to locate the appropriate function table entry that includes the RID. The firmware receives the instruction and determines it is for a configuration space. Therefore, it uses the RID to generate a request to the I/O hub, and the I/O hub creates a request to access the adapter. The location of the adapter is based on the RID and the offset specifies the offset into the configuration space of the adapter. For instance, the offset specifies an offset into a register number in the configuration space.</li>
        <li id="ul0002-0009" num="0073">Base Address Register (1 to n) <b>212</b>: There may be one or more base address registers and each is used to indicate the base address of an I/O address space or a memory space within the adapter function. It is used for accesses to memory space and/or I/O space of the adapter function.</li>
        <li id="ul0002-0010" num="0074">For instance, the offset provided in an instruction to access the adapter function is added to the value in the base address register associated with the address space designated in the instruction to obtain the address to be used to access the adapter function. The address identifier provided in the instruction identifies the address space within the adapter function to be accessed and the corresponding BAR to be used.</li>
        <li id="ul0002-0011" num="0075">Device Table Index (1 to n) <b>214</b> (<figref idref="DRAWINGS">FIG. 2A</figref>): There may be one or more device table indices, and each index is an index into a device table to locate a device table entry (DTE). There are one or more device table entries per adapter function, and each entry includes information associated with its adapter function, including information used to process requests of the adapter function (e.g., DMA requests, MSI requests) and information relating to requests to the adapter function (e.g., PCI instructions). Each device table entry is associated with one address space within system memory assigned to the adapter function. The information included in the DTE may depend on the operations supported by or enabled for the adapter function (described more fully below); and</li>
        <li id="ul0002-0012" num="0076">Internal Routing Information <b>216</b>: This information is used to perform particular routing to the adapter. It includes, for instance, node, processor chip, and hub addressing information, as examples.</li>
        <li id="ul0002-0013" num="0077">The function table entry may include more, less or different information. The information included may depend on the operations supported by or enabled for the adapter function (described more fully below).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0066" num="0078">To access a particular function table entry for a given adapter function, a function handle <b>184</b> (<figref idref="DRAWINGS">FIG. 1C</figref>) is used. In one example, one or more bits of the function handle are used as an index into the function table to locate a particular function table entry. There is a function handle <b>184</b> for each adapter function. In one particular example, a function handle includes a plurality of parameters. As shown in <figref idref="DRAWINGS">FIG. 2B</figref>, function handle <b>184</b> includes, for instance, an enable indicator <b>252</b> indicating whether the handle is enabled; a function number <b>254</b> that identifies the function (this is a static identifier and may be used to index into the function table); and an instance number <b>256</b> specifying the particular instance of this function handle.</p>
<p id="p-0067" num="0079">As described above, adapter functions can issue requests, such as memory access requests, interrupt requests, etc. Further, a configuration can issue requests to an adapter function. In accordance with an aspect of the present invention, these configuration requests are via specific instructions, which access the adapter or modify control parameters associated with the adapter. Example instructions include PCI Load, PCI Store, and Modify PCI Function Controls, to name a few. These instructions are specific to the I/O infrastructure architecture (e.g., PCI).</p>
<p id="p-0068" num="0080">In one example, as shown in <figref idref="DRAWINGS">FIG. 3A</figref>, an operating system executing within a CPU <b>310</b> issues a load instruction <b>312</b> (e.g., PCI Load) to access one of the address spaces of the function's storage <b>300</b>. There may be multiple adapter functions within a system and only one operating system may be allowed access to a given adapter. When an operating system issues a PCI Load instruction, access restrictions are enforced by, for example, firmware to ensure that the operating system issuing the instruction is permitted to access the address space within the adapter function.</p>
<p id="p-0069" num="0081">In a further example, the operating system executing in CPU <b>310</b> issues a store instruction <b>314</b> (e.g., PCI store), which also accesses one of the address spaces. There are other adapter instructions that also need to be controlled such that the operating system (or other configuration) only accesses the adapter function, assigned to it.</p>
<p id="p-0070" num="0082">One embodiment of controlling access of an operating system to an adapter function is described with reference to <figref idref="DRAWINGS">FIG. 4</figref>. Although this example describes operating system access, it may also be used by other configurations.</p>
<p id="p-0071" num="0083">Referring to <figref idref="DRAWINGS">FIG. 4</figref>, initially, a policy is set by a system administrator or customer that associates each PCI function with a particular configuration (e.g., a particular operating system, a particular logical partition, etc.) that is allowed to access that adapter function, STEP <b>400</b>. This policy is, for instance, reconfigurable, and is maintained in an I/O configuration data set located in secure memory.</p>
<p id="p-0072" num="0084">At system initialization time, the firmware (i.e., trusted firmware) performs a bus walk of the I/O infrastructure to determine which adapter functions are included in (e.g., plugged into) the infrastructure, STEP <b>402</b>. The firmware will not consider an adapter to be part of the infrastructure, if the adapter as identified by its vital product data is not supported by the platform. During this bus walk, the firmware performs a certain amount of configuration, STEP <b>403</b>. This configuration includes initializing the PCIe switches <b>114</b> with routing information (e.g., bus numbers and address information) that will allow successful routing of packets to and from the adapter functions. At this time, the configuration spaces of the supported adapters are also initialized with their requestor IDs and BAR information that is also consistent with the routing information configured in the switches. Subsequent to this a function table entry is created for each supported adapter function, and populating the function table entry with some information, STEP <b>404</b>. For instance, the firmware places the previously configured BAR information and that requestor ID in the function table entry.</p>
<p id="p-0073" num="0085">Based on the policy, a zone number is set in each function table entry that indicates which logical partition, and therefore, which operating system, has access to the adapter function corresponding to the function table entry. In a further embodiment, in which the computing environment is not logically partitioned, the zone number may be replaced by another indicator that specifies an operating system, rather than a logical partition. Other indicators may also be used for other types of configuration.</p>
<p id="p-0074" num="0086">Thereafter, the operating system issues a query to determine the adapter functions to which is has access (e.g., those assigned and may possibly be assigned), STEP <b>406</b>. Responsive to this query, the firmware returns a list of one or more adapter functions. As an example, the firmware scans the function table looking for all function table entries with a zone number matching the zone number of the requesting operating system; and returns a list of the adapter functions in which the zone numbers match. (In another embodiment, a partial list may be returned.) For each adapter function included in the list, a function handle is provided in the list.</p>
<p id="p-0075" num="0087">At some point, the operating system attempts to access an adapter function (e.g., query an adapter function; access an address space of the function; or set up or modify a device table entry for the adapter function; etc.), via, for instance, an instruction, STEP <b>408</b>. The operating system specifies in the instruction the adapter function to access via the function handle. The firmware then uses this function handle to locate the function table entry corresponding to the adapter function, STEP <b>410</b>. The zone number in the function table entry is compared with the zone number in which the operating system resides, INQUIRY <b>412</b>. If they do not match, then access is denied (e.g., the instruction is prevented from executing), STEP <b>414</b>. However, if they do match, then a further determination is made, in one example, as to whether access should be blocked for a different reason, INQUIRY <b>416</b>. For instance, the status stored in the function table entry is used to determine if the operating system issued an instruction that is to be blocked while firmware privileged operations are being performed that impact the adapter function, such as recovery, firmware download, etc.</p>
<p id="p-0076" num="0088">If there is an indication that access should be blocked, a further determination is made as to whether that block is temporary, INQUIRY <b>418</b>. That is, if the adapter function is only temporarily unavailable as indicated by, for instance, status in the function table entry, then the instruction can be completed with a busy signal, STEP <b>420</b>, and it can be attempted again. If, however, the adapter function is not just temporarily blocked, then access is denied, STEP <b>422</b>.</p>
<p id="p-0077" num="0089">Returning to INQUIRY <b>416</b>, if access should not be blocked, then access is allowed, STEP <b>424</b>. For instance, the instruction is allowed to execute. This concludes processing.</p>
<p id="p-0078" num="0090">In addition to the above, in a further example, if it is determined that the zone number in the function table entry matches the zone number of the operating system, an additional validation can be performed to allow a guest (e.g., VM guest) direct access to an adapter the guest owns. In this example, a check is performed to see if the guest has access to the adapter. For instance, the function table entry is checked for the guest id. If it is stored in the entry, then processing continues; if not, the request is denied.</p>
<p id="p-0079" num="0091">The above access control capability is employed for instructions issued to the adapter function by the configuration, such as PCI Load, PCI Store, PCI Store Block, Modify PCI Function Controls and various call logical processor CLP instructions used, for instance, to query or enable/disable the adapter function. In this example, the instructions are PCI instructions, since the adapter functions are PCI adapter functions. However, in other examples, other I/O architecture specific instructions may be used depending on the architecture of the adapter functions.</p>
<p id="p-0080" num="0092">Further details regarding some of the instructions are described below. For instance, in order to use a PCI function, it is to be enabled. For example, the operating system that would like to use a PCI function performs a query to determine the one or more functions that it is eligible to use (based on I/O configuration), and selects one of those functions to be enabled. In one example, the function is enabled using a set PCI function command of a Call Logical Processor instruction. One embodiment of this instruction is depicted in <figref idref="DRAWINGS">FIG. 5A</figref>. As shown, in one example, a Call Logical Processor instruction <b>500</b> includes an operation code <b>502</b> indicating that it is the Call Logical Processor instruction; and an indication for a command <b>504</b>. In one example, this indication is an address of a request block that describes the command to be performed. One embodiment of such a request block is depicted in <figref idref="DRAWINGS">FIG. 5B</figref>.</p>
<p id="p-0081" num="0093">As shown in <figref idref="DRAWINGS">FIG. 5B</figref>, in one example, a request block <b>520</b> includes a number of parameters, such as, for instance, a length field <b>522</b> indicating the length of the request block; a command field <b>524</b> indicating the set PCI function command; a PCI function handle <b>526</b>, which is the handle to be provided to either the enable or disable function; an operation code <b>528</b>, which is used to designate either an enable or disable operation; and a number of DMA address spaces (DMAAS) <b>530</b>, which indicates the requested number of address spaces to be associated with the particular PCI function. More, less or different information may be included in other embodiments. For instance, in a virtual environment in which the instruction is issued by a host of a pageable storage mode guest, a guest identity is provided. Other variations are also possible.</p>
<p id="p-0082" num="0094">Responsive to issuing and processing the Call Logical Processor instruction, a response block is returned and the information included in the response block is dependent on the operation to be performed. One embodiment of the response block is depicted in <figref idref="DRAWINGS">FIG. 5C</figref>. In one example, response block <b>550</b> includes a length field <b>552</b> indicating the length of the response block; a response code <b>554</b> indicating a status of the command; and a PCI function handle <b>556</b> that identifies the PCI function. Responsive to the enable command, the PCI function handle is an enabled handle of the PCI function. Further, upon completion of the disable operation, the PCI function handle is a general handle that can be enabled by an enable function in the future.</p>
<p id="p-0083" num="0095">One embodiment of the logic to enable a PCI function is described with reference to <figref idref="DRAWINGS">FIG. 6</figref>. In one example, this logic is initiated responsive to issuing a Call Logical Processor instruction in which the command is set to the set PCI function command and the operation code is set to the enable function. This logic is performed by, for instance, a processor responsive to the operating system or a device driver of the operating system authorized to perform this logic issuing the instruction. In other embodiments, the logic may be performed without the use of the Call Logical Processor instruction.</p>
<p id="p-0084" num="0096">Referring to <figref idref="DRAWINGS">FIG. 6</figref>, initially, a determination is made as to whether a handle provided in the request block of the Call Logical Processor instruction is a valid handle, INQUIRY <b>600</b>. That is, does the handle point to a valid entry in the function table or is it outside the range of valid entries (e.g., does function number portion of handle designate an installed function). If the handle is not known, then a corresponding response code is provided indicating that the handle is not recognized, STEP <b>602</b>. However, if the handle is known, then a further inquiry is made as to whether the handle is enabled, INQUIRY <b>604</b>. This determination is made by checking the enable indicator in the PCI function handle. If the indication is set indicating the handle is enabled, then a response code is returned indicating such, STEP <b>606</b>.</p>
<p id="p-0085" num="0097">However, if the handle is known and not enabled (i.e., valid for enablement), then a further determination is made as to whether the requested number of address spaces to be assigned to the PCI function is greater than a maximum value, INQUIRY <b>608</b>. To make this determination, the number of DMA address spaces as specified in the request block is compared against a maximum value (provided based on policy, in one example). If the number of address spaces is greater than the maximum value, then a response code is provided indicating an invalid value for DMA address spaces, STEP <b>610</b>. Otherwise, a determination is made as to whether the number of requested address spaces is available, INQUIRY <b>612</b>. This determination is made by checking whether there are device table entries available for the requested number of address spaces. If the number of requested address spaces is not available, then a response code is returned indicating that there are insufficient resources, STEP <b>614</b>. Otherwise, processing continues to enable the PCI function.</p>
<p id="p-0086" num="0098">The provided handle is used to locate a function table entry, STEP <b>616</b>. For instance, one or more designated bits of the handle are used as an index into the function table to locate a particular function table entry. Responsive to locating the appropriate function table entry, a determination is made as to whether the function is enabled, INQUIRY <b>618</b>. This determination is made by checking the enable indicator in the function table entry. If the function is already enabled (i.e., the indicator is set to one), then a response code is returned indicating that the PCI function is already in the requested state, STEP <b>620</b>.</p>
<p id="p-0087" num="0099">If the function is not already enabled, then processing continues with determining whether the function is in a permanent error state, INQUIRY <b>622</b>. If the permanent error state indicator in the function table entry indicates it is in a permanent error state, then a response code is returned indicating such, STEP <b>624</b>. However, if the function is not in a permanent error state, a further determination is made as to whether error recovery has been initiated for the function, INQUIRY <b>626</b>. If the recovery initiated indicator in the function table entry is set, then a response code indicating recovery has been initiated is provided, STEP <b>628</b>. Otherwise, a further inquiry is made as to whether the PCI function is busy, INQUIRY <b>630</b>. Again, if a check of the busy indicator in the function table entry indicates the PCI function is busy, then such an indication is provided, STEP <b>632</b>. However, if the PCI function is not in the permanent error state, recovery is not initiated and it is not busy, then a further inquiry is made as to whether the operating system is permitted to enable this PCI function, STEP <b>634</b>.</p>
<p id="p-0088" num="0100">In one example, the permission checking includes validating the zone number in the FTE to that of the operating system issuing the instruction. If they are not equal, then the operating system is not permitted. If they are equal, then a permission indicator in the function table entry is checked. If it is not permitted based on the permission indicator of the function table entry, then a response code indicating an unauthorized action is provided, STEP <b>636</b>. However, if all the tests are successfully passed, then a further determination is made as to whether there are any DTEs available for this PCI function, INQUIRY <b>638</b>. As examples, the determination of DTEs being available can be based on the DTEs that are not currently enabled in the I/O hub. Additionally, policy could be applied to further limit the number of DTEs available to a given operating system or logical partition. Any available DTE that is accessible to the adapter may be assigned. If there are no available DTEs, then a response code is returned indicating that one or more of the requested DTEs are unavailable, STEP <b>640</b>.</p>
<p id="p-0089" num="0101">If the DTEs are available, then a number of DTEs corresponding to the requested number of address spaces are assigned and enabled, STEP <b>642</b>. In one example, the enabling includes setting the enable indicator in each DTE to be enabled. Further, the enabling includes, in this example, setting up a contents addressable memory (CAM) to provide an index to each DTE. For instance, for each DTE, an entry in the CAM is loaded with the index, and the CAM facilitates location of a DTE.</p>
<p id="p-0090" num="0102">Further, the DTEs are associated with the function table entry, STEP <b>644</b>. This includes, for instance, including each DTE index in the function table entry. The function is then marked as enabled by setting the enable indicator in the function table entry, STEP <b>646</b>. Moreover, the enable bit in the handle is set, and the instance number is updated, STEP <b>648</b>. This enabled handle is then returned, STEP <b>650</b>, allowing use of the PCI adapter. For instance, responsive to enabling the function, registration for address translations and interruptions may be performed, DMA operations may be performed by the PCI function, and/or load, store and store block instructions may be issued to the function.</p>
<p id="p-0091" num="0103">As indicated above, after enabling the function, various operational parameters are set in the DTE and/or FTE via, the Modify PCI Function Controls instruction. One example of the Modify PCI Function Controls instruction is described with reference to <figref idref="DRAWINGS">FIGS. 7A-7D</figref>.</p>
<p id="p-0092" num="0104">Referring to <figref idref="DRAWINGS">FIG. 7A</figref>, a Modify PCI Function Controls instruction <b>700</b> includes, for instance, an op code <b>702</b> indicating the Modify PCI Function Controls instruction; a first field <b>704</b> specifying a location at which various information is included regarding the adapter function for which the operational parameters are being established; and a second field <b>706</b> specifying a location from which a PCI function information block (FIB) is fetched. The contents of the locations designated by Fields <b>1</b> and <b>2</b> are further described below.</p>
<p id="p-0093" num="0105">In one embodiment, Field <b>1</b> designates a general register that includes various information. As shown in <figref idref="DRAWINGS">FIG. 7B</figref>, the contents of the register include, for instance, a function handle <b>710</b> that identifies the handle of the adapter function on behalf of which the modify instruction is being performed; an address space <b>712</b> designating an address space in system memory associated with the adapter function designated by the function handle; an operation control <b>714</b> which specifies the operation to be performed for the adapter function; and status <b>716</b> which provides status regarding the instruction when the instruction completes with a predefined code.</p>
<p id="p-0094" num="0106">In one example, as shown in <figref idref="DRAWINGS">FIG. 7C</figref>, Field <b>2</b> designates a logical address <b>720</b> of a PCI function information block (FIB), which includes information regarding an associated adapter function. The function information block is used, in accordance with an aspect of the present invention, to update a device table entry and/or function table entry (or other location) associated with the adapter function. The information is stored in the FIB during initialization and/or configuration of the adapter, and/or responsive to a particular event.</p>
<p id="p-0095" num="0107">Further details regarding a function information block are described with reference to <figref idref="DRAWINGS">FIG. 7D</figref>. In one embodiment, a function information block <b>750</b> includes the following fields:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0108">Format <b>751</b>: This field specifies the format of the FIB.</li>
        <li id="ul0004-0002" num="0109">Interception Control <b>752</b>: This field is used to indicate whether guest execution of specific instructions by a pageable mode guest results in instruction interception;</li>
        <li id="ul0004-0003" num="0110">Error Indication <b>754</b>: This field includes the error state indication for direct memory access and adapter interruptions. When the bit is set (e.g., 1), one or more errors have been detected while performing direct memory access or adapter interruption for the adapter function;</li>
        <li id="ul0004-0004" num="0111">Load/Store Blocked <b>756</b>: This field indicates whether load/store operations are blocked;</li>
        <li id="ul0004-0005" num="0112">PCI Function Valid <b>758</b>: This field includes an enablement control for the adapter function. When the bit is set (e.g., 1), the adapter function is considered to be enabled for I/O operations;</li>
        <li id="ul0004-0006" num="0113">Address Space Registered <b>760</b>: This field includes a direct memory access enablement control for an adapter function. When the field is set (e.g., 1) direct memory access is enabled;</li>
        <li id="ul0004-0007" num="0114">Page Size <b>761</b>: This field indicates the size of the page or other unit of memory to be accessed by a DMA memory access;</li>
        <li id="ul0004-0008" num="0115">PCI Base Address (PBA) <b>762</b>: This field is a base address for an address space in system memory assigned to the adapter function. It represents the lowest virtual address that an adapter function is allowed to use for direct memory access to the specified DMA address space;</li>
        <li id="ul0004-0009" num="0116">PCI Address Limit (PAL) <b>764</b>: This field represents the highest virtual address that an adapter function is allowed to access within the specified DMA address space;</li>
        <li id="ul0004-0010" num="0117">Input/Output Address Translation Pointer (IOAT) <b>766</b>: The input/output address translation pointer designates the first of any translation tables used by a PCI virtual address translation, or it may directly designate the absolute address of a frame of storage that is the result of translation;</li>
        <li id="ul0004-0011" num="0118">Interruption Subclass (ISC) <b>768</b>: This field includes the interruption subclass used to present adapter interruptions for the adapter function;</li>
        <li id="ul0004-0012" num="0119">Number of Interruptions (NOI) <b>770</b>: This field designates the number of distinct interruption codes accepted for an adapter function. This field also defines the size, in bits, of the adapter interruption bit vector designated by an adapter interruption bit vector address and adapter interruption bit vector offset fields;</li>
        <li id="ul0004-0013" num="0120">Adapter Interruption Bit Vector Address (AIBV) <b>772</b>: This field specifies an address of the adapter interruption bit vector for the adapter function. This vector is used in interrupt processing;</li>
        <li id="ul0004-0014" num="0121">Adapter Interruption Bit Vector Offset <b>774</b>: This field specifies the offset of the first adapter interruption bit vector bit for the adapter function;</li>
        <li id="ul0004-0015" num="0122">Adapter Interruption Summary Bit Address (AISB) <b>776</b>: This field provides an address designating the adapter interruption summary bit, which is optionally used in interrupt processing;</li>
        <li id="ul0004-0016" num="0123">Adapter Interruption Summary Bit Offset <b>778</b>: This field provides the offset into the adapter interruption summary bit vector;</li>
        <li id="ul0004-0017" num="0124">Function Measurement Block (FMB) Address <b>780</b>: This field provides an address of a function measurement block used to collect measurements regarding the adapter function;</li>
        <li id="ul0004-0018" num="0125">Function Measurement Block Key <b>782</b>: This field includes an access key to access the function measurement block;</li>
        <li id="ul0004-0019" num="0126">Summary Bit Notification Control <b>784</b>: This field indicates whether there is a summary bit vector being used;</li>
        <li id="ul0004-0020" num="0127">Instruction Authorization Token <b>786</b>: This field is used to determine whether a pageable storage mode guest (e.g., V=V guest) is authorized to execute PCI instructions without host intervention; and</li>
        <li id="ul0004-0021" num="0128">Address Translation Format <b>787</b>: This field indicates a selected format for address translation of the highest level translation table to be used in translation (e.g., segment table, region 3rd, etc.).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0096" num="0129">The information in the function information block is obtained during configuration, initialization, and/or occurrence of a particular event.</p>
<p id="p-0097" num="0130">The function information block designated in the Modify PCI Function Controls instruction is used, in accordance with an aspect of the present invention, to modify a selected device table entry, a function table entry and/or other firmware controls associated with the adapter function designated in the instruction. By modifying the device table entry, function table entry and/or other firmware controls, certain services are provided for the adapter. These services include, for instance, adapter interruptions; address translations; reset error state; reset load/store blocked; set function measurement parameters; and set interception control.</p>
<p id="p-0098" num="0131">One embodiment of the logic associated with the Modify PCI Function Controls instruction is described with reference to <figref idref="DRAWINGS">FIG. 8</figref>. In one example, the instruction is issued by an operating system (or other configuration) and executed by the processor (e.g., firmware) executing the operating system. In the examples herein, the instruction and adapter functions are PCI based. However, in other examples, a different adapter architecture and corresponding instructions may be used.</p>
<p id="p-0099" num="0132">In one example, the operating system provides the following operands to the instruction (e.g., in one or more registers designated by the instruction): the PCI function handle; the DMA address space identifier; an operation control; and an address of the function information block.</p>
<p id="p-0100" num="0133">Referring to <figref idref="DRAWINGS">FIG. 8</figref>, initially, a determination is made as to whether the facility allowing for a Modify PCI Function Controls instruction is installed, INQUIRY <b>800</b>. This determination is made by, for instance, checking an indicator stored in, for instance, a control block. If the facility is not installed, an exception condition is provided, STEP <b>802</b>. Otherwise, a determination is made as to whether the instruction was issued by a pageable storage mode guest (or other guest), INQUIRY <b>804</b>. If yes, the host operating system will emulate the operation for that guest, STEP <b>806</b>.</p>
<p id="p-0101" num="0134">Otherwise, a determination is made as to whether one or more of the operands are aligned, INQUIRY <b>808</b>. For instance, a determination is made as to whether the address of the function information block is on a double word boundary. In one example, this is optional. If the operands are not aligned, then an exception condition is provided, STEP <b>810</b>. Otherwise, a determination is made as to whether the function information block is accessible, INQUIRY <b>812</b>. If not, then an exception condition is provided, STEP <b>814</b>. Otherwise, a determination is made as to whether the handle provided in the operands of the Modify PCI Function Controls instruction is enabled, INQUIRY <b>816</b>. In one example, this determination is made by checking an enable indicator in the handle. If the handle is not enabled, then an exception condition is provided, STEP <b>818</b>.</p>
<p id="p-0102" num="0135">If the handle is enabled, then the handle is used to locate a function table entry, STEP <b>820</b>. That is, at least a portion of the handle is used as an index into the function table to locate the function table entry corresponding to the adapter function for which operational parameters are to be established.</p>
<p id="p-0103" num="0136">A determination is made as to whether the function table entry was found, INQUIRY <b>822</b>. If not, then an exception condition is provided, STEP <b>824</b>. Otherwise, a determination is made as to whether the operating system is authorized, INQUIRY <b>826</b>. In one example, this includes validating the zone number in the FTE to that of the operating system issuing the instruction. If they are not equal, then the operating system is not authorized. If they are equal, then a further determination is made as to whether the configuration issuing the instruction is a guest. If so, then an exception condition (e.g., an interception to the host) is provided, STEP <b>828</b>. This inquiry may be ignored if the configuration is not a guest or other authorizations may be checked, if designated.</p>
<p id="p-0104" num="0137">A determination is then made as to whether the function is enabled, INQUIRY <b>830</b>. In one example, this determination is made by checking an enable indicator in the function table entry. If it is not enabled, then an exception condition is provided, STEP <b>832</b>.</p>
<p id="p-0105" num="0138">If the function is enabled, then a determination is made as to whether recovery is active, INQUIRY <b>834</b>. If recovery is active as determined by a recovery indicator in the function table entry, then an exception condition is provided, <b>836</b>. However, if recovery is not active, then a further determination is made as to whether the function is busy, <b>838</b>. This determination is made by checking the busy indicator in the function table entry. If the function is busy, then a busy condition is provided, STEP <b>840</b>. With the busy condition, the instruction can be retried, instead of dropped.</p>
<p id="p-0106" num="0139">If the function is not busy, then a further determination is made as to whether the function information block format is valid, INQUIRY <b>842</b>. For instance, the format field of the FIB is checked to determine if this format is supported by the system. If it is invalid, then an exception condition is provided, STEP <b>844</b>. If the function information block format is valid, then a further determination is made as to whether the operation control specified in the operands of the instruction is valid, INQUIRY <b>846</b>. That is, is the operation control one of the specified operation controls for this instruction. If it is invalid, then an exception condition is provided, STEP <b>848</b>. However, if the operation control is valid, then processing continues with the specific operation control being specified.</p>
<p id="p-0107" num="0140">Various operations may be specified including, for instance, registering/unregistering address translations; registering/unregistering adapter interruptions; set interception control; reset error state; reset load/store blocked indicator, etc. For each of these operations, the operational parameters related to the operation are copied from the FIB to the DTE and/or FTE (or other location).</p>
<p id="p-0108" num="0141">Subsequent to initialization, a guest may execute a PCI Load, PCI Store and PCI Store Block instruction, each of which is described below.</p>
<p id="p-0109" num="0142">Referring initially to <figref idref="DRAWINGS">FIG. 9A</figref>, one embodiment of a PCI Load instruction is depicted. As shown, a PCI Load instruction <b>900</b> includes, for instance, an opcode <b>902</b> indicating the PCI Load instruction; a first field <b>904</b> specifying a location at which data fetched from an adapter function will be loaded; and a second field <b>906</b> specifying a location at which various information is included regarding the adapter function from which data is to be loaded. The contents of the locations designated by Fields <b>1</b> and <b>2</b> are further described below.</p>
<p id="p-0110" num="0143">In one example, Field <b>1</b> designates a general register, and as depicted in <figref idref="DRAWINGS">FIG. 9B</figref>, the contents <b>904</b> of that register include a contiguous range of one or more bytes loaded from the location of the adapter function specified in the instruction. In one example, the data is loaded into the rightmost byte positions of the register.</p>
<p id="p-0111" num="0144">In one embodiment, Field <b>2</b> designates a pair of general registers that include various information. As shown in <figref idref="DRAWINGS">FIG. 9C</figref>, the contents of the registers include, for instance:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0145">Enabled Handle <b>910</b>: This field is an enabled function handle of the adapter function from which the data is to be loaded;</li>
        <li id="ul0006-0002" num="0146">Address Space <b>912</b>: This field identifies the address space within the adapter function from which the data is to be loaded;</li>
        <li id="ul0006-0003" num="0147">Offset Within Address Space <b>914</b>: This field specifies the offset within the specified address space from which the data is to be loaded;</li>
        <li id="ul0006-0004" num="0148">Length field <b>916</b>: This field specifies the length of the load operation (e.g., the number of bytes to be loaded); and</li>
        <li id="ul0006-0005" num="0149">Status field <b>918</b>: This field provides a status code which is applicable when the instruction completes with a predefined condition code.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0112" num="0150">In one embodiment, the bytes loaded from the adapter function are to be contained within an integral boundary in the adapter function's designated PCI address space. When the address space field designates a memory address space, the integral boundary size is, for instance, a double word. When the address space field designates an I/O address space or a configuration address space, the integral boundary size is, for instance, a word.</p>
<p id="p-0113" num="0151">One embodiment of the logic associated with a PCI Load instruction is described with reference to <figref idref="DRAWINGS">FIGS. 10A-10B</figref>. In one example, the instruction is issued by an operating system (or other configuration) and executed by the processor (e.g., firmware) executing the operating system. In the examples herein, the instructions and adapter functions are PCI-based. However, in other examples, a different adapter architecture and corresponding instructions may be used.</p>
<p id="p-0114" num="0152">To issue the instruction, the operating system provides the following operands to the instruction (e.g., in one or more registers designated by the instruction): the PCI function handle, the PCI address space (PCIAS), the offset into the PCI address space, and the length of the data to be loaded. Upon successful completion of the PCI Load instruction, the data is loaded in the location (e.g., register) designated by the instruction.</p>
<p id="p-0115" num="0153">Referring to <figref idref="DRAWINGS">FIG. 10A</figref>, initially, a determination is made as to whether the facility allowing for a PCI Load instruction is installed, INQUIRY <b>1000</b>. This determination is made by, for instance, checking an indicator stored in, for instance, a control block. If the facility is not installed, an exception condition is provided, STEP <b>1002</b>. Otherwise, a determination is made as to whether the operands are aligned, INQUIRY <b>1004</b>. For instance, if certain operands need to be in even/odd register pairs, a determination is made as to whether those requirements are met. If the operands are not aligned, then an exception is provided, STEP <b>1006</b>. Otherwise, if the facility is installed and the operands are aligned, a determination is made as to whether the handle provided in the operands of the PCI Load instruction is enabled, INQUIRY <b>1008</b>. In one example, this determination is made by checking an enable indicator in the handle. If the handle is not enabled, then an exception condition is provided, STEP <b>1010</b>.</p>
<p id="p-0116" num="0154">If the handle is enabled, then the handle is used to locate a function table entry, STEP <b>1012</b>. That is, at least a portion of the handle is used as an index into the function table to locate the function table entry corresponding to the adapter function from which data is to be loaded.</p>
<p id="p-0117" num="0155">Thereafter, a determination is made as to whether the operating system is authorized, INQUIRY <b>1014</b>. In one example, this includes validating the zone number in the FTE to that of the operating system issuing the instruction. If they are not equal, then the operating system is not authorized. If they are equal, then a further determination is made as to whether the configuration issuing the instruction is a guest. If so, then an exception condition is provided, STEP <b>1016</b>. This inquiry may be ignored if the configuration is not a guest or other authorizations may be checked, if designated.</p>
<p id="p-0118" num="0156">A determination is then made as to whether the function is enabled, INQUIRY <b>1018</b>. In one example, this determination is made by checking an enable indicator in the function table entry. If it is not enabled, then an exception condition is provided, STEP <b>1020</b>.</p>
<p id="p-0119" num="0157">If the function is enabled, then a determination is made as to whether the address space is valid, INQUIRY <b>1022</b>. For instance, is the specified address space a designated address space of the adapter function and one that is appropriate for this instruction. If the address space is invalid, then an exception condition is provided, STEP <b>1024</b>. Otherwise, a determination is made as to whether load/store is blocked, INQUIRY <b>1026</b>. In one example, this determination is made by checking the status indicator in the function table entry. If load/store is blocked, then an exception condition is provided, STEP <b>1028</b>.</p>
<p id="p-0120" num="0158">However, if load/store is not blocked, a determination is made as to whether recovery is active, INQUIRY <b>1030</b>. In one example, this determination is made by checking the recovery initiated indicator in the function table entry. If recovery is active, then an exception condition is provided, STEP <b>1032</b>. Otherwise, a determination is made as to whether the function is busy, INQUIRY <b>1034</b>. This determination is made by checking the busy indicator in the function table entry. If the function is busy, then a busy condition is provided, STEP <b>1036</b>. With a busy condition, the instruction can be retried, instead of dropped.</p>
<p id="p-0121" num="0159">If the function is not busy, then a further determination is made as to whether the offset specified in the instruction is valid, INQUIRY <b>1038</b>. That is, is the offset in combination with the length of the operation within the base and length of the address space, as specified in the function table entry. If not, then an exception condition is provided, STEP <b>1040</b>. However, if the offset is valid, then a determination is made as to whether the length is valid, INQUIRY <b>1042</b>. That is, subject to the address space type, offset within the address space, and an integral boundary size is the length valid. If not, then an exception condition is provided, STEP <b>1044</b>. Otherwise, processing continues with the load instruction. (In one embodiment, the firmware performs the above checks.)</p>
<p id="p-0122" num="0160">Continuing with <figref idref="DRAWINGS">FIG. 10B</figref>, a determination is made by the firmware as to whether the load is for a configuration address space of the adapter function, INQUIRY <b>1050</b>. That is, based on the configuration of the adapter function's memory, is the specified address space provided in the instruction a configuration space. If so, then the firmware performs various processing to provide the request to a hub coupled to the adapter function; the hub then routes the request to the function, STEP <b>1052</b>.</p>
<p id="p-0123" num="0161">For example, the firmware obtains the requestor ID from the function table entry pointed to by the function handle provided in the instruction operands. Further, the firmware determines based on information in the function table entry (e.g., the internal routing information) the hub to receive this request. That is, an environment may have one or more hubs and the firmware determines the hub coupled to the adapter function. It then forwards the request to the hub. The hub generates a configuration read request packet that flows out on the PCI bus to the adapter function identified by the RID in the function table entry. The configuration read request includes the RID and offset (i.e., data address) that are used to fetch the data, as described below.</p>
<p id="p-0124" num="0162">Returning to INQUIRY <b>1050</b>, if the designated address space is not a configuration space, then once again the firmware performs various processing to provide the request to the hub, STEP <b>1054</b>. The firmware uses the handle to select a function table entry and from that entry it obtains information to locate the appropriate hub. It also calculates a data address to be used in the load operation. This address is calculated by adding the BAR starting address (with the BAR being that associated with the address space identifier provided in the instruction) obtained from the function table entry to the offset provided in the instruction. This calculated data address is provided to the hub. The hub then takes that address and includes it in a request packet, such as a DMA read request packet, that flows out over the PCI bus to the adapter function.</p>
<p id="p-0125" num="0163">Responsive to receiving the request either via STEP <b>1052</b> or STEP <b>1054</b>, the adapter function fetches the requested data from the specified location (i.e., at the data address) and returns that data in a response to the request, STEP <b>1056</b>. The response is forwarded from the adapter function to the I/O hub. Responsive to receiving the response, the hub forwards the response to the initiating processor. The initiating processor then takes the data from the response packet and loads it in the designated location specified in the instruction (e.g., field <b>1</b>). The PCI Load operation concludes with an indication of success (e.g., setting a condition code of zero).</p>
<p id="p-0126" num="0164">In addition to a load instruction that retrieves data from an adapter function and stores it in a designated location, another instruction that may be executed is a store instruction. The store instruction stores data at a specified location in the adapter function. One embodiment of a PCI Store instruction is described with reference to <figref idref="DRAWINGS">FIG. 11A</figref>. As shown, a PCI Store instruction <b>1100</b> includes, for instance, an opcode <b>1102</b> indicating the PCI Store instruction; a first field <b>1104</b> specifying a location that includes data to be stored in an adapter function; and a second field <b>1106</b> specifying a location at which various information is included regarding the adapter function to which data is to be stored. The contents of the locations designated by Fields <b>1</b> and <b>2</b> are further described below.</p>
<p id="p-0127" num="0165">In one example, Field <b>1</b> designates a general register, and as depicted in <figref idref="DRAWINGS">FIG. 11B</figref>, the contents <b>1104</b> of that register include a contiguous range of one or more bytes of data to be stored into the specified location of an adapter function. In one example, the data in the rightmost byte positions of the register are stored.</p>
<p id="p-0128" num="0166">In one embodiment, Field <b>2</b> designates a pair of general registers that include various information. As shown in <figref idref="DRAWINGS">FIG. 11B</figref>, the contents of the register include, for instance:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0167">Enabled Handle <b>1110</b>: This field is an enabled function handle of the adapter function to which the data is to be stored;</li>
        <li id="ul0008-0002" num="0168">Address Space <b>1112</b>: This field identifies the address space within the adapter function to which the data is to be stored;</li>
        <li id="ul0008-0003" num="0169">Offset Within Address Space <b>1114</b>: This field specifies the offset within the specified address space to which the data is to be stored;</li>
        <li id="ul0008-0004" num="0170">Length field <b>1116</b>: This field specifies the length of the store operation (e.g., the number of bytes to be stored); and</li>
        <li id="ul0008-0005" num="0171">Status field <b>1118</b>: This field provides a status code which is applicable when the instruction completes with a predefined condition code.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0129" num="0172">On embodiment of the logic associated with a PCI Store instruction is described with reference to <figref idref="DRAWINGS">FIGS. 12A-12B</figref>. In one example, the instruction is issued by an operating system, and executed by the processor (e.g., firmware) executing the operating system.</p>
<p id="p-0130" num="0173">To issue the instruction, the operating system provides the following operands to the instruction (e.g., in one or more registers designated by the instruction): the PCI function handle, the PCI address space (PCIAS), the offset into the PCI address space, the length of the data to be stored, and a pointer to the data to be stored. Upon successful completion of the PCI Store instruction, the data is stored in the location designated by the instruction.</p>
<p id="p-0131" num="0174">Referring to <figref idref="DRAWINGS">FIG. 12A</figref>, initially, a determination is made as to whether the facility allowing for a PCI Store instruction is installed, INQUIRY <b>1200</b>. This determination is made by, for instance, checking an indicator stored in, for instance, a control block. If the facility is not installed, an exception condition is provided, STEP <b>1202</b>. Otherwise, a determination is made as to whether the operands are aligned, INQUIRY <b>1204</b>. For instance, if certain operands need to be in even/odd register pairs, a determination is made as to whether those requirements are met. If the operands are not aligned, then an exception is provided, STEP <b>1206</b>. Otherwise, if the facility is installed and the operands are aligned, a determination is made as to whether the handle provided in the operands of the PCI Store instruction is enabled, INQUIRY <b>1208</b>. In one example, this determination is made by checking an enable indicator in the handle. If the handle is not enabled, then an exception condition is provided, STEP <b>1210</b>.</p>
<p id="p-0132" num="0175">If the handle is enabled, then the handle is used to locate a function table entry, STEP <b>1212</b>. That is, at least a portion of the handle is used as an index into the function table to locate the function table entry corresponding to the adapter function at which data is to be stored.</p>
<p id="p-0133" num="0176">Thereafter, a determination is made as to whether the operating system is authorized, INQUIRY <b>1214</b>. In one example, this includes validating the zone number in the FTE to that of the operating system issuing the instruction. If they are not equal, then the operating system is not authorized. If they are equal, then a further determination is made as to whether the configuration issuing the instruction is a guest. If so, then an exception condition is provided, STEP <b>1216</b>. This inquiry may be ignored if the configuration is not a guest or other authorizations may be checked, if designated.</p>
<p id="p-0134" num="0177">A determination is then made as to whether the function is enabled, INQUIRY <b>1218</b>. In one example, this determination is made by checking an enable indicator in the function table entry. If it is not enabled, then an exception condition is provided, STEP <b>1220</b>.</p>
<p id="p-0135" num="0178">If the function is enabled, then a determination is made as to whether the address space is valid, INQUIRY <b>1222</b>. For instance, is the specified address space a designated address space of the adapter function and one that is appropriate for this instruction. If the address space is invalid, then an exception condition is provided, STEP <b>1224</b>. Otherwise, a determination is made as to whether load/store is blocked, INQUIRY <b>1226</b>. In one example, this determination is made by checking the status indicator in the function table entry. If load/store is blocked, then an exception condition is provided, STEP <b>1228</b>.</p>
<p id="p-0136" num="0179">However, if the load/store is not blocked, a determination is made as to whether recovery is active, INQUIRY <b>1230</b>. In one example, this determination is made by checking the recovery initiated indicator in the function table entry. If recovery is active, then an exception condition is provided, STEP <b>1232</b>. Otherwise, a determination is made as to whether the function is busy, INQUIRY <b>1234</b>. This determination is made by checking the busy indicator in the function table entry. If the function is busy, then a busy condition is provided, STEP <b>1236</b>. With a busy condition, the instruction can be retried, instead of dropped.</p>
<p id="p-0137" num="0180">If the function is not busy, then a further determination is made as to whether the offset specified in the instruction is valid, INQUIRY <b>1238</b>. That is, is the offset in combination with the length of the operation within the base and length of the address space, as specified in the function table entry. If not, then an exception condition is provided, STEP <b>1240</b>. However, if the offset is valid, then a determination is made as to whether the length is valid, INQUIRY <b>1242</b>. That is, subject to the address space type, offset within the address space, and an integral boundary size is the length valid. If not, then an exception condition is provided, STEP <b>1244</b>. Otherwise, processing continues with the store instruction. (In one embodiment, the firmware performs the above checks.)</p>
<p id="p-0138" num="0181">Continuing with <figref idref="DRAWINGS">FIG. 12B</figref>, a determination is made by the firmware as to whether the store is for a configuration address space of the adapter function, INQUIRY <b>1250</b>. That is, based on the configuration of the adapter function's memory, is the specified address space provided in the instruction a configuration space. If so, then the firmware performs various processing to provide the request to a hub coupled to the adapter function; the hub then routes the request to the function, STEP <b>1252</b>.</p>
<p id="p-0139" num="0182">For example, the firmware obtains the requestor id from the function table entry pointed to by the function handle provided in the instruction operands. Further, the firmware determines based on information in the function table entry (e.g., the internal routing information) the hub to receive this request. That is, an environment may have one or more hubs and the firmware determines the hub coupled to the adapter function. It then forwards the request to the hub. The hub generates a configuration write request packet that flows out on the PCI bus to the adapter function identified by the RID in the function table entry. The configuration write request includes the RID and offset (i.e., data address) that are used to store the data, as described below.</p>
<p id="p-0140" num="0183">Returning to INQUIRY <b>1250</b>, if the designated address space is not a configuration space, then once again the firmware performs various processing to provide the request to the hub, STEP <b>1254</b>. The firmware uses the handle to select a function table entry and from that entry it obtains information to locate the appropriate hub. It also calculates a data address to be used in the store operation. This address is calculated by adding the BAR starting address obtained from the function table entry to the offset provided in the instruction. This calculated data address is provided to the hub. The hub then takes that address and includes it in a request packet, such as a DMA write request packet, that flows out over the PCI bus to the adapter function.</p>
<p id="p-0141" num="0184">Responsive to receiving the request either via STEP <b>1252</b> or STEP <b>1254</b>, the adapter function stores the requested data at the specified location (i.e., at the data address), STEP <b>1256</b>. The PCI Store operation concludes with an indication of success (e.g., setting a condition code of zero).</p>
<p id="p-0142" num="0185">In addition to the load and store instructions, which typically load or store a maximum of, e.g., 8 bytes, another instruction that may be executed is a store block instruction. The store block instruction stores larger blocks of data (e.g., 16, 32, 64, 128 or 256 bytes) at a specified location in the adapter function; the block sizes are not necessarily limited to powers of two in size. In one example, the specified location is in a memory space of the adapter function (not an I/O or configuration space).</p>
<p id="p-0143" num="0186">One embodiment of a PCI Store Block instruction is described with reference to <figref idref="DRAWINGS">FIG. 13A</figref>. As shown, a PCI Store Block instruction <b>1300</b> includes, for instance, an opcode <b>1302</b> indicating the PCI Store Block instruction; a first field <b>804</b> specifying a location at which various information is included regarding the adapter function to which data is to be stored; a second field <b>1306</b> specifying a location that includes an offset within the specified address space into which the data is to be stored; and a third field <b>1308</b> specifying a location that includes a system memory address of data to be stored in the adapter function. The contents of the locations designated by Fields <b>1</b>, <b>2</b> and <b>3</b> are further described below.</p>
<p id="p-0144" num="0187">In one embodiment, Field <b>1</b> designates a general register that includes various information. As shown in <figref idref="DRAWINGS">FIG. 13B</figref>, the contents of the register include, for instance:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0188">Enabled Handle <b>1310</b>: This field is an enabled function handle of the adapter function to which the data is to be stored;</li>
        <li id="ul0010-0002" num="0189">Address Space <b>1312</b>: This field identifies the address space within the adapter function to which the data is to be stored;</li>
        <li id="ul0010-0003" num="0190">Length field <b>1314</b>: This field specifies the length of the store operation (e.g., the number of bytes to be stored); and</li>
        <li id="ul0010-0004" num="0191">Status field <b>1316</b>: This field provides a status code which is applicable when the instruction completes with a predefined condition code.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0145" num="0192">In one example, Field <b>2</b> designates a general register, and as depicted in <figref idref="DRAWINGS">FIG. 13C</figref>, the contents of the register include a value (e.g., 64-bit unsigned integer) that specifies the offset within the specified address space into which the data is to be stored.</p>
<p id="p-0146" num="0193">In one example, Field <b>3</b>, as depicted in <figref idref="DRAWINGS">FIG. 13D</figref>, includes the logical address of the first byte of data in system memory <b>1322</b> to be stored in the adapter function.</p>
<p id="p-0147" num="0194">One embodiment of the logic associated with a PCI Store Block instruction is described with reference to <figref idref="DRAWINGS">FIGS. 14A-14B</figref>. In one example, the instruction is issued by an operating system, and executed by the processor (e.g., firmware) executing the operating system.</p>
<p id="p-0148" num="0195">To issue the instruction, the operating system provides the following operands to the instruction (e.g., in one or more registers designated by the instruction): the PCI function handle, the PCI address space (PCIAS), the offset into the PCI address space, the length of the data to be stored, and a pointer to the data to be stored. The pointer operand may comprise both a register and a signed or unsigned displacement. Upon successful completion of the PCI Store Block instruction, the data is stored in the location in the adapter designated by the instruction.</p>
<p id="p-0149" num="0196">Referring to <figref idref="DRAWINGS">FIG. 14A</figref>, initially, a determination is made as to whether the facility allowing for a PCI Store Block instruction is installed, INQUIRY <b>1400</b>. This determination is made by, for instance, checking an indicator stored in, for instance, a control block. If the facility is not installed, an exception condition is provided, STEP <b>1402</b>. Otherwise, if the facility is installed, a determination is made as to whether the handle provided in the operands of the PCI Store Block instruction is enabled, INQUIRY <b>1404</b>. In one example, this determination is made by checking an enable indicator in the handle. If the handle is not enabled, then an exception condition is provided, STEP <b>1406</b>.</p>
<p id="p-0150" num="0197">If the handle is enabled, then the handle is used to locate a function table entry, STEP <b>1412</b>. That is, at least a portion of the handle is used as an index into the function table to locate the function table entry corresponding to the adapter function at which data is to be stored.</p>
<p id="p-0151" num="0198">Thereafter, a determination is made as to whether the operating system is authorized, INQUIRY <b>1414</b>. In one example, this includes validating the zone number in the FTE to that of the operating system issuing the instruction. If they are not equal, then the operating system is not authorized. If they are equal, then a further determination is made as to whether the configuration issuing the instruction is a guest. If so, then an exception condition is provided, STEP <b>1416</b>. This inquiry may be ignored if the configuration is not a guest or other authorizations may be checked, if designated.</p>
<p id="p-0152" num="0199">A determination is then made as to whether the function is enabled, INQUIRY <b>1418</b>. In one example, this determination is made by checking an enable indicator in the function table entry. If it is not enabled, then an exception condition is provided, STEP <b>1420</b>.</p>
<p id="p-0153" num="0200">If the function is enabled, then a determination is made as to whether the address space is valid, INQUIRY <b>1422</b>. For instance, is the specified address space a designated address space of the adapter function and one that is appropriate for this instruction (i.e., a memory space). If the address space is invalid, then an exception condition is provided, STEP <b>1424</b>. Otherwise, a determination is made as to whether load/store is blocked, INQUIRY <b>1426</b>. In one example, this determination is made by checking the status indicator in the function table entry. If load/store is blocked, then an exception condition is provided, STEP <b>1428</b>.</p>
<p id="p-0154" num="0201">However, if the load/store is not blocked, a determination is made as to whether recovery is active, INQUIRY <b>1430</b>. In one example, this determination is made by checking the recovery initiated indicator in the function table entry. If recovery is active, then an exception condition is provided, STEP <b>1432</b>. Otherwise, a determination is made as to whether the function is busy, INQUIRY <b>1434</b>. This determination is made by checking the busy indicator in the function table entry. If the function is busy, then a busy condition is provided, STEP <b>1436</b>. With a busy condition, the instruction can be retried, instead of dropped.</p>
<p id="p-0155" num="0202">If the function is not busy, then a further determination is made as to whether the offset specified in the instruction is valid, INQUIRY <b>1438</b>. That is, is the offset in combination with the length of the operation within the base and length of the address space, as specified in the function table entry. If not, then an exception condition is provided, STEP <b>1440</b>. However, if the offset is valid, then a determination is made as to whether the length is valid, INQUIRY <b>1442</b>. That is, subject to the address space type, offset within the address space, and an integral boundary size is the length valid. If not, then an exception condition is provided, STEP <b>1444</b>. Otherwise, processing continues with the store block instruction. (In one embodiment, the firmware performs the above checks.)</p>
<p id="p-0156" num="0203">Continuing with <figref idref="DRAWINGS">FIG. 14B</figref>, a determination is made by the firmware as to whether the storage that includes the data to be stored is accessible, INQUIRY <b>1450</b>. If not, an exception condition is provided, STEP <b>1452</b>. If so, then the firmware performs various processing to provide the request to a hub coupled to the adapter function; the hub then routes the request to the function, STEP <b>1454</b>.</p>
<p id="p-0157" num="0204">For example, the firmware uses the handle to select a function table entry and from that entry it obtains information to locate the appropriate hub. It also calculates a data address to be used in the store block operation. This address is calculated by adding the BAR starting address (with the BAR being identified by the address space identifier) obtained from the function table entry to the offset provided in the instruction. This calculated data address is provided to the hub. In addition, the data referenced by the address provided in the instruction is fetched from system memory and provided to the I/O hub. The hub then takes that address and data and includes it in a request packet, such as a DMA write request packet, that flows out over the PCI bus to the adapter function.</p>
<p id="p-0158" num="0205">Responsive to receiving the request, the adapter function stores the requested data at the specified location (i.e., at the data address), STEP <b>1456</b>. The PCI Store Block operation concludes with an indication of success (e.g., setting a condition code of zero).</p>
<p id="p-0159" num="0206">Described in detail above is a capability for controlling access by a configuration to a particular adapter function. Each adapter function has a function table entry associated therewith and located within the function table entry is an indication of which configurations (e.g., operating systems, logical partitions, guests, etc.) are allowed access to the adapter function corresponding to the table entry. This is determined by policy, which is reconfigurable. Policy is enforced by firmware when the configuration issues instructions to the adapter function. Instruction execution is modified (e.g., by an indication) when the adapter function is under control of privileged firmware (e.g., in recovery). Access is prevented while the adapter is undergoing system maintenance or for other designated reasons.</p>
<p id="p-0160" num="0207">A configuration is provided direct access to the adapter and does not require the use of separate I/O partitions. Strict isolation between partitions is provided, while providing extremely low latency access to the adapters. No communication between the partitions is needed to control access to the adapters. It provides control without using page tables for adapter specific instructions.</p>
<p id="p-0161" num="0208">In the embodiments described herein, the adapters are PCI adapters. PCI, as used herein, refers to any adapters implemented according to a PCI-based specification as defined by the Peripheral Component Interconnect Special Interest Group (PCI-SIG), including but not limited to, PCI or PCIe. In one particular example, the Peripheral Component Interconnect Express (PCIe) is a component level interconnect standard that defines a bi-directional communication protocol for transactions between I/O adapters and host systems. PCIe communications are encapsulated in packets according to the PCIe standard for transmission on a PCIe bus. Transactions originating at I/O adapters and ending at host systems are referred to as upbound transactions. Transactions originating at host systems and terminating at I/O adapters are referred to as downbound transactions. The PCIe topology is based on point-to-point unidirectional links that are paired (e.g., one upbound link, one downbound link) to form the PCIe bus. The PCIe standard is maintained and published by the PCI-SIG.</p>
<p id="p-0162" num="0209">Other applications filed on the same day include: U.S. Ser. No. 12/821,170, filed Jun. 23, 2010, entitled &#x201c;Translation Of Input/Output Addresses To Memory Addresses,&#x201d; Craddock et al., U.S. Ser. No. 12/821,171, filed Jun. 23, 2010, entitled &#x201c;Runtime Determination Of Translation Formats For Adapter Functions,&#x201d; Craddock et al., U.S. Ser. No. 12/821,172, filed Jun. 23, 2010, entitled &#x201c;Resizing Address Spaces Concurrent To Accessing The Address Spaces,&#x201d; Craddock et al., U.S. Ser. No. 12/821,174, filed Jun. 23, 2010, entitled &#x201c;Multiple Address Spaces Per Adapter,&#x201d; Craddock et al., U.S. Ser. No. 12/821,175, filed Jun. 23, 2010, entitled &#x201c;Converting A Message Signaled Interruption Into An I/O Adapter Event Notification,&#x201d; Craddock et al., U.S. Ser. No. 12/821,177, filed Jun. 23, 2010, entitled &#x201c;Converting A Message Signaled Interruption Into An I/O Adapter Event Notification To A Guest Operating System,&#x201d; Brice et al., U.S. Ser. No. 12/821,178, filed Jun. 23, 2010, entitled &#x201c;Identification Of Types Of Sources Of Adapter Interruptions,&#x201d; Craddock et al., U.S. Ser. No. 12/821,179, filed Jun. 23, 2010, entitled &#x201c;Controlling A Rate At Which Adapter Interruption Requests Are Processed,&#x201d; Belmar et al., U.S. Ser. No. 12/821,181, filed Jun. 23, 2010, entitled &#x201c;Controlling The Selectively Setting Of Operational Parameters For An Adapter,&#x201d; Craddock et al., U.S. Ser. No. 12/821,182, filed Jun. 23, 2010, entitled &#x201c;Load Instruction for Communicating with Adapters,&#x201d; Craddock et al., U.S. Ser. No. 12/821,185, filed Jun. 23, 2010, entitled &#x201c;Discovery By Operating System Of Information Relating To Adapter Functions Accessible To The Operating System,&#x201d; Coneski et al., U.S. Ser. No. 12/821,187, filed Jun. 23, 2010, entitled &#x201c;Enable/Disable Adapters Of A Computing Environment,&#x201d; Coneski et al., U.S. Ser. No. 12/821,190, filed Jun. 23, 2010, entitled &#x201c;Guest Access To Address Spaces Of Adapter,&#x201d; Craddock et al., U.S. Ser. No. 12/821,191, filed Jun. 23, 2010, entitled &#x201c;Managing Processing Associated With Hardware Events,&#x201d; Coneski et al., U.S. Ser. No. 12/821,192, filed Jun. 23, 2010, entitled &#x201c;Operating System Notification Of Actions To Be Taken Responsive To Adapter Events,&#x201d; Craddock et al., U.S. Ser. No. 12/821,193, filed Jun. 23, 2010, entitled &#x201c;Measurement Facility For Adapter Functions,&#x201d; Brice et al., U.S. Ser. No. 12/821,194, filed Jun. 23, 2010, entitled &#x201c;Store/Store Block Instructions for Communicating with Adapters,&#x201d; Craddock et al., U.S. Ser. No. 12/821,224, filed Jun. 21, 2010, entitled &#x201c;Associating Input/Output Device Requests With Memory Associated With A Logical Partition,&#x201d; Craddock et al., U.S. Ser. No. 12/821,247, filed Jun. 23, 2010, entitled &#x201c;Scalable I/O Adapter Function Level Error Detection, Isolation, And Reporting,&#x201d; Craddock et al., U.S. Ser. No. 12/821,256, filed Jun. 23, 2010 entitled &#x201c;Switch Failover Control In A Multiprocessor Computer System,&#x201d; Bayer et al., U.S. Ser. No. 12/821,242, filed Jun. 23, 2010, entitled &#x201c;A System And Method For Downbound I/O Expansion Request And Response Processing In A PCIe Architecture,&#x201d; Gregg et al., U.S. Ser. No. 12/821,243, filed Jun. 23, 2010, entitled &#x201c;Upbound Input/Output Expansion Request And Response Processing In A PCIe Architecture,&#x201d; Gregg et al., U.S. Ser. No. 12/821,245, filed Jun. 23, 2010, entitled &#x201c;A System And Method For Routing I/O Expansion Requests And Responses In A PCIe Architecture,&#x201d; Lais et al.; U.S. Ser. No. 12/821,239, filed Jun. 23, 2010, entitled &#x201c;Input/Output (I/O) Expansion Response Processing In A Peripheral Component Interconnect Express (PCIe) Environment,&#x201d; Gregg et al., U.S. Ser. No. 12/821,271, filed Jun. 23, 2010 entitled &#x201c;Memory Error Isolation And Recovery In A Multiprocessor Computer System,&#x201d; Check et al., U.S. Ser. No. 12/821,248, filed Jun. 23, 2010, entitled &#x201c;Connected Input/Output Hub Management,&#x201d; Bayer et al., each of which is hereby incorporated herein by reference in its entirety.</p>
<p id="p-0163" num="0210">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system&#x201d;. Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0164" num="0211">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0165" num="0212">Referring now to <figref idref="DRAWINGS">FIG. 15</figref>, in one example, a computer program product <b>1500</b> includes, for instance, one or more computer readable storage media <b>1502</b> to store computer readable program code means or logic <b>1504</b> thereon to provide and facilitate one or more aspects of the present invention.</p>
<p id="p-0166" num="0213">Program code embodied on a computer readable medium may be transmitted using an appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0167" num="0214">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language, such as Java, Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language, assembler or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0168" num="0215">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0169" num="0216">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0170" num="0217">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0171" num="0218">The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0172" num="0219">In addition to the above, one or more aspects of the present invention may be provided, offered, deployed, managed, serviced, etc. by a service provider who offers management of customer environments. For instance, the service provider can create, maintain, support, etc. computer code and/or a computer infrastructure that performs one or more aspects of the present invention for one or more customers. In return, the service provider may receive payment from the customer under a subscription and/or fee agreement, as examples. Additionally or alternatively, the service provider may receive payment from the sale of advertising content to one or more third parties.</p>
<p id="p-0173" num="0220">In one aspect of the present invention, an application may be deployed for performing one or more aspects of the present invention. As one example, the deploying of an application comprises providing computer infrastructure operable to perform one or more aspects of the present invention.</p>
<p id="p-0174" num="0221">As a further aspect of the present invention, a computing infrastructure may be deployed comprising integrating computer readable code into a computing system, in which the code in combination with the computing system is capable of performing one or more aspects of the present invention.</p>
<p id="p-0175" num="0222">As yet a further aspect of the present invention, a process for integrating computing infrastructure comprising integrating computer readable code into a computer system may be provided. The computer system comprises a computer readable medium, in which the computer medium comprises one or more aspects of the present invention. The code in combination with the computer system is capable of performing one or more aspects of the present invention.</p>
<p id="p-0176" num="0223">Although various embodiments are described above, these are only examples. For example, computing environments of other architectures can incorporate and use one or more aspects of the present invention. As examples, servers other than System z&#xae; servers, such as Power Systems servers or other servers offered by International Business Machines Corporation, or servers of other companies can include, use and/or benefit from one or more aspects of the present invention. Further, although in the example herein, the adapters and PCI hub are considered a part of the server, in other embodiments, they do not have to necessarily be considered a part of the server, but can simply be considered as being coupled to system memory and/or other components of a computing environment. The computing environment need not be a server. Although the adapters are PCI based, one or more aspects of the present invention are usable with other adapters or other I/O components. Adapter and PCI adapter are just examples. Moreover, more, less or different information may be included in the function table entries, device table entries, and/or function handle without departing from the spirit of the present invention. Further, although tables are described, any data structure can be used and the term table is to include all such data structures. Yet further, other instructions may be controlled by one or more aspects of the present invention. Many other variations are possible.</p>
<p id="p-0177" num="0224">Further, other types of computing environments can benefit from one or more aspects of the present invention. As an example, a data processing system suitable for storing and/or executing program code is usable that includes at least two processors coupled directly or indirectly to memory elements through a system bus. The memory elements include, for instance, local memory employed during actual execution of the program code, bulk storage, and cache memory which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.</p>
<p id="p-0178" num="0225">Input/Output or I/O devices (including, but not limited to, keyboards, displays, pointing devices, DASD, tape, CDs, DVDs, thumb drives and other memory media, etc.) can be coupled to the system either directly or through intervening I/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the available types of network adapters.</p>
<p id="p-0179" num="0226">Referring to <figref idref="DRAWINGS">FIG. 16</figref>, representative components of a Host Computer system <b>5000</b> to implement one or more aspects of the present invention are portrayed. The representative host computer <b>5000</b> comprises one or more CPUs <b>5001</b> in communication with computer memory (i.e., central storage) <b>5002</b>, as well as I/O interfaces to storage media devices <b>5011</b> and networks <b>5010</b> for communicating with other computers or SANs and the like. The CPU <b>5001</b> is compliant with an architecture having an architected instruction set and architected functionality. The CPU <b>5001</b> may have dynamic address translation (DAT) <b>5003</b> for transforming program addresses (virtual addresses) into real addresses of memory. A DAT typically includes a translation lookaside buffer (TLB) <b>5007</b> for caching translations so that later accesses to the block of computer memory <b>5002</b> do not require the delay of address translation. Typically, a cache <b>5009</b> is employed between computer memory <b>5002</b> and the processor <b>5001</b>. The cache <b>5009</b> may be hierarchical having a large cache available to more than one CPU and smaller, faster (lower level) caches between the large cache and each CPU. In some implementations, the lower level caches are split to provide separate low level caches for instruction fetching and data accesses. In one embodiment, an instruction is fetched from memory <b>5002</b> by an instruction fetch unit <b>5004</b> via a cache <b>5009</b>. The instruction is decoded in an instruction decode unit <b>5006</b> and dispatched (with other instructions in some embodiments) to instruction execution unit or units <b>5008</b>. Typically several execution units <b>5008</b> are employed, for example an arithmetic execution unit, a floating point execution unit and a branch instruction execution unit. The instruction is executed by the execution unit, accessing operands from instruction specified registers or memory as needed. If an operand is to be accessed (loaded or stored) from memory <b>5002</b>, a load/store unit <b>5005</b> typically handles the access under control of the instruction being executed. Instructions may be executed in hardware circuits or in internal microcode (firmware) or by a combination of both.</p>
<p id="p-0180" num="0227">As noted, a computer system includes information in local (or main) storage, as well as addressing, protection, and reference and change recording. Some aspects of addressing include the format of addresses, the concept of address spaces, the various types of addresses, and the manner in which one type of address is translated to another type of address. Some of main storage includes permanently assigned storage locations. Main storage provides the system with directly addressable fast-access storage of data. Both data and programs are to be loaded into main storage (from input devices) before they can be processed.</p>
<p id="p-0181" num="0228">Main storage may include one or more smaller, faster-access buffer storages, sometimes called caches. A cache is typically physically associated with a CPU or an I/O processor. The effects, except on performance, of the physical construction and use of distinct storage media are generally not observable by the program.</p>
<p id="p-0182" num="0229">Separate caches may be maintained for instructions and for data operands. Information within a cache is maintained in contiguous bytes on an integral boundary called a cache block or cache line (or line, for short). A model may provide an EXTRACT CACHE ATTRIBUTE instruction which returns the size of a cache line in bytes. A model may also provide PREFETCH DATA and PREFETCH DATA RELATIVE LONG instructions which effects the prefetching of storage into the data or instruction cache or the releasing of data from the cache.</p>
<p id="p-0183" num="0230">Storage is viewed as a long horizontal string of bits. For most operations, accesses to storage proceed in a left-to-right sequence. The string of bits is subdivided into units of eight bits. An eight-bit unit is called a byte, which is the basic building block of all information formats. Each byte location in storage is identified by a unique nonnegative integer, which is the address of that byte location or, simply, the byte address. Adjacent byte locations have consecutive addresses, starting with 0 on the left and proceeding in a left-to-right sequence. Addresses are unsigned binary integers and are 24, 31, or 64 bits.</p>
<p id="p-0184" num="0231">Information is transmitted between storage and a CPU or a channel subsystem one byte, or a group of bytes, at a time. Unless otherwise specified, in, for instance, the z/Architecture&#xae;, a group of bytes in storage is addressed by the leftmost byte of the group. The number of bytes in the group is either implied or explicitly specified by the operation to be performed. When used in a CPU operation, a group of bytes is called a field. Within each group of bytes, in, for instance, the z/Architecture&#xae;, bits are numbered in a left-to-right sequence. In the z/Architecture&#xae;, the leftmost bits are sometimes referred to as the &#x201c;high-order&#x201d; bits and the rightmost bits as the &#x201c;low-order&#x201d; bits. Bit numbers are not storage addresses, however. Only bytes can be addressed. To operate on individual bits of a byte in storage, the entire byte is accessed. The bits in a byte are numbered 0 through 7, from left to right (in, e.g., the z/Architecture). The bits in an address may be numbered 8-31 or 40-63 for 24-bit addresses, or 1-31 or 33-63 for 31-bit addresses; they are numbered 0-63 for 64-bit addresses. Within any other fixed-length format of multiple bytes, the bits making up the format are consecutively numbered starting from 0. For purposes of error detection, and in preferably for correction, one or more check bits may be transmitted with each byte or with a group of bytes. Such check bits are generated automatically by the machine and cannot be directly controlled by the program. Storage capacities are expressed in number of bytes. When the length of a storage-operand field is implied by the operation code of an instruction, the field is said to have a fixed length, which can be one, two, four, eight, or sixteen bytes. Larger fields may be implied for some instructions. When the length of a storage-operand field is not implied but is stated explicitly, the field is said to have a variable length. Variable-length operands can vary in length by increments of one byte (or with some instructions, in multiples of two bytes or other multiples). When information is placed in storage, the contents of only those byte locations are replaced that are included in the designated field, even though the width of the physical path to storage may be greater than the length of the field being stored.</p>
<p id="p-0185" num="0232">Certain units of information are to be on an integral boundary in storage. A boundary is called integral for a unit of information when its storage address is a multiple of the length of the unit in bytes. Special names are given to fields of 2, 4, 8, and 16 bytes on an integral boundary. A halfword is a group of two consecutive bytes on a two-byte boundary and is the basic building block of instructions. A word is a group of four consecutive bytes on a four-byte boundary. A doubleword is a group of eight consecutive bytes on an eight-byte boundary. A quadword is a group of 16 consecutive bytes on a 16-byte boundary. When storage addresses designate halfwords, words, doublewords, and quadwords, the binary representation of the address contains one, two, three, or four rightmost zero bits, respectively. Instructions are to be on two-byte integral boundaries. The storage operands of most instructions do not have boundary-alignment requirements.</p>
<p id="p-0186" num="0233">On devices that implement separate caches for instructions and data operands, a significant delay may be experienced if the program stores into a cache line from which instructions are subsequently fetched, regardless of whether the store alters the instructions that are subsequently fetched.</p>
<p id="p-0187" num="0234">In one embodiment, the invention may be practiced by software (sometimes referred to licensed internal code, firmware, micro-code, milli-code, pico-code and the like, any of which would be consistent with the present invention). Referring to <figref idref="DRAWINGS">FIG. 16</figref>, software program code which embodies the present invention is typically accessed by processor <b>5001</b> of the host system <b>5000</b> from long-term storage media devices <b>5011</b>, such as a CD-ROM drive, tape drive or hard drive. The software program code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed to users from computer memory <b>5002</b> or storage of one computer system over a network <b>5010</b> to other computer systems for use by users of such other systems.</p>
<p id="p-0188" num="0235">The software program code includes an operating system which controls the function and interaction of the various computer components and one or more application programs. Program code is normally paged from storage media device <b>5011</b> to the relatively higher-speed computer storage <b>5002</b> where it is available for processing by processor <b>5001</b>. The techniques and methods for embodying software program code in memory, on physical media, and/or distributing software code via networks are well known and will not be further discussed herein. Program code, when created and stored on a tangible medium (including but not limited to electronic memory modules (RAM), flash memory, Compact Discs (CDs), DVDs, Magnetic Tape and the like is often referred to as a &#x201c;computer program product&#x201d;. The computer program product medium is typically readable by a processing circuit preferably in a computer system for execution by the processing circuit.</p>
<p id="p-0189" num="0236"><figref idref="DRAWINGS">FIG. 17</figref> illustrates a representative workstation or server hardware system in which the present invention may be practiced. The system <b>5020</b> of <figref idref="DRAWINGS">FIG. 17</figref> comprises a representative base computer system <b>5021</b>, such as a personal computer, a workstation or a server, including optional peripheral devices. The base computer system <b>5021</b> includes one or more processors <b>5026</b> and a bus employed to connect and enable communication between the processor(s) <b>5026</b> and the other components of the system <b>5021</b> in accordance with known techniques. The bus connects the processor <b>5026</b> to memory <b>5025</b> and long-term storage <b>5027</b> which can include a hard drive (including any of magnetic media, CD, DVD and Flash Memory for example) or a tape drive for example. The system <b>5021</b> might also include a user interface adapter, which connects the microprocessor <b>5026</b> via the bus to one or more interface devices, such as a keyboard <b>5024</b>, a mouse <b>5023</b>, a printer/scanner <b>5030</b> and/or other interface devices, which can be any user interface device, such as a touch sensitive screen, digitized entry pad, etc. The bus also connects a display device <b>5022</b>, such as an LCD screen or monitor, to the microprocessor <b>5026</b> via a display adapter.</p>
<p id="p-0190" num="0237">The system <b>5021</b> may communicate with other computers or networks of computers by way of a network adapter capable of communicating <b>5028</b> with a network <b>5029</b>. Example network adapters are communications channels, token ring, Ethernet or modems. Alternatively, the system <b>5021</b> may communicate using a wireless interface, such as a CDPD (cellular digital packet data) card. The system <b>5021</b> may be associated with such other computers in a Local Area Network (LAN) or a Wide Area Network (WAN), or the system <b>5021</b> can be a client in a client/server arrangement with another computer, etc. All of these configurations, as well as the appropriate communications hardware and software, are known in the art.</p>
<p id="p-0191" num="0238"><figref idref="DRAWINGS">FIG. 18</figref> illustrates a data processing network <b>5040</b> in which the present invention may be practiced. The data processing network <b>5040</b> may include a plurality of individual networks, such as a wireless network and a wired network, each of which may include a plurality of individual workstations <b>5041</b>, <b>5042</b>, <b>5043</b>, <b>5044</b>. Additionally, as those skilled in the art will appreciate, one or more LANs may be included, where a LAN may comprise a plurality of intelligent workstations coupled to a host processor.</p>
<p id="p-0192" num="0239">Still referring to <figref idref="DRAWINGS">FIG. 18</figref>, the networks may also include mainframe computers or servers, such as a gateway computer (client server <b>5046</b>) or application server (remote server <b>5048</b> which may access a data repository and may also be accessed directly from a workstation <b>5045</b>). A gateway computer <b>5046</b> serves as a point of entry into each individual network. A gateway is needed when connecting one networking protocol to another. The gateway <b>5046</b> may be preferably coupled to another network (the Internet <b>5047</b> for example) by means of a communications link. The gateway <b>5046</b> may also be directly coupled to one or more workstations <b>5041</b>, <b>5042</b>, <b>5043</b>, <b>5044</b> using a communications link. The gateway computer may be implemented utilizing an IBM eServer&#x2122; System z&#xae; server available from International Business Machines Corporation.</p>
<p id="p-0193" num="0240">Referring concurrently to <figref idref="DRAWINGS">FIG. 17</figref> and <figref idref="DRAWINGS">FIG. 18</figref>, software programming code which may embody the present invention may be accessed by the processor <b>5026</b> of the system <b>5020</b> from long-term storage media <b>5027</b>, such as a CD-ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed to users <b>5050</b>, <b>5051</b> from the memory or storage of one computer system over a network to other computer systems for use by users of such other systems.</p>
<p id="p-0194" num="0241">Alternatively, the programming code may be embodied in the memory <b>5025</b>, and accessed by the processor <b>5026</b> using the processor bus. Such programming code includes an operating system which controls the function and interaction of the various computer components and one or more application programs <b>5032</b>. Program code is normally paged from storage media <b>5027</b> to high-speed memory <b>5025</b> where it is available for processing by the processor <b>5026</b>. The techniques and methods for embodying software programming code in memory, on physical media, and/or distributing software code via networks are well known and will not be further discussed herein. Program code, when created and stored on a tangible medium (including but not limited to electronic memory modules (RAM), flash memory, Compact Discs (CDs), DVDs, Magnetic Tape and the like is often referred to as a &#x201c;computer program product&#x201d;. The computer program product medium is typically readable by a processing circuit preferably in a computer system for execution by the processing circuit.</p>
<p id="p-0195" num="0242">The cache that is most readily available to the processor (normally faster and smaller than other caches of the processor) is the lowest (L1 or level one) cache and main store (main memory) is the highest level cache (L3 if there are 3 levels). The lowest level cache is often divided into an instruction cache (I-Cache) holding machine instructions to be executed and a data cache (D-Cache) holding data operands.</p>
<p id="p-0196" num="0243">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, an exemplary processor embodiment is depicted for processor <b>5026</b>. Typically one or more levels of cache <b>5053</b> are employed to buffer memory blocks in order to improve processor performance. The cache <b>5053</b> is a high speed buffer holding cache lines of memory data that are likely to be used. Typical cache lines are 64, 128 or 256 bytes of memory data. Separate caches are often employed for caching instructions than for caching data. Cache coherence (synchronization of copies of lines in memory and the caches) is often provided by various &#x201c;snoop&#x201d; algorithms well known in the art. Main memory storage <b>5025</b> of a processor system is often referred to as a cache. In a processor system having 4 levels of cache <b>5053</b>, main storage <b>5025</b> is sometimes referred to as the level 5 (L5) cache since it is typically faster and only holds a portion of the non-volatile storage (DASD, tape etc) that is available to a computer system. Main storage <b>5025</b> &#x201c;caches&#x201d; pages of data paged in and out of the main storage <b>5025</b> by the operating system.</p>
<p id="p-0197" num="0244">A program counter (instruction counter) <b>5061</b> keeps track of the address of the current instruction to be executed. A program counter in a z/Architecture&#xae; processor is 64 bits and can be truncated to 31 or 24 bits to support prior addressing limits. A program counter is typically embodied in a PSW (program status word) of a computer such that it persists during context switching. Thus, a program in progress, having a program counter value, may be interrupted by, for example, the operating system (context switch from the program environment to the operating system environment). The PSW of the program maintains the program counter value while the program is not active, and the program counter (in the PSW) of the operating system is used while the operating system is executing. Typically, the program counter is incremented by an amount equal to the number of bytes of the current instruction. RISC (Reduced Instruction Set Computing) instructions are typically fixed length while CISC (Complex Instruction Set Computing) instructions are typically variable length. Instructions of the IBM z/Architecture&#xae; are CISC instructions having a length of 2, 4 or 6 bytes. The Program counter <b>5061</b> is modified by either a context switch operation or a branch taken operation of a branch instruction for example. In a context switch operation, the current program counter value is saved in the program status word along with other state information about the program being executed (such as condition codes), and a new program counter value is loaded pointing to an instruction of a new program module to be executed. A branch taken operation is performed in order to permit the program to make decisions or loop within the program by loading the result of the branch instruction into the program counter <b>5061</b>.</p>
<p id="p-0198" num="0245">Typically an instruction fetch unit <b>5055</b> is employed to fetch instructions on behalf of the processor <b>5026</b>. The fetch unit either fetches &#x201c;next sequential instructions&#x201d;, target instructions of branch taken instructions, or first instructions of a program following a context switch. Modern Instruction fetch units often employ prefetch techniques to speculatively prefetch instructions based on the likelihood that the prefetched instructions might be used. For example, a fetch unit may fetch 16 bytes of instruction that includes the next sequential instruction and additional bytes of further sequential instructions.</p>
<p id="p-0199" num="0246">The fetched instructions are then executed by the processor <b>5026</b>. In an embodiment, the fetched instruction(s) are passed to a dispatch unit <b>5056</b> of the fetch unit. The dispatch unit decodes the instruction(s) and forwards information about the decoded instruction(s) to appropriate units <b>5057</b>, <b>5058</b>, <b>5060</b>. An execution unit <b>5057</b> will typically receive information about decoded arithmetic instructions from the instruction fetch unit <b>5055</b> and will perform arithmetic operations on operands according to the opcode of the instruction. Operands are provided to the execution unit <b>5057</b> preferably either from memory <b>5025</b>, architected registers <b>5059</b> or from an immediate field of the instruction being executed. Results of the execution, when stored, are stored either in memory <b>5025</b>, registers <b>5059</b> or in other machine hardware (such as control registers, PSW registers and the like).</p>
<p id="p-0200" num="0247">A processor <b>5026</b> typically has one or more units <b>5057</b>, <b>5058</b>, <b>5060</b> for executing the function of the instruction. Referring to <figref idref="DRAWINGS">FIG. 20A</figref>, an execution unit <b>5057</b> may communicate with architected general registers <b>5059</b>, a decode/dispatch unit <b>5056</b>, a load store unit <b>5060</b>, and other <b>5065</b> processor units by way of interfacing logic <b>5071</b>. An execution unit <b>5057</b> may employ several register circuits <b>5067</b>, <b>5068</b>, <b>5069</b> to hold information that the arithmetic logic unit (ALU) <b>5066</b> will operate on. The ALU performs arithmetic operations such as add, subtract, multiply and divide as well as logical function such as and, or and exclusive-or (XOR), rotate and shift. Preferably the ALU supports specialized operations that are design dependent. Other circuits may provide other architected facilities <b>5072</b> including condition codes and recovery support logic for example. Typically the result of an ALU operation is held in an output register circuit <b>5070</b> which can forward the result to a variety of other processing functions. There are many arrangements of processor units, the present description is only intended to provide a representative understanding of one embodiment.</p>
<p id="p-0201" num="0248">An ADD instruction for example would be executed in an execution unit <b>5057</b> having arithmetic and logical functionality while a floating point instruction for example would be executed in a floating point execution having specialized floating point capability. Preferably, an execution unit operates on operands identified by an instruction by performing an opcode defined function on the operands. For example, an ADD instruction may be executed by an execution unit <b>5057</b> on operands found in two registers <b>5059</b> identified by register fields of the instruction.</p>
<p id="p-0202" num="0249">The execution unit <b>5057</b> performs the arithmetic addition on two operands and stores the result in a third operand where the third operand may be a third register or one of the two source registers. The execution unit preferably utilizes an Arithmetic Logic Unit (ALU) <b>5066</b> that is capable of performing a variety of logical functions such as Shift, Rotate, And, Or and XOR as well as a variety of algebraic functions including any of add, subtract, multiply, divide. Some ALUs <b>5066</b> are designed for scalar operations and some for floating point. Data may be Big Endian (where the least significant byte is at the highest byte address) or Little Endian (where the least significant byte is at the lowest byte address) depending on architecture. The IBM z/Architecture&#xae; is Big Endian. Signed fields may be sign and magnitude, 1's complement or 2's complement depending on architecture. A 2's complement number is advantageous in that the ALU does not need to design a subtract capability since either a negative value or a positive value in 2's complement requires only an addition within the ALU. Numbers are commonly described in shorthand, where a 12 bit field defines an address of a 4,096 byte block and is commonly described as a 4 Kbyte (Kilo-byte) block, for example.</p>
<p id="p-0203" num="0250">Referring to <figref idref="DRAWINGS">FIG. 20B</figref>, branch instruction information for executing a branch instruction is typically sent to a branch unit <b>5058</b> which often employs a branch prediction algorithm such as a branch history table <b>5082</b> to predict the outcome of the branch before other conditional operations are complete. The target of the current branch instruction will be fetched and speculatively executed before the conditional operations are complete. When the conditional operations are completed the speculatively executed branch instructions are either completed or discarded based on the conditions of the conditional operation and the speculated outcome. A typical branch instruction may test condition codes and branch to a target address if the condition codes meet the branch requirement of the branch instruction, a target address may be calculated based on several numbers including ones found in register fields or an immediate field of the instruction for example. The branch unit <b>5058</b> may employ an ALU <b>5074</b> having a plurality of input register circuits <b>5075</b>, <b>5076</b>, <b>5077</b> and an output register circuit <b>5080</b>. The branch unit <b>5058</b> may communicate with general registers <b>5059</b>, decode dispatch unit <b>5056</b> or other circuits <b>5073</b>, for example.</p>
<p id="p-0204" num="0251">The execution of a group of instructions can be interrupted for a variety of reasons including a context switch initiated by an operating system, a program exception or error causing a context switch, an I/O interruption signal causing a context switch or multi-threading activity of a plurality of programs (in a multi-threaded environment), for example. Preferably a context switch action saves state information about a currently executing program and then loads state information about another program being invoked. State information may be saved in hardware registers or in memory for example. State information preferably comprises a program counter value pointing to a next instruction to be executed, condition codes, memory translation information and architected register content. A context switch activity can be exercised by hardware circuits, application programs, operating system programs or firmware code (microcode, pico-code or licensed internal code (LIC)) alone or in combination.</p>
<p id="p-0205" num="0252">A processor accesses operands according to instruction defined methods. The instruction may provide an immediate operand using the value of a portion of the instruction, may provide one or more register fields explicitly pointing to either general purpose registers or special purpose registers (floating point registers for example). The instruction may utilize implied registers identified by an opcode field as operands. The instruction may utilize memory locations for operands. A memory location of an operand may be provided by a register, an immediate field, or a combination of registers and immediate field as exemplified by the z/Architecture&#xae; long displacement facility wherein the instruction defines a base register, an index register and an immediate field (displacement field) that are added together to provide the address of the operand in memory for example. Location herein typically implies a location in main memory (main storage) unless otherwise indicated.</p>
<p id="p-0206" num="0253">Referring to <figref idref="DRAWINGS">FIG. 20C</figref>, a processor accesses storage using a load/store unit <b>5060</b>. The load/store unit <b>5060</b> may perform a load operation by obtaining the address of the target operand in memory <b>5053</b> and loading the operand in a register <b>5059</b> or another memory <b>5053</b> location, or may perform a store operation by obtaining the address of the target operand in memory <b>5053</b> and storing data obtained from a register <b>5059</b> or another memory <b>5053</b> location in the target operand location in memory <b>5053</b>. The load/store unit <b>5060</b> may be speculative and may access memory in a sequence that is out-of-order relative to instruction sequence, however the load/store unit <b>5060</b> is to maintain the appearance to programs that instructions were executed in order. A load/store unit <b>5060</b> may communicate with general registers <b>5059</b>, decode/dispatch unit <b>5056</b>, cache/memory interface <b>5053</b> or other elements <b>5083</b> and comprises various register circuits, ALUs <b>5080</b> and control logic <b>5085</b> to calculate storage addresses and to provide pipeline sequencing to keep operations in-order. Some operations may be out of order but the load/store unit provides functionality to make the out of order operations to appear to the program as having been performed in order, as is well known in the art.</p>
<p id="p-0207" num="0254">Preferably addresses that an application program &#x201c;sees&#x201d; are often referred to as virtual addresses. Virtual addresses are sometimes referred to as &#x201c;logical addresses&#x201d; and &#x201c;effective addresses&#x201d;. These virtual addresses are virtual in that they are redirected to physical memory location by one of a variety of dynamic address translation (DAT) technologies including, but not limited to, simply prefixing a virtual address with an offset value, translating the virtual address via one or more translation tables, the translation tables preferably comprising at least a segment table and a page table alone or in combination, preferably, the segment table having an entry pointing to the page table. In the z/Architecture&#xae;, a hierarchy of translation is provided including a region first table, a region second table, a region third table, a segment table and an optional page table. The performance of the address translation is often improved by utilizing a translation lookaside buffer (TLB) which comprises entries mapping a virtual address to an associated physical memory location. The entries are created when the DAT translates a virtual address using the translation tables. Subsequent use of the virtual address can then utilize the entry of the fast TLB rather than the slow sequential translation table accesses. TLB content may be managed by a variety of replacement algorithms including LRU (Least Recently used).</p>
<p id="p-0208" num="0255">In the case where the processor is a processor of a multi-processor system, each processor has responsibility to keep shared resources, such as I/O, caches, TLBs and memory, interlocked for coherency. Typically, &#x201c;snoop&#x201d; technologies will be utilized in maintaining cache coherency. In a snoop environment, each cache line may be marked as being in any one of a shared state, an exclusive state, a changed state, an invalid state and the like in order to facilitate sharing.</p>
<p id="p-0209" num="0256">I/O units <b>5054</b> (<figref idref="DRAWINGS">FIG. 19</figref>) provide the processor with means for attaching to peripheral devices including tape, disc, printers, displays, and networks for example. I/O units are often presented to the computer program by software drivers. In mainframes, such as the System z&#xae; from IBM&#xae;, channel adapters and open system adapters are I/O units of the mainframe that provide the communications between the operating system and peripheral devices.</p>
<p id="p-0210" num="0257">Further, other types of computing environments can benefit from one or more aspects of the present invention. As an example, an environment may include an emulator (e.g., software or other emulation mechanisms), in which a particular architecture (including, for instance, instruction execution, architected functions, such as address translation, and architected registers) or a subset thereof is emulated (e.g., on a native computer system having a processor and memory). In such an environment, one or more emulation functions of the emulator can implement one or more aspects of the present invention, even though a computer executing the emulator may have a different architecture than the capabilities being emulated. As one example, in emulation mode, the specific instruction or operation being emulated is decoded, and an appropriate emulation function is built to implement the individual instruction or operation.</p>
<p id="p-0211" num="0258">In an emulation environment, a host computer includes, for instance, a memory to store instructions and data; an instruction fetch unit to fetch instructions from memory and to optionally, provide local buffering for the fetched instruction; an instruction decode unit to receive the fetched instructions and to determine the type of instructions that have been fetched; and an instruction execution unit to execute the instructions. Execution may include loading data into a register from memory; storing data back to memory from a register; or performing some type of arithmetic or logical operation, as determined by the decode unit. In one example, each unit is implemented in software. For instance, the operations being performed by the units are implemented as one or more subroutines within emulator software.</p>
<p id="p-0212" num="0259">More particularly, in a mainframe, architected machine instructions are used by programmers, usually today &#x201c;C&#x201d; programmers, often by way of a compiler application. These instructions stored in the storage medium may be executed natively in a z/Architecture&#xae; IBM&#xae; Server, or alternatively in machines executing other architectures. They can be emulated in the existing and in future IBM&#xae; mainframe servers and on other machines of IBM&#xae; (e.g., Power Systems servers and System x&#xae; Servers). They can be executed in machines running Linux on a wide variety of machines using hardware manufactured by IBM&#xae;, Intel&#xae;, AMD&#x2122;, and others. Besides execution on that hardware under a z/Architecture&#xae;, Linux can be used as well as machines which use emulation by Hercules, UMX, or FSI (Fundamental Software, Inc), where generally execution is in an emulation mode. In emulation mode, emulation software is executed by a native processor to emulate the architecture of an emulated processor.</p>
<p id="p-0213" num="0260">The native processor typically executes emulation software comprising either firmware or a native operating system to perform emulation of the emulated processor. The emulation software is responsible for fetching and executing instructions of the emulated processor architecture. The emulation software maintains an emulated program counter to keep track of instruction boundaries. The emulation software may fetch one or more emulated machine instructions at a time and convert the one or more emulated machine instructions to a corresponding group of native machine instructions for execution by the native processor. These converted instructions may be cached such that a faster conversion can be accomplished. Notwithstanding, the emulation software is to maintain the architecture rules of the emulated processor architecture so as to assure operating systems and applications written for the emulated processor operate correctly. Furthermore, the emulation software is to provide resources identified by the emulated processor architecture including, but not limited to, control registers, general purpose registers, floating point registers, dynamic address translation function including segment tables and page tables for example, interrupt mechanisms, context switch mechanisms, Time of Day (TOD) clocks and architected interfaces to I/O subsystems such that an operating system or an application program designed to run on the emulated processor, can be run on the native processor having the emulation software.</p>
<p id="p-0214" num="0261">A specific instruction being emulated is decoded, and a subroutine is called to perform the function of the individual instruction. An emulation software function emulating a function of an emulated processor is implemented, for example, in a &#x201c;C&#x201d; subroutine or driver, or some other method of providing a driver for the specific hardware as will be within the skill of those in the art after understanding the description of the preferred embodiment. Various software and hardware emulation patents including, but not limited to U.S. Pat. No. 5,551,011, entitled &#x201c;Multiprocessor for Hardware Emulation&#x201d;, by Beausoleil et al.; and U.S. Pat. No. 6,009,261, entitled &#x201c;Preprocessing of Stored Target Routines for Emulating Incompatible Instructions on a Target Processor&#x201d;, by Scalzi et al; and U.S. Pat. No. 5,574,873, entitled &#x201c;Decoding Guest Instruction to Directly Access Emulation Routines that Emulate the Guest Instructions&#x201d;, by Davidian et al; and U.S. Pat. No. 6,308,255, entitled &#x201c;Symmetrical Multiprocessing Bus and Chipset Used for Coprocessor Support Allowing Non-Native Code to Run in a System&#x201d;, by Gorishek et al; and U.S. Pat. No. 6,463,582, entitled &#x201c;Dynamic Optimizing Object Code Translator for Architecture Emulation and Dynamic Optimizing Object Code Translation Method&#x201d;, by Lethin et al; and U.S. Pat. No. 5,790,825, entitled &#x201c;Method for Emulating Guest Instructions on a Host Computer Through Dynamic Recompilation of Host Instructions&#x201d;, by Eric Traut, each of which is hereby incorporated herein by reference in its entirety; and many others, illustrate a variety of known ways to achieve emulation of an instruction format architected for a different machine for a target machine available to those skilled in the art.</p>
<p id="p-0215" num="0262">In <figref idref="DRAWINGS">FIG. 21</figref>, an example of an emulated host computer system <b>5092</b> is provided that emulates a host computer system <b>5000</b>&#x2032; of a host architecture. In the emulated host computer system <b>5092</b>, the host processor (CPU) <b>5091</b> is an emulated host processor (or virtual host processor) and comprises an emulation processor <b>5093</b> having a different native instruction set architecture than that of the processor <b>5091</b> of the host computer <b>5000</b>&#x2032;. The emulated host computer system <b>5092</b> has memory <b>5094</b> accessible to the emulation processor <b>5093</b>. In the example embodiment, the memory <b>5094</b> is partitioned into a host computer memory <b>5096</b> portion and an emulation routines <b>5097</b> portion. The host computer memory <b>5096</b> is available to programs of the emulated host computer <b>5092</b> according to host computer architecture. The emulation processor <b>5093</b> executes native instructions of an architected instruction set of an architecture other than that of the emulated processor <b>5091</b>, the native instructions obtained from emulation routines memory <b>5097</b>, and may access a host instruction for execution from a program in host computer memory <b>5096</b> by employing one or more instruction(s) obtained in a sequence &#x26; access/decode routine which may decode the host instruction(s) accessed to determine a native instruction execution routine for emulating the function of the host instruction accessed. Other facilities that are defined for the host computer system <b>5000</b>&#x2032; architecture may be emulated by architected facilities routines, including such facilities as general purpose registers, control registers, dynamic address translation and I/O subsystem support and processor cache, for example. The emulation routines may also take advantage of functions available in the emulation processor <b>5093</b> (such as general registers and dynamic translation of virtual addresses) to improve performance of the emulation routines. Special hardware and off-load engines may also be provided to assist the processor <b>5093</b> in emulating the function of the host computer <b>5000</b>&#x2032;.</p>
<p id="p-0216" num="0263">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising&#x201d;, when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components and/or groups thereof.</p>
<p id="p-0217" num="0264">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below, if any, are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiment with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product for controlling access to adapters in a computing environment, said computer program product comprising:
<claim-text>a non-transitory computer readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method comprising:
<claim-text>executing, by a processor coupled to an adapter, an instruction, the instruction comprising a request by a configuration to access the adapter, the adapter identified by a function handle provided with the request, the executing comprising:
<claim-text>using the function handle to select from a function table a function table entry particular to the adapter specified by the function the function table entry stored in memory associated with the processor and including information associated with the adapter including information to determine whether the configuration is authorized to access the adapter;</claim-text>
<claim-text>determining, by the processor, based on information in the function table entry whether the configuration is authorized to access the adapter, wherein the determining comprises comparing one or more attributes of the configuration requesting access to the adapter to one or more selected attributes of the function table entry to determine whether the configuration has permission to access the adapter; and</claim-text>
<claim-text>allowing access to the adapter, based on determining that the configuration is authorized to access the adapter.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises based on determining that the configuration is not authorized access to the adapter, denying access to the adapter.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining comprises comparing a zone number in the function table entry with a zone number of the configuration, wherein the configuration is authorized access based on the comparing indicating equality.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration comprises a guest, and wherein the determining comprises checking in the function table entry for an identifier of the guest, wherein the guest is authorized access, based on the identifier being in the function table entry.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises determining whether access is to be blocked for one or more reasons different than authorization checking, the determining using state information of the function table entry, wherein access is allowed based on determining that it is not to be blocked.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein it is determined that access is to be blocked, and said method further comprises:
<claim-text>deciding whether access is to be blocked temporarily; and</claim-text>
<claim-text>providing a busy indicator to the configuration, based on determining that access is to be blocked temporarily.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the method further comprises denying access, based on deciding access is to be blocked, but not blocked temporarily.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:
<claim-text>determining a plurality of adapters available to the computing environment; and</claim-text>
<claim-text>creating a function table entry for each adapter of the plurality of adapters.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:
<claim-text>determining which adapters of the plurality of adapters are accessible to the configuration; and</claim-text>
<claim-text>indicating in the function table entry of each adapter that is accessible to the configuration information regarding the configuration.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the determining which adapters are accessible to the configuration is based on policy, the policy being reconfigurable.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instruction is based on an architecture of the adapter.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A computer system for controlling access to adapters in a computing environment, said computer system comprising:
<claim-text>a memory; and</claim-text>
<claim-text>a processor in communications with the memory, wherein the computer system is configured to perform a method, said method comprising:
<claim-text>executing, by a processor coupled to an adapter, an instruction, the instruction comprising a request by a configuration to access the adapter, the adapter identified by a function handle provided with the request, the executing comprising:
<claim-text>using the function handle to select from a function table a function table entry particular to the adapter specified by the function handle, the function table entry stored in memory associated with the processor and including information associated with the adapter including information to determine whether the configuration is authorized to access the adapter;</claim-text>
<claim-text>determining, by the processor, based on information in the function table entry whether the configuration is authorized to access the adapter, wherein the determining comprises comparing one or more attributes of the configuration requesting access to the adapter to one or more selected attributes of the function table entry to determine whether the configuration has permission to access the adapter; and</claim-text>
<claim-text>allowing access to the adapter, based on determining that the configuration is authorized to access the adapter.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the determining comprises comparing a zone number in the function table entry with a zone number of the configuration, wherein the configuration is authorized access based on the comparing indicating equality.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the configuration comprises a guest, and wherein the determining comprises checking in the function table entry for an identifier of the guest, wherein the guest is authorized access, based on the identifier being in the function table entry.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the method further comprises determining whether access is to be blocked for one or more reasons different than authorization checking, the determining using state information of the function table entry, wherein access is allowed based on determining that it is not to be blocked.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein it is determined that access is to be blocked, and said method further comprises:
<claim-text>deciding whether access is to be blocked temporarily; and</claim-text>
<claim-text>providing a busy indicator to the configuration, based on determining that access is to be blocked temporarily.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the method further comprises:
<claim-text>determining a plurality of adapters available to the computing environment;</claim-text>
<claim-text>creating a function table entry for each adapter of the plurality of adapters;</claim-text>
<claim-text>determining which adapters of the plurality of adapters are accessible to the configuration; and</claim-text>
<claim-text>indicating in the function table entry of each adapter that is accessible to the configuration information regarding the configuration.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instruction is based on an architecture of the adapter.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method of controlling access to adapters in a computing environment, said method comprising:
<claim-text>executing, by a processor coupled to an adapter, an instruction, the instruction comprising a request by a configuration to access the adapter, the adapter identified by a function handle provided with the request, the executing comprising:
<claim-text>using the function handle to select from a function table a function table entry particular to the adapter specified by the function handle, the function table entry stored in memory associated with the processor and including information associated with the adapter including information to determine whether the configuration is authorized to access the adapter;</claim-text>
<claim-text>determining, by the processor, based on information in the function table entry whether the configuration is authorized to access the adapter, wherein the determining comprises comparing one or more attributes of the configuration requesting access to the adapter to one or more selected attributes of the function table entry to determine whether the configuration has permission to access the adapter; and</claim-text>
<claim-text>allowing access to the adapter, based on determining that the configuration is authorized to access the adapter.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the determining comprises comparing a zone number in the function table entry with a zone number of the configuration, wherein the configuration is authorized access based on the comparing indicating equality.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising determining whether access is to be blocked for one or more reasons different than authorization checking, the determining using state information of the function table entry, wherein access is allowed based on determining that it is not to be blocked. </claim-text>
</claim>
</claims>
</us-patent-grant>

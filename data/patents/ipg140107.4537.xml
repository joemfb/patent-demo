<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625621-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625621</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12043918</doc-number>
<date>20080306</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>575</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>J</subclass>
<main-group>3</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>J</subclass>
<main-group>3</main-group>
<subgroup>24</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>5</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370412</main-classification>
<further-classification>370466</further-classification>
<further-classification>370474</further-classification>
<further-classification>710 53</further-classification>
<further-classification>710 57</further-classification>
</classification-national>
<invention-title id="d2e53">Method to support flexible data transport on serial protocols</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4214305</doc-number>
<kind>A</kind>
<name>Tokita et al.</name>
<date>19800700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4335277</doc-number>
<kind>A</kind>
<name>Puri</name>
<date>19820600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4782485</doc-number>
<kind>A</kind>
<name>Gollub</name>
<date>19881100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>4866704</doc-number>
<kind>A</kind>
<name>Bergman</name>
<date>19890900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5018136</doc-number>
<kind>A</kind>
<name>Gollub</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5107489</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>19920400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370360</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5245704</doc-number>
<kind>A</kind>
<name>Weber et al.</name>
<date>19930900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5257384</doc-number>
<kind>A</kind>
<name>Farrand et al.</name>
<date>19931000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5313454</doc-number>
<kind>A</kind>
<name>Bustini et al.</name>
<date>19940500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5426643</doc-number>
<kind>A</kind>
<name>Smolinske et al.</name>
<date>19950600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>5530902</doc-number>
<kind>A</kind>
<name>McRoberts et al.</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>5572697</doc-number>
<kind>A</kind>
<name>Chevalier et al.</name>
<date>19961100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>5655140</doc-number>
<kind>A</kind>
<name>Haddock</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>5717883</doc-number>
<kind>A</kind>
<name>Sager</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>5777547</doc-number>
<kind>A</kind>
<name>Waldrop</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>5916309</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>5924112</doc-number>
<kind>A</kind>
<name>Barber et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>5951706</doc-number>
<kind>A</kind>
<name>Benner</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>5983301</doc-number>
<kind>A</kind>
<name>Baker et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6046817</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6047319</doc-number>
<kind>A</kind>
<name>Olson</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6061089</doc-number>
<kind>A</kind>
<name>Tonkin et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6084631</doc-number>
<kind>A</kind>
<name>Tonkin et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6157621</doc-number>
<kind>A</kind>
<name>Brown et al.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6233629</doc-number>
<kind>B1</kind>
<name>Castellano</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 29</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6271866</doc-number>
<kind>B1</kind>
<name>Hancock et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6333938</doc-number>
<kind>B1</kind>
<name>Baker</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6347344</doc-number>
<kind>B1</kind>
<name>Baker et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 20</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6425021</doc-number>
<kind>B1</kind>
<name>Ghodrat et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6442687</doc-number>
<kind>B1</kind>
<name>Savage</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6510138</doc-number>
<kind>B1</kind>
<name>Pannell</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6546496</doc-number>
<kind>B1</kind>
<name>Wang et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6564271</doc-number>
<kind>B2</kind>
<name>Micalizzi, Jr. et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6581175</doc-number>
<kind>B1</kind>
<name>Crump et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>6631429</doc-number>
<kind>B2</kind>
<name>Cota-Robles et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>6636483</doc-number>
<kind>B1</kind>
<name>Pannell</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>6658477</doc-number>
<kind>B1</kind>
<name>Lisitsa et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>6748020</doc-number>
<kind>B1</kind>
<name>Eifrig et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>6862298</doc-number>
<kind>B1</kind>
<name>Smith et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>6907479</doc-number>
<kind>B2</kind>
<name>Karnstedt et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 52</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>6944186</doc-number>
<kind>B2</kind>
<name>Zaun et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>6985969</doc-number>
<kind>B1</kind>
<name>Cheng</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>6993602</doc-number>
<kind>B2</kind>
<name>Merrill et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 54</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>7013354</doc-number>
<kind>B1</kind>
<name>Beck et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710105</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>7088735</doc-number>
<kind>B1</kind>
<name>Reohr, Jr. et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>7212962</doc-number>
<kind>B2</kind>
<name>Masushige et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>7213094</doc-number>
<kind>B2</kind>
<name>Edirisoori</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710310</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>7436858</doc-number>
<kind>B2</kind>
<name>Goren et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>7594002</doc-number>
<kind>B1</kind>
<name>Thorpe et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>7617346</doc-number>
<kind>B2</kind>
<name>Wang et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>7631128</doc-number>
<kind>B1</kind>
<name>Sgrosso et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>7680944</doc-number>
<kind>B1</kind>
<name>Taghizadeh et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>7707335</doc-number>
<kind>B2</kind>
<name>Lidji et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>7710969</doc-number>
<kind>B2</kind>
<name>Szczepanek et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>7764608</doc-number>
<kind>B2</kind>
<name>Breynaert et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2001/0054116</doc-number>
<kind>A1</kind>
<name>Cheng</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2002/0080791</doc-number>
<kind>A1</kind>
<name>Sylvain</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370394</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2002/0171741</doc-number>
<kind>A1</kind>
<name>Tonkin et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2002/0181481</doc-number>
<kind>A1</kind>
<name>Iny</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2004/0103333</doc-number>
<kind>A1</kind>
<name>Martwick et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2004/0225779</doc-number>
<kind>A1</kind>
<name>Zhao et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2004/0240478</doc-number>
<kind>A1</kind>
<name>Goren et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2005/0100049</doc-number>
<kind>A1</kind>
<name>Siminoff</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2005/0100114</doc-number>
<kind>A1</kind>
<name>Satagopan et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2005/0105556</doc-number>
<kind>A1</kind>
<name>Joung et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2005/0135390</doc-number>
<kind>A1</kind>
<name>Anderson et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2005/0144341</doc-number>
<kind>A1</kind>
<name>Schmidt et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2005/0246424</doc-number>
<kind>A1</kind>
<name>Panec et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2005/0254518</doc-number>
<kind>A1</kind>
<name>Fujimori</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2005/0283598</doc-number>
<kind>A1</kind>
<name>Gaskins et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2006/0018329</doc-number>
<kind>A1</kind>
<name>Nielsen et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2006/0056435</doc-number>
<kind>A1</kind>
<name>Biran et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370412</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2006/0153238</doc-number>
<kind>A1</kind>
<name>Bar-On et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2006/0224812</doc-number>
<kind>A1</kind>
<name>Kapoor et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2006/0251088</doc-number>
<kind>A1</kind>
<name>Thubert et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2007/0050564</doc-number>
<kind>A1</kind>
<name>Gunna et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2007/0110046</doc-number>
<kind>A1</kind>
<name>Farrell et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2007/0130410</doc-number>
<kind>A1</kind>
<name>Keller et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2007/0230403</doc-number>
<kind>A1</kind>
<name>Douglas et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2008/0008211</doc-number>
<kind>A1</kind>
<name>Zilbershtein et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2008/0082840</doc-number>
<kind>A1</kind>
<name>Kendall et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2008/0096433</doc-number>
<kind>A1</kind>
<name>Bixler</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2008/0205422</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2008/0205438</doc-number>
<kind>A1</kind>
<name>Juan et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2008/0209084</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2008/0209089</doc-number>
<kind>A1</kind>
<name>Mo et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2008/0301327</doc-number>
<kind>A1</kind>
<name>Archer et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2009/0052323</doc-number>
<kind>A1</kind>
<name>Breynaert et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2009/0086751</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2009/0181663</doc-number>
<kind>A1</kind>
<name>Hu et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2009/0225770</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2009/0292935</doc-number>
<kind>A1</kind>
<name>Hallnor et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2010/0111526</doc-number>
<kind>A1</kind>
<name>Bader</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Mercury Computer Systems, Inc. article entitled: &#x201c;Serial Rapid IO-to-PCIe Bridge IP Core Available for Both ASICs and FPGAs . . . &#x201d; dated Oct. 30, 2006; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>RapidIO Interconnect Specification, Part VI: Physical Layer 1x/4x LP Serial Specification, Rev. 1.2, Jun. 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370412</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>364200</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>364900</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>395427</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>395250</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090225769</doc-number>
<kind>A1</kind>
<date>20090910</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Chi-Lie</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mo</last-name>
<first-name>Jason Z.</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Wang</last-name>
<first-name>Chi-Lie</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Mo</last-name>
<first-name>Jason Z.</first-name>
<address>
<city>Fremont</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Bever Hoffman &#x26; Harms LLP.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Integrated Device Technology, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hamza</last-name>
<first-name>Faruk</first-name>
<department>2466</department>
</primary-examiner>
<assistant-examiner>
<last-name>Decker</last-name>
<first-name>Cassandra</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A serial buffer transports packets through queues capable of operating in a packet mode or a raw data mode. In packet mode, entire packets are stored in a queue. In raw data mode, packet header/delimiter information is not stored in the queue (only packet data is stored). Packets can be transferred out of a queue in response to a slave read request. The serial buffer constructs a packet header in response to the slave read request, and retrieves a specified amount of packet data from the selected queue. The serial buffer also transfers out packets as a bus master when a water level exceeds a water mark within a queue. The serial buffer constructs packet headers for these bus master transfers, which may be performed in a flush mode or a non-flush mode (in packet mode), or in a flush mode (in raw data mode).</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="142.83mm" wi="204.72mm" file="US08625621-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="213.70mm" wi="156.80mm" orientation="landscape" file="US08625621-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="168.74mm" wi="152.99mm" orientation="landscape" file="US08625621-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="236.47mm" wi="180.42mm" orientation="landscape" file="US08625621-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.63mm" wi="174.58mm" orientation="landscape" file="US08625621-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is related to, and incorporates by reference, the following commonly owned, co-filed U.S. patent applications Ser. No. 12/043,929 filed by Chi-Lie Wang and Jason Z. Mo on Mar. 6, 2008, entitled &#x201c;Protocol Translation In A Serial Buffer&#x201d;; Ser. No. 12/043,934 also filed by Chi-Lie Wang and Jason Z. Mo on Mar. 6, 2008, entitled &#x201c;Serial Buffer To Support Reliable Connection Between Rapid I/O End-Point And FPGA Lite-Weight Protocols&#x201d;; Ser. No. 12/043,940 filed by Chi-Lie Wang on Mar. 6, 2008, entitled &#x201c;Power Management On sRIO Endpoint&#x201d;; Ser. No. 12/043,943 filed by Chi-Lie Wang and Jason Z. Mo on Mar. 6, 2008, entitled &#x201c;Serial Buffer To Support Rapid I/O Logic Layer Out Of Order Response With Data Retransmission&#x201d;; and Ser. No. 12/043,944 filed by Chi-Lie Wang, Jason Z. Mo, Calvin Nguyen and Bertan Tezcan on Mar. 6, 2008, entitled &#x201c;Method To Support Lossless Real Time Data Sampling And Processing On Rapid I/O End-Point&#x201d;.</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates to improved methods for performing data transfers through a serial buffer.</p>
<heading id="h-0003" level="1">RELATED ART</heading>
<p id="p-0004" num="0003">A conventional serial buffer typically provides data offload functions. That is, packets received by the serial buffer are temporarily stored within a memory of the serial buffer, before these packets are subsequently transferred out of the serial buffer. Each packet typically includes a packet header and associated packet data. Thus, storing a packet in the serial buffer includes writing both the packet header and the associated packet data of a received packet into the memory of the serial buffer. Similarly, transferring a packet out of the serial buffer includes reading both the packet header and the associated packet data of the packet from the memory of the serial buffer, and then transferring this packet header and packet data out of the serial buffer.</p>
<p id="p-0005" num="0004">A conventional serial buffer may include multiple ports, which are capable of implementing different serial protocols (such as a serial rapid I/O (sRIO) protocol and a Lite-weight protocol). The various ports of a serial buffer may also be configured to interface with different applications (or processors). In view of the different requirements that may be presented by different serial protocols and different applications, it would be desirable to have improved methods for efficiently and flexibly transporting packets through a serial buffer.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">Accordingly, the present invention provides a method for operating a serial buffer having a first port and a second port, wherein the first port can be configured either with an SRIO protocol (as an SRIO endpoint) or with a Lite-weight protocol (as implemented by an FPGA), and wherein the second port can be configured with the Lite-weight protocol. In order to perform data transfers through different serial protocols, the present invention provides flexibility for data transport with the following features.</p>
<p id="p-0007" num="0006">In accordance with one embodiment, the serial buffer includes one or more queues, each of which can be configured to operate in either a packet mode or a raw data mode. If a queue is configured to operate in the packet mode, and an incoming packet is designated to be stored in the queue, then both the packet header and the associated packet data of the incoming packet are stored in the queue. However, if a queue is configured to operate in the raw data mode, and an incoming packet is designated to be stored in the queue, then the packet header of the incoming packet is not stored in the queue. Rather, only the packet data of the incoming packet is stored in the queue. By not storing the packet header in queues configured to operate in the raw data mode, efficient memory usage may be realized in certain applications. For example, the raw data mode is useful to store packet data received from devices that implement non-intelligent serial protocols.</p>
<p id="p-0008" num="0007">Packet data can be transferred out of a queue in response to a slave read request received on a port of the serial buffer. The slave read request specifies a destination ID (i.e., the identity of the queue to be read), a source ID (i.e., the identity of the device issuing the slave read request), and the size of the data transfer (e.g., the number of packets, if the queue is configured in packet mode, or the number of double-words, if the queue is configured in raw data mode). In response to a slave read request, the serial buffer constructs a packet header, and retrieves the specified amount of packet data from the specified queue. The packet header is constructed in response to the original slave read request, such that the destination ID of the slave read request becomes the source ID of the constructed packet header, and the source ID of the slave read request becomes the destination ID of the constructed packet header. The serial buffer then transmits the constructed packet header and retrieved packet data to the device specified by the destination ID of the constructed packet header. Note that a single slave read request can retrieve one packet or multiple packets from a queue configured in the packet mode. Similarly, a single slave read request can retrieve any number of double words from a queue configured in the raw data mode. Thus, slave read requests allow the data read from a specified queue to have different sizes than the data written to the specified queue. Moreover, different slave read requests can specify different destinations for data transfers from the same queue. Different slave read requests can also specify the same destination for data transfers from different queues. In this manner, the slave read requests provide improved flexibility for transferring packet data through the serial buffer.</p>
<p id="p-0009" num="0008">The serial buffer can also transfer packet data out of a queue as a bus master when a water level of the queue exceeds a water mark of the queue. If the queue to be read during a bus master read operation is configured to operate in the packet mode, then a previously written packet header is read from the queue, and is used to construct a new packet header. The serial buffer also performs a look-up operation to retrieve additional information that is used to construct the new packet header, wherein this look-up operation is specified by the identity of the queue being read. This look-up operation may also specify whether the queue being read is configured in a flush mode (wherein all packets below the water level in the selected queue are read during the bus master read operation) or a non-flush mode (wherein one packet below the water level in the selected queue is read during the bus master read operation). The specified packet data is then read from the selected queue. The serial buffer then transmits the constructed packet header and retrieved packet data to a destination specified by the selected queue.</p>
<p id="p-0010" num="0009">If the queue to be read during a bus master read operation is configured to operate in the raw data mode, then no packet header was previously written to the selected queue. In this case, the serial buffer performs a look-up operation to retrieve information to construct a packet header, wherein this look-up operation is specified by the identity of the queue being read. Each queue configured to operate in the raw data mode is also configured to operate in the flush mode, such that all data values below the water level are read from the selected queue during a bus master read operation. The serial buffer transmits the constructed packet header and retrieved data to a destination specified by the selected queue.</p>
<p id="p-0011" num="0010">In accordance with one embodiment, the water mark of each queue can be independently selected, thereby providing flexibility in selecting the amount of data to be read from each queue during a bus master read operation. Thus, data read out from a queue during a bus master read operation may have a different size than data written to the queue during a previous write operation.</p>
<p id="p-0012" num="0011">The present invention will be more fully understood in view of the following description and drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a serial buffer that implements write control logic and read control logic in accordance with one embodiment of the present invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram that defines the operation of the write control logic of the serial buffer of <figref idref="DRAWINGS">FIG. 1</figref> in accordance with one embodiment of the present invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram that defines the manner in which the read control logic of the serial buffer of <figref idref="DRAWINGS">FIG. 1</figref> operates in response to slave read requests, in accordance with one embodiment of the present invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram that defines the manner in which the read control logic of the serial buffer of <figref idref="DRAWINGS">FIG. 1</figref> operates in response to master read requests, in accordance with one embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a serial buffer <b>100</b> in accordance with one embodiment of the present invention. Serial buffer <b>100</b> includes first port <b>1</b>, second port <b>2</b>, queues Q<b>0</b>-Q<b>7</b>, queue configuration registers QCR<b>0</b>-QCR<b>7</b>, write control logic <b>101</b>, read control logic <b>102</b> and multiplexers <b>111</b>-<b>112</b>. In the described embodiments, the first port <b>1</b> of serial buffer <b>100</b> can be configured to operate in accordance with an sRIO protocol, and provide an interface to an sRIO endpoint (not shown). The second port <b>2</b> of serial buffer <b>100</b> can be configured to operate in accordance with either the sRIO protocol or a Lite-weight protocol. When configured to operate in accordance with a Lite-weight protocol, the second port <b>2</b> provides an interface to a Lite-weight protocol device, such as a field programmable device (not shown). In order to facilitate data transfers through different serial protocols (e.g., between sRIO and Lite-weight protocols), serial buffer <b>100</b> provides the following features.</p>
<p id="p-0018" num="0017">Write control logic <b>101</b> controls write operations to queues Q<b>0</b>-Q<b>7</b>. Each of queues Q<b>0</b>-Q<b>7</b> can be written from either the first port <b>1</b> or the second port <b>2</b>. However, for a given configuration, each of queues Q<b>0</b>-Q<b>7</b> is configured to connect to either the first port <b>1</b> or the second port <b>2</b>.</p>
<p id="p-0019" num="0018">In the described embodiments, each of the queues Q<b>0</b>-Q<b>7</b> has a corresponding queue configuration register QCR<b>0</b>-QCR<b>7</b>, respectively. Each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> stores information that specifies the operation of the corresponding queue. For example, each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> stores a source identifier (ID) value, which specifies an &#x2018;address&#x2019; of the corresponding queue for access purposes. Each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> also stores a destination ID value, which specifies an &#x2018;address&#x2019; where data stored in the corresponding queue will be transmitted. In accordance with one embodiment, each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> also stores an access mode ID, which indicates whether the corresponding queue is configured to operate in a packet mode or a raw data mode.</p>
<p id="p-0020" num="0019">If a queue is configured to operate in the packet mode, then this queue will store packet header/delimiter information and associated packet data. However, if a queue is configured to operate in the raw data mode, then this queue will store packet data, but not the associated packet header information. In various embodiments, the associated packet delimiter information (i.e., start-of-packet and end-of-packet information) may or may not be stored with the packet data. Thus, queues configured to operate in the raw data mode may provide efficient memory usage, because it is not necessary to store the packet header/delimiter information in these queues. Queues configured to operate in the raw data mode may be used, for example, to store packet data received from devices using non-intelligent serial protocols, which do not include higher layer packet headers.</p>
<p id="p-0021" num="0020">Each of queues Q<b>0</b>-Q<b>3</b> can be read in response to slave read request packets received from the first port <b>1</b>. Similarly, each of queues Q<b>4</b>-Q<b>7</b> can be read in response to slave read requests received from the second port <b>2</b>.</p>
<p id="p-0022" num="0021">A slave read request packet specifies the queue to be read, the amount of data to be read from the queue, and the destination of the data read from the queue. The size of data read from the queue in response to a slave read request may be different than the size of data previously written to the queue. Read control logic <b>102</b> constructs an outgoing packet header in response to the original slave read request packet, such that packet header information does not need to be retrieved from the queue during a slave read request.</p>
<p id="p-0023" num="0022">Read control logic <b>102</b> may operate as a bus master to transfer data from one of queues Q<b>0</b>-Q<b>7</b> when the water level exceeds a watermark within one of these queues Q<b>0</b>-Q<b>7</b>. Note that queues Q<b>0</b>-Q<b>7</b> are each assigned a priority within serial buffer <b>100</b>, with higher priority queues being processed first. In one embodiment, each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> stores a priority value, which identifies the priority of the corresponding queue.</p>
<p id="p-0024" num="0023">When operating as a bus master, read control logic <b>102</b> is configured to construct a packet header to be appended to the packet data read from the selected queue. This packet header is constructed in response to the identity of the queue being read. If the queue being read is configured in the packet mode, then this packet header is also constructed in response to packet header information read from the queue.</p>
<p id="p-0025" num="0024">Moreover, when operating as a bus master, read control logic <b>102</b> can be configured to read packet data from the selected queue in a flush mode or a non-flush mode. In the flush mode, read control logic <b>102</b> will cause all data below the water mark to be transferred out of the selected queue in a single operation. In the non-flush mode, read control logic <b>102</b> will cause the data associated with a single packet to be transferred out of the selected queue. In one embodiment, each of the queue configuration registers QCR<b>0</b>-QCR<b>7</b> stores a read mode ID value, which indicates whether the corresponding queue is configured to be read in the flush mode or the non-flush mode.</p>
<p id="p-0026" num="0025">The operation of serial buffer <b>100</b> will now be described in more detail.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram <b>200</b>, which defines the operation of write control logic <b>101</b> in accordance with one embodiment of the present invention. Write control logic <b>101</b> receives incoming write request packets from first port <b>1</b> and second port <b>2</b>. Each of these incoming packets includes a packet header and packet data. Each packet header includes a destination identifier (ID) that identifies the queue (or queues) to which the incoming packet should be written.</p>
<p id="p-0028" num="0027">Write control logic <b>101</b> is initially in an IDLE state <b>201</b>. While in the IDLE state <b>201</b>, write control logic <b>101</b> monitors the incoming packets received from the first port <b>1</b> and the second port <b>2</b>, to determine when a valid write request has been received. In one embodiment, write control logic <b>101</b> identifies a valid write request (VALID_PACKET=1) when the destination ID in the header of an incoming packet matches one of the destination ID values stored in queue configuration registers QCR<b>0</b>-QCR<b>7</b>. Multiple queue configuration registers can be programmed to store the same destination ID value, thereby enabling multicast support, wherein the incoming packet is simultaneously written into multiple corresponding queues. Each queue associated with a queue configuration register that stores a matching destination ID value is identified as a selected write queue. For example, if write control logic <b>101</b> determines that the destination ID of an incoming packet matches the destination ID values stored in queue configuration registers QCR<b>0</b> and QCR<b>4</b>, then queues Q<b>0</b> and Q<b>4</b> are identified as selected write queues, and write control logic <b>101</b> will implement a write operation to these queues Q<b>0</b> and Q<b>4</b> in the manner described below. After identifying a valid write request (and the selected write queue(s)), processing proceeds to Step <b>202</b>.</p>
<p id="p-0029" num="0028">Within Step <b>202</b>, write control logic <b>101</b> determines whether the incoming packet should be processed in accordance with a packet mode or a raw data mode. In the described embodiments, write control logic <b>101</b> accesses the queue configuration register(s) of the selected write queue(s) to determine whether the selected write queue(s) is/are configured to operate in the packet mode or the raw data mode. More specifically, write control logic <b>101</b> retrieves the access mode ID value(s) stored in the queue configuration register(s) of the selected write queue(s) to determine whether the selected write queue(s) is/are configured to operate in the packet mode or the raw data mode. In the multicast case, each of the selected write queues is configured in the same mode.</p>
<p id="p-0030" num="0029">If write control logic <b>101</b> determines that the packet mode is enabled for the selected write queue(s) (Step <b>202</b>, YES branch), then processing proceeds to WRITE_HEADER state <b>203</b>. In this state <b>203</b>, write control logic <b>101</b> causes the packet header of the incoming packet to be written to the selected write queue(s). Note that the header of the incoming packet will include a start-of-packet symbol (SOP). Processing then proceeds to WRITE_DATA state <b>205</b>.</p>
<p id="p-0031" num="0030">Within WRITE_DATA state <b>205</b>, write control logic <b>101</b> causes the packet data of the incoming packet to be written into the selected write queue(s). Processing then proceeds to Step <b>206</b>. If the data value (e.g., double-word) previously written to the selected write queue(s) during WRITE_DATA state <b>205</b> is not the last data value of the packet data (Step <b>206</b>, NO branch), then processing returns to WRITE_DATA state <b>205</b>, wherein the next data value of the packet data is written to the selected write queue(s). However, if the data value written to the selected write queue(s) represents the last data value of the packet data (Step <b>206</b>, YES branch), then processing returns to the IDLE state <b>201</b>. The last data value of the packet data can be specified, for example, by an end-of-packet symbol (EOP).</p>
<p id="p-0032" num="0031">Returning now to Step <b>202</b>, if write control logic <b>101</b> determines that the packet mode is not enabled for the selected write queue(s) (Step <b>202</b>, NO branch), then processing proceeds to SKIP_HEADER state <b>204</b>. In this case, the incoming packet is written to the selected write queue(s) in accordance with a raw data mode. Thus, in SKIP_HEADER state <b>204</b>, write control logic <b>101</b> does not write the header of the incoming packet to the selected write queue(s). Rather, processing proceeds to WRITE_DATA state <b>205</b>, wherein only the packet data of the incoming packet is written into the selected write queue(s). In one variation of the present invention, packet delimiter information (e.g., SOP/EOP symbols) is included in the packet data written into the selected write queue(s). This variation allows a non-intelligent field programmable gate array (FPGA) device to send in packets for temporary storage within serial buffer <b>100</b>. As described in more detail below, these packets can be subsequently sent out of serial buffer <b>100</b>, without requiring software to construct packet headers for these packets. After all of the packet data of the incoming packet has been written into the selected write queue(s), (Step <b>206</b>, YES branch), processing returns to IDLE state <b>201</b>.</p>
<p id="p-0033" num="0032">Because the packet header is not written to the selected write queue in the raw data mode, efficient memory use within queues Q<b>0</b>-Q<b>7</b> may be realized in certain applications.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram <b>300</b>, illustrating the manner in which read control logic <b>102</b> operates in response to slave read requests, in accordance with one embodiment of the present invention. In general, slave read requests are specified by priority packets received from either the first port <b>1</b> or the second port <b>2</b>. In accordance with the present invention, each slave read request packet includes a source identifier (ID) that identifies the device that has issued the slave read request, a destination ID that identifies the queue to be read within serial buffer <b>100</b>, and a data size field that identifies the amount of data to be read from the selected queue.</p>
<p id="p-0035" num="0034">Turning now to <figref idref="DRAWINGS">FIG. 3</figref>, read control logic <b>102</b> is initially in an IDLE state <b>301</b>. While in the IDLE state <b>301</b>, read control logic <b>102</b> monitors the incoming packets received from the first port <b>1</b> and the second port <b>2</b>, to determine when a valid slave read request has been received. In one embodiment, read control logic <b>102</b> identifies a valid slave read request (SLAVE_READ=1) upon detecting the presence of a slave read request symbol in a received priority packet, and determining that a destination ID present in this received priority packet matches one of the source ID values stored in queue configuration registers QCR<b>0</b>-QCR<b>7</b>. Upon identifying a valid slave read request, read control logic <b>102</b> latches the associated source ID, destination ID and data size field from the corresponding priority packet.</p>
<p id="p-0036" num="0035">The queue associated with a queue configuration register that stores a matching source ID value is identified as the selected slave read queue. For example, if read control logic <b>102</b> determines that the destination ID of an incoming slave read priority packet matches the destination ID value stored in queue configuration register QCR<b>1</b>, then queue Q<b>1</b> is identified as the selected slave read queue, and read control logic <b>102</b> will implement a read operation to this queue Q<b>1</b> in the manner described below. Note that multiple queues cannot share the same source ID value, as data contention would exist if multiple queues provided the requested data at the same time.</p>
<p id="p-0037" num="0036">Also within Step <b>301</b>, read control logic <b>102</b> determines whether the corresponding slave read operation should be performed in a packet mode or a raw data mode. In the described embodiments, read control logic <b>102</b> accesses the queue configuration register of the selected slave read queue to determine whether this queue is configured to operate in the packet mode or the raw data mode. More specifically, read control logic <b>102</b> retrieves the access mode ID value stored in the queue configuration register of the selected slave read queue to determine whether the selected slave read queue is configured to operate in the packet mode (PACKET_MODE=1) or the raw data mode (RAW_DATA MODE=1).</p>
<p id="p-0038" num="0037">If read control logic <b>102</b> determines that the packet mode is enabled for the selected slave read queue, then processing proceeds to LATCH_PKT_SIZE state <b>302</b>. In this state <b>302</b>, read control logic <b>102</b> latches the data size field of the slave read request packet. When the selected slave read queue is configured to operate in the packet mode, the data size field specifies the number of packets to be read from the selected slave read queue during the associated slave read operation. Note that the sRIO protocol only allows one packet to be read in response to a slave read request, while the Lite-weight protocol allows multiple packets to be read in response to a slave read request. Processing then proceeds to SREAD_PKT_HEADER state <b>303</b>.</p>
<p id="p-0039" num="0038">Within SREAD_PKT_HEADER state <b>303</b>, read control logic <b>102</b> constructs a packet header using the previously latched source ID and destination ID of the slave read request. In constructing this packet header, read control logic <b>102</b> switches the latched source ID and destination ID of the slave read request, such that the source ID of the slave read request becomes the destination ID of the constructed packet header, and the destination ID of the slave read request becomes the source ID of the constructed packet header. Read control logic <b>102</b> transfers this constructed packet header out of serial buffer <b>100</b>, via the same port that originated the slave read request. Processing then proceeds to SREAD_PKT_DATA state <b>304</b>.</p>
<p id="p-0040" num="0039">Within SREAD_PKT_DATA state <b>304</b>, read control logic <b>102</b> reads packet data from the selected slave read queue, and transfers this packet data out of serial buffer <b>100</b> via the same port that originated the slave read request. Because read control logic <b>102</b> has constructed a packet header in response to the original slave read request (SREAD_PKT_HEADER state <b>303</b>), read control logic <b>102</b> does not need to read the corresponding packet header previously written to the selected slave read queue. Processing then proceeds to Step <b>305</b>.</p>
<p id="p-0041" num="0040">If the data value (e.g., double-word) previously read from the selected slave read queue during SREAD_PKT_DATA state <b>304</b> is not the last data value of the packet data (Step <b>305</b>, NO branch), then processing returns to SREAD_PKT_DATA state <b>304</b>, wherein the next data value of the packet data is read from the selected slave read queue. However, if the data value read from the selected slave read queue represents the last data value of the packet data (Step <b>305</b>, YES branch), then processing then processing proceeds to DEC_PKT_CNT state <b>306</b>. The last data value of the packet data can be specified, for example, by an end-of-packet symbol (EOP).</p>
<p id="p-0042" num="0041">Within DEC_PKT_CNT state <b>306</b>, the packet count latched during LATCH_PKT_SIZE state <b>302</b> is decremented by one, to reflect the fact that a packet has been read out of the selected slave read queue. Processing then proceeds to Step <b>307</b>.</p>
<p id="p-0043" num="0042">If the latched packet count has not yet reached a zero value (Step <b>307</b>, NO branch), thereby indicating that not all of the packets specified by the slave read request have been read, then processing returns to SREAD_PKT_HEADER state <b>303</b>, such that the next packet is read from the selected slave read queue in the manner described above.</p>
<p id="p-0044" num="0043">However, when the latched packet count reaches zero (Step <b>307</b>, YES branch), thereby indicating that all of the requested packets have been read out of the selected slave read queue, then processing returns to IDLE state <b>301</b>.</p>
<p id="p-0045" num="0044">Returning now to IDLE state <b>301</b>, if read control logic <b>102</b> initially determines that the raw data mode is enabled for the selected slave read queue, then processing proceeds to LATCH_RAW_SIZE state <b>311</b>. In this state <b>311</b>, read control logic <b>102</b> latches the data size field of the packet header of the slave read request packet. When the selected slave read queue is configured to operate in the raw data mode, the data size field specifies the number of data values (e.g., double-words) to be read from the selected slave read queue during the associated slave read operation. Note that the specified number of data values to be read from selected slave read queue during in the raw data mode is independent of the number of data values written to the same queue during a write operation.</p>
<p id="p-0046" num="0045">Processing proceeds from LATCH_RAW_SIZE state <b>311</b> to SREAD_RAW_HEADER state <b>312</b>. Within SREAD_RAW_HEADER state <b>312</b>, read control logic <b>102</b> constructs a packet header using the previously latched source ID and destination ID of the slave read request. In constructing this packet header, the source ID of the slave read request becomes the destination ID of the constructed packet header, and the destination ID of the slave read request becomes the source ID of the constructed packet header. Read control logic <b>102</b> transfers this constructed packet header out of serial buffer <b>100</b>, via the same port that originated the slave read request. Processing then proceeds to SREAD_RAW_DATA state <b>313</b>.</p>
<p id="p-0047" num="0046">Within SREAD_RAW_DATA state <b>313</b>, read control logic <b>102</b> reads a data value (e.g., double-word) from the selected slave read queue, and transfers this data value out of serial buffer <b>100</b> via the same port that originated the slave read request. Also within SREAD_RAW_DATA state <b>313</b>, the double-word count latched during LATCH_RAW_SIZE state <b>311</b> is decremented by one, to reflect the fact that a double-word has been read out of the selected slave read queue. Processing then proceeds to Step <b>314</b>.</p>
<p id="p-0048" num="0047">If the latched double-word count has not yet reached a zero value, (Step <b>314</b>, NO branch), then processing returns to SREAD_RAW_DATA state <b>313</b>, wherein the next double-word is read from the selected slave read queue, and the latched double-word count is again decremented by one. However, if the latched double-word count has reached a zero value, (Step <b>314</b>, YES branch), thereby indicating that all of the double-words specified by the slave read request have been read out of the selected slave read queue, the processing returns to IDLE state <b>301</b>.</p>
<p id="p-0049" num="0048">In the above-describe manner, data stored in the selected slave read queue can be read out in either a packet mode or a raw data mode, in response to a slave read request packet. When a selected slave read queue is configured to operate in the packet mode, the number of packets read out of the selected slave read queue during a slave read operation may be different than the number of packets written to the same queue during a single write operation. Similarly, when a selected slave read queue is configured to operate in the raw data mode, the number of data values read out of the selected slave read queue during a slave read operation may be different than the number of data values written to the same queue during a single write operation.</p>
<p id="p-0050" num="0049">A single processor may read data from different queues within serial buffer <b>100</b> by issuing different slave read request packets. These slave read request packets may specify different slave read data sizes from the different queues. Moreover, different processors may transmit slave read request packets to serial buffer <b>100</b> to access the same queue. These different processors may specify different slave read data sizes.</p>
<p id="p-0051" num="0050">These features advantageously increase the flexibility of transporting data through the serial buffer <b>100</b>. For example, in a particular embodiment, real time sampling data from multiple radio cards can be merged and written to a selected queue. Multiple slave read requests can be used to transfer subsets of the merged data from the selected slave read queue to different processors (wherein the number of processors may be different than the number of radio cards).</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram <b>400</b> illustrating the manner in which read control logic <b>102</b> operates as a bus master to transfer data out of one of the queues Q<b>0</b>-Q<b>7</b> when a water level associated with the queue exceeds a water mark associated with the queue. In one embodiment, the water mark associated with each queue is stored in the corresponding queue configuration register. In the event that multiple queues have water levels that exceed their water marks, read control logic <b>102</b> will process the highest priority queue first. The queue being read under these conditions is hereinafter referred to as the selected master read queue.</p>
<p id="p-0053" num="0052">Turning now to <figref idref="DRAWINGS">FIG. 4</figref>, read control logic <b>102</b> is initially in an IDLE state <b>401</b>. While in the IDLE state <b>401</b>, read control logic <b>102</b> monitors the water levels of queues Q<b>0</b>-Q<b>7</b>, to determine when any of these water levels exceeds the corresponding water mark of the queue. If the water level exceeds the water mark within one or more of queues Q<b>0</b>-Q<b>7</b> (WLEVEL_EXCEED_WMARK=1), and serial buffer <b>100</b> is enabled to perform master read operations (MASTER_READ=1), then read control logic <b>102</b> will identify the selected master read queue (by comparing the assigned priorities of the queues having a water level that exceeds its water mark). Read control logic <b>102</b> also accesses the queue configuration register associated with the selected master read queue to determine whether this queue should be read in packet mode or raw data mode. More specifically, read control logic <b>102</b> retrieves the access mode ID value stored in the queue configuration register of the selected master read queue to determine whether the selected master read queue is configured to operate in the packet mode or the raw data mode. If read control logic <b>102</b> determines that the selected master read queue is configured to be read in the packet mode, processing proceeds to LATCH_WLEVEL state <b>402</b>.</p>
<p id="p-0054" num="0053">Read control logic <b>102</b> also accesses the queue configuration register associated with the selected master read queue to determine whether this queue is configured to be read in the flush mode or the non-flush mode. More specifically, read control logic <b>102</b> retrieves the read mode ID value stored in the queue configuration register associated with the selected master read queue to determine whether the selected master read queue is configured to operate in the flush mode or the non-flush mode. In the flush mode, all data packets below the water mark of the selected master read queue will be read. Thus, the flush mode can be used to maximize bandwidth and performance of transfers out of serial buffer <b>100</b>. In the non-flush mode, a single data packet will be read from the selected master read queue.</p>
<p id="p-0055" num="0054">Within LATCH_WLEVEL state <b>402</b>, read control logic <b>102</b> stores the water mark of the selected master read queue as a latched water level value if the flush mode is enabled for this queue. In this manner, the latched water level value is a fixed value (i.e., the water mark), thereby guaranteeing a fixed amount of data will be transferred to the target application. Note that if the non-flush mode is enabled, the water mark is not latched (because only a single packet will be read from the selected master read queue in the non-flush mode). Processing proceeds from LATCH_WLEVEL state <b>402</b> to MREAD_PKT_HEADER state <b>403</b>.</p>
<p id="p-0056" num="0055">Within MREAD_PKT_HEADER state <b>403</b>, read control logic <b>102</b> performs a read access to the selected master read queue, thereby retrieving the packet header of the next packet to be read from this queue. In the described embodiment, queues Q<b>0</b>-Q<b>7</b> are accessed in a first in, first out (FIFO) manner. This retrieved packet header is used to construct a corresponding outgoing packet header, which is transferred out of serial buffer <b>100</b>, via a port (e.g., the first port <b>1</b> or the second port <b>2</b>) associated with the selected master read queue. The constructed outgoing packet header will include, for example, the packet size field of the packet header retrieved from the selected master read queue. The constructed outgoing packet header will also include the source ID of the selected master read queue, which is retrieved from the corresponding queue configuration register. The constructed outgoing packet header will also include additional information, including an sRIO packet priority level (PRIO_n[<b>1</b>:<b>0</b>]), a TT value (TT_n), a frame type value (FTYPE_n[<b>3</b>:<b>0</b>]), a transaction type value (TTYPE_n[<b>3</b>:<b>0</b>]) and a destination identification (ID) value (DEST_ID_n[<b>3</b>:<b>0</b>]). A TT value of &#x2018;0&#x2019; indicates that a corresponding sRIO packet includes 8-bit source and destination ID values, and a TT value of &#x2018;1&#x2019; indicates that a corresponding sRIO packet includes 16-bit source and destination ID values. The frame type value and transaction type values are used to specify different sRIO packet types. In one embodiment, this additional information is retrieved from a look-up table, in response to the source ID of the selected master read queue. After read control logic <b>102</b> transfers the constructed outgoing packet header, processing proceeds to MREAD_PKT_DATA state <b>404</b>.</p>
<p id="p-0057" num="0056">Within MREAD_PKT_DATA state <b>404</b>, read control logic <b>102</b> reads packet data from the selected master read queue, and transfers this packet data out of serial buffer <b>100</b> to the port associated with the selected master read queue. Processing then proceeds to Step <b>405</b>.</p>
<p id="p-0058" num="0057">If the data value (e.g., double-word) previously read from the selected master read queue during MREAD_PKT_DATA state <b>404</b> is not the last data value of the packet data (Step <b>405</b>, NO branch), then processing returns to MREAD_PKT_DATA state <b>404</b>, wherein the next data value of the packet data is read from the selected master read queue. However, if the data value read from the selected master read queue represents the last data value of the packet data (Step <b>405</b>, YES branch), then processing then processing proceeds to DEC_WLEVEL state <b>406</b>. The last data value of the packet data can be specified, for example, by an end-of-packet symbol (EOP).</p>
<p id="p-0059" num="0058">Within DEC_WLEVEL state <b>406</b>, if the selected master read queue is configured to operate in the non-flush mode, then the water level of the selected master read queue is decremented by one, to reflect the fact that a packet has been read out of this selected queue. Processing then returns to IDLE state <b>401</b>.</p>
<p id="p-0060" num="0059">However, if the selected master read queue is configured to operate in the flush mode, then the latched water level previously stored during LATCH_WLEVEL state <b>402</b> is decremented by one, and processing proceeds from DEC_WLEVEL state <b>406</b> to Step <b>407</b>. If the latched water mark has not yet reached a zero value (Step <b>407</b>, NO branch), thereby indicating that not all of the packets below the water mark have been flushed (read) from the selected master read queue, then processing returns to MREAD_PKT_HEADER state <b>403</b>, such that the next packet is transferred from the selected master read queue in the manner described above.</p>
<p id="p-0061" num="0060">When the latched water level value reaches zero (Step <b>407</b>, YES branch), thereby indicating that all of the packets below the water mark have been flushed (read) out of the selected master read queue, then processing returns to IDLE state <b>401</b>.</p>
<p id="p-0062" num="0061">Returning now to IDLE state <b>401</b>, if read control logic <b>102</b> initially determines that the selected master read queue is configured to operate in the raw data mode, then processing proceeds from IDLE state <b>401</b> to LATCH_RAW_WLEVEL state <b>411</b>. That is, read control logic <b>102</b> will perform the master read operation in a raw data mode. In LATCH_RAW_WLEVEL state <b>411</b>, read control logic <b>102</b> latches the water level of the selected master read queue, which represents the number of packet data values (e.g., double-words) to be read out of this selected queue. Note that in the described embodiment, a selected master read queue configured to operate in the raw data mode is also configured to operate in the flush mode. Processing then proceeds to MREAD_RAW_HEADER state <b>412</b>.</p>
<p id="p-0063" num="0062">Within MREAD_RAW_HEADER state <b>412</b>, read control logic <b>102</b> constructs an outgoing packet header in response to the identity of the selected master read queue. The constructed outgoing packet header will include, for example, the source ID of the selected master read queue, which is retrieved from the corresponding queue configuration register. The constructed outgoing packet header will also include the water level latched during LATCH_RAW_WLEVEL state <b>411</b> (wherein this latched water level specifies the size of the data being transferred by the master read operation). The constructed outgoing packet header will also include additional information, such as sRIO packet priority level (PRIO_n[<b>1</b>:<b>0</b>]), a TT value (TT_n), a frame type value (FTYPE_n[<b>3</b>:<b>0</b>]), a transaction type value (TTYPE_n[<b>3</b>:<b>0</b>]) and a destination identification (ID) value (DEST_ID_n[<b>3</b>:<b>0</b>]). In one embodiment, this additional information is retrieved from a look-up table, in response to the source ID of the selected master read queue. The constructed outgoing packet header is transferred out of serial buffer <b>100</b>, to the port associated with the selected master read queue. Processing then proceeds to MREAD_RAW_DATA state <b>413</b>.</p>
<p id="p-0064" num="0063">Within MREAD_RAW_DATA state <b>413</b>, read control logic <b>102</b> reads a packet data value (e.g., double-word) from the selected master read queue, and transfers this data value out of serial buffer <b>100</b> to the port associated with the selected master read queue. Also within MREAD_RAW_DATA state <b>413</b>, the double-word count (i.e., the water level) previously latched during LATCH_RAW_WLEVEL state <b>411</b> is decremented by one, to reflect the fact that a double-word has been read out of the selected master read queue. Processing then proceeds to Step <b>414</b>.</p>
<p id="p-0065" num="0064">If the latched double-word count has not yet reached a zero value, (Step <b>414</b>, NO branch), then processing returns to MREAD_RAW_DATA state <b>413</b>, wherein the next double-word is read from the selected master read queue, and the latched water level (i.e., double-word count) is again decremented by one. When the latched double-word count is decremented to a zero value, (Step <b>414</b>, YES branch), thereby indicating that all of the double-words below the latched water level have been flushed (read) out of the selected master read queue, then processing returns to IDLE state <b>401</b>.</p>
<p id="p-0066" num="0065">In the above-describe manner, read control logic <b>102</b> may operate as a bus master to transfer data out of queues Q<b>0</b>-Q<b>7</b> in a packet mode or a raw data mode. If a queue is configured to operate in the packet mode, then the number of packets read out of this queue during a master read operation may be selected by adjusting the water mark associated with this queue (assuming that this queue is also configured to operate in the flush mode). Similarly, if a queue is configured to operate in the raw data mode, then the number of data values read out of this queue during a master read operation may be selected by adjusting the water mark associated with this queue. By selecting the water mark values, the amount of data read from a queue in response to a master read operation may be different than the amount of data previously written to the queue during a write operation. In accordance with one embodiment, the water mark may be selected such that the amount of data read by a master read operation is greater than a maximum packet size (e.g., greater than 256 bytes).</p>
<p id="p-0067" num="0066">Moreover, during a master read operation read control logic <b>102</b> advantageously constructs packet headers for packet data that was previously stored without packet headers in the raw data mode. Because these packet headers are constructed in response to the identity of the selected master read queue, the processing requirements of serial buffer <b>100</b> are greatly reduced (as the serial buffer <b>100</b> does not require additional software to generate packet headers for packet data stored in the raw data mode).</p>
<p id="p-0068" num="0067">Although the present invention has been described in connection with various embodiments, it is understood that variations of these embodiments would be obvious to one of ordinary skill in the art. For example, although some values have been described as being stored in the queue configuration registers QCR<b>0</b>-QCR<b>7</b>, it is understood that these values may be represented as flags within serial buffer <b>100</b>. Thus, the present invention is limited only by the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A serial buffer comprising:
<claim-text>one or more queues;</claim-text>
<claim-text>one or more queue configuration registers, each associated with a corresponding one of the one or more queues,</claim-text>
<claim-text>wherein each of the one or more queue configuration registers stores an access mode value that indicates whether the corresponding one of the one or more queues operates in a packet mode or a raw data mode,</claim-text>
<claim-text>wherein each of the one or more queues may operate in the packet mode and the raw data mode in response to the access mode value, and</claim-text>
<claim-text>wherein both a packet header and corresponding packet data are written to a queue identified in the packet header if the access mode value of the identified queue indicates that the identified queue operates in the packet mode, and only the corresponding packet data are written to the queue identified in the packet header if the access mode value of the identified queue indicates that the identified queue operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The serial buffer of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a first port that operates in accordance with a first serial protocol; and</claim-text>
<claim-text>a second port that operates in accordance with a second serial protocol, different than the first serial protocol, wherein the first port and the second port are coupled to the one or more queues.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The serial buffer of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the one or more queue configuration registers stores a read mode value that indicates whether the corresponding one of the one or more queues operates in a flush mode or a non-flush mode, wherein each of the one or more queues may operate in either the flush mode or the non-flush mode in response to the read mode value, and wherein all packet data below a water mark of the queue is read from each of the one or more queues that operate in the flush mode, and wherein packet data associated with a single packet is read from each of the one or more queues that operate in the non-flush mode.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The serial buffer of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the one or more configuration registers stores a priority value that indicates a priority with which the corresponding one of the one or more queues is accessed.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The serial buffer of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the one or more configuration registers stores a destination address used to access the corresponding one of the one or more queues during a write operation.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The serial buffer of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein each of the one or more configuration registers further stores a source address used to access the corresponding one of the one or more queues during a read operation.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method of operating a serial buffer comprising:
<claim-text>receiving an incoming packet that includes a packet header and packet data, wherein the packet header identifies a queue from among one or more queues of the serial buffer;</claim-text>
<claim-text>for each queue of the one or more queues, storing an access mode value that indicates whether the respective queue operates in a packet mode or a raw data mode, wherein the respective queue may operate in either the packet mode or the raw data mode depending on the access mode value;</claim-text>
<claim-text>writing the packet header and the packet data of the incoming packet to the identified queue if the corresponding access mode value indicates that the identified queue operates in the packet mode; and</claim-text>
<claim-text>writing the packet data, but not the packet header, to the identified queue if the corresponding access mode value indicates that the identified queue operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising writing start-of-packet and end-of-packet delimiters to the identified queue if the corresponding access mode value indicates that the identified queue operates in the raw data mode.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>for each queue of the one or more queues, storing a read mode identification value that indicates whether the respective queue operates in a flush mode or a non-flush mode, wherein the respective queue may operate in either the flush mode or the non-flush data mode depending on the read mode identification value;</claim-text>
<claim-text>determining when a water level of a particular queue reaches a water mark assigned to the particular queue; and</claim-text>
<claim-text>if the corresponding access mode value indicates that the particular queue operates in the packet mode and the corresponding read mode identification value indicates that the particular queue operates in the flush mode, then reading all packet headers and packet data below the water mark assigned to the particular queue upon determining that the water level of the particular queue has reached the water mark assigned to the particular queue.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>if the corresponding access mode value indicates that the particular queue operates in the raw data mode and the corresponding read mode identification value indicates that the particular queue operates in the flush mode, then reading all packet data below the watermark assigned to the particular queue upon determining that the water level of the particular queue has reached the water mark assigned to the particular queue.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>if the corresponding access mode value indicates that the particular queue operates in the packet data mode and the corresponding read mode identification value indicates that the particular queue operates in the non-flush mode, then reading the packet header and packet data of one packet from the particular queue upon determining that the water level of the particular queue has reached the water mark assigned to the particular queue.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>receiving a slave read request packet from a processor, wherein the slave read request packet identifies a queue from among the one or more queues and includes a data size field that specifies an amount of data to be read from the queue identified by the slave read request packet;</claim-text>
<claim-text>accessing the corresponding access mode value to determine whether the queue identified by the slave read request packet operates in the packet mode or the raw data mode; and</claim-text>
<claim-text>transferring data from the queue identified by the slave read request packet to the processor in response to the slave read request packet,</claim-text>
<claim-text>wherein the data size field specifies a number of packets transferred from the queue identified by the slave read request packet to the processor when the queue identified by the slave read request packet operates in the packet mode, and</claim-text>
<claim-text>wherein the data size field specifies a number of data words transferred from the queue identified by the slave read request packet to the processor when the queue identified by the slave read request packet operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>receiving a slave read request packet from a processor, wherein the slave read request packet identifies a queue from among the one or more queues of the serial buffer;</claim-text>
<claim-text>accessing the corresponding access mode value to determine whether the queue identified by the slave read request packet operates in the packet mode or the raw data mode; and</claim-text>
<claim-text>creating a constructed packet header from information included in the slave read request packet if the queue identified by the slave read request packet operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>retrieving packet data from the queue identified by the slave read request packet; and</claim-text>
<claim-text>transmitting the retrieved packet data and the constructed packet header to the processor if the queue identified by the slave read request packet operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method of operating a serial buffer comprising:
<claim-text>receiving an incoming packet that includes a packet header and packet data;</claim-text>
<claim-text>identifying a queue specified by the packet header of the incoming packet from among one or more queues of the serial buffer, each of the one or more queues having a corresponding queue configuration register;</claim-text>
<claim-text>determining, based on an access mode value stored in the queue configuration register corresponding to the identified queue, whether the identified queue operates in a packet mode or a raw data mode, wherein the identified queue is capable of operating in both the packet mode and the raw data mode in response to the access mode value;</claim-text>
<claim-text>writing both the packet header and the packet data of the incoming packet to the identified queue if the identified queue operates in the packet mode; and</claim-text>
<claim-text>writing only the packet data of the incoming packet to the identified queue if the identified queue operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>receiving a read request packet;</claim-text>
<claim-text>identifying a queue specified by the read request packet from among the one or more queues;</claim-text>
<claim-text>determining whether the queue specified by the read request packet operates in the packet mode or the raw data mode;</claim-text>
<claim-text>reading packet data from the queue specified by the read request packet; and</claim-text>
<claim-text>creating a constructed packet header using information included in the read request packet if the queue specified by the read request packet operates in the raw data mode.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising
<claim-text>transmitting the constructed packet header and the packet data read from the queue specified by the read request packet as a response to the read request packet.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

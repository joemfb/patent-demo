<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625457-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625457</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11949167</doc-number>
<date>20071203</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1339</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>24</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classifications-cpc>
<main-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>41</main-group>
<subgroup>12</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</main-cpc>
<further-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>41</main-group>
<subgroup>0213</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>41</main-group>
<subgroup>04</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>41</main-group>
<subgroup>046</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>41</main-group>
<subgroup>0893</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</further-cpc>
</classifications-cpc>
<classification-national>
<country>US</country>
<main-classification>370254</main-classification>
<further-classification>370255</further-classification>
<further-classification>709223</further-classification>
<further-classification>709224</further-classification>
</classification-national>
<invention-title id="d2e53">Method and apparatus for concurrent topology discovery</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5185860</doc-number>
<kind>A</kind>
<name>Wu</name>
<date>19930200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5850397</doc-number>
<kind>A</kind>
<name>Raab et al.</name>
<date>19981200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5974237</doc-number>
<kind>A</kind>
<name>Shurmer et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6173325</doc-number>
<kind>B1</kind>
<name>Kukreja</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6639900</doc-number>
<kind>B1</kind>
<name>Anstey et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6883024</doc-number>
<kind>B2</kind>
<name>Ullmann</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7082134</doc-number>
<kind>B1</kind>
<name>Lim et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7139824</doc-number>
<kind>B2</kind>
<name>Grech et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7206861</doc-number>
<kind>B1</kind>
<name>Callon</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709242</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2002/0078237</doc-number>
<kind>A1</kind>
<name>Leighton et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709239</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0260745</doc-number>
<kind>A1</kind>
<name>Gage et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709200</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0086344</doc-number>
<kind>A1</kind>
<name>Suesserman</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2005/0128944</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0015632</doc-number>
<kind>A1</kind>
<name>Tiemann et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709230</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2006/0182034</doc-number>
<kind>A1</kind>
<name>Klinker et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>370238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2007/0100940</doc-number>
<kind>A1</kind>
<name>Eriksson</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0181134</doc-number>
<kind>A1</kind>
<name>Anerousis et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>GB</country>
<doc-number>2404644</doc-number>
<kind>A</kind>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>JP</country>
<doc-number>H04229742</doc-number>
<kind>A</kind>
<date>19920800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>JP</country>
<doc-number>H0993265</doc-number>
<kind>A</kind>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>JP</country>
<doc-number>2004282272</doc-number>
<kind>A</kind>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>WO</country>
<doc-number>WO2008016861</doc-number>
<kind>A2</kind>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>International Search Report for Application No. GB0818191.9 dated Oct. 29, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>Li, Yuzhao, Changxing Pei, Changhua Zhu and Jiandong Li &#x201c;An Algorithm for Discovering Physical Topology in Single Subnet IP Networks,&#x201d; <i>Proceedings of the 19th International Conference on Advanced Information Networking and Applications </i>(<i>AINA '05</i>) IEEE , 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370254</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370255</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-cpc-text>H04L 41/12</classification-cpc-text>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090141659</doc-number>
<kind>A1</kind>
<date>20090604</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Martin</last-name>
<first-name>Daniel Joseph</first-name>
<address>
<city>Pawling</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Verma</last-name>
<first-name>Dinesh C.</first-name>
<address>
<city>New Castle</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Martin</last-name>
<first-name>Daniel Joseph</first-name>
<address>
<city>Pawling</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Verma</last-name>
<first-name>Dinesh C.</first-name>
<address>
<city>New Castle</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Terrile, Cannatti, Chambers &#x26; Holland, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Terrile</last-name>
<first-name>Stephen A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Sheikh</last-name>
<first-name>Ayaz</first-name>
<department>2476</department>
</primary-examiner>
<assistant-examiner>
<last-name>Hampton</last-name>
<first-name>Tarell</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method, system and computer-usable medium for discovering the topology of a network by using multiple discovery agents operating in parallel. A NodeList containing information about known nodes in a target network is received. The number (&#x2018;K&#x2019;) of discovery agents to be used is determined, where 1&#x3c;=K&#x3c;=TotalNumberOfNodes). The nodes are partitioned into node groups, each of which has a group identifier respectively assigning it to a discovery agent &#x2018;M&#x2019; where 1&#x3c;=M&#x3c;=K. A GraphList is created to hold information about known and discovered nodes. Each entry in the NodeList list is processed by its assigned discovery agent &#x2018;M&#x2019;, which sends probe messages to the target node to determine the node identifiers of discovered neighboring nodes.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="222.59mm" wi="179.66mm" file="US08625457-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="225.47mm" wi="171.28mm" orientation="landscape" file="US08625457-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="227.67mm" wi="151.55mm" orientation="landscape" file="US08625457-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="233.09mm" wi="180.09mm" file="US08625457-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="229.28mm" wi="175.68mm" file="US08625457-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="220.98mm" wi="169.67mm" file="US08625457-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">Embodiments of the disclosure relate in general to the field of computers and similar technologies, and in particular to software utilized in this field. Still more particularly, it relates to discovering the topology of a network.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">The growth of the Internet, combined with the recent popularity of applications such as streaming video, streaming audio, and large aggregations of voice over Internet protocol (VOIP) traffic, has resulted in a growing demand for network bandwidth and availability. To meet these demands, additional switches, bridges, and hubs are being deployed in ever-increasing numbers. As a result, the amount of network infrastructure to be managed will continue to grow. The effective management of network elements requires accurate and up-to-date knowledge of the network's topology, which is a representation of its nodes and their connections to each other. Knowledge of the topology of a network's elements is generally a prerequisite for many network management tasks, including reactive and proactive resource management, performance evaluation and optimization, flow control, event correlation, and root cause analysis of service faults. However, discovering information about the topology of a network more challenging as the size of the network grows.</p>
<p id="p-0006" num="0005">Approaches to discovering a network's topology include the use of a discovery agent that performs a graph traversal of the network's elements, collecting information about each node in a network and its connections to other nodes. The discovery process begins with the agent being provided a set of known nodes in the network. With probes, such as simple network management protocol (SNMP) queries, or by reading routing table information, the agent discovers links flowing outward from the known portions of the graph. The agent then finds the nodes that belong to the other side of that link. The process continues until no more links remain to be explored.</p>
<p id="p-0007" num="0006">There are two key performance indicators of the discovery process, the first being the time it takes to discover the network and the second being the number of probe messages that are sent to the network nodes. The most efficient discovery process would send only one probe message per node. With a single discovery agent, the time taken to discover the network is the sum of the response time for each probe message. In a large network of thousands, or tens of thousands, of network nodes, such a graph traversal can consume a significant amount of time. The time required to perform the graph traversal can be reduced if multiple agents can operate in parallel to discover and traverse the graph in parallel. However, such parallel discovery may result in sending multiple probe messages to each of the different nodes. As a result, unless properly coordinated, multiple node discovery agents working in parallel would not result in a reduction of the time spent to discover the network's topology.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0008" num="0007">The present invention includes, but is not limited to, a method, system and computer-usable medium for discovering the topology of a network with a network node discovery manager using multiple node discovery agents operating in parallel. In various embodiments, a network node discovery manager obtains a NodeList containing the unique node identifier of each known node in a target network. The number (&#x2018;K&#x2019;) of node discovery agents to be used in parallel to discover the topology of the target network is then determined. Any number of node discovery agents can be chosen, from a single node discovery agent up to the total number of known nodes (i.e., 1&#x3c;=K&#x3c;=TotalNumberOfNodes). A GraphList of network nodes is created by the node discovery manager to hold node information about both known and discovered nodes, and is initially assigned to be empty.</p>
<p id="p-0009" num="0008">Hash operations are performed on the unique node identifiers in the NodeList to partition the known nodes into the same number of node groups as the number (&#x2018;K&#x2019;) of node discovery agents. The generated hash values associated with each node group are then appended to their corresponding unique node identifiers in the NodeList. The hash value associated with node groups are then respectively assigned to a node discovery agent &#x2018;M&#x2019; where 1&#x3c;=M&#x3c;=K. A node information receipt thread for the GraphList is initiated by the node discovery manager, followed by the initiation of a node discovery thread for each of the node discovery agents &#x2018;M&#x2019;. An unprocessed node identifier entry is then popped from the NodeList and its corresponding node group hash value is determined. If the node discovery agent &#x2018;M&#x2019; assigned to the node group hash value is busy, then the process is repeated until a node identifier entry is popped that corresponds to an available node discovery agent &#x2018;M&#x2019;.</p>
<p id="p-0010" num="0009">The node discovery agent &#x2018;M&#x2019; then sends probe messages, such as SNMP queries, to the target known node. If the probe determines that the target node is connected to neighboring nodes, then information about connections to the neighboring nodes is collected. In one embodiment, the connections are physical connections. In another embodiment, the connections are logical. In yet another embodiment, the connections may be a combination of physical or logical connections. The collected node and connection information is processed to determine the unique node identifier of discovered neighboring nodes. If the unique node identifiers of the discovered neighboring nodes are not currently listed in the NodeList, then hash operations are performed on their unique node identifiers. The resulting group node hash values are then used to assign the discovered neighboring nodes to a node for processing by its corresponding node discovery agent &#x2018;M&#x2019;. If the connections between the target and the discovered neighboring node nodes are not currently listed in the GraphList, then they are added. The process is continued until all &#x2018;K&#x2019; node discovery agents &#x2018;M&#x2019; have completed their node discovery operations on known and discovered neighboring node nodes. Once all node information is collected by the &#x2018;K&#x2019; node discovery agents &#x2018;M&#x2019; and listed in the GraphList, a network topology is generated. The above, as well as additional purposes, features, and advantages of the present invention will become apparent in the following detailed written description.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">Selected embodiments of the present invention may be understood, and its numerous objects, features and advantages obtained, when the following detailed description is considered in conjunction with the following drawings, in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> depicts an exemplary client computer in which the present invention may be implemented;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a simplified block diagram of a network node discovery manager using network node discovery agents operating in parallel to discover the topology of a network; and</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of the operation of a network node discovery manager using network node discovery agents operating in parallel to discover the topology of a network.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0015" num="0014">A method, system and computer-usable medium are disclosed for discovering the topology of a network with a network node discovery manager using multiple node discovery agents operating in parallel. As will be appreciated by one skilled in the art, the present invention may be embodied as a method, system, or computer program product. Accordingly, embodiments of the invention may be implemented entirely in hardware, entirely in software (including firmware, resident software, micro-code, etc.) or in an embodiment combining software and hardware. These various embodiments may all generally be referred to herein as a &#x201c;circuit&#x201d;, &#x201c;module&#x201d;, or &#x201c;system&#x201d;. Furthermore, the present invention may take the form of a computer program product on a computer-usable storage medium having computer-usable program code embodied in the medium.</p>
<p id="p-0016" num="0015">Any suitable computer usable or computer readable medium may be utilized. The computer-usable or computer-readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therein, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to the Internet, wireline, optical fiber cable, radio frequency (RF), etc.</p>
<p id="p-0017" num="0016">Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java, Smalltalk, C++, or the like. However, the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0018" num="0017">Embodiments of the invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0019" num="0018">These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0020" num="0019">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary client computer <b>102</b> in which the present invention may be utilized. Client computer <b>102</b> includes a processor unit <b>104</b> that is coupled to a system bus <b>106</b>. A video adapter <b>108</b>, which controls a display <b>110</b>, is also coupled to system bus <b>106</b>. System bus <b>106</b> is coupled via a bus bridge <b>112</b> to an Input/Output (I/O) bus <b>114</b>. An I/O interface <b>116</b> is coupled to I/O bus <b>114</b>. The I/O interface <b>116</b> affords communication with various I/O devices, including a keyboard <b>118</b>, a mouse <b>120</b>, a Compact Disk-Read Only Memory (CD-ROM) drive <b>122</b>, a floppy disk drive <b>124</b>, and a flash drive memory <b>126</b>. The format of the ports connected to I/O interface <b>116</b> may be any known to those skilled in the art of computer architecture, including but not limited to Universal Serial Bus (USB) ports.</p>
<p id="p-0022" num="0021">Client computer <b>102</b> is able to communicate with a service provider server <b>152</b> via a network <b>128</b> using a network interface <b>130</b>, which is coupled to system bus <b>106</b>. Network <b>128</b> may be an external network such as the Internet, or an internal network such as an Ethernet Network or a Virtual Private Network (VPN). Using network <b>128</b>, client computer <b>102</b> is able to use the present invention to access service provider server <b>152</b>.</p>
<p id="p-0023" num="0022">A hard drive interface <b>132</b> is also coupled to system bus <b>106</b>. Hard drive interface <b>132</b> interfaces with a hard drive <b>134</b>. In a preferred embodiment, hard drive <b>134</b> populates a system memory <b>136</b>, which is also coupled to system bus <b>106</b>. Data that populates system memory <b>136</b> includes the client computer's <b>102</b> operating system (OS) <b>138</b> and software programs <b>144</b>.</p>
<p id="p-0024" num="0023">OS <b>138</b> includes a shell <b>140</b> for providing transparent user access to resources such as software programs <b>144</b>. Generally, shell <b>140</b> is a program that provides an interpreter and an interface between the user and the operating system. More specifically, shell <b>140</b> executes commands that are entered into a command line user interface or from a file. Thus, shell <b>140</b> (as it is called in UNIX&#xae;), also called a command processor in Windows&#xae;, is generally the highest level of the operating system software hierarchy, and serves as a command interpreter. The shell provides a system prompt, interprets commands entered by keyboard, mouse, or other user input media, and sends the interpreted command(s) to the appropriate lower levels of the operating system (e.g., a kernel <b>142</b>) for processing. While shell <b>140</b> generally is a text-based, line-oriented user interface, the present invention can also support other user interface modes, such as graphical, voice, gestural, etc.</p>
<p id="p-0025" num="0024">As depicted, OS <b>138</b> also includes kernel <b>142</b>, which includes lower levels of functionality for OS <b>138</b>, including essential services required by other parts of OS <b>138</b> and software programs <b>144</b>, including memory management, process and task management, disk management, and mouse and keyboard management.</p>
<p id="p-0026" num="0025">Software programs <b>144</b> may include a browser <b>146</b> and email client <b>148</b>. Browser <b>146</b> includes program modules and instructions enabling a World Wide Web (WWW) client (i.e., client computer <b>102</b>) to send and receive network messages to the Internet using HyperText Transfer Protocol (HTTP) messaging, thus enabling communication with service provider server <b>152</b>. Software programs <b>144</b> also include a node discovery manager <b>150</b> and one or more node discovery agents <b>152</b>. The node discovery manager <b>150</b> and the one or more node discovery agents <b>152</b> include code for implementing the processes described in <figref idref="DRAWINGS">FIGS. 2 through 3</figref> described herein below. In one embodiment, client computer <b>102</b> is able to download the node discovery manager <b>150</b> and the one or more node discovery agents <b>152</b> from a service provider server <b>152</b>.</p>
<p id="p-0027" num="0026">The hardware elements depicted in client computer <b>102</b> are not intended to be exhaustive, but rather are representative to highlight components used by the present invention. For instance, client computer <b>102</b> may include alternate memory storage devices such as magnetic cassettes, Digital Versatile Disks (DVDs), Bernoulli cartridges, and the like. These and other variations are intended to be within the spirit and scope of the present invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2</figref> is a simplified block diagram of a network node discovery manager using network node discovery agents operating in parallel to discover the topology of a network. In various embodiments, a network management host <b>202</b> comprises a network node discovery manager <b>150</b> and one or more network node discovery agents <b>152</b>. Network node discovery operations are begun with the network node discovery manager <b>150</b> obtaining a NodeList <b>204</b> that contains node information about the known network nodes of target network <b>208</b>. The node information contained in the NodeList <b>204</b> includes the unique node identifier of each known node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, and &#x2018;D&#x2019; <b>216</b> of the network <b>208</b>.</p>
<p id="p-0029" num="0028">The number (&#x2018;K&#x2019;) of node discovery agents <b>152</b> to be used in discovering the topology of the target network <b>208</b> is determined by the node discovery manager <b>150</b>. Any number of node discovery agents can be chosen, from a single node discovery agent up to the total number of known nodes (i.e., 1&#x3c;=K&#x3c;=TotalNumberOfNodes). It will be appreciated that a single node discovery agent may be inadequate for discovering the topology of a network comprising thousands of nodes. Conversely, using an individual node discovery agent for each of the thousands of nodes would likely represent an unreasonable processing overhead burden on the network management host <b>202</b>. A GraphList of network nodes <b>206</b> is created by the node discovery manager <b>150</b> to hold node information about both known and discovered nodes, and is initially assigned to be empty.</p>
<p id="p-0030" num="0029">Hash operations are performed on the unique node identifiers in the NodeList <b>204</b> to partition the known nodes &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, and &#x2018;D&#x2019; <b>216</b> into the same number of node groups as the number (&#x2018;K&#x2019;) of node discovery agents <b>152</b>. As an example, hash operations performed on the unique node identifiers of known nodes &#x2018;A&#x2019; <b>210</b> and &#x2018;B&#x2019; <b>212</b> result in the group hash value assigned to node group &#x2018;<b>1</b>&#x2019; <b>222</b>. Similarly, hash operations performed on the unique node identifiers of known nodes &#x2018;C&#x2019; <b>214</b> and &#x2018;D&#x2019; <b>216</b> result in the node group hash value assigned to node group &#x2018;<b>2</b>&#x2019; <b>224</b>. The generated hash values associated with node groups &#x2018;<b>1</b>&#x2019; <b>222</b> and &#x2018;<b>2</b>&#x2019; <b>224</b> are then appended to their corresponding unique node identifiers in the NodeList <b>204</b>. The hash values associated with node groups &#x2018;<b>1</b>&#x2019; <b>222</b> and &#x2018;<b>2</b>&#x2019; <b>224</b> are then respectively assigned to a node discovery agent &#x2018;M&#x2019; <b>152</b>, where 1&#x3c;=M&#x3c;=K. Once the node group hash values are respectively assigned to each node discovery agent &#x2018;M&#x2019; <b>152</b>, parallel operation of the &#x2018;K&#x2019; number of node discovery agents <b>152</b> is initiated by the network node discovery manager <b>150</b>. A node information receipt thread for the GraphList <b>206</b> is initiated by the node discovery manager <b>150</b>, followed by the initiation of a node discovery thread for each of the node discovery agents &#x2018;M&#x2019; <b>152</b>.</p>
<p id="p-0031" num="0030">An unprocessed node identifier is then popped from the NodeList <b>204</b> and its corresponding node group hash value is determined. If it is determined that the node discovery agent &#x2018;M&#x2019; <b>152</b> assigned to the node group hash value is busy, then the process is repeated until a node identifier entry is popped that corresponds to a node discovery agent &#x2018;M&#x2019; <b>152</b> that is not busy. Once a node identifier entry is popped that has a node group hash value corresponding to a node discovery agent &#x2018;M&#x2019; <b>152</b> that is not busy, the target known node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, &#x2018;D&#x2019; <b>216</b> is assigned to its corresponding node discovery agent &#x2018;M&#x2019; <b>152</b> for processing. The node discovery agent &#x2018;M&#x2019; <b>152</b> then sends probe messages, such as SNMP queries and other methods familiar to those of skill in the art, to the target known node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, and &#x2018;D&#x2019; <b>216</b>.</p>
<p id="p-0032" num="0031">A determination is then made whether the known target node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, and &#x2018;D&#x2019; <b>216</b> is connected to one or more unknown neighboring nodes &#x2018;E&#x2019; <b>218</b>, &#x2018;F&#x2019; <b>220</b>. If it is determined that the target node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, &#x2018;D&#x2019; <b>216</b> is connected to neighboring nodes &#x2018;E&#x2019; <b>218</b>, &#x2018;F&#x2019; <b>220</b>, then the probe collects node information from the target node &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, &#x2018;D&#x2019; <b>216</b>, including information about connections to neighboring nodes E&#x2032; <b>218</b>, &#x2018;F&#x2019; <b>220</b>. In one embodiment, the connections are physical connections. In another embodiment, the connections are logical. In yet another embodiment, the connections may be a combination of physical or logical connections. The collected node information is processed to determine unique node identifier of discovered neighboring nodes E&#x2032; <b>218</b> and &#x2018;F&#x2019; <b>220</b>.</p>
<p id="p-0033" num="0032">As an example, the node discovery agent &#x2018;M&#x2019; <b>152</b> assigned to node group &#x2018;<b>2</b>&#x2019; <b>224</b> probes known node &#x2018;D&#x2019; <b>216</b> for connections to neighboring nodes. The collected node information indicates that known node &#x2018;D&#x2019; <b>216</b> is connected to known nodes &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b> as well as unknown, or discovered, nodes E&#x2032; <b>218</b> and &#x2018;F&#x2019; <b>220</b>. A determination is then made whether the unique node identifiers of the discovered neighboring nodes E&#x2032; <b>218</b> and &#x2018;F&#x2019; <b>220</b> are currently listed in the NodeList <b>204</b>. If they are not, then hash operations described in greater detail herein are performed on their respective unique node identifiers to generate a hash value that can be used to assign the discovered neighboring nodes E&#x2032; <b>218</b> and &#x2018;F&#x2019; <b>220</b> for processing to a designated node discovery agent &#x2018;M&#x2019; <b>152</b>. As an example, the hash value of discovered neighboring node &#x2018;E&#x2019; <b>218</b> signifies that it be assigned <b>226</b> to the node group &#x2018;<b>1</b>&#x2019; <b>222</b>. Similarly, the hash value of discovered neighboring node &#x2018;F&#x2019; <b>220</b> signifies that it be assigned <b>228</b> to the node group &#x2018;<b>1</b>&#x2019; <b>224</b>. A determination is then made whether one or more connections between the target node &#x2018;A&#x2019; <b>210</b>. &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, &#x2018;D&#x2019; <b>216</b> and discovered neighboring node nodes E&#x2032; <b>218</b>, &#x2018;F&#x2019; <b>220</b> are listed in the GraphList <b>206</b>. If they are not, then they are added to the GraphList <b>206</b>. The process is continued until all &#x2018;K&#x2019; node discovery agents &#x2018;M&#x2019; <b>152</b> have completed their node discovery operations on known nodes &#x2018;A&#x2019; <b>210</b>, &#x2018;B&#x2019; <b>212</b>, &#x2018;C&#x2019; <b>214</b>, &#x2018;D&#x2019; <b>216</b> and discovered neighboring node nodes E&#x2032; <b>218</b>, &#x2018;F&#x2019; <b>220</b>. Once all node information is listed in the GraphList <b>206</b>, a network topology is generated and network node discovery operations are ended.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a network node discovery manager using network node discovery agents operating in parallel to discover the topology of a network. In one embodiment of the invention, network node discovery operations are begun in step <b>302</b>. In step <b>304</b>, information about the target network is obtained by a network node discovery manager, including the unique node identifier of each known node in the network. The number (&#x2018;K&#x2019;) of node discovery agents to be used in discovering the topology of the target network is then determined in step <b>306</b> by the node discovery manager. For example, any number of node discovery agents can be chosen, from a single node discovery agent up to the total number of known nodes (i.e., I&#x3c;=K&#x3c;=TotalNumberOfNodes). It will be appreciated that a single node discovery agent may be insufficient for discovering the topology of a network comprising thousands of nodes. Conversely, using an individual node discovery agent for each of the thousands of nodes would likely represent an unreasonable processing overhead burden on a network management server.</p>
<p id="p-0035" num="0034">The initial set of known nodes, along with their associated unique node identifiers, is then assigned by the node discovery manager to a NodeList in step <b>308</b>. A GraphList, which will hold node information about both known and discovered nodes, is created in step <b>310</b> by the node discovery manager and assigned to be initially empty. Hash operations are then performed in step <b>312</b> on the unique node identifiers in the NodeList to partition the known nodes into the same number of node groups as the number (&#x2018;K&#x2019;) of node discovery agents. Each of the generated hash values is then associated with its respective unique node identifier in the NodeList in step <b>314</b>. The hash value associated with each group of nodes is then assigned in step <b>316</b> to a node discovery agent &#x2018;M&#x2019;, where I&#x3c;=M&#x3c;=K. Once the group hash values are assigned to each node discovery agent &#x2018;M&#x2019;, parallel operation of the &#x2018;K&#x2019; number of node discovery agents is initiated in step <b>318</b>. In step <b>320</b>, a node information receipt thread for the GraphList is initiated by the node discovery manager, followed by the initiation of a node discovery thread for each of the node discovery agents &#x2018;M&#x2019; in step <b>322</b>.</p>
<p id="p-0036" num="0035">A determination is then made in step <b>324</b> whether all entries in the NodeList have been processed. If they have, then a determination is made in step <b>326</b> whether all &#x2018;K&#x2019; node discovery agents have completed their topology discovery operations. If they have not, then an unprocessed node identifier is popped from the NodeList in step <b>328</b> and its corresponding node group hash value is determined. A determination is then made in step <b>330</b> whether the node discovery agent &#x2018;M&#x2019; assigned to the node group hash value is busy. If it is, then the process is repeated, beginning with step <b>328</b>, until a node identifier entry is popped that corresponds to a node discovery agent &#x2018;M&#x2019; that is not busy. Once it is determined in step <b>328</b> that the popped node identifier entry has a node group hash value corresponding to a node discovery agent &#x2018;M&#x2019; that is not busy, the target node is assigned to the node discovery agent &#x2018;M&#x2019; for processing. The node discovery agent &#x2018;M&#x2019; then sends probe messages, such as SNMP queries and other methods familiar to those of skill in the art, to the target node in step <b>334</b>.</p>
<p id="p-0037" num="0036">A determination is then made in step <b>336</b> whether the target node is connected to one or more neighboring nodes. If it is determined in step <b>336</b> that the node is an endpoint of the network, or that it is not connected to any other node, then the node identifier is marked in step <b>364</b> a processed node in the NodeList. The process is then repeated, beginning with step <b>324</b>, where a determination is made whether all entries in the NodeList have been processed. However, if it is determined in step <b>336</b> that the target node is connected to neighboring nodes, then the probe collects node information from the node, including information about connections to neighboring nodes. In one embodiment, the connections are physical connections. In another embodiment, the connections are logical. In yet another embodiment, the connections may be a combination of physical or logical connections. The collected node information is then converted to a NodeConnection list in step <b>340</b> and the NodeConnection list is then returned to the node discovery manager.</p>
<p id="p-0038" num="0037">A determination is then made in step <b>342</b> whether all node connection entries in the NodeConnection list have been processed. If it is determined in step <b>342</b> that they have not, then a neighboring node entry is popped in step <b>344</b> and its unique node identifier is determined in step <b>344</b>. A determination is then made in step <b>346</b> whether the unique node identifier is currently listed in the NodeList. If it is, then a determination is then made in step <b>348</b> whether the neighboring node has been processed.</p>
<p id="p-0039" num="0038">It will be apparent to skilled practitioners of the art that a discovered neighboring node represented as an entry in the NodeList will have a corresponding node group hash value assigning it for processing by a predetermined node discovery agent &#x2018;M&#x2019;. Regardless of whether node discovery agent &#x2018;M&#x2019; is the current agent or another agent, the node entry has not yet been popped in step <b>328</b> or assigned to a node discovery agent &#x2018;M&#x2019; in step <b>332</b>. As such, no further processing operations are necessary at this point in the process, as they will be performed once the neighboring node entry is popped, beginning with step <b>328</b>. Accordingly, if it is determined in step <b>348</b> that the neighboring node has not been processed, then the process is repeated, beginning with step <b>342</b>.</p>
<p id="p-0040" num="0039">However, if it is determined in step <b>348</b> that the neighboring node entry in the NodeList has been marked as processed, then a determination is made in step <b>350</b> whether the one or more connections between the target and neighboring node, whether physical or logical, are listed in the GraphList. It will be appreciated that even if the target node and the neighboring node have both been previously processed, it is possible for a new connection to be established since the time they were processed. Such a new connection would alter the topology of the network and adversely affect its accuracy. Accordingly, if it is determined in step <b>350</b> that one or more connections between the target and neighboring node are not listed in the GraphList, then they are added to the GraphList in step <b>352</b>. Otherwise, the process is repeated, beginning with step <b>342</b>.</p>
<p id="p-0041" num="0040">If it is determined in step <b>346</b> that the unique node identifier of the neighboring node is not currently listed in the NodeList, then a hash operation is performed on its unique node identifier in step <b>354</b>. As described in detail herein, the hash operation will generate a hash value that will be used to associate the discovered neighboring node with an existing node group. It will be apparent, by extension, that the node group hash value will also assign the discovered neighboring node to a predetermined node discovery agent &#x2018;M&#x2019; for processing. Accordingly, the hash value is added to the unique node identifier of the neighboring node and it is entered as an entry in the NodeList for subsequent processing in step <b>356</b>.</p>
<p id="p-0042" num="0041">As described hereinabove, the corresponding node group bash value representing a discovered neighboring node in the NodeList will result in it being assigned for processing by a predetermined node discovery agent &#x2018;M&#x2019;. As a result, no further node connection processing operations are necessary at this point in the process as they will be performed once the neighboring node entry is popped, beginning with step <b>328</b>. The process is then repeated, beginning with step <b>342</b>. Once it has been determined in step <b>326</b> that all node discovery agents &#x2018;M&#x2019; have completed their respective node discovery operations, then a network topology is generated in step <b>358</b> from the node information contained in the GraphyDiscovery list. Network node discovery operations are then ended in step <b>360</b> once the network topology is generated in step <b>358</b>.</p>
<p id="p-0043" num="0042">The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0044" num="0043">The terminology used herein is for describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps. operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0045" num="0044">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<p id="p-0046" num="0045">Having thus described the invention of the present application in detail and by reference to preferred embodiments thereof, it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implementable method for discovering the topology of a network, comprising:
<claim-text>receiving a first list of node entries, each of the node entries comprising a unique node identifier representing a known node;</claim-text>
<claim-text>performing operations on the unique node identifier of the node entries to partition the node entries into a plurality of node groups;</claim-text>
<claim-text>assigning a first node discovery agent to a first group of nodes and a second node discovery agent to a second group of nodes, the first and second node discovery agents operable to collect node information from a node;</claim-text>
<claim-text>collecting node information from a first node, the node information collected by the first node discovery agent and describing a connection between the first node and a second node;</claim-text>
<claim-text>appending the node information to a second list of node entries; and</claim-text>
<claim-text>processing the second list of node entries to generate a network topology;</claim-text>
<claim-text>determining if the node identifier of the second node is listed in the first list;</claim-text>
<claim-text>performing operations on the unique node identifier of the second node to determine its assignment to a node group if the node identifier of the second node is not listed in the first list;</claim-text>
<claim-text>appending the second node to the determined node group; and,</claim-text>
<claim-text>collecting node information from the second node, the node information collected by the node discovery agent assigned to the determined node group and describing a connection between the second node and a third node; and wherein</claim-text>
<claim-text>hash operations are performed on the unique node identifier to generate a hash value, the hash value operable to be used to partition the node entries into a plurality of node groups.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the connection between the first node and a second node is physical.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the connection between the first node and a second node is logical.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first connection between the first node and a second node is physical and a second connection is logical.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A system comprising:
<claim-text>a processor;</claim-text>
<claim-text>a data bus coupled to the processor; and</claim-text>
<claim-text>a computer-usable medium embodying computer program code, the computer-usable medium being coupled to the data bus, the computer program code discovering the topology of a network and comprising instructions executable by the processor and configured for:
<claim-text>receiving a first list of node entries, each of the node entries comprising a unique node identifier representing a known node;</claim-text>
<claim-text>performing operations on the unique node identifier of the node entries to partition the node entries into a plurality of node groups;</claim-text>
<claim-text>assigning a first node discovery agent to a first group of nodes and a second node discovery agent to a second group of nodes, the first and second node discovery agents operable to collect node information from a node;</claim-text>
<claim-text>collecting node information from a first node, the node information collected by the first node discovery agent and describing a connection between the first node and a second node;</claim-text>
<claim-text>appending the node information to a second list of node entries;</claim-text>
<claim-text>processing the second list of node entries to generate a network topology;</claim-text>
<claim-text>determining if the node identifier of the second node is listed in the first list;</claim-text>
<claim-text>performing operations on the unique node identifier of the second node to determine its assignment to a node group if the node identifier of the second node is not listed in the first list;</claim-text>
<claim-text>appending the second node to the determined node group; and,</claim-text>
<claim-text>collecting node information from the second node, the node information collected by the node discovery agent assigned to the determined node group and describing a connection between the second node and a third node; and wherein</claim-text>
<claim-text>hash operations are performed on the unique node identifier to generate a hash value, the hash value operable to be used to partition the node entries into a plurality of node groups.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the connection between the first node and a second node is physical.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the connection between the first node and a second node is logical.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a first connection between the first node and a second node is physical and a second connection is logical.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A non-transitory computer-usable medium embodying computer program code, the computer program code comprising computer executable instructions configured for:
<claim-text>receiving a first list of node entries, each of the node entries comprising a unique node identifier representing a known node;</claim-text>
<claim-text>performing operations on the unique node identifier of the node entries to partition the node entries into a plurality of node groups;</claim-text>
<claim-text>assigning a first node discovery agent to a first group of nodes and a second node discovery agent to a second group of nodes, the first and second node discovery agents operable to collect node information from a node;</claim-text>
<claim-text>collecting node information from a first node, the node information collected by the first node discovery agent and describing a connection between the first node and a second node;</claim-text>
<claim-text>appending the node information to a second list of node entries;</claim-text>
<claim-text>processing the second list of node entries to generate a network topology;</claim-text>
<claim-text>determining if the node identifier of the second node is listed in the first list;</claim-text>
<claim-text>performing operations on the unique node identifier of the second node to determine its assignment to a node group if the node identifier of the second node is not listed in the first list;</claim-text>
<claim-text>appending the second node to the determined node group; and,</claim-text>
<claim-text>collecting node information from the second node, the node information collected by the node discovery agent assigned to the determined node group and describing a connection between the second node and a third node; and wherein</claim-text>
<claim-text>hash operations are performed on the unique node identifier to generate a hash value, the hash value operable to be used to partition the node entries into a plurality of node groups.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer usable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the connection between the first node and a second node is physical.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer usable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the connection between the first node and a second node is logical.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer usable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a first connection between the first node and a second node is physical and a second connection is logical.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer usable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the computer executable instructions are deployable to a client computer from a server at a remote location.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer usable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the computer executable instructions are provided by a service provider to a customer on an on-demand basis. </claim-text>
</claim>
</claims>
</us-patent-grant>

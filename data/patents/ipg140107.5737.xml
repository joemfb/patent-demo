<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626841-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626841</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12023067</doc-number>
<date>20080131</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>777</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709206</main-classification>
</classification-national>
<invention-title id="d2e53">Direct access electronic mail (email) distribution and synchronization system with IMAP-idle implementation</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6779019</doc-number>
<kind>B1</kind>
<name>Mousseau et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6959325</doc-number>
<kind>B2</kind>
<name>Gardner et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7043240</doc-number>
<kind>B2</kind>
<name>Clarke et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>4554322</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7107310</doc-number>
<kind>B2</kind>
<name>McCarthy</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7111047</doc-number>
<kind>B2</kind>
<name>McCarthy et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7162223</doc-number>
<kind>B2</kind>
<name>Kamat</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>4554121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7184753</doc-number>
<kind>B2</kind>
<name>Huynh</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4554121</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7206816</doc-number>
<kind>B2</kind>
<name>Gorty et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7289495</doc-number>
<kind>B2</kind>
<name>Roy</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>370381</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7289975</doc-number>
<kind>B2</kind>
<name>Clarke et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7624147</doc-number>
<kind>B2</kind>
<name>Tosey et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7849142</doc-number>
<kind>B2</kind>
<name>Clegg et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0078158</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2002/0091774</doc-number>
<kind>A1</kind>
<name>Imamura et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2005/0055443</doc-number>
<kind>A1</kind>
<name>Tosey et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2006/0031359</doc-number>
<kind>A1</kind>
<name>Clegg et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2006/0085429</doc-number>
<kind>A1</kind>
<name>Wener et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2007/0072589</doc-number>
<kind>A1</kind>
<name>Clarke</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>4554141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2007/0073813</doc-number>
<kind>A1</kind>
<name>Kamat et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2007/0073814</doc-number>
<kind>A1</kind>
<name>Kamat et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2007/0073817</doc-number>
<kind>A1</kind>
<name>Gorty</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2007/0073819</doc-number>
<kind>A1</kind>
<name>Gardner et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2007/0078934</doc-number>
<kind>A1</kind>
<name>Gardner</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2007/0083599</doc-number>
<kind>A1</kind>
<name>Provo</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2007/0226301</doc-number>
<kind>A1</kind>
<name>Provo</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2007/0299918</doc-number>
<kind>A1</kind>
<name>Roberts</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>WO</country>
<doc-number>2004/017583</doc-number>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-cpc-text>H04L 12/58</classification-cpc-text>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>Isode; &#x201c;IMAP IDLE: The best approach for'push email&#x201d;; Published Jun. 27, 2006; Retrieved Aug. 30, 2011 from http://www.isode.com/whitepapers/imap-idle.html; pp. 1-4.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>Parallels Forums; &#x201c;IMAP limit?&#x201d;; published Oct. 10, 2004; Retrieved Aug. 29, 2011 from http://forum.parallels.com/showthread.php$t=50869' pp. 1-3.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Leiba, &#x201c;<i>IMAP4 Idle Command</i>,&#x201d; IETF Standard&#x2014;Working Draft, Internet Engineering Task Force, Feb. 1, 1997, pp. 1-4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>Melnikov, et al., &#x201c;<i>IMAP4 Extensions for Quick Reconnect</i>&#x201d; IETF Standard&#x2014;Working Draft, Internet Engineering Task Force, May 15, 2006, pp. 1-23.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709206</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>16</number-of-drawing-sheets>
<number-of-figures>16</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60911611</doc-number>
<date>20070413</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080256203</doc-number>
<kind>A1</kind>
<date>20081016</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gorty</last-name>
<first-name>Suryanarayana M.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Van Wely</last-name>
<first-name>Matthew</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Gorty</last-name>
<first-name>Suryanarayana M.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Van Wely</last-name>
<first-name>Matthew</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Allen, Dyer, Doppelt, Milbrath &#x26; Gilchrist, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>BlackBerry Limited</orgname>
<role>03</role>
<address>
<city>Waterloo, Ontario</city>
<country>CA</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ibrahim</last-name>
<first-name>Mohamed</first-name>
<department>2444</department>
</primary-examiner>
<assistant-examiner>
<last-name>Richardson</last-name>
<first-name>Thomas</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The communications system includes a network engine that communicates with the plurality of a user subscribed mobile wireless communications devices via a communications network for sending and receiving emails. A direct access server is operative with the network engine for polling electronic mailboxes of users from an email source and retrieving electronic messages from the electronic mailboxes and pushing any electronic mailboxes to the network engine to selected users subscribed mobile wireless communications devices. The direct access server communicates with an email source using the internet message access protocol (IMAP) and IMAP-Idle supportable connections to accept real-time notifications such that when a connection limit is reached or exceeded to an email source, the direct access server disables IMAP-Idle connections to the email source.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="124.04mm" wi="182.20mm" file="US08626841-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="270.59mm" wi="193.55mm" orientation="landscape" file="US08626841-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="164.25mm" wi="166.71mm" file="US08626841-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="167.89mm" wi="171.11mm" file="US08626841-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="156.46mm" wi="187.20mm" file="US08626841-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="103.38mm" wi="160.19mm" file="US08626841-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="120.31mm" wi="166.54mm" file="US08626841-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="118.53mm" wi="170.77mm" file="US08626841-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="145.54mm" wi="186.52mm" file="US08626841-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="179.15mm" wi="189.65mm" file="US08626841-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="123.11mm" wi="183.56mm" file="US08626841-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="223.77mm" wi="184.91mm" file="US08626841-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="167.56mm" wi="177.55mm" file="US08626841-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="243.92mm" wi="176.61mm" file="US08626841-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="92.03mm" wi="181.19mm" file="US08626841-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="123.87mm" wi="173.23mm" file="US08626841-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="271.61mm" wi="175.26mm" orientation="landscape" file="US08626841-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is based upon prior filed provisional application Ser. No. 60/911,611 filed Apr. 13, 2007.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates to the field of communications systems, and, more particularly, to electronic mail (email) communications systems and related methods.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Electronic mail (email) has become an integral part of business and personal communications. As such, many users have multiple email accounts for work and home use. Moreover, with the increased availability of mobile cellular and wireless local area network (LAN) devices that can send and receive emails, many users wirelessly access emails from mailboxes stored on different email storage servers (e.g., corporate email storage server, Yahoo, Hotmail, AOL, etc.).</p>
<p id="p-0005" num="0004">Yet, email distribution and synchronization across multiple mailboxes and over wireless networks can be quite challenging, particularly when this is done on a large scale for numerous users. For example, different email accounts may be configured differently and with non-uniform access criteria. Moreover, as emails are received at the wireless communications device, copies of the emails may still be present in the original mailboxes, which can make it difficult for users to keep their email organized.</p>
<p id="p-0006" num="0005">One particularly advantageous &#x201c;push&#x201d; type email distribution and synchronization system is disclosed in U.S. Pat. No. 6,779,019 to Mousseau et al., which is assigned to the present Assignee and is hereby incorporated herein by reference. This system pushes user-selected data items from a host system to a user's mobile wireless communications device upon detecting the occurrence of one or more user-defined event triggers. The user may then move (or file) the data items to a particular folder within a folder hierarchy stored in the mobile wireless communications device, or may execute some other system operation on a data item. Software operating at the device and the host system then synchronizes the folder hierarchy of the device with a folder hierarchy of the host system, and any actions executed on the data items at the device are then automatically replicated on the same data items stored at the host system, thus eliminating the need for the user to manually replicate actions at the host system that have been executed at the mobile wireless communications device.</p>
<p id="p-0007" num="0006">The foregoing system advantageously provides great convenience to users of wireless email communication devices for organizing and managing their email messages. Yet, further convenience and efficiency features may be desired in email distribution and synchronization systems as email usage continues to grow in popularity.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007">Other objects, features and advantages will become apparent from the detailed description which follows when considered in light of the accompanying drawings in which:</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of a direct access electronic mail (email) distribution and synchronization system in accordance with non-limiting examples.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a network architecture diagram for message to handheld (MTH) messages.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a network architecture diagram for message from handheld (MFH) messages.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram showing a directory structure and other components used in the direct access email system shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram showing basic components of a Source Assignment Manager as used in the direct access email system shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing basic components that operate with the SOAP module shown in the direct access email system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram showing basic components that operate with the Event Server as shown in the direct access system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram showing components that interoperate with the Direct Access Proxy shown in the direct access email system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram showing basic components that operate with the Direct Access Proxy for SMTP support.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram showing basic components of the Direct Access Proxy with the IMAP Mail Provider.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart showing functional steps for the IMAP idle connection.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram showing basic components of the Source Scheduler and interoperation among components.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart showing basic steps for the IMAP idle support.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 14</figref> is a block diagram showing basic components of a Source Scheduler for the Direct Access Proxy.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 15</figref> is a sequence diagram showing transactions between the Mobile Office Platform and the worker for the out of coverage notification.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 16</figref> is a schematic block diagram illustrating an exemplary mobile wireless communications device that can be used with the Direct Access email system shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0025" num="0024">Different embodiments will now be described more fully hereinafter with reference to the accompanying drawings, in which preferred embodiments are shown. Many different forms can be set forth and described embodiments should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope to those skilled in the art. Like numbers refer to like elements throughout.</p>
<p id="p-0026" num="0025">The communications system includes a network engine that communicates with the plurality of a user subscribed mobile wireless communications devices via a communications network for sending and receiving emails. A direct access server is operative with the network engine for polling electronic mailboxes of users from an email source and retrieving electronic messages from the electronic mailboxes and pushing any electronic mailboxes to the network engine to selected users subscribed mobile wireless communications devices. The direct access server communicates with an email source using the internet message access protocol (IMAP) and IMAP-Idle supportable connections to accept real-time notifications such that when a connection limit is reached or exceeded to an email source, the direct access server disables IMAP-Idle connections to the email source.</p>
<p id="p-0027" num="0026">Basic components of the Direct Access email system <b>20</b> are shown in <figref idref="DRAWINGS">FIG. 1</figref>. The web client or network engine <b>22</b> has various components. The worker <b>24</b> is a processing agent that is responsible for most processing in the engine <b>22</b> and includes SMTP and HTTP server support. It determines out-of-coverage information (O.C.) as explained later. It accepts email from the DA proxy and external mail routers, formats email in CMIME, and sends it to the port agent <b>26</b> and other components. The port agent <b>26</b> acts as a transport layer between the email system infrastructure and the rest of the engine <b>22</b>. The mail router <b>28</b> is an MTA (Mail Transfer Agent) and is responsible for relaying messages into the mail store <b>30</b>, which are destined for hosted subscribers. It is also responsible for accepting/relaying email notifications.</p>
<p id="p-0028" num="0027">The mail store <b>30</b> is a MIME message store that resides on a central storage system to provide support for more/forward/reply and attachment viewing features. The attachment server <b>32</b> provides service for documents/attachment conversion requests from workers.</p>
<p id="p-0029" num="0028">The symbol &#x201c;dir&#x201d; that is attached to a line illustrates that a directory lookup has been made to determine the service instance to call, for example, which the DA proxy can retrieve an email for a particular pin/servicebook. The symbol &#x201c;r&#x201d; attached to a component illustrates that it registers itself with a directory of PDS. The triangular attachment on the WAP and HTML components illustrates that it is a client of a Resource Deployment Service.</p>
<p id="p-0030" num="0029">The Relay <b>34</b> with the Wireless Communications Network <b>36</b>, such as a cellular network or WLAN and cooperates with a Port Agent <b>26</b> using GUID. The Network <b>36</b> communicates with one or more wireless communications devices <b>38</b>, such as portable wireless communications devices.</p>
<p id="p-0031" num="0030">The mobile office platform <b>40</b> has different components. The DA proxy (DA) <b>42</b> includes service through which integrated source messages are delivered to or retrieved from by the worker <b>24</b>. It is responsible for polling sources such as mailboxes, processing source notifications and retrieval and update of source messages via the universal proxy <b>44</b>. The universal proxy (UP) <b>44</b> abstracts access to disparate mail stores into a common protocol. The event server <b>46</b> is a lightweight process on a server that receives notifications from external sources (ISPs and SMC) and different user mailboxes and processes them asynchronously without blocking the sender of notifications. The integrated mail sources <b>48</b> as email service providers include non-limiting examples such as Yahoo!, Gmail, IMAP, POP, Lotus Notes, and Exchange. SMTP servers <b>49</b> are associated with the email service providers as explained in greater detail below. The engine servlet <b>50</b> is a high performance service on the server capable of validating a large number of integrated sources concurrently. This engine <b>50</b> is used in a source integration process to validate the access settings to a mailbox. The SOAP <b>52</b> is a primary interface to query, update and modify data in the central and partition databases <b>54</b>, <b>58</b>. It also implements business logic that triggers other workflows in the system (e.g., send, delete service books). The central database <b>54</b> stores system wide data related to sites/carriers, mailbox providers (AOL, Yahoo), service books, devices and user accounts. The partition database <b>58</b> is a primary data store for users. It stores data for a fixed set of users. The directory <b>56</b> is a system responsible for assigning, locating and distributing users and their associated workloads across service instances. The source assignment manager (SAM) <b>60</b> assigns sources to the DA proxy <b>42</b> for the purposes of mail detection (polling, subscribing, etc.). The PDS (PWP directory service) <b>62</b> is a registry of PWP servers and is responsible for load balancing mail connector (MC) clients across PWP server instances.</p>
<p id="p-0032" num="0031">Any PWP server and mail connector components are used together to access mailboxes when the system is unable to directly access an external mail source (e.g., source is behind corporate firewall). The Resource Deployment System (RDS) <b>64</b> allows the dynamic deployment of new brand and language specific resources.</p>
<p id="p-0033" num="0032">There are also various UI/web components. The HTML proxy <b>70</b> provides an HTML user interface for users to manage their account. The WAP proxy <b>72</b> provides a WML and XHTML user interface for users to manage their account. The WEB ADMIN and ADMIN <b>74</b> proxy provides an HTML user interface for carriers to perform administrative functions on their customer accounts. A desktop client is deployed via a device CD, and allows the user to integrate sources with a native Win32 UI. A device client allows the user to integrate sources using a java based UI on the device. Provisioning (PRV) <b>76</b> can also occur. Also illustrated is the internal SMTP server <b>77</b> operative with a database table <b>78</b> and associated with the MOP. A source scheduler <b>104</b> and IMAP-Idle connection module (manager) <b>120</b> are shown and explained in greater detail later.</p>
<p id="p-0034" num="0033">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, there are two possible message paths for message to handheld (MTH) messages. The first path is via an external mail router via SMTP. This path is used for all BBM and hosted sources. All messages will arrive to the network engine <b>22</b> via mail router <b>28</b>, which will make a directory lookup then forward the message to the appropriate worker <b>24</b>. The worker <b>24</b> will process the message and send the message to the least loaded port agent <b>26</b>. Finally, the port agent <b>26</b> will deliver the message to the relay <b>34</b>, which will in turn send the message to the device <b>38</b>.</p>
<p id="p-0035" num="0034">The second path is via the Universal and DA proxies <b>42</b>, <b>44</b>. This path is used for all integrated sources. When the DA Proxy <b>42</b> detects a new mail from an integrated source the DA proxy <b>42</b> will fetch the message via the Universal Proxy <b>44</b>, make a directory lookup for the appropriate worker and push the message to the worker. The worker will then perform the same operation it did for hosted mail.</p>
<p id="p-0036" num="0035">As shown in <figref idref="DRAWINGS">FIG. 3</figref>, there are two possible routing paths for a message from handheld (MFH). The first is sent through a mail router <b>28</b>. This path is used for hosted sources. This path will also be used for a subset of integrated sources that do not require any functionality greater than sendmail. The Relay <b>34</b> will receive the message from the device <b>38</b> and then forward the message to the port agent <b>26</b>. The port agent <b>26</b> will make a directory lookup and send the message to the appropriate worker <b>24</b>. The worker <b>24</b> will then decode the message and send it to the mail router <b>28</b> which will in turn deliver the message to the destination mailbox.</p>
<p id="p-0037" num="0036">The second path is through the DA proxy <b>42</b>. This path is required for integrated sources that require more functionality than sendmail provides. For example, google sources require messages to be sent via gmail SMTP servers to provide support for a sent folder. Following the same path to the worker as hosted mail, the worker will make a directory lookup and send the message to the appropriate DA proxy <b>42</b>. The DA proxy <b>42</b> will then compose an HTTP Mail request for sending a message which will be passed to the universal proxy <b>44</b>, which will translate the HTTPMail request into an appropriate format for sending the mail either thru an external mail router or thru a protocol dependant on the source type (e.g., HTTPMail for exchange). Any routers could be external.</p>
<p id="p-0038" num="0037">The worker <b>24</b> is a main component of the network engine <b>22</b>. The worker <b>24</b> is responsible for converting messages between MIME and CMIME, encrypting and decrypting messages, compressing and decompressing messages, and attachment viewing.</p>
<p id="p-0039" num="0038">The worker <b>24</b> will support user affinity. The advantages of this are that the system has a global pool of workers, rather than partitioning users by cell. This will allow the workers to scale horizontally in an N+1 manner. It will also make better usage of a pending job limit per service book. It will also reduce the user cache size within the worker.</p>
<p id="p-0040" num="0039">The workers <b>24</b> will register with the Directory <b>56</b>. For all MTH, the mail router will contact the Directory <b>56</b> to determine which worker <b>24</b> to route messages. For all MFH, the port agents <b>26</b> will contact the Directory <b>56</b> to determine which worker to route the messages. The Directory <b>56</b> will load balance users across workers <b>24</b>. The system is simplified by having only one component handling user affinity and load balancing. The workers will implement mail filters.</p>
<p id="p-0041" num="0040">The worker <b>24</b> will store a cache in a memory of all known user records. This cache will reduce the number of &#x201c;Get ServiceBook&#x201d; requests to the DA proxy <b>42</b>. The worker <b>24</b> will support an HTTP notification to remove a record from its cache (sent when a record is updated). There will be a hard timeout for each cached record. This hard timeout will force a record to be removed from the cache after a preset amount of time (approximately one day, but this is configurable). The purpose of this time out is to remove unused records from the cache when a user is load balanced to another worker. The hard timeout will also safe guard against lost notifications (stale records).</p>
<p id="p-0042" num="0041">The worker <b>24</b> will accept messages through two protocols, SMTP and HTTP, as illustrated at <b>24</b><i>a </i>and <b>24</b><i>b</i>. All messages for a device messenger and hosted sources will arrive via SMTP. The messages will arrive at any mail routers <b>28</b>. The mail router <b>28</b> will lookup the appropriate worker <b>24</b> in the Directory <b>56</b> and route the message to the corresponding worker via SMTP. All messages for integrated sources will be sent to the worker via HTTP. The message will be delivered as a new mail notification. The notification will include the MIME message as well, rather than just a message identifier. Both protocols will implement a delayed Acknowledgment (ACK). The worker <b>24</b> will not ACK the incoming source until either the message has been delivered to the device <b>38</b>, or the message has been paged to disk on a timer. The worker typically will not block any threads while waiting for the ACK to be sent. The DA proxy <b>42</b> typically will not block its client thread while waiting to receive the ACK.</p>
<p id="p-0043" num="0042">The job stores will be stored on a central storage. Each worker will maintain its own sandbox for storing CMIME messages. The worker <b>24</b> will implement the delayed ACK paradigm that was implemented in a device messenger. Under this paradigm, the worker <b>24</b> will not store the CMIME messages immediately, but rather it will schedule a timer to write the job to disk. If the job is completed before the timer fires, then the timer is cancelled and the job is not written to disk. If the job does not complete before the timer fires, then the job is written to disk. The worker <b>24</b> will not ACK the message source (SMTP or HTTP) until either the job is completed, or the job is paged to disk. If the worker <b>24</b> crashes before the job is ACK'd (completed or paged), then the original message source is responsible for retrying the job. If the worker crashes after the job is ACK'd then the worker is responsible for retrying the job, by recovering the CMIME job from disk. The recovery method will be used for messenger users, hosted mail, and integrated mail sources.</p>
<p id="p-0044" num="0043">All recovery in the worker <b>24</b> will be done via the CMIME jobstore. When a worker <b>24</b> is started it will scan its jobstore for any jobs that were in progress when the worker previously shutdown. The worker <b>24</b> will then proceed to resume the processing of these jobs. Under this strategy it is possible for more than one worker to access the same mailbox. All new messages for the mailbox will be delivered to the current active worker (via the Directory component). However, any in progress jobs will be processed by the original worker. This can lead to users exceeding their pending job limit, since each worker manages its own limit. However, this will only occur while the jobs are being recovered, and will not affect new jobs.</p>
<p id="p-0045" num="0044">The port agent <b>26</b> is responsible for GME encoding/decoding of CMIME messages, sending messages to and receiving messages from relay. The port agent <b>24</b> can optionally compress and encrypt MTH messages.</p>
<p id="p-0046" num="0045">A Message to Handheld (MTA) is responsible for accepting messages into the system for hosted mail accounts and relaying them to an appropriate worker. The MTA will allow directory queries through a standard LDAP interface which will utilize the MTA's built in lookup mechanisms for envelope re-writing. The need for external software in order to interface with the directory will be eliminated, which will decrease overall complexity. The MTA will have the ability to cap/limit connections from either the incoming or delivery channel, which can be tuned to adhere to the connection profile of the MIME Mail Store.</p>
<p id="p-0047" num="0046">The MIME Mail Store <b>30</b> will be a central storage solution that is shared by all workers. A MIME message store can be added to the worker. This will support MORE/FORWARD/REPLY and attachment viewing. The mail store will reside on central storage via a NetApp or other SAN to allow any worker to access any message from any user and support dynamic load balancing of users between workers. There could be one mailbox per service book. Some messages may not need to be stored in the mail store. Messages that are smaller than the MORE truncation point that do not contain attachments do not need to be stored in the mail store <b>30</b>. Messages that are not stored in the mail store can be delivered to the device <b>38</b> with a flag that tells the device to forward messages with their original content, rather than by reference ID. This optimization will reduce the load on any central storage.</p>
<p id="p-0048" num="0047">NetApp or another application can be used to achieve a central storage solution. It is possible that a single NetApp will not be able to handle the load of the entire user space. When this occurs another NetApp can be added to the infrastructure. To accommodate this, a new column can be added to the user database, which will describe which mount point the mailbox resides on. A load balancing scheme can be used to determine which NetApp to use when adding a new mailbox. Before the engine <b>22</b> can access the mail store for a given mailbox it will first lookup the mount point in the database, and then proceed to access the mailbox. This will allow the system to scale the NetApps out horizontally using an N+1 scaling methodology.</p>
<p id="p-0049" num="0048">The mail store <b>30</b> can store messages using a reference ID as its unique identifier. Reference IDs are not guaranteed to be unique across service books. Therefore, each service book should have its own box. The reference ID is used because all MORE/FORWARD/REPLY and attachment requests include the original reference ID.</p>
<p id="p-0050" num="0049">Messages are typically compressed before being saved to disk in the MIME Mail Store <b>30</b>. Performance tests have demonstrated that one viable compression library is LZO compression. Using LZO compression will reduce the load on the network, the load on the central storage, and the total storage space required. This will allow the system to support the same number of users while using less hardware in the central storage. The LZO compression can be configured on/off. Some messages may not benefit from compression (for example messages with JPEG attachments). The Mail Store <b>30</b> can implement optimizations to determine which messages should be compressed and which should not be compressed based on the nature of the content of the message. This optimization can reduce the load on the host CPU.</p>
<p id="p-0051" num="0050">Each mailbox can have an auto-aging index that will track quota usage and dictate the order in which messages should be removed from storage when the quota is exceeded. The mail store <b>30</b> will store both hosted and integrated mail. The quota for the integrated mailboxes will be small (enough to store one day worth of mail on average).</p>
<p id="p-0052" num="0051">When a message is added to the mail store the quota is analyzed, and if the limit is reached then one or more messages are removed from the mailbox to free enough space for the new message.</p>
<p id="p-0053" num="0052">The Data store is divided into a central database <b>54</b> and multiple Partition databases <b>58</b>. Logically the central database <b>54</b> contains all system wide data and a directory of all user accounts. Physically, the central database <b>54</b> can be divided among different databases. The user account data contains enough information to lookup the account, by various external ids (e.g., SUBID, PIN, Mailbox), to determine which partition database <b>58</b> contains the detailed user data.</p>
<p id="p-0054" num="0053">The system wide data stored in a central database could include information about:</p>
<p id="p-0055" num="0054">a) Sites/carriers e.g., tmobile, cingular;</p>
<p id="p-0056" num="0055">b) Mailbox providers (aol, yahoo);</p>
<p id="p-0057" num="0056">c) Service books;</p>
<p id="p-0058" num="0057">d) Device information; and</p>
<p id="p-0059" num="0058">e) Hosted Mailbox mappings.</p>
<p id="p-0060" num="0059">The central database <b>54</b> is accessed by the SOAP component <b>52</b> and by the Directory <b>56</b>. The central database should be scaled up to handle an ever-increasing number of users. A minimum amount of data is stored in the central database and request loads are limited by the caching of its data in the Directory component <b>56</b>.</p>
<p id="p-0061" num="0060">A partition database <b>58</b> contains data related to a user account and integrated sources such as: integrated sources, alert rules, signature and similar items. The partition database also contains some global data replicated from the central database <b>54</b> to keep the central database <b>54</b> load to a minimum, e.g., service books. The bulk of the data in the partition database <b>58</b> is in the tracking of message UIDs for each integrated source. This table is potentially updated each time a source is polled. The partition database is accessed via SOAP <b>52</b> and the DA proxy <b>42</b>. The partition database is the main scaling mechanism of the data store. It handles a fixed number of users. As the number of users increases more partitions can be added allowing the system to scale out.</p>
<p id="p-0062" num="0061">The Directory <b>56</b> is a system responsible for assigning and resolving a user to service instance for services that require some level of user affinity. The assignments are evenly distributed across all service instances of a particular type. Whenever a request is to be sent to a service the service instance should be resolved via the Directory. The Directory <b>56</b> distributes the affinities evenly across all service instances of a particular type. The Directory supports DA Proxy and Worker lookups. A DA Proxy instance can be assigned users of the partition it is servicing. The Worker can be assigned any user.</p>
<p id="p-0063" num="0062">The Directory <b>56</b> is actually a system of Directory Nodes. Each node shares the burden of storing user to service instance mappings and the network request load associated with lookups. The strategy is to assign a hash value to each node. As each directory lookup is made, the lookup key is hashed to one of the hash values and the directory instance assigned that hash value is forwarded the lookup to resolve the mapping. If a mapping does not exist for the lookup then the resolving will involve an assignment to a service instance.</p>
<p id="p-0064" num="0063">In <figref idref="DRAWINGS">FIG. 4</figref>, the Directory <b>56</b> is depicted with three logical components: the Router <b>80</b> for hashing the lookup key and forwarding to the appropriate directory instance; the Cache <b>82</b> which stores the mappings; and the Registry <b>84</b> which load balances across the registered service instances.</p>
<p id="p-0065" num="0064">The Router <b>80</b> has a list of directory nodes and the hash value they map to. The hash value is simply an enumeration from 0 to N&#x2212;1, where the N is the number of nodes. Each node will have the exact same table. The function of the Router <b>80</b> is to hash the incoming lookup key to a hash value and forwards the request to the node assigned that hash value. If the hash value is assigned to this node then the lookup is made in a node's Cache <b>82</b>.</p>
<p id="p-0066" num="0065">The Cache <b>82</b> contains a list of mappings between lookup keys and service instances. For the DA proxy, the lookup key is PIN. For a Worker, it is either the PIN or Email Address. For the worker, there are two keys identifying a user that can be used as the lookup key. These two keys will likely hash to different values and cause two mappings to be created for the same user. Because of this, one key must be designated as the primary key and all lookups via a secondary keys will result in a primary key which can then be used in a lookup to resolve the service instance.</p>
<p id="p-0067" num="0066">All service instances create and maintain a connection with the Registry <b>84</b> to register their service. This connection is also used to detect service instance failures. The Registry <b>84</b> is also responsible for distributing assignments across service instances.</p>
<p id="p-0068" num="0067">The Directory <b>56</b> supports two interfaces LDAP and an Extended LBAC interface. The LDAP interface is provided for the mail router to perform Worker lookups by email address. The mail router supports LDAP lookups and will drive how much of the LDAP interface is required for implementation.</p>
<p id="p-0069" num="0068">When the DA proxy <b>42</b> discovers and downloads a new message from an integrated source it queries the Directory <b>56</b> for the worker <b>24</b> that will handle messages for the associated user. The query contains the PIN which the Directory router <b>80</b> hashes. If the hash result is its assigned hash id then it will process the request, if not it will forward the request to the Directory instance that is responsible for that hash result. The Directory handling that hash result will now check its map to see if a mapping exists for that PIN. If no mapping exists then a worker with the least number of mappings is selected and assigned to the PIN. The worker is then returned to the client. A similar process happens for PIN to DA Proxy <b>42</b>.</p>
<p id="p-0070" num="0069">When the Mail Router <b>28</b> receives a message it queries the Directory for the worker that will handle messages for the associated user. The query contains the Email address which the Directory hashes. If the hash result is its hash id then it will process the request. If not it will forward the request to the Directory instance that is responsible for that hash result. The Directory handling that hash result will now check its map to see if a mapping exists for that email address, if not a database query will be executed to retrieve the associated PIN. A lookup will now be executed for PIN to Worker. Once the lookup is complete the value may be cached and returned.</p>
<p id="p-0071" num="0070">The Source Assignment Manager <b>60</b> as shown in <figref idref="DRAWINGS">FIG. 5</figref> is responsible for ensuring that the sources of a partition are being serviced by a DA Proxy <b>42</b> instance. The Source Assignment Manager <b>60</b> actively ensures that each source is assigned by the directory to a DA proxy <b>42</b> and that the DA proxy is notified of each source it is to service.</p>
<p id="p-0072" num="0071">The Directory component <b>56</b> is responsible for assigning sources, via pin, to DA proxies <b>42</b>. DA proxy assignments must be made pro-actively in-order for the polling process to begin, and should handle conditions arising from the loss of an assignment when a Directory instance goes down. It should ensure that all sources are being polled, should ensure that deleted sources stop being polled in a timely fashion. The Directory component <b>56</b> also ensures only one DA proxy is servicing any one particular source. Subscribeable sources that are eligible for subscription (e.g., not suspended) are subscribed. Operations must be able to track the state of polling queues and other measures of &#x201c;health.&#x201d;</p>
<p id="p-0073" num="0072">The partition database <b>58</b> places a timestamp on each source that specifies the last time the source was changed. Two queries are provided. The first query returns the entire list of sources with fields related to the servicing of the source (e.g., polling flags) and a timestamp that can be used in the second query. The second query, given a timestamp from the last query, returns all sources changed since the last query and another timestamp to use in the next query.</p>
<p id="p-0074" num="0073">A polling manager as part of the DA proxy and source scheduler maintains a list of all sources belonging to its configured partition. For each source in the list it tracks data related to the servicing of the source, for the purposes of detecting updates, inserts and deletes. Furthermore, the DA proxy assignment is tracked to enable notifications of reassignment and/or lessen re-assignment (due to directory failure). A timestamp is also tracked. The timestamp is a value returned by the database that can be used to retrieve sources that have changed since the last query.</p>
<p id="p-0075" num="0074">At startup a Polling Manager registers with the Directory <b>56</b> and makes a query to the configure partition database to retrieve all sources and the relevant data that drives the servicing logic of each source. The PIN of the sources is passed in one or more request batches to the Directory service to locate the DA proxy that will be servicing each source. This information is stored. Next a notification is sent to each DA proxy that has been assigned one or more sources, containing the sources the DA proxy should service.</p>
<p id="p-0076" num="0075">In order to ensure that sources are being serviced, the Polling Manager at configured intervals queries the partition database <b>58</b> to retrieve all sources which may be new or changed based on a timestamp returned by the last query. The new timestamp can be used in the next query. The source list is compared with the query results to determine which sources have either been change, deleted or inserted. For inserted sources the Directory is called to retrieve the DA proxy assignment. A message is sent to all the DA proxies that have changes or additions to one or more sources they are servicing.</p>
<p id="p-0077" num="0076">SOAP notifications are used to ensure that when a source is updated, deleted or inserted that it will be serviced in real time in accordance with the sources new state. The SOAP module <b>52</b> sends notifications to the Polling Manager by doing a lookup in the directory for the Polling Manager of the partition the source belongs to. The Polling Manager then sends a notification to the DA proxy servicing the source. SOAP Notifications are done via an HTTP Interface which the Polling Manager will implement.</p>
<p id="p-0078" num="0077">When a Directory failure is detected, the Polling Manager is notified by the directory. The Polling Manager assumes that all of it sources may have been re-mapped. All sources are then looked up in the directory in one or more batches. If the Polling Manager is tracking the DA proxy assignment, then it can suggest to the Directory which direct access proxy it should map the source to in order to reduce the amount of reassignment.</p>
<p id="p-0079" num="0078">When a DA proxy fails or a DA proxy is recovered, sources may be reassigned. The recovery reassignment is caused by the need to rebalance the load. When one of these events occur the Source Assignment Manager <b>60</b>, of the failed/recovered DA partition, is notified by the Directory. The Polling Manger makes sure all sources are assigned to a DA proxy and that the DA proxy knows about it. This is done by iterating through all sources and making a directory lookup and notifying the DA proxies which sources have been reassigned and/or unassigned.</p>
<p id="p-0080" num="0079">The SOAP component <b>52</b> provides a SOAP interface to query, update, modify and delete information from both central and partition databases. The SOAP component <b>52</b> exists in order to minimize the number of connections to the databases, provide abstraction to physical location (central vs. partition) and schema of data, and implement business logic for notifying components of data changes which can trigger other workflows such as:</p>
<p id="p-0081" num="0080">a) PIN changes (tell DA proxy, Worker, and Directory);</p>
<p id="p-0082" num="0081">b) Account creation welcome message via the DA proxy;</p>
<p id="p-0083" num="0082">c) Integrated source add sends service book via DA; and</p>
<p id="p-0084" num="0083">d) Subscription requests.</p>
<p id="p-0085" num="0084">It also provides APIs to enable integration with external systems and implement simple provisioning guessing logic via database rules and engine servlet.</p>
<p id="p-0086" num="0085">The interfaces are grouped by function and also by the requirements of the external subsystems. Providing specific interfaces for each subsystems minimizes the affect on other systems when one system requires a change. Interfaces are defined as Web Services and are distributed as WSDL so that external subsystems so that there is not platform or language requirement imposed on the external subsystem.</p>
<p id="p-0087" num="0086">The engine servlet <b>50</b> hosts the aggregation engine <b>90</b> as shown in <figref idref="DRAWINGS">FIG. 6</figref>. The aggregation engine <b>90</b> is a component capable of validating, polling and downloading against a large number of external mail sources concurrently. It receives instructions to do so in batches. To accomplish this it uses Java and a thread to handle all requests in a batch. The Engine Servlet <b>50</b> is used for its ability to validate sources. As for polling and downloading those duties are left to the DA Proxy <b>42</b>.</p>
<p id="p-0088" num="0087">Referring to <figref idref="DRAWINGS">FIG. 6</figref>, validation is a process that occurs during simple provisioning. When the user enters the email address and password for an account to be integrated, a request is sent to the SOAP component <b>52</b> to create the source mailbox. As part of the creation process the SOAP component applies the credentials to a set of rules learned and stored in the database <b>52</b> to produce a set of guesses. These guesses are composed of server address, password (as supplied), protocol, and login, similar to the process set forth in commonly assigned U.S. Pat. No. 6,959,325, the disclosure which is hereby incorporated by reference in its entirety. The central database <b>54</b> is queried to select an engine <b>90</b>. The guesses are then batched and sent to the engine servlet <b>50</b> for validation. The engine servlet <b>50</b> feeds the &#x201c;guesses&#x201d; to the aggregation engine <b>90</b>, which connects and initiates the login process against all the servers according to the guessed protocol. It then waits for the responses. The results of the login are collected and a result is formulated and returned to the SOAP component <b>52</b>. If the validation result is unsuccessful the user may be directed to a more advanced provisioning screen. Otherwise the source mailbox is created.</p>
<p id="p-0089" num="0088">The Event Server <b>46</b> is a process that acts as a message queue for HTTP notifications from external sources (ISPs and SMC). The messages are processed asynchronously so as not to block the source. The processing of the message involves dispatching to the appropriate service. The event server is also used internally to send out subscription request via SOAP.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a new mail request from an external source <b>96</b> being delivered to the DA Proxy <b>42</b> and a subscription request from the DA Proxy <b>42</b> being delivered to SOAP and onto the external source <b>96</b>.</p>
<p id="p-0091" num="0090">The Event Server <b>46</b> is accessible from the internet and is accessed via a BigIP pool. To add capacity additional Event Server instances can be added to the BigIP pool. The number of instances required depends on the number of user that have subscribable sources.</p>
<p id="p-0092" num="0091">When the system is unable to directly access an external mail source (e.g., corporate firewall) the Mail Connector <b>100</b> and PWP Server <b>102</b> are used together to access the mailbox. The mail connector <b>100</b> is a Win32 based application/service that a user installs, as part of the source integration process, within a network where the source can be accessed. It is capable of accessing an exchange mailbox via MAPI and a Lotus Notes mailbox via &#x201c;Notes API&#x201d;. The PWP Server <b>102</b> acts as a rendezvous point between the Universal Proxy (UP) <b>44</b> and the Mail Connector <b>100</b>. The Mail Connector <b>100</b> is typically connected to a PWP Server <b>102</b> waiting to process requests from UP <b>44</b>. The PWP Server ensures that the mail connector and UP, for a given source, are talking to the same PWP Server. It is also responsible for distributing sources across PWP Server <b>102</b> instances. For sources that require and use the Mail Connector <b>100</b> the Universal Proxy <b>44</b> sends all HTTP mail requests to the PWP Server <b>102</b> along with the PWP GUID identifying the client.</p>
<p id="p-0093" num="0092">The universal proxy <b>44</b> provides access to external mail sources <b>48</b> via an enhanced HTTP Mail interface. The UP <b>44</b> supports the following mail sources in a non-limiting example:</p>
<p id="p-0094" num="0093">a) IMAP with special implementations for AOL/Compuserve, Yahoo;</p>
<p id="p-0095" num="0094">b) POP with special implementations for MSN, RPA, Gmail;</p>
<p id="p-0096" num="0095">c) Mail Connector for access to Domino and Exchange;</p>
<p id="p-0097" num="0096">d) Hotmail; and</p>
<p id="p-0098" num="0097">e) Outlook web access.</p>
<p id="p-0099" num="0098">Access to a mail source is demarcated with an HTTP Session. All information required to access the mail source is provided from the initial request of the Session. In order to translate the HTTP Mail request to the appropriate protocol there exist a set of objects called connectors. There is one connector for each type of mail source.</p>
<p id="p-0100" num="0099">The DA proxy <b>42</b> is the conduit for sending and receiving emails between the engine <b>22</b> and the integrated mail sources <b>48</b>. Additionally, the DA proxy is responsible for detecting new mail from external mail sources and pushing to the engine <b>22</b>. Three mechanisms of detection are used for polling, subscription to mailbox for notifications, and permanent connections to sources.</p>
<p id="p-0101" num="0100">It also provides the engine with access to User data. It processes MFH messages for integrated sources (new mail, reply, forward, delete). It also pushes service books to the engine.</p>
<p id="p-0102" num="0101">The DA Proxy <b>42</b> provides an asynchronous HTTP interface. All client requests are immediately queued and responded to with an HTTP Response of <b>200</b>. When applicable the request specifies an HTTP address where the &#x201c;response&#x201d; is to be sent in another HTTP request. When duplicate request are sent by the same component they are dropped. Different requests can be handled asynchronously by the DA proxy <b>42</b>. These include:</p>
<p id="p-0103" num="0102">a) User information retrieval (Engine <b>22</b>);</p>
<p id="p-0104" num="0103">b) Message retrieval from an integrated source (Engine <b>22</b>);</p>
<p id="p-0105" num="0104">c) New mail notification from subscribed source (Event Server <b>46</b>);</p>
<p id="p-0106" num="0105">d) Send service books, PIN Messages and PIN Change (SOAP); and</p>
<p id="p-0107" num="0106">e) Source Assignment (SAM) <b>60</b>.</p>
<p id="p-0108" num="0107">The DA proxy <b>42</b> is responsible for actively detecting changes to the sources assigned to it by the Source Assignment Manager <b>60</b>. The DA proxy maintains a set of sources <b>102</b> that it schedules for servicing. Every source has some level of polling. Less polling is done for those sources that support subscribing or a connection based notification. <figref idref="DRAWINGS">FIG. 8</figref> illustrates at a high level the components of mail detection, including a source scheduler <b>104</b> for scheduling different sources <b>102</b>, and also an event manager <b>106</b> as part of the DA proxy <b>42</b> and the IMAP-Idle sources.</p>
<p id="p-0109" num="0108">Polling of sources is scheduled at even intervals (usually 15 minutes). Sometimes a source poll is expedited if heuristics determines that it is likely to find new mail. There are three types of polls. The IgnoreOldPoll works as a poll that retrieves all messages IDs from the source and writes them to the Partition database <b>58</b>. The purpose of this is to prevent the detection of new mail at certain logical points, such as newly integrated source or the user has been unsuspended.</p>
<p id="p-0110" num="0109">The full poll retrieves all message ids from a source mailbox to do a full reconciliation against all message ids (UIDs) that previous polls have found. For each new UID found, the message is retrieved and sent to the Engine <b>22</b> for delivery to the device <b>38</b>. For UIDs not found (deleted) the UID is removed from the database. New UIDs are also written to the database. The DA proxy <b>42</b> executes a full poll on a source when its been more than the value stored in database since the last full poll, or when a quick poll has been disabled for this source.</p>
<p id="p-0111" num="0110">The Quick poll retrieves only a &#x201c;page&#x201d; of source message IDs at a time. It stops once it finds a UID it has already seen. At this point it assumes it has found all new messages. The new messages are then retrieved and sent to the Engine <b>22</b> for delivery to the device. New UIDs are now written to the database.</p>
<p id="p-0112" num="0111">For source types that support a notification mechanism via a subscription (e.g., Yahoo, Google), the proxy <b>42</b> periodically checks that those sources are subscribed accordingly. If a source is in a state that it should be subscribed, a subscription request is sent, otherwise nothing is done.</p>
<p id="p-0113" num="0112">Some source types (IMAP IDLE) support a notification mechanism via a permanent connection to the source. The proxy is responsible for making sure that these connections are created, managed and destroyed as appropriate.</p>
<p id="p-0114" num="0113">The DA proxy <b>42</b> communicates with the worker <b>24</b> over an HTTP interface. The worker responds to the request with a delayed ACK as to the success of the request (e.g. successfully accepted). When new mail is detected, the DA proxy pushes one mail at a time and waits for the ACK. Since the ACK may take some time, the polling thread is not blocked waiting for the ACK. If a message is NACK'd the DA proxy will stop pushing the new mail that was found and only write the successfully pushed mail UIDs to the database. For retry purposes the DA proxy will ensure that a poll for the source is scheduled in a reasonable amount of time (e.g., within 15 minutes).</p>
<p id="p-0115" num="0114">The DA proxy <b>42</b> does not require access to the internet, although it accesses the Partition database <b>58</b>, SOAP <b>52</b>, Event Server <b>46</b>, Directory <b>56</b>, Worker <b>24</b>, and its configured UP <b>44</b> (usually localhost). The DA proxy handles a fixed number of users for a particular partition. The number of users a DA proxy can handle is calculated by measuring its performance. The more users assigned to a partition the more DA proxies, the system will deploy. The load is distributed evenly betweens DA proxies via the Directory components.</p>
<p id="p-0116" num="0115">A Resource Deployment Server <b>64</b> (RDS) allows brand and language specific resources to be dynamically deployed. The resources are typically composed of, but not limited to, Java Resource Bundles, XSLT files, and Images. Any file can be deployed via the RDS as long as the location specified on the target system is well known e.g. (template directory, web-inf/classes etc.).</p>
<p id="p-0117" num="0116">A resource deployment package is a jar containing one or more resource jars and a descriptor file that describes each resource jar and how it is to be deployed. In essence, it describes what well know directory a resource jar should be expanded to and what version of the resources the jar represents.</p>
<p id="p-0118" num="0117">A Desktop Manager is an application that provides a user interface for email account configuration. The Desktop client provided by the system &#x201c;plugs&#x201d; into the Desktop Manager and provides specific UI for configuration of integrated sources. A Management API provides a SOAP interface for the creation of accounts and for integration of email sources. A Desktop manager provides a user interface for integrating and managing email accounts. Both simple and advanced provisioning will be provided.</p>
<p id="p-0119" num="0118">Any Java handheld apps can use TCP (HTTP) as their transport. This allows use of existing device APIs that provide and manage all aspects of TCP (HTTP) traffic to and from the device. Inside the HTTP wrapper will be an XML data component.</p>
<p id="p-0120" num="0119">There are also aspects of SMTP used with the system. Mail providers desire outbound mail for their users to go through their SMTP servers <b>49</b>. The system as described wants to use the ISP's mail servers to avoid problems such as &#x201c;marked-as-spam.&#x201d; The system can use part uses its own internal SMTP server <b>77</b> for outbound mail currently. The end users may not always know or remember their SMTP servers when they are configuring their integrated mailbox. The system configuration allows for the specification of a SMTP server <b>49</b> given a mail-access-server, protocol combination. Once a mailbox is integrated, if the integration matches a given (server, protocol) combination, it is possible to use the SMTP server <b>49</b> specified in the configuration. The system can potentially use other parameters in the future. For mail providers that can specify an SMTP server, the system can automatically use their SMTP servers <b>49</b> for their users. The users do not have to go through additional steps to configure their SMTP servers. This implementation will automatically work for hosted domain mailboxes as they use typically a specific mail access server of the mail provider It is possible to implement an automatic guessing of SMTP servers where the system will attempt to send an email to a known server address through a &#x201c;guessed&#x201d; SMTP server using the mail access credentials.</p>
<p id="p-0121" num="0120">The system would have automatically configured the SMTP server <b>49</b> even when the system does not have a pre-existing configuration. Guessing logic may include the user of users' mail access server or mix-server of their email ID's mail domain (DNS). It is possible to extend the solution to allow users to specify their SMTP servers <b>49</b>. If the server-domain of the SMTP server matches the server-domain of the mail access server, the system will &#x201c;learn&#x201d; this information and attempt to use this for other users who also use the mail access server.</p>
<p id="p-0122" num="0121">For mail providers that can specify an SMTP server <b>49</b>, the system will automatically use their SMTP server for their users. The users do not have to go through additional steps to configure their SMTP servers. This implementation will automatically work for hosted domain mailboxes as they too use a specific mail access server of the mail provider. The system can also implement automatic guessing of SMTP servers when the system attempts to send an email to a known address through a &#x201c;guessed&#x201d; SMTP server using the mail access credentials. If it works, the system automatically configures the SMTP server even when the system does not have a pre-existing configuration. Guessing logic may include the use of users' mail access server or max server of their email ID's mail domain (DNS).</p>
<p id="p-0123" num="0122">There are differences with the prior art using the system as described. A version of Outlook Express (windows live mail desktop), automatically configures a POP/SMTP server for a given email address for popular ISP's. WLMD (Windows Live Mail Desktop) automatically configures based on a user's email address. A KnowledgeBase for popular ISP's is downloaded from servers and used when the user's email address matches one found in the KnowledgeBase.</p>
<p id="p-0124" num="0123">The system gives integrated source server protocol and an external SMTP protocol sends email. The system configures the SMTP server <b>49</b>. The user sends mail and looks up the SMTP server user's external send mail. The system uses its own internal SMTP servers for sending email, allowing the system to pre-configure an external SMTP server <b>49</b> for sending email. The configuration is done beforehand with a mail server provider, and once any system is configured into send mail, a device user sends mail to external server and the device looks to an external SMTP server for necessary information. Unlike Outlook Express, given that this is mail access protocol, it tries to figure out which server to use. Windows desktop mail, e.g., for Comcast, has a list of popular SMTP server (popular ISP's are in list). The system can implement guest servers and use automatic guessing logic.</p>
<p id="p-0125" num="0124">ISP SMTP Support can be added for a configurable set of ISPs. ISP SMTP Support can support authorization based on srcmbox.login and srcmbox.password. ISP SMTP Support can support connections over SSL when configured.</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 9</figref> illustrates basic aspects of the components as described. The DA Proxy <b>42</b> is illustrated and operable with the UP Proxy <b>44</b> as a servlet and SOAP component <b>52</b> as a Soapservlet, including a cache. The mail service provider <b>48</b> is illustrated and operable with the UP proxy <b>44</b>. A database table <b>112</b> as part of the server and mobile office platform <b>40</b> is entitled SmtpProviders with data sent to the cache of the SOAP <b>52</b>. The sourcemailbox <b>114</b> is operable with the SOAP <b>52</b> to communicate regarding the server and protocol.</p>
<p id="p-0127" num="0126">There can be a new database table and stored procedure in Central database, Soap Servlet, DA Proxy, UPServlet. The table <b>112</b> is added to allow the configuration/specification of ISP STMP servers, known as SmtpProvider. The SmtpProvider table <b>112</b> will be used to store SMTP server information for a srcMbox's <b>114</b> server/protocolName. If a server/protocolName for a srcMbox is not specified in this table, internal SMTP servers will be used to send mail.</p>
<p id="p-0128" num="0127">As shown in <figref idref="DRAWINGS">FIG. 9</figref>, the database will include a SmtpProvider table <b>112</b> and data relating to the server such as the srcMbox mail service hostname or IP address; the protocolName such as the srcMbox protocol used by the specified server settings, including as a non-limiting example:</p>
<p id="p-0129" num="0128">bit <b>0</b>: useSSL
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0129">0=do not use SSL;</li>
        <li id="ul0002-0002" num="0130">1=use SLL</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0130" num="0131">bits <b>1</b>-<b>15</b>: unused.</p>
<p id="p-0131" num="0132">Other information in the table is related to the smtpServer as SMPT server hostname and smtpPort as for example, SMTP port (default=25). Other data will be related to settings, description, and created and modified data items. There will be stored procedures, such as sSmtpProviderMapping that is used by the SOAP Servlet to select all rows from the smtpProvider table.</p>
<p id="p-0132" num="0133">The system will modify the SendMessageHandler to include the smtpServer, smtpPort, and useSSL boolean in sendmail requests that are sent to the UP Servlet <b>52</b>. The system will modify the SOAP Servlet <b>52</b> to include smtpServer, smtpPort, and useSSL boolean in a UserInfo response.</p>
<p id="p-0133" num="0134">The SoapServlet <b>52</b> will cache the SMTP Provider data into a single object. A servletManager command can be added (&#x201c;clearSMTPProvCache&#x201d;) to allow dynamic refreshing of this cache without requiring a Soap Servlet restart. The data can be stored in a Map and typically there should be no more than several hundreds of entries in this table.</p>
<p id="p-0134" num="0135">The system supports auto-configuration of integrated mailbox given a user's email address. This is done using the mail domain of the email address and matching it against the system knowledge-base. The system builds this knowledgebase based on guessing (on mail domain) and learning from prior integrations. For mail providers that support hosted domains, there are several hosted domains, each used by a small set of users. Further, the mail domain of the user may not match the mail domain of the mail access server. For example, email ID could be murthy@gortyfamily.net and the mail access server could be server.register.com).</p>
<p id="p-0135" num="0136">The system will not work for the majority of the hosted domain users as the audience set is a larger number of domains each with small number of users as opposed to large number of users for a smaller number of domains. Adding a configuration entry into the knowledge base will also be cumbersome as the number of entries would explode.</p>
<p id="p-0136" num="0137">The system simplifies integration of hosted mail domains. The system maintains a knowledge-base of MX records from the DNS and matches against the knowledge-base to retrieve the mail access configuration for that mailbox.</p>
<p id="p-0137" num="0138">This enables the system to automatically configure an integrated mailbox for all hosted domains of an ISP regardless of whether another user from a specified hosted domain has integrated his mailbox. This also enables the knowledge base to only contain one entry for all hosted domains of a mail provider, vastly simplifying the knowledge-base. The system can potentially use a similar solution for retrieval of SMTP servers as well (outbound SMTP vs. inbound mail access configuration), thus, extending the solution to configure other services, not just mail access. In the future, the system can implement guessing based on MX record patterns if there are no matches in the knowledge-base. The system can also auto learn into the knowledge-base, thus, expanding the knowledge-base. In the future, the system can also expand the lookups to other aspects of the DNS (or some other service), and retrieves the IP address from DNS, PTR lookup to see if it goes to a different domain and use a server within that domain.</p>
<p id="p-0138" num="0139">A mail exchange (MX) record can be an entry in a domain name database that identifies a mail server that is responsible for handling electronic mail for the domain name. Different MX records can be entered for any single domain name that is using more than one mail server. Priority can be obtained by a preference number, indicating the order in which the mail servers could be used. This would allow primary and back-up mail servers. Thus, an MX record maps a domain name to a list of mail exchange servers for that domain.</p>
<p id="p-0139" num="0140">Another type of mapping from a name to an IP address is an address (A) record, for example, the host name to an IP address mapping. Typically, in the priority of MX records, the smallest preference number has the highest priority.</p>
<p id="p-0140" num="0141">It should be understood that although the DNS system supports different types of record systems, the A record is typically a straight mapping between a name and one or more IP addresses. The MX record is usually used for routing email traffic, for example, routing emails of a particular domain name to a particular server that can be different from what is in the A records. Typically, the MX record is a good indicator for where the email domain name server is routing mail and can be used not only to check a user domain name against the MX record to see if a match occurs, but also to improve the guessing logic as will be explained below. If the MX record does not match, there could be a failure and the system may not try to authenticate, but would ask a user to re-enter the particular email address parameters. The system and method could take a portion after the &#x201c;@&#x201d; and do a DNS query on the internet for MX and A records. A number of MX records can be pulled and the best one is picked to accomplish the provisioning and determine which server to pull mail from, especially when a company has several servers with different MX records acting as back-ups. This is important for vanity domain names. If there is an A record, there may or may not be additional insight on provisioning, yet in some instances, the A record can be used for determining a valid address. It is also possible to make several educated guesses as explained below. Otherwise, the user is told it is not a valid address.</p>
<p id="p-0141" num="0142">IMAP-Idle improvements occur. IMAP-Idle is described in RFC 2177, which is incorporated by reference in its entirety. There are advantages for the IMAP-Idle connection limits on a per user basis and per server basis and advantages for same. There are two problems this improvement in IMAP-Idle solution addresses.</p>
<p id="p-0142" num="0143">First, a single host such as AOL may have X amount of users and allow Y amount of simultaneous TCP connection (where X&#x3e;Y). If all X AOL users support IMAP-Idle, connection attempts will be made for all X users even though only Y connections are supported. If unaddressed, other hosts would be unable to make other TCP connections to the host.</p>
<p id="p-0143" num="0144">Second, a single user's IMAP email account may only support one simultaneous TCP connection. If a second connection is used to retrieve user data from the same account, the first connection or second connection may be disconnected with or without warning. Assuming this went unaccounted for, mail integration would fail indefinitely.</p>
<p id="p-0144" num="0145">An IMAP-Idle Java connection manager is implemented in the system. Because there are so many varying TCP connection limits from domain to domain, it is not desirable to set a hard coded outbound TCP connection limit to these domains. Instead, an IMAP-Idle connection manager is introduced to manage IMAP-Idle connection failures. If an IMAP-Idle connection fails a failure streak, management by the IMAP-Idle manager is increased by one until it reaches a limit. If the limit is reached or exceeded the source is marked IMAP-Idle &#x201c;disabled&#x201d; and the source will not be connected in order to establish an IMAP-Idle connection. Therefore, if domain A has a set limit D and the system successfully connects D time, all subsequent IMAP-Idle and poll connection attempts will fail. By marking sources invalid for this type of connection, it ensures all sources have access to this domain. If the IMAP-Idle connection was dropped, the system determines if it dropped while an email poll (secondary connection) was in progress. If so, the account is marked IMAP-Idle &#x201c;disabled&#x201d; and the account will not be subscribed to in the future, thus, preserving resources and improving the user's email delivery experience.</p>
<p id="p-0145" num="0146">The IMAP-Idle definition states that the IMAP server displays the term IDLE when the server is asked what capabilities it supports. If the server claims to support IMAP-Idle, but fails to enter the IDLE state, the system continuously attempts to establish IMAP-Idle connections when one is not possible. An IMAP-Idle manager is implemented which checks the result of attempting to establish an IMAP-Idle connection. If the connection fails X times in a row, the IMAP-Idle feature will be disabled so the system can stop attempting to connect to an unsupported or incorrectly configured service.</p>
<p id="p-0146" num="0147">These are instances when the email server reports IMAP IDLE capabilities but fails to actually enter the IDLE state. In this case the IMAP IDLE manager will track the number of attempts to establish an IMAP IDLE connection to that server and if the failure exceeds a pre-specified threshold, then the system can stop attempting to connect to an unsupported service.</p>
<p id="p-0147" num="0148">The system polling environment can attempt to poll the account at an intelligent interval hoping to find new mail messages. If new mail is available, it is downloaded and sent to the user via their device. If this account is subscribable (IMAP-Idle supported), the system can reduce the amount of connections and connection attempts to the host, which do not accept high connection rates. The system can minimize the amount of data sent over the internet and produces a fast email delivery system.</p>
<p id="p-0148" num="0149">The IMAP-Idle connection can monitor the account for changes that occur and immediately download new information when an event occurs. This allows the system to skip (unneeded) empty polls for a source that has not received any new mail. Skipping the polls saves data transfer, any unnecessary TCP connection, connection attempts and also real time email delivery. This implementation is centralized and is represented as a subscription as opposed to PALM and MS systems, which are device and application based.</p>
<p id="p-0149" num="0150">IMAP IDLE is an optional expansion of the IMAP email accessing protocol that allows the server to send new message updates to the client in real time. Instead of having the system email program check for new mail every few minutes, the IMAP IDLE allows the server to notify the email program when new messages have arrived. The system can see incoming mail immediately. The use of IMAP IDLE is known. However, the difference from PALM is that the system implements this on the system as with the DA proxy <b>42</b> not on the device.</p>
<p id="p-0150" num="0151">The IMAP servers are set up to allow 30-minute TCP connection before they may disconnect them according to the IMAP RFC. If the system is to maintain an IMAP-Idle connection indefinitely, it should find a method to avoid this without missing new mail events produced by the IMAP-Idle connection in the meantime. Because several internet domains are known to disconnect TCP connections earlier than 30 minutes, the system resubscribes every X minutes, where X is configurable. To resubscribe the system quickly, it issues an IMAP &#x201c;fetch&#x201d; to check if new mail was received before re-entering the IDLE (subscribed state). This ensures the connection is kept alive and new email events are not lost.</p>
<p id="p-0151" num="0152">In accordance with non-limiting examples, IMAP protocol is updated with a new command IDLE, using which clients go into an &#x2018;idle&#x2019; mode. In this mode, an IMAP server sends mailbox changes as untagged responses to the &#x2018;idle&#x2019; client, such as when new messages are added or when they are deleted. Clients come out of this &#x2018;idle&#x2019;, mode by issuing a DONE.</p>
<p id="p-0152" num="0153">The MOP <b>40</b> as a Direct Access server currently supports a subscription/notification model for real-time mail delivery. In this model, a mailbox-provider notifies the MOP when new mail arrives at a mailbox. There is no persistent connection between the MOP <b>40</b> and mail-provider.</p>
<p id="p-0153" num="0154">By supporting IMAP IDLE, the MOP <b>40</b> can make it easy for the mail-providers to support real-time mail delivery. To support IMAP IDLE, the MOP would need to maintain a persistent connection to the mail-provider. The connections used in this IMAP-Idle implementation will be used solely to detect new mail and notify that the related source is ready to be polled. All previous MTH and MFH jobs remain as work completed by the DA proxy work queue and its UP servlet. The system supports real-time notifications for all IMAP sources that support IDLE capability.</p>
<p id="p-0154" num="0155">External subscriptions are persistent subscriptions made with external mail providers such as Yahoo and Gmail. Idle login failures occur when after an invalid login attempt is received trying to initialize an IMAP-Idle connection. Receiving this failure will increment the existing login failure streak to one.</p>
<p id="p-0155" num="0156">An idle subscription failure streak will include all connection and command related errors while attempting to establish an idling state for a particular IMAP source. Typically, login failures are not included in the count.</p>
<p id="p-0156" num="0157">To support IMAP IDLE, the system will maintain a separate ImapIdleConnection <b>120</b> for each user in the DA Proxy <b>42</b> as shown in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0157" num="0158">The ImapIdleConnection <b>120</b> discovers the presence of new mail and this triggers the normal polling mechanism that goes through UPServlet, which will continue to be used for polling and all MFH operations. Creating ImapIdleConnections <b>120</b> in the DA Proxy helps the polling system in the DA Proxy keep track of these connections for each source. An IOPump <b>122</b> serves as the connection manager for all ImapIdleConnections <b>120</b>.</p>
<p id="p-0158" num="0159">Unlike external subscriptions that are persisted in the database IMAP-Idle subscriptions are considered transient and are only in the memory of DA Proxy.</p>
<p id="p-0159" num="0160">The Source Scheduler <b>104</b> and DA Proxy keep track of IMAP IDLE subscriptions. Unlike external subscriptions which are persisted in the SrcMbox table with a subscriptionId, these subscriptions are in memory. Once a poll is successful, the Source Scheduler <b>104</b> determines if a source capable of IMAP-IDLE is not yet subscribed. The Source Scheduler <b>104</b> creates an ImapIdleConnection for this source mailbox <b>114</b> and initiates the subscription process. Sources that are marked with &#x2018;disableSubscribe&#x2019; <b>115</b> will not be subscribed.</p>
<p id="p-0160" num="0161">After each poll, the Source Scheduler <b>104</b> updates the subscription in an ImapIdleConnection. Updates to a highWaterMark as shown in the flowchart of <figref idref="DRAWINGS">FIG. 11</figref> allows the ImapIdleConnection to appropriately discover new messages when an &#x2018;idle&#x2019; connection closes. Additionally, this will allow an ImapIdleConnection to pick up any changes to the source-mailbox such as updates to the source mailbox data such as the server/user/password.</p>
<p id="p-0161" num="0162"><figref idref="DRAWINGS">FIG. 11</figref> illustrates a login, determination, and IDLE to show the IMAP-Idle connection in discovering new emails.</p>
<p id="p-0162" num="0163">An optimization can be made for IMAP-IDLE sources to immediately change the nextPoll to after 6 hours. For external subscriptions, the system can change the nextPoll only after the next poll to catch any new mails between last poll and a successful subscribe request. The ImapIdleConnection can discover any new mail since the last poll. As a result, this optimization can be made.</p>
<p id="p-0163" num="0164">If the Source Scheduler <b>104</b> discovers that a source should not be polled any longer, it notifies any existing ImapIdleConnection <b>120</b> to stop further notifications and cleans up the ImapIdleConnection.</p>
<p id="p-0164" num="0165">The Source Scheduler <b>104</b> is notified when the ImapIdleConnection <b>120</b> discovers new mail in the mailbox. The Source Scheduler schedules a poll upon such notification. If the ImapIdleConnection <b>120</b> cannot go into idle mode, it notifies the Source Scheduler that the subscription had failed. Some of the failures are Idle login failures and the remaining are Idle subscriptions failures.</p>
<p id="p-0165" num="0166">As shown in the flowchart of <figref idref="DRAWINGS">FIG. 1</figref><i>a</i>, to utilize the IMAP-Idle connection <b>120</b> the Source Scheduler <b>104</b> must first determine if the IMAP source is subscribable. To determine this, the DA Proxy makes a callback to the Source Scheduler once a poll for this source completes. The callback lists new properties such as the high water mark and subscribability.</p>
<p id="p-0166" num="0167">If the source happens to be subscribable the source scheduler will create a new subscription job and add it to the DA Proxy processing queue. These jobs are handled by the subscribe and unsubscribe handlers.</p>
<p id="p-0167" num="0168">The handlers' first task is determining which resource to use to complete its job. For ImapIdleConnection the Source Scheduler is that resource. The handler makes a call into Source Scheduler to subscribe to this specific source and is provided a response code for the success or failure of that process as shown in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0168" num="0169">A callback is made on completion of the subscription job. If the subscription was successful the subscribable flag will be cleared and the source will be marked as a subscribed.</p>
<p id="p-0169" num="0170"><figref idref="DRAWINGS">FIG. 12</figref> is a diagram showing the source scheduler <b>110</b> and polling queue <b>140</b> when a source has already been marked subscribable by the previous callback from the poll into the Source Scheduler. The polling queue <b>140</b>, DA proxy work queue <b>142</b> and name server <b>144</b> are illustrated and work together as shown.</p>
<p id="p-0170" num="0171">If an ImapIdleConnection <b>120</b> encounters a connection error or an error in issuing commands, it notifies the Source Scheduler <b>104</b> that the subscription had failed by returning an idle subscription failure. The Source Scheduler keeps track of the error and pulls in the next poll for that source to within 15 minutes from the last poll. If the failureStreak for this error exceeds a configurable limit, this source will be marked with &#x2018;disableSubscribe&#x2019; settings bit.</p>
<p id="p-0171" num="0172">If the ImapIdleConnection discovers a login failure, it returns an idle login failure to the Source Scheduler. The Source Scheduler bumps up the existing login failure streak on the source. Any source with a failureStreak&#x3e;0, will not be subscribable. Login failures will not result in persistent &#x2018;disableSubscribe&#x2019; bit.</p>
<p id="p-0172" num="0173">Some implementations of IMAP protocol exhibit a race condition. If a mailbox receives a new mail after the client goes into select state and before an idle command is issued, the system will return an untagged &#x2018;exists&#x2019; response indicating the presence of new mail. <figref idref="DRAWINGS">FIG. 13</figref> illustrates a flowchart of the method.</p>
<p id="p-0173" num="0174">The system mitigates this by immediately issuing an &#x2018;idle&#x2019; command after the system receives a response for a &#x2018;fetch&#x2019; command. The system parses the &#x2018;fetch&#x2019; response asynchronously after the &#x2018;idle&#x2019; command is issued. The race condition is not avoided completely, but is reduced to a very short interval, hopefully less than a second.</p>
<p id="p-0174" num="0175">This problem is further mitigated by the mechanism originally designed to reset IMAP timeout timers. To reset the timeout timer the ImapIdleConnection object will issue a &#x2018;DONE&#x2019;, to leave the IMAP-idling state, followed by a &#x2018;FETCH&#x2019; to reset the timer and check for new mail received. If mail was missed during the previous race condition or due to a faulty idle implementation it will be caught here. This will be executed every 5 minutes but will be configurable.</p>
<p id="p-0175" num="0176">The Source Scheduler keeps track of new mail discovered on re-connects. If it successively discovers new mail only on re-connect and reaches a configurable limit (default is 0-infinity), it calls back on Source Scheduler (itself), disabling the subscription, additionally marking the source &#x2018;disableSubscription&#x2019;. On new mail notifications, ImapIdleConnection informs Source Scheduler whether the discovery is from a re-connect (poll) or idle notification.</p>
<p id="p-0176" num="0177">By setting the default to infinity the existing connection provides a lighter polling alternative and is therefore still acceptable.</p>
<p id="p-0177" num="0178">If the Source Scheduler discovers new mail during fall-back polls, it keeps track of streaks of &#x2018;newMailOnFallback&#x2019;. If this reaches a configurable maximum, this IMAP-Idle source will be marked with &#x2018;disableSubscribe&#x2019; which is persisted in the database. For external subscriptions, they will be unsubscribed and re-subscribed on a next poll. The default value for this limit is 3.</p>
<p id="p-0178" num="0179">Additionally, to improve user experience, the Source Scheduler will change the next-poll to the default 15 minutes when new mail is discovered on a fall back poll. For external subscriptions, they will be unsubscribed and re-subscribed on next poll. The system can thus address when the subscriptions become out of sync.</p>
<p id="p-0179" num="0180">If a mail-provider restricts the number of connections allowed, the system will discover these limitations as normal connection-failures resulting in marking the mailbox as a &#x2018;disableSubscribe.&#x2019; This is also true for AOL.</p>
<p id="p-0180" num="0181">Similar to POP, IMAP servers can also return &#x2018;mailbox locked&#x2019; errors. If ImapIdleConnection returns a &#x2018;mailbox locked&#x2019; error, the source is immediately unsubscribed and marked with &#x2018;disableSubscribe&#x2019;. On the other hand, if &#x2018;mailbox locked&#x2019; is returned as error during normal polls, the Source Scheduler recognizes this and if there is an existing ImapIdleConnection for the source, unsubscribes it and marks the source with &#x2018;disableSubscribe.&#x2019;</p>
<p id="p-0181" num="0182">If an IMAP-Idle connection is disconnected while the source scheduler is processing a new mail notification the scheduler will increment the IMAP subscribe failure streak and continue with the next source. Assuming the poll succeeded the source will be marked as subscribe-able or un-subscribe-able by the polling mechanism. If the poll was unsuccessful the source scheduler will continue to poll this source every 15 minutes.</p>
<p id="p-0182" num="0183">If a poll connection fails while an IMAP-Idle connection exists the scheduler will unsubscribe the source, increase the fail-streak and expedite the poll. By providing a mechanism to reset the failure streaks the system will not run into a long-term problem and find all sources &#x2018;disableSubscribe.&#x2019;</p>
<p id="p-0183" num="0184">The system can avoid IMAP-Idle race-condition by using another connection to check for new mails after the IMAP-Idle connections goes into an idle mode. This can also be by triggering additional poll every time we enter idle mode. Some servers may close the servers far more often and the system does not necessarily want to poll on every connection closure. The system enters an idle mode on every connection closure. The system can issue &#x2018;fetch&#x2019; and &#x2018;idle&#x2019; commands simultaneously, reducing the race-condition even further.</p>
<p id="p-0184" num="0185">IMAP-Idle monitoring is used to monitor the health of the feature. The following fields will allow a manager to determine if a particular source scheduler is able to subscribe to IMAP sources and how the amount of subscriptions fluctuate (errors received) during polling intervals. Different fields can be monitored such as:</p>
<p id="p-0185" num="0186">number of idle connections (cumulative);</p>
<p id="p-0186" num="0187">time to subscribe (cumulative);</p>
<p id="p-0187" num="0188">number of subscription requests (cumulative);</p>
<p id="p-0188" num="0189">new mail notification&#x2014;idle (cumulative);</p>
<p id="p-0189" num="0190">new mail notification&#x2014;re-connect (cumulative);</p>
<p id="p-0190" num="0191">login failures (cumulative);</p>
<p id="p-0191" num="0192">mailbox locked (cumulative);</p>
<p id="p-0192" num="0193">connections lost (cumulative);</p>
<p id="p-0193" num="0194">IMAP commands failed (cumulative);</p>
<p id="p-0194" num="0195">idle state lost (cumulative);</p>
<p id="p-0195" num="0196">poll failed (cumulative); and</p>
<p id="p-0196" num="0197">how many disableSubscribe bit were set (cumulative).</p>
<p id="p-0197" num="0198">There now follows greater details concerning polling and details regarding out-of-coverage notifications to preserve polling resources in the DA Proxy.</p>
<p id="p-0198" num="0199">The MOP <b>40</b> and workers <b>24</b>, as shown in <figref idref="DRAWINGS">FIG. 15</figref> and explained in greater detail below, interact to suspend polling of email sources based upon user devices being out of a coverage are or turned off. This allows unnecessary polling to be avoided when a user cannot otherwise receive his or her email. However, problems arise in designating a subscriber as out of coverage in that in/out of coverage notifications to the workers <b>24</b> may not arrive in order. Moreover, there is a possibility that such notifications can be lost, such as when there is a worker failure event. A special &#x201c;fail-safe&#x201d; polling operation for out-of-coverage sources allows the workers to correct the MOP status if a &#x201c;race condition&#x201d; or error condition occurs that was not otherwise detected.</p>
<p id="p-0199" num="0200">It should be understood that there are constantly sources that are attributed to an account whose handheld device is out-of-coverage (or turned off). Currently, these sources are still polled for new mail even when they are out of coverage. This polling is not useful since mail cannot be delivered to the device when it is out-of-range. Hence the polling unnecessarily consumes bandwidth and uses system resources.</p>
<p id="p-0200" num="0201">In accordance with non-limiting examples, the source scheduler <b>104</b> receives a relay pushback request via the DA Proxy <b>42</b> for each device <b>38</b> that is out-of-coverage. The purpose of handling relay pushback requests in the MOP is to:</p>
<p id="p-0201" num="0202">1) save bandwidth and not poll sources that are out of coverage;</p>
<p id="p-0202" num="0203">2) resume polling sources when a user comes back into coverage; and</p>
<p id="p-0203" num="0204">3) reduce the number of messages that have to be cached on disk in the workers.</p>
<p id="p-0204" num="0205">A device <b>38</b> going in and out of coverage (this might happen if someone is near a weak signal) results in the relay making pushback requests relatively frequently to the worker. There is no assurance that these requests will never become out-of-order along the way to the worker <b>24</b>. Furthermore, the asynchronous nature of the web client engine <b>22</b>, MOP <b>40</b> and relay protocols within the relay <b>34</b> make for an endless number of sequences and magnifies the possibility of a race condition between out-of-coverage notifications and in-coverage notifications. The worker <b>24</b> needs to either keep notifications in sync or detect and disregard any out-of-sync notifications.</p>
<p id="p-0205" num="0206">There is also the issue of a worker failure event, with a chance that the in-coverage notification from the relay <b>34</b> is &#x201c;lost&#x201d; and MOP <b>40</b> does not receive the notification. If there are no messages in its job queue when the worker comes back online, it will not mark the queue as in-coverage and therefore will not send MOP an in-coverage notification. In this case the source will remain marked out-of-coverage in MOP and potentially never be polled for an incoming source mail. Essentially, the problem is that the worker <b>24</b> only knows about users that have messages being processed. If for some reason all jobs in the worker have been completed, but the MOP has the user flagged as out-of-coverage, there is no way for the worker <b>24</b> to know whom to poll the status for (the user does not exist as far as the worker is concerned). The worker only requests user information when new jobs come into the system. In this &#x201c;race condition case&#x201d; no new mail will arrive because the MOP has stopped polling and the user would remain marked out-of-coverage.</p>
<p id="p-0206" num="0207">To avoid the situation described above, the MOP <b>40</b> periodically conducts a &#x201c;fail safe poll&#x201d; for all pollable and out-of-coverage sources (a pollable source is not suspended or otherwise disabled). In other words, the worker <b>24</b> will correct the MOP if a race condition or error condition occurred that was not otherwise detected.</p>
<p id="p-0207" num="0208">One way of doing this is for the MOP DA Proxy <b>42</b> to poll the worker for out-of-coverage status. This polling is triggered by the polling interval for the source mailbox by the source scheduler <b>104</b>. If the worker knows this user is still out of coverage, it will report it as so otherwise, i.e., it is sending messages to an in-coverage user, or does not know about the user at all, and it will report an in-coverage status. This approach has the following advantages: a) in most cases, mail flow/polling will resume immediately as soon as the user comes back in coverage, b) if the system misses notifications or come out of order, the system will have a fail safe poll that can discover/report status and sync up relatively quickly if necessary, and c) in the case of a worker crash, the DA Proxy will poll the worker <b>24</b> who gets reassigned the out-of-coverage user and the worker will report in-coverage since it does not know anything about this user.</p>
<p id="p-0208" num="0209">The partition database <b>58</b> places a timestamp on each source that specifies the last time the source was changed. Two queries are provided. The first query simply returns the entire list of sources in the partition and a timestamp that can be used in the second query. The second query, given a timestamp from the last query, returns all sources changed since the last query and another timestamp to use in the next query.</p>
<p id="p-0209" num="0210">There now follows details of the MOP <b>40</b> related to polling to better understand the out-of-coverage notification process.</p>
<p id="p-0210" num="0211">The Source Assignment Manager <b>60</b> is a partition-level service, which is responsible for ensuring that all sources of a partition are being serviced.</p>
<p id="p-0211" num="0212">The SAM <b>60</b> maintains a list of all sources belonging to its configured partition. For each source in the list it tracks data related to uniquely identifying each source. Furthermore, the DA Proxy <b>42</b> assignment and directory node assignment are tracked to enable notifications of re-assignment and/or lessen reassignment due to DA Proxy and directory failure.</p>
<p id="p-0212" num="0213">A timestamp is also tracked. The timestamp is a value returned by the database that can be used to retrieve sources that have changed since the last query. The SAM maintains the SrcMboxId, MboxAcctId in addition to the PIN and ServiceBookId since the SrcMboxId and MboxAcctId are properties of a source as opposed to the PIN and ServicebookId and help the SAM verify the identity of a source after pin changes.</p>
<p id="p-0213" num="0214">When the system is started, it is the responsibility of the Source Assignment Manager (SAM) to begin assignment of all sources to DA proxies. The following is the sequence of steps for assigning all sources:</p>
<p id="p-0214" num="0215">1) Register with Directory for event notifications. The SAM will register for DA and Directory failure events.</p>
<p id="p-0215" num="0216">2) Call the Partition DB to acquire a list of all existing sources. The database will also return a tag or timestamp which can be used to query for any new or changed sources.</p>
<p id="p-0216" num="0217">3) For each source, call the Directory in one or more batches to get DA Proxy assignments and cache this information.</p>
<p id="p-0217" num="0218">4) Group sources by the DA Proxy they were assigned.</p>
<p id="p-0218" num="0219">5) Make a batch call to each DA Proxy containing assigned sources.</p>
<p id="p-0219" num="0220">6) Each DA Proxy upon receiving the assignments adds the sources to its source queue.</p>
<p id="p-0220" num="0221">Periodically, the SAM <b>60</b> will query the database for all sources that are new or changed using the timestamp that was returned in response to the query made at startup. It will then send out notifications to the DA Proxy for each of these sources. This step is necessary to &#x201c;ensure&#x201d; that all sources are being polled. By default, a sweep will be run every 15 minutes since the previous sweep. This interval will be configurable.</p>
<p id="p-0221" num="0222">The SAM will cache DA Proxy assignment information. The advantages to caching this information are as follows:</p>
<p id="p-0222" num="0223">1) In the case of DA Proxy failure, it allows the SAM to do a directory lookup only for those sources assigned to the failed DA Proxy. Otherwise, the SAM will have to do a database lookup to find sources that have changed since the last query by using the timestamp returned by the last query.</p>
<p id="p-0223" num="0224">2) In the case of Directory failure, it allows the SAM to suggest to the Directory which DA Proxy it should map each source to in order to reduce the amount of reassignment.</p>
<p id="p-0224" num="0225">3) In both types of failures (DA Proxy and Directory <b>56</b>), a database hit is avoided to find all the changed sources, since the last timestamp, in the partition since the information is cached. The DA Proxy <b>42</b> is responsible for servicing and managing the sources that are assigned to it by the SAM <b>60</b>. The Source Scheduler <b>104</b> manages and services the sources and can initiate subscriptions. The Source Scheduler <b>104</b> maintains all sources to be polled in a priority queue based on a priority heap. The queue is always sorted in the order in which sources are to be polled. The head of the queue is the least element with respect to the specified ordering which is nextPollTime.</p>
<p id="p-0225" num="0226">The scheduler will pick each source from the head of a queue that is due for polling, set its lastPickedTime as &#x201c;Now&#x201d; and submit it to the DA processing queue. It will then calculate the nextPollTime and insert it back into the queue. The source will also be marked as being &#x201c;in progress&#x201d;. Once the polling job is completed by DA, it will callback to the scheduler to report the completion of processing using the pollResult( ) interface method. The callback will be used to clear the &#x201c;in progress&#x201d; state of the source. If a source which is still &#x201c;in progress&#x201d; becomes due for polling, it would mean that the DA Proxy is running behind and hasn't gotten around to the last polling job yet and it will be punted back in the queue with a new nextPollTime.</p>
<p id="p-0226" num="0227">A source will be submitted to the DA Proxy processing queue for polling if it has a nextPollTime&#x3c;=Now. Otherwise, the scheduler will stay idle. Such a situation would indicate that the system is running ahead on its polling schedule. Instead of staying idle, the scheduler could allow polling to continue even if it is running ahead. However, in order to avoid too frequent polling attempts to remote servers a property could be defined that specifies how far ahead the system can run. For example, if it is set to 5 minutes, it will guarantee that there are at least 10 minutes between two successive polls assuming the regular polling interval is set to 15 minutes, i.e. sources with (nextPollTime&#x2212;runAheadTime)&#x3c;=Now will be scheduled for polling.</p>
<p id="p-0227" num="0228">The process of &#x201c;expediting&#x201d; a poll on a source would mean moving the source towards the head of the queue in order to be polled before its next scheduled poll. For &#x201c;invalid&#x201d; accounts that change state to &#x201c;valid&#x201d; due to external actions, this would mean moving the nextPollTime to &#x201c;now&#x201d; whereas for sources that saw new mail in the current poll, it would mean moving the nextPollTime to &#x201c;now+x&#x201d; where x is say 3 minutes.</p>
<p id="p-0228" num="0229">The DA proxy receives notifications from the Source Assignment Manager which specifies a list of sources to add, remove or update from the source scheduler. The notification can also specify that this is a &#x201c;refresh&#x201d; notification in that it will list all the sources to be serviced by the DA Proxy, which means the current list of sources being serviced should be removed. The &#x201c;refresh&#x201d; notification will be used by a backup SAM when it takes over for the primary SAM due to failure. The interface method notificationFromSAM( ) will be used to update the scheduler in this case.</p>
<p id="p-0229" num="0230">NewMail notifications from the EventServer <b>46</b> for subscribed sources will cause the source to be expedited to &#x201c;Now&#x201d; in the scheduler. If a NewMail notification is received for a subscribed source which has the &#x201c;in progress&#x201d; flag set, either due to two or more successive NewMail notifications from the Event Server or due to its nextPollTime&#x3c;=Now because of inactivity, then the source will be marked as &#x201c;ExpeditePollPending&#x201d; and expedited when the current polling job completes.</p>
<p id="p-0230" num="0231">Once a polling job is complete, when the polling handler calls back into the scheduler to report completion of the job, a new Subscription job will be created for those sources that are not currently subscribed but meet the criteria of being &#x201c;subscribable&#x201d; and added to the DA processing queue only if the system could successfully login to the source mailbox.</p>
<p id="p-0231" num="0232">There now follows details of the out-of-service notification process.</p>
<p id="p-0232" num="0233">The Source Scheduler <b>104</b> receives a relay pushback request for each source or device that is out-of-coverage. The purpose of handling relay pushback requests in the MOP is to:</p>
<p id="p-0233" num="0234">1) Save bandwidth and not poll sources that are out of coverage.</p>
<p id="p-0234" num="0235">2) Resume polling sources when a user comes back into coverage.</p>
<p id="p-0235" num="0236">3) Reduce the number of messages that have to be cached on disk in the Workers <b>24</b>.</p>
<p id="p-0236" num="0237">In the Engine <b>22</b>, messages are stored/queued and submitted to the Relay <b>34</b> based off of a PIN/SB. Furthermore, Relay implements pushback on a per message basis. Thus, every message submitted to the Relay <b>34</b> can be &#x201c;pushed back&#x201d; if the user is out of coverage. Each message queue in the worker (i.e., PIN/SB combo) keeps track of these push-backed messages and determines if the user is in or out of coverage. Hence, each queue will send an &#x201c;out-of-coverage&#x201d; or &#x201c;in-coverage&#x201d; flag to the MOP <b>40</b>.</p>
<p id="p-0237" num="0238">The pushback flag is on the source level rather than the user level because it does not involve de-multiplexing the multiple source levels into one user level, and makes the race condition of the update easier to be controlled. The MOP <b>40</b> receives one notification per source that has at least one pending message in the worker. The worker can allow at least one job for each service book (max 11 service books) to be sent to device. There can be 11 updates to a DA proxy in this non-limiting example each time the device is in and out of coverage.</p>
<p id="p-0238" num="0239">If the Worker <b>24</b> accepts MTH's from the DA Proxy <b>42</b> while a device is out of coverage, those messages are NOT lost. When the device comes back into coverage, the messages are retried and sent to the device. The Worker will keep them until the device is back in coverage or until some previously sent jobs expired, for example, after 7 days from a Port Agent <b>26</b> to make room for next pending job(s) to be sent out.</p>
<p id="p-0239" num="0240">The following describes the nature of the relay-pushback in the Engine <b>22</b>:</p>
<p id="p-0240" num="0241">1) The Worker <b>24</b> has x messages (where x&#x3e;0) that it has converted and submitted to Relay.</p>
<p id="p-0241" num="0242">2) Relay pushes back y messages (where y&#x3e;0). In theory, x=y, but it does not have to be, given the unreliable nature of this protocol from the Relay side.</p>
<p id="p-0242" num="0243">3) Of the y messages, 1 is marked as a KEEP job. A KEEP job is retried periodically (every 4 hours) as a safety measure. Therefore y&#x2212;1 messages are put back into the queue and the queue is marked as &#x201c;out-of-coverage&#x201d;. The y&#x2212;1 messages are not resubmitted while in this state, and any new incoming messages are not submitted for delivery. Messages are queued in the Worker.</p>
<p id="p-0243" num="0244">4) Two events can signal an &#x201c;in-coverage&#x201d; status:</p>
<p id="p-0244" num="0245">a) Relay notifies that user has come back in coverage, or</p>
<p id="p-0245" num="0246">b) The periodically resubmitted KEEP job comes back as DELIVERED. Queue is marked as &#x201c;in-coverage&#x201d; and messages in the queue are resubmitted (following the &#x201c;max number of assigned jobs per PIN/SB rule&#x201d;, as per usual).</p>
<p id="p-0246" num="0247">A device going in and out of coverage (this might happen if a device is near a weak signal) results in the Relay <b>34</b> making pushback requests relatively frequently to the Worker. There is no assurance that these requests will never become out-of-order along the way to the Worker. Furthermore, because of the asynchronous nature of the Engine <b>22</b>, the MOP and Relay protocols make for an endless number of sequences and magnifies the possibility of a race condition between out-of-coverage notifications and in-coverage notifications. The Worker needs to either keep notifications in sync, or detect and disregard out-of-sync notifications.</p>
<p id="p-0247" num="0248">There is also the issue of a Worker failure event, with a chance that the in-coverage notification from the Relay <b>34</b> is &#x201c;lost&#x201d; and MOP <b>40</b> does not receive the notification. If there are no messages in its job queue when the Worker comes back online, it will not mark the queue as in-coverage and therefore not send MOP an in-coverage notification. In this case, the source will remain marked out-of-coverage in the MOP and, potentially never be polled for incoming source mail. Essentially, the problem is that the Worker only knows about users that have messages being processed. If, for some reason, all jobs in the Worker have been completed but the MOP has the user flagged as out-of-coverage, there is no way for the Worker to know whom to poll the status for because the user does not exist as far as the Worker is concerned. The Worker <b>24</b> only requests user information when new jobs come into the system, but in this &#x201c;race-condition case&#x201d; no new mail will come in since the MOP has stopped polling and the user would remain marked out-of-coverage.</p>
<p id="p-0248" num="0249">To avoid the situation described above, MOP periodically accomplishes a &#x201c;fail-safe poll&#x201d; for all pollable and out-of-coverage sources where a pollable source is not suspended or otherwise disabled. The Worker <b>24</b> will correct the MOP if a race condition or error condition occurred that was not otherwise detected.</p>
<p id="p-0249" num="0250">One way of doing this is for the MOP DA Proxy <b>42</b> to poll the Worker <b>24</b> for out-of-coverage status. This polling is triggered by the polling interval for the source mailbox by the Source Scheduler <b>104</b>. If the Worker knows this user is still out of coverage it will report it as so, otherwise, i.e., it is sending messages to an in-coverage user, or doesn't know about the user at all, and it will report an in-coverage status. This approach has the following advantages: a) In most cases, mail flow/polling will resume immediately as soon as the user comes back in coverage, b) if notifications are missed or come out of order, the system will have a fail-safe poll that can discover/report status and sync up relatively quickly if necessary, and c) in the case of a Worker crash, the DAProxy will poll the Worker who gets reassigned the out-of-coverage user, and the worker will report in-coverage since it does not know anything about this user.</p>
<p id="p-0250" num="0251">The Source Scheduler <b>104</b> periodically triggers the DA Proxy <b>42</b> to send a fire-and-forget notification to the Worker <b>24</b>. In response, if the Worker determines the source is in-coverage, updates the out-of-coverage notification status to &#x2018;false&#x2019; thereby indicating that the source is back in-coverage status. In the event the fire-and-forget notification is lost or the Worker is down, then the Worker will not send an in-coverage notification update to MOP and the source state will remain out of coverage.</p>
<p id="p-0251" num="0252"><figref idref="DRAWINGS">FIG. 15</figref> is a sequence diagram of the notification communication transactions.</p>
<p id="p-0252" num="0253">All sources in an account should be considered out-of-coverage if one source in the account receives a pushback notification from the relay. Part of this optimization could be implemented in the MOP to mark all sources out-of-coverage. However, the most benefit would probably be gained if the engine <b>22</b> were optimized to consider relay pushbacks at the account level and tie the queues together at the account level. Otherwise any messages already in the queue will continue to be retried.</p>
<p id="p-0253" num="0254">The worker need not respond with an &#x201c;out-of-coverage ACK&#x201d; when the MOP polls it for out-of-coverage sources. It only needs to respond to have MOP mark in-coverage. This would save some of the overhead of processing out-of-coverage requests and responses.</p>
<p id="p-0254" num="0255">Exemplary components of a hand-held mobile wireless communications device <b>1000</b> that may be used in accordance with such a system are further described in the example below with reference to <figref idref="DRAWINGS">FIG. 1</figref>. The device <b>1000</b> illustratively includes a housing <b>1200</b>, a keypad <b>1400</b> and an output device <b>1600</b>. The output device shown is a display <b>1600</b>, which is preferably a full graphic LCD. Other types of output devices may alternatively be utilized. A processing device <b>1800</b> is contained within the housing <b>1200</b> and is coupled between the keypad <b>1400</b> and the display <b>1600</b>. The processing device <b>1800</b> controls the operation of the display <b>1600</b>, as well as the overall operation of the mobile device <b>1000</b>, in response to actuation of keys on the keypad <b>1400</b> by the user.</p>
<p id="p-0255" num="0256">The housing <b>1200</b> may be elongated vertically, or may take on other sizes and shapes (including clamshell housing structures). The keypad may include a mode selection key, or other hardware or software for switching between text entry and telephony entry.</p>
<p id="p-0256" num="0257">In addition to the processing device <b>1800</b>, other parts of the mobile device <b>1000</b> are shown schematically in <figref idref="DRAWINGS">FIG. 1</figref>. These include a communications subsystem <b>1001</b>; a short-range communications subsystem <b>1020</b>; the keypad <b>1400</b> and the display <b>1600</b>, along with other input/output devices <b>1060</b>, <b>1080</b>, <b>1100</b> and <b>1120</b>; as well as memory devices <b>1160</b>, <b>1180</b> and various other device subsystems <b>1201</b>. The mobile device <b>1000</b> is preferably a two-way RF communications device having voice and data communications capabilities. In addition, the mobile device <b>1000</b> preferably has the capability to communicate with other computer systems via the Internet.</p>
<p id="p-0257" num="0258">Operating system software executed by the processing device <b>1800</b> is preferably stored in a persistent store, such as the flash memory <b>1160</b>, but may be stored in other types of memory devices, such as a read only memory (ROM) or similar storage element. In addition, system software, specific device applications, or parts thereof, may be temporarily loaded into a volatile store, such as the random access memory (RAM) <b>1180</b>. Communications signals received by the mobile device may also be stored in the RAM <b>1180</b>.</p>
<p id="p-0258" num="0259">The processing device <b>1800</b>, in addition to its operating system functions, enables execution of software applications <b>1300</b>A-<b>1300</b>N on the device <b>1000</b>. A predetermined set of applications that control basic device operations, such as data and voice communications <b>1300</b>A and <b>1300</b>B, may be installed on the device <b>1000</b> during manufacture. In addition, a personal information manager (PIM) application may be installed during manufacture. The PIN is preferably capable of organizing and managing data items, such as e-mail, calendar events, voice mails, appointments, and task items. The PIN application is also preferably capable of sending and receiving data items via a wireless network <b>1401</b>. Preferably, the PIM data items are seamlessly integrated, synchronized and updated via the wireless network <b>1401</b> with the device user's corresponding data items stored or associated with a host computer system.</p>
<p id="p-0259" num="0260">Communication functions, including data and voice communications, are performed through the communications subsystem <b>1001</b>, and possibly through the short-range communications subsystem. The communications subsystem <b>1001</b> includes a receiver <b>1500</b>, a transmitter <b>1520</b>, and one or more antennas <b>1540</b> and <b>1560</b>. In addition, the communications subsystem <b>1001</b> also includes a processing module, such as a digital signal processor (DSP) <b>1580</b>, and local oscillators (LOs) <b>1601</b>. The specific design and implementation of the communications subsystem <b>1001</b> is dependent upon the communications network in which the mobile device <b>1000</b> is intended to operate. For example, a mobile device <b>1000</b> may include a communications subsystem <b>1001</b> designed to operate with the Mobitex&#x2122;, Data TAC&#x2122; or General Packet Radio Service (GPRS) mobile data communications networks, and also designed to operate with any of a variety of voice communications networks, such as AMPS, TDMA, CDMA, WCDMA, PCS, GSM, EDGE, etc. Other types of data and voice networks, both separate and integrated, may also be utilized with the mobile device <b>1000</b>. The mobile device <b>1000</b> may also be compliant with other communications standards such as 3GSM, 3GPP, UMTS, etc.</p>
<p id="p-0260" num="0261">Network access requirements vary depending upon the type of communication system. For example, in the Mobitex and DataTAC networks, mobile devices are registered on the network using a unique personal identification number or PIN associated with each device. In GPRS networks, however, network access is associated with a subscriber or user of a device. A GPRS device therefore requires a subscriber identity module, commonly referred to as a SIM card, in order to operate on a GPRS network.</p>
<p id="p-0261" num="0262">When required network registration or activation procedures have been completed, the mobile device <b>1000</b> may send and receive communications signals over the communication network <b>1401</b>. Signals received from the communications network <b>1401</b> by the antenna <b>1540</b> are routed to the receiver <b>1500</b>, which provides for signal amplification, frequency down conversion, filtering, channel selection, etc., and may also provide analog to digital conversion. Analog-to-digital conversion of the received signal allows the DSP <b>1580</b> to perform more complex communications functions, such as demodulation and decoding. In a similar manner, signals to be transmitted to the network <b>1401</b> are processed (e.g. modulated and encoded) by the DSP <b>1580</b> and are then provided to the transmitter <b>1520</b> for digital to analog conversion, frequency up conversion, filtering, amplification and transmission to the communication network <b>1401</b> (or networks) via the antenna <b>1560</b>.</p>
<p id="p-0262" num="0263">In addition to processing communications signals, the DSP <b>1580</b> provides for control of the receiver <b>1500</b> and the transmitter <b>1520</b>. For example, gains applied to communications signals in the receiver <b>1500</b> and transmitter <b>1520</b> may be adaptively controlled through automatic gain control algorithms implemented in the DSP <b>1580</b>.</p>
<p id="p-0263" num="0264">In a data communications mode, a received signal, such as a text message or web page download, is processed by the communications subsystem <b>1001</b> and is input to the processing device <b>1800</b>. The received signal is then further processed by the processing device <b>1800</b> for an output to the display <b>1600</b>, or alternatively to some other auxiliary I/O device <b>1060</b>. A device user may also compose data items, such as email messages, using the keypad <b>1400</b> and/or some other auxiliary I/O device <b>1060</b>, such as a touchpad, a rocker switch, a thumb-wheel, or some other type of input device. The composed data items may then be transmitted over the communications network <b>1401</b> via the communications subsystem <b>1001</b>.</p>
<p id="p-0264" num="0265">In a voice communications mode, overall operation of the device is substantially similar to the data communications mode, except that received signals are output to a speaker <b>1100</b>, and signals for transmission are generated by a microphone <b>1120</b>. Alternative voice or audio I/O subsystems, such as a voice message recording subsystem, may also be implemented on the device <b>1000</b>. In addition, the display <b>1600</b> may also be utilized in voice communications mode, for example to display the identity of a calling party, the duration of a voice call, or other voice call related information.</p>
<p id="p-0265" num="0266">The short-range communications subsystem enables communication between the mobile device <b>1000</b> and other proximate systems or devices, which need not necessarily be similar devices. For example, the short-range communications subsystem may include an infrared device and associated circuits and components, or a Bluetooth&#x2122; communications module to provide for communication with similarly-enabled systems and devices.</p>
<p id="p-0266" num="0267">This application is related to copending patent applications entitled, &#x201c;DIRECT ACCESS ELECTRONIC MAIL (EMAIL) DISTRIBUTION AND SYNCHRONIZATION SYSTEM WITH EXTERNAL SMTP SERVER SUPPORT,&#x201d; and &#x201c;DIRECT ACCESS ELECTRONIC MAIL (EMAIL) DISTRIBUTION AND SYNCHRONIZATION SYSTEM WITH OUT-OF-COVERAGE NOTIFICATION,&#x201d; which are filed on the same date and by the same assignee, the disclosures which are hereby incorporated by reference.</p>
<p id="p-0267" num="0268">Many modifications and other embodiments of the invention will come to the mind of one skilled in the art having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore, it is understood that the invention is not to be limited to the specific embodiments disclosed, and that modifications and embodiments are intended to be included within the scope of the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>That which is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A communications system, comprising:
<claim-text>a network engine comprising a processor configured to communicate with a plurality of user subscribed mobile wireless communications devices via a communications network for sending and receiving emails therefrom; and</claim-text>
<claim-text>a direct access server comprising a processor configured to operate with the network engine for polling different electronic mailboxes of users each corresponding to an email source and retrieving email from the electronic mailboxes and pushing any email through the network engine to selected user subscribed mobile wireless communications devices, and an IMAP-Idle manager configured to:</claim-text>
<claim-text>establish IMAP-Idle connections to each of the electronic mailboxes of each user using the Internet Message Access Protocol (IMAP) for supporting real-time notifications,</claim-text>
<claim-text>for each of the electronic mailboxes, set a connection limit for the number of IMAP-Idle connections to each of the electronic mailboxes; and</claim-text>
<claim-text>when an IMAP-Idle connection limit to one of the electronic mailboxes is reached or exceeded, mark the one electronic mailbox as IMAP-Idle disabled, such that subsequent IMAP-Idle connection attempts will fail and an account associated with the one electronic mailbox will not be subscribed to in the future, preventing any future IMAP-Idle connections to the one electronic mailbox.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The communications system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein no IMAP-Idle connection can be made to an electronic mailbox of the email source when a connection limit has been reached.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The communications system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein if IMAP-Idle connection attempts to an electronic mailbox of an email source fail a predetermined number of times, said IMAP-Idle manager will not attempt to connect to the particular electronic mailbox using an IMAP-Idle connection.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The communications system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said IMAP-Idle manager is operative for determining whether an IMAP-Idle connection has been dropped when a secondary connection was in progress such that an IMAP-Idle connection is disabled.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The communications system according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein said secondary connection comprises a connection for email polling.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The communications system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said IMAP-Idle manager is operative for issuing an IMAP fetch to check if new email was received.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A communications system, comprising:
<claim-text>a network engine comprising a processor configured to communicate with a plurality of user subscribed mobile wireless communications devices via a communications network for sending and receiving emails therefrom; and</claim-text>
<claim-text>a direct access server comprising a processor configured to operate with the network engine for polling electronic mailboxes of users each corresponding to an email source and retrieving email from the electronic mailboxes and pushing any email through the network engine to selected user subscribed mobile wireless communications devices, and an IMAP-Idle manager configured to:</claim-text>
<claim-text>establish IMAP-Idle connections to each of the electronic mailboxes that are subscribed by each user using the Internet Message Access Protocol (IMAP) for supporting real-time notifications, for each of the electronic mailboxes, set a connection limit for the number of IMAP-Idle connections to each of the electronic mailboxes; and</claim-text>
<claim-text>when an IMAP-Idle connection limit to one of the electronic mailboxes is reached or exceeded, mark the one electronic mailbox as IMAP-Idle disabled, such that subsequent IMAP-Idle connection attempts will fail and an account associated with the one electronic mailbox will not be subscribed to in the future, preventing any future IMAP-Idle connections to the one electronic mailbox.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The communications system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein a user subscribes to enable IMAP-Idle connections upon subscribing to an electronic mailbox of an email source as an email service provider.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The communications system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein no IMAP-Idle connection can be made to an electronic mailbox of an email source when a connection limit has been reached.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The communications system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein if IMAP-Idle connection attempts to an electronic mailbox of an email source fail a predetermined number of times, said IMAP-Idle manager will not attempt to connect to the particular electronic mailbox using an IMAP-Idle connection.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The communications system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said IMAP-Idle manager is operative for determining whether an IMAP-Idle connection has been dropped when a secondary connection was in progress such that an IMAP-Idle connection is disabled.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The communications system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said secondary connection comprises a connection for email polling.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The communications system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said IMAP-Idle manager is operative for issuing an IMAP fetch to check if new mail was received.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A communications method, comprising:
<claim-text>polling electronic mailboxes of users each corresponding to an email source from a direct access server comprising a processor;</claim-text>
<claim-text>retrieving email from the electronic mailboxes;</claim-text>
<claim-text>pushing any email through a network engine to selected user subscribed mobile wireless communications devices; and</claim-text>
<claim-text>establishing IMAP-Idle connections to each of the electronic mailboxes of each user using the Internet Message Access Protocol (IMAP) for supporting real-time notifications when an IMAP-Idle connection limit to one of the electronic mailboxes is reached or exceeded mark the one electronic mailbox as IMAP-Idle disabled, such that subsequent IMAP-Idle connection attempts will fail and an account associated with the one electronic mailbox will not be subscribed to in the future, preventing any future IMAP-Idle connections to the one electronic mailbox. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626802-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626802</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12509401</doc-number>
<date>20090724</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>348</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707805</main-classification>
<further-classification>707913</further-classification>
<further-classification>715274</further-classification>
</classification-national>
<invention-title id="d2e53">Dynamic media content previews</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5974549</doc-number>
<kind>A</kind>
<name>Golan</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6763377</doc-number>
<kind>B1</kind>
<name>Belknap et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0023641</doc-number>
<kind>A1</kind>
<name>Gorman et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707530</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2003/0052909</doc-number>
<kind>A1</kind>
<name>Mo et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345716</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2003/0149801</doc-number>
<kind>A1</kind>
<name>Kushnirskiy</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709328</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0163155</doc-number>
<kind>A1</kind>
<name>Gowen et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0304573</doc-number>
<kind>A1</kind>
<name>Moss et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37524028</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0039546</doc-number>
<kind>A1</kind>
<name>Honma</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>264241</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0082926</doc-number>
<kind>A1</kind>
<name>Sahita et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711163</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2010/0106849</doc-number>
<kind>A1</kind>
<name>Chou et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0131979</doc-number>
<kind>A1</kind>
<name>Sievert et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725 37</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2010/0235528</doc-number>
<kind>A1</kind>
<name>Bocharov et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709231</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>WO</country>
<doc-number>WO 2005/121920</doc-number>
<kind>A2</kind>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>PCT Notification of Transmittal of the International Search Report and the Written Opinion of the International Searching Authority, or the Declaration for PCT Application No. PCT/US2010/042606, 13 pgs., (Oct. 5, 2010).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Apple Inc., &#x201c;Quick Look Programming Guide&#x2014;Data Management: File Management&#x201d;, XP007915043, 50 pgs., (Jul. 20, 2009).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>International Preliminary Report on Patentability, mailed Feb. 2, 2012, for International Application No. PCT/US2010/042606, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707805</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707916</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707999102</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707E17014</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707913-914</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715250</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715700</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715704</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715716</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715719</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715727</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715240-241</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715248-249</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715201-203</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715273-274</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110022643</doc-number>
<kind>A1</kind>
<date>20110127</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jalon</last-name>
<first-name>Julien</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
<residence>
<country>FR</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>d'Herbemont</last-name>
<first-name>Pierre</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
<residence>
<country>FR</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ciudad</last-name>
<first-name>Jean-Pierre</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Jalon</last-name>
<first-name>Julien</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>d'Herbemont</last-name>
<first-name>Pierre</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Ciudad</last-name>
<first-name>Jean-Pierre</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Park, Vaughan, Fleming &#x26; Dowler LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Apple Inc.</orgname>
<role>02</role>
<address>
<city>Cupertino</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Robinson</last-name>
<first-name>Greta</first-name>
<department>2169</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A sandboxed process is initiated in response to a request for a preview of dynamic media content. A stream of frames is generated in a preview specific format by a plug-in that executes within the sandboxed process. The stream of frames is provided as the preview of the dynamic media content, where the preview is viewable on a display screen.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="232.33mm" wi="154.77mm" file="US08626802-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="239.18mm" wi="191.43mm" orientation="landscape" file="US08626802-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="210.90mm" wi="142.92mm" orientation="landscape" file="US08626802-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="231.31mm" wi="154.01mm" file="US08626802-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="222.17mm" wi="149.61mm" file="US08626802-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">Embodiments of the invention relate to streaming media and, more particularly, to providing secure previews of streaming media and digital media content.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">As computer users become increasingly sophisticated, there is an increasing desire for efficiency in the computer programs that people use. For example, many computer systems have some type of file management system that manages hundreds, or even thousands, of files, to which a user may need access. In many traditional file management systems, it is difficult to ascertain the contents of a particular file without actually opening the file, using the necessary application associated with the file type for the file. Oftentimes, the only useful information that the user can obtain about a file before opening it is the file name. Many users would like to be able to preview the contents of a file before actually committing resources to opening the full application and then the file. Some file management systems, such as the Finder in Mac OS X, offered by Apple Inc. of Cupertino, Calif., provides functionality for previewing files before opening them. Other operating systems and file management systems may also offer some static previewing functionality.</p>
<p id="p-0004" num="0003">For example, using Apple's Finder, a user can preview documents, such a PDFs, text files, word processing documents, and spreadsheets, etc. Finder also allows a user to preview certain video content that has a native file type recognized by the Mac OS.</p>
<p id="p-0005" num="0004">The Quick Look daemon in the Mac OS incorporates a variety of plug-ins, each of which accepts a particular data type from a client process and converts it into a preview in one of a set of standard format, such as PDF and HTML. The standard format previews are then displayed by the client process using the Quick Look framework. The advantage of this structure is that it avoids a client application crash being caused by a third party plug-in crashing. However, this model does not work particularly well for dynamic media, such as streaming media, because converting dynamic media associated with a non-native file type into a suitable standard format, takes too much processing time to be useful or reliable.</p>
<heading id="h-0003" level="1">SUMMARY OF THE DESCRIPTION</heading>
<p id="p-0006" num="0005">When a client process receives a request for a preview of dynamic media content, the request is passed to a sandboxed process. The sandboxed process is isolated from the client process, meaning that if the sandboxed process crashes, the client process remains functional and operational. Within the sandboxed process, the type of dynamic media content is determined. The content type may be determined based on, for example, a uniform-type identifier (UTI). Once the content type has been determined, the sandboxed process retrieves a streaming plug-in to convert the dynamic media content to a media type that the client process can use to display a preview of the dynamic media.</p>
<p id="p-0007" num="0006">The plug-in is used to convert the dynamic media content according to the protocol associated with the plug-in. In some embodiments, the plug-in generates both an audio component and a video component (at least for the dynamic media content that has both audio and video). As each frame of dynamic content is generated, it is passed to the client process for display as a streaming preview. In some embodiments, the plug-in provides one or more controls to the client process that allows a user to control limited aspects of the preview of the dynamic media content (e.g., &#x201c;stop,&#x201d; &#x201c;play,&#x201d; and &#x201c;pause,&#x201d; etc).</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0008" num="0007">The following description includes discussion of figures having illustrations given by way of example of implementations of embodiments of the invention. The drawings should be understood by way of example, not by way of limitation. As used herein, references to one or more &#x201c;embodiments&#x201d; are to be understood as describing a particular feature, structure, or characteristic included in at least one implementation of the invention. Thus, phrases such as &#x201c;in one embodiment&#x201d; or &#x201c;in an alternate embodiment&#x201d; appearing herein describe various embodiments and implementations of the invention, and do not necessarily all refer to the same embodiment. However, they are also not necessarily mutually exclusive.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a system according to various embodiments.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a system according to various embodiments.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of operation in a system according to various embodiments.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating a system according to various embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012">As provided herein, various methods, apparatuses and systems enable previews of dynamic media content. When a user selects a file (e.g., from a file management system) and requests a preview of that file, embodiments described herein facilitate conversion of the dynamic media into a format that is suitable for previewing the dynamic media content.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram, according to various embodiments. As shown, a file management system (e.g., Finder, Windows Explorer, etc.), or other program (e.g., client application, Web browser, etc.), includes a client process <b>102</b>. Client process <b>102</b> is where the user-level interaction takes place with the particular program. When a user requests a preview of file <b>110</b>, an application programming interface (API) <b>112</b> sends a request <b>116</b> to preview daemon <b>104</b>. If preview daemon <b>104</b> is not already running, then it is initiated. In various embodiments, preview daemon <b>104</b> is a sandboxed process. A sandboxed process is one that is separate from other running processes, or programs. The sandboxed process, or simply sandbox, typically provides a tightly controlled set of resources for guest programs to run in, such as scratch space on disk and memory. In various embodiments, network access, the ability to inspect the host system, or read from input devices, are usually disallowed, or heavily restricted, in the sandbox.</p>
<p id="p-0015" num="0014">By sending request <b>116</b> to preview daemon <b>104</b>, any manipulation, or conversion, of file <b>110</b> that causes any errors/problems with preview daemon <b>104</b> (e.g., crashing, hanging, unacceptable latency, etc.), will not affect client process <b>102</b>. In other words, if preview daemon <b>104</b> crashes, client process <b>102</b> will continue to run unaffected. For the user, this means that any errors in generating a preview of a file will not prevent the user from using the underlying program, such as the file management system. This can be particularly important if client process <b>102</b> is associated with a fundamental user program such as a file management system (e.g., Apple Finder, Windows Explorer, etc.). In some embodiments, if the sandboxed process crashes, the client process may display an indication that the requested preview is not current available.</p>
<p id="p-0016" num="0015">In various embodiments, a file type module <b>118</b> initially receives request <b>116</b> from client process <b>102</b>. File type module <b>118</b> determines the file type associated with file <b>110</b>. As discussed previously, the file type may be determined using a uniform-type identifier, or UTI, which is a string defined by Apple Inc. that uniquely identifies the type of a class of items. Thus, UTIs are used to identify the type of files and folders, clipboard data, bundles, aliases, symlinks, and streaming data. If file type module <b>118</b> recognizes the file type of file <b>110</b> as a native file type, then file type module <b>118</b> retrieves a known plug-in <b>120</b> associated with the native file type. For files that contain static media, such as word processing documents, PDFs, HTML files, etc., the retrieved plug-in can handle the file request and convert it into a file preview <b>122</b> that is sent back to client process <b>102</b> for display as a preview. In certain embodiments, plug-in <b>120</b> is directly capable of converting dynamic media content (audio/video files, interactive 3D animation files, etc.), as described in more detail below. The file preview <b>122</b> that is sent to client process <b>102</b> is handled by API <b>112</b>, which includes various display bundles <b>114</b>. Each display bundle includes the resources necessary to display a preview of one or more specific file types. Thus, if file preview <b>122</b> is a preview of a PDF, then a PDF display bundle from the group of display bundles <b>114</b> takes the PDF preview and prepares it for display on display <b>130</b>.</p>
<p id="p-0017" num="0016">Further embodiments described herein are capable of providing previews for dynamic media content (e.g., streaming media, video, 3-D animation, etc.). For example, if file <b>110</b> includes dynamic media content, request <b>116</b> might be sent to preview daemon <b>104</b> and file type module <b>118</b> determines the file type, based on, for example, the UTI associated with the file <b>110</b>. Other identifiers could be used in different embodiments. If the dynamic media is of a native file type and recognized by the file type module <b>118</b>, then a corresponding plug-in <b>120</b> is retrieved to convert the file <b>110</b> and provide a preview. If, however, file <b>110</b> includes dynamic media content of a non-native file type, then file type module <b>118</b> retrieves a designated plug-in <b>120</b> to handle the non-native conversion of file <b>110</b>.</p>
<p id="p-0018" num="0017">In certain embodiments, the designated plug-in <b>120</b> is responsible for retrieving an additional plug-in (stream plug-in <b>124</b>) to handle the dynamic media content. The designated plug-in may also retrieve a copy of the file that needs to be converted. In some embodiments, this file is the same file that is received as a part of request <b>116</b>. However, in other embodiments, the file may be a different copy of the same file to be used in converting to a streaming preview.</p>
<p id="p-0019" num="0018">In addition, another sandbox process <b>106</b> is opened, or initiated, for the stream plug-in <b>124</b> to convert file <b>110</b> into a streaming preview <b>126</b>. In this way, streaming preview daemon <b>106</b> is isolated from preview daemon <b>104</b> and from client process <b>102</b>. Thus, if during the conversion of the file to streaming preview the stream plug-in <b>124</b> crashes, process <b>106</b>, preview daemon <b>104</b> and client process <b>102</b> remain unaffected. In this way, a user does not lose any functionality in the client application (e.g., the file management system) and, moreover, the user can still preview other files, specifically those that do not require streaming previews without any interruption.</p>
<p id="p-0020" num="0019">In various embodiments, stream preview <b>126</b> is a series of frames converted from the original file <b>110</b>. The frames associated with stream preview <b>126</b> may include limited user functionality. In other words, if a full application (e.g., a media player) were opened to display the dynamic media content in file <b>110</b>, the user would have the application's full range of user-interfaced options to control and/or manipulate the file. For example, if a user wanted to view a video file and opened a video file viewing application (e.g., Quicktime offered by Apple Inc., Windows Media Player offered by Microsoft Corporation, etc.), the user would have the ability to stop, pause, play, adjust the volume, re-size the window, and/or perform various other operations on the file (e.g., save, delete, copy, etc.) from within the context of the opened application. In contrast, streaming preview <b>126</b> offers limited control to the user, as it is specifically designed to be a preview. For example, streaming preview <b>126</b> may only provide control over stopping and playing the content in the preview.</p>
<p id="p-0021" num="0020">Streaming preview <b>126</b> is received and handled by API <b>112</b> and, more particularly, by one of the designated display bundles <b>114</b>. In the case of streaming previews, one or more display bundles <b>114</b> includes the resources necessary to display streaming preview <b>126</b>. Thus, a streaming preview display bundle from the group of display bundles <b>114</b> takes streaming preview <b>126</b> and prepares it for display on display <b>130</b>.</p>
<p id="p-0022" num="0021">In addition to generating stream preview <b>126</b>, stream plug-in <b>124</b> may also generate and provide a set of one or more stream controls <b>128</b> to client process <b>102</b>. Stream controls <b>128</b> include one or more commands that allow a user to control various aspects of streaming preview <b>126</b>. Thus, as discussed previously, stream controls <b>128</b> might include commands to stop, pause, and/or play the content in the streaming preview. More commands or fewer commands may be included in certain embodiments. In some embodiments, stream controls <b>128</b> may not provide the user with the full range of functionality available in the native application associated with the file.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating various embodiments associated with generating a streaming preview of dynamic media content. Similar to <figref idref="DRAWINGS">FIG. 1</figref>, <figref idref="DRAWINGS">FIG. 2</figref> shows a client process <b>202</b> and a streaming preview daemon <b>206</b>. A stream plug-in <b>220</b> is used to convert file <b>208</b> into the streaming preview. The stream plug-in <b>220</b> runs within the sandboxed streaming preview daemon <b>206</b>. The stream plug-in <b>220</b> generates the streaming preview on a frame-by-frame basis and, in certain embodiments, separately generates a video component and an audio component. Thus, file <b>208</b> is converted into an audio component <b>212</b> and a video component <b>210</b>. The audio component <b>212</b> is added to the stream preview (or, simply, stream) <b>214</b> and the video component <b>210</b> is added to the stream on a frame-by-frame basis as each frame is generated. So, for example, as soon as frame <b>1</b> is converted and generated into a preview-specific format, it is added to the stream and sent to client process <b>202</b>, without waiting for frame <b>2</b> to be converted and generated. Likewise, frame <b>2</b> may be immediately added to stream <b>214</b> as soon as it is converted and generated. This process continues for each frame that is converted and generated.</p>
<p id="p-0024" num="0023">As discussed previously, stream plug-in <b>220</b> provides stream controls, in various embodiments, to the client process. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, stream controls <b>216</b> run within client process <b>202</b>, and allow a user to control certain aspects of stream <b>214</b>. As described herein, stream controls <b>216</b> provide limited control over the stream <b>214</b> and do not provide the full range of control that would be available if the file <b>208</b> were opened in a native application.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating various embodiments for providing previews of dynamic media content. A request for a preview of dynamic media is received <b>310</b>. In response, at least one sandboxed process is initiated <b>320</b>. A single sandboxed process may already be running, in which case a second sandboxed process might be initiated to separate the streaming media preview from other previews being generated. The content type of the dynamic media is determined <b>330</b>. The content type may be determined based on a uniform-type identifier (UTI), or other form of file type identification.</p>
<p id="p-0026" num="0025">Based on the content type, a stream plug-in is retrieved <b>340</b> to convert the dynamic media into a preview-specific format. As used herein, a &#x201c;stream&#x201d; plug-in refers to any plug-in specifically designated to convert dynamic media content (e.g., video, audio, interactive 3D animation, etc.) into streaming media. If the content type of the dynamic media is a native file type, or, in other words, a recognized file type, then it may be possible to quickly and conveniently convert that file into a preview. However, if the file type is determined to be a non-native file type, then the stream plug-in needs to be capable of converting the original file from one format to a preview-specific format that is compatible with dynamic previewing.</p>
<p id="p-0027" num="0026">The retrieved plug-in is provided <b>350</b> to the sandboxed process and the preview is generated <b>360</b>. In situations where the file is a video file containing both audio and video data, the plug-in may generate separate audio and video components for the preview. If the original file contains only audio, then only an audio component might be generated. If the original file contains only video without audio, then only a video component might be generated. The streaming media plug-in can also support various files that contain interactive 3D animation, such as COLLADA files. Once the preview components have been generated the stream preview is provided <b>370</b> for display to a user and controls for the dynamic preview are also provided <b>380</b>. Such controls allow a user to control limited functionality associated with the dynamic preview (for example, &#x201c;stop,&#x201d; &#x201c;play,&#x201d; &#x201c;pause&#x201d;). For 3-D animated files, the dynamic preview may include similar controls, such as the ability to stop, pause, or play the animated file. However, in certain embodiments, the provided user controls are limited, as compared to the controls available when a native application is opened to play the dynamic media content.</p>
<p id="p-0028" num="0027">It should be noted that in alternate embodiments the steps described in <figref idref="DRAWINGS">FIG. 3</figref> can be rearranged and performed in a different order that the one shown. Also, it should be noted that more process steps, or fewer process steps, than those described in <figref idref="DRAWINGS">FIG. 3</figref>, can be used to accomplish the same dynamic media preview functionality contemplated by the various embodiments described herein.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system <b>400</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a Local Area Network (LAN), an intranet, an extranet, or the Internet. The machine may operate in the capacity of a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines (e.g., computers) that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0030" num="0029">According to various embodiments, <figref idref="DRAWINGS">FIG. 4</figref> also represents a form of the system that can be used to implement the described details shown in <figref idref="DRAWINGS">FIGS. 1-3</figref>. In particular, it should be noted that display <b>410</b> can be used to display dynamic media content as does display <b>130</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Embodiments that facilitate dynamic media content previews as described herein may included as instructions <b>422</b> (in the system of <figref idref="DRAWINGS">FIG. 4</figref>) that are stored, for example, in drive unit <b>418</b> or main memory <b>404</b> and can be executed by processor <b>402</b>.</p>
<p id="p-0031" num="0030">The exemplary computer system <b>400</b> includes a processor <b>402</b>, a main memory <b>404</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory <b>406</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory <b>418</b> (e.g., a data storage device), which communicate with each other via a bus <b>408</b>.</p>
<p id="p-0032" num="0031">Processor <b>402</b> represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor <b>402</b> may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor <b>402</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processor <b>402</b> is configured to execute the processing logic <b>422</b> for performing the operations and steps discussed herein.</p>
<p id="p-0033" num="0032">The computer system <b>400</b> may further include a network interface device <b>416</b>. The computer system <b>400</b> also may include a display unit <b>410</b> (e.g., a liquid crystal display (LCD), light emitting diode (LED) display, a cathode ray tube (CRT)), and an input device <b>412</b> (e.g., a keyboard and/or mouse, etc.).</p>
<p id="p-0034" num="0033">The secondary memory <b>418</b> may include a machine-readable storage medium (or more specifically a computer-readable storage medium) <b>424</b> on which is stored one or more sets of instructions (e.g., software <b>422</b>) embodying any one or more of the methodologies or functions described herein. The software <b>422</b> may also reside, completely or at least partially, within the main memory <b>404</b> and/or within the processing device <b>402</b> during execution thereof by the computer system <b>400</b>, the main memory <b>404</b> and the processing device <b>402</b> also constituting machine-readable storage media. The software <b>422</b> may further be transmitted or received over a network <b>420</b> via the network interface device <b>416</b>. In various embodiments, web content requested by a user can be retrieved (e.g., from the World Wide Web) via network <b>420</b> using network interface device <b>416</b>.</p>
<p id="p-0035" num="0034">While the machine-readable storage medium <b>424</b> is shown in an exemplary embodiment to be a single medium, the terms &#x201c;machine-readable storage medium&#x201d; or &#x201c;computer-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The terms &#x201c;machine-readable storage medium&#x201d; or &#x201c;computer-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine/computer and that cause the machine/computer to perform any one or more of the methodologies of the present invention. The terms &#x201c;machine readable storage medium&#x201d; or &#x201c;computer-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.</p>
<p id="p-0036" num="0035">Various components described herein may be a means for performing the functions described herein. Each component described herein includes software, hardware, or a combination of these. The operations and functions described herein can be implemented as software modules, hardware modules, special-purpose hardware (e.g., application specific hardware, application specific integrated circuits (ASICs), digital signal processors (DSPs), etc.), embedded controllers, hardwired circuitry, etc.</p>
<p id="p-0037" num="0036">Aside from what is described herein, various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>initiating, by a sandboxed preview process executing in a first sandbox within a data processing system, a sandboxed streaming preview process that executes in a second sandbox within the data processing system in response to a request for a preview of dynamic media content having a non-native content type, the sandboxed preview process comprising a designated plug-in for non-native content, wherein the request is received from a client application running within the data processing system, and wherein the request is originated from a user operating the data processing system to preview, via the client application, a file containing the dynamic media content stored in a storage device of the data processing system, the initiating including:
<claim-text>determining a content type of the dynamic media content is the non-native content type;</claim-text>
<claim-text>identifying a stream plug-in that is associated with the non-native content type;</claim-text>
<claim-text>retrieving the stream plug-in by the designated plug-in; and</claim-text>
<claim-text>launching the stream plug-in for execution within the sandboxed streaming preview process;</claim-text>
</claim-text>
<claim-text>converting, via the stream plug-in, the dynamic media content to a preview-specific format, including generating a stream of frames, the sandboxed streaming preview process representing a restricted operating environment having a set of resources exclusively allocated and utilized by the stream plug-in, wherein the sandboxed streaming preview process is separated from the client application, such that a failure of generating the stream of frames in a preview specific format within the sandboxed streaming preview process does not affect an operation of the client application;</claim-text>
<claim-text>providing the stream of frames as the preview of the dynamic media content to the client application; and</claim-text>
<claim-text>displaying, via the client application, the stream of frames on a display screen of the data processing system with limited user control functionality that is less than the user control functionality when the dynamic media content is displayed in a full view.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client application is part of a file management system provided by an operating system of the data processing system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>providing the stream plug-in and the dynamic media content to the sandboxed streaming preview process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the generating further comprises:
<claim-text>separately generating an audio component and a video component for each frame in the stream of frames.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein providing the stream of frames further comprises:
<claim-text>providing the stream of frames for display on a frame-by-frame basis as each frame is generated; and</claim-text>
<claim-text>providing one or more controls to facilitate user control of the dynamic media content during display of the preview.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the stream plug-in is associated with an application and wherein the preview is viewable without launching the application.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer-readable storage medium having instructions stored thereon, that when executed, cause a computer to:
<claim-text>initiate, by a sandboxed preview process executing in a first sandbox within the computer, a sandboxed streaming preview process that executes within a second sandbox within the computer in response to a request for a preview of dynamic media content having a non-native content type, the sandboxed preview process comprising a designated plug-in for non-native content, wherein the request is received from a client application running within the computer, and wherein the request is originated from a user operating the data processing system to preview, via the client application, a file containing the dynamic media content stored in a storage device of the data processing system, the initiating causing the computer to:
<claim-text>determine a content type of the dynamic media content is the non-native content type;</claim-text>
<claim-text>identify a stream plug-in that is associated with the non-native content type;</claim-text>
<claim-text>retrieve the stream plug-in by the designated plug-in; and</claim-text>
<claim-text>launch the stream plug-in for execution within the sandboxed streaming preview process;</claim-text>
</claim-text>
<claim-text>convert, via the stream plug-in, the dynamic media content to a preview-specific format, including generating a stream of frames, the sandboxed streaming preview process representing a restricted operating environment having a set of resources exclusively allocated and utilized by the stream plug-in, wherein the sandboxed streaming preview process is separated from the client application, such that a failure of generating the stream of frames in a preview specific format within the sandboxed streaming preview process does not affect an operation of the client application;</claim-text>
<claim-text>provide the stream of frames as the preview of the dynamic media content to the client application; and</claim-text>
<claim-text>display, via the client application, the stream of frames on a display screen of the data processing system with limited user control functionality that is less than the user control functionality when the dynamic media content is displayed in a full view.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the client application is part of a file management system provided by an operating system of the data processing system.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, comprising further instructions that cause the computer to:
<claim-text>provide the stream plug-in and the dynamic media content to the sandboxed streaming preview process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the instructions that cause the generating comprise further instructions that cause the computer to:
<claim-text>separately generate an audio component and a video component for each frame in the stream of frames.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the instructions that cause the providing of the stream of frames comprise further instructions that cause the computer to:
<claim-text>provide the stream of frames for display on a frame-by-frame basis as each frame is generated; and</claim-text>
<claim-text>provide one or more controls to facilitate user control of the dynamic media content during display of the preview.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. An apparatus, comprising:
<claim-text>processing means to
<claim-text>initiate, by a sandboxed preview process executing in a first sandbox within the apparatus, a sandboxed streaming preview process within a second sandbox within the apparatus in response to a request for a preview of dynamic media content having a non-native content type, the sandboxed preview process comprising a designated plug-in for non-native content, wherein the request is received from a client application running within the apparatus, and wherein the request is originated from a user operating the data processing system to preview, via the client application, a file containing the dynamic media content stored in a storage device of the data processing system, the initiating causing the processing means to</claim-text>
<claim-text>determine a content type of the dynamic media content is the non-native content type,</claim-text>
<claim-text>identify a stream plug-in that is associated with the non-native content type,</claim-text>
<claim-text>retrieve the stream plug-in by the designated plug-in; and</claim-text>
<claim-text>launch the stream plug-in for execution within the sandboxed streaming preview process,</claim-text>
</claim-text>
<claim-text>generate a stream of frames in a preview specific format from the dynamic media content, the stream of frames generated via a stream plug-in that executes within the sandboxed streaming preview process, the sandboxed streaming preview process representing a restricted operating environment having a set of resources exclusively allocated and utilized by the plug-in, wherein the sandboxed streaming preview process is separated from the client application, and wherein a failure of generating the stream of frames in a preview specific format within the sandboxed streaming preview process does not affect an operation of the client application; and</claim-text>
<claim-text>a display to display the generated stream of frames as the preview of the dynamic media content with limited user control functionality that is less than a full view of the dynamic media content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the client application is part of a file management system provided by an operating system of the data processing system.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, the processing means further to:
<claim-text>separately generate an audio component and a video component for each frame in the stream of frames.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, the processing means further to:
<claim-text>provide the stream of frames to the display on a frame-by-frame basis as each frame is generated; and</claim-text>
<claim-text>provide one or more user interface controls to facilitate user control of the dynamic media content during display of the preview.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the stream plug-in is associated with an application and wherein the preview is viewable without launching the application. </claim-text>
</claim>
</claims>
</us-patent-grant>

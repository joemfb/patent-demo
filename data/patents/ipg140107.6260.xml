<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627405-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627405</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13633712</doc-number>
<date>20121002</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726  1</main-classification>
<further-classification>726  2</further-classification>
<further-classification>726  4</further-classification>
<further-classification>726  8</further-classification>
<further-classification>726 25</further-classification>
<further-classification>709217</further-classification>
<further-classification>709219</further-classification>
<further-classification>709223</further-classification>
</classification-national>
<invention-title id="d2e51">Policy and compliance management for user provisioning systems</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6985955</doc-number>
<kind>B2</kind>
<name>Gulotta et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2003/0126464</doc-number>
<kind>A1</kind>
<name>McDaniel et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2007/0073699</doc-number>
<kind>A1</kind>
<name>Reed</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2007/0233531</doc-number>
<kind>A1</kind>
<name>McMahon</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0076865</doc-number>
<kind>A1</kind>
<name>Rousselle et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  7</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0144802</doc-number>
<kind>A1</kind>
<name>Tillery et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0150981</doc-number>
<kind>A1</kind>
<name>Amies et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2011/0016162</doc-number>
<kind>A1</kind>
<name>Booth et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707809</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2011/0197254</doc-number>
<kind>A1</kind>
<name>Sallaka et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2011/0277016</doc-number>
<kind>A1</kind>
<name>Hockings et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2011/0307957</doc-number>
<kind>A1</kind>
<name>Barcelo et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>WO</country>
<doc-number>WO 2008/072250</doc-number>
<kind>A1</kind>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>6</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  4</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  8</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 25</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>13366858</doc-number>
<date>20120206</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13633712</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130205365</doc-number>
<kind>A1</kind>
<date>20130808</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only" applicant-authority-category="assignee">
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Choi</last-name>
<first-name>Christopher Y.</first-name>
<address>
<city>Southport</city>
<country>AU</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Readshaw</last-name>
<first-name>Neil I.</first-name>
<address>
<city>Parkwood</city>
<country>AU</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>LaBaw</last-name>
<first-name>Jeffrey S.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Judson</last-name>
<first-name>David H.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Colin</last-name>
<first-name>Carl</first-name>
<department>2493</department>
</primary-examiner>
<assistant-examiner>
<last-name>Siddiqi</last-name>
<first-name>Mohammad A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A user provisioning system is extended to enable account reconciliation to occur in conjunction with a provisioning request. In response to a user provisioning request, a determination is made whether the user provisioning request is to be extended by including a reconciliation request. If so, the reconciliation request is piggy-backed on top of the provisioning request. This approach enables the reconciliation operation to be scoped to just the particular user account that is the subject to the provisioning operation, and it enables reconciliation to be carried out much more frequently as compared to the periodic, batch-oriented approach of prior techniques.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="56.90mm" wi="224.62mm" file="US08627405-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="237.66mm" wi="170.86mm" file="US08627405-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="230.72mm" wi="174.75mm" orientation="landscape" file="US08627405-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="216.41mm" wi="103.12mm" orientation="landscape" file="US08627405-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Technical Field</p>
<p id="p-0003" num="0002">This disclosure relates generally to security policy and compliance management for information technology (IT) systems.</p>
<p id="p-0004" num="0003">2. Background of the Related Art</p>
<p id="p-0005" num="0004">Information security is the process of providing a set of controls to manage risk with an end goal of demonstrating compliance with a set of regulations. Security policies specify how a set of controls operate and therefore to what extent risk may be capable of being managed.</p>
<p id="p-0006" num="0005">Identity management (IdM) systems manage the life cycle of users and their accounts across a number of managed systems, such as directories, databases, operating systems and enterprise applications. Some IdM systems provide a mechanism for comparing the state of user accounts on managed systems and, in particular, comparing them to their last recorded state. This process, sometimes referred to as reconciliation, is used to enable policy-based user provisioning and compliance checking.</p>
<p id="p-0007" num="0006">Known implementations for reconciling identity information, such as exist in commercial products such as IBM&#xae; Tivoli&#xae; Identity Manager&#x2122;, usually involve reading a large set of user account data from a managed system and sending the data set to the IdM server periodically. In a typical example, such as where the managed system is Microsoft&#xae; Active Directory&#x2122;, the IdM may be configured to retrieve all account information, say, every day, or every week. This retrieval process causes a significant degradation in the performance of the Information Technology (IT) system whose accounts are being managed by that directory. This problem leads organizations to schedule reconciliations less frequently than often is necessary or desirable, thus increasing the risk of undetected security violations such as unauthorized entitlements or access.</p>
<p id="p-0008" num="0007">Therefore, there is a need in the art to enhance reconciliation mechanisms to allow non-compliant accounts to be detected at the earliest possible opportunity. The subject matter of this disclosure addresses this need.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0009" num="0008">The deficiencies in prior art reconciliation approaches are addressed by &#x201c;extending&#x201d; a typical provisioning operation with a reconciliation request. In particular, when a user provisioning operation is requested, a determination is made whether the provisioning operation can be extended to include a reconciliation request (i.e. a request to perform reconciliation on the account that is the subject of the desired provisioning operation). If the provisioning operation can be extended in this manner, the reconciliation is carried out together with the provisioning operation. This approach enables the reconciliation operation to be scoped to just the particular user account that is the subject to the provisioning operation, and it enables reconciliation to be carried out much more frequently as compared to the batch-oriented approach of the prior art.</p>
<p id="p-0010" num="0009">The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">For a more complete understanding of the present invention and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> depicts an exemplary block diagram of a distributed data processing environment in which exemplary aspects of the illustrative embodiments may be implemented;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is an exemplary block diagram of a data processing system in which exemplary aspects of the illustrative embodiments may be implemented;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a known reconciliation operation provided by an identity management system in association with a managed or &#x201c;target&#x201d; system;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a first embodiment of this disclosure wherein a reconciliation operation is piggy-backed onto a provisioning operation; and</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a second embodiment of this disclosure wherein the reconciliation operation is carried out only upon detection of an error during a user provisioning operation.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT</heading>
<p id="p-0017" num="0016">With reference now to the drawings and in particular with reference to <figref idref="DRAWINGS">FIGS. 1-2</figref>, exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that <figref idref="DRAWINGS">FIGS. 1-2</figref> are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.</p>
<p id="p-0018" num="0017">With reference now to the drawings, <figref idref="DRAWINGS">FIG. 1</figref> depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system <b>100</b> may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system <b>100</b> contains at least one network <b>102</b>, which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system <b>100</b>. The network <b>102</b> may include connections, such as wire, wireless communication links, or fiber optic cables.</p>
<p id="p-0019" num="0018">In the depicted example, server <b>104</b> and server <b>106</b> are connected to network <b>102</b> along with storage unit <b>108</b>. In addition, clients <b>110</b>, <b>112</b>, and <b>114</b> are also connected to network <b>102</b>. These clients <b>110</b>, <b>112</b>, and <b>114</b> may be, for example, personal computers, network computers, or the like. In the depicted example, server <b>104</b> provides data, such as boot files, operating system images, and applications to the clients <b>110</b>, <b>112</b>, and <b>114</b>. Clients <b>110</b>, <b>112</b>, and <b>114</b> are clients to server <b>104</b> in the depicted example. Distributed data processing system <b>100</b> may include additional servers, clients, and other devices not shown.</p>
<p id="p-0020" num="0019">In the depicted example, distributed data processing system <b>100</b> is the Internet with network <b>102</b> representing a worldwide collection of networks and gateways that use the Transmission Control Protocol/Internet Protocol (TCP/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system <b>100</b> may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above, <figref idref="DRAWINGS">FIG. 1</figref> is intended as an example, not as an architectural limitation for different embodiments of the disclosed subject matter, and therefore, the particular elements shown in <figref idref="DRAWINGS">FIG. 1</figref> should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.</p>
<p id="p-0021" num="0020">With reference now to <figref idref="DRAWINGS">FIG. 2</figref>, a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system <b>200</b> is an example of a computer, such as server <b>104</b> or client <b>110</b> in <figref idref="DRAWINGS">FIG. 1</figref>, in which computer-usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system <b>200</b> includes communications fabric <b>202</b>, which provides communications between processor unit <b>204</b>, memory <b>206</b>, persistent storage <b>208</b>, communications unit <b>210</b>, input/output (I/O) unit <b>212</b>, and display <b>214</b>.</p>
<p id="p-0022" num="0021">Processor unit <b>204</b> serves to execute instructions for software that may be loaded into memory <b>206</b>. Processor unit <b>204</b> may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit <b>204</b> may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit <b>204</b> may be a symmetric multi-processor (SMP) system containing multiple processors of the same type.</p>
<p id="p-0023" num="0022">Memory <b>206</b> and persistent storage <b>208</b> are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and/or a permanent basis. Memory <b>206</b>, in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage <b>208</b> may take various forms depending on the particular implementation. For example, persistent storage <b>208</b> may contain one or more components or devices. For example, persistent storage <b>208</b> may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage <b>208</b> also may be removable. For example, a removable hard drive may be used for persistent storage <b>208</b>.</p>
<p id="p-0024" num="0023">Communications unit <b>210</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit <b>210</b> is a network interface card. Communications unit <b>210</b> may provide communications through the use of either or both physical and wireless communications links.</p>
<p id="p-0025" num="0024">Input/output unit <b>212</b> allows for input and output of data with other devices that may be connected to data processing system <b>200</b>. For example, input/output unit <b>212</b> may provide a connection for user input through a keyboard and mouse. Further, input/output unit <b>212</b> may send output to a printer. Display <b>214</b> provides a mechanism to display information to a user.</p>
<p id="p-0026" num="0025">Instructions for the operating system and applications or programs are located on persistent storage <b>208</b>. These instructions may be loaded into memory <b>206</b> for execution by processor unit <b>204</b>. The processes of the different embodiments may be performed by processor unit <b>204</b> using computer implemented instructions, which may be located in a memory, such as memory <b>206</b>. These instructions are referred to as program code, computer-usable program code, or computer-readable program code that may be read and executed by a processor in processor unit <b>204</b>. The program code in the different embodiments may be embodied on different physical or tangible computer-readable media, such as memory <b>206</b> or persistent storage <b>208</b>.</p>
<p id="p-0027" num="0026">Program code <b>216</b> is located in a functional form on computer-readable media <b>218</b> that is selectively removable and may be loaded onto or transferred to data processing system <b>200</b> for execution by processor unit <b>204</b>. Program code <b>216</b> and computer-readable media <b>218</b> form computer program product <b>220</b> in these examples. In one example, computer-readable media <b>218</b> may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage <b>208</b> for transfer onto a storage device, such as a hard drive that is part of persistent storage <b>208</b>. In a tangible form, computer-readable media <b>218</b> also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system <b>200</b>. The tangible form of computer-readable media <b>218</b> is also referred to as computer-recordable storage media. In some instances, computer-recordable media <b>218</b> may not be removable.</p>
<p id="p-0028" num="0027">Alternatively, program code <b>216</b> may be transferred to data processing system <b>200</b> from computer-readable media <b>218</b> through a communications link to communications unit <b>210</b> and/or through a connection to input/output unit <b>212</b>. The communications link and/or the connection may be physical or wireless in the illustrative examples. The computer-readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system <b>200</b> are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system <b>200</b>. Other components shown in <figref idref="DRAWINGS">FIG. 2</figref> can be varied from the illustrative examples shown. As one example, a storage device in data processing system <b>200</b> is any hardware apparatus that may store data. Memory <b>206</b>, persistent storage <b>208</b>, and computer-readable media <b>218</b> are examples of storage devices in a tangible form.</p>
<p id="p-0029" num="0028">In another example, a bus system may be used to implement communications fabric <b>202</b> and may be comprised of one or more buses, such as a system bus or an input/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory <b>206</b> or a cache such as found in an interface and memory controller hub that may be present in communications fabric <b>202</b>.</p>
<p id="p-0030" num="0029">Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java&#x2122;, Smalltalk, C++, C# or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0031" num="0030">Those of ordinary skill in the art will appreciate that the hardware in <figref idref="DRAWINGS">FIGS. 1-2</figref> may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in <figref idref="DRAWINGS">FIGS. 1-2</figref>. Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the disclosed subject matter.</p>
<p id="p-0032" num="0031">As will be seen, the techniques described herein may operate in conjunction within the standard client-server paradigm such as illustrated in <figref idref="DRAWINGS">FIG. 1</figref> in which client machines communicate with an Internet-accessible Web-based portal executing on a set of one or more machines. End users operate Internet-connectable devices (e.g., desktop computers, notebook computers, Internet-enabled mobile devices, or the like) that are capable of accessing and interacting with the portal. Typically, each client or server machine is a data processing system such as illustrated in <figref idref="DRAWINGS">FIG. 2</figref> comprising hardware and software, and these entities communicate with one another over a network, such as the Internet, an intranet, an extranet, a private network, or any other communications medium or link. A data processing system typically includes one or more processors, an operating system, one or more applications, and one or more utilities. The applications on the data processing system provide native support for Web services including, without limitation, support for HTTP, SOAP, XML, WSDL, UDDI, and WSFL, among others. Information regarding SOAP, WSDL, UDDI and WSFL is available from the World Wide Web Consortium (W3C), which is responsible for developing and maintaining these standards; further information regarding HTTP and XML is available from Internet Engineering Task Force (IETF). Familiarity with these standards is presumed.</p>
<p id="p-0033" num="0032">The process of creating user accounts and permissions for employees on a diverse array of computers can potentially consume much of an IT department's time and resources. Identity management (IdM) systems have been created to streamline the user provisioning process within an enterprise environment. Using this type of system, an administrator can build and implement applications that automatically create user accounts with appropriate permissions based, for example, on data entered into a human resources (HR) database. The resulting environment facilitates establishment and enforcement of authentication (such as single-sign on, or SSO) for newly-provisioned users. A known commercial product of this type is Tivoli&#xae; Identity Manager, available from IBM. Familiarity with such known identity management systems is presumed.</p>
<p id="p-0034" num="0033">As described above, &#x201c;reconciliation&#x201d; is a known mechanism by which Identity Management (IdM) systems compare state of user accounts on managed systems. In particular, reconciliation is the process of synchronizing accounts between the IdM and the managed systems, and (as necessary) applying one or more adoption rules configured for the reconciliation. <figref idref="DRAWINGS">FIG. 3</figref> illustrates this known process. In this example scenario, a managed system <b>300</b> (which may also be referred to as a &#x201c;target system&#x201d; or &#x201c;managed endpoint&#x201d;) may be of any type, such as a directory, a database, an operating system, an enterprise application, or the like. Users (or, more generally, user accounts) are provisioned to use the managed system using well-known user provisioning mechanisms, such as referenced above. As shown in the drawing, an identity management (IdM) server <b>302</b> having an IdM data store <b>304</b> is used to provide and manage the user provisioning operation. To facilitate the provisioning operation, a system of this type typically includes an adapter agent (or &#x201c;adapter&#x201d;) <b>306</b>. The adapter agent typically is implemented as a lightweight application that runs on or in association with a managed endpoint <b>300</b>. The adapter <b>306</b> provides the identity management server <b>302</b> with the capability to manage the target system. In particular, such agents typically are used for provisioning, de-provisioning, and modification of the user accounts on the managed endpoint. In the known system of <figref idref="DRAWINGS">FIG. 3</figref>, the identity management server <b>302</b> interacts with the adapter <b>306</b> to perform one or more user/account provisioning operations over a common protocol, and the adapter <b>306</b> interacts with the managed system <b>300</b> to implement the provisioning operation, typically over a managed system-specific protocol. The managed system <b>300</b> has an associated account database <b>308</b> that includes the account information being managed (for all user accounts, or for some defined subset thereof). Periodically, and as indicated by arrow <b>310</b>, the information in the account database <b>308</b> is read by the identity management server <b>302</b> and then compared with information in the IdM data store <b>304</b>. This is the known reconciliation process. During this (in effect) batch-oriented reconciliation, the IdM server <b>302</b> determines whether particular user accounts are compliant with one or more policies and, if not, applies one or more adoption rules configured for the reconciliation to attempt to address any non-compliance.</p>
<p id="h-0005" num="0000">Improved Policy and Compliance Management for User Provisioning Systems</p>
<p id="p-0035" num="0034">The deficiencies in prior art reconciliation approaches are addressed by &#x201c;extending&#x201d; a typical provisioning operation with a reconciliation request. In particular, when a user provisioning operation is requested, a determining is made whether the provisioning operation can be extended to include a reconciliation request (i.e. a request to perform reconciliation on the account that is the subject of the desired provisioning operation). If the provisioning operation can be extended in this manner, the reconciliation is carried out together with the provisioning operation. This approach enables the reconciliation operation to be fine-tuned (scoped) to just the particular user account that is the subject to the provisioning operation, and it enables reconciliation to be carried out much more frequently as compared to the batch-oriented approach of the prior art.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 4</figref> illustrates the basic operation. In this embodiment, the basic components are the same as in the <figref idref="DRAWINGS">FIG. 3</figref> approach, although the operations are different as will be described. Thus, there is a managed system <b>400</b>, and an identity management (IdM) server <b>402</b> that has an associated IdM data store <b>404</b>. An adapter <b>406</b> is installed on or otherwise associated with the managed system <b>400</b> to act as a proxy for the user provisioning operation. The IdM server <b>402</b> typically also includes a management console <b>405</b>, and a policy engine <b>407</b> for implementing one or more user provisioning policies. A &#x201c;policy&#x201d; may refer to a single policy, or a set of policies. In this context, the policy engine <b>407</b> may be a standalone component, or it may comprise a component of a policy management system (not shown), which is also well-known in the art. A policy management system typically comprises a policy administration point (PAP), a policy decision point (PDP), and a policy enforcement point (PEP). The policy administration point is used to define a policy, which typically uses subject attributes provided from a user repository, as well runtime and environment data received from other sources. The policy decision point responds to a policy query received from a policy enforcement point (PEP) to enforce the policy on a subject and with respect to a particular action initiated by the subject. A commercial implementation of such a system is IBM&#xae; Tivoli&#xae; Security Policy Manager.</p>
<p id="p-0037" num="0036">As noted above, according to this disclosure, reconciliation occurs in conjunction with (or, more generally, in association with) a user provisioning request. More colloquially, the reconciliation request may be thought of as being &#x201c;piggy-backed&#x201d; on top of the provisioning request. <figref idref="DRAWINGS">FIG. 4</figref> illustrates the process. The operation begins at step 1 when the user provisioning operation is initiated, either interactively by an administrator, programmatically from another system, or by some other means or mechanism already supported by the IdM server <b>402</b>. Typical user provisioning operations include, without limitation, modify account, change password, and the like. A determination is then made regarding whether the provisioning operation can be extended (or &#x201c;augmented&#x201d;) with a reconciliation request. This determination may be based on an administrator configuration (e.g., that certain types of provisioning requests are associated with reconciliation, while others may not be), or performed dynamically based on a configured rule or policy. This determination may also be optional, e.g., in the event that it is desired to have each provisioning operation associated with a reconciliation operation. Assume now that it is desired to extend the provisioning operation with the reconciliation request. Thus, at step 2, the provisioning policy or policies configured in the IdM server <b>402</b> are analyzed to determine the account attributes requires for compliance checking. At step 3, these attributes and their corresponding values are retrieved from the IdM data store <b>404</b>. For example, if the managed system is an LDAP directory, an employee in a manager role must have a particular attribute (i.e. &#x2018;is Manager&#x2019;) that must have a corresponding value (e.g., set to &#x2018;Y&#x2019;) before the provisioning operation can proceed according to the policy. In the alternative, and to increase efficiency, the attributes and their corresponding values may be obtained from a cache. At step 4, the provisioning operation is formatted and sent to the adapter <b>406</b>, preferably via an existing protocol supported by the IdM server <b>402</b> and the adapter <b>406</b>. During this formatting, the expected values of the attributes are placed in the provisioning request. At step 5, the adapter retrieves from the managed system <b>400</b> the current values of the attributes identified in the provisioning request. At step 6, the retrieved attribute values are compared with the expected values sent in the provisioning request from the IdM server <b>402</b>. If, as a result of the comparison at step 6, there are any inconsistencies, then preferably the provisioning operation fails and the current values for the account's attributes are returned to the IdM server <b>402</b>. This is step 7. In most cases, aborting the provisioning operation is preferred because granting additional access to the already non-compliant account may pose a security risk. In the alternative, the provisioning operation may be allowed to complete despite the inconsistency based on a new configuration item in the IdM server or adapter. In the event of a failed provisioning operation, the IdM server's existing compliance policies are then used to determine the appropriate response from the IdM server. This is step 8. For example, the IdM server may mark the account as non-compliant, send a notification to an administrator, suspend the account, delete the account, or the like.</p>
<p id="p-0038" num="0037">Thus, as compared to an existing provisioning operation, the technique shown in <figref idref="DRAWINGS">FIG. 4</figref> adds several steps. In particular, step 3 is carried out to retrieve the account attributes and their values. Further, at step 4, the normal provisional operation is supplemented by including the retrieved attribute values so that the adapter can perform the comparison at step 6. In this manner, the reconciliation is piggy-backed onto the user provisioning operation.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an alternative embodiment, once again involving the basic components, identified as managed system <b>500</b>, IdM server <b>502</b>, IdM data store <b>504</b>, and adapter <b>506</b>. In this embodiment, the piggy-backed reconciliation operation is only performed if there are inconsistencies detected during the user provisioning operation (such as an &#x201c;account modify&#x201d; operation). For example, assume the IdM server <b>502</b> sends an account modification request to the adapter <b>506</b> with a list of changes to multi-valued attributes. These changes may be represented as: a list of attribute values to add, a list of attribute values to remove, or the like. If the adapter attempts to remove a value for an attribute but the value does not exist, then it is possible that the account has changed without the knowledge of the IdM server. In this case, and according to the alternative embodiment, the account is marked as non-compliant and the non-compliant attribute values are returned and recorded in the IdM server. <figref idref="DRAWINGS">FIG. 5</figref> illustrates the process.</p>
<p id="p-0040" num="0039">The operation begins at step 1 when the user provisioning operation, in this case, an &#x201c;account modify,&#x201d; is initiated. At step 2, the account modification provisioning policy is analyzed to determine the account attributes. At step 3, these attributes and their corresponding values are retrieved from the IdM data store <b>504</b> (or otherwise from local cache). At step 4, the account modify provisioning operation is formatted and sent to the adapter <b>506</b>. At step 5, adapter initiates the account modify operation on the managed system <b>500</b>. If the operation fails (e.g., because the adapter attempts to remove a value for an attribute but the value does not exist), the managed system returns an &#x201c;error&#x201d; to the adapter, and this error message includes the non-compliant attributes. This is step 6. According to the alternative embodiment, reconciliation is then attempted. Thus, at step 7 the adapter performs the reconciliation (e.g., by comparing the attribute values provided by the managed system with the expected values sent in the provisioning request). If, as a result of the comparison at step 7, there are any inconsistencies, then preferably the provisioning operation fails and the non-compliant values for the account's attributes are returned to the IdM server <b>502</b>. This is step 8. In the event of a failed provisioning operation, the IdM server's existing compliance policies are then used to determine the appropriate response from the IdM server. This is step 9. As described above, the IdM server may mark the account as non-compliant, send a notification to an administrator, suspend the account, delete the account, or the like.</p>
<p id="p-0041" num="0040">Thus, and as the above-described, non-limiting embodiments illustrate, reconciliation may be performed irrespective of whether or not the provisioning fails, only when the provisioning operation fails, or other variants.</p>
<p id="p-0042" num="0041">Policy and compliance management for user provisioning system according to this disclosure provides significant advantages. A primary advantage is that, by using the described approach, non-compliant accounts are detected at the earliest opportunity (or, at the very least, much earlier than in the prior art), rather than always waiting for infrequently run reconciliations. Because the approach is leveraged off (i.e. takes advantage) of an existing provisioning operation, the approach consumes minimal system resources and still provides an effective complement to existing reconciliation mechanisms. The result is a lower cost reconciliation approach, as only a specific account or resource related to the provisioning operation is reconciled as opposed to all accounts at once (which occur in normal reconciliation). By scoping the reconciliation to just a particular user/account (or perhaps a subset of a larger number of users/accounts), fewer system resources are consumed but there is more frequent reconciliation on average, as many user provisioning operations (such as &#x201c;password change&#x201d;) naturally are performed quite regularly. As described, the approach ensures earlier detection of non-compliant accounts, thereby significantly increasing compliance and the opportunity for effective remediation where necessary. In addition, the approach can be implemented with minimal changes to existing protocols and interfaces.</p>
<p id="p-0043" num="0042">The described technique provides for a novel way of determining one or more attributes relating to a provisioning policy and reconciling these attributes for the purpose of compliance checking.</p>
<p id="p-0044" num="0043">Although it is preferred that a particular reconciliation is scoped to a particular user/account, depending on performance considerations, the reconciliation request may be associated with a somewhat larger number of users/accounts. An example of such a partial reconciliation might be all users within a same group as the initial user in the provisioning request, a set of defined groups, a portion of the account database but only after a known exclusion list of groups are filtered out, and the like. In this alternative approach, there is a workload trade-off that must be balanced to ensure that performance of provisioning operations (which are typically expected to complete relatively quickly) are not adversely impacted.</p>
<p id="p-0045" num="0044">Without limitation, the identity management (IdM) system and associated adapter that implement the piggy-backed reconciliation functionality described herein may be carried out on any type of computing entity, for example, in a data processing system such as illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, as a client-server based computing system such as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, or in any other manner. Another alternative implements the reconciliation approach as a cloud-based service (in a cloud-computing environment). Yet another alternative is a standalone software system. The reconciliation function may be a component of a system other than an identity management system such as, without limitation, a security policy management system, a protected system, or any other system. The reconciliation function (alone, or on top of the user provisioning operation) may be implemented as a product, a service, a machine, a set of machines, one or more servers, one or more processes, one or more programs, or the like. The system typically includes management interfaces (such as a web-based graphical user interface (GUI), a command line interface (CLI), or the like) for administration, configuration and management. The reconciliation system may be implemented in a middleware appliance. In one embodiment, the system operates in a web-based computing environment and is accessible over a network, such as a private network, the public Internet, or the like. The system may operate within a computing environment, or across multiple environments.</p>
<p id="p-0046" num="0045">One or more of such components (or &#x201c;functions&#x201d;) may be combined with one another, and the nomenclature used here is merely intended for exemplary purposes. Thus, the adapter need not be agent of the managed system. One adapter may be shared by multiple managed systems. Each such component typically is implemented in software, as a set of computer program instructions, executable on one or more processors, to comprise a special-purpose computing entity or machine. In the alternative, a particular component is implemented as a machine, device, system, process, program or execution thread. A component typically includes or has associated therewith one or more data sets. Such components and data typically are stored in computer memory or one or more data stores.</p>
<p id="p-0047" num="0046">Policy and compliance management for user provisioning system according to this disclosure provides significant advantages. A primary advantage is that, by using the described approach, non-compliant accounts are detected at the earliest opportunity (or, at the very least, much earlier than in the prior art), rather than always waiting for infrequently run reconciliations. Because the approach is leveraged off (i.e. takes advantage) of an existing provisioning operation, the approach consumes minimal system resources and still provides an effective complement to existing reconciliation mechanisms. The result is a lower cost reconciliation approach, as only a specific account or resource related to the provisioning operation is reconciled as opposed to all accounts at once (which occur in normal reconciliation). By scoping the reconciliation to just a particular user/account, fewer system resources are consumed but there is more frequent reconciliation on average, as many user provisioning operations (such as &#x201c;password change&#x201d;) naturally are performed quite regularly. As described, the approach ensures earlier detection of non-compliant accounts, thereby significantly increasing compliance and the opportunity for effective remediation where necessary. In addition, the approach can be implemented with minimal changes to existing protocols and interfaces.</p>
<p id="p-0048" num="0047">The particular techniques may be used in conjunction with any identity management function to facilitate any type of policy and compliance management including, without limitation, management of a security policy, an access policy, a data loss prevention policy, an identity provisioning policy, a web access control policy, and the like.</p>
<p id="p-0049" num="0048">As previously noted, the functionality described above may be implemented as a standalone approach, e.g., a software-based function executed by a processor, or it may be available as a managed service (including as a web service via a SOAP/XML interface). The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.</p>
<p id="p-0050" num="0049">More generally, computing devices within the context of the disclosed subject matter are each a data processing system (such as shown in <figref idref="DRAWINGS">FIG. 2</figref>) comprising hardware and software, and these entities communicate with one another over a network, such as the Internet, an intranet, an extranet, a private network, or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including, without limitation, support for HTTP, FTP, SMTP, SOAP, XML, WSDL, UDDI, and WSFL, among others. Information regarding SOAP, WSDL, UDDI and WSFL is available from the World Wide Web Consortium (W3C), which is responsible for developing and maintaining these standards; further information regarding HTTP, FTP, SMTP and XML is available from Internet Engineering Task Force (IETF). Familiarity with these known standards and protocols is presumed.</p>
<p id="p-0051" num="0050">The reconciliation functionality described herein may be implemented in or in conjunction with various server-side architectures including simple n-tier architectures, web portals, federated systems, and the like. The techniques herein may be practiced in a loosely-coupled server (including a &#x201c;cloud&#x201d;-based) environment.</p>
<p id="p-0052" num="0051">Still more generally, the subject matter described herein can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the function is implemented in software, which includes but is not limited to firmware, resident software, microcode, and the like. Furthermore, as noted above, the described functionality described herein can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system, apparatus, or device. The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or a semiconductor system (or apparatus or device). Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read/write (CD-R/W) and DVD. The computer-readable medium is a tangible item that is non-transitory.</p>
<p id="p-0053" num="0052">The computer program product may be a product having program instructions (or program code) to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or, those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.</p>
<p id="p-0054" num="0053">In a representative embodiment, an identity management (IdM) or user provisioning system or one or more of its component sub-systems exhibiting the above-described reconciliation functionality are implemented a special purpose computer, preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors, and the software may be implemented as one or more computer programs. Collectively, this special-purpose hardware and software comprises or supplements an existing policy management solution, an existing identity management solution, an existing user provision system, or some combination thereof, as has been described.</p>
<p id="p-0055" num="0054">In a representative embodiment, an identity management (IdM) or user provisioning system central management console exposes one or more web-based interfaces that may be used to manage or configure the described functionality in the manner described.</p>
<p id="p-0056" num="0055">As noted, the described reconciliation functionality may be implemented as an adjunct or extension to an existing policy management solution, incident management system, protected system, or the like.</p>
<p id="p-0057" num="0056">While the above describes a particular order of operations performed by certain embodiments of the invention, it should be understood that such order is exemplary, as alternative embodiments may perform the operations in a different order, combine certain operations, overlap certain operations, or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic.</p>
<p id="p-0058" num="0057">Finally, while given components of the system have been described separately, one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions, program sequences, code portions, and the like.</p>
<p id="p-0059" num="0058">Any application or functionality described herein may be implemented as native code, by providing hooks into another application, by facilitating use of the mechanism as a plug-in, by linking to the mechanism, and the like.</p>
<p id="p-0060" num="0059">As noted, the above-described reconciliation function may be used in any system, device, portal, site, or the like wherein it is desired to reconcile identity information for policy and compliance management.</p>
<p id="p-0061" num="0060">The disclosed technique is not limited to any particular type of user provisioning operation, such as provisioning new users.</p>
<p id="p-0062" num="0061">Having described our invention, what we now claim is as follows.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for compliance management in a user provisioning system, comprising:
<claim-text>in association with a provisioning operation for a target system, determining whether the provisioning operation is to be augmented with a reconciliation request;</claim-text>
<claim-text>when the provisioning operation is to be augmented with the reconciliation request, obtaining expected values of one or more identity attributes required to evaluate the reconciliation request;</claim-text>
<claim-text>associating the reconciliation request with the provisioning operation by including, in a provisioning request directed to the target system, the expected values of the one or more identity attributes required to evaluate the reconciliation request; and</claim-text>
<claim-text>performing a reconciliation in association with the provisioning operation by determining, using a machine having a hardware element, when the expected values of the one or more identity attributes match current values of the one or more identity attributes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref> further including analyzing a result of the provisioning operation to determine whether the provisioning operation fails.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method as described in <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the reconciliation is performed when the provisioning operation fails.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the reconciliation is performed irrespective of a completion status of the provisioning operation.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the provisioning operation is associated with a single user account and the performing step reconciles just the single user account.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method as described in <claim-ref idref="CLM-00002">claim 2</claim-ref> further including applying a compliance policy to generate a response to a failure of the provisioning operation. </claim-text>
</claim>
</claims>
</us-patent-grant>

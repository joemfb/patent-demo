<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625032-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625032</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13176327</doc-number>
<date>20110705</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>162</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>9</main-group>
<subgroup>67</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>348660</main-classification>
<further-classification>348474</further-classification>
</classification-national>
<invention-title id="d2e53">Video capture from multiple sources</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7000244</doc-number>
<kind>B1</kind>
<name>Adams et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725131</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2009/0256965</doc-number>
<kind>A1</kind>
<name>Moote et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>348564</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00003">
<othercit>&#x201c;TMS320DM816x DaVinci Digital Media Processors&#x201d;, SPRS614, Texas Instruments Incorporated, Mar. 2011, pp. 1-312.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00004">
<othercit>&#x201c;The TMS320DM642 Video Port Mini-Driver&#x201d;, Application Report SPRA918A, Texas Instruments Incorporated, Aug. 2003, pp. 1-35.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>&#x201c;TVP5158, TVP5157, TVP5156 Four-Channel NTSC/PAL Video Decoders With Independent Scalers, Noise Reduction, Auto Contrast, and Flexible Output Formatter for Security and Other Multi-Channel Video Applications Data Manual&#x201d;, Literature No. SLELS243E, Texas Instruments Incorporated, Jul. 2009, Revised Mar. 2011, pp. 1-108.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Purushotam Kumar et al, &#x201c;Frame List Processing for Multiple Video Channels&#x201d;, U.S. Appl. No. 13/095,445, filed Apr. 27, 2011, pp. 1-25.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>9</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130010198</doc-number>
<kind>A1</kind>
<date>20130110</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chitnis</last-name>
<first-name>Kedar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jadav</last-name>
<first-name>Brijesh Rameshbhal</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chae</last-name>
<first-name>Brian Okchon</first-name>
<address>
<city>Alpharetta</city>
<state>GA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hadli</last-name>
<first-name>Manjunath Rudranna</first-name>
<address>
<city>Belguam</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Smith, Jr.</last-name>
<first-name>David Edward</first-name>
<address>
<city>Allen</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chitnis</last-name>
<first-name>Kedar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Jadav</last-name>
<first-name>Brijesh Rameshbhal</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Chae</last-name>
<first-name>Brian Okchon</first-name>
<address>
<city>Alpharetta</city>
<state>GA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Hadli</last-name>
<first-name>Manjunath Rudranna</first-name>
<address>
<city>Belguam</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Smith, Jr.</last-name>
<first-name>David Edward</first-name>
<address>
<city>Allen</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Marshall, Jr.</last-name>
<first-name>Robert D.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Brady</last-name>
<first-name>W. James</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Telecky, Jr.</last-name>
<first-name>Frederick J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Texas Instruments Incorporated</orgname>
<role>02</role>
<address>
<city>Dallas</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Harold</last-name>
<first-name>Jefferey</first-name>
<department>2422</department>
</primary-examiner>
<assistant-examiner>
<last-name>Teitelbaum</last-name>
<first-name>Michael</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for capturing video frames from a plurality of video channels is provided. A list of a least two descriptors is formed for each of the plurality of video channels in a memory accessible to a direct memory access (DMA) engine, wherein each of the two or more descriptors for each channel is programmed to define a storage location for a sequential frame of video data for the channel. A sequence of video frames is received from the plurality of video channels, wherein for each channel, video frames are received at a frame rate for that channel. A DMA engine uses descriptors from the list to store video frames as they are received. The list is updated periodically to replace used descriptors.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="178.56mm" wi="252.98mm" file="US08625032-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="252.56mm" wi="188.30mm" orientation="landscape" file="US08625032-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="248.50mm" wi="190.58mm" file="US08625032-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="184.74mm" wi="202.27mm" file="US08625032-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="256.12mm" wi="170.69mm" orientation="landscape" file="US08625032-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="273.05mm" wi="188.81mm" orientation="landscape" file="US08625032-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="250.27mm" wi="189.40mm" orientation="landscape" file="US08625032-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="248.50mm" wi="182.46mm" orientation="landscape" file="US08625032-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CLAIM OF PRIORITY UNDER 35 U.S.C. 120</heading>
<p id="p-0002" num="0001">The present application claims priority to and incorporates by reference U.S. application Ser. No. 13/095,445, filed Apr. 27, 2011, entitled &#x201c;Frame List Processing for Multiple Video Channels.&#x201d;</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">This invention generally relates to capturing video streams from multiple sources, and more particularly to the use of a direct memory access engine to capture the multiple streams.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">With ever increasing need for higher computational power, multiple central processing units (CPUs), also referred to as cores, are being integrated to form a single system on a chip (SoC). In such SoCs, each of the cores could be different (i.e. a heterogeneous system) and could host different operating systems but share the same memory and peripherals.</p>
<p id="p-0005" num="0004">With sufficient processing power, multiple sources of video may be coupled to the SoC which may then receive multiple video streams that may be processed by the cores on the SoC, stored in memory coupled to the SoC, and displayed on a monitor coupled to the SoC. Alternatively, the SoC may be coupled to a network, either wired or wireless, and transmit the video streams to a remote location.</p>
<p id="p-0006" num="0005">A video multiplexor may be used to connect to multiple sources of video, such as a set of cameras. For example, two TVP5158, Four-Channel NTSC/PAL Video Decoders, available from Texas Instruments, may be coupled to eight cameras and provide a multiplexed stream of eight video streams to the SoC. The TVP5158 chip converts the analog video signals to digital data and multiplexes the data on a line-by-line basis or pixel-by-pixel basis and sends the line-multiplexed or pixel-multiplexed data to a video port interface on the SoC. This video port is capable of de-multiplexing the multiplexed streams and storing the de-multiplexed data to individual channel frame buffers in external memory. Typical implementations of capturing this data involve getting an interrupt from the Video port when each frame for a each channel is received.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">Particular embodiments in accordance with the invention will now be described, by way of example only, and with reference to the accompanying drawings:</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates a system on a chip (SoC) coupled to a set of video cameras that embodies the invention;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIGS. 2-4</figref> illustrate frame descriptor lists that are used by the SoC of <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating capture of multiple video streams;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 6</figref> is a timing diagram illustrating capture of four channels of video by the SoC of <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an SoC that may include an embodiment of the invention; and</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. 8-9</figref> illustrate data descriptors for the SoC of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0014" num="0013">Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION</heading>
<p id="p-0015" num="0014">Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency. In the following detailed description of embodiments of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid unnecessarily complicating the description.</p>
<p id="p-0016" num="0015">A system on a chip (SoC) may receive a stream of multiplexed video streams on a single input port. For example, eight cameras may be connected to a single Video Decoder (Analog-to-Digital, ADC) chip. This chip converts the analog video signals to digital data and multiplexes the data on a line-by-line basis or pixel-by-pixel basis and sends the line-multiplexed or pixel-multiplexed data to a video port interface on the SoC. This video port is capable of de-multiplexing the multiplexed streams and storing the de-multiplexed data to individual channel frame buffers in external memory.</p>
<p id="p-0017" num="0016">Embodiments of this invention capture these de-multiplexed frames in a resource efficient manner. In this description, the term &#x201c;resource&#x201d; refers to a number of interrupt lines needed and software overhead due to the number of interrupts per second that need to be handled.</p>
<p id="p-0018" num="0017">Previous implementations of capturing this data would involve getting an interrupt from the video input port each time a frame for a particular channel is received. When the frame complete interrupt is received, a current frame buffer is released to an application program for processing and a new frame buffer is provided to the video input port for capturing next frame. One interrupt line is needed for every channel. For example, for an SoC that has four video ports each capturing up to eight channels of video, thirty-two interrupt lines would be needed in order to identify the source of each completed capture frame. This is a very high resource requirement to have on the hardware.</p>
<p id="p-0019" num="0018">One solution to this interrupt resource problem would be to multiplex all frame complete signals to a single interrupt line. In this case, when an interrupt is received a software routine would need to check up to thirty-two register bit fields and identify the source of the generated interrupt. Thus, even though the hardware resource requirements are reduced with this approach, more software processing overhead is added.</p>
<p id="p-0020" num="0019">For example, when capturing thirty-two channels via four video ports at 60 fields/second, a total of 1920 interrupts per second would be received. Each interrupt involves processor context switching from an application to an interrupt context, thus interrupting the processing application more frequently and also adding context switching overhead. Frequent context switching will also cause code/data cache inefficiencies due to frequent switching of code and data and thus lower system performance. Embodiments of this invention reduce the hardware resources (interrupts) required and makes the hardware resource requirement finite no matter how many channels are being captured (32 or 64 or 128). Previous approaches linearly increase the hardware interrupt requirements as channels increase.</p>
<p id="p-0021" num="0020">Thus, previous approaches linearly increase the software overhead as the number of channels increase, for example from 32 to 64 or to 128 channels. An embodiment of the invention reduces the software overhead for interrupt context switching and makes the software overhead finite, regardless of how many channels are being captured. Thus, embodiments of the invention allow a system to be scalable from one channel to 128 or more channels, while keeping the hardware resource requirements and software overhead finite.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates a video system <b>100</b> that includes to a set of video cameras coupled to video multiplexors <b>110</b>(<b>1</b>)-<b>110</b>(<b>4</b>). For example, two TVP5158, Four-Channel NTSC/PAL Video Decoders, available from Texas Instruments, may be coupled to eight cameras and provide a multiplexed stream of eight video streams to SoC <b>120</b>. The TVP5158 chip converts the analog video signals to digital data and multiplexes the data on a line-by-line basis and sends the line-multiplexed data to one of four video port interfaces <b>122</b>(<b>1</b>)-<b>122</b>(<b>4</b>) on the SoC. Each video port is capable of de-multiplexing the multiplexed streams and storing the de-multiplexed data to individual channel frame buffers in memory subsystem <b>124</b>. Memory subsystem <b>124</b> may be located within SoC <b>120</b> or it may be partially or totally outside of SoC <b>120</b>. Various embodiments of memory subsystem <b>124</b> may include one or more different memory modules, which may have different access times. Application processor <b>130</b> is coupled to memory <b>124</b> and is notified as demultiplexed buffers are produced, as will be described in more detail below. Application processor <b>130</b> processes the various video streams using one or more processing applications to produce a composited image that is output to monitor <b>140</b>. Monitor <b>140</b> may be a single display device or may be an array of devices, depending on the configuration of video system <b>100</b>. Alternatively, the SoC may be coupled to a network, either wired or wireless, and transmit the video streams to a remote location.</p>
<p id="p-0023" num="0022">The various processing applications use known techniques for manipulating the video streams to size, position, filter, enhance, and compose the images. The processing applications may also use known techniques to perform movement detection, facial recognition, etc. The specific operation of the processing applications will not be described in detail herein.</p>
<p id="p-0024" num="0023">For example, SoC <b>120</b> may be selected from the TMS320DM816x family of digital media processors that is available from Texas Instruments (TI). The DM816x DaVinci&#x2122; Digital Media Processors are a highly-integrated, programmable platform that leverages TI's DaVinci&#x2122; technology to meet the processing needs of many types of applications, such as: Video Encode/Decode/Transcode/Transrate, Video Security, Video Conferencing, Video Infrastructure, Media Server, and Digital Signage, for example. Various aspects of the DM816x processor family is described in more detail in &#x201c;TMS320DM816x DaVinci Digital Media Processors Data Sheet,&#x201d; SPRS614, which is incorporated by reference herein.</p>
<p id="p-0025" num="0024">Direct memory access (DMA) engine <b>126</b> is coupled to the video ports and to memory <b>124</b> and may be programmed using descriptors to transfer frame data from the video ports to the frame buffers located in memory <b>124</b>. DMA engine uses several types of descriptors: data descriptor, control descriptor, and configuration descriptor.</p>
<p id="p-0026" num="0025">A data descriptor is a memory structure used to describe a desired memory transaction to or from a client. The descriptor at a minimum gives an address location for the memory portion of the transfer, the channel to use for this transaction and the size of the transaction. The data descriptor can also contain attributes to be passed down to the client or be linked to another data descriptor to form a larger frame from many smaller frames.</p>
<p id="p-0027" num="0026">In the descriptor based control mode a list is a group of descriptors that makes up a set of DMA transfers that need to be completed.</p>
<p id="p-0028" num="0027">The regular list is just a single list for which the DMA will execute each descriptor once and fire an interrupt when the list has completed. A regular list may contain any kind of descriptor and be of any size.</p>
<p id="p-0029" num="0028">Each video port <b>122</b>(<b>1</b>)-<b>122</b>(<b>4</b>) has the ability to operate on multiple capture output frame descriptors via a list. The list is a mechanism provided by DMA engine <b>126</b> to program multiple frame buffer addresses for different channels to the hardware without software intervention. For example, each descriptor includes a channel identification (chID) and a buffer address.</p>
<p id="p-0030" num="0029">Each video port has the ability to output a frame descriptor to a user specified address for completed or captured frames. The completed frame descriptors are specified by the processing application for use by the video port. Each video port also has the ability to switch this user specified completed descriptor write address and use another user specified completed descriptor address. Each video port also has the ability to provide a status of the number of completed frame descriptors each time the descriptor address switch is done.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIGS. 2-4</figref> illustrate frame descriptors that are used by the SoC of <figref idref="DRAWINGS">FIG. 1</figref>. A software application referred to herein as a &#x201c;capture driver&#x201d; controls DMA engine <b>126</b> for the purpose of transferring captured frames of video data from video ports <b>122</b>(<b>1</b>)-<b>122</b>(<b>4</b>) frame buffers in memory <b>124</b>. The capture driver requires a special arrangement of descriptors that is called a capture list manger (CLM). An initial list that is programmed by an application program that is being executed on SoC <b>120</b> for one channel is shown in <figref idref="DRAWINGS">FIG. 2</figref>. Descriptor <b>200</b> is a data descriptor for channel <b>0</b> that defines a frame buffer location in memory <b>124</b> for frame <b>0</b>. Descriptor <b>201</b> is a data descriptor for channel <b>0</b> that defines a frame buffer location in memory <b>124</b> for frame <b>1</b>. The application program writes the location of the list in memory <b>124</b> to a list address register in DMA engine <b>126</b>, followed by writing the size, type of list and list number to a list attribute register in DMA engine <b>126</b>.</p>
<p id="p-0032" num="0031">After starting DMA operation, the list manager (LM) consumes &#x201c;CH <b>0</b> Frame <b>0</b>&#x201d;, &#x201c;CH <b>0</b> Frame <b>1</b>&#x201d; data descriptors. The term &#x201c;consumes&#x201d; means the LM removes the descriptor from the list and then when data is received for frame <b>0</b> it will begin writing data at the location mentioned in the respective descriptor. After the list is submitted a timer is programmed to trigger after a defined period of time. The timer period is selected to be shorter than it would take to fill both frame buffers defined in the initial descriptor list.</p>
<p id="p-0033" num="0032">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, while the timer is running for the defined period of time, the video port is receiving data and writing to the frame buffer location indicated by &#x201c;CH<b>0</b> Frame <b>0</b>&#x201d; descriptor <b>200</b>. Once a complete frame is written to the frame buffer in memory the descriptor is said to be &#x201c;completed.&#x201d; It may also be referred to as an &#x201c;inbound&#x201d; descriptor. This inbound descriptor <b>300</b> is then written to a specific location in memory <b>124</b> that was specified by the application program. When the timer elapses, an interrupt fires and the application program goes and checks the completed descriptors. For every completed descriptor that it finds it programs a new descriptor with a new buffer address, such as new descriptor <b>302</b> that is a data descriptor for channel <b>0</b>, frame <b>2</b>. Channel <b>0</b> capture is still in progress using the descriptor for frame <b>1</b> that was programmed in the initial list by the application program. The software re-submits a modified list to DMA <b>126</b> with descriptor <b>302</b> for the next frame, frame <b>2</b>.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 4</figref> illustrates frame descriptors for multiple channels. The technique described in <figref idref="DRAWINGS">FIGS. 2 and 3</figref> for a single channel can be easily extended for multi-channels over a given port and over multiple ports. In this example, descriptors <b>400</b>, <b>401</b> are for channel <b>0</b>, descriptors <b>402</b>, <b>402</b> are for channel <b>1</b>, and descriptors <b>410</b>, <b>411</b> or for channel n. the number of channels in the descriptor list may be any amount supported by the hardware of SoC <b>120</b>. For the CLM, it does not matter whether the descriptors are for the same channel and same port or for different channels and/or ports. The only difference is in the time selected for the timer interrupt. For example, if the frame rate is 60 fps, then the timer may be set to trigger after 8 ms (16/2 ms, i.e., 120 interrupts per second). This allows a check of written descriptors every 8 ms to ensure that even though capture sources may be asynchronous with each other, the CLM still receives every frame and switches to a new buffer once a full buffer is received.</p>
<p id="p-0035" num="0034">Referring again to <figref idref="DRAWINGS">FIG. 1</figref>, DMA engine <b>126</b> provides several registers that are used by the application program to specify the location and size of descriptor lists, the location of completed descriptors, etc. Table 1 illustrates a status and control register that may be checked by the application program to determine the number of completed descriptors written since the last time the status register was cleared. This register also allows for locking and clearing the descriptor counts.</p>
<p id="p-0036" num="0035">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Descriptor status and control register</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="28pt" align="center"/>
<colspec colname="2" colwidth="63pt" align="left"/>
<colspec colname="3" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry>bits</entry>
<entry>Field name</entry>
<entry>description</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>31</entry>
<entry>Clear_desc_count</entry>
<entry>This will clear the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>DESCRIPTORS_WRITTEN</entry>
</row>
<row>
<entry/>
<entry/>
<entry>value and will also reset the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>CURRENT_DESCRIPTOR location to</entry>
</row>
<row>
<entry/>
<entry/>
<entry>DESCRIPTOR_TOP.</entry>
</row>
<row>
<entry>30:24</entry>
<entry>Reserved</entry>
</row>
<row>
<entry>23:16</entry>
<entry>Last_desc_written</entry>
<entry>The number of descriptors written</entry>
</row>
<row>
<entry/>
<entry/>
<entry>to the descriptor queue when</entry>
</row>
<row>
<entry/>
<entry/>
<entry>CLR_DESC_CNT was last cleared.</entry>
</row>
<row>
<entry>15:8&#x2002;</entry>
<entry>Reserved</entry>
</row>
<row>
<entry>7:0</entry>
<entry>Desc_written</entry>
<entry>The number of descriptors written to the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>descriptor queue since it was last cleared.</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating capture of multiple video streams by SoC <b>120</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The video port and DMA hardware capability may be used to implement an efficient multi-channel capture scheme. An initial set of two frame data information descriptors is programmed <b>502</b> for each channel via a hardware descriptor list as described above and illustrated in the example pseudo code of Table 2.</p>
<p id="p-0038" num="0037">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>pseudo-code for programming two frame</entry>
</row>
<row>
<entry>data descriptors for each channel</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>curListId = 0;</entry>
</row>
<row>
<entry/>
<entry>// make a new list at address &#x2018;listAddr[curListId]&#x2019;</entry>
</row>
<row>
<entry/>
<entry>HWLIST_init(listAddr[curListId]);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(chId=0; chId&#x3c;MAX_CH; chId++) {</entry>
</row>
<row>
<entry/>
<entry>// get 1st free buffer from application</entry>
</row>
<row>
<entry/>
<entry>bufferAddr = APP_getFreeBuffer(chId);</entry>
</row>
<row>
<entry/>
<entry>// add to list 1st buffer descriptor for a channel</entry>
</row>
<row>
<entry/>
<entry>HWLIST_addDesc(chId, bufferAddr);</entry>
</row>
<row>
<entry/>
<entry>// get 2nd free buffer from application</entry>
</row>
<row>
<entry/>
<entry>bufferAddr = APP_getFreeBuffer(chId);</entry>
</row>
<row>
<entry/>
<entry>// add to list 2st buffer descriptor for a channel</entry>
</row>
<row>
<entry/>
<entry>HWLIST_addDesc(chId, bufferAddr);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>curListId {circumflex over (&#x2009;)}= 1; // toggle between 0 and 1</entry>
</row>
<row>
<entry/>
<entry>/*</entry>
</row>
<row>
<entry/>
<entry>&#x2018;listAddr[curListId]&#x2019; is the user specified memory location</entry>
</row>
<row>
<entry/>
<entry>where completed descriptors will be output</entry>
</row>
<row>
<entry/>
<entry>for this HW list submission</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>HWLIST_setDescOutAddr(listAddr[curListId]);</entry>
</row>
<row>
<entry/>
<entry>/*</entry>
</row>
<row>
<entry/>
<entry>program the list to the HW</entry>
</row>
<row>
<entry/>
<entry>*/</entry>
</row>
<row>
<entry/>
<entry>HWLIST_submit( );</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0039" num="0038">Once the initial descriptor lists are programmed by an application program being executed by a processor within SoC <b>120</b>, the video ports <b>122</b>(<b>1</b>)-<b>122</b>(<b>4</b>) are started <b>504</b>.</p>
<p id="p-0040" num="0039">The video ports <b>122</b>(<b>1</b>)-<b>122</b>(<b>4</b>) will now start receiving <b>506</b> a stream of multiplexed video frames from video decoders <b>110</b>(<b>1</b>)-<b>110</b>(<b>4</b>) and captured video frame data will be output to the frame buffer addresses in memory <b>124</b> that were programmed into the data descriptors as illustrated by the pseudo-code in Table 2. When a complete frame is captured for a given channel, a completed frame descriptor will be output <b>508</b> to an application specified memory address, as illustrated by the pseudo-code in Table 2.</p>
<p id="p-0041" num="0040">The software will then periodically check <b>510</b> the status of completed frames provided by the video ports to identify how many completed data descriptors were output to the application specified memory address. Example pseudo-code illustrating this process as shown in Table 3. For each channel that has captured a frame, as indicated by the completed frame descriptor, a new descriptor will be provided by the application for the next frame, as illustrated in the pseudo-code of Table 3. In this manner, each channel maintains a descriptor list with two frame buffer locations.</p>
<p id="p-0042" num="0041">The completed descriptors are written as a list to a location defined by a &#x201c;write location&#x201d; register. Each time the interrupt occurs, the software may change the address in the write location register so that a separate list of completed descriptors is created for each interrupt. This may simplify the task of determining which channel's descriptors have been consumed.</p>
<p id="p-0043" num="0042">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>pseudo-code to periodically check for completed descriptors</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>// prepare for parsing recevied descriptors</entry>
</row>
<row>
<entry>HWLIST_init(listAddr[curListId]);</entry>
</row>
<row>
<entry>/*</entry>
</row>
<row>
<entry>Get number of descriptors written to listAddr[curListId]</entry>
</row>
<row>
<entry>*/</entry>
</row>
<row>
<entry>numDesc = HWLIST_getNumDesc( listAddr[curListId]);</entry>
</row>
<row>
<entry>curListId {circumflex over (&#x2009;)}= 1; // toggle between 0 and 1</entry>
</row>
<row>
<entry>/*</entry>
</row>
<row>
<entry>listAddr[curListId] is location where new set of subsequent descriptors</entry>
</row>
<row>
<entry>will be written.</entry>
</row>
<row>
<entry>*/</entry>
</row>
<row>
<entry>HWLIST_setDescOutAddr(listAddr[curListId]);</entry>
</row>
<row>
<entry>// all newly received descriptors</entry>
</row>
<row>
<entry>for(descId=0; descId&#x3c; numDesc; descId++) {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// parse received descriptor and extra channel ID and frame buffer</entry>
</row>
<row>
<entry/>
<entry>address</entry>
</row>
<row>
<entry/>
<entry>chId = HWLIST_parseDesc(&#x26;bufferAddr);</entry>
</row>
<row>
<entry/>
<entry>// provide received frame buffer address to application</entry>
</row>
<row>
<entry/>
<entry>APP_putFullBuffer(chId, bufferAddr);</entry>
</row>
<row>
<entry/>
<entry>// get next free buffer from application</entry>
</row>
<row>
<entry/>
<entry>bufferAddr = APP_getFreeBuffer(chId);</entry>
</row>
<row>
<entry/>
<entry>// replace in list new buffer descriptor for the channel</entry>
</row>
<row>
<entry/>
<entry>HWLIST_addDesc(chId, bufferAddr);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>/*</entry>
</row>
<row>
<entry>program the new list to the HW</entry>
</row>
<row>
<entry>*/</entry>
</row>
<row>
<entry>HWLIST_submit( );</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0044" num="0043">Status checking is repeated <b>512</b> at fixed intervals of approximately one half the maximum frame interval, MAX_FRAME_INTERVAL/2. Example, if the frame rate is 60 fps, i.e., a new frame is received every 16 ms, then status checking <b>510</b> is programmed to execute every 16/2=8 ms. This rate of checking guarantees that no frames are missed. A timer interrupt may be used as a trigger <b>512</b> to perform status checking <b>510</b>.</p>
<p id="p-0045" num="0044">Earlier interrupt driven video capture approaches were designed for lower channel density, typically one or two channels. When an interrupt driven implementation is scaled to 16 or 32 channel capture, there is a significant increase in software overhead in terms of interrupt context switching and hardware resource requirements in terms of number of interrupt lines that are required. Embodiments of the invention make both of these requirements finite and thus allows an application to scale from a low channel density to high channel density capture systems.</p>
<p id="p-0046" num="0045">Only one timer interrupt is needed to handle captured data from all channels. This requirement of one timer interrupt remains the same no matter how many channels are being captured in the system. The number of interrupts per second for 60 fps capture streams is 1000 ms/8 ms=125 interrupts per second. These interrupts per second remain the same no matter how many channels are being captured. Thus, the interrupt rate is approximately equal to twice the frame rate. This is a significant reduction of interrupts per second. For example, an earlier implementation having 32 channels would need 32*60=1920 interrupts per second. The improved completion status approach provides almost fifteen times fewer interrupts per second.</p>
<p id="p-0047" num="0046">Since the completed descriptors are checked periodically every 8 ms, it may happen that a frame has arrived but has not been released to the application, i.e worst case this technique may add an additional 8 ms latency to the video processing pipeline. This latency addition however, by itself, is not significant in most use case scenarios. For application where latency is critical, the latency may be reduced by reducing the periodic sampling interval from 8 ms to 4 ms, for example.</p>
<p id="p-0048" num="0047">Using this scheme, it is possible to receive source channels that are of different size and/or different frame rates, as long as the timer interrupt is set at half of the smallest source frame interval.</p>
<p id="p-0049" num="0048">Once a frame is captured and a completed descriptor has been written <b>508</b>, the application program may pass the completed descriptors to a processing application to perform <b>520</b> resizing, positioning, filtering, enhancements, and composition of the images. The processing applications may also use known techniques to perform movement detection, facial recognition, etc. The specific operation of the processing applications will not be described in detail herein. By using the descriptors to indicate where each frame buffer is stored in the memory system the frame data does not need to be moved. Each processing application simply passes the descriptor for the data to the next processing application that needs to access the frame data. Once the frame data has been completely processed and displayed, the memory area used for the frame buffer may be recycled.</p>
<p id="p-0050" num="0049">The processed video streams may then be displayed <b>530</b> on a monitor that may be a single display device or may be an array of devices, depending on the configuration of video system. Alternatively, the processed video stream may be coupled to a network, either wired or wireless, and transmitted to a remote location.</p>
<p id="p-0051" num="0050">While an initial descriptor list having two descriptors for each channel have been described herein, other embodiments of DMA engines may by configured to accept more than two descriptors per channel. In such embodiments, the interrupt timer period may be extended accordingly.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 6</figref> is a timing diagram illustrating capture of four channels of video by the SoC of <figref idref="DRAWINGS">FIG. 1</figref>. While four channels are illustrated here, the same sequence may be extended to as many channels as the hardware of SoC <b>120</b> supports. n<b>0</b>,n<b>1</b>,n<b>2</b> . . . n<b>10</b> are timer interrupts when the application program software checks for completed/captured descriptors, such as completed descriptor <b>300</b> illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. Each line <b>601</b>-<b>604</b> represents one channel, for which a video stream is being demultiplexed and transferred by DMA engine <b>126</b> into a frame buffer specified by a data descriptor. As each frame capture is completed, capture continues since two buffers are programmed during start up. On each interrupt n<b>0</b>-n<b>10</b>, a next buffer for capture is programmed for each channel in which one of the two buffers is filled and a callback is generated.</p>
<p id="p-0053" num="0052">For example, on interrupt n<b>3</b>, buffer B<b>1</b>, B<b>2</b>, B<b>3</b> are completed whereas B<b>4</b> capture is still in progress. Therefore, in response to interrupt n<b>3</b> a new descriptor will be programmed for channel <b>1</b>, channel <b>2</b> and channel <b>3</b> and added to the pending descriptor list.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an example SoC <b>700</b> that may include an embodiment of the invention. This example SoC is representative of one of a family of DaVinci&#x2122; Digital Media Processors, available from Texas Instruments, Inc. This example is described in more detail in &#x201c;TMS320DM816x DaVinci Digital Media Processors Data Sheet, SPRS614&#x201d;, March 2011 and is described briefly below.</p>
<p id="p-0055" num="0054">The Digital Media Processors (DMP) <b>700</b> is a highly-integrated, programmable platform that meets the processing needs of applications such as the following: Video Encode/Decode/Transcode/Transrate, Video Security, Video Conferencing, Video Infrastructure, Media Server, and Digital Signage, etc. DMP <b>700</b> may include multiple operating systems support, multiple user interfaces, and high processing performance through the flexibility of a fully integrated mixed processor solution. The device combines multiple processing cores with shared memory for programmable video and audio processing with a highly-integrated peripheral set on common integrated substrate.</p>
<p id="p-0056" num="0055">DMP <b>700</b> may include up to three high-definition video/imaging coprocessors (HDVICP2) <b>710</b>. Each coprocessor can perform a single 1080p60 H.264 encode or decode or multiple lower resolution or frame rate encodes/decodes. Multichannel HD-to-HD or HD-to-SD transcoding along with multi-coding are also possible.</p>
<p id="p-0057" num="0056">Programmability is provided by an ARM&#xae; Cortex&#x2122; A8 RISC CPU <b>720</b>, TI C674x VLIW floating-point DSP core <b>730</b>, and high-definition video/imaging coprocessors <b>710</b>. The ARM&#xae; allows developers to keep control functions separate from A/V algorithms programmed on the DSP and coprocessors, thus reducing the complexity of the system software. The ARM&#xae; Cortex&#x2122;-A8 32-bit RISC microprocessor with NEON&#x2122; floating-point extension includes: 32K bytes (KB) of instruction cache; 32 KB of data cache; 256 KB of L2 cache; 48 KB of Public ROM and 64 KB of RAM.</p>
<p id="p-0058" num="0057">A rich peripheral set provides the ability to control external peripheral devices and communicate with external processors. The peripheral set includes: HD Video Processing Subsystem (HDVPSS) <b>740</b>, which provides output of simultaneous HD and SD analog video and dual HD video inputs, and an array of peripherals <b>750</b> that may include various combinations of devices, such as: up to two Gigabit Ethernet MACs (10/100/1000 Mbps) with GMII and MDIO interface; two USB ports with integrated 2.0 PHY; PCIe&#xae; port x2 lanes GEN2 compliant interface, which allows the device to act as a PCIe&#xae; root complex or device endpoint; one 6-channel McASP audio serial port (with DIT mode); two dual-channel McASP audio serial ports (with DIT mode); one McBSP multichannel buffered serial port; three UARTs with IrDA and CIR support; SPI serial interface; SD/SDIO serial interface; two I2C master/slave interfaces; up to 64 General-Purpose I/O (GPIO); seven 32-bit timers; system watchdog timer; dual DDR2/3 SDRAM interface; flexible 8/16-bit asynchronous memory interface; and up to two SATA interfaces for external storage on two disk drives, or more with the use of a port multiplier.</p>
<p id="p-0059" num="0058">HD Video Processing Subsystem (HDVPSS) <b>740</b> includes four video input ports that operate in conjunction with DMA engine <b>790</b> to receive streams of multiplexed video data, demultiplex and capture video frames, and transfer the capture frames using descriptor lists as described in more detail above.</p>
<p id="p-0060" num="0059">DMP <b>700</b> may also include an SGX530 3D graphics engine <b>760</b> to enable sophisticated GUIs and compelling user interfaces and interactions. Additionally, DMP <b>700</b> has a complete set of development tools for both the ARM and DSP which include C compilers, a DSP assembly optimizer to simplify programming and scheduling, and a Microsoft&#xae; Windows&#xae; debugger interface for visibility into source code execution.</p>
<p id="p-0061" num="0060">The C674x DSP core <b>730</b> is the high-performance floating-point DSP generation in the TMS320C6000&#x2122; DSP platform. The C674x floating-point DSP processor uses 32 KB of L1 program memory and 32 KB of L1 data memory. Up to 32 KB of DP can be configured as program cache. The remaining is non-cacheable no-wait-state program memory. Up to 32 KB of L1D can be configured as data cache. The remaining is non-cacheable no-wait-state data memory. The DSP has 256 KB of L2 RAM, which can be defined as SRAM, L2 cache, or a combination of both. All C674x L3 and off-chip memory accesses are routed through an MMU.</p>
<p id="p-0062" num="0061">On-chip shared random access memory (RAM) <b>770</b> is accessible by ARM processor <b>720</b> and DSP processor <b>730</b> via system interconnect <b>780</b>. System interconnect includes an IPC mechanism for passing messages and initiating interrupts between ARM processor <b>720</b> and DSP processor <b>730</b>.</p>
<p id="p-0063" num="0062">The device package has been specially engineered with Via Channel&#x2122; technology. This technology allows 0.8-mm pitch PCB feature sizes to be used in this 0.65-mm pitch package, and substantially reduces PCB costs. It also allows PCB routing in only two signal layers due to the increased layer efficiency of the Via Channel&#x2122; BGA technology.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an output data descriptor for the SoC of <figref idref="DRAWINGS">FIG. 7</figref>. An outbound descriptor is used during capture to move data from the video port to memory. <figref idref="DRAWINGS">FIG. 9</figref> illustrates an input data descriptor for the SoC of <figref idref="DRAWINGS">FIG. 7</figref>. An inbound descriptor is used to move data from the memory to another location, such as for display.</p>
<p id="p-0065" num="0064">The descriptors of <figref idref="DRAWINGS">FIGS. 8-9</figref> are for example only. Other embodiments of the invention may use different descriptor arrangements and configurations.</p>
<heading id="h-0006" level="1">Other Embodiments</heading>
<p id="p-0066" num="0065">While the invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various other embodiments of the invention will be apparent to persons skilled in the art upon reference to this description. For example, while multiplexed video input streams are described, other embodiments of the invention may be used for systems that provide a number of non-multiplexed video streams that must be captured and managed in a manner similar to that described herein. For multiplexed systems, various configurations of multiplexors may be used, for example, 4:1, 8:1, 16:1, etc. that are compatible with a video input port of the Soc. DMA engines having different list processing features than described herein may be used as long as it provides a mechanism to add elements to a list that controls transfer of completed frame buffers.</p>
<p id="p-0067" num="0066">While an initial descriptor list having two descriptors for each channel have been described herein, other embodiments of DMA engines may by configured to accept more than two descriptors per channel. In such embodiments, the interrupt timer period may be extended accordingly.</p>
<p id="p-0068" num="0067">Embodiments of the system and methods described herein may be provided on any of several types of digital systems: digital signal processors (DSPs), general purpose programmable processors, application specific circuits (ASIC), or systems on a chip (SoC) such as combinations of a DSP and a reduced instruction set (RISC) processor together with various specialized accelerators. An ASIC or SoC may contain one or more megacells which each include custom designed functional circuits combined with pre-designed functional circuits provided by a design library. DMA engines that support linked list parsing and event triggers may be used for moving blocks of data.</p>
<p id="p-0069" num="0068">Embodiments of the invention may be used for systems in which multiple monitors are used, such as a computer with two or more monitors. Embodiments of the system may be used for video surveillance systems, conference systems, etc. that may include multiple cameras or other input devices and/or multiple display devices. Embodiments of the invention may be applied to more than two processors in an SoC.</p>
<p id="p-0070" num="0069">A stored program in an onboard or external (flash EEP) ROM or FRAM may be used to implement aspects of the video processing. Analog-to-digital converters and digital-to-analog converters provide coupling to the real world, modulators and demodulators (plus antennas for air interfaces) can provide coupling for waveform reception of video data being broadcast over the air by satellite, TV stations, cellular networks, etc or via wired networks such as the Internet.</p>
<p id="p-0071" num="0070">The techniques described in this disclosure may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the software may be executed in one or more processors, such as a microprocessor, application specific integrated circuit (ASIC), field programmable gate array (FPGA), or digital signal processor (DSP). The software that executes the techniques may be initially stored in a computer-readable medium such as compact disc (CD), a diskette, a tape, a file, memory, or any other computer readable storage device and loaded and executed in the processor. In some cases, the software may also be sold in a computer program product, which includes the computer-readable medium and packaging materials for the computer-readable medium. In some cases, the software instructions may be distributed via removable computer readable media (e.g., floppy disk, optical disk, flash memory, USB key), via a transmission path from computer readable media on another digital system, etc.</p>
<p id="p-0072" num="0071">Certain terms are used throughout the description and the claims to refer to particular system components. As one skilled in the art will appreciate, components in digital systems may be referred to by different names and/or may be combined in ways not shown herein without departing from the described functionality. This document does not intend to distinguish between components that differ in name but not function. In the previous discussion and in the claims, the terms &#x201c;including&#x201d; and &#x201c;comprising&#x201d; are used in an open-ended fashion, and thus should be interpreted to mean &#x201c;including, but not limited to . . . &#x201d; Also, the term &#x201c;couple&#x201d; and derivatives thereof are intended to mean an indirect, direct, optical, and/or wireless electrical connection. Thus, if a first device couples to a second device, that connection may be through a direct electrical connection, through an indirect electrical connection via other devices and connections, through an optical electrical connection, and/or through a wireless electrical connection.</p>
<p id="p-0073" num="0072">Although method steps may be presented and described herein in a sequential fashion, one or more of the steps shown and described may be omitted, repeated, performed concurrently, and/or performed in a different order than the order shown in the figures and/or described herein. Accordingly, embodiments of the invention should not be considered limited to the specific ordering of steps shown in the figures and/or described herein.</p>
<p id="p-0074" num="0073">It is therefore contemplated that the appended claims will cover any such modifications of the embodiments as fall within the true scope and spirit of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for capturing video frames from a plurality of video channels, the method comprising:
<claim-text>forming a list of a least two descriptors for each of the plurality of video channels in a memory accessible to a direct memory access (DMA) engine, wherein a first descriptor and a second descriptor are programmed for each video channel to define a storage location for a sequential frame of video data for the channel;</claim-text>
<claim-text>capturing video data from the plurality of video channels, wherein for each video channel, video frames are received at a frame rate for that video channel;</claim-text>
<claim-text>storing captured video data in a location in a memory of the first descriptor programmed for the corresponding video channel;</claim-text>
<claim-text>upon storing video data of a complete video frame of a corresponding video channel updating the second descriptor programmed for the corresponding video channel to indicate storing a complete frame of the corresponding video channel;</claim-text>
<claim-text>periodically checking status of second descriptors for each of the plurality of video channels to identify video channels having a stored complete frame of video data, the periodicity less often than once per each completed frame of the plurality of video channels; and</claim-text>
<claim-text>selecting the identified stored complete video frames for additional data processing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:
<claim-text>said step of updating the second descriptors comprises:</claim-text>
<claim-text>interrupting a control processor at a periodic rate.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the periodic rate is higher than a maximum frame rate for the plurality of video channels.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the periodic rate is approximately equal to twice a maximum frame rate for the plurality of video channels.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. An apparatus for capturing video frames from a plurality of video channels, the apparatus comprising:
<claim-text>a video port configured to receive the plurality of video channels, wherein the video port is configured to capture sequential video data from each of the plurality of video channels;</claim-text>
<claim-text>a memory subsystem coupled to the input port; and</claim-text>
<claim-text>a direct memory access (DMA) engine coupled to the video port and to the memory subsystem, wherein the DMA engine is configured to:
<claim-text>transfer captured sequential video data to a designated frame buffer location in the memory subsystem in accordance with a first data description programmed for the corresponding video channel;</claim-text>
<claim-text>upon storing video data of a complete video frame of a corresponding video channel updating a second descriptor programmed for the corresponding video channel to indicate storing a complete frame of the corresponding video channel;</claim-text>
<claim-text>periodically checking status of second descriptors for each of the plurality of video channels to identify video channels having a stored complete frame of video data, the periodicity less often than once per each completed frame of the plurality of video channels; and</claim-text>
<claim-text>transferring the identified stored complete video frames.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The apparatus of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>a processor operable to process application software stored in the memory subsystem; and an interrupt generator coupled to the processor configured to periodically interrupt the processor; and</claim-text>
<claim-text>wherein the application software is configured to:
<claim-text>create the initial first and second data descriptors for each video channel; and</claim-text>
<claim-text>update the second descriptors in response to each periodic interrupt.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the periodic rate is higher than a maximum frame rate for the plurality of video channels.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the periodic rate is approximately equal to twice a maximum frame rate for the plurality of video channels.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref> being comprised on a single integrated circuit chip. </claim-text>
</claim>
</claims>
</us-patent-grant>

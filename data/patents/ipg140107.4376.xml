<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625448-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625448</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13028513</doc-number>
<date>20110216</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>238</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>26</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370252</main-classification>
<further-classification>370249</further-classification>
<further-classification>709222</further-classification>
</classification-national>
<invention-title id="d2e53">Method and system for validating network traffic classification in a blade server</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>8295275</doc-number>
<kind>B2</kind>
<name>Mann</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370389</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2011/0019574</doc-number>
<kind>A1</kind>
<name>Malomsoky et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370252</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2011/0080830</doc-number>
<kind>A1</kind>
<name>Ko et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2012/0017265</doc-number>
<kind>A1</kind>
<name>Twitchell, Jr.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>International Report on Patentability issued in PCT/US2012/020746 mailed Aug. 21, 2013 (7 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>370241</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370248</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370249</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370252</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370254</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370255</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370351</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370389</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370390</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370392</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370412</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709221</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709228</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709230</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>15</number-of-drawing-sheets>
<number-of-figures>15</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120207039</doc-number>
<kind>A1</kind>
<date>20120816</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Srinivasan</last-name>
<first-name>Arvind</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dignum</last-name>
<first-name>Marcelino M.</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Srinivasan</last-name>
<first-name>Arvind</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Dignum</last-name>
<first-name>Marcelino M.</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Osha Liang LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Pham</last-name>
<first-name>Chi</first-name>
<department>2471</department>
</primary-examiner>
<assistant-examiner>
<last-name>Huang</last-name>
<first-name>Weibin</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method for validating network traffic routing within a blade chassis, involving generating a first packet for sending to a first packet receiver by a first route; inserting a first session identifier into a payload of the first packet, where the first session identifier identifies a first session of the first packet receiver; sending the first packet to a packet classifier; sending a first copy packet to a first expect queue, where the first copy packet is a duplicate of the first packet; receiving the first packet by the packet classifier; classifying the first packet by the packet classifier to obtain a first classified packet; extracting the first session identifier from the first classified packet to obtain a first extracted session identifier; and determining whether the first extracted session identifier matches the first session identifier.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="154.09mm" wi="105.92mm" file="US08625448-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="222.93mm" wi="159.85mm" orientation="landscape" file="US08625448-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="130.22mm" wi="79.33mm" orientation="landscape" file="US08625448-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="220.13mm" wi="165.95mm" orientation="landscape" file="US08625448-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="188.89mm" wi="130.22mm" file="US08625448-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="154.94mm" wi="107.70mm" file="US08625448-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="182.71mm" wi="104.99mm" file="US08625448-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="185.76mm" wi="168.99mm" orientation="landscape" file="US08625448-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="232.92mm" wi="166.71mm" orientation="landscape" file="US08625448-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="231.39mm" wi="174.33mm" orientation="landscape" file="US08625448-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="202.18mm" wi="174.58mm" orientation="landscape" file="US08625448-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="199.98mm" wi="177.04mm" orientation="landscape" file="US08625448-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="201.51mm" wi="172.38mm" orientation="landscape" file="US08625448-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="206.84mm" wi="174.41mm" orientation="landscape" file="US08625448-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="203.62mm" wi="166.29mm" orientation="landscape" file="US08625448-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="194.73mm" wi="149.61mm" file="US08625448-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Conventionally, in the computer-related arts, a network is an arrangement of physical computer systems configured to communicate with each other. In some cases, the physical computer systems may include virtual machines, which may also be configured to interact with the network (i.e., communicate with other physical computers and/or virtual machines in the network). Many different types of networks exist, and a network may be classified based on various aspects of the network, such as scale, connection method, functional relationship of computer systems in the network, and/or network topology.</p>
<p id="p-0003" num="0002">Regarding connection methods, a network may be broadly categorized as wired (i.e., using a tangible connection medium such as Ethernet cables) or wireless (i.e., using an intangible connection medium such as radio waves). Different connection methods may also be combined in a single network. For example, a wired network may be extended to allow devices to connect to the network wirelessly. However, core network components such as routers, switches, and servers are generally connected using physical wires.</p>
<p id="p-0004" num="0003">To create a wired network, computer systems must be physically connected to each other. That is, the ends of physical wires (e.g., Ethernet cables) must be physically connected to network interface cards in the computer systems forming the network. To reconfigure the network (e.g., to replace a server or change the network topology), one or more of the physical wires must be disconnected from a computer system and connected to a different computer system. Ethernet is defined within the Institute of Electrical and Electronics Engineers (IEEE) 802.3 standards, which are supervised by the IEEE 802.3 Working Group.</p>
<p id="p-0005" num="0004">Network traffic may be transmitted over a network (e.g., the Internet) from a sending system to a receiving system (e.g., from one computer system to another computer system). Each system may be configured with a physical network interface card (PNIC). A PNIC is a physical hardware device found in a typical computer system that may be used to service one or more network connections by sending and receiving network traffic. Typically, network traffic is transmitted in the form of data packets, where each data packet includes a header and a payload. The header contains information regarding the source address, destination address, size, transport protocol used to transmit the data packet, and various other information associated with the data packet. The payload contains the actual data to be transmitted to the receiving system.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">In general, in one aspect, the invention relates to a computer readable storage medium having computer readable program code embodied therein, the computer readable program code adapted to, when executed by a processor, implement a method. The method includes generating a first packet for sending to a first packet receiver by a first route; inserting a first session identifier into a payload of the first packet, where the first session identifier identifies a first session of the first packet receiver; sending the first packet to a packet classifier; sending a first copy packet to a first expect queue, where the first copy packet is a duplicate of the first packet; receiving the first packet by the packet classifier; classifying the first packet by the packet classifier to obtain a first classified packet; extracting the first session identifier from the first classified packet to obtain a first extracted session identifier; and determining whether the first extracted session identifier matches the first session identifier.</p>
<p id="p-0007" num="0006">In general, in one aspect, the invention relates to a system. The system includes a chassis interconnect, a physical network interface, and a first blade and a second blade communicatively coupled with each other via the chassis interconnect. The first blade and the second blade share the physical network interface. The first blade includes a first packet receiver, and the second blade includes a second packet receiver. The system also includes a validation module configured to generate the first packet for sending to the first packet receiver by a first route; insert a first session identifier into a payload of the first packet, where the first session identifier identifies a first session of the first packet receiver; send a first expect packet to a first expect queue, where the first expect packet is a duplicate of the first packet; send the first packet to a classification engine; receive a first classified packet from the classification engine; extract the first session identifier from the first classified packet to obtain a first extracted session identifier; and determine whether the first extracted session identifier matches the first session identifier.</p>
<p id="p-0008" num="0007">In general, in one aspect, the invention relates to a system. The system includes a hardware processor. The system also includes a validation module, executed by the hardware processor, and configured to generate a first packet for sending to a first packet receiver by a first route; insert a first session identifier into a payload of the first packet, where the first session identifier identifies a first session of the first packet receiver; send the first packet to a classification engine; receive a first classified packet from the classification engine, where the first classified packet is sent by the classification engine in response to the first packet; send a first expect packet to a first expect queue, where the first expect packet is a duplicate of the first packet; extract the first session identifier from the first classified packet to obtain a first extracted session identifier; and determine whether the first extracted session identifier matches the first session identifier.</p>
<p id="p-0009" num="0008">Other aspects of the invention will be apparent from the following description and the appended claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIGS. 1A-1B</figref> show examples of a system, in accordance with one or more embodiments of the invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> shows a diagram of a data flow, in accordance with one or more embodiments of the invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> shows a flowchart, in accordance with one or more embodiments of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> shows a flowchart, in accordance with one or more embodiments of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart, in accordance with one or more embodiments of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> shows a flowchart, in accordance with one or more embodiments of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. 7A-7G</figref> show an example, in accordance with one or more embodiments of the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> shows a diagram of a computer system, in accordance with one or more embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.</p>
<p id="p-0019" num="0018">In the following detailed description of embodiments of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid unnecessarily complicating the description.</p>
<p id="p-0020" num="0019">In general, embodiments of the invention provide a system and method for validating network traffic routing within a blade chassis. Specifically, embodiments of the invention provide a system and method for performing validation testing of the routing and classification of network traffic (e.g., network packets) within a blade chassis subject to a system reset (e.g., a function level reset, a blade level reset, etc.). In one or more embodiments, a session identifier may be assigned to each session of a packet receiver, and may be embedded in the payload of test packets sent to the packet receiver. In the event of a system reset, the session identifier may be used to identify packets which were sent to now-inactive sessions of the packet receiver. Further, in one or more embodiments, a copy of each test packet may be stored in an expect queue, and may be used to validate the test packet when the test packet is received by the packet receiver.</p>
<p id="p-0021" num="0020">Embodiments of the invention involve the use of one or more physical network interface cards (PNICs) in accordance with PCI-SIG&#xae; SR-IOV (single-root) and PCI-SIG&#xae; MR-IOV (multi-root) specifications. PCI-SIG&#xae; and PCI&#x2122; are trademarks of the Peripheral Component Interconnect-Special Interest Group (PCI-SIG) of Beaverton, Oreg. Under the PCI-SIG&#xae; SR-IOV specification, a PCI&#x2122;-compliant PNIC (i.e., a single root) is defined as having at least one network function used in the configuration and management of the PNIC. In one or more embodiments of the invention, a network function may be a physical or virtual function used to manage data movement for the PNIC. In one or more embodiments of the invention, a physical function is a full PCI&#x2122; function used for configuring and managing a PNIC. In one or more embodiments of the invention, a virtual function is a lightweight PCI&#x2122; function used for data movement of network traffic sent and received by the PNIC. While invoking a physical function enables control of a PNIC, invoking a virtual function does not provide control of a PNIC. Accordingly, in accordance with the PCI-SIG&#xae; SR-IOV specification, embodiments of the invention may use a network function to implement a network function mapping between a virtual machine executing on a host computer system and the PCI&#x2122;-compliant PNIC operatively connected to the host computer system. Under the PCI-SIG&#xae; MR-IOV specification, a number of PCI&#x2122;-compliant PNICs (i.e., multiple roots) are operative in tandem with one or more virtual machines executing for a host computer system.</p>
<p id="p-0022" num="0021">Using the network function mapping, a datapath may be implemented between the virtual machine and the PNIC such that the virtual machine is provided with direct hardware access to the PNIC. Accordingly, the virtual machine may use the network function to directly transfer network traffic (i.e., data packets) between the virtual machine and the PNIC. Said another way, the network traffic is transferred between the virtual machine and the PNIC without additional processing by any intermediate layers (e.g., hypervisor, host operating system).</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1A</figref> shows an example of a system, in accordance with one or more embodiments of the invention. Specifically, <figref idref="DRAWINGS">FIG. 1A</figref> shows components for a blade chassis (<b>100</b>) in accordance with one or more embodiments of the invention. In one or more embodiments of the invention, the blade chassis (<b>100</b>) may be an IBM BladeCenter&#xae; chassis, an HP BladeSystem enclosure by Hewlett Packard Inc., or any other type of blade chassis. BladeCenter&#xae; is a registered trademark of International Business Machines, Inc. (IBM), headquartered in Armonk, N.Y. As shown in <figref idref="DRAWINGS">FIG. 1A</figref>, in one or more embodiments of the invention, the blade chassis (<b>100</b>) may include a physical network interface (PNIC) (<b>101</b>), a chassis interconnect (<b>112</b>), multiple blades (e.g., blade <b>1</b> (<b>114</b>), blade <b>2</b> (<b>126</b>)) operatively connected by the chassis interconnect (<b>112</b>), and a network express manager (NEM) (<b>108</b>). The NEM (<b>108</b>) is described below with reference to <figref idref="DRAWINGS">FIG. 1B</figref>.</p>
<p id="p-0024" num="0023">In one or more embodiments of the invention, the PNIC (<b>101</b>) is a hardware device operatively connected to the blade chassis (<b>100</b>). Specifically, the PNIC (<b>101</b>) is configured to send and receive network traffic transmitted to and from the blade chassis (<b>100</b>) in the form of data packets. The PNIC (<b>101</b>) may include one or more network ports (e.g., Ethernet ports) and provide an interface between the blade chassis (<b>100</b>) and a network (<b>104</b>) (e.g., a local area network, a wide area network, the Internet, etc.). As such, the PNIC (<b>101</b>) may service a network connection by transferring the inbound and outbound network traffic associated with the network connection. In one or more embodiments of the invention, the blade chassis (<b>100</b>) may be connected to multiple networks, for example using multiple network ports. In one or more embodiments of the invention, there may be a single PNIC (<b>101</b>) for the blade chassis (<b>100</b>) (i.e., a single root blade chassis configuration). Alternatively, in one or more other embodiments of the invention, there may be multiple PNICs (<b>101</b>) for the blade chassis (<b>100</b>) (i.e., a multi-root blade chassis configuration).</p>
<p id="p-0025" num="0024">In one or more embodiments of the invention, the PNIC (<b>101</b>) may be a PCI&#x2122;-compliant PNIC, such that the PNIC (<b>101</b>) is configured with one or more network functions that may be used in the configuring and managing of the PNIC (<b>101</b>). For example, in one or more embodiments of the invention, a network function may be a physical or virtual function used to manage data movement for the PNIC (<b>101</b>). Specifically, in accordance with the PCI-SIG&#xae; SR-IOV and MR-IOV specifications, one or more embodiments of the invention may use a network function to implement a network function mapping between a virtual machine (<b>116</b>, <b>128</b>) executing on a blade (<b>114</b>, <b>126</b>) and the PCI&#x2122;-compliant PNIC operatively connected to the blade chassis.</p>
<p id="p-0026" num="0025">In one or more embodiments of the invention, a blade (<b>114</b>, <b>126</b>) refers to a computer system included in a blade chassis (e.g., the blade chassis (<b>100</b>) shown in <figref idref="DRAWINGS">FIG. 1A</figref>). In one or more embodiments of the invention, a blade (<b>114</b>, <b>126</b>) may include one or more processors and associated memory. In one or more embodiments of the invention, a blade (<b>114</b>, <b>126</b>) may also include a storage device (e.g., a hard drive) and numerous other elements and functionalities typical of modern computer systems such as a keyboard, a mouse, a monitor, and/or other input/output means. In one or more embodiments of the invention, a blade (<b>114</b>, <b>126</b>) may include fewer components than a stand-alone computer system or a conventional server. Alternatively, in one or more other embodiments of the invention, a fully-featured stand-alone computer system or conventional server may be used instead of (or in combination with) blades (<b>114</b>, <b>126</b>) in a blade chassis.</p>
<p id="p-0027" num="0026">In one or more embodiments of the invention, a blade (<b>114</b>, <b>126</b>) includes a host operating system (not shown) configured to execute one or more virtual machines (e.g., Virtual Machine <b>1</b> (<b>116</b>), Virtual Machine <b>2</b> (<b>128</b>)). In one or more embodiments, a virtual machine (<b>116</b>, <b>128</b>) is an isolated software execution environment hosted on a host operating system (not shown). Specifically, in accordance with embodiments of the invention, a virtual machine (<b>116</b>, <b>128</b>) is configured to simulate the execution of a process as if the process were executing on a physical computing device.</p>
<p id="p-0028" num="0027">In one or more embodiments of the invention, one or more executable software processes may be hosted on a virtual machine (<b>116</b>, <b>128</b>) for a blade (<b>114</b>, <b>126</b>). For example, as shown in <figref idref="DRAWINGS">FIG. 1A</figref>, each virtual machine (<b>116</b>, <b>128</b>) may host an application (<b>124</b>, <b>134</b>), a virtual network protocol stack (<b>122</b>, <b>132</b>), a virtual network interface card (VNIC) (<b>120</b>, <b>130</b>), a network function driver (<b>118</b>, <b>119</b>), and a network function (<b>105</b>, <b>106</b>).</p>
<p id="p-0029" num="0028">In one or more embodiments of the invention, the application (<b>124</b>, <b>134</b>) may be any user-level or kernel-level software process. In one or more embodiments of the invention, execution of the application (<b>124</b>, <b>134</b>) may result in the generation and sending of network traffic from a virtual machine (<b>116</b>, <b>128</b>) over the network (<b>104</b>). Likewise, the application (<b>124</b>, <b>134</b>) may be a designated recipient for network traffic sent to and received by the virtual machine (<b>116</b>, <b>128</b>) over the network (<b>104</b>). Examples of user-level applications include, but are not limited to, e-mail client software, web browsing software, or any other desktop software application. Examples of kernel-level applications include, but are not limited to, a guest operating system (not shown).</p>
<p id="p-0030" num="0029">The guest operating system (not shown) executing on the virtual machine (<b>116</b>, <b>128</b>) may or may not be the same as a host operating system (not shown) for the blade (<b>114</b>, <b>126</b>). Further, in one or more embodiments of the invention, the host operating system (not shown) for a blade (<b>114</b>, <b>126</b>) may serve as a host to multiple virtual machines (not shown). In such embodiments, each virtual machine includes a separate instance of a guest operating system. For example, the Xen&#xae; virtualization project allows for multiple guest operating systems executing in a host operating system. Xen&#xae; is a trademark overseen by the Xen Project Advisory Board. Further, in accordance with one or more embodiments of the invention, the virtual machines may include many different types of functionality, such as a switch, a router, a firewall, a load balancer, an application server, any other type of network-enabled service, or any combination thereof.</p>
<p id="p-0031" num="0030">In one or more embodiments of the invention, the virtual network protocol stack (<b>122</b>, <b>132</b>) may include an Internet Protocol (IP) layer, inbound and outbound virtual serialization queues, and a transport layer (not shown). The IP layer, for example, is configured to perform IP level processing for both inbound and outbound data packets. The inbound virtual serialization queue is a queue data structure configured to receive data packets from the IP layer prior to the data packets being processed by the transport layer. The transport layer may be configured to process inbound and outbound data packets in accordance with any transport layer protocols (e.g., Transmission Control Protocol (TCP), User Datagram Protocol (UDP), Datagram Congestion Control Protocol (DCCP), Fiber Channel Protocol (FCP), Stream Control Transmission Protocol (SCTP), Structured Stream Transport (SST), etc.). The outbound virtual serialization queue is a queue data structure configured to receive data packets from the VNIC (<b>120</b>, <b>130</b>) with which the virtual network stack (<b>122</b>, <b>132</b>) is associated.</p>
<p id="p-0032" num="0031">In one or more embodiments of the invention, the VNIC (<b>120</b>, <b>130</b>) performs Media Access Control (MAC) layer functionality. In such embodiments of the invention, the VNIC (<b>120</b>, <b>130</b>) may be configured to send and receive network traffic (i.e., data packets) between the virtual machine (<b>116</b>, <b>128</b>) and the PNIC (<b>101</b>) operatively connected to the blade chassis (<b>100</b>). Accordingly, in such embodiments of the invention, the VNIC (<b>120</b>, <b>130</b>) includes the functionality of a PNIC, and appears as a PNIC to the virtual machine (<b>116</b>, <b>128</b>) associated with the VNIC (<b>120</b>, <b>130</b>).</p>
<p id="p-0033" num="0032">In one or more embodiments of the invention, each virtual machine (<b>116</b>, <b>128</b>) may be associated with an arbitrary number of VNICs, thereby providing increased flexibility in the types of networking functionality available to the virtual machines (<b>116</b>, <b>128</b>). For example, the virtual machine (<b>116</b>, <b>128</b>) may use a first VNIC for incoming network traffic and a second VNIC for outgoing network traffic. VNICs in accordance with one or more embodiments of the invention are described further in: (i) commonly owned U.S. patent application Ser. No. 11/489,942, entitled &#x201c;Multiple Virtual Network Stack Instances using Virtual Network Interface Cards,&#x201d; in the names of Nicolas G. Droux, Erik Nordmark, and Sunay Tripathi; and (ii) commonly owned U.S. Pat. No. 7,613,132, entitled &#x201c;Method and System for Controlling Virtual Machine Bandwidth&#x201d; in the names of Sunay Tripathi, Tim P. Marsland, and Nicolas G. Droux. The contents of the aforementioned applications are hereby incorporated by reference in their entirety.</p>
<p id="p-0034" num="0033">In one or more embodiments of the invention, the network function driver (<b>118</b>, <b>119</b>) is an interface configured to provide the virtual machine (<b>116</b>, <b>128</b>) with direct access and control to the PNIC (<b>101</b>) operatively connected to the blade chassis (<b>100</b>). Specifically, as discussed above, the network function driver (<b>118</b>, <b>119</b>) uses the network function (<b>105</b>, <b>106</b>) mapped between the virtual machine (<b>116</b>, <b>128</b>) and the PNIC (<b>101</b>) to directly transfer network traffic (i.e., data packets) between the virtual machine (<b>116</b>, <b>128</b>) and the PNIC (<b>101</b>).</p>
<p id="p-0035" num="0034">As shown in <figref idref="DRAWINGS">FIG. 1A</figref>, each network function (<b>105</b>, <b>106</b>) may include a packet receiver (<b>160</b>, <b>165</b>). In one or more embodiments, each packet receiver (<b>160</b>, <b>165</b>) may be a combination of hardware and software DMA contexts configured to receive packets sent to the corresponding network function (<b>105</b>, <b>106</b>).</p>
<p id="p-0036" num="0035">In one or more embodiments of the invention, the chassis interconnect (<b>112</b>) may be used to connect one or more blades (<b>114</b>, <b>126</b>) with shared computing resources (e.g., one or more PNICs, input/output means including such as a keyboard, mouse, or display monitor, and other computer components/peripherals). For example, as shown in <figref idref="DRAWINGS">FIG. 1A</figref>, the chassis interconnect (<b>112</b>) connects multiple blades (<b>114</b>, <b>126</b>) with shared computing resources including the PNIC (<b>101</b>). Further, in one or more embodiments of the invention, the chassis interconnect (<b>112</b>) is used to connect and thereby enable communication among multiple blades (<b>114</b>, <b>126</b>). In one or more embodiments of the invention, the connectivity provided by the chassis interconnect (<b>112</b>), as described above, is achieved without requiring use of traditional network wires (e.g., Ethernet cables).</p>
<p id="p-0037" num="0036">In one or more embodiments of the invention, the chassis interconnect (<b>112</b>) may be a Peripheral Component Interface Express (PCI-E) backplane. In one or more embodiments of the invention, the chassis interconnect (<b>112</b>) may include a number of PCI-E endpoints (not shown). Accordingly, in such embodiments, a PCI-E endpoint (not shown) is used to connect one or more blades (<b>114</b>, <b>126</b>) with the blade chassis (<b>100</b>) such that the blades (<b>114</b>, <b>126</b>) may be configured to communicate (e.g., with another blade, with a shared resource operatively connected to the blade chassis) using PCI-E endpoints (i.e., as opposed to using traditional network wires). Those skilled in the art will appreciate that other connection technologies may be used to connect one or more blades (<b>114</b>, <b>126</b>) to a blade chassis (<b>100</b>).</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 1B</figref> shows components included in the NEM (<b>108</b>), in accordance with one or more embodiments of the invention. In one or more embodiments, the NEM (<b>108</b>) may be configured to manage internal communications between multiple blades (<b>114</b>, <b>126</b>) in addition to internal communications between a blade (<b>114</b>, <b>126</b>) and a PNIC (<b>101</b>). As such, the NEM (<b>108</b>) is configured to manage the routing of network traffic between the various components operatively connected to a blade chassis. In one or more embodiments of the invention, the network express manager (<b>108</b>) may be any combination of hardware, software, and/or firmware including executable logic for performing the described network routing functions.</p>
<p id="p-0039" num="0038">In one or more embodiments of the invention, the NEM (<b>108</b>) includes a virtual switching table (not shown). The virtual switching table may include one or more mappings, with each mapping associating a VNIC identifier for a VNIC (<b>120</b>, <b>130</b>) with a VNIC location in the chassis interconnect (<b>112</b>). In one or more embodiments, where the chassis interconnect (<b>112</b>) is a PCI-E backplane, the VNIC identifier for a VNIC (<b>120</b>, <b>130</b>) may be an Internet Protocol (IP) addresses, and the VNIC location may be a PCI-E endpoint associated with a blade (<b>114</b>, <b>126</b>) upon which the VNIC (<b>120</b>, <b>130</b>) is executing.</p>
<p id="p-0040" num="0039">In one or more embodiments of the invention, the management of the virtual switching table by the NEM (<b>108</b>) facilitates the creation of a virtual network path. Accordingly, in such embodiments of the invention, virtual machines (<b>116</b>, <b>128</b>) located in different blades (<b>114</b>, <b>126</b>) may be interconnected to form an arbitrary virtual network topology, where the VNICs (<b>120</b>, <b>130</b>) associated with each virtual machine (<b>116</b>, <b>128</b>) do not need to know the physical locations of other VNICs. Further, if a virtual machine (<b>116</b>, <b>128</b>) is migrated from one blade to another, the virtual network topology may be preserved merely by updating the virtual switching table to reflect the a new physical location for the VNIC (i.e., a different PCI-E endpoint).</p>
<p id="p-0041" num="0040">The virtual switching table may include one or more mappings, with each mapping associating a VNIC identifier for a VNIC (<b>120</b>, <b>130</b>) with a VNIC location in the chassis interconnect (<b>112</b>). In one or more embodiments, where the chassis interconnect (<b>112</b>) is a PCI-E backplane, the VNIC identifier for a VNIC (<b>120</b>, <b>130</b>) may be an Internet Protocol (IP) addresses, and the VNIC location may be a PCI-E endpoint associated with a blade (<b>114</b>, <b>126</b>) upon which the VNIC (<b>120</b>, <b>130</b>) is executing. In one or more embodiments, the VNIC identifiers are not used directly by the NEM (<b>108</b>), but rather are used indirectly via the network functions (<b>105</b>, <b>106</b>).</p>
<p id="p-0042" num="0041">In one or more embodiments, the NEM (<b>108</b>) may include one or more classification tables (<b>110</b>). In one or more embodiments, a first classification table (<b>110</b>) may be configured to store a first type of mapping that associates a Layer 2 (L2) address with a network function. In one or more embodiments, a L2 address is a data link layer address in accordance with the Open Systems Interconnection (OSI) model. In one or more embodiments, a second classification table (<b>110</b>) may be configured to store a second type of mapping that associates a network function with a configuration. In one or more embodiments, a third classification table (<b>110</b>) may be configured to store a third type of mapping that associates a key with a policy. In one or more embodiments, the classification tables (<b>110</b>) may be stored by the NEM (<b>108</b>) using any persistent storage device and data format. For example, in one or more embodiments, the classification tables (<b>110</b>) may be stored as ternary content-addressable memory (TCAM) entries using a TCAM device used in implementing high speed searches.</p>
<p id="p-0043" num="0042">In one or more embodiments of the invention, the NEM (<b>108</b>) may include multiple receive and transfer (RX/TX) rings (<b>102</b>). In one or more embodiments of the invention, one or more RX/TX rings (<b>102</b>) may be assigned to a specific VNIC (<b>120</b>, <b>130</b>) for the temporary storage of inbound and outbound network traffic, respectively.</p>
<p id="p-0044" num="0043">In one or more embodiments of the invention, the classification tables (<b>110</b>) may include one or more entries describing resources assigned to each VNIC (<b>120</b>, <b>130</b>), as well as data associated with each VNIC (<b>120</b>, <b>130</b>). For example, one or more entries of the classification tables (<b>110</b>) may specify that a given VNIC (<b>120</b>, <b>130</b>) is associated with one or more RX/TX rings (<b>102</b>), a link status (e.g., link speed, number of dropped packets, link up/down, link active/inactive, etc.), a MAC address, and the like.</p>
<p id="p-0045" num="0044">In one or more embodiments, the NEM (<b>108</b>) may include one or more classification policies (<b>136</b>). In one or more embodiments, a classification policy may be a deterministic algorithm that directs the routing of network traffic within the blade chassis (<b>100</b>) (i.e., the internal communication between blades, or between a blade and a PNIC). For example, a classification policy may be to deliver packets to all threads in a set of threads, to deliver packets to each thread in sequence, to deliver packets based on a hash function (e.g., Message-Digest algorithm 5 (MD5), Secure Hash Algorithm (SHA)), and the like. In one or more embodiments of the invention, the one or more classification policies (<b>136</b>) may be stored in a policy store (not shown) implemented using a persistent storage device.</p>
<p id="p-0046" num="0045">In one or more embodiments of the invention, the NEM (<b>108</b>) includes a classification engine (<b>140</b>). In one or more embodiments, the classification engine (<b>140</b>) may be configured to classify network traffic (e.g., network packets). In one or more embodiments, the classification engine (<b>140</b>) may classify network traffic according to the classification tables (<b>110</b>), the classification policies (<b>136</b>), and/or the virtual switching table described above.</p>
<p id="p-0047" num="0046">In one or more embodiments, the classification engine (<b>140</b>) may be further configured to manage components related to the routing of network traffic within the blade chassis (<b>100</b>). Specifically, in one or more embodiments, the classification engine (<b>140</b>) may be configured to manage the classification tables (<b>110</b>), the classification policies (<b>136</b>), and/or the virtual switching table described above. For example, the classification engine (<b>140</b>) may add, remove, and/or modify mappings included in the classification tables (<b>110</b>) and the virtual switching table. In another example, the classification engine (<b>140</b>) may add, remove, and/or modify classification policies (<b>136</b>).</p>
<p id="p-0048" num="0047">In one or more embodiments of the invention, the NEM (<b>108</b>) includes a validation module (<b>150</b>) configured to validate the proper routing of network traffic within the blade chassis (<b>100</b>). Specifically, in one or more embodiments, the validation module (<b>150</b>) may be configured to validate the functioning of the classification engine (<b>140</b>), the classification tables (<b>110</b>), the classification policies (<b>136</b>), and/or the virtual switching table described above. The validation module (<b>150</b>) is described further below with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 2</figref> shows a diagram of a data flow for validating the classification and routing of network traffic within a blade chassis, in accordance with one or more embodiments of the invention. Specifically, <figref idref="DRAWINGS">FIG. 2</figref> shows data flows between components of the validation module (<b>150</b>) and devices under test (DUT) (<b>210</b>) (i.e., the components of the blade chassis (<b>100</b>) being validated by the validation module (<b>150</b>)). As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the DUT (<b>210</b>) may include the classification engine (<b>140</b>), the packet receiver <b>1</b> (<b>160</b>), and the packet receiver <b>2</b> (<b>165</b>) (described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref>).</p>
<p id="p-0050" num="0049">In one or more embodiments, the validation module (<b>150</b>) may include a policy manager (<b>152</b>), a packet checker/queue manager (<b>153</b>), and one or more wait timers (<b>159</b>). Further, in one or more embodiments, the validation module (<b>150</b>) may also include, for each packet receiver (<b>160</b>, <b>165</b>) in the DUT (<b>210</b>), a packet configurator (<b>154</b>, <b>155</b>) and an expect queue (<b>158</b>). Accordingly, in the embodiment shown in <figref idref="DRAWINGS">FIG. 2</figref>, assume that the packet configurator <b>1</b> (<b>154</b>) corresponds to the packet receiver <b>1</b> (<b>160</b>), and the packet configurator <b>2</b> (<b>155</b>) corresponds to the packet receiver <b>2</b> (<b>165</b>). In one or more embodiments, each packet configurator (<b>154</b>, <b>155</b>) may include a route analyzer (<b>156</b>) and a packet generator (<b>157</b>). The aforementioned components of the validation module (<b>150</b>) are described in further detail below.</p>
<p id="p-0051" num="0050">In one or more embodiments, the policy manager (<b>152</b>) may initially assign a session identifier (referred to herein as a &#x201c;session ID&#x201d;) to uniquely identify each session of a packet receiver (<b>160</b>, <b>165</b>) executing on any of the blades (<b>114</b>, <b>126</b>). In one or more embodiments, each packet receiver (<b>160</b>, <b>165</b>) may initiate a unique session each time that the packet receiver (<b>160</b>, <b>165</b>) is instantiated. Accordingly, in one or more embodiments, the policy manager (<b>152</b>) may assign a new session identifier after, e.g., a new blade is installed, an exiting blade is reset or re-installed, an exiting network function is reset, a new network function is instantiated, a new packet receiver is instantiated, and the like.</p>
<p id="p-0052" num="0051">Further, in one or more embodiments, the policy manager (<b>152</b>) may configure the classification tables (<b>110</b>) (shown in <figref idref="DRAWINGS">FIG. 1B</figref>). Specifically, in one or more embodiment, the policy manager (<b>152</b>) may configure the classification tables (<b>110</b>) according to the classification policies (<b>136</b>) (shown in <figref idref="DRAWINGS">FIG. 1B</figref>), the configuration of the blade chassis (<b>100</b>) (e.g., quantities, types, and arrangement of blades, network functions, VNICs, etc.), session identifiers, and the like.</p>
<p id="p-0053" num="0052">After the initial configuration of the classification tables (<b>110</b>), the policy manager (<b>152</b>) may monitor for any changes to the packet receivers (<b>160</b>, <b>165</b>) and/or the classification policies (<b>136</b>). Upon detecting any changes to the packet receivers (<b>160</b>, <b>165</b>) (e.g., a new session is initiated, a blade is reset, etc.) and/or the classification policies (<b>136</b>) (e.g., a new policy is created, an existing policy is changed, etc.), the policy manager (<b>152</b>) may reconfigure the classification tables (<b>110</b>) according to the changes (if required). The policy manager (<b>152</b>) is described further below with reference to <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0054" num="0053">As described above, each packet configurator (<b>154</b>, <b>155</b>) is associated with a corresponding packet receiver (<b>160</b>, <b>165</b>). Accordingly, in one or more embodiments, each packet configurator (<b>154</b>, <b>155</b>) may generate test packets intended to be sent to the packet receiver (<b>160</b>, <b>165</b>) corresponding to the packet configurator (<b>154</b>, <b>155</b>) (referred to herein as the &#x201c;target packet receiver&#x201d;). As shown in <figref idref="DRAWINGS">FIG. 2</figref>, each packet configurator (<b>154</b>, <b>155</b>) may include a route analyzer (<b>156</b>) configured to determine different possible routes for test packets to travel from the packet configurator (<b>154</b>, <b>155</b>) to the target packet receiver (<b>160</b>, <b>165</b>). In one or more embodiments, the route analyzer (<b>156</b>) may analyze the possible packet routes based on the classification policies (<b>136</b>), the classification tables (<b>110</b>), the configuration of the blade chassis (<b>100</b>), and the like.</p>
<p id="p-0055" num="0054">In one or more embodiments, each packet configurator (<b>154</b>, <b>155</b>) may also include a packet generator (<b>157</b>). In one or more embodiments, the packet generator (<b>157</b>) may generate test packets having attributes and/or formatting (e.g., packet headers, packet length, errors, etc.) configured to match the possible routes (determined by the route analyzer (<b>156</b>)). In one or more embodiments, the packet generator (<b>157</b>) may also embed the corresponding session ID (i.e., the session ID assigned to the target packet receiver (<b>160</b>, <b>165</b>)) in each test packet. In one or more embodiments, the packet generator (<b>157</b>) may receive the session IDs from the policy manager (<b>152</b>). Specifically, in one or more embodiments, the policy manager (<b>152</b>) may communicate the session IDs assigned to each packet receiver (<b>160</b>, <b>165</b>) to the packet configurator (<b>154</b>, <b>155</b>) corresponding to that packet receiver (<b>160</b>, <b>165</b>). The packet configurators (<b>154</b>, <b>155</b>) are described further below with reference to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0056" num="0055">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the packet generator (<b>157</b>) may send the test packets to a network transmitter (<b>170</b>). In one or more embodiments, the network transmitter (<b>170</b>) may be configured to transport the test packets into the DUT (<b>210</b>) for routing to the target packet receivers (<b>160</b>, <b>165</b>). For example, the network transmitter (<b>170</b>) may be a separate blade (not shown), a network test device (not shown), an internal loopback path (not shown), and the like.</p>
<p id="p-0057" num="0056">In one or more embodiments, each packet configurator (<b>154</b>, <b>155</b>) may send a copy of each completed test packet (i.e., each test packet sent to the network transmitter (<b>170</b>)) to the packet checker/queue manager (<b>153</b>). The packet checker/queue manager (<b>153</b>) stores the copy of the test packet (referred to herein as an &#x201c;expect packet&#x201d;) in the expect queue (<b>158</b>) associated with the session ID embedded in the test packet (i.e., the session ID assigned to the target packet receiver (<b>160</b>, <b>165</b>)).</p>
<p id="p-0058" num="0057">In one or more embodiments, the expect packet may be stored in the expect queue (<b>158</b>) for use in validating the test packet. In particular, in the event that the test packet is received by the target packet receiver (<b>160</b>, <b>165</b>), the packet checker/queue manager (<b>153</b>) may compare the test packet and the expect packet to determine whether the test packet was properly routed, and whether the payload of the test packet is unchanged.</p>
<p id="p-0059" num="0058">In one or more embodiments, the packet checker/queue manager (<b>153</b>) may also start a wait timer (<b>159</b>) associated with the expect packet (or with a group of expect packets). The wait timer (<b>159</b>) may be used to determine whether to remove the expect packet from the expect queue (<b>158</b>). In one or more embodiments, the wait timer (<b>159</b>) counts down to a predefined wait period (i.e., a predefined period of time). Once the predefined wait period has elapsed, the test packet from which the expect packet was copied may be presumed to have failed to reach the target packet destination (<b>160</b>, <b>165</b>). Accordingly, the expect packet is no longer required to validate the test packet, and the expect packet may be removed from the expect queue (<b>158</b>) in which it is stored.</p>
<p id="p-0060" num="0059">In one or more embodiments, the packet checker/queue manager (<b>153</b>) may be configured to determine whether each test packet is received by the target packet receiver (<b>160</b>, <b>165</b>). The packet checker/queue manager (<b>153</b>) may also be configured to determine whether the session ID embedded in the test packet matches the current session ID assigned to the target packet receiver (<b>160</b>, <b>165</b>). Further, the packet checker/queue manager (<b>153</b>) may also be configured to verify the data integrity of the test packet. For example, the packet checker/queue manager (<b>153</b>) may verify the data integrity of the test packet by determining that the payload of the test packet is identical to the payload of the expect packet.</p>
<p id="p-0061" num="0060">In one or more embodiments, the packet checker/queue manager (<b>153</b>) may be configured to manage the expect queues (<b>158</b>). For example, in the event that a new session ID is created (e.g., when a new session of a packet receiver (<b>160</b>, <b>165</b>) is instantiated), the packet checker/queue manager (<b>153</b>) may create a new expect queue (<b>158</b>) to correspond to the new session ID. In another example, in the event that a session ID is no longer active (e.g., the packet receiver (<b>160</b>, <b>165</b>) associated with the session ID has reset), the packet checker/queue manager (<b>153</b>) may delete the expect queue (<b>158</b>) corresponding to the inactive session ID.</p>
<p id="p-0062" num="0061">In one or more embodiments, the packet checker/queue manager (<b>153</b>) may be executed on a device outside the DUT (<b>210</b>) (e.g., on a separate blade or appliance) so as to minimize any processing load on DUT (<b>210</b>) due to a validation test. In one or more embodiments, the packet checker/queue manager (<b>153</b>) may use a generic communication interface (e.g., a TCP socket interface) to communicate with packet receivers (<b>160</b>, <b>165</b>) and/or the packet configurators (<b>154</b>, <b>155</b>). The packet checker/queue manager (<b>153</b>) is described further below with reference to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0063" num="0062">A person of skill in the art will note that the software environments shown in <figref idref="DRAWINGS">FIGS. 1A-B</figref> and <b>2</b> are exemplary embodiments, and are not intended to limit the invention. For example, for sake of clarity, the blade chassis (<b>100</b>) is shown as including two blades (<b>114</b>, <b>126</b>) and two packet receivers (<b>160</b>, <b>165</b>). However, it is contemplated that the blade chassis (<b>100</b>) may include any number of blades (<b>114</b>, <b>126</b>), and that each blades (<b>114</b>, <b>126</b>) may include any number of packet receivers (<b>160</b>, <b>165</b>). In another example, it is contemplated that any of the functionality described above with reference to the aforementioned components (e.g., classification tables (<b>110</b>), classification policies (<b>136</b>), classification engine (<b>140</b>), validation module (<b>150</b>), and the like) may be implemented in any other software component. In yet another example, in one or more embodiments, the NEM (<b>108</b>), the chassis interconnect (<b>112</b>), and/or the PNIC (<b>101</b>) may be included as a single hardware module (not shown) operatively connected to the blade chassis. Alternatively, in one or more embodiments, the NEM (<b>108</b>) may be independently implemented apart from the chassis interconnect (<b>112</b>) and/or the PNIC (<b>101</b>) in hardware, software, or firmware.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 3</figref> shows a flowchart of a method for validating the classification and routing of network traffic within a blade chassis, in accordance with one or more embodiments of the invention. In one or more embodiments, the process shown in <figref idref="DRAWINGS">FIG. 3</figref> may be performed as part of validation testing of the packet classification and routing functionality of a particular device or devices (e.g., DUT (<b>210</b>) shown in <figref idref="DRAWINGS">FIG. 2</figref>). As such, the process shown in <figref idref="DRAWINGS">FIG. 3</figref> may correspond to the software environment described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>. Those skilled in the art, having the benefit of this detailed description, will appreciate that the sequence of steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may differ among embodiments of the invention, and that one or more of the steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may be omitted, repeated, performed in parallel, and/or performed in a different order. Accordingly, the specific arrangement of steps shown in <figref idref="DRAWINGS">FIG. 3</figref> should not be construed as limiting the scope of the invention</p>
<p id="p-0065" num="0064">At ST <b>310</b>, a validation module and the devices under test (DUT) are configured. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the validation module (<b>150</b>) and the DUT (<b>210</b>) may be configured to perform a validation test. ST <b>310</b> is described in greater detail below with reference to <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0066" num="0065">At ST <b>320</b>, test packets are generated and transmitted to the DUT. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet configurators (<b>154</b>, <b>155</b>) may generate test packets for the validation test. Further, the network transmitter (<b>170</b>) may transmit the test packets to the DUT (<b>210</b>). ST <b>320</b> is described in greater detail below with reference to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0067" num="0066">At ST <b>330</b>, the test packets are validated. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may validate the test packets transmitted to the DUT (<b>210</b>). ST <b>330</b> is described in greater detail below with reference to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0068" num="0067">At ST <b>340</b>, a determination is made as to whether the validation test is complete. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the policy manager (<b>152</b>) may determine whether the validation testing of the DUT (<b>210</b>) is completed. If so, the process ends. However, if it is determined at ST <b>340</b> that the validation test is not complete, the process continues at ST <b>350</b>.</p>
<p id="p-0069" num="0068">At ST <b>350</b>, the DUT and the classification policies are monitored for any changes. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the validation module (<b>150</b>) may monitor for changes to the DUT (<b>210</b>) and/or the classification policies (<b>136</b>).</p>
<p id="p-0070" num="0069">At ST <b>360</b>, a determination is made as to whether any significant change to the DUT or the classification policies (i.e., a change requiring new test packets to be issued) has occurred. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the policy manager (<b>152</b>) may determine whether a change to the DUT (<b>210</b>) and/or the classification policies (<b>136</b>) will require that new test packets are generated in order to complete the validation test.</p>
<p id="p-0071" num="0070">If it is determined at ST <b>360</b> that a significant change to the DUT or the classification policies has not occurred, the process returns to ST <b>330</b>, where the validation of the test packets continues. However, if it is determined at ST <b>360</b> that a significant change to the DUT or the classification policies has occurred, the process returns to ST <b>310</b>, where the validation module and the DUT may be reconfigured according to the change to the DUT or the classification policies.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 4</figref> shows a flowchart of a method for configuring a validation module and a DUT, in accordance with one or more embodiments of the invention. In particular, <figref idref="DRAWINGS">FIG. 4</figref> illustrates an exemplary expansion of the steps involved in performing ST <b>310</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>). In one or more embodiments, the process shown in <figref idref="DRAWINGS">FIG. 4</figref> may correspond to the software environment described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>. Those skilled in the art, having the benefit of this detailed description, will appreciate that the sequence of steps shown in <figref idref="DRAWINGS">FIG. 4</figref> may differ among embodiments of the invention, and that one or more of the steps shown in <figref idref="DRAWINGS">FIG. 4</figref> may be omitted, repeated, performed in parallel, and/or performed in a different order. Accordingly, the specific arrangement of steps shown in <figref idref="DRAWINGS">FIG. 4</figref> should not be construed as limiting the scope of the invention</p>
<p id="p-0073" num="0072">At ST <b>410</b>, one or more classification tables may be set up according to one or more classification policies. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the policy manager (<b>152</b>) may set up the classification tables (<b>110</b>) in accordance with the classification policies (<b>136</b>). In particular, in one or more embodiments, the policy manager (<b>152</b>) may set up a first classification table (<b>110</b>) storing a first type of mapping that associates a L2 address with a network function, a second classification table (<b>110</b>) storing a second type of mapping that associates a network function with a configuration, and/or a third classification table (<b>110</b>) storing a third type of mapping that associates a key with a policy.</p>
<p id="p-0074" num="0073">At ST <b>420</b>, a unique session ID may be assigned to each packet receiver. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the policy manager (<b>152</b>) may assign a first session ID to the packet receiver <b>1</b> (<b>160</b>) and a second session ID to the packet receiver <b>2</b> (<b>165</b>).</p>
<p id="p-0075" num="0074">At ST <b>430</b>, a separate expect queue may be created for each packet receiver. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the policy manager (<b>152</b>) may create a separate expect queue (<b>158</b>) for each packet receiver (<b>160</b>, <b>165</b>). After ST <b>430</b>, the process is continued in ST <b>320</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart of a method for generating and transmitting test packets, in accordance with one or more embodiments of the invention. In particular, <figref idref="DRAWINGS">FIG. 5</figref> illustrates an exemplary expansion of the steps involved in performing ST <b>320</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>). In one or more embodiments, the process shown in <figref idref="DRAWINGS">FIG. 5</figref> may correspond to the software environment described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>. Those skilled in the art, having the benefit of this detailed description, will appreciate that the sequence of steps shown in <figref idref="DRAWINGS">FIG. 5</figref> may differ among embodiments of the invention, and that one or more of the steps shown in <figref idref="DRAWINGS">FIG. 5</figref> may be omitted, repeated, performed in parallel, and/or performed in a different order. Accordingly, the specific arrangement of steps shown in <figref idref="DRAWINGS">FIG. 5</figref> should not be construed as limiting the scope of the invention</p>
<p id="p-0077" num="0076">The process begins after configuring the validation module and DUT (i.e., after ST <b>310</b> shown in <figref idref="DRAWINGS">FIG. 3</figref>). At ST <b>510</b>, one or more potential routes to each packet receiver may be determined. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the route analyzer (<b>156</b>) associated with each packet receiver (<b>160</b>, <b>165</b>) may determine different possible routes for test packets to travel from the packet configurator (<b>154</b>, <b>155</b>) to the respective packet receiver (<b>160</b>, <b>165</b>).</p>
<p id="p-0078" num="0077">At ST <b>520</b>, one or more test packets may be generated for each potential route (determined at ST <b>510</b>). For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the packet generator (<b>157</b>) may generate test packets having attributes and/or formatting (e.g., packet headers, packet length, errors, etc.) configured to match the potential routes determined by the route analyzer (<b>156</b>).</p>
<p id="p-0079" num="0078">At ST <b>530</b>, a session ID may be inserted into each test packet payload. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the packet generator (<b>157</b>) may embed the corresponding session ID (i.e., the session ID assigned to the target packet receiver (<b>160</b>, <b>165</b>)) in each test packet payload.</p>
<p id="p-0080" num="0079">At ST <b>540</b>, each test packet is copied into the expect queue associated with the session ID embedded in the test packet. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the packet checker/queue manager (<b>153</b>) may store a copy of each test packet in the expect queue (<b>158</b>) associated with the session ID embedded in the test packet (i.e., the session ID assigned to the target packet receiver (<b>160</b>, <b>165</b>) for the test packet).</p>
<p id="p-0081" num="0080">At ST <b>550</b>, a wait timer may be set for each expect packet (i.e., copy of a test packet) stored in an expect queue. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may set a wait timer (<b>159</b>) for each expect packet (or group of expect packets) stored in the expect queues (<b>158</b>). In one or more embodiments, each wait timer (<b>159</b>) may be set for a predefined wait period.</p>
<p id="p-0082" num="0081">At ST <b>560</b>, the test packets may be transmitted to the DUT by the network transmitter. For example, referring to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, the network transmitter (<b>170</b>) may transmit each test packet to the target packet receiver (<b>160</b>, <b>165</b>). After ST <b>560</b>, the process is continued in ST <b>330</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 6</figref> shows a flowchart of a method for validating test packets, in accordance with one or more embodiments of the invention. In particular, <figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary expansion of the steps involved in performing ST <b>330</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>). In one or more embodiments, the process shown in <figref idref="DRAWINGS">FIG. 6</figref> may correspond to the software environment described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>. Those skilled in the art, having the benefit of this detailed description, will appreciate that the sequence of steps shown in <figref idref="DRAWINGS">FIG. 6</figref> may differ among embodiments of the invention, and that one or more of the steps shown in <figref idref="DRAWINGS">FIG. 6</figref> may be omitted, repeated, performed in parallel, and/or performed in a different order. Accordingly, the specific arrangement of steps shown in <figref idref="DRAWINGS">FIG. 6</figref> should not be construed as limiting the scope of the invention</p>
<p id="p-0084" num="0083">The process begins after generating and transmitting the test packets (i.e., after ST <b>320</b> shown in <figref idref="DRAWINGS">FIG. 3</figref>). At ST <b>610</b>, a determination is made as to whether a test packet has been received at a packet receiver. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may determine whether a test packet has been received at a packet receiver (<b>160</b>, <b>165</b>).</p>
<p id="p-0085" num="0084">If it is determined at ST <b>610</b> that a packet has not been received at a packet receiver, then at ST <b>620</b>, a determination is made as to whether any wait timers have expired. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may determine whether any wait timers (<b>159</b>) have reached a predefined wait period.</p>
<p id="p-0086" num="0085">If it is determined at ST <b>620</b> that a wait timer has expired, then at ST <b>625</b>, any expect packets associated with the expired wait timer may be deleted. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may delete the expect packets associated with the expired wait timer (<b>159</b>) (i.e., the wait timer (<b>159</b>) that has reached the predefined wait period). Further, in one or more embodiments, the validation module (<b>150</b>) may update test statistics (i.e., data describing the results of the validation test) to indicate the deletion of the expect packets. After ST <b>625</b>, the process continues at ST <b>340</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>). Further, if it is determined at ST <b>620</b> that no wait timers have expired, the process continues at ST <b>340</b>.</p>
<p id="p-0087" num="0086">Referring again to ST <b>610</b>, if it is determined that a test packet has been received, then at ST <b>630</b>, the session ID embedded in the test packet is extracted. At ST <b>640</b>, a determination is made as to whether the session ID extracted from the test packet matches the current session ID of the target packet receiver (i.e., the session ID identifying the current session of the packet receiver to which the test packet is addressed). In one or more embodiments, this comparison of session IDs may be performed by a packet checker/queue manager. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may extract the session ID from the received test packet, and may determine whether the extracted session ID matches the current session ID of the target packet receiver (<b>160</b>, <b>165</b>). Alternatively in one or more embodiments, the comparison of session IDs may be performed by the packet receiver in response to an attempt to deliver the test packet to the packet receiver. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet receiver <b>1</b> (<b>160</b>) may, upon detecting an inbound test packet, extract the session ID from the test packet, and determine whether a session ID matches the current session ID of packet receiver <b>1</b> (<b>160</b>).</p>
<p id="p-0088" num="0087">If it is determined at ST <b>640</b> that session ID extracted from the received test packet does not match the current session ID of the target packet receiver, then at ST <b>645</b>, the received test packet may be deleted. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may, upon determining that the extracted session ID does not match the current session ID of the target packet receiver (<b>160</b>, <b>165</b>), delete the received test packet. Further, in one or more embodiments, the validation module (<b>150</b>) may update the test statistics (not shown) to indicate the deletion of the received test packet. After ST <b>645</b>, the process continues at ST <b>340</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0089" num="0088">However, if it is determined at ST <b>640</b> that the session ID extracted from the received test packet matches the current session ID of the target packet receiver, then at ST <b>650</b>, the expect packet corresponding to the received test packet (i.e., the copy of the received test packet stored in the expect queue), may be retrieved from the expect queue associated with the extracted session ID. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may, upon determining that the extracted session ID matches the current session ID of the target packet receiver (<b>160</b>, <b>165</b>), retrieve the corresponding expect packet from the expect queue (<b>158</b>) associated with the extracted session ID.</p>
<p id="p-0090" num="0089">At ST <b>660</b>, a determination is made as to whether the received test packet is valid. In one or more embodiments, the received test packet may be determine to be valid if: (i) the received test packet is delivered to the correct destination, and (ii) the payload of the received test packet matches the payload of the expect packet. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the packet checker/queue manager (<b>153</b>) may determine whether the test packet is received (at ST <b>610</b>) at the target packet receiver (<b>160</b>, <b>165</b>), and whether the payload of the test packet is identical to the payload of the expect packet (retrieved from the expect queue (<b>158</b>) at ST <b>650</b>).</p>
<p id="p-0091" num="0090">If it is determined at ST <b>660</b> that the received test packet is valid, then at ST <b>665</b>, the received test packet may be counted as successfully delivered. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the validation module (<b>150</b>) may, upon determining that the received test packet is valid, update the test statistics (not shown) to indicate the successful delivery of the received test packet. The process then continues at ST <b>680</b> (described below).</p>
<p id="p-0092" num="0091">However, if it is determined at ST <b>660</b> that the received test packet is not valid (i.e., the received test packet is not delivered to the correct destination, and/or the payload of the received test packet does not match the payload of the expect packet), then at ST <b>670</b>, a classification error is raised. For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the validation module (<b>150</b>) may, upon determining that the received test packet is not valid, raise a classification error for the received test packet. Further, in one or more embodiments, the validation module (<b>150</b>) may update the test statistics (not shown) to indicate the classification error for the received test packet.</p>
<p id="p-0093" num="0092">At ST <b>680</b>, a check for missing packets may be performed. In one or more embodiments, a packet receiver may analyze the sequence of received test packets to determine if a test packet is missing (i.e., was not received in an expected position within a sequence of test packets). For example, referring to <figref idref="DRAWINGS">FIG. 2</figref>, the validation module (<b>150</b>) may determine that a first test packet, issued before the received test packet (received at ST <b>610</b>), has not yet been received. Thus, because the first test packet has not been received in the expected position within the sequence of test packets (i.e., before the received test packet), the validation module (<b>150</b>) may determine that the first test packet has been dropped. Further, in one or more embodiments, the validation module (<b>150</b>) may update the test statistics (not shown) to indicate that the first test packet has been dropped. After ST <b>680</b>, the process continues at ST <b>340</b> (shown in <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIGS. 7A-7E</figref> show an example of validating the classification and routing of network traffic within a blade chassis, in accordance with one or more embodiments of the invention. In one or more embodiments, the example shown in <figref idref="DRAWINGS">FIGS. 7A-7E</figref> may correspond to the software environment described above with reference to <figref idref="DRAWINGS">FIGS. 1A-1B</figref> and <b>2</b>, and to the processes described above with reference to <figref idref="DRAWINGS">FIGS. 3-6</figref>.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 7A</figref> shows a first state of a validation test, in accordance with embodiments disclosed herein. As shown, the policy manager (<b>152</b>) assigns the session ID &#x201c;1&#x201d; to the packet receiver <b>1</b> (<b>160</b>), and assigns the session ID &#x201c;2&#x201d; to the packet receiver <b>2</b> (<b>165</b>) (i.e., ST <b>420</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>). The policy manager (<b>152</b>) also creates the expect queue <b>1</b> (<b>720</b>) associated with packet receiver <b>1</b> (<b>160</b>), and creates the expect queue <b>2</b> (<b>725</b>) associated with packet receiver <b>2</b> (<b>165</b>) (i.e., ST <b>430</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>). Further, the packet generator <b>1</b> (<b>730</b>) is associated with packet receiver <b>1</b> (<b>160</b>), and the packet generator <b>2</b> (<b>735</b>) is associated with packet receiver <b>2</b> (<b>165</b>).</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 7B</figref> shows a second state of the validation test, in accordance with embodiments disclosed herein. As shown, the packet generator <b>1</b> (<b>730</b>) generates a test packet <b>1</b> (<b>710</b>) (i.e., ST <b>520</b> shown in <figref idref="DRAWINGS">FIG. 5</figref>), inserts session ID &#x201c;1&#x201d; in the packet payload (i.e., ST <b>530</b> shown in <figref idref="DRAWINGS">FIG. 5</figref>), and sends the test packet <b>1</b> (<b>710</b>) to the network transmitter (<b>170</b>). Similarly, the packet generator <b>2</b> (<b>735</b>) generates test packet <b>2</b> (<b>715</b>), inserts session ID &#x201c;2&#x201d; in the packet payload, and sends the test packet <b>2</b> (<b>715</b>) to the network transmitter (<b>170</b>). Additionally, expect packet <b>1</b> (<b>712</b>) (i.e., a copy of test packet <b>1</b> (<b>710</b>)) is stored in expect queue <b>1</b> (<b>720</b>), and expect packet <b>2</b> (<b>717</b>) (i.e., a copy of test packet <b>2</b> (<b>715</b>)) is stored in expect queue <b>2</b> (<b>725</b>) (i.e., ST <b>540</b> shown in <figref idref="DRAWINGS">FIG. 5</figref>). In one or more embodiments, storing the expect packets in the expect queues (<b>720</b>, <b>725</b>) may be performed by the packet checker/queue manager (<b>153</b>).</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 7C</figref> shows a third state of the validation test, in accordance with embodiments disclosed herein. Assume that, prior to the third state shown in <figref idref="DRAWINGS">FIG. 7C</figref>, the packet receiver <b>1</b> (<b>160</b>) is reset. Therefore, the packet receiver <b>1</b> (<b>160</b>) has instantiated a new session, and the session ID &#x201c;1&#x201d; is no longer valid for packet receiver <b>1</b> (<b>160</b>). Accordingly, as shown in <figref idref="DRAWINGS">FIG. 7C</figref>, the policy manager (<b>152</b>) assigns the session ID &#x201c;3&#x201d; (i.e., a new session ID) to the packet receiver <b>1</b> (<b>160</b>). Also during the third state shown in <figref idref="DRAWINGS">FIG. 7C</figref> (e.g., at some point in time approximately concurrent with the packet receiver <b>1</b> (<b>160</b>) being reset), the network transmitter (<b>170</b>) transmits the test packet <b>1</b> (<b>710</b>) and the test packet <b>2</b> (<b>715</b>) to the classification engine (<b>140</b>) (i.e., ST <b>560</b> shown in <figref idref="DRAWINGS">FIG. 5</figref>). Note that the test packet <b>1</b> (<b>710</b>) still includes the session ID &#x201c;1.&#x201d;</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 7D</figref> shows a fourth state of the validation test, in accordance with embodiments disclosed herein. As shown, the classification engine (<b>140</b>) classifies the test packet <b>1</b> (<b>710</b>), and attempts to deliver the test packet <b>1</b> (<b>710</b>) to the packet receiver <b>1</b> (<b>160</b>). Further, the classification engine (<b>140</b>) classifies the test packet <b>2</b> (<b>715</b>), and attempts to deliver the test packet <b>2</b> (<b>715</b>) to the packet receiver <b>2</b> (<b>165</b>).</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 7E</figref> shows a fifth state of the validation test, in accordance with embodiments disclosed herein. As shown, the packet checker/queue manager (<b>153</b>) compares the current session ID of packet receiver <b>1</b> (<b>160</b>) (i.e., session ID=&#x201c;3&#x201d;) to the session ID embedded in the test packet <b>1</b> (<b>710</b>) (i.e., session ID=&#x201c;1&#x201d;). Accordingly, the packet checker/queue manager (<b>153</b>) determines that there is a session ID mismatch between the packet receiver <b>1</b> (<b>160</b>) and the test packet <b>1</b> (<b>710</b>), and thus deletes the test packet <b>1</b> (<b>710</b>) before it fully received by the packet receiver <b>1</b> (<b>160</b>) (i.e., ST <b>640</b> and ST <b>645</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>). In one or more embodiments, the test packet <b>1</b> (<b>710</b>) may be deleted from an inbound queue or receive ring for the packet receiver <b>1</b> (<b>160</b>).</p>
<p id="p-0100" num="0099">As further shown in <figref idref="DRAWINGS">FIG. 7E</figref>, the packet checker/queue manager (<b>153</b>) compares the current session ID of packet receiver <b>2</b> (<b>165</b>) (i.e., session ID=&#x201c;2&#x201d;) to the session ID embedded in the test packet <b>2</b> (<b>715</b>) (i.e., session ID=&#x201c;2&#x201d;). Accordingly, the packet checker/queue manager (<b>153</b>) determines that there is a session ID match between the packet receiver <b>2</b> (<b>165</b>) and the test packet <b>2</b> (<b>715</b>) (i.e., ST <b>640</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 7F</figref> shows a sixth state of the validation test, in accordance with embodiments disclosed herein. As shown, the packet checker/queue manager (<b>153</b>) compares the payload of test packet <b>2</b> (<b>715</b>) to the payload of expect packet <b>2</b> (<b>717</b>) (i.e., ST <b>660</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>). Assume that the payload of test packet <b>2</b> (<b>715</b>) matches the payload of expect packet <b>2</b> (<b>717</b>), and that, accordingly, test packet <b>2</b> (<b>715</b>) is validated (i.e., ST <b>665</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>). In one or more embodiments, after validating the payload of test packet <b>2</b> (<b>715</b>), the packet checker/queue manager (<b>153</b>) may delete both the test packet <b>2</b> (<b>715</b>) and the expect packet <b>2</b> (<b>717</b>).</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 7G</figref> shows a seventh state of the validation test, in accordance with embodiments disclosed herein. As shown, the packet checker/queue manager (<b>153</b>) determines that a wait timer (<b>159</b>) associated with the expect packet <b>1</b> (<b>712</b>) has expired (i.e., ST <b>620</b> shown in <figref idref="DRAWINGS">FIG. 6</figref>). Note that, because the test packet <b>1</b> (<b>710</b>) was never delivered to packet receiver <b>1</b> (<b>160</b>), the expect packet <b>1</b> (<b>712</b>) has not been used to validate the test packet <b>1</b> (<b>710</b>), and thus remains in the expect queue <b>1</b> (<b>720</b>). Accordingly, because the wait timer (<b>159</b>) has expired, the packet checker/queue manager (<b>153</b>) deletes the expect packet <b>1</b> (<b>712</b>) from the expect queue <b>1</b> (<b>720</b>).</p>
<p id="p-0103" num="0102">Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example, as shown in <figref idref="DRAWINGS">FIG. 8</figref>, a computer system (<b>800</b>) includes one or more processors (<b>802</b>), associated memory (<b>804</b>) (e.g., random access memory (RAM), cache memory, flash memory, etc.), storage device(s) (<b>806</b>) (e.g., a hard disk, an optical drive such as a compact disk drive or digital video disk (DVD) drive, a flash memory stick, etc.), and numerous other elements and functionalities typical of today's computers (not shown). The computer (<b>800</b>) may also include input means, such as a keyboard (<b>808</b>), a mouse (<b>810</b>), or a microphone (not shown). Further, the computer (<b>800</b>) may include output means, such as a monitor (<b>812</b>) (e.g., a liquid crystal display (LCD), a plasma display, or cathode ray tube (CRT) monitor). The computer system (<b>800</b>) may be connected to a network (<b>814</b>) (e.g., a local area network (LAN), a wide area network (WAN) such as the Internet, or any other similar type of network) via a network interface connection (not shown). Those skilled in the art will appreciate that many different types of computer systems exist, and the aforementioned input and output means may take other forms. Generally speaking, the computer system (<b>800</b>) includes at least the minimal processing, input, and/or output means necessary to practice embodiments of the invention.</p>
<p id="p-0104" num="0103">Further, those skilled in the art will appreciate that one or more elements of the aforementioned computer system (<b>800</b>) may be located at a remote location and connected to the other elements over a network. Further, embodiments of the invention may be implemented on a distributed system having a plurality of nodes, where each portion of the invention may be located on a different node within the distributed system. In one embodiment of the invention, the node corresponds to a computer system. Alternatively, the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and/or resources.</p>
<p id="p-0105" num="0104">Further, instructions to perform embodiments of the invention may be stored on a computer readable storage medium such as a compact disc (CD), a diskette, a tape, physical memory, or any other tangible computer readable storage medium that includes functionality to store computer readable program code to perform embodiments of the invention. In one embodiment of the invention the instructions, when executed by a processor(s), are configured to perform embodiments of the invention.</p>
<p id="p-0106" num="0105">While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A non-transitory computer readable storage medium having computer readable program code embodied therein, the computer readable program code adapted to, when executed by a processor, implement a method, the method comprising:
<claim-text>generating a first packet for sending to a first packet receiver by a first route;</claim-text>
<claim-text>inserting a first session identifier into a payload of the first packet, wherein the first session identifier identifies a first session of the first packet receiver;</claim-text>
<claim-text>sending the first packet with the first session identifier to a packet classifier;</claim-text>
<claim-text>sending a first copy packet to a first expect queue, wherein the first copy packet is a duplicate of the first packet with the first session identifier;</claim-text>
<claim-text>receiving the first packet with the first session identifier by the packet classifier;</claim-text>
<claim-text>classifying the first packet with the first session identifier by the packet classifier to obtain a first classified packet;</claim-text>
<claim-text>extracting the first session identifier from the first classified packet to obtain a first extracted session identifier; and</claim-text>
<claim-text>determining whether the first extracted session identifier matches the first session identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>generating a second packet for sending to a second packet receiver by a second route;</claim-text>
<claim-text>inserting a second session identifier into a payload of the second packet, wherein the second session identifier identifies a second session of the second packet receiver;</claim-text>
<claim-text>sending the second packet with the second session identifier to the second packet receiver; and</claim-text>
<claim-text>sending a second copy packet to a second expect queue, wherein the second copy packet is a duplicate of the second packet with the second session identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising, after sending the second packet with the second session identifier to the second packet receiver:
<claim-text>resetting the second packet receiver to obtain a third session of the second packet receiver;</claim-text>
<claim-text>generating a third session identifier, wherein the third session identifier identifies the third session of the second packet receiver;</claim-text>
<claim-text>receiving the second packet with the second session identifier by the packet classifier;</claim-text>
<claim-text>classifying the second packet with the second session identifier by the packet classifier to obtain a second classified packet;</claim-text>
<claim-text>extracting the second session identifier from the second classified packet to obtain a second extracted session identifier; and</claim-text>
<claim-text>determining whether the second extracted session identifier matches the third session identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising, upon determining that the second extracted session identifier does not match the third session identifier:
<claim-text>dropping the second classified packet; and</claim-text>
<claim-text>updating validation statistics to indicate a packet drop.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, upon determining that the first extracted session identifier matches the first session identifier:
<claim-text>updating validation statistics to indicate a packet delivery.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>extracting a payload of the first classified packet;</claim-text>
<claim-text>extracting a payload of the first copy packet; and</claim-text>
<claim-text>determining whether the payload of the first classified packet matches the payload of the first copy packet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising, upon determining that the payload of the first classified packet matches the payload of the first copy packet:
<claim-text>updating validation statistics to indicate a valid packet classification.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising, upon determining that the payload of the first classified packet does not match the payload of the first copy packet:
<claim-text>updating validation statistics to indicate a classification error.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first packet receiver is one of a plurality of packet receivers, and wherein each of the plurality of packet receivers is a different network function executing on one or more blades.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the first session identifier is one of a plurality of session identifiers, wherein each of the plurality of session identifiers is associated with a different one of the plurality of packet receivers, wherein the first expect queue is one of a plurality of expect queues, and wherein each of the plurality of expect queues is associated with a different one of the plurality of packet receivers.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system, comprising:
<claim-text>a chassis interconnect;</claim-text>
<claim-text>a physical network interface;</claim-text>
<claim-text>a first blade and a second blade communicatively coupled with each other via the chassis interconnect,
<claim-text>wherein the first blade and the second blade share the physical network interface,</claim-text>
<claim-text>wherein the first blade comprises a first packet receiver,</claim-text>
<claim-text>wherein the second blade comprises a second packet receiver; and</claim-text>
</claim-text>
<claim-text>a validation module configured to:
<claim-text>generate the first packet for sending to the first packet receiver by a first route;</claim-text>
<claim-text>insert a first session identifier into a payload of the first packet, wherein the first session identifier identifies a first session of the first packet receiver;</claim-text>
<claim-text>send a first expect packet to a first expect queue, wherein the first expect packet is a duplicate of the first packet with the first session identifier;</claim-text>
<claim-text>send the first packet with the first session identifier to a classification engine;</claim-text>
<claim-text>receive a first classified packet from the classification engine;</claim-text>
<claim-text>extract the first session identifier from the first classified packet to obtain a first extracted session identifier; and</claim-text>
<claim-text>determine whether the first extracted session identifier matches the first session identifier.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising a plurality of classification policies, wherein each of the plurality of classification policies is a deterministic algorithm that directs the routing of network traffic within the system.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising the classification engine configured to:
<claim-text>receive the first packet with the first session identifier from the validation module;</claim-text>
<claim-text>classify the first packet with the first session identifier according to the plurality of classification policies to obtain the first classified packet; and</claim-text>
<claim-text>send the first classified packet to the first packet receiver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, the validation module comprising:
<claim-text>a first packet configurator associated with the first packet receiver; and</claim-text>
<claim-text>a second packet configurator associated with the second packet receiver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, the validation module comprising:
<claim-text>the first expect queue; and</claim-text>
<claim-text>a second expect queue,</claim-text>
<claim-text>wherein the first expect queue is associated with the first packet receiver, and</claim-text>
<claim-text>wherein the second expect queue is associated with the second packet receiver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, the validation module comprising a wait timer associated with the first expect packet.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, the validation module further configured to, upon determining that the wait timer has expired:
<claim-text>delete the first expect packet from the first expect queue.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A system, comprising:
<claim-text>a hardware processor; and</claim-text>
<claim-text>a validation module, executed by the hardware processor, and configured to:
<claim-text>generate a first packet for sending to a first packet receiver by a first route;</claim-text>
<claim-text>insert a first session identifier into a payload of the first packet, wherein the first session identifier identifies a first session of the first packet receiver;</claim-text>
<claim-text>send the first packet with the first session identifier to a classification engine;</claim-text>
<claim-text>receive a first classified packet from the classification engine, wherein the first classified packet is sent by the classification engine in response to the first packet with the first session identifier;</claim-text>
<claim-text>send a first expect packet to a first expect queue, wherein the first expect packet is a duplicate of the first packet with the first session identifier;</claim-text>
<claim-text>extract the first session identifier from the first classified packet to obtain a first extracted session identifier; and</claim-text>
<claim-text>determine whether the first extracted session identifier matches the first session identifier.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the validation module is further configured to:
<claim-text>extract a payload of the first classified packet;</claim-text>
<claim-text>extract a payload of the first expect packet; and</claim-text>
<claim-text>determine whether the payload of the first classified packet matches the payload of the first expect packet.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the validation module is further configured to, upon determining that the payload of the first classified packet matches the payload of the first expect packet:
<claim-text>update validation statistics to indicate a valid packet classification. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

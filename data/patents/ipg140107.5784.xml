<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626890-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626890</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12938545</doc-number>
<date>20101103</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>162</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
<further-classification>709226</further-classification>
<further-classification>709201</further-classification>
<further-classification>709220</further-classification>
</classification-national>
<invention-title id="d2e53">Connection pool use of runtime load balancing service performance advisories</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5951694</doc-number>
<kind>A</kind>
<name>Choquier et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6035379</doc-number>
<kind>A</kind>
<name>Raju et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6041357</doc-number>
<kind>A</kind>
<name>Kunzelman et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6088728</doc-number>
<kind>A</kind>
<name>Bellemore et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6105067</doc-number>
<kind>A</kind>
<name>Batra</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6353898</doc-number>
<kind>B1</kind>
<name>Wipfel et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6389431</doc-number>
<kind>B1</kind>
<name>Frolund et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6438705</doc-number>
<kind>B1</kind>
<name>Chao et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6556659</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6615265</doc-number>
<kind>B1</kind>
<name>Leymann et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6748414</doc-number>
<kind>B1</kind>
<name>Bournas</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6912588</doc-number>
<kind>B1</kind>
<name>Jardin et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7032025</doc-number>
<kind>B2</kind>
<name>Boys</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7058717</doc-number>
<kind>B2</kind>
<name>Chao et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7174379</doc-number>
<kind>B2</kind>
<name>Agarwal et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7272653</doc-number>
<kind>B2</kind>
<name>Levy-Abegnoli et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2001/0027491</doc-number>
<kind>A1</kind>
<name>Terretta et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2001/0056493</doc-number>
<kind>A1</kind>
<name>Mineo</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2002/0055982</doc-number>
<kind>A1</kind>
<name>Goddard</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2002/0073019</doc-number>
<kind>A1</kind>
<name>Deaton</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2002/0099598</doc-number>
<kind>A1</kind>
<name>Eicher et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2002/0116457</doc-number>
<kind>A1</kind>
<name>Eshleman et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2002/0129157</doc-number>
<kind>A1</kind>
<name>Varsano</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2002/0161896</doc-number>
<kind>A1</kind>
<name>Wen et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2002/0198985</doc-number>
<kind>A1</kind>
<name>Fraenkel et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2003/0005028</doc-number>
<kind>A1</kind>
<name>Dritschler et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2003/0014523</doc-number>
<kind>A1</kind>
<name>Teloh et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2003/0204509</doc-number>
<kind>A1</kind>
<name>Dinker et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2003/0208523</doc-number>
<kind>A1</kind>
<name>Gopalan et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2004/0019680</doc-number>
<kind>A1</kind>
<name>Chao et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2004/0024979</doc-number>
<kind>A1</kind>
<name>Kaminsky et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2004/0088413</doc-number>
<kind>A1</kind>
<name>Bhogi et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2004/0098490</doc-number>
<kind>A1</kind>
<name>Dinker et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2004/0176996</doc-number>
<kind>A1</kind>
<name>Powers et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2004/0221031</doc-number>
<kind>A1</kind>
<name>Desai</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2005/0165925</doc-number>
<kind>A1</kind>
<name>Dan et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2008/0228923</doc-number>
<kind>A1</kind>
<name>Chidambaran et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>EP</country>
<doc-number>0942363</doc-number>
<kind>A2</kind>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>WO</country>
<doc-number>WO 02/07037</doc-number>
<kind>A1</kind>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>WO</country>
<doc-number>WO 03/014928</doc-number>
<kind>A2</kind>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>WO</country>
<doc-number>WO 03/062983</doc-number>
<kind>A2</kind>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>Amza, C. et al., &#x201c;Bottleneck Characterization of Dynamic Web Site Benchmarks&#x201d; <i>In Third IBM CAS Conference </i>(2002) 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>The Apache Software Foundation retrieved on Oct. 14, 2005 from the Internet &#x3c; URL: http:www.apache.org &#x3e; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>Aversa, L. et al., &#x201c;Load Balancing a Cluster of Web Servers&#x201d; <i>Technical Report </i>(1999) 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Bestavros, A. et al., &#x201c;Distributed Packet Rewriting&#x201d; <i>In Proceedings of the International Conference on Network Protocols </i>(1998) 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>Cardellini, V. et al., &#x201c;The State of the Art in Locally Distributed Web-server Systems&#x201d; <i>ACM Computing Surveys </i>(2001) 55 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Cecchet, E. et al., &#x201c;A Comparison of Software Architectures for E-business Applications&#x201d; <i>Technical Report </i>(2002) 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>&#x201c;Cisco LocalDirector 400 Series&#x201d; retrieved on Oct. 14, 2005 from the Internet&#x3c; URL: http://www.cisco.com/warp/public/cc/pd/cxsr/400/index.shtml &#x3e; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Coutinho, B. et al., &#x201c;Assessing the impact of distribution on e-business services&#x201d; <i>In First Seminar on Advanced Research in Electronic Business </i>(2002) 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Gadde, S. et al., &#x201c;Web Caching and Content Distribution: A View From the Interior&#x201d; <i>Computer Communications </i>(2001) 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Harkins, P. &#x201c;Building a Large-Scale E-commerce site with Apache and mod<sub>&#x2014;</sub>perl&#x201d; <i>In Proceedings of ApacheCom </i>(2001) 15 page document.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Hunt, G. et al., &#x201c;Network Dispatcher: a connection router for scalable Internet services&#x201d; <i>Computer Networks and ISDN Systems </i>(1998) 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>McDavid, D. &#x201c;A standard for business architecture description&#x201d; <i>IBM Systems Journal </i>(1999) 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Meira, W. et al., &#x201c;E-representative: a scalability scheme for e-commerce&#x201d; <i>In Proceedings of the Second International Workshop on Advanced Issues of E-Commercce and Web-based Information Systems </i>(2000) 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Mosberger, D. et al, &#x201c;httperf&#x2014;A Tool for Measuring Web Server Performance&#x201d; <i>In First Workshop on Internet Service Performance </i>(1998) 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Nahum, E. et al., &#x201c;Performance Issues in WWW Servers&#x201d; <i>IEEE </i>(2002) 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Oracle&#xae; Database &#x201c;Concepts&#x201d; Part No. B10743-01 (2003) 732 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Oracle&#xae; Database &#x201c;JDBC Developer's Guide and Reference&#x201d; Part No. B10979-02 (2004) 432 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Oracle&#xae; Database &#x201c;High Availability Architecture and Best Practices&#x201d; Part No. B10726-02 (2004) 222 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Oracle&#xae; Database &#x201c;Net Services Administrator's Guide&#x201d; Part No. B10775-01 (2004) 434 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Oracle&#xae; Database &#x201c;Net Services Reference Guide&#x201d; Part No. B10776-01 (2004) 274 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Oracle&#xae; Real Application Clusters &#x201c;Deployment and Performance Guide&#x201d; Part No. B10768-02 (2004) 58 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Oracle&#xae; Real Application Clusters &#x201c;Installation and Configuration Guide&#x201d; Part No. B10766-08 (2004) 468 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Henry Song, et al., &#x201c;Browser State Repository Service,&#x201d; Lecture Notes in Computer Science, vol. 2414, 2002, pp. 1-14, XP002904339.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Pierre, G. et al., &#x201c;Differentiated Strategies for Replicating Web Documents&#x201d; In Proceedings of the 5<sup>th </sup><i>International Web Caching and Content Delivery Workshop </i>(2000) 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Sontag, E. et al., &#x201c;A Notion of Input to Output Stability&#x201d; (1997) 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Teodoro, G. et al., &#x201c;Load Balancing on Stateful Clustered Web Servers&#x201d; <i>IEEE </i>(2003) 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>Wrigley, C. &#x201c;Design Criteria for Electronic Market Servers&#x201d; <i>Electronic Markets </i>(1997) pp. 12-16.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Chase, Jeffrey S., &#x201c;Dynamic Virtual Clusters in a Grid Site Manager,&#x201d; Proceedings of the IEEE International Symposium on HPDC-2003, XP010463715, pp. 90-100.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>U.S. Appl. No. 10/917,663, filed Aug. 12, 2004, Notice of Allowance, mailed Jan. 31, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>4</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709223</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709201</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11168968</doc-number>
<date>20050627</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12938545</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<continuation-in-part>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10917715</doc-number>
<date>20040812</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7664847</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>11168968</doc-number>
</document-id>
</child-doc>
</relation>
</continuation-in-part>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60652368</doc-number>
<date>20050211</date>
</document-id>
</us-provisional-application>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60495368</doc-number>
<date>20030814</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110055368</doc-number>
<kind>A1</kind>
<date>20110303</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Colrain</last-name>
<first-name>Carol L.</first-name>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Irudayaraj</last-name>
<first-name>Rajkumar A.</first-name>
<address>
<city>Mountian View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Surber</last-name>
<first-name>Douglas N.</first-name>
<address>
<city>Orinda</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Colrain</last-name>
<first-name>Carol L.</first-name>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Irudayaraj</last-name>
<first-name>Rajkumar A.</first-name>
<address>
<city>Mountian View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Surber</last-name>
<first-name>Douglas N.</first-name>
<address>
<city>Orinda</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Hickman Palermo Truong Becker Bingham Wong LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Tammy</first-name>
<department>2448</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Runtime connection load balancing of work across connections to a clustered computing system involves the routing of requests for a service, based on the current operational performance of each of the instances that offer the service. A connection is selected from an identified connection pool, to connect to an instance that provides the service for routing a work request. The operational performance of the instances may be represented by performance information that characterizes the response time and/or the throughput of the service that is provided by a particular instance on a respective node of the system, and is relative to other instances that offer the same service.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="150.37mm" wi="199.56mm" file="US08626890-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="198.80mm" wi="165.02mm" orientation="landscape" file="US08626890-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="188.81mm" wi="147.32mm" file="US08626890-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="242.65mm" wi="145.12mm" orientation="landscape" file="US08626890-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a divisional application of U.S. patent application Ser. No. 11/168,968 filed on Jun. 27, 2005, entitled &#x201c;Connection Pool Use of Runtime Load Balancing Service Performance Advisories&#x201d; which: (1) is related to and claims the benefit of priority to U.S. Provisional Patent Application No. 60/652,368 filed on Feb. 11, 2005, entitled &#x201c;Runtime Load Balancing Based on Service Level Performance&#x201d;; and (2) is a continuation-in-part of and claims the benefit of priority to U.S. patent application Ser. No. 10/917,715 filed on Aug. 12, 2004 now U.S. Pat. No. 7,664,847, entitled &#x201c;Managing Workload By Service&#x201d;, which claims the benefit of priority to U.S. Provisional Patent Application No. 60/500,096 filed on Sep. 3, 2003, entitled &#x201c;Service Based Workload Management and Measurement In a Distributed System&#x201d; and which claims the benefit of priority to U.S. Provisional Patent Application No. 60/495,368 filed on Aug. 14, 2003, entitled &#x201c;Computer Resource Provisioning.&#x201d; The present application incorporates by reference and claims the benefit of priority to all previously filed applications mentioned in this paragraph.</p>
<p id="p-0003" num="0002">This application is related to the following applications, the contents of all of which are incorporated by this reference in their entirety for all purposes as if fully set forth herein:</p>
<p id="p-0004" num="0003">U.S. patent application Ser. No. 10/917,663 filed on Aug. 12, 2004, entitled &#x201c;Fast Reorganization Of Connections In Response To An Event In A Clustered Computing System&#x201d;;</p>
<p id="p-0005" num="0004">U.S. application Ser. No. 10/917,661 filed on Aug. 12, 2004, entitled &#x201c;Calculation of Service Performance Grades in a Multi-Node Environment That Hosts the Services&#x201d;;</p>
<p id="p-0006" num="0005">U.S. patent application Ser. No. 11/168,967 filed on Jun. 27, 2005, entitled &#x201c;Runtime Load Balancing Of Work Across A Clustered Computing System Using Current Service Performance Levels&#x201d;.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0007" num="0006">The present invention relates generally to distributed computing systems and, more specifically, to techniques for connection pool use of runtime load balancing service performance advisories.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0008" num="0007">Many enterprise data processing systems rely on distributed database servers to store and manage data. Such enterprise data processing systems typically follow a multi-tier model that has a distributed database server in the first tier, one or more computers in the middle tier linked to the database server via a network, and one or more clients in the outer tier.</p>
<p id="h-0004" num="0000">Clustered Computing System</p>
<p id="p-0009" num="0008">A clustered computing system is a collection of interconnected computing elements that provide processing to a set of client applications. Each of the computing elements is referred to as a node. A node may be a computer interconnected to other computers, or a server blade interconnected to other server blades in a grid. A group of nodes in a clustered computing system that have shared access to storage (e.g., have shared disk access to a set of disk drives or non-volatile storage) and that are connected via interconnects is referred to herein as a work cluster.</p>
<p id="p-0010" num="0009">A clustered computing system is used to host clustered servers. A server is combination of integrated software components and an allocation of computational resources, such as memory, a node, and processes on the node for executing the integrated software components on a processor, where the combination of the software and computational resources are dedicated to providing a particular type of function on behalf of clients of the server. An example of a server is a database server. Among other functions of database management, a database server governs and facilitates access to a particular database, processing requests by clients to access the database.</p>
<p id="p-0011" num="0010">Resources from multiple nodes in a clustered computing system can be allocated to running a server's software. Each allocation of the resources of a particular node for the server is referred to herein as a &#x201c;server instance&#x201d; or instance. A database server can be clustered, where the server instances may be collectively referred to as a cluster. Each instance of a database server facilitates access to the same database, in which the integrity of the data is managed by a global lock manager.</p>
<p id="h-0005" num="0000">Services for Managing Applications According to Service Levels</p>
<p id="p-0012" num="0011">Services are a feature for database workload management that divide the universe of work executing in the database, to manage work according to service levels. Resources are allocated to a service according to service levels and priority. Services are measured and managed to efficiently deliver the resource capacity on demand. High availability service levels use the reliability of redundant parts of the cluster.</p>
<p id="p-0013" num="0012">Services are a logical abstraction for managing workloads. Services can be used to divide work executing in a database cluster into mutually disjoint classes. Each service can represent a logical business function, e.g., a workload, with common attributes, service level thresholds, and priorities. The grouping of services is based on attributes of the work that might include the application function to be invoked, the priority of execution for the application function, the job class to be managed, or the data range used in the application function of a job class. For example, an electronic-business suite may define a service for each responsibility, such as general ledger, accounts receivable, order entry, and so on. Services provide a single system image to manage competing applications, and the services allow each workload to be managed in isolation and as a unit. A service can span multiple server instances in a cluster or multiple clusters in a grid, and a single server instance can support multiple services.</p>
<p id="p-0014" num="0013">Middle tier and client/server applications can use a service by, for example, by specifying the service as part of the connection. For example, application server data sources can be set to route to a service. In addition, server-side work sets the service name as part of the workload definition. For example, the service that a job class uses is defined when the job class is created, and during execution, jobs are assigned to job classes and job classes run within services.</p>
<p id="h-0006" num="0000">Database Sessions</p>
<p id="p-0015" num="0014">In order for a client to interact with a database server on a database cluster, a session is established for the client. Each session belongs to one service. A session, such as a database session, is a particular connection established for a client to a server, such as a database instance, through which the client issues a series of requests (e.g., requests for execution of database statements). For each database session established on a database instance, session state data is maintained that reflects the current state of a database session. Such information contains, for example, the identity of the client for which the session is established, the service used by the client, and temporary variable values generated by processes executing software within the database session. Each session may each have its own database process or may share database processes, with the latter referred to as multiplexing.</p>
<p id="p-0016" num="0015">Connections are mechanisms for enabling sessions. A connection may refer to either a physical mechanism or a logical connection mechanism, or both. Often, there is a one-to-one mapping of logical connections to physical connections; however, it is possible to have more than one logical connection associated with single physical connection or more than one physical connection associated with a single logical connection. Regardless, management of connections to a clustered database that comprises multiple server instances executing on multiple machines is amplified as the number of instances, machines and clusters increases. An important and challenging feature that is expected from a clustered database is management of many connections to the clustered database server.</p>
<p id="p-0017" num="0016">Generally, a connection is a vehicle to perform work with a database. A business transaction may comprise one or more work requests. When using a connection pool, an application &#x201c;borrows&#x201d; a connection from a connection pool, executes the work requests, and then returns the connection back into the connection pool.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0007" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017">Embodiments of the present invention are depicted by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates an operating environment in which an embodiment can be implemented;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram that illustrates a method for routing work requests to a clustered computing system, according to an embodiment; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram that depicts a computer system upon which an embodiment of the invention may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0008" level="1">DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION</heading>
<p id="p-0022" num="0021">Techniques for connection pool use of runtime load balancing service performance advisories are described. As described in U.S. patent application Ser. No. 11/168,967 filed on Jun. 27, 2005, entitled &#x201c;Runtime Load Balancing Of Work Across A Clustered Computing System Using Current Service Performance Levels&#x201d;, current service level performance information and work distribution advisories are computed and made available to client subscribers, with which work routing decisions can be made. Service level performance information and work distribution advisories regarding the different instances of the system can be used to allow balancing of the work across the system.</p>
<p id="h-0009" num="0000">Functional Overview of Embodiments</p>
<p id="p-0023" num="0022">Runtime load balancing of work across a clustered computing system involves servers calculating, and clients utilizing, the current service performance levels of each instance in the system. Such performance levels (&#x201c;performance grades&#x201d;) are based on performance metrics, and corresponding percentage distribution advisories are posted for use by various types of client subscribers.</p>
<p id="p-0024" num="0023">Within a multi-instance server, various performance metrics are gathered for each instance. These performance metrics may include operations completed per second, elapsed time per operation, CPU utilization, I/O utilization, network utilization, and the like. A moving average of the metrics is usually used in order to smooth out any short-term variations. In one embodiment, each instance within the server periodically sends its performance metrics to a centralized location.</p>
<p id="p-0025" num="0024">The server then computes a performance grade for each instance. The computation used may vary by policy. Examples of possible policies include: (a) using estimated bandwidth as a performance grade, (b) using spare capacity as a performance grade, or (c) using response time as a performance grade. The server may compute a performance grade for each instance without regard to the performance of other instances, or the server may holistically look at all instances to produce a grade for each instance. The server publishes the performance grades of the instances to the client subscribers.</p>
<p id="p-0026" num="0025">Using the techniques described herein, clients distribute work requests across servers in a clustered computing environment as the requests arrive. Automatically and intelligently directing work requests to the best server instances, based on real-time service performance metrics, minimizes the need to manually relocate work within the clustered system. In general, basing work request routing decisions on service response time and/or service throughput recognizes, for non-limiting examples, differences in various machine's current workload and computing power, sessions that are blocked in wait mode, failures that block processing, and competing services having different levels of priority.</p>
<p id="p-0027" num="0026">Techniques for runtime connection load balancing across a clustered computing system using service performance advisories are described. Such techniques are used to route requests for performance of work, based on performance metrics associated with various server instances that offer services that perform the work. Work requests are routed to connections that best serve the work, and such routing techniques respond quickly to changing conditions in the system.</p>
<p id="p-0028" num="0027">In one aspect, a request for a connection to a clustered computing system for performance of some work is received, such as by a connection pool manager. A pool of connections to the system is identified, where the pool is associated with a service that performs the work for which the connection is requested. Instances that offer the service that performs the requested work are identified. Based on operational performance metrics associated with the service provided on the various identified instances, a connection is selected from the identified pool, to connect to an instance that provides the service for routing a request for performance of the work.</p>
<p id="h-0010" num="0000">Operating Environment</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram that illustrates an operating environment in which an embodiment can be implemented. Embodiments of the invention may be implemented using a connection pool manager that is associated with a clustered computing system, such as a clustered database server comprising multiple database server instances executing on multiple host nodes to access and manipulate shared data stored on a data storage mechanism. The example operating environment of <figref idref="DRAWINGS">FIG. 1</figref> is illustrated and described in the context of a clustered database server for purposes of discussion, however, it is contemplated that any distributed database server or distributed computing system could benefit from use of the broader techniques enabled herein. Therefore, embodiments of the invention are not limited to use with a clustered database system.</p>
<p id="p-0030" num="0029">One or more clients <b>102</b><i>a</i>-<b>102</b><i>n </i>are communicatively coupled to a distributed, or clustered, database server (&#x201c;database server&#x201d;) <b>104</b>. Database server <b>104</b> refers to database server instances <b>108</b><i>a</i>-<b>108</b><i>n </i>and nodes <b>110</b><i>a</i>-<b>110</b><i>n </i>on which the instances execute. Other components may also be considered as part of the database server <b>104</b>, such as a connection pool manager <b>114</b>, connection pools <b>116</b><i>a</i>-<b>116</b><i>n</i>, a notification service daemon <b>118</b> and an event handler <b>120</b>. The actual architecture in which the foregoing components are configured may vary from implementation to implementation.</p>
<p id="p-0031" num="0030">In <figref idref="DRAWINGS">FIG. 1</figref>, connection pool manager <b>114</b> and connection pools <b>116</b><i>a</i>-<b>116</b><i>n </i>are depicted as components not within database server <b>104</b> for purposes of example. Connection pool manager <b>114</b> is communicatively coupled to and utilized by an application server or, generally, a middle tier application <b>122</b>. In addition, connection pool manager <b>114</b> is logically coupled to connection pools <b>116</b><i>a</i>-<b>116</b><i>n</i>, which are logically coupled to database server <b>104</b>. Notification service daemon <b>118</b> and event handler <b>120</b> are also depicted as not within database server <b>104</b>, and are communicatively coupled to database server <b>104</b>, in particular embodiments.</p>
<p id="p-0032" num="0031">Clients <b>102</b><i>a</i>-<b>102</b><i>n </i>are applications that execute processes on the database server <b>104</b> via, for example, a network. One server instance may be a client of another server instance.</p>
<p id="p-0033" num="0032">Database <b>112</b> comprises data and metadata that is stored on a persistent memory mechanism, such as a set of hard disks that are communicatively coupled to nodes <b>110</b><i>a</i>-<b>110</b><i>n</i>, each of which is able to host one or more instances <b>108</b><i>a</i>-<b>108</b><i>n</i>, each of which hosts at least a portion of one or more services. Such data and metadata may be stored in database <b>112</b> logically, for example, according to object-oriented constructs, object-relational constructs, relational constructs, multidimensional constructs, or a combination of relational and multidimensional database constructs. Nodes <b>110</b><i>a</i>-<b>110</b><i>n </i>can be implemented as a conventional computer system, such as computer system <b>300</b> illustrated in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0034" num="0033">As described, a database server, such as each of instances <b>108</b><i>a</i>-<b>108</b><i>n</i>, is a combination of integrated software components and an allocation of computational resources (such as memory and processes) for executing the integrated software components on a processor, where the combination of the software and computational resources are used to manage a particular database, such as database <b>112</b>. Among other functions of database management, a database server typically governs and facilitates access to database <b>112</b> by processing requests from clients to access the database <b>112</b>. Therefore, connection pool manager <b>114</b>, which manages connections to database server <b>104</b>, can be implemented as a processing layer between clients <b>102</b><i>a</i>-<b>102</b><i>n </i>and instances <b>108</b><i>a</i>-<b>108</b><i>n</i>, which manage access to database <b>112</b>. Instances <b>108</b><i>a</i>-<b>108</b><i>n</i>, in conjunction with respective nodes <b>110</b><i>a</i>-<b>110</b><i>n</i>, host services, described hereafter.</p>
<p id="h-0011" num="0000">Services <b>106</b></p>
<p id="p-0035" num="0034">As described, services are a logical abstraction for managing workloads. A service, such as service <b>106</b><i>a</i>-<b>106</b><i>n</i>, is the performance of work of a particular type or category, where the work performed is for the benefit of one or more clients of one or more servers, and where a level or quality of performance is prescribed for the particular type or category of work. The work performed as part of a service includes any use or expenditure of computer resources, including, for example, CPU processing time, storing and accessing data in volatile memory and read and writes from and/or to persistent storage (i.e., IO processing), and use of network or bus bandwidth.</p>
<p id="p-0036" num="0035">In general, a service is work that is performed by a database server and typically includes the work performed to process and/or compute queries that require access to a particular database. The term query as used herein refers to a statement that conforms to a database language, such as SQL, and includes statements that specify operations to add, delete, or modify data and create and modify database objects, such as tables, objects views, and executable routines.</p>
<p id="p-0037" num="0036">A single database may support many services. For a non-limiting example, services may be divided into a FIN service and a PAY service, where the FIN and PAY services share the clustered database. The FIN service is the database service performed by server <b>104</b> for a FIN application. Typically, the FIN service involves accessing database objects on database <b>112</b> that store data for FIN applications. The PAY service is the service performed by server <b>104</b> for PAY applications. Typically, the PAY service involves accessing database objects on database <b>112</b> that store data for PAY applications.</p>
<p id="p-0038" num="0037">Database instances of a database cluster are allocated to support one or more services. When a database instance (or node) is allocated to perform a service, the database instance is referred to herein as hosting, running, or providing the service, and the service is referred to herein as running or being placed on the database instance.</p>
<p id="p-0039" num="0038">Services can be provided by one or more database server instances. The service on each instance is referred to as a master of that service. Thus, multiple server instances may work together to provide a service to a client. In <figref idref="DRAWINGS">FIG. 1</figref>, service <b>106</b><i>a </i>(e.g., FIN) is depicted, with dashed brackets, as being provided by instance <b>108</b><i>a</i>, service <b>106</b><i>b </i>(e.g., PAY) is depicted as being provided by instances <b>108</b><i>a </i>and <b>108</b><i>b</i>, and service <b>106</b><i>n </i>is depicted as being provided by instances <b>108</b><i>a</i>-<b>108</b><i>n. </i></p>
<p id="h-0012" num="0000">Connection Pool Manager <b>114</b> and Connection Pools <b>116</b></p>
<p id="p-0040" num="0039">A connection pool is a named group of identical connections to the database that are created when the connection pool is registered. Applications that interact with the database borrow connections from the pool, use the connections to execute work requests, and then return the connections to the pool. Connection pools operate by creating connections infrequently and keeping the connections in the connection pool for long duration. Work requests come into the connection pool with high frequency, borrow these connections, and exist for relatively short duration.</p>
<p id="p-0041" num="0040">As described herein, work requests can be distributed across the instances of a cluster offering a service, using (1) the service performance, e.g., as represented by response time and/or throughput; (2) available resource capacity, e.g., resource profile; and (3) service resource needs, e.g., service demand. In one embodiment, balancing of work requests occurs at two different times&#x2014;at connect time and at runtime. These are referred to as Connection Load Balancing and Runtime Connection Load Balancing.</p>
<p id="p-0042" num="0041">The connection pool manager <b>114</b> is a software component, which manages connection pools <b>116</b><i>a</i>-<b>116</b><i>n </i>and requests for connections for sessions with server <b>104</b>, including the routing of connection requests to the appropriate connection pool <b>116</b><i>a</i>-<b>116</b><i>n</i>, based on the pool setup and configuration. Each connection pool <b>116</b><i>a</i>-<b>116</b><i>n </i>is a set of connections to database sessions. Each session, for which communications between a client <b>102</b><i>a</i>-<b>102</b><i>n </i>and an instance <b>108</b><i>a</i>-<b>108</b><i>n </i>are transmitted through one of the connections from a respective connection pool <b>116</b><i>a</i>-<b>116</b><i>n</i>, is considered a session with an instance <b>108</b><i>a</i>-<b>108</b><i>n. </i></p>
<p id="p-0043" num="0042">Each connection can be instantiated as a connection object and for each connection object, the following information is recorded when a database session connection is established: (1) the service that the session is using; (2) the name of the node on which the associated service is available and to which this connection belongs; (3) the unique name of the database in use; and (4) the name of the instance to which this connection's database session belongs. Thus, the location (at times referred to as the &#x201c;signature&#x201d;) of each session is uniquely identified. The manner in which the signature is recorded may vary from implementation to implementation. For non-limiting examples, a signature may be recorded to a bulletin board mechanism that is accessible to various subscribers, or the signature may be stored in an indexed table or a hash table. The signature is also returned to the connection in various ways. In one embodiment, a handle is used as part of a connection conversation. Detailed actions that various subscribers may perform in response to notification events are beyond the scope of this description.</p>
<p id="p-0044" num="0043">Generally, connection pool manager <b>114</b> is responsible for creation, maintenance and removal of connections and connection pools <b>116</b><i>a</i>-<b>116</b><i>n</i>. For example, connection pool manager <b>114</b> may be used to manage connection pools <b>116</b><i>a</i>-<b>116</b><i>n </i>through use of a set of APIs. In addition, connection pool manager <b>114</b> binds a connection pool <b>116</b><i>a</i>-<b>116</b><i>n </i>to its corresponding data source object. In this context, a data source object is an abstraction of an interface to the database <b>112</b>. Hence, binding a connection pool to a data source object may include mapping the connection pool to the data source object via a URL that identifies the associated service and the port through which the database <b>112</b> is accessed for the service.</p>
<p id="p-0045" num="0044">A particular service, such as any of services <b>106</b><i>a</i>-<b>106</b><i>n</i>, may be provided by one or more instances <b>108</b><i>a</i>-<b>108</b><i>n</i>. A particular service is associated with a particular connection pool <b>116</b><i>a</i>-<b>116</b><i>n </i>that consists of multiple connections to the one or more instances. For example, service <b>106</b><i>a </i>may be provided through connections from connection pool <b>106</b><i>a</i>; service <b>106</b><i>b </i>may be provided by connections from connection pool <b>106</b><i>b</i>;and service <b>106</b><i>n </i>may be provided by connections from connection pool <b>106</b><i>n</i>. Such an association, or mapping, can be implemented by setting and maintaining URLs that identify the instances <b>108</b><i>a</i>-<b>108</b><i>n </i>that can provide a given service <b>106</b><i>a</i>-<b>106</b><i>n</i>, where such an association is maintained by the connection pool manager <b>114</b>. The database publishes many services. The connection pools <b>116</b><i>a</i>-<b>116</b><i>n </i>can use any service that is identified, such as by the URL or a connect string.</p>
<p id="h-0013" num="0000">Notification Service</p>
<p id="p-0046" num="0045">In general, a daemon is a process that runs in the background and that performs a specified operation at predefined times or in response to certain events. In general, an event is an action or occurrence whose posting is detected by a process. Notification service daemon <b>118</b> is a process that receives alert and advisory information from server <b>104</b>, such as from background manageability monitors that handle automatic management functions of instances <b>108</b><i>a</i>-<b>108</b><i>n</i>. The server <b>104</b> posts service level performance events automatically and periodically, for subscribers to such events, such as runtime connection load balancing clients <b>102</b><i>a</i>-<b>102</b><i>n</i>. In one embodiment, service level performance events are posted periodically based on the service request rate.</p>
<p id="p-0047" num="0046">Notification service daemon <b>118</b> has a publisher-subscriber relationship with event handler <b>120</b> through which service performance information that is received by daemon <b>118</b> from server <b>104</b> is transmitted as work distribution advisory events to event handler <b>120</b>. In general, an event handler is a function or method containing program statements that are executed in response to an event. In response to receiving event information from daemon <b>118</b>, event handler <b>120</b> at least passes along the event type and attributes, which are described herein. A single event handler <b>120</b> is depicted in <figref idref="DRAWINGS">FIG. 1</figref> as serving all subscribers. However, different event handlers may be associated with different subscribers. The manner in which handling of advisory events is implemented by various subscribers to such events is unimportant, and may vary from implementation to implementation.</p>
<p id="p-0048" num="0047">For a non-limiting example, notification service daemon <b>118</b> may use the Oracle Notification System (ONS) API, which is a messaging mechanism that allows application components based on the Java 2 Platform, Enterprise Edition (J2EE) to create, send, receive, and read messages.</p>
<p id="h-0014" num="0000">Load Balancing in Clustered Computing Systems</p>
<p id="p-0049" num="0048">In an embodiment, the connection pool manager performs (1) connection load balancing (e.g., distribution of connections) and (2) runtime connection load balancing (e.g., distribution of work), based on service level performance metrics associated with server instances that provide a service that performs work on a node of a clustered computing system. For example, with reference to <figref idref="DRAWINGS">FIG. 1</figref>, work requests coming from clients <b>102</b><i>a</i>-<b>102</b><i>n </i>may be distributed by connection pool manager <b>114</b>, via connections, among nodes <b>110</b><i>a</i>-<b>110</b><i>n </i>that host instances <b>108</b><i>a</i>-<b>108</b><i>n </i>that offer services <b>106</b><i>a</i>-<b>106</b><i>n </i>that perform requested work. The distribution of the requested work is based on service level performance metrics that are associated with the active instances that are providing the particular service(s) that perform the requested work.</p>
<p id="h-0015" num="0000">Service Measures</p>
<p id="p-0050" num="0049">A performance metric is data that indicates the quality of performance realized by services, for one or more resources. A performance metric of a particular type that can be used to gauge a characteristic or condition that indicates a service level of performance is referred to herein as a service measure. Service measures include, for example, completed work per second, elapsed time for completed calls, resource consumption and resource demand, wait events, and the like. Service measures are automatically maintained, for every service.</p>
<p id="p-0051" num="0050">Approaches to generating performance metrics, including service-based performance metrics on which service measures are based, which may be used for load balancing across a database cluster, are described in U.S. patent application Ser. No. 10/917,715 filed on Aug. 12, 2004, entitled &#x201c;Managing Workload By Service&#x201d; and U.S. patent application Ser. No. 11/168,967 filed on Jun. 27, 2005, entitled &#x201c;Runtime Load Balancing Of Work Across A Clustered Computing System Using Current Service Performance Levels&#x201d;.</p>
<p id="p-0052" num="0051">For example, a background process may generate performance metrics from performance statistics that are generated for each session and service hosted on a database instance. Like performance metrics, performance statistics can indicate a quality of performance. However, performance statistics, in general, include more detailed information about specific uses of specific resources. Performance statistics include, for example, how much time CPU time was used by a session, the throughput of a call, the number of calls a session made, the response time required to complete the calls for a session, how much CPU processing time was used to parse queries for the session, how much CPU processing time was used to execute queries, how many logical and physical reads were performed for the session, and wait times for input and output operations to various resources, such as wait times to read or write to a particular set of data blocks. Performance statistics generated for a session are aggregated by services and service subcategories (e.g. module, action) associated with the session.</p>
<p id="h-0016" num="0000">Connection Load Balancing-Generally</p>
<p id="p-0053" num="0052">A good implementation of an application that connects to a clustered computing system connects once to the system and stays connected. Since connections are relatively static, a process for balancing connections across a service that is offered by multiple server instances should not depend on metrics that vary widely during the lifetime of the connection.</p>
<p id="h-0017" num="0000">Service Performance Metrics for Use in Connection Load Balancing</p>
<p id="p-0054" num="0053">Therefore, in one embodiment, metrics regarding instances providing a particular service are available for use when distributing the assignment, or allocation, of connections from a given connection pool among instances providing the particular service: (1) session count, per instance; (2) run queue length of the node hosting the instance; (3) service level quality weighted by available capacity; and (4) weighted session count, per service, which are described in U.S. patent application Ser. No. 10/917,715. Once connections are allocated to a particular instance, the connections are ready to establish sessions with server instances in the computing system and to accept work requests for servicing. Further, in one embodiment, such work requests are routed to server instances via the connections, based on runtime load balancing performance advisories (e.g., work distribution percentages), such as those described in U.S. patent application Ser. No. 11/168,967 filed on Jun. 27, 2005, entitled &#x201c;Runtime Load Balancing Of Work Across A Clustered Computing System Using Current Service Performance Levels&#x201d;.</p>
<p id="p-0055" num="0054">For services that are uniformly distributed across a clustered computing system, and for nodes having similar processing capacities, the session count per instance is useful in evenly distributing connections across the system. For services that use a subset of the instances of a clustered computing system, and for nodes having different processing capacities, service quality weighted by available capacity is useful for distributing connections across the system by placing more potential sessions on the nodes that have less current processing load, at the time of connection creation.</p>
<p id="p-0056" num="0055">For all services, including those having different priorities and using all or a subset of instances, and for nodes having any processing capacity, the goodness of the service is a ranking of the relative quality of service that the service is experiencing at an instance. In this embodiment, a performance grade associated with a particular service is, generally, a normalized ranking that compares the service response time and/or throughput of a service on an instance. Furthermore, the performance grades may also consider instance states, such as a state in which access to an instance is restricted. Examples of goodness rankings are &#x201c;excellent,&#x201d; &#x201c;average,&#x201d; &#x201c;violating,&#x201d; and &#x201c;restricted.&#x201d;</p>
<p id="p-0057" num="0056">For all services, including those having different priorities and using all or a subset of instances, and for nodes having any processing capacity, the weighted session count by service of the service is a ranking of the power of the node to serve that service. The weighting compares the session count for the service to the node power. It also considers states such as a state in which access to an instance is restricted.</p>
<p id="p-0058" num="0057">Ideally, connections are created infrequently and stay in a connection pool for a relatively long duration. Therefore, the run queue length and the goodness value of a service when the connection is created at, for example, 9:00 A.M., has little to no relevance to how good this connection is at 5:00 P.M. The run queue length and goodness metrics are more beneficial when computed frequently, for example, as close to use-time as reasonably possible, and/or when used in combination with other methods that gravitate the work requests to the best instances.</p>
<p id="p-0059" num="0058">A session lifetime by service metric allows a determination of whether to consider static metrics or dynamic metrics for connection load balancing. The weighted sessions by service metric is useful in creating connections across a clustered computing system, that are long-lived. This is typical for connection pools and SQL*Forms sessions. The weighted sessions by service metric is insensitive to time and minimizes the need to relocate sessions as the profile of the system changes.</p>
<p id="h-0018" num="0000">Runtime Connection Load Balancing</p>
<p id="p-0060" num="0059">Runtime connection load balancing techniques are used when selecting connections from a connection pool to execute work requests. For connection pools that allocate connections to services offered by one instance only, the first available connection in the pool is adequate for use in routing and servicing a work request. However, when connection pools allocate connections to services that span multiple instances, using a policy such as service metrics distributes the work requests across instances that are serving the service well, and avoids sending work to slow, hung, failed and restricted instances.</p>
<p id="p-0061" num="0060">For example, the service time, service throughput, and resource consumption are available for each service at each instance. Just as this data may be used by the connection pool manager to allocate connections across a service, the connection pool manager may use these data when selecting a connection from the pool to best serve a work request.</p>
<p id="p-0062" num="0061">Connection load balancing is used only when connections are created. Since connections should be created infrequently, connection load balancing benefits from use of metrics that do not vary over time. Conversely, runtime connection load balancing is used whenever a work request (e.g., request for execution of a database statement) is made to a connection pool for a connection. This is a very frequent activity. Hence, the metric(s) used for runtime connection load balancing should be sensitive to the current performance of services across the system. The shorter the duration of the work request, the more sensitive the metric should be. Therefore, the elapsed time for completed calls (related to service time) and completed work (related to service throughput), in conjunction with the available capacity of a node (i.e., current node profile) and the resources required by a service (i.e., demand), are very good metrics for runtime connection load balancing purposes.</p>
<p id="h-0019" num="0000">Service Events</p>
<p id="p-0063" num="0062">In one embodiment, each connection pool manager <b>116</b><i>a</i>-<b>116</b><i>n </i>(<figref idref="DRAWINGS">FIG. 1</figref>) subscribes to performance grade advisory events, where the event payload contains a service performance grade for each instance offering the service. Each event is relative to a particular service. In an embodiment, the posting process acquires these data once for all active services, and then posts an event per service.</p>
<p id="p-0064" num="0063">As discussed, notification service daemon <b>118</b> has a publisher/subscriber relationship with event handler <b>120</b>, through which certain event information that is received by daemon <b>118</b> from database server <b>104</b> is transmitted to event handler <b>120</b>. In response to receiving event information from daemon <b>118</b>, event handler <b>120</b> invokes a method of connection pool manager <b>114</b>, passing along the event type and property, which are described hereafter.</p>
<p id="p-0065" num="0064">In one embodiment, a message format that is used for communicating service performance information in an event payload, comprises name/value pairs. Specifically, a service event may comprise the following:</p>
<p id="p-0066" num="0065">Event Type=performance grades (e.g., &#x201c;Database/Service/Grades/$service_name&#x201d;);</p>
<p id="p-0067" num="0066">Version=version number of the publication protocol;</p>
<p id="p-0068" num="0067">Database name=unique name identifying database;</p>
<p id="p-0069" num="0068">Grades tuple (repeating for plurality of instances offering service)=instance name, flag (i.e., GOOD, VIOLATING, NODATA, UNKNOWN), grade; and</p>
<p id="p-0070" num="0069">Timestamp=time event was calculated at the server.</p>
<p id="h-0020" num="0000">Runtime Connection Load Balancing Based on Performance Grade</p>
<p id="p-0071" num="0070">In an embodiment, runtime balancing of system load (e.g., work being performed by the system) is based on service performance grade advisories, e.g., using the grades tuple (instance name, flag, grade) as the basis for making decisions. As discussed, these data are published to remote listeners that subscribe to the data publication. By providing this data to a connection pool manager client, better overall service is obtained by proactively routing work to the instances that best serve the work, rather than relocating sessions later in a reactive manner.</p>
<p id="p-0072" num="0071">According to one embodiment, a method for runtime connection load balancing using service performance comprises (1) connection load balancing, i.e., allocating connections in a connection pool (which is associated with a particular service) to relatively well-performing instances (&#x201c;gravitating&#x201d;) based, for example, on service goodness value and possibly a service delta value; and (2) runtime connection load balancing, i.e., in response to receiving work requests, routing the work requests to the currently well-performing instances based, for example, on service goodness percentages.</p>
<p id="h-0021" num="0000">Server Functionality</p>
<p id="p-0073" num="0072">In one embodiment, every few seconds every instance updates the moving average of its local service metrics and posts this to a master instance. The aggregated data and percentages are calculated internally at the master, and then posted to the event system, as described in U.S. patent application Ser. No. 11/168,967 filed on Jun. 27, 2005, entitled &#x201c;Runtime Load Balancing Of Work Across A Clustered Computing System Using Current Service Performance Levels&#x201d;.</p>
<p id="h-0022" num="0000">Connection Pool Functionality</p>
<p id="p-0074" num="0073">I. Connection Retrieval</p>
<p id="p-0075" num="0074">The server posts performance grade tuples to the connection pool periodically, where the tuples provided are for each database service. The grade tuples include grades, which represent percentage of work to send to that instance, as well as a flag indicating the state of the instance. The sum of the percentages for each service is 100%.</p>
<p id="p-0076" num="0075">The Connection Pool retrieves connections to instances based on the four possible flag values: GOOD, UNKNOWN, VIOLATING, NO_DATA. The first three flag values indicate that the instance percentages are valid and should be honored. The Connection Pool will retrieve connections to these instances. The NO_DATA flag indicates that the instance is not responding, in which case the Connection Pool will not retrieve any connections to an invalid instance.</p>
<p id="p-0077" num="0076">In one embodiment, the Connection Pool satisfies a connection request to a given service by performing the following steps:</p>
<p id="p-0078" num="0077">(1) Compute the sum of the percentages for the valid instances providing the service.</p>
<p id="p-0079" num="0078">(2) Compute a pseudo random number greater than or equal to zero and less than the sum computed in step 1.</p>
<p id="p-0080" num="0079">(3) Arrange the instances in some arbitrary order. Set the value TOTAL to zero. Consider the first instance.</p>
<p id="p-0081" num="0080">(4) Add the percentage for the instance to TOTAL.</p>
<p id="p-0082" num="0081">(5) If the pseudo random number is less than TOTAL, select the instance. Otherwise, consider the next instance and go to step 4.</p>
<p id="p-0083" num="0082">(6) Retrieve a connection from the selected instance from the connection pool.</p>
<p id="p-0084" num="0083">II. Connection Gravitation</p>
<p id="p-0085" num="0084">A purpose of a connection pool, such as connection pools <b>116</b><i>a</i>-<b>116</b><i>n</i>, is to have connections that are ready to use when connection requests are received. Consistently and periodically gravitating the connections from a given connection pool toward the well-performing (&#x201c;healthy&#x201d;) instances helps to ensure that all connections are good to use when work requests are received. A connection pool manager, such as connection pool manager <b>114</b>, typically releases connections that are idle in the connection pool for a specified expiration period, and some connection pool managers release connections in the connection pool because the connections have been in the pool for some time.</p>
<p id="p-0086" num="0085">Generally, the process of gravitating connections toward the healthy instances may comprise any of (1) determining which connections to retire, (2) determining which connections to keep and, (3) when connections are added, ensuring that these new connections are allocated to healthy instances. Previously, the connections were retired randomly and at arbitrary times, i.e., there was no knowledge as to which connections were good connections relative to their ability to facilitate performance of work, and no knowledge of when retiring connections was needed.</p>
<p id="p-0087" num="0086">Which instance is a connection is connected to is determined by the metrics current at the moment when the connection is created. As a result, the number of connections to each instance approximates the percentages in the metrics. Over time the metrics change, but the connections to the instance to which it is connected typically would not change. As a result, the number of connections to each instance would no longer approximate the percentages. This results in too many connections with low percentages and too few connections to instances with high percentages. Hence, connection gravitation gradually rectifies this problem by selectively retiring connections to an instance.</p>
<p id="p-0088" num="0087">Connections are selected for retirement based on the following two ratios:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Attempted Connection Ratio=(Request count per instance)/(Total request count);<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Connection Ratio=(Connection count per instance)/(Total connections in the pool).<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0089" num="0088">Retirement criteria for an instance is met when there are far more connections available to an instance than the metrics percentage indicates for that instance. If for a given instance the Connection Ratio is much greater than the Attempted Connection Ratio, then instances to that connection can be retired. In one embodiment, once an instance is chosen for retiring connections, about 25% of available connections are actually retired. This allows for a gradual gravitation over time.</p>
<p id="h-0023" num="0000">Method for Routing Work Requests to a Clustered Computing System</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram that illustrates a method for routing work requests to a clustered computing system, according to an embodiment of the invention. The method may be performed by any sequence(s) of one or more instructions (e.g., a software module) which, when executed, cause one or more processors to perform steps illustrated in the blocks of <figref idref="DRAWINGS">FIG. 2</figref>. For example, the method may be performed by connection pool manager <b>114</b> in the context of a database server <b>104</b>. However, the techniques embodied in the method of <figref idref="DRAWINGS">FIG. 2</figref> may be performed by any implementation that manages and/or distributes work across a clustered computing system by providing connections to a component or module that processes work requests, for routing of such requests.</p>
<p id="p-0091" num="0090">At block <b>202</b>, a request is received for a connection to the clustered computing system for performance of work. For example, connection pool manager <b>114</b> receives a request from a client <b>102</b><i>a</i>, for a connection to database server <b>104</b>. The request may be in the form of an explicit request for a connection, a request for work, or any other type of request that would require a session with, and therefore a connection to, the clustered computing system.</p>
<p id="p-0092" num="0091">At block <b>204</b>, a pool of connections is identified that is associated with a service that performs the work for which the connection is requested. For example, connection pool manager <b>114</b> determines that service <b>106</b><i>b </i>performs the requested work and identifies that connection pool <b>116</b><i>b </i>serves connections to the service <b>106</b><i>b</i>. The service that performs the work may be identified in a number of ways, such as based on the nature of the request or based on information contained in the request that specifies the service. A mapping between services and associated connection pools may be accessed to identify the specific pool that is associated with the identified service.</p>
<p id="p-0093" num="0092">At block <b>206</b>, a connection to an instance that provides the requested service is selected from the identified connection pool, based on metrics related to the operational performance of the service on the identified instances. The selected connection is used for routing a request to the particular node/instance/service for performance of the work. In one embodiment, the connection is selected based on the service grade, described above. For example, the selection is based on the substantially current service response time or throughput for each of the instances providing the service, characterized by the grades tuple (i.e., instance name, flag, grade (i.e., work distribution percentage)), or based on a subset thereof.</p>
<p id="h-0024" num="0000">Implementation Mechanisms</p>
<p id="p-0094" num="0093">The approach for runtime connection load balancing of work across a clustered computing system, as described herein, may be implemented in a variety of ways and the invention is not limited to any particular implementation. The approach may be integrated into a system or a device, or may be implemented as a stand-alone mechanism. Furthermore, the approach may be implemented in computer software, hardware, or a combination thereof.</p>
<p id="h-0025" num="0000">Hardware Overview</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram that depicts a computer system <b>300</b> upon which an embodiment of the invention may be implemented. Computer system <b>300</b> includes a bus <b>302</b> or other communication mechanism for communicating information, and a processor <b>304</b> coupled with bus <b>302</b> for processing information. Computer system <b>300</b> also includes a main memory <b>306</b>, such as a random access memory (RAM) or other dynamic storage device, coupled to bus <b>302</b> for storing information and instructions to be executed by processor <b>304</b>. Main memory <b>306</b> also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor <b>304</b>. Computer system <b>300</b> further includes a read only memory (ROM) <b>308</b> or other static storage device coupled to bus <b>302</b> for storing static information and instructions for processor <b>304</b>. A storage device <b>310</b>, such as a magnetic disk or optical disk, is provided and coupled to bus <b>302</b> for storing information and instructions.</p>
<p id="p-0096" num="0095">Computer system <b>300</b> may be coupled via bus <b>302</b> to a display <b>312</b>, such as a cathode ray tube (CRT), for displaying information to a computer user. An input device <b>314</b>, including alphanumeric and other keys, is coupled to bus <b>302</b> for communicating information and command selections to processor <b>304</b>. Another type of user input device is cursor control <b>316</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>304</b> and for controlling cursor movement on display <b>312</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p>
<p id="p-0097" num="0096">The invention is related to the use of computer system <b>300</b> for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system <b>300</b> in response to processor <b>304</b> executing one or more sequences of one or more instructions contained in main memory <b>306</b>. Such instructions may be read into main memory <b>306</b> from another machine-readable medium, such as storage device <b>310</b>. Execution of the sequences of instructions contained in main memory <b>306</b> causes processor <b>304</b> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.</p>
<p id="p-0098" num="0097">The term &#x201c;machine-readable medium&#x201d; as used herein refers to any medium that participates in providing instructions to processor <b>304</b> for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device <b>310</b>. Volatile media includes dynamic memory, such as main memory <b>306</b>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>302</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.</p>
<p id="p-0099" num="0098">Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.</p>
<p id="p-0100" num="0099">Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor <b>304</b> for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system <b>300</b> can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus <b>302</b>. Bus <b>302</b> carries the data to main memory <b>306</b>, from which processor <b>304</b> retrieves and executes the instructions. The instructions received by main memory <b>306</b> may optionally be stored on storage device <b>310</b> either before or after execution by processor <b>304</b>.</p>
<p id="p-0101" num="0100">Computer system <b>300</b> also includes a communication interface <b>318</b> coupled to bus <b>302</b>. Communication interface <b>318</b> provides a two-way data communication coupling to a network link <b>320</b> that is connected to a local network <b>322</b>. For example, communication interface <b>318</b> may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface <b>318</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface <b>318</b> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.</p>
<p id="p-0102" num="0101">Network link <b>320</b> typically provides data communication through one or more networks to other data devices. For example, network link <b>320</b> may provide a connection through local network <b>322</b> to a host computer <b>324</b> or to data equipment operated by an Internet Service Provider (ISP) <b>326</b>. ISP <b>326</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>328</b>. Local network <b>322</b> and Internet <b>328</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <b>320</b> and through communication interface <b>318</b>, which carry the digital data to and from computer system <b>300</b>, are exemplary forms of carrier waves transporting the information.</p>
<p id="p-0103" num="0102">Computer system <b>300</b> can send messages and receive data, including program code, through the network(s), network link <b>320</b> and communication interface <b>318</b>. In the Internet example, a server <b>330</b> might transmit a requested code for an application program through Internet <b>328</b>, ISP <b>326</b>, local network <b>322</b> and communication interface <b>318</b>.</p>
<p id="p-0104" num="0103">The received code may be executed by processor <b>304</b> as it is received, and/or stored in storage device <b>310</b>, or other non-volatile storage for later execution. In this manner, computer system <b>300</b> may obtain application code in the form of a carrier wave.</p>
<p id="h-0026" num="0000">Extensions and Alternatives</p>
<p id="p-0105" num="0104">Alternative embodiments of the invention are described throughout the foregoing description, and in locations that best facilitate understanding the context of the embodiments. Furthermore, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, embodiments of the invention are described herein in the context of a database server; however, the described techniques are applicable to any distributed computing system over which system connections are allocated or assigned, such as with a system configured as a computing cluster or a computing grid. Therefore, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<p id="p-0106" num="0105">In addition, in this description certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels may be used to identify certain steps. Unless specifically stated in the description, embodiments of the invention are not necessarily limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to specify or require a particular order of carrying out such steps.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for managing connections to a computing system that comprises a plurality of computing nodes that host a plurality of server instances that provide a service, the method comprising:
<claim-text>periodically gravitating connections between server instances of said plurality of server instances to other server instances of said plurality of server instances, wherein said periodically gravitating is based on performance information of said plurality of server instances;</claim-text>
<claim-text>wherein said connections are associated with a connection pool and said connection pool includes at least two connections to a server instance of said plurality of server instances that provides said service; and</claim-text>
<claim-text>wherein said periodically gravitating includes allocating new connections associated with said connection pool to said other server instances;</claim-text>
<claim-text>wherein the method is performed by one or more computing devices.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>in response to a request for a connection to said computing system for requesting said service, selecting a particular connection that is associated with said service, to route a request for performance of work associated with said service;</claim-text>
<claim-text>wherein said selecting is based on substantially current performance information for said server instances that provide said service that is associated with said selected connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A non-transitory machine-readable storage medium storing one or more sequences of instructions which, when executed by one or more processors, causes the one or more processors to perform:
<claim-text>periodically gravitating connections between server instances of a plurality of server instances that provide a service to other server instances of said plurality of server instances, wherein said periodically gravitating is based on performance information of said plurality of server instances;</claim-text>
<claim-text>wherein said connections are associated with a connection pool and said connection pool includes at least two connections to a server instance of said plurality of server instances that provides said service; and</claim-text>
<claim-text>wherein said periodically gravitating includes allocating new connections associated with said connection pool to said other server instances.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00003">claim 3</claim-ref>, said instructions further comprising instructions which, when executed by one or more processors, causes the one or more processors to perform:
<claim-text>in response to a request for a connection to said computing system for requesting said service, selecting a particular connection that is associated with said service, to route a request for performance of work associated with said service;</claim-text>
<claim-text>wherein said selecting is based on substantially current performance information for said server instances that provide said service that is associated with said selected connection.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

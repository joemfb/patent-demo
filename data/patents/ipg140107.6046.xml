<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627169-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627169</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12143274</doc-number>
<date>20080620</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1109</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714758</main-classification>
</classification-national>
<invention-title id="d2e53">Method and apparatus for dynamically configurable multi level error correction</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7162677</doc-number>
<kind>B1</kind>
<name>Laumen et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7975200</doc-number>
<kind>B2</kind>
<name>Mead</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0123225</doc-number>
<kind>A1</kind>
<name>Cameron</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714781</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0181735</doc-number>
<kind>A1</kind>
<name>Xin</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0038915</doc-number>
<kind>A1</kind>
<name>Alaimo et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0034270</doc-number>
<kind>A1</kind>
<name>Onishi et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0072120</doc-number>
<kind>A1</kind>
<name>Radke</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714768</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0229147</doc-number>
<kind>A1</kind>
<name>Earhart et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0270961</doc-number>
<kind>A1</kind>
<name>Mead</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2009/0125790</doc-number>
<kind>A1</kind>
<name>Iyer et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714773</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2009/0213645</doc-number>
<kind>A1</kind>
<name>Parkinson et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>365163</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Stephen B. Wicker, &#x201c;Error Control Systems&#x201d; Prentice Hall (pp. 437-440) Publication Date: Jul. 29, 1994.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>14</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714758</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090319864</doc-number>
<kind>A1</kind>
<date>20091224</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Shrader</last-name>
<first-name>Steven</first-name>
<address>
<city>Meridian</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Shrader</last-name>
<first-name>Steven</first-name>
<address>
<city>Meridian</city>
<state>ID</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Sawyer Law Group, P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cadence Design Systems, Inc.</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Maskulinski</last-name>
<first-name>Michael</first-name>
<department>2113</department>
</primary-examiner>
<assistant-examiner>
<last-name>Miles</last-name>
<first-name>Neil</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An invention is provided for dynamically configurable error correction. The invention includes receiving a check code configuration signal, which indicates a particular level of error detection. A check code generator is configured to generate check codes based on the particular level of error detection indicated by the check code configuration signal. In addition, an error locator configuration signal is received that indicates a particular level of error addressing, and an error locator is configured to produce addresses of errors in a set of data based on the particular level of error addressing indicated by the error locator configuration signal.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="164.00mm" wi="210.48mm" file="US08627169-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="231.90mm" wi="177.46mm" orientation="landscape" file="US08627169-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="234.95mm" wi="162.98mm" orientation="landscape" file="US08627169-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="212.43mm" wi="178.56mm" orientation="landscape" file="US08627169-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="241.05mm" wi="173.40mm" orientation="landscape" file="US08627169-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="206.93mm" wi="141.73mm" file="US08627169-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates generally to error correction, and more particularly to providing dynamically configurable multi level error correction hardware.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">As use of electronic data continues to increase, so do requirements for data storage reliability. Memory devices often experience a physical change that results in changes in its logical binary state, leading to erroneous data values being stored. To protect against such occurrences, electronic data systems typically incorporate error detection and correction schemes. In some schemes, the presence of an error can be detected, but not rectified, while other schemes allow for the automatic correction of certain errors. These schemes are often referred to as Error Correcting Codes (ECC).</p>
<p id="p-0006" num="0005">ECC is common in data storage, such as magnetic disk storage, magnetic tape storage, and other non-volatile memory storage that stores data when power is disconnected from the system, such as Phase-change memory (PCM) or Flash memory. For example, when using a non-volatile memory such as Flash memory, ECC data often is stored in the memory along with the actual user data.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration showing a typical prior art non-volatile memory arrangement <b>100</b> utilizing ECC data for data reliability checking. As illustrated in FIG. <b>1</b>, a non-volatile memory <b>100</b> generally comprises a plurality of memory blocks <b>102</b>, which generally is the smallest portion of memory that can be erased. Each memory block <b>102</b> generally comprises a fixed plurality of pages <b>104</b>, which is the smallest size element that can be written or read from the non-volatile memory <b>100</b>. Each page <b>104</b> typically is logically divided into two areas: a main area <b>106</b> and a spare area <b>108</b>. It is in the spare area <b>108</b> where typical non-volatile memory systems store ECC data, such as the ECC check bits <b>110</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0008" num="0007">In general, prior art data storage devices, such as the non-volatile memory device illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, are designed to use a fixed level of error correction and detection. For example, based on the reliability of the particular storage device and the desired level of data reliability needed, a fixed level of error correction and detection is used. Generally, higher levels of error correction and detection require more error detection data to be stored. For example, in <figref idref="DRAWINGS">FIG. 1</figref>, the higher the level of error correction and detection utilized, the more ECC check bits <b>110</b> are needed. This number is then set and fixed into the system design.</p>
<p id="p-0009" num="0008">However, instances occur wherein the actual memory hardware may change, for example, when a Flash device is dynamically removed or added to a system. In such cases, the level of level of error correction and detection needed may change. For example, if more reliable memory is added to the system, the level of error correction and detection will be lower. Conversely, if less reliable memory is added to the system, the level of error correction and detection will be higher. Moreover, different hardware may have the ability to store less ECC data than is currently being utilized by the system. In such cases, it can be difficult or impossible to continue with the same level of error correction and detection because the required storage space for the ECC data may not be available. Unfortunately, conventional systems are unable to accommodate these circumstances because the level of error correction and detection is fixed when the system is designed.</p>
<p id="p-0010" num="0009">In view of the foregoing, there is a need for systems and methods that have the ability to accommodate varying levels of error correction and detection dynamically during system operation. Moreover, to avoid wasted space and costs, such systems and methods should not require extra hardware that is never utilized in the system.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0011" num="0010">Broadly speaking, the present invention addresses these needs by providing dynamically configurable multi level error correction. Embodiments of the present invention allow the level of error detection to be dynamically configured via a signal to check code generation hardware. Similarly, the level of error correction is configured utilizing a signal to error location hardware. As a result, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements.</p>
<p id="p-0012" num="0011">For example, in one embodiment a method for providing dynamically configurable error correction is disclosed. The method includes receiving a check code configuration signal, which indicates a particular level of error detection. Then, a check code generator is configured to generate check codes based on the particular level of error detection indicated by the check code configuration signal. In addition, an error locator configuration signal is received that indicates a particular level of error addressing, and an error locator is configured to produce addresses of errors in a set of data based on the particular level of error addressing indicated by the error locator configuration signal. For example, the check code configuration signal can indicate a number of bits having errors that can be detected in data, and the check code generator can be configured to generate an amount of ECC data based on the level of error detection indicated by the check code configuration signal. Similarly, the error locator configuration signal can indicate a number of addresses of bits having errors in the data that can be calculated by the error locator.</p>
<p id="p-0013" num="0012">A non-volatile memory controller having dynamically configurable multi level error correction is disclosed in an additional embodiment of the present invention. The non-volatile memory controller includes a check code configuration signal indicating a particular level of error detection. A check code generator is coupled to the check code configuration signal and is configured to generate an amount of ECC data based the particular level of error detection indicated by the check code configuration signal. The non-volatile memory controller also includes an error locator configuration signal indicating a particular level of error addressing. Coupled to the error locator configuration signal is an error locator, which is configured to calculate addresses of errors in a set of data based on the particular level of error addressing indicated by the error locator configuration signal. For example, the check code generator can be a read check code generator that calculates a syndrome polynomial based on read data received and the level or error detection indicated by the check code configuration signal. In this case, the error locator configuration signal can indicate a number of addresses of bits having errors in the data that can be calculated by the error locator. Further, the error locator can, for example, calculate a number of roots to the syndrome polynomial based on the level of error addressing indicated by the error locator configuration signal.</p>
<p id="p-0014" num="0013">In further method for providing dynamically configurable error correction is disclosed in an additional embodiment of the present invention. The method includes receiving a check code configuration signal that indicates a number of bits having errors that can be detected in data. Based on the value of the check code configuration signal, the check code generator is configured to generate a particular level of check codes. In addition, an error locator configuration signal is received that indicates a number of addresses of bits having errors in the data that can be calculated by the error locator. The method further includes configuring an error locator to produce addresses of errors in a set of data based on the value of the error locator configuration signal. To do this, the error locator is configured to utilize a particular amount of existing error locator hardware based on the level of error addressing indicated by the error locator configuration signal. Hence, using this approach, the error locator can utilize less error locator hardware than the total error locator hardware available when the level of error addressing indicated by the error locator configuration signal is less than a maximum level of error addressing supported by the system.</p>
<p id="p-0015" num="0014">In this manner, embodiments of the present invention advantageously allow the level of error detection and correction to be dynamically configured via signals to check code generation hardware and error location hardware. Thus, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements. Moreover, an error detection guard band can be configured so as to be able to, for example, detect larger errors than can be corrected by setting the level of error detection and error correction different from one another. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015">The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> is an illustration showing a typical prior art non-volatile memory arrangement utilizing ECC data for data reliability checking;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing a system having configurable multi level error correction, in accordance with an embodiment of the present invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram showing dynamically configurable error detection and addressing logic, in accordance with an embodiment of the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram showing an exemplary dynamically configurable check code generator having a check code configuration signal input, in accordance with an embodiment of the present invention; and</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing a method for providing dynamically configurable multi level error correction, in accordance with an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0022" num="0021">An invention is disclosed for dynamically configurable multi level error correction hardware. Broadly speaking, embodiments of the present invention allow the level of error detection to be dynamically configured via a signal to check code generation hardware. Similarly, the level of error correction is configured utilizing a signal to error location hardware. In this manner, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements. Moreover, the level of error detection and error correction can be set different from one another. Thus, an error detection guard band can be configured so as to be able to, for example, detect larger errors than can be corrected.</p>
<p id="p-0023" num="0022">In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> was described in terms of the prior art. <figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing a system <b>200</b> having configurable multi level error correction, in accordance with an embodiment of the present invention. The system <b>200</b> includes a processor <b>202</b>, executing error correction software <b>204</b>, coupled to system memory <b>206</b>. Also coupled to the processor <b>202</b> is a non-volatile memory controller <b>208</b>, which is coupled to non-volatile memory <b>210</b>. The non-volatile memory controller <b>208</b> includes a plurality of registers <b>212</b>, and error detection and addressing logic <b>214</b>. The non-volatile memory <b>210</b> includes a buffer <b>218</b> and a memory array <b>220</b>.</p>
<p id="p-0025" num="0024">During normal operation, the processor <b>202</b> utilizes the non-volatile memory controller <b>208</b> to read and write data to the non-volatile memory <b>210</b>. When writing data to the non-volatile memory <b>210</b>, the data generally is transferred from the system memory <b>206</b>, though the non-volatile memory controller <b>208</b>, and into the buffer <b>218</b>. When passing through the non-volatile memory controller <b>208</b>, the data passes through the error detection and addressing logic <b>214</b>, which calculates a code (often called an error correction code or ECC data) that is appended to the data and stored along with the data in the buffer <b>218</b>. The data then is transferred from the buffer <b>218</b> and stored into the non-volatile memory array <b>220</b>. As mentioned previously, user data generally is stored in the main array of a page of memory, while the ECC data is stored in the spare area of the page.</p>
<p id="p-0026" num="0025">When the data is later read from the non-volatile memory <b>210</b>, the non-volatile memory controller <b>208</b> checks the data for errors using the error detection and addressing logic <b>214</b>. Similar to above, when reading data from the non-volatile memory <b>210</b>, the data is transferred from the memory array <b>220</b> to the buffer <b>218</b>. The non-volatile memory controller <b>208</b> then reads the data from the buffer <b>218</b>, passes the data through the error detection and addressing logic <b>214</b>, and stores the data into the system memory <b>206</b>.</p>
<p id="p-0027" num="0026">Broadly speaking, while the data is being passed through the error detection and addressing logic <b>214</b>, the error detection and addressing logic <b>214</b> calculates a new ECC code, which is compared to the ECC code that was stored with the data. If the new ECC code matches the stored ECC code, the data is error free. However, if the two ECC codes do not match, the error detection and addressing logic <b>214</b> calculates the addresses of the errors and the error correction software <b>204</b> executing on the processor <b>202</b> attempts to correct the defects in the data, which is now stored in the system memory <b>206</b>. However, unlike conventional error detection hardware, embodiments of the present invention allow the level of error detection to be dynamically configured during operation of the system, as discussed next with respect to <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram showing dynamically configurable error detection and addressing logic <b>214</b>, in accordance with an embodiment of the present invention. The error detection and addressing logic <b>214</b> includes a write check code generator <b>300</b>, a read check code generator <b>302</b>, and an error locator <b>304</b>. The write check code generator <b>300</b> is coupled to write data input <b>306</b> and a check bit output <b>308</b>. The read check code generator <b>302</b> is coupled to a read data input <b>310</b> and a syndrome polynomial output <b>312</b>, which is also coupled to the input of the error locator <b>304</b>. In addition, the error locator <b>304</b> provides an error address output <b>314</b>. As will be discussed in greater detail subsequently, both the write check code generator <b>302</b> and the read check code generator <b>304</b> are coupled to a check code configuration signal <b>316</b>, while the error locator <b>304</b> is coupled to an error locator configuration signal <b>318</b>.</p>
<p id="p-0029" num="0028">In operation, data being written to the non-volatile memory is provided on the write data input <b>306</b>, which provides the data to both the write check code generator <b>300</b> and the non-volatile memory buffer. The write check code generator <b>300</b> then generates an ECC code for the data, which is provided to the check bit output <b>308</b>. As described above, the data is eventually stored in the main area of non-volatile memory, while the ECC code data generally is stored in the spare area of non-volatile memory. However, it should be noted that the embodiments of the present invention can be utilized with any configuration of user data and ECC code data storage, as need by each particular design.</p>
<p id="p-0030" num="0029">When the data is later read from the non-volatile memory, the data is provided to system memory and the read check code generator <b>302</b> via the read data input <b>310</b>. The read check code generator <b>302</b> also receives the stored ECC code previously stored with the data. The read check code generator <b>302</b> then generates an ECC code for the read data in manner similar to that described above with respect to the write check code generator <b>300</b>. However, the read check code generator <b>302</b> also utilizes the previously stored ECC code and the newly generated ECC code to calculate a syndrome polynomial for the data. The syndrome polynomial is utilized for finding errors in the read data, and can be based on any error detection algorithm, such as Reed-Solomon codes or BCH codes. In general, the syndrome polynomial is zero when no errors are present in the read data, which generally occurs when the newly generated ECC code matches the ECC code previously stored with the read data. However, if the syndrome polynomial is a non-zero value, errors are present in the read data and the error locator <b>304</b> utilizes the syndrome polynomial to locate the addresses of the error or errors in the read data. For example, in one embodiment, the error locator <b>304</b> can utilize a Chien Search to calculate the roots of the syndrome polynomial and determine the addresses of the error or errors in the read data.</p>
<p id="p-0031" num="0030">As mentioned previously, it can become necessary to change the level of error correction and detection in the system. To address this issue, embodiments of the present invention allow the level of error detection to be dynamically configured via the check code configuration signal <b>316</b>. Similarly, the level of error correction is configured utilizing the error locator configuration signal <b>318</b>. In this manner, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements. Moreover, the level of error detection and error correction can be set different from one another. Thus, an error detection guard band can be configured so as to be able to, for example, detect larger errors than can be corrected.</p>
<p id="p-0032" num="0031">In one embodiment, the check code configuration signal <b>316</b> is utilized to configure the write check code generator <b>300</b> and the read check code generator <b>302</b> by indicating the number of bits having errors that can be detected. For example, in one embodiment, when the check code configuration signal <b>316</b> is set to a value of eight, the write check code generator <b>300</b> and the read check code generator <b>302</b> are configured to generate an ECC code capable of detecting errors in eight bits of data. Similarly, the error locator configuration signal <b>318</b> is utilized to configure the error locator <b>304</b> by indicating the number of bits that can addressed, and therefore corrected.</p>
<p id="p-0033" num="0032">It should be noted that higher values of the check code configuration signal <b>316</b> will also result in more ECC code data being generated, and thus require more space for storage. Thus, the check code configuration signal <b>316</b> can be utilized to adjust the level of error detection in order to save storage space. For example, if a particular storage device does not have enough space for a particular level of error detection, the check code configuration signal <b>316</b> can given a lower value in order to reduce the size of the ECC code generated and thus save space in the memory.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram showing an exemplary dynamically configurable check code generator <b>300</b> having a check code configuration signal input <b>316</b>, in accordance with an embodiment of the present invention. As illustrated in <figref idref="DRAWINGS">FIG. 4</figref>, the dynamically configurable check code generator <b>300</b> includes a plurality of check code logic modules <b>400</b><i>a</i>-<b>400</b><i>n</i>, each coupled to a check code selection logic module <b>402</b>. The check code selection logic module <b>402</b> is further coupled to a check bit register <b>404</b>, which in turn is coupled to each of the check code logic modules <b>400</b><i>a</i>-<b>400</b><i>n. </i></p>
<p id="p-0035" num="0034">Each check code logic module <b>400</b><i>a</i>-<b>400</b><i>n </i>includes logic to produce a particular number check bits to provide a particular level of error detection. For example, in one embodiment, check code logic module <b>400</b><i>a </i>may be designed to produce ECC codes to detect four bits of error, check code logic module <b>400</b><i>b </i>may be designed to produce ECC codes to detect eight bits of error, and check code logic module <b>400</b><i>n </i>may be designed to produce ECC codes to detect sixteen bits of error. In this example, the sixteen bit check code logic module <b>400</b><i>n </i>can utilize, for example, all the check bit outputs <b>308</b> for the check code generator <b>300</b>, the eight bit check code logic module <b>400</b><i>b </i>can utilize half the check bit outputs <b>308</b>, and the four bit check code logic module <b>400</b><i>a </i>can utilize one quarter the check bit outputs <b>308</b>. Although three separate check code logic modules <b>400</b><i>a</i>-<b>400</b><i>n </i>are illustrated in <figref idref="DRAWINGS">FIG. 4</figref> for exemplary purposes, it should be noted that any number of check code logic modules may be included in a check code generator <b>300</b> of the embodiments of the present invention as needed by particular system configuration requirements.</p>
<p id="p-0036" num="0035">In operation, the check code selection logic <b>402</b> selects as input one of the check code logic modules <b>400</b><i>a</i>-<b>400</b><i>n </i>based on the value of the check code configuration signal <b>316</b>. In one embodiment, the check bits can be the flops that are present in the generator <b>300</b>. In this embodiment, the check code selection logic <b>402</b>, in essence, selects the algorithm of the flops by selecting which check code logic module <b>400</b><i>a</i>-<b>400</b><i>n </i>to utilize in check bit generation. Hence, the output of the check code selection logic <b>402</b> is provided to the check bit register <b>404</b>, which provides the re-circulating flops of the check code generator <b>300</b>.</p>
<p id="p-0037" num="0036">Referring back to <figref idref="DRAWINGS">FIG. 3</figref>, embodiments of the present invention utilize more or less of the hardware in the error locator <b>304</b> based on the value of the error locator configuration signal <b>318</b>. For example, if the system was designed to detect sixteen bits of errors, then when the value of the error locator configuration signal <b>318</b> is sixteen, the error locator <b>304</b> will utilize all the hardware in the error locator <b>304</b>. When the value of the error locator configuration signal <b>318</b> is eight, the error locator <b>304</b> will utilize half of the hardware in the error locator <b>304</b>. When the value of the error locator configuration signal <b>318</b> is four, the error locator <b>304</b> will utilize one quarter of the hardware in the error locator <b>304</b>. In general, the time required for the error locator <b>304</b> to process the syndrome polynomial <b>312</b> to determine error location addresses is substantially the same regardless of the level of error detection and correction utilized. For example, the time required for the error locator <b>304</b> to process the syndrome polynomial <b>312</b> when the error locator configuration signal <b>318</b> is sixteen is substantially the same as the time required to process the syndrome polynomial <b>312</b> when the error locator configuration signal <b>318</b> is eight.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing a method <b>500</b> for providing dynamically configurable multi level error correction, in accordance with an embodiment of the present invention. In an initial operation <b>502</b>, preprocess operations are performed. Preprocess operations can include, for example, detecting the presence of new media, determining a level of error detection and correction required by a particular media, and other preprocess operations that will be apparent to those skilled in the art after a careful reading of the present disclosure.</p>
<p id="p-0039" num="0038">In operation <b>504</b>, a check code configuration signal indicating a level of error detection being requested is received. As mentioned previously, the amount of error detection encoded data (i.e., ECC data) generated by the check code generators is based on the value of the check code configuration signal. As will be apparent to those skilled in the art, greater levels of error detection generally require greater amounts of ECC data to be generated and stored along with the data. Thus, a balance generally is maintained between the level of error detection desired and the space and capabilities of the media being utilized. Thus, in operation <b>504</b>, the check code configuration signal indicates the level of error and thus the amount of ECC data to be generated by the check code generators.</p>
<p id="p-0040" num="0039">The check code generators then are configured to generate check codes matching the indicated level of error detection, in operation <b>506</b>. As mentioned previously, the check code configuration signal indicates the number of bits having errors that should be detected using the write check code generator and the read check code generator. For example, in one embodiment, when the check code configuration signal is set to a value of eight, the write check code generator and the read check code generator are configured to generate an ECC code capable of detecting eight erroneous bits in a set of data. Similarly, the error locator configuration signal is utilized to configure the error locator <b>304</b> by indicating the number of bits that can be corrected. Since higher values of the check code configuration signal result in more ECC code data being generated, the check code configuration signal can be utilized to adjust the level of error detection in order to save storage space. In one embodiment, each check code generator includes a plurality of check code logic modules, each including logic to produce a particular number check bits to provide a particular level of error detection. In operation, check code selection logic selects as input one of the check code logic modules based on the value of the check code configuration signal.</p>
<p id="p-0041" num="0040">In addition to the check code configuration signal, an error locator configuration signal that indicates a level of error addressing is received, in operation <b>508</b>. The amount of error addressing the error locator will perform is based on the value error locator configuration signal. That is, the error locator configuration signal indicates the number of error location addresses the error locator will calculate. In this manner, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements. As mentioned previously, the level of error detection and error correction can be set different from one another. Thus, an error detection guard band can be configured so as to be able to, for example, detect larger errors than can be corrected.</p>
<p id="p-0042" num="0041">In operation <b>510</b>, the error locator is configured to calculate a number of error location addresses matching the level of error addressing requested. As discussed above, the amount of error addressing the error locator will perform is based on the value error locator configuration signal. Once configured, the error locator utilizes the syndrome polynomial generated by the read check code generator to calculate the addresses of errors in the read data, if any exist. In general, the syndrome polynomial is zero when no errors are present in the read data. However, if the syndrome polynomial is a non-zero value, errors are present in the read data and the error locator utilizes the syndrome polynomial to locate the addresses of the error or errors in the read data.</p>
<p id="p-0043" num="0042">In one embodiment, as described above, the error locator is configured to utilize more or less of the hardware based on the value of the error locator configuration signal. For example, if the system was designed to detect sixteen bits of errors, then when the value of the error locator configuration signal is sixteen, the error locator utilizes all the hardware in the error locator. When the value eight, the error locator utilizes half of the hardware in the error locator, and when the value is four, the error locator utilizes one quarter of the hardware in the error locator. Thus, the error locator can be configured to utilize an amount of error locator hardware less than a total amount of error locator hardware available when the level of error addressing indicated by the error locator configuration signal is less than a maximum level of error addressing supported by the system. Advantageously, the time required for the error locator to process the syndrome polynomial to determine error location addresses generally is substantially the same regardless of the level of error detection and correction utilized.</p>
<p id="p-0044" num="0043">Post process operations then are performed in operation <b>512</b>, post process operations can include, for example, continued hardware configuration based on new media being introduced to the system, further ECC data calculation, and other post process operations that will be apparent to those skilled in the art after a careful reading of the present disclosure. In this manner, embodiments of the present invention advantageously allow the level of error detection and correction to be dynamically configured via signals to check code generation hardware and error location hardware. Thus, the level of error detection and correction can be changed dynamically during system operation to accommodate changing hardware requirements. Moreover, an error detection guard band can be configured so as to be able to, for example, detect larger errors than can be corrected by setting the level of error detection and error correction different from one another.</p>
<p id="p-0045" num="0044">Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for providing dynamically configurable error correction, comprising:
<claim-text>receiving a first signal, wherein the first signal indicates a particular level of error detection that comprises a number of detectable bits in a set of data;</claim-text>
<claim-text>dynamically configuring a check code generator based on the received first signal to generate a variable amount of check codes capable of detecting errors in the set of data, wherein the check code generator includes a plurality of check code logic modules that each include logic to produce a particular number of check bits and logic for selecting a particular check code logic module output to provide the particular level of error detection;</claim-text>
<claim-text>receiving a second signal, wherein the second signal indicates a particular level of error addressing that comprises a number of calculable error location addresses associated with the number of detectable bits in the set of data, wherein the particular level of error addressing is variable with respect to the particular level of error detection; and</claim-text>
<claim-text>dynamically configuring an error locator based on the received second signal to calculate error location addresses capable of locating errors in the set of data, wherein the error locator includes hardware designed to detect a maximum level of error addressing and a particular amount of the hardware is utilized based on the particular level of error addressing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the particular level of error detection includes a number of bits having errors that should be detected in data using a write check code generator and a read check code generator.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the check code generator generates an amount of error correction code (ECC) data based on the particular level of error detection indicated by the first signal.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the error locator calculates a number of roots to a syndrome polynomial based on the particular level of error addressing indicated by the second signal.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the error locator is configured to utilize a particular amount of existing error locator hardware based on the particular level of error addressing indicated by the second signal.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>configuring an error detection guard band to detect more errors that can be corrected by setting the particular level of error detection and the particular level of error addressing at different levels.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A non-volatile memory controller having
<claim-text>dynamically configurable multi level error correction, comprising:</claim-text>
<claim-text>a first signal indicating a particular level of error detection that comprises a number of detectable bits in a set of data;</claim-text>
<claim-text>a check code generator coupled to the first signal, the check code generator being dynamically configured based on the first signal to generate a variable amount of error correction code (ECC) data capable of detecting errors in the set of data, wherein the check code generator includes a plurality of check code logic modules that each include logic to produce a particular number of check bits and logic for selecting a particular check code logic module output to provide the particular level of error detection;</claim-text>
<claim-text>a second signal indicating a particular level of error addressing that comprises a number of calculable error location addresses associated with the number of detectable bits in the set of data, wherein the particular level of error addressing is variable with respect to the particular level of error detection; and</claim-text>
<claim-text>an error locator coupled to the second signal, the error locator being dynamically configured based on the second signal to calculate error location addresses capable of locating errors in the set of data, wherein the error locator includes hardware designed to detect a maximum level of error addressing and a particular amount of the hardware is utilized based on the particular level of error addressing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The non-volatile memory controller of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the check code generator is a read check code generator that calculates a syndrome polynomial based on read data received and the particular level of error detection indicated by the first signal.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-volatile memory controller of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the second signal indicates a number of addresses of bits having errors in data that can be calculated by the error locator.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-volatile memory controller of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the error locator calculates a number of roots to the syndrome polynomial based on the particular level of error addressing indicated by the second signal.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-volatile memory controller of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising a write check code generator coupled to the check code configuration signal, the write check code generator being configured to generate an amount of ECC data based on the particular level of error detection indicated by the first signal.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-volatile memory controller of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the first signal indicates a number of bits having errors that can be detected in data.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-volatile memory controller of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the error locator is configured to utilize a particular amount of existing error locator hardware based on the particular level of error addressing indicated by the second signal.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-volatile memory controller of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>an error detection guard band being configured to detect more errors that can be corrected by setting the particular level of error detection and the particular level of error addressing at different levels. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

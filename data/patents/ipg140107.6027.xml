<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627150-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627150</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13009788</doc-number>
<date>20110119</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>511</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714 473</main-classification>
</classification-national>
<invention-title id="d2e53">System and method for using dependency in a dynamic model to relate performance problems in a complex middleware environment</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5222065</doc-number>
<kind>A</kind>
<name>Krogmann</name>
<date>19930600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5257358</doc-number>
<kind>A</kind>
<name>Cohen</name>
<date>19931000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5958009</doc-number>
<kind>A</kind>
<name>Friedrich et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6018300</doc-number>
<kind>A</kind>
<name>Dowden et al.</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6049666</doc-number>
<kind>A</kind>
<name>Bennett et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6549521</doc-number>
<kind>B1</kind>
<name>Edwards et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370255</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6792460</doc-number>
<kind>B2</kind>
<name>Oulu et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6954779</doc-number>
<kind>B2</kind>
<name>Duggan et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7020802</doc-number>
<kind>B2</kind>
<name>Gross et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7237023</doc-number>
<kind>B2</kind>
<name>Menard et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7424530</doc-number>
<kind>B2</kind>
<name>Chagoly et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>8205116</doc-number>
<kind>B2</kind>
<name>Yang et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>8219997</doc-number>
<kind>B2</kind>
<name>Shimizu et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2001/0034663</doc-number>
<kind>A1</kind>
<name>Teveler et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2005/0172306</doc-number>
<kind>A1</kind>
<name>Agarwal et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2005/0216781</doc-number>
<kind>A1</kind>
<name>Doshi et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0288827</doc-number>
<kind>A1</kind>
<name>Chagoly et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 47</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2010/0169713</doc-number>
<kind>A1</kind>
<name>Argue et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2011/0145651</doc-number>
<kind>A1</kind>
<name>Molnar et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2012/0216205</doc-number>
<kind>A1</kind>
<name>Bell et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2012/0284719</doc-number>
<kind>A1</kind>
<name>Phan et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2012/0304182</doc-number>
<kind>A1</kind>
<name>Cho et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120185736</doc-number>
<kind>A1</kind>
<date>20120719</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sambamurthy</last-name>
<first-name>Govinda Raj</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sankar</last-name>
<first-name>Raji</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Goyal</last-name>
<first-name>Rahul</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Karkala</last-name>
<first-name>Ashwin Kumar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Sambamurthy</last-name>
<first-name>Govinda Raj</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Sankar</last-name>
<first-name>Raji</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Goyal</last-name>
<first-name>Rahul</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Karkala</last-name>
<first-name>Ashwin Kumar</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fliesler Meyer LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Maskulinski</last-name>
<first-name>Michael</first-name>
<department>2113</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of isolating relevant components associated with a performance problem. The method comprises creating a static model of a system under test, including determining relationships between components in a middleware system. The method also comprises creating a dynamic problem tree by applying the static model to the system at runtime. The method further comprises identifying a link probability for each relationship in the dynamic problem tree; and traversing the dynamic problem tree to detect redundant components. A component is redundant if it has a link probability with its downstream component greater than a pre-determined threshold value. The method also comprises removing redundant components from the dynamic problem tree; and returning a set of components which are potential components to be analyzed further to determine the root causes of the performance problem.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="141.05mm" wi="174.41mm" file="US08627150-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="248.58mm" wi="193.89mm" orientation="landscape" file="US08627150-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.12mm" wi="185.76mm" orientation="landscape" file="US08627150-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="193.29mm" wi="164.08mm" orientation="landscape" file="US08627150-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="215.90mm" wi="179.15mm" file="US08627150-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="234.44mm" wi="184.83mm" orientation="landscape" file="US08627150-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="239.18mm" wi="187.96mm" orientation="landscape" file="US08627150-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="237.91mm" wi="181.36mm" file="US08627150-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="181.61mm" wi="148.93mm" file="US08627150-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is related to the following U.S. Patent Applications, each of which is incorporated by reference herein in its entirety:</p>
<p id="p-0003" num="0002">U.S. patent application Ser. No. 13/009,775 entitled &#x201c;SYSTEM AND METHOD FOR DETERMINING CAUSES OF PERFORMANCE PROBLEMS WITHIN MIDDLEWARE SYSTEMS&#x201d;, by Govinda Raj Sambamurthy et al., filed on Jan. 19, 2011;</p>
<p id="p-0004" num="0003">U.S. patent application Ser. No. 13/009,777 entitled &#x201c;METHOD OF MEASURING AND DIAGNOSING MISBEHAVIORS OF SOFTWARE COMPONENTS AND RESOURCES&#x201d;, by Raji Sankar et al., filed on Jan. 19, 2011;</p>
<p id="p-0005" num="0004">U.S. patent application Ser. No. 13/009,781 entitled &#x201c;EFFICIENT DATA COLLECTION MECHANISM IN A MIDDLEWARE RUNTIME ENVIRONMENT&#x201d;, by Raji Sankar et al., filed on Jan. 19, 2011; and</p>
<p id="p-0006" num="0005">U.S. patent application Ser. No. 13/009,800 entitled &#x201c;SYSTEM AND METHOD FOR PROVIDING A STATIC MODEL MAP OF BEHAVIORS IN A MIDDLEWARE SYSTEM, FOR USE IN IDENTIFYING SYSTEM PROBLEMS&#x201d; by Raji Sankar et al., filed on Jan. 19, 2011.</p>
<heading id="h-0002" level="1">COPYRIGHT NOTICE</heading>
<p id="p-0007" num="0006">A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.</p>
<heading id="h-0003" level="1">FIELD OF INVENTION</heading>
<p id="p-0008" num="0007">The invention is generally related to diagnosing performance problems in middleware systems, and particularly to a system and method for using dependency in a dynamic model to relate performance problems in a complex middleware environment.</p>
<heading id="h-0004" level="1">BACKGROUND</heading>
<p id="p-0009" num="0008">Inferring the relationships between the runtime components in a middleware system is not always straightforward. In a typical server administration scenario, this can include manual analysis of the behavior of runtime performance of various components. Such manual analysis can result in multiple iterations to determine the root cause of a performance problem. This can entail loss of crucial time in a production environment in fixing the performance problems. These iterations can also result in false positives as root causes, which may not be the actual component causing degradation in performance in the system. At present there is no standard way of determining whether the performance symptoms visible within a component in a middleware system are due to a problem within that component or whether they are merely an effect of a dependent component. These are areas that embodiments of the invention are intended to address.</p>
<heading id="h-0005" level="1">SUMMARY</heading>
<p id="p-0010" num="0009">A method of isolating relevant components associated with a performance problem is provided. The method comprises creating a static model of a system under test, including determining relationships between components in a middleware system. The method also comprises creating a dynamic problem tree by applying the static model to the system at runtime. The method further comprises identifying a link probability for each relationship in the dynamic problem tree; and traversing the dynamic problem tree to detect redundant components. An upstream component is considered redundant if it has a link probability with its downstream component greater than a pre-determined threshold value. The method also comprises removing redundant components from the dynamic problem tree; and returning a set of components which are potential components to be analyzed further to determine the root causes of the performance problem.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a system, such as a middleware system, in accordance with an embodiment.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a more detailed view of a system, such as a middleware system, that can be analyzed in accordance with an embodiment.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> shows an application server, in accordance with an embodiment.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> shows a method of isolating relevant components associated with a performance problem, in accordance with an embodiment.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> shows a sample illustration of a model for a server, in accordance with an embodiment.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6</figref> shows an example problem tree and normalization, in accordance with an embodiment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> shows a method of isolating relevant components associated with a performance problem, in accordance with an embodiment.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> shows a system for isolating relevant components associated with a performance problem, in accordance with an embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">In the following description, the invention will be illustrated by way of example and not by way of limitation in the figures of the accompanying drawings. References to various embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.</p>
<p id="p-0020" num="0019">Furthermore, in certain instances, numerous specific details will be set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in as much detail so as not to obscure the invention.</p>
<p id="p-0021" num="0020">In accordance with various embodiments, the methods and techniques for measuring and diagnosing software misbehavior can be implemented in a software middleware system, such as an application server. Other types of middleware systems can also be utilized in conjunction with the various embodiments described herein, such as web servers, business process management (BPM) and process execution systems, enterprise service buses, service access gateways, messaging brokers and messaging systems, and the like.</p>
<p id="h-0008" num="0000">Definitions</p>
<p id="p-0022" num="0021">In accordance with an embodiment, as used herein, the term &#x201c;downstream&#x201d; is used to refer to a component that is invoked by another component and comes later in the call trace.</p>
<p id="p-0023" num="0022">In accordance with an embodiment, as used herein, the term &#x201c;upstream&#x201d; is used to refer to a component that invokes another component. The upstream component comes before the downstream component in the call trace. For example, when an EJB invokes a JDBC Data Source, the EJB is termed as the upstream component and the JDBC Data Source is termed as the downstream component.</p>
<p id="p-0024" num="0023">In accordance with an embodiment, as used herein, the term &#x201c;efficiency&#x201d; is used to refer to a computation with no units, and normalized against load. It is defined as the ratio of the number of requests in this sampling period that completed execution within the sampling period to the total number of requests that came in for processing in this sampling period. Though it is normalized against load, it will vary with load if load affected the behavior of the component and stay constant if not.</p>
<p id="p-0025" num="0024">In accordance with an embodiment, as used herein, the term &#x201c;inefficiency&#x201d; is used to refer to the inverse of efficiency. It is defined as the ratio of the number of requests in this sampling period that is still executing at the end of this sampling period to the total number of requests that came in for processing in this sampling period.</p>
<p id="p-0026" num="0025">In accordance with an embodiment, as used herein, the terms &#x201c;performance indicator,&#x201d; &#x201c;performance metric&#x201d; and/or &#x201c;performance indicator/metric&#x201d; are used interchangeably to refer to any metric characterizing the response time, throughput or load on hardware or software components in a system.</p>
<p id="p-0027" num="0026">In accordance with an embodiment, as used herein, the term &#x201c;bottleneck&#x201d; is used to refer to any situation in which performance of a system is diminished or otherwise compromised due to the poor performance of one or more components. The component or components causing the bottleneck are referred to herein as &#x201c;bottleneck components.&#x201d;</p>
<p id="p-0028" num="0027">In accordance with an embodiment, as used herein, the term &#x201c;model&#x201d; is used to refer to a hierarchical representation of the relations between components within middleware systems. A model can include a static hierarchy of component types, which is predefined or predetermined during the design phase, and dynamic relations, which are established between component instances during runtime.</p>
<p id="p-0029" num="0028">In accordance with an embodiment, as used herein, the term &#x201c;problem tree&#x201d; is used to refer to a runtime instance of a model, represented as a tree of related components that exhibit performance problems at runtime. The components in a problem tree may or may not be &#x201c;effects&#x201d; of one another.</p>
<p id="p-0030" num="0029">In accordance with an embodiment, as used herein, the term &#x201c;link probability&#x201d; is used to refer to a measure of co-occurrence of performance problems within components, which are known to be related to each other, by virtue of their links in a problem tree.</p>
<p id="p-0031" num="0030">In accordance with an embodiment, a method of isolating relevant components associated with a performance problem is provided. The method comprises creating a static model of a system under test, including determining relationships between components in a middleware system. The method also comprises creating a dynamic problem tree by applying the static model to the system at runtime. The method further comprises identifying a link probability for each relationship in the dynamic problem tree; and traversing the dynamic problem tree to detect redundant components. An upstream component is considered redundant if it has a link probability with its downstream component greater than a threshold value. The method also comprises removing redundant components from the dynamic problem tree; and returning a set of components to be analyzed further to determine the potential root causes of the performance problem.</p>
<p id="p-0032" num="0031">In accordance with an embodiment, the relationships between the various components in a middleware topology, as deployed in a real-world environment, can be complex. Performance degradation that is visible in one component may be due to the poor performance of another component. For example, in an application, both the business tier as well as the data access layer could exhibit symptoms of performance problems. However, the identification of the actual component, which is the root cause of a performance problem, is a key to resolving that performance problem. Diagnosing the system to identify that actual component can be complex in a middleware topology. In accordance with an embodiment, this inherent complexity can be due to the distributed nature of services in a given middleware topology.</p>
<p id="p-0033" num="0032">In accordance with an embodiment, the runtime components in the middleware stack can include coarse grained components, such as different member servers within a server cluster, or fine grained components within a single server, such as servlet containers, EJB containers, JDBC DataSource containers, and other containers and/or other runtime environments. Components can be dependent on one another directly, where one component invokes another component at runtime, or indirectly, where several components share common resources. For example, an EJB pool might display inferior performance if a JDBC DataSource in the downstream execution path requires more execution time. In this case, the EJB pool and the JDBC DataSource are directly dependent on one another. Additionally, multiple components may impact performance of one another, as they could all be part of a distributed transaction. For example, an MDB execution may take longer time to complete and commit if there exists a long running SQL within the same JTA Transaction. Similarly, when multiple components share common resources, such as the JVM Heap, the server thread pool, or other runtime resources, the performance problems of one component can indirectly affect another component through the shared resource. The runtime dependency could also be due to a skewed load distribution within a cluster. For instance, if within a cluster, one of the servers becomes hung, the other servers may experience a rise in load, which can lead to a bottleneck within the system.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a system, such as a middleware system, in accordance with an embodiment. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, a typical middleware system <b>10</b> includes a plurality of resources, which in turn can be provided within containers <b>12</b>, <b>14</b>, such as Web Services or EJB containers, or as interfaces <b>15</b>, such as a JDBC interface. A typical middleware system can also include a database <b>16</b>, or provide access to one or more external databases. When a request <b>18</b> is received at the system, these resources are successively called or otherwise used <b>20</b>, <b>21</b>, to allow the system to eventually respond <b>24</b> to the request. Typically, individual resource usage information can be collected from the containers and interfaces by a plurality of agents <b>26</b>, <b>28</b>, <b>29</b> that are associated with the various containers and interfaces. The resource usage information or metrics <b>30</b> can be stored or otherwise provided to an enterprise manager repository <b>34</b>. The information in the enterprise manager repository thus reflects an overview of metric information for the system over a relatively large period of time <b>36</b>, and as such is useful for system monitoring by a system administrator <b>40</b>. However, this form of metric information is of less use in identifying system problems when they occur.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a more detailed view of a system, such as a middleware system, in accordance with an embodiment. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the middleware system again includes a plurality of resources provided, e.g. as containers or interfaces, and again includes or provides access to one or more databases. In accordance with an embodiment, the system can allow definition of one or more of a static model of request behaviors <b>50</b>, and allow application of the static model <b>52</b>, to define behaviors within the current system configuration that are of most interest in problem identification (such as potential resource bottlenecks, or patterns of resource behavior that indicate potential problems). In accordance with an embodiment, a plurality of diagnostic agents <b>60</b>, <b>62</b>, coupled with collector/aggregators <b>64</b>, <b>66</b>, and a diagnostic manager <b>70</b>, can provide information describing the runtime &#x201c;efficiency&#x201d; of a particular resource, within the context of this system. This information can then be used in combination with a problem tree <b>54</b>, and heuristic interval <b>56</b>, to provide diagnosis or the &#x201c;root cause&#x201d; <b>74</b> of a particular current system problem to the system administrator.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> shows an application server, in accordance with an embodiment. <figref idref="DRAWINGS">FIG. 3</figref> shows a particular example of a middleware system, such as those described in <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, above. In accordance with an embodiment, an application server <b>300</b> can include a variety of runtime environments <b>302</b>. These runtime environments can include EJB containers, servlet containers, Messaging Services, Web Service containers, Data source pools, Thread pools, and other runtime environments. Each runtime environment provides services such as transactions, security, and concurrency, for the application components deployed to the application server. Each of these runtime environments can have a number of configuration parameters that affect their performance. The performance of the middleware stack depends on the performance of each of these underlying containers. For example, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, a request <b>304</b> can be received by a servlet container <b>306</b> which then invokes EJB container <b>308</b>, which then invokes JDBC container <b>310</b> which accesses database <b>312</b>. When a performance problem is encountered while serving the request, it may not be immediately clear which component is at fault. As such, diagnosing the root-cause when a performance problem occurs in such a complex environment therefore can be challenging.</p>
<p id="p-0037" num="0036">Traditionally, there was no standard way of determining whether the performance symptoms visible within a component in a middleware system was due to a problem within that component or whether they are merely an effect of a dependent component. Embodiments of the present invention are based on the idea of applying a quasi-static dependency model of components onto a real world production environment to identify components that display performance symptoms due to an impact of a related component. Detection of such components, which are effects of the real problem component, can help a system administrator in eliminating redundant performance problems while diagnosing a complex topology, as opposed to deriving runtime relationship between components.</p>
<p id="p-0038" num="0037">As described above, deriving runtime relationships between components directly to fix problems can be complex. Embodiments of the present invention achieve elimination of redundant performance symptoms by applying a quasi-static performance model onto a middleware topology and inspecting the link probability to identify if a known problem is an effect of another problem in a related component. This offers a more reliable alternative to the manual process of analyzing each and every component exhibiting performance issues.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> shows a method of isolating relevant components associated with a performance problem, in accordance with an embodiment. At step <b>400</b>, the possible relationships between components are pre-determined to create a model of the system under diagnosis. At step <b>402</b>, a dynamic problem tree is created by applying the above model at runtime. At step <b>404</b>, the link probabilities of all links, which is a measure of co-occurrence of problem components, in the problem tree are computed. At step <b>406</b>, the dynamic problem tree is traversed to detect the redundant problem components.</p>
<p id="p-0040" num="0039">Embodiments of the present invention address the problem of eliminating redundant performance issues within a middleware system. In accordance with an embodiment, this follows a three pronged approach: Model Definition; Problem-Tree Creation; and Tree Normalization. Each will be discussed in more detail in turn.</p>
<p id="h-0009" num="0000">Model Definition</p>
<p id="p-0041" num="0040">As described above, and in accordance with an embodiment, the model is a tree representation of the different relations that can exist between different components in a middleware system which can be diagnosed. A model structure definition represents each diagnosable object such as server or a component. Models can have a static tree defined during design time and dynamic nodes to which relations are established during runtime. The static hierarchy of the model can remain static for every instance of the system type under observation e.g., Cluster, Server, etc; whereas the dynamic hierarchy can vary with each instance of the system under observation.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 5</figref> shows a sample illustration of a model for a server, in accordance with an embodiment. The static structure <b>500</b> of the model can be pre-defined based on possible relationships known at design time. For example, it can be established that an EJB may call a JDBC Data Source. Hence they are related within a model structure. Dependencies of components can either be intra-element or inter-elements. For instance, the slow execution of an SQL in JDBC Data Source by itself may trigger a bottleneck and cause high wait times in the JDBC Data Source. Such intra-element links are statically recognized at design time. This static relation is established implicitly in the dependency tree. The dynamic representation <b>502</b> of the model involves detection of which EJB is related to which JDBC Data Source. This requires knowledge of which instance is related to another and hence will be done only at runtime.</p>
<p id="h-0010" num="0000">Problem Tree Creation</p>
<p id="p-0043" num="0042">In accordance with an embodiment, during this phase, each of the components within a model is inspected for problem symptoms such as response time delays, bottlenecks or unusual memory utilization. A common unit of measure called efficiency of a component can be derived based on the performance metrics of the different aspects mentioned above. By evaluating and comparing the efficiencies of various components, the problem components within an application server can be identified.</p>
<p id="p-0044" num="0043">In accordance with an embodiment, once the components having problems are identified, links between the problem components are identified. A link is associated between two problem components, if there is a relationship defined between their corresponding component types in the model. The links can be identified by applying the pre-determined relationships in the model onto various instances within a runtime environment. Various data points, such as configuration data, e.g., deployment descriptors, server configuration, thread stack data, JTA Transaction data, JNDI calls, and RMI calls, can be leveraged to arrive at the instances of links at runtime. While discovering the links, only the relationships between problem components are considered. Relationships between problem components and non-problem components are ignored. The derivation of such links can include the detection of dynamic relationship between components in the model at runtime. In short, the discovery of such links at runtime results in creation of problem trees which capture the problem components and their runtime relationships between instances as defined in the static model.</p>
<p id="p-0045" num="0044">Along with the discovery of the links at runtime while creating the tree, link probability can also be computed. As described above, link probability is a measure of co-occurrence of two related problem components. In accordance with an embodiment, the link probability between two components is computed as a ratio of the load passing through both the problem components to that of the overall load through the model. This ratio is shown as an equation below:</p>
<p id="p-0046" num="0045">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mi>LinkProbability</mi>
  <mo>=</mo>
  <mfrac>
    <mi>LoadThroughTwoProblemComponents</mi>
    <mi>OverallLoadInTheModel</mi>
  </mfrac>
</mrow>
</math>
</maths>
<br/>
Tree Normalization
</p>
<p id="p-0047" num="0046">In accordance with an embodiment, once the problem tree is created for each model, the problem tree can then be normalized to isolate the relevant components. Each problem component is inspected to see if it is the result of an effect of some downstream problem component. The farthest downstream problem component will always be considered for causal analysis, as it does not have any further downstream components causing any effects. For any other problem component that lies in a different level in the tree, the link probability is inspected.</p>
<p id="p-0048" num="0047">In accordance with an embodiment, if the link probability is greater than 50% or 0.5, it can be established that most of the load in the model is passing through both of the problem components and that the performance degradation seen in the upstream component is an effect of the poor performance of the downstream component. Hence, if the link probability is greater than 50%, the problem component that appears as the upstream component is discounted as redundant. This tree traversal is continued over multiple iterations until all redundant problem components are eliminated. Although a link probability of 0.5 is used in this example, any link probability can be used depending on application and user preferences. In accordance with an embodiment, the link probability used to determine whether a problem component is redundant can be determined dynamically as a function of other performance metrics and system information.</p>
<p id="p-0049" num="0048">In accordance with an embodiment, through this process of problem tree traversal and tree normalization, the problem components that are effects of any level of downstream problem components are identified and removed from the causal diagnostics. This reduces the number of components and narrows down scope of deep diagnostics to be undertaken by the administrator to a limited set of components. By achieving this, there can be faster turnaround in diagnostics and reduction in the number of false positives.</p>
<p id="h-0011" num="0000">Sample Illustration</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 6</figref> shows an example problem tree and its normalization, in accordance with an embodiment. The following example illustrates a server that exhibits problem symptoms in different components such as the execution of SQL statements, getting SQL connections from JDBC Data Source, EJB Pool wait and EJB execution. Here there are two EJBs the InventoryEJB <b>600</b> as well as the CatalogueEJB <b>602</b> that invoke SQL statements through the JDBC Data Source exampleDS <b>604</b>. From the static model (such as that shown in <figref idref="DRAWINGS">FIG. 5</figref>), it is evident that a JDBC DataSource and an EJB instance could be related. Using both deployment descriptors and runtime data, the relationships between the EJBs and the DataSource can be established and the link probability ratios can be computed. The resultant problem tree <b>606</b> is depicted in the left side.</p>
<p id="p-0051" num="0050">The Tree Normalization <b>608</b> step will then traverse the problem components in the problem tree and eliminate redundant problem components, wherever the link probability is higher than a threshold value, e.g., 50%. The resultant normalized problem set <b>610</b> having a lesser number of components to be further analyzed or fixed, is portrayed on the right side. Having so reduced the number of possible components that are the cause of the performance problem, the additional analysis required to determine the root cause is greatly reduced.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 7</figref> shows a method of determining a root cause of a performance problem, in accordance with an embodiment. At step <b>700</b>, a static model of a system under test is created. This can include determining relationships between components in a middleware system. At step <b>702</b>, a dynamic problem tree is created by applying the static model to the system at runtime. The dynamic problem tree shows the relationships between instances of components which have been identified as being potential problem components. At step <b>704</b>, a link probability is identified for each relationship in the dynamic problem tree. At step <b>706</b>, the dynamic problem tree is traversed to detect redundant components. A component is redundant if it has a link probability with its downstream component greater than a threshold value, for example 0.5. At step <b>708</b> redundant components are removed from the dynamic problem tree. At step <b>710</b>, a set of components which are potential causes of the performance problem are returned for further analysis.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 8</figref> shows a system for determining a root cause of a performance problem, in accordance with an embodiment. The system comprises a computer <b>800</b>, which includes a computer readable medium <b>803</b> and processor <b>802</b> operating thereon. An application server <b>804</b> executing on the computer, includes a plurality of components <b>806</b> (e.g. components <b>808</b>-<b>812</b>). A static model <b>814</b> of the system under test, includes relationships between the plurality of components. For example, where it is known that one component can call a second component, those two components are linked in the static model at design time. A dynamic problem tree <b>816</b> can be created by applying the static model to the system at runtime. The dynamic problem tree shows relationships between instances of identified problem components at runtime. When one or more problem symptoms are detected, diagnostic monitor <b>818</b> can identify a link probability for each relationship in the dynamic problem tree, traverse the dynamic problem tree to detect redundant components, wherein a component is redundant if it has a link probability with its downstream component greater than a pre-determined threshold value, remove redundant components from the dynamic problem tree, and return a set of components which are potential causes of the performance problem.</p>
<p id="p-0054" num="0053">The present invention can be conveniently implemented using one or more conventional general purpose or specialized digital computer, computing device, machine, or microprocessor, including one or more processors, memory and/or non-transitory computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.</p>
<p id="p-0055" num="0054">In some embodiments, the present invention includes a computer program product which is a computer readable storage medium (media) having instructions stored thereon/in which can be used to program a computer to perform any of the processes of the present invention. The computer readable storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and/or data.</p>
<p id="p-0056" num="0055">The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627150-20140107-M00001.NB">
<img id="EMI-M00001" he="6.01mm" wi="76.20mm" file="US08627150-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of isolating relevant components associated with a performance problem, comprising:
<claim-text>creating a static model of a system under test, including determining relationships between components in a middleware system;</claim-text>
<claim-text>creating a dynamic problem tree by applying the static model to the system at runtime;</claim-text>
<claim-text>identifying a link probability for each relationship in the dynamic problem tree;</claim-text>
<claim-text>traversing the dynamic problem tree to detect redundant components, wherein a component is redundant if it has a link probability with its downstream component greater than a pre-determined threshold value;</claim-text>
<claim-text>removing redundant components from the dynamic problem tree;</claim-text>
<claim-text>returning a set of isolated components which are relevant in the context of the performance problem.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the threshold value is 0.5.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the static model is created at design time.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the dynamic problem tree is created at runtime by determining which instances of the components are related.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>creating a dynamic model at runtime by determining relationships between instances of the components in the static model;</claim-text>
<claim-text>inspecting the dynamic model for problem symptoms based on metrics associated with the components;</claim-text>
<claim-text>identifying components exhibiting problem symptoms; and</claim-text>
<claim-text>adding the components exhibiting problem symptoms to the dynamic problem tree.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the link probability is a measure of co-occurrence of a problem in multiple related components.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A system for isolating relevant components associated with a performance problem in a middleware system, comprising:
<claim-text>a computer, including a computer readable medium and processor operating thereon;</claim-text>
<claim-text>an application server executing on the computer, wherein the application server includes a plurality of components;</claim-text>
<claim-text>a static model of a system under test, which includes relationships between the plurality of components;</claim-text>
<claim-text>a dynamic problem tree created by applying the static model to the system at runtime; and</claim-text>
<claim-text>a diagnostic monitor, wherein when one or more problem symptoms are detected, the diagnostic monitor
<claim-text>identifies a link probability for each relationship in the dynamic problem tree,</claim-text>
<claim-text>traverse the dynamic problem tree to detect redundant components, wherein a component is redundant if it has a link probability with its downstream component greater than a pre-determined threshold value,</claim-text>
<claim-text>removes redundant components from the dynamic problem tree, and</claim-text>
<claim-text>returns a set of components which are potential components to be analyzed further to determine the root causes of the performance problem.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system for isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the threshold value is 0.5.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system for isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the static model is created at design time.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system for isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the dynamic problem tree is created at runtime by determining which instances of the plurality of components are related.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system for isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the diagnostic monitor is further operable to:
<claim-text>create a dynamic model at runtime by determining relationships between instances of the components in the static model;</claim-text>
<claim-text>inspect the dynamic model for problem symptoms based on metrics associated with the components;</claim-text>
<claim-text>identify components exhibiting problem symptoms; and</claim-text>
<claim-text>add the components exhibiting problem symptoms to the dynamic problem tree.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system for isolating relevant components associated with a performance problem of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the link probability is a measure of co-occurrence of a problem in multiple related components.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A non-transitory computer readable medium including instructions stored thereon which, when executed by a computer, cause the computer to:
<claim-text>create a static model of a system under test, including determining relationships between components in a middleware system;</claim-text>
<claim-text>create a dynamic problem tree by applying the static model to the system at runtime;</claim-text>
<claim-text>identify a link probability for each relationship in the dynamic problem tree;</claim-text>
<claim-text>traverse the dynamic problem tree to detect redundant components, wherein a component is redundant if it has a link probability with its downstream component greater than a threshold value;</claim-text>
<claim-text>remove redundant components from the dynamic problem tree;</claim-text>
<claim-text>return a set of components which are potential components to be analyzed further to determine the root causes of the performance problem.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the threshold value is 0.5.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the static model is created at design time.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the dynamic problem tree is created at runtime by determining which instances of the components are related.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>creating a dynamic model at runtime by determining relationships between instances of the components in the static model;</claim-text>
<claim-text>inspecting the dynamic model for problem symptoms based on metrics associated with the components;</claim-text>
<claim-text>identifying components exhibiting problem symptoms; and</claim-text>
<claim-text>adding the components exhibiting problem symptoms to the dynamic problem tree.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory computer readable medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the link probability is a measure of co-occurrence of a problem in multiple related components.</claim-text>
</claim>
</claims>
</us-patent-grant>

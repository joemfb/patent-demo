<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627316-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627316</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12372233</doc-number>
<date>20090217</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1263</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718100</main-classification>
<further-classification>709224</further-classification>
</classification-national>
<invention-title id="d2e55">Mobile communications device application processing system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5561800</doc-number>
<kind>A</kind>
<name>Sabatella</name>
<date>19961000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5613120</doc-number>
<kind>A</kind>
<name>Palay et al.</name>
<date>19970300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5916308</doc-number>
<kind>A</kind>
<name>Duncan et al.</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5966542</doc-number>
<kind>A</kind>
<name>Tock</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5966702</doc-number>
<kind>A</kind>
<name>Fresko et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6061520</doc-number>
<kind>A</kind>
<name>Yellin et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6110226</doc-number>
<kind>A</kind>
<name>Bothner</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6112304</doc-number>
<kind>A</kind>
<name>Clawson</name>
<date>20000800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6199196</doc-number>
<kind>B1</kind>
<name>Madany et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6230184</doc-number>
<kind>B1</kind>
<name>White et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6260187</doc-number>
<kind>B1</kind>
<name>Cirne</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6295643</doc-number>
<kind>B1</kind>
<name>Brown et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6330709</doc-number>
<kind>B1</kind>
<name>Johnson et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6349344</doc-number>
<kind>B1</kind>
<name>Sauntry et al.</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6446254</doc-number>
<kind>B1</kind>
<name>Chapman et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6453467</doc-number>
<kind>B2</kind>
<name>Madany et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6493870</doc-number>
<kind>B1</kind>
<name>Madany et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6654954</doc-number>
<kind>B1</kind>
<name>Hicks</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6658492</doc-number>
<kind>B1</kind>
<name>Kawahara et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6745386</doc-number>
<kind>B1</kind>
<name>Yellin</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6810519</doc-number>
<kind>B1</kind>
<name>Hicks</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6983460</doc-number>
<kind>B1</kind>
<name>Goire et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717175</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7493616</doc-number>
<kind>B2</kind>
<name>Yach et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2001/0001328</doc-number>
<kind>A1</kind>
<name>Yoshida et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2002/0144011</doc-number>
<kind>A1</kind>
<name>Hinsley</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2004/0045019</doc-number>
<kind>A1</kind>
<name>Bracha et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719332</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>CA</country>
<doc-number>2267477</doc-number>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>EP</country>
<doc-number>1056013</doc-number>
<kind>A2</kind>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>JP</country>
<doc-number>2000-155686</doc-number>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>JP</country>
<doc-number>2001-51853</doc-number>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>RU</country>
<doc-number>2108003</doc-number>
<kind>C1</kind>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>RU</country>
<doc-number>2125344</doc-number>
<kind>C1</kind>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>WO</country>
<doc-number>99/09724</doc-number>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>WO</country>
<doc-number>99/51055</doc-number>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>WO</country>
<doc-number>00/14631</doc-number>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>International Search Report of Application No. PCT/CA02/00799, date of mailing Sep. 20, 2004&#x2014;6 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>Office Action issued in Canadian Application No. 2,448,962 on May 31, 2005; 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>Office Action issued in Canadian Application No. 2,448,962 on Aug. 8, 2006; 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>Office Action issued in Canadian Application No. 2,448,962 on Sep. 26, 2007; 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Notice of Allowance issued in Canadian Application No. 2,448,962 on Jan. 16, 2009; 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Office Action issued in Chinese Application No. 02815017.1 on Apr. 7, 2006; 21 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>Office Action issued in Chinese Application No. 02815017.1 on Nov. 24, 2006; 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>Notice of Allowance issued in Chinese Application No. 02815017.1 on May 11, 2007; 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>Communication Pursuant to Article 96(2) issued in European Application No. 02732274.2 on Aug. 4, 2005; 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Communication Pursuant to Article 94(3) issued in European Application No. 02732274.2 on Dec. 27, 2007; 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>Communication under Rule 71(3) issued in European Application No. 02732274.2 on Apr. 8, 2010; 39 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Extended European Search Report issued in European Application No. 10172732.9 on Sep. 27, 2010; 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Communication Pursuant to Art. 94(3) issued in European Application No. 10172732.9 on Jan. 19, 2011; 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Official Action issued in Japanese Application No. 2003-500735 on Nov. 7, 2006; 30 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Official Action issued in Japanese Application No. 2003-500735 on May 31, 2007; 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Office Action issued in Mexican Application No. PA/a/2003/010975 on Jun. 23, 2006; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Office Action issued in Mexican Application No. PA/a/2003/010975 on Oct. 26, 2007; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Notice of Allowanced issued in Mexican Application No. PA/a/2003/010975 on Feb. 21, 2008; 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Office Action issued in Mexican Application No. PA/a/2006/012933 on Jul. 28, 2008; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Office Action issued in Mexican Application No. PA/a/2006/012933 on Feb. 17, 2009; 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Office Action issued in Mexican Application No. PA/a/2006/012933 on Jul. 24, 2009; pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Notice of Allowance issued in Mexican Application No. PA/a/2006/012933 on Jan. 22, 2010; 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Decision to Grant a Patent issued in Russian Application No. 2003134647 on Oct. 23, 2006; 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Office Action issued in U.S. Appl. No. 10/479,388 on Jan. 29, 2007; 21 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Office Action issued in U.S. Appl. No. 10/479,388 on Jul. 13, 2007; 20 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Office Action issued in U.S. Appl. No. 10/479,388 on Dec. 12, 2007; 20 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Office Action issued in U.S. Appl. No. 10/479,388 on Jun. 26, 2008; 20 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Notice of Allowance issued in U.S. Appl. No. 10/479,388 on Oct. 7, 2008; 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>International Preliminary Examination Report issued in International Application No. PCT/CA02/00799 on Dec. 14, 2004; 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Communication Pursuant to Art. 94(3) issued in European Application No. 10172732.9 on Oct. 4, 2012; 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Office Action issued in Russian Application No. 2003134647 on Dec. 2005.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>80</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>12</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10479388</doc-number>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7493616</doc-number>
</document-id>
</parent-grant-document>
<parent-pct-document>
<document-id>
<country>WO</country>
<doc-number>PCT/CA02/00799</doc-number>
<date>20020530</date>
</document-id>
</parent-pct-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12372233</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>60294331</doc-number>
<date>20010530</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090210877</doc-number>
<kind>A1</kind>
<date>20090820</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Yach</last-name>
<first-name>David P.</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dahms</last-name>
<first-name>John F. A.</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Yach</last-name>
<first-name>David P.</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Dahms</last-name>
<first-name>John F. A.</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fish &#x26; Richardson P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>BlackBerry Limited</orgname>
<role>03</role>
<address>
<city>Waterloo, Ontario</city>
<country>CA</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tang</last-name>
<first-name>Kenneth</first-name>
<department>2199</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method of pre-linking classes for use by one or more applications. The system and method may also be used where the runtime processing is split between a host system and a target system. At the host system at least several classes are loaded and linked. At least one host-linked module is generated from the linked classes. The host-linked module is made available for use by the one or more applications operating on the target system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="168.74mm" wi="139.53mm" file="US08627316-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="165.86mm" wi="154.94mm" orientation="landscape" file="US08627316-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="210.99mm" wi="137.16mm" file="US08627316-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="165.61mm" wi="92.12mm" file="US08627316-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="172.38mm" wi="130.30mm" file="US08627316-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="175.85mm" wi="138.51mm" file="US08627316-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="201.00mm" wi="125.90mm" orientation="landscape" file="US08627316-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="199.73mm" wi="141.14mm" file="US08627316-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="206.25mm" wi="138.94mm" orientation="landscape" file="US08627316-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="213.19mm" wi="141.56mm" file="US08627316-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="202.78mm" wi="135.47mm" file="US08627316-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="199.14mm" wi="137.75mm" file="US08627316-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="203.62mm" wi="140.29mm" file="US08627316-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims priority to U.S. provisional application Ser. No. 60/294,331 entitled &#x201c;Method Of Splitting A Processing Machine Runtime Between A Host System And A Target System&#x201d; filed May 30, 2001. By this reference, the full disclosure, including the drawings, of U.S. provisional application Ser. No. 60/294,331 is incorporated herein.</p>
<p id="p-0003" num="0002">This application is a continuation of U.S. patent application Ser. No. 10/479,388 entitled &#x201c;Mobile Communications Device Application Processing System&#x201d; filed on Nov. 26, 2003, granted as U.S. Pat. No. 7,493,616, the entirety of which is herein incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">This invention relates to the field of processing machine runtime environments. In particular, this invention relates to a method of splitting a processing machine runtime between a host system and a target system for conserving resources at the target system.</p>
<p id="p-0005" num="0004">Currently, the state of the art virtual machine is the Java&#x2122; virtual machine (JVM) from Sun Microsystems, Inc. (Sun). At the centre of Sun Microsystems Java&#x2122; technology is their Java&#x2122; virtual machine code, or byte code, as currently specified by the class file format in chapter 4 of the second edition of The Java&#x2122; Virtual Machine Specification by Tim Lindholm and Frank Yellin, Addison-Wesley Pub Co; ISBN: 0201432943.</p>
<p id="p-0006" num="0005">Class file byte code co-operates with Sun's Java&#x2122; Runtime Environment (JRE) on the Solaris&#x2122;, Win32, Linux&#x2122;, Mac, and possibly other platforms. Typically, source code written in the Java&#x2122; programming language, is compiled into virtual machine byte code respecting the class file format by using a Java&#x2122; compiler, such as &#x201c;javac&#x201d;, and then executed using the JRE or a compatible runtime environment and processing machine.</p>
<p id="p-0007" num="0006">In reference to <figref idref="DRAWINGS">FIG. 1</figref>, d layered JRE architecture block diagram illustrates several aspects of the Sun technique. Various mechanisms (<b>100</b>A and <b>100</b>B) provide program software (<b>110</b>A and <b>110</b>B) byte code class files. For instance, a compiler <b>100</b>A compiles software <b>110</b>A into byte code class files. Alternatively, a web browser may use a software &#x201c;plugin&#x201d; <b>110</b>B to download software <b>100</b>B byte code class files.</p>
<p id="p-0008" num="0007">Byte code in a class file usually references several other classes, each of which has a class file. For that reason, standard package <b>120</b> class files are provided as a shared software resource to be re-used by instances of software (<b>110</b>A and <b>110</b>B). The JVM <b>140</b> obtains class files and executes software (<b>110</b>A and <b>110</b>B) and standard package class files <b>120</b>.</p>
<p id="p-0009" num="0008">Also shown are the various systems <b>130</b> on top of which the JRE <b>142</b> operates. The standard packages in a runtime define a particular runtime platform specified in an application programmer's interface (API).</p>
<p id="p-0010" num="0009">The Java&#x2122; 2 Standard Edition (J2SE) is a Sun reference platform API. They also provide a reference implementation comprising a JRE configured with a set of standard packages running on the JVM. Application developers can write applications in the Java&#x2122; programming language referring to the J2SE standard package classes and may expect to have their applications run on J2SE compliant runtime systems. Other platforms exist which are usually defined by comparison to the J2SE. For instance, a superset of J2SE, the Java&#x2122; 2 Enterprise Edition (J2EE) adds further features. Of particular interest is a subset of J2SE, the Java&#x2122; 2 Micro Edition (J2ME).</p>
<p id="p-0011" num="0010">Although the J2SE platform may be well suited to operate on systems such as those illustrated by the Solaris&#x2122;, Win32, Mac, Linux&#x2122;, and other blocks <b>130</b> of <figref idref="DRAWINGS">FIG. 1</figref>, J2SE may not be well suited for operating on many devices. For instance, the class files of the standard J2SE packages may presently consume well over 16 Megabytes of disk space, which may exceed the storage capacity of many devices.</p>
<p id="p-0012" num="0011">To address this problem, Sun introduced the Java&#x2122; 2 Micro Edition (J2ME) platform, additional virtual machines, and associated device configurations.</p>
<p id="p-0013" num="0012">The Connected Limited Device Configuration (CLDC) and K Virtual Machine (KVM) address small consumer devices that you hold in your hand, with 128K to 512K of memory, and when used with the Mobile Information Device Profile (MIDP) may provide an application environment for devices such as cell phones and two-way pagers.</p>
<p id="p-0014" num="0013">The Connected Device Configuration (CDC) and C Virtual Machine (CVM) address emerging, next-generation consumer devices with 2 MB or more of memory, and when used with the Foundation Profile (FP) may provide an application environment for next-generation consumer devices.</p>
<p id="p-0015" num="0014">An advantage of J2ME is that when it is used with the aforementioned CLDC or CDC configurations, fewer standard class packages are stored on many devices as compared to J2SE. Therefore J2ME may take up less space on a device at the expense of not supporting all of the features of J2SE.</p>
<p id="p-0016" num="0015">Although Java&#x2122; runtime technology may be available for different systems and devices, and although the J2ME platform addresses the limited storage space problem of devices by removing functionality, J2ME may not be considered an adequate solution since it may not address the efficiency of a device runtime implementation. Thus, there is a need for a runtime that is optimized for a target device (as well as other needs).</p>
<p id="p-0017" num="0016">In order to better understand the present invention, the following information regarding Java runtime technology is provided. According to Lindholm et al., in section &#xa7;2.17.1 of the Sun JVM spec: &#x201c;The Java virtual machine starts execution by invoking the method main of some specified class and passing it a single argument, which is an array of strings. This causes the specified class to be loaded (&#xa7;2.17.2), linked (&#xa7;2.17.3) to other types that it uses, and initialized (&#xa7;2.17.4)&#x201d;. Therefore by specifying the name of a &#x201c;main&#x201d; class when starting the JVM <b>140</b> of <figref idref="DRAWINGS">FIG. 1</figref>, a class file will be loaded and execution of byte code instructions will begin at the static main entry point of that class file. Furthermore, referenced types, such as classes, used by the &#x201c;main&#x201d; class will be linked and initialized. Depending on the use of other classes by the &#x201c;main&#x201d; class file, significant runtime resources will be consumed in order to load and link used class files.</p>
<p id="p-0018" num="0017">Java&#x2122; runtime technology requires that the runtime system load and link all required class files each time a &#x201c;main&#x201d; class is specified for execution, which may cause the precipitous consumption of resources on a target system such as a device.</p>
<p id="p-0019" num="0018">A typical Java&#x2122; application has at least one &#x201c;main&#x201d; class file containing a static main entry point, as well as possibly having several supporting class files.</p>
<p id="p-0020" num="0019">The following example Java&#x2122; program listing is considered next:</p>
<p id="p-0021" num="0020">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public class Hello {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static void main(String[ ] a) {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>System.out.println(&#x201c;Hello!&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>Bye.bye(a);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>public class Bye {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>public static void bye(String[ ] a) {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>System.out.println(&#x201c;Bye!&#x201d;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0022" num="0021">The above listing provides source code for two classes, Hello and Bye, each of which can be compiled into class file format in a way which is known to a person skilled in the art, such as by placing the source for each class in a Hello.java file and a Bye.java file and using the command &#x201c;javac Hello.java Bye.java&#x201d; to obtain a Hello.class file and Bye.class file.</p>
<p id="p-0023" num="0022">The Hello class provides a static main entry point and is therefore suitable to be specified as a &#x201c;main&#x201d; class when starting the JVM <b>140</b>.</p>
<p id="p-0024" num="0023">In reference to <figref idref="DRAWINGS">FIG. 2</figref>, the linking technique of the runtime of <figref idref="DRAWINGS">FIG. 1</figref> is considered in reference to the above example &#x201c;Hello&#x201d; program. A plurality of class files <b>200</b> is available to the virtual machine <b>140</b> (of <figref idref="DRAWINGS">FIG. 1</figref>). Each class file has symbolic information that is used by the virtual machine <b>140</b> to resolve references to other used class files.</p>
<p id="p-0025" num="0024">Typically, the Hello.class file <b>210</b>A is loaded at <b>220</b>A first as it is specified when starting the JVM <b>140</b>. The JVM <b>140</b> then proceeds to execute byte code instructions at the main entry point of the loaded class <b>220</b>A. Since the Hello class <b>220</b>A uses several standard package classes, the class files for the used classes will be loaded and linked to the Hello class <b>220</b>A. The Object.class file <b>210</b>B will be loaded at <b>220</b>B and linked <b>230</b>B to the <b>210</b>A Hello class. Similarly, the String.class file <b>210</b>C, System.class file <b>210</b>D, and other class files <b>210</b> used by the Hello class are loaded at <b>220</b>C, <b>220</b>D, <b>220</b> and linked at <b>230</b>C, <b>230</b>D, and <b>230</b>. The Hello class also uses the Bye class (a supporting class which is not a standard package class) so the Bye.class file <b>210</b>E will be loaded at <b>220</b>E and linked at <b>230</b>E.</p>
<p id="p-0026" num="0025">Although not expressly shown in the drawings, each time a class file <b>210</b> is loaded at <b>220</b> and linked at <b>230</b>, any class files the loaded class <b>220</b> uses might also be loaded and linked. For instance, in the case of the loaded supporting Bye class <b>220</b>E, it uses many of the same classes as the Hello class <b>210</b>A. Depending on when the Bye class <b>220</b>E is loaded and linked <b>230</b>E, the Bye class <b>220</b>E may not have to load the class files <b>210</b> that are common with classes also used and loaded by the Hello class. However, all classes used by Bye <b>220</b>A will ultimately have to be linked to Bye as well for Hello to be able to use the supporting Bye class. The situation is similar with standard package classes.</p>
<p id="p-0027" num="0026">Traditional class file <b>210</b> loading (at <b>220</b>) and linking (at <b>230</b>) consume significant runtime resources and may slow down the execution of a &#x201c;main&#x201d; program <b>220</b>A when loading and linking of class files is triggered by the specification of a command to execute a program, as will be discussed further next in reference to <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>.</p>
<p id="p-0028" num="0027">With reference to <figref idref="DRAWINGS">FIGS. 3A and 3B</figref>, a flowchart further illustrating the runtime linking technique of <figref idref="DRAWINGS">FIG. 2</figref>, particularly illustrating optional late resolution, is discussed. The &#x201c;main&#x201d; class is loaded at <b>310</b> from class storage <b>200</b>, such as a hard drive or a network. The class is verified and prepared at <b>315</b>. If late resolution is not used as determined at <b>320</b>, then all used classes are linked and loaded at <b>325</b>. Regardless of whether late resolution is used at <b>320</b> or not, the &#x201c;main&#x201d; class is initialized at <b>330</b>.</p>
<p id="p-0029" num="0028">Instructions from the main entry point are fetched at <b>335</b>. If the fetched instruction does not involve an unresolved reference as determined at <b>340</b>, the fetched instruction is executed at <b>345</b>. However if the fetched instruction involves an unresolved identifier reference as determined at <b>340</b>, such as a class reference to a class that has not yet been loaded, then if late resolution is not used as determined at <b>350</b>, an exception is thrown in the runtime. If late resolution is used as determined at <b>350</b>, and if the referenced class cannot be loaded at <b>355</b>, an exception is thrown in the runtime. However, if late resolution is used as determined at <b>350</b>, and the referenced class can be loaded, the referenced class is loaded and the reference is resolved at <b>360</b> prior to executing the instruction at <b>345</b>. If there are more instructions to execute as determined at <b>365</b>, then the next instruction is fetched at <b>335</b>, or else the virtual machine ends.</p>
<p id="p-0030" num="0029">If late resolution were used, then several class files would have been loaded and linked at <b>360</b> during execution of the main program byte code. Alternatively, if late resolution were not used, several class files would have been loaded and linked at <b>325</b> prior to executing the main program byte code, after specifying the &#x201c;main&#x201d; class file to the JVM <b>140</b>. In either case, a precipitous consumption of resources for loading and linking may ensue between the time the main program was specified for execution by the JVM <b>140</b> in the runtime and the time when the main program either terminated or threw an exception.</p>
<p id="p-0031" num="0030">Therefore, even by eliminating late resolution, there is a potential risk for a precipitous consumption of resources for loading and linking class files in execution triggered linking and loading.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0032" num="0031">The present invention overcomes the problems noted above as well as others. In accordance with the teachings of the present invention, a system and method are provided for pre-linking classes for use by one or more applications. The system and method may also be used where the runtime processing is split between a host system and a target system. At the host system at least several classes are loaded and linked. At least one host-linked module is generated from the linked classes. The host-linked module is made available for use by the one or more applications operating on the target system.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0033" num="0032">In order that the invention may be more clearly understood, embodiments thereof will now be described in detail by way of example only, with reference to the accompanying drawings, in which:</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a prior art runtime technique;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a linking technique of the runtime of <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIGS. 3A and 3B</figref> are flowcharts further illustrating the runtime linking technique of <figref idref="DRAWINGS">FIG. 2</figref>, particularly illustrating optional late resolution;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIGS. 4 and 5</figref> are block diagrams illustrating an exemplary split runtime system;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIGS. 6 and 7</figref> are block diagrams illustrating different exemplary split runtime systems;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram illustrating a linking technique for a split runtime system;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart further illustrating the linking technique of <figref idref="DRAWINGS">FIG. 8</figref>, introducing a host-linking step and a target-linking step;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart further illustrating the host-linking step of <figref idref="DRAWINGS">FIG. 9</figref>; and</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 11</figref> is a flowchart further illustrating the target-linking step of <figref idref="DRAWINGS">FIG. 9</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0043" num="0042">The same reference numerals are used In different figures to refer to similar elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> depicts an embodiment of a module-based runtime system. Instead of unlinked class files, a processing machine <b>440</b> executes modules <b>450</b> that include classes that have already been loaded and linked. More specifically, the modules <b>450</b> comprise the information found in closed set loaded and linked class files, thereby optimizing commands, symbolic information, and code size and sped for the target processing machine <b>440</b>. Modules <b>450</b> allow the runtime to re-use the intermediate loading and linking work in multiple executions of main programs, instead of repeating this work at every execution. Modules <b>450</b> provide an alternative to execution triggered loading and linking.</p>
<p id="p-0045" num="0044">A compiler (or other mechanism) <b>405</b> receives a class file <b>407</b> which include symbolic references <b>409</b> to other classes <b>411</b>. The compiler <b>405</b> processes class files <b>407</b> and <b>411</b> which are in byte code such that the symbolic references <b>409</b> are resolved. The processed class files are provided to the processing machine <b>440</b> as modules <b>450</b>. The processing machine <b>440</b> operates more efficiently on target devices <b>430</b> since typically the module size is substantially smaller than traditional runtime class files, for example, there may be a reduction approximately eight-fold in comparison to Java class file size. Also, module code can be verified once using sanity checks prior to multiple executions, thereby increasing subsequent execution speeds. Modules can be configured to minimize code communication, particularly useful in communication bandwidth-limited devices. Modules <b>450</b> can be configured to minimize code set up and execution time, particularly useful in runtime resource-limited devices. Modules <b>450</b> can be adapted to existing processing machine runtimes while maintaining compatibility with reference APIs, as <figref idref="DRAWINGS">FIG. 5</figref> illustrates.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an embodiment wherein various mechanisms <b>405</b>A and <b>405</b>B provide software <b>410</b>. A compiler <b>405</b>A compiles software <b>410</b>. Alternatively, other mechanisms <b>405</b>B can be used to download or otherwise obtain software <b>410</b>. Standard class packages <b>420</b> are provided as a shared software resource to be re-used by instances of software <b>410</b>. The processing machine <b>440</b> obtains classes and executes software <b>410</b> using standard class packages <b>420</b>.</p>
<p id="p-0047" num="0046">Also shown are the various target devices <b>430</b> on top of which the processing machine <b>440</b> operates, such as a mobile device <b>430</b>A, a personal data assistant (PDA) <b>430</b>B, an appliance <b>430</b>C, a thin client <b>430</b>D, or other device <b>430</b>E.</p>
<p id="p-0048" num="0047">In <figref idref="DRAWINGS">FIG. 5</figref>, modules <b>450</b> have been introduced between the mechanism that provides software <b>410</b> and the processing machine <b>440</b> that executes machine code. The processing machine <b>440</b> however still uses the classes in the provided software <b>410</b> as well as the standard class packages <b>420</b>, except that this is now done through the use of modules <b>450</b> rather than directly using class files. Class files can still be used as the compiler can take both class files and source files on its input and produce modules on its output.</p>
<p id="p-0049" num="0048">Because of the presence of modules <b>450</b>, the processing machine <b>440</b> need not be a virtual machine nor even know about the class file format, thereby optimizing performance at the target system by eliminating the need to load, link, and resolve class files. Further optimizations are possible if the provided runtime is split between a host system and a target device <b>430</b>, as described in reference to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a split embodiment of a module-based runtime system. The class runtime processing is split between a host system <b>530</b> and a target system <b>430</b>. The use of modules allow the runtime to be efficiently split between a host system and target device to optimize runtime efficiency at the target device.</p>
<p id="p-0051" num="0050">In the host system split runtime, class files (<b>407</b> and <b>411</b>) are host-linked at <b>510</b> into host-linked modules <b>520</b>. The work of closed class file set analysis is offloaded to the host system <b>530</b>. In the target system split runtime, host-linked modules <b>520</b> are communicated at <b>540</b> from the host system <b>530</b>, to be target-linked at <b>550</b> into target-linked modules <b>560</b>. If any additional class resolution is needed on the target system <b>430</b>, then the additionally needed target module identifiers <b>562</b> are target-linked at <b>550</b> with the host-linked modules <b>520</b> to form the target-linked modules <b>560</b>. The processing machine <b>440</b> executes the target-linked modules <b>560</b>.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating another split runtime system. For the host system <b>530</b>, class files <b>410</b> are host-linked at <b>510</b> into host-linked modules <b>520</b>. For this system, the details of host linking will be discussed further in reference to <figref idref="DRAWINGS">FIGS. 8</figref>, <b>9</b> and <b>10</b> below. For the target system <b>430</b>, host-linked modules <b>520</b> are communicated at <b>540</b> from the host system <b>530</b>, to be target-linked <b>550</b> into target-linked modules <b>560</b>. The communication <b>540</b> between host and target may occur over any medium so that the module(s) may be provided to the target, such as through a mobile communications network if the target is a mobile communications device, or through a data signal embodied in a carrier signal. The details of target linking will be discussed further in reference to <figref idref="DRAWINGS">FIGS. 8</figref>, <b>9</b> and <b>11</b> below.</p>
<p id="p-0053" num="0052">In reference to <figref idref="DRAWINGS">FIG. 8</figref>, a block diagram illustrating the loading of class files, and the split linking into modules, and execution of the split module runtime of <figref idref="DRAWINGS">FIGS. 6 and 7</figref> is described presently. The work of closed class file set analysis is offloaded into a host system <b>400</b>A. There, class files <b>600</b> are loaded at <b>610</b> and linked into host-linked modules <b>520</b>A and <b>520</b>F. Illustrated are an application module for the example &#x201c;Hello&#x201d; module <b>520</b>A comprising the optimized information found in the Hello.class file <b>610</b>A and Bye.class file <b>610</b>E wherein the Hello class is pre-linked to the Bye class. Module <b>520</b>A also has a symbolic reference <b>615</b> to a Library module <b>520</b>F which comprises all of the standard package classes that the Hello and Bye classes use, such as the classes provided by the Object class file <b>610</b>B, String class file <b>610</b>C, System class file <b>610</b>D, and other class files <b>610</b>. The Library module <b>520</b>F could export all public symbols so that many different &#x201c;main&#x201d; classes such as Hello can re-use all of the standard class package files. Alternatively, the Library module could comprise only those class files used by the Hello and Bye classes, or even all used classes could be included directly in module <b>520</b>A. The latter case would eliminate the need for any symbol resolution on the target system.</p>
<p id="p-0054" num="0053">When at least one host-linked module (<b>520</b>A and/or <b>520</b>F) is available, it is possible to communicate at <b>540</b> the candidate module <b>620</b>A and <b>620</b>F to the split runtime on the target system <b>400</b>B. Once the candidate modules (<b>620</b>A and <b>602</b>F) are received on the target system, it is target-linked into a target-linked module <b>560</b>A and <b>560</b>F and any module symbolic references <b>615</b> are resolved as shown at <b>630</b>. A main module class can be specified for execution, such as the Hello class <b>640</b>. However, advantageously, each time the main program of the Hello class executes, there is no need to resolve reference <b>650</b> as the target-linking <b>630</b> provides it.</p>
<p id="p-0055" num="0054">With reference to <figref idref="DRAWINGS">FIG. 9</figref>, a flowchart further illustrating the linking technique of <figref idref="DRAWINGS">FIG. 8</figref>, depicting a host-linking step and a target-linking step, is described. In the split runtime system on the host, classes <b>600</b> are loaded and host-linked at <b>800</b> into host linked modules <b>520</b>. Then, at least one host-linked module <b>520</b> is sent to the split runtime system on the target.</p>
<p id="p-0056" num="0055">In the split runtime system on the target, at least one candidate host-linked module <b>620</b> is received at <b>720</b> from the host. The candidate host-linked module <b>620</b> is target-linked at <b>900</b> into a target-linked module <b>560</b>. At least one target-linked module <b>560</b> is executed at <b>730</b>. If a new module is desired as determined at <b>740</b>, the host-linking process <b>800</b>, communications processes (<b>710</b> and <b>720</b>) and target linking process <b>900</b> cycles may ensue. However, if no new modules are desired, then repeated execution at <b>730</b> of target-linked modules can ensue without the overhead of loading and linking.</p>
<p id="p-0057" num="0056">In reference to <figref idref="DRAWINGS">FIG. 10</figref>, a flowchart further illustrating the host-linking step of <figref idref="DRAWINGS">FIG. 9</figref> is described. In the split runtime system on the host, host linked modules <b>520</b> exported symbols provide at <b>810</b> foreign module identifiers <b>815</b>. Also, classes <b>600</b> provide at <b>820</b> candidate host classes <b>825</b>. Class references in the candidate host classes <b>825</b> are replaced at <b>830</b> with module references using foreign module identifiers <b>815</b>, thereby providing closed set candidate module classes <b>835</b>. Then, candidate module exported identifiers <b>845</b> are provided at <b>840</b>, The candidate module classes <b>835</b> and exported identifiers <b>845</b> are then verified at <b>850</b>. If verified as determined at <b>860</b>, then the candidate host-linked module is provided at <b>870</b> as a host-linked module <b>520</b>. If not verified as determined at <b>860</b>, an exception is thrown.</p>
<p id="p-0058" num="0057">In reference to <figref idref="DRAWINGS">FIG. 11</figref>, a flowchart further illustrating the target-linking step of <figref idref="DRAWINGS">FIG. 9</figref> is described. In the split runtime system on the device, the received candidate module <b>620</b> provides at <b>910</b> candidate module references <b>915</b>. Also, target-linked modules <b>560</b> provides at <b>920</b> target module identifiers <b>925</b>. Next, resolution of module references in the candidate module provides at <b>930</b> a resolved module <b>935</b>. The resolved module <b>935</b> is verified at <b>940</b>, and if the resolved module <b>935</b> is verified successfully as determined at <b>950</b>, then the resolved module <b>935</b> is stored at <b>960</b> with other target-linked modules <b>560</b>. However, if the resolved module <b>935</b> is not verified successfully as determined by <b>950</b>, an exception is thrown.</p>
<p id="p-0059" num="0058">Having described in detail the preferred embodiments of the present invention, including preferred modes of operation, it is to be understood that this invention and operation could be constructed and carried out with different elements and steps. The embodiments are presented only by way of example and are not meant to limit the scope of the system and method of the present invention, which is defined by the claims.</p>
<p id="p-0060" num="0059">To illustrate the wide scope of the system and method, the following is provided. Virtual machine code is usually interpreted by software. However, a virtual machine code processor can be implemented in hardware. Adaptation of the system and method to a hardware processing machine runtime is within the scope of the invention. As additional examples of the wide scope of the system and method, the system and method may allow for the optimization of commands, symbolic information, and code through the use of the system's and method's modules. The system and method may allow for a module size that is substantially smaller than traditional runtime class file, for instance by reducing in some cases by eight-fold the module size in comparison to Java class file size without losing functionality. The system and method may provide that module code can be verified using sanity checks once prior to multiple executions.</p>
<p id="p-0061" num="0060">The system and method may also allow a module to combine only new classes to minimize module storage size and allow for efficient module delivery to communication bandwidth-limited devices. As another example of the wide scope of the system and method, the system and method can combine all required classes to minimize code set up and execution time in resource-limited devices. The system and method may be adapted to existing processing machine runtimes while maintaining compatibility with reference APIs. The system and method may provide that modules can be dynamically linked together while minimizing the number of symbolic references, Still further, the system and method may provide that code in modules can be executed directly from storage on a device, unlike class files that have to be loaded from storage prior to execution.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system, comprising:
<claim-text>a host system, configured to split class run-time processing between the host system and a target mobile communication device including transmitting to the target mobile communication device over a network connection, a pre-linked module, including a plurality of classes that have been loaded and pre-linked; and</claim-text>
<claim-text>a target mobile communication device, including an application, and configured to:
<claim-text>receive the pre-linked module; and</claim-text>
<claim-text>link the pre-linked module into a target-linked module;</claim-text>
</claim-text>
<claim-text>the application having access to the target-linked module to use the pre-linked classes during the application's execution.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon the target mobile communication device;
<claim-text>wherein the network connection comprises a mobile communication network for providing the pre-linked module for use by the application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the target mobile communication device includes target-linking means for target-linking the pre-linked module with other modules for use by the application.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the pre-linked module substantially optimizes commands, symbolic information, and code;
<claim-text>wherein the symbolic information in the pre-linked module has been resolved.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the classes include symbolic information.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the pre-linked module is verified.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the pre-linked module comprises a plurality of modules that contain all classes needed by the application.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application is operative on the target device, wherein the pre-linked module is directly executable from a processor-readable memory on the device.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the pre-linked module provides re-use of loading and linking steps in executions of multiple applications operating on the device.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the pre-linked module is generated prior to execution of the application.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the pre-linked module is configured based upon code set up at execution time.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon a bandwidth-limited device.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon a mobile data device.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon a personal data assistant.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon a wireless mobile communication device.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the application operates upon a thin client application.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said plurality of classes comprise Java-based classes.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method of host-linking classes at a host system, comprising:
<claim-text>loading at the host system at least several classes;</claim-text>
<claim-text>linking at the host system the loaded classes;</claim-text>
<claim-text>forming at least one host-linked module from the linked classes;</claim-text>
<claim-text>storing at the host system said host-linked module in a processor-readable memory; and</claim-text>
<claim-text>splitting class run-time processing between the host system and a target system including providing multiple pre-linked classes over a network connection for use the target system for linking into a target-linked module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein a services application provides at least one of the classes to be used in said loading step at the host system.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein a software library provides at least one of the classes to be used in said loading step at the host system.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein a Java application provides at least one of the classes to be used in said loading step at the host system.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the linking of the loaded classes at the host system substantially optimizes commands, symbolic information, and code.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the classes comprise symbolic information.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: verifying at the host system the host-linked module using sanity checks.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: verifying at the host system the host-linked module using sanity checks once prior to multiple executions of the target-linked module on the target system.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module comprises a plurality of modules that contain all classes needed by an application having access to the target-linked module.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target-linked module is directly executable from storage on the target system.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module comprises information of closed set loaded and linked classes.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module provides re-use of the loading and the linking steps in multiple executions of an application having access to the target-linked module.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref> wherein the host system resolves module references during generation of the host-linked module.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00030">claim 30</claim-ref> wherein the host-linked module being provided to the target system eliminates need for the target system to resolve classes associated with the host-linked module.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module provides re-use of the loading and the linking steps in multiple executions of an application and of a second application.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module is generated prior to execution of an application.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module is configured based upon code communication to the target system.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the host-linked module is configured based upon code set up at execution time.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: providing the host-linked module to the target system for use by an application.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: transmitting the host-linked module from the host system to the target system over the network connection which comprises a mobile communication network for use by an application.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: dividing processing machine runtime between the host system and the target system by forming at the host system the host-linked module and by linking at the target system the host-linked module into at least one target-linked module for use by an application.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising the step of: linking at the target system the host-linked module with other modules for use by an application.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The method of <claim-ref idref="CLM-00039">claim 39</claim-ref> further comprising the step of: providing a table of exported identifiers for use in the linking of the loaded classes at the host system.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a bandwidth-limited device.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a processing machine for executing an application.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a virtual machine for executing an application.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a mobile data device.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a personal data assistant.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises an appliance.</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a thin client application.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a virtual machine code processor to process the host-linked module.</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the target system comprises a hardware processing machine runtime to process the host-linked module.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the classes comprise Java-based classes.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. Computer software stored on a processor-readable media, the computer software comprising program code for carrying out a method according to <claim-ref idref="CLM-00018">claim 18</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. A host-linked module produced in accordance with the method of <claim-ref idref="CLM-00018">claim 18</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. A method of handling a host-linked module at a target system, said host-linked module having been generated by a host system through loading at least several classes, said host system linking at the host system the loaded classes and forming at least one host-linked module from the linked classes, said method comprising:
<claim-text>receiving the host-linked module, which has multiple pre-linked classes, at the target system from the host system over a network connection, wherein the host system split class run-time processing between the host system and the target system by providing the multiple pre-linked classes over a network connection;</claim-text>
<claim-text>determining whether any additional classes are to be linked with the host-linked module, if additional classes are to be linked, then linking the host-linked module with the additional classes to form a target-linked module;</claim-text>
<claim-text>storing said target-linked module in a processor-readable medium; and</claim-text>
<claim-text>accessing the target-linked module in order to enable the target-linked module to be used by an application operating on the target system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module being provided to the target system eliminates the target system from resolving classes associated with the host-linked module.</claim-text>
</claim>
<claim id="CLM-00055" num="00055">
<claim-text>55. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module being provided to the target system eliminates need for the target system to resolve classes associated with the host-linked module.</claim-text>
</claim>
<claim id="CLM-00056" num="00056">
<claim-text>56. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a bandwidth-limited device.</claim-text>
</claim>
<claim id="CLM-00057" num="00057">
<claim-text>57. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a processing machine for executing the application.</claim-text>
</claim>
<claim id="CLM-00058" num="00058">
<claim-text>58. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a virtual machine for executing the application.</claim-text>
</claim>
<claim id="CLM-00059" num="00059">
<claim-text>59. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a mobile data device.</claim-text>
</claim>
<claim id="CLM-00060" num="00060">
<claim-text>60. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a personal data assistant.</claim-text>
</claim>
<claim id="CLM-00061" num="00061">
<claim-text>61. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises an appliance.</claim-text>
</claim>
<claim id="CLM-00062" num="00062">
<claim-text>62. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a thin client application.</claim-text>
</claim>
<claim id="CLM-00063" num="00063">
<claim-text>63. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a virtual machine code processor to process the host-linked module.</claim-text>
</claim>
<claim id="CLM-00064" num="00064">
<claim-text>64. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the target system comprises a hardware processing machine runtime to process the host-linked module.</claim-text>
</claim>
<claim id="CLM-00065" num="00065">
<claim-text>65. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the classes comprise Java-based classes.</claim-text>
</claim>
<claim id="CLM-00066" num="00066">
<claim-text>66. Computer software stored on a processor-readable media, the computer software comprising program code for carrying out a method according to <claim-ref idref="CLM-00053">claim 53</claim-ref>.</claim-text>
</claim>
<claim id="CLM-00067" num="00067">
<claim-text>67. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module was verified at the host system using sanity checks once prior to multiple executions on the target system.</claim-text>
</claim>
<claim id="CLM-00068" num="00068">
<claim-text>68. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module comprises a plurality of modules that contain all classes needed by the application.</claim-text>
</claim>
<claim id="CLM-00069" num="00069">
<claim-text>69. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module is directly executable from storage on the target system.</claim-text>
</claim>
<claim id="CLM-00070" num="00070">
<claim-text>70. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module provides re-use of the loading and the linking steps in multiple executions of the application.</claim-text>
</claim>
<claim id="CLM-00071" num="00071">
<claim-text>71. The method of <claim-ref idref="CLM-00070">claim 70</claim-ref> wherein the host system resolves module references during generation of the host-linked module.</claim-text>
</claim>
<claim id="CLM-00072" num="00072">
<claim-text>72. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module provides re-use of the loading and the linking steps in multiple executions of the application and of a second application.</claim-text>
</claim>
<claim id="CLM-00073" num="00073">
<claim-text>73. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module is generated prior to execution of the application.</claim-text>
</claim>
<claim id="CLM-00074" num="00074">
<claim-text>74. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module is configured based upon code communication to the target system.</claim-text>
</claim>
<claim id="CLM-00075" num="00075">
<claim-text>75. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> wherein the host-linked module is configured based upon code set up at execution time.</claim-text>
</claim>
<claim id="CLM-00076" num="00076">
<claim-text>76. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> further comprising the step of: receiving the host-linked module from the host system at the target system over the network connection which comprises a mobile communication network.</claim-text>
</claim>
<claim id="CLM-00077" num="00077">
<claim-text>77. The method of <claim-ref idref="CLM-00053">claim 53</claim-ref> further comprising the step of: dividing processing machine runtime between the host system and the target system by forming the host-linked module at the host system and by target-linking at the target system the host-linked module into at least one target-linked module for use by the application.</claim-text>
</claim>
<claim id="CLM-00078" num="00078">
<claim-text>78. A module-based runtime system for executing an application, comprising:
<claim-text>a processor-readable memory storing a pre-linked module that includes class files that have been loaded and linked, said pre-linked module having information of closed set loaded and linked classes,</claim-text>
<claim-text>said pre-linked module, which has multiple pre-linked classes, being provided to a target system over a network connection, wherein a host system splits class run-time processing between the host system and the target system by providing the multiple pre-linked classes over a network connection;</claim-text>
<claim-text>the target system configured to link the pre-linked module into a target-linked module and including an application that accesses the target-linked module to use the classes during the application's execution.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00079" num="00079">
<claim-text>79. A non-transitory processor-readable memory for storing a host-linked module for use by a target system, said host-linked module being generated through a process comprising the steps of:
<claim-text>loading at the host system at least several classes;</claim-text>
<claim-text>linking at the host system the loaded classes; and</claim-text>
<claim-text>forming at least one host-linked module from the linked classes,</claim-text>
<claim-text>wherein the host-linked module having multiple pre-linked classes is made available over a network connection for use by the target system for linking to a target-linked module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00080" num="00080">
<claim-text>80. The method of <claim-ref idref="CLM-00038">claim 38</claim-ref> further comprising:
<claim-text>executing said application on said target system;</claim-text>
<claim-text>requesting a new pre-linked module from said host system at said target system by said application;</claim-text>
<claim-text>creating said new pre-linked module by said host system in response to said request;</claim-text>
<claim-text>transmitting said new pre-linked module to said target system over said network connection from said host system; and</claim-text>
<claim-text>continuing execution of said application on said target system using said new pre-linked module.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

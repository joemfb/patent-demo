<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626319-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626319</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12893715</doc-number>
<date>20100929</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>326</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20110101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>19</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>700 22</main-classification>
<further-classification>700296</further-classification>
<further-classification>700295</further-classification>
</classification-national>
<invention-title id="d2e53">Modular energy load management</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4181950</doc-number>
<kind>A</kind>
<name>Carter, II</name>
<date>19800100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4310770</doc-number>
<kind>A</kind>
<name>Keener et al.</name>
<date>19820100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>307 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7373222</doc-number>
<kind>B1</kind>
<name>Wright et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7580775</doc-number>
<kind>B2</kind>
<name>Kulyk et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700296</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7873441</doc-number>
<kind>B2</kind>
<name>Synesiou et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0010324</doc-number>
<kind>A1</kind>
<name>Bednar et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0192713</doc-number>
<kind>A1</kind>
<name>Weik et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700295</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0143046</doc-number>
<kind>A1</kind>
<name>Budike, Jr.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702 62</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2008/0015742</doc-number>
<kind>A1</kind>
<name>Kulyk et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700295</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0272934</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>34087011</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0019574</doc-number>
<kind>A1</kind>
<name>Baldassarre et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2010/0070103</doc-number>
<kind>A1</kind>
<name>Fleck et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700296</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2010/0106641</doc-number>
<kind>A1</kind>
<name>Chassin et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 40</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2011/0119420</doc-number>
<kind>A1</kind>
<name>Hata</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2012/0010758</doc-number>
<kind>A1</kind>
<name>Francino et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2013/0197706</doc-number>
<kind>A1</kind>
<name>Losee et al.</name>
<date>20130800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Office Action mailed Feb. 19, 2013 for U.S. Appl. No. 12/893,722, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Office Action mailed Aug. 22, 2013 for U.S. Appl. No. 12/893,722, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>700295</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>700296</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>12</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120078431</doc-number>
<kind>A1</kind>
<date>20120329</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Weatherhead</last-name>
<first-name>Norman A.</first-name>
<address>
<city>Ayr</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Weatherhead</last-name>
<first-name>Norman A.</first-name>
<address>
<city>Ayr</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Turocy &#x26; Watson, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Walbrun</last-name>
<first-name>William R.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Miller</last-name>
<first-name>John M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Rockwell Automation Technologies, Inc.</orgname>
<role>02</role>
<address>
<city>Mayfield Heights</city>
<state>OH</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Masinick</last-name>
<first-name>Michael D</first-name>
<department>2127</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and methods are provided that integrate a modular load management solution within a general control architecture. One or more load modules deployed within a controller act as interlocks to energy consuming field devices or machines fed by an energy distribution system within a facility. One or more feeder modules deployed within the controller collect energy supply data from an energy source or feeder on the energy distribution system. The load and feeder modules publish their energy demand and supply data to a virtual energy bus, which facilitates exchange of energy data between the load and feeder modules. The load modules, feeder modules, and virtual energy bus generate multiple views of the facility's overall energy supply and demand status based on the energy data shared between the components, and perform automated load management for the energy distribution system based on the collected data.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="159.77mm" wi="234.78mm" file="US08626319-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="216.07mm" wi="155.87mm" file="US08626319-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="220.56mm" wi="158.75mm" orientation="landscape" file="US08626319-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="225.30mm" wi="158.75mm" orientation="landscape" file="US08626319-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="212.68mm" wi="158.75mm" file="US08626319-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="234.61mm" wi="158.75mm" orientation="landscape" file="US08626319-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="256.37mm" wi="168.15mm" file="US08626319-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="217.42mm" wi="158.75mm" file="US08626319-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="224.20mm" wi="175.51mm" file="US08626319-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="238.84mm" wi="172.64mm" file="US08626319-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="198.63mm" wi="184.57mm" file="US08626319-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The claimed subject matter relates generally to energy load management, and more particularly to a modular energy load management architecture integrated within an industrial control scheme.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Modern industrial facilities can comprise a large number of machines operating independently or in conjunction to manufacture a product or manage a process. These can include such high-powered machines as welders, multi-ton stamping presses, pumps, machining robots, load bearing conveyors, mixers, and the like. Given the power of their operations, it can require a large amount of energy to drive these machines. Consequently, the cost of energy consumption is one of the largest expenses faced by an industrial enterprise. For this reason, plant engineers strive to efficiently manage their plants' energy loads to ensure that energy is consumed as efficiently as possible without undermining production goals. An important aspect of any load management strategy, particularly when dealing with electrical energy, is minimization of the peak load seen by the energy supply, since the energy cost to the consumer is typically a function of this peak load. However, maintaining a desired peak load while minimizing impact on production is a difficult task, since there is no simple way to coordinate individual machine demand with overall energy usage.</p>
<p id="p-0004" num="0003">Moreover, given the disparate nature of the machines used in a given facility, different forms of energy may be required to drive the machines, including electrical, steam, gas, water, air, and other types of energy. Supply and consumption of these different forms of energy must typically be measured and managed separately for each form given the different measurement methods and engineering units used for the various forms. It is therefore difficult to aggregate and view overall load data for a facility when different forms of energy are involved without writing complicated custom code.</p>
<p id="p-0005" num="0004">Given the importance of load management in industrial environments, there is a need for a load management solution that can be easily integrated with a new or existing general control system and tailored to the specifics of a facility's energy distribution system without the need for complicated custom programming. It would also be advantageous to easily aggregate load data relating to different types of energy in order to provide a comprehensive overall view of the facility's energy usage.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview nor is intended to identify key/critical elements or to delineate the scope of the various aspects described herein. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.</p>
<p id="p-0007" num="0006">One or more embodiments of the present disclosure relate to a modular load management architecture that can be integrated within an industrial control system. The architecture can include at least one feeder module and at least one load module deployed within a controller (e.g., a programmable automation controller) that collect, respectively, energy supply data and energy demand data measured from an energy distribution system and provided to the controller. The feeder modules and load modules exchange both the measured data and additional calculated energy data via a virtual energy bus that links the feeder modules with the load modules by virtue of a common bus reference. The modules and the virtual energy bus can comprise configurable attributes that allow the modules and bus to be tailored for a particular energy distribution system without the need for extensive custom programming. The modules and bus can also comprise a number of predefined inputs and outputs that facilitate exchange of the measured and calculated data among the energy management components, and well as interaction with a general control program executing on the controller.</p>
<p id="p-0008" num="0007">To the accomplishment of the foregoing and related ends, certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways which can be practiced, all of which are intended to be covered herein. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> depicts an exemplary architecture for integrating load management functionality with a control system.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> depicts an exemplary modular load management architecture deployed within industrial controller.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> depicts an exemplary data flow illustrating a load data conversion.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 4</figref> depicts an exemplary feeder module as rendered on a control programming interface.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 5</figref> depicts an exemplary load module as rendered on a control programming interface.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref> depicts an exemplary conversion module as rendered on a control programming interface.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a load shedding scenario in accordance with an exemplary configuration of the subject load management architecture.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 8</figref> is a flowchart of an example methodology for employing a modular load management architecture to manage energy loads in a facility.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart of an example methodology for configuring and carrying out automated prioritized load shedding using configurable modules deployed in a controller.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 10</figref> is flowchart of an example methodology for normalizing disparate sets of energy data for collective load management.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 11</figref> is an example computing environment.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 12</figref> is an example networking environment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0021" num="0020">The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.</p>
<p id="p-0022" num="0021">It is noted that as used in this application, terms such as &#x201c;component,&#x201d; &#x201c;module,&#x201d; &#x201c;model,&#x201d; and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution as applied to an automation system for industrial control. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program and a computer. By way of illustration, both an application running on a server and the server can be components. One or more components may reside within a process and/or thread of execution and a component may be localized on one computer and/or distributed between two or more computers, industrial controllers, and/or modules communicating therewith.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> depicts an exemplary architecture for integrating load management functionality with a new or existing control system. Controller <b>102</b> can comprise an industrial controller, such as a programmable automation controller (PAC), that executes a control program <b>104</b> to facilitate automation and control of at least a portion of a process within an industrial facility. Control program <b>104</b> can comprise any conceivable type of code used to process input signals read into the controller and to control output signals from the controller, including but not limited to ladder logic, sequential function charts, function block diagrams, or structured text. Data read into or generated by controller <b>102</b> can be stored in memory addresses within controller memory, which can comprise native memory or removable storage media. Exemplary controller <b>102</b> can be equipped with one or more input and/or output modules that communicate with one or more field devices to effect control of the devices. The input and/or output modules can include digital modules that transmit and receive discrete voltage signals to and from the field devices, or analog modules that transmit and receive analog voltage or current signals to and from the devices. The input and/or output modules can communicate with the controller processor over a backplane such that the digital and analog signals can be read into and controlled by the control program executed by the controller. Controller <b>102</b> can also communicate with field devices over a network using, for example, a communication module or an integrated networking port. Exemplary networks over which controller <b>102</b> can communicate with field devices can include the Internet, Intranets, Ethernet, DeviceNet, ControlNet, Data Highway and Data Highway Plus (DH/DH+), Remote I/O, Fieldbus, Modbus, Profibus, wireless networks, serial protocols, and the like. It is to be appreciated that controller <b>102</b> is not limited to the above specifications, and can include virtually any type of controller used to control an industrial process.</p>
<p id="p-0024" num="0023">Control program <b>104</b> can include and/or interact with the modular load management components of the present invention to facilitate integration of energy management within the general control architecture. These load management components can include load modules <b>106</b>, feeder modules <b>108</b>, conversion modules <b>110</b>, and at least one virtual energy bus <b>112</b>. These modules can comprise structured software modules deployed within controller <b>102</b> that execute autonomously or in conjunction with control program <b>104</b> to effect management of energy supply and consumption within the facility. The load management modules can include inputs, outputs, and configurable parameters having predefined functions that, together with analytical functionality built into the modules, allow energy management for one or more energy distribution systems to be easily configured without the need to write complicated custom code. Moreover, by providing an architecture for load management that can be integrated within a general industrial control solution, the load management modules can leverage existing controller I/O to effect management of a facility's energy loads without requiring specialized instrumentation. It is to be appreciated that, although the load management modules are depicted in <figref idref="DRAWINGS">FIG. 1</figref> as residing on a single exemplary controller <b>102</b>, the modules can be deployed in multiple controllers to yield a distributed load management system.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 2</figref> depicts an exemplary modular load management architecture deployed within industrial controller <b>102</b> and comprising the load management modules described above. In this exemplary system, devices <b>210</b><i>a</i>-<b>210</b><i>n </i>represent energy consuming devices or machines operating within an industrial facility. These devices or machines can include, but are not limited to, pumps, motors, welders, presses, conveyors, mixers, casting furnaces, material handling or machining robots, or other such machinery. Each load <b>210</b><i>a</i>-<b>210</b><i>n </i>can comprise a single device or a group of devices having an aggregated energy demand. Devices <b>210</b><i>a</i>-<b>210</b><i>n </i>need not be powered by the same form of energy. That is, loads <b>210</b><i>a</i>-<b>210</b><i>n </i>can represent some heterogeneous combination of electrical loads, hydraulic loads, pneumatic loads, steam powered loads, gas powered loads, or other such load types.</p>
<p id="p-0026" num="0025">The data collected by the controller for processing by the control program can include energy load data measured for the respective devices or load groups <b>210</b><i>a</i>-<b>210</b><i>n</i>. This can include, for example, measured electrical demand, measured steam power consumption, measured water energy usage, measured gas energy consumption (e.g., propane, natural gas, etc.), or other types of demand data. The measured load data can be provided to the controller using any appropriate means, such as an analog signal from a load meter fed into an analog input module, a parameter read from a smart metering device across a network, or other such techniques. Typically, the data received at the controller will be scaled according to the engineering units (e.g., kW, MW, Btus, Joules, therms, Klbs, etc.) associated with the type of energy being measured.</p>
<p id="p-0027" num="0026">Load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>can be instantiated in controller <b>102</b> and can be integrated with or interact with the control program being executed by the controller. Load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>act as interlocks to loads <b>210</b><i>a</i>-<b>210</b><i>n</i>, and comprise a number of inputs, outputs, and configurable attributes having predefined functionality. These inputs, outputs, and attributes can be used to share data generated by the load modules with other load management components, as well provide access to module data by control program <b>104</b> executing in controller <b>102</b>. For example, each load module <b>208</b><i>a</i>-<b>208</b><i>n </i>can receive its measured load data in a floating point Inp_LoadPV input register associated with the module, and publish this measured load data, together with other values calculated by the load module, to other components of the load management architecture. Load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>can also include Boolean outputs that initiate shedding or resetting of corresponding loads in a coordinated fashion in order to keep peak demand below a maximum value, as explained in more detail below. Using data provided by other components within the load management architecture, load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>can also calculate and publish instantaneous load statistics for use by the control program or for visualization on a display. Moreover, to ensure that the architecture accurately represents the total system load even if metering is not available for some loads, load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>can be provided with a configurable load register that can receive a manually entered estimated value of a missing load, thereby allowing the architecture to factor unmetered loads. Thus, load modules can represent both metered and unmetered loads so that the architecture has an accurate accounting of the overall load comprising an industrial system.</p>
<p id="p-0028" num="0027">An exemplary set of input, outputs, and configuration parameters for the load module is listed in Table 1 below. This list is only intended to be illustrative, and the load modules contemplated herein are not limited to the example I/O listed here.</p>
<p id="p-0029" num="0028">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Load Module I/O</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="35pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry>Name</entry>
<entry>Data Type</entry>
<entry>Usage</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>REF_eBus</entry>
<entry>eBus</entry>
<entry>In/Out</entry>
<entry>Reference to Virtual Energy Bus (eBus)</entry>
</row>
<row>
<entry>Inf_DvcDscrpt</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Device description (e.g. for HMI display)</entry>
</row>
<row>
<entry>Inf_DvcID</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Device ID (Tag ID)</entry>
</row>
<row>
<entry>Cfg_EULoad</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Load engineering units</entry>
</row>
<row>
<entry>Inp_LoadPV</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Input load when monitored (in</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>engineering units)</entry>
</row>
<row>
<entry>Has_PVConv</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Has conversion object</entry>
</row>
<row>
<entry>Cfg_Load</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Configure load used when load is</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>not monitored, or when in simulation</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>(in engineering units)</entry>
</row>
<row>
<entry>Val_Load</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Load (published to eBus) (in</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>engineering units)</entry>
</row>
<row>
<entry>Cfg_EUSupply</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Supply engineering units</entry>
</row>
<row>
<entry>Cfg_Supply</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Configured supply used when not</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>provided by eBus (in engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Val_Supply</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Supply available</entry>
</row>
<row>
<entry>Val_PctOfSupply</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Load as a percentage of supply</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>((Load/Supply) * 100)</entry>
</row>
<row>
<entry>Inp_LoadApl</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Load applied</entry>
</row>
<row>
<entry>Cfg_ShedEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Enable load shedding</entry>
</row>
<row>
<entry>Cfg_EShedEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Enable emergency load shedding</entry>
</row>
<row>
<entry>Cfg_ShedPriority</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Configure load shed priority</entry>
</row>
<row>
<entry>Val_ShedPriority</entry>
<entry>Integer</entry>
<entry>Output</entry>
<entry>Shed priority for load</entry>
</row>
<row>
<entry>Inp_Shed</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Input to force load shed</entry>
</row>
<row>
<entry>Out_Shed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Shed Load</entry>
</row>
<row>
<entry>Sts_Shed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load was shed</entry>
</row>
<row>
<entry>Sts_EShed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load was emergency shed</entry>
</row>
<row>
<entry>Sts_LoadNotShed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load that was supposed to be shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>did not shed</entry>
</row>
<row>
<entry>MCmd_Shed</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Maintenance command to shed load</entry>
</row>
<row>
<entry>Rdy_Shed</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Ready to accept maintenance</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>command to shed load</entry>
</row>
<row>
<entry>Val_PriorityThreshold</entry>
<entry>Integer</entry>
<entry>Output</entry>
<entry>When shedding loads - Shed all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>loads with a configured Shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority less than or equal to the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority Threshold</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>When resetting loads - Reset all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>loads with a configured Reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority greater than or equal to the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority Threshold</entry>
</row>
<row>
<entry>Inp_Reset</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Input to force load shed reset</entry>
</row>
<row>
<entry>Cfg_ShedResetEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>1 = Enable automatic reset after load</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>is shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>0 = Reset must be performed by logic</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>or via HMI</entry>
</row>
<row>
<entry>Cfg_ResetPriority</entry>
<entry>Integer</entry>
<entry>Output</entry>
<entry>Reset priority for shed load</entry>
</row>
<row>
<entry>Cfg_MinResetTime</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Minimum reset time (seconds);</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>minimum period of time to wait</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>prior to reset after load is shed</entry>
</row>
<row>
<entry>Sts_ResetRdy</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Ready to reset shed load</entry>
</row>
<row>
<entry>Sts_LoadNotReset</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load that was supposed to be reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>has not reset</entry>
</row>
<row>
<entry>MCmd_Reset</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Maintenance command to reset shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>load</entry>
</row>
<row>
<entry>Rdy_Reset</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Ready to accept maintenance</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>command to reset shed load</entry>
</row>
<row>
<entry>MCmd_Sim</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Maintenance command to place load</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>into simulation</entry>
</row>
<row>
<entry>Rdy_Sim</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Ready to receive MCmd_Sim</entry>
</row>
<row>
<entry>Inp_Sim</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Place load into simulation</entry>
</row>
<row>
<entry>Sts_Sim</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load in simulation</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0030" num="0029">The load management architecture can also include at least one feeder module <b>206</b> deployed in the controller. Like load modules <b>208</b><i>a</i>-<b>208</b><i>n</i>, feeder module <b>106</b> can comprise a number of predefined inputs, outputs, and configurable parameters that facilitate exchange of data with other components and with control program <b>104</b>. Among other inputs, feeder module <b>206</b> can receive an energy supply value measured from a feeder that provides power to at least one of the loads <b>210</b><i>a</i>-<b>210</b><i>n</i>. This measured supply value can be published by the feeder module <b>206</b> to the virtual energy bus <b>204</b> and shared with load modules <b>208</b><i>a</i>-<b>208</b><i>n</i>, thereby providing the load modules with knowledge of the available supply at the feeder. Feeder module <b>206</b> also monitors all loads published to virtual energy bus <b>204</b> by load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>and makes load management decisions based on the monitored load data. This can include deciding when to initiate load shedding based on the total monitored load or based on a ratio of the total load to the total measured supply. Thus, the architecture allows energy supply and demand data to be exchanged via virtual energy bus <b>204</b>, thereby providing a means to intelligently and autonomously manage energy usage using integrated load management functionality.</p>
<p id="p-0031" num="0030">An exemplary set of input, outputs, and configuration parameters for the feeder module is listed in Table 2 below. This list is only intended to be illustrative, and the feeder module contemplated herein is not necessarily limited to the example I/O listed here.</p>
<p id="p-0032" num="0031">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Feeder Module Attributes</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="35pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="105pt" align="left"/>
<tbody valign="top">
<row>
<entry>Name</entry>
<entry>Data Type</entry>
<entry>Usage</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>REF_eBus</entry>
<entry>eBus</entry>
<entry>In/Out</entry>
<entry>Reference to Virtual Energy Bus</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>(eBus)</entry>
</row>
<row>
<entry>inf_DvcDscrpt</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Device description (e.g. for HMI</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>display)</entry>
</row>
<row>
<entry>Inf_DvcID</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Device ID (Tag ID)</entry>
</row>
<row>
<entry>Cfg_EUSupply</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Supply engineering units</entry>
</row>
<row>
<entry>Cfg_Supply</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Configure supply to feeder when</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>feeder is not monitored (in</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>supply engineering units</entry>
</row>
<row>
<entry>Cfg_HasSupplyPV</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Has measured supply</entry>
</row>
<row>
<entry>Inp_SupplyPV</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Input supply to feeder when</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>measured (in supply engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Val_Supply</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Supply present at feeder</entry>
</row>
<row>
<entry>Cfg_EULoad</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Load engineering units</entry>
</row>
<row>
<entry>Cfg_Load</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Configured load used when load</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>is not monitored or when</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>module is in simulation (in load</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>engineering units)</entry>
</row>
<row>
<entry>Cfg_HasLoadPV</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Has measured load</entry>
</row>
<row>
<entry>Inp_LoadPV</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Load Input (in load engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Val_Load</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Load present at feeder</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>(Inp_LoadPV + eBus.Val_Load)</entry>
</row>
<row>
<entry>Sts_LoadExceedsSupply</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Load on feeder exceeds</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>available supply</entry>
</row>
<row>
<entry>Inp_SupplyEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Supply enabled (applied)</entry>
</row>
<row>
<entry>Sts_SupplyEnbl</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Supply enabled (applied)</entry>
</row>
<row>
<entry>Sts_SupplyNotEnbl</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Supply not enabled (not applied)</entry>
</row>
<row>
<entry>Cfg_ShedEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Enable load shedding</entry>
</row>
<row>
<entry>Cfg_EShedEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Enable emergency load</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>shedding</entry>
</row>
<row>
<entry>Inp_Shed</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Activate load shed</entry>
</row>
<row>
<entry>Inp_EShed</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Activate emergency load shed</entry>
</row>
<row>
<entry>Sts_Shed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Load shed active</entry>
</row>
<row>
<entry>Sts_EShed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Emergency Load Shed Active</entry>
</row>
<row>
<entry>Sts_LoadNotShed</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>One or more loads that have</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>been instructed to shed have not</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>shed</entry>
</row>
<row>
<entry>MCmd_Shed</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Maintenance command to shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>load</entry>
</row>
<row>
<entry>Rdy_Shed</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Ready to accept maintenance</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>command to shed load</entry>
</row>
<row>
<entry>Cfg_ShedResetEnbl</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>1 = Enable automatic reset after</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>load is shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>0 = Reset must be performed by</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>logic or via the HMI</entry>
</row>
<row>
<entry>Inp_Reset</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Reset shed load</entry>
</row>
<row>
<entry>Sts_ResetRdy</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Ready to reset shed load(s)</entry>
</row>
<row>
<entry>Sts_LoadNotReset</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>One or more loads instructed to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>reset have not reset</entry>
</row>
<row>
<entry>MCmd_Reset</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Maintenance command to reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>shed load</entry>
</row>
<row>
<entry>Rdy_Reset</entry>
<entry>Boolean</entry>
<entry>Local</entry>
<entry>Ready to accept maintenance</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>command to reset shed load</entry>
</row>
<row>
<entry>MCmd_Sim</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Maintenance command to place</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Feeder module and all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>associated loads into simulation</entry>
</row>
<row>
<entry>Rdy_Sim</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Ready to receive MCmd_Sim</entry>
</row>
<row>
<entry>Inp_Sim</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Place Feeder module and all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>associated loads into simulation</entry>
</row>
<row>
<entry>Sts_Sim</entry>
<entry>Boolean</entry>
<entry>Output</entry>
<entry>Feeder module and all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>associated loads are in</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>simulation</entry>
</row>
<row>
<entry>Val_LstGdLoad</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Last good load (with circuit</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>breaker closed) (in engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Val_PctOfSupply</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Load as a percentage of supply</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>(Load/Supply * 100)</entry>
</row>
<row>
<entry>Val_PriorityThreshold</entry>
<entry>Int</entry>
<entry>Output</entry>
<entry>When shedding loads - Shed all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>loads with a configured Shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority less than or equal to the</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority Threshold</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>When resetting loads - Reset all</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>loads with a configured Reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Priority greater than or equal to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>the Priority Threshold</entry>
</row>
<row>
<entry>Val_LoadNextResetPriority</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Total load which will be applied</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>by decrementing to next Priority</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Threshold</entry>
</row>
<row>
<entry>Val_LoadNextShedPriority</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Total load which may be shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>by incrementing to next Priority</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Threshold</entry>
</row>
<row>
<entry>Sts_Reset CapacityOK</entry>
<entry>Boolean</entry>
<entry>Input</entry>
<entry>Supply capacity exists to reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>shed loads assigned to the next</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>Reset priority</entry>
</row>
<row>
<entry>Val_TotalNumberOfLoads</entry>
<entry>Integer</entry>
<entry>Outpupt</entry>
<entry>Total number of loads which</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>belong to the feeder module</entry>
</row>
<row>
<entry>Val_NumberOfLoads</entry>
<entry>Integer</entry>
<entry>Output</entry>
<entry>Number of loads currently fed</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>by the feeder</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0033" num="0032">As discussed above, virtual energy bus <b>204</b> (also known as the eBus) enables load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>and feeder module <b>206</b> to dynamically exchange energy supply (feeder) and demand (consumption) data. Virtual energy bus <b>204</b> can also employ the data published by the feeder and load modules to perform aggregated energy calculations that provide a highly granular picture of the facility's overall instantaneous energy utilization. For example, virtual energy bus can compute a total load seen by all load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>as a percentage of the available supply reported by the feeder module(s), a total energy load seen by each energy source associated with the bus, and other such calculations. In this way, virtual energy bus <b>204</b> can provide multiple orthogonal views of a facility's energy usage. Multiple energy busses can be instantiated and associated with selected subsets of load modules and feeder modules if segregated management of separate load systems is desired.</p>
<p id="p-0034" num="0033">An exemplary set of input, outputs, and configuration parameters available for the virtual energy bus is listed in Table 3 below. This list is only intended to be illustrative, and the virtual energy bus contemplated herein is not necessarily limited to the I/O listed here.</p>
<p id="p-0035" num="0034">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Virtual Energy Bus I/O</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Data</entry>
<entry/>
</row>
<row>
<entry>Name</entry>
<entry>Type</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>Cfg_EUSupply</entry>
<entry>String</entry>
<entry>Supply engineering units</entry>
</row>
<row>
<entry>PSet_Supply</entry>
<entry>Real</entry>
<entry>Add supply to eBus (in</entry>
</row>
<row>
<entry/>
<entry/>
<entry>engineering units)</entry>
</row>
<row>
<entry>Val_Supply</entry>
<entry>Real</entry>
<entry>Supply available on eBus (from</entry>
</row>
<row>
<entry/>
<entry/>
<entry>feeder module) (in engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Cfg_EULoad</entry>
<entry>Sting</entry>
<entry>Load engineering units</entry>
</row>
<row>
<entry>PSet_Load</entry>
<entry>Real</entry>
<entry>Add load to eBus (in</entry>
</row>
<row>
<entry/>
<entry/>
<entry>engineering units)</entry>
</row>
<row>
<entry>PSet_LoadNextShedPriority</entry>
<entry>Real</entry>
<entry>Add load to next shed priority</entry>
</row>
<row>
<entry>PSet_LoadNextResetPriority</entry>
<entry>Real</entry>
<entry>Add load to next reset priority</entry>
</row>
<row>
<entry>Val_Load</entry>
<entry>Real</entry>
<entry>Load on eBus (in engineering</entry>
</row>
<row>
<entry/>
<entry/>
<entry>units)</entry>
</row>
<row>
<entry>Val_PctOfSupply</entry>
<entry>Real</entry>
<entry>eBus load as a percentage of</entry>
</row>
<row>
<entry/>
<entry/>
<entry>supply ((Load/Supply) * 100)</entry>
</row>
<row>
<entry>Set_TotalNumberOfLoads</entry>
<entry>Integer</entry>
<entry>Increment total number of loads</entry>
</row>
<row>
<entry/>
<entry/>
<entry>on eBus</entry>
</row>
<row>
<entry>Val_TotalNumberOfLoads</entry>
<entry>Integer</entry>
<entry>Total number of loads that</entry>
</row>
<row>
<entry/>
<entry/>
<entry>belong to the eBus</entry>
</row>
<row>
<entry>Set_NumberOfLoads</entry>
<entry>Integer</entry>
<entry>Increment number of loads</entry>
</row>
<row>
<entry/>
<entry/>
<entry>being fed by eBus</entry>
</row>
<row>
<entry>Val_NumberofLoads</entry>
<entry>Integer</entry>
<entry>Number of loads being fed by</entry>
</row>
<row>
<entry/>
<entry/>
<entry>eBus</entry>
</row>
<row>
<entry>Val_PriorityThreshold</entry>
<entry>Integer</entry>
<entry>When shedding loads - shed all</entry>
</row>
<row>
<entry/>
<entry/>
<entry>loads with a configured Shed</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Priority less than or equal to the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Priority Threshold.</entry>
</row>
<row>
<entry/>
<entry/>
<entry>When resetting loads - Reset all</entry>
</row>
<row>
<entry/>
<entry/>
<entry>loads with a configured Reset</entry>
</row>
<row>
<entry/>
<entry/>
<entry>Priority greater than or equal to</entry>
</row>
<row>
<entry/>
<entry/>
<entry>the Priority Threshold</entry>
</row>
<row>
<entry>Sts_Shed</entry>
<entry>Boolean</entry>
<entry>Load shedding active</entry>
</row>
<row>
<entry>Sts_EShed</entry>
<entry>Boolean</entry>
<entry>Emergency Load shedding</entry>
</row>
<row>
<entry/>
<entry/>
<entry>active</entry>
</row>
<row>
<entry>Sts_LoadNotShed</entry>
<entry>Boolean</entry>
<entry>One or more loads that were</entry>
</row>
<row>
<entry/>
<entry/>
<entry>instructed to shed have not shed</entry>
</row>
<row>
<entry>Sts_Reset</entry>
<entry>Boolean</entry>
<entry>Load shed reset active</entry>
</row>
<row>
<entry>Sts_LoadNotReset</entry>
<entry>Boolean</entry>
<entry>One or more loads that were</entry>
</row>
<row>
<entry/>
<entry/>
<entry>instructed to reset have not reset</entry>
</row>
<row>
<entry>Cfg_CalcLoad</entry>
<entry>Boolean</entry>
<entry>Calculate load</entry>
</row>
<row>
<entry>Cfg_CalcSupply</entry>
<entry>Boolean</entry>
<entry>Calculate supply</entry>
</row>
<row>
<entry>Sts_ShedResetRdy</entry>
<entry>Boolean</entry>
<entry>Ready to reapply load</entry>
</row>
<row>
<entry>MCmd_Sim</entry>
<entry>Boolean</entry>
<entry>Maintenance command to place</entry>
</row>
<row>
<entry/>
<entry/>
<entry>load in simulation</entry>
</row>
<row>
<entry>Sts_Sim</entry>
<entry>Boolean</entry>
<entry>Load in simulation</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0036" num="0035">In addition to being used by the controller to monitor and manage energy distribution, the data generated by the feeder module <b>206</b>, load modules <b>208</b><i>a</i>-<b>208</b><i>n</i>, and virtual energy bus <b>204</b> can also be rendered on a visualization component <b>220</b> for presentation to a user. Visualization component <b>220</b> can comprise any suitable user interface, such as a human-machine interface (HMI) that can read from and write to data registers within controller <b>102</b>. Visualization component <b>220</b> can display the value of any input, output, or attribute associated with the load management components in order to present a highly granular view of a facility's current energy supply and usage status.</p>
<p id="p-0037" num="0036">While the load management modules described above are illustrated in <figref idref="DRAWINGS">FIG. 2</figref> as residing on a single controller, remote connectivity features inherent in the modules can allow for a distributed load management system deployed across multiple controllers. For example, load modules residing on a first controller can reference and exchange data with a virtual energy bus residing on a second controller, such that the load modules' data resident on the first controller is made available to the second controller, and thereby to a feeder module residing on the second controller. Load management decisions can then made by the feeder module or the virtual energy bus on the second controller taking into account the load module data received from the first module, and load management commands (e.g. load shed commands) generated by the modules on the second controller can be delivered to the load modules on the first controller. By deploying load management modules across multiple controllers and providing remote connectivity between the modules, a distributed load management system can be implemented. These aspects can allow modular load management to be implemented in an existing system wherein the various sets of energy sources and loads comprising the system are monitored by different controllers.</p>
<p id="p-0038" num="0037">Since loads <b>210</b><i>a</i>-<b>210</b><i>n </i>can comprise loads of different energy types (e.g., electrical, steam, gas, etc.), at least a portion of the measured load data fed to load modules <b>208</b><i>a</i>-<b>208</b><i>n </i>may need to be converted in order to normalize the load data to a common set of engineering units. In this way, energy data of different types can be aggregated to generate an overall view of a facility's total energy usage. To achieve this conversion, one or more conversion modules can be deployed in controller <b>102</b> as part of the load management architecture. An exemplary data flow illustrating a load data conversion is depicted in <figref idref="DRAWINGS">FIG. 3</figref>. Energy load data <b>302</b><i>a</i>-<b>302</b><i>e </i>can represent measured load data that has been provided to controller <b>102</b> using any suitable signaling means. Data <b>302</b><i>a</i>-<b>302</b><i>e </i>can represent data from a heterogeneous set of devices powered by different types of energy, including electrical load data <b>302</b><i>a</i>, gas energy load data <b>302</b><i>b</i>, air energy load data <b>302</b><i>c</i>, water energy load data <b>302</b><i>d</i>, and steam energy load data <b>302</b><i>e</i>. Load data <b>302</b><i>a</i>-<b>302</b><i>e </i>can be provided to conversion modules <b>306</b><i>a</i>-<b>306</b><i>e</i>, wherein the conversion modules <b>306</b><i>a</i>-<b>306</b><i>e </i>can be individually configured to convert their respective load data from their original engineering units to a selected normalized engineering unit to yield normalized data <b>304</b><i>a</i>-<b>304</b><i>e</i>. By converting the load data sets <b>302</b><i>a</i>-<b>302</b><i>e </i>to a common engineering unit, the disparate load types can be standardized to facilitate aggregated analysis of the data by the virtual energy bus <b>310</b>. The normalized data <b>304</b><i>a</i>-<b>304</b><i>e </i>can be provided to load modules <b>308</b><i>a</i>-<b>308</b><i>e</i>, which respectively correspond with load data <b>302</b><i>a</i>-<b>302</b><i>e</i>. Load modules <b>308</b><i>a</i>-<b>308</b><i>e </i>can then publish the normalized load data to virtual energy bus <b>310</b> for aggregated analysis, as described above. Using this normalized load data, virtual energy bus <b>310</b> render one or more aggregated views of a facility's total energy usage that includes all types of energy being used. Moreover, since conversion modules <b>306</b><i>a</i>-<b>306</b><i>e </i>can easily be configured by selecting appropriate parameter values to effect a desired unit conversion, no custom programming is needed to generate normalized load data in a heterogeneous energy environment.</p>
<p id="p-0039" num="0038">An exemplary set of input, outputs, and configuration parameters available for the virtual energy bus is listed in Table 4 below. This list is only intended to be illustrative, and the virtual energy bus contemplated herein is not necessarily limited to the I/O listed here.</p>
<p id="p-0040" num="0039">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 4</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Conversion Module I/O</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="28pt" align="left"/>
<colspec colname="3" colwidth="28pt" align="left"/>
<colspec colname="4" colwidth="77pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Data</entry>
<entry/>
<entry/>
</row>
<row>
<entry>Name</entry>
<entry>Type</entry>
<entry>Usage</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
<row>
<entry>Inp_PV</entry>
<entry>Real</entry>
<entry>Input</entry>
<entry>Raw process variable for</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>conversion</entry>
</row>
<row>
<entry>Val</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Converted process</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>variable</entry>
</row>
<row>
<entry>Cfg_InConversionSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected input</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>conversion factor</entry>
</row>
<row>
<entry>Cfg_InMultiplierSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected input multiplier</entry>
</row>
<row>
<entry>Cfg_inRateTimeSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected input rate time</entry>
</row>
<row>
<entry>Cfg_OutConversionSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected output</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>conversion factor</entry>
</row>
<row>
<entry>Cfg_OutMultiplierSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected output</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>multiplier</entry>
</row>
<row>
<entry>Cfg_OutRateTimeSlct</entry>
<entry>Integer</entry>
<entry>Input</entry>
<entry>Selected output rate time</entry>
</row>
<row>
<entry>Cfg_InEU</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Engineering units - raw</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>PV</entry>
</row>
<row>
<entry>Cfg_OutEU</entry>
<entry>String</entry>
<entry>Local</entry>
<entry>Engineering units -</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>converted PV</entry>
</row>
<row>
<entry>Cfg_Conversion</entry>
<entry>Convert</entry>
<entry>Local</entry>
<entry>Data structure</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>containing raw to</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>unity conversion factor</entry>
</row>
<row>
<entry>Cfg_Multiplier</entry>
<entry>Factor</entry>
<entry>Local</entry>
<entry>Data structure</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>containing multipliers</entry>
</row>
<row>
<entry>Cfg_RateTime</entry>
<entry>Factor</entry>
<entry>Local</entry>
<entry>Data structure</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>containing rate</entry>
</row>
<row>
<entry/>
<entry/>
<entry/>
<entry>multipliers</entry>
</row>
<row>
<entry>Val_InConversionFactor</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Input conversion factor</entry>
</row>
<row>
<entry>Val_InRateTime</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Input rate time</entry>
</row>
<row>
<entry>Val_OutConversionFactor</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Output conversion factor</entry>
</row>
<row>
<entry>Val_OutMultiplier</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Output multiplier</entry>
</row>
<row>
<entry>Val_OutRateTime</entry>
<entry>Real</entry>
<entry>Output</entry>
<entry>Output rate time</entry>
</row>
<row>
<entry namest="1" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0041" num="0040">The modular load management architecture described herein can be integrated as part of a general controls architecture by deploying the load management modules within a programmable automation controller (PAC), thereby allowing energy load management functionality to be added to an existing control solution and facilitating coordination between load management considerations and control of plant operations in general. In addition, by deploying the modular load management architecture in a controller executing a control program, the architecture can leverage the controller's hardwired and networked I/O to manage energy usage in an integrated and coordinated fashion without specialized instrumentation. This can include, for example, automatic shedding of loads when the feeder module determines that demand is at risk of exceeding available supply (as described in more detail below). Moreover, the inputs, outputs, and configuration parameters associated with the modules and virtual energy bus of the present architecture (e.g., the exemplary I/O of Tables 1-4) can be rendered on any suitable human-machine interface (HMI) communicating with controller <b>102</b> for reporting purposes.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIGS. 4-6</figref> depict exemplary feeder, load, and conversion modules, respectively, as they might be rendered on a control programming interface used to configure a control program executing on controller <b>102</b>. Each module <b>402</b>, <b>502</b>, and <b>602</b> displays one or more of its inputs on the left side of the module, and one or more outputs on the right side. These inputs and outputs can be accessed by the control program either by reference to the names for the respective I/O or by graphically linking the inputs and outputs to other program elements (e.g. in a sequential function chart programming environment). Modules <b>402</b>, <b>502</b>, and <b>602</b> each include a configurable reference <b>406</b>, <b>506</b>, or <b>605</b> identifying the virtual energy bus (eBus) to be associated with the module. That is, modules <b>402</b>, <b>502</b>, and <b>602</b> publish data to and receive data from the particular virtual energy bus identified by references <b>406</b>, <b>506</b>, and <b>606</b>, respectively. Configuration buttons <b>404</b>, <b>504</b>, and <b>605</b> allow a user to access configurable parameters associated with the respective modules to facilitate customization of the modules, such as by setting values for the configurable parameters listed in Tables 1, 2, and 4. For example, configuration buttons <b>404</b>, <b>504</b>, and <b>604</b> can invoke a list of the configuration parameters listed in Tables 1, 2, and 4, and the user can set values for these parameters to configure the module.</p>
<p id="p-0043" num="0042">The load management architecture described herein can allow coordinated load management functions to be achieved easily using the highly configurable programming modules described above. This can include priority-based shedding of loads to ensure that a desired maximum peak load is not exceeded. <figref idref="DRAWINGS">FIG. 7</figref> illustrates a load shedding scenario in accordance with an exemplary configuration of the subject load management architecture. Loads <b>704</b><i>a</i>-<b>704</b><i>c </i>are fed by a supply feeder (not shown). Each load <b>704</b><i>a</i>-<b>704</b><i>c </i>can represent a single energy consuming device, such as a motor, or a group of devices monitored as a single collective load. Load modules <b>702</b><i>a</i>-<b>702</b><i>c </i>are deployed in controller <b>102</b> (or across multiple controllers) and receive measured load data read by the controller I/O from loads <b>704</b><i>a</i>-<b>704</b><i>c</i>. Load modules <b>702</b><i>a</i>-<b>702</b><i>c </i>publish this load data to virtual energy bus <b>706</b> as described above. Feeder module <b>708</b>, also deployed within controller <b>102</b>, receives measured supply data from the supply feeder providing power to loads <b>704</b><i>a</i>-<b>704</b><i>c</i>, and publishes this data to virtual energy bus <b>706</b>. Feeder module <b>708</b> also monitors the load data published to virtual energy bus <b>706</b> and calculates a total energy consumption.</p>
<p id="p-0044" num="0043">Feeder module <b>708</b> can monitor the total load on virtual energy bus <b>706</b> and make a decision regarding whether to initiate load shedding. This decision can be based on a comparison between the total load on the virtual energy bus and a configured threshold value. If feeder module <b>708</b> determines that the total load on virtual energy bus <b>706</b> exceeds the threshold value (that is, too much energy is being collectively drawn by loads <b>704</b><i>a</i>-<b>704</b><i>c</i>), the feeder module can initiate load shedding for the loads associated with virtual energy bus <b>706</b>. Alternatively, feeder module <b>708</b> can compute the total load seen on virtual energy bus <b>706</b> as a percentage of the measured supply (e.g., Val_PctOfSupply of Table 2) and initiate load shedding when the percentage reaches a configured threshold. Feeder module <b>708</b> an also include a Boolean input (e.g., Inp_Shed of Table 2) that allows load shedding to be initiated from an external source, such as a separate portion of code or a manual input.</p>
<p id="p-0045" num="0044">When load shedding is active, selected load devices are instructed by their respective load modules to enter a no-load or low-load state. This can comprise issuing a command to turn off the selected devices, to switch the selected devices to a low-energy operating mode, to disconnect a breaker feeding the selected devices, or other appropriate action. The load shed command issued to a device can be initiated by the device's load module (e.g., by setting a Boolean output associated with the load module, such as the Sts_Shed ouput of Table 1) when the load module receives an indication from the virtual energy bus that load shedding is active, and translated to an appropriate output signal from the controller to change the state of the device or a breaker associated therewith. The load shed output of the load module can also be incorporated into existing programming in the controller if additional conditions for switching the device to low-load state are desired.</p>
<p id="p-0046" num="0045">In order to prioritize shedding of loads such that the least critical loads are shed first, a shed priority value can be configured for each load module <b>702</b><i>a</i>-<b>702</b><i>c </i>(e.g., by setting a value for the Cfg_ShedPriority input of Table 1). These shed priority values can be configured on the load modules by the user according to a perceived criticality of the loads associated with the respective load modules, such that load modules associated with less critical load devices are assigned lower shed priority values, while higher shed priority values are assigned to loads modules whose associated loads are deemed more critical to operations and which should only be shed in extreme load conditions.</p>
<p id="p-0047" num="0046">To coordinate prioritized load shedding, feeder module <b>708</b> can include an integer priority threshold value (e.g., Val_PriorityThreshold of Table 2). The value of the feeder module's priority threshold during load shedding determines which loads will be shed at a given time. When load shedding is active, only those loads whose configured shed priority value is less than or equal to the priority threshold value will be shed. In the example of <figref idref="DRAWINGS">FIG. 7</figref>, load modules <b>702</b><i>b </i>and <b>702</b><i>c </i>have shed priorities less than the priority threshold set for feeder module <b>708</b>. Therefore, when load shedding is active, load modules <b>702</b><i>b </i>and <b>702</b><i>c </i>instruct their corresponding loads <b>704</b><i>b </i>and <b>704</b><i>c </i>to enter a low-load or no-load state. Since the shed priority value set for load module <b>702</b><i>a </i>is higher than the priority threshold, corresponding load <b>704</b><i>a </i>is permitted to continue normal operation.</p>
<p id="p-0048" num="0047">Load modules <b>702</b><i>a</i>-<b>702</b><i>c </i>can monitor their respective loads during load shedding and generate relevant feedback information, which can include setting a status bit indicating that the corresponding load was shed successfully (e.g., by setting the Sts_Shed output of Table 1). If a load module issues an instruction for its associated load to be shed and subsequently determines that the load has not fallen within an expected range after a preset amount of time has elapsed since issuing the instruction, the load module can set a status output indicating that the load has not shed (e.g., the Sts_LoadNotShed output of Table 1). These outputs, as well as any other relevant feedback and diagnostic information generated by load modules <b>702</b><i>a</i>-<b>702</b><i>c</i>, can be published to virtual energy bus <b>706</b> and shared with feeder module <b>708</b>. Likewise, feeder module <b>708</b> can monitor the total load published to virtual energy bus <b>706</b> during load shedding and generate report or diagnostic information relevant to the overall load shedding operation.</p>
<p id="p-0049" num="0048">During load shedding, the priority threshold value of feeder module <b>708</b> can be increased incrementally as needed to ensure that a sufficient number of loads have been shed to maintain a desired peak demand without disabling an excessive number of loads. For example, if feeder module <b>708</b> determines that load shedding is necessary because of excessive load-to-supply ratio, the shed priority can be set to a low value prior to initiating load shedding. This ensures that only relatively low priority devices are disabled in order to shave sufficient demand. The initial priority threshold value can be set as a default for feeder module <b>708</b>, or alternatively can be set by the control program executing in controller <b>706</b>. Feeder module <b>708</b> can monitor the loads on virtual energy bus <b>706</b> as well as the measured supply during the load shedding operation to ensure that the demand is maintained below an acceptable level. If feeder module <b>708</b> determines that additional loads must be shed to maintain an acceptable demand (e.g. if the percentage of the supply being drawn by the remaining loads continues to exceed an acceptable threshold), the priority threshold can be incremented, thereby causing additional load modules having higher load priorities to disable their respective loads. This adjustment of the priority threshold can be performed by feeder module <b>708</b> itself if the feeder module determines that the energy draw reported by virtual energy bus <b>706</b> remains above an acceptable threshold for a predetermined amount of time after load shedding was initiated or since the previous priority threshold adjustment. Alternatively, the priority threshold can be adjusted by the control program executing in controller <b>102</b> by writing an appropriate value to the feeder module <b>708</b>. Feeder module <b>708</b> can also calculate and report an estimate of how much additional load will be shed from the current total load if the priority threshold is incremented to the next higher integer value. This value can be reported in one of the feeder module's integer output (e.g., the Val_LoadNextShedPriority output of Table 2). This value can be based in part on the number and identity of additional load devices that will be shed as a result of incrementing the priority threshold, since this information is made available to the Feeder module from load modules <b>702</b><i>a</i>-<b>702</b><i>c </i>and virtual energy bus <b>706</b>.</p>
<p id="p-0050" num="0049">After sufficient loads have been shed, the shed loads can be reset in accordance with preference settings configured for the modules. For example, feeder module <b>708</b> can include a Boolean input (e.g., the Cfg_ShedResetEnbl input of Table 2) that can be configured to select whether the feeder module is to reset loads automatically after shedding, or alternatively if resetting of loads is to be performed by the control program or via a manual reset, such as a manual input from an HMI. If automatic resetting is selected, feeder module <b>708</b> can reference a configured minimum reset time value (e.g., Cfg_MinResetTime of Table 2) to determine when to initiate load resetting. The minimum reset time value represents a minimum period of time after confirmation that the necessary loads were shed. After this time has elapsed, and if load shedding is no longer necessary, feeder module <b>708</b> can initiate load resetting, whereby the feeder module issues commands to load modules <b>702</b><i>a</i>-<b>702</b><i>c </i>(via virtual energy bus <b>706</b>) to reset their respective loads.</p>
<p id="p-0051" num="0050">When load resetting is in progress, the previously shed loads can be reset according to reset priority values configured for the associated load modules (e.g., Cfg_ResetPriority of Table 1). As with load shedding, the resetting of loads can be prioritized based on a comparison of the respective reset priority values for the load modules with the priority threshold value of feeder module <b>708</b>. When load resetting is initiated by feeder module <b>708</b>, loads whose corresponding load modules have reset priority values greater than or equal to the priority threshold will be reset. Priority threshold can then be decreased in increments according to a preconfigured routine in order to reset the loads having lower Reset Priorities. The decision to decrease the priority threshold can be based in part on the current load or load-to-supply ratio, together with an estimated value of the total load expected to be applied when the priority threshold is decremented to the next value (as calculated by the feeder module and reported as an output, e.g. Val_LoadNextResetPriority of Table 2). Feeder module <b>708</b> can estimate this expected additional load based on knowledge of which load modules will be reset when the priority threshold is decremented as well as how much demand those loads are expected to draw (based, for example, on a last known demand prior to shedding). If feeder module <b>708</b> determines that the current total load seen by virtual energy bus <b>706</b> plus the estimated load that will be added by decrementing the priority threshold does not exceed a desired maximum peak demand, the priority threshold will be decremented and the appropriate loads reset by the load modules. If feeder module <b>708</b> is configured such that load resetting is disabled, feeder module <b>708</b> will not reset the loads after load shedding is complete, but instead will allow loads that had been shed to be reset with custom control programming or via manual reset.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIGS. 8-10</figref> illustrate various methodologies in accordance with the claimed subject matter. While, for purposes of simplicity of explanation, the one or more methodologies shown herein are shown and described as a series of acts, it is to be understood and appreciated that the subject innovation is not limited by the order of acts, as some acts may, in accordance therewith, occur in a different order and/or concurrently with other acts from that shown and described herein. For example, those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, not all illustrated acts may be required to implement a methodology in accordance with the innovation. Furthermore, interaction diagram(s) may represent methodologies, or methods, in accordance with the subject disclosure when disparate entities enact disparate portions of the methodologies. Further yet, two or more of the disclosed example methods can be implemented in combination with each other, to accomplish one or more features or advantages described herein.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example methodology <b>800</b> for employing a modular load management architecture integrated in an industrial controller to manage energy distribution in a facility. At <b>802</b>, a feeder module is instantiated in a controller and associated with one or more energy sources that provide supply energy to drive one or more devices or machines within an industrial facility. The feeder module can comprise a deployable software module that can be integrated within a new or existing control program designed to control one or more operations in the industrial facility. The feeder module can interface with the control program through functional inputs and outputs associated with the module, and can be associated with energy sources of virtually any type, including electrical, gas, water, steam, air, or other such forms of energy. At <b>804</b>, one or more load modules are instantiated in the controller and associated with respective one or more loads fed by the one or more energy sources. Like the feeder module, the load modules can be deployable software modules that integrate with the control program, as well as the feeder module, using associated predefined functional inputs and outputs. Each load associated with a load module can represent an individual device or machine, or a plurality of devices or machines that are collectively metered as a single load.</p>
<p id="p-0054" num="0053">At <b>806</b>, energy supply data is read into the feeder module. This can comprise, for example, receiving telemetry signals at the controller from one or more supply meters that measure available energy supply delivered to a feeder. The signals can comprise analog voltage or current signals generated by the meters and fed into an analog input associated with the controller, a data value generated by a smart meter and read into the controller over a network connection, or other such data transmission means. Since the energy sources can comprise multiple disparate energy types, the supply data can comprise data measured in multiple disparate engineering units. Likewise, at <b>808</b>, load data from the one or more loads is read into the one or more load modules. As with the feeder data, the load data can be received at the controller in the form of telemetry signals from respective load meters that measure the energy draw for the loads. Since the loads can therefore comprise heterogeneous collection of devices fed by different types of energy (e.g., electrical, steam, gas, etc.), the load data can represent more than one type of energy, and can comprise data measured in multiple disparate engineering units (e.g., kW, joules, lbs, Btus, etc.). At <b>810</b>, the energy supply data and the load data is normalized to a common engineering unit. Normalization of the data can be performed using one or more conversion modules deployed in the controller and configured to convert incoming energy data from a first engineering unit to a selected second engineering unit. In this way, supply and energy data representing disparate energy types can be standardized to a common unit for collective load analysis.</p>
<p id="p-0055" num="0054">At <b>812</b>, the normalized supply and load data is exchanged between the feeder modules and the load modules via a virtual energy bus deployed in the controller. That is, the load and feeder modules can publish their respective data to the virtual energy bus, and read data published to bus by other modules. The data exchanged between the feeder modules and load modules need not be limited to total available supply and energy draw. For example, load modules can publish shed or reset status information associated with their respective loads, availability information for the loads, or other such information. Likewise, in addition to available supply data, the feeder modules can publish, for example, a percentage of the total available supply being consumed by all loads associated with the virtual energy bus. By way of this data exchange, feeder modules can be provided with highly granular status data for their associated loads, while the load modules can be provided with information regarding the overall available supply.</p>
<p id="p-0056" num="0055">At <b>814</b>, the feeder modules, load modules, and virtual energy bus can process the normalized load and supply data. For example, the feeder modules can monitor the collective load data published to the virtual energy bus by the load modules and determine such statistics as the percentage of the total available supply that is being drawn by the loads, the shed or reset statuses of each load, an expected reduction of load that would result from shedding low priority loads, or other such information. At <b>818</b>, load management for the system can be performed based on the processing performed at step <b>814</b>. This can include, but is not limited to, initiating load shedding when the feeder module or virtual energy bus determines that demand (either raw demand or the demand-to-supply ratio) has exceeded a predetermined threshold, coordinating the load shedding so that low priority loads are shed before high priority loads, resetting loads in a prioritized order when load shedding is no longer necessary, or other load management functions. Since the load modules, feeder modules, and virtual energy bus are deployed within the controller and integrate with the control program executing therein, the modules and bus are able to leverage the controller's native I/O to effect managed control of the facility's load utilization.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an example methodology <b>900</b> for configuring and carrying out automated prioritized load shedding using configurable modules deployed in a controller. At <b>902</b>, a value is set for a priority threshold attribute of a feeder module. As described above, the feeder module can be a software module instantiated in the controller and having a number of predefined inputs, outputs, and configurable attributes. The feeder module is associated with an energy supply feeder that provides power to a number of load devices in an industrial facility and receives energy supply metering data for the feeder. At <b>904</b>, values are set for respective load shed priority attributes for each of a plurality of load modules Like the feeder module, the load modules are configurable software modules having associated preconfigured inputs, outputs, and configurable parameters. Each load module acts as an interlock, via the native I/O of the controller, to a load device or a group of load devices fed by the supply feeder. Both the feeder module and the load modules can be integrated with and interact with a control program executing on the controller to effect control of one or more industrial processes.</p>
<p id="p-0058" num="0057">At <b>906</b>, energy load and supply data is monitored and processed by the load modules and the feeder module. To this end, the load data received by the load modules can be broadcast to the feeder module through a common reference to a virtual energy bus. The feeder module can then collectively monitor the loads in view of the available supply data to determine if load shedding is necessary at <b>908</b>. If load shedding is not deemed necessary, flow returns to step <b>906</b>, and the monitoring of load and supply data continues. Alternatively, if the feeder module determines that load shedding is necessary, the load shedding sequence can begin at <b>910</b>, wherein the load shed priority attribute value for a load module is compared with the priority threshold value configured for the feeder module.</p>
<p id="p-0059" num="0058">At <b>912</b>, a determination is made regarding whether the load shed priority value for the load module is less than the priority threshold configured for the feeder module. If the load shed priority for the load module is not less than the threshold, flow moves to step <b>914</b>, where it is determined whether there are additional load modules to be checked. Alternatively, if the load shed priority is less than the priority threshold configured for the feeder module, the load module generates an output command at <b>916</b> instructing the load or group of loads associated with the load module to enter a no-load or low-load state. This can comprise instructing the load(s) to switch to an off state or to low-power operation, or sending a control signal to open a breaker that disconnects the load from the feeder entirely. Flow then moves to <b>914</b>, where it is determined whether there are additional load modules to be checked. If there are additional load modules, the process moves to the next load module at <b>918</b>, then repeats the threshold comparison and load shedding sequence of steps <b>910</b>-<b>916</b> for the next module. Alternatively, if it is determined that all load modules have been compared with the priority threshold at <b>914</b>, flow moves to <b>920</b>, wherein it is determined whether additional load shedding is necessary. This determination can be made by the feeder module after all loads having configured load shed priorities less than the priority threshold have been shed. The feeder module can base the decision, for example, on whether the new total demand after load shedding (or the new load-to-supply ratio) still exceeds a desired threshold. If no additional shedding is necessary, the flow ends at <b>924</b>. Alternatively, if the feeder module determines that additional shedding is required, the threshold priority is incremented at <b>922</b>. The priority threshold can be incremented by the feeder module itself, or by the control program executing on the controller. The threshold comparison and load shedding sequence of steps <b>910</b>-<b>918</b> is then repeated using the new priority threshold.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an example methodology <b>1000</b> for normalizing disparate sets of energy data for collective load management. At <b>1002</b>, data relating to one or both of energy supply or energy usage within a facility are read into a controller. The energy data can be received at the controller from a plurality of disparate sources comprising two or more disparate energy types (e.g, electrical, steam, gas, water, air, etc.). As such, a first subset of the energy data accords to a first engineering unit (e.g., kW for electrical energy data), and a second subset of the energy data accords to a second engineering unit (e.g., joules for hydraulic or steam energy data). At <b>1004</b>, one or more conversion modules deployed in the controller normalizes the data from the disparate energy sources. This can comprise converting all the energy data values from their original engineering units to a common engineering unit. Each conversion module can comprise an instantiated software module having predefined inputs, outputs, and configurable parameters. The parameters allow the user to easily configure the conversion module to associate a particular energy source or load therewith and to set input and output conversion factors and multipliers. Using these configured settings, each conversion module can receive the original energy supply or load data as an input, and generate a converted energy value as an output. In this way, energy data conversion can be achieved through simple module configuration, mitigating the need to write custom conversion code.</p>
<p id="p-0061" num="0060">At <b>1006</b>, the normalized energy date can be published to a virtual energy bus deployed within the controller. As described above, the virtual energy bus can receive data relating to both energy supplies and energy demands and generate highly granular views of the current energy supply and usage statuses for the facility. At <b>1008</b>, the virtual energy bus can aggregate the normalized energy data and employ functions inherent in the bus to perform collective energy supply and usage calculations for the facility. This can involve calculating such values as the load-to-supply ratio, a number of loads referencing the virtual energy bus, expected change in total demand that would result from a load shedding or load resetting operation, shed or reset statuses, and other such data. These calculations can be employed internally by the controller, visualized on a display device, or provided to a data collection or reporting system. At <b>1010</b>, the virtual energy bus or components associated therewith can perform collective energy management for the facility based on the calculations performed at <b>1008</b>. For example, the virtual energy bus can determine that the current load-to-supply ratio necessitates shedding of load, and can trigger one or more controller outputs to disable specified machines accordingly.</p>
<p id="p-0062" num="0061">Embodiments, systems and components described herein, as well as industrial control systems and industrial automation environments in which various aspects set forth in the subject specification can be carried out, can include computer or network components such as servers, clients, programmable logic controllers (PLCs), communications modules, mobile computers, wireless components, control components and so forth which are capable of interacting across a network. Computers and servers include one or more processors&#x2014;electronic integrated circuits that perform logic operations employing electric signals&#x2014;configured to execute instructions stored in media such as random access memory (RAM), read only memory (ROM), a hard drives, as well as removable memory devices, which can include memory sticks, memory cards, flash drives, external hard drives, and so on.</p>
<p id="p-0063" num="0062">Similarly, the term PLC as used herein can include functionality that can be shared across multiple components, systems, and/or networks. As an example, one or more PLCs can communicate and cooperate with various network devices across the network. This can include substantially any type of control, communications module, computer, Input/Output (I/O) device, sensor, actuator, and human machine interface (HMI) that communicate via the network, which includes control, automation, and/or public networks. The PLC can also communicate to and control various other devices such as I/O modules including analog, digital, programmed/intelligent I/O modules, other programmable controllers, communications modules, sensors, actuators, output devices, and the like.</p>
<p id="p-0064" num="0063">The network can include public networks such as the internet, intranets, and automation networks such as control and information protocol (CIP) networks including DeviceNet and ControlNet. Other networks include Ethernet, DH/DH+, Remote I/O, Fieldbus, Modbus, Profibus, CAN, wireless networks, serial protocols, and so forth. In addition, the network devices can include various possibilities (hardware and/or software components). These include components such as switches with virtual local area network (VLAN) capability, LANs, WANs, proxies, gateways, routers, firewalls, virtual private network (VPN) devices, servers, clients, computers, configuration tools, monitoring tools, and/or other devices.</p>
<p id="p-0065" num="0064">In this application, the word &#x201c;exemplary&#x201d; is used to mean serving as an example, instance, or illustration. Any aspect or design described herein as &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion.</p>
<p id="p-0066" num="0065">Moreover, the term &#x201c;or&#x201d; is intended to mean an inclusive &#x201c;or&#x201d; rather than an exclusive &#x201c;or&#x201d;. That is, unless specified otherwise, or clear from context, &#x201c;X employs A or B&#x201d; is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then &#x201c;X employs A or B&#x201d; is satisfied under any of the foregoing instances. In addition, the articles &#x201c;a&#x201d; and &#x201c;an&#x201d; as used in this application and the appended claims should generally be construed to mean &#x201c;one or more&#x201d; unless specified otherwise or clear from context to be directed to a singular form.</p>
<p id="p-0067" num="0066">Various aspects or features described herein may be implemented as a method, apparatus, or article of manufacture using standard programming and/or engineering techniques. The term &#x201c;article of manufacture&#x201d; as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disk, floppy disk, magnetic strips . . . ), optical disks [e.g., compact disk (CD), digital versatile disk (DVD) . . . ], smart cards, and flash memory devices (e.g., card, stick, key drive . . . ).</p>
<p id="p-0068" num="0067">With reference to <figref idref="DRAWINGS">FIG. 11</figref>, an example environment <b>1110</b> for implementing various aspects of the aforementioned subject matter, including retaining documentation natively within memory of an industrial controller, includes a computer <b>1112</b>. The computer <b>1112</b> includes a processing unit <b>1114</b>, a system memory <b>1116</b>, and a system bus <b>1118</b>. The system bus <b>1118</b> couples system components including, but not limited to, the system memory <b>1116</b> to the processing unit <b>1114</b>. The processing unit <b>1114</b> can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit <b>1114</b>.</p>
<p id="p-0069" num="0068">The system bus <b>1118</b> can be any of several types of bus structure(s) including the memory bus or memory controller, a peripheral bus or external bus, and/or a local bus using any variety of available bus architectures including, but not limited to, 8-bit bus, Industrial Standard Architecture (ISA), Micro-Channel Architecture (MSA), Extended ISA (EISA), Intelligent Drive Electronics (IDE), VESA Local Bus (VLB), Peripheral Component Interconnect (PCI), Universal Serial Bus (USB), Advanced Graphics Port (AGP), Personal Computer Memory Card International Association bus (PCMCIA), and Small Computer Systems Interface (SCSI).</p>
<p id="p-0070" num="0069">The system memory <b>1116</b> includes volatile memory <b>1120</b> and nonvolatile memory <b>1122</b>. The basic input/output system (BIOS), containing the basic routines to transfer information between elements within the computer <b>1112</b>, such as during start-up, is stored in nonvolatile memory <b>1122</b>. By way of illustration, and not limitation, nonvolatile memory <b>1122</b> can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable PROM (EEPROM), or flash memory. Volatile memory <b>1120</b> includes random access memory (RAM), which acts as external cache memory. By way of illustration and not limitation, RAM is available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM).</p>
<p id="p-0071" num="0070">Computer <b>1112</b> also includes removable/non-removable, volatile/non-volatile computer storage media. <figref idref="DRAWINGS">FIG. 11</figref> illustrates, for example a disk storage <b>1124</b>. Disk storage <b>1124</b> includes, but is not limited to, devices like a magnetic disk drive, floppy disk drive, tape drive, Jaz drive, Zip drive, LS-100 drive, flash memory card, or memory stick. In addition, disk storage <b>1124</b> can include storage media separately or in combination with other storage media including, but not limited to, an optical disk drive such as a compact disk ROM device (CD-ROM), CD recordable drive (CD-R Drive), CD rewritable drive (CD-RW Drive) or a digital versatile disk ROM drive (DVD-ROM). To facilitate connection of the disk storage devices <b>1124</b> to the system bus <b>1118</b>, a removable or non-removable interface is typically used such as interface <b>1126</b>.</p>
<p id="p-0072" num="0071">It is to be appreciated that <figref idref="DRAWINGS">FIG. 11</figref> describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment <b>1110</b>. Such software includes an operating system <b>1128</b>. Operating system <b>1128</b>, which can be stored on disk storage <b>1124</b>, acts to control and allocate resources of the computer system <b>1112</b>. System applications <b>1130</b> take advantage of the management of resources by operating system <b>1128</b> through program modules <b>1132</b> and program data <b>1134</b> stored either in system memory <b>1116</b> or on disk storage <b>1124</b>. It is to be appreciated that the subject invention can be implemented with various operating systems or combinations of operating systems.</p>
<p id="p-0073" num="0072">A user enters commands or information into the computer <b>1112</b> through input device(s) <b>1136</b>. Input devices <b>1136</b> include, but are not limited to, a pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, TV tuner card, digital camera, digital video camera, web camera, and the like. These and other input devices connect to the processing unit <b>1114</b> through the system bus <b>1118</b> via interface port(s) <b>1138</b>. Interface port(s) <b>1138</b> include, for example, a serial port, a parallel port, a game port, and a universal serial bus (USB). Output device(s) <b>1140</b> use some of the same type of ports as input device(s) <b>1136</b>. Thus, for example, a USB port may be used to provide input to computer <b>1112</b>, and to output information from computer <b>1112</b> to an output device <b>1140</b>. Output adapter <b>1142</b> is provided to illustrate that there are some output devices <b>1140</b> like monitors, speakers, and printers, among other output devices <b>1140</b>, which require special adapters. The output adapters <b>1142</b> include, by way of illustration and not limitation, video and sound cards that provide a means of connection between the output device <b>1140</b> and the system bus <b>1118</b>. It should be noted that other devices and/or systems of devices provide both input and output capabilities such as remote computer(s) <b>1144</b>.</p>
<p id="p-0074" num="0073">Computer <b>1112</b> can operate in a networked environment using logical connections to one or more remote computers, such as remote computer(s) <b>1144</b>. The remote computer(s) <b>1144</b> can be a personal computer, a server, a router, a network PC, a workstation, a microprocessor based appliance, a peer device or other common network node and the like, and typically includes many or all of the elements described relative to computer <b>1112</b>. For purposes of brevity, only a memory storage device <b>1146</b> is illustrated with remote computer(s) <b>1144</b>. Remote computer(s) <b>1144</b> is logically connected to computer <b>1112</b> through a network interface <b>1148</b> and then physically connected via communication connection <b>1150</b>. Network interface <b>1148</b> encompasses communication networks such as local-area networks (LAN) and wide-area networks (WAN). LAN technologies include Fiber Distributed Data Interface (FDDI), Copper Distributed Data Interface (CDDI), Ethernet/IEEE 802.3, Token Ring/IEEE 802.5 and the like. WAN technologies include, but are not limited to, point-to-point links, circuit switching networks like Integrated Services Digital Networks (ISDN) and variations thereon, packet switching networks, and Digital Subscriber Lines (DSL).</p>
<p id="p-0075" num="0074">Communication connection(s) <b>1150</b> refers to the hardware/software employed to connect the network interface <b>1148</b> to the bus <b>1118</b>. While communication connection <b>1150</b> is shown for illustrative clarity inside computer <b>1112</b>, it can also be external to computer <b>1112</b>. The hardware/software necessary for connection to the network interface <b>1148</b> includes, for exemplary purposes only, internal and external technologies such as, modems including regular telephone grade modems, cable modems and DSL modems, ISDN adapters, and Ethernet cards.</p>
<p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. 12</figref> is a schematic block diagram of a sample-computing environment <b>1200</b> with which the disclosed subject matter can interact. The system <b>1200</b> includes one or more client(s) <b>1210</b>. The client(s) <b>1210</b> can be hardware and/or software (e.g., threads, processes, computing devices). The system <b>1200</b> also includes one or more server(s) <b>1230</b>. The server(s) <b>1230</b> can also be hardware and/or software (e.g., threads, processes, computing devices). The servers <b>1230</b> can house threads to perform transformations by employing the subject invention, for example. One possible communication between a client <b>1210</b> and a server <b>1230</b> can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system <b>1200</b> includes a communication framework <b>1250</b> that can be employed to facilitate communications between the client(s) <b>1210</b> and the server(s) <b>1230</b>. The client(s) <b>1210</b> are operably connected to one or more client data store(s) <b>1260</b> that can be employed to store information local to the client(s) <b>1210</b>. Similarly, the server(s) <b>1230</b> are operably connected to one or more server data store(s) <b>1240</b> that can be employed to store information local to the servers <b>1230</b>.</p>
<p id="p-0077" num="0076">What has been described above includes examples of the subject innovation. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the disclosed subject matter, but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly, the disclosed subject matter is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.</p>
<p id="p-0078" num="0077">In particular and in regard to the various functions performed by the above described components, devices, circuits, systems and the like, the terms (including a reference to a &#x201c;means&#x201d;) used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., a functional equivalent), even though not structurally equivalent to the disclosed structure, which performs the function in the herein illustrated exemplary aspects of the disclosed subject matter. In this regard, it will also be recognized that the disclosed subject matter includes a system as well as a computer-readable medium having computer-executable instructions for performing the acts and/or events of the various methods of the disclosed subject matter.</p>
<p id="p-0079" num="0078">In addition, while a particular feature of the disclosed subject matter may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms &#x201c;includes,&#x201d; and &#x201c;including&#x201d; and variants thereof are used in either the detailed description or the claims, these terms are intended to be inclusive in a manner similar to the term &#x201c;comprising.&#x201d;</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system for managing delivery and consumption of energy, comprising:
<claim-text>a memory; and</claim-text>
<claim-text>a processor that facilitates execution of computer-executable components stored within the memory, the computer-executable components comprising:
<claim-text>a feeder module deployed within an industrial controller; and</claim-text>
<claim-text>one or more load modules deployed within the industrial controller and respectively corresponding to one or more energy consuming devices;</claim-text>
<claim-text>wherein the feeder module is further configured to, in response to initiation of a load shedding mode, select a subset of the one or more load modules based on a comparison between a configurable priority threshold value associated with the feeder module and one or more configurable load priority values respectively associated with the one or more load modules, and to instruct the subset of the one or more load modules to switch a corresponding subset of the one or more energy consuming devices to a low-load state, and</claim-text>
<claim-text>wherein the feeder module is further configured to increment the configurable priority threshold in response to a determination that a total demand satisfies a criterion after an elapse of a defined time period after initiation of the load shedding mode.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the feeder module and the one or more load modules respectively comprise at least one input and at least one output, and wherein the at least one input and the at least one output are configured to interface with a program executing in the industrial controller.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the feeder module is further configured to receive supply data representing a total supply energy measured from an energy supply feeder, and the one or more load modules are further configured to receive demand data measured for the one or more energy consuming devices.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the demand data represents at least two different types of energy scaled in accordance with respective two different engineering units, and the computer-executable components further comprise at least one conversion module deployed within the industrial controller and configured to normalize the demand data to a common engineering unit in accordance with a configurable scaling parameter associated with the at least one conversion module.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the one or more load modules are further configured to publish the demand data to a virtual energy bus deployed in the industrial controller, and the feeder module is further configured to determine the total demand based on the demand data published to the virtual energy bus.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the feeder module is further configured to determine whether to initiate the load shedding mode based on an analysis of the demand data published to the virtual energy bus.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the feeder module is further configured to initiate the load shedding mode in response to a determination that a ratio of the total demand to the total supply energy satisfies the criterion.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the defined time period is a first defined time period, and a load module of the subset of the one or more load modules is configured to set a first bit in the industrial controller in response to a determination that an energy consuming device corresponding to the load module has not switched to a low-load state within a second defined time period after the initiation of the load shedding mode.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the load module is further configured to set a second bit in response to a determination that the energy consuming device corresponding to the load module has switched to the low-load state within the second defined time period after the initiation of load shedding mode.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the feeder module is further configured to estimate an amount of energy load that will be shed in response to the configurable threshold priority value being incremented.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for managing energy load, comprising:
<claim-text>initiating, by a feeder module executing within an industrial controller comprising at least one processor, a load shedding mode;</claim-text>
<claim-text>selecting, by the feeder module in response to the initiating, at least one load module executing within the industrial controller based on a comparison between a priority threshold value configured for the feeder module and at least one load priority value respectively associated with the at least one load module;</claim-text>
<claim-text>instructing the at least one load module to transition a corresponding at least one energy load to a low-load state; and</claim-text>
<claim-text>in response to determining that a total load of the at least one energy load satisfies a criterion after an elapse of a defined time period after the instructing, incrementing the priority threshold value.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>setting, by a load module of the at least one load module, a first bit in the industrial controller in response to a determination that an energy load corresponding to the load module has transitioned to a low-load state within another defined time period after the instructing; and</claim-text>
<claim-text>setting, by the load module, a second bit in the industrial controller in response to a determination that the energy load corresponding to the load module has not transitioned to the low-load state within the other defined time period.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the initiating comprises initiating the load shedding mode in response to determining that a ratio of the total load to a total available energy supply satisfies the criterion.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the selecting comprises selecting, as the at least one load module, one or more load modules respectively comprising an associated load shed priority value that is less than the priority threshold value associated with the feeder module.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>receiving, by the feeder module, measured energy supply data from at least one energy source; and</claim-text>
<claim-text>receiving, by the at least one load module, measured demand data from the at least one energy load powered by the at least one energy source.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the receiving the measured demand data comprises:
<claim-text>receiving, by a first load module of the at least one load module, first demand data from a first energy load of a first energy type;</claim-text>
<claim-text>receiving, by a second load module of the at least one load module, second demand data from a second energy load of a second energy type; and</claim-text>
<claim-text>normalizing, by at least one conversion module executing within the industrial controller, the first demand data and the second demand data to a common engineering unit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising initiating a rendering of one or more aggregated views of a current energy supply and an energy demand status on an interface using data generated by at least one of the feeder module or the at least one load module.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>determining, by the feeder module, at least one of the total load or a percentage of a total available energy supply consumed by the at least one energy load based on the measured demand data received by the at least one load module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A system for aggregated load monitoring and management of one or more energy distribution systems, comprising:
<claim-text>a controller comprising at least one processor and having deployed therein a feeder module and one or more load modules;</claim-text>
<claim-text>wherein the controller is configured to:
<claim-text>in response to an initiation of a load shedding mode by the feeder module, select a subset of the one or more load modules based on a comparison between a configurable threshold priority value associated with the feeder module and one or more configurable load priority values respectively associated with the one or more load modules,</claim-text>
<claim-text>instruct the subset of the one or more load modules to switch a corresponding subset of one or more devices to a low-load state, and</claim-text>
<claim-text>in response to a determination that a total energy demand of the one or more devices satisfies a criterion after a defined time period has elapsed subsequent to the initiation of the load shedding mode, increment the configurable threshold priority value.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the defined duration is a first defined duration, and a load module of the one or more load modules is configured to set a bit in the controller in response to a determination that a device corresponding to the load module has not switched to a low-load state within a second defined duration after the initiation of the load shedding mode.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the feeder module is configured to receive energy supply data from an energy feeder, and the one or more load modules are configured to receive demand data from respective one or more devices powered by the energy feeder.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the controller further has deployed therein a virtual energy bus configured to generate, based on at least one of the energy supply data or the demand data, at least one of load data representing an energy load on the energy feeder, total load data representing the total energy demand reported by the one or more load modules as a percentage of a total energy supply, load shed status data representing a load shed status of the one or more devices, or load reset status data representing a load reset status of the one or more devices.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the controller is further configured to send a signal that instructs the subset of one or more devices to switch to the low-load state.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the defined time period is a first defined time period, and a load module, of the one or more load modules, is configured to generate a load shed status indication based on a determination of whether a device corresponding to the load module has switched to the low-load state within a second defined time period after sending the signal. </claim-text>
</claim>
</claims>
</us-patent-grant>

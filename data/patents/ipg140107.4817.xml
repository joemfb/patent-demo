<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625910-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625910</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13035569</doc-number>
<date>20110225</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>288</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>36</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
<further-classification>382234</further-classification>
</classification-national>
<invention-title id="d2e53">Compression of image data</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5341442</doc-number>
<kind>A</kind>
<name>Barrett</name>
<date>19940800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5598214</doc-number>
<kind>A</kind>
<name>Kondo et al.</name>
<date>19970100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5699122</doc-number>
<kind>A</kind>
<name>Jung</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5710838</doc-number>
<kind>A</kind>
<name>Jung</name>
<date>19980100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5742704</doc-number>
<kind>A</kind>
<name>Suzuki et al.</name>
<date>19980400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5805226</doc-number>
<kind>A</kind>
<name>Jung</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5956431</doc-number>
<kind>A</kind>
<name>Iourcha et al.</name>
<date>19990900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382253</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6320981</doc-number>
<kind>B1</kind>
<name>Yada</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6404919</doc-number>
<kind>B1</kind>
<name>Nishigaki et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6744926</doc-number>
<kind>B1</kind>
<name>Nishigaki</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7385611</doc-number>
<kind>B1</kind>
<name>Toksvig et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345582</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7787691</doc-number>
<kind>B2</kind>
<name>Strom</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382166</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2002/0081377</doc-number>
<kind>A1</kind>
<name>Ohishi et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>4271632</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0215914</doc-number>
<kind>A1</kind>
<name>Aleksic et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2006/0269127</doc-number>
<kind>A1</kind>
<name>Ogden et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2006/0269152</doc-number>
<kind>A1</kind>
<name>Fenney</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2007/0070078</doc-number>
<kind>A1</kind>
<name>Schilling et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2007/0071333</doc-number>
<kind>A1</kind>
<name>Strom et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382239</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2008/0055331</doc-number>
<kind>A1</kind>
<name>Iourcha et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2008/0187218</doc-number>
<kind>A1</kind>
<name>Strom</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382166</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2008/0310740</doc-number>
<kind>A1</kind>
<name>Strom et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0051694</doc-number>
<kind>A1</kind>
<name>Pan et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0310873</doc-number>
<kind>A1</kind>
<name>Asano</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2010/0328425</doc-number>
<kind>A1</kind>
<name>Nagaraj et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>Jiri Kochanek, et al., &#x201c;The New Statistical Compression Method: Multistream Compression,&#x201d; IEEE 2008, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>Jose L. Paredes, et al., &#x201c;Multichannel Image Compression by Bijection Mappings Onto Zero-Trees,&#x201d; IEEE Transactions on Image Processing, vol. 11, No. 3, Mar. 2002, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382166</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382234</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382239</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382251</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120219233</doc-number>
<kind>A1</kind>
<date>20120830</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Uro</last-name>
<first-name>Tinic</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Marketsmueller</last-name>
<first-name>Sebastian</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Uro</last-name>
<first-name>Tinic</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Marketsmueller</last-name>
<first-name>Sebastian</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wolfe-SBMC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Adobe Systems Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tran</last-name>
<first-name>Phuoc</first-name>
<department>2668</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Image content may be compressed using a plurality of block truncation coding schemes resulting in a plurality of compressed versions of the image content. The plurality of compressed versions may be combined together into a single data structure. Prior to combining the plurality of compressed versions, each compressed version may be further compressed. In one embodiment, a data structure containing a plurality of block truncation encoded format versions of image content may be received. Rendering hardware-compatible block truncation encoded content from the plurality of compressed versions may be determined and provided to rendering hardware. The hardware may then decode the selected one block truncation encoded format for display. In one embodiment, each of the received plurality of block truncation encoded content versions may be further compressed. Before providing the selected version to the hardware for decoding, the further compression may be decompressed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="128.69mm" wi="101.52mm" file="US08625910-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="250.53mm" wi="152.40mm" file="US08625910-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.88mm" wi="169.76mm" file="US08625910-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="212.34mm" wi="121.58mm" file="US08625910-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.42mm" wi="185.42mm" orientation="landscape" file="US08625910-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="259.25mm" wi="177.12mm" file="US08625910-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="194.14mm" wi="191.94mm" file="US08625910-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="191.94mm" wi="170.69mm" file="US08625910-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="252.31mm" wi="178.05mm" orientation="landscape" file="US08625910-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="254.93mm" wi="181.53mm" orientation="landscape" file="US08625910-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Technical Field</p>
<p id="p-0003" num="0002">This disclosure relates generally to compression, and more specifically, to compression of image content.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Image data for texturing, which can be very large, is typically stored in resident memory of graphics hardware (e.g., graphics processing units (GPUs)) for use by the graphics hardware. Many GPUs implement some scheme of compression for the texture images, which may be hardware specific, allowing the GPU to read the compressed image directly from memory. For example, at run time, image data is encoded into a format that is compatible with a particular GPU and passed to GPU memory. The GPU can then decode and render the image data.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">This disclosure describes techniques and structures for asymmetrical compression and decompression of data. In one embodiment, content, such as image content, may be received. The content may be encoded using a plurality of block truncation coding schemes resulting in a plurality of block truncation encoded versions of the image content. The plurality of block truncation encoded versions may be combined together into a single data structure. In one embodiment, prior to combining the plurality of block truncation encoded versions, each block truncation encoded version may be further compressed. In one embodiment, further compression, with a compression algorithm different from a block truncation coding scheme, may be applied to the entirety of each block truncation encoded version. In one embodiment, each block truncation encoded version may be split into constituent components and may be further compressed by constituent component type, with a compression algorithm different from a block truncation coding scheme.</p>
<p id="p-0007" num="0006">In one embodiment, a data structure containing a plurality of block truncation encoded image content versions may be received. The data structure may be read and a block truncation encoded version that is compatible with a particular piece of rendering hardware may be determined and provided to the rendering hardware. The hardware may then decode the selected one block truncation encoded format for display. In one embodiment, each of the received plurality of block truncation encoded format versions may be further compressed with compression algorithm different from a block truncation coding scheme. Before providing the selected version to the hardware for decoding, the further compression may be decompressed.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a flowchart of a method for encoding image content and combining encoded versions, according to some embodiments.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart of another method for encoding image content and combining encoded versions, according to some embodiments.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart of a method for further compressing the encoded image content, according to some embodiments.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart of a method for selecting a format of compressed media content and providing the selected format to rendering hardware, according to some embodiments.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart of another method for selecting a format of compressed media content and providing the selected format to rendering hardware, according to some embodiments.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>illustrates an example of encoding a RAW texture, according to some embodiments.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>illustrates an example of further compressing an encoded RAW texture, according to some embodiments.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref><i>c </i>illustrates an example of selecting a format of compressed image content and decoding the selected format, according to some embodiments.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example server and an example client that may implement encoding image content and combining encoded versions, according to some embodiments.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example computer system that may be used in embodiments.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 9</figref><i>a</i>-<b>9</b><i>c </i>illustrate examples for splitting DXT1 content, PVRTC content, and ETC1 content into constituent components, according to some embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0019" num="0018">While the disclosure is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the disclosure is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the disclosure to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present disclosure. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description. As used throughout this application, the word &#x201c;may&#x201d; is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words &#x201c;include&#x201d;, &#x201c;including&#x201d;, and &#x201c;includes&#x201d; mean including, but not limited to.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading>
<p id="p-0020" num="0019">In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.</p>
<p id="p-0021" num="0020">Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as &#x201c;processing,&#x201d; &#x201c;computing,&#x201d; &#x201c;calculating,&#x201d; &#x201c;determining&#x201d; or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.</p>
<p id="p-0022" num="0021">&#x201c;First,&#x201d; &#x201c;Second,&#x201d; etc. As used herein, these terms are used as labels for nouns that they precede, and do not imply any type of ordering (e.g., spatial, temporal, logical, etc.). For example, in a computer-readable storage medium having multiple algorithms, the terms &#x201c;first&#x201d; and &#x201c;second&#x201d; algorithms can be used to refer to any two of the algorithms. In other words, the &#x201c;first&#x201d; and &#x201c;second&#x201d; algorithms are not limited to logical algorithms 0 and 1.</p>
<p id="p-0023" num="0022">&#x201c;Based On.&#x201d; As used herein, this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is, a determination may be solely based on those factors or based, at least in part, on those factors. Consider the phrase &#x201c;determine A based on B.&#x201d; While B may be a factor that affects the determination of A, such a phrase does not foreclose the determination of A from also being based on C. In other instances, A may be determined based solely on B.</p>
<p id="p-0024" num="0023">Digital image editing applications, executed on a computing device, may be used to manipulate, enhance, transform, create and render images, graphics, and videos, such as vector graphics, 3D graphics, and video. Digital image editing applications may be used to render, modify, and edit such objects, according to various embodiments described herein, and may use an application programming interface (API), such as OpenGL, DirectX, or Direct3D.</p>
<p id="p-0025" num="0024">Various embodiments of methods and apparatus for encoding image content and combining the encoded image content, as well as for selecting a version of compressed media content and providing the selected format to rendering hardware, are described. Some embodiments may include a means for encoding image content and combining the encoded image content and/or a means for selecting a version of encoded content and providing the selected version to rendering hardware. For example, an encoding module may receive image content as input and compress the image content with a block truncation coding algorithm. In one embodiment, encoding module may further compress the same content using a different compression algorithm. A combining module may combine each of the differently compressed content into a single data structure. A selecting module may select an appropriate format of compressed image content for a particular piece of hardware. Selecting module may further provide the selected version to rendering hardware. The encoding, combining, and selecting modules may, in some embodiments, be implemented by program instructions stored in a computer-readable storage medium and executable by one or more processors of a computing apparatus. The computer-readable storage medium may store program instructions executable by the one or more processors to cause the computing apparatus to perform encoding image content and combining the encoded image content and/or selecting a version of compressed image content and providing the selected version to rendering hardware, as described herein. Other embodiments of the encoding, combining, and selecting modules may be at least partially implemented by hardware circuitry and/or firmware stored, for example, in a non-volatile memory.</p>
<p id="p-0026" num="0025">Turning now to <figref idref="DRAWINGS">FIG. 1</figref>, one embodiment for encoding image content and combining encoded versions is shown. While the blocks are shown in a particular order for ease of understanding, other orders may be used. In some embodiments, the method of <figref idref="DRAWINGS">FIG. 1</figref> may include additional (or fewer) blocks than shown. Blocks <b>100</b>-<b>120</b> may be performed automatically or may receive user input.</p>
<p id="p-0027" num="0026">As indicated at <b>100</b>, image content may be received. Image content may include two-dimensional (2D) image data (e.g., texture data), vector graphics, RGB data, a frame of a video, etc. For example, image content may include the 2D wood texture of a 3D graphic of a fence with a 2D wood texture. In such an example, the 2D image portion, the wood texture, may be used for texturing in a 3D rendering of the fence. The texture data may be received in RAW format.</p>
<p id="p-0028" num="0027">As shown at <b>110</b>, the image content may be encoded into different block truncation encoded versions using a plurality of different block truncation coding (BTC) schemes. A block truncation encoded version of image content may be referred to, herein, as &#x201c;BTC content&#x201d; or a &#x201c;BTC version.&#x201d; BTC schemes may be asymmetric. Further, the BTC schemes may be block-based texture compression formats with fixed compression ratios. A fixed compression ratio may describe a compression format that compresses pixel blocks that are all of the same size. This is in contrast to a block compression scheme, such as JPEG, where every compressed block may have a different size. In one embodiment, the BTC schemes may encode each 4&#xd7;4 pixel block of the image content as 32 bits. A larger fixed compression ratio may yield greater compression at the cost of reduced quality. Likewise, a smaller fixed compression ratio may yield lesser compression but may result in higher quality compression. Regardless of size, such an encoding scheme may be lossy in nature. BTC content, encoded with a fixed compression ratio, may, however, enable a memory controller, for example, a memory controller of a GPU, to read directly from the hardware. Some examples of BTC schemes with a fixed compression ratio that may be used in various embodiments include: S3 Texture Compression (S3TC), which may also may known as DXTn or DXTC, PVRTC-I, PVRTC-II, and Ericsson Texture Compression (ETC). Each BTC version may be compatible with certain graphics hardware. For example, one GPU may be compatible with S3TC encoded content while another GPU may be compatible with ETC encoded content. In one embodiment, the image content may be encoded with each of S3TC, PVRTC, and ETC schemes, such that the image content may be compatible with a broad range of hardware. Various BTC schemes may be included in a library on a server from which the encoding may be performed.</p>
<p id="p-0029" num="0028">At <b>120</b>, the different block truncation encoded versions of the image content may be combined into a single data structure. For instance, in an embodiment where the image content is encoded/compressed using each of S3TC, PVRTC, and ETC schemes, the encoded versions (e.g., S3TC encoded image content, PVRTC encoded image content, and ETC encoded image content) may be combined into a single data structure. The single data structure may be a single file for storage, loading, and/or transmission. In one embodiment, the combined single data structure may be structured by block truncation encoded version. Accordingly, in the example with S3TC, PVRTC, and ETC versions, the first portion of the data structure may be the S3TC encoded content, the middle portion the PVRTC encoded content, and the last portion, the ETC encoded content. The data structure may be structured in a different manner than sequentially by format type. In one embodiment, each encoded type may be divided before combining into the single data structure such that the compressed formats may be interspersed throughout the data structure, for example, by channel. The data structure may include headers or other formatting so that the appropriate portions of the data structure may be parsed by a media content delivery protocol. The file may then be stored to a storage medium (e.g., a hard disk), or may be delivered to a client.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> illustrates another embodiment for encoding image content and combining encoded versions. While the blocks are shown in a particular order for ease of understanding, other orders may be used. In some embodiments, the method of <figref idref="DRAWINGS">FIG. 2</figref> may include additional (or fewer) blocks than shown. Blocks <b>200</b>-<b>230</b> may be performed automatically or may receive user input.</p>
<p id="p-0031" num="0030">At <b>200</b> and <b>210</b>, image content may be received and may be encoded into different block truncation encoded versions using a plurality of different block truncation coding (BTC) schemes. Accordingly, the receiving and encoding of blocks <b>200</b>-<b>210</b> may operate in the same or substantially the same manner as blocks <b>100</b>-<b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>, respectively.</p>
<p id="p-0032" num="0031">As shown at <b>220</b>, the block truncation encoded versions of the image content may be further encoded using a compression algorithm that is different from any of the block truncation encoding schemes used at <b>210</b>. Further encoding may provide additional compression to the already compressed BTC content. In some manners, BTC schemes may not provide the most efficient compression. Moreover, additional compression may provide a more efficient encoding of the image content and may allow the combined data structure to be used in additional applications. In one embodiment, one or more of the BTC content versions may be compressed using a generalized algorithm (e.g., LZMA) over the full BTC content. BTC content may include words composed of constituent components, as described at <figref idref="DRAWINGS">FIG. 3</figref>. In an embodiment where the entire BTC content is encoded using a single overall compression algorithm, the words may not need to be de-interleaved into constituent components before performing the additional encoding. By splitting into constituent components, however, additional bandwidth and performance gains may be achieved. If the combined file may not be used for transmission, though, bandwidth considerations may not be as significant and an overall, generalized additional compression of the BTC content may be sufficient.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> illustrates one embodiment of further encoding one or more of the block truncation encoded versions. While the blocks are shown in a particular order for ease of understanding, other orders may be used. In some embodiments, the <figref idref="DRAWINGS">FIG. 3</figref> may include additional (or fewer) blocks than shown. Blocks <b>300</b>-<b>320</b> may be performed automatically or may receive user input.</p>
<p id="p-0034" num="0033">As illustrated at <b>300</b>, one or more of the block truncation encoded content versions may be separated into constituent components. Block truncation encoded versions of image content, such as S3TC, PVRTC, and ETC versions, may each consist of constituent components, or channels. The number of channels and types of channels may vary based on the type of BTC. As one example, the constituent components of BTC content may include an image part and a residual part. The image part may include two color components and the residual part may include a selector/modifier component. The two color components and the selector/modifier component may be interleaved into words. In one embodiment, separating the block truncation encoded content version into constituent components may include de-interleaving or splitting the block truncation encoded content into its respective image part and residual part. <figref idref="DRAWINGS">FIGS. 9</figref><i>a</i>-<b>9</b><i>c </i>illustrate examples for splitting DXT1 content, PVRTC content, and ETC1 content into constituent components, respectively. In one embodiment, PVRTC content may need to be de-twiddled before splitting the content.</p>
<p id="p-0035" num="0034">At <b>310</b>, one type of constituent component may be encoded with a compression algorithm. The type of constituent component may correspond to the image portion of the compressed content. For the compressed content, each stream (e.g., image part, residual part) may be compressed using an algorithm that is different from the BTC schemes used in the initial encoding. Some streams may tolerate lossy compression algorithms while other streams may tolerate lossless compression algorithms. In one embodiment, the two color image streams may be compressed using color compression technologies such as JPEG, PNG, JPEG-XR, which may be lossless or lossy.</p>
<p id="p-0036" num="0035">As shown at <b>320</b>, another type of constituent component may be encoded with another compression algorithm. The another type of constituent component may, in some embodiments, correspond to the residual part of the BTC content. Similar to encoding the image part of the BTC content, the residual part of the BTC content may also be compressed using an algorithm that is different from the BTC schemes used in the initial encoding. In one embodiment, the algorithm used to compress the residual part of the BTC content may also be different from the algorithm used to compress the image part of the BTC content. For example, the selector/modifier stream may include noisy data and may be compressed using an all purpose, standard image compression algorithm like LZ77/Huffman or LZMA, which may be lossless.</p>
<p id="p-0037" num="0036">Turning back to <figref idref="DRAWINGS">FIG. 2</figref>, at <b>230</b>, the double compressed block truncation encoded versions of the image content may be combined into a single data structure. Block <b>230</b> may be substantially similar to block <b>120</b> with the exception that one or more of the BTC versions may include an additional layer of compression, generalized or by constituent component type, before combining into the single data structure. Double compressed or doubly compressed refers to the additional layer of compression/encoding.</p>
<p id="p-0038" num="0037">Packaging multiple block truncation encoded versions of image content may offer many advantages. First, it may allow content creators to design texture packages that support most existing GPUs. Further, using asymmetric image compression schemes, such as block truncation encoding schemes, at the time of content authoring may allow media players to avoid recompression at run time thereby reducing latency. Moreover, by further encoding the multiple block truncation encoded versions, additional time, bandwidth, and storage gains may be achieved.</p>
<p id="p-0039" num="0038">An example encoding and combination of media content, which may correspond to one or more of the encoding techniques of <figref idref="DRAWINGS">FIGS. 1-3</figref> may be represented as follows, where ATF format may be a data stream for storage, loading, and/or transmission:</p>
<p id="p-0040" num="0039">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="133pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
<row>
<entry>Field</entry>
<entry>Type</entry>
<entry>Comment</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="322pt" align="center"/>
<tbody valign="top">
<row>
<entry>ATF</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry>Signature</entry>
<entry>U8[3]</entry>
<entry>Always &#x2018;ATF&#x2019;.</entry>
</row>
<row>
<entry>Length</entry>
<entry>U24</entry>
<entry>Size of ATF file in bytes, does include</entry>
</row>
<row>
<entry/>
<entry/>
<entry>signature bytes and this length field.</entry>
</row>
<row>
<entry>Cubemap</entry>
<entry>UB[1]</entry>
<entry>0 = normal texture</entry>
</row>
<row>
<entry/>
<entry/>
<entry>1 = cube map texture</entry>
</row>
<row>
<entry>Format</entry>
<entry>UB[7]</entry>
<entry>0 = RGB888</entry>
</row>
<row>
<entry/>
<entry/>
<entry>1 = RGBA88888</entry>
</row>
<row>
<entry/>
<entry/>
<entry>2 = Compressed</entry>
</row>
<row>
<entry>Log2Width</entry>
<entry>U8</entry>
<entry>Width of texture expressed as. 2{circumflex over (&#x2009;)}Log-</entry>
</row>
<row>
<entry/>
<entry/>
<entry>2Width. Maximum value allowed is 11.</entry>
</row>
<row>
<entry>Log2Height</entry>
<entry>U8</entry>
<entry>Height of texture expressed as</entry>
</row>
<row>
<entry/>
<entry/>
<entry>2{circumflex over (&#x2009;)}Log2Height. Maximum value allowed</entry>
</row>
<row>
<entry/>
<entry/>
<entry>is 11.</entry>
</row>
<row>
<entry>Count</entry>
<entry>U8</entry>
<entry>Total number of textures encoded per</entry>
</row>
<row>
<entry/>
<entry/>
<entry>face. Maximum value allowed is 12.</entry>
</row>
<row>
<entry>TextureData</entry>
<entry>If Cubemap == 0 {</entry>
<entry>The first image encoded is the main tex-</entry>
</row>
<row>
<entry/>
<entry>&#x2003;If Format ==0</entry>
<entry>ture image encoded at the size specified</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFRGB888[Count]</entry>
<entry>above. Each consecutive image encoded</entry>
</row>
<row>
<entry/>
<entry>&#x2003;If Format == 1</entry>
<entry>contains the next mip map level of that</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFRGBA8888[Count]</entry>
<entry>main image.</entry>
</row>
<row>
<entry/>
<entry>&#x2003;If Format == 2</entry>
<entry>Cube maps contain 6 faces. They are</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFCOMPRESSED[Count]</entry>
<entry>placed in the following order: [&#x2212;X, +X, &#x2212;Y,</entry>
</row>
<row>
<entry/>
<entry>}</entry>
<entry>+Y, &#x2212;Z, +Z], i.e. [Left, Right, Bottom, Top,</entry>
</row>
<row>
<entry/>
<entry>if Cubemap == 1 {</entry>
<entry>Back, Front]</entry>
</row>
<row>
<entry/>
<entry>&#x2003;If Format == 0</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFRGB888[6][Count]</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;If Format == 1</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFRGBA8888[6][Count]</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;If Format == 2</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;ATFCOMPRESSED[6][Count]</entry>
<entry/>
</row>
<row>
<entry/>
<entry>}</entry>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="322pt" align="center"/>
<tbody valign="top">
<row>
<entry>ATFRGB888</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry>Length</entry>
<entry>U24</entry>
<entry>Length of payload data in bytes</entry>
</row>
<row>
<entry>Data</entry>
<entry>U8[Length]</entry>
<entry>JPEG-XR data (JXRC_FMT_24bppRGB)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="322pt" align="center"/>
<tbody valign="top">
<row>
<entry>ATFRGBA8888</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry>Length</entry>
<entry>U24</entry>
<entry>Length of payload data in bytes</entry>
</row>
<row>
<entry>Data</entry>
<entry>U8[Length]</entry>
<entry>JPEG-XR data (JXRC FMT_32bppBGRA)</entry>
</row>
<row>
<entry>ATFCOMPRESSED</entry>
<entry/>
<entry/>
</row>
<row>
<entry>DXT1DataLength</entry>
<entry>U24</entry>
<entry>Length of DXT1 data in bytes</entry>
</row>
<row>
<entry>DXT1Data</entry>
<entry>U8[DXT1Datalength]</entry>
<entry>LZMA compressed DXT1 data</entry>
</row>
<row>
<entry>DXT1ImageDatalength</entry>
<entry>U24</entry>
<entry>Length of DXT1 image data in bytes</entry>
</row>
<row>
<entry>DXT1ImageData</entry>
<entry>U8[DXT1ImageDataLength]</entry>
<entry>JPEG-XR data (JXRC_FMT_16bppBGR565)</entry>
</row>
<row>
<entry>PVRTCTopDataLength</entry>
<entry>U24</entry>
<entry>Length of PVRTC4bpp top data in bytes</entry>
</row>
<row>
<entry>PVRTCTopData</entry>
<entry>U8[PVRTCTopDataLength]</entry>
<entry>LZMA compressed PVRTC top data</entry>
</row>
<row>
<entry>PVRTCBottomDataLength</entry>
<entry>U24</entry>
<entry>Length of PVRTC4bpp bottom data in bytes</entry>
</row>
<row>
<entry>PVRTCBottornData</entry>
<entry>U8[PVRTCBottomDataLength]</entry>
<entry>LZMA compressed PVRTC bottom data</entry>
</row>
<row>
<entry>PVRTCImageDataLength</entry>
<entry>U24</entry>
<entry>Length of PVRTC4bpp image data in bytes</entry>
</row>
<row>
<entry>PVRTCImageData</entry>
<entry>U8[PVRTCImageDataLength]</entry>
<entry>JPEG-XR data (JXRC_FMT_16bppBGR555)</entry>
</row>
<row>
<entry>ETC1TopDataLength</entry>
<entry>U24</entry>
<entry>Length of ETC1 top data in bytes</entry>
</row>
<row>
<entry>ETC1TopData</entry>
<entry>U8[ETC1TopDataLength]</entry>
<entry>LZMA compressed ETC1 top data</entry>
</row>
<row>
<entry>ETC1BottomDatalength</entry>
<entry>U24</entry>
<entry>Length of ETC1 bottom data in bytes</entry>
</row>
<row>
<entry>ETC1BottomData</entry>
<entry>U8[ETC1BottomDataLength]</entry>
<entry>LZMA compressed ETC1 bottom data</entry>
</row>
<row>
<entry>ETC1ImageDataLength</entry>
<entry>U24</entry>
<entry>Length of ETC1 image data in bytes</entry>
</row>
<row>
<entry>ETC1ImageData</entry>
<entry>U8[ETC1ImageDataLength]</entry>
<entry>JPEG-XR data (JXRC_FMT_16bppBGR555)</entry>
</row>
<row>
<entry namest="1" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0041" num="0040">The data in this example is represented in three different block truncation coding formats: DXT1, PVRTC, and ETC1. Respective portions of each of the three BTC versions are further compressed with LZMA and JPEG-XR. For example, the noisy channel portion may be compressed with LZMA and the color channel portions may be compressed with JPEG-XR. Note that the DXT1 data is split differently than are the PVRTC and ETC1 data. In the example, the DXT1 data includes a single LZMA compressed portion while the PVRTC and ETC1 data each include two LZMA compressed portions, corresponding to top and bottom data.</p>
<p id="p-0042" num="0041">Applying additional compression to already compressed content and packaging the doubly-compressed media content together into a single data structure may yield a multi-format data structure that is smaller than any of the compressed versions individually. In other words, a data structure containing each of S3TC, PVRTC, and ETC encoded content, with each compressed a second time, may be smaller than a data structure that contains only one of S3TC, PVRTC, or ETC data. In addition, by using different compression schemes for different parts of the BTC content, patterns and predictability for channels that can tolerate lossy algorithms may be exploited and generalized lossless algorithms may be applied to noisy generalized channels. As a result, an improved overall compression ratio may be achieved.</p>
<p id="p-0043" num="0042">Turning now to <figref idref="DRAWINGS">FIG. 4</figref>, one embodiment for selecting a version of compressed media content and providing the selected version to rendering hardware is shown. While the blocks are shown in a particular order for ease of understanding, other orders may be used. In some embodiments, the method of <figref idref="DRAWINGS">FIG. 4</figref> may include additional (or fewer) blocks than shown. Blocks <b>400</b>-<b>420</b> may be performed automatically or may receive user input.</p>
<p id="p-0044" num="0043">At <b>400</b>, a data structure may be received, for example, at a computing device, that may include a plurality of different block truncation encoded versions of image content. In one embodiment, a media content delivery protocol (e.g., media player) on a computing device may receive the data structure with the multiple BTC versions. The data structure may be received, in one embodiment, at run time. The media player may reside on a computing device, and may utilize a scripting engine. The computing device may include multiple processors. For example, the multiple processors may include one or more CPUs and one or more GPUs. The plurality of different BTC versions may include DXT1, ETC1, PVRTC-I, PVRTC-II, among other BTC versions. The received data structure may be in the ATF format, shown above.</p>
<p id="p-0045" num="0044">As indicated at <b>410</b>, which of the plurality of block truncation encoded versions is compatible with rendering hardware (e.g., GPU) may be determined. A GPU of the computing device may include the capability to encode and decode a certain type of BTC format. In one embodiment, the media player may detect, at run time, which BTC format is compatible with the available GPU on the computing device. For example, the media player may detect that the GPU is compatible with ETC texture compression. Accordingly, the media player may determine that the ETC encoded content is the appropriate format for the rendering hardware of the computing device. In one embodiment, a media player may detect rendering hardware before run time (e.g., at power up, at period intervals, etc.) such that by the time the data structure is received at <b>400</b>, the media player already knows which format is compatible with the rendering hardware. In such a case, when the data structure is received by the media player, the media player may not need to determine which BTC format is hardware compatible but, instead, may provide the compatible BTC content directly to the rendering hardware, as in block <b>320</b>. In one embodiment, the decompressor's front-end may receive the data structure and select the hardware appropriate format. The overall data structure may include formatting and/or headers that may be parsed so that the appropriate format may be selected and provided to the rendering hardware for decoding. In one embodiment, multiple GPUs may exist on a computing device, each of which may be compatible with various BTC formats. The player may prioritize based on computing device and/or user preferences to determine which format to select. In one embodiment, each compatible format may be selected and, at <b>420</b>, provided to the appropriate hardware capable of decoding the data.</p>
<p id="p-0046" num="0045">As illustrated at <b>420</b>, the determined compatible block truncation encoded version may be provided to rendering hardware. In one embodiment, the determined/selected BTC content may be directly uploaded to memory of the graphics hardware, such as a GPU, and may be decoded by the GPU. Thus, if the GPU is ETC format compatible, then the ETC encoded content may be passed from the media player to the GPU for rendering the image content.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 5</figref> illustrates another embodiment for selecting a format of compressed media content and providing the selected format to rendering hardware. While the blocks are shown in a particular order for ease of understanding, other orders may be used. In some embodiments, the method of <figref idref="DRAWINGS">FIG. 5</figref> may include additional (or fewer) blocks than shown. Blocks <b>500</b>-<b>530</b> may be performed automatically or may receive user input.</p>
<p id="p-0048" num="0047">As shown at <b>500</b>, a data structure may be received, for example, at a computing device, that may include a plurality of double compressed versions of image content. In one embodiment, a double compressed version may include image content first encoded with a block truncation encoding scheme, and encoded a second time with a compression algorithm that is not a block truncation encoding scheme. As in block <b>400</b>, a media content delivery protocol (e.g., media player) on a computing device may receive the data structure with the multiple BTC versions. In one embodiment, the received BTC versions may be further encoded. Each version may be further encoded with an overall compression algorithm (e.g., LXMA, Huffman, etc.), or may be further encoded by channel such that multiple additional compression algorithms may be used. For instance, color channels may be further compressed using JPEG, JPEG-XR, PNG, or other comparable schemes while selector channels may be compressed using an all purpose compression algorithm, such as LZ77/Huffman, LZMA, or other comparable algorithms. Thus, the received data structure may, in one embodiment, include multiple BTC versions with each BTC version including additional compression, which may be a different additional compression for different portions of the BTC content.</p>
<p id="p-0049" num="0048">At <b>510</b>, which of the plurality of double compressed versions is compressed with a BTC scheme compatible with rendering hardware may be determined. Block <b>510</b> may operate in the same or substantially the same manner as blocks <b>410</b> of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0050" num="0049">At <b>520</b>, the additional layer of compression (the non-block truncation coding compression) of the determined double compressed version may be decoded. In various embodiments, the selected data structure may include an additional layer of encoding other than the BTC encoding. For example, the stream may be further compressed using an algorithm, such as LZMA, or multiple algorithms. In one embodiment, the additional compression may be decompressed before the BTC content is provided to the rendering hardware at <b>530</b>. For example, the CPU may decode any LZMA and/or JPEG-XR compression, for example, and provide the BTC encoded media to the GPU. In other words, the decoding may be performed in the opposite order in which the media content was encoded. Thus, the last levels of compression may be decoded first, and followed sequentially until reaching the initial compression. In some embodiments, various levels of compression may be decoded at the CPU and/or GPU. In one embodiment, only the selected BTC version may have its additional compression decompressed such that resources may not be used on BTC versions that may not be compatible with the rendering hardware of a computing device. In some embodiments, the BTC encoded format may include de-interleaved words, which may have been de-interleaved to optimize compression (e.g., JPEG-XR for color channels, and LZMA for selector channels). In such embodiments, before providing the BTC encoded content to the GPU at <b>530</b>, the words may be re-interleaved.</p>
<p id="p-0051" num="0050">As illustrated at <b>530</b>, the determined compatible block truncation encoded version, which may have had additional compression decompressed at <b>520</b>, may be provided to rendering hardware of the computing device. In one embodiment, the determined/selected BTC content may be directly uploaded to memory of the graphics hardware, such as a GPU, and may be decoded by the GPU. Thus, if the GPU is ETC format compatible, then the ETC encoded content may be provided from the media player to the GPU for rendering the image content.</p>
<p id="p-0052" num="0051">Returning to the ATF format detailed above, consider a media player running on a system that supports ETC1. The decompressor's front-end may receive data in the example ATF format above. A software client may parse the header of the formatted data and select the appropriate format for the system's hardware. In the above example, the software client may skip over the DXT1 and PVRTC data and detect the proper compressed texture type, ETC1. The software client may decode/decompress the ETC1 data. Next, the software client may interleave the ETC1 data such that the resulting interleaved ETC1 data may be fully compatible with any hardware requirements. The interleaved ETC1 data may be passed directly to the GPU where the GPU may render the image data. For example, the GPU may render texture as part of a 3D scene.</p>
<p id="p-0053" num="0052">By receiving multiple BTC formats of media content in a single stream, recompressing textures on the client, which may be lead to run time delays (and additional run time memory requirements), may be avoided. As a result, quality and performance of the rendering may be improved. Further, including the capability to select an appropriate format from multiple formats may further result in quality and performance gains by not requiring unusable formats to be decompressed as well.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 6</figref><i>a </i>illustrates an example of encoding a RAW format input texture, according to some embodiments. As shown, the input RAW texture is a texture of a brick wall. The input texture may be provided to multiple encoders. In the example shown, the input texture is provided to a DXT1 encoder, ETC1 encoder, PVRTC encoder, and to another BTC encoder. Each of the four BTC encoded versions of the input texture may then be further compressed. As shown, each version is compressed using a lossless encoder. The resulting four versions are shown combined together as a single file for storage/loading/transmission, or ATF file.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 6</figref><i>b </i>illustrates further detail of encoding the input texture. As shown, the input texture has been encoded from RAW to PVRCT using a fixed size such that every 4&#xd7;4 block is encoded as 32 bits. After encoding the texture into PVRCT, the PVRCT-encoded content is shown split into constituent parts, an image part and residual part. The image part and residual part may correspond to the color channels and selector channel, described above. As shown, the image part may be compressed with an algorithm. The algorithm in <figref idref="DRAWINGS">FIG. 4</figref><i>b </i>is a lossless algorithm, JPEG-XR, but other lossy or lossless algorithms may be used. The residual part is shown being compressed with a lossless algorithm, LZMA, however, other comparable algorithms may be used. Following the additional compression, the compressed image part and compressed residual part may be combined together into a single file. As shown in <figref idref="DRAWINGS">FIG. 4</figref><i>a</i>, the various BTC versions, which may be further compressed as described in <figref idref="DRAWINGS">FIG. 4</figref><i>b</i>, may be combined together into a single data stream, as an ATF file.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 6</figref><i>c </i>illustrates an example of selecting a version of compressed image content and providing the selected format to rendering hardware, according to some embodiments. As shown, an ATF file may be received. A BTC encoded version may be selected based on runtime detected hardware. In the example illustrated, the detected hardware is compatible with the PVRTC format. In other embodiments, hardware compatibility may be determined before runtime. Following the next arrow in the figure, the PVRTC data may be decoded using a lossless decoder. The lossless decoder may correspond to the lossless compression algorithm used in the encoding process. As applied to the content encoded in <figref idref="DRAWINGS">FIG. 4</figref><i>b</i>, the PVRTC lossless decoder may apply the respective decoding technique, JPEG-XR, and LZMA to the corresponding parts of the PVRTC format. The image part, which may include two color channels, and the residual part, may then be re-interleaved together into words. The re-interleaved PVRTC format may be uploaded to the GPU where the GPU may decode the PVRTC format. As shown, the GPU may render the texture as part of a 3D scene. Here, the GPU applies the brick texture to a 3D scene of a wall.</p>
<p id="h-0005" num="0000">Example Implementations</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a server <b>700</b> that may implement one or more of the encoding and combining techniques illustrated in <figref idref="DRAWINGS">FIGS. 1-3</figref> and a client <b>740</b> that may implement one or more of the receiving, determining, and providing techniques of <figref idref="DRAWINGS">FIGS. 4-5</figref>. Server <b>700</b> may include a plurality of block truncation encoders <b>710</b><i>a</i>-<b>710</b><i>c</i>, that may collectively be known as a library. In the illustrated embodiment, server <b>700</b> includes three block truncation encoders <b>710</b>. Server <b>700</b> may further include one or more non-block truncation encoders <b>720</b>. Non-block truncation encoders <b>720</b> are non-block truncation encoders in the sense that they implement an encoder that does not use a BTC scheme. For example, non-block truncation encoders <b>720</b> may implement one or more of JPEG-XR, JPEG, PNG, LZMA, or Huffman schemes, among others. Server <b>700</b> may receive, as input, image data <b>705</b>. Image data <b>705</b> may, in various embodiments, be encoded with a plurality of block truncation encoders <b>710</b> and may be further encoded with one or more non-block truncation encoders <b>720</b>. The encoded image data <b>705</b> may be combined to form single data structure <b>725</b>, which may be provided over a network to client <b>740</b> and/or stored to storage medium <b>730</b>, such as system memory, a disk drive, DVD, CD, etc.</p>
<p id="p-0058" num="0057">Client <b>740</b> may include one or more processors, such as CPU <b>750</b> and GPU <b>780</b>. CPU <b>750</b> may include a media player <b>760</b>, which may receive single data structure <b>725</b>, and non-block truncation decoder <b>770</b>. Media player <b>760</b> may determine a BTC version compatible with GPU <b>780</b> and may provide the BTC version to non-block truncation decoder <b>770</b>, if additional compression is to be removed. CPU <b>770</b> may provide the resulting decompressed, still BTC encoded content to GPU <b>780</b>, for storage to GPU memory. GPU <b>780</b> may include block truncation decoder <b>790</b>, which may decode the GPU-received BTC content for rendering at a display.</p>
<p id="h-0006" num="0000">Example System</p>
<p id="p-0059" num="0058">Embodiments of the client and server and/or the various encoding, combining, selecting, and determining techniques as described herein may be executed on one or more computer systems, which may interact with various other devices. One such computer system is illustrated by <figref idref="DRAWINGS">FIG. 8</figref>. In different embodiments, computer system <b>800</b> may be any of various types of devices, including, but not limited to, a personal computer system, desktop computer, laptop, notebook, or netbook computer, mainframe computer system, handheld computer, workstation, network computer, a camera, a set top box, a mobile device, a consumer device, video game console, handheld video game device, application server, storage device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device.</p>
<p id="p-0060" num="0059">In the illustrated embodiment, computer system <b>800</b> includes one or more processors <b>810</b> coupled to a system memory <b>820</b> via an input/output (I/O) interface <b>830</b>. Computer system <b>800</b> further includes a network interface <b>840</b> coupled to I/O interface <b>830</b>, and one or more input/output devices <b>850</b>, such as cursor control device <b>860</b>, keyboard <b>870</b>, and display(s) <b>880</b>. In some embodiments, it is contemplated that embodiments may be implemented using a single instance of computer system <b>800</b>, while in other embodiments multiple such systems, or multiple nodes making up computer system <b>800</b>, may be configured to host different portions or instances of embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system <b>800</b> that are distinct from those nodes implementing other elements.</p>
<p id="p-0061" num="0060">In various embodiments, computer system <b>800</b> may be a uniprocessor system including one processor <b>810</b>, or a multiprocessor system including several processors <b>810</b> (e.g., two, four, eight, or another suitable number). Processors <b>810</b> may be any suitable processor capable of executing instructions. For example, in various embodiments, processors <b>810</b> may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors <b>810</b> may commonly, but not necessarily, implement the same ISA.</p>
<p id="p-0062" num="0061">In some embodiments, at least one processor <b>810</b> may be a GPU. A GPU may be considered a dedicated graphics-rendering device for a personal computer, workstation, game console or other computing or electronic device. Modern GPUs may be very efficient at manipulating and displaying computer graphics, and their highly parallel structure may make them more effective than typical CPUs for a range of complex graphical algorithms. For example, a graphics processor may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit (CPU). In various embodiments, the image processing methods disclosed herein may, at least in part, be implemented by program instructions configured for execution on one of, or parallel execution on two or more of, such GPUs. The GPU(s) may implement one or more APIs that permit programmers to invoke the functionality of the GPU(s). Suitable GPUs may be commercially available from vendors such as NVIDIA Corporation, ATI Technologies (AMD), and others.</p>
<p id="p-0063" num="0062">GPUs, such as one or more of processors <b>810</b> may be implemented in a number of different physical forms. For example, GPUs may take the form of a dedicated graphics card, an integrated graphics solution and/or a hybrid solution. The dedicated graphics card may be a 3D graphics card. GPU <b>810</b> may interface with the motherboard by means of an expansion slot such as PCI Express Graphics or Accelerated Graphics Port (AGP) and thus may be replaced or upgraded with relative ease, assuming the motherboard is capable of supporting the upgrade. However, a dedicated GPU is not necessarily removable, nor does it necessarily interface the motherboard in a standard fashion. The term &#x201c;dedicated&#x201d; refers to the fact that hardware graphics solution may have RAM that is dedicated for graphics use, not to whether the graphics solution is removable or replaceable. Dedicated GPUs for portable computers may be interfaced through a non-standard and often proprietary slot due to size and weight constraints. Such ports may still be considered AGP or PCI express, even if they are not physically interchangeable with their counterparts.</p>
<p id="p-0064" num="0063">Integrated graphics solutions, or shared graphics solutions are graphics processors that utilize a portion of a computer's system RAM rather than dedicated graphics memory. For instance, modern desktop motherboards normally include an integrated graphics solution and have expansion slots available to add a dedicated graphics card later. As a GPU may be extremely memory intensive, an integrated solution finds itself competing for the already slow system RAM with the CPU as the integrated solution has no dedicated video memory. For instance, system RAM may experience a bandwidth between 2 GB/s and 8 GB/s, while most dedicated GPUs enjoy from 15 GB/s to 30 GB/s of bandwidth. Hybrid solutions may also share memory with the system memory, but may have a smaller amount of memory on-board than discrete or dedicated graphics cards to make up for the high latency of system RAM. Data communicated between the graphics processing unit <b>810</b> and the rest of the computer system <b>800</b> may travel through a graphics card slot or other interface, such, as I/O interface <b>830</b> of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0065" num="0064">Note that program instructions <b>825</b> may be configured to implement a graphics application as a stand-alone application, or as a module of another graphics application or graphics library, in various embodiments. For example, in one embodiment program instructions <b>825</b> may be configured to implement graphics applications such as painting, editing, publishing, photography, games, animation, and/or other applications, and may be configured to provide the functionality described herein. In another embodiment, program instructions <b>825</b> may be configured to implement the techniques described herein in one or more functions or modules called by another graphics application executed on GPU <b>810</b> and/or processor(s) <b>810</b>. These modules may be executable on one or more of CPUs <b>810</b> and/or GPUs <b>810</b> to cause computer system <b>800</b> to provide the functionality described herein. The graphics application may be implemented in various embodiments using any desired programming language, scripting language, or combination of programming languages and/or scripting languages, e.g., C, C++, C#, Java&#x2122;, Perl, etc. For example, in one embodiment, the graphics application may be JAVA based, while in another embodiments, it may be implemented using the C or C++ programming languages. In other embodiments, the graphics application may be implemented using specific graphic languages specifically for developing programs executed by specialized graphics hardware, such as a GPU. In addition, the graphics application may be embodied on memory specifically allocated for use by graphics processor(s), such as memory on a graphics board including graphics processor(s). Program instructions <b>825</b> may also be configured to render images and present them on one or more displays as the output of an operation and/or to store image data in memory <b>820</b> and/or an external storage device(s), in various embodiments.</p>
<p id="p-0066" num="0065">System memory <b>820</b> may be configured to store program instructions and/or data accessible by processor <b>810</b>. In various embodiments, system memory <b>820</b> may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing desired functions, such as those described above for embodiments of an encoding module, a combining module, a selecting module and a decoding module are shown stored within system memory <b>820</b> as program instructions <b>825</b> and data storage <b>835</b>, respectively. In other embodiments, program instructions and/or data may be received, sent or stored upon different types of computer-accessible media or on similar media separate from system memory <b>820</b> or computer system <b>800</b>. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD/DVD-ROM coupled to computer system <b>800</b> via I/O interface <b>830</b>. Program instructions and data stored via a computer-accessible medium may be transmitted by transmission media or signals such as electrical, electromagnetic, or digital signals, which may be conveyed via a communication medium such as a network and/or a wireless link, such as may be implemented via network interface <b>840</b>.</p>
<p id="p-0067" num="0066">In one embodiment, I/O interface <b>830</b> may be configured to coordinate I/O traffic between processor <b>810</b>, system memory <b>820</b>, and any peripheral devices in the device, including network interface <b>840</b> or other peripheral interfaces, such as input/output devices <b>850</b>. In some embodiments, I/O interface <b>830</b> may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory <b>820</b>) into a format suitable for use by another component (e.g., processor <b>810</b>). In some embodiments, I/O interface <b>830</b> may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I/O interface <b>830</b> may be split into two or more separate components, such as a north bridge and a south bridge, for example. In addition, in some embodiments some or all of the functionality of I/O interface <b>830</b>, such as an interface to system memory <b>820</b>, may be incorporated directly into processor <b>810</b>.</p>
<p id="p-0068" num="0067">Network interface <b>840</b> may be configured to allow data to be exchanged between computer system <b>800</b> and other devices attached to a network, such as other computer systems, or between nodes of computer system <b>800</b>. In various embodiments, network interface <b>840</b> may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and/or protocol.</p>
<p id="p-0069" num="0068">Input/output devices <b>850</b> may, in some embodiments, include one or more display terminals, keyboards, keypads, touchpads, scanning devices, voice or optical recognition devices, or any other devices suitable for entering or retrieving data by one or more computer system <b>800</b>. Multiple input/output devices <b>850</b> may be present in computer system <b>800</b> or may be distributed on various nodes of computer system <b>800</b>. In some embodiments, similar input/output devices may be separate from computer system <b>800</b> and may interact with one or more nodes of computer system <b>800</b> through a wired or wireless connection, such as over network interface <b>840</b>.</p>
<p id="p-0070" num="0069">As shown in <figref idref="DRAWINGS">FIG. 8</figref>, memory <b>820</b> may include program instructions <b>825</b>, configured to implement embodiments of an encoding module, a combining module, a selecting module, and a determining module as described herein, and data storage <b>835</b>, comprising various data accessible by program instructions <b>825</b>. In one embodiment, program instructions <b>825</b> may include software elements of embodiments of encoding, combining, selecting, and/or determining modules as illustrated in the above Figures. Data storage <b>835</b> may include data that may be used in embodiments. In other embodiments, other or different software elements and data may be included.</p>
<p id="p-0071" num="0070">Those skilled in the art will appreciate that computer system <b>800</b> is merely illustrative and is not intended to limit the scope of encoding, combining, selecting, and/or determining modules, as described herein. In particular, the computer system and devices may include any combination of hardware or software that can perform the indicated functions, including a computer, personal computer system, desktop computer, laptop, notebook, or netbook computer, mainframe computer system, handheld computer, workstation, network computer, a camera, a set top box, a mobile device, network device, internet appliance, PDA, wireless phones, pagers, a consumer device, video game console, handheld video game device, application server, storage device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device. Computer system <b>800</b> may also be connected to other devices that are not illustrated, or instead may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided and/or other additional functionality may be available.</p>
<p id="p-0072" num="0071">Those skilled in the art will also appreciate that, while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system <b>800</b> may be transmitted to computer system <b>800</b> via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and/or a wireless link. Various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Accordingly, the present disclosure may be practiced with other computer system configurations.</p>
<heading id="h-0007" level="1">CONCLUSION</heading>
<p id="p-0073" num="0072">Various embodiments may further include receiving, sending or storing instructions and/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or DVD/CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR, RDRAM, SRAM, etc.), ROM, etc., as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and/or a wireless link.</p>
<p id="p-0074" num="0073">The various methods as illustrated in the Figures and described herein represent example embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.</p>
<p id="p-0075" num="0074">Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the disclosure embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>receiving image content;</claim-text>
<claim-text>encoding the image content into block truncation encoded versions, the encoding including using a different block truncation coding scheme for each of the block truncation encoded versions;</claim-text>
<claim-text>compressing each of the block truncation encoded versions with a compression algorithm different from the block truncation coding schemes; and</claim-text>
<claim-text>combining the block truncation encoded versions of the image content into a single data structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the block truncation encoded versions of the image content include at least an ETC1 encoded version, a PVRTC encoded version, and a DXT1 encoded version.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the block truncation encoded versions are said compressed before said combining the block truncation encoded versions of the image content into the single data structure.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said compressing one of the block truncation encoded versions of the image content comprises:
<claim-text>separating the block truncation encoded version into constituent components;</claim-text>
<claim-text>encoding one type of the constituent components with a first compression algorithm; and</claim-text>
<claim-text>encoding another type of the constituent components with a second compression algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the constituent components of the block truncation encoded version of the image content include two color components and a selector/modifier component interleaved into words, and wherein said separating the block truncation encoded version includes de-interleaving the words.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein said encoding the one type of the constituent components with the first compression algorithm includes compressing two color image components with a color compression scheme, wherein the color compression scheme includes at least one of JPEG, PNG, or JPEG-XR.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A non-transitory computer-readable storage medium storing program instructions, wherein the program instructions are computer-executable to implement:
<claim-text>receiving image content;</claim-text>
<claim-text>compressing the image content into a plurality of block truncation encoded content versions, wherein said compressing includes using a different block truncation coding scheme for each of the plurality of block truncation encoded content versions;</claim-text>
<claim-text>compressing each of the block truncation encoded content versions with a compression algorithm different from the block truncation coding schemes; and</claim-text>
<claim-text>combining the plurality of block truncation encoded content versions of the image content into a single data structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the wherein the plurality of block truncation encoded content versions includes at least an ETC1 encoded version, a PVRTC encoded version, and a DXT1 encoded version.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the program instructions are further computer-executable to implement said compressing each of the block truncation encoded content versions before said combining the plurality of block truncation encoded content versions of the image content into the single data structure.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein further compressing one of the block truncation encoded content versions comprises:
<claim-text>separating the block truncation encoded content version into constituent components;</claim-text>
<claim-text>encoding one type of the constituent components with a first compression algorithm; and</claim-text>
<claim-text>encoding another type of the constituent components with a second compression algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the constituent components of the block truncation encoded content version include two color components and a selector/modifier component interleaved into words, and wherein said separating the block truncation encoded content version includes de-interleaving the words.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said encoding the one type of the constituent components with the first compression algorithm includes compressing two color image components with a color compression scheme, wherein the color compression scheme includes at least one of JPEG, PNG, or JPEG-XR.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computing device, comprising:
<claim-text>a memory device configured to maintain image content;</claim-text>
<claim-text>a processing system to implement one or more encoding modules that are configured to:</claim-text>
<claim-text>encode the image content into block truncation encoded versions of the image content using a different block truncation coding scheme for each of the block truncation encoded versions of the image content;</claim-text>
<claim-text>compress each of the block truncation encoded versions of the image content with one or more compression algorithms that are different than the block truncation coding schemes; and</claim-text>
<claim-text>combine the block truncation encoded versions of the image content into a single data structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computing device as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the one or more encoding modules are configured to encode the image content as:
<claim-text>an Ericsson Texture Compression (ETC1) encoded version;</claim-text>
<claim-text>a PowerVR Texture Compression (PVRTC) encoded version; and</claim-text>
<claim-text>an S3 Texture Compression (DXT1) encoded version.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computing device as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the one or more encoding modules are configured to compress each of the block truncation encoded versions of the image content before the block truncation encoded versions are combined into the single data structure.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computing device as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein, to compress one of the block truncation encoded versions of the image content, an encoding module is configured to:
<claim-text>separate the block truncation encoded version of the image content into constituent components;</claim-text>
<claim-text>encode one type of the constituent components with a first compression algorithm; and</claim-text>
<claim-text>encode another type of the constituent components with a second compression algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computing device as recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the constituent components of the block truncation encoded version of the image content include two color components and a selector/modifier component.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computing device as recited in <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the first compression algorithm includes a color compression scheme, and the encoding module is configured to compress the two color components as one of JPEG, PNG, or JPEG-XR.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computing device as recited in <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the second compression algorithm is a lossless compression algorithm, and the encoding module is configured to compress the selector/modifier component as LZMA. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627147-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627147</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13109948</doc-number>
<date>20110517</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>282</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714 37</main-classification>
<further-classification>702183</further-classification>
</classification-national>
<invention-title id="d2e53">Method and computer program product for system tuning based on performance measurements and historical problem data and system thereof</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6604211</doc-number>
<kind>B1</kind>
<name>Heiman et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7089456</doc-number>
<kind>B2</kind>
<name>Gender</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7228458</doc-number>
<kind>B1</kind>
<name>Kesavan</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7350113</doc-number>
<kind>B2</kind>
<name>Kearney et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7774657</doc-number>
<kind>B1</kind>
<name>Hardman</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7890810</doc-number>
<kind>B1</kind>
<name>Coatney et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0117237</doc-number>
<kind>A1</kind>
<name>Weller</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0162894</doc-number>
<kind>A1</kind>
<name>Noller et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0174917</doc-number>
<kind>A1</kind>
<name>Guruswamy</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0256517</doc-number>
<kind>A1</kind>
<name>Atkin et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714 37</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 40</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 41</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714 471</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702117</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702118</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702121</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>702183-185</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120297251</doc-number>
<kind>A1</kind>
<date>20121122</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Masser</last-name>
<first-name>Joel L.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Reed</last-name>
<first-name>David C.</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Smith</last-name>
<first-name>Max D.</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Masser</last-name>
<first-name>Joel L.</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Reed</last-name>
<first-name>David C.</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Smith</last-name>
<first-name>Max D.</first-name>
<address>
<city>Tucson</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Zilka-Kotab, PC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Baderman</last-name>
<first-name>Scott</first-name>
<department>2114</department>
</primary-examiner>
<assistant-examiner>
<last-name>Kudirka</last-name>
<first-name>Joseph</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">According to one embodiment, a test system includes a data collection module adapted for collecting data from a test system, a storage module adapted for storing the collected data in an organized format, the data including problem data, associated configuration information, associated performance information, and activity data, an analysis module adapted for analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems, and an adjustment module adapted for adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="162.64mm" wi="152.48mm" file="US08627147-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="172.30mm" wi="194.39mm" file="US08627147-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="140.04mm" wi="183.22mm" file="US08627147-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="174.58mm" wi="164.42mm" file="US08627147-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present invention relates to improving the testing of systems, and more particularly, to using configuration information, performance measurements, and historical problem data to tune systems to improve test effectiveness.</p>
<p id="p-0003" num="0002">Organizations that participate in system testing and software testing are interested in running their test systems in ways that uncover/discover problems, especially problems that are disruptive to the system and/or software. Through experience, testers learn how to tune their systems and workloads to bring out problems. However, this is an intuitive, trial-and-error, subjective, and labor-intensive process. Further, the amount of information available for making tuning decisions is beyond any human's or collection of humans' ability to process. In addition, hardware and software used in the test system change often, requiring a relearning process as to how to stress and overload the test system.</p>
<p id="p-0004" num="0003">Current methods of tuning systems exclusively use performance measurements to determine how to tune the system to avoid problems. This tends to make it difficult or impossible to replicate observed problems, and therefore testers are not capable of fully realizing what is causing problems.</p>
<p id="p-0005" num="0004">According to one embodiment, a test system includes a data collection module adapted for collecting data from a test system, a storage module adapted for storing the collected data in an organized format, the data including problem data, associated configuration information, associated performance information, and activity data, an analysis module adapted for analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems, and an adjustment module adapted for adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes, wherein the problem data includes symptoms and/or markers of the problem.</p>
<p id="p-0006" num="0005">In another embodiment, a method for tuning a system includes collecting data from a test system, the data including problem data, associated configuration information, associated performance information, and activity data, storing the collected data in an organized format, analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems, and adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes.</p>
<p id="p-0007" num="0006">In yet another embodiment, a computer program product for tuning a system includes a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes computer readable program code configured to: collect data from a test system, the data including problem data, associated configuration information, associated performance information, and activity data; store the collected data in a database; analyze the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems; and adjust available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes by adjusting the available resources and/or the workload of the test system includes at least one of: starting or stopping one or more jobs including a thrasher that consumes resources and/or causes timing variations, starting or stopping one or more transactions, starting or stopping one or more tasks, varying an available number of central processing units (CPUs), varying an available amount of memory, and bringing online or taking offline one or more input/output (I/O) devices. The associated configuration information includes at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types, the problem data includes symptoms and/or markers of the problem, the associated performance information includes at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information, and the activity data includes at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</p>
<p id="p-0008" num="0007">Other aspects and embodiments of the present invention will become apparent from the following detailed description, which, when taken in conjunction with the drawings, illustrates by way of example the principles of the invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network architecture, in accordance with one embodiment.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 2</figref> shows a representative hardware environment that may be associated with the servers and/or clients of <figref idref="DRAWINGS">FIG. 1</figref>, in accordance with one embodiment.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a flowchart of a method, according to one embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0003" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">The following description is made for the purpose of illustrating the general principles of the present invention and is not meant to limit the inventive concepts claimed herein. Further, particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations.</p>
<p id="p-0013" num="0012">Unless otherwise specifically defined herein, all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and/or as defined in dictionaries, treatises, etc.</p>
<p id="p-0014" num="0013">It must also be noted that, as used in the specification and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include plural referents unless otherwise specified. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0015" num="0014">The following description discloses a systematic approach that utilizes a test system's own computational power to be able to quickly tune the test system such that it can reproduce and/or uncover/discover problems that occur during use of the test system or to replicate problems that occurred during use of some other system. A new dimension of gathering and analyzing historical problem occurrence data is presented that spans multiple system components. At run time, current configuration and activity data may be compared to the historical data in order to determine appropriate tuning actions. Another new dimension is found in the tuning actions provided, going beyond simply starting jobs, transactions, or thrashers as is currently employed, with the capability to modify the system configuration. In addition, embodiments include the ability to cycle automatically through different parameter combinations, effectively varying the testing environment until a problem is encountered. Also, a hostile environment for clients to use during migration testing or when doing test comparisons with hardware from different vendors may be generated, in further embodiments.</p>
<p id="p-0016" num="0015">According to one general embodiment, a test system includes a data collection module adapted for collecting data from a test system, a storage module adapted for storing the collected data in an organized format, the data including problem data, associated configuration information, associated performance information, and activity data, an analysis module adapted for analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems, and an adjustment module adapted for adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes, wherein the problem data includes symptoms and/or markers of the problem.</p>
<p id="p-0017" num="0016">In another general embodiment, a method for tuning a system includes collecting data from a test system, the data including problem data, associated configuration information, associated performance information, and activity data, storing the collected data in an organized format, analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems, and adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes.</p>
<p id="p-0018" num="0017">In yet another general embodiment, a computer program product for tuning a system includes a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes computer readable program code configured to: collect data from a test system, the data including problem data, associated configuration information, associated performance information, and activity data; store the collected data in a database; analyze the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones including a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems; and adjust available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes by adjusting the available resources and/or the workload of the test system includes at least one of: starting or stopping one or more jobs including a thrasher that consumes resources and/or causes timing variations, starting or stopping one or more transactions, starting or stopping one or more tasks, varying an available number of CPUs, varying an available amount of memory, and bringing online or taking offline one or more I/O devices. The associated configuration information includes at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types, the problem data includes symptoms and/or markers of the problem, the associated performance information includes at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information, and the activity data includes at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</p>
<p id="p-0019" num="0018">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as &#x201c;logic&#x201d;, a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0020" num="0019">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0021" num="0020">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0022" num="0021">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0023" num="0022">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0024" num="0023">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0025" num="0024">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0026" num="0025">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network architecture <b>100</b>, in accordance with one embodiment. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, a plurality of remote networks <b>102</b> are provided including a first remote network <b>104</b> and a second remote network <b>106</b>. A gateway <b>101</b> may be coupled between the remote networks <b>102</b> and a proximate network <b>108</b>. In the context of the present network architecture <b>100</b>, the networks <b>104</b>, <b>106</b> may each take any form including, but not limited to, a LAN, a WAN such as the Internet, PSTN, internal telephone network, etc.</p>
<p id="p-0028" num="0027">In use, the gateway <b>101</b> serves as an entrance point from the remote networks <b>102</b> to the proximate network <b>108</b>. As such, the gateway <b>101</b> may function as a router, which is capable of directing a given packet of data that arrives at the gateway <b>101</b>, and a switch, which furnishes the actual path in and out of the gateway <b>101</b> for a given packet.</p>
<p id="p-0029" num="0028">Further included is at least one data server <b>114</b> coupled to the proximate network <b>108</b>, and which is accessible from the remote networks <b>102</b> via the gateway <b>101</b>. It should be noted that the data server(s) <b>114</b> may include any type of computing device/groupware. Coupled to each data server <b>114</b> is a plurality of user devices <b>116</b>. Such user devices <b>116</b> may include a desktop computer, lap-top computer, hand-held computer, printer or any other type of logic. It should be noted that a user device <b>111</b> may also be directly coupled to any of the networks, in one embodiment.</p>
<p id="p-0030" num="0029">A peripheral <b>120</b> or series of peripherals <b>120</b>, e.g., facsimile machines, printers, networked and/or local storage units or systems, etc., may be coupled to one or more of the networks <b>104</b>, <b>106</b>, <b>108</b>. It should be noted that databases and/or additional components may be utilized with, or integrated into, any type of network element coupled to the networks <b>104</b>, <b>106</b>, <b>108</b>. In the context of the present description, a network element may refer to any component of a network.</p>
<p id="p-0031" num="0030">According to some approaches, methods and systems described herein may be implemented with and/or on virtual systems and/or systems which emulate one or more other systems, such as a UNIX system which emulates an IBM z/OS environment, a UNIX system which virtually hosts a MICROSOFT WINDOWS environment, a MICROSOFT WINDOWS system which emulates an IBM z/OS environment, etc. This virtualization and/or emulation may be enhanced through the use of VMWARE software, in some embodiments.</p>
<p id="p-0032" num="0031">In more approaches, one or more networks <b>104</b>, <b>106</b>, <b>108</b>, may represent a cluster of systems commonly referred to as a &#x201c;cloud.&#x201d; In cloud computing, shared resources, such as processing power, peripherals, software, data, servers, etc., are provided to any system in the cloud in an on-demand relationship, thereby allowing access and distribution of services across many computing systems. Cloud computing typically involves an Internet connection between the systems operating in the cloud, but other techniques of connecting the systems may also be used.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 2</figref> shows a representative hardware environment associated with a user device <b>116</b> and/or server <b>114</b> of <figref idref="DRAWINGS">FIG. 1</figref>, in accordance with one embodiment. Such figure illustrates a typical hardware configuration of a workstation having a central processing unit <b>210</b>, such as a microprocessor, and a number of other units interconnected via a system bus <b>212</b>.</p>
<p id="p-0034" num="0033">The workstation shown in <figref idref="DRAWINGS">FIG. 2</figref> includes a Random Access Memory (RAM) <b>214</b>, Read Only Memory (ROM) <b>216</b>, an I/O adapter <b>218</b> for connecting peripheral devices such as disk storage units <b>220</b> to the bus <b>212</b>, a user interface adapter <b>222</b> for connecting a keyboard <b>224</b>, a mouse <b>226</b>, a speaker <b>228</b>, a microphone <b>232</b>, and/or other user interface devices such as a touch screen and a digital camera (not shown) to the bus <b>212</b>, communication adapter <b>234</b> for connecting the workstation to a communication network <b>235</b> (e.g., a data processing network) and a display adapter <b>236</b> for connecting the bus <b>212</b> to a display device <b>238</b>.</p>
<p id="p-0035" num="0034">The workstation may have resident thereon an operating system such as the Microsoft Windows&#xae; Operating System (OS), a MAC OS, a UNIX OS, etc. It will be appreciated that a preferred embodiment may also be implemented on platforms and operating systems other than those mentioned. A preferred embodiment may be written using JAVA, XML, C, and/or C++ language, or other programming languages, along with an object oriented programming methodology. Object oriented programming (OOP), which has become increasingly used to develop complex applications, may be used.</p>
<p id="p-0036" num="0035">In one approach, historical data may be used to change test system attributes in order to make the occurrence of an error event or problem more likely than when historical data is not used. All other system tuning products that use historical data do so to optimize performance of the system and to avoid problem situations; in contrast, according to one embodiment, the tuning system may encourage problem situations by using historical data to determine how to stress the system in order to cause problems, which is the opposite approach to typical tuning systems.</p>
<p id="p-0037" num="0036">Based on tester settings, according to one embodiment, the tuning system is capable of correlating problem occurrences with problem data, system configuration information, performance information, and activity data at a time of the problem to determine activity zones where problems are likely to happen or unlikely to happen in the system. The tuning system is also capable of monitoring system operation to capture effects of system changes, and automatically adjusting workloads and resources to stay in the activity zone where problems are likely to occur. In a more specific embodiment, an environment where a problem has occurred may be replicated in order to facilitate testing a proposed problem fix.</p>
<p id="p-0038" num="0037">According to one embodiment, a test system comprises a data collection module adapted for collecting data from a test system, the data comprising problem data, associated configuration information, associated performance information, and activity data. The test system also includes a storage module adapted for storing the collected data in an organized format, an analysis module adapted for analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data. The at least two activity zones comprise a safe zone where the test system operates normally, and a danger zone where the test system is susceptible to operational problems. The test system also includes an adjustment module adapted for adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes. The problem data comprises symptoms and/or markers of the problem.</p>
<p id="p-0039" num="0038">The modules described herein may be embodied as logic, hardware, or software, according to various embodiments.</p>
<p id="p-0040" num="0039">In one embodiment, the adjustment module may comprise logic adapted for at least one of: starting or stopping one or more jobs, starting or stopping one or more transactions, starting or stopping one or more tasks, varying an available number of CPUs, varying an available amount of memory, and bringing online or taking offline one or more I/O devices, wherein the one or more jobs comprise a thrasher that consumes resources and/or causes timing variations.</p>
<p id="p-0041" num="0040">According to another embodiment, the test system may further comprise logic adapted for collecting additional data from the test system after adjusting the available resources and/or the workload of the test system, wherein the additional data comprises problem data, associated configuration information, associated performance information, and activity data.</p>
<p id="p-0042" num="0041">In yet another embodiment, the test system may further comprise logic adapted for providing a graphical user interface for allowing a tester to set one or more parameters. In a further embodiment, the one or more parameters may comprise at least one of: which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability.</p>
<p id="p-0043" num="0042">According to one approach, the associated configuration information may comprise at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types.</p>
<p id="p-0044" num="0043">In another approach, the associated performance information may comprise at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information.</p>
<p id="p-0045" num="0044">In yet another approach, the activity data may comprise at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</p>
<p id="p-0046" num="0045">In one embodiment, the organized format may comprise a database, a list, a spreadsheet, etc.</p>
<p id="p-0047" num="0046">The collected data that is stored to the organized format comprises a collection of historical data that may be used to tune the test system to increase the likelihood of errors and/or problems being produced during operation of the test system, according to preferred embodiments.</p>
<p id="p-0048" num="0047">In another embodiment, the analysis module may comprise linear regression.</p>
<p id="p-0049" num="0048">Now referring to <figref idref="DRAWINGS">FIG. 3</figref>, a method <b>300</b> for tuning a system is shown according to one embodiment. The method <b>300</b> may be carried out in any desired environment, such as those described in <figref idref="DRAWINGS">FIGS. 1-2</figref>, among others.</p>
<p id="p-0050" num="0049">In operation <b>302</b>, data from a test system is collected, the data comprising problem data, associated configuration information, associated performance information, and activity data.</p>
<p id="p-0051" num="0050">In one approach, the problem data may comprise symptoms and/or markers of the problem. In another approach, the associated configuration information may comprise at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types. According to another approach, the associated performance information may comprise at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information. And, in another approach, the activity data may comprise at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</p>
<p id="p-0052" num="0051">The data may be collected at a customer site or at a local site where the test system is located, e.g., the data may be pushed to the test system or it may be pulled from a customer site system.</p>
<p id="p-0053" num="0052">In operation <b>304</b>, the collected data is stored in an organized format. In some approaches, the organized format may comprise a database, a list, a spreadsheet, or any other organized format as known in the art.</p>
<p id="p-0054" num="0053">In operation <b>306</b>, the collected data is analyzed to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data. The at least two activity zones comprise a safe zone where the test system operates normally, and a danger zone where the test system is susceptible to operational problems.</p>
<p id="p-0055" num="0054">In one approach, analyzing the collected data may comprise linear regression or any other analysis technique as would be known to one of skill in the art.</p>
<p id="p-0056" num="0055">In operation <b>308</b>, available resources and/or workload of the test system are adjusted to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes. In one embodiment, adjusting the available resources and/or the workload of the test system may comprise at least one of starting or stopping one or more jobs, starting or stopping one or more transactions, starting or stopping one or more tasks, varying an available number of CPUs, varying an available amount of memory, and bringing online or taking offline one or more I/O devices.</p>
<p id="p-0057" num="0056">In a further approach, the one or more jobs may comprise a thrasher that consumes resources and/or causes timing variations.</p>
<p id="p-0058" num="0057">In another embodiment, the method <b>300</b> may comprise collecting additional data from the test system after adjusting the available resources and/or the workload of the test system. In one embodiment, the additional data may comprise problem data, associated configuration information, associated performance information, and activity data.</p>
<p id="p-0059" num="0058">According to another approach, the method <b>300</b> may include allowing a tester to set one or more parameters. In a further approach, the tester may be provided with a graphical user interface for allowing the tester to set the one or more parameters. This allows the tester to focus on aspects of the test system, such as a component, application, etc., that is to be tested. For example, if a network part is to be examined, parameters of interest may include Internet statistics, and for a CPU, parameters of interest may include processing, and it might be different for other parts throughout the system.</p>
<p id="p-0060" num="0059">In another example, to change memory, one might take memory out of the system and tell the tester whether it is permitted to take memory offline, or preferentially take up more jobs to soak up memory, etc.</p>
<p id="p-0061" num="0060">In addition, the test system may be variably taken into and out of the danger zone, so some instructions may be supplied by the tester about how the system is to be taken in and out of the danger zone during the course of a test. In another embodiment, a maximum duration may be set for a particular test before trying some other method to produce a problem.</p>
<p id="p-0062" num="0061">In yet another embodiment, the one or more parameters may comprise at least one of which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability.</p>
<p id="p-0063" num="0062">In one approach, the collected data may comprise at least one of: CPU operating information, memory information, direct access storage device (DASD) response time, transaction response time, queuing information, paging information, I/O queuing information, a number of jobs active, transaction rates, service request rates, and application-specific measurements.</p>
<p id="p-0064" num="0063">According to another embodiment, a computer program product for tuning a system comprises a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code comprises computer readable program code configured to: collect data from a test system, the data comprising problem data, associated configuration information, associated performance information, and activity data; store the collected data in a database; analyze the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones comprising a safe zone where the test system operates normally and a danger zone where the test system is susceptible to operational problems; and adjust available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes by adjusting the available resources and/or the workload of the test system comprises at least one of: starting or stopping one or more jobs comprising a thrasher that consumes resources and/or causes timing variations, starting or stopping one or more transactions, starting or stopping one or more tasks, varying an available number of CPUs, varying an available amount of memory, and bringing online or taking offline one or more I/O devices.</p>
<p id="p-0065" num="0064">The associated configuration information comprises at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types, the problem data comprises symptoms and/or markers of the problem, the associated performance information comprises at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information, and the activity data comprises at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</p>
<p id="p-0066" num="0065">In another embodiment, the computer program product further comprises computer readable program code configured to collect additional data from the test system after adjusting the available resources and/or the workload of the test system, the additional data comprising problem data, associated configuration information, associated performance information, and activity data.</p>
<p id="p-0067" num="0066">In yet another embodiment, the computer program product further comprises computer readable program code configured to provide a graphical user interface for allowing a tester to set one or more parameters, wherein the one or more parameters comprise at least one of: which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability (e.g., how often to try a new configuration if no problems are found), among others.</p>
<p id="p-0068" num="0067">At a certain interval, the computer readable program code for adjusting the available resources and/or workload of the test system to cause the test system to operate in the danger zone by adjusting the available resources and/or the workload of the test system may vary the environment until a problem is encountered. For example, if the adjusting code determines that paging should be increased, it has several methods to do this: starting jobs that acquire and cycle through virtual storage, starting jobs that fix numerous pages, varying storage offline, increasing page data set space, etc.</p>
<p id="p-0069" num="0068">In preferred embodiments, a feedback loop may be included in any embodiment described herein such that data can continue to be gathered and analyzed to refine the at least two zones used to tune the test system. This feedback loop may run during system testing, where problems may occur and information and data may be collected, so the test system is monitored and additional data may be collected with new problems that may occur.</p>
<p id="p-0070" num="0069">When attempting to reproduce one problem, some other (novel) problems may occur, and that's a good result because more data about how problems are generated is now generated from the test system.</p>
<p id="p-0071" num="0070">In more embodiments, the analyzer may use standard statistical analysis, such as linear regression, to determine activity levels and performance goals for the components and applications of interest that are predicted to produce a problem with a baseline configuration with user-specified probability of success within a certain period of time. The activity levels may be expressed in terms such as transactions per second per CPU or transactions per second per megabyte of memory. Performance measures may be used as targets without normalization. At first, an amount of data sufficient to produce reliable results may not be available. Over time, as more problem data is accumulated, the predicted activity rates may become more reliable.</p>
<p id="p-0072" num="0071">The adjusting module may monitor the current configuration, performance, and activity, compare the current configuration to the baseline configuration, and make adjustments to the configuration and running workloads to approximate the performance goals and bringing the system load up to the level determined by the analyzing module for producing a problem. Over time, the adjusting module may continue to monitor test system operations and make further adjustments until a problem is encountered.</p>
<p id="p-0073" num="0072">More than just functional testing where if something works or not may be used, but with system testing, a low amount of stress may be placed on the test system, and whether that causes other errors may be observed, such as timing problems, hangs, loops, etc.</p>
<p id="p-0074" num="0073">This type of system testing relates to system performance. It has to do with exercising the test system by utilizing some resources, and seeing if errors can be found that way&#x2014;such as if the system is short of memory, bandwidth in the I/O, etc.</p>
<p id="p-0075" num="0074">These problems may be hard or impossible to reproduce after initial discovery, especially when reported by system users because there may be differences between the test system and the system experiencing problems. In addition, systems change over time, so what may have previously been stressful to the test system may no longer be stressful with new updates.</p>
<p id="p-0076" num="0075">In order to avoid unnecessary and superfluous testing, it is helpful to keep the test system in a zone where it is stressful and problems are more likely to occur. Historical data can aid in this endeavor by allowing past stress levels to be repeated and evolved, while non-stressful situations are avoided since errors likely will not occur there. This is a way to quantify stress levels that affect the system operation, so this is a way to identify the threshold stress levels that will cause errors for system testing.</p>
<p id="p-0077" num="0076">As problems start occurring, system data is gathered about resource availability, use, configuration (memory information, bandwidth information, CPU information, RAM information, etc.) and then the existence of problems is correlated with certain levels of utilization of those resources. Where a problem is encountered, the system is observed and then the level of utilization of the resources is adjusted up to levels that have caused problems in the past.</p>
<p id="p-0078" num="0077">According to several embodiments, the computer program product may be installed on a customer system, or it may be part of a software pipeline to test systems and products, and system interactions with products.</p>
<p id="p-0079" num="0078">After the system information and data is gathered from the customer site, the test system may be reconfigured to mirror the system at the customer site as closely as possible for testing purposes. Then, the test system may be tuned up to the level the customer is utilizing. For example, the number of processors and the levels of utilization may be matched (or activity, which could vary depending on the type of product) for each. Also, the number and rate of transactions is monitored (packets, queries, I/O, etc.) on the system similar to the resources, and this is another characteristic that may be reproduced.</p>
<p id="p-0080" num="0079">In one embodiment, a data gathering module may be distributed to various customer sites that are willing to have it installed for future uses.</p>
<p id="p-0081" num="0080">The data gathering may make use of packaged data, data dumps, sent data in response to a request, received data, etc., as would be understood by one of skill in the art upon reading the present descriptions.</p>
<p id="p-0082" num="0081">The test system may be a multi-purpose system capable of emulating any number of customer configurations and/or systems for application/component testing. In another embodiment, the test system may be dedicated to a single purpose. In various embodiments, the test system may be dedicated or matched to a consumer site, or several sites which are reasonably similar in configuration. In practice, it is more likely that it would be adapted for several configurations. For example, it is often useful to have multiple systems running to reach high enough stress levels, but even so, resources may need to be increased to produce errors.</p>
<p id="p-0083" num="0082">In one embodiment, the baseline configuration may be a representation of a customer system using the test system. Since the test system does not necessarily include all the same components, applications, etc., as the customer system, the test system is adjusted to approximate the customer system, which is called the baseline configuration. This baseline configuration may then be adjusted to produce problems and/or errors.</p>
<p id="p-0084" num="0083">The database, in some approaches, may include a plurality of problems found in testing from which to draw upon while testing. That is a proxy for the knowledge that an experienced tester has in his or her head, e.g., if the minimum number of jobs when a problem occurs is 32, the test system would have no reason to run any less than 32 jobs.</p>
<p id="p-0085" num="0084">While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of an embodiment of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A test system, comprising:
<claim-text>a hardware processor configured to allow functioning of logic and modules;</claim-text>
<claim-text>a data collection module adapted for collecting data from a test system, the data comprising:
<claim-text>problem data, associated configuration information, associated performance information, and activity data;</claim-text>
</claim-text>
<claim-text>a storage module adapted for storing the collected data in an organized format;</claim-text>
<claim-text>an analysis module adapted for analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones comprising:
<claim-text>a safe zone where the test system operates normally, and</claim-text>
<claim-text>a danger zone where the test system is susceptible to operational problems; and</claim-text>
</claim-text>
<claim-text>an adjustment module adapted for adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes,</claim-text>
<claim-text>wherein the problem data comprises symptoms and/or markers of the problem.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the adjustment module comprises logic adapted for at least one of: starting or stopping one or more jobs on the test system, starting or stopping one or more transactions on the test system, starting or stopping one or more tasks on the test system, varying an available number of central processing units (CPUs) available to the test system, varying an available amount of memory available to the test system, and bringing online or taking offline one or more input/output (I/O) devices of the test system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The test system as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the one or more jobs comprise a thrasher that consumes resources and/or causes timing variations.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising logic adapted for collecting additional data from the test system after adjusting the available resources and/or the workload of the test system, wherein the additional data comprises problem data, associated configuration information, associated performance information, and activity data.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising logic adapted for allowing a tester to set one or more parameters, wherein the one or more parameters comprise at least one of: which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the associated configuration information comprises at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the associated performance information comprises at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The test system as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the activity data comprises at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method for tuning a system, the method comprising:
<claim-text>collecting data from a test system, the data comprising:
<claim-text>problem data, associated configuration information, associated performance information, and activity data,</claim-text>
<claim-text>wherein the associated configuration information comprises available information selected from:
<claim-text>a number of central processing units (CPUs) operating;</claim-text>
<claim-text>an amount of available memory;</claim-text>
<claim-text>a number of input/output (I/O) devices connected; and</claim-text>
<claim-text>connected I/O device types,</claim-text>
</claim-text>
<claim-text>wherein the associated performance information comprises available information selected from:
<claim-text>I/O queuing information;</claim-text>
<claim-text>an I/O activity rate;</claim-text>
<claim-text>an I/O response time;</claim-text>
<claim-text>CPU utilization;</claim-text>
<claim-text>memory utilization;</claim-text>
<claim-text>direct access storage device (DASD) response time;</claim-text>
<claim-text>transaction response time; and</claim-text>
<claim-text>paging information;</claim-text>
</claim-text>
</claim-text>
<claim-text>storing the collected data in an organized format;</claim-text>
<claim-text>analyzing the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones comprising:
<claim-text>a safe zone where the test system operates normally, and</claim-text>
<claim-text>a danger zone where the test system is susceptible to operational problems; and</claim-text>
</claim-text>
<claim-text>adjusting available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein adjusting the available resources and/or the workload of the test system comprises two or more of: starting or stopping one or more jobs for each component and/or application of interest on the test system, starting or stopping one or more transactions for each component and/or application of interest on the test system, starting or stopping one or more tasks for each component and/or application of interest on the test system, varying an available number of CPUs, varying an available amount of memory, and bringing online or taking offline one or more I/O devices.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more jobs comprise a thrasher that consumes resources and/or causes timing variations.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising collecting additional data from the test system after adjusting the available resources and/or the workload of the test system, the additional data comprising problem data, associated configuration information, associated performance information, and activity data.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising allowing a tester to set one or more parameters, wherein the one or more parameters comprise at least one of: which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the associated configuration information comprises all of: the number of CPUs operating, the amount of available memory, the number of I/O devices connected, and the connected I/O device types.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the associated performance information comprises all of: the I/O queuing information, the I/O activity rate, the I/O response time, the CPU utilization, the memory utilization, the direct access storage device (DASD) response time, transaction response time, and paging information.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the activity data comprises at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the problem data comprises symptoms and/or markers of the problem.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer program product for tuning a system, the computer program product comprising a computer readable storage medium having computer readable program code embodied therewith, the computer readable program code comprising:
<claim-text>computer readable program code configured to collect data from a test system, the data comprising:
<claim-text>problem data, associated configuration information, associated performance information, and activity data;</claim-text>
</claim-text>
<claim-text>computer readable program code configured to store the collected data in a database;</claim-text>
<claim-text>computer readable program code configured to analyze the collected data to define at least two activity zones by correlating the problem data, the associated configuration information, the associated performance information, and the activity data, the at least two activity zones comprising:
<claim-text>a safe zone where the test system operates normally, and</claim-text>
<claim-text>a danger zone where the test system is susceptible to operational problems; and</claim-text>
</claim-text>
<claim-text>computer readable program code configured to adjust available resources and/or workload of the test system to cause the test system to operate in the danger zone thereby increasing a likelihood of fault occurrence for testing purposes by adjusting the available resources and/or the workload of the test system, the adjusting comprising starting or stopping a thrasher that consumes resources and at least one of: starting or stopping one or more jobs for each component and/or application of interest on the test system, starting or stopping one or more transactions for each component and/or application of interest on the test system, starting or stopping one or more tasks for each component and/or application of interest on the test system, varying an available number of central processing units (CPUs) available to the test system, varying an available amount of memory available to the test system, and bringing online or taking offline one or more input/output (I/O) devices,</claim-text>
<claim-text>wherein the associated configuration information comprises at least one of: a number of CPUs operating, an amount of available memory, a number of I/O devices connected, and connected I/O device types,</claim-text>
<claim-text>wherein the problem data comprises symptoms and/or markers of the problem,</claim-text>
<claim-text>wherein the associated performance information comprises at least one of: I/O queuing information, an I/O activity rate, an I/O response time, CPU utilization, memory utilization, direct access storage device (DASD) response time, transaction response time, and paging information, and</claim-text>
<claim-text>wherein the activity data comprises at least one of: a number of active transactions for each component and/or application of interest, a number of queued transactions for each component and/or application of interest, a number of jobs for each component and/or application of interest, and a number of tasks for each component and/or application of interest.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising computer readable program code configured to collect additional data from the test system after adjusting the available resources and/or the workload of the test system, the additional data comprising problem data, associated configuration information, associated performance information, and activity data.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, further comprising computer readable program code configured to provide a graphical user interface for allowing a tester to set one or more parameters, the one or more parameters comprising at least: which resources to adjust, which performance statistics to use, how to weight the performance statistics, a preference for whether resources or workload are adjusted, a desired problem occurrence probability, which configuration information to use, a new configuration frequency, and a desired variability.</claim-text>
</claim>
</claims>
</us-patent-grant>

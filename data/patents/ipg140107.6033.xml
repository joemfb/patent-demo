<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627156-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627156</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12912042</doc-number>
<date>20101026</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>546</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714707</main-classification>
</classification-national>
<invention-title id="d2e53">Method and system of testing bit error rate using signal with mixture of scrambled and unscrambled bits</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5022051</doc-number>
<kind>A</kind>
<name>Crandall et al.</name>
<date>19910600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375292</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5438621</doc-number>
<kind>A</kind>
<name>Hornak et al.</name>
<date>19950800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380 43</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5459731</doc-number>
<kind>A</kind>
<name>Brief et al.</name>
<date>19951000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5497377</doc-number>
<kind>A</kind>
<name>Muto et al.</name>
<date>19960300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714715</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5623497</doc-number>
<kind>A</kind>
<name>Shimawaki et al.</name>
<date>19970400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6069876</doc-number>
<kind>A</kind>
<name>Lander et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370249</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6268808</doc-number>
<kind>B1</kind>
<name>Iryami et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 51</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6628621</doc-number>
<kind>B1</kind>
<name>Plankenhorn et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370249</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6662332</doc-number>
<kind>B1</kind>
<name>Kimmitt</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714762</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7386767</doc-number>
<kind>B1</kind>
<name>Xue et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7564798</doc-number>
<kind>B2</kind>
<name>Haber</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370252</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7571360</doc-number>
<kind>B1</kind>
<name>Lewicki et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7617424</doc-number>
<kind>B2</kind>
<name>Frodsham et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7761764</doc-number>
<kind>B2</kind>
<name>Hurley</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714740</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7969163</doc-number>
<kind>B2</kind>
<name>Fishman et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>324617</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7979756</doc-number>
<kind>B2</kind>
<name>Dickens et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714715</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>8065584</doc-number>
<kind>B2</kind>
<name>Coles et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>8195996</doc-number>
<kind>B2</kind>
<name>Frodsham et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714736</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>8228216</doc-number>
<kind>B2</kind>
<name>Motta et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>341 87</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>8228974</doc-number>
<kind>B2</kind>
<name>Poirrier et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2001/0033568</doc-number>
<kind>A1</kind>
<name>Spooner</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370366</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2002/0129307</doc-number>
<kind>A1</kind>
<name>Walker et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714715</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2002/0149812</doc-number>
<kind>A1</kind>
<name>Hong et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>359110</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2002/0150334</doc-number>
<kind>A1</kind>
<name>Richardson et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>385 37</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2002/0176139</doc-number>
<kind>A1</kind>
<name>Slaughter et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>359172</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2003/0005385</doc-number>
<kind>A1</kind>
<name>Stieger</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2003/0026332</doc-number>
<kind>A1</kind>
<name>Taunton</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375222</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2003/0065990</doc-number>
<kind>A1</kind>
<name>Barford</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2003/0097622</doc-number>
<kind>A1</kind>
<name>Liu et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2004/0107391</doc-number>
<kind>A1</kind>
<name>Bauman</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2006/0200708</doc-number>
<kind>A1</kind>
<name>Gentieu et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714704</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>D. Das Sharma, &#x201c;PCIe 3.0 PHY Logical Layer Requirements&#x201d;, PCIe Technology Serminar, www.pcisig.com, pp. 1-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714707</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Erickson</last-name>
<first-name>Bruce</first-name>
<address>
<city>Colorado Springs</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Erickson</last-name>
<first-name>Bruce</first-name>
<address>
<city>Colorado Springs</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Agilent Technologies, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Riad</last-name>
<first-name>Amine</first-name>
<department>2113</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A device under test (DUT) is tested by: receiving a signal transmitted by the DUT, wherein the signal includes first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, the first portions and second portions being interspersed within the signal; detecting received scrambled bits within the received signal; generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating a bit of the test bit sequence for each of the received scrambled bits within the received signal, and not generating a bit of the test bit sequence for each of the received unscrambled bits within the received signal; and comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="177.12mm" wi="210.99mm" file="US08627156-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="239.35mm" wi="209.97mm" file="US08627156-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="289.22mm" wi="189.15mm" file="US08627156-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="284.31mm" wi="205.40mm" file="US08627156-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="284.99mm" wi="206.76mm" file="US08627156-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="278.98mm" wi="209.97mm" file="US08627156-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="283.55mm" wi="209.97mm" file="US08627156-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="288.21mm" wi="208.87mm" file="US08627156-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="283.21mm" wi="209.97mm" file="US08627156-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="287.78mm" wi="209.97mm" file="US08627156-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Analyzers have been developed to test the performance of a device under test (DUT), including testing transmitters, receivers, and/or communications channels employed by such a DUT. In some cases, these analyzers need to be able to determine a bit error rate (BER) of a signal received by the analyzer from the device under test (DUT).</p>
<p id="p-0003" num="0002">In such cases, it is necessary to place the DUT in an operating mode where it can generate an appropriate bit pattern that can be used for performing a bit error rate (BER) measurement. In the past this has often been done by placing the DUT into a test mode where an internal pseudorandom bit stream (PRBS) test signal generator of the DUT is employed to generate a signal for measuring the BER.</p>
<p id="p-0004" num="0003">However, some DUTs do not include a capability to be placed into a test mode where they transmit a PRBS signal for BER measurements.</p>
<p id="p-0005" num="0004">It would be desirable to provide an efficient approach for testing the BER of a device under test without forcing the device to enter a test mode and generate a pseudorandom bit stream test signal.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">In an example embodiment, a method is provided for testing a device under test (DUT). The method comprises: receiving a signal transmitted by the DUT, wherein the signal includes first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, the first portions and second portions being interspersed within the signal; detecting received scrambled bits within the received signal; generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating a bit for the test bit sequence for each of the received scrambled bits within the received signal, and not generating a bit for the test bit sequence for each of the received unscrambled bits within the received signal; and comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal.</p>
<p id="p-0007" num="0006">In another example embodiment, an apparatus includes a device for receiving a signal transmitted by a DUT, and a processor configured to cause the apparatus to execute an algorithm. The signal includes first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, the first portions and second portions being interspersed within the signal. The algorithm comprises: detecting received scrambled bits within the received signal: generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating a bit for the test bit sequence for each of the received scrambled bits within the received signal, and not generating a bit for the test bit sequence for each of the received unscrambled bits within the received signal; and comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal.</p>
<p id="p-0008" num="0007">In yet another embodiment, a method is provided analyzing a signal. The method comprises receiving a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device in a logical idle mode of the PCIe device, wherein the signal includes: (1) first blocks each comprising: (A) header bits that are not scrambled, and (B) scrambled bits including sequences of scrambled zeros, scrambled but non-zero Update Flow Control packets and scrambled but non-zero End Data Stream packets; (2) second blocks comprising unscrambled Skip Ordered Set data; and (3) third blocks comprising Electrical Idle Exit Ordered Set data, wherein the scrambled zeros, scrambled Update Flow Control packets and scrambled End Data Stream packets are generated with a selected scrambling algorithm, and wherein the first blocks, second blocks and third blocks are interspersed within the signal. The method further comprises: providing a test linear feedback shift register (LFSR) operating with the selected scrambling algorithm to generate a test bit sequence; determining block boundaries for the first blocks; synchronizing the test LFSR to the scrambled zeros and the block boundaries for the first blocks in the received signal so as to advance the test LFSR for the scrambled zeros and to not advance the test LFSR for the header bits; detecting received bits of the second blocks within the received signal, and not advancing the test LFSR for the received bits of the second blocks; detecting received bits of the third blocks within the received signal, and in response thereto resynchronizing the test LFSR to the scrambled zeros and the block boundaries for the first blocks in the received signal; detecting received scrambled bits within the received signal; and comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">The example embodiments are best understood from the following detailed description when read with the accompanying drawing figures. Wherever applicable and practical, like reference numerals refer to like elements.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> illustrates one embodiment of an arrangement for analyzing a device under test (DUT).</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. 2A-2C</figref> illustrate example embodiments of first, second and third block formats for blocks of bits communicated in a signal.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> shows a functional block diagram of one embodiment of a device for generating a sequence of bits from a received signal for making a bit error rate (BER) measurement.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 4</figref> shows a high level flowchart of one embodiment of a method of determining a BER of a signal transmitted by a DUT.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart of one embodiment of a method of generating a test bit sequence for determining a bit error rate of a received signal.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 6</figref> shows a flowchart of one embodiment of a method of synchronizing a linear feedback shift register to a received signal.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a flowchart of one embodiment of a method of detecting blocks of unscrambled bits in a signal having scrambled bits and unscrambled bits.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a flowchart of one embodiment of a method of detecting End Data Stream (EDS) packets in a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device and handling EDS bytes in a BER measurement.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 9</figref> a flowchart of one embodiment of a method of detecting Update Flow Control (UFC) packets in a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device and handling UFC bytes in a BER measurement.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">In the following detailed description, for purposes of explanation and not limitation, example embodiments disclosing specific details are set forth in order to provide a thorough understanding of an embodiment according to the present teachings. However, it will be apparent to one having ordinary skill in the art having had the benefit of the present disclosure that other embodiments according to the present teachings that depart from the specific details disclosed herein remain within the scope of the appended claims. Moreover, descriptions of well-known apparati and methods may be omitted so as to not obscure the description of the example embodiments. Such methods and apparati are clearly within the scope of the present teachings.</p>
<p id="p-0020" num="0019">Unless otherwise noted, when a first device is said to be connected to a second device, this encompasses cases where one or more intermediate devices may be employed to connect the two devices to each other. However, when a first device is said to be directly connected to a second device, this encompasses only cases where the two devices are connected to each other without any intermediate or intervening devices. Similarly, when a signal is said to be coupled to a device, this encompasses cases where one or more intermediate devices may be employed to couple the signal to the device. However, when a signal is said to be directly coupled to a device, this encompasses only cases where the signal is directly coupled to the device without any intermediate or intervening devices.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> illustrates one embodiment of an arrangement for analyzing a device under test (DUT). <figref idref="DRAWINGS">FIG. 1</figref> shows first and second DUTs <b>10</b> and <b>20</b> having a first communication channel <b>15</b> for communicating data from DUT <b>10</b> to DUT <b>20</b> and a second communication channel <b>25</b> for communicating data from DUT <b>20</b> to DUT <b>10</b>. First and second communication channels may comprise a plurality of signal lines or differential signal line pairs each communicating a signal from one DUT to the other.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> also shows an analyzer <b>100</b> for analyzing DUT <b>10</b> and/or DUT <b>20</b>, and particularly for analyzing first and/or second communication channels <b>15</b> and <b>25</b>, and more particularly one or more signacommunicated via first and/or second communication channels <b>15</b> and <b>25</b>. Analyzer <b>100</b> includes an active or passive interface <b>110</b>, a signal processor <b>120</b> and an analysis processor <b>130</b>.</p>
<p id="p-0023" num="0022">Passive interface <b>110</b> probes one or more signals communicated on first and/or second communication channels <b>15</b> and <b>25</b> and communicates a probed signal(s) to signal processor <b>120</b> which performs signal processing on the probed signal using one or more processing parameters. The processed signal is then provided to analysis processor <b>130</b>, which may be a field programmable gate array (FPGA) for analysis.</p>
<p id="p-0024" num="0023">In some cases, analyzer <b>100</b> may need to adjust one or more of its parameters (e.g., clock phase or frequency; voltage thresholds; etc.) to eliminate sub-optimal probing. One convenient mechanism for determining when the parameter(s) are optimized is to measure the bit error rate (BER) of a signal received by analyzer <b>100</b> from a device under test (DUT) (e.g., DUT <b>10</b> and/or DUT <b>20</b>), and then adjusting the parameter(s) until the BER is minimized.</p>
<p id="p-0025" num="0024">In such cases, it is necessary to place the DUT in an operating mode where it can generate an appropriate bit pattern that can be used for performing a bit error rate (BER) measurement. In the past this has often been done by placing the DUT into a test mode where an internal pseudorandom bit stream (PRBS) test signal generator of the DUT is employed to generate a signal for measuring the BER.</p>
<p id="p-0026" num="0025">However, some DUTs do not include a capability to be placed into a test mode where they transmit a PRBS signal for BER measurements.</p>
<p id="p-0027" num="0026">However, it is still desired to be able to measure the BER of a signal from such a DUT to adjust analyzer <b>100</b> for optimizing its probing.</p>
<p id="p-0028" num="0027">In some cases, a DUT may scramble portions of its data transmissions, for example using a transmit linear feedback shift register (LFSR), and may have a normal operating mode (i.e., not a special mode employed just for testing the DUT) where the DUT transmits a signal that includes such scrambled bits interspersed with other unscrambled bits. In those cases, systems and methods described below may be employed to determine a BER of a signal transmitted by the DUT.</p>
<p id="p-0029" num="0028">To provide a concrete example so that various principles may be explained and understood in detail, an illustrative embodiment will be described below with respect to a DUT comprising a Peripheral Component Interconnect Express (PCI Express or PCIe) device. However, it should be understood that these principles are not necessarily limited to the context of a PCIe device, but as appropriate may be applied to other devices which have normal operating modes where they transmit a signal that includes scrambled bits interspersed with unscrambled bits.</p>
<p id="p-0030" num="0029">PCIe is a computer expansion card standard used in consumer, server, and industrial applications, as a motherboard-level interconnect (to link motherboard-mounted peripherals) and as an expansion card interface for add-in boards.</p>
<p id="p-0031" num="0030">Third generation (Gen3) PCIe devices have as a normal operating mode a Logical Idle mode wherein they transmit a series of 130-bit blocks each having one of various block formats. Also, in PCIe Gen3 assumes that communication channels are bonded; that is if there are multiple &#x201c;lanes&#x201d; (e.g., a lane may be a differential signal pair path from one PCIe device to another PCIe device) in a communication channel such as communication channels <b>15</b>/<b>25</b> of <figref idref="DRAWINGS">FIG. 1</figref> (i.e., X4 or X16 widths), then not all data is sent across all lanes; (that is, different data is sent on each lane).</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. 2A-C</figref> illustrates example embodiments of formats for first, second and third blocks of bits that are communicated in a signal. In particular, <figref idref="DRAWINGS">FIGS. 2A-C</figref> illustrate a first block format for a 130-bit first block <b>200</b>, a second block format for a 130-bit second block <b>250</b>, and a third block format for a 130-bit third block <b>280</b> that may be communicated by a PCIe device while in a Logical Idle mode.</p>
<p id="p-0033" num="0032">First block <b>200</b> has a two-bit header <b>202</b>, followed by 128 bits which are mostly scrambled zeros <b>204</b> generated by a 23-bit transmit LFSR at the DUT, but which also include scrambled but non-zero Update Flow Control (UFC) Packets <b>206</b> and scrambled but non-zero End Data Stream (EDS) Packets <b>208</b>. Second block <b>250</b> includes a two-bit header <b>202</b>, followed by 128 bits of Skip Ordered Set data which are not scrambled (and the transmit LFSR does not advance for this block). Third Block <b>280</b> includes a two-bit header <b>202</b>, followed by 128 bits of Exit Electrical Idle Ordered Set data <b>212</b> which are not scrambled. The Exit Electrical Idle Exit Ordered Set (EIEOS) data <b>212</b> indicates that the 23-bit transmit LFSR is being reset.</p>
<p id="p-0034" num="0033">During the vast majority of the time that a PCIe DUT transmits in a Logical Idle mode, the transmitted bits consist of the scrambled zeros, unscrambled Skip Ordered Set (SOS) data, and unscrambled EIEOS data. Therefore, the signal transmitted by a PCIe DUT while in a Logical Idle mode can be considered to comprise first portions that include scrambled bits (e.g., scrambled zeros) produced from a selected bit pattern (zeros) and a selected scrambling algorithm (e.g., the algorithm or polynomial realized by the PCIe DUT's 23-bit transmit LFSR), and further includes second portions that include unscrambled bits (e.g., the bits of two-bit header <b>202</b>, SOS data, and the EIEOS data), where the first portions and second portions are interspersed within the signal.</p>
<p id="p-0035" num="0034">Meanwhile, since the scrambled zeros are generated with a 23-bit transmit LFSR according to a known selected algorithm, an analyzer (e.g., analyzer <b>100</b>) can instantiate its own 23-bit test LFSR executing the known selected algorithm to generate a test bit sequence which can be compared with received scrambled bits of a received signal in the Logical Idle mode to determine the BER of the received signal.</p>
<p id="p-0036" num="0035">However, to do this, analyzer <b>100</b> must address several issues.</p>
<p id="p-0037" num="0036">First, the test LFSR of analyzer <b>100</b> must be synchronized to the transmit LFSR of the DUT. Synchronization is complicated by the presence of unscrambled bits in the received signal that do not advance the transmit LFSR at the DUT, and which therefore must be accounted for in analyzer <b>100</b>, and by the EIEOS data that resets the transmit LFSR.</p>
<p id="p-0038" num="0037">Also, as noted above, the scrambled zeros produced by the transmit LFSR of the DUT are interspersed in the received signal with several other types of bits, including unscrambled bits, and UFC and EDS packets. Furthermore, in general, the first blocks <b>200</b>, second blocks <b>250</b>, and third blocks <b>280</b> are not distributed within the received signal according to a repeating pattern than is known in advance. The scrambled zeros must be identified and separated from the other bits so that only the appropriate bits are used for advancing the test LFSR and determining the BER.</p>
<p id="p-0039" num="0038">Furthermore, as mentioned above, PCIe Gen3 assumes that communication channels are &#x201c;bonded.&#x201d; However, it is desirable to be able to determine the BER of each lane. In that case, a BER algorithm cannot use information combined from multiple lanes as that would make it very difficult to determine which lane had the bit errors. That is, in some scenarios it may be possible that a single lane with a very high BER makes it look like all of the other lanes bonded with it also have a very high BER, even though the BERs of the other lanes are all much, much lower.</p>
<p id="p-0040" num="0039">Accordingly, devices and methods will be described below for determining a BER of a signal output by a PCIe DUT while in a Logical Idle mode as described above with respect to <figref idref="DRAWINGS">FIGS. 2A-C</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 3</figref> shows a functional block diagram of one embodiment of a device <b>300</b> for generating a sequence of bits from a received signal for making a BER measurement. Device <b>300</b> includes a test linear feedback shift register (LFSR) <b>310</b>, a processor <b>320</b> and a receiver <b>330</b>. The elements of device <b>300</b> may be realized by any combination of hardware components, firmware, and microprocessor(s) or digital signal processor(s) executing software instructions stored in a memory device. Beneficially, processor <b>320</b> may control various operations of device <b>300</b> to execute one or more algorithms, for example as disclosed below with respect to <figref idref="DRAWINGS">FIGS. 4-9</figref>.</p>
<p id="p-0042" num="0041">In operation, receiver <b>330</b> receives a signal from a DUT, such as DUT <b>10</b> in <figref idref="DRAWINGS">FIG. 1</figref> which may be a PCIe DUT, and provides a received signal <b>305</b> including scrambled bits to processor <b>320</b>. Under control of processor <b>320</b>, test LFSR <b>310</b> outputs a test bit sequence <b>315</b> which can be used together with the scrambled bits in received signal <b>305</b> to determine a bit error rate of the received signal <b>305</b>. Processor <b>320</b> may process received signal <b>305</b> to generate an output signal <b>325</b> for further analysis, for example by analysis processor <b>130</b> of analyzer <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref>. In conjunction with the processing of received signal <b>305</b> processor <b>320</b> may operate in conjunction with test LFSR <b>310</b> to determine a bit error rate of received signal <b>305</b>.</p>
<p id="p-0043" num="0042">In one embodiment, device <b>300</b> may be included in signal processor <b>120</b> of analyzer <b>100</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> and may process a received signal. In one embodiment, receiver <b>330</b> of device <b>300</b> receives a signal transmitted by a PCIe DUT while in the Logical Idle mode, as illustrated above with respect to <figref idref="DRAWINGS">FIGS. 2A-B</figref>, and determines a BER of the received signal.</p>
<p id="p-0044" num="0043">Methods will now be described by which processor <b>320</b> can process bits received in received signal, and control operations of test LFSR <b>310</b>, to generate test bit sequence <b>315</b> and determine a bit error rate of received signal <b>305</b>.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 4</figref> shows a high level flowchart of one embodiment of a method <b>400</b> of determining a BER of a signal received from a DUT, for example received signal <b>305</b> of FIG, <b>3</b>. In a particular embodiment, method <b>400</b> is a method of determining a BER of a signal output by a PCIe DUT while in a Logical Idle mode as described above with respect to FIGS. <b>2</b>A-C&#x2014;which is a normal operating mode of the PCIe DUT&#x2014;and which is received or monitored by an analyzer, for example analyzer <b>100</b>.</p>
<p id="p-0046" num="0045">Method <b>400</b> includes a step <b>410</b> of detecting received scrambled bits within a received signal that has first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, where the first portions and second portions being interspersed within the signal. An example of such a signal is the signal transmitted by a PCIe DUT while in the Logical Idle mode, as illustrated and described above with respect to <figref idref="DRAWINGS">FIGS. 2A-C</figref>.</p>
<p id="p-0047" num="0046">Step <b>420</b> includes generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating one bit for the test bit sequence for every received scrambled bit within the received signal, and not generating a bit for the test bit sequence for every received unscrambled bit within the received signal. In some embodiments, a test LFSR (e.g., test LFSR <b>310</b>) in an analyzer (e.g., analyzer <b>100</b>) is employed to generate the test bit sequence.</p>
<p id="p-0048" num="0047">Step <b>430</b> includes comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal. Because step <b>420</b> does not generate a bit for the test bit sequence for every received unscrambled bit within the received signal, the test bit sequence can be compared bit-by-bit against the scrambled bits within the received signal in order to perform a BER measurement.</p>
<p id="p-0049" num="0048">It should be understood that steps <b>410</b> and <b>420</b> are not necessarily performed sequentially, and indeed in general are performed in parallel with each other. Furthermore, it should be understood that the steps are performed repeatedly for each new scrambled bit that is obtained.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 5</figref> shows a flowchart of one embodiment of a method <b>500</b> of generating a test bit sequence for an analyzer (e.g., analyzer <b>100</b>) to determine a BER of a received signal. In particular, method <b>500</b> generates a test bit sequence for comparison with scrambled bits of a received signal from a PCIe DUT in a Logical Idle mode according to method <b>400</b>.</p>
<p id="p-0051" num="0050">Step <b>510</b> provides a test LFSR, for example test LFSR <b>310</b> of device <b>300</b>.</p>
<p id="p-0052" num="0051">In a step <b>520</b>, the test LFSR is synchronized to a pattern of scrambled bits in a PCIe signal that is monitored or received by analyzer <b>100</b>, in particular a signal that transmitted in a Logical Idle mode as described above with respect to <figref idref="DRAWINGS">FIG. 2A</figref>. When the test LFSR is synchronized to the scrambled bits from the transmit LFSR from the PCIe DUT, and is loaded with the correct bit pattern of N=23 bits, then it should correctly predict the next M scrambled bits that are received, where M can be calculated to achieve a desired probability of not synchronizing incorrectly. For example, in one embodiment if the test LFSR predicts the next 17 scrambled bits correctly, the probability of incorrect synchronization may be very small, e.g., 7E-6. In this case, analyzer <b>100</b> may assume that the test LFSR is synchronized when it correctly predicts the next 17 scrambled bits.</p>
<p id="p-0053" num="0052">In particular, as described above, a PCIe DUT includes a transmit LFSR that in the Logical Idle mode transmits first blocks <b>200</b> and second blocks <b>250</b>. Each first block <b>200</b> includes some unscrambled bits at first fixed positions (i.e. the bits of two-bit header <b>202</b>) within the first block, and includes some scrambled bits (i.e., scrambled zeros) at second fixed positions within the first block. Here, in step <b>520</b> the test LFSR is synchronized to boundaries of the first blocks <b>200</b> in a received signal such that the test LFSR is not advanced for the unscrambled bits (e.g., the bits of two-bit header <b>202</b>) within the first blocks of the received signal. A detailed description of one embodiment of a block boundary synchronization algorithm will be described below with respect to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0054" num="0053">Once the test LFSR is synchronized to the pattern of scrambled bits in a PCIe signal, a series of operations as described below with respect to steps <b>530</b>-<b>570</b> are performed essentially in parallel.</p>
<p id="p-0055" num="0054">In a step <b>530</b>, the test LFSR is advanced for each received scrambled bit within the received signal.</p>
<p id="p-0056" num="0055">In a step <b>540</b>, blocks of Skip Ordered Set (SOS) data (i.e., second blocks <b>250</b>) are detected. When a second block <b>250</b> of SOS data is detected in step <b>540</b>, the test LFSR is not advanced for these blocks. A detailed description of one embodiment of a method of detecting SOS data will be described below with respect to <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0057" num="0056">In a step <b>550</b>, blocks of Electrical Idle Exit Ordered Set (EIEOS) data (i.e., third blocks <b>280</b>) are detected indicating that the test LFSR should be resynchronized to the received scrambled bits. When a third block <b>280</b> of EIEOS data is detected in step <b>550</b>, the test LFSR is reset and the process returns to step <b>520</b> where the test LFSR is resynchronized to the pattern of scrambled bits in a PCIe signal. A more detailed description of one embodiment of a method of detecting EIEOS data will be described below with respect to <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0058" num="0057">In a step <b>560</b>, End of Data Stream (EDS) packets <b>208</b> within the received signal are detected and processed. When an EDS packet is detected, the test LFSR is advanced. A detailed description of one embodiment of a method of detecting and processing EDS packets <b>208</b> is described below with respect to <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0059" num="0058">In a step <b>570</b>, Update Flow Control (UFC) packets <b>206</b> are detected and processed. When a UFC packet is detected, the test LFSR is advanced. A detailed description of one embodiment of a method of detecting and processing UFC packets <b>206</b> is described below with respect to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0060" num="0059">It should be understood that steps <b>530</b>-<b>570</b> are not necessarily performed sequentially, and indeed in general may be performed in parallel with each other as illustrated in <figref idref="DRAWINGS">FIG. 5</figref>. Furthermore, it should be understood that the steps <b>530</b>-<b>570</b> are performed repeatedly as new bits are received in the received signal. Also, when in step <b>540</b> a third block <b>280</b> of EIEOS data is detected, the test LFSR is reset and the process returns to step <b>520</b>.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 6</figref> shows a flowchart of one embodiment of a method <b>600</b> of synchronizing a test linear feedback shift register (LFSR) to a received signal (e.g., in step <b>520</b> in <figref idref="DRAWINGS">FIG. 5</figref>), and in particular a method of synchronizing the test LFSR to boundaries of first blocks <b>200</b> in a received signal from a PCIe DUT in a Logical Idle mode such that the test LFSR is not advanced for the unscrambled bits (e.g., the bits of two-bit header <b>202</b>) within first blocks <b>200</b>.</p>
<p id="p-0062" num="0061">As noted above, when the test LFSR is synchronized to the scrambled bits from the transmit LFSR from the PCIe DUT, and is loaded with the correct bit pattern of N=23 bits, then the test LFSR can be considered to be properly synchronized when it correctly predicts the next M=17 scrambled bits. Because M+N=40&#x3c;128, it is easy to find a place inside a first block <b>200</b> to synchronize test LFSR. However, this alone is not sufficient, as it is necessary to also know where the beginning of each first block <b>200</b> is, to synchronize the test LFSR to the boundaries of the first blocks in the received signal so that the test LFSR is not advanced for the two bits in the two-bit header <b>202</b>.</p>
<p id="p-0063" num="0062">The start of a first block <b>200</b> may be identified as follows. The test LFSR is loaded with a trial set of N received bits, and then the 2*M bits among the next set of (M bits, followed by 2 unused bits, followed by M bits) in the received signal is compared with the next 2*M bits from the test bit sequence generated by the test LFSR. When the next 2*M bits in the test bit sequence from the test LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, it is determined that the test LFSR is synchronized with the boundaries of the first blocks <b>200</b> in the received signal. Of course, in general this comparison needs to be done for a plurality of different sets of N bits from the received signal at a plurality of different &#x201c;starting&#x201d; oppositions before a match will be found.</p>
<p id="p-0064" num="0063">To expedite this process, in one embodiment in a step <b>620</b> a plurality of &#x201c;candidate&#x201d; LFSRs (e.g., 40 LFSRs) are instantiated and each candidate LFSR is loaded with a set of N=23 received bits, such that each candidate LFSR operates with a different starting position.</p>
<p id="p-0065" num="0064">In a step <b>630</b>, for each candidate LFSR, the 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal are compared with the next 2*M bits in an output bit sequence generated by the candidate LFSR.</p>
<p id="p-0066" num="0065">In a step <b>640</b>, one of the candidate LFSRs where the next 2*M bits in the output bit sequence generated by the candidate LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal is determined to be synchronized at the correct position, and this candidate LFSR is selected as the test LFSR to be used for generating the test bit sequence to be used for the BER measurements, and location of two-bit header <b>202</b> is also therefore identified and used for the rest of the steps <b>530</b> through <b>570</b> to know when not to advance the test LFSR for each two-bit header <b>202</b>.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a flowchart of one embodiment of a method of detecting blocks of unscrambled bits in a signal having scrambled bits and unscrambled bits (e.g., in steps <b>540</b> and <b>550</b> in <figref idref="DRAWINGS">FIG. 5</figref>). In particular, <figref idref="DRAWINGS">FIG. 7</figref> shows a method <b>700</b> of detecting second blocks <b>250</b> of unscrambled SOS data and third blocks <b>280</b> of unscrambled EIEOS DATA in a received signal from a PCIe DUT in a Logical Idle mode.</p>
<p id="p-0068" num="0067">At the outset, it is assumed that the test LFSR is synchronized to the scrambled zeros in the received signal, and therefore already loaded with &#x201c;known&#x201d; good data. In a step <b>710</b>, the test LFSR predicts a next set of 128 bits.</p>
<p id="p-0069" num="0068">In a step <b>720</b>, each of a plurality (e.g., R=8) of different groups or regions of M (e.g., 17) consecutive bits within the next received block are compared with a corresponding group or region of M consecutive bits within the predicted next set of 128 output bits from the test LFSR, and if the comparison result is greater than a threshold, then the group is considered to be a match.</p>
<p id="p-0070" num="0069">In a step <b>730</b>, the number of groups within the next received block where there is a match is summed up to produce a first sum.</p>
<p id="p-0071" num="0070">In a step <b>740</b> each of a plurality (e.g., R=8) of different groups of M consecutive bits within the immediately subsequent received block after the next received block are compared with a corresponding group of M consecutive bits within the predicted next set of output bits from the test LFSR and if a comparison result is greater than the threshold, then the group is considered to be a match.</p>
<p id="p-0072" num="0071">In a step <b>750</b>, the number of groups within the immediately subsequent received block after the next received block where there is a match is summed to produce a second sum.</p>
<p id="p-0073" num="0072">In a step <b>760</b>, the first sum is compared to the second sum.</p>
<p id="p-0074" num="0073">In a step <b>770</b>, when the first sum is greater than the second sum, it is determined that the next received block is a first block <b>200</b>, in which case the test LFSR is advanced for the bits in the next block (other than the bits of two-bit header <b>202</b>) and the process returns to step <b>710</b>.</p>
<p id="p-0075" num="0074">In a step <b>780</b>, when the first sum is less than the second sum, it is determined that the next received block is a second block <b>250</b> comprising unscrambled Skip Ordered Set data. Whenever a block is determined to be a second block <b>250</b> comprising SOS data, then the test LFSR is not advanced for bits received during that block.</p>
<p id="p-0076" num="0075">In a step <b>790</b>, when the first sum is zero, then the next block is determined to be a third block <b>280</b> comprising EIEOS data. In that case, the transmit LFSR is reset. Accordingly, at analyzer <b>100</b> the next two received blocks are discarded and the process proceeds to step <b>520</b> of <figref idref="DRAWINGS">FIG. 5</figref> where the test LFSR is resynchronized to the scrambled bits from the transmit LFSR from the PCIe DUT. It should be noted that the errors counted up to this point are not discarded&#x2014;the BER measurement process is just temporarily interrupted until the test LFSR is resynchronized to the scrambled bits from the transmit LFSR.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a flowchart of one embodiment of a method <b>800</b> of detecting and handling End Data Stream (EDS) packets in a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device in a BER measurement (e.g., in step <b>560</b> in <figref idref="DRAWINGS">FIG. 5</figref>).</p>
<p id="p-0078" num="0077">In a PCIe Gen3 DUT, an EDS packet looks like: 1F809000, and can only occur prior to a second block <b>250</b> having the SOS data. As noted above, PCIe Gen3 lanes are bundled together and the same data is not transmitted across each lane. Accordingly, the bytes that will be received on any one lane for an EDS packet will depend upon the lane width.</p>
<p id="p-0079" num="0078">In the example of <figref idref="DRAWINGS">FIG. 8</figref>, the only allowed lane widths are 1, 2 and 4. However, the principles illustrated in <figref idref="DRAWINGS">FIG. 8</figref> can easily be extrapolated to other lane width possibilities, including for example 8.</p>
<p id="p-0080" num="0079">In a step <b>805</b>, the lane width is determined, for example by a user input, or from an input signal from the PCIe DUT.</p>
<p id="p-0081" num="0080">In a step <b>810</b>, it is determined whether the lane width is 4. If so, then the process proceeds to step <b>815</b>. Otherwise, the process proceeds to step <b>840</b> described below.</p>
<p id="p-0082" num="0081">In a step <b>815</b>, it is determined whether or not the last four bytes of a first block <b>200</b> are 1F809000. If not then the first block <b>200</b> does not include an EDS packet, and the process proceeds to step <b>820</b> where the received bits are processed normally. Otherwise, if the last four bytes of a first block <b>200</b> are 1F809000, then the process proceeds to step <b>825</b>.</p>
<p id="p-0083" num="0082">In a step <b>825</b>, a check is made to determine whether or not the next block is a second block comprising SOS data. This check may be done, for example, according to method <b>700</b> described above. If it is determined that the next block is not a second block <b>250</b> comprising SOS data, then the process proceeds to step <b>820</b> where the received bits are processed normally. Otherwise, if the next block is a second block <b>250</b> comprising SOS data, then, then the process proceeds to step <b>830</b>.</p>
<p id="p-0084" num="0083">In a step <b>830</b>, it is determined that the last bytes of the first block <b>200</b> comprise an EDS packet. Since the correct bits for an EDS packet are known, in some embodiments the bits for the EDS packet may be utilized in the BER calculation. In other embodiments, the bits for the EDS packet may be ignored for the BER calculation. Then the process proceeds to step <b>835</b>.</p>
<p id="p-0085" num="0084">Since it has been previously determined in step <b>825</b> that the next block is a second block <b>250</b> of SOS data, in a step <b>835</b> the test LFSR is not advanced for the bits received during the next block.</p>
<p id="p-0086" num="0085">In a step <b>840</b>, it is determined whether the lane width is two (2). If so, then the process proceeds to step <b>845</b>. Otherwise, the process proceeds to step <b>850</b>.</p>
<p id="p-0087" num="0086">In a step <b>845</b>, it is determined whether or not the last two bytes of the first block <b>200</b> are either 1F90 or 8000. If not then the first block <b>200</b> does not include an EDS packet, and the process proceeds to step <b>820</b> where the received bits are processed normally as explained above. Otherwise, the process proceeds to step <b>825</b> as explained above.</p>
<p id="p-0088" num="0087">In a step <b>850</b>, it is determined that the lane width is one (1), and the process proceeds to step <b>855</b>.</p>
<p id="p-0089" num="0088">In a step <b>855</b>, it is determined whether or not the last byte of the first block <b>200</b> is either 1F, 90, 80 or 00. If not then the first block <b>200</b> does not include an EDS packet, and the process proceeds to step <b>820</b> where the received bits are processed normally. Otherwise, the process proceeds to step <b>825</b>.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 9</figref> a flowchart of one embodiment of a method <b>900</b> of detecting and handling Update Flow Control (UFC) packets in a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device in a BER measurement (e.g., in step <b>570</b> in <figref idref="DRAWINGS">FIG. 5</figref>). For simplicity of explanation, the example only illustrates an embodiment of the algorithm where a single UFC is sent every N &#x3bc;sec., however it should be evident how to expand this to the case when multiple UFCs are sent every N &#x3bc;sec.</p>
<p id="p-0091" num="0090">In a PCIe Gen3 DUT, a UFC packet consists of eight (8) bytes and looks like: F0ACTXXXXXXXXXXX, where T is a value between 8 and A, and the X values are variable data and cyclic redundancy check bytes. As noted above, PCIe Gen3 lanes are bundled together and the same data is not transmitted across each lane. Accordingly, the number of bytes that will be received on any one lane for a UFC packet will depend upon the lane width.</p>
<p id="p-0092" num="0091">UFC packets are sent some number of times within some time window, for example once every 30 &#x3bc;s. Assuming that analyzer <b>100</b> knows the minimum time between UFC packets, for example by the particular protocol that is employed by the DUT, or via a signal communicated from the DUT, etc., then method <b>900</b> can reduce the chance that UFC packets will be counted as bit errors.</p>
<p id="p-0093" num="0092">In the example of <figref idref="DRAWINGS">FIG. 9</figref>, the only allowed lane widths are 1, 2 and 4. However, the principles illustrated in <figref idref="DRAWINGS">FIG. 9</figref> can easily be extrapolated to other lane width possibilities.</p>
<p id="p-0094" num="0093">In a step <b>905</b>, the lane width is determined, for example by a user input, or from input signals from the PCIe DUT.</p>
<p id="p-0095" num="0094">In a step <b>910</b>, it is determined whether or not the lane width if four (4). If so, then the process proceeds to step <b>915</b>. Otherwise, the process proceeds to step <b>940</b> described below.</p>
<p id="p-0096" num="0095">In a step <b>915</b>, it is determined whether or not a cluster of errors has occurred within two (2) bytes. If not then it is decided that no UFC packet has been detected, and the process proceeds to step <b>920</b> where the received bits are processed normally. Otherwise, the process proceeds to step <b>925</b>.</p>
<p id="p-0097" num="0096">In a step <b>925</b>, it is checked whether or not a UFC timeout timer has timed out. More specifically, as described below with respect to step <b>935</b>, when a UFC packet is detected, a timeout timer or counter is set or started based on the minimum time period between UFC packets to disable detection of another UFC packet until a timeout period expires. If another cluster of errors occurs between the time that the last UFC packet was detected and the minimum time between UFC packets (i.e., the UFC timeout timer has not yet timed out), then the process proceeds to step <b>920</b> and the errors are treated as regular bit errors. Otherwise, the process proceeds to step <b>930</b>.</p>
<p id="p-0098" num="0097">In a step <b>930</b>, the error cluster is not counted as errors and is ignored in determining the BER of the received signal, and the process proceeds to step <b>935</b>.</p>
<p id="p-0099" num="0098">In a step <b>935</b>, the UFC timeout timer or counter is started with a timeout period corresponding to the minimum time period between UFC packets.</p>
<p id="p-0100" num="0099">In a step <b>940</b>, it is determined whether the lane width is two (2). If so, then the process proceeds to step <b>945</b>. Otherwise, the process proceeds to step <b>950</b>.</p>
<p id="p-0101" num="0100">In a step <b>945</b>, it is determined whether or not a cluster of errors has occurred within four (4) bytes. If not then it is decided that no UFC packet has been detected, and the process proceeds to step <b>920</b> where the received bits are processed normally as explained above. Otherwise, the process proceeds to step <b>925</b> as explained above.</p>
<p id="p-0102" num="0101">In a step <b>950</b>, it is decided that the lane width is one (1), and the process proceeds to step <b>855</b>.</p>
<p id="p-0103" num="0102">In a step <b>955</b>, it is determined whether or not a cluster of errors has occurred within eight (8) bytes. If not then it is decided that no UFC packet has been detected, and the process proceeds to step <b>920</b> where the received bits are processed normally as explained above. Otherwise, the process proceeds to step <b>925</b> as explained above.</p>
<p id="p-0104" num="0103">It can be seen that in a case where the allowed lane widths include a width greater than 4 (e.g., 8) then it is determined whether a cluster of errors has occurred within a single byte, and the process proceeds accordingly.</p>
<p id="p-0105" num="0104">While example embodiments are disclosed herein, one of ordinary skill in the art appreciates that many variations that are in accordance with the present teachings are possible and remain within the scope of the appended claims. The invention therefore is not to be restricted except within the scope of the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for testing a device under test (DUT), the method comprising:
<claim-text>receiving a signal transmitted by the DUT, wherein the signal includes first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, the first portions and second portions being interspersed within the signal;</claim-text>
<claim-text>detecting received scrambled bits within the received signal;</claim-text>
<claim-text>generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating a bit for the test bit sequence for each of the received scrambled bits within the received signal, and not generating a bit for the test bit sequence for each of the received unscrambled bits within the received signal;</claim-text>
<claim-text>comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal; and</claim-text>
<claim-text>operating a test linear feedback shift register (LFSR) according to the selected scrambling algorithm and the selected bit pattern to generate the test bit sequence, wherein the unscrambled bits include bits indicating that the test LFSR should be resynchronized to the received scrambled bits, and the method further comprises detecting the unscrambled bits indicating that the test LFSR should be resynchronized to the received scrambled bits and in response thereto, resynchronizing the test LFSR to the received scrambled bits.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the signal includes first blocks of bits having a first block format, wherein each of the first blocks includes some of the unscrambled bits which do not advance the test LFSR at first fixed positions within the first block and includes some of the scrambled bits at second fixed positions within the first block, and wherein generating the test bit sequence comprises synchronizing the test LFSR to the scrambled bits and to boundaries of the first blocks in the received signal and not advancing the test LFSR for the unscrambled bits within the first blocks of the received signal.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein synchronizing the test LFSR to the scrambled bits and the boundaries of the first blocks comprises:
<claim-text>loading the test LFSR with a set of N received bits;</claim-text>
<claim-text>comparing 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, with a next 2*M bits in the test bit sequence generated by the test LFSR; and</claim-text>
<claim-text>when the next 2*M bits in the test bit sequence generated by the test LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, determining that the test LFSR is synchronized with the boundaries of the first blocks in the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein synchronizing the test LFSR to the scrambled bits and the boundaries of the first blocks comprises:
<claim-text>loading each of a plurality of candidate LFSRs with a set of N received bits;</claim-text>
<claim-text>for each of the candidate LFSRs, comparing 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, with a next 2*M bits in an output bit sequence generated by the candidate LFSR; and</claim-text>
<claim-text>selecting as the test LFSR one of the candidate LFSRs where next 2*M bits in the output bit sequence generated by the candidate LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the signal includes second blocks of bits having a second block format, wherein the second blocks of bits comprise unscrambled bits, wherein the first blocks and second blocks are not distributed within the signal according to a repeating pattern, and wherein generating the test bit sequence comprises not advancing the test LFSR for the unscrambled bits within the second blocks of the received signal.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. An apparatus including:
<claim-text>a device for receiving a signal transmitted by a device under test (DUT), wherein the signal includes first portions that include scrambled bits produced from a selected bit pattern and a selected scrambling algorithm, and further includes second portions that include unscrambled bits, the first portions and second portions being interspersed within the signal;</claim-text>
<claim-text>a processor configured to cause the apparatus to execute an algorithm comprising:
<claim-text>detecting received scrambled bits within the received signal;</claim-text>
<claim-text>generating a test bit sequence using the selected scrambling algorithm and the selected bit pattern, including generating one bit for the test bit sequence for each of the received scrambled bits within the received signal, and not generating a bit for the test bit sequence for each of the received unscrambled bit within the received signal; and</claim-text>
<claim-text>comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal; and</claim-text>
</claim-text>
<claim-text>a test linear feedback shift register (LFSR) operating according to the selected scrambling algorithm and the selected bit pattern to generate the test bit sequence wherein the unscrambled bits include bits indicating that the test LFSR should be resynchronized to the received scrambled bits, and wherein the algorithm further comprises detecting the unscrambled bits including the bits indicating that the test LFSR should be resynchronized to the received scrambled bits and in response thereto, resynchronizing the test LFSR to the received scrambled bits.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the signal includes first blocks of bits having a first block format, wherein each of the first blocks includes some of the unscrambled bits at first fixed positions within the first block and includes some of the scrambled bits at second fixed positions within the first block, and wherein the apparatus is configured to generate the test bit sequence by synchronizing the test LFSR to the scrambled bits and boundaries of the first blocks in the received signal and not advancing the test LFSR for the unscrambled bits within the first blocks in the received signal.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the apparatus is configured to synchronize the test LFSR to the scrambled bits and the boundaries of the first blocks by:
<claim-text>loading the test LFSR with a set of N received bits;</claim-text>
<claim-text>comparing 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, with a next 2*M bits in the test bit sequence generated by the test LFSR; and</claim-text>
<claim-text>when the next 2*M bits in the test bit sequence generated by the test LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, determining that the test LFSR is synchronized with the boundaries of the first blocks in the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the apparatus is configured to synchronize the test LFSR to the scrambled bits and the boundaries of the first blocks by:
<claim-text>loading each of a plurality of candidate LFSRs with a set of N received bits;</claim-text>
<claim-text>for each of the candidate LFSRs, comparing 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, with a next 2*M bits in an output bit sequence generated by the candidate LFSR; and</claim-text>
<claim-text>selecting as the test LFSR one of the candidate LFSRs where the next 2*M bits in the output bit sequence generated by the candidate LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the signal includes second blocks of bits having a second block format, wherein the second blocks of bits comprise unscrambled bits, wherein the first blocks and second blocks are not distributed within the signal according to a repeating pattern, and wherein the apparatus is configured to generate the test bit sequence by not advancing the test LFSR for the unscrambled bits within the second blocks in the received signal.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method of analyzing a signal, comprising:
<claim-text>receiving a signal transmitted by a Peripheral Component Interconnect Express (PCIe) device in a logical idle mode of the PCIe device, wherein the signal includes: (1) first blocks each comprising: (A) header bits that are not scrambled, (B) scrambled bits including sequences of scrambled zeros, and (c) scrambled but non-zero Update Flow Control packets and scrambled but non-zero End Data Stream packets; (2) second blocks comprising unscrambled Skip Ordered Set data; and (3) third blocks comprising Electrical Idle Exit Ordered Set data, wherein the scrambled zeros, scrambled but non-zero Update Flow Control packets and scrambled but non-zero End Data Stream packets are generated with a selected scrambling algorithm, and wherein the first blocks, second blocks and third blocks are interspersed within the signal;</claim-text>
<claim-text>providing a test linear feedback shift register (LFSR) operating with the selected scrambling algorithm to generate a test bit sequence;</claim-text>
<claim-text>determining block boundaries for the first blocks;</claim-text>
<claim-text>synchronizing the test LFSR to the scrambled zeros and the block boundaries for the first blocks in the received signal so as to advance the test LFSR for the scrambled zeros, the Update Flow Control packets and the End Data Stream packets, and to not advance the test LFSR for the header bits;</claim-text>
<claim-text>detecting received bits of the second blocks within the received signal, and not advancing the test LFSR for the received bits of the second blocks;</claim-text>
<claim-text>detecting received bits of the third blocks within the received signal, and in response thereto resynchronizing the test LFSR to the scrambled zeros and the block boundaries for the first blocks in the received signal;</claim-text>
<claim-text>detecting received scrambled bits within the received signal; and</claim-text>
<claim-text>comparing the received scrambled bits to the test bit sequence to determine a bit error rate of the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein synchronizing the test LFSR to the scrambled zeros and the block boundaries for the first blocks comprises:
<claim-text>loading each of a plurality of candidate LFSRs with a set of N received bits;</claim-text>
<claim-text>for each of the candidate LFSRs, comparing 2*M bits from a next set of (M bits followed by 2 unused bits followed by M bits) in the received signal, with a next 2*M bits in an output bit sequence generated by the candidate LFSR; and</claim-text>
<claim-text>selecting as the test LFSR one of the candidate LFSRs where the next 2*M bits in the output bit sequence generated by the candidate LFSR match the next set of (M bits followed by 2 unused bits followed by M bits) in the received signal.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein detecting received bits of the second blocks within the received signal comprises:
<claim-text>using a known good set of bits in the test LFSR to predict a next set of output bits of the test LFSR;</claim-text>
<claim-text>comparing each of a plurality of groups of M consecutive bits within a next received block with a corresponding group of M consecutive bits within the predicted next set of output bits of the test LFSR, and if a comparison result is greater than a threshold considering the groups to be a match;</claim-text>
<claim-text>summing a number of groups within the next received block where there is a match to produce a first sum;</claim-text>
<claim-text>comparing each of a plurality of different groups of M consecutive bits within an immediately subsequent received block after the next received block with a corresponding group of M consecutive bits within the predicted next set of output bits of the test LFSR, and if a comparison result is greater than the threshold considering the groups to be a match;</claim-text>
<claim-text>summing a number of groups within the immediately subsequent received block after the next received block where there is a match, to produce a second sum;</claim-text>
<claim-text>comparing the first sum to the second sum;</claim-text>
<claim-text>when the first sum is less than the second sum, determining that the next received block is a second block comprising the unscrambled Skip Ordered Set data; and</claim-text>
<claim-text>when the first sum is greater than the second sum, determining that the next received block is not a second block.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising detecting received bits of an Update Flow Control packet as an error cluster within the received signal, and in response thereto advancing the test LFSR, ignoring the error cluster in determining the bit error rate, and setting a timeout counter to disable detection of another Update Flow Control packet until a timeout period expires.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising detecting received bits of an End Data Stream packet as a known pattern and in response thereto advancing the test LFSR and utilizing the detected received bits of the End Data Stream packet to determine the bit error rate of the received signal.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising in response to detecting the End Data Stream packet, determining that a next block in the received signal is a second block comprising Skip Ordered Set data, and not advancing the test LFSR for received bits of the next block.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626765-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626765</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12870441</doc-number>
<date>20100827</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>CN</country>
<doc-number>2009 1 0170957</doc-number>
<date>20090827</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>160</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>20</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707737</main-classification>
<further-classification>707782</further-classification>
</classification-national>
<invention-title id="d2e71">Processing database operation requests</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6523036</doc-number>
<kind>B1</kind>
<name>Hickman et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6829610</doc-number>
<kind>B1</kind>
<name>Hickman et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6862593</doc-number>
<kind>B2</kind>
<name>Walters</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7146365</doc-number>
<kind>B2</kind>
<name>Allen et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7340447</doc-number>
<kind>B2</kind>
<name>Ghatare</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7475055</doc-number>
<kind>B2</kind>
<name>Hutchison et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0193622</doc-number>
<kind>A1</kind>
<name>Peleg et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2004/0230552</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0047343</doc-number>
<kind>A1</kind>
<name>Sharony et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370235</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0114303</doc-number>
<kind>A1</kind>
<name>Barsness et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2006/0190460</doc-number>
<kind>A1</kind>
<name>Chandrasekaran et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2007/0016558</doc-number>
<kind>A1</kind>
<name>Bestgen et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0208750</doc-number>
<kind>A1</kind>
<name>Carmeli et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2008/0071755</doc-number>
<kind>A1</kind>
<name>Barsness et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0189239</doc-number>
<kind>A1</kind>
<name>Bawa et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2008/0263001</doc-number>
<kind>A1</kind>
<name>Lohman et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2009/0077011</doc-number>
<kind>A1</kind>
<name>Natarajan et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2009/0089334</doc-number>
<kind>A1</kind>
<name>Mohamed et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707200</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>CN</country>
<doc-number>101030226</doc-number>
<kind>A</kind>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>CN</country>
<doc-number>101124546</doc-number>
<kind>A</kind>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>CN</country>
<doc-number>101446966</doc-number>
<kind>A</kind>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Chen, Qiming et al., User Defined Partitioning&#x2014;Group Data Based on Computation Model, Data Warehousing and Knowledge Discovery: 10th International Conference, 2008, p. 389-401, v 5182 LNCS, Springer Verlag, Palo Alto CA US.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>Wei, Ye, Internet Era Software Revolution: SaaS Architecture Design, Jan. 1, 2009, Electronic Industry Publishing House, English translation of Abstract.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707610</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707737</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707782</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110055151</doc-number>
<kind>A1</kind>
<date>20110303</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Duan</last-name>
<first-name>Ning</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gao</last-name>
<first-name>Bo</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jiang</last-name>
<first-name>Zhong Bo</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tang</last-name>
<first-name>Kai</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Jian Ming</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Duan</last-name>
<first-name>Ning</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Gao</last-name>
<first-name>Bo</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Jiang</last-name>
<first-name>Zhong Bo</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Tang</last-name>
<first-name>Kai</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Jian Ming</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Jordan IP Law, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Gofman</last-name>
<first-name>Alex</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method and system for processing database operation requests, the method comprising: receiving a database operation request from a user; determining whether the database operation request is a heavy-duty request; if the database operation request is a heavy-duty request, routing the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed, and recording the data scope affected by the database operation request into a metadata repository, wherein the heavy-duty request database partition is set besides an original normal database partition.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="220.30mm" wi="357.12mm" file="US08626765-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="220.64mm" wi="177.04mm" file="US08626765-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="203.62mm" wi="179.32mm" file="US08626765-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="231.48mm" wi="146.05mm" orientation="landscape" file="US08626765-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="231.82mm" wi="178.05mm" file="US08626765-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="235.71mm" wi="188.13mm" file="US08626765-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="240.96mm" wi="128.69mm" orientation="landscape" file="US08626765-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present application relates to the field of data processing, particularly, to a processing database requests in an SaaS system.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">The objective of SaaS (Software as a Service) systems is to use software as a service to reduce users' purchase and maintenance costs of software. In the SaaS environment, a large number of users (tenants) share application instances and a database.</p>
<p id="p-0004" num="0003">However, since the database system is shared among different tenants in the SaaS environment, heavy-duty database operations of one tenant may affect other tenants' normal use. Some operations in the database system, e.g., on-boarding of a tenant, data import/export, data migration, data backup/restore and the like during its operation, will occupy a large amount of disk I/O and CPU capacity, thus affecting the system's performance in processing other tenants' requests. A large scale data migration or import may last several hours, during which, the response time to requests of other tenants may be increased, or other tenants could even be unable to access the system normally, which is unacceptable for the other tenants.</p>
<p id="p-0005" num="0004">Traditionally, the most common method for solving the problem is to process heavy duty requests asynchronously. In this method the system finds idle time to process heavy-duty requests to avoid affecting normal processing. However, such a manner of delayed response is unacceptable from the point of view of business requirements. In the SaaS environment, the tenant may not even be willing to agree to asynchronous processing of heavy duty requests. That is to say, in most situations, heavy-duty requests need to be responded to in real time, rather than being processed offline or asynchronously.</p>
<p id="p-0006" num="0005">Another method is to perform rate control on tenant operations, for example, limiting the maximum amount of resources that each tenant can use. However, this prevents the resource utilization from being maximized, and the maximum sharing capability of the system can not be achieved from the perspective of the whole system. In the SaaS environment, resource utilization is a key consideration, and usually, it is necessary to maximize the resource utilization.</p>
<p id="p-0007" num="0006">Therefore, the field needs a more effective method and apparatus for isolating performance influence of application database operations among tenants of the SaaS application.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0008" num="0007">In one aspect of the present application, a method is provided for processing database operation requests, comprising: receiving a database operation request from a user; determining whether the database operation request is a heavy-duty request; if the database operation request is a heavy-duty request, routing the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed, and recording the data scope affected by the heavy-duty database operation request into a metadata repository, wherein the heavy-duty request database partition is set besides an original normal database partition.</p>
<p id="p-0009" num="0008">In another aspect of the present invention, there is provided a system for processing database operation requests, including: a request analyzer for receiving a database operation request from a user and for determining whether the database operation request is a heavy-duty request; and a request processor for, if the database operation request is a heavy-duty request, routing the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed, and recording the data scope affected by the heavy-duty database operation request into a metadata repository, wherein the heavy-duty request database partition is set besides an original normal database partition.</p>
<p id="p-0010" num="0009">The present invention provides an effective method for isolating performance influence among tenants: for tenants that do not have any heavy-duty requests, all their requests are directly routed to a normal database partition, not affected in any way by the processing of heavy-duty requests on a heavy-duty request database partition; the heavy-duty request will get a real time response, rather than a delayed response; the whole system performance is improved, since the heavy-duty requests are routed to a backup partition, and the whole system performance is improved. The method can be easily integrated with the application, and the application can get the benefits of isolating performance influence without any changes or with only a few changes.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE ACCOMPANYING DRAWINGS</heading>
<p id="p-0011" num="0010">The appended claims set forth the inventive features considered characteristic of the present invention. However, the invention itself and its preferred embodiments, objects, features and advantages will be better understood by referring to the detailed description below of the exemplary embodiments when read in conjunction with the accompanying drawings, in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a system for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram of a preparation phase of a method for isolating performance influence of application database operation among SaaS tenants according to an embodiment of the present invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of a runtime phase of a method for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an offline processing phase of a method for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0016" num="0015">Embodiments of the present invention will now be described with reference to the accompanying drawings. In the following description, numerous details are described to enable the present invention to be fully understood. However, it is obvious to those skilled in the art that the realization of the present invention can be achieved without some of these details. In addition, it should be appreciated that the present invention is not limited to the described specific embodiments. In contrast, it is contemplated to implement the present invention by using any combination of the following features and elements, no matter whether they involve different embodiments or not. Therefore, the following aspects, features, embodiments and advantages are only illustrative, rather than elements or limitations of the appended claims, unless explicitly stated otherwise in the claims.</p>
<p id="p-0017" num="0016">According to one embodiment, the present invention provides a method for isolating performance influence among tenants. Performance influence of heavy-duty database operations is isolated among tenants by partitioning the database and routing heavy-duty requests and the normal requests to different partitions. In this method, an additional database node is obtained by partitioning the database, and the additional database node, which can be referred to as a heavy-duty request database partition, is used to temporally store the data generated by the heavy-duty request. The normal database partitions always process normal requests, as the application is running normally, while the heavy-duty request database partition is dedicated to process heavy-duty requests. In this way, the normal request processing is separated from the heavy-duty request processing, so that the performance impact of a heavy-duty request processing on the normal request processing is avoided.</p>
<p id="p-0018" num="0017">Now referring to <figref idref="DRAWINGS">FIG. 1</figref>, a system <b>100</b> is illustrated for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention. As shown, the system <b>100</b> resides between a SaaS application and a partitioned database management system, and preferably is implemented at least partially in a database driver or a wrapper thereof, e.g., a JDBC (Java Database Connectivity) wrapper. The partitioned database system is any partitioned database system known in the art, and includes a normal database partition for storing normal tenant data, and a heavy-duty database partition for storing tenant data generated by heavy-duty requests. The normal database partition and the heavy-duty database partition have different partition keys, e.g., the partition key of the normal database partition is PK=0, while the partition key of the heavy-duty request database partition is PK=1.</p>
<p id="p-0019" num="0018">As shown, the system <b>100</b> for isolating performance influence of application database operations among SaaS tenants may comprise an analyzer <b>110</b>, a request processor <b>120</b>, a metadata repository <b>130</b> and a table transform &#x26; data synchronizer <b>140</b>, wherein the request processor <b>120</b> may further comprise a normal request processor <b>121</b>, a heavy-duty request processor <b>122</b>, and optionally comprises a special tenant processor <b>123</b>. The metadata repository <b>130</b> may store a partition key mapping table, an affected data scope table, and optionally store a special tenant list, etc. The table transform &#x26; data synchronizer <b>140</b> may comprise a table transformer <b>141</b>, a data synchronizer <b>143</b>, and optionally comprise a request and cost statistics collector <b>142</b>.</p>
<p id="p-0020" num="0019">The request analyzer <b>110</b> is for analyzing a database operation request from the SaaS application, identifying whether the request is a normal request or a heavy-duty request. Optionally, the request analyzer <b>110</b> further determines whether the request is a request from a special tenant. Then, the request analyzer <b>110</b> sends the analyzed and identified, and optionally determined request to a respective module to perform respective subsequent processing, e.g., sending a normal request to the normal request processor <b>121</b> to be processed, sending a heavy-duty request to the heavy-duty request processor <b>122</b> to be processed, and sending a request from a special tenant to the special tenant processor <b>123</b> to be processed. A normal request refers to a request that will not bring heavy burden to the database management system, a heavy-duty request refers to a request that will bring heavy burden to the database management system, while a special tenant refers to a tenant frequently issuing heavy-duty requests.</p>
<p id="p-0021" num="0020">The request analyzer <b>110</b> may use various methods to identify whether the database operation request from the SaaS application is a normal request or a heavy-duty request. For example, the developer of the SaaS application may register in advance the heavy-duty SQL statements, which will bring heavy burdens to the database management system, into the metadata repository <b>130</b>. Thus the request analyzer <b>110</b> may determine whether the current request is a heavy-duty request by comparing the SQL statement contained in the current request with the SQL statements registered in the metadata repository <b>130</b>. As another example, the developer of the SaaS application may set specific transactions that will probably cause heavy database system processing load in the application as heavy duty transactions through an AOP (Aspect-Oriented Programming) mechanism or simple programming. Thus, the request analyzer <b>110</b> may determine whether the current transaction is a heavy-duty transaction by reading the setting, and thereby determine whether the current request is a heavy-duty request.</p>
<p id="p-0022" num="0021">Optionally, the request and cost statistics collector <b>142</b> may collect the access statistic information on database access operations of tenants, including the tenant ID, SQL, response time, data size, etc. of every access, identify therefrom the tenants that frequently issue heavy-duty requests, and record these tenants as special tenants in the special tenant list of the metadata repository. In this way, the request analyzer <b>110</b> can determine whether the current request is a request from a special tenant by comparing the tenant issuing the current request with the special tenant list in the metadata repository.</p>
<p id="p-0023" num="0022">The request analyzer <b>110</b> may identify a non-heavy-duty request as a normal request, and optionally, it may identify all the other requests that are neither heavy-duty requests nor requests from the special tenants as normal requests.</p>
<p id="p-0024" num="0023">The normal request processor <b>121</b> is for processing normal database operation requests from the SaaS application sent by the request analyzer <b>110</b>. In response to receiving a normal request, the normal request processor <b>121</b> first determines whether the data requested to be operated belong to an affected data scope by reading the affected data scope table in the metadata repository. If it is determined that the data requested to be operated do not belong to the affected data scope, indicating that the data requested to be operated is only in (and will only be in) the normal database partition, then the normal request processor <b>121</b> adds the partition key of the normal database partition to the SQL statement in the request, and sends the request to the partitioned database management system, so that the partitioned database management system can automatically route the request to the normal database partition to perform corresponding operations according to the partition key. If it is determined that the data requested to be operated belong to the affected data scope, indicating that the data requested to be operated is at least in the heavy-duty database partition, then the normal request processor <b>121</b> does not add the partition keys of the normal database partition and of the heavy-duty request database partition to the SQL statement in the request, and sends the request to the partitioned database management system, so that the partitioned database management system automatically routes the request to the normal database partition as well as the heavy-duty database partition to perform corresponding operations.</p>
<p id="p-0025" num="0024">The heavy-duty request processor <b>122</b> is for processing heavy-duty database operation requests from the SaaS application sent by the request analyzer <b>110</b>. In response to receiving a heavy-duty request, the heavy-duty request processor <b>122</b> further records the data scope affected by the request into the metadata repository. In addition, the heavy-duty request processor <b>122</b> determines whether the heavy-duty request is a data insertion request. If the heavy-duty request is a data insertion request, the heavy-duty request processor <b>122</b> adds the partition key of the heavy-duty request database partition to the SQL statement in the request, and sends the request to the partitioned database management system so that the partitioned database management system can automatically route the request to the heavy-duty database partition to perform corresponding data insertion operations according to the partition key. If the heavy-duty request is not a data insertion request, e.g., a data read or update request, the heavy-duty request processor <b>122</b> does not add the partition keys of the normal database partition or of the heavy-duty database partition to the SQL statement in the request, and sends the request to the partitioned database management system, so that the partitioned database management system can automatically route the request to the heavy-duty database partition and the normal database partition to perform corresponding data update and read operations respectively.</p>
<p id="p-0026" num="0025">Optionally, the special tenant processor <b>123</b> is for processing database operation requests from special tenants sent by the request analyzer <b>110</b>. In response to receiving a request from a special tenant, the special tenant processor <b>123</b> adds the partition key of the heavy-duty request database partition to the SQL statement in the request, and then sends the request to the partitioned database management system, so that the partitioned database management system can automatically route the request to the heavy-duty management system to perform corresponding operations.</p>
<p id="p-0027" num="0026">The affected data scope table in the metadata repository <b>130</b> is for recording the scope of data affected by a heavy-duty request, that is, the scope of data stored in the heavy-duty request database partition. The scope of affected data can be differentiated by tenants of the SaaS application, database tables or other database operations of finer granularity or the combination thereof. For example, <figref idref="DRAWINGS">FIG. 1</figref> exemplifies the contents of an affected data scope table, which shows that the tenant t<b>1</b> and the database table, sales, is an affected data scope, indicating that the data in the table of sales of tenant t<b>1</b> is stored in the heavy-duty request database partition; the type &#x201c;heavy duty&#x201d; indicates that the affected data scope is generated by a heavy duty request, and the time stamp shows the time of generating the corresponding data in the heavy-duty request database; in addition, it is shown that the tenant t<b>2</b> and the database table, sales, is another affected database scope, indicating that data in the table of sales of tenant t<b>2</b> are stored in the heavy-duty request database partition, and the type &#x201c;special&#x201d; indicates that the affected data scope is generated according to a special tenant, and the time stamp shows the time of generating the corresponding data in the heavy-duty request database partition.</p>
<p id="p-0028" num="0027">The table transformer <b>141</b> is for modifying the database tables in the normal database partitions, so as to add a partition key field to each database table, and for duplicating the structures of the database tables in the normal database partition into the heavy-duty request database partition. The table transformer <b>141</b> may execute the above operations in a preparation phase, e.g., when the SaaS application is installed.</p>
<p id="p-0029" num="0028">The request and cost statistics collector <b>142</b>, as described above, is for identifying special tenants that frequently issue heavy-duty requests by collecting the statistic information on the database operation requests of tenants, and for storing the special tenants in the special tenant list of the metadata repository.</p>
<p id="p-0030" num="0029">The data synchronizer <b>143</b> causes data in a partition to be automatically moved to another partition by modifying the partition key of the data in the partition. For example, the data synchronizer <b>143</b> may modify the partition key of the data in the heavy-duty request database partition when the system is idle to make the partitioned database management system automatically synchronize the data to the normal partition according to the modified partition key, and modify the affected data scope table in the metadata repository to reflect the current data status, e.g., deleting the affected data scope related to the data which have been synchronized to the normal database partition. After the synchronization, a future access request to the corresponding data only needs to be routed to the normal database partition, without being routed to the heavy-duty database partition, making the system more efficient.</p>
<p id="p-0031" num="0030">In addition, the data synchronizer <b>143</b> can move the data of a special tenant as identified by the request and cost statistics collector <b>142</b> from the normal database partition to the heavy-duty database partition by modifying the partition key of the data of the special tenant in the normal database partition.</p>
<p id="p-0032" num="0031">Above are described embodiments of the present invention by referring to the accompanying drawings. It should be noted that the above descriptions are only exemplary illustrations, and not limitations to the present invention. The embodiments of the present invention can have more, less or different modules; and the containment and connection relationships among different modules can be different from what is described. For example, in some embodiments of the present invention, two or more heavy-duty request database partitions can be included; in some other embodiments of the present invention, the special tenant processor <b>123</b> and the functions of identifying and processing special tenants may no be included, and so on. All these variations are within the spirit and scope of the present invention.</p>
<p id="p-0033" num="0032">Now referring to <figref idref="DRAWINGS">FIG. 2</figref>, a flow diagram shows the preparation phase of a method for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention. The preparation phase can be performed before the SaaS application starts, e.g., when the SaaS application is installed. As shown, the preparation phase includes the following steps.</p>
<p id="p-0034" num="0033">In step <b>201</b>, a partition key field is added to the database tables for storing tenant data of the SaaS application.</p>
<p id="p-0035" num="0034">In step <b>202</b>, an extra heavy-duty request database partition is added to the partitioned database management system of the SaaS application, resulting in the partitioned database management system including: the original normal database partition and the newly added heavy-duty request database partition, and the database tables for storing tenant data in the normal database partitions are duplicated to the heavy-duty request database partition.</p>
<p id="p-0036" num="0035">In step <b>203</b>, a different partition key is designated for each database partition, and the mapping between the partition keys and the database partitions is maintained in the metadata repository.</p>
<p id="p-0037" num="0036">Steps <b>201</b>, <b>202</b>, and <b>203</b> can be executed by the table transformer <b>141</b> described above.</p>
<p id="p-0038" num="0037">Now referring to <figref idref="DRAWINGS">FIG. 3</figref>, a flow diagram shows a runtime phase of the method for isolating performance influence of the application database operations among SaaS tenants. This phase can be executed while the SaaS application is running. As shown, the runtime phase includes the following steps.</p>
<p id="p-0039" num="0038">In step <b>301</b>, in response to receiving a request from a tenant, the tenant sending the request is identified.</p>
<p id="p-0040" num="0039">In an optional step <b>302</b>, it is determined whether the request is from a special tenant by comparing the identified tenant with a special tenant list in the metadata repository.</p>
<p id="p-0041" num="0040">In response to a determination that the tenant making the request is a special tenant, optional steps <b>303</b> and <b>304</b> are performed. In response to the determination being no, step <b>305</b> is performed.</p>
<p id="p-0042" num="0041">In the optional step <b>303</b>, the request is sent to the special tenant processor to be processed.</p>
<p id="p-0043" num="0042">In the optional step <b>304</b>, the special tenant processor adds a partition key of the heavy-duty database partition to the request, e.g., adding the partition keys as a conditional clause into the SQL statement of the request, so that the partitioned database management system can automatically send the request to the heavy-duty request database partition to be processed.</p>
<p id="p-0044" num="0043">In step <b>305</b>, it is determined whether or not the request is a heavy-duty request. If the determination is no, step <b>306</b> is performed; if the determination is yes, step <b>311</b> is performed.</p>
<p id="p-0045" num="0044">In step <b>306</b>, the request is sent to the normal request processor.</p>
<p id="p-0046" num="0045">In step <b>307</b>, the normal request processor reads the affected data scope table in the metadata repository.</p>
<p id="p-0047" num="0046">In step <b>308</b>, the normal request processor determines whether the data involved in the request belongs to the affected data scope according to the affected data scope table. If the determination is no, step <b>309</b> is performed; if the determination is yes, step <b>310</b> is performed.</p>
<p id="p-0048" num="0047">In step <b>309</b>, since the data involved in the request do not belong to the affected data scope, indicating that the data only exist in the normal database partition and not in the heavy-duty database partition, the partition key of the normal database partition is added to the request. For example, the partition key is added to the SQL statement of the request as a conditional clause. Then the request is sent to the partitioned database management system, so that the partitioned database management system can automatically route the request to the normal database partition to be processed according to partition key.</p>
<p id="p-0049" num="0048">In step <b>310</b>, since the data involved in the request do belong to the affected data scope, indicating that the data at least exist in the heavy-duty request database partition, the partition keys of the normal database partition and of the heavy-duty request database partition are not added to the SQL statement of the request, and the request is sent directly to the partitioned database management system, so that the partitioned database management system can automatically route the request to the normal database partition as well as the heavy-duty request database partition.</p>
<p id="p-0050" num="0049">In step <b>311</b>, the request is sent to the heavy-duty request processor.</p>
<p id="p-0051" num="0050">In step <b>312</b>, the heavy-duty processor updates the affected data scope table in the metadata repository to record the data scope affected by the current request into the affected data scope table.</p>
<p id="p-0052" num="0051">In step <b>313</b>, the heavy-duty request processor determines whether the request is a data insertion request. If the determination is yes, step <b>314</b> is performed; if the determination is no, step <b>315</b> is performed.</p>
<p id="p-0053" num="0052">In step <b>314</b>, the heavy-duty request processor adds the partition key of the heavy-duty request database partition to the request, e.g., adding the partition key into the SQL statement of the request as a conditional clause, and then sends the request to the partitioned database management system, so that the partitioned database management system can automatically route the request to the heavy-duty database partition to be processed according to the partition key.</p>
<p id="p-0054" num="0053">In step <b>315</b>, the heavy-duty request processor does not add the partition keys of the normal database partition or of the heavy-duty request database partition to the SQL statement of the request, and sends the request to the partitioned database management system, so that the partitioned database management system can automatically route the request to the normal database partition as well as the heavy-duty database partition to be processed.</p>
<p id="p-0055" num="0054">In some embodiments of the invention, the above steps <b>313</b> and <b>315</b> may not be included. Rather, step <b>314</b> is performed after step <b>312</b>. In addition, in some embodiments of the invention, step <b>312</b> can be performed after step <b>314</b> or <b>315</b>.</p>
<p id="p-0056" num="0055">Now referring to <figref idref="DRAWINGS">FIG. 4</figref>, a flow diagram shows an offline process phase of the method for isolating performance influence of application database operations among SaaS tenants according to an embodiment of the present invention. As shown, the phase includes the following steps.</p>
<p id="p-0057" num="0056">In step <b>401</b>, the system is in an idle state. Subsequently, steps <b>402</b> and <b>404</b> are performed respectively.</p>
<p id="p-0058" num="0057">In step <b>402</b>, the data synchronizer causes the partitioned database management system to automatically synchronize the data in the heavy-duty database partition to the normal database partition, by modifying the partition key of the data in the heavy-duty database partition into the partition key of the normal database partition.</p>
<p id="p-0059" num="0058">In step <b>403</b>, the affected data scope table in the metadata repository is updated to remove the affected data scope related to the synchronized data.</p>
<p id="p-0060" num="0059">In step <b>404</b>, the request and cost statistics collector collects the statistic information on the database accesses of all tenants, including tenant IDs, SQL statements, response times, data sizes, etc.</p>
<p id="p-0061" num="0060">In step <b>405</b>, the request and cost statistics collector identifies a special tenant that frequently issues heavy-duty requests according to the collected statistic information.</p>
<p id="p-0062" num="0061">In step <b>406</b>, the identified tenant is stored in a special tenant list of the metadata repository as a special tenant.</p>
<p id="p-0063" num="0062">Above is described the method for isolating the performance influence of application database operations among SaaS tenants according to an embodiment of the present invention. It should be noted that the above description is only exemplary, not limitation to the present invention. In other embodiments of the invention, the method can have more, less or different steps. For example, in some embodiments of the present invention, step <b>302</b> for determining whether the request is from the special tenant, as well as the corresponding processing steps <b>303</b> and <b>304</b> for the special tenant may not be included; in some embodiments of the present invention, step <b>306</b> for sending the request to the normal request processor, step <b>311</b> for sending the request to the heavy-duty request processor and step <b>303</b> for sending the request to the special tenant processor may not be included, rather, the request is processed directly according to the analysis of the request; in addition, the above steps may be merged and generalized, e.g., the above steps <b>313</b>, <b>314</b>, <b>315</b> may be merged into one step, in which, if the database operation request is a heavy-duty request, then the database operation request is routed to the heavy-duty partition for processing heavy-duty requests, etc. All these variations are within the spirit and scope of the present invention.</p>
<p id="p-0064" num="0063">The present invention can be implemented in hardware, software, or a combination thereof. The present invention can be implemented in a computer system in a centralized manner, or in a distributed manner, in which, different components are distributed in some interconnected computer system. Any computer system or other devices suitable for executing the method described herein are appropriate. A typical combination of hardware and software can be a computer system with a computer program, which, when loaded and executed, controls the computer system to execute the method of the present invention, and constitute the apparatus of the present invention.</p>
<p id="p-0065" num="0064">The present invention can also be embodied in a computer program product, comprising a computer readable storage medium with a computer program or program modules encoded thereon. The program can implement all the features of the method described herein, and when loaded into a computer system, can execute the method.</p>
<p id="p-0066" num="0065">Although the present invention has been illustrated and described with reference to the preferred embodiments, those skilled in the art will understand that various changes both in form and details may be made thereto without departing from the spirit and scope of the present invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for processing database operation requests, comprising:
<claim-text>a computer receiving a database operation request from a user;</claim-text>
<claim-text>the computer determining whether the database operation request is a heavy-duty request by comparing at least one parameter of the request with a predefined heavy-duty value for the at least one parameter;</claim-text>
<claim-text>if the database operation request is a heavy-duty request, the computer routing the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed, and recording the data scope affected by the database operation request into a metadata repository;</claim-text>
<claim-text>wherein the heavy-duty request data partition is set besides an original normal database partition;</claim-text>
<claim-text>determining whether the database operation request is from a special tenant frequently issuing heavy-duty requests, wherein the data of the special tenant is duplicated from the normal database partition to the heavy-duty database partition;</claim-text>
<claim-text>if the database operation request is from the special tenant, adding a partition key of the heavy-duty request database partition to the database operation request;</claim-text>
<claim-text>sending the database operation request with the added partition key to a management system for the partitioned database; and</claim-text>
<claim-text>when the system is idle, synchronizing the data in the heavy-duty request database partition to the normal database partition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the normal database partition and the heavy-duty database partition have the same table structure including a partition key field, and the normal database partition and the heavy-duty request database partition have different partition keys.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein routing the database operation request to the heavy-duty request database partition for processing heavy-duty requests to be processed comprising:
<claim-text>adding the partition key of the heavy-duty database partition to the database operation request; and</claim-text>
<claim-text>sending the database operation request with the added partition key to a management system for the partitioned database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:
<claim-text>if the database operation request is not a heavy-duty request, further determining whether the data involved in the database operation request belong to the affected data scope recorded in the metadata repository; and</claim-text>
<claim-text>if the data involved in the database operation request belong to the affected data scope recorded in the metadata repository, sending the database operation request to the partitioned database management system without adding the partition keys of the normal database partition or of the heavy-duty request database partition to the database operation request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:
<claim-text>if the data involved in the database operation request do not belong to the affected data scope recorded in the metadata repository, adding the partition key of the normal database partition to the database operation request, and sending the database operation request with the added partition key to the partitioned database management system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein routing the data operation request to the heavy-duty database partition for processing heavy-duty requests to be processed comprises:
<claim-text>determining whether the database operation request is a data insertion request;</claim-text>
<claim-text>if the database operation request is a data insertion request, adding the partition key of the heavy-duty database partition to the database operation request; and</claim-text>
<claim-text>sending the database operation request with the partition key added to the partitioned database management system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:
<claim-text>if the database operation request is not a data insertion request, sending the database operation request to the partitioned database management system without adding the partition keys of the normal database partition or of the heavy-duty database partition to the database operation request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of claim one wherein the at least one parameter is an SQL statement in the request and the predetermined value is an SQL statement registered in a metadata repository.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of claim one wherein the at least one parameter is a tenant identification of a requestor of the request and the predetermined value is a tenant identification registered in a metadata repository based on past usage.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A system, at least partly implemented in hardware, for processing database operation requests, comprising:
<claim-text>a request analyzer receiving a database operation request from a user and determining whether the database operation request is a heavy-duty request by comparing at least one parameter of the request with a predefined heavy-duty value for the at least one parameter;</claim-text>
<claim-text>a request processor routing the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed and recording the data scope affected by the database operation request into a metadata repository, if the database operation request is a heavy-duty request;</claim-text>
<claim-text>wherein the heavy-duty request database partition is set besides a normal database partition;</claim-text>
<claim-text>wherein the request analyzer further determines whether the database operation request is from a special tenant frequently issuing heavy-duty requests, and if the request is from a special tenant duplicating the data of the special tenant from the normal database partition to the heavy-duty database partition;</claim-text>
<claim-text>the request processor further adds the partition key of the heavy-duty request database partition to the database operation request and sends the database operation request with partition key added to a management system the partitioned database if the database operation request is from the special tenant; and</claim-text>
<claim-text>a data synchronizer that synchronizes the data in the heavy-duty request database partition to the normal database partition when the system is idle.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the normal database partition and the heavy-duty database partition have the same table structure including a partition field, and the normal database partition and the heavy-duty request database partition have different partition keys.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the request processor comprises:
<claim-text>means for adding the partition key of the heavy-duty request database partition to the database operation request; and</claim-text>
<claim-text>means for sending the database operation request with the partition key added to a management system for the partitioned database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the request processor further comprises:
<claim-text>means for, if the database operation request is not a heavy-duty request, further determining whether the data involved in the database operation request belong to the affected data scope recorded in the metadata storage; and</claim-text>
<claim-text>means for, if the data involved in the database operation request belong to the affected data scope recorded in the metadata repository, sending the data operation request to the partitioned database management system without adding the partition keys of the normal database partition or of the heavy-duty request database partition to the database operation request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the request processor further comprises:
<claim-text>means for, if the data involved in the database operation request do not belong to the affected data scope recorded in the metadata repository, adding the partition key of the normal database partitions to the database operation request, and sending the database operation request with the added partition key to the partitioned database management system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the request processor comprises:
<claim-text>means for determining whether the database operation request is a data insertion request;</claim-text>
<claim-text>means for, if the database operation request is a data insertion request, adding the partition key of the heavy-duty database partition to the database operation request; and</claim-text>
<claim-text>means for sending the database operation request with the added partition key to the partitioned database management system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the request processor further comprises:
<claim-text>means for, if the database operation request is not a database insertion request, sending the database operation request to the partitioned database management system without adding the partition keys of the normal database partition or of the heavy-duty database partition to the database operation request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A computer program product comprising:
<claim-text>A non-transitory computer readable storage medium; and</claim-text>
<claim-text>computer usable code stored on the non-transitory computer readable storage medium, where, if executed by a processor, the computer usable code causes a computer to:
<claim-text>receive a database operation request from a user;</claim-text>
<claim-text>compare at least one parameter of the request with a predefined heavy-duty value for the at least one parameter to determine whether the database operation request is a heavy-duty request;</claim-text>
<claim-text>if the database operation request is a heavy-duty request:
<claim-text>route the database operation request to a heavy-duty request database partition for processing heavy-duty requests to be processed;</claim-text>
<claim-text>record the data scope affected by the database operation request into a metadata repository;</claim-text>
</claim-text>
<claim-text>determine whether the database operation request is from a special tenant frequently issuing heavy-duty requests, the data of the special tenant duplicated from a normal database partition to the heavy-duty database partition;</claim-text>
<claim-text>add a partition key of the heavy-duty request database partition to the database operation request if the database operation request is from the special tenant;</claim-text>
<claim-text>send the database operation request with the added partition key to a management system for the partitioned database; and</claim-text>
<claim-text>synchronize the data in the heavy-duty request database partition to the normal database partition when the system is idle.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

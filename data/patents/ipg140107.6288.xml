<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627440-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627440</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12647327</doc-number>
<date>20091224</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>392</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 10</main-classification>
<further-classification>726  3</further-classification>
<further-classification>726  5</further-classification>
<further-classification>713151</further-classification>
<further-classification>713155</further-classification>
<further-classification>713168</further-classification>
<further-classification>380279</further-classification>
</classification-national>
<invention-title id="d2e53">PassThru for client authentication</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5923756</doc-number>
<kind>A</kind>
<name>Shambroom</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6081900</doc-number>
<kind>A</kind>
<name>Subramaniam et al.</name>
<date>20000600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6205482</doc-number>
<kind>B1</kind>
<name>Navarre et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6367009</doc-number>
<kind>B1</kind>
<name>Davis et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6633979</doc-number>
<kind>B1</kind>
<name>Smeets</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6643774</doc-number>
<kind>B1</kind>
<name>McGarvey</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713155</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7096352</doc-number>
<kind>B2</kind>
<name>Kang et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2001/0020274</doc-number>
<kind>A1</kind>
<name>Shambroom</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0005286</doc-number>
<kind>A1</kind>
<name>McGarvey</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2003/0120948</doc-number>
<kind>A1</kind>
<name>Schmidt et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2003/0126464</doc-number>
<kind>A1</kind>
<name>McDaniel et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0074126</doc-number>
<kind>A1</kind>
<name>Stanko</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>380279</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  5</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 10</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713155</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713156</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713159</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713168</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>380279</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223-226</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709237</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10413799</doc-number>
<date>20030415</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7644275</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12647327</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100100953</doc-number>
<kind>A1</kind>
<date>20100422</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mowers</last-name>
<first-name>David R.</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Simon</last-name>
<first-name>Daniel R.</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Leach</last-name>
<first-name>Paul J.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Banes</last-name>
<first-name>John A.</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Mowers</last-name>
<first-name>David R.</first-name>
<address>
<city>Issaquah</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Simon</last-name>
<first-name>Daniel R.</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Leach</last-name>
<first-name>Paul J.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Banes</last-name>
<first-name>John A.</first-name>
<address>
<city>Kirkland</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lee &#x26; Hayes, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zee</last-name>
<first-name>Edward</first-name>
<department>2435</department>
</primary-examiner>
<assistant-examiner>
<last-name>To</last-name>
<first-name>Baotran N</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">This disclosure pertains generally to client authentication. One aspect of the disclosure relates to a first server for presenting evidence to a Domain Controller (DC) of a first authentication context being submitted from a client to the first server to obtain a delegable credential, wherein the credential can be used to request a second authentication context from that client to a second server. Another aspect relates to the first server providing a pass-thru with evidence to a DC. The evidence relates to a first authentication context being submitted from a client to the first server that it obtained a delegable credential. The pass-thru is used in combination with the credential to request a second authentication context from the client to a second server.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="203.20mm" wi="196.60mm" file="US08627440-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="194.06mm" wi="202.61mm" file="US08627440-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="191.09mm" wi="158.75mm" file="US08627440-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="271.78mm" wi="199.98mm" file="US08627440-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="186.77mm" wi="158.75mm" file="US08627440-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="233.76mm" wi="158.75mm" file="US08627440-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="261.62mm" wi="177.88mm" file="US08627440-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="208.53mm" wi="186.18mm" file="US08627440-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="268.56mm" wi="210.57mm" file="US08627440-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a divisional of, and claims priority to, U.S. patent application Ser. No. 10/413,799, filed on Apr. 15, 2003, the disclosure of which is incorporated by reference herein.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This disclosure relates to authentication, and more particularly to client authentication.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">With increased network usage, there is a need to improve the security of communications between clients and servers in a networked setting such as the Internet. Authentication protocols, which tend to prove that a communication came from whom it was stated to have originated, provide an important aspect of security.</p>
<p id="p-0005" num="0004">Certain authentication protocols provide server authentication (by which a server is authenticated to a client). Some embodiments of security systems that provide server authentication allow for the server to interface with a domain controller (DC) that can present evidence to the DC of an authentication request by using a non-delegable credential (such as a certificate). Even if such server authentication results, these non-delegable credentials are not used to authenticate another server to the same client. In networked configurations, a series of servers often are used to access desired data for the client. For example, a web server may access a Structured Query Language (SQL) database data contained in an SQL server, documents contained in a file server, or other data contained in another server. Using non-delegable credentials, each successive server has to be authenticated if it is desired to maintain channels between the client and each successively accessed server.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">Throughout the drawings, the same numbers reference like features and components.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of one embodiment of a computer environment including a plurality of secure channels;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a diagram of one embodiment of a security protocol;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a block diagram of one embodiment of a client-server configuration in a computer environment;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a block diagram of another embodiment of a client-server configuration in a computer environment;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a signal diagram of one embodiment of a handshake between a client and a server including client authentication;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a flow chart of one embodiment of a handshake including client authentication;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a flow chart of one embodiment of a pass-thru with evidence that is used to generate a second ticket;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a signal diagram of one embodiment of a pass-thru with evidence; and</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a block diagram of one embodiment of a computer environment including a plurality of computers that can communicate using the security protocol.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">Server authentication is typically applied in certain prior art network systems by which the server is authenticated to the client. This disclosure provides for client authentication for a server to &#x201c;prove&#x201d; to a Domain Controller (DC) <b>32</b> or other authentication authority (AA) that a particular user/client is authenticated to that server. The client authentication mechanism uses client credentials (e.g., certificates, key pairs, digital identities, etc.) through a relative secure connection such as a Secure Sockets Layer (SSL)/Transport Layer Security (TLS) connection. SSL is a security protocol that was developed by the Netscape&#xae; Communications Corporation to make certain Internet transactions more secure. TLS is a standardized security protocol as set forth in IETF RFC 2246 v1.0, entitled &#x201c;The TLS Protocol&#x201d; (which is hereby incorporated by reference in its entirety herein). TLS is standardized by the Transport Layer Security Working Group of the IETF (Internet Engineering Task Force), and represents the working group responsible for standardizing such transport layer protocols as SSL.</p>
<p id="p-0017" num="0016">Many embodiments of the SSL security protocol and the TLS security protocol cannot interface. Although there are some slight differences between SSL.v3 and TLS.v1, these security protocols are quite similar. This disclosure refers to the security protocols inclusively as &#x201c;SSL/TLS&#x201d;, and the combined security protocols with a handshake as &#x201c;SSL/TLS handshake with pass-thru&#x201d; <b>340</b>.</p>
<p id="p-0018" num="0017">The term &#x201c;SSL/TLS&#x201d; as used in this disclosure relates to any combination of the SSL security protocol and/or the TLS security protocol, or modifications of, derivatives from, or closely developed protocols from, either the SSL security protocol or the TLS security protocol. One difference between SSL and TLS is that the TLS.v1 security protocol applies the Hashed Message Authentication Code (HMAC) algorithm while the SSL.v3 security protocol applies the Message Authentication Code (MAC) algorithm. The HMAC provides an integrity check value like the MAC, but the HMAC algorithm is generally more difficult to break.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> illustrates one embodiment of a computer environment <b>500</b> including the client C, a first server S<b>1</b>, a second server S<b>2</b>, and the DC <b>32</b>. A network <b>34</b> is provided between the client C, the server S<b>1</b>, the second server S<b>2</b>, and the DC <b>32</b> over which these devices can transfer data in a manner known in network technologies. A connection <b>29</b> connects the client C to the network <b>34</b>. A connection <b>31</b> connects the server S<b>1</b> to the network <b>34</b>. A connection <b>31</b><i>a </i>connects the server S<b>2</b> to the network <b>34</b>. A third party <b>35</b> is connected to the network <b>34</b> by a connection <b>37</b>. In one embodiment, the network <b>34</b> is the Internet and the server S<b>1</b> is a web server. A user at the client C can thereby access data from the server S<b>1</b>.</p>
<p id="p-0020" num="0019">The connections <b>29</b>, <b>31</b>, and <b>31</b><i>a </i>can represent indirect connections from the respective client C and servers S<b>1</b> and S<b>2</b> to the network <b>34</b>. As is the case with such networks <b>34</b> as the Internet that rely predominantly on indirect connections, data transmitted between the client C and the server S<b>1</b> (or data transmitted between the client C and the server S<b>2</b>) can be accessed by third parties <b>35</b> using known eavesdropping techniques. To reduce the possibility of eavesdropping by undesired third parties, a secure channel <b>36</b> is established between the client C and the server S<b>1</b>. Similarly, a secure channel <b>36</b><i>a </i>is established between the client C and the server S<b>2</b>.</p>
<p id="p-0021" num="0020">Data transmitted between the client C and the server S<b>1</b> can travel on the secure channel <b>36</b>. Data transmitted between the client C and the second server S<b>2</b> can travel on the secure channel <b>36</b><i>a</i>. The secure channel <b>36</b> is established using server credentials such as a certificate. In certain embodiments, the credential is delegable. In those embodiments that the credential is delegable (such as is the case with Basic authentication for example), then another secure channel could be established between S<b>1</b> and S<b>2</b>. SSL/TLS does not rely on the client authentication credential for establishment of the secure channel. The secure channel can be provided based on the server credential (or no credential at all in the case of an anonymous DH).</p>
<p id="p-0022" num="0021">This disclosure is largely directed to authentication and, more particularly, client authentication to servers (in addition to server authentication to clients). In this disclosure, authentication provides proof to a receiving device or a user that data received from the supposed source actually originated from that source. The SSL/TLS handshake with pass-thru <b>340</b> of this disclosure provides a mechanism (that relies on an SSL/TLS handshake as described herein) by which securely transmitted data can be authenticated. The data transmitted over a secure channel can be encrypted to transmit the signal over the channel, and then decrypted after is has been transmitted over the channel. Decryption is the inverse operation of encryption. Symmetric and asymmetric algorithms are both relied on to provide such encryption and decryption.</p>
<p id="p-0023" num="0022">Cryptography, which the SSL/TLS handshake with pass-thru <b>340</b> utilizes for its security, is heavily processor intensive. As such, if certain types of cryptography is applied to such networks as the Internet, the Website's performance may be diminished. Although the SSL/TLS handshake with pass-thru <b>340</b> is relatively efficient and resourceful, the SSL/TLS protocol (as with any protocol) is only as fast as the encryption rate which, in turn, is influenced by the processor speed of the computer.</p>
<p id="p-0024" num="0023">A Secure Channel (SChanel, one embodiment produced and distributed by Microsoft) as applied within this disclosure is a protocol suite that includes a plurality of industry standard protocols. In this disclosure, the term &#x201c;secure channel&#x201d; refers to a channel that has an adequate security level considering current encryption and authentication techniques (e.g., sufficient from the viewpoint of the designer of software running on the client and/or server). One embodiment of the protocols included in SChannel includes Transport Layer Security (TLS) version 1.0, Secure Sockets Layer (SSL) version 3.0, Secure Sockets Layer (SSL) version 2.0, and Private Communication Technology (PCT) 1.0.</p>
<p id="p-0025" num="0024">Certain embodiments of SChannels can provide authentication through mapping of credentials (e.g., certificates). If a server authenticates a client computer C, the user at that client computer can be provided an option of certain mapping aspects of the client's credentials into the Windows user account. For example, this authentication mapping can be done as a 1-to-1 mapping (as shown in certain embodiments of <figref idref="DRAWINGS">FIG. 9</figref>) or as a many-to-1 mapping (as shown in certain embodiments of <figref idref="DRAWINGS">FIGS. 3 and 4</figref>). If client authentication is enabled, the server will search for, and associate, the credentials with the Windows user account. This association allows a user to manage their clients through an Active Directory.</p>
<p id="p-0026" num="0025">Certain embodiments of the SSL/TLS handshake with pass-thru <b>340</b> can only protect data that is being transferred, and cannot ensure data integrity if the data is compromised on the application level. The SSL/TLS handshake with pass-thru <b>340</b> can securely deliver data from one end of a network to another end of the network in a manner that reduces the possibility of eavesdropping or data modification.</p>
<p id="p-0027" num="0026">One embodiment of the SSL/TLS handshake with pass-thru <b>340</b> can be performed within an SSL/TLS security protocol <b>300</b> as shown in <figref idref="DRAWINGS">FIG. 2</figref> that includes an application layer <b>302</b>, a handshake protocol suite <b>304</b>, a record layer <b>306</b>, and a TCP/IP transport layer <b>308</b>. The handshake protocol suite <b>304</b> and the record layer <b>306</b> together are considered to be a SSL/TLS layer <b>309</b>. The application layer <b>302</b> includes such illustrative programs as Hypertext Transport Protocol (HTTP) <b>310</b>, File transport protocol (FTP) <b>312</b>, and TELNET <b>314</b>.</p>
<p id="p-0028" num="0027">The handshake protocol suite <b>304</b> includes such illustrative components that provide for handshakes as an alert protocol <b>316</b>, a change cipher protocol <b>318</b>, and a handshake protocol <b>320</b>. The record layer <b>306</b> includes, for example, a record layer protocol <b>322</b>. The TCP/IP transport layer <b>308</b> includes such illustrative protocols as a transport control protocol/internet control protocol (TCP/IP) <b>324</b> which controls the transport of data across the network between the client and server computers. The SSL/TLS security protocol <b>300</b> can support any application level protocol since it works between the application layer <b>302</b> and the TCP/IP transport layer <b>308</b>.</p>
<p id="p-0029" num="0028">The change cipher protocol <b>318</b> is used where the client C is determining whether to go ahead with the negotiated encryption keys and hash algorithms. The change cipher protocol <b>318</b> can maintain the cipher specification using the &#x201c;Change Cipher Spec:none&#x201d; command, which indicates that the current or negotiated encryption method is satisfactory to the client.</p>
<p id="p-0030" num="0029">One embodiment of the handshake protocol suite <b>304</b> includes a set of exchanges that provides client and server authentications. The handshake protocol suite <b>304</b> negotiates the encryption, hash, and compression algorithms. For authentication purposes, a credential (such as a certificate) provides strong evidence to a second party that a user providing the credential is the person owning (i.e., described in) the credential. The credential is a form of identification that is issued by a trusted third party such as an authentication authority (AA), one embodiment of which is a certificate authority (CA). The credential typically includes information describing the name of the user, the validity period of the credential, the user's public key, a serial number, and a digital signature issued by the issuer.</p>
<p id="p-0031" num="0030">A credential issued by an authentication authority (AA) can be used to verify the identity of a particular user. The AA is a mutually trusted third party that confirms the identity of a requestor of a credential, then issues to the requestor the credential binding their identity to a public key. AA's also renew and revoke credentials as necessary. For example, if the client is presented with the server's credentials, then the client computer will try to match the server's AA against the client's credential store that includes a listing of all trusted AAs. If the issuing AA is a trusted AA, then the client will accept the credential as proof of identity of the second party.</p>
<p id="p-0032" num="0031">Public key encryption relies on a key pair including a private key and a public key. The private key can be used to sign a message (including data) that is sent from a first user/computer to a second user/computer, wherein that message is validated by the public key at the second user/computer. The public key can be used to encrypt a message (including data) that is sent from the second user/computer to the first user/computer, wherein that message is decrypted by the private key.</p>
<p id="p-0033" num="0032">The SSL/TLS handshake with pass-thru <b>340</b> provides a mechanism with strong authentication, message privacy, and integrity. The SSL/TLS handshake with pass-thru <b>340</b> provides the ability to secure transmitted data using encryption as well as a data integrity check (using, for example, a Hashed Message Authentication Code [HMAC]). Attacks that can be directed against the SSL/TLS handshake with pass-thru <b>340</b> include masquerade attacks, man-in-the-middle attacks, rollback attacks, and replay attacks.</p>
<p id="p-0034" num="0033">The SSL/TLS handshake with pass-thru <b>340</b> usually offers server authentication and often client authentication, as described herein. The disclosure provides a flow chart of certain embodiments of the SSL/TLS handshake with pass-thru <b>340</b> in <figref idref="DRAWINGS">FIG. 5</figref> that provide both server authentication and client authentication.</p>
<p id="p-0035" num="0034">The different embodiments of the SSL/TLS handshake with pass-thru <b>340</b> can work with most browsers including (but not limited to) Microsoft&#xae; Internet Explorer&#xae; and Netscape&#xae; Navigator&#xae;. The SSL/TLS handshake with pass-thru <b>340</b> will work on most operating systems including (but not limited to) Microsoft Windows&#xae;, Unix, Novell&#xae;, Netscape Enterprise Server&#xae;, Oracle&#xae;, and Sun Solaris&#xae;. Certain embodiments of the SSL/TLS handshake with pass-thru <b>340</b> also provide a choice of authentication mechanisms, encryption algorithms, and hashing algorithms. The SSL/TLS handshake with pass-thru <b>340</b> is largely application program protocol independent.</p>
<p id="p-0036" num="0035">Since the client authentication (as represented by a SSL/TLS handshake with pass-thru <b>340</b> as will subsequently be described relative to <figref idref="DRAWINGS">FIG. 5</figref>) is layered beneath the application layer, most of its workings are completely invisible to the client. The SSL/TLS handshake with pass-thru <b>340</b> encrypts confidential data sent over an insecure connection such as the Internet. The types of data encrypted with the SSL/TLS handshake with pass-thru <b>340</b> include, for example, the Universal Resource Locator (URL), the Hypertext Transfer Protocol (HTTP) header, cookies, and form content. A web page secured with an SSL/TLS handshake with pass-thru <b>340</b> will typically have a URL which begins with the recognized address &#x201c;https://&#x201d;.</p>
<p id="p-0037" num="0036">One aspect of this disclosure relates to server S<b>1</b> proving to an authentication authority that it authenticated. Transmitted credentials (such as a certificate) that provide the authentication of a particular server S<b>1</b> to the particular client C (or vice versa) is described in this disclosure as an authentication context. Because current authentication contexts apply only to a single local server, known prior art authentication systems do not allow for a second local server S<b>2</b> to receive a request from the first server S<b>1</b> to confirm that the user was appropriately authenticated by that first server S<b>1</b>.</p>
<p id="p-0038" num="0037">The present disclosure provides for an authentication context mechanism that allows the second server S<b>2</b> to confirm that a user at a client C was appropriately authenticated by the first server S<b>1</b>, once it receives the appropriate authentication from server S<b>1</b>.</p>
<p id="p-0039" num="0038">This disclosure also describes certain embodiments of the delegation of authentication contexts. A pass-thru mechanism is often provided to allow for a delegation of authentication contexts. When a security authentication context is delegated, a particular client authentication for a client C to a first server S<b>1</b> is delegated to another client authentication from the same client C to a second server S<b>2</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>. Certain prior art authentication contexts are not delegated because the authentication context is only used locally for a specified user/client pair to a specified server.</p>
<p id="p-0040" num="0039">Providing a pass-thru mechanism for the delegation of client C authentication contexts from server S<b>1</b> to the second server S<b>2</b> has a variety of applications. For example, assume that a user at a given client computer C is signing on with first server computer S<b>1</b> over a network wherein client authentication (as well as server authentication) is to be provided to establish a secure channel. In Internet embodiments, the first server S<b>1</b> is likely to be a web server. In networked embodiments including the Internet (such as shown in <figref idref="DRAWINGS">FIGS. 3 and 4</figref>) the first server S<b>1</b> is likely to be a network server, etc. in this disclosure, the term &#x201c;first server&#x201d; S<b>1</b> is considered that server being accessed prior to other servers (such as a second server S<b>2</b>). Often, a series of servers must be accessed during a given search or query over the network because no one server has all of the data required. In <figref idref="DRAWINGS">FIG. 3</figref>, a plurality of computers <b>502</b> are configured as servers S<b>1</b> and S<b>2</b>. Each server S<b>1</b> and S<b>2</b> is arranged in a ring configuration, such as provided by the token ring network algorithm. In <figref idref="DRAWINGS">FIG. 4</figref>, a plurality of computers <b>502</b> are configured as servers S<b>1</b> and S<b>2</b>. Each server S<b>1</b> and S<b>2</b> is arranged in a networked configuration, such as provided by a variety of network algorithms. As indicated by <figref idref="DRAWINGS">FIGS. 3 and 4</figref>, the concepts and arrangements of the servers S<b>1</b> and S<b>2</b> of the present disclosure can be applied to any one of the known variety of network protocols and network configurations.</p>
<p id="p-0041" num="0040">Subsequent networked servers S<b>2</b> (from the first network server S<b>1</b>) that are accessed to provide additional data requested by the user are often referred to as &#x201c;back-end servers&#x201d;. In one embodiment of a network, the back-end server S<b>2</b> may include an SQL database server, a file server, an image server, or the like that contains the data that is being sought by the user as he/she accesses the first server S<b>1</b>. As such, the first server, or front-end server S<b>1</b>, is often not the final destination for a user/client C of the Internet or network.</p>
<p id="p-0042" num="0041">One embodiment of the authentication context is associated with a particular authentication ticket (e.g., a Kerberos ticket). Each authentication ticket is associated with the authentication between a particular client and a particular server. As such, this disclosure provides a pass-thru mechanism by which distinct authentication tickets T<b>1</b>, T<b>2</b> from a client C (see <figref idref="DRAWINGS">FIG. 7</figref>) are generated for each server S<b>1</b> and S<b>2</b> of a set of servers. For greatly improved security, it is important that each server that receives a delegated authentication context should be assured that the outward facing server actually authenticated the client.</p>
<p id="p-0043" num="0042">The establishing of secure channels <b>36</b> and <b>36</b><i>a </i>in the computer environment <b>500</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is provided by encryption and decryption, and is done in a manner that provides both client authentication and server authentication, as described herein. Data is encrypted at the particular server S<b>1</b> or S<b>2</b> or at the client C that transmits the data. Data is decrypted at the particular server S<b>1</b> or S<b>2</b> or the client C that receives the data. One embodiment of the encryption/decryption algorithm is a public key authentication program that relies on key pairs formed from long strings of data. One embodiment of the public key authentication program includes the RSA algorithm. Each key pair includes a public key and a private key &#x201c;owned&#x201d; by a particular user. The public key of a key pair can be used to decrypt data that is encrypted using the corresponding private key. Similarly, the private key of a key pair can be used to decrypt data that is encrypted using the corresponding public key. Data integrity and confidentiality are provided by using a session key established as shown in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0044" num="0043">The embodiment of the SSL/TLS handshake with pass-thru as shown in <figref idref="DRAWINGS">FIG. 5</figref> provides for delegable authentication contexts. As such, a client authentication for a particular client can be transferred from a first server to another server. Client messages relating to credentials (e.g., digital credentials) received during a SSL/TLS handshake are forwarded to a centralized authentication authority and are cryptographically verified by the server S<b>1</b>. The authentication provided by the SSL/TLS handshake with pass-thru <b>340</b> can then be used as a basis for secure delegation of the user credentials across multiple servers S<b>1</b> and S<b>2</b>. Certain embodiments of the SSL/TLS handshake process can be sequentially repeated to provide client and server authentication from a client C for as many servers S<b>1</b>, S<b>2</b>, . . . , Sn (Sn not shown) as desired using a authentication pass-thru mechanism.</p>
<p id="p-0045" num="0044">A credential can be used to verify the identity of a user. Since the credential is issued by a trusted third party (the AA) to the credential requestor, the credential identifies the credential requestor depending on the proper security procedures by the trusted third party. One embodiment of the SSL/TLS security protocol <b>300</b> relies on a public key algorithm such as the RSA algorithm. Following this confirmation, the AA issues to the credential requestor the credential that binds the identity of the credential requestor to the public key. AA's are also capable of renewing and revoking credentials to multiple users as necessary. For instance, if the client is presented with the server's credential, then the client computer will attempt to match the server's AA against a listing of all the trusted AA's in the client's credential store. If the issuing AA is a trusted AA, then the client will accept the credential as proof of identity of the second party. In another embodiment of encryption technique using keys, the Diffie-Hellman key agreement may be considered an anonymous agreement between two users/computers. Symmetric encryption represents yet another encryption technique using keys in which both the sender and the receiver of encrypted messages have to agree prior to the message exchange(s) upon a single symmetric key that is identical to both sides.</p>
<p id="p-0046" num="0045">In one aspect, client messages received during a SSL/TLS handshake are forwarded to a centralized authentication authority. The client messages, including the client credential message, can be cryptographically verified by the centralized authentication authority to prove that the server S<b>1</b> actually authenticated the client. The authentication provided by the SSL/TLS handshake with pass-thru <b>340</b> can then be used as a basis for secure delegation of the user credentials across multiple servers.</p>
<p id="p-0047" num="0046">To enable secure delegation of the SSL/TLS client authentication security contexts, it is preferable that the DC <b>32</b> validates whether the server asking for the delegated credentials actually has done an SSL/TLS negotiation with the client in question. In certain embodiments of the present disclosure, the SSL/TLS client credential validation happens only on the server box, the server only passes sufficient information to the DC <b>32</b> for client mapping to identify the user&#x2014;not prove that the client authenticated to the server. One approach is described below for how to positively establish that the client in question did authenticate the server. This proof can be established using public key signature checks and not requiring a computationally expensive private-key decryption.</p>
<p id="p-0048" num="0047">Certain embodiments of the SSL/TLS handshake with pass-thru <b>340</b> use a combination of asymmetric encryption and symmetric encryption. Symmetric encryption is faster than asymmetric encryption, but asymmetric encryption generally provides improved authentication largely because the keys used with asymmetric encryption are larger than those used with symmetric encryption.</p>
<p id="p-0049" num="0048">The SSL/TLS sessions include an exchange of messages. The security of the SSL/TLS sessions is based largely on the SSL/TLS handshake that allows the server to authenticate itself to the client (or vice versa) prior to transmitting bulk data between the client and the server. Many embodiments of the SSL/TLS handshake are based on asymmetric encryption. Following the SSL/TLS handshake, in many embodiments, the client and the server use symmetric keys to transmit encrypted data.</p>
<p id="p-0050" num="0049">Certain details of certain embodiments of the SSL/TLS handshake with pass-thru <b>340</b> are now described relative to <figref idref="DRAWINGS">FIG. 5</figref>. One embodiment of the SSL/TLS handshake with pass-thru <b>340</b> provides sufficient client authentication to permit an exchange of credentials between one server S<b>1</b> with the client C and a second server S<b>2</b> (the server S<b>2</b> is not shown in <figref idref="DRAWINGS">FIG. 5</figref>) with the client C. The credentials in the SSL/TLS handshake with pass-thru <b>340</b> are only provided by the server since the client has no certificate-based credentials to use as part of the SSL/TLS handshake with pass-thru <b>340</b>.</p>
<p id="p-0051" num="0050">The embodiment of SSL/TLS handshake with pass-thru <b>340</b> shown in <figref idref="DRAWINGS">FIG. 5</figref> includes the client C initially sending a client hello <b>342</b> via a client hello communication <b>344</b> to the server S<b>1</b>. The server S<b>1</b> responds to the client hello <b>342</b> by generating a server hello <b>348</b>, a server credential (e.g., server certificate) <b>350</b>, a client credential request message <b>370</b>, and a server hello complete <b>356</b><i>a</i>. The server credential <b>350</b> contains a variety of information such as who issued the credential, the subject of the credential, the credential chains including chains through one or more subordinate certificate authorities up to some trusted root (e.g., a trusted certificate authority), and the public key of the public-private key pair (e.g., in the RSA algorithm). The server S<b>1</b> transmits the server hello <b>348</b>, the client credential request message <b>370</b>, and the server hello complete <b>356</b><i>a </i>to the client C in a server hello communication <b>346</b>.</p>
<p id="p-0052" num="0051">The server hello <b>348</b> of the embodiment of the SSL/TLS handshake with pass-thru <b>340</b> shown in <figref idref="DRAWINGS">FIG. 5</figref> includes a client credential request message <b>370</b> that is transmitted over the server hello communication <b>346</b> to the client C. The client credential request message <b>370</b> can contain additional information including which trusted root (e.g., AA) the server can link to. This is worth noting because server S<b>1</b> and client C use at least one of the same trusted roots to establish a credential chain between the client and the server for credential verification.</p>
<p id="p-0053" num="0052">If server S<b>1</b> specifies the client credential request message <b>370</b>, the client will respond by providing a client credential <b>372</b> as shown in <figref idref="DRAWINGS">FIG. 5</figref>. The client C transmits a signature <b>374</b> in addition to the client credential <b>372</b> over the client key_exchange_message communication <b>362</b> to the server S<b>1</b> (as a digitally signed structure that is hashed and concatenated). The signature <b>374</b> is generated using the private key that is contained on the client credential <b>372</b> (which can be validated by the public key included with the client credential). In response, the server S<b>1</b> returns the response <b>366</b>.</p>
<p id="p-0054" num="0053">The client C generates a client key exchange message <b>360</b>, the client credential <b>372</b>, the signature <b>374</b>, and a premaster secret <b>363</b>. The client key exchange message <b>360</b> is an encrypted random number generated (using the public key of the server's key pair) in response to information included within the client hello communication <b>344</b> and the server hello communication <b>346</b>. One embodiment of the client key exchange message <b>360</b> includes a first randomly generated number based on the client's date and time plus a second randomly generated number which (with the public key of the server's key pair) will be ultimately used to generate a premaster secret <b>363</b>.</p>
<p id="p-0055" num="0054">Distinct copies of the master secret <b>364</b> and <b>368</b> are generated separately for the respective client C and the server S<b>1</b> based (for each copy) on the premaster secret <b>363</b>, the server hello <b>348</b>, and the client hello <b>342</b>. The server S<b>1</b> decrypts the data in the client key exchange message communication <b>362</b>, and extracts the client key exchange message value <b>360</b> and the premaster secret <b>363</b>. As such, data containing the premaster secret <b>363</b> is transmitted to the server S<b>1</b> as a portion of the client key exchange message communication <b>362</b>. Copies of the master secret are generated at both the client and the server using the two copies of each one of the premaster secret <b>363</b>, the server hello <b>348</b>, and the client hello <b>342</b>. The client key exchange message <b>360</b> is transmitted via a client key exchange message communication <b>362</b> to the server S<b>1</b>.</p>
<p id="p-0056" num="0055">In response to the client key_exchange_message communication <b>362</b>, the server S<b>1</b> generates the premaster secret <b>363</b> and a server finished data <b>365</b>. The server S<b>1</b> transmits a server finished response <b>366</b> to the client C which includes the server finished data <b>365</b>, which proves to the client C that the server S<b>1</b> actually possesses the private key portion of the public-private key pair (corresponding to the server credential <b>350</b>). The response <b>366</b> therefore proves that the server S<b>1</b> is capable of encrypting or decrypting data associated with further transmissions from the client.</p>
<p id="p-0057" num="0056">The server S<b>1</b> will thereupon utilize the data obtained from the client hello <b>342</b>, the server hello <b>348</b>, and the premaster secret <b>363</b> to generate its copy of the master secret <b>368</b>. The client C will generate its copy of the master secret <b>364</b> using the client hello <b>342</b>, the server hello <b>348</b>, and the premaster secret <b>363</b>. Both the client C and the server S<b>1</b> thereby generate separately the master secret <b>364</b>.</p>
<p id="p-0058" num="0057">The respective copies of the master secret <b>364</b> and <b>368</b> that are generated respectively at the client C and the server S<b>1</b> are used, in turn, to generate respective copies of the session keys <b>367</b> and <b>371</b> respectively at the client C and the server S<b>1</b>. The copies of the session keys <b>367</b> and <b>371</b> are located at the respective client C and server S<b>1</b> to provide encrypted communications between the client C and the server S<b>1</b>. Session keys <b>367</b> and <b>371</b> generated by the respective client C and server S<b>1</b> are used to encrypt bulk communications between the client C and the server S<b>1</b> over the secure channel <b>36</b> illustrated in <figref idref="DRAWINGS">FIGS. 1 and 5</figref>.</p>
<p id="p-0059" num="0058">In one embodiment, the session keys <b>367</b> and <b>371</b> provide for symmetric encryption between the client and the server S<b>1</b>. In symmetric encryption the same key is used to encrypt and decrypt the message. Session keys are typically symmetric keys. The SSL/TLS handshake uses public key encryption to encrypt the master secret from which the secret key is derived. The session key is used because public-private key encryption is not well-suited for exchanges of large amounts of data due to its high CPU usage. In many embodiments, the session key is short-lived and is not likely to be cracked during its relatively brief life span. Short-lived is a subjective term. Session keys are typically shorter-lived then the public/private keys. Essentially, the lifetime of the session key represents the duration of the SSL/TLS session (which could be minutes or months). The SSL/TLS handshake with pass-thru <b>340</b> thereby provides for authentication between the client C and the server S<b>1</b> as well as authentication between the client C and the server S<b>2</b> as described herein.</p>
<p id="p-0060" num="0059">In one embodiment, the secure channel <b>36</b> is established by encrypting and decrypting the messages transmitted over the secure channel with such public key encryption algorithms as RSA, in addition to the symmetric encryption. The embodiment of the SSL/TLS handshake with pass-thru <b>340</b> described relative to <figref idref="DRAWINGS">FIG. 5</figref> provides server authentication. As such, based on the SSL/TLS handshake with pass-thru <b>340</b>, the server S<b>1</b> can trust the AA that granted the server's credential <b>350</b>.</p>
<p id="p-0061" num="0060">The portions of the embodiment of the SSL/TLS handshake with pass-thru <b>340</b> described above provide server authentication. The SSL/TLS handshake with pass-thru <b>340</b> also provides client authentication in which the client encrypts some random data with the client's private key (that is, it creates a digital signature). The public key in the client's credential can correctly validate the digital signature only if the corresponding private key was used. Otherwise, the server cannot validate the digital signature and the session is terminated.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> illustrates one embodiment of flow chart associated with the SSL/TLS handshake with pass-thru <b>340</b> such as described relative to <figref idref="DRAWINGS">FIG. 5</figref>. It is noted that many of the details of the SSL/TLS handshake with pass-thru <b>340</b> provided in <figref idref="DRAWINGS">FIG. 5</figref> is not described in the flow chart of <figref idref="DRAWINGS">FIG. 6</figref>. The embodiment of the SSL/TLS handshake with pass-thru <b>340</b> shown in <figref idref="DRAWINGS">FIG. 6</figref> provides certain functionality to provide client authentication. In <b>452</b> the Client C transmits the client hello message (<b>342</b> in <figref idref="DRAWINGS">FIG. 5</figref>) to the server. The client hello message includes information including the client's SSL/TLS version number, the cipher settings, and randomly generated data the server needs to communicate with the client using the SSL/TLS protocol. Typically, the randomly generated data is relatively long.</p>
<p id="p-0063" num="0062">One embodiment of the client hello message contains a cipher suite (or a plurality of cipher suites) and the client key exchange message. An example of a cipher suite is TLS_RSA_EXPORT_WITH_RC2_CBC<sub>&#x2014;</sub>40_MD5 (where &#x201c;TLS&#x201d; is the protocol version, the &#x201c;RSA_EXPORT&#x201d; algorithm will be used for the key exchange, the &#x201c;RC2_CBC<sub>&#x2014;</sub>40&#x201d; represents the selected encryption algorithm and the &#x201c;MD5&#x201d; represents the hash function). A session identification can be included to give clients an opportunity to resume an old session.</p>
<p id="p-0064" num="0063">The Hash Algorithms include a Message Authentication code (MAC) that is an integrity check value. A mapping function is used to represent the message data as a fixed-length, preferably smaller, value and then hashed. This ensures the data has not been modified during transmission. The difference between a MAC and a digital signature is that a digital signature is also an authentication method. The Keyed-Hashed Message Authentication Code (HMAC) is similar to the MAC but HMAC uses a hash algorithm in combination with a secret shared key.</p>
<p id="p-0065" num="0064">In <b>454</b> of <figref idref="DRAWINGS">FIG. 6</figref>, the server S<b>1</b> as shown in <figref idref="DRAWINGS">FIG. 5</figref> transmits the server hello to the client. The server hello includes the server's SSL/TLS version number, the cipher settings, and randomly generated data that the client needs to communicate with the server. The server also sends a client credential and, if the client is requesting a server resource that requires client authentication, requests the client's credential.</p>
<p id="p-0066" num="0065">The client C uses some of the information it received from the server (including the server hello) to authenticate server S<b>1</b> in <b>456</b> of <figref idref="DRAWINGS">FIG. 6</figref>. Using certain handshake information obtained from the SSL/TLS handshake, the client (with the cooperation of the server) creates and generates the premaster secret <b>363</b> and the client key exchange message <b>360</b> as shown in <figref idref="DRAWINGS">FIG. 5</figref>, and encrypts the client key exchange message with the server's public key (obtained from the server's credential).</p>
<p id="p-0067" num="0066">The client C transmits the encrypted premaster secret, the signed data, and the client key exchange message to the server in the transmission of <b>458</b>. If the server has requested client authentication, the client also signs another piece of data that is unique to this handshake in <b>458</b>. In this case the client sends both the signed data and the client's own credential to the server along with the encrypted premaster secret. The server responds by sending a separate message to the client indicating that the server portion of the handshake is finished.</p>
<p id="p-0068" num="0067">In <b>459</b>, both the client C and the server S<b>1</b> use their respective copies of the server hello, the client hello, and the premaster secret to generate their respective copies of the master secret <b>364</b> and <b>368</b>.</p>
<p id="p-0069" num="0068">In <b>460</b>, the server attempts to authenticate the client to provide client authentication. If the server has requested client authentication, the server attempts to authenticate the client in <b>460</b> using the credential. If the client cannot be authenticated, the session is terminated. If the client can be successfully authenticated, the server uses its cryptography (i.e., private) key to decrypt the premaster secret, then performs a series of steps on the decrypted premaster secret to generate the master secret. In <b>464</b>, both the client and the server use their respective copies of the master secret <b>364</b> and <b>368</b> to generate their respective copies of the session keys <b>367</b>, <b>371</b> as shown in <figref idref="DRAWINGS">FIG. 5</figref>. Session keys <b>367</b> and <b>371</b> are symmetric keys that are used to encrypt and decrypt information exchanged during the SSL/TLS session between the client and the server S<b>1</b>. The session keys <b>367</b> and <b>371</b> verify the integrity of the communications by detecting any change in the data between the time it was sent and the time it is received over the SSL/TLS connection.</p>
<p id="p-0070" num="0069">In <b>466</b>, the client C sends a message to the server S<b>1</b> informing it that future messages from the client will be encrypted using their copies of the session key <b>367</b>, <b>371</b>. This represents the commencement of bulk encrypted transfer of data between the client C and the server S<b>1</b>. The SSL/TLS handshake can now be considered complete. An SSL/TLS session can now begin as shown in <b>470</b>. The client and the server each use the session keys to encrypt and decrypt the data they send to each other. The session keys also validate the communications between the client and the server.</p>
<p id="p-0071" num="0070">Before continuing with the session, servers can be configured to check that the client's credential is presently included in the user's entry (e.g., within a Lightweight Directory Access Protocol (LDAP) directory). This configuration option provides one mechanism to ensure that the client's credential has not been revoked. Both the client authentication and the server authentication involve encrypting data with one key of a public-private key pair and decrypting it with the other key of the public-private key pair.</p>
<p id="p-0072" num="0071">Consider that (based on encryption concepts) only the corresponding private key can correctly decrypt the premaster secret. As such, the client is provided considerable assurance that the server is associated with the public key if the client can encrypt the premaster secret. If the server cannot decrypt the premaster secret (and therefore cannot generate the symmetric keys required for the session) then the session will be terminated. The SSL/TLS-enabled client C provides server authentication, or cryptographic validation by a client of the server's identity.</p>
<p id="p-0073" num="0072">To provide client authentication, the server S<b>1</b> sends the client C its server credential to authenticate itself as described relative to <figref idref="DRAWINGS">FIGS. 5</figref>, <b>6</b>, <b>7</b>, and <b>8</b>. The client uses its server credential to authenticate the identity of the server. In one embodiment, to authenticate the binding between a public key and the server identified by the credential that contains the public key, a SSL/TLS-enabled client must receive an affirmative answer to multiple questions that provide one embodiment of a client's authentication process.</p>
<p id="p-0074" num="0073">An SSL/TLS enabled client C goes through the following considerations to authenticate a server's identity. The client C determines whether the date of the computer is within the validity period of the credential. The client C checks the server credential's validity period. If the current date and time of the client C are outside of the range listed on the credential, the authentication process won't go any further. If the current date and time are within the credential's validity period, the client's authentication process continues.</p>
<p id="p-0075" num="0074">The client C following its client's authentication process next considers whether the issuing AA is a trusted AA. Each SSL/TLS enabled client C maintains a list of trusted AA credentials. This list of trusted AA credentials determines which server credentials the client will accept. If the distinguished name (DN) of the issuing AA matches the DN of an AA on the client's list of trusted AAs, then the client's authentication process continues. If the issuing AA is not on the list of trusted AA credentials, the server will not be authenticated and the client's authentication process continues.</p>
<p id="p-0076" num="0075">The client's authentication process next considers whether the issuing AA's public key validates the issuer's digital signature. The client C uses the public key from the AA's credential (which it found in its list of trusted AAs) to validate the AA's digital signature on the server credential being presented. If the information in the server credential has changed since it was signed by the AA, or if the AA credential's public key doesn't correspond to the private key used by the AA to sign the server credential, the client C won't authenticate the server's identity and the client's authentication process is terminated. If the AA's digital signature can be validated, the server treats the user's credential as a valid &#x201c;letter of introduction&#x201d; from that AA and proceeds. At this point in the client's authentication process, the client has determined that the server's credential is valid.</p>
<p id="p-0077" num="0076">The client's authentication process continues to determine whether the domain name in the server's credential matches the domain name of the server itself. This step confirms that the server is actually located at the same network address specified by the domain name in the server credential. Although this process is not technically part of the SSL/TLS handshake with pass-thru <b>340</b>, it provides the only protection against a form of security attack known as a Man-in-the-Middle Attack. Clients perform this step and refuse to authenticate the server or establish a connection if the domain names don't match. If the server's actual domain name matches the domain name in the server credential, the client proceeds with the SSL/TLS handshake.</p>
<p id="p-0078" num="0077">After the processes described in the client's authentication process, the server must successfully use its private key to decrypt the premaster secret the client C transmits in the SSL/TLS handshake. Otherwise, the SSL/TLS session will be terminated. This provides additional assurance that the identity associated with the public key in the server's credential is in fact the server with which the client is connected.</p>
<p id="p-0079" num="0078">In certain embodiments, the client C checks the server domain name specified in the server credential against the actual domain name of the server with which the client is attempting to communicate. This is necessary to protect against a man-in the middle attack, which works as follows. The &#x201c;man in the middle&#x201d; attack is a rogue program that intercepts all communication between the client and a server with which the client is attempting to communicate via the SSL/TLS handshake with pass-thru <b>340</b> session. The man in the middle program intercepts the legitimate keys that are passed back and forth during the SSL/TLS handshake, substitutes its own, and attempts to make it appear to the client that it is the server, and to the server that it is the client.</p>
<p id="p-0080" num="0079">The encrypted information exchanged at the beginning of the SSL/TLS handshake is actually encrypted with the rogue program's public key or private key, rather than the client's or server's real keys. The &#x201c;man in the middle&#x201d; program establishes one set of session keys for use with the server S<b>1</b>, and a different set of session keys for use with the client C. This allows the &#x201c;man in the middle&#x201d; program not only to read all the data that flows between the client and the real server, but also to change the data without being detected. Therefore, it is important for the client C to check that the domain name in the server credential corresponds to the domain name of the server with which a client is attempting to communicate.</p>
<p id="p-0081" num="0080">The SSL/TLS handshake is used in certain embodiments of pass-thru algorithms for the SSL/TLS handshake. This SSL/TLS handshake does not guarantee accuracy of the server-provided timestamp. If the user of a server so wished, it could use inaccurate timestamps for the Server.key exchange message value and create &#x201c;post-dated&#x201d; timestamps for use at some point in the future.</p>
<p id="p-0082" num="0081">A message authentication code (MAC) includes an integrity check value. A mapping function is used to represent the message data as a fixed length value that is hashed. The MAC ensures that the data has not been modified during transmission. A Keyed-Hashed Message Authentication Code (HMAC) is similar to the Message Authentication Code (MAC), but HMAC uses the hash algorithm in combination with a second shared key.</p>
<p id="p-0083" num="0082">During the Handshake protocol, the hash algorithm is also agreed upon. A hash is a one-way mapping of values to a smaller set of values, the size of the hash is smaller than the original message. Hashing is used to establish data integrity during the transport of data.</p>
<p id="p-0084" num="0083">The record protocol does the actual handling of data from the application layer and delivers the data to the TCP/IP layer. The record protocol takes the data, fragments it, operationally compresses (or decompresses for received data), and then encrypts (and decrypts) the data using the information determined during the handshake protocol.</p>
<p id="p-0085" num="0084">To address this, the SSL/TLS server should be modified to request a timestamp from the DC <b>32</b> using a Hashed Message Authentication Code (HMAC) code portion with a long-term key held by the DC:</p>
<p id="p-0086" num="0085">nonce=HMAC (dc_key, dc_timestamp)</p>
<p id="p-0087" num="0086">The nonce would then be hashed with the server's key exchange message value to compute Server.key_exchange_message.random_bytes according to the following calculation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Server. key_exchange_message.random_bytes=SHA(nonce+Server. key_exchange_message.random_bytes[1 . . . 20])+Server. key_exchange_message.random_bytes[21 . . . 28]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0088" num="0087">It is not necessary that the nonce be generated for every challenge. If the domain controller (DC) policy was set to require that handshakes be valid for a period of 10 minutes, for example, then the server would only need to request a new timestamp when the previously obtained nonce had, or was about to, expire. The Domain Controller (DC) would provide a current nonce and DC_timestamp to the server upon request. The handshake protocol is a series of sequenced messages which will negotiate the security parameters of that data transfer session.</p>
<p id="p-0089" num="0088">The embodiment of the SSL/TLS handshake shown in <figref idref="DRAWINGS">FIGS. 5 and 6</figref> provides for client authentication. Certain embodiments of the SSL/TLS-enabled servers S<b>1</b> and S<b>2</b> that are performing the SSL/TLS handshake with the client C can be configured to require client authentication as described relative to <figref idref="DRAWINGS">FIG. 5</figref>. When a server requests client authentication, the client sends the server both a credential and a separate piece of digitally signed data to authenticate itself. The server uses the digitally signed data to validate the public key in the credential and to authenticate the identity the credential claims to represent.</p>
<p id="p-0090" num="0089">One embodiment of the format of the client credential message is the same as is used for the server credential (i.e. certificate) [as indicated in RFC 2246 that describes TLS]:</p>
<p id="p-0091" num="0090">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;&#x2003;opaque ASN.1Cert&#x3c;1..2{circumflex over (&#x2009;)}24-1&#x3e;;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;struct</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;{</entry>
</row>
<row>
<entry/>
<entry>ASN.1Cert</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;credential_list&#x3c;0..2{circumflex over (&#x2009;)}24-1&#x3e;;</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Credential;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
The client will also send the CredentialVerify message, which is the following structure signed with the private key of the client credential (e.g., certificate) as per the TLS standard (RFC 2246):
</p>
<p id="p-0092" num="0091">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;&#x2003;Struct</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;{</entry>
</row>
<row>
<entry/>
<entry>Signature signature; }</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;CredentialVerify;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;{ case anonymous: struct { };</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;case rsa:</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;digitally-signed struct {</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;opaque md5_hash[16];</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;opaque sha_hash[20];</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;};</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;case dsa:</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;digitally-signed struct {</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;opaque sha_hash[20];</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;};</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;} Signature;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;CredentialVerify.signature.md5_hash</entry>
</row>
<row>
<entry/>
<entry>MD5(handshake_messages);</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;Credential.signature.sha_hash</entry>
</row>
<row>
<entry/>
<entry>SHA(handshake_messages);</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0093" num="0092">In the CredentialVerify message, sent by the client C, the term &#x201c;handshake_messages&#x201d; refers to all handshake messages sent or received after a client hello, up to but not including this message, and including the type and length fields of the handshake messages. The client is authenticated by using its private key to encrypt the hash of all the messages transmitted up to this point. The recipient decrypts the hash algorithm using the public key of the signer, thus ensuring it was encrypted by the sender's private key, applies it to the data bits and verifies it matches the received value.</p>
<p id="p-0094" num="0093">The SSL/TLS server (e.g., S<b>1</b> or S<b>2</b>) can thereupon pass all of the handshake messages (which includes the Client Credential and CredentialVerify messages) for this connection up to the DC to establish positive proof that a client with this credential authenticated itself to this server.</p>
<p id="p-0095" num="0094">During the handshake protocol, a hash algorithm that can be used is agreed upon. The hash algorithm is a one-way mapping of values to a smaller set of values. The size of a hash message is therefore smaller than the size of the original message. The SSL/TLS handshake with pass-thru <b>340</b> requires the client to create a digital signature by creating a one-way hash from data generated randomly during the handshake and known only to the client and server. The hash of the data is then encrypted with the private key that corresponds to the public key in the credential being presented to the server. To authenticate the binding between the public key and the person or other entity identified by the credential that contains the public key, an SSL/TLS enabled server must successfully complete the client authentication process as now described.</p>
<p id="p-0096" num="0095">An SSL/TLS enabled server S<b>1</b> (or S<b>2</b>) goes through the client authentication process to authenticate a particular client C. The server S<b>1</b> determines whether the user's public key validates the user's digital signature. The server S<b>1</b> determines whether the user's digital signature can be validated with the public key in the credential. If so, the server has established that a public key which is asserted to belong to a particular user actually matches the private key used to create the signature and the client authentication process continues. If not, then the client authentication process terminates.</p>
<p id="p-0097" num="0096">The server determines whether the server's date and time is within the validity period of the client's credential. If the current date and time of the server are outside of the range of the credential's validity period, the client authentication process terminates. If the current date and time are within the credential's validity period, the server continues its client authentication process.</p>
<p id="p-0098" num="0097">The server considers whether the issuing AA is a trusted AA. Each SSL/TLS enabled server maintains a list of trusted AA credentials. This list of trusted AA credentials determines which client credentials the server will accept for authentication. In one embodiment, the domain name (DN) of the issuing AA is considered. If the DN of the issuing AA matches the DN of an AA on the server's list of trusted AAs, the client authentication process continues. If the issuing AA is not on the list of trusted AA credentials, the client authentication process will terminate.</p>
<p id="p-0099" num="0098">The server next considers whether the issuing AA's public key validates the issuer's digital signature. The server uses the public key from the AA's credential (which it found in its list of trusted AAs) to validate the AA's digital signature on the credential being presented. If the information in the credential has changed since it was signed by the AA, or if the public key in the AA credential doesn't correspond to the private key used by the AA to sign the credential, the server won't authenticate the user's identity. If the AA's digital signature can be validated, the server treats the user's credential as a valid &#x201c;letter of introduction&#x201d; from that AA and proceeds. At this point, the SSL/TLS handshake with pass-thru <b>340</b> allows the server to consider the client authenticated and proceed with the client authentication process.</p>
<p id="p-0100" num="0099">The server next considers whether the authenticated client is authorized to access the requested resources. The server checks what resources the client is permitted to access according to the server's access control lists and establishes a connection with appropriate access.</p>
<p id="p-0101" num="0100">In certain embodiments of the SSL/TLS handshake, public key encryption is used to transmit the information to the server and keep the information secure. One embodiment of the secure channel uses the logon to the network for the pass-thru, which provides an authenticated encrypted &#x201c;pipe&#x201d; between server and DC by which messages can be transmitted.</p>
<p id="p-0102" num="0101">Certain aspects of this disclosure relate to authentication in more complex networked configurations such as being based on a plurality of servers (e.g., a front-end server and a back-end server). A mechanism is provided by which the pass-thru with evidence communication <b>380</b> is provided from the server S<b>1</b> to the DC <b>32</b>. The contents of the &#x201c;evidence&#x201d; included in the &#x201c;pass-thru with evidence&#x201d; provides evidence of the client authentication to the DC <b>32</b> as described in this disclosure. In the <figref idref="DRAWINGS">FIG. 5</figref> embodiment of the SSL/TLS handshake, the client C authentication is provided by validating the client credential at the server. The validation of the client credential at the server occurs by taking the private key and signing the signature. The server S<b>1</b> is going to validate the client credential, then it will extract some client credential information (using RSA encryption techniques), then the server side of the authentication package calls up to the Domain Controller (DC) <b>32</b> side of the authentication package, and determines whether the client credential maps to any account in the Active Directory.</p>
<p id="p-0103" num="0102">In the <figref idref="DRAWINGS">FIG. 5</figref> embodiment, the server is doing the cryptography (so the server is validating the account). The DC <b>32</b> does not provide or examine the cryptography, as such the DC <b>32</b> cannot conclude that this client really did authenticate the server. As such, the DC <b>32</b> is assuming that the server did all of the correct validations. This is desirable because the client credential message plus the signature can be examined separately from the remainder of the handshake.</p>
<p id="p-0104" num="0103">The DC can verify the SSL/TLS handshake. This is accomplished in one embodiment after a successful handshake in which the server will send to the DC information including, but not necessarily limited to, the handshake messages; the nonce value used for the handshake; the dc_timestamp; and the original Server.</p>
<p id="p-0105" num="0104">The DC will then return to the server the following assertions on receipt of this information as shown in Table 1:</p>
<p id="p-0106" num="0105">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Assertions of the SSL/TLS Handshake</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>assert(nonce = HMAC-SHA(dc_key, dc_timestamp))</entry>
</row>
<row>
<entry/>
<entry>assert(Server. &#x2003;key_exchange_message.random_bytes &#x2003;=</entry>
</row>
<row>
<entry/>
<entry>SHA(nonce+ Server.</entry>
</row>
<row>
<entry/>
<entry>key_exchange_message.random_bytes[1..20])&#x2003;&#x2003;+&#x2003;&#x2003;Server.</entry>
</row>
<row>
<entry/>
<entry>key_exchange_message.random_bytes[21..28]</entry>
</row>
<row>
<entry/>
<entry>assert( (currenttime-dc_timestamp) &#x3c; timestamp_validity_period)</entry>
</row>
<row>
<entry/>
<entry>assert(Passthrough.ServerIdentity =</entry>
</row>
<row>
<entry/>
<entry>ServerCredential.credential_list.servercert)</entry>
</row>
<row>
<entry/>
<entry>assert(credential_list = valid credential chain)</entry>
</row>
<row>
<entry/>
<entry>assert(MD5(handshake_messages) =</entry>
</row>
<row>
<entry/>
<entry>CredentialVerify.signature.md5_hash)</entry>
</row>
<row>
<entry/>
<entry>assert(SHA(handshake_messages) =</entry>
</row>
<row>
<entry/>
<entry>CredentialVerify.signature.md5_hash)</entry>
</row>
<row>
<entry/>
<entry>assert(CredentialVerify message properly signed)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0107" num="0106">If all the checks associated with these assertions pass, then the Domain Controller (DC) <b>32</b> is assured that the server identified in these messages was presented with a client's credential for the purposes of authentication. The DC <b>32</b> is also assured that the authentication took place within a reasonable time interval and that the server making the request for delegate-able credentials is the same server that authenticated the client.</p>
<p id="p-0108" num="0107">In one aspect, the embodiment of the SSL/TLS handshake with pass-thru <b>340</b> illustrated in <figref idref="DRAWINGS">FIG. 7</figref> includes a pass-thru in which an authentication context is delegable from one server S<b>1</b> to another server S<b>2</b>. The DC <b>32</b> is capable of generating tickets that are used for authentication. As shown in <figref idref="DRAWINGS">FIG. 7</figref>, a pass-thru with evidence communication <b>380</b> is transmitted from a first server S<b>1</b> to the DC <b>32</b> as a request for a ticket (such as a Kerberos ticket).</p>
<p id="p-0109" num="0108">The embodiment of the SSL/TLS handshake with pass-thru illustrated in procedure <b>950</b> in <figref idref="DRAWINGS">FIG. 7</figref> provides for client authentication and validation at the server. The pass-thru with evidence communication <b>380</b> is based on client authentication and server authentication provided to a first server as shown in <b>952</b> in <figref idref="DRAWINGS">FIG. 7</figref>. The pass-thru with evidence communication <b>380</b> is transmitted to the DC <b>32</b> in <b>954</b> shown in <figref idref="DRAWINGS">FIG. 7</figref>. The pass-thru with evidence communication <b>380</b> is transmitted from the client S<b>1</b> to the DC <b>32</b>. As a result of the Secure Channel authentication, the DC <b>32</b> validated the authentication attempt, and then returned some authorization evidence communication <b>381</b>.</p>
<p id="p-0110" num="0109">In response to the pass-thru with evidence, the DC <b>32</b> returns a first ticket T<b>1</b> in evidence communication <b>381</b> to the client S<b>1</b> (which in certain embodiments is a Kerberos ticket). The ticket T<b>1</b> is generated from the DC to the server S<b>1</b> in <b>956</b> of <figref idref="DRAWINGS">FIG. 7</figref>. In <b>958</b>, the server S<b>1</b> presents the first authentication ticket T<b>1</b> to the DC (which is thereupon returned to the server S<b>1</b>).</p>
<p id="p-0111" num="0110">Based on the first authentication ticket T<b>1</b>, the DC generates a second authentication ticket T<b>2</b> (which in one embodiment is also a Kerberos ticket) as shown in <b>960</b> in <figref idref="DRAWINGS">FIG. 7</figref>. As such, an authorization communication <b>382</b> as shown in <figref idref="DRAWINGS">FIG. 8</figref> causes the second ticket T<b>2</b> to be generated that expands the authorization information received over the pass-thru with information. The second authorization ticket may contain identical authentication information as the first authentication ticket T<b>1</b>, but be directed at a different set of parties. For instance, the first authentication ticket T<b>1</b> provides authentication from the client for the first server S<b>1</b>. The second authentication ticket T<b>2</b> provides authentication from the client C to the second server S<b>2</b>.</p>
<p id="p-0112" num="0111">The authentication process <b>950</b> shown in <figref idref="DRAWINGS">FIG. 7</figref> continues to <b>962</b> in which the DC presents the second authentication ticket T<b>2</b> (<b>904</b> in <figref idref="DRAWINGS">FIG. 8</figref>) to the second server S<b>2</b>. Based on the reception of the second authentication ticket T<b>2</b> by the second server S<b>2</b>, the second server S<b>2</b> has client authentication from the client C. As such, the embodiment of pass-thru with evidence communication <b>380</b> as described relative to <figref idref="DRAWINGS">FIGS. 7 and 8</figref> can transfer client authentication from one server to a second server, wherein the two tickets T<b>1</b> and T<b>2</b> are generated to provide the client authentication to their respective servers.</p>
<p id="p-0113" num="0112">One embodiment of mapping associated with the authorization information may pertain to a variety of types of information relating to the credential such as the subject name, the issuer subject identity, etc. The DC side of the package maps the credential to the account. The DC side of the package expands authorization information for the account, which then returns the information to the server.</p>
<p id="p-0114" num="0113">On one embodiment of the server side, the authentication package is trusted code in the Local Security Authority (LSA). The server side of the package converts the authorization information into a security token. The security token is something produced by a trusted portion of the operating system, such as the LSA, and includes all the groups of which the user is a member. In Windows 2000 and .NET server, this security token provides adequate security for most applications. The security token is only used locally on the server. The only job the security token performs is to provide the authorization information for the client that the server believed that it authenticated.</p>
<p id="p-0115" num="0114">As a result of the pass-thru with evidence communication <b>380</b> as shown in <figref idref="DRAWINGS">FIG. 8</figref>, the communications between the client C and the server S<b>1</b> therefore will transmit to the DC <b>32</b> a ticket request message at <b>380</b> as a Kerberos pass-thru with evidence. In response to the ticket request message, the DC <b>32</b> generates and transmits a ticket T<b>1</b> (such as a Kerberos ticket) at <b>381</b> to the server S<b>1</b> as shown in <figref idref="DRAWINGS">FIG. 8</figref>. The ticket T<b>1</b> can thereupon be returned to the client C for the server S<b>1</b> in <b>382</b>.</p>
<p id="p-0116" num="0115">There are a variety of reasons why it would be desirable to provide client authentications to a plurality of servers S<b>1</b> and S<b>2</b>. One motivation is that the server S<b>1</b> can present the ticket T<b>1</b> to the DC <b>32</b> as a credential in order to obtain a second ticket T<b>2</b> for the client to a second back-end server <b>34</b>. For instance, the server S<b>1</b> would be a web server while a back-end server <b>34</b> could includes such data as a SQL database, an image server, a file server, a document server, and any such variety of data depository servers. The server S<b>1</b> would &#x201c;impersonate&#x201d; the client C in a manner to allow the back-end server S<b>2</b> could be accessed. As such, the second ticket T<b>2</b> can be delegated.</p>
<p id="p-0117" num="0116">With the pass-thru mechanism, evidence is now presented to the DC that authentication actually took place with this particular client to the server S<b>1</b>. So, for example, after the ticket T<b>1</b> is obtained for the server S<b>1</b>, the server S<b>1</b> indicates that in order to satisfy the request from the client, a query is performed against the back-end server S<b>2</b>. As such, the ticket T<b>2</b> can be generated based on the ticket T<b>1</b>. The server will generate this request as the user, so the authorization decision for the back-end server is determined with the server positioned as the user. The user should be limited to accessing what the user is able to access relative to any server, particularly S<b>2</b>. To do this, the second ticket T<b>2</b> has to be produced. When the same user/client combination obtains the second ticket T<b>2</b>, the same authorization information associated with the first ticket T<b>1</b> is preserved relative to the second ticket T<b>2</b>. A different key is used to encrypt the ticket T<b>2</b> from the key used to encrypt the ticket T<b>1</b>. With the ticket T<b>1</b> for the server S<b>1</b>, the ticket T<b>1</b> is encrypted by a key known only by the server S<b>1</b> and the DC. With the ticket T<b>2</b> for the server S<b>2</b>, the ticket T<b>2</b> is encrypted by a key known only by the server S<b>2</b> and the DC.</p>
<p id="p-0118" num="0117">Using the pass-thru authentication with evidence, with S<b>1</b>, the ticket is presented for the client C to the server S<b>1</b>. The ticket will be processed from the Kerberos portion of the package, and will create the ticket T<b>1</b>. Then also, the ticket T<b>1</b> will be available in case it is desired to obtain the second ticket T<b>2</b> that acts as an authentication credential for the back-hand server S<b>2</b> on behalf of the same client-user account. As such, multiple tickets are provided to authenticate both S<b>1</b> and S<b>2</b>.</p>
<p id="p-0119" num="0118">Through the mechanism associated with the embodiment of the SSL/TLS handshake shown in <figref idref="DRAWINGS">FIGS. 5</figref>, <b>6</b>, <b>7</b>, and/or <b>8</b>, client authentication is provided. The client authentication is desired because the DC <b>32</b> is going to be issuing a ticket T<b>1</b> to the server S<b>1</b> for that client C. That ticket T<b>1</b> can be re-presented back to the DC to allow accessing to other services, including generating another ticket T<b>2</b> to authenticate another server. It is important to say that a user associated with the client C cannot obtain a ticket (such as a Kerberos ticket) unless the client actually did authenticate the server. The two tickets T<b>1</b> and T<b>2</b> can be used in the SSL/TLS handshake to provide the pass-thru as illustrated in <figref idref="DRAWINGS">FIG. 8</figref>. The second ticket T<b>2</b> is used to authenticate the DC.</p>
<p id="p-0120" num="0119">The evidence portion of the pass-thru authentication with evidence <b>380</b> as shown in <figref idref="DRAWINGS">FIGS. 7 and 8</figref> includes the client credential and the CredentialVerify messages. The pass-thru with evidence request includes the client credential and the CredentialVerify messages, and the DC nonce. The pass-thru with evidence is presented to the DC. The DC validates the evidence by making the assertions described herein. Once the server packages up the pass-thru with evidence request, the DC is going to invoke its side of the code, and run through these sets of assertions. In the embodiment of the SSL/TLS handshake as shown in <figref idref="DRAWINGS">FIGS. 7 and 8</figref>, the DC performs the authentication calculations associated with the client authentication. The DC is therefore able to &#x201c;verify the authentication based on the data transmitted to the server from the client, and therefore authenticates using authentication calculations based generally on &#x201c;what the server saw&#x201d;. As such, the DC can authenticate messages for the servers S<b>1</b> and S<b>2</b> based on private key encrypted materials from the client. With the pass-thru, the server S<b>2</b> can validate (as well as the server S<b>1</b>).</p>
<p id="p-0121" num="0120">Certain embodiments of this disclosure describe a protocol transition from the SSL/TLS handshake with pass-thru <b>340</b> to another security protocol such as Kerberos. The reason why a series of secure channels can be maintained even with this switch in protocol includes the passing of the evidence of the original authentication of the client for an initial server through to the DC to subsequent authentication of the client with subsequent servers.</p>
<p id="p-0122" num="0121">A variety of scenarios are now provided. One scenario is an authenticated client access to a secure web site. Both the client and the server need credentials from a mutually trusted AA. With such secure channels as the SChannel, client credentials can be mapped on a one-to-one or many-to-one basis and can be managed by Active Directory Users and Computers. This will be invisible to the users, and they can be authenticated to a website without the use of a password.</p>
<p id="p-0123" num="0122">If a user has confidential material they would like a group of people to have access to, the user can create a group to which you can map many users' credentials and give them all the same permissions to that material. In one-to-one mapping the server has a copy of the client's credentials, and whenever the client logs in the server checks to see if they are identical. This is used for private material such as a banking site where only one individual has the right to view their personal account.</p>
<p id="p-0124" num="0123">Certain Microsoft Windows&#xae; operating systems provide the option of using 128-bit encryption strength in the SSL/TLS transaction. Safe key exchanges currently range from 56-bit to 128-bit encryption, as such the user has to weigh security risks vs. performance and cost when considering the key length of the transactions. Selecting the 128-bit key encryption, for example, will slow performance but will increase security.</p>
<p id="p-0125" num="0124">A firewall is a program which can exist in many different forms but basically acts like a barrier between a Local Area Network (LAN) and the outside world. The SSL/TLS handshake with pass-thru <b>340</b> will consider the computer the firewall is running on as a man-in-the-middle attack preventing the transaction from happening To allow for the SSL/TLS traffic to go through the firewall, a port is reserved and traffic is allowed to go through unrestricted.</p>
<p id="p-0126" num="0125">The computer environment <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. 9</figref> is a general computer environment, which can be used to implement the techniques described herein for client authentication and/or server authentication. The computer environment <b>100</b> is only one example of a computer environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer and network architectures. Neither should the computer environment <b>100</b> be interpreted as having any dependency relating to any one or combination of components illustrated in the exemplary computer environment <b>100</b>.</p>
<p id="p-0127" num="0126">The computer environment <b>100</b> includes a general-purpose computing device in the form of a computer <b>502</b>. The computer <b>502</b> can be, for example, one or more of a stand alone computer, a networked computer, a mainframe computer, a PDA, a telephone, a microcomputer or microprocessor, or any other computer device that uses a processor in combination with a memory. The components of computer <b>502</b> can include, but are not limited to, one or more processors or processing units <b>504</b> (optionally including a cryptographic processor or co-processor), a system memory <b>506</b>, and a system bus <b>508</b> that couples various system components including the processor <b>504</b> and the system memory <b>506</b>.</p>
<p id="p-0128" num="0127">The system bus <b>508</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.</p>
<p id="p-0129" num="0128">The computer <b>502</b> typically includes a variety of computer readable media. Such media can be any available media that is accessible by computer <b>502</b> and includes both volatile and non-volatile media, and removable and non-removable media.</p>
<p id="p-0130" num="0129">The system memory <b>506</b> includes computer readable media in the form of non-volatile memory such as read only memory (ROM) <b>512</b>, and/or volatile memory such as random access memory (RAM) <b>510</b>. A basic input/output system (BIOS) <b>514</b>, containing the basic routines that help to transfer information between elements within computer <b>502</b>, such as during start-up, is stored in the ROM <b>512</b>. The RAM <b>510</b> typically contains data and/or program modules that are immediately accessible to, and/or presently operated on, by the processing unit <b>504</b>.</p>
<p id="p-0131" num="0130">The computer <b>502</b> may also include other removable/non-removable, volatile/non-volatile computer storage media. By way of example, <figref idref="DRAWINGS">FIG. 9</figref> illustrates a hard disk drive <b>515</b> for reading from and writing to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive <b>518</b> for reading from and writing to a removable, non-volatile magnetic disk <b>520</b> (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive <b>522</b> for reading from and/or writing to a removable, non-volatile optical disk <b>524</b> such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive <b>515</b>, magnetic disk drive <b>518</b>, and optical disk drive <b>522</b> are each connected to the system bus <b>508</b> by one or more data media interfaces <b>527</b>. Alternatively, the hard disk drive <b>515</b>, magnetic disk drive <b>518</b>, and optical disk drive <b>522</b> can be connected to the system bus <b>508</b> by one or more interfaces (not shown).</p>
<p id="p-0132" num="0131">The disk drives and their associated computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computer <b>502</b>. Although the example illustrates a hard disk within the hard disk drive <b>515</b>, a removable magnetic disk <b>520</b>, and a non-volatile optical disk <b>524</b>, it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the exemplary computing system and environment.</p>
<p id="p-0133" num="0132">Any number of program modules can be stored on the hard disk contained in the hard disk drive <b>515</b>, magnetic disk <b>520</b>, non-volatile optical disk <b>524</b>, ROM <b>512</b>, and/or RAM <b>510</b>, including by way of example, the OS <b>526</b>, one or more application programs <b>528</b>, other program modules <b>530</b>, and program data <b>532</b>. Each OS <b>526</b>, one or more application programs <b>528</b>, other program modules <b>530</b>, and program data <b>532</b> (or some combination thereof) may implement all or part of the resident components that support the distributed file system.</p>
<p id="p-0134" num="0133">A user can enter commands and information into the computer <b>502</b> via input devices such as a keyboard <b>534</b> and a pointing device <b>536</b> (e.g., a &#x201c;mouse&#x201d;). Other input devices <b>538</b> (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and/or the like. These and other input devices are connected to the processing unit <b>504</b> via input/output interfaces <b>540</b> that are coupled to the system bus <b>508</b>, but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).</p>
<p id="p-0135" num="0134">A monitor <b>542</b> or other type of display device can also be connected to the system bus <b>508</b> via an interface, such as a video adapter <b>544</b>. In addition to the monitor <b>542</b>, other output peripheral devices can include components such as speakers (not shown) and a printer <b>546</b> which can be connected to computer <b>502</b> via the input/output interfaces <b>540</b>.</p>
<p id="p-0136" num="0135">Computer <b>502</b> can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device <b>548</b>. By way of example, the remote computing device <b>548</b> can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, game console, and the like. The remote computing device <b>548</b> is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer <b>502</b>.</p>
<p id="p-0137" num="0136">Logical connections between computer <b>502</b> and the remote computing device <b>548</b> are depicted as a local area network (LAN) <b>550</b> and a general wide area network (WAN) <b>552</b>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.</p>
<p id="p-0138" num="0137">When implemented in a LAN networking environment, the computer <b>502</b> is connected to a local network <b>550</b> via a network interface or adapter <b>554</b>. When implemented in a WAN networking environment, the computer <b>502</b> typically includes a modem <b>556</b> or other means for establishing communications over the wide network <b>552</b>. The modem <b>556</b>, which can be internal or external to computer <b>502</b>, can be connected to the system bus <b>508</b> via the input/output interfaces <b>540</b> or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link(s) between the computers <b>502</b> and <b>548</b> can be employed.</p>
<p id="p-0139" num="0138">In a networked environment, such as that illustrated with computer environment <b>100</b>, program modules depicted relative to the computer <b>502</b>, or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs <b>558</b> reside on a memory device of remote computer <b>548</b>. For purposes of illustration, application programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computing device <b>502</b>, and are executed by the data processor(s) of the computer. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.</p>
<p id="p-0140" num="0139">Various modules and techniques may be described herein in the general context of computer executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.</p>
<p id="p-0141" num="0140">An implementation of these modules and techniques may be stored on, or transmitted across, some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer readable media may comprise &#x201c;computer storage media&#x201d; and &#x201c;communications media.&#x201d;</p>
<p id="p-0142" num="0141">&#x201c;Computer storage media&#x201d; includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.</p>
<p id="p-0143" num="0142">&#x201c;Communication media&#x201d; typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.</p>
<p id="p-0144" num="0143">Although systems, media, methods, approaches, processes, etc. have been described in language specific to structural and functional features and/or methods, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or methods described. Rather, the specific features and methods are disclosed as exemplary forms of implementing the claimed invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus comprising:
<claim-text>one or more processors; and</claim-text>
<claim-text>computer storage memory coupled to the one or more processors having stored instructions that when executed perform operations, the computer storage memory comprising:
<claim-text>a generation module to generate a first ticket of a first authentication context for authenticating a client to a first server by performing authentication calculations;</claim-text>
<claim-text>a verification module, executable by the one or more processors, to verify the authentication based at least in part on using an algorithm of a hashed message authentication code (HMAC); and</claim-text>
<claim-text>the generation module to generate a second ticket of a second authentication context for authenticating the client to a second server, wherein the second ticket is generated based on a pass-through with evidence received by the apparatus, the pass-through with evidence to include at least a client credential, a credential verify message, and a nonce.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first ticket and the second ticket are each Kerberos tickets.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the apparatus is an authentication server and is further configured to issue a credential.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the apparatus is an authentication server and is further configured to issue a delegable credential that generates the second ticket from the first ticket.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the pass-through with evidence further includes evidence of authenticating the client to the first server.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the apparatus is an authentication server and is further configured to re-compute the authentication calculations associated with the first authentication context for authenticating the client to the first server.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first ticket is generated using a Kerberos protocol.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second ticket is generated using a Kerberos protocol.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method implemented at least partially by an authentication server, the method comprising:
<claim-text>establishing a secure network connection with a first server based at least in part on using a Transport Layer Security protocol;</claim-text>
<claim-text>receiving, at the authentication server, a request for an authentication context from a client;</claim-text>
<claim-text>performing, at the authentication server, authentication calculations in response to the request for the authentication context;</claim-text>
<claim-text>transmitting, from the authentication server, a response to the request for the authentication context to the first server over the Transport Layer Security protocol; and</claim-text>
<claim-text>passing to the authentication server, mapping information associated with the authentication context to identify a user via a subject name.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein
<claim-text>the request for the authentication context includes a first authentication context received from the client indicating that the client obtained a delegable credential; and</claim-text>
<claim-text>the request for the authentication context transmitted from the authentication server to the first server includes a pass-thru with evidence that is used to request another authentication context from the client to a second server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method implemented at least partially by an authentication server, the method comprising:
<claim-text>generating a first ticket of a first authentication context for authenticating a client to a first server by performing authentication calculations;</claim-text>
<claim-text>verifying the authentication based at least in part on using an algorithm of a hashed message authentication code (HMAC); and</claim-text>
<claim-text>generating a second ticket of a second authentication context for authenticating the client to a second server,</claim-text>
<claim-text>wherein the second ticket is generated based on a received pass-through with evidence received by the authentication server, the pass-through with evidence to include at least a client credential, a credential verify message, and a nonce.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first ticket and the second ticket are each Kerberos tickets.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the authentication server is further configured to issue a credential.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the authentication server is further configured to issue a delegable credential that generates the second ticket from the first ticket.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the pass-through with evidence further includes evidence of authenticating the client to the first server.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the authentication server is further configured to re-compute the authentication calculations associated with the first authentication context for authenticating the client to the first server.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first ticket is generated using a Kerberos protocol.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second ticket is generated using a Kerberos protocol.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. An apparatus comprising:
<claim-text>one or more processors; and</claim-text>
<claim-text>computer storage memory coupled to the one or more processors having stored instructions that when executed, configure the one or more processors to perform operations comprising:
<claim-text>establishing a secure network connection with a first server based at least in part on using a Transport Layer Security protocol;</claim-text>
<claim-text>receiving, at the apparatus, a request for an authentication context from a client;</claim-text>
<claim-text>performing, at the apparatus, authentication calculations in response to the request for the authentication context;</claim-text>
<claim-text>transmitting, from the apparatus, a response to the request for the authentication context to the first server over the Transport Layer Security protocol; and</claim-text>
<claim-text>passing mapping information associated with the authentication context to identify a user via a subject name.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein
<claim-text>the request for the authentication context includes a first authentication context received from the client indicating that the client obtained a delegable credential; and</claim-text>
<claim-text>the request for the authentication context transmitted from the apparatus to the first server includes a pass-thru with evidence that is used to request another authentication context from the client to a second server.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627412-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627412</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13086959</doc-number>
<date>20110414</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>306</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>04</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726  3</main-classification>
<further-classification>714  3</further-classification>
<further-classification>714E1111</further-classification>
<further-classification>709203</further-classification>
<further-classification>709219</further-classification>
</classification-national>
<invention-title id="d2e55">Transparent database connection reconnect</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6202169</doc-number>
<kind>B1</kind>
<name>Razzaghe-Ashrafi et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  631</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6286104</doc-number>
<kind>B1</kind>
<name>Buhle et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6308281</doc-number>
<kind>B1</kind>
<name>Hall et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  44</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6310884</doc-number>
<kind>B1</kind>
<name>Odenwald, Jr.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6421688</doc-number>
<kind>B1</kind>
<name>Song</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6560630</doc-number>
<kind>B1</kind>
<name>Vepa et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6654373</doc-number>
<kind>B1</kind>
<name>Lie</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6697868</doc-number>
<kind>B2</kind>
<name>Craft et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6801914</doc-number>
<kind>B2</kind>
<name>Barga</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6804815</doc-number>
<kind>B1</kind>
<name>Kerr</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7007103</doc-number>
<kind>B2</kind>
<name>Pinkerton et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7027439</doc-number>
<kind>B1</kind>
<name>Barrow et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7437547</doc-number>
<kind>B2</kind>
<name>Hyder et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7477644</doc-number>
<kind>B2</kind>
<name>Georgiou et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7545741</doc-number>
<kind>B1</kind>
<name>Manickavasagam et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7590755</doc-number>
<kind>B2</kind>
<name>Pinkerton et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7639624</doc-number>
<kind>B2</kind>
<name>McGee et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7643427</doc-number>
<kind>B2</kind>
<name>Kokku</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7673074</doc-number>
<kind>B1</kind>
<name>Sebastian</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7673168</doc-number>
<kind>B2</kind>
<name>Matsuda</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7689702</doc-number>
<kind>B1</kind>
<name>Tripathi et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7835369</doc-number>
<kind>B2</kind>
<name>Hu et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7849208</doc-number>
<kind>B2</kind>
<name>Elzur et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7873984</doc-number>
<kind>B2</kind>
<name>Hammons et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7876689</doc-number>
<kind>B2</kind>
<name>McGee</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7912064</doc-number>
<kind>B2</kind>
<name>Elzur</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7966405</doc-number>
<kind>B2</kind>
<name>Sundaresan et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>8068498</doc-number>
<kind>B2</kind>
<name>Chiba</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>8134928</doc-number>
<kind>B1</kind>
<name>Manickavasagam et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>8155158</doc-number>
<kind>B2</kind>
<name>Saavedra</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>8285881</doc-number>
<kind>B2</kind>
<name>Elzur</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>8291489</doc-number>
<kind>B2</kind>
<name>Droms et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>8300647</doc-number>
<kind>B2</kind>
<name>Abdulla et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>8369349</doc-number>
<kind>B2</kind>
<name>Martinez</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2003/0108066</doc-number>
<kind>A1</kind>
<name>Trippe</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2004/0044796</doc-number>
<kind>A1</kind>
<name>Vangal</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2006/0098573</doc-number>
<kind>A1</kind>
<name>Beer et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2006/0153238</doc-number>
<kind>A1</kind>
<name>Bar-On et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2006/0227703</doc-number>
<kind>A1</kind>
<name>Hung et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2006/0268866</doc-number>
<kind>A1</kind>
<name>Lok</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2008/0016511</doc-number>
<kind>A1</kind>
<name>Hyder</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2008/0189433</doc-number>
<kind>A1</kind>
<name>Nelson et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2009/0063509</doc-number>
<kind>A1</kind>
<name>Lockhart</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2009/0086736</doc-number>
<kind>A1</kind>
<name>Foong</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2009/0119536</doc-number>
<kind>A1</kind>
<name>Guo</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2009/0248950</doc-number>
<kind>A1</kind>
<name>Tamaki et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2011/0019553</doc-number>
<kind>A1</kind>
<name>Tripathi et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2011/0202667</doc-number>
<kind>A1</kind>
<name>Kimball et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2012/0210169</doc-number>
<kind>A1</kind>
<name>Coile et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2012/0265801</doc-number>
<kind>A1</kind>
<name>Mugundan et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2013/0114606</doc-number>
<kind>A1</kind>
<name>Schrum et al.</name>
<date>20130500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Saibal, &#x201c;Failover and Load Balancing in Oracle&#x201d;, Apr. 20, 2007, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Prabhu S &#x26; Venkat R., &#x201c;High Availability for Network Management Applications&#x201d;, 2007 IEEE, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Juniper Networks, &#x201c;VPN Resiliency&#x201d;, Jun. 2006, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Oracle Data Provider for .NET Developer's Guide, &#x201c;Connecting to the Oracle Database&#x201d;, Based on information and belief available, at least as early as Jan. 31, 2011, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>&#x201c;Highly Available Databases&#x201d;, at least as early as Jan. 31, 2011, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Bytes, &#x201c;Reestablishing a db Connection After a Network Failure&#x201d;, 2005, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Gibb, Allan, Dr., &#x201c;Data Replication in Low Bandwidth Military Environments&#x2014;State of the Art Review&#x201d;,at least as early as Jan. 31, 2011, 10 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Oracle, &#x201c;Recovering from a Server Failure&#x201d;, at least as early as Jan. 31, 2011, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>U.S. Appl. No. 13/086,272, filed Apr. 13, 2011, Mugundan.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>U.S. Appl. No. 13/086,269, filed Apr. 13, 2011, Mugundan.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Nishijima, Takamichi, et al., On Maximizing IP-SAN Throughput over TCP Connections with Automatic Parallelism Tuning for Long-Fat Networks, 2009 Ninth Annual International Symposium on Applications and the Internet, 2009 IEEE, pp. 251-254.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Business Wire, &#x201c;Ecessa Enables SMEs to Maximize Bandwidth from Multiple Internet Links to Support Bandwidth-Consuming Applications&#x201d;, Sep. 15, 2009, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Inoue, Fumito, et al., &#x201c;On Maximizing iSCSI Throughput Using Multiple Connections with Automatic Parallelism Tuning&#x201d;, 2008, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Ito, Takeshi, et al., &#x201c;GridFTP-APT: Automatic Parallelism Tuning Mechanism for Data Transfer Protocol GridFTP&#x201d;, 2006, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Zhang, Junyu, et al., &#x201c;To Improve Throughput Via Multi-Pathing and Parallel TCP on Each Path,&#x201d; 2009 Fourth ChinaGrid Annual Conference, Nov. 17, 2009, pp. 16-21.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Naldini, Andrea, et al., &#x201c;Increasing Performance of TCP Data Transfers through Multiple Parallel Connections&#x201d;, 2009, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>Fiore, M., et al., &#x201c;Concurrent Multipath Communication for Real-Time Traffic&#x201d;, Dec. 2006, pp. 3307-3320.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Schlansker, Michael, et al., &#x201c;High-Performance Ethernet-Based Communications for Future Multi-Core Processors&#x201d;, Nov. 16, 2007, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Office Action dated Feb. 15, 2013 cited in U.S. Appl. No. 13/086,269.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Office Action dated Feb. 12, 2013 cited in U.S. Appl. No. 13/086,272.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00072">
<othercit>Office Action dated Jul. 15, 2013 cited in U.S. Appl. No. 13/086,272.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00073">
<othercit>West et al., &#x201c;TCP/IP Field Behavior&#x201d;, Network Working Group, Mar. 2006, pp. 1-42.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00074">
<othercit>Postel, &#x201c;The TCP Maximum Segment Size and Related Topics&#x201d;, Network Working Group, Nov. 1983, pp. 1-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00075">
<othercit>Office Action dated Sep. 25, 2013 cited in U.S. Appl. No. 13/086,269.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00076">
<othercit>Notice of Allowance dated Nov. 15, 2013 cited in U.S. Appl. No. 13/086,272.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714  3</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714E11113</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709219</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120266211</doc-number>
<kind>A1</kind>
<date>20121018</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mugundan</last-name>
<first-name>Balendran</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gvozdjak</last-name>
<first-name>Peter</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jeswani</last-name>
<first-name>Sapna</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Jimmy Yu</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ram</last-name>
<first-name>Raghu</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mumford</last-name>
<first-name>Chadwin James</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Olix</last-name>
<first-name>David</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Mugundan</last-name>
<first-name>Balendran</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Gvozdjak</last-name>
<first-name>Peter</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Jeswani</last-name>
<first-name>Sapna</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Jimmy Yu</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Ram</last-name>
<first-name>Raghu</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Mumford</last-name>
<first-name>Chadwin James</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Olix</last-name>
<first-name>David</first-name>
<address>
<city>Woodinville</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Workman Nydegger</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tabor</last-name>
<first-name>Amare F</first-name>
<department>2434</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A first computer establishes a logical connection to a second computer for requesting and/or receiving data from a database. A logical connection is independent of the underlying physical network connection used to connect to the database. A context identifier is stored by both computers to enable the context of a logical connection to be persisted between switches from one physical network connection to another within the logical connection thus enabling database transfers to be continued on a second physical network connection when a failure in a first physical network connection occurs.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="100.16mm" wi="238.25mm" file="US08627412-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="231.31mm" wi="150.37mm" orientation="landscape" file="US08627412-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="237.24mm" wi="130.05mm" orientation="landscape" file="US08627412-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="226.82mm" wi="171.62mm" file="US08627412-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="226.40mm" wi="167.89mm" file="US08627412-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.37mm" wi="165.44mm" file="US08627412-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">Not Applicable.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<heading id="h-0003" level="1">Background and Relevant Art</heading>
<p id="p-0003" num="0002">Generally when a user establishes a connection to a database to send or receive data, the database client creates a single physical connection (e.g. a TCP/IP socket connection) to the database, over a single network device. This single physical connection is mapped to the database connection at the application level. Because of this, if the physical connection fails for any reason (e.g. hardware failure, network failure, etc.), the database connection from the application's perspective fails also. Thus, a new database connection must be established and the transfer of data restarted.</p>
<p id="p-0004" num="0003">Further, many computing devices contain multiple physical network devices. For example, a computer can contain an Ethernet network interface card, an 802.11 network interface card, and oftentimes other network interface cards. A physical connection may be established using any of the multiple physical network devices. However, current approaches do not provide a way to begin a database transfer over one physical connection, and then switch to another physical connection to continue the database transfer.</p>
<heading id="h-0004" level="1">BRIEF SUMMARY</heading>
<p id="p-0005" num="0004">The present invention extends to methods, systems, and computer program products for transparently reconnecting database connections within a logical connection. The invention also extends to methods, systems, and computer program products for establishing multiple database connections within the context of a single logical connection.</p>
<p id="p-0006" num="0005">In one embodiment, a first computer requests a first database connection over a first physical network connection to a second computer. The first computer receives a response indicating that a first database connection is established. The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. The first computer receives packets of a database transfer from the second computer over the first physical network connection. In response to a failure in the first physical network connection during the database transfer, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer. The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection as it existed when the first physical network connection failed. The first computer then receives further packets of the database transfer over the second physical network connection of the logical connection.</p>
<p id="p-0007" num="0006">In another embodiment, a first computer requests a first database connection over a first physical network connection to a second computer. The first computer receives a response indicating that a first database connection is established. The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. While the first physical network connection is established, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer. The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection. The first computer receives packets of a database transfer from the second computer over the first physical network connection. In response to a failure in the first physical network connection while the first computer is receiving packets of a database transfer over the first physical network connection, the first computer commences to receive further packets of the database transfer over the second physical network connection of the logical connection.</p>
<p id="p-0008" num="0007">In another embodiment, a database server receives a request for a first database connection from a client computer over a first physical network connection. The database server establishes the first database connection with the client computer and associates a context identifier with the first database connection to identify a logical connection between the database server and the client computer. The database server caches the context identifier in conjunction with the context of the logical connection between the database server and the client computer. The database server receives a request for a second database connection from the client computer over a second physical network connection. The request for the second database connection includes the context identifier of the logical connection. The database server establishes the second database connection and associates the context of the logical connection with the second database connection. In response to a database request received from the client computer over the first physical network connection, the database server sends packets of a database response to the client computer over the first physical network connection. Upon detecting a failure in the first physical network connection, the database server switches to the second physical network connection to send the database response to the client computer.</p>
<p id="p-0009" num="0008">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.</p>
<p id="p-0010" num="0009">Additional features and advantages of the invention will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example computer architecture in which database connections are established within a logical connection according to one embodiment of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example computer architecture in which database connections are established within a logical connection according to another embodiment of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a flowchart of a method for utilizing a logical connection according to one embodiment of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a flowchart of a method for utilizing a logical connection according to another embodiment of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a flowchart of a method for utilizing a logical connection according to another embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0017" num="0016">The present invention extends to methods, systems, and computer program products for transparently reconnecting database connections within a logical connection. The invention also extends to methods, systems, and computer program products for establishing multiple database connections within the context of a single logical connection.</p>
<p id="p-0018" num="0017">In one embodiment, a first computer requests a first database connection over a first physical network connection to a second computer. The first computer receives a response indicating that a first database connection is established. The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. The first computer receives packets of a database transfer from the second computer over the first physical network connection. In response to a failure in the first physical network connection during the database transfer, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer. The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection as it existed when the first physical network connection failed. The first computer then receives further packets of the database transfer over the second physical network connection of the logical connection.</p>
<p id="p-0019" num="0018">In another embodiment, a first computer requests a first database connection over a first physical network connection to a second computer. The first computer receives a response indicating that a first database connection is established. The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. While the first physical network connection is established, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer. The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection. The first computer receives packets of a database transfer from the second computer over the first physical network connection. In response to a failure in the first physical network connection while the first computer is receiving packets of a database transfer over the first physical network connection, the first computer commences to receive further packets of the database transfer over the second physical network connection of the logical connection.</p>
<p id="p-0020" num="0019">In another embodiment, a database server receives a request for a first database connection from a client computer over a first physical network connection. The database server establishes the first database connection with the client computer and associates a context identifier with the first database connection to identify a logical connection between the database server and the client computer. The database server caches the context identifier in conjunction with the context of the logical connection between the database server and the client computer. The database server receives a request for a second database connection from the client computer over a second physical network connection. The request for the second database connection includes the context identifier of the logical connection. The database server establishes the second database connection and associates the context of the logical connection with the second database connection. In response to a database request received from the client computer over the first physical network connection, the database server sends packets of a database response to the client computer over the first physical network connection. Upon detecting a failure in the first physical network connection, the database server switches to the second physical network connection to send the database response to the client computer.</p>
<p id="p-0021" num="0020">A logical connection includes one or more physical network connections that may be concurrently or consecutively established. Whether concurrently or consecutively established, multiple physical network connections may be established using the same or different physical network devices. A logical connection functions to abstract the underlying physical connection from the database connection at the application level. Thus, a switch from one physical network connection to another is transparent to the application.</p>
<p id="p-0022" num="0021">In other words, the application views the logical connection as the database connection whether the logical connection includes one or more physical network connections. Unlike previous approaches where the database connection was mapped one-to-one to the underlying physical connection, a logical connection according to the invention is separate from the underlying one or more physical network connections that make up the logical connection.</p>
<p id="p-0023" num="0022">Because the logical connection abstracts the physical network connection(s) from the database connection, a logical connection is able to persist through physical network connection failures. For example, as further described below, a physical network connection within the logical connection may fail, but may be reestablished within the logical connection so that it appears to the application that the database connection did not fail (i.e. a data transfer over the database connection does not have to be restarted or resent). Similarly, a logical connection allows multiple physical network connections to be concurrently established and utilized within a single logical connection. For example, as further described below, a logical connection may establish a primary and a secondary physical network connection. The secondary physical network connection may serve as a backup that is switched to continue a data transfer if the primary physical network connection fails.</p>
<p id="p-0024" num="0023">Embodiments of the present invention may comprise or utilize a special purpose or general-purpose computer including computer hardware, such as, for example, one or more processors and system memory, as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer-readable media for carrying or storing computer-executable instructions and/or data structures. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer. Computer-readable media that store computer-executable instructions are computer storage media (devices). Computer-readable media that carry computer-executable instructions are transmission media. Thus, by way of example, and not limitation, embodiments of the invention can comprise at least two distinctly different kinds of computer-readable media: computer storage media (devices) and transmission media.</p>
<p id="p-0025" num="0024">Computer storage media (devices) includes RAM, ROM, EEPROM, CD-ROM, DVD, or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store desired program code means (software) in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.</p>
<p id="p-0026" num="0025">A &#x201c;network&#x201d; is defined as one or more data links that enable the transport of electronic data between computers and/or modules and/or other electronic devices. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a transmission medium. Transmissions media can include a network and/or data links which can be used to carry or desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media.</p>
<p id="p-0027" num="0026">Further, upon reaching various computer components, program code means in the form of computer-executable instructions or data structures can be transferred automatically from transmission media to computer storage media (devices) (or vice versa). For example, computer-executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module (e.g., a &#x201c;NIC&#x201d;), and then eventually transferred to computer RAM and/or to less volatile computer storage media (devices) at a computer. Thus, it should be understood that computer storage media (devices) can be included in computer components that also (or even primarily) utilize transmission media.</p>
<p id="p-0028" num="0027">Computer-executable instructions comprise, for example, instructions and data which, when executed at a processor, cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, or even source code. Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather, the described features and acts are disclosed as example forms of implementing the claims.</p>
<p id="p-0029" num="0028">Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer configurations, including, personal computers, desktop computers, laptop computers, message processors, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, routers, switches, and the like. The invention may also be practiced in distributed system environments where local and remote computers, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0030" num="0029">A logical connection as referred to in this specification refers to the overall connection from the application perspective between a first and a second computer. A logical connection may include one or more physical network connections. When a logical connection uses multiple physical network connections (whether concurrently or consecutively established or both), each physical network connection is associated with the same context. In other words, a logical connection makes it possible to view multiple database connections as a single connection. Therefore, a logical connection is different from a traditional database connection in that the logical connection does not have a one-to-one mapping to the underlying physical network connection.</p>
<p id="p-0031" num="0030">The logical connection is represented by a context ID that is cached by the computers on both ends of the connection. Because the logical connection is not tied to the underlying physical network connection, if a physical connection fails, the logical connection can be maintained by reestablishing the physical network connection (either by using the same network interface card (NIC), or establishing a physical network connection using a different NIC) and associating it with the same context ID.</p>
<p id="p-0032" num="0031">Further, by representing a logical connection with a context ID, a logical connection may comprise multiple physical network connections whether established concurrently or consecutively (i.e. establishing a second physical connection after a first physical connection fails). For example, a client computer can establish two or more separate physical network connections to a database server within the same logical connection. Each of the physical network connections in the logical connection will share the same context ID. Thus, from the perspective of the application, it appears as though a single database connection exists even though multiple physical network connections are being used to send and receive data from the database server.</p>
<p id="p-0033" num="0032">An example logical connection comprises one or more physical connections between a client computer and a database server when the client computer submits a database request to the database server. The client computer may contain multiple physical network devices that are each individually capable of establishing a physical network connection to send and/or receive data. The database server responds to the client computer's database request by creating a response (e.g. rows of data from the database) that is divided into packets. These packets are sent to the client computer. Different packets of the response may be sent to different endpoints (i.e. physical network devices) exposed at the client computer as will be further described below with reference to <figref idref="DRAWINGS">FIGS. 1 and 2</figref>.</p>
<p id="p-0034" num="0033">Although the above example describes a logical connection between a client computer and a database server, the present invention extends to logical connections between any two computers connected in any network topology such as client/server and peer-to-peer. For example, a computer having both an Ethernet network interface card (NIC) and an 802.11 NIC can expose different IP addresses for each NIC. Embodiments of the invention can send packets of a database response to each of the NICs. One NIC could establish a connection after the other NIC's connection fails (such as in <figref idref="DRAWINGS">FIG. 1</figref> described below), or both NICs could establish a physical connection concurrently (such as in <figref idref="DRAWINGS">FIG. 2</figref> described below).</p>
<p id="p-0035" num="0034">Two or more physical network devices of the same type (e.g. two Ethernet NICs) could also be used to establish the logical connection. The invention is not limited to any particular network packet routing protocol. Any network packet routing protocol can be used for any of the individual network connections. Further, different physical network connections within the same logical connection can use different network packet routing protocols.</p>
<p id="p-0036" num="0035">When a logical connection is established, a client computer, in addition to receiving database responses, can also send database requests over the logical connection. In such embodiments, if a database request being sent over one physical connection of a logical connection is interrupted (due to a failure in the physical connection), the client computer can continue transmitting the database request over the logical connection either by switching to another physical connection of the logical connection if one has already been established, or by establishing another physical connection whether using the same or a different NIC or other network device. Because the context ID of the logical connection is used to establish any physical connection of the logical connection, the context of the logical connection is maintained through connection failure and switching.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example computer architecture in which database connections are established according to one embodiment of the invention. As shown, client computer <b>101</b> requests a database connection to database server <b>102</b> over NIC <b>103</b><i>a</i>. Database server <b>102</b> establishes the connection and returns a context ID to client computer <b>101</b>. Both client computer <b>101</b> and database server <b>102</b> cache the context ID. The context ID is used to identify the logical connection between client computer <b>101</b> and database server <b>102</b>.</p>
<p id="p-0038" num="0037">Although <figref idref="DRAWINGS">FIG. 1</figref> shows that the context ID is created by the database server, in some embodiments of the invention, the initial request from the client may specify a context ID to the database server or information from which the database server generates the context ID. In such embodiments, the database server may not need to include the context ID in the connection response.</p>
<p id="p-0039" num="0038">After the logical connection is established, the underlying physical connection between client computer <b>101</b> and database server <b>102</b> fails. For example, NIC <b>103</b><i>a </i>over which the physical connection was established may fail. In response, client computer <b>101</b> requests another database connection to database server <b>102</b>. This request includes the context ID that identifies the logical connection. When the database server <b>102</b> receives the request and identifies the context ID, the database server will reestablish the logical connection with client computer <b>101</b> using the physical network connection to NIC <b>103</b><i>b</i>. In this manner, the same logical connection is maintained even though the underlying physical network connection is switched from NIC <b>103</b><i>a </i>to NIC <b>103</b><i>b</i>. This process can be repeated as necessary any time a physical network connection fails. In other words, a logical connection may include any number of physical network connections which may be switched to at any time.</p>
<p id="p-0040" num="0039">In some embodiments, a database server may be configured to store context IDs for a specified duration after which they become invalid. If a connection attempt is made by a client computer during this duration which specifies a context ID that the database server is storing and is still valid, the database server may automatically create a connection and associate the stored context identified by the context ID with the connection.</p>
<p id="p-0041" num="0040">In the example logical connection of <figref idref="DRAWINGS">FIG. 1</figref>, the second physical connection is established using a different NIC. However, the same NIC may be used to establish the second physical connection. For example, NIC <b>103</b><i>a </i>can be used to establish the second connection after the first connection fails.</p>
<p id="p-0042" num="0041">As also shown in <figref idref="DRAWINGS">FIG. 1</figref>, packets of a data transfer using a logical connection may be individually identified with an identifier. Identifiers may be used to synchronize the transfer of data between client computer <b>101</b> and database server <b>102</b>. For example, when sending a response to client computer <b>101</b>, database server <b>102</b> may track which packets it has sent over the logical connection. Then, when the physical network connection fails between client computer <b>101</b> and database server <b>102</b>, database server can compare the identifiers of the packets it has sent to the identifiers of the packets the client computer <b>101</b> has received. If the comparison shows that some packets were not received (such as due to the connection failure), the database server <b>102</b> may resend the packets that were not received by client computer <b>101</b>.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 2</figref> is similar to <figref idref="DRAWINGS">FIG. 1</figref>, but shows how a second physical connection can be established within the logical connection before the first connection fails. This figure illustrates that the timing of establishing additional physical connections within a logical connection is independent of the status of any other physical connection. As shown, <figref idref="DRAWINGS">FIG. 2</figref> differs from <figref idref="DRAWINGS">FIG. 1</figref> in that client computer <b>201</b> establishes a second physical connection via NIC <b>203</b><i>b </i>to database server <b>202</b> prior to the first physical connection via NIC <b>203</b><i>a </i>failing. This second physical connection uses the same context ID as the first physical connection. After the failure of the first physical connection, client computer <b>201</b> and database server <b>202</b> switch to the second physical connection to continue the data transfer. Although <figref idref="DRAWINGS">FIG. 2</figref> only shows two physical connections within the logical connection, the logical connection may contain any number of physical connections included both concurrently and consecutively established connections.</p>
<p id="p-0044" num="0043">The context ID may represent various types of contextual information. For example, the context ID may represent one or more of a logical connection level context, a command level context, or a resultsets level context. The logical connection level context may include the current database, transactions, and the like. The command level context may include prepared statement handles. The resultsets level context may include the current cursor position. The context ID may be represented as a globally unique identifier (GUID).</p>
<p id="p-0045" num="0044">When a client computer requests a physical connection to a database server that includes a context ID, the database server compares the context ID to context IDs that are cached on the server. When a cached context ID is found that matches the context ID included in the request, the database server will establish the physical network connection with the client computer with the same context as defined by the matching context ID.</p>
<p id="p-0046" num="0045">For example, if the request is received after a previous physical connection with the client computer has failed, the context ID will identify the context of the logical connection at the time of the failure. In this manner, the database server may continue a data transfer with the client computer that was interrupted by the failure in the previous physical connection.</p>
<p id="p-0047" num="0046">Additionally, if the request is received while another physical connection exists within a logical connection between the client computer and the database server, the context ID will indicate the context of the logical connection (which may include multiple concurrently used physical connections as further described below). Then if one of the physical connections in the logical connection fails, another of the physical connections can be switched to to continue a data transfer with a generally undetectable interruption from the application's perspective.</p>
<p id="p-0048" num="0047">When connections to the database server require authentication, the mechanism used to authenticate the initial connection of the logical connection may be included in the contextual information that is maintained by the database server. This allows the same authentication mechanism to be used to authenticate subsequent database connections made within the logical connection. This includes the server storing the original security context to enable the server to verify that the client computer's subsequent connection requests are made from the same security context as before.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 3</figref> provides a flowchart of a method <b>300</b> for establishing a second physical network connection within a logical connection after a first physical network connection within the logical connection fails. The method <b>300</b> will be described with reference to the computer architecture of <figref idref="DRAWINGS">FIG. 1</figref>. A first computer requests a first database connection over a first physical network connection to a second computer (act <b>301</b>). For example, client computer <b>101</b> may request a database connection to database server <b>102</b> over NIC <b>103</b><i>a</i>. The first computer receives a response indicating that a first database connection is established (act <b>302</b>). The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. For example, client computer <b>101</b> can receive a response from database server <b>102</b> that includes a context identifier to identify a logical connection between client computer <b>101</b> and database server <b>102</b>. The first computer receives packets of a database transfer from the second computer over the first physical network connection (act <b>303</b>). For example, client computer <b>101</b> may receive packets of a database response from database server <b>102</b>.</p>
<p id="p-0050" num="0049">In response to a failure in the first physical network connection during the database transfer, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer (act <b>304</b>). The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection as it existed when the first physical network connection failed. For example, client computer <b>101</b>'s network connection via NIC <b>103</b><i>a </i>may fail, and in response, client computer <b>101</b> may request another database connection via NIC <b>103</b><i>b </i>using the context identifier. The first computer then receives further packets of the database transfer over the second physical network connection of the logical connection (act <b>305</b>). For example, client computer <b>101</b> may continue to receive packets of the database transfer via NIC <b>103</b><i>b </i>such that the database transfer is initially made over NIC <b>103</b><i>a</i>, but then switched to NIC <b>103</b><i>b </i>without losing the context of the database transfer.</p>
<p id="p-0051" num="0050">In some embodiments of method <b>300</b>, the first and second physical network connections are established via the same NICs on the first computer, whereas, in other embodiments, they are established via different NICs.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 4</figref> provides a flowchart of a method <b>400</b> for switching to a second physical network connection within a logical connection when a first physical network connection within the logical connection fails. The method <b>400</b> will be described with reference to the computer architecture of <figref idref="DRAWINGS">FIG. 2</figref>. A first computer requests a first database connection over a first physical network connection to a second computer (act <b>401</b>). For example, client computer <b>201</b> may request a database connection to database server <b>202</b> over NIC <b>203</b><i>a</i>. The first computer receives a response indicating that a first database connection is established (act <b>402</b>). The response includes a context identifier which is stored by the first and second computers to identify a logical connection between the first and second computers. For example, client computer <b>201</b> can receive a response from database server <b>202</b> that includes a context identifier to identify a logical connection between client computer <b>201</b> and database server <b>202</b>. While the first physical network connection is established, the first computer requests a second database connection over a second physical network connection within the logical connection to the second computer (act <b>403</b>). The request for the second database connection includes the context identifier of the logical connection to enable the second database connection to be established with the context of the logical connection. For example, client computer <b>202</b> may request another database connection via NIC <b>203</b><i>b </i>using the context identifier. The first computer receives packets of a database transfer from the second computer over the first physical network connection (act <b>404</b>). For example, client computer <b>201</b> may receive packets of a database response from database server <b>202</b>. In response to a failure in the first physical network connection while the first computer is receiving packets of a database transfer over the first physical network connection, the first computer commences to receive further packets of the database transfer over the second physical network connection of the logical connection (act <b>405</b>). For example, client computer <b>201</b>'s network connection via NIC <b>203</b><i>a </i>may fail, and in response, client computer <b>201</b> may continue receiving packets of the database transfer via NIC <b>203</b><i>b. </i></p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 5</figref> provides a flowchart of a method <b>500</b> of switching from a first physical network connection to a second physical network connection to continue sending packets of a database response from a database server to a client computer. The method <b>500</b> is from the perspective of the database server and will be described with reference to the computer architecture of <figref idref="DRAWINGS">FIG. 2</figref>. However, method <b>500</b> could also be described with reference to the computer architecture of <figref idref="DRAWINGS">FIG. 1</figref>. In other words, method <b>500</b> applies to embodiments when the second network connection is established after the first network connection fails, as well as to embodiments when the second network connection is established before the first network connection fails.</p>
<p id="p-0054" num="0053">In method <b>500</b>, a database server receives a request for a first database connection from a client computer over a first physical network connection (act <b>501</b>). For example, database server <b>202</b> receives a request for a first database connection from client computer <b>201</b>. The database server establishes the first database connection with the client computer and associates a context identifier with the first database connection to identify a logical connection between the database server and the client computer (act <b>502</b>). For example, database server <b>202</b> may generate a context identifier, or may receive a context identifier from client computer <b>201</b>, to identify a logical connection between database server <b>202</b> and client computer <b>201</b> that includes the first database connection over a first physical network connection. The database server caches the context identifier in conjunction with the context of the logical connection between the database server and the client computer (act <b>503</b>). For example, database server <b>202</b> may cache the context identifier to identify the logical connection to client computer <b>201</b>.</p>
<p id="p-0055" num="0054">The database server receives a request for a second database connection from the client computer over a second physical network connection (act <b>504</b>). The request for the second database connection includes the context identifier of the logical connection. For example, database server <b>202</b> may receive a request for a second database connection from the client computer <b>201</b> that includes the context identifier. The database server establishes the second database connection and associates the context of the logical connection with the second database connection (act <b>505</b>). For example, database server <b>202</b> may establish the second database connection within the logical connection such that the second database connection has the same context as the first database connection.</p>
<p id="p-0056" num="0055">In response to a database request received from the client computer over the first physical network connection, the database server sends packets of a database response to the client computer over the first physical network connection (act <b>506</b>). For example, database server <b>202</b> may send packets of a database response to client computer <b>201</b>. Upon detecting a failure in the first physical network connection, the database server switches to the second physical network connection to send the database response to the client computer (act <b>507</b>). For example, database server <b>202</b> may switch to the second database connection of the logical connection to continue sending packets of the database response to client computer <b>201</b>.</p>
<p id="p-0057" num="0056">In some embodiments of method <b>500</b>, the request for the second database connection is received while the first physical network connection is still connected (and accordingly while the database response is being sent on the first database connection over the first physical network connection). In other embodiments, the request for the second database connection is received after the first physical network connection fails. The invention also extends to embodiments where multiple database connections are concurrently established over different physical network connections even before any database transfers are commenced. In other words, the invention is not limited to establishing second database connections during a database transfer. In the invention, additional (including two or more) database connections may be established within a single logical connection at any time. These database connections, because they are part of the same logical connection, share the same context.</p>
<p id="p-0058" num="0057">In some embodiments of methods <b>300</b>, <b>400</b>, and <b>500</b>, the request for the first database connection may include authentication criteria for authenticating the first computer (or client computer) to the second computer (or database server). In some such embodiments, the second computer may store the authentication criteria such that the request for the second database connection can be authenticated via the stored authentication criteria rather than requiring that the first computer supply the authentication criteria a second time.</p>
<p id="p-0059" num="0058">Additionally, in some embodiments of methods <b>300</b>, <b>400</b>, and <b>500</b>, some or all of the packets of the database transfer may include identifiers. The identifiers may be used to identify which packets have been sent and/or received over the logical connection. For example, after a network connection failure, the first (or client) computer may provide the second computer (or database server) with the identifiers of the packets it has received. The second computer can use the identifiers received from the first computer to determine whether any packets were sent by the second computer but not received by the first computer. The second computer may then retransmit any packets accordingly.</p>
<p id="p-0060" num="0059">In further embodiments, the packet identifiers may be used to identify a sequential order of the packets. In these embodiments, the sequential order defines the proper ordering in which the receiving computer (e.g. the client computer or the database server depending on whether the database transfer is a request or a response) is to process the packets. In these embodiments, the sequential identifier may be used similarly to the identifier described above for identifying packets that were sent but not received. However, in these embodiments, the receiving computer may only need to provide the sequential identifier of the last received packet in the sequence to identify which packets of the database transfer the receiving computer has received.</p>
<p id="p-0061" num="0060">Although <figref idref="DRAWINGS">FIGS. 1 and 2</figref> generally illustrate embodiments where a database response is sent from a database server to a client computer, the principles of the present invention apply equally to database requests sent from the client computer to the database server. For example, if during the transmission of a batch request from a client computer to a database server, a database connection fails, a second database connection within the same logical connection may be used to continue the transfer of the batch request. In such embodiments, the context ID is used to establish or reestablish database connections with the same context to ensure that the batch request may continue without interruption in spite of the failure in the database connection.</p>
<p id="p-0062" num="0061">Further, although this specification has described logical connections as including multiple database connection using different physical network connections, it is to be understood that the present invention may also be implemented in virtual computing environments. For example, two physical computing devices may each host multiple virtual machines. There may only be a single physical network connection between the two computing devices (i.e. a physical connection between one NIC on each device). However, one of the devices may execute multiple client applications (e.g. one client application on each virtual machine) that each communicate with a database instance on the other device (e.g. one database instance on each virtual machine). The network connections between the client applications and database instances in this scenario would be virtual network connections between virtual network interfaces. The present invention also applies to these virtual environments in that multiple virtual network connections may be associated with a logical connection.</p>
<p id="p-0063" num="0062">The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for improving reliability of a connection between a client computer accessing a database at a second computer, the computer-implemented method comprising:
<claim-text>at a client computer, initiating a logical connection to a second computer containing a database, the logical connection comprising a plurality of network interface cards each providing a separate physical network connection to the database at the second computer, and the logical connection being initiated by using a first physical network connection to send a first request from the client computer for a first database connection to the second computer;</claim-text>
<claim-text>receiving at the client computer a response indicating that the first database connection is established;</claim-text>
<claim-text>generating a context identifier that is associated with said logical connection, the context identifier being generated at either the client computer or the second computer;</claim-text>
<claim-text>caching the context identifier at both the client computer and the second computer;</claim-text>
<claim-text>either concurrently with the first database connection or consecutively with the first database connection, the client computer sending a second request for a second database connection using a second physical connection of the logical connection, and the second request including the context identifier associated with the logical connection;</claim-text>
<claim-text>in response to the context identifier included with the second request, establishing the second database connection between the client computer and the second computer so that the logical connection is not disrupted even in the event of a failure of the first database connection; and</claim-text>
<claim-text>receiving packets of a database transfer from the second computer through the second database connection of the logical connection even in the event of a failure of the first database connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first physical network connection is established via a first network interface card on the client computer, and the second physical network connection is established via a second network interface card on the client computer.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first and second physical network connections are established via the same network interface card on the client computer.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first request for the first database connection includes authentication criteria for authenticating the client computer to the second computer.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second request for the second database connection is authenticated using the authentication criteria supplied in the first request for the first database connection.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the logical connection abstracts the physical network connections from the database to the second computer.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising sending an indication to the second computer of which packets of the data transfer the client computer had received prior to failure of the first database connection to enable the second computer to determine whether any packets of the data transfer were sent but not received at the client computer over the failed first database connection.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer-implemented method for improving reliability of a connection between a client computer accessing a database at a second computer, the computer-implemented method comprising:
<claim-text>at a client computer, initiating a logical connection to a second computer containing a database, the logical connection comprising a plurality of network interface cards each providing a separate physical network connection to the database at the second computer, and the logical connection being initiated by using a first physical network connection to send a first request from the client computer for a first database connection to the second computer;</claim-text>
<claim-text>receiving at the client computer a response indicating that the first database connection is established;</claim-text>
<claim-text>generating a context identifier that is associated with said logical connection, the context identifier including an authentication mechanism and also representing one or more of a logical connection level context, a command level context or a resultsets level context, and the context identifier being generated at either the client computer or the second computer;</claim-text>
<claim-text>caching the context identifier at both the client computer and the second computer;</claim-text>
<claim-text>either concurrently with the first database connection or consecutively with the first database connection, the client computer sending a second request for a second database connection using a second physical connection of the logical connection, and the second request including the context identifier associated with the logical connection;</claim-text>
<claim-text>in response to the context identifier included with the second request, and without having to re-authenticate the logical connection, establishing the second database connection between the client computer and the second computer so that the logical connection is not disrupted even in the event of a failure of the first database connection; and</claim-text>
<claim-text>receiving packets of a database transfer from the second computer through the second database connection of the logical connection even in the event of a failure of the first database connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first request for the first database connection includes the authentication mechanism for authenticating the client computer to the second computer, and wherein the second request for the second database connection is authenticated using the authentication mechanism supplied in the first request for the first database connection.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>transmitting packets of a database transfer to the second computer over the first physical network connection of the logical connection; and</claim-text>
<claim-text>in response to failure of the first physical network connection, switching to the second physical network connection to continue transmitting packets of the database transfer to the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer-implemented method for improving reliability of a connection between a client computer accessing a database at a server computer, the computer-implemented method comprising:
<claim-text>at a server computer, receiving from a client computer a request to initiate a logical connection to with the client computer, the logical connection comprising a plurality of network interface cards each providing a separate physical network connection to a database at the server computer, and the logical connection being initiated by using a first physical network connection to send a first request from the client computer for a first database connection to the server computer;</claim-text>
<claim-text>the server computer sending to the client computer a response indicating that the first database connection is established;</claim-text>
<claim-text>generating a context identifier that is associated with said logical connection, the context identifier being generated at either the client computer or the server computer;</claim-text>
<claim-text>caching the context identifier at both the client computer and the server computer;</claim-text>
<claim-text>either concurrently with the first database connection or consecutively with the first database connection, receiving at the server computer a second request for a second database connection using a second physical connection of the logical connection, and the second request including the context identifier associated with the logical connection;</claim-text>
<claim-text>in response to the context identifier included with the second request, establishing the second database connection between the client computer and the server computer so that the logical connection is not disrupted even in the event of a failure of the first database connection; and</claim-text>
<claim-text>sending packets of a database transfer from the server computer through the second database connection of the logical connection even in the event of a failure of the first database connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the server computer switches to the second physical network connection to send the database transfer to the client computer in response to failure of the first physical network connection.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second request for the second database connection is received from the client computer in response to failure of the first physical network connection.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>at the server computer, comparing the context identifier included with the second request for the second database connection to a plurality of stored context identifiers; and</claim-text>
<claim-text>upon locating a matching context identifier, associating the context indicated by the matching context ID to the second database connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the packets of the database transfer include identifiers which are used to identify which packets have been sent to the client computer, and wherein the second request for the second database connection includes the identifiers of the packets of the database transfer that the client computer has received prior to failure of the first physical network connection, and wherein the method further comprises:
<claim-text>comparing the identifiers in the second request for the second database connection to identifiers stored at the server computer for packets of the database transfer;</claim-text>
<claim-text>determining that at least one packet of the database transfer that was sent by the server computer over the first physical network connection was not received by the client computer; and</claim-text>
<claim-text>resending the at least one packet over the second physical network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the request for the first database connection includes authentication criteria for authenticating the client computer to the server computer, the method further comprising:
<claim-text>caching the authentication criteria with the context identifier of the logical connection; and</claim-text>
<claim-text>using the cached authentication criteria to re-authenticate the client computer when establishing the second database connection without requiring the client computer to supply the authentication criteria in the request for the second database connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first and second physical network connections are established either:
<claim-text>with the same network interface card on the client computer; or</claim-text>
<claim-text>with a first and a second network interface card respectively on the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the context identifier is either:
<claim-text>received in the first request for the first database connection from the client computer; or</claim-text>
<claim-text>generated by the server computer in response to the first request for the first database connection from the client computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>receiving a third request for one or more additional database connections from the client computer over one or more additional physical network connections, wherein the third request for the one or more additional database connections includes the context identifier of the logical connection;</claim-text>
<claim-text>establishing the one or more additional database connections and associating the context of the logical connection with the one or more additional database connections.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the context identifier includes one or more of a logical connection level context, a command level context or a resultsets level context.</claim-text>
</claim>
</claims>
</us-patent-grant>

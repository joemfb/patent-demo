<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627289-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627289</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13465073</doc-number>
<date>20120507</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717124</main-classification>
<further-classification>717107</further-classification>
<further-classification>717126</further-classification>
<further-classification>717168</further-classification>
<further-classification>717174</further-classification>
<further-classification>714  2</further-classification>
<further-classification>714 25</further-classification>
<further-classification>714 381</further-classification>
</classification-national>
<invention-title id="d2e51">Detecting configuration problems in an eclipse-based software application</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6601233</doc-number>
<kind>B1</kind>
<name>Underwood</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6640317</doc-number>
<kind>B1</kind>
<name>Snow</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 381</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6684242</doc-number>
<kind>B1</kind>
<name>Bahlmann</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709222</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6766481</doc-number>
<kind>B2</kind>
<name>Estep et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7024548</doc-number>
<kind>B1</kind>
<name>O'Toole, Jr.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7139999</doc-number>
<kind>B2</kind>
<name>Bowman-Amuah</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7900201</doc-number>
<kind>B1</kind>
<name>Qureshi et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717174</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8434057</doc-number>
<kind>B2</kind>
<name>Ashish et al.</name>
<date>20130400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717106</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2004/0193709</doc-number>
<kind>A1</kind>
<name>Selvaggi et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2006/0248405</doc-number>
<kind>A1</kind>
<name>Ponczak et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2007/0006039</doc-number>
<kind>A1</kind>
<name>Fichter et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2007/0079291</doc-number>
<kind>A1</kind>
<name>Roth</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2008/0098360</doc-number>
<kind>A1</kind>
<name>Klinger et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717128</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2008/0229284</doc-number>
<kind>A1</kind>
<name>Castro et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2009/0070752</doc-number>
<kind>A1</kind>
<name>Alpern et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717148</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Title: ScatterEditor: An Eclipse based Tool for Programming, Testing and Managing Wireless Sensor Networks, author: Al Saad et al, source: IEEE, dated: 2007.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717124</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12018684</doc-number>
<date>20080123</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8230397</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13465073</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120222011</doc-number>
<kind>A1</kind>
<date>20120830</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Farrell</last-name>
<first-name>Peter L. H.</first-name>
<address>
<city>Kanata</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wijenayake</last-name>
<first-name>Sudarsha D. A.</first-name>
<address>
<city>Nepean</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Farrell</last-name>
<first-name>Peter L. H.</first-name>
<address>
<city>Kanata</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Wijenayake</last-name>
<first-name>Sudarsha D. A.</first-name>
<address>
<city>Nepean</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patents on Demand P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Buchheit</last-name>
<first-name>Brian K.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Garrett</last-name>
<first-name>Scott M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Das</last-name>
<first-name>Chameli</first-name>
<department>2197</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Detecting configuration problems in an ECLIPSE-based software application can be detected. Such a method can begin with the receipt of a user-command to test a configuration of an ECLIPSE-based software application or with a detection of a feature addition/update when an auto-testing feature is enabled. Information about the available sites for the ECLIPSE-based application can then be obtained. Then, a list of software elements required to operate the ECLIPSE-based software application can be compiled. At least one data attribute can be extracted from the meta data of each software element in the compiled list. The extracted data attributes can then be analyzed. When the analysis identifies a configuration problem, the existence of the configuration problem can be validated.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="206.50mm" wi="117.18mm" file="US08627289-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="253.66mm" wi="175.01mm" file="US08627289-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="217.51mm" wi="116.08mm" file="US08627289-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 12/018,684, filed Jan. 23, 2008 (pending), which is incorporated herein in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present invention relates to the field of software testing.</p>
<p id="p-0004" num="0003">ECLIPSE is an open-source software framework based on the Rich Client Platform (RCP) that utilizes discrete elements called &#x201c;plug-ins&#x201d; to extend its capabilities. ECLIPSE is often used as a software integrated development environment (IDE) used in the development of ECLIPSE-based applications. An ECLIPSE-based application, therefore, consists of a myriad of plug-ins that provides the application's functionality. Plug-ins are grouped with elements that handle input/output language translation called &#x201c;fragments&#x201d; to comprise a &#x201c;feature&#x201d;. Every feature contained in the ECLIPSE-based application must be available and properly versioned in order for the application to function properly. Missing, corrupted, or improperly versioned features perpetrate a multitude of configuration errors within the application.</p>
<p id="p-0005" num="0004">Further, elements called &#x201c;feature patches&#x201d; are used to update the existing features of an application, similar to the patching process of non-ECLIPSE-based software applications. Feature patches must also adhere to the same rules of versioning, availability, and dependencies in order to properly update their corresponding feature. The failure of a feature patch to properly install typically goes unnoticed by a user and simply causes additional application errors due to the improper configuration.</p>
<p id="p-0006" num="0005">While there are a variety of tools available that test the software code of plug-ins for functionality, there is currently a lack of an automated tool that detects configuration problems between the various features and feature patches that comprise an ECLIPSE-based application. The ECLIPSE framework does not contain an inherent utility feature that addresses this issue. Therefore, the only option available at present is to manually verify every feature and feature patch of an ECLIPSE-based application. For a small application, this is an adequate solution. However, most ECLIPSE-based applications consist of hundreds or thousands of features and feature patches, which render a manual process inefficient, time-consuming, and excessively costly. This large quantity of features and feature patches also makes it impossible to address this issue within the formal testing cycle of the software application.</p>
<p id="p-0007" num="0006">What is needed is an automated solution that detects configuration problems in an ECLIPSE-based software application. That is, the solution would automatically analyze all the features and feature patches of an ECLIPSE-based application to determine the existence of configuration errors and/or concerns. Ideally, such a solution would provide a report of any identified configuration problems with recommended resolutions.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0008" num="0007">The present invention can be implemented in accordance with numerous aspects consistent with material presented herein. For example, one aspect of the present invention can include software conforming to an ECLIPSE framework for configuration testing of features and feature updates. The software can be configured to analyze a set of features and feature patches of an ECLIPSE-based application, to determine an existence of configuration problems if any, and to report determined configuration problems. The software can be implemented as a set of programmatic instructions digitally encoded in a machine readable media and executable by at least one computing device.</p>
<p id="p-0009" num="0008">Another aspect of the present invention can include an automated method for detecting configuration problems in an ECLIPSE-based software application. Such a method can begin with the receipt of a user-command to test a configuration of an ECLIPSE-based software application or with a detection of a feature addition/update when an auto-testing feature is enabled. Information about the available sites for the ECLIPSE-based application can then be obtained. Then, a list of software elements required to operate the ECLIPSE-based software application can be compiled. At least one data attribute can be extracted from the meta data of each software element in the compiled list. The extracted data attributes can then be analyzed. When the analysis identifies a configuration problem, the existence of the configuration problem can be validated.</p>
<p id="p-0010" num="0009">Still another aspect of the present invention can include an automated system that detects configuration problems of an ECLIPSE-based software application. Such a system can include an ECLIPSE-based software application and a configuration test utility. The ECLIPSE-based software application can be configured to operate in an ECLIPSE framework and consist of multiple software elements. Each software element can include metadata defining operational data. The configuration test utility can be configured to determine the existence of configuration problems between the software elements of the ECLIPSE-based software application. The configuration test utility can produce a test report containing determined configuration problems.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a configuration test utility for an ECLIPSE-based application in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a sample user interface for a configuration test utility in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart of a method for performing configuration tests in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0014" num="0013">Embodiments of the present invention disclose an automated solution that detects configuration problems in an ECLIPSE-based software application. The automated solution can include a configuration test utility to detect configuration problems between the various software elements of the ECLIPSE-based software application. The configuration test utility can interface directly with the software elements of the ECLIPSE-based software application using an Application Programming Interface (API). A test report can be generated that details detected configuration problems and recommend solutions for the problems.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a configuration test utility for an ECLIPSE-based application <b>108</b> in accordance with an embodiment of the inventive arrangements disclosed herein. The ECLIPSE-based application <b>108</b> can conform to standards of an ECLIPSE framework <b>105</b>. The application <b>108</b> can include a number of features <b>110</b> and feature patches <b>125</b>, which can be extended through use of a set of plug-ins <b>115</b>, which introduce functionality to the application <b>108</b>. Fragments <b>120</b> can be optionally utilized to internationalize plug-ins <b>115</b> by providing translations for the externalized strings of the plug-ins <b>115</b> in order for the functionality provided by the plug-ins <b>115</b> to be seen and used in different languages. Features <b>110</b> can group plug-ins <b>115</b> and fragments <b>120</b>, which permits the plug-ins <b>115</b> and fragments <b>120</b> to be installed, uninstalled, enabled, and disabled as sets instead of individually. Feature patches <b>125</b> provide updates to bundles packaged within the features <b>110</b>.</p>
<p id="p-0016" num="0015">Each plug-in <b>115</b>, fragment <b>120</b>, feature <b>110</b>, and patch <b>125</b> in the ECLIPSE framework <b>105</b> can be associated with a manifest <b>117</b>, <b>122</b>, <b>112</b>, <b>127</b>. An associated plug-in <b>115</b>, fragment <b>120</b>, feature <b>110</b>, and patch <b>125</b> must have a valid manifest <b>117</b>, <b>122</b>, <b>112</b>, <b>127</b> in order for it to be integrated with the ECLIPSE-based application <b>108</b> of framework <b>105</b>. A feature <b>110</b> or patch <b>125</b> with an invalid, corrupted, or that lacks a manifest will neither install nor resolve. When a plug-in <b>115</b> or fragment <b>120</b> is not properly installed, it will provide no functionality to the application <b>108</b>, even if the particular bundle was physically present in the build. Although it can be extremely important to identify such features <b>110</b> and patches <b>125</b> during software deployment and quality assurance phases of a software cycle, conventional systems provide little assistance in this regard.</p>
<p id="p-0017" num="0016">Hence, an introduction of the configuration test utility <b>135</b> into framework <b>105</b>. The utility <b>135</b> can detect any number of possible configuration errors occurring when attempting to install/update a feature <b>110</b> or feature patch <b>125</b>. These errors can include, but are not limited to manifest errors <b>148</b>, versioning errors <b>150</b>, incompatible platform filters <b>152</b>, unavailable required dependencies <b>154</b>, unavailable optional dependencies <b>156</b>, absence of parent features <b>158</b>, non-standard application of feature patches <b>160</b>, unavailable branding plug-ins <b>162</b>, and the like. Each of these errors can be categorized and presented in a configuration test report <b>140</b>. Manifest errors <b>148</b> refer to a lack of a required manifest <b>112</b>, <b>117</b>, <b>122</b>, and/or <b>127</b> or an error that causes one of the manifest <b>112</b>, <b>117</b>, <b>122</b>, and/or <b>127</b> to be unable to be read by the framework <b>105</b>. The other errors <b>150</b>-<b>162</b> shall be elaborated upon in turn.</p>
<p id="p-0018" num="0017">In one embodiment, the configuration test utility <b>135</b> can be part of the framework <b>105</b> externally implemented from the application <b>108</b>, which is able to interact through an ECLIPSE API <b>130</b>. For example, the utility <b>135</b> can be part of a software development application. Developers can be provided with a user interface <b>137</b> through which they can configure the utility, execute functions of the utility <b>135</b>, and view/print generated reports <b>140</b>. Configuration options for the utility <b>135</b> are many, which can include testing for only a subset of possible configuration errors, adding new developer defined configuration error tests to be executed by the utility <b>135</b>, adding customized reports <b>140</b>, utilizing SQL queries to view/manipulate configuration data produced by the utility <b>135</b>, and the like.</p>
<p id="p-0019" num="0018">The invention is not limited to being implemented as an external developer utility. In one contemplated embodiment, for example, the utility <b>135</b> can be a component of the application <b>108</b> itself, which automatically tests for configuration issues when a feature <b>110</b> or feature patch <b>125</b> is applied to the application <b>108</b>. The test utility <b>135</b> can for example, execute in a &#x201c;hidden&#x201d; fashion when new features <b>110</b> or patches <b>125</b> are applied unless configuration errors are detected, in which case the application of the features/patches can be aborted and a report <b>140</b> and/or notification of the errors can be presented.</p>
<p id="p-0020" num="0019">Additionally, the utility <b>135</b> can be implemented as a feature <b>110</b>, where various testing rules used to generate the reports <b>140</b> are able to be added and modified as individual plug-ins <b>115</b> of the feature <b>110</b>. This permits functionality of the configuration test utility <b>135</b> to evolve and to be adapted to handle new configuration issues and to be adjusted for new ECLIPSE framework <b>105</b> standards as they emerge.</p>
<p id="p-0021" num="0020">Regardless implementation specifics, the utility <b>135</b> can detect a variety of different configuration problems, which are detailed in generated reports <b>140</b>. An overview of various ones of these reportable errors <b>150</b>-<b>162</b> is now provided, which emphases a magnitude of issues relating to ECLIPSE framework <b>105</b> configuration, and which emphasis a need for and a value inherent in the configuration test utility <b>135</b>. In detailing the various errors <b>150</b>-<b>162</b>, error causes are identified. Each of these causes is detectable by the utility <b>135</b> using a set of programmatically implemented error detection rules.</p>
<p id="h-0006" num="0000">Versioning Errors</p>
<p id="p-0022" num="0021">Versioning errors <b>150</b> occur when a feature <b>110</b> or patch <b>125</b> fails to comply with ECLIPSE Versioning Conventions. These conventions mandate that the version of a feature <b>110</b> or patch <b>125</b> be placed in the form: major.minor.service.qualifier. The major, the minor and the service identifiers must be numerals. The qualifier on the other hand may contain numerals or strings at the developer's convenience. In addition, the version must not contain extra identifiers than the allowed options. The version of a feature <b>110</b> or patch <b>125</b> will be reset to as 0.0.0 by the ECLIPSE framework <b>105</b> at the time the bundle is being resolved if the version violates these standards. A set of versioning rules can be included in the test utility <b>135</b>, which check to ensure that the ECLIPSE Versioning Conventions are followed. When violations to these conventions occur, explicit violation messages and suggestions to resolve these versioning problems can be included in the test report <b>140</b>. The rules utilized by the utility <b>135</b> can be updated/changed as corresponding ECLIPSE Versioning Conventions are altered.</p>
<p id="p-0023" num="0022">Experience has shown that the software developers, especially ones new to ECLIPSE, sometimes fail to follow the versioning conventions. As a result, the features <b>110</b> and patches <b>125</b> delivered by such individuals occasionally fail to install or even resolve in the application <b>108</b> even though such bundles are physically present in the build.</p>
<p id="p-0024" num="0023">The following example illustrates how important is it identify when features <b>110</b> and patches <b>125</b> violate the ECLIPSE Versioning Convection. These violations can have many side-effects when installation attempts are made, which cause an application <b>108</b> to behave in an unpredictable fashion. The utility <b>135</b> can prevent problems related to the following example, in an efficient and straight forward fashion. In contrast, a traditional approach has been to manually detect such issues, which can be nearly impossible when an application <b>108</b> is composed of a large number of features <b>110</b> and patches <b>125</b>.</p>
<p id="p-0025" num="0024">To illustrate, assume that a Feature F1 Version 1.0.0 is developed for application <b>108</b>. This particular feature packages the Plug-in P1 Version 1.0.0. The Version 1.0.0 of the Feature F1 does comply with the ECLIPSE Versioning Convention. Therefore, the particular feature will properly install and resolve in the application <b>108</b>. The version of this feature will be registered as 1.0.0 in the ECLIPSE Runtime as exactly marked in its feature manifest <b>112</b> (i.e. feature.xml file).</p>
<p id="p-0026" num="0025">Imagine that a newer Version 2.0.0b of the same Feature F1 is introduced to the application <b>108</b> at a later time. This particular version of the feature packages a brand new Plug-in P2 Version 1.0.0 and a newer Version 2.0.0 of the existing Plug-in P1. As you may see, the service identifier 0b of the Version 2.0.0b of the Feature F1 isn't numeric (contains the character b). Therefore, the Version 2.0.0b is considered invalid according to the ECLIPSE Versioning Convention. Attempts to install this particular feature would not be permitted by the ECLIPSE Update Manager. If the Feature F1 Version 2.0.0b did not properly install for any reason, the bundles that it packages, such as the brand new Plug-in P2 and the newer Version 2.0.0 of the existing Plug-in P1, would not install in the application <b>108</b>. If the Plug-in P1 version 2.0.0 and the Plug-in P2 version 1.0.0 did not install in the application <b>108</b>, they would provide no functionality to the application <b>108</b> even though their versioning does perfectly comply with the ECLIPSE Versioning Convention.</p>
<p id="p-0027" num="0026">Appreciably, a feature <b>110</b> can be installed in ECLIPSE without relying on the functionality provided by the ECLIPSE Update Manager, which includes an internal versioning check that prevents installations having versioning errors. For instance, certain ECLIPSE configurations allow its users to install a feature <b>110</b> in the application <b>108</b> by manually copying the particular feature <b>110</b> and its contents to the build. If it was the method of installation used in the previous example, the Feature F1 Version 2.0.0b would have installed in the application <b>108</b>. However, its version would still violate the ECLIPSE Versioning Convention; therefore, it will be reset to 0.0.0 by the ECLIPSE Runtime. Now there are two versions 1.0.0 and 0.0.0 (originally 2.0.0b) of the Feature F1 available in the application <b>108</b>. The Version 1.0.0 is greater than 0.0.0, therefore, the former (Version 1.0.0 of the Feature F1) would resolve in the application <b>108</b>. The Version 0.0.0 of the Feature F1 would be disabled even though it was the newer version.</p>
<p id="p-0028" num="0027">If the Feature F1 Version 0.0.0 (originally 2.0.0b) did not resolve as mentioned, the bundles that it packages might not resolve or install in the application <b>108</b>. This means that the plug-ins P1 Version 2.0.0 and P2 Version 1.0.0 would not resolve and, therefore, provide no functionality to the application <b>108</b> even though not only these bundles are physically available to the application <b>108</b>, but also their versioning perfectly comply with the ECLIPSE Versioning Convention.</p>
<p id="p-0029" num="0028">Experience demonstrates that there is a probability for at least one of the two plug-ins, P1 Version 2.0.0 and P2 Version 1.0.0, packaged by the Feature F1 Version 2.0.0b to resolve under these conditions even with the absence of their parent. If the latter was the outcome, the resolved Version 1.0.0 of the Feature F1 would suffer from configuration related errors due to the resolution of the Plug-in P1 Version 2.0.0. It has been witnessed that a feature <b>110</b> or patch <b>125</b> with configuration related errors could prevent the user from upgrading not only the given feature <b>110</b>, but also the remaining features <b>110</b> in the application <b>108</b> as well. In addition, such a feature <b>110</b> may restrict the user from installing new features <b>110</b> in the application <b>108</b> since adding new functionality to an application <b>108</b> with configuration errors could make the application <b>108</b> even more unstable.</p>
<p id="h-0007" num="0000">Incompatible Platform Filters</p>
<p id="p-0030" num="0029">The platform filter of a feature <b>110</b> or patch <b>125</b> specifies the platform that the particular bundle is allowed to resolve. For instance, the following platform filter specifies that the corresponding bundle must only resolve on a platform running on an x86 architecture and using a Linux operating system built on the Motif windowing system.</p>
<p id="p-0031" num="0030">(&#x26; (osgi.arch=x86) (osgi.os=linux) (osgi.ws=motif))</p>
<p id="p-0032" num="0031">If a feature <b>110</b> with the above platform filter was included into an application <b>108</b> developed for the WINDOWS platform for instance, the targeted feature <b>110</b> would not resolve. Consequently, the plug-ins <b>115</b> and fragments <b>129</b> packaged by the particular feature <b>110</b> would not resolve either. It would, therefore, contribute no functionality to the application <b>108</b> even though the bundles are available to the application <b>108</b>.</p>
<p id="p-0033" num="0032">Hence, attempting to include a feature <b>110</b> designed for one platform into an application <b>108</b> developed for another platform not only fails to work, but also increases a size of the application <b>108</b> unnecessarily. Experience demonstrates that features <b>110</b> and patches <b>125</b> designed for one platform are sometimes mistakenly included into applications <b>108</b> developed for another platform due to various reasons. It is usually a responsibility of a release engineer to identify such bundles and remove them from the application <b>108</b> as quickly as possible.</p>
<p id="p-0034" num="0033">It has also been witnessed that developers, especially those new to the ECLIPSE framework <b>105</b>, sometimes assign incorrect platform filters to features <b>110</b>, which renders that features <b>110</b> ineffective on the targeted platform. The release engineer must identify such bundles and correct their platform filters as quickly as possible, which can be a process facilitated by utility <b>135</b>, which is able to detect and report incompatible platform filters <b>154</b>.</p>
<p id="h-0008" num="0000">Unavailable Required Dependencies</p>
<p id="p-0035" num="0034">A feature <b>110</b> or patch <b>125</b> packages plug-ins <b>115</b> and fragments <b>120</b> by grouping them together in order for them to be installed, uninstalled, enabled and disabled as groups instead of individuals. The bundles packaged by a feature <b>110</b> or patch <b>125</b> are often referred to as the included dependencies of the particular feature <b>110</b> or patch <b>125</b> for simplicity. In addition, a feature <b>110</b> or patch <b>125</b> may require the existence of other plug-ins <b>115</b> or fragments <b>210</b> in order for its included dependencies to resolve and function in the application <b>108</b>. The plug-ins <b>115</b> and fragments <b>120</b> required by a feature <b>110</b> or patch <b>125</b> are often referred to as required dependencies of the particular feature <b>110</b> or patch <b>125</b>. Both the included and required dependencies of a feature <b>110</b> or patch <b>125</b> form strong hierarchical associations between features <b>110</b>, patches <b>125</b>, plug-ins <b>115</b>, and fragments <b>120</b>. It is mandatory that all of the included and required dependencies of a feature <b>110</b> or patch <b>125</b> to resolve and be configured properly in the application <b>108</b>. A feature <b>110</b> or patch <b>125</b> failing to satisfy the above requirement would suffer from configuration related errors which might ultimately prevent the user from updating the application <b>108</b>.</p>
<p id="p-0036" num="0035">To illustrate by example, a feature identified as F1 can package a second Feature F2 (i.e. included dependency). The Feature F2 can depend upon the functionality included by a feature identified as F3 (i.e. required dependency) and the Feature F3 can package a feature identified as F4 (i.e. included dependency again). In this particular example, the Feature F1 requires the second Feature F2 to exist and resolve in the application <b>108</b> in order for it to be properly configured. In addition, the Feature F2 must be properly configured, meaning, all of its included and required dependencies must also exist and resolve in the application <b>108</b>. If and only if both of these criterions were met, the Feature F1 would function properly in the application <b>108</b>. Additionally, the Feature F2 can require the existence of its required dependency F3 and the dependencies of the feature F3 in the application <b>108</b>. Finally, the Feature F3 can require the existence of the Feature F4 and the dependencies of the Feature F4 in the application <b>108</b>.</p>
<p id="p-0037" num="0036">This complex hierarchical dependency structure mandates the existence and the resolution of all of its participants and their (included and required) dependencies in order for the Features F1, F2, F3, and F4 to function properly in the application <b>108</b>. In this example, the Feature F4 can be mistakenly excluded from the application <b>108</b>. In such a situation, the complete hierarchical dependency structure would collapse by causing configuration related errors in the remaining Features F1, F2, and F3.</p>
<p id="p-0038" num="0037">It has been witnessed that a feature <b>110</b> or patch <b>125</b> with configuration related errors could prevent the user from upgrading not only the given feature <b>110</b>, but also the remaining features <b>110</b> in the application <b>108</b>. In addition, such a feature <b>110</b> may restrict the user from installing new features <b>110</b> in the application <b>108</b> since adding new functionality to the application <b>108</b> with configuration errors could make the application <b>108</b> even more unstable.</p>
<p id="p-0039" num="0038">In this particular example, if a release engineer had somehow known that the Feature F4 was missing from the application <b>108</b> and that was what was causing configuration related errors in the remaining Features F1, F2 and F3, then this particular issue could have been resolved by simply introducing the missing Feature F4 and its contents to the application <b>108</b>. Configuration test utility <b>135</b> can assist in identifying that the unavailability of the Feature F4 was the root cause of the problem so that suitable problem resolution actions can be taken.</p>
<p id="h-0009" num="0000">Unavailable Optional Dependencies</p>
<p id="p-0040" num="0039">If a dependency of a feature <b>110</b> or patch <b>125</b> is made optional, the associated feature <b>110</b> or patch <b>120</b> does not suffer from configuration related errors through the particular dependency was not available in the application <b>108</b>. This behavior of the ECLIPSE framework <b>105</b> makes the feature development more flexible, but introduces a new breed of issues and challenges in the fields of Software Quality Engineering and Release Engineering, which can be detected and reported by utility <b>135</b>.</p>
<p id="p-0041" num="0040">To illustrate, a feature identified as F1 has an optional dependency F2. Under these circumstances, the Feature F1 would not suffer from configuration related errors even though the Feature F2 was mistakenly excluded from the application <b>108</b>. In addition, the ECLIPSE framework <b>105</b> can conclude that the Feature F1 must be properly configured and therefore raise no concerns about the unavailability of its dependency on the Feature F2 even though the particular feature (F2) was excluded from the application <b>108</b> by accident. The utility <b>135</b> can report in the optional dependencies section <b>156</b> of report <b>140</b> that Feature F2 is an optional dependency of Feature F1, which is lacking in the application <b>108</b>.</p>
<p id="h-0010" num="0000">Absence of Parent Features of Feature Patches</p>
<p id="p-0042" num="0041">A feature patch <b>125</b> provides updates to the bundles packaged by the feature <b>110</b> that it was implemented for. Therefore, a patch <b>125</b> should be resolved if and only if the feature <b>110</b> that it was implemented for was available and resolved in the application <b>108</b>.</p>
<p id="p-0043" num="0042">Patches <b>125</b> do resolve in the ECLIPSE framework <b>105</b> under certain circumstances even in the absence of the parent features. In addition, the ECLIPSE framework <b>105</b> can conclude that the feature patch <b>125</b> must be properly configured and therefore raise no concerns about the unavailability of its parent feature what so ever. When a parent feature is absent, the test utility <b>135</b> can specify so in an absence of parent features <b>158</b> section of report <b>140</b>.</p>
<p id="h-0011" num="0000">Non-Standard Applications of Feature Patches</p>
<p id="p-0044" num="0043">The topic of feature patches <b>125</b> and their associated functionality often isn't well defined or documented. As a result, the feature patches <b>125</b> are often misused in ECLIPSE based applications <b>108</b>, which can result in fatal configuration related errors in the corresponding features <b>110</b> and patches <b>125</b>.</p>
<p id="p-0045" num="0044">To illustrate, implementing a feature patch <b>125</b> to introduce an earlier release (version) of a set of plug-ins <b>115</b> and fragments <b>120</b> when a newer release of the corresponding plug-ins and fragments have been introduced by the parent feature <b>110</b> of the particular patch <b>125</b>, is considered a non-standard application. Similarly, implementing a feature patch <b>125</b> to reintroduce a set of plug-ins <b>115</b> and fragments <b>120</b> when the same release of the corresponding plug-ins and fragments have been introduced by the parent feature <b>110</b>, also falls into this category. Furthermore, implementing a feature patch <b>125</b> with a platform filter that is incompatible with the platform filter of the parent feature <b>110</b>, is too considered a non-standard application</p>
<p id="p-0046" num="0045">A feature <b>110</b> or patch <b>125</b> with configuration related errors often prevents a user from upgrading not only the given feature <b>110</b>, but also the remaining features <b>110</b> in the application <b>108</b>. Further, such a feature <b>110</b> may restrict the user from installing new features <b>110</b> in the application <b>108</b> since adding new functionality to an application <b>108</b> with configuration errors could make the application <b>108</b> even more unstable. The utility <b>135</b> can detect and define a set of non-standard application of feature patches <b>160</b> within a section of the report <b>140</b>.</p>
<p id="h-0012" num="0000">Unavailable Branding Plug-Ins</p>
<p id="p-0047" num="0046">A branding plug-in <b>115</b> brands a given feature <b>110</b> by providing the feature <b>110</b> with customized messages, logos, icons, license agreements, contact information, help documents, etc. that are exploited in the ECLIPSE About Dialog and its associated functionality. The ECLIPSE framework <b>105</b> has one feature-branding-plug-in combination to brand itself. An Eclipse-Based Application <b>108</b> may introduce a feature-branding-plug-in combination for each component <b>109</b> included in the particular application.</p>
<p id="p-0048" num="0047">It is not required for each feature <b>110</b> in an ECLIPSE based application <b>108</b> to have a branding plug-in. However, it is recommended for an application <b>108</b> to consist of a feature-branding-plug-in combination to brand itself. If the application <b>108</b> encapsulates other external applications and/or modules, then each one of the external components in the application <b>108</b> may also carry a unique feature-branding-plug-in combination in order to provide the application <b>108</b> with their branding information. An average Eclipse-Based Application <b>108</b> may consist of a large number of features <b>110</b>. Quite a few of these features <b>110</b> may be designed to deliver their own branding plug-ins to the application in order to brand the components <b>109</b> that they belong to. Mistakenly excluding any of the branding plug-ins from the particular Eclipse-Based Application <b>108</b> or such a plug-in failing to resolve would result in the absence of the associated branding information in the application. The unavailable branding plug-in <b>162</b> section of report <b>140</b> can identity potential branding problems and inconsistencies.</p>
<p id="h-0013" num="0000">User Interface Description</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 2</figref> is a sample user interface <b>200</b> for a configuration test utility in accordance with an embodiment of the inventive arrangements disclosed herein. The interface <b>200</b> can be an interface in one embodiment of the system <b>100</b>. The interface <b>200</b> is presented for illustrative purposes only and derivative and alternative interfaces are contemplated.</p>
<p id="p-0050" num="0049">Interface <b>200</b> can permit a user to customize reports and to specify details of the test information <b>210</b> to be used by a configuration test utility. A selection button <b>215</b> can trigger a testing operation, which results in a configuration test report. Various options can be selected from interface <b>200</b>, such as an option <b>205</b> to ignore warnings that are found with regard to features, patches, plug-ins, and fragments of a product.</p>
<p id="h-0014" num="0000">Flow Chart of a Configuration Tester</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart of a method <b>300</b> for performing configuration tests in accordance with an embodiment of the inventive arrangements disclosed herein. The method <b>300</b> can be performed in a context of a system <b>100</b>.</p>
<p id="p-0052" num="0051">Method <b>300</b> can begin in step <b>305</b>, where an event that triggers a configuration test of an ECLIPSE based application can be detected. In one embodiment, the triggering event can be a user selection of a test command within a configuration test interface. In another embodiment, the configuration test event can be automatically triggered when a feature or feature patch is applied to an application. In order to find potential configuration issues, a configuration utility can initially seek information about the sites available in a given application, as shown by step <b>310</b>. Sites are defined as locations containing features and patches that compose an application. Once the sites have been located, a list of features, plug-ins, fragments, and feature patches required for the application can be compiled.</p>
<p id="p-0053" num="0052">In step <b>320</b>, key operational data can be extracted from the manifest of each element in the compiled list. Extracted data can include, but is not limited to, feature identification, version, platform filters (e.g., platform, architecture, language, and other constraints), a set of included plug-ins, fragments, features, and patches, a set of required plug-ins, fragments, features, and patches, an identification of a branding plug-in if available, and other information. In step <b>325</b>, the extracted data can be analyzed for potential configuration problems. A set of configuration problem specific rules (e.g., rules for versioning, for platform filters, for dependencies, for handling parent features, for determining non-standard feature patch issues, for branding issues, etc.) can be used during step <b>325</b>. In one embodiment, these rules can be updateable to ensure concurrency with current ECLIPSE standards and/or to permit developers to establish and test project specific constraints. In step <b>330</b>, any detected configuration problems can be validated. In step <b>335</b>, validation configuration problems can be collated into a test report, which can be presented to a user in step <b>340</b> or stored at a designated memory space for later examination.</p>
<p id="p-0054" num="0053">The present invention may be realized in hardware, software, or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.</p>
<p id="p-0055" num="0054">The present invention also may be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.</p>
<p id="p-0056" num="0055">This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising: at least one computing device receiving a user-command to test a configuration of an ECLIPSE-based software application, wherein the ECLIPSE-based software application includes a plurality of software elements;
<claim-text>at least one computing device obtaining available sites for the ECLIPSE-based application;</claim-text>
<claim-text>at least one computing device compiling a list of software elements required to operate the ECLIPSE-based software application; extracting a set of at least one data attribute from a set of meta data for each software element contained in the compiled list of software elements; analyzing the set of data attributes extracted for each software element; and</claim-text>
<claim-text>at least one computing device, if a result of the analyzing step determines an existence of a configuration problem, validating the existence of the configuration problem, wherein the ECLIPSE-based software application comprises a plurality of discrete features each separately versioned, wherein a hierarchical dependency structure exists between the discrete features, which must be satisfied for the ECLIPSE-based application to function properly, wherein the analyzing the set of data attribute further comprises analyzing the hierarchical dependency structure to determine if the specific feature of the bundle is able to be installed or upgraded for the ECLIPSE-based application given installed versions of the discrete features of the ECLIPSE-based application and given the included dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein further comprising: generating a test report containing results of the analyzing and the validating, if executed, wherein the test report includes a recommended solution for the configuration problem.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the results in the test report are grouped into at least one section, wherein the at least one section includes a missing software elements section, a missing meta data section, a versioning errors section, a platform filter issues section, an incomplete dependencies section, and a captured errors and warnings section.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration problems indicate that one of the features or feature patches is not properly installed.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein improperly installed features or feature patches provide no functionality to the ECLIPSE-based application whether or not bundles for the improperly installed features or feature patches are present in an application build.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, ECLIPSE-based software application comprises a plurality of discrete features each separately versioned, wherein a hierarchical dependency structure exists between the discrete features, which must be satisfied for the ECLIPSE-based application to function properly.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the set of extracted data attributes includes one of an element identifier, a version identifier, a set of platform filters, a set of included software elements, a set of required software elements, and an identification of a branding plug-in.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configuration problem represents an unmet operating condition of at least one of the ECLIPSE-based operating system, an ECLIPSE coding standard, and ECLIPSE framework.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises at least one computing device attempting to install or update the specific feature from the bundle.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the existence of the configuration problem refers to a dependency of the specific feature not able to be resolved by installing or updating one of the discrete features using the included dependencies of the bundle.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system comprising: one or more processors, one or more non-transitory machine readable media; program instructions, stored on at least one of the one or more machine readable media for execution by at least one of the one or more processors;
<claim-text>an ECLIPSE-based software application, comprising at least a portion of said program instructions, configured to operate in an ECLIPSE framework, wherein the ECLIPSE-based software includes a plurality of software elements, wherein each software element contains a set of meta data defining a plurality of operational data; and</claim-text>
<claim-text>a configuration test utility configured to determine an existence of configuration problems between the plurality of software elements of the ECLIPSE-based software application, wherein the configuration test utility produces a test report containing determined configuration problems, wherein the configuration problems indicate that features or feature patches are not properly installed for the ECLIPSE-based software application, wherein improperly installed features or feature patches provide no functionality to the ECLIPSE-based software application whether or not bundles for the improperly installed features or feature patches are present in an application build, wherein the ECLIPSE-based software application comprises a plurality of discrete features each separately versioned, wherein a hierarchical dependency structure exists between the discrete features, which must be satisfied for the ECLIPSE-based application to function properly, wherein the system analyzes the set of data attribute by analyzing the hierarchical dependency structure to determine if the specific feature of the bundle is able to be installed or upgraded for the ECLIPSE-based application given installed versions of the discrete features of the ECLIPSE-based application and given the included dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a configuration problem represents an unmet operating condition of at least one of the ECLIPSE framework, a software engineering standard, and an ECLIPSE standard, wherein the configuration test utility is configured to detect at least four of the following configuration problems: manifest error, a versioning error, an incompatible platform filter problem, an unavailable required dependency, an unavailable optional dependency, an absence of parent features, a non-standard application of feature patches, and an unavailable branding plug-in.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the set of meta data is captured in a manifest document written in an Extensible Markup Language (XML), wherein the configuration test utility utilizes an Application Programming Interface (API) to interface with the plurality of software elements of the ECLIPSE-based software application, wherein the system further comprises:
<claim-text>a user interface configured to accepting a user-configuration of at least one of the configuration test utility and the test report.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the determined configuration problems of the test report are grouped into at least one section, wherein the at least one section includes a missing software elements section, a missing meta data section, a versioning errors section, a platform filter issues section, an incomplete dependencies section, and a captured errors and warnings section, wherein the test report includes a recommended solution for the determined configuration problems.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. An apparatus comprising:
<claim-text>a set of programmatic instructions digitally encoded in a non-transitory machine readable media, wherein said programmatic instructions are executable by at least one processor of at least one computing device, wherein said set of programmatic instructions are configured to analyze one or more features or feature patches of an ECLIPSE-based application, to determine an existence of configuration problems if any, and to report determined configuration problems, wherein the features or feature patches must have a valid manifest in order to be integrated within the ECLIPSE-based application that conforms to an ECLIPSE-based framework, wherein the configuration problems occur when attempting to install or update one of the features or feature patches, and wherein the configuration problems indicate that one of the features or feature patches is not properly installed, wherein improperly installed features or feature patches provide no functionality to the ECLIPSE-based application whether or not bundles for the improperly installed features or feature patents are present in an application build, wherein the ECLIPSE-based software application comprises a plurality of discrete features each separately versioned, wherein a hierarchical dependency structure exists between the discrete features, which must be satisfied for the ECLIPSE-based application to function properly, wherein the apparatus analyzes the set of data attribute by analyzing the hierarchical dependency structure to determine if the specific feature of the bundle is able to be installed or upgraded for the ECLIPSE-based application given installed versions of the discrete features of the ECLIPSE-based application and given the included dependencies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the software is a component of an ECLIPSE development software tool able to be triggered based upon a user selection within a graphics based software development interface.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the software is at least one of a component of the ECLIPSE-based application and a software executable able to interact with the ECLIPSE-based application, wherein said software automatically executes when a new feature or feature update is applied to the ECLIPSE-based application, and wherein detection of a configuration problem during the automatic execution causes the application of the new feature or feature update to be aborted.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein at least one of the configuration problems determined and reported by the software represents an unmet operating condition of at least one of the ECLIPSE framework, a software engineering standard, and an ECLIPSE standard, and wherein at least one of the configuration problems is one of a software element unavailability, a corruption of the set of meta data, an absence of the set of meta data, a violation of the at least one ECLIPSE standard, a conflict between version of the software element, an unfulfilled dependency between software elements, an absence of a branding plug-in, and an exclusion of a software element from the ECLIPSE-based software application. </claim-text>
</claim>
</claims>
</us-patent-grant>

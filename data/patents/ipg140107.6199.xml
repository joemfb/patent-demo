<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627323-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627323</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12964970</doc-number>
<date>20101210</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>390</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20120101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>Q</subclass>
<main-group>10</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718102</main-classification>
<further-classification>705  721</further-classification>
<further-classification>705  726</further-classification>
<further-classification>705  727</further-classification>
</classification-national>
<invention-title id="d2e55">Utilizing user-defined workflow policies to automate changes made to composite workflows</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5999911</doc-number>
<kind>A</kind>
<name>Berg et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  726</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7155720</doc-number>
<kind>B2</kind>
<name>Casati et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7802194</doc-number>
<kind>B2</kind>
<name>Kol et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715765</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7886053</doc-number>
<kind>B1</kind>
<name>Newstadt et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8140860</doc-number>
<kind>B2</kind>
<name>Haswell</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713193</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0153994</doc-number>
<kind>A1</kind>
<name>Jin et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0064432</doc-number>
<kind>A1</kind>
<name>Oetringer et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0178102</doc-number>
<kind>A1</kind>
<name>Alghathbar et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2009/0205018</doc-number>
<kind>A1</kind>
<name>Ferraiolo et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Wahli et al. (&#x201c;Software Configuration Management A clear case for IBM Rational ClearCase and ClearQuest UCM&#x201d;, Dec. 2004, IBM RedBooks).</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120151486</doc-number>
<kind>A1</kind>
<date>20120614</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Irani</last-name>
<first-name>Majid</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Owen</last-name>
<first-name>John A.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Irani</last-name>
<first-name>Majid</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Owen</last-name>
<first-name>John A.</first-name>
<address>
<city>Hampshire</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patents On Demand P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Buchheit</last-name>
<first-name>Brian K.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Garrett</last-name>
<first-name>Scott M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kawsar</last-name>
<first-name>Abdullah Al</first-name>
<department>2195</department>
</primary-examiner>
<assistant-examiner>
<last-name>Rashid</last-name>
<first-name>Wissam</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Automating changes to a composite workflow using user-defined workflow policies can begin with the detection of a state change by a workflow policy handler for a record of an instance of a composite workflow running within a composite workflow system. User-defined workflow policies can be identified for the composite workflow in which the change was detected. A user-defined workflow policy can define policy actions to be performed if policy conditions are satisfied. For each identified user-defined workflow policy, the applicability to the instance of the composite workflow can be determined. If an identified user-defined workflow policy is determined to be applicable, the policy actions can be automatically performed on the instance of the composite workflow.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="218.52mm" wi="209.21mm" file="US08627323-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="240.20mm" wi="212.85mm" file="US08627323-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="200.32mm" wi="181.53mm" file="US08627323-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="159.77mm" wi="167.39mm" file="US08627323-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="210.23mm" wi="187.11mm" file="US08627323-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="175.94mm" wi="163.41mm" file="US08627323-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present invention relates to the field of composite workflow systems and, more particularly, to utilizing user-defined policies to automate changes made to composite workflows.</p>
<p id="p-0003" num="0002">Composite workflow tools and/or systems like RATIONAL CLEARQUEST allow organizations to define a workflow in a hierarchical structure to represent the dependencies and/or relationships between different steps. The hierarchical structure of a composite workflow provides many benefits of linear workflow, such as parallel task performance and customizable lifecycles for records at each tier in the hierarchy. However, in providing such an open structure format to accommodate a variety of workflow configurations, many composite workflow tools/systems lack flexibility in terms of performing and/or providing a structure to the way in which operations are performed upon the composite workflow.</p>
<p id="p-0004" num="0003">For example, the progression of a workflow from one tier to the next requires a user to manually create the records of the next tier. In many situations, the records created for an instance of a composite workflow are of a redundant nature. That is, the user knows that, for every second tier record of a specific type like &#x201c;Bug Fix&#x201d;, three third tier records need to be created&#x2014;&#x201c;Plan&#x201d;, &#x201c;Develop&#x201d;, and &#x201c;Test&#x201d;.</p>
<p id="p-0005" num="0004">Further, a high volume of workflow instances and, therefore, &#x201c;Bug Fix&#x201d; records results in a large quantity of redundant actions performed by the user. A large quantity of redundant manual operations increases the possibility of user error during entry. The composite workflow tool/system lacks the ability for the user to automate the performance of this redundant activity.</p>
<p id="p-0006" num="0005">While the hierarchical structure of a composite workflow provides relationships in a vertical direction (i.e., parent-child), it does not allow the establishment of any horizontal relationships (i.e., sibling). As such, the composite workflow tool/system allows the creation of situations that users know to be illogical.</p>
<p id="p-0007" num="0006">Using the previous example, it is possible for a user to activate (i.e., place in a state of active work) the &#x201c;Plan&#x201d;, &#x201c;Develop&#x201d;, and &#x201c;Test&#x201d; records, when, logically, these tasks need to be performed sequentially. Thus, the test and development users receive notification that they should be performing work, when the source of their tasks is unavailable. Further, their records stay in the active state and provide inappropriate metrics for their work (i.e., the record was active for 33 days, though the user spent 25 of those days waiting for their source data).</p>
<p id="p-0008" num="0007">Unfortunately, work-arounds to such problems encountered result in hard-coded solutions to the underlying schema of the composite workflow. Such attempted solutions reduce the nature of the workflow from composite back to linear. Further, a hard-coded solution compromises the flexibility of the composite workflow schema, impeding its maintenance and ability to adapt to changing business needs.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0009" num="0008">One aspect of the present invention can include a method for automating changes to a composite workflow with user-defined workflow policies. A state change can be detected by a workflow policy handler for a record of an instance of a composite workflow running within a composite workflow system. User-defined workflow policies can be identified for the composite workflow in which the change was detected. A user-defined workflow policy can define policy actions to be performed when policy conditions are satisfied. For each identified user-defined workflow policy, the applicability to the instance of the composite workflow can be determined. When an identified user-defined workflow policy is determined to be applicable, the policy actions can be automatically performed on the instance of the composite workflow.</p>
<p id="p-0010" num="0009">Another aspect of the present invention can include a method for temporarily granting permissions within a composite workflow system. At least two user-defined workflow policies can be identified as executable upon a current instance of a composite workflow running in a composite workflow system by a workflow policy handler. A user-defined workflow policy can define policy actions to be performed when policy conditions are satisfied. A user-defined workflow policy can be deemed executable when the policy conditions have been satisfied by values of the current instance of the composite workflow. The capability for a user associated with the current instance of the composite workflow to perform the policy actions of a first user-defined workflow policy within the composite workflow system can be assessed. When the user is determined to be incapable of performing the policy actions, the remaining user-defined workflow policies identified as executable can be searched for a second user-defined workflow policy having a policy action that temporarily grants the user the capability necessary to perform the policy actions of the first user-defined workflow policy. When the second user-defined workflow policy exists, its policy action can be executed. The policy actions of the first user-defined workflow policy can then be immediately performed.</p>
<p id="p-0011" num="0010">Still another aspect of the present invention can include a system that uses user-defined workflow policies to automate changes to a composite workflow. Such a system can include composite workflows, a composite workflow system, user-defined workflow policies, and a workflow policy handler. The composite workflows can include records that represent the steps of a business process, arranged in a hierarchical structure. The composite workflow system can be configured to support activities involving the composite workflows. The user-defined workflow policies can define actions to be automatically performed upon an instance of a composite workflow. The workflow policy handler can be configured to interact with the composite workflow system to execute the user-defined workflow policies determined to be applicable to the instance of the composite workflow currently running in the composite workflow system.</p>
<p id="p-0012" num="0011">Yet another aspect of the present invention can include a computer program product that includes a computer readable storage medium having embedded computer usable program code. The computer usable program code can be configured to detect a state change to a record of an instance of a composite workflow running within a composite workflow system. Then, the computer usable program code can be configured to identify user-defined workflow policies associated with the composite workflow in which the change was detected. A user-defined workflow policy can define policy actions to be performed when policy conditions are satisfied. The computer usable program code can be configured to, for each identified user-defined workflow policy, determine the applicability of the user-defined workflow policy to the instance of the composite workflow. The computer usable program code can then be configured to, when the identified user-defined workflow policy is determined to be applicable, automatically perform the policy actions of the identified user-defined workflow policy upon a record in the instance of the composite workflow.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart of a method detailing, in general, the use of user-defined workflow policies by a workflow policy handler in conjunction with a composite workflow tool/system to automate changes to a composite workflow in accordance with embodiments of the inventive arrangements disclosed herein.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating a system that utilizes user-defined workflow policies to automate changes to a composite workflow in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> is an illustrated process flow depicting the operation of the workflow policy handler for an example workflow policy in accordance with an embodiment of the inventive arrangements disclosed herein.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> is an illustrated process flow depicting the operation of the workflow policy handler for example workflow policies in accordance with embodiments of the inventive arrangements disclosed herein.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> is an illustrated process flow depicting the operation of the workflow policy handler for an example workflow policy in accordance with embodiments of the inventive arrangements disclosed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">The present invention discloses a solution for utilizing user-defined workflow policies to automate changes to a composite workflow within a composite workflow system. Workflow policies can be defined by users to capture actions that should be automatically performed on behalf of the user when a specified set of conditions are met. Additionally, workflow policies can be used to temporarily grant user permissions to make a change to the composite workflow that their predefined role does not allow. A workflow policy handler can detect changes to composite workflows within the composite workflow system and determine which, if any, workflow policies should be applied to the composite workflow.</p>
<p id="p-0019" num="0018">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0020" num="0019">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0021" num="0020">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0022" num="0021">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0023" num="0022">Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0024" num="0023">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0025" num="0024">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a flow chart of a method <b>100</b> detailing, in general, the use of user-defined workflow policies by a workflow policy handler in conjunction with a composite workflow tool/system to automate changes to a composite workflow in accordance with embodiments of the inventive arrangements disclosed herein.</p>
<p id="p-0027" num="0026">Method <b>100</b> can begin in step <b>105</b> where the workflow policy handler can detect a state change to a record of a composite workflow. It should be noted that the state change detected in step <b>105</b> can be the result of manual intervention by a user of the composite workflow tool/system or an automated action performed by a previous execution of method <b>100</b>.</p>
<p id="p-0028" num="0027">Workflow policies can be identified in step <b>110</b> that pertain to the composite workflow, workflow record, and/or user associated with the composite workflow/workflow record. A user-defined workflow policy, herein referred to as a workflow policy, can be an electronic document expressing a business or workflow-specific rule in terms of triggering conditions and a resultant action performed when the conditions are satisfied.</p>
<p id="p-0029" num="0028">For example, a workflow policy can indicate that, when all third-tier records are in the &#x201c;Completed&#x201d; state, the state of the parent second-tier should be changed to &#x201c;Completed&#x201d;.</p>
<p id="p-0030" num="0029">In step <b>115</b>, it can be determined if there are workflow policies that match the conditions associated with this instance of the composite workflow/record/user. When no matching workflow policies are found, step <b>120</b> can execute where the workflow policy handler takes no further action.</p>
<p id="p-0031" num="0030">When matching workflow policies are found, the policy conditions of each matching workflow policy can be evaluated with the values of the current workflow instance in step <b>125</b>. In step <b>130</b>, it can be determined if the policy conditions have been satisfied.</p>
<p id="p-0032" num="0031">When the policy conditions are not satisfied, method <b>100</b> can flow to step <b>120</b> where the workflow policy handler takes no further action. When the policy conditions are satisfied, step <b>135</b> can execute where it can be determined if the triggering user or the record owner possesses the required permissions to perform the policy action,</p>
<p id="p-0033" num="0032">The importance of step <b>135</b> should be emphasized and expanded upon. The ability for users of a composite workflow tool/system to perform various actions can be controlled and these restrictions stringently enforced.</p>
<p id="p-0034" num="0033">For example, a composite workflow tool/system can utilize predefined user roles to identify allowable actions for the users who are assigned the specific role. Thus, a user having the role of &#x201c;Project Head&#x201d; can perform only those actions defined by their role; a user of role &#x201c;Team Lead&#x201d; can perform only &#x201c;Team Lead&#x201d; actions, and so on. Business practices can often dictate that a user's role only changes when warranted by an organizational/job change by the user.</p>
<p id="p-0035" num="0034">As such, a &#x201c;Team Lead&#x201d; cannot have a &#x201c;Team Member&#x201d; perform an action on their behalf, even if the &#x201c;Team Lead&#x201d; authorizes the &#x201c;Team Member&#x201d; to do so. However, utilizing an embodiment of the present disclosure, such authorization can be captured and enabled as a workflow policy, as illustrated in method <b>100</b>.</p>
<p id="p-0036" num="0035">When the triggering user or record owner does not have the required permissions (i.e., user role, network access, etc.), step <b>145</b> can execute where the workflow policy handler can determine if a workflow policy exists that provides authorization for the performance of the policy action. For example, a workflow policy can indicate that, under specified circumstances, &#x201c;Team Members&#x201d; can perform a specific action typically reserved for &#x201c;Team Leads&#x201d;.</p>
<p id="p-0037" num="0036">When a workflow policy does not exist that provides authorization for the policy action, flow of method <b>100</b> can proceed to step <b>165</b> where the policy owner can be informed of the issue with authorization for the policy action (i.e., the user forgot to create a workflow policy providing authorization).</p>
<p id="p-0038" num="0037">When a workflow policy exists that provides authorization for the policy action, the user/record owner can be granted the proper permissions in step <b>150</b>. Granting the permissions required for the user/record owner to perform the policy action can be handled in a variety of ways and as appropriate for the type of policy action being performed.</p>
<p id="p-0039" num="0038">For example, instructions can be executed within the composite workflow tool/system to assign the specific action to the user, bypassing the role definition. In a federated environment, record modification can be required to be performed only in the source database. This can require the workflow policy handler to interact with network-level permission handlers in order to gain access to the source database in order to execute the policy action.</p>
<p id="p-0040" num="0039">In step <b>155</b>, the workflow policy handler can perform the policy action on behalf of the user/record owner. The permissions of the user/record owner can be reverted in step <b>160</b>. That is, the permissions granted in step <b>150</b> can be on a temporary basis (i.e., long enough to perform the policy action). From step <b>160</b>, flow can return to step <b>105</b> to represent the next iteration of method <b>100</b>.</p>
<p id="p-0041" num="0040">When it is determined, in step <b>135</b>, that the triggering user/record owner already has the required permissions, the policy action can be performed on behalf of the user/record owner in step <b>140</b>. Step <b>140</b> can represent an example where a user automates an action that they routinely perform.</p>
<p id="p-0042" num="0041">In one embodiment, roles can be associated with nodes in a workflow, where the nodes are represented in a set of hierarchically established tiers. Each node in the workflow can have role-based permissions associated with it. Role-based permissions can be granted to a node (steps <b>145</b>-<b>160</b>), which are inherited from another node to permit successful completion of an action. For example, one node may be owned by a country X and another node by a country Y. The inherited permissions can be auctioned from the country which owns the node (country X) to country Y to perform a specific action.</p>
<p id="p-0043" num="0042">Using the above example, if a request is opened in England (e.g., country Y), but all created tasks are owned by Hungary (e.g., country X), then only Hungary may be able to open new tasks upon creation of a request. Assuming for this example that a replicated environment exists where equivalent data exists in both countries. Hence, using method <b>100</b>, a request creator can inherent permissions which enables them to &#x201c;go to Hungary&#x201d; even though they are based in England in order to create or close off a task.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating a system <b>200</b> that utilizes user-defined workflow policies <b>260</b> to automate changes to a composite workflow <b>240</b> in accordance with embodiments of the inventive arrangements disclosed herein. System <b>200</b> can perform the steps of method <b>100</b>.</p>
<p id="p-0045" num="0044">In system <b>200</b>, a user <b>205</b> can create user-defined workflow policies <b>260</b>, herein referred to as workflow policies <b>260</b>, for execution upon composite workflows <b>240</b> within the composite workflow system <b>220</b>. The composite workflow system <b>220</b> can represent the hardware and/or software components required to manage the performance of composite workflows <b>240</b>.</p>
<p id="p-0046" num="0045">The composite workflow system <b>220</b> can include a workflow automation tool <b>225</b> and a workflow policy handler <b>250</b>. It should be noted that the composite workflow system <b>220</b> can include additional components (not shown) for other auxiliary functions without limiting or detracting from this embodiment of the present disclosure.</p>
<p id="p-0047" num="0046">The workflow automation tool <b>225</b> can represent a software application that implements functions for the creation, management, and execution of composite workflows <b>240</b>. The workflow automation tool <b>225</b> can include a workflow engine <b>230</b> configured to execute the machine-readable instructions representing the composite workflow <b>240</b> and a data store <b>235</b> for storing the composite workflows <b>240</b>.</p>
<p id="p-0048" num="0047">In general, a workflow can represent a series of steps that define a business process. A composite workflow <b>240</b> can represent a workflow whose steps are represented in a hierarchical structure as opposed to a flat or linear structure. Example composite workflow <b>242</b> can illustrate a three-tier hierarchy of records <b>243</b> like one that can be utilized with RATIONAL CLEARQUEST <b>225</b>.</p>
<p id="p-0049" num="0048">Each record <b>243</b> can represent a step of the example composite workflow <b>242</b> and associated data like owner, assigned user, type, etc. As common to a composite workflow <b>240</b>, each record <b>243</b> can have an associated state transition matrix <b>245</b> that defines the states <b>247</b> that the record <b>243</b> can have and the actions <b>248</b> that cause the transitions between the states <b>247</b>. Hence, each record in the workflow <b>242</b> can be considered a node having a set of role-based permissions associated with it. Permissions can be temporarily inherited from one node to another in order to perform a task.</p>
<p id="p-0050" num="0049">The workflow automation tool <b>225</b> can ensure that the user <b>205</b> can only perform actions <b>248</b> upon a record <b>243</b> that are defined in the state transition matrix <b>245</b>. It should be noted that the structure shown in the example composite workflow <b>242</b> and the coloration of the associated state transition matrix <b>245</b> can be utilized for further illustrative purposes in proceeding Figures.</p>
<p id="p-0051" num="0050">The workflow policy handler <b>250</b> can represent a software application configured to manage creation and execution of workflow policies <b>260</b> upon the composite workflows <b>240</b> of the composite workflow system <b>220</b>. Depending upon the configuration of the composite workflow system <b>220</b> and/or implementation of the workflow policy handler <b>250</b>, the workflow policy handler <b>250</b> can also include a listening component (not shown) that monitors the operations performed by the workflow automation tool <b>225</b> upon composite workflows <b>240</b> in order to collect data to determine if any workflow policies <b>260</b> should be executed.</p>
<p id="p-0052" num="0051">A workflow policy <b>260</b> can be an electronic document that expresses a business or workflow-specific rule in terms of policy conditions <b>265</b> and a resultant policy action <b>270</b>. A policy condition <b>265</b> can represent a value for data field for which the workflow policy <b>260</b> is applicable. The data fields and/or values utilized in the definition of a policy condition <b>265</b> can be recognized by the workflow automation tool <b>225</b> and/or workflow policy handler <b>250</b>. That is, policy conditions <b>265</b> represent data fields and/or values already defined within the workflow automation tool <b>225</b>, such as user roles and record types, or accessible to the workflow policy handler <b>250</b> like the current date.</p>
<p id="p-0053" num="0052">A policy action <b>270</b> can represent one or more instructions that are to be performed when the policy conditions <b>265</b> are satisfied. Policy actions <b>270</b> can correspond to actions <b>248</b> defined in the state transition matrix <b>245</b> of a record <b>243</b> as well as system-level commands or requests for external software applications and/or services.</p>
<p id="p-0054" num="0053">Workflow policies <b>260</b> and their conditions <b>265</b> and actions <b>270</b> can be written in accordance with a standardized language capable of being interpreted/executed by the workflow automation tool <b>225</b>. Additionally, structural logic like BOOLEAN logic can be used to create logical relationships between the elements of policy conditions <b>265</b> and/or policy actions <b>270</b>. Further, a workflow policy <b>260</b> and/or the workflow policy handler <b>250</b> can be configured to utilize existing functionality of the workflow automation tool <b>225</b> like hooks in RATIONAL CLEARQUEST.</p>
<p id="p-0055" num="0054">It is important to note that the rules captured by the workflow policies <b>260</b> are managed separate to the composite workflows <b>240</b> that they affect. As such, workflow policies <b>260</b> can be created/modified/deleted for each project handled by the composite workflow system <b>220</b> without compromising the underlying flexibility of the composite workflows <b>240</b>.</p>
<p id="p-0056" num="0055">Creation and/or modification of a workflow policy <b>260</b> can be performed by a user <b>205</b> via the policy handler interface <b>217</b>. The policy handler interface <b>217</b> can represent a graphical user interface (GUI) in which the user <b>205</b> can perform predefined tasks related to workflow policies <b>260</b>. The policy handler interface <b>217</b> can be a component of the workflow automation tool user interface <b>215</b>, as shown in this example.</p>
<p id="p-0057" num="0056">In another embodiment, the policy handler interface <b>217</b> can be accessed by the user <b>205</b> without the use of the workflow automation tool user interface <b>215</b>.</p>
<p id="p-0058" num="0057">The policy handler interface <b>217</b> and workflow automation tool user interface <b>215</b> can be run upon a client device <b>210</b>. The client device <b>210</b> can represent a variety of computing devices capable of running the user interfaces <b>215</b> and <b>217</b> and communicating with the composite workflow system <b>220</b> over the network <b>275</b>.</p>
<p id="p-0059" num="0058">In another contemplated embodiment, the workflow policy handler <b>250</b> can be a component of the workflow automation tool <b>225</b>. In such an embodiment, the workflow policies <b>260</b> can reside the data store <b>235</b> containing the composite workflows <b>240</b>.</p>
<p id="p-0060" num="0059">In yet another embodiment, the workflow policy handler <b>250</b> can operate external to the composite workflow system <b>220</b>, interacting with the workflow automation tool <b>225</b> over the network <b>275</b>.</p>
<p id="p-0061" num="0060">Network <b>275</b> can include any hardware/software/and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed though data or voice channels. Network <b>275</b> can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. Network <b>275</b> can also include network equipment, such as routers, data lines, hubs, and intermediary servers which together form a data network, such as the Internet. Network <b>275</b> can also include circuit-based communication components and mobile communication components, such as telephony switches, modems, cellular communication towers, and the like. Network <b>275</b> can include line based and/or wireless communication pathways.</p>
<p id="p-0062" num="0061">As used herein, presented data stores <b>235</b> and <b>255</b> can be a physical or virtual storage space configured to store digital information. Data stores <b>235</b> and <b>255</b> can be physically implemented within any type of hardware including, but not limited to, a magnetic disk, an optical disk, a semiconductor memory, a digitally encoded plastic memory, a holographic memory, or any other recording medium. Data stores <b>235</b> and <b>255</b> can be stand-alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally, information can be stored within data stores <b>235</b> and <b>255</b> in a variety of manners. For example, information can be stored within a database structure or can be stored within one or more files of a file storage system, where each file may or may not be indexed for information searching purposes. Further, data stores <b>235</b> and/or <b>255</b> can utilize one or more encryption mechanisms to protect stored information from unauthorized access.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 3</figref> is an illustrated process flow <b>300</b> depicting the operation of the workflow policy handler <b>315</b> for an example workflow policy <b>330</b> in accordance with embodiments of the inventive arrangements disclosed herein. Process flow <b>300</b> can be performed within the context of system <b>200</b> and/or in conjunction with method <b>100</b>.</p>
<p id="p-0064" num="0063">It is important to reiterate that the structure and state transition matrix of the example composite workflow <b>240</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> is used for illustrative purposes in process flow <b>300</b> and subsequent Figures. For the sake of simplicity, each record of the workflow process can follow the same state transition matrix&#x2014;white (the default or created state) to either grey (the active or in process state) or black (the completed or closed state).</p>
<p id="p-0065" num="0064">Additionally, the example composite workflow shown in process flow <b>300</b> can reflect a defect/feature tracking process for a software application. In such an example, the tiers of the composite workflow can represent a request (first tier), tasks (second tier), and activities (third tier) for addressing a submitted defect/feature.</p>
<p id="p-0066" num="0065">Process flow <b>300</b> can begin with User A <b>305</b> modifying <b>345</b> the request record <b>312</b> of a workflow instance <b>310</b>. In this example, the modification of the request record <b>312</b> can be a state change from white to grey (submitted to in process). User A <b>305</b> can be a user of the composite workflow system having a role capable of modifying request records <b>312</b>, like a customer account manager or product manager.</p>
<p id="p-0067" num="0066">The workflow policy handler <b>315</b> can then detect <b>350</b> the state change of the request record <b>312</b> and query <b>355</b> the workflow policies <b>325</b> in the data store <b>320</b>. Workflow policies <b>325</b> applicable to the detected <b>350</b> change can be retrieved <b>360</b>. The retrieval of workflow policies <b>325</b> can be performed on the basis of metadata or keywords, requiring less time than a query of the entire workflow policy <b>325</b>.</p>
<p id="p-0068" num="0067">In this example, workflow policy <b>330</b> has been retrieved <b>360</b> by the workflow policy handler <b>315</b>. Workflow policy <b>330</b> can have policy conditions <b>335</b> stating that the workflow policy <b>330</b> is applicable to situations where User A <b>305</b> changes the state of a request record <b>312</b> is of the type &#x2018;BugFix&#x2019; to &#x2018;In Process&#x2019;.</p>
<p id="p-0069" num="0068">Evaluation <b>365</b> of the policy conditions <b>335</b> can indicate that the policy conditions <b>335</b> are satisfied and the policy action <b>340</b> of the workflow policy <b>330</b> should be applied to the workflow instance <b>310</b>. In this example, the policy action <b>340</b> can state that new task records named &#x2018;Plan&#x2019; and &#x2018;Review&#x2019; should be created. Thus, workflow policy <b>330</b> can exemplify the automation of a redundant record creation process that User A <b>305</b> would usually perform manually for each &#x2018;BugFix&#x2019; request record <b>312</b>.</p>
<p id="p-0070" num="0069">It should be emphasized that the example text representing the policy conditions <b>335</b> and policy actions <b>340</b> are for illustrative purposes only, and are not meant as an exact or exhaustive representation of any embodiment of the present disclosure. Further, this example text attempts to convey a representation of the workflow policy <b>330</b> in simple and implementation-independent terms.</p>
<p id="p-0071" num="0070">The workflow policy handler <b>315</b> can then perform <b>370</b> the policy action <b>340</b> upon the request record <b>312</b> of the workflow instance <b>310</b>, resulting in workflow instance <b>375</b>. It should be noted that workflow instance <b>310</b> and workflow instance <b>375</b> are not separate workflow instances; merely snapshots of the same workflow instance at two points in its progression.</p>
<p id="p-0072" num="0071">It is also important to note that the policy action <b>340</b> of the workflow policy <b>330</b> can include the population of data fields associated with the records of the workflow instance <b>310</b>, such as automatically populating who the record is assigned to or a due date.</p>
<p id="p-0073" num="0072">As used herein, presented data store <b>320</b> can be a physical or virtual storage space configured to store digital information. Data store <b>320</b> can be physically implemented within any type of hardware including, but not limited to, a magnetic disk, an optical disk, a semiconductor memory, a digitally encoded plastic memory, a holographic memory, or any other recording medium. Data store <b>320</b> can be stand-alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally, information can be stored within data store <b>320</b> in a variety of manners. For example, information can be stored within a database structure or can be stored within one or more files of a file storage system, where each file may or may not be indexed for information searching purposes. Further, data store <b>320</b> can utilize one or more encryption mechanisms to protect stored information from unauthorized access.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 4</figref> is an illustrated process flow <b>400</b> depicting the operation of the workflow policy handler <b>415</b> for example workflow policies <b>430</b> and <b>435</b> in accordance with embodiments of the inventive arrangements disclosed herein. Process flow <b>400</b> can be performed within the context of system <b>200</b> and/or in conjunction with method <b>100</b>.</p>
<p id="p-0075" num="0074">It is important to reiterate that the structure and state transition matrix of the example composite workflow <b>240</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> is used for illustrative purposes in process flow <b>400</b> and subsequent Figures. For the sake of simplicity, each record of the workflow process can follow the same state transition matrix&#x2014;white (the default or created state) to either grey (the active or in process state) or black (the completed or closed state).</p>
<p id="p-0076" num="0075">Additionally, the example composite workflow shown in process flow <b>400</b> can reflect a defect/feature tracking process for a software application. In such an example, the tiers of the composite workflow can represent a request (first tier), tasks (second tier), and activities (third tier) for addressing a submitted defect/feature.</p>
<p id="p-0077" num="0076">Process flow <b>400</b> can begin with User B <b>405</b> modifying <b>445</b> an activity record <b>412</b> of a workflow instance <b>410</b>. In this example, the modification of the activity record <b>412</b> can be a state change from grey to black (in process to completed). User B <b>405</b> can be a user of the composite workflow system having a role capable of modifying activity records <b>412</b>, like a software development team member.</p>
<p id="p-0078" num="0077">The workflow policy handler <b>415</b> can then detect <b>450</b> the state change of the activity record <b>412</b> and query <b>455</b> the workflow policies <b>425</b> in the data store <b>420</b>. Workflow policies <b>425</b> applicable to the detected <b>450</b> change can then be retrieved <b>460</b>. The retrieval of workflow policies <b>425</b> can be performed on the basis of metadata or keywords, requiring less time than a query of the entire workflow policy <b>425</b>.</p>
<p id="p-0079" num="0078">In this example, workflow policies <b>430</b> and <b>435</b> have been retrieved <b>460</b> by the workflow policy handler <b>415</b>. Workflow policy <b>430</b> can have policy conditions <b>432</b> stating that the workflow policy <b>430</b> is applicable to situations where activity records <b>412</b> named &#x2018;CodeReview&#x2019; and &#x2018;CodeDev&#x2019; are both in the &#x2018;Complete&#x2019; state (i.e., the two blackened activity records <b>412</b> shown in the workflow instance <b>410</b>).</p>
<p id="p-0080" num="0079">Evaluation <b>465</b> of the policy conditions <b>432</b> of workflow policy <b>430</b> can indicate that the policy conditions <b>432</b> are satisfied and the policy action <b>433</b> of the workflow policy <b>430</b> should be applied to the workflow instance <b>410</b>. Workflow policy <b>430</b> can exemplify the sequential activation of sibling records <b>412</b> within a workflow instance <b>410</b>. In this example, the policy action <b>433</b> can indicate that the action &#x2018;Activate&#x2019; (defined in the state transition matrix) should be performed on the activity record <b>412</b> named &#x2018;CodeTest&#x2019;, changing the state of the &#x2018;CodeTest&#x2019; activity record <b>412</b> from white to grey (submitted to in process).</p>
<p id="p-0081" num="0080">However, when the workflow policy handler <b>415</b> attempts to perform <b>475</b> the policy action <b>433</b>, it can be discovered that User B <b>405</b> is unable to execute an &#x2018;Activate&#x2019; action on activity records <b>412</b> (i.e., User B's <b>405</b> role within the composite workflow system does not allow this action). Alternately, the workflow policy handler <b>415</b> can simply assess User B's <b>405</b> permissions and/or role to determine their ability/inability to perform the policy action <b>433</b> without actually attempting execution of the policy action <b>433</b>.</p>
<p id="p-0082" num="0081">It should be noted that the workflow policy handler <b>415</b> can be configured to include additional logic for handling the execution of multiple workflow policies <b>430</b> and <b>435</b> for a single workflow instance <b>410</b>. For example, metadata associated with the workflow policies <b>430</b> and <b>435</b> can contain priority data to indicate an order in which the workflow policies <b>430</b> and <b>435</b> should be evaluated and performed.</p>
<p id="p-0083" num="0082">At this point, the workflow policy handler <b>415</b> can be configured to look for other retrieved <b>460</b> workflow policies <b>435</b> that authorize User B <b>405</b> to perform this restricted policy action <b>433</b>, as detailed in method <b>100</b>. In this example, workflow policy <b>435</b> can provide such authorization.</p>
<p id="p-0084" num="0083">Evaluation of the policy conditions <b>437</b> of workflow policy <b>435</b> can define applicability for circumstances where User B <b>405</b> is attempting to perform an &#x2018;Activate&#x2019; action upon an activity record <b>412</b> named &#x2018;CodeTest&#x2019;. Since these policy conditions <b>437</b> are satisfied by the policy action <b>433</b> pending execution from workflow policy <b>430</b>, the policy action <b>438</b> of workflow policy <b>435</b> can be executed.</p>
<p id="p-0085" num="0084">The policy action <b>438</b> of workflow policy <b>435</b> can indicate that the role of User B <b>405</b> is to be temporarily set to &#x2018;Team Lead&#x2019; to perform the pending policy action <b>433</b>, and then set back to the role of &#x2018;Team&#x2019;. Thus, the workflow policy handler <b>415</b> can perform <b>470</b> the policy action <b>438</b> upon the user data <b>442</b> for User B <b>405</b> contained in a data store <b>440</b> of the composite workflow system.</p>
<p id="p-0086" num="0085">It should be emphasized that the example text representing the policy conditions <b>432</b> and <b>437</b> and policy actions <b>433</b> and <b>438</b> are for illustrative purposes only, and are not meant as an exact or exhaustive representation of any embodiment of the present disclosure. Further, this example text attempts to convey representations of the workflow policies <b>430</b> and <b>435</b> in simple and implementation-independent terms.</p>
<p id="p-0087" num="0086">For example, although the examples are described in terms of two users (User A and User B) permissions against activity records in the workflow instance <b>410</b> can be assigned on other basis. The records can be considered nodes in a tiered workflow instance <b>410</b>, where node specific role-based permissions can exist. For example, different nodes can be owned by different countries, where inherited permissions among nodes can be permissions granted across countries.</p>
<p id="p-0088" num="0087">Turning back to the example of <figref idref="DRAWINGS">FIG. 4</figref>, once User B <b>405</b> has the proper permissions, the workflow policy handler <b>415</b> can then perform <b>475</b> the policy action <b>433</b> from workflow policy <b>430</b> upon the &#x2018;CodeTest&#x2019; activity record contained in the workflow instance <b>410</b>, resulting in workflow instance <b>480</b>. It should be noted that workflow instance <b>410</b> and workflow instance <b>480</b> are not separate workflow instances; merely snapshots of the same workflow instance at two points in its progression.</p>
<p id="p-0089" num="0088">It is also important to note that the policy action <b>433</b> of the workflow policy <b>430</b> can include the population of data fields associated with the records of the workflow instance <b>410</b>, such as automatically populating who the record is assigned to or a due date.</p>
<p id="p-0090" num="0089">As used herein, presented data stores <b>420</b> and <b>440</b> can be a physical or virtual storage space configured to store digital information. Data stores <b>420</b> and <b>440</b> can be physically implemented within any type of hardware including, but not limited to, a magnetic disk, an optical disk, a semiconductor memory, a digitally encoded plastic memory, a holographic memory, or any other recording medium. Data stores <b>420</b> and <b>440</b> can be stand-alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally, information can be stored within data stores <b>420</b> and <b>440</b> in a variety of manners. For example, information can be stored within a database structure or can be stored within one or more files of a file storage system, where each file may or may not be indexed for information searching purposes. Further, data stores <b>420</b> and/or <b>440</b> can utilize one or more encryption mechanisms to protect stored information from unauthorized access.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 5</figref> is an illustrated process flow <b>500</b> depicting the operation of the workflow policy handler <b>515</b> for an example workflow policy <b>530</b> in accordance with embodiments of the inventive arrangements disclosed herein. Process flow <b>500</b> can be performed within the context of system <b>200</b> and/or in conjunction with method <b>100</b>.</p>
<p id="p-0092" num="0091">It is important to reiterate that the structure and state transition matrix of the example composite workflow <b>240</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> is used for illustrative purposes in process flow <b>500</b>. For the sake of simplicity, each record of the workflow process can follow the same state transition matrix&#x2014;white (the default or created state) to either grey (the active or in process state) or black (the completed or closed state).</p>
<p id="p-0093" num="0092">Additionally, the example composite workflow shown in process flow <b>500</b> can reflect a defect/feature tracking process for a software application. In such an example, the tiers of the composite workflow can represent a request (first tier), tasks (second tier), and activities (third tier) for addressing a submitted defect/feature.</p>
<p id="p-0094" num="0093">Process flow <b>500</b> can begin with User C <b>505</b> modifying <b>545</b> the activity record <b>512</b> of a workflow instance <b>510</b>. In this example, the modification of the activity record <b>512</b> can be a state change from grey to black (in process to complete). User C <b>505</b> can be a user of the composite workflow system having a role capable of modifying task <b>513</b> and activity records <b>512</b>, like a team leader or developer.</p>
<p id="p-0095" num="0094">The workflow policy handler <b>515</b> can then detect <b>550</b> the state change of the activity record <b>512</b> and query <b>555</b> the workflow policies <b>525</b> in the data store <b>520</b>. Workflow policies <b>525</b> applicable to the detected <b>550</b> change can be retrieved <b>560</b>. The retrieval of workflow policies <b>525</b> can be performed on the basis of metadata or keywords, requiring less time than a query of the entire workflow policy <b>525</b>.</p>
<p id="p-0096" num="0095">In this example, workflow policy <b>530</b> has been retrieved <b>560</b> by the workflow policy handler <b>515</b>. Workflow policy <b>530</b> can have policy conditions <b>535</b> stating that the workflow policy <b>530</b> is applicable to situations where the state of the &#x2018;CodeReview&#x2019;, &#x2018;CodeDev&#x2019;, and &#x2018;CodeTest&#x2019; activity records <b>512</b> are all set to &#x2018;Complete&#x2019;.</p>
<p id="p-0097" num="0096">Evaluation <b>565</b> of the policy conditions <b>535</b> can indicate that the policy conditions <b>535</b> are satisfied and the policy action <b>540</b> should be applied to the workflow instance <b>510</b>. Workflow policy <b>530</b> can exemplify the automatic progression of a task record <b>513</b> once all of its activity records <b>512</b> have been completed. In this example, the policy action <b>540</b> can indicate that the action &#x2018;Resolve&#x2019; (defined in the state transition matrix) should be performed on the task record <b>513</b> named &#x2018;Plan&#x2019;, changing the state of the &#x2018;Plan&#x2019; task record from grey to black (in process to complete).</p>
<p id="p-0098" num="0097">It should be emphasized that the example text representing the policy conditions <b>535</b> and policy actions <b>540</b> are for illustrative purposes only, and are not meant as an exact or exhaustive representation of any embodiment of the present disclosure. Further, this example text attempts to convey a representation of the workflow policy <b>530</b> in simple and implementation-independent terms.</p>
<p id="p-0099" num="0098">The workflow policy handler <b>515</b> can then perform <b>570</b> the policy action <b>540</b> upon the task record <b>513</b> of the workflow instance <b>510</b>, resulting in workflow instance <b>575</b>. It should be noted that workflow instance <b>510</b> and workflow instance <b>575</b> are not separate workflow instances; merely snapshots of the same workflow instance at two points in its progression.</p>
<p id="p-0100" num="0099">It is also important to note that the policy action <b>540</b> of the workflow policy <b>530</b> can include the population of data fields associated with the records of the workflow instance <b>510</b>, such as automatically populating who the record is assigned to or a due date.</p>
<p id="p-0101" num="0100">As used herein, presented data store <b>520</b> can be a physical or virtual storage space configured to store digital information. Data store <b>520</b> can be physically implemented within any type of hardware including, but not limited to, a magnetic disk, an optical disk, a semiconductor memory, a digitally encoded plastic memory, a holographic memory, or any other recording medium. Data store <b>520</b> can be stand-alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally, information can be stored within data store <b>520</b> in a variety of manners. For example, information can be stored within a database structure or can be stored within one or more files of a file storage system, where each file may or may not be indexed for information searching purposes. Further, data store <b>520</b> can utilize one or more encryption mechanisms to protect stored information from unauthorized access.</p>
<p id="p-0102" num="0101">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product comprising a non-transitory computer readable storage medium having computer usable program code embodied therewith, the computer usable program code comprising:
<claim-text>computer usable program code configured to detect a state change to a record of an instance of a composite workflow running within a composite workflow system;</claim-text>
<claim-text>computer usable program code configured to identify at least one user-defined workflow policy associated with the composite workflow in which the record change was detected by capturing a plurality of data fields and associated data values regarding the instance of the composite workflow and an identifier of at least one user associated with the record for which the state change occurred wherein the plurality of data fields are predefined, wherein a user-defined workflow policy defines at least one policy action to be performed upon satisfaction of at least one policy condition, wherein the record comprises:
<claim-text>a state transition matrix defining states that the record can have;</claim-text>
<claim-text>the at least one policy action which causes a transition between the states; and</claim-text>
<claim-text>a set of role based permissions for accessing the record;</claim-text>
</claim-text>
<claim-text>computer usable program code configured to, for each identified user-defined workflow policy, determine an applicability to the instance of the composite workflow in which the change was detected by ascertaining the captured data values to evaluate the at least one policy condition;</claim-text>
<claim-text>computer usable program code configured to denote the at least one identified user-defined workflow policy as applicable if the at least one policy condition is satisfied; and</claim-text>
<claim-text>computer usable program code configured to, if the at least one identified user-defined workflow policy is determined to be applicable, automatically perform the at least one policy action of the said at least one identified user-defined workflow policy to at least one record in the instance of the composite workflow.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein identifying the at least one user-defined workflow policy further comprises:
<claim-text>computer usable program code configured to query a plurality of user-defined workflow policies using the captured plurality of data fields and associated data values and the identifier of the at least one user.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the querying of the plurality of user-defined workflow policies targets a plurality of metadata associated with each user-defined workflow policy.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein, if at least two policy conditions are coupled by at least one BOOLEAN operator, the evaluation of the at least two policy conditions is performed in accordance with an established order precedence for BOOLEAN operations, wherein the evaluation of the at least two policy conditions coupled by the at least one BOOLEAN operator as TRUE denotes satisfaction of the at least two policy conditions.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, upon determination of applicable user-defined workflow policies and prior to the performance of the at least one policy action, said method further comprises:
<claim-text>computer usable program code configured to assess a capability for a user associated with the detected state change to perform the at least one policy action of a first user-defined workflow policy within the composite workflow system;</claim-text>
<claim-text>computer usable program code configured to, if the user is determined to be incapable of performing the at least one policy action, search user-defined workflow policies determined as applicable for a second user-defined workflow policy, wherein the at least one policy action of the second user-defined workflow policy temporarily grants the user the capability to perform the at least one policy action of the first user-defined workflow policy; and</claim-text>
<claim-text>computer usable program code configured to, if the second user-defined workflow policy exists, execute the at least one policy action of the second user-defined workflow policy prior to the at least one policy action of the first user-defined workflow policy, whereby the user is able to perform the at least one policy action of the first user-defined workflow policy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>computer usable program code configured to, if the second user-defined workflow policy is non-existent, inform an owner of the first user-defined workflow policy of the incapability of the user to perform the at least one policy action of the first user-defined workflow policy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the composite workflow system comprises a workflow automation tool configured for creation, management, and execution of the plurality of composite workflows.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising a listening component configured for determining if any of the plurality of user-defined workflow policies should be executed based on data collected by monitoring operations performed by the workflow automation tool upon the plurality of composite workflows.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising computer usable program code configured to create, manage, and execute the composite workflow.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising computer usable program code configured to determine if the at least one user-defined workflow policy should be executed based on data collected by monitoring operations performed by a workflow automation tool upon the composite workflow.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>one or more non-transitory storage mediums storing program instructions, wherein the one or more processors execute the program instructions to:
<claim-text>detect a state change to a record of an instance of a composite workflow running within a composite workflow system by a workflow policy handler, wherein the record comprises:
<claim-text>a state transition matrix defining states that the record can have;</claim-text>
<claim-text>at least one policy action which causes a transition between the states; and</claim-text>
<claim-text>a set of role based permissions for accessing the record;</claim-text>
</claim-text>
<claim-text>identify at least one user-defined workflow policy associated with the composite workflow in which record the change was detected by capturing a plurality of data fields and associated data values regarding the instance of the composite workflow and an identifier of at least one user associated with the record for which the state change occurred, wherein the plurality of data fields are predefined, wherein a user-defined workflow policy defines the at least one policy action to be performed upon satisfaction of at least one policy condition;</claim-text>
<claim-text>for the at least one identified user-defined workflow policy, determine an applicability to the instance of the composite workflow in which the change was detected, by ascertaining the captured data values to evaluate the at least one policy condition;</claim-text>
<claim-text>denote the at least one identified user-defined workflow policy as applicable if the at least one policy condition is satisfied; and</claim-text>
<claim-text>if the at least one identified user-defined workflow policy is determined to be applicable, automatically perform the at least one policy action of the said at least one identified user-defined workflow policy to at least one record in the instance of the composite workflow.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein executing the program instructions to identify the at least one user-defined workflow policy further comprises the one or more processors executing the program instructions to:
<claim-text>query a plurality of user-defined workflow policies using the captured plurality of data fields and associated data values and the identifier of the at least one user.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein executing the program instructions to query the plurality of user-defined workflow policies targets a plurality of metadata associated with each user-defined workflow policy.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein, if at least two policy conditions are coupled by at least one BOOLEAN operator, the evaluation of the at least two policy conditions is performed in accordance with an established order precedence for BOOLEAN operations, wherein the evaluation of the at least two policy conditions coupled by the at least one BOOLEAN operator as TRUE denotes satisfaction of the at least two policy conditions.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein, upon determination of applicable user-defined workflow policies and prior to the performance of the at least one policy action, said one or more processors execute the program instructions to:
<claim-text>assess a capability for a user associated with the detected state change to perform the at least one policy action of a first user-defined workflow policy within the composite workflow system;</claim-text>
<claim-text>if the user is determined to be incapable of performing the at least one policy action, search user-defined workflow policies determined as applicable for a second user-defined workflow policy, wherein the at least one policy action of the second user-defined workflow policy temporarily grants the user the capability to perform the at least one policy action of the first user-defined workflow policy; and</claim-text>
<claim-text>if the second user-defined workflow policy exists, execute the at least one policy action of the second user-defined workflow policy prior to the at least one policy action of the first user-defined workflow policy, whereby the user is able to perform the at least one policy action of the first user-defined workflow policy.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

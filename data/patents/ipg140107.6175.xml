<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627299-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627299</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12040485</doc-number>
<date>20080229</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1225</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>45</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717146</main-classification>
<further-classification>717104</further-classification>
<further-classification>717106</further-classification>
<further-classification>717114</further-classification>
</classification-national>
<invention-title id="d2e53">Virtual machine and programming language for event processing</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4819233</doc-number>
<kind>A</kind>
<name>Delucia et al.</name>
<date>19890400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4875161</doc-number>
<kind>A</kind>
<name>Lahti</name>
<date>19891000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5481717</doc-number>
<kind>A</kind>
<name>Gaboury</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5546593</doc-number>
<kind>A</kind>
<name>Kimura et al.</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5596752</doc-number>
<kind>A</kind>
<name>Knudsen et al.</name>
<date>19970100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717117</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5721920</doc-number>
<kind>A</kind>
<name>Mak et al.</name>
<date>19980200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718102</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5872974</doc-number>
<kind>A</kind>
<name>Mezick</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5878262</doc-number>
<kind>A</kind>
<name>Shoumura et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5909684</doc-number>
<kind>A</kind>
<name>Nelson</name>
<date>19990600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717118</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5926638</doc-number>
<kind>A</kind>
<name>Inoue</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6131185</doc-number>
<kind>A</kind>
<name>Coskun et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6202199</doc-number>
<kind>B1</kind>
<name>Wygodny et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6230309</doc-number>
<kind>B1</kind>
<name>Turner et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6275976</doc-number>
<kind>B1</kind>
<name>Scandura</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6282701</doc-number>
<kind>B1</kind>
<name>Wygodny et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6292938</doc-number>
<kind>B1</kind>
<name>Sarkar et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6330710</doc-number>
<kind>B1</kind>
<name>O'Neil et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6385765</doc-number>
<kind>B1</kind>
<name>Cleaveland et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6412106</doc-number>
<kind>B1</kind>
<name>Leask et al.</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6473794</doc-number>
<kind>B1</kind>
<name>Guheen et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6636863</doc-number>
<kind>B1</kind>
<name>Friesen</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6658649</doc-number>
<kind>B1</kind>
<name>Bates et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6668370</doc-number>
<kind>B1</kind>
<name>Harmon et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6671875</doc-number>
<kind>B1</kind>
<name>Lindsey et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6779120</doc-number>
<kind>B1</kind>
<name>Valente et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6807559</doc-number>
<kind>B1</kind>
<name>Budhiraja</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6868525</doc-number>
<kind>B1</kind>
<name>Szabo</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7058928</doc-number>
<kind>B2</kind>
<name>Wygodny et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7089534</doc-number>
<kind>B2</kind>
<name>Hartman et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7216338</doc-number>
<kind>B2</kind>
<name>Barnett et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7219329</doc-number>
<kind>B2</kind>
<name>Meijer et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717106</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7240101</doc-number>
<kind>B2</kind>
<name>Rich et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7275237</doc-number>
<kind>B1</kind>
<name>Schneider et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7340728</doc-number>
<kind>B2</kind>
<name>Kutter et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7356735</doc-number>
<kind>B2</kind>
<name>Bennett et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 34</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7401322</doc-number>
<kind>B1</kind>
<name>Shagam et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7418584</doc-number>
<kind>B1</kind>
<name>Klaiber et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7437613</doc-number>
<kind>B2</kind>
<name>Baumberger</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7441235</doc-number>
<kind>B2</kind>
<name>Tohdo et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7464373</doc-number>
<kind>B1</kind>
<name>Yunt et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>7472381</doc-number>
<kind>B2</kind>
<name>Fox et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717148</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>7493606</doc-number>
<kind>B2</kind>
<name>Morin</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>7640538</doc-number>
<kind>B2</kind>
<name>Bennett et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>7647528</doc-number>
<kind>B2</kind>
<name>Yilmaz et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>7685607</doc-number>
<kind>B2</kind>
<name>Frank et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>7685635</doc-number>
<kind>B2</kind>
<name>Vega et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 17</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>7703084</doc-number>
<kind>B2</kind>
<name>Lindhorst et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>7716676</doc-number>
<kind>B2</kind>
<name>Sawicki et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719313</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>7788649</doc-number>
<kind>B1</kind>
<name>Kunisetty et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717137</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>7861232</doc-number>
<kind>B2</kind>
<name>Ebie et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717131</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>7870498</doc-number>
<kind>B2</kind>
<name>Drummond et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715763</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>7886293</doc-number>
<kind>B2</kind>
<name>Anderson et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>7900137</doc-number>
<kind>B2</kind>
<name>Ivarsoy et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>7904889</doc-number>
<kind>B2</kind>
<name>Avitzur et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>7904903</doc-number>
<kind>B2</kind>
<name>Grobman et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>7970892</doc-number>
<kind>B2</kind>
<name>Seduhkin et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>7971040</doc-number>
<kind>B2</kind>
<name>Ayrignac et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>8006233</doc-number>
<kind>B2</kind>
<name>Centonze et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>8020153</doc-number>
<kind>B2</kind>
<name>Aoshima et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>8095650</doc-number>
<kind>B1</kind>
<name>Cheng et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>8112765</doc-number>
<kind>B2</kind>
<name>Newport et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>8266586</doc-number>
<kind>B2</kind>
<name>Wang</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>8290980</doc-number>
<kind>B2</kind>
<name>Baio et al.</name>
<date>20121000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707783</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>8312202</doc-number>
<kind>B1</kind>
<name>Koryakin et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>8365149</doc-number>
<kind>B2</kind>
<name>Frank et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>8397216</doc-number>
<kind>B2</kind>
<name>Frank et al.</name>
<date>20130300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2002/0087950</doc-number>
<kind>A1</kind>
<name>Brodeur et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2002/0111965</doc-number>
<kind>A1</kind>
<name>Kutter</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2002/0138821</doc-number>
<kind>A1</kind>
<name>Furman et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2003/0149823</doc-number>
<kind>A1</kind>
<name>Newman et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710305</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2003/0159132</doc-number>
<kind>A1</kind>
<name>Barnett et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2003/0176998</doc-number>
<kind>A1</kind>
<name>Walker</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2003/0182626</doc-number>
<kind>A1</kind>
<name>Davidov et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2003/0182651</doc-number>
<kind>A1</kind>
<name>Secrist et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2003/0208351</doc-number>
<kind>A1</kind>
<name>Hartman et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2003/0208743</doc-number>
<kind>A1</kind>
<name>Chong et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2004/0060038</doc-number>
<kind>A1</kind>
<name>Johnston-Watt et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2004/0181781</doc-number>
<kind>A1</kind>
<name>Tohdo et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2005/0021348</doc-number>
<kind>A1</kind>
<name>Chan et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2005/0091093</doc-number>
<kind>A1</kind>
<name>Bhaskaran et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2005/0138605</doc-number>
<kind>A1</kind>
<name>Yamamoto</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2005/0155019</doc-number>
<kind>A1</kind>
<name>Levine et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717127</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2005/0166182</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2005/0216888</doc-number>
<kind>A1</kind>
<name>Drummond et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2005/0235264</doc-number>
<kind>A1</kind>
<name>Hines</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2005/0257243</doc-number>
<kind>A1</kind>
<name>Baker</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2006/0031814</doc-number>
<kind>A1</kind>
<name>Morin</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2006/0123396</doc-number>
<kind>A1</kind>
<name>Fox et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2006/0130029</doc-number>
<kind>A1</kind>
<name>Morishita et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2006/0149582</doc-number>
<kind>A1</kind>
<name>Hawkins</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2006/0241954</doc-number>
<kind>A1</kind>
<name>Jeng et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2006/0242627</doc-number>
<kind>A1</kind>
<name>Wygodny et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2006/0253842</doc-number>
<kind>A1</kind>
<name>Pees et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>2007/0006228</doc-number>
<kind>A1</kind>
<name>Grobman et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>2007/0179823</doc-number>
<kind>A1</kind>
<name>Bhaskaran et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2007/0220493</doc-number>
<kind>A1</kind>
<name>Morizawa</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2007/0240125</doc-number>
<kind>A1</kind>
<name>Degenhardt et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2008/0010597</doc-number>
<kind>A1</kind>
<name>Seeman et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>2008/0034351</doc-number>
<kind>A1</kind>
<name>Pugh et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>2008/0046872</doc-number>
<kind>A1</kind>
<name>Cooper</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>2008/0065740</doc-number>
<kind>A1</kind>
<name>Baio et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>2008/0127100</doc-number>
<kind>A1</kind>
<name>O'Farrell et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717125</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>2008/0184203</doc-number>
<kind>A1</kind>
<name>Yan</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>2009/0006063</doc-number>
<kind>A1</kind>
<name>Sedukhin et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>2009/0055838</doc-number>
<kind>A1</kind>
<name>Sedukhin et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>2009/0077564</doc-number>
<kind>A1</kind>
<name>Loeser</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718108</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>2009/0119493</doc-number>
<kind>A1</kind>
<name>Venkitachalam et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>2009/0144711</doc-number>
<kind>A1</kind>
<name>Chang</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>2009/0217235</doc-number>
<kind>A1</kind>
<name>Suenbuel</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>2009/0222789</doc-number>
<kind>A1</kind>
<name>Frank et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>2009/0222795</doc-number>
<kind>A1</kind>
<name>Frank et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>2009/0254923</doc-number>
<kind>A1</kind>
<name>Newport et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>2009/0300578</doc-number>
<kind>A1</kind>
<name>Neil</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>2010/0211828</doc-number>
<kind>A1</kind>
<name>Moyer et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>2010/0332968</doc-number>
<kind>A1</kind>
<name>Squillace</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>2011/0179151</doc-number>
<kind>A1</kind>
<name>Sedukhin et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>2012/0151484</doc-number>
<kind>A1</kind>
<name>Frank et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>CN</country>
<doc-number>101213518</doc-number>
<kind>A</kind>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00119">
<othercit>David Flanagan, Java in a Nutshell A Desktop Quick Reference, 2<sup>nd </sup>Edition, published by O'Reilly 1997, ISBN&#x2014;1-56592-262-x, pp. 127-157, 227-233.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00120">
<othercit>Klein et al., A Machine-Checked Model for a Java-Like Language, Virtual Machine, and Compiler, published by ACM Transactions on Programming Languages and Systems, vol. 28, No. 4, Jul. 2006, pp. 619-695.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00121">
<othercit>Zeng et al., Model analysis for business event processing, published by IBM System Journal, vol. 46, No. 4, 2007, pp. 817-831.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00122">
<othercit>Adi, Asaf et al., &#x201c;Amit&#x2014;The Situation Manager&#x201d;, The VLDB Journal&#x2014;The International Journal on Very Large Data Bases, vol. 13, Issue 2 (May 2004), pp. 177-203.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00123">
<othercit>Adi, Asaf et al., &#x201c;The Situation Manager Rule Language&#x201d;, presented at RuleML, 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00124">
<othercit>Frank, Jim H., &#x201c;Jump-start business activity monitoring (BAM), Part 1: Introduction to monitor modeling&#x201d;, http://www-128.ibm.com/developerworks/architecture/library/ar-bam1/, Feb. 27, 2007.RANK.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00125">
<othercit>Adams, Greg et al., &#x201c;IBM WebSphere Developer Technical Journal: A guided tour of WebSphere Integration Developer&#x2014;Part 1&#x201d; , http://www.ibm.com/developerworks/websphere/techjournal/0602<sub>&#x2014;</sub>gregory/0602<sub>&#x2014;</sub>gregory.html, Feb. 22, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00126">
<othercit>Joachim H. Frank et al., U.S. Appl. No. 12/040,461, filed Feb. 29, 2008, Office Action, Jul. 7, 2011, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00127">
<othercit>Joachim H. Frank et al., U.S. Appl. No. 12/040,461, filed Feb. 29, 2008, Office Action Appendices, Jul. 7, 2011, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00128">
<othercit>Haase, Kim, &#x201c;Java(TM) Message Service API Tutorial&#x201d;, Sun Microsystems, Inc., Aug. 2001, XP00226306.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00129">
<othercit>PCT International Search Report and Written Opinion for application PCT/EP2009/052285, mailed Jun. 2, 2009, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00130">
<othercit>Joachim H. Frank, et al., U.S. Appl. No. 12/040,461, filed Feb. 29, 2008, Office Action, May 18, 2012, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00131">
<othercit>Yang et al., &#x201c;Clairvoyant: A Comprehensive Source-Level Debugger for Wireless Sensor Networks&#x201d;, published 2007 by ACM, pp. 189-204.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00132">
<othercit>Bernard Pope, &#x201c;Declarative Debugging with Buddha&#x201d;, published in 2005 by Springer-Verlag Berlin Heidelberg, pp. 273-308.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00133">
<othercit>Pothier et al., &#x201c;Scalable Omniscient Debugging&#x201d;, published in 2007 by ACM, pp. 535-551.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00134">
<othercit>Bai, Lan S., et al., &#x201c;Archetype-Based Design: Sensor Network Programming for Application Experts, Not Just Programming Experts&#x201d;, ACM, Proceedings of IPSN'09, Apr. 13-16, 2009, San Francisco, CA. pp. 85-96.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00135">
<othercit>Bhatotia, Pramod, et al., &#x201c;Incoop: MapReduce for Incremental Computations&#x201d;, ACM, SOCC'11, Oct. 27-28, 2011, Cascais, Portugal. 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00136">
<othercit>Gasiunas, Vaidas, et al., &#x201c;EScala: Modular Event-Driven Object Interactions in Scala&#x201d;, ACM, Proceedings of AOSD'11, Mar. 21-25, 2011, Pernambuco, Brazil. pp. 227-240.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00137">
<othercit>Marth, Kevin, &#x201c;Programming in the MPL-RM Programming Language&#x201d;, Proceedings of 43rd ACM Southeast Conference, Mar. 18-20, 2005, Kennesaw, GA. pp. 2-262-2-268.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00138">
<othercit>Batory, Don, &#x201c;Program Refactoring, Program Synthesis, and Model-Driven Development&#x201d;, Proceedings of the 16th International Conference on Compiler Constuction (CC'07), 2007, vol. 4420 of LNCS, pp. 156-171.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00139">
<othercit>Hohpe, Gregor, &#x201c;Developing Software in a Service-Oriented World&#x201d;, published by ThoughtWorks, Inc., 2005. 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00140">
<othercit>Joachim H. Frank, et al., Office Action from Chinese Patent Office, Oct. 26, 2012. 5 pages, not translated.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00141">
<othercit>Joachim H. Frank, et al., U.S. Appl. No. 12/040,508, filed Feb. 29, 2008, Office Action, Feb. 23, 2012, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00142">
<othercit>Joachim H. Frank, et al., U.S. Appl. No. 12/040,461, filed Feb. 29, 2008, Office Action, Jan. 25, 2012, 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00143">
<othercit>Kumar Bhaskaran, et al., U.S. Appl. No. 11/343,145, filed Jan. 30, 2006, Office Action, Jan. 17, 2008, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00144">
<othercit>Kumar Bhaskaran, et al., U.S. Appl. No. 11/343,145, filed Jan. 30, 2006, Office Action, Apr. 27, 2009, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00145">
<othercit>Kumar Bhaskaran, et al., U.S. Appl. No. 11/343,145, filed Jan. 30, 2006, Office Action, Jul. 22, 2009, 20 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00146">
<othercit>Kumar Bhaskaran, et al., U.S. Appl. No. 11/343,145, filed Jan. 30, 2006, Office Action, Apr. 28, 2010, 21 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00147">
<othercit>Kumar Bhaskaran, et al., U.S. Appl. No. 11/343,145, filed Jan. 30, 2006, Office Action, Dec. 7, 2010, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00148">
<othercit>Joachim H. Frank, et al., U.S. Appl. No. 13/403,744, filed Feb. 23, 2012, Office Action, Mar. 5, 2013, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00149">
<othercit>Joachim H. Frank, et al., Office Action from Chinese Patent Office for related case RSW920070282CN1, May 13, 2013, 8 pages, not translated.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>24</number-of-drawing-sheets>
<number-of-figures>25</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090222793</doc-number>
<kind>A1</kind>
<date>20090903</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Frank</last-name>
<first-name>Joachim H.</first-name>
<address>
<city>Greenwich</city>
<state>CT</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Jamison</last-name>
<first-name>Wilfred C.</first-name>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Frank</last-name>
<first-name>Joachim H.</first-name>
<address>
<city>Greenwich</city>
<state>CT</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Jamison</last-name>
<first-name>Wilfred C.</first-name>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Doubet</last-name>
<first-name>Marcia L.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dam</last-name>
<first-name>Tuan Q.</first-name>
<department>2192</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wei</last-name>
<first-name>Zheng</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A virtual machine supports execution of compiler-generated code and provides an execution environment for code that may correspond to any of several different event-driven or message-driven programming models (such as state machines, rules for complex event processing and event correlation, monitoring contexts, processes, and mediations). The programming models may be used in business monitoring and/or business integration environments. A programming language is defined for execution using the virtual machine, which contains a relatively small number of instructions and which is preferably generated by a compiler from a higher-level, event-driven or message-driven model.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="95.59mm" wi="103.29mm" file="US08627299-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="107.19mm" wi="103.38mm" file="US08627299-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="205.49mm" wi="174.75mm" orientation="landscape" file="US08627299-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="190.58mm" wi="173.82mm" orientation="landscape" file="US08627299-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="165.02mm" wi="175.18mm" orientation="landscape" file="US08627299-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="235.63mm" wi="170.01mm" orientation="landscape" file="US08627299-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="222.59mm" wi="135.72mm" orientation="landscape" file="US08627299-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="111.00mm" wi="153.16mm" file="US08627299-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="72.98mm" wi="142.41mm" orientation="landscape" file="US08627299-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="143.34mm" wi="182.71mm" orientation="landscape" file="US08627299-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="159.51mm" wi="189.31mm" orientation="landscape" file="US08627299-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="191.85mm" wi="98.04mm" orientation="landscape" file="US08627299-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="228.68mm" wi="191.09mm" file="US08627299-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="194.48mm" wi="158.58mm" file="US08627299-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="200.07mm" wi="162.22mm" file="US08627299-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="209.55mm" wi="168.99mm" file="US08627299-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="176.28mm" wi="177.63mm" file="US08627299-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="176.36mm" wi="154.69mm" file="US08627299-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="224.45mm" wi="123.02mm" file="US08627299-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="216.58mm" wi="108.20mm" file="US08627299-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="233.43mm" wi="182.71mm" file="US08627299-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="223.18mm" wi="168.06mm" file="US08627299-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="192.87mm" wi="135.72mm" file="US08627299-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="226.74mm" wi="169.33mm" orientation="landscape" file="US08627299-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="182.03mm" wi="154.43mm" orientation="landscape" file="US08627299-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is related to commonly-assigned U.S. patent application Ser. No. 12/040,461, titled &#x201c;Compiler for a Declarative Event-Driven Programming Model&#x201d; (hereinafter, &#x201c;the first related application&#x201d;), and to commonly-assigned U.S. patent application Ser. No. 12/040,508, titled &#x201c;Debugger for a Declarative Event-Driven Programming Model&#x201d; (hereinafter, &#x201c;the second related application&#x201d;), both of which were filed concurrently herewith and which are hereby incorporated herein as if set forth fully.</p>
<heading id="h-0002" level="1">RESERVATION OF COPYRIGHT</heading>
<p id="p-0003" num="0002">A portion of the disclosure of this patent document contains material to which a claim of copyright protection is made. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but reserves all other rights whatsoever.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">The present invention relates to computers, and deals more particularly with virtual machines and programming languages used for event processing (e.g., in business monitoring and/or business integration environments).</p>
<p id="p-0005" num="0004">Event-driven application programs play an increasingly important role in business monitoring and business integration. The WebSphere&#xae; Business Integration platform from International Business Machines Corporation (&#x201c;IBM&#x201d;), for example, supports a number of different types of event-driven executables for business environments. These types of executables include state machines, rules for complex event processing (&#x201c;CEP&#x201d;) and event correlation, and monitoring contexts. (&#x201c;WebSphere&#x201d; is a registered trademark of IBM in the United States, other countries, or both.)</p>
<p id="p-0006" num="0005">In business monitoring and business integration environments, events are typically conveyed as messages. Message-driven executables include processes and mediations.</p>
<heading id="h-0004" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">The present invention is directed, in a first aspect, to a virtual machine that executes event processing. In one embodiment, this aspect comprises: executing instructions from a program using a virtual machine on a computer, wherein the instructions comprise at least one of: an event instruction for receiving an inbound event; an assignment instruction for assigning a value; a branch instruction for conditional transfer to a different one of the instructions; an emit instruction for specifying that an outbound event is to be emitted; a terminate instruction for specifying that a current execution context object is to be terminated; and a fan-out instruction for at least one of specifying event correlation and enabling a context switch.</p>
<p id="p-0008" num="0007">The instructions may be generated from an event-driven model specification, and/or from a message-driven model specification. Instructions from a plurality of programs may be executed using the virtual machine on the computer, and the plurality of programs may be generated from at least two different execution models.</p>
<p id="p-0009" num="0008">Executing the event instruction may further comprise: executing the event instruction to receive a particular inbound event; locating a fan-out instruction associated with the event instruction; executing the located fan-out instruction to determine, using correlation predicate information associated with the located fan-out instruction, whether any current execution context object is capable of further processing the particular inbound event; and directing the particular inbound event to each determined capable execution context object, if any, for the further processing therein.</p>
<p id="p-0010" num="0009">The event instruction for receiving an inbound event may also filter the inbound event. Executing the instructions using the virtual machine may further comprise determining which of a plurality of event instructions from the program to execute, upon receiving a particular inbound event, by comparing a type declared by the particular inbound event to a type specification, when present, in each of the plurality of event instructions.</p>
<p id="p-0011" num="0010">Executing the assignment instruction may further comprise: evaluating an expression of the assignment instruction; and assigning, as the value, a result of the evaluating to a target identified by the assignment instruction. Executing the branch instruction may further comprise evaluating a condition expression of the branch instruction, and the conditional transfer may further comprise next executing the different one of the instructions, as identified by an attribute of the branch instruction, when the evaluation returns a true result, and otherwise next executing a next sequential one of the instructions. Executing the emit instruction may further comprise emitting, to an event bus, the outbound event. Executing the emit instruction may further comprise evaluating an expression specified on the emit instruction and reflecting a result of the evaluating in the outbound event prior to the emitting. Executing the terminate instruction may further comprise terminating the current execution context object.</p>
<p id="p-0012" num="0011">The present invention is directed, in a second aspect, to a programming language for event processing. In one embodiment, this aspect comprises a computer-readable medium storing source code written in a programming language, wherein the programming language comprises an event instruction for receiving an inbound event; an assignment instruction for assigning a value; a branch instruction for conditional transfer to a different one of the instructions; an emit instruction for specifying that an outbound event is to be emitted; a terminate instruction for specifying that a current execution context object is to be terminated; and a fan-out instruction for at least one of specifying event correlation and enabling a context switch, and wherein the source code comprises a plurality of the instructions in the programming language. In another embodiment, this aspect comprises a program of instructions storable on a computer-readable medium for causing a computer to execute, wherein the instructions comprise a plurality of: an event instruction for receiving an inbound event; an assignment instruction for assigning a value; a branch instruction for conditional transfer to a different one of the instructions; an emit instruction for specifying that an outbound event is to be emitted; a terminate instruction for specifying that a current execution context object is to be terminated; and a fan-out instruction for at least one of specifying event correlation and enabling a context switch. The programming language may be used for programs generated from an event-driven model specification and/or from a message-driven model specification</p>
<p id="p-0013" num="0012">Embodiments of these and other aspects of the present invention may be provided as methods, systems, and/or computer program products. It should be noted that the foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined by the appended claims, will become apparent in the non-limiting detailed description set forth below.</p>
<p id="p-0014" num="0013">The present invention will be described with reference to the following drawings, in which like reference numbers denote the same element throughout.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> illustrates use of multiple higher-level programming models with a single virtual machine for supporting applications previously supported with custom engines, according to an aspect of the present invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> illustrates processing of an inbound event, according to an aspect of the present invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 3-6</figref> provide flowcharts depicting logic which may be used for processing of an &#x201c;Ice&#x201d; program within a virtual machine, according to an aspect of the present invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a high-level view of processing that may be carried out by aspects of the present invention and inventions disclosed in the first and second related applications;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. 8-13</figref> provide examples of a state machine model, event type specification, event, context object type specification, context object, and Ice program for the state machine execution, respectively;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. 14-17</figref> provide examples of a monitor model, compiler-generated output file, compiler-generated cross-reference file, and sample context object type specification, respectively;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 18</figref> (comprising <figref idref="DRAWINGS">FIGS. 18A and 18B</figref>) illustrates a compiler algorithm used by an aspect of the invention disclosed in the first related application;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 19</figref> provides a sample schema for the Ice language;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 20</figref> depicts a data processing system suitable for storing and/or executing program code; and</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 21</figref> depicts a representative networking environment in which one or more embodiments of the present invention may be used.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0025" num="0024">In one aspect of the present invention, a programming language is defined. This programming language may be termed a &#x201c;machine-level&#x201d; programming language. In another aspect of the present invention, a processing engine, referred to equivalently herein as a virtual machine, is disclosed.</p>
<p id="p-0026" num="0025">Two different communication styles may be used in business monitoring and business integration, namely remote method invocation (using remote procedure call, or &#x201c;RPC&#x201d;, communication) and event-based communication. Aspects of the present invention are directed to event-based communication. Event-based communication may alternatively be referred to as &#x201c;one-way&#x201d; message-based communication between event producers and event consumers. Such one-way messages may be exchanged using a direct addressing style or by using a publish-subscribe approach. Communication in a business monitoring scenario is typically event-based, while communication in a business integration scenario may use either style.</p>
<p id="p-0027" num="0026">These communication styles may alternatively be described in terms of their routing algorithms, noting that the routing algorithms used in message-based and event-based programming are different. A routing algorithm for message-based programming typically uses a directed or &#x201c;push&#x201d; model, whereas a routing algorithm for event-based programming typically uses a subscription or &#x201c;pull&#x201d; model. However, it is observed that the same set of basic steps or functions are used to process events or messages that have arrived at an endpoint. Accordingly, embodiments of the present invention are not limited to use with event-driven executables, and message-driven executables such as processes and mediations are also within the scope of executables addressed by the present invention.</p>
<p id="p-0028" num="0027">The basic steps for processing events or messages generally comprise: receiving an event/message; filtering the received event/message; correlating the event/message with one or more execution context objects (and these objects may represent, depending on the higher-level programming model, state machine execution contexts, CEP lifespans, monitoring contexts, process execution contexts, mediation contexts, etc.); updating an internal state of target execution context(s) based on the event/message content; evaluating conditions and performing conditional branching; emitting outbound event(s)/message(s) if warranted (such as state transition events in the case of a state machine model, aggregated messages in the case of CEP rules, alerts in the case of a monitoring context, start messages for the next activity in the case of a process model, and mediated messages in the case of a mediation); and creating or terminating an execution context object.</p>
<p id="p-0029" num="0028">While the higher-level programming model (i.e., the state machine, CEP, monitor, process, mediation, etc.) may be used to define such executables in a user-friendly fashion, one aspect of the present invention defines a programming language comprising a relatively simple instruction set into which these models may be compiled as an executable. This compiled executable may then be executed on a virtual machine as disclosed herein. Notably, compiled executables from different ones of the higher-level programming models may be executed on this same virtual machine (as will be described below with reference to <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0030" num="0029">By contrast, prior art business integration platforms typically use different execution environments for each higher-level programming model, providing &#x201c;custom engines&#x201d; for each kind of executable supported by the platform. If a particular platform supports state machines, rules for complex event processing and event correlation, monitoring contexts, processes, and mediations, for example, it may become unwieldy to manage and maintain the platform and its various engines or execution environments.</p>
<p id="p-0031" num="0030">The virtual machine disclosed herein enables reducing the number of supported execution environments to one. Cost savings may be realized, for example by focusing on a single virtual machine implementation's development, performance optimization, administrative and operational interfaces, documentation, and so forth.</p>
<p id="p-0032" num="0031">The programming language disclosed herein enables using this single virtual machine for supporting applications previously supported with custom engines. Different higher-level programming models are supported using different compilers. See <figref idref="DRAWINGS">FIG. 1</figref>, which illustrates this approach. As shown therein, a first compiler <b>120</b> usable with a declarative program for a monitoring model <b>110</b> provides code that is executable using a virtual machine <b>150</b>, and a second compiler <b>140</b> usable with a state machine model <b>130</b> provides code that is executable using this same virtual machine <b>150</b>. The abstraction provided by this approach may also facilitate portability of the execution environment to different hardware platforms and operating systems.</p>
<p id="p-0033" num="0032">Embodiments of the present and related inventions are preferably used in an application environment where events are distributed using publish-subscribe communication, where event subscribers receive events from one or more event sources (publishers) and process those events. However, embodiments of the present and related inventions may alternatively be used in an application environment based on a message paradigm, where message producers send messages to particular targets (i.e., message receivers), as long as those messages meet the subscription criteria of an Ice program deployed at a target; these criteria will be discussed in more detail below.</p>
<p id="p-0034" num="0033">Sending and receiving of events may follow an &#x201c;event bus&#x201d; paradigm, whereby inbound events are considered as being received from a bus (which may, for example, be implemented as a queue or other data storage and transmission technology) that connects event sources with event receivers, and whereby outbound events are considered as being delivered to this bus for transmission to interested listeners.</p>
<p id="p-0035" num="0034">The programming language defined herein uses a relatively small number of instructions, which are designed to support the above-described basic steps or functions. Borrowing terminology from the domain of processor architecture, this may be referred to as a &#x201c;reduced instruction set&#x201d; or &#x201c;RISC&#x201d; approach for event-processing applications (or message-processing applications, alternatively). Note that this programming language may be generated by a compiler, and is not generally intended for use by human programmers. (One such compiler is disclosed in the first related application, and pertains to a monitoring context model.)</p>
<p id="p-0036" num="0035">The instruction set used in this programming language comprises, in one approach, six instructions. Each of those instructions will now be described.</p>
<p id="p-0037" num="0036">An &#x201c;onevent&#x201d; instruction or statement corresponds generally to receiving a single inbound event, and specifies an inbound event &#x201c;subscription&#x201d; (i.e., information specified for subscribing to an inbound event). The Extensible Markup Language, or &#x201c;XML&#x201d;, notation is preferably used to specify inbound events and outbound events, including the content or &#x201c;payload&#x201d; of such events. Accordingly, the onevent instruction may refer to elements and attributes from an XML document (or document fragment) in the inbound event. In a preferred embodiment, the onevent instruction comprises a &#x201c;filter&#x201d; attribute whose Boolean condition represents the subscription criterion: any event whose content satisfies the filter condition is considered as satisfying the subscription of this onevent statement. When such an event arrives at the virtual machine, it is processed by the statement(s) subordinate to the onevent, where those subordinate statements are also taken from the instruction set disclosed herein. Those subordinate statements will now be described.</p>
<p id="p-0038" num="0037">A &#x201c;fanOut&#x201d; instruction or statement is provided, and enables event correlation and context switching. The first fanOut instruction following an onevent statement executes in the context of the incoming event, and correlates the event with zero or more context objects which become the initial execution context for processing the event. Subsequent fanOut statements execute in the context of the current context object, and correlate the event with zero or more new context objects, thereby enabling a context switch from the current context object to the new context object(s); these new context objects will become the execution context for the subsequent instructions within the scope of the fanOut statement.</p>
<p id="p-0039" num="0038">An &#x201c;assign&#x201d; instruction or statement corresponds generally to assigning a value to a slot of the current context object (which may represent a state machine context, monitoring context, process execution context, etc.) or to a slot of an outbound event. In preferred embodiments, the right-hand side of an assignment statement is an expression that depends on 1-values or slots in the current context object (if there has been a fanOut establishing such a context object) and in the incoming event (which is considered part of the execution context).</p>
<p id="p-0040" num="0039">A &#x201c;branch&#x201d; instruction or statement corresponds generally to a conditional transfer of control to a prior or succeeding step in the program, and may specify a &#x201c;distance&#x201d; attribute to indicate a relative offset of the instruction to which control will transfer when the branch is executed. A positive value for the distance attribute indicates jumping forward in the execution sequence, and a negative value indicates that control is to transfer to a prior instruction. In preferred embodiments, the branch condition is a Boolean expression for whose 1-values the same rules apply as discussed above for the right-hand side of an assign statement. If the branch condition evaluates to true, the branch is taken; otherwise, execution continues with the statement following the branch instruction.</p>
<p id="p-0041" num="0040">An &#x201c;emit&#x201d; instruction or statement corresponds generally to specifying that an outbound event is to be emitted. This instruction is typically used after one or more slots of the outbound event have been populated (e.g., by executing assign instructions).</p>
<p id="p-0042" num="0041">A &#x201c;terminate&#x201d; instruction or statement corresponds generally to specifying that the current context object (which may represent a state machine context, monitoring context, process execution context, etc.) should be terminated.</p>
<p id="p-0043" num="0042">Optionally, a &#x201c;macro&#x201d; instruction or statement may also be supported. This instruction may be used to encapsulate reusable blocks of instructions.</p>
<p id="p-0044" num="0043">The term &#x201c;Ice&#x201d; is used herein to refer to this programming language. &#x201c;Ice&#x201d; is derived from the term &#x201c;intermediate code&#x201d;, and indicates that a program written in this language is preferably an intermediate step in execution, representing compiled output which is derived from source code written in another notation and which is then executed in a virtual machine environment as described herein. One possible algorithm to derive an Ice program from a monitor model is disclosed in the first related application. (Notably, the programming language disclosed herein is preferably generated by a compiler, and is not generally intended for writing by a user.)</p>
<p id="p-0045" num="0044">By reducing the instructions in the programming language to those described herein, portability may be facilitated, and economies may be realized in implementation and optimization of the single runtime environment. Showing the execution steps of the intermediate code in conjunction with the original source, as described in the first and second related applications, can provide a user with a &#x201c;useful&#x201d; granularity of information for viewing during debugging. For example, it is not deemed useful to allow the user to step through each operation involved in evaluating an arithmetic expression or each operation involved in persisting a value in a database while debugging an event-driven program. Instead, it is assumed that basic operations of this type can be carried out without error. Accordingly, preferred embodiments of the compiler disclosed in the first related application (which generates code in the programming language defined herein) do not generate code for such primitive operations (and the debugger disclosed in the second related application does not provide for stepping through them), but instead such operations are encapsulated in lower-level routines which the compiled code invokes as needed, thus providing an appearance of &#x201c;atomic&#x201d; operations to a user attempting to debug a higher-level program. This is expected to not only make debugging less confusing for the user, but is expected to also reduce the complexity of the compiled code (which in turn is expected to generally improve the compilation process and the run-time efficiency of the generated code).</p>
<p id="p-0046" num="0045">This approach is in contrast to known code generators for higher-level programming models used in business monitoring and business integration, which may produce code in the Java&#xae; programming language. (&#x201c;Java&#x201d; is a registered trademark of Oracle America, Inc. in the United States, other countries, or both.) Such code generators typically generate code containing many steps, such as method invocations, initialization and management of internal variables, exception handling, and so forth that may complicate the logic of the code generator. Furthermore, the code generated by these known code generators may add too much &#x201c;uninteresting detail&#x201d; for a user trying to debug the original source program.</p>
<p id="p-0047" num="0046">Analyzing a desired runtime environment for the aforementioned higher-level programming models, it may be seen that three aspects should be addressed: a type system, an expression language, and execution logic (i.e., instruction sequencing). For event processing, a preferred embodiment of the present invention uses XML schema for the type system, the well-known XPath notation for the expression language, and the Ice language disclosed herein to specify the execution sequence for processing events in the realm of a receiving context object. The type system and expression language are pluggable, however, and thus the same Ice-language programming model can be used with different type systems and different expression languages. (The virtual machine disclosed herein may delegate expression evaluation to a plugged-in component, for example, and a different expression language may then be substituted by reconfiguring the virtual machine to use a different expression evaluation component.)</p>
<p id="p-0048" num="0047">The run-time behavior provided by a preferred embodiment of an implementation of the present invention will now be described.</p>
<p id="p-0049" num="0048">An execution context approach used in preferred embodiments will now be described. An incoming event may be processed in a particular context which may be modeled using a type definition language such as XML Schema. Accordingly, the incoming event may be processed in the context of zero or more context objects, which may be persistent (that is, reusable across several incoming events) or temporary (that is, terminated after an event has been processed).</p>
<p id="p-0050" num="0049">Context objects have a type associated therewith, and in one approach, are managed in a virtual container (referred to equivalently herein simply as a container). If the context object's type declares a &#x201c;key&#x201d; attribute, then the context object may be instantiated multiple times in a container, where each instance has a different (i.e., unique) key value. If the context object's type does not declare a key attribute, then the context object may be instantiated only once, providing a single &#x201c;static&#x201d; instance in the container.</p>
<p id="p-0051" num="0050">Preferably, the container manages the life cycle and persistence of the context objects it contains, and processes incoming events on these objects based on the set of event-processing programs it has loaded. Semantics descriptions for such programs will now be discussed with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0052" num="0051">Event subscriptions are managed by directing events to a subscriber. In preferred embodiments of the present invention, the container assumes the role of the event subscriber. When an event arrives at a container, it is tested against the filter of any onevent instructions in programs that may have been loaded by this container. Each onevent statement whose filter evaluates to true is executed in the context of the incoming event, including processing all nested instructions (e.g., fanOut, assign, branch, emit, and/or terminate instructions) of that onEvent statement.</p>
<p id="p-0053" num="0052">A fanOut instruction is provided as one nested instruction of an onevent statement. According to preferred embodiments, the fanOut statement specifies a target object type and a correlation predicate that is used to identify the target object instance(s) in whose context the instructions following the fanOut are executed.</p>
<p id="p-0054" num="0053">The semantics of onevent and fanOut are illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. Events <b>201</b> are directed to a virtual container <b>202</b> which has loaded one or more Ice programs <b>203</b> and associated type definitions <b>204</b>. At the point in time illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, two instances of &#x201c;context<b>1</b>&#x201d; <b>205</b><i>a </i>and four instances of &#x201c;context<b>2</b>&#x201d; <b>205</b><i>b </i>have been instantiated in the container. The onevent statements in all loaded Ice programs <b>203</b> represent the container's event subscriptions. Any event <b>201</b> directed to the container <b>202</b> is tested against each subscription, and the event is said to &#x201c;pass the filter&#x201d; <b>206</b> if the event satisfies the filter condition. An event that has passed the filter of an onevent statement is processed by the subordinate statements of that onevent statement. A fanOut statement correlates the event with zero or more instances of a certain context object type in the container. See <b>207</b>. Statements subordinate to the fanOut statement are then processed in the context of that object.</p>
<p id="p-0055" num="0054">Semantics of other instructions, including assign, branch, emit, and terminate, correspond to well-known usage of such instructions from other programming languages.</p>
<p id="p-0056" num="0055">Referring now to <figref idref="DRAWINGS">FIGS. 3-6</figref>, processing of an Ice program within a virtual machine according to a preferred embodiment of the present invention will now be described.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 3</figref> provides a flowchart depicting logic which may be used for processing of an incoming event that arrives at a virtual container. In preferred embodiments, a container has an address, such as a Uniform Resource Locator (&#x201c;URL&#x201d;), to which an event may be directed. A unit of work, or transaction, is started (Block <b>300</b>) for this incoming event. Block <b>320</b> tests whether any onevent statements remain to be processed against this incoming event. Preferred embodiments evaluate each onevent statement of an Ice program deployed at this container in document order. If the test in Block <b>320</b> has a negative result, then at Block <b>310</b>, the unit of work is committed (which may include emitting outbound events, as discussed below with reference to <figref idref="DRAWINGS">FIG. 6B</figref>). The processing of this event then ends. When at least one unprocessed onevent statement remains, however, the test at Block <b>320</b> has a positive result and processing therefore continues at Block <b>330</b>.</p>
<p id="p-0058" num="0057">Block <b>330</b> gets the next onevent statement. Block <b>340</b> tests whether a rootElement attribute of this onevent statement (if present therein) matches the fully-qualified name of the inbound event's document root. If not, then processing returns to Block <b>320</b> to check for additional onevent statements in this Ice program or in other Ice programs loaded in this container. Otherwise, when there is a match in the root element, processing continues at Block <b>350</b>.</p>
<p id="p-0059" num="0058">Block <b>350</b> evaluates a filter attribute of this onevent statement, if present, based on the inbound event. If the filter evaluates to true (or if no filter attribute is present), processing continues at Block <b>360</b>; otherwise, control returns to Block <b>320</b>.</p>
<p id="p-0060" num="0059">At Block <b>360</b>, nested statements of this onevent statement are obtained, and those statements are processed at Block <b>370</b>, which is illustrated in more detail in <figref idref="DRAWINGS">FIG. 4</figref>. Control then returns to Block <b>320</b>.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 4</figref> provides a flowchart depicting logic which may be used for processing nested statements of an onevent statement. Block <b>400</b> of <figref idref="DRAWINGS">FIG. 4</figref> tests whether a next nested statement exists. If not, then processing exits from <figref idref="DRAWINGS">FIG. 4</figref>. Otherwise, processing continues at Block <b>410</b>, which fetches that next statement.</p>
<p id="p-0062" num="0061">Block <b>420</b> then tests whether the fetched statement is a fanOut statement. If so, the fanOut statement is processed at Block <b>425</b>, after which control returns to Block <b>400</b> to check for yet another next statement. Block <b>425</b> is described in more detail in <figref idref="DRAWINGS">FIG. 5</figref>. When the test at Block <b>420</b> has a negative result, processing continues at Block <b>430</b>.</p>
<p id="p-0063" num="0062">Block <b>430</b> tests whether the fetched statement is an assign statement. If so, the assign statement is processed at Block <b>435</b>, after which control returns to Block <b>400</b>. Block <b>435</b> is described in more detail in <figref idref="DRAWINGS">FIG. 6A</figref>. When the test at Block <b>430</b> has a negative result, processing continues at Block <b>440</b>.</p>
<p id="p-0064" num="0063">Block <b>440</b> tests whether the fetched statement is an emit statement. If so, the emit statement is processed at Block <b>445</b>, after which control returns to Block <b>400</b> to check for yet another next statement. Block <b>445</b> is described in more detail in <figref idref="DRAWINGS">FIG. 6B</figref>. When the test at Block <b>440</b> has a negative result, processing continues at Block <b>450</b>.</p>
<p id="p-0065" num="0064">Block <b>450</b> tests whether the fetched statement is a branch statement. If so, the branch statement is processed at Block <b>455</b>, after which control returns to Block <b>400</b>. Block <b>455</b> is described in more detail in <figref idref="DRAWINGS">FIG. 6C</figref>. When the test at Block <b>450</b> has a negative result, processing continues at Block <b>460</b>.</p>
<p id="p-0066" num="0065">Block <b>460</b> tests whether the fetched statement is a terminate statement. If so, the terminate statement is processed at Block <b>465</b>, after which control returns to Block <b>400</b>. Block <b>465</b> is described in more detail in <figref idref="DRAWINGS">FIG. 6D</figref>. When the test at Block <b>460</b> has a negative result, then processing preferably returns to Block <b>400</b>. In addition or instead, an error condition may be generated to indicate that an unknown statement has been encountered.</p>
<p id="p-0067" num="0066">Referring now to <figref idref="DRAWINGS">FIG. 5</figref>, a flowchart is provided depicting logic which may be used for processing of a fanOut statement, as will now be described. At Block <b>500</b>, the correlation predicate of this fanOut statement is evaluated for all context objects in this container whose root element name matches the value of the &#x201c;targetRootElement&#x201d; attribute of the fanOut statement. (See <b>1323</b> of <figref idref="DRAWINGS">FIG. 13</figref> for a sample targetRootElement attribute.) If this attribute is not present on the currently-evaluated fanOut statement, then according to preferred embodiments the correlation predicate is evaluated for all loaded context objects.</p>
<p id="p-0068" num="0067">Block <b>510</b> determines the processing option to be used, in view of how many matches were found at Block <b>500</b>. Preferred embodiments provide handling for no matches, for one match, and for more than one match. A fanOut statement may therefore specify attributes for each of these cases, and the value of the applicable one of these attributes determines how the currently-processed event will be processed by this fanOut statement. With reference to the sample compiler-generated executable <b>1300</b> of <figref idref="DRAWINGS">FIG. 13</figref>, for example, the fanOut element at <b>1320</b> specifies that a new context object is to be created if there are no matches to the correlation predicate amongst the context objects whose root element name matches the targetRootElement value (see <b>1325</b>, where the attribute value &#x201c;createNewTarget&#x201d; is specified as the value of the &#x201c;noMatches&#x201d; attribute in this example), and that the event is to be delivered to the single matching context object if there is only one match (see <b>1326</b>, specifying &#x201c;deliverToTarget&#x201d; as the attribute value for the value of the &#x201c;oneMatch&#x201d; attribute in this example), and that an error condition exists if there is more than one match (see <b>1327</b>, specifying &#x201c;signalerror&#x201d; as the value of the &#x201c;multipleMatches&#x201d; attribute in this example).</p>
<p id="p-0069" num="0068">The logic of Blocks <b>520</b>-<b>595</b> specifies options implemented by preferred embodiments for processing the fanOut statement, according to the attribute value specified in the appropriate one of these &#x201c;match&#x201d;-related attributes. According to preferred embodiments, the first four of these processing options (i.e., as represented by Blocks <b>520</b>-<b>555</b>) may be used as the attribute value for any of the three match-related attributes of a correlation predicate; the &#x201c;createNewTarget&#x201d; option can only be used as the attribute value for the &#x201c;noMatches&#x201d; attribute; the &#x201c;deliverToTarget&#x201d; option can only be used as the attribute value for the &#x201c;oneMatch&#x201d; attribute; and the final two of these processing options (i.e., as represented by Blocks <b>580</b>-<b>595</b>) can only be used as the attribute value for the &#x201c;multipleMatches&#x201d; attribute. The processing that corresponds to each attribute value, according to preferred embodiments, will now be described.</p>
<p id="p-0070" num="0069">Block <b>520</b> tests whether the currently-processed event should be ignored by this fanOut statement (i.e., whether the applicable attribute value determined at Block <b>510</b> is &#x201c;ignore&#x201d;). If so, then the statements nested by this fanOut statement are skipped and processing continues with the next statement following this fanOut statement, as stated at Block <b>525</b>, and the processing in <figref idref="DRAWINGS">FIG. 5</figref> therefore exits.</p>
<p id="p-0071" num="0070">Otherwise, processing continues at Block <b>530</b>, which tests whether an error should be signalled (i.e., whether the applicable attribute value determined at Block <b>510</b> is &#x201c;signalError&#x201d;). If so, then Block <b>535</b> comprises emitting an error-reporting event. This error-reporting event preferably wraps the currently-processed inbound event and is staged for emission when the current transaction commits. The statements nested by this fanOut statement are skipped. Processing then continues with the next statement following this fanOut statement, and the processing in <figref idref="DRAWINGS">FIG. 5</figref> therefore exits.</p>
<p id="p-0072" num="0071">Processing reaches Block <b>540</b> when the applicable attribute value was not &#x201c;ignore&#x201d; or signalError&#x201d;. Block <b>540</b> then tests whether the applicable attribute value is &#x201c;rollBack&#x201d;. If so, then Block <b>545</b> comprises rolling back the transaction started for the currently-processed event, such that any effects of that event on execution contexts are undone and any outbound events pending for emission will not be sent. An error may be logged, if desired by an implementation of the present invention. Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits, branching to <figref idref="DRAWINGS">FIG. 3</figref> to fetch the next event (if any) from the queue.</p>
<p id="p-0073" num="0072">Block <b>550</b> tests whether the applicable attribute value is &#x201c;rollBackAndRetry&#x201d;. If so, then Block <b>555</b> comprises rolling back the transaction started for the currently-processed event, as described above with reference to Block <b>545</b>. However, rather than logging an error, the currently-processed event is placed on a retry queue, from which it will be dequeued and evaluated again. (The timing of this retry, as well as the number of times a retry may be attempted, is implementation dependent.) Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits, branching to <figref idref="DRAWINGS">FIG. 3</figref> to fetch the next event (if any) from the queue.</p>
<p id="p-0074" num="0073">Block <b>560</b> tests whether the applicable attribute value, as determined by Block <b>510</b>, is &#x201c;createNewTarget&#x201d;. If so, then Block <b>565</b> comprises instantiating a new context object (and preferably, assigning default values thereto) and making this the current execution context; the statements nested within this fanOut are then executed in the context of this new target context object. Note that if any of the statements nested within this fanOut statement specify a &#x201c;currentKey( )&#x201d; function, preferred embodiments invoke this function to return a new, unique key and assign that key value to a key slot of the new context object. Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits.</p>
<p id="p-0075" num="0074">Block <b>570</b> tests whether the applicable attribute value is &#x201c;deliverToTarget&#x201d;. If so, then Block <b>575</b> comprises delivering the currently-processed event to the (single) matching execution context for processing it therein by executing the statements nested by this fanOut. Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits.</p>
<p id="p-0076" num="0075">Block <b>580</b> tests whether the applicable attribute value is &#x201c;deliverToAny&#x201d;. If so, then Block <b>585</b> comprises delivering the currently-processed event to any (single one) of the matching execution contexts for processing it therein by executing the statements nested by this fanOut. The manner in which that execution context is selected from the set of matching execution contexts is implementation dependent. Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits.</p>
<p id="p-0077" num="0076">Finally, Block <b>590</b> tests whether the applicable attribute value is &#x201c;deliverToAll&#x201d;. If so, then Block <b>595</b> comprises delivering the currently-processed event to all of the matching execution contexts for processing it therein by executing the statements nested by this fanOut. Processing in <figref idref="DRAWINGS">FIG. 5</figref> then exits.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIGS. 6A-6D</figref> provide flowcharts illustrating logic which may be used when implementing the assign, emit, branch, and terminate statements, respectively, as will now be described.</p>
<p id="p-0079" num="0078">Referring next to <figref idref="DRAWINGS">FIG. 6A</figref>, processing of an assign statement will now be described in more detail. At Block <b>600</b>, the assign statement is processed by evaluating its &#x201c;value&#x201d; expression and assigning the result of that evaluation to the slot referenced by the &#x201c;target&#x201d; expression. See, for example, the value expression <b>1396</b> and target expression <b>1395</b> of the assign statement at <b>1394</b> in <figref idref="DRAWINGS">FIG. 13</figref>. According to preferred embodiments, the target expression is evaluated to identify a well-defined slot of the current context object or of the payload of a to-be-emitted outbound event, and the assignment overwrites any previously-existing value of that slot with the expression specified in the value attribute of the assign statement. (To add items to a sequence, the value expression may be specified as the union of the existing slot value and the to-be-added value.) Processing in <figref idref="DRAWINGS">FIG. 6A</figref> then exits.</p>
<p id="p-0080" num="0079">Processing of an emit statement will now be described in more detail with reference to <figref idref="DRAWINGS">FIG. 6B</figref>. At Block <b>610</b>, the emit statement is processed by evaluating its &#x201c;event&#x201d; expression, which typically results in creating a document fragment (which is an XML document fragment, according to preferred embodiments) and sending this document fragment to the event bus (from which it will subsequently be sent when the current unit of work commits). An emit statement has not been illustrated in <figref idref="DRAWINGS">FIG. 13</figref>. Processing in <figref idref="DRAWINGS">FIG. 6B</figref> exits after sending the document fragment to the event bus.</p>
<p id="p-0081" num="0080">Processing of a branch statement will now be described in more detail with reference to <figref idref="DRAWINGS">FIG. 6C</figref>. At Block <b>620</b>, the branch statement is processed by evaluating its &#x201c;condition&#x201d; expression. Preferably, this condition expression is specified using XPath notation. See, for example, the condition attribute at <b>1331</b> of <figref idref="DRAWINGS">FIG. 13</figref>. If the condition evaluates to false, then execution continues with the next statement following the branch statement; otherwise (including the case where the condition is absent, which preferred embodiments treat as an unconditional branch), execution continues at a statement identified by the branch. In one approach, this statement is identified using a &#x201c;distance&#x201d; attribute. In another approach, this statement is identified using a &#x201c;macro&#x201d; attribute. In a third approach, neither a &#x201c;distance&#x201d; or a &#x201c;macro&#x201d; attribute is specified. Each of these approaches will now be described in more detail.</p>
<p id="p-0082" num="0081">When a distance attribute is present, as illustrated at <b>1332</b> in <figref idref="DRAWINGS">FIG. 13</figref>, execution branches by the indicated number of statements. The value of the distance attribute may be positive or negative. A distance value of 1 simply continues execution at the next-sequential statement. In preferred embodiments, if the value of the distance attribute indicates a statement outside the nearest enclosing onevent or fanOut block, then the branch is executed as if neither a distance or macro attribute is specified (as discussed below).</p>
<p id="p-0083" num="0082">When a macro attribute is present, execution continues as if the statements identified by the value of the macro attribute (which preferably references a &#x3c;macro&#x3e; element identifier) were inserted inline, in place of the branch statement.</p>
<p id="p-0084" num="0083">When neither a distance or a macro attribute is specified, the branch statement leaves the current onevent or fanOut block if the branch is taken. If the current block is an onevent statement, then execution continues by processing the next onevent block in this Ice program. If the current block is a fanOut statement, then execution continues by either re-executing the statements within the fanOut block in the context of the next target context object, or by processing the next statement in the Ice program when there are no further matching target context objects.</p>
<p id="p-0085" num="0084">Specifying both a distance attribute and a macro attribute is an error condition, according to preferred embodiments.</p>
<p id="p-0086" num="0085">After processing the branch statement as described above, processing in <figref idref="DRAWINGS">FIG. 6C</figref> then exits.</p>
<p id="p-0087" num="0086">Processing of a terminate statement will now be described in more detail with reference to <figref idref="DRAWINGS">FIG. 6D</figref>. At Block <b>630</b>, the processing of the terminate statement comprises terminating the current context object, which is thereby removed from this container. Processing then exits from <figref idref="DRAWINGS">FIG. 6D</figref>.</p>
<p id="p-0088" num="0087">Embodiments of the present invention may be used in combination with embodiments of the inventions disclosed in the first related application and the second related application (hereinafter, &#x201c;the related inventions&#x201d;). Accordingly, the related inventions will now be discussed for providing information about this combined use.</p>
<p id="p-0089" num="0088">Referring now to <figref idref="DRAWINGS">FIG. 7</figref>, a high-level view of processing that may be carried out by aspects of the present and related inventions is illustrated. As shown therein, a monitor model <b>700</b> (as an example of a higher-level programming model as described herein) is provided as input to a compiler <b>720</b>. Preferably, this compiler <b>720</b> generates code according to one aspect of the related inventions, where that generated code comprises instructions in the programming language disclosed herein according to an aspect of the present invention. This generated code is illustrated in <figref idref="DRAWINGS">FIG. 7</figref> as an &#x201c;Ice&#x201d; file <b>740</b>. For debugging purposes, compiler <b>720</b> also preferably generates a cross-reference file <b>760</b> that associates statements in Ice file <b>740</b> with source statements in the monitor model <b>700</b>. Besides the monitor model <b>700</b>, the Ice file <b>740</b> and cross-reference file <b>760</b> are used as input to a debugger <b>780</b> according to one aspect of the related inventions. (The terms &#x201c;compiled output&#x201d; and &#x201c;generated output&#x201d; are used interchangeably herein when referring to the executable file <b>740</b> created by the compiler <b>720</b>.) As one alternative, Ice file <b>740</b> may be executed on a virtual machine as disclosed herein, without providing debugging thereof; cross-reference file <b>760</b> is not strictly needed in this alternative execution scenario.</p>
<p id="p-0090" num="0089">XML notation is preferably used to specify the monitor model <b>700</b>, the Ice file <b>740</b>, and the cross-reference file <b>760</b>. Although not shown in <figref idref="DRAWINGS">FIG. 7</figref>, an XML Schema for the monitor model <b>700</b> may be provided as an additional input to compiler <b>720</b>, thereby enabling the compiler <b>720</b> of one aspect of the related inventions to validate the syntactic structure of the monitor model <b>700</b> (i.e., the input) during the compilation process. Furthermore, the compiler <b>720</b> may also use an XML Schema for the Ice file <b>740</b> and another schema for cross-reference file <b>760</b>, where these schemas (also not shown in <figref idref="DRAWINGS">FIG. 7</figref>) specify allowable syntax and structure for the Ice document <b>740</b> and cross-reference file <b>760</b> and thus can be used to provide a certain level of structural validation of the compiler output.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIGS. 3-5</figref> of the first related application provide examples of a monitor model, compiler output file, and cross-reference file, respectively, to describe how Ice programs may be used in a monitor model programming environment (and in these examples, the monitor model corresponds to a simple cost aggregator scenario). The compiler output file shown in <figref idref="DRAWINGS">FIG. 4</figref> of the first related application, which results from compiling the monitor model shown in <figref idref="DRAWINGS">FIG. 3</figref> of the first related application, uses the programming language defined herein and may be executed on a virtual machine as disclosed herein. The discussion of these figures from the first related application is repeated herein, where the figures are presented as <figref idref="DRAWINGS">FIGS. 14-16</figref>. As stated earlier, however, the virtual machine disclosed herein is usable for executables compiled from more than one type of higher-level language programming model. Accordingly, in addition to supporting the executable shown in <figref idref="DRAWINGS">FIG. 4</figref> of the first related application (repeated herein as <figref idref="DRAWINGS">FIG. 15</figref>), this virtual machine may support executables compiled from additional or different programming models. A sample executable for one such alternative programming model will now be described with reference to <figref idref="DRAWINGS">FIGS. 8-13</figref> of the present application. <figref idref="DRAWINGS">FIGS. 8-13</figref> provide examples of a state machine model, event type specification, event, context object type specification, context object, and Ice program for the state machine execution, respectively. The Ice program <b>1300</b> in <figref idref="DRAWINGS">FIG. 13</figref> may be produced by a compiler from the model in <figref idref="DRAWINGS">FIG. 8</figref>. More specifically, the state machine model and event type specification comprise compiler input, and the context object specification and Ice program comprise compiler output. (Alternatively, the Ice implementation of the state machine could be defined manually, although using compilers to produce Ice executables is expected to be a more typical scenario.)</p>
<p id="p-0092" num="0091">Referring first to <figref idref="DRAWINGS">FIG. 8</figref>, a finite state machine for a door is defined by the sample model <b>800</b>. This door has two states, Opened (see <b>810</b>) and Closed (see <b>830</b>). An open_door event (see <b>820</b>) causes a transition from the Closed state to the Opened state. A close_door event (see <b>821</b>) causes a transition from the Opened state to the Closed state.</p>
<p id="p-0093" num="0092">The event type specifications shown in schema <b>900</b> of <figref idref="DRAWINGS">FIG. 9</figref> describe the type (i.e., structure) of open<sub>13 </sub>door and close <sub>13 </sub>door events. Both events have the same type, in this example, namely &#x201c;tns:DoorEvent&#x201d;; see <b>920</b>. (Upon expanding the namespace definition for &#x201c;tns&#x201d;, the type is {http://www.example.org/surveillance}DoorEvent; see <b>910</b>, where the &#x201c;tns&#x201d; namespace is defined.) The DoorEvent type definition (see <b>930</b>) defines two attributes for the payload of events adhering to this type, namely an &#x201c;id&#x201d; attribute <b>931</b> and a &#x201c;time&#x201d; (i.e., timestamp) attribute <b>932</b>. The value of the id attribute identifies the door that is being opened or closed, and the value of the timestamp attribute indicates when this event happened.</p>
<p id="p-0094" num="0093">The sample open_door event <b>1000</b> illustrated in <figref idref="DRAWINGS">FIG. 10</figref> indicates that a door with identifier &#x201c;Door<b>001</b>&#x201d; (see <b>1010</b>) was opened at 2008-01-01T09:33:41+05:00 (see <b>1020</b>).</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 11</figref> shows a sample type definition <b>1100</b> for a context object representing the state machine <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref> in an Ice execution environment. While this particular example has been manually created, it might alternatively be generated by a compiler from the state machine definition <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref> and the event type definition illustrated at <b>900</b> of <figref idref="DRAWINGS">FIG. 9</figref>. The sample schema <b>1100</b> for the context object type includes, in this example, the schema <b>5900</b> for the door event types using an &#x3c;xs:include&#x3e;statement <b>1110</b>. See the &#x201c;schemaLocation&#x201d; attribute <b>1111</b>, which specifies as its value the doorEvent schema definition at location &#x201c;doorEvent.xsd&#x201d;. The schema <b>1100</b> then defines the root element of the context object (see <b>1120</b>, where the root element is specified as having the name &#x201c;stateMachine&#x201d;), whose type is given as a complex type definition. See <b>1122</b>, where this complex type definition is referenced, and <b>1130</b>, where it is defined. In this example, the type definition <b>1130</b> specifies that each context object of this type has the following structure:</p>
<p id="p-0096" num="0095">an &#x201c;_ice_key&#x201d; element <b>1131</b>, which will hold a generated, unique identifier for the object;</p>
<p id="p-0097" num="0096">an &#x201c;id&#x201d; element <b>1132</b>, which will hold the identifier of the door whose state is being mirrored by this context object;</p>
<p id="p-0098" num="0097">a &#x201c;state&#x201d; element <b>1133</b>, which holds the state machine's current state;</p>
<p id="p-0099" num="0098">a &#x201c;lastEvent&#x201d; element <b>1134</b>, which holds the timestamp of the last event processed by this context object; and</p>
<p id="p-0100" num="0099">a &#x201c;tns:open<sub>13 </sub>door&#x201d; slot <b>1135</b> and &#x201c;tns:close<sub>13 </sub>door&#x201d; slot <b>1136</b>, which will hold copies of the last event of the corresponding type that the state machine has processed.</p>
<p id="p-0101" num="0100">An enumeration type <b>1140</b> for the possible states of the state machine model (namely states &#x201c;Opened&#x201d; <b>1141</b> and &#x201c;Closed&#x201d; <b>1142</b>, in this example) is also specified.</p>
<p id="p-0102" num="0101">Referring now to <figref idref="DRAWINGS">FIG. 12</figref>, the sample context object <b>1200</b> illustrated therein is an instance of the stateMachine element defined in <figref idref="DRAWINGS">FIG. 11</figref>. In this example, the generated key (used as a unique identifier) of this object is shown at <b>1210</b>. This sample context object <b>1200</b> processes events from a door with identifier &#x201c;Door<b>001</b>&#x201d; (see <b>1220</b>), which has a current state of Opened (see <b>1230</b>), and the last event for this context object was processed at the timestamp shown at <b>1240</b>. Copies of the last open_door and close_door events that were processed are shown in the slots <b>1250</b> and <b>1260</b>, respectively.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 13</figref> shows an Ice program <b>1300</b> implementing the state machine <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref>, which processes events of the type defined at <b>900</b> of <figref idref="DRAWINGS">FIG. 9</figref> and which operates upon context objects of the type defined in <figref idref="DRAWINGS">FIG. 11</figref>. Processing according to this sample Ice program <b>1300</b> will now be described.</p>
<p id="p-0104" num="0103">When an event with root element &#x201c;{http://www.example.org/surveillance}open_door&#x201d; (or equivalently, &#x201c;tns:open_door&#x201d;) arrives, and has a non-empty &#x201c;id&#x201d; attribute (i.e., the value &#x201c;fn:exists(./@id)&#x201d; of the filter attribute <b>1314</b> is true), the filter criteria of the &#x3c;ice:on Event&#x3e; statement <b>1310</b> are fulfilled. See <b>1312</b> of <figref idref="DRAWINGS">FIG. 13</figref>, where the required rootElement value <b>1313</b> and the filter <b>1314</b> are specified. Hence, all subordinate statements in the onevent element <b>1310</b> will be executed. (Note that the context item expression &#x2018;.&#x2019; is used to refer to the root of the current event. Accordingly, the syntax &#x201c;fn:exists(./@id)&#x201d; tests whether the &#x201c;id&#x201d; attribute is present at the root level of the current event. By contrast, relative path expressions that do not start with &#x2018;.&#x2019; navigate from the context object root, according to preferred embodiments.)</p>
<p id="p-0105" num="0104">The first nested statement is &#x3c;ice:fanOut&#x3e; <b>1320</b>. This fanOut statement <b>1320</b> identifies the root element of the target context object in the virtual machine's container (i.e., {http://www.example.org/surveillance}stateMachine; see <b>1323</b>) and specifies a correlation predicate <b>1324</b>. The correlation predicate <b>1324</b> compares the door identifier of the inbound event (as indicated by the syntax &#x201c;./@id&#x201d; at the left-hand side of the correlationPredicate attribute) with the id of a context object (i.e., &#x201c;{http://www.example.org/surveillance}id&#x201d; or equivalently, &#x201c;tns:id&#x201d;, as specified on the right-hand side of the correlationPredicate attribute). The no/one/multiple matches attributes <b>1325</b>-<b>1327</b> indicate the action to be taken when zero/one/many context objects matching the correlation predicate are found, as discussed above with reference to <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0106" num="0105">When no existing context object matched the correlation predicate, a new context object is created and becomes the execution context for the subsequent steps, according to the &#x201c;createNewTarget&#x201d; value of the &#x201c;noMatches&#x201d; attribute at <b>1325</b>. Since the newly created context object has not been initialized (and thus does not have a key), the branch specified at <b>1330</b> is not taken. Instead, the following statement <b>1340</b> is executed, which assigns a key to the new context object. Assignment <b>1350</b> then executes and sets the context object's &#x201c;tns:id&#x201d; or &#x201c;{http://www.example.org/surveillance}id&#x201d; value. In this example, the id value is set to the id attribute value from the incoming event (as indicated by the expression &#x201c;./@id&#x201d; on the value attribute of the assign statement <b>1350</b>). Assignment <b>1360</b> executes next and copies the incoming open<sub>13 </sub>door event to the {http://www.example.org/surveillance}open_door slot in the context object. Assignment <b>1370</b> then sets the {http://www.example.org/surveillance}lastEvent value in the context object, which holds a timestamp (see <b>1240</b> of <figref idref="DRAWINGS">FIGS. 12</figref>), to the value of the event timestamp on this currently-processed open<sub>13 </sub>door event. Finally, assignment <b>1380</b> sets the context object's current state to Opened.</p>
<p id="p-0107" num="0106">If a context object for the door in question did exist, the correlation predicate at <b>1324</b> evaluates to true for this object, which will become the execution context for all subsequent statements in the onevent specification <b>1310</b> for processing this open_door event, according to the &#x201c;deliverToTarget&#x201d; value of the &#x201c;oneMatch&#x201d; attribute at <b>1326</b>. The branch condition at <b>1330</b> evaluates to true in this scenario, and the branch is therefore taken, causing the assignments <b>1340</b> and <b>1350</b> to be skipped. Statements <b>1360</b>-<b>1380</b> are executed as just described.</p>
<p id="p-0108" num="0107">When an event with root element {http://www.example.org/surveillance}close_door (or equivalently, &#x201c;tns:close_door&#x201d;) arrives, and has a non-empty &#x201c;id&#x201d; attribute (i.e., the value &#x201c;fn:exists(./@id)&#x201d; of the filter attribute <b>1393</b> is true), the filter criteria of the (second) &#x3c;ice:on Event&#x3e; statement <b>1390</b> are fulfilled. See <b>1391</b> of <figref idref="DRAWINGS">FIG. 13</figref>, where the required rootElement value <b>1392</b> and the filter <b>1393</b> are specified. The nested statements of that &#x3c;ice:on Event&#x3e; block are analogous to those just described for block <b>1310</b>. The last assignment <b>1394</b> sets the state machine's state to Closed.</p>
<p id="p-0109" num="0108">Note that a more sophisticated implementation of the state machine <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref> would test the initial state before making a transition (that is, only process open_door events when the current state is Closed, for example). These tests have been omitted in the Ice program <b>1300</b>, for simplicity.</p>
<p id="p-0110" num="0109">Several statements that might be generated by the compiler are not illustrated in the example of <figref idref="DRAWINGS">FIG. 13</figref>. As discussed earlier with regard to the instructions of the programming language defined herein, these instructions include an &#x3c;emit&#x3e; statement, which is used to specify that an outbound event is to be emitted, and a &#x3c;terminate&#x3e; instruction, which is used to specify that the current context object should be terminated. Additional and/or different instructions may be supported by an implementation of the present invention without deviating from the scope of the present invention.</p>
<p id="p-0111" num="0110">In addition to or instead of executing an Ice program compiled from the state machine model <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref>, the virtual machine disclosed herein might also be used for executing programs compiled from other higher-level programming models, as stated earlier. <figref idref="DRAWINGS">FIGS. 3-5</figref> of the first related application provided examples of a monitor model, compiler output file, and cross-reference file, respectively. Those figures are repeated for the present application as <figref idref="DRAWINGS">FIGS. 14-16</figref>, and will now be discussed to describe how Ice programs may be used to execute a monitor model on a virtual machine as disclosed herein.</p>
<p id="p-0112" num="0111">Referring first to <figref idref="DRAWINGS">FIG. 14</figref>, the syntax used therein will now be described to provide an understanding of this sample monitor model <b>1400</b>. An &#x3c;inboundEvent&#x3e; element defines an event entry point for an instantiated model, and specifies details of the inbound events to be received at this entry point. A nested &#x3c;filter&#x3e; element may be used to specify particular criteria which must be met by an incoming event, and events not matching this specification are ignored. A nested &#x3c;correlationPredicate&#x3e; element may be used to associate each inbound event that passes the filtering criteria with the appropriate monitoring context(s) in which the event is to be processed. Attributes may be specified pertaining to the correlation predicate, indicating (for example) what action to take if there are no matches, what action to take if there is exactly one match, and what action to take if there are multiple matches.</p>
<p id="p-0113" num="0112">An &#x3c;outboundEvent&#x3e; element defines an event exit point, whereby a specific event is to be emitted. A nested &#x3c;filter&#x3e; element may be used to filter out events whose emission should be suppressed.</p>
<p id="p-0114" num="0113">One or more key values may be used with a monitoring context to enable more than one instance of the context to be instantiated from a particular monitoring context definition. The key values enable distinguishing among the multiple instantiations.</p>
<p id="p-0115" num="0114">A &#x3c;metric&#x3e; element specifies a typed slot for a data value existing in a monitoring context. It may also specify processing instructions for how this value is initialized and updated. (A metric, in a monitor model context, refers to a data value.) Metric update instructions may be specified using maps which model data updates. (A &#x201c;map&#x201d;, in a monitor model context, is a relationship defined between one or more input elements and one or more output elements.) The metric may be referenced in other element definitions, indicating the use of its value in evaluating a condition or updating other metrics at run time.</p>
<p id="p-0116" num="0115">A &#x3c;counter&#x3e; element defines a counter to be used in a monitoring context. The counter may be incremented, decremented, set to zero, and referenced in other element definitions.</p>
<p id="p-0117" num="0116">A &#x3c;trigger&#x3e; element serves as an initiator of one or more actions that should occur when particular criteria are met. When these criteria are met within a monitoring context, the trigger is said to &#x201c;fire&#x201d;. This may impact other triggers, maps, or other entities in the model. In general, the effects of a trigger in a monitoring context can be the same or similar to those of an incoming event. It can thus be considered an &#x201c;internal event&#x201d; which is used to signal certain conditions discovered by the monitoring application.</p>
<p id="p-0118" num="0117">A &#x3c;stopwatch&#x3e; element defines a value used in a monitoring context to represent elapsed time. The stopwatch may be started, stopped, reset, and referenced in other element definitions.</p>
<p id="p-0119" num="0118">A &#x3c;map&#x3e; element may be a child of a &#x3c;metric&#x3e; or &#x3c;outboundEvent&#x3e; element, and defines a map that has one or more input slots and one or more output slots. Each input slot corresponds to a metric or to another type of entity that carries a data value. The output slot of a map also connects to a metric or to another type of entity that can receive one or more data values. The map specifies some algorithm that uses the values in the input slots to compute the output value(s), and writes the output value(s) to the output slot(s). A &#x3c;map&#x3e; element may contain &#x3c;trigger&#x3e; elements that specify when the map is executed and &#x3c;assignment&#x3e; elements that specify how to set a value of an output slot. The monitoring application may ensure that if an input slot of a map changes for any reason, the map is recomputed and the output slot is updated. (The compiler algorithm for generating such cascading updates uses recursion, according to preferred embodiments, as discussed in more detail below with reference to <figref idref="DRAWINGS">FIG. 18</figref>.)</p>
<p id="p-0120" num="0119">Inbound events cause action(s) to be carried out at the monitoring application. Triggers internal to the model may also spontaneously invoke an action. For example, a &#x3c;stopwatch&#x3e; element may be compared with a time limit in a trigger condition that is evaluated periodically; when the time limit is exceeded, the trigger may fire and invoke an action, independently of any external events. Outbound events are populated with values, responsive to actions of the model, and emitted to the event bus (assuming any filtering criteria are met).</p>
<p id="p-0121" num="0120">Additional and/or different elements and attributes may be supported by an implementation without deviating from the scope of the related inventions.</p>
<p id="p-0122" num="0121">Returning now to the sample cost aggregator of <figref idref="DRAWINGS">FIGS. 14-16</figref>, a cost aggregator, in this example, is a monitor that listens to item cost events or messages. These events carry an order number, an item number, and a cost figure for this item. (See also <figref idref="DRAWINGS">FIG. 17</figref>, which provides a sample schema <b>1700</b> that may be used to describe the data structure of a cost aggregator instance.) The events processed by the cost aggregator may report, for example, the usage of an item in filling an order. When the first item cost event with a given order number arrives, a new cost aggregator instance is created and initialized with this order number. The shipping cost for this cost aggregator is set to a default value of $29.75 and its item cost, which will aggregate the cost figures of individual items, is initialized with 0. The item cost reported in the inbound event is then added to the item cost, and a total cost is calculated as the sum of item cost and shipping cost. Subsequent events for the same order will be delivered to the same aggregator, and the initialization phase will be skipped for these subsequent events: only the item cost and total cost values will be updated.</p>
<p id="p-0123" num="0122">Sample monitor model <b>1400</b> of <figref idref="DRAWINGS">FIG. 14</figref> specifies a single kind of inbound event as being of interest to this cost aggregator. See the &#x3c;inboundEvent&#x3e; specification at reference number <b>1410</b>. As specified therein, the identifier (&#x201c;id&#x201d;) for this event is &#x201c;costReport&#x201d;. The correlator syntax <b>1412</b> for this event specifies that if after evaluating the correlation predicate for all existing instances, no matching monitoring context is found for an inbound event having the specified rootElement and extensionName, a new context is to be created, but if a single monitoring context matches this event, then the event is to be delivered to that matching monitoring context; on the other hand, if multiple monitoring contexts match this event, then this is an error and an exception is to be raised. The correlationPredicate expression at <b>1414</b> specifies how to determine whether a monitoring context matches this event, and in this example, the &#x201c;orderNumber&#x201d; value from the inbound event is compared to the &#x201c;orderNum&#x201d; metric of the currently-active monitoring contexts.</p>
<p id="p-0124" num="0123">Each instance of this sample cost aggregator has 4 metrics, which are defined at <b>1420</b>, <b>1430</b>, <b>1440</b>, <b>1450</b>. A first metric <b>1420</b> is &#x201c;OrderNum&#x201d;. Metric definition <b>1420</b> specifies that an &#x201c;orderNumber&#x201d; value from the extended data section of the &#x201c;costReport&#x201d; inbound event <b>1410</b> is used to set this OrderNum metric. Metric definition <b>1430</b> pertains to a &#x201c;shippingCost&#x201d; metric, and in this example, the metric definition specifies that a default value of $29.75 is assigned to the shippingCost metric at initialization time. Metric definition <b>1440</b> specifies processing for a &#x201c;totalCost&#x201d; metric of the cost aggregator, using a map that specifies conditional logic. As stated therein, if an &#x201c;itemCost&#x201d; value exists in the current monitoring context, then this value is added to the shipping cost (i.e., the shippingCost metric) and used to set the totalCost slot or metric in the monitoring context; otherwise, the shipping cost alone is used to set the totalCost metric. Finally, metric definition <b>1450</b> pertains to the &#x201c;itemCost&#x201d; metric. This definition <b>1450</b> provides a map and a default value specification. The map specifies that the itemCost metric is incremented by a &#x201c;cost&#x201d; value from the extended data section of the inbound &#x201c;costReport&#x201d; event, and the result is used as an output value for the itemCost slot in the monitoring context. The default value specifies that the itemCost is set to &#x201c;0.0&#x201d; at initialization time.</p>
<p id="p-0125" num="0124">The compiler output file <b>1500</b> of <figref idref="DRAWINGS">FIG. 15</figref> is generated, according to one aspect of the related inventions, as a sequentially-ordered executable corresponding to the declarative monitor model <b>1400</b> of <figref idref="DRAWINGS">FIG. 14</figref>. A single &#x3c;onEvent&#x3e; element <b>1510</b> (which uses a namespace prefix of &#x201c;ice&#x201d;, and is therefore shown in <figref idref="DRAWINGS">FIG. 15</figref> as &#x3c;ice:on Event&#x3e;) is generated in this example, and corresponds to the single inbound event entry point <b>1410</b> of <figref idref="DRAWINGS">FIG. 14</figref>. In the general case, an &#x3c;onEvent&#x3e; element specifies an inbound event subscription, and may comprise a &#x201c;filter&#x201d; attribute and/or a &#x3c;fanOut&#x3e; child element. The &#x201c;filter&#x201d; attribute captures the filtering criteria (if any) specified for this inbound event in the monitor model. The filter attribute generated for the example model in <figref idref="DRAWINGS">FIG. 14</figref> will test that the root element of the inbound event is &#x201c;cbe:CommonBaseEvent&#x201d;, and that it has an attribute &#x201c;extensionName&#x201d; whose value is &#x201c;ReportItemCost&#x201d;. These conditions correspond to the rootElement and extensionName specifications in the &#x3c;inboundEvent&#x3e; element <b>1410</b>. A &#x3c;fanOut&#x3e; element <b>1511</b> provides event correlation, encapsulating (in this example) syntax at <b>1512</b> that corresponds to the correlator syntax at <b>1412</b> and <b>1414</b> of <figref idref="DRAWINGS">FIG. 14</figref>, as well as elements <b>1520</b>-<b>1590</b> for all steps pertaining to processing the inbound event for &#x3c;onEvent&#x3e; element <b>1510</b>. A &#x3c;fanOut&#x3e; element enables a context switch from the current context object (or from no context object at the beginning of processing an event) to one or more target context objects. The correlator syntax at <b>1512</b> indicates what action is taken for various matches upon evaluating the correlation predicate for all active context objects. Syntax at <b>1514</b> corresponds to the correlation predicate at <b>1414</b> of <figref idref="DRAWINGS">FIG. 14</figref>, and indicates that the &#x201c;orderNumber&#x201d; value from the inbound event is compared to the &#x201c;orderNum&#x201d; slot of the current context object to determine whether there is a match (or matches). In this example, the compiler has also translated the simplified syntax &#x201c;costReport/extendedData/orderNumber&#x201d; of the event field reference in <b>1414</b> into the actual XPath required to access this field in <b>1514</b>.</p>
<p id="p-0126" num="0125">A &#x3c;branch&#x3e; statement is generated at <b>1520</b>, and tests whether a key value exists already for the matching context object. If so, then the context object is already created and initialized, and the branch statement indicates that control should jump ahead 5 steps (distance=&#x201c;5&#x201d;) at run time. Generating the branch statement to jump ahead 5 steps enables avoiding execution of the initialization steps which are generated at <b>1530</b>-<b>1560</b>. Otherwise, if the key value does not yet exist, then the branch is not taken at run time and the next-sequential step <b>1530</b> is executed. In the general case, a &#x3c;branch&#x3e; statement provides a conditional transfer of control to a prior or succeeding step in the program (and a negative value may be used for the distance attribute to transfer control to a prior step).</p>
<p id="p-0127" num="0126">Several &#x3c;assign&#x3e; statements are generated, comprising the syntax at <b>1530</b>-<b>1590</b>, and will be referred to equivalently herein as &#x201c;assignment&#x201d; statements. In the general case, an &#x3c;assign&#x3e; statement specifies an assignment to a slot of the current monitoring context or an outbound event. Assignment statement <b>1530</b> initializes a key value for the current monitoring context instance, and assignment statement <b>1540</b> initializes the shippingCost metric in this instance to &#x201c;29.75&#x201d;. Assignment statement <b>1550</b> initializes the itemCost metric of this instance to &#x201c;0.0&#x201d;, and assignment statement <b>1560</b> carries out the same conditional processing discussed above with reference to syntax specified in the map for metric definition <b>1440</b> in the monitor model. This completes the sequence of initialization steps, which will be skipped if branch <b>1520</b> is taken. Assignment statement <b>1570</b> sets the orderNum metric to the value of the orderNumber from the incoming event, and corresponds to the map in metric definition <b>1420</b> in the monitor model. Assignment statement <b>1580</b> computes a value for the itemCost metric, as discussed above for the map in metric definition <b>1450</b>, and assignment statement <b>1590</b> sets the totalCost metric as discussed above for the map in metric definition <b>1440</b>.</p>
<p id="p-0128" num="0127">Note that assignment statement <b>1590</b> is identical to assignment statement <b>1560</b>, in this example. This occurs because the map for the totalCost metric depends on two inputs, namely itemCost and shippingCost. The compiler recognizes that those metrics are set during initialization, and thus generates code at <b>1560</b> to account for any downstream effects from these initializations. The compiler also recognizes that the itemCost metric is dynamically updated by executing the code at <b>1580</b>, and therefore generates another assignment statement <b>1590</b> to account for that dynamic update. This illustrates how the compiler of an aspect of the related inventions translates the declarative logic of the monitor model into the proper sequence of assignment statements, after analyzing the data dependencies.</p>
<p id="p-0129" num="0128">As can be seen by comparing compiler output file <b>1500</b> to the compiler input file, i.e., monitor model <b>1400</b>, the ordering of statements within these related files is quite different, and a user stepping through compiler output file <b>1500</b> with a conventional debugger is likely to be confused in trying to determine what part of the source code is being executed at a point in time. (Furthermore, it may be even more difficult to determine an error source during normal execution if run-time errors are generated.) Accordingly, an aspect of the related inventions provides a cross-reference file as an additional compiler output and uses this file as an additional debugger input (as shown in <figref idref="DRAWINGS">FIG. 7</figref> and discussed above). A sample version of this cross-reference file is shown at <b>1600</b> of <figref idref="DRAWINGS">FIG. 16</figref>, and will now be discussed.</p>
<p id="p-0130" num="0129">File <b>1600</b> cross-references between the monitor model (compiler input) <b>1400</b> of <figref idref="DRAWINGS">FIG. 14</figref> and the compiler output file <b>1500</b> of <figref idref="DRAWINGS">FIG. 15</figref>. These files <b>1400</b>, <b>1500</b> are identified as the subject of the cross reference file at <b>1611</b> (using an mmResource attribute to identify the monitor model) and <b>1610</b> (using an iceResource attribute to identify the compiler output file). Note that relationships in this cross-reference file may be one-to-many, since a single element in a monitor model may give rise to multiple steps in the compiler output file.</p>
<p id="p-0131" num="0130">An &#x3c;mmStep&#x3e; element is generated in file <b>1600</b> for each of the operations from the input monitor model (such as executing a map, stopping a stopwatch, incrementing a counter, and so forth). See, for example, &#x3c;mmStep&#x3e; element <b>1620</b>. Each &#x3c;mmStep&#x3e; element identifies a model element from the source code and the corresponding statement(s) of the compiler output file. The model element defining the operation in the source code is identified, using a variation of the well-known XPath notation, as the value of an mmRef attribute within an &#x3c;mmStep&#x3e; element. So, for example, the mmRef attribute at <b>1630</b> identifies model element <b>1410</b> of file <b>1400</b>, and the mmRef attribute at <b>1640</b> identifies the &#x3c;map&#x3e; element <b>1421</b> of file <b>1400</b>. In this manner, the cross-reference file navigates through the elements of the monitor model <b>1400</b>. The Ice statements in file <b>1500</b> are identified in the cross-reference file, using an XPath-like notation, as the value of an iceRefs attribute. For example, the iceRefs attribute at <b>1621</b> identifies statement <b>1510</b>, <b>1511</b>, <b>1520</b>, <b>1530</b>, <b>1540</b>, <b>1550</b>, and <b>1560</b> of the compiler output file <b>1500</b>, all of which were generated to describe the effect of the &#x3c;inboundEvent&#x3e; <b>1410</b> referenced via the mmRef attribute <b>1630</b>, and the iceRefs attribute at <b>1650</b> identifies the &#x3c;assign&#x3e; statement at <b>1590</b> (i.e., the seventh assignment statement generated within the nesting &#x3c;fanOut&#x3e;, identified in <figref idref="DRAWINGS">FIG. 16</figref> using the ordinal value &#x201c;6&#x201d; for zero-based counting).</p>
<p id="p-0132" num="0131">Note that the syntax identified with reference number <b>1622</b> comprises a single &#x3c;mmStep&#x3e; element. This is because the branch and assignment statements referenced therein all occur as a result of the inbound event subscription defined at <b>1410</b> of <figref idref="DRAWINGS">FIG. 14</figref> (which definition continues through reference number <b>1419</b>).</p>
<p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. 18</figref> illustrates a compiler algorithm used by an aspect of the related inventions for generating Ice language for a monitor model, as will now be discussed in more detail.</p>
<p id="p-0134" num="0133">The compiler algorithm gets an inbound event definition (event subscription) from the model (Block <b>1800</b>), and Block <b>1805</b> tests whether such definition was found. If so, an onevent statement (representing an event subscription, with its filter condition), a fanOut statement (representing the correlation logic), and context initialization statements are generated in Block <b>1810</b>, resulting in logic similar to statements <b>1510</b>-<b>1560</b> in <figref idref="DRAWINGS">FIG. 15</figref>.</p>
<p id="p-0135" num="0134">Next, preferred embodiments of this compiler find all downstream effects from the event that happen without intervening trigger control (e.g., all event-driven stopwatch and counter commands, in one embodiment, as well as all direct and indirect updates of metrics). All of these effects can be implemented using assignments of some calculated values to slots in an object representing the execution context (i.e., the monitoring context). Accordingly, Block <b>1815</b> generates an assignment (or assignments, as appropriate) for each of the event-driven stopwatch commands and each of the counter commands, and Block <b>1820</b> generates an assignment (or assignments, as appropriate) for each of the direct or indirect updates of metrics. Notably, these assignments are generated respecting dependencies. For example, if a map to metric1 depends on metric2, and both metrics are updated as a result of an incoming event, the assignments are generated to ensure that metric2 is updated before updating metric1. Since cyclic dependencies are forbidden in a monitor model, respecting data dependencies in determining the sequence of assignments will not lead to contradictions (or dead-locks) and generation of these cascading updates will end after a finite number of steps.</p>
<p id="p-0136" num="0135">In Block <b>1825</b>, code is generated that will fire any outbound events that are currently pending for emission. Next, Block <b>1830</b> generates code to evaluate any triggers pending for evaluation and fire them if needed. (As discussed earlier, triggers may become pending for evaluation as a result of metric updates, inbound events being received, other triggers firing, etc.)</p>
<p id="p-0137" num="0136">The processing at Block <b>1830</b> comprises, in preferred embodiments of the compiler, an invocation of the logic of <figref idref="DRAWINGS">FIG. 18B</figref>. Block <b>1835</b> then generates code that will terminate any monitoring contexts that are currently pending for termination. (An inbound event definition may contain syntax indicating that receipt of this kind of event represents a termination condition for the receiving monitoring context; any context receiving such an event would then become pending for termination.) Processing then returns from Block <b>1835</b> to Block <b>1800</b>, where a next one of the event subscriptions is processed in an iterative manner until all inbound event definitions have been processed. Following a negative result for the test at Block <b>1805</b> (indicating that all of the inbound event definitions have now been processed), the processing in <figref idref="DRAWINGS">FIG. 18A</figref> ends.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 18B</figref> illustrates processing for triggers, similar to the inbound event processing of FIG. <b>18</b>A. In Block <b>1850</b> of <figref idref="DRAWINGS">FIG. 18B</figref>, the compiler algorithm gets the definition of a to-be-evaluated trigger from the model. A branch statement, which tests the trigger's gating condition and skips the subsequent statements if it is false, is generated in Block <b>1855</b>.</p>
<p id="p-0139" num="0138">Preferred embodiments of the compiler then find all downstream effects of this trigger, including all trigger-driven stopwatch and counter commands (if such elements are present in the input model) as well as all direct and indirect updates of metrics that may occur as a result of this trigger firing. All of these effects can be implemented using assignments of some calculated values to slots in an object representing the execution context (i.e., the monitoring context). Accordingly, Block <b>1860</b> generates an assignment (or assignments, as appropriate) for each of the trigger-driven stopwatch commands and each of the counter commands, and Block <b>1865</b> generates an assignment (or assignments, as appropriate) for each of the direct or indirect updates of metrics. As discussed above with reference to Block <b>1820</b>, the assignments generated at Block <b>1865</b> are generated respecting dependencies.</p>
<p id="p-0140" num="0139">In Block <b>1870</b>, code is generated that will fire any outbound events that are currently pending for emission. Block <b>1875</b> generates code to evaluate any triggers that have become pending for evaluation as a consequence of executing any of the statements generated previously, and fire them if needed, thereby causing the logic in <figref idref="DRAWINGS">FIG. 18B</figref> to be invoked recursively. (This recursion will end because there are only a finite number of trigger definitions and their dependency graph has no cycles.) Finally, Block <b>1880</b> generates code that will terminate any monitoring contexts that are currently pending for termination.</p>
<p id="p-0141" num="0140">Note that the run-time order of processing triggers, if several fire at the same time, is undefined. This can be considered a race condition, and a similar race condition occurs if several inbound events are received at the same time. If the result of processing two simultaneously-arriving events according to a particular model depends on the order in which they are processed, then this model is an ill-defined model. Similarly, a model is ill-defined if the result of trigger processing for two simultaneously-firing triggers depends on the order in which their effects are executed. (It may be desirable to detect such issues in a monitor model editor and prompt the user to revise the model accordingly.) As a result, the apparent &#x201c;arbitrariness&#x201d; that may occur at Blocks <b>1830</b> and <b>1875</b> is natural, and in fact expected, for an event/trigger-driven programming model.</p>
<p id="p-0142" num="0141">As can be seen by comparing <figref idref="DRAWINGS">FIGS. 18A and 18B</figref>, the generation of the statements representing the trigger's effects in <figref idref="DRAWINGS">FIG. 18B</figref> follows the same logic that is shown in <figref idref="DRAWINGS">FIG. 18A</figref> for inbound events: statements are generated for trigger-driven stopwatch and counter updates, direct and indirect updates of metrics, emission of outbound events, evaluation of further triggers (if such evaluation is caused by the preceding trigger or any updates it engendered), and finally for context termination if warranted.</p>
<p id="p-0143" num="0142">As has been stated, the compiler&#x2014;in addition to producing the execution sequence in the Ice output file&#x2014;may also produce a cross-reference file that relates each step in the generated compiler output with an inbound event subscription, a map, a counter or stopwatch command, a trigger definition, or an outbound event definition from the original monitor model specification. These cross-references may be used by the debugger of the second related application, as the user executes steps in single-step mode, to highlight the original model constructs from which those steps of the generated compiler output were produced. Accordingly, at each of Blocks <b>1810</b>-<b>1835</b> and <b>1855</b>-<b>1880</b>, the compiler preferably writes syntax into a cross-reference file to record relationships between the monitor model input file and the generated compiler output file. This syntax has been illustrated in <figref idref="DRAWINGS">FIG. 16</figref>, and discussed above with reference to this figure as well as <figref idref="DRAWINGS">FIGS. 14-15</figref>. (Note that various &#x201c;housekeeping&#x201d;-type syntax is generated by the compiler for the output file illustrated by <figref idref="DRAWINGS">FIG. 15</figref> and the cross-reference file illustrated by <figref idref="DRAWINGS">FIG. 16</figref>, such as the namespace definition, or &#x201c;xmlns&#x201d;, statements appearing at the beginning of those files. Such syntax is readily understood by those of ordinary skill in the art, and an explanation thereof is not deemed necessary to an understanding of the present or related inventions.)</p>
<p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. 19</figref> provides a sample schema <b>1900</b> for the Ice language, according to a preferred embodiment of an aspect of the present invention. (This sample schema is provided by way of illustration but not of limitation.)</p>
<p id="p-0145" num="0144">As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as (for example) methods, systems, and/or computer program products. The invention can take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes (but is not limited to) firmware, resident software, microcode, etc. In a hardware embodiment, specialized or dedicated circuitry may be provided that carries out functions described herein. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-usable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-usable program code embodied therein, where this computer program product may be used by or in connection with a computer or any instruction execution system. For purposes of this description, a computer-usable or computer-readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.</p>
<p id="p-0146" num="0145">The medium may be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (&#x201c;RAM&#x201d;), a read-only memory (&#x201c;ROM&#x201d;), a rigid magnetic disk, and an optical disk. Current examples of optical disks include compact disk read-only memory (&#x201c;CD-ROM&#x201d;), compact disk read/write (&#x201c;CD-R/W&#x201d;), and DVD.</p>
<p id="p-0147" num="0146">Referring now to <figref idref="DRAWINGS">FIG. 20</figref>, a data processing system <b>2000</b> suitable for storing and/or executing program code includes at least one processor <b>2012</b> coupled directly or indirectly to memory elements through a system bus <b>2014</b>. The memory elements can include local memory <b>2028</b> employed during actual execution of the program code, bulk storage <b>2030</b>, and cache memories (not shown) which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.</p>
<p id="p-0148" num="0147">Input/output (&#x201c;I/O&#x201d;) devices (including but not limited to keyboards <b>2018</b>, displays <b>2024</b>, pointing devices <b>2020</b>, other interface devices <b>2022</b>, etc.) can be coupled to the system either directly or through intervening I/O controllers or adapters (<b>2016</b>, <b>2026</b>).</p>
<p id="p-0149" num="0148">Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks (as shown generally at <b>2032</b>). Modems, cable modem attachments, wireless adapters, and Ethernet cards are just a few of the currently-available types of network adapters.</p>
<p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. 21</figref> illustrates a data processing network environment <b>2100</b> in which the present invention may be practiced. The data processing network <b>2100</b> may include a plurality of individual networks, such as wireless network <b>2142</b> and network <b>2144</b>. A plurality of wireless devices <b>2110</b> may communicate over wireless network <b>2142</b>, and a plurality of wired devices, shown in the figure (by way of illustration) as workstations <b>2111</b>, may communicate over network <b>2144</b>. Additionally, as those skilled in the art will appreciate, one or more local area networks (&#x201c;LANs&#x201d;) may be included (not shown), where a LAN may comprise a plurality of devices coupled to a host processor.</p>
<p id="p-0151" num="0150">Still referring to <figref idref="DRAWINGS">FIG. 21</figref>, the networks <b>2142</b> and <b>2144</b> may also include mainframe computers or servers, such as a gateway computer <b>2146</b> or application server <b>2147</b> (which may access a data repository <b>2148</b>). A gateway computer <b>2146</b> serves as a point of entry into each network, such as network <b>2144</b>. The gateway <b>2146</b> may be preferably coupled to another network <b>2142</b> by means of a communications link <b>2150</b><i>a</i>. The gateway <b>2146</b> may also be directly coupled to one or more workstations <b>2111</b> using a communications link <b>2150</b><i>b</i>, <b>2150</b><i>c</i>, and/or may be indirectly coupled to such devices. The gateway computer <b>2146</b> may be implemented utilizing an Enterprise Systems Architecture/390&#xae; computer available from IBM. Depending on the application, a midrange computer, such as an Application System/400&#xae; (also known as an AS/400&#xae;, iSeries&#xae;, System i&#x2122;, and so forth may be employed. (&#x201c;Enterprise Systems Architecture/390&#x201d;, &#x201c;Application System/400&#x201d;, &#x201c;AS/400&#x201d;, and &#x201c;iSeries&#x201d; are registered trademarks of IBM in the United States, other countries, or both, and &#x201c;System i&#x201d; is a trademark of IBM.)</p>
<p id="p-0152" num="0151">The gateway computer <b>2146</b> may also be coupled <b>2149</b> to a storage device (such as data repository <b>2148</b>).</p>
<p id="p-0153" num="0152">Those skilled in the art will appreciate that the gateway computer <b>2146</b> may be located a great geographic distance from the network <b>2142</b>, and similarly, the wireless devices <b>2110</b> and/or workstations <b>2111</b> may be located some distance from the networks <b>2142</b> and <b>2144</b>, respectively. For example, the network <b>2142</b> may be located in California, while the gateway <b>2146</b> may be located in Texas, and one or more of the workstations <b>2111</b> may be located in Florida. The wireless devices <b>2110</b> may connect to the wireless network <b>2142</b> using a networking protocol such as the Transmission Control Protocol/Internet Protocol (&#x201c;TCP/IP&#x201d;) over a number of alternative connection media, such as cellular phone, radio frequency networks, satellite networks, etc. The wireless network <b>2142</b> preferably connects to the gateway <b>2146</b> using a network connection <b>2150</b><i>a </i>such as TCP or User Datagram Protocol (&#x201c;UDP&#x201d;) over IP, X.25, Frame Relay, Integrated Services Digital Network (&#x201c;ISDN&#x201d;), Public Switched Telephone Network (&#x201c;PSTN&#x201d;), etc. The workstations <b>2111</b> may connect directly to the gateway <b>2146</b> using dial connections <b>2150</b><i>b </i>or <b>2150</b><i>c</i>. Further, the wireless network <b>2142</b> and network <b>2144</b> may connect to one or more other networks (not shown), in an analogous manner to that depicted in <figref idref="DRAWINGS">FIG. 21</figref>.</p>
<p id="p-0154" num="0153">The present invention has been described with reference to flow diagrams and/or block diagrams according to embodiments of the invention. It will be understood that each flow and/or block of the flow diagrams and/or block diagrams, and combinations of flows and/or blocks in the flow diagrams and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions specified in the flow diagram flow or flows and/or block diagram block or blocks.</p>
<p id="p-0155" num="0154">These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flow diagram flow or flows and/or block diagram block or blocks.</p>
<p id="p-0156" num="0155">The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flow diagram flow or flows and/or block diagram block or blocks.</p>
<p id="p-0157" num="0156">While embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Therefore, it is intended that the appended claims shall be construed to include the described embodiments and all such variations and modifications as fall within the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A virtual machine for executing a program, comprising:
<claim-text>an instruction executor for executing instructions from the program using a computer, wherein:
<claim-text>the instructions from the program have been generated in an intermediate language, by a compiler, to cause processing of an execution sequence according to a specification of a model, the model specification encoded using a model notation that is distinct from the intermediate notation;</claim-text>
<claim-text>the instructions from the program are encoded in a markup language notation by the compiler and are selected by the compiler from allowable instructions of the intermediate language, the markup language notation being distinct from the intermediate language; and</claim-text>
<claim-text>the allowable instructions of the intermediate language comprise: an event instruction for receiving an inbound event; an assignment instruction for assigning a value; a branch instruction for conditional transfer to a different one of the instructions; an emit instruction for specifying that an outbound event is to be emitted; a terminate instruction for specifying that a current execution context object is to be terminated; and a fan-out instruction for at least one of specifying event correlation and enabling a context switch, the context switch causing a particular execution context object to be used as the current execution context object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the model specification is an event-driven model specification.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the model specification is a message-driven model specification.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual machine is usable for executing a plurality of programs, the plurality of programs generated, by at least two different compilers, to cause processing of respective execution sequences according to at least two different specifications of execution models.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the event instruction further comprises:
<claim-text>executing the event instruction to receive a particular inbound event according to the specification of the model;</claim-text>
<claim-text>locating a fan-out instruction associated with the event instruction;</claim-text>
<claim-text>executing the located fan-out instruction to determine, using correlation predicate information associated with the located fan-out instruction, zero or more execution context objects to use for processing the particular inbound event; and</claim-text>
<claim-text>directing the particular inbound event to each determined execution context object, if any, for the processing of the particular inbound event therein.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event instruction for receiving an inbound event specifies a filter that is to be evaluated by the virtual machine instruction executor, responsive to receiving a particular inbound event, to determine whether the event instruction is applicable for processing the particular inbound event.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual machine instruction executor determines which of a plurality of event instructions from the program to execute, upon receiving a particular inbound event, by comparing a type declared by the particular inbound event to a type specification, when present, in each of the plurality of event instructions.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the assignment instruction further comprises:
<claim-text>evaluating an expression of the assignment instruction; and</claim-text>
<claim-text>assigning, as the value, a result of the evaluating to a target identified by the assignment instruction, the target comprising a slot of a current execution context object or of an outbound event that is to be emitted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the branch instruction further comprises:
<claim-text>evaluating a condition expression of the branch instruction; and</claim-text>
<claim-text>wherein the conditional transfer further comprises next executing the different one of the instructions, as identified by an attribute of the branch instruction, when the evaluation returns a true result, and otherwise next executing a next sequential one of the instructions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the emit instruction further comprises emitting, to an event bus, the outbound event.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The virtual machine according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the executing of the emit instruction further comprises evaluating an expression specified on the emit instruction and reflecting a result of the evaluating in the outbound event prior to the emitting.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the terminate instruction further comprises terminating the current execution context object.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The virtual machine according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual machine instruction executor executes the instructions of the program by:
<claim-text>detecting arrival of an inbound event;</claim-text>
<claim-text>comparing the inbound event to each event instruction from the program to determine if the event instruction from the program is applicable for processing the inbound event; and</claim-text>
<claim-text>for each event instruction from the program which is determined to be applicable for processing the inbound event, performing:
<claim-text>obtaining subordinate instructions of the event instruction, the subordinate instructions comprising zero or more of: the assignment instruction, the branch instruction, the emit instruction, the fan-out instruction, and the terminate instruction; and</claim-text>
<claim-text>executing each of the zero or more obtained subordinate instructions.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The virtual machine according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein:
<claim-text>executing the fan-out instruction of an applicable event instruction, responsive to detecting the arrival of the inbound event, causes selection of one or more particular existing context object as the current execution context object, or creation of a new execution context object and selection of the new execution context object as the current execution context object; and</claim-text>
<claim-text>the selected current execution context object is used when executing each next-sequential one of the obtained subordinate instructions until encountering one of: the terminate instruction, and then terminating the current execution object when executing the terminate instruction; or another fan-out instruction, and then selecting a different execution context object as the current execution context object when executing the other fan-out instruction.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product for executing a virtual machine, wherein the computer program product is embodied on one or more non-transitory computer-readable storage media and comprises computer-readable instructions for:
<claim-text>obtaining instructions from a program, the instructions from the program having been generated in an intermediate language, by a compiler, to cause processing of an execution sequence according to a specification of a model, the model specification encoded using a model notation that is distinct from the intermediate notation, and</claim-text>
<claim-text>executing the obtained instructions from the program using the virtual machine on a computer, wherein the instructions from the program are encoded in a markup language notation by the compiler and are selected by the compiler from allowable instructions of the intermediate language, the markup language notation being distinct from the intermediate language, the allowable instructions of the intermediate language comprising: an event instruction for receiving an inbound event; an assignment instruction for assigning a value; a branch instruction for conditional transfer to a different one of the instructions; an emit instruction for specifying that an outbound event is to be emitted; a terminate instruction for specifying that a current execution context object is to be terminated; and a fan-out instruction for at least one of specifying event correlation and enabling a context switch, the context switch causing a particular execution context object to be used as the current execution context object.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A non-transitory computer-readable storage medium storing source code written in a programming language, wherein:
<claim-text>the programming language comprises an intermediate language which is generated, by a compiler, to cause processing of an execution sequence according to a specification of a model, the model specification encoded using a model notation that is distinct from the intermediate notation, and allowable instructions of the intermediate language comprising:
<claim-text>an event instruction for receiving an inbound event;</claim-text>
<claim-text>an assignment instruction for assigning a value;</claim-text>
<claim-text>a branch instruction for conditional transfer to a different one of the instructions;</claim-text>
<claim-text>an emit instruction for specifying that an outbound event is to be emitted;</claim-text>
<claim-text>a terminate instruction for specifying that a current execution context object is to be terminated; and</claim-text>
<claim-text>a fan-out instruction for at least one of specifying event correlation and enabling a context switch, the context switch causing a particular execution context object to be used as the current execution context object; and</claim-text>
</claim-text>
<claim-text>the source code comprises a plurality of the allowable instructions of the programming language which are selected by the compiler, wherein the source code is encoded by the compiler, during the generating, in a markup language notation and is executable to cause processing of the execution sequence according to the specification of the model.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer-readable medium according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein model specification is an event-driven model specification.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable medium according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the model specification is a message-driven model specification.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A program of instructions stored on a non-transitory computer-readable storage medium which, when executed, causes a computer to perform:
<claim-text>obtaining the instructions from the program, the instructions from the program having been generated in an intermediate language, by a compiler, to cause processing of an execution sequence according to a specification of a model, the model specification encoded using a model notation that is distinct from the intermediate notation; and</claim-text>
<claim-text>executing the obtained instructions from the program, wherein the instructions from the program are encoded in a markup language notation by the compiler and are selected by the compiler from allowable instructions of the intermediate language, the markup language notation being distinct from the intermediate language, the allowable instructions of the intermediate language comprising:</claim-text>
<claim-text>an event instruction for receiving an inbound event;</claim-text>
<claim-text>an assignment instruction for assigning a value;</claim-text>
<claim-text>a branch instruction for conditional transfer to a different one of the instructions;</claim-text>
<claim-text>an emit instruction for specifying that an outbound event is to be emitted;</claim-text>
<claim-text>a terminate instruction for specifying that a current execution context object is to be terminated; and</claim-text>
<claim-text>a fan-out instruction for at least one of specifying event correlation and enabling a context switch, the context switch causing a particular execution context object to be used as the current execution context object.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The program of instructions according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the model specification is an event-driven model specification.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The program of instructions according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the model specification is a message-driven model specification.</claim-text>
</claim>
</claims>
</us-patent-grant>

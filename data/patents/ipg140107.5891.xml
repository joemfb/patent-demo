<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627000-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627000</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12701626</doc-number>
<date>20100208</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>475</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>711112</main-classification>
<further-classification>711162</further-classification>
<further-classification>711E12001</further-classification>
<further-classification>711E12103</further-classification>
<further-classification>710 58</further-classification>
</classification-national>
<invention-title id="d2e53">Virtual disk manipulation operations</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4455602</doc-number>
<kind>A</kind>
<name>Baxter et al.</name>
<date>19840600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4464713</doc-number>
<kind>A</kind>
<name>Benhase et al.</name>
<date>19840800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711205</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5634096</doc-number>
<kind>A</kind>
<name>Baylor et al.</name>
<date>19970500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5926834</doc-number>
<kind>A</kind>
<name>Carlson et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5987565</doc-number>
<kind>A</kind>
<name>Gavaskar</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6046930</doc-number>
<kind>A</kind>
<name>Ciraula et al.</name>
<date>20000400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>365156</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6247099</doc-number>
<kind>B1</kind>
<name>Skazinski et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6505260</doc-number>
<kind>B2</kind>
<name>Chin et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 41</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6880062</doc-number>
<kind>B1</kind>
<name>Ibrahim et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6934799</doc-number>
<kind>B2</kind>
<name>Acharya et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7039783</doc-number>
<kind>B2</kind>
<name>Koo</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7080051</doc-number>
<kind>B1</kind>
<name>Crawford</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7447854</doc-number>
<kind>B1</kind>
<name>Cannon</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7529784</doc-number>
<kind>B2</kind>
<name>Kavuri et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7631155</doc-number>
<kind>B1</kind>
<name>Bono et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711156</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7873619</doc-number>
<kind>B1</kind>
<name>Faibish et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707705</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>8368686</doc-number>
<kind>B2</kind>
<name>Sommers</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345420</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2002/0184463</doc-number>
<kind>A1</kind>
<name>Arakawa et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2004/0139097</doc-number>
<kind>A1</kind>
<name>Farber et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2005/0195660</doc-number>
<kind>A1</kind>
<name>Kavuri et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>36518905</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2006/0101204</doc-number>
<kind>A1</kind>
<name>Bao</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2006/0155667</doc-number>
<kind>A1</kind>
<name>Tolba</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2006/0161753</doc-number>
<kind>A1</kind>
<name>Aschoff et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2008/0028052</doc-number>
<kind>A1</kind>
<name>Currid et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709222</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2008/0104334</doc-number>
<kind>A1</kind>
<name>Bellaton et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711141</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2008/0144471</doc-number>
<kind>A1</kind>
<name>Garapati et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2008/0301123</doc-number>
<kind>A1</kind>
<name>Schneider et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2008/0307191</doc-number>
<kind>A1</kind>
<name>Lane et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2009/0070345</doc-number>
<kind>A1</kind>
<name>Kazar et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2009/0119538</doc-number>
<kind>A1</kind>
<name>Scales et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2009/0193298</doc-number>
<kind>A1</kind>
<name>Mukherjee</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2009/0300023</doc-number>
<kind>A1</kind>
<name>Vaghani</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2009/0319256</doc-number>
<kind>A1</kind>
<name>Chow et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2010/0049750</doc-number>
<kind>A1</kind>
<name>Srivastava et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2010/0049927</doc-number>
<kind>A1</kind>
<name>Fuente et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2010/0082714</doc-number>
<kind>A1</kind>
<name>Herron et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707822</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2011/0055471</doc-number>
<kind>A1</kind>
<name>Thatcher et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2011/0137724</doc-number>
<kind>A1</kind>
<name>Ramchandran et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 1449</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2011/0213927</doc-number>
<kind>A1</kind>
<name>Tucci</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711114</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Ariyamannil et al. &#x201c;The Veritas&#x2122; Cluster File System: Technology and Usage.&#x201d; Symantec Yellow Books&#x2122;, Jan. 2010.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Shahzad Shafkat, &#x201c;Managing VMware Server 2.0 Virtual Disks&#x201d;, Retrieved at&#x3c;&#x3c;http://www.chutneytech.com/managing-vmware-server-20-virtual-disks/&#x3e;&#x3e;,Feb. 16, 2009, pp. 5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>Rambo, et al., &#x201c;Windows Boot from Virtual Disk&#x201d;, Retrieved at&#x3c;&#x3c;http://download.microsoft.com/download/8/6/A/86A97515-8AF4-4CA6-B516-CDA1139B8D93/ENT-T606<sub>&#x2014;</sub>en.pptx&#x3e;&#x3e;,2008, pp. 31.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>&#x201c;Vdisk&#x201d;, Retrieved at&#x3c;&#x3c;http://en.wikipedia.org/wiki/Vdisk&#x3e;&#x3e;, Sep. 10, 2009, p. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>&#x201c;International Search Report&#x201d;, Mailed Date: Aug. 30, 2011, Application No. PCT/US2011/021443, Filed Date: Jan. 16, 2011, pp. 9.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110197022</doc-number>
<kind>A1</kind>
<date>20110811</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Green</last-name>
<first-name>Dustin L.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Oshins</last-name>
<first-name>Jacob K.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Neil</last-name>
<first-name>Michael L.</first-name>
<address>
<city>Mercer Island</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Green</last-name>
<first-name>Dustin L.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Oshins</last-name>
<first-name>Jacob K.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Neil</last-name>
<first-name>Michael L.</first-name>
<address>
<city>Mercer Island</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Gonzalez Saggio &#x26; Harlan LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kindred</last-name>
<first-name>Alford W.</first-name>
<department>2182</department>
</primary-examiner>
<assistant-examiner>
<last-name>Bernard</last-name>
<first-name>Daniel</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Described is a technology by which a virtual hard disk is able to continue servicing virtual disk I/O (reads and writes) while a meta-operation (e.g., copying, moving, deleting, merging, compressing, defragmenting, cryptographic signing, lifting, dropping, converting, or compacting virtual disk data) is performed on the virtual disk. The servicing of virtual disk I/Os may be coordinated with meta-operation performance, such as by throttling and/or prioritizing the virtual disk I/Os. Also described is performing a meta-operation by manipulating one or more de-duplication data structures.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="159.60mm" wi="150.71mm" file="US08627000-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="181.86mm" wi="144.44mm" file="US08627000-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="228.18mm" wi="147.15mm" orientation="landscape" file="US08627000-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="231.65mm" wi="147.83mm" orientation="landscape" file="US08627000-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="190.08mm" wi="158.07mm" file="US08627000-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="270.43mm" wi="185.25mm" file="US08627000-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="258.83mm" wi="179.83mm" orientation="landscape" file="US08627000-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">A virtual disk is basically a set of one or more files or other storage extent (e.g., a disk, partition on a disk or the like) that is configured to operate as if it were a physical hard disk drive for a computer system. Virtual disk input and output (&#x201c;I/O&#x201d; comprising reads and writes to a virtual disk) manipulate virtual disk data. Various aspects of a virtual disk's data also are manipulated by &#x201c;meta-operations,&#x201d; including operations that create and delete snapshots, create and delete checkpoints, change where data is stored, delete unused data, and so forth.</p>
<p id="p-0003" num="0002">Because virtual disk I/O and meta-operations both write to a virtual disk, there is the potential for a meta-operation to conflict with a virtual disk I/O, causing data corruption. A straightforward approach to avoiding such potential corruption problems is to disallow meta-operations while the virtual disk is in use as a disk for servicing virtual disk I/O. However, this approach is not desirable because it limits the scenarios in which meta-operations can be used. A solution is needed that allows meta-operations to safely proceed while a virtual disk is in use as a disk.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">This Summary is provided to introduce a selection of representative concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used in any way that would limit the scope of the claimed subject matter.</p>
<p id="p-0005" num="0004">Briefly, various aspects of the subject matter described herein are directed towards a technology by which a virtual disk comprising at least two overlapping layers can continue to be used for servicing virtual disk I/O (reads and writes) while a meta-operation with its own I/O is performed on the virtual disk. This includes preventing at least some meta-operation writes to a virtual disk offset range concurrent with virtual disk writes to an overlapping virtual disk offset range.</p>
<p id="p-0006" num="0005">Example meta-operations comprises copying, moving, deleting, merging, compressing, defragmenting, cryptographic signing, lifting, dropping, converting, or compacting virtual disk data. The meta-operation may manipulate less than all of the virtual disk data.</p>
<p id="p-0007" num="0006">In one aspect, the servicing of virtual disk I/Os is coordinated with meta-operation performance to allow the meta-operation to complete, to control virtual disk reads and writes versus meta-operation reads and writes, and/or to control interference of the meta-operation with other data traffic. For example, virtual disk reads and writes may be throttled and/or prioritized to allow the meta-operation to complete. Also, the meta-operation reads and writes may be throttled and/or prioritized to control interference with virtual disk reads and writes, and/or to control interference of the meta-operation with other data traffic.</p>
<p id="p-0008" num="0007">In one aspect, the meta-operation may be performed by manipulating one or more de-duplication data structures rather than actually copying or moving data, such as to compact the virtual disk, defragment the virtual disk, merge two or more layers of the virtual disk, convert the virtual disk to a different layout, lift the virtual disk, or drop the virtual disk. If possible, the meta-operation is performed by a copy offload operation, update operation, delete operation, and/or move offload operation. Both payload data and metadata may be manipulated.</p>
<p id="p-0009" num="0008">Other advantages may become apparent from the following detailed description when taken in conjunction with the drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">The present invention is illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing an example of a mechanism that allows a virtual disk to continue to service reads and writes while performing one or more meta-operations on the virtual disk.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a representation of a two-layered virtual disk that may be used to maintain the virtual storage disk's data via a base layer and a diff (differencing) layer.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a representation of a three-layered virtual disk that may be used to provide the virtual storage disk's data.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a representation of converting a virtual disk via de-duplication data structure manipulation.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> is a representation of lifting or dropping a virtual disk via de-duplication data structure manipulation.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram showing example steps that may be taken to handle writes such that virtual disk reads and writes may continue while performing a meta-operation on the virtual disk.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram showing example steps that may be taken to handle meta-operation I/O by de-duplication data structure manipulation when available.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> shows an illustrative example of a computing environment into which various aspects of the present invention may be incorporated.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">Various aspects of the technology described herein are generally directed towards performing meta-operations on a virtual disk while the virtual disk is in-use as a disk, in a manner that avoids corruption that may otherwise occur if meta-operation data changes were allowed to mix with virtual disk reads and writes. Also described are multiple mechanisms that allow certain meta-operations to manipulate only a portion of the virtual disk data, instead of all the virtual disk data. Still further, dynamic movement of data and movement of the servicing of virtual disk reads and writes while a meta-operation is ongoing are described, in a manner that does not unduly impact other communications traffic.</p>
<p id="p-0020" num="0019">It should be understood that any of the examples described herein are non-limiting examples; for example, virtual disks comprised of one or more layers are described herein, however, other arrangements that provide virtual disks may be used. As such, the present invention is not limited to any particular embodiments, aspects, concepts, structures, functionalities or examples described herein. Rather, any of the embodiments, aspects, concepts, structures, functionalities or examples described herein are non-limiting, and the present invention may be used in various ways that provide benefits and advantages in computing and data storage in general.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> shows a computing environment in which a computing machine <b>102</b> (physical or virtual) is coupled to a virtual disk <b>104</b>. Although <figref idref="DRAWINGS">FIG. 1</figref> shows a single component representing the virtual disk <b>104</b>, it should be noted that a virtual disk's data may be located in a single physical storage device, or distributed among more than one physical storage device, including devices at physically separate locations (e.g., remote and/or local).</p>
<p id="p-0022" num="0021">Moreover, while <figref idref="DRAWINGS">FIG. 1</figref> shows one physical or virtual machine <b>102</b> using the virtual disk <b>104</b>, more than one such machine may use it, and different machines may do so at different times. The machine or set of machines using the virtual disk (as a virtual disk) may change before, during, or after the meta-operation data manipulation. The machine using the virtual disk as a virtual disk is not required to be the same machine that is servicing virtual disk I/Os (reads and writes). However, in one implementation, the machine servicing virtual disk I/Os is the same machine that is performing a meta-operation. In one implementation, servicing of virtual disk I/Os and ongoing performance of the meta-operation move together to a different machine (if they move at all). Note that a virtual disk meta-operation may continue toward completion even as the usage of the virtual disk moves from one machine to another</p>
<p id="p-0023" num="0022">In general, the virtual disk services read and write (R/W) input and output (I/O) operations <b>106</b> made by applications and operating system components and services, for example. Other commands that may be serviced include (but are not limited to) flush, unmap, copy offload. The virtual disk also has its data manipulated via meta-operations <b>108</b>, described below, such as initiated by utility applications and/or operating system components and services. Example virtual disk meta-operations include those that create and delete snapshots, create and delete checkpoints, change where data is stored, delete unused data, modify de-duplication data structures, and so forth. As described below, an I/O handling mechanism <b>110</b> ensures correct disk semantics, including by handling conflicts such that older data cannot overwrite more recently written data, and such that older data is not read (e.g., from one layer) when newer data has been written (e.g., to another layer).</p>
<p id="p-0024" num="0023">The virtual disk <b>104</b> may be constructed from one or more layers (which may be files) of backing data, as represented in <figref idref="DRAWINGS">FIG. 1</figref> via the base layer <b>112</b> and differencing (diff) layer or layers <b>116</b>. Note however that a simple virtual disk may have only one &#x201c;layer&#x201d; of backing store data, with both reads and writes being serviced from this single layer. Note that as represented in <figref idref="DRAWINGS">FIG. 1</figref>, virtual disk I/O operations <b>106</b> are directed to the virtual disk <b>104</b>, while meta operations <b>108</b> may be directed to the virtual disk <b>104</b>, the diff layer <b>116</b>, and/or the base layer <b>112</b>.</p>
<p id="p-0025" num="0024">In general, a multiple-layer virtual disk has its contents formed by overlaying the diff layer (or layers) in a top-down order over the base layer, such that any data in the topmost diff layer is used when present, and if not, then the data of the next diff layer (if any) and so on, until the base layer data is reached. In one implementation, the base layer is read only, with any writes made to the topmost diff layer. Note that such layers may be on different physical storage devices, and that any given layer may also be distributed among more than one storage device.</p>
<p id="p-0026" num="0025">Each layer has a possibly-sparse representation of data that exists at offsets of the virtual disk <b>104</b>. When a read from the virtual disk occurs, the read is translated into corresponding reads of the backing data corresponding to the requested virtual block device offset range. Note that if the backing data is sparsely represented, it is possible that a read will be from one or more offsets that do not currently have any backing store data, in which event the read may be serviced by filling the read buffer with zeroes. Writes are serviced by translating virtual disk offsets and performing corresponding writes to the backing data, possibly requiring a new region of backing data to be created before the new region is written.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 2</figref> is an example of a virtual disk <b>220</b> with two layers <b>222</b> and <b>226</b>, namely a base layer <b>222</b> overridden by a diff layer <b>226</b> at any offset range where the diff layer <b>226</b> has data. The virtual disk contents are thus formed by using the data of the diff layer <b>226</b> wherever such data exists, and then using the data of the base layer <b>222</b> when no diff layer data exists. The diff layer contains the written data. Note that it is feasible to write the diff layer's data back to the base layer if the base layer is not read-only; once a region of the diff layer is written back to the base layer, the diff layer region may then be deleted if desired.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 3</figref> shows a virtual disk <b>330</b> with three layers. In addition to a diff layer <b>336</b> that represents the write data, and an underlying base layer <b>332</b>, this virtual disk <b>330</b> includes a caching layer <b>334</b>. The caching layer <b>334</b> may be used to represent some or all of the data copied from or previously read from the base layer <b>332</b>; for example if the base layer is remotely located, more efficient access may be obtained by reading the local cache layer <b>334</b> wherever it has data, and only accessing the base layer when the local cache layer <b>334</b> does not have data. A read may be partially from the caching layer <b>334</b> and partially from the base layer <b>332</b>, or partially from the diff layer <b>336</b>, partially from the caching layer <b>334</b> and partially from the base layer <b>332</b>.</p>
<p id="p-0029" num="0028">Other layering arrangements may be implemented. For example, there may be multiple layers in time order comprising snapshots of the virtual disk data as it existed at various times, such as a base layer at time T<b>0</b>, one or more diff layers at time T<b>1</b>-Tn that are snapshotted into one or more read-only diff layers, and a topmost diff layer that tracks current writes since the last snapshot. The stacking order of diff layers need not correspond to the time order in which the snapshots were created. Writes may be allowed to middle diff layers by first copying any ranges present in the targeted diff layer that are not already present in the adjacent (further toward the top in this description) diff layer into the adjacent diff layer, before the write is allowed to proceed.</p>
<p id="p-0030" num="0029">In any arrangement including those of <figref idref="DRAWINGS">FIG. 2</figref> or <figref idref="DRAWINGS">FIG. 3</figref>, data in each diff layer overrides data in any lower layer, down to the base layer, offset by offset. In other words, if the topmost diff layer has data for a given offset, that data is the official data for that offset of the virtual storage device, regardless of what any other layer (including the base layer) contains for that offset. The other layer or layers may be used, in a top-down ordering, to service reads of any offsets not represented with data in the topmost diff layer. If no layer has data for a given offset, reads at that offset will return zeros. Reads may be serviced partially from one layer, and partially from a lower layer, depending on which parts of the read range is represented in each layer. Writes are serviced entirely by writing to the topmost diff layer, although they also may be propagated back to other layers (including the base layer) if desired, as long as any such layer is not read-only in a given implementation. In such write-through cases, the layers above the write-through layer need to have the corresponding virtual disk offset removed, or written with the same data as the write to the write-through layer.</p>
<p id="p-0031" num="0030">As described herein, the virtual disk data may be manipulated by meta-operations while the virtual disk is concurrently being used as a disk for I/Os. Correct disk semantics are maintained by having the I/O handling mechanism <b>110</b> prevent meta-operation manipulation writes of data backing a virtual disk offset range concurrent with virtual disk writes of an overlapping virtual disk offset range. Virtual disk reads and writes are thus protected from changes made by meta-operations.</p>
<p id="p-0032" num="0031">Meta-operation manipulation may comprise copying, moving, deleting, compressing, or other operations on virtual disk data. Another potential meta-operation is per-block cryptographic signing. One example purpose of copying or moving can be to merge data from a diff layer into a base layer. An example purpose of deleting is to remove data which is no longer used by a file system residing on the virtual disk. De-duplication is another meta-operation that reduces redundant data, for example.</p>
<p id="p-0033" num="0032">Note that different meta-operations can work through their portion of virtual disk data in different ways. For example, a merge meta-operation may process virtual disk data in virtual disk offset order, whereas a layer-copy operation may work through virtual disk data in storage-location order, such as in file-storage-location order or file system cluster storage location order.</p>
<p id="p-0034" num="0033">By way of a particular example &#x201c;merge&#x201d; meta-operation, consider a disk with two layers as in <figref idref="DRAWINGS">FIG. 2</figref>. In general, the merge meta-operation writes diff layer data to the base layer <b>226</b>, and then deletes that diff layer data, resulting in a base layer that represents the virtual disk in each merged region. Because a disk offset is a one-dimensional quantity, the virtual disk contents <b>220</b> represent only a one-dimensional sequence of data blocks present on the virtual disk, and the diff layer can overlay and replace some of the data blocks.</p>
<p id="p-0035" num="0034">A merge operation normally fuses the data such that the diff layer's data overwrites anything on the base layer <b>222</b> in the same virtual disk offset location. To achieve this, an actual sequence of operations for merge is to read a block that is present in the diff layer <b>226</b>, write that block of data to the base layer <b>222</b>, and delete the block from the diff layer <b>226</b>. However, consider that at the same time, a disk write to the virtual disk is issued to the block's location on the virtual disk. If the merge operation is not ongoing, then the write as is typical gets written to the diff layer <b>226</b>, overwriting anything that was in the diff layer <b>226</b>. This data then supersedes (overrides) anything that is in the base layer <b>222</b> at that location.</p>
<p id="p-0036" num="0035">During a merge meta-operation, writes may be configured to target either the diff layer or the merge target layer (which in this example is the base layer). If the virtual disk write targets the diff layer, a problem arises if newly written data is lost because of the merge meta-operation, e.g., if the order of sub-operations is as follows:</p>
<p id="p-0037" num="0036">1) The merge meta-operation reads any old data from the diff layer.</p>
<p id="p-0038" num="0037">2) A virtual disk write overwrites data in the diff layer with new data.</p>
<p id="p-0039" num="0038">3) The merge meta-operation writes the old data to the base layer.</p>
<p id="p-0040" num="0039">4) The merge meta-operation deletes the new data from the diff layer.</p>
<p id="p-0041" num="0040">In an alternative example, written data may be lost because of a merge meta-operation when virtual disk writes are configured to write to the base layer (instead of the diff layer):
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0041">1) The merge meta-operation reads old data from the diff layer.</li>
        <li id="ul0002-0002" num="0042">2) A virtual disk write writes new data to the base layer.</li>
        <li id="ul0002-0003" num="0043">3) The virtual disk write also deletes any data in the diff layer whereby no data exists in the diff layer (so that there is no diff layer data that can supersede the newly written data).</li>
        <li id="ul0002-0004" num="0044">4) The merge meta-operation writes the old data to the base layer (and thus overwrites the new data written by the virtual disk write).</li>
        <li id="ul0002-0005" num="0045">5) The merge meta-operation tries to delete old data from the diff layer (although there is none).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0042" num="0046">Note that these are only two possible variations of example problems inherent in performing meta-operations at the same time as virtual disk writes. Further note that one approach to solving such problems is to simply prevent meta-operation reads and writes from occurring concurrently with virtual disk reads and writes, regardless of read versus write, and regardless of whether the operations share any sectors in common. However, this approach is unnecessarily conservative, and unnecessarily slows down (or stops) virtual disk I/O for the duration of the overall meta-operation.</p>
<p id="p-0043" num="0047">To avoid these problems, the I/O handling mechanism <b>110</b> allows a meta-operation virtual disk I/O to operate on the same virtual disk at the same time as other writes, but not at the same offset of the virtual disk <b>104</b> at the same time. In one implementation, the I/O handling mechanism <b>110</b> does not allow a meta-operation and a virtual disk I/O to concurrently access (perform any concurrent reading or writing of) the same offset/region of the virtual disk. In other words, meta-operation reads and writes are prevented from occurring concurrently with virtual disk reads and writes that share sectors (or the like) in common. This only impacts performance on virtual disk I/Os that actually overlap currently-in-progress meta-operation I/Os, however it still may be unnecessarily conservative and slows down virtual disk I/O to an extent.</p>
<p id="p-0044" num="0048">In another implementation, only writes that are targeting the same diff layer and share sectors in common are prevented from occurring concurrently. In other words, the I/O handling mechanism <b>110</b> allows concurrent reading at the same offset, that is, it allows both a meta-operation and a virtual disk I/O to read data from the same offset of the virtual disk at the same time. As can be readily appreciated, allowing concurrent reading is somewhat more complex, but also more performant. Reads can thus occur concurrently with other reads and writes, regardless of layer. Writes can occur concurrently to the same sector of different diff layers (which matters for an implementation with three total layers, as writes to the middle layer can proceed concurrently with writes to the topmost diff layer).</p>
<p id="p-0045" num="0049">In one concurrent reading implementation, operation steps that involve both reads and writes, in which the read is performed before the write, may first acquire an offset range of the virtual disk for read, then upgrade the access to write before performing writes. One example of such an operation step is a merge step, in which data is read from a diff layer of a virtual disk, and then written to a parent (e.g., the base) layer of a virtual disk at the same virtual disk offset. Another example is a virtual disk read I/O, which reads from a parent layer and directly triggers an ongoing meta-operation to write the read data back to a higher (&#x201c;closer&#x201d;) layer of the virtual disk as part of an ongoing data movement meta-operation.</p>
<p id="p-0046" num="0050">In the situation where two operation steps both try to upgrade an offset range from read to write, the upgrade attempt is failed, because the purpose of an upgrade is to avoid intervening writes by anything else, and both cannot be given that privilege. The first upgrade attempt &#x201c;wins&#x201d; in the sense that the first upgrade attempt eventually succeeds, while other upgrade attempts fail.</p>
<p id="p-0047" num="0051">When an access upgrade attempt fails, the operation step is skipped or reattempted. A skip is appropriate in cases where the step is performed opportunistically, whereas a reattempt is appropriate when the step is performed as part of a sweep over a specific portion of the virtual disk data, such as a layer of the virtual disk.</p>
<p id="p-0048" num="0052">Depending on the implementation, it may be necessary to explicitly exclude concurrent reads to the same sector of the same diff layer that is currently being written, because that data is not yet fully present. This may be implicitly ensured by not marking the sectors as present in the relevant diff layer until the write to that diff layer is complete. In an alternate implementation, virtual disk reads are not granted an offset range for virtual disk read until meta-operation writes are complete.</p>
<p id="p-0049" num="0053">Any portion of a meta-operation write that becomes irrelevant (covered) by a diff layer write cannot overwrite data in that covering diff layer. This needs to be dealt with in the two-layer arrangement. Note that data already covered by a diff layer write (probably) will not be read from the base layer. However, once a &#x201c;read-from-base-then-write-to-diff&#x201d; operation begins, the read from base will proceed, potentially concurrently with virtual disk writes to overlapping sectors. Once the base layer read has completed, the write to the diff layer occurs normally.</p>
<p id="p-0050" num="0054">This write-to-diff portion of the operation needs to first acquire a write lock on the relevant sectors of the diff layer on which the write is being attempted. After the write lock is acquired, which guarantees that no virtual disk writes or conflicting reads are currently in-progress to the diff layer, the diff layer is re-checked. If a sector of the diff layer is populated, meaning that the sector of the virtual disk was written to, the meta-operation data for that sector cannot be written to the diff layer and instead is discarded. This determination is made sector-by-sector in an appropriate implementation.</p>
<p id="p-0051" num="0055">If the implementation is such that diff layers are maintained at a larger granularity than per-sector, then a virtual disk write to a diff layer cannot occur until the corresponding block has been first copied from the base layer. This is additional overhead incurred the first time a virtual disk write to a block occurs, however it simplifies the locking because such operations need only consider whether a diff layer is populated on a per-block basis instead of a per-sector basis. It can be appreciated that the granularity of locking may be different than the granularity of writing; in other words locking may operate on larger offset ranges than the offset range size of a single virtual disk sector.</p>
<p id="p-0052" num="0056">As a further optimization, in contrast to typical &#x201c;reader-writer locks&#x201d;, the concurrency-prevention mechanism of the I/O handling mechanism <b>110</b> allows multiple writes to occur concurrently, as long as all the writes are from the same source (meta-operation or virtual disk I/O). In other words, the &#x201c;writer&#x201d; is not a single virtual disk write, but instead comprises the existence of at least one virtual disk write to the offset range, and possibly more than one.</p>
<p id="p-0053" num="0057">Further contrasting this mechanism from a typical &#x201c;reader-writer lock&#x201d; is the way the mechanism works with offset ranges. Rather than a single lock, range-based data structures may be used to track the type of access that has been granted, the pending requests for access, and the number of sub-operations (reads or writes) that need to release their access before an access reevaluation can occur. Note that typical reader-writer locks block a thread of execution waiting for access to be granted. In contrast, the mechanism described herein does not block threads, but rather queues pending operations to a list of operations to be continued when access is granted. This facilitates a more efficient use of operating system threads.</p>
<p id="p-0054" num="0058">Another optimization is to only prevent concurrency of writes when the virtual disk write can potentially be damaged by the manipulation write. In some cases, a meta-operation write cannot possibly impact a virtual disk read or write, and cannot improperly override any read or write. In these cases, and only these cases, this optimization allows the meta-operation write to proceed concurrently with a virtual disk I/O (read or write).</p>
<p id="p-0055" num="0059">In one implementation, meta-operation manipulations that potentially impact the entire virtual disk, such as re-linking of virtual disk layers, are treated as an access request for a &#x201c;special&#x201d; range that always intersects all other ranges. An alternate implementation may use a separate reader-writer lock to prevent virtual disk I/O while changes are made to the arrangement of virtual disk layers.</p>
<p id="p-0056" num="0060">Virtual disk writes can be configured to target a particular storage file or device, such as representing a virtual disk layer. A virtual disk write may target a lower layer by deleting from a higher (&#x201c;closer&#x201d;) layer and writing to a lower layer, or by writing to both layers.</p>
<p id="p-0057" num="0061">In the above-described case of having virtual disk I/O written to a base layer while a merge meta-operation is in progress, when a &#x201c;deep write&#x201d; writes to both a diff layer and base layer, this deep write is treated as a meta-operation itself, because the deep write cannot be performed concurrently with another virtual disk write to the same offset range. Allowing two deep writes to proceed concurrently potentially would result in the diff layer and base layer containing different data for the same offset. If this occurred in a region of the virtual disk that has already been merged, then there are incorrect semantics of the merge results, because a merge is meant to result in a base layer that represents a virtual disk with the same data as the virtual disk represented by the diff layer. If not prevented, this could subsequently result in the contents of the virtual disk changing spontaneously when the diff layer is removed, without any virtual disk write being active, which would violate disk semantics.</p>
<p id="p-0058" num="0062">Turning to another aspect, virtual disk meta-operations may take a long time to complete because of the amount of data involved. For example, when copying virtual disk data to a new machine, one approach is to copy all of the virtual disk data from a source machine to the new machine, however copying all the data may not always be necessary.</p>
<p id="p-0059" num="0063">In one aspect, virtual disk manipulation may manipulate only a portion of the virtual disk data (in contrast to all the virtual disk data). By way of example, various arrangements of virtual disk data are possible, and many of these arrangements split the virtual disk data into logical groups. For performance reasons, a meta-operation may be only performed on some of the data, as delineated by the groups, wherein group may refer to a virtual disk layer, or one part of a replicated (e.g., mirrored) portion of a virtual disk. For example, consider that some virtual disk data is available from more than one source, such as a remote storage device and a shared storage device. If it is more efficient to access the shared storage device, then there is no need to copy the data from the remote storage device.</p>
<p id="p-0060" num="0064">Thus, the manipulation may operate only on data that is not already efficiently accessible from a specific machine, such as a copy operation that copies only data which is not already efficiently available to the destination machine. In this context, &#x201c;efficiently accessible&#x201d; and &#x201c;efficiently available&#x201d; refer to the relative speed and latency with which a specific machine, typically the destination machine of a copy or move operation, can access portions of the virtual disk. For example, a virtual disk may have two layers, where the base layer is stored on a server accessible to both a source and destination machine. A diff layer may be stored on a locally-attached drive of the source machine. The destination machine may be able to access the diff layer stored on the source machine's local drive, but it is relatively slow and inefficient because it requires ongoing handling by both the source and destination machines.</p>
<p id="p-0061" num="0065">In contrast, the base layer is equally accessible to both source and target machine. In this example, the diff layer is moved, but the base layer is not moved. The source and destination machines may both participate in the move of the diff layer. Once the diff layer is moved, the destination machine has a local copy of the diff layer, and can access the base layer on the commonly-accessible server, just as the source machine can.</p>
<p id="p-0062" num="0066">The manipulation of virtual disk data may not manipulate all layers of a virtual disk. In other words, a meta-operation need not touch all the virtual disk data for the described mechanisms to apply to the meta-operation. By way of one example, a diff layer may be defragmented independent of whether the base layer is also defragmented. As another example, consider that Machine A uses a virtual disk comprising a locally-stored diff layer and a remotely-stored base layer. While the disk is in use, the data in the remote base layer is copied locally to machine A, without disturbing the diff layer. Once the copy has completed, the remote base layer is no longer needed by the virtual disk. Data written by machine A is written to the diff layer, allowing the copy of the base layer data to proceed with less interference from virtual disk writes.</p>
<p id="p-0063" num="0067">As yet another example, consider merging two virtual disk layers. Adjacent layers are not impacted by the merge operation, and if the merging layers are separate from the layers that service virtual disk writes, then the merge and the virtual disk writes can proceed concurrently on the same virtual disk offsets.</p>
<p id="p-0064" num="0068">Still another example is a copy (or move) manipulation where only one layer of a virtual disk is copied (or moved). A move can be achieved by copying the entire layer then deleting the source layer, or it can be achieved by repeatedly copying a sub-part of the source layer, then deleting that sub-part of the source layer. In this event, the virtual disk layering mechanism services reads from the layer by using data from the source or destination (whichever has data), and services writes to the layer by forcing a move or delete of the corresponding virtual disk offset range in the source, then putting the written data in the destination location.</p>
<p id="p-0065" num="0069">The manipulation of virtual disk data may only operate on data that is read by the machine currently using the virtual disk. If a machine is using a base layer that is stored remotely, the base layer reads can take a long time to service because the data needs to be transferred from remote storage. Also, the remote storage may be servicing many machines, which can further decrease performance due to high load levels on the storage.</p>
<p id="p-0066" num="0070">If virtual disks are only very occasionally created for use, then an appropriate solution may be to copy the entire base layer to local storage. Once this is done, no more reads need to be serviced from remote storage, increasing performance and lowering the load on the remote storage.</p>
<p id="p-0067" num="0071">However, if virtual disks are created often, the load created on the remote storage (and communications infrastructure) resulting from copying the entire base layer can overwhelm any savings due to eventually having all the base layer data stored locally. In this situation, an appropriate solution may be to have the virtual disk remain dependent on the remote base layer, but opportunistically write-back (e.g., locally cache) any data read from the remote location to local storage as part of servicing the virtual disk read. Note however that the buffer being used to read the data from storage may be writable by a less-trusted process, so a memory copy may be needed to isolate the virtual disk read from the remote read and local write. Also, as described herein, the local write is considered a meta-operation write for synchronization purposes and is not allowed to proceed concurrently with any virtual disk write or read from the same layer.</p>
<p id="p-0068" num="0072">The technology described herein also coordinates the servicing of virtual disk I/Os and performance of meta-operations so that a meta-operation does not take an unbounded amount of time, thereby limiting the impact of a meta-operation on virtual disk I/O, and to ensure that a meta-operation does not unreasonably interfere with other data traffic.</p>
<p id="p-0069" num="0073">This may be achieved via a number of mechanisms, including that the communications channel(s) used to perform manipulation of data, and the communications channel(s) used to service virtual disk reads and writes, may be separate. Separate communication channels can help reduce the impact of the meta-operation on other data traffic, including virtual disk I/O traffic. The channels also may change before manipulation of virtual disk data is complete. Note that the manipulation of data is independent of any data transport and may use any data communications technology, whether intended for local or networked use, such as Ethernet, Fibrechannel, wireless networking, SATA, SAS, and so forth.</p>
<p id="p-0070" num="0074">Although separate communications channels may be used for performing a meta-operation and servicing virtual disk I/Os, synchronization of writes is still maintained. Also, communications traffic generated in manipulating data may be throttled or prioritized to explicitly manage the degree of disruption to other communications traffic sharing the same communications medium.</p>
<p id="p-0071" num="0075">For example, meta-operation-related communications traffic can be throttled so that less network capacity is used for meta-operation I/Os. This reduces the impact on other traffic, but may also unnecessarily slow down meta-operation progress. An alternative approach is to tag the meta-op I/O data traffic with a lower traffic priority than other data traffic, provided the appropriate network infrastructure is available. To ensure some progress is made on the meta-operation, some amount of throttled meta-operation I/O traffic may be tagged with normal priority. The end result of tagging with lower priority is that otherwise unused network capacity is used to make progress on &#x201c;background&#x201d; meta-operations. Foreground meta-operations that are performed as part of a virtual disk I/O are tagged with normal priority to avoid stalling virtual disk I/O behind other normal priority traffic.</p>
<p id="p-0072" num="0076">Meta-operation reads and writes may be throttled or prioritized to explicitly manage the performance impact of a meta-op on virtual disk I/O (reads and writes) and other storage I/O (reads and writes). Whether or not a shared network is used, there is also a performance impact on the storage device itself due to the meta-operation. This may be mitigated in a manner similar to network usage, e.g., the meta-operation I/Os may be throttled, or they may be explicitly prioritized against other I/O on the same storage device to allow the storage device to remain responsive for other I/O.</p>
<p id="p-0073" num="0077">In general, virtual disk reads have priority over meta-operation I/Os. However, at times virtual disk writes may be throttled, such as to avoid any situation in which ongoing virtual disk writes may potentially prevent virtual disk manipulation from ever completing. For example, a tree of diff files may be built by snapshotting each diff file that contains the writes, and creating a new diff file for any new writes; this may be done to move the diff files (and possibly the base file) to a destination device, with the goal of having smaller and smaller diff files over time such that the last move of the (relatively small) diff file containing the most recent writes is rapidly moved. However, if the writes are coming in too quickly, a newer diff file may grow relative to the snapshotted diff file instead of shrinking, whereby the goal may never be achieved. Throttling the writes prevents such growing. When the manipulation of virtual disk data is the moving or copying of data from a source to a destination, this throttling can include &#x201c;writing through&#x201d; virtual disk writes to the destination, to prevent a virtual disk write from creating additional work for the virtual disk manipulation faster than the virtual disk manipulation can complete work.</p>
<p id="p-0074" num="0078">The throttling of virtual disk writes may be different from throttling meta-operation I/Os. When throttling meta-operation I/Os, a general goal is to reduce the impact of the meta-operation on other I/Os and other network traffic. In contrast, virtual disk write throttling applies to virtual disk I/Os rather than meta-operation I/Os. If virtual disk I/Os were allowed to proceed at their maximum rate, in some cases the virtual disk I/O may undo some of the progress made by a meta-operation. If virtual disk writes are able to undo progress faster than the meta-operation can make progress, the meta-operation will likely not complete.</p>
<p id="p-0075" num="0079">One example is a merge of data from a diff layer into a base layer. If the merge meta-operation is moving data from the diff layer into the base layer, and virtual disk writes are still directed to the diff layer, then it may be possible for virtual disk writes to write to the diff layer faster than the meta-operation can move data from the diff layer to the base layer. In this case, the meta-operation may never finish.</p>
<p id="p-0076" num="0080">Another example is a copy of a layer from one location to another, with ongoing virtual disk writes to the same layer. In this case, virtual disk writes to the source location may out-pace the copying of data from source location to target location.</p>
<p id="p-0077" num="0081">Various ways to address this situation may be considered to be a form of throttling of virtual disk writes. One way is to enforce that virtual disk writes never &#x201c;undo&#x201d; work already done by a meta-operation, by adjusting the target location for virtual disk writes to write to the &#x201c;destination&#x201d; location instead of, or in addition to, any &#x201c;source&#x201d; location. In the first example above of a merge, this means the virtual disk write targets the base layer instead of the diff layer. This requires that the virtual disk write also &#x201c;un-cover&#x201d; the base layer in the offset range changed by the write, by deleting data from the diff layer. In the second example above of a layer copy operation, the virtual disk write is written to both the source and destination locations. This ensures that any already-copied regions of the virtual disk remain identical as further writes occur.</p>
<p id="p-0078" num="0082">An alternative way to address the situation is to explicitly throttle virtual disk writes. This ensures that the meta-operation will eventually win over virtual disk writes. In one implementation, a virtual disk write &#x201c;allowance&#x201d; value is maintained per virtual disk, which starts with a small value (not quite zero) to avoid stalling virtual-disk writes as the meta-operation is getting started. Every time a certain amount of progress is made by the ongoing meta-operation, the allowance number is increased by some amount, e.g., less than the initial value. When a virtual disk write is initiated, the write first acquires some allowance before it can be issued. If the allowance value is too near zero, the virtual disk write waits in line until the allowance value is sufficiently large to allow the virtual disk write to allocate some of the allowance, and then proceeds. While the allowance value is below a pre-set threshold, the meta-operation is allowed to run non-throttled to build up the allowance value and avoid overly slowing down any ongoing virtual disk writes. In this alternate solution, the virtual disk writes also inform the ongoing meta-operation of any written regions in the source layer, because the meta-operation may have already processed those regions, and now needs to process them again to account for the changes made by the virtual disk write. In a further alternate implementation, an amount of extra data (extra work) produced by virtual disk writes and not yet processed by the ongoing meta operation is tracked, and virtual disk writes are throttled to prevent this amount of extra data produced by virtual disk writes and not yet processed by the ongoing meta operation from growing beyond a set limit. The meta-operation can process a portion of the extra data produced by writes to reduce the tracked value, such that virtual disk writes can again proceed.</p>
<p id="p-0079" num="0083">Note that in the &#x201c;never-undo-work&#x201d; approach, a virtual disk write may need to target remote storage instead of local storage, which increases the latency of virtual disk writes, and thereby unnecessarily reduces performance. In the &#x201c;explicitly-throttle-virtual-disk-writes&#x201d; approach, sometimes the meta-operation is able to stay sufficiently ahead of virtual disk writes such that virtual disk writes can immediately proceed without waiting for remote writing of data to complete. This allows virtual disk writes to target local storage with low latency, improving performance. For workloads that tend to issue virtual disk writes one at a time, this approach may be particularly useful. The meta-operation may be able to achieve higher throughput writing to remote locations because it may be able to issue many writes concurrently, better hiding the latency of remote storage.</p>
<p id="p-0080" num="0084">A virtual disk meta-operation may change the set of files or devices used to store virtual disk data. When this change occurs, in general, the I/O handling mechanism begins holding any I/Os that may use the old storage file or device, waits for in-flight I/Os using the old storage file or device to complete, changes to use the new storage file or device, and stops holding I/Os (letting them be processed again).</p>
<p id="p-0081" num="0085">More particularly, depending on the meta-operation, the I/O handling mechanism takes different approaches. A first approach is to begin holding any I/Os that may use the old storage file or device, wait for in-flight I/Os using the old storage file or device to complete, change data structures to use the new storage file or device, stop holding I/Os (letting them be processed again), and cleans up the old file or device (because it is no longer in-use by any I/O).</p>
<p id="p-0082" num="0086">Another approach begins holding any I/Os that may use the old storage file or device, waits for I/Os that are being initiated to the old storage file or device to be done initiating, changes data structures to use the new storage file or device for newly-initiating I/O, stops holding I/Os (letting them be initiated again), waits for old I/O that was using the old storage file or device to be completed, and then cleans up the old file or device (because it is no longer in-use by any I/O). This other approach is somewhat more complex, but has less impact on performance, and is only usable for meta-operations that do not write to any data being operated on, or meta-operations that write to all copies of any data being operated on, or layers that service virtual disk reads but not writes. The first approach works for any meta-operation.</p>
<p id="p-0083" num="0087">Turning to another aspect, virtual disk meta-operations may manipulate de-duplication data structures to achieve accelerated performance of the meta-operation. In general, by manipulating de-duplication data structures, a logical copy of data can be performed without actually copying any data. A move offload of the data can directly provide benefits by being placed in a low-level transaction along with other storage operations. Alternately, a logical move of the data can be achieved by performing a copy-update-delete in a logical transaction implemented outside the storage device. Such copy offload or move offload operations may be available for use by virtual disks in whole or part (as determinable via commands in SCSI and Fibrechannel protocols). Note that a move deletes the source data, whereas a copy does not, instead leaving deletion as an option. For example, a transaction implemented outside the storage device may be set up to &#x201c;move&#x201d; data by &#x201c;copy-update-delete&#x201d; operations, and the operation can go back to the source data if the transaction fails. Note that delete is an unmap (SCSI) or a trim (ATA) as appropriate for the underlying storage.</p>
<p id="p-0084" num="0088">Copy offload copies blocks, which along with moving blocks or deleting blocks is very efficient because it basically adjusts pointers rather than copying the data itself. In one implementation, if a meta-operation may be done by copy offload (or at least in part), then the meta-operation leverages this feature.</p>
<p id="p-0085" num="0089">A number of virtual disk meta-operations can benefit from the underlying de-duplication capability of the hardware and/or software, including compaction, defragmentation, merge, and convert (that is, to a new layout, such as with different block sizes). Other operations include &#x201c;lift&#x201d; and &#x201c;drop&#x201d; operations, which are related to converting one virtual disk representation to another, e.g., a logical unit to a VHD file (lift), or vice versa (drop).</p>
<p id="p-0086" num="0090">For example, consider defragmentation of a virtual disk with one or more layers above a base physical layer. In such a stack of layers, there may be many ways that a virtual disk may be fragmented, e.g., as part of a file system, in blocks, in a hosting system, and so on. A scramble map basically is used to track how the data is actually arranged versus how the data is to be arranged once defragmented. Heretofore, defragmentation was done by actual copying of the data based upon the scramble map, which often resulted in copying the same data more than once as each layer was defragmented.</p>
<p id="p-0087" num="0091">If copy offloads (or move offloads) are used instead, e.g., from the topmost layer down to the base physical layer, layers above the base physical layer may be defragmented by data structure manipulation, without any copying of the actual data. This is very rapid, and is accomplished without severely impacting performance. Note that as each layer is defragmented, the scramble map of one or more lower layers changes, and copy offload defragmentation effectively pushes the scramble map down one layer (or more), until only the base physical layer is scrambled. Then, the only actual data copying (or moving) is done at the base physical layer, which can be scheduled in whole or in part as desired.</p>
<p id="p-0088" num="0092">Another meta-operation that benefits from copy or move offload is when converting one virtual disk representation to another. For example, <figref idref="DRAWINGS">FIG. 4</figref> shows converting blocks (B<b>1</b> and B<b>2</b>) to a different block size (B<b>1</b>+B<b>2</b>). This may be done without copying data, but rather by manipulating pointers to logically combine the two blocks into a single block. Note that certain forms of virtual disk metadata (as well as payload data) may also be involved in such a zero-physical-copy conversion using this technique, such as sector bitmaps.</p>
<p id="p-0089" num="0093"><figref idref="DRAWINGS">FIG. 5</figref> shows another set of meta-operations, namely lift and drop, which converts a set of related virtual disk layer files to or from a de-duplication-capable storage pool, avoiding the need for copying bulk data, and pre-establishing logically duplicated data. In general, this provides for using the advantages provided at different layers, such as by dropping to the lower (block) layer to do some work, and then lifting back up to a higher (file) layer for ease of management.</p>
<p id="p-0090" num="0094">By way of example, a virtual disk may have more than one representation, corresponding to nested logical units, e.g., a LUN below a VHD (virtual hard disk) formatted file (or a file of another format). In actuality, the units have different data structures, but share the same underlying storage for the data payload. Lift or drop using copy or move offload basically changes one to the other, and because of the sharing, performs the lift or drop by simply changing de-duplication data structures so that the pointers point to the correct offsets.</p>
<p id="p-0091" num="0095">Note that along with payload, metadata may be also dropped and lifted, e.g., an alternate payload stream, or bitmaps. Moreover, some or all of the metadata may be persisted, such as to recreate the layers, including metadata, as they existed at a given time.</p>
<p id="p-0092" num="0096"><figref idref="DRAWINGS">FIG. 6</figref> summarizes general example operations of handling a write, beginning at step <b>602</b> where a write to a virtual disk is received. Step <b>604</b> determines whether the write is concurrent with any other write to overlapping layers at a same virtual disk offset range. If not, step <b>604</b> branches to step <b>608</b> and the write is allowed. Note that this may be done by queuing pending operations to a list of operations to be continued when access is granted as described above.</p>
<p id="p-0093" num="0097">Step <b>606</b> is an optional step that provides for some optimizations if desired. In general, step <b>606</b> determines whether there is an exception that allows the meta-operation write. As described above, such possible exceptions include determining that the virtual disk write cannot be damaged by the write, determining that the write and the other write are from a same source, or determining that the write is to a closer layer and a targeted layer overridden by the closer layer. If there is an exception, step <b>606</b> allows the write at step <b>608</b>. Otherwise the write is prevented at step <b>612</b>; prevention may be accomplished by locking, or by marking/delaying, and queuing pending operations to a list of operations to be continued when access is granted as described above. The conflicting write completes at step <b>614</b>, and then the write previously delayed or marked pending is triggered at step <b>616</b>. The diagram shows the steps taken to process a single write, however it can be readily appreciated that other writes may be processed according to the steps in <figref idref="DRAWINGS">FIG. 6</figref> during the time interval between steps <b>612</b> and <b>614</b>.</p>
<p id="p-0094" num="0098"><figref idref="DRAWINGS">FIG. 7</figref> summarizes general example operations of handling meta-operation I/Os when the received I/O (step <b>702</b>) may be accomplished by de-duplication data structure manipulation, as determined by step <b>704</b>. If so, step <b>706</b> performs at least part of the meta-operation by such manipulation, e.g., via a copy offload operation, an update operation, a delete operation, and/or a move offload operation. Otherwise the meta-operation I/O is handled at step <b>708</b> in the prior, less efficient manner, e.g., by actual copying/moving/deleting data.</p>
<p id="h-0005" num="0000">Exemplary Operating Environment</p>
<p id="p-0095" num="0099"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example of a suitable computing and networking environment <b>800</b> on which the examples of <figref idref="DRAWINGS">FIGS. 1-7</figref> may be implemented. The computing system environment <b>800</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment <b>800</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment <b>800</b>.</p>
<p id="p-0096" num="0100">The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0097" num="0101">The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and/or remote computer storage media including memory storage devices.</p>
<p id="p-0098" num="0102">With reference to <figref idref="DRAWINGS">FIG. 8</figref>, an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer <b>810</b>. Components of the computer <b>810</b> may include, but are not limited to, a processing unit <b>820</b>, a system memory <b>830</b>, and a system bus <b>821</b> that couples various system components including the system memory to the processing unit <b>820</b>. The system bus <b>821</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.</p>
<p id="p-0099" num="0103">The computer <b>810</b> typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer <b>810</b> and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer <b>810</b>. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer-readable media.</p>
<p id="p-0100" num="0104">The system memory <b>830</b> includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) <b>831</b> and random access memory (RAM) <b>832</b>. A basic input/output system <b>833</b> (BI/OS), containing the basic routines that help to transfer information between elements within computer <b>810</b>, such as during start-up, is typically stored in ROM <b>831</b>. RAM <b>832</b> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit <b>820</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 8</figref> illustrates operating system <b>834</b>, application programs <b>835</b>, other program modules <b>836</b> and program data <b>837</b>.</p>
<p id="p-0101" num="0105">The computer <b>810</b> may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <figref idref="DRAWINGS">FIG. 8</figref> illustrates a hard disk drive <b>841</b> that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive <b>851</b> that reads from or writes to a removable, nonvolatile magnetic disk <b>852</b>, and an optical disk drive <b>855</b> that reads from or writes to a removable, nonvolatile optical disk <b>856</b> such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <b>841</b> is typically connected to the system bus <b>821</b> through a non-removable memory interface such as interface <b>840</b>, and magnetic disk drive <b>851</b> and optical disk drive <b>855</b> are typically connected to the system bus <b>821</b> by a removable memory interface, such as interface <b>850</b>.</p>
<p id="p-0102" num="0106">The drives and their associated computer storage media, described above and illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, provide storage of computer-readable instructions, data structures, program modules and other data for the computer <b>810</b>. In <figref idref="DRAWINGS">FIG. 8</figref>, for example, hard disk drive <b>841</b> is illustrated as storing operating system <b>844</b>, application programs <b>845</b>, other program modules <b>846</b> and program data <b>847</b>. Note that these components can either be the same as or different from operating system <b>834</b>, application programs <b>835</b>, other program modules <b>836</b>, and program data <b>837</b>. Operating system <b>844</b>, application programs <b>845</b>, other program modules <b>846</b>, and program data <b>847</b> are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer <b>810</b> through input devices such as a tablet, or electronic digitizer, <b>864</b>, a microphone <b>863</b>, a keyboard <b>862</b> and pointing device <b>861</b>, commonly referred to as mouse, trackball or touch pad. Other input devices not shown in <figref idref="DRAWINGS">FIG. 8</figref> may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <b>820</b> through a user input interface <b>860</b> that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor <b>891</b> or other type of display device is also connected to the system bus <b>821</b> via an interface, such as a video interface <b>890</b>. The monitor <b>891</b> may also be integrated with a touch-screen panel or the like. Note that the monitor and/or touch screen panel can be physically coupled to a housing in which the computing device <b>810</b> is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device <b>810</b> may also include other peripheral output devices such as speakers <b>895</b> and printer <b>896</b>, which may be connected through an output peripheral interface <b>894</b> or the like.</p>
<p id="p-0103" num="0107">The computer <b>810</b> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <b>880</b>. The remote computer <b>880</b> may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <b>810</b>, although only a memory storage device <b>881</b> has been illustrated in <figref idref="DRAWINGS">FIG. 8</figref>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 8</figref> include one or more local area networks (LAN) <b>871</b> and one or more wide area networks (WAN) <b>873</b>, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p>
<p id="p-0104" num="0108">When used in a LAN networking environment, the computer <b>810</b> is connected to the LAN <b>871</b> through a network interface or adapter <b>870</b>. When used in a WAN networking environment, the computer <b>810</b> typically includes a modem <b>872</b> or other means for establishing communications over the WAN <b>873</b>, such as the Internet. The modem <b>872</b>, which may be internal or external, may be connected to the system bus <b>821</b> via the user input interface <b>860</b> or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a WAN or LAN. In a networked environment, program modules depicted relative to the computer <b>810</b>, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 8</figref> illustrates remote application programs <b>885</b> as residing on memory device <b>881</b>. It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.</p>
<p id="p-0105" num="0109">An auxiliary subsystem <b>899</b> (e.g., for auxiliary display of content) may be connected via the user interface <b>860</b> to allow data such as program content, system status and event notifications to be provided to the user, even if the main portions of the computer system are in a low power state. The auxiliary subsystem <b>899</b> may be connected to the modem <b>872</b> and/or network interface <b>870</b> to allow communication between these systems while the main processing unit <b>820</b> is in a low power state.</p>
<heading id="h-0006" level="1">CONCLUSION</heading>
<p id="p-0106" num="0110">While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. In a computing environment, a system comprising, at least one processor, a memory communicatively coupled to the at least one processor and including components comprising, a virtual disk comprising at least two overlapping layers, and a mechanism configured to handle I/O of a meta-operation that manipulates data of the virtual disk concurrent with servicing virtual disk read and write I/O of the virtual disk, including by allowing at least one meta-operation write to a virtual disk offset range concurrent with a virtual disk write to an overlapping virtual disk offset range when the virtual disk write cannot be damaged by the at least one meta-operation write, or when at least two writes are from a same source.</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the meta-operation comprises copying, moving, deleting, merging, compressing, defragmenting, cryptographic signing, lifting, dropping, converting, or compacting virtual disk data.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the mechanism is further configured to prevent concurrent meta operation writes and virtual disk writes to the at least one overlapping layer at a same virtual disk offset range.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the meta-operation manipulates less than all of the virtual disk data.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the mechanism is further configured to coordinate the servicing of virtual disk I/Os with meta-operation performance to allow the meta-operation to complete, to control virtual disk reads and writes versus meta-operation reads and writes, or to control interference of the meta-operation with other data traffic, or any combination of allowing the meta-operation to complete, controlling virtual disk reads and writes versus meta-operation reads and writes, or controlling interference of the meta-operation with other data traffic.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the mechanism is further configured to throttle or prioritize, or both throttle and prioritize, virtual disk reads and writes to allow the meta-operation to complete.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the mechanism is further configured to throttle or prioritize, or both throttle and prioritize, meta-operation reads and writes to control interference with virtual disk reads and writes, or to control interference of the meta-operation with other data traffic, or to both control interference with virtual disk reads and writes and to control interference of the meta-operation with other data traffic.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein one or more communication channels used by the meta operation are separable or changeable, or both separable and changeable, with respect to one or more communication channels used in servicing the virtual disk reads and writes.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the meta-operation is performed at least in part by manipulating one or more de-duplication data structures.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the meta-operation manipulates the one or more de-duplication data structures to compact the virtual disk, defragment the virtual disk, merge two or more layers of the virtual disk, convert the virtual disk to a different layout, lift the virtual disk, or drop the virtual disk.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the meta-operation manipulates the one or more de-duplication data structures by at least one copy offload operation, at least one update operation, at least one delete operation, or at least one move offload operation, or any combination of at least one copy offload operation, at least one update operation, at least one delete operation, or at least one move offload operation.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the meta-operation copies or moves, or both copies and moves, both payload data and metadata.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. In a computing environment, a method employing at least one processor to perform steps comprising, receiving a meta-operation write at a virtual disk having at least two layers of backing data in time order, determining whether the meta-operation write is concurrent with any other write to overlapping layers at a same virtual disk offset range, and if not, allowing the write to proceed, and changing a set of one or more files or devices, used to store virtual disk data, to a new set, including:
<claim-text>holding I/Os that use the set of one or more files or devices, waiting for in-flight I/Os using the set of one or more files or devices to complete, changing to use the new set of one or more files or devices, and stopping holding of the I/Os to be processed with respect to the new set.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising, determining whether there is an exception that allows the meta-operation write, including determining that the virtual disk write cannot be damaged by the write, or determining that the write and the other write are from a same source, and if so, allowing the write, and if not, preventing the write.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising, throttling the write and other I/O of the meta-operation, or prioritizing the write and other I/O of the meta-operation, or both throttling and prioritizing the write and other I/O of the meta-operation to control interference with virtual disk reads and writes, or to control interference of the meta-operation with other data traffic, or both to control interference with virtual disk reads and writes and to control interference of the meta-operation with other data traffic.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising, throttling the servicing of virtual disk writes to allow a meta-operation that corresponds to the meta-operation write to complete.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref> further comprising if the meta-operation write is concurrent with a virtual disk write, preventing the meta-operation write unless the virtual disk write cannot damage the meta-operation write.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. One or more computer-readable storage media having computer-executable instructions, which when executed perform steps, comprising: receiving I/O corresponding to a meta-operation on a virtual disk; and determining whether the I/O can be handled by manipulating one or more de-duplication data structures, and if so, manipulating the one or more de-duplication data structures to perform at least part of the meta-operation on a virtual disk offset range concurrent with a virtual disk write to an overlapping virtual disk offset range when the virtual disk write cannot be damaged by at least one meta-operation write, or when at least two writes are from a same source.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The one or more computer-readable storage media of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the meta-operation manipulates the one or more de-duplication data structures to compact the virtual disk, defragment the virtual disk, merge two or more layers of the virtual disk, convert the virtual disk to a different layout, lift the virtual disk, or drop the virtual disk.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The one or more computer-readable storage media of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein manipulating the one or more de-duplication data structures comprises performing at least one copy offload operation, at least one update operation, at least one delete operation, or at least one move offload operation, or any combination of performing at least one copy offload operation, at least one update operation, at least one delete operation, or at least one move offload operation. </claim-text>
</claim>
</claims>
</us-patent-grant>

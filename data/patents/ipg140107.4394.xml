<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625466-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625466</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12777832</doc-number>
<date>20100511</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>713</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>12</main-group>
<subgroup>28</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>370256</main-classification>
<further-classification>370254</further-classification>
<further-classification>370255</further-classification>
</classification-national>
<invention-title id="d2e53">Multi-card network device appearing as single entity in spanning tree network</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7911981</doc-number>
<kind>B2</kind>
<name>Park et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370256</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8259569</doc-number>
<kind>B2</kind>
<name>Banerjee et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370230</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2006/0268749</doc-number>
<kind>A1</kind>
<name>Rahman et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370256</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0168671</doc-number>
<kind>A1</kind>
<name>Holness et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>IEEE Std 802.1D, IEEE Standard for Local and metropolitan area networks, Media Access Control (MAC) Bridges, Jun. 9, 2004, 281 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>G.S. Antonova, &#x201c;Spanning Tree Protocol Interoperability with Other Loop Prevention Algorithms,&#x201d; IEEE, 2007, pp. 1098-1101.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>IEEE Standard for Local and metropolitan area networks, Media Access Control (MAC) Bridges, Amendment 1: Bridging of IEEE 802.17, IEEE Std 802.17a-2004, Oct. 29, 2004, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>U.S. Appl. No. 12/692,091, filed Jan. 22, 2010, Miller et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>36</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110280159</doc-number>
<kind>A1</kind>
<date>20111117</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Miller</last-name>
<first-name>Ronald D.</first-name>
<address>
<city>Sausalito</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Miller</last-name>
<first-name>Ronald D.</first-name>
<address>
<city>Sausalito</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Shumaker &#x26; Sieffert, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Calix, Inc.</orgname>
<role>02</role>
<address>
<city>Petaluma</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Phillips</last-name>
<first-name>Hassan</first-name>
<department>2467</department>
</primary-examiner>
<assistant-examiner>
<last-name>Mais</last-name>
<first-name>Mark A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Techniques are disclosed that may allow a network device comprising multiple line cards that are each executing a spanning tree algorithm to appear as a single spanning tree protocol entity to other network devices within a bridged local area network (LAN). In one example, a method includes determining, via a first processor on a first card of a network device, a first superior local port on the first card, transmitting, from the first card to a second card of the network device, a data unit specifying the determined first superior local port, and determining, via a second processor on the second card, a superior port on the network device among the first superior local port and a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="214.71mm" wi="143.93mm" file="US08625466-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="207.01mm" wi="184.57mm" orientation="landscape" file="US08625466-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.21mm" wi="181.36mm" file="US08625466-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="256.96mm" wi="211.41mm" file="US08625466-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="246.72mm" wi="125.56mm" file="US08625466-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="237.74mm" wi="170.43mm" file="US08625466-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="261.45mm" wi="147.40mm" file="US08625466-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The disclosure relates to computer networks and, more particularly, to layer two computer networks utilizing spanning tree protocol.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">A computer network, e.g., a local area network (LAN), is a collection of interconnected computing devices that can exchange data and share resources. It is often desirable to divide a LAN into multiple segments in order to improve the performance of the LAN. Certain devices, such as layer 2 network devices, e.g., switches or bridges, may be used to interconnect LAN segments to one another. Such devices may improve the performance of the LAN by preventing packets that are not destined for devices on a particular segment from being forwarded to that segment.</p>
<p id="p-0004" num="0003">In addition to improving the performance of a LAN, the layer 2 network devices interconnecting LAN segments provide redundant pathways within the LAN. That is, the interconnection of the layer 2 network devices creates multiple pathways for packets to traverse the network. This redundancy is desirable in the event that one of the layer 2 devices becomes inactive, e.g., a device is taken out of service or otherwise becomes inoperative, thereby allowing another active link to carry packets between LAN segments. However, by providing redundancy, i.e., multiple pathways between LAN segments, unwanted loops may be created within the LAN.</p>
<p id="p-0005" num="0004">In order to break loops created within the LAN, the layer 2 network devices interconnecting the LAN segments may logically block one or more of their ports. In order to determine which ports to logically block, the layer 2 network devices interconnecting the LAN segments execute a spanning tree algorithm defined by a spanning tree protocol, e.g., a spanning tree protocol or rapid spanning tree protocol. A network administrator, for example, assigns a cost, or &#x201c;path cost,&#x201d; to each port on each layer 2 network device interconnecting the LAN segments. A path cost is the cost of a link on the spanning tree network that terminates a given port. For example, if a first link is further away from a root bridge than a second link, the first link may be assigned a higher path cost. Also, the technology of the link may be factored into the cost. For example, a link that is optical fiber may have a lower cost than a link that is copper, due to the generally faster transmission rates of optical fiber. In this manner, a cost is associated with each spanning tree link. The spanning tree protocol uses a spanning tree algorithm to determine which port(s) to logically block based on the associated path cost.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">In general, this disclosure describes techniques that may allow a network device comprising multiple line cards (or &#x201c;cards&#x201d;) that are each executing a spanning tree algorithm to appear as a single spanning tree protocol entity to other network devices within a bridged local area network (LAN). Each of these multiple line cards may operate an instance of the spanning tree algorithm in order to manage only the ports located directly on that card. By distributing the spanning tree processing across multiple line cards, network scalability may be improved as the quantity of ports that are supported increases.</p>
<p id="p-0007" num="0006">In one example, the disclosure is directed to a method that comprises determining, via a first processor executing a first instance of a spanning tree protocol on a first card of a network device, a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports, transmitting, from the first card to a second card of the network device, a data unit specifying the determined first superior local port among the first plurality of ports, and determining, via a second processor executing a second instance of the spanning tree protocol on the second card, a superior port on the network device among the first superior local port and a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports.</p>
<p id="p-0008" num="0007">In another example, the disclosure is directed to a network device comprising a first processor, executing a first instance of a spanning tree protocol on a first card of the network device, configured to determine a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports, and transmit, from the first card to a second card of the network device, a data unit specifying the determined first superior local port among the first plurality of ports. The network device further comprises a second processor, executing a second instance of the spanning tree protocol on a second card of the network device, configured to determine a superior port on the network device among the first superior local port and a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports.</p>
<p id="p-0009" num="0008">In another example, the disclosure is directed to a computer-readable storage medium comprising instructions that, when executed, cause a first processor to determine, by executing a first instance of a spanning tree protocol on a first card of a network device, a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports, and transmit, from the first card to a second card of the network device, a data unit specifying the determined first superior local port among the first plurality of ports. The instructions, when executed, cause a second processor to determine, by executing a second instance of the spanning tree protocol on the second card, a superior port on the network device among the first superior local port and a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports.</p>
<p id="p-0010" num="0009">In another example, the disclosure is directed to a network device comprising means for determining a first superior local port among a first plurality of ports on a first card of a network device based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports, means for transmitting, from the first card to a second card of the network device, a data unit specifying the determined first superior local port among the first plurality of ports, and means for determining a superior port on the network device among the first superior local port and a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports.</p>
<p id="p-0011" num="0010">The details of one or more aspects of the disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example computer network.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating an example network device comprising a line card that may be used to implement techniques of this disclosure.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the MAC bridge of <figref idref="DRAWINGS">FIG. 2</figref> comprising multiple line cards.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an example bridge protocol data unit message that may be used to perform a priority vector calculation in order to implement various techniques of this disclosure.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart illustrating an example method implementing various techniques of this disclosure.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart illustrating another example method implementing various techniques of this disclosure.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example computer network. Computer network <b>20</b> in <figref idref="DRAWINGS">FIG. 1</figref> represents an example bridged local area network (LAN). In some examples, network <b>20</b> may implement Ethernet networking techniques. In this case, network <b>20</b> may be an Ethernet network. Network <b>20</b> includes four nodes <b>22</b>A-<b>22</b>D. In this particular example, nodes <b>22</b>A-<b>22</b>D are Media Access Control (MAC) bridges. MAC bridges <b>22</b>A-<b>22</b>D (collectively referred to in this disclosure as &#x201c;bridges <b>22</b>&#x201d;) that interconnect four LAN segments <b>24</b>A-<b>24</b>D (collectively referred to in this disclosure as &#x201c;LAN segments <b>24</b>&#x201d;). Although referred to throughout this disclosure as bridges, bridges <b>22</b> may represent other layer 2 network devices, such as switches. Bridges <b>22</b> connect respective LAN segments <b>24</b> via links <b>26</b>. For example, LAN segment <b>24</b>A is connected to LAN segment <b>24</b>D through bridge <b>22</b>A via link <b>26</b>A and link <b>26</b>H. Similarly, LAN segment <b>24</b>A is connected to LAN segment <b>24</b>B through bridge <b>22</b>B via link <b>26</b>B and link <b>26</b>C, and so forth. In this manner, the various LAN segments <b>24</b> of network <b>20</b> are interconnected via bridges <b>22</b>.</p>
<p id="p-0019" num="0018">Interconnecting LAN segments <b>24</b> via bridges <b>22</b> may improve the overall performance network <b>20</b> by reducing collisions, for example. In addition to improving the performance of a LAN, bridges <b>22</b> provide redundant pathways within the LAN. That is, the bridges <b>22</b> create multiple pathways for packets to traverse the network. For example, using a first pathway, a packet transmitted from LAN segment <b>24</b>A to LAN segment <b>24</b>B may traverse link <b>26</b>B to bridge <b>22</b>B and bridge <b>22</b>B may forward the packet to LAN segment <b>24</b>B. Using a second pathway, a packet transmitted from LAN segment <b>24</b>A to LAN segment <b>24</b>B may traverse link <b>26</b>H to LAN segment <b>24</b>D, then traverse link <b>26</b>G to bridge <b>22</b>D, and so forth until the packet reaches LAN segment <b>24</b>B. This redundancy is desirable in case one of bridges <b>22</b> or one of links <b>26</b> becomes inactive, e.g., a bridge <b>22</b> is taken out of service or a link <b>26</b> is compromised, thereby allowing other active links and/or devices to carry packets between LAN segments. However, by providing redundancy, i.e., multiple pathways between LAN segments, unwanted loops are created within the LAN. If none of bridges <b>22</b> detects that data is looping the network, each bridge may continue to forward the traffic endlessly, thereby establishing a traffic loop, which may substantially impact the performance of the network by needlessly consuming network resources, such as bridge processing time and memory as well as link bandwidth.</p>
<p id="p-0020" num="0019">In order to break loops created within the LAN, each one of bridges <b>22</b> may execute a spanning tree algorithm defined by a spanning tree protocol, e.g., Spanning Tree Protocol and Rapid Spanning Tree Protocol, in order to determine which of their ports to logically block. That is, a block is placed within a data path to prevent a loop. A network administrator, for example, assigns a cost, or &#x201c;path cost,&#x201d; to each port on each bridge <b>22</b> interconnecting LAN segments <b>24</b>. A path cost is the cost of a link <b>26</b> on the spanning tree network that terminates a given port.</p>
<p id="p-0021" num="0020">In order to assign path costs, one of bridges <b>22</b> is selected as the root bridge for the network. Each of bridges <b>22</b> is assigned a bridge identifier (ID). The bridge ID includes two numbers: a Media Access Control (MAC) address and a bridge priority. The bridge priority is a programmable value that a network administrator may use to force the spanning tree algorithm to select one bridge as the root bridge. A processor of each of bridges <b>22</b> encapsulates that particular bridge's bridge ID, along with various other information (described in more detail below) in a bridge protocol data unit (BPDU). Each bridge transmits these BPDUs through network <b>20</b>, thereby allowing each of bridges <b>22</b> to exchange spanning tree information and determine or select a root bridge for the network.</p>
<p id="p-0022" num="0021">Upon receiving the BPDUs, a processor executing the spanning tree algorithm of each of bridges <b>22</b> decapsulates the BPDUs and compares the bridge IDs for each of bridges <b>22</b>. The bridge with the lowest bridge priority is selected as the root bridge. In the event that there are two or more bridges with the same bridge priority, the MAC addresses of these bridges are compared and the bridge with the lowest MAC address (there will be a lowest MAC address as these are unique addresses) is selected as the root bridge.</p>
<p id="p-0023" num="0022">Once a root bridge is selected, a processor of each of bridges <b>22</b> determines a path cost back to the root bridge using a spanning tree algorithm. Referring again to <figref idref="DRAWINGS">FIG. 1</figref>, assume that bridge <b>22</b>A has the lowest bridge priority and, as such, has been selected as the root bridge for network <b>20</b>. Each of bridges <b>22</b>B-<b>22</b>D determines a path cost back to bridge <b>22</b>A, the root bridge. If a first link <b>26</b> is further away from root bridge <b>22</b>A than a second link <b>26</b>, the first link <b>26</b> may be assigned a higher path cost. In addition, the technology of the link may be factored into the cost. For example, a link that is optical fiber may have a lower cost than a link that is copper, due to the generally faster transmission rates of fiber. In this manner, a cost is associated with each spanning tree link <b>26</b>.</p>
<p id="p-0024" num="0023">Each port on a bridge is assigned a port identifier (ID). The port on the bridge that connects to the lowest-cost path to the root bridge is the root port or the &#x201c;superior&#x201d; port. For example, assume that the lowest-cost path for bridge <b>22</b>C back to root bridge <b>22</b>A is via the port with port ID <b>1</b> of bridge <b>22</b>C, labeled &#x201c;P<b>1</b>&#x201d; in <figref idref="DRAWINGS">FIG. 1</figref>. Port <b>1</b> of bridge <b>22</b>C is designated as a root port, or &#x201c;superior&#x201d; port. In this manner, each bridge <b>22</b> on network <b>20</b> determines a superior port.</p>
<p id="p-0025" num="0024">If a loop exists in the spanning tree network, a port on one of the bridges should be blocked in order to break the loop. The block is made at the point that is furthest away (in terms of &#x201c;cost to root&#x201d;) from the root bridge. One algorithm for blocking ports is described as follows. A block is made when there is a link between two bridges in which neither bridge has selected that link's port to be the root port. That is, on each of the two bridges, some other port on each bridge has been selected as the root port. This identifies that link as being the furthest away (in terms of &#x201c;cost to root&#x201d;) from the root bridge, and thus the point that a block shall be made.</p>
<p id="p-0026" num="0025">On the two bridges that are connected via this undesired link, the bridge that has the lower &#x201c;cost to root&#x201d; of the two should leave its port as &#x201c;forwarding&#x201d; and the other bridge should set its port to &#x201c;blocking &#x201d; For example, in the example above, port <b>1</b> of bridge <b>22</b>C was determined to be the root port for bridge <b>22</b>C. Further assume that port <b>1</b> of bridge <b>22</b>B was determined to be the root port for bridge <b>22</b>B. If link <b>26</b>C connected to port <b>2</b> (labeled &#x201c;P<b>2</b>&#x201d;) of bridge <b>22</b>B has a lower cost to root than link <b>26</b>D connected to port <b>2</b> (labeled &#x201c;P<b>2</b>&#x201d;) of bridge <b>22</b>CB, port <b>2</b> of bridge <b>22</b>B is set to &#x201c;forwarding&#x201d; and port <b>2</b> of bridge <b>22</b>C is set to &#x201c;blocking &#x201d; If both bridges have the same &#x201c;cost to root,&#x201d; then a tiebreaker is used. In a first tiebreaker, the bridge with the lower bridge ID should set its port to &#x201c;forwarding&#x201d; and the other bridge should set its port to &#x201c;blocking.&#x201d;</p>
<p id="p-0027" num="0026">In the case where two ports on the same bridge are connected to each other, then the first tiebreaker does not resolve the situation. In this case, the port with the lower port ID should be set to &#x201c;forwarding&#x201d; and the other port should be set to &#x201c;blocking &#x201d; In this manner, a spanning tree algorithm operating on each of bridges <b>22</b> determines a root bridge and, as appropriate, determines which ports on bridges <b>22</b> should be set to forwarding or blocking states to allow data traffic and prevent looping.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating an example network device comprising a line card that may be used to implement techniques of this disclosure. Although <figref idref="DRAWINGS">FIG. 2</figref> depicts MAC bridge <b>22</b>A of <figref idref="DRAWINGS">FIG. 1</figref> specifically, MAC bridge <b>22</b>A is considered representative of MAC bridges <b>22</b> in general, e.g., MAC bridges <b>22</b>B-<b>22</b>D. Line card <b>30</b>A, also referred to simply as a card, is a component of MAC bridge <b>22</b>A that terminates a number N ports that provide connections to other network devices, e.g., other bridges <b>22</b>, in bridged LAN <b>20</b>. An example MAC bridge that may implement various techniques disclosed herein is the Calix E7 Ethernet Service Access Platform, commercially available from Calix, Inc., of Petaluma, Calif. Line card <b>30</b>A includes control unit <b>32</b>, which couples to interface module <b>34</b> and, in particular, a number N ports. Line card <b>30</b>A and, in particular, control unit <b>32</b> implements an instance of a spanning tree algorithm. Control unit <b>32</b> may comprise one or more processors <b>36</b> that execute software instructions, such as those used to define a software or computer program, stored in a computer-readable storage medium such as memory <b>38</b> (e.g., a Flash memory, random access memory (RAM), or any other type of volatile or non-volatile memory that stores instructions), or a storage device (e.g., a disk drive, or an optical drive). Alternatively, control unit <b>32</b> may comprise dedicated hardware, such as one or more integrated circuits, one or more Application Specific Integrated Circuits (ASICs), one or more Application Specific Special Processors (ASSPs), one or more Field Programmable Gate Arrays (FPGAs), or any combination of the foregoing examples of dedicated hardware, for performing the techniques described in this disclosure.</p>
<p id="p-0029" num="0028">In addition to software instructions, memory <b>38</b> also may store, for example, bridge MAC address <b>40</b>, physical port to protocol port mapping <b>42</b> (described in more detail below), as well as BPDU information <b>44</b> (e.g., bridge priority, root identifier, etc.) used by processor <b>36</b> to generate BPDUs.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> depicts bridge <b>22</b>A populated with a single line card <b>30</b>A. Each line card <b>30</b>A, however, is physically limited in the number of ports that it can accommodate. In addition, each processor <b>36</b>, e.g., an Ethernet switching ASIC, of each line card <b>30</b>A is limited in the number of ports that it can control. In order to provide higher port density, it may be desirable in some network implementations to include multiple line cards within bridge <b>22</b>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the MAC bridge of <figref idref="DRAWINGS">FIG. 2</figref> comprising multiple line cards. It should be noted that <figref idref="DRAWINGS">FIG. 3</figref> depicts only a portion of the components of MAC bridge <b>22</b>A of <figref idref="DRAWINGS">FIG. 2</figref> and is intended to illustrate the multiple ports on the multiple line cards and the connectivity between the multiple line cards. As seen in <figref idref="DRAWINGS">FIG. 3</figref>, two additional line cards, namely line cards <b>30</b>B and <b>30</b>C, have been included. As such, MAC bridge <b>22</b>A of <figref idref="DRAWINGS">FIG. 3</figref> includes three cards, namely line cards <b>30</b>A-<b>30</b>C (collectively referred to as &#x201c;line cards <b>30</b>&#x201d;). Each of line cards <b>30</b>B and <b>30</b>C is similar to line card <b>30</b>A shown in greater detail in <figref idref="DRAWINGS">FIG. 2</figref>. As will be described in more detail below and in accordance with various techniques described in this disclosure, each of line cards <b>30</b>A-<b>30</b>C may execute an instance of a spanning tree algorithm in order to manage the N ports on that particular line card. That is, a processor on line card <b>30</b>A executes a first instance of a spanning tree algorithm, a processor on line card <b>30</b>B executes a second instance of the spanning tree algorithm, and a processor on line card <b>30</b>C executes a third instance of the spanning tree algorithm. Information generated by these separately running instances of the spanning tree algorithm is communicated between the multiple line cards <b>30</b> of MAC bridge <b>22</b>. Using the techniques of this disclosure, two or more of the line cards, e.g., line cards <b>30</b>A-<b>30</b>C, generate one superior port for a network device, e.g., MAC bridge <b>22</b>.</p>
<p id="p-0032" num="0031">One advantage that may be provided by such techniques, in some examples, is the logical association between line cards <b>30</b>A-<b>30</b>C. In some examples, this may allow spanning tree computations to be distributed across all of the line cards in a network device, thereby reducing the computational complexity of spanning tree computations and improving scalability as more line cards are added. In addition, the logical association between line cards in the network device may allow the line cards that are each executing a spanning tree algorithm to appear to other networking devices in network <b>20</b> as a single spanning tree entity. Network management may be significantly simplified by MAC bridge <b>22</b> appearing as a single spanning tree entity.</p>
<p id="p-0033" num="0032">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, each of line cards <b>30</b>A-<b>30</b>C terminate N ports, e.g., 10 ports. Although <figref idref="DRAWINGS">FIG. 3</figref> depicts MAC bridge <b>22</b> comprising three line cards, in some example implementations, MAC bridge <b>22</b> may comprise only two line cards, e.g., line cards <b>30</b>A and <b>30</b>B, as will be described in more detail below. In other example implementations, MAC bridge <b>22</b> may include more than three line cards.</p>
<p id="p-0034" num="0033">MAC bridge <b>22</b>A interconnects multiple line cards <b>30</b>, e.g., line cards <b>30</b>A-<b>30</b>C, via data plane <b>50</b>. Data plane <b>50</b> allows data plane traffic to travel between each of line cards <b>30</b> within the bridge. In addition, MAC bridge <b>22</b> interconnects multiple line cards <b>30</b> via management communications channel <b>52</b>. Management communications channel <b>52</b> allows spanning tree protocol information generated via one line card, e.g., line card <b>30</b>A, to travel between one or more other line cards within MAC bridge <b>22</b>, e.g., line cards <b>30</b>B and <b>30</b>C. Similarly, management communications channel <b>52</b> allows spanning tree protocol information generated via line card <b>30</b>B to travel to line cards <b>30</b>A and <b>30</b>C, and spanning tree protocol information generated via line card <b>30</b>C to travel to line cards <b>30</b>A and <b>30</b>B. Line cards <b>30</b>A-<b>30</b>C, using the techniques of this disclosure, generate one superior port for MAC bridge <b>22</b> based on the spanning tree protocol information that is transmitted between the line cards.</p>
<p id="p-0035" num="0034">As described above, a spanning tree algorithm determines which of the ports associated with a bridge is the superior port and, in order to avoid a routing loop, the spanning tree algorithm determines which, if any, of the remaining ports must be blocked. When there are multiple line cards in a MAC bridge, e.g., line cards <b>30</b>A-<b>30</b>C of MAC bridge <b>22</b>, that are each executing their own instance of the spanning tree algorithm, a superior port is determined for each line card rather than a single superior port for the network device, e.g., MAC bridge <b>22</b>A. However, in order for the MAC bridge, e.g., MAC bridge <b>22</b>A, to appear as single spanning tree entity to other networking devices, one superior port for the MAC bridge must be determined from amongst the multiple superior ports, and the line cards, e.g., line cards <b>30</b>A-<b>30</b>C must determine which, if any, of the remaining ports must be blocked in order to avoid a routing loop.</p>
<p id="p-0036" num="0035">For example, in the configuration depicted in <figref idref="DRAWINGS">FIG. 3</figref>, line card <b>30</b>A, executing a first instance of a spanning tree algorithm determines a first superior port for line card <b>30</b>A, e.g., port <b>1</b>, based on BPDUs received via ports <b>1</b>-N of line card <b>30</b>A. This first superior port will also be referred to as a first superior local port because it is specific to line card <b>30</b>A. Likewise, line card <b>30</b>B, executing a second instance of the spanning tree algorithm determines a second superior port for line card <b>30</b>B, e.g., port <b>2</b>, based on BPDUs received via ports <b>1</b>-N of line card <b>30</b>B. This second superior port will also be referred to as a second superior local port because it is specific to line card <b>30</b>B. Finally, line card <b>30</b>C, executing a third instance of the spanning tree algorithm determines a third superior port for line card <b>30</b>C, e.g., port <b>3</b>, based on BPDUs received via ports <b>1</b>-N of line card <b>30</b>C. This third superior port will also be referred to as a third superior local port because it is specific to line card <b>30</b>C. Line cards <b>30</b>A-<b>30</b>C must determine a single superior port from amongst these three determined superior local ports, e.g., port <b>1</b> of line card <b>30</b>A, port <b>2</b> of line card <b>30</b>B, and port <b>3</b> of line card <b>30</b>C, and then determine which, if any, of the remaining ports must be blocked in order to prevent routing loops (because all of the line cards share single data plane <b>50</b>).</p>
<p id="p-0037" num="0036">Using the techniques of this disclosure, a single superior port for a MAC bridge, e.g., MAC bridge <b>22</b>, may be determined from amongst two or more superior local ports, as determined for two or more respective line cards <b>30</b>, as follows. For the case of two line cards in a MAC bridge, assume that MAC bridge <b>22</b> of <figref idref="DRAWINGS">FIG. 3</figref> includes only two line cards, namely line cards <b>30</b>A and <b>30</b>B. Line card <b>30</b>A receives BPDUs on each of its ports, e.g., ports <b>1</b>-N, from the other spanning tree entities on network <b>20</b>. By executing a spanning tree algorithm defined by a spanning tree protocol, e.g., Spanning Tree Protocol as defined by IEEE 802.1D or Rapid Spanning Tree Protocol as defined by IEEE 802.1W, the entire contents of each being incorporated herein by reference, line card <b>30</b>A, and in particular processor <b>36</b>, determines or computes which of the received spanning tree BPDUs received via ports <b>1</b>-N on line card <b>30</b>A comprise the superior data. Line card <b>30</b>A will periodically, e.g., at 2 second intervals, transmit the result of this spanning tree computation (referred to as &#x201c;Best Local Port&#x201d; data) to all of the other line cards within the MAC bridge, e.g., line card <b>30</b>B, via management communications channel <b>52</b>. It should be noted that if line card <b>30</b>A is not receiving any incoming spanning tree BPDUs, or if all of the received spanning tree BPDU data has been &#x201c;aged-out&#x201d; with respect to the spanning tree algorithm, e.g., no new BPDU information has been received for <b>6</b> seconds, then line card <b>30</b>A indicates that &#x201c;Best Local Port&#x201d; data is &#x201c;None.&#x201d; The contents of the &#x201c;Best Local Port&#x201d; data that line card <b>30</b>A transmits to line card <b>30</b>B consists of information that had been received in the superior spanning tree BDPU, plus identification information that identifies the transmitting line card, such as line card number or line card MAC address. For example, assume that the first instance of the spanning tree algorithm executed on line card <b>30</b>A determines that port <b>1</b> is the superior local port of line card <b>30</b>A. Line card <b>30</b>A will send, via management communications channel <b>52</b>, Best Local Port data to line card <b>30</b>B (the only other line card in the MAC bridge in this specific example) indicating the port number that has the Best Local Port data, e.g., port <b>1</b>, and information identifying the line card, e.g., line card <b>30</b>A. Because there are multiple cards, and thus multiple port <b>1</b>'s, the port ID may be modified, as described in more detail below.</p>
<p id="p-0038" num="0037">Line card <b>30</b>B receives the computed Best Local Port data, or a first superior local port, from line card <b>30</b>A. Line card <b>30</b>B presents line card <b>30</b>A's computed Best Local Port information to the spanning tree algorithm being executed on line card <b>30</b>B. Line card <b>30</b>A's computed Best Local Port information is treated similar to spanning tree BPDU data is received in spanning tree BPDUs via ports that reside on line card <b>30</b>B. Line card <b>30</b>B, executing its own instance of the spanning tree algorithm, includes the information received from line card <b>30</b>A as part of the spanning tree computation being executed on line card <b>30</b>B in order to determine the relative superiority of the ports that reside on line card <b>30</b>B and thus determine to which state, i.e., &#x201c;forward&#x201d; or &#x201c;blocked,&#x201d; each port on line card <b>30</b>B will be set.</p>
<p id="p-0039" num="0038">Continuing the example above, line card <b>30</b>B receives, via management communications channel <b>52</b>, Best Local Port data from line card <b>30</b>A indicating that port <b>1</b> of line card <b>30</b>A is line card <b>30</b>A's superior local port. Executing its own instance of the spanning tree algorithm, line card <b>30</b>B has already determined or computed the superior data being received in spanning tree BPDUs received via the ports that reside on line card <b>30</b>B. That is, line card <b>30</b>B has already computes its own superior local port. For instance, line card <b>30</b>B has determined that it is receiving superior data on its port <b>2</b>. Line card <b>30</b>B must determine whether port <b>1</b> of line card <b>30</b>A is superior to port <b>2</b> on line card <b>30</b>B, or whether line card <b>30</b>B's superior local port, e.g., port <b>2</b>, is superior to port <b>1</b> of line card <b>30</b>A.</p>
<p id="p-0040" num="0039">In some example implementations, line card <b>30</b>B may input the Best Local Port information received from line card <b>30</b>A into the spanning tree computation being executed on line card <b>30</b>B via a &#x201c;pseudo-port&#x201d; input into the spanning tree computation. For example, assume that line card <b>30</b>B includes 10 physical (&#x201c;local&#x201d;) ports. Line card <b>30</b>B designates, in this particular two line card example, one other port, e.g., port <b>11</b>, as a pseudo-port (or &#x201c;remote&#x201d; port). The pseudo-port, port <b>11</b>, is designated as &#x201c;pseudo&#x201d; because it is not associated with any of the ports that physically exist on line card <b>30</b>B. Line card <b>30</b>B inputs the Best Local Port information, or first superior local port, received from line card <b>30</b>A into spanning tree computation via the pseudo-port, e.g., port <b>11</b>, and the superior local data being received in spanning tree BPDUs received via the physical ports, e.g., ports <b>1</b> through <b>10</b>, which reside on line card <b>30</b>B. The spanning tree algorithm executing on line card <b>30</b>B computes or determines an overall superior port for the network device from amongst the physical ports on line card <b>30</b>B and the pseudo-port created. For instance, the spanning tree algorithm executing on line card <b>30</b>B computes or determines an overall superior port for the network device, e.g., MAC bridge <b>22</b>A, between port <b>1</b> of line card <b>30</b>A, input via pseudo port <b>11</b> of line card <b>30</b>B, and port <b>2</b> of line card <b>30</b>B. In this manner, line card <b>30</b>B determines the relative superiority of the ports that reside on line card <b>30</b>B as compared to the previously determined Best Local Port of line card <b>30</b>A. This determination allows line card <b>30</b>B to further determine to which state, i.e., &#x201c;forward&#x201d; or &#x201c;blocked,&#x201d; each port on line card <b>30</b>B will be set. For instance, if line card <b>30</b>B determines that port <b>1</b> of line card <b>30</b>A is the overall superior port of the network device, then line card <b>30</b>B recognizes that line card <b>30</b>A will set port <b>1</b> of line card <b>30</b>A to &#x201c;forward,&#x201d; therefore line card <b>30</b>B may be required to block some or all of its ports in order to prevent a routing loop. However, if line card <b>30</b>B determines that port <b>2</b> of line card <b>30</b>B is superior to port <b>1</b> of line card <b>30</b>A, then line card <b>30</b>B will set port <b>2</b> of line card <b>30</b>B to &#x201c;forward&#x201d;.</p>
<p id="p-0041" num="0040">In the example above, line card <b>30</b>B has determined the relative superiority of the ports that reside on line card <b>30</b>B as compared to the previously determined Best Local Port of line card <b>30</b>A in order to determine to which state its ports will be set. Line card <b>30</b>A must also perform a computation similar to that described above. For purposes of conciseness, only some of the details provided above will be described again.</p>
<p id="p-0042" num="0041">Line card <b>30</b>B receives BPDUs on each of its ports, e.g., ports <b>1</b>-N, from the other spanning tree entities on network <b>20</b>. Line card <b>30</b>B, and in particular processor <b>36</b>, executes its own instance of spanning tree protocol and determines or computes which of the received spanning tree BPDUs received via ports <b>1</b>-N on line card <b>30</b>B comprise the Best Local Port data, or second superior local port. Line card <b>30</b>B periodically transmits the Best Local Port data, i.e., second superior local port, to all of the other line cards within the MAC bridge, e.g., line card <b>30</b>A, via management communications channel <b>52</b>. For example, assume that the second instance of the spanning tree algorithm executed on line card <b>30</b>B determines that port <b>2</b> is the superior local port of line card <b>30</b>B. Line card <b>30</b>B will send, via management communications channel <b>52</b>, Best Local Port data to line card <b>30</b>A (the only other line card in the MAC bridge in this specific example) indicating the port number that has the Best Local Port data, e.g., port <b>2</b>, and information identifying the line card, e.g., line card <b>30</b>B.</p>
<p id="p-0043" num="0042">Line card <b>30</b>A receives the computed Best Local Port data, i.e., second superior local port, from line card <b>30</b>B. Line card <b>30</b>B inputs the Best Local Port information received from line card <b>30</b>B into the spanning tree computation being executed on line card <b>30</b>A via a pseudo-port input. For example, assume that line card <b>30</b>A includes 10 ports. Line card <b>30</b>A designates, in this particular two line card example, one other port, e.g., port <b>11</b>, as a pseudo-port. Line card <b>30</b>B inputs the Best Local Port information received from line card <b>30</b>B into the spanning tree computation via the pseudo-port, e.g., port <b>11</b>, and the superior local data being received in spanning tree BPDUs received via the physical ports, e.g., ports <b>1</b> through <b>10</b>, which reside on line card <b>30</b>A. Line card <b>30</b>A's spanning tree algorithm computes or determines an overall superior port for the network device, e.g., MAC bridge <b>22</b>A, from amongst the physical ports on line card <b>30</b>A and the pseudo-port created. In this manner, line card <b>30</b>A determines the relative superiority of the ports that reside on line card <b>30</b>A as compared to the previously determined Best Local Port of line card <b>30</b>B. This determination allows line card <b>30</b>A to further determine to which state, i.e., &#x201c;forward&#x201d; or &#x201c;blocked,&#x201d; each port on line card <b>30</b>A should be set. For instance, if line card <b>30</b>A determines that port <b>1</b> of line card <b>30</b>A is the overall superior port of the network device, then line card <b>30</b>A will set its port <b>1</b> to &#x201c;forward.&#x201d; However, if line card <b>30</b>A determines that port <b>2</b> of line card <b>30</b>B is superior to port <b>1</b> of line card <b>30</b>A, then line card <b>30</b>A recognizes that line card <b>30</b>B will set port <b>2</b> of line card <b>30</b>B to &#x201c;forward,&#x201d; therefore line card <b>30</b>A may be required to block some or all of its ports in order to prevent a routing loop. In this manner, line cards <b>30</b>A and <b>30</b>B each determine the relative superiority of the ports on line cards <b>30</b>A and <b>30</b>B in order to determine a single overall superior port for MAC bridge <b>22</b>.</p>
<p id="p-0044" num="0043">It should be noted that although the generation of Best Local Port data by line card <b>30</b>A and the generation of Best Local Port by line card <b>30</b>B was described sequentially, i.e., one before the other, the generation of Best Local Port data by line cards <b>30</b>A and <b>30</b>B (or all line cards in the case of more than two line cards) may, in some examples, be happening substantially in parallel with one another.</p>
<p id="p-0045" num="0044">In the example described above, MAC bridge <b>22</b> included only two line cards. However, the techniques of this disclosure are not so limited. As described in detail below, the techniques of this disclosure are also applicable for MAC bridges that include three or more line cards.</p>
<p id="p-0046" num="0045">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, MAC bridge <b>22</b>A includes three line cards, namely line cards <b>30</b>A-<b>30</b>C. MAC bridge <b>22</b>A may include more than three line cards, but for purposes of conciseness, only three line cards will be described. As mentioned above, each of the three cards in MAC bridge <b>22</b>A, e.g., line cards <b>30</b>A-<b>30</b>C, determines or computes via a spanning tree algorithm the superior local data being received in spanning tree BPDUs via the ports that reside on the respective line card. That is, a processor, e.g., processor <b>36</b>, of line card <b>30</b>A, executes a first instance of a spanning tree protocol and determines a first superior local port from among a first plurality of ports on line card <b>30</b>A based on a first plurality of BPDUs received via the first plurality of ports. Another processor, e.g., processor <b>36</b>, of line card <b>30</b>B, executes a second instance of the spanning tree protocol and determines a second superior local port from among a second plurality of ports on line card <b>30</b>B based on a second plurality of BPDUs received via the second plurality of ports. Finally, another processor, e.g., processor <b>36</b>, of line card <b>30</b>C, executes a third instance of the spanning tree protocol and determines a third superior local port from among a third plurality of ports on line card <b>30</b>C based on a third plurality of BPDUs received via the third plurality of ports.</p>
<p id="p-0047" num="0046">Then, each line card of MAC bridge <b>22</b> transmits, via management communications channel <b>52</b>, a data unit specifying the result, i.e., the Best Local Port data, of its respective spanning tree computation to all of the other line cards within the MAC bridge. The data units may be spanning tree BPDUs. For example, line card <b>30</b>A transmits its computed Best Local Port data, e.g., port <b>1</b>, to line cards <b>30</b>B and <b>30</b>C, line card <b>30</b>B transmits its computed Best Local Port data, e.g., port <b>2</b>, to line cards <b>30</b>A and <b>30</b>C, and line card <b>30</b>C transmits its computed Best Local Port data, e.g., port <b>3</b>, to line cards <b>30</b>A and <b>30</b>B.</p>
<p id="p-0048" num="0047">In this manner, each line card collects Best Local Port data, or superior local ports, from all the other line cards within the MAC bridge. Line card <b>30</b>A collects Best Local Port data from line card <b>30</b>B and line card <b>30</b>C and then determines which port on these other line cards has received superior spanning tree BPDU data. In other words, line card <b>30</b>A determines whether the Best Local Port data received from line card <b>30</b>B is superior to the Best Local Port data received from line card <b>30</b>C or whether the Best Local Port data received from line card <b>30</b>C is superior to the Best Local Port data received from line card <b>30</b>B. For clarity, this result may be referred to as a superior &#x201c;remote&#x201d; port because this particular determined superior port is not local to line card <b>30</b>A, the line unit making the determination. This determination utilizes a traditional &#x201c;priority vector calculation&#x201d; technique that is described in detail below with respect to <figref idref="DRAWINGS">FIG. 4</figref>. The relative superiority of line card <b>30</b>A's ports are not involved in this determination.</p>
<p id="p-0049" num="0048">For example, assume that line card <b>30</b>A determines that the Best Local Port data received from line card <b>30</b>B, e.g., port <b>2</b> of line card <b>30</b>B, is superior to the Best Local Port data received from line card <b>30</b>C, e.g., port <b>3</b> of line card <b>30</b>C. In other words, line card <b>30</b>A determines that port <b>2</b> of line card <b>30</b>B is the superior remote port. The spanning tree algorithm on line card <b>30</b>A will be presented, via a pseudo-port &#x201c;on&#x201d; line card <b>30</b>A with the Best Local Port data of line card <b>30</b>B, e.g., port <b>2</b>, along with the spanning tree BPDU data that had been received directly from line card <b>30</b>A's physical ports. Assuming that line card <b>30</b>A has 10 physical ports, the spanning tree algorithm operating on line card <b>30</b>A is presented with 11 inputs, namely the data of each of its 10 physical ports and the pseudo-port <b>11</b> on line card <b>30</b>A, which is actually port <b>2</b> of line card <b>30</b>B, i.e., the determined superior remote port. Assuming that amongst the physical ports of line card <b>30</b>A that port <b>1</b> is the superior port, and assuming that port <b>1</b> of line card <b>30</b>A is superior to port <b>2</b> of line card <b>30</b>B, the spanning tree algorithm on line card <b>30</b>A will compute that its port <b>1</b> will be set to the &#x201c;forwarding&#x201d; state.</p>
<p id="p-0050" num="0049">This process is repeated on the remaining line cards, e.g., line cards <b>30</b>B and <b>30</b>C, of MAC bridge <b>22</b>. Line card <b>30</b>B collects Best Local Port data from line card <b>30</b>A and line card <b>30</b>C and then determines which port on these other line cards has received superior spanning tree BPDU data. In other words, line card <b>30</b>B determines whether the Best Local Port data received from line card <b>30</b>A is superior to the Best Local Port data received from line card <b>30</b>C or whether the Best Local Port data received from line card <b>30</b>C is superior to the Best Local Port data received from line card <b>30</b>A. Again, this result may be referred to as a superior &#x201c;remote&#x201d; port because this particular determined superior port is not local to line card <b>30</b>B, the line unit making the determination. The relative superiority of line card <b>30</b>B's ports are not involved in this determination.</p>
<p id="p-0051" num="0050">Assume that line card <b>30</b>B determines that the Best Local Port data received from line card <b>30</b>A, e.g., port <b>1</b> of line card <b>30</b>A, is superior to the Best Local Port data received from line card <b>30</b>C, e.g., port <b>3</b> of line card <b>30</b>C. The spanning tree algorithm on line card <b>30</b>B will be presented, via a pseudo-port &#x201c;on&#x201d; line card <b>30</b>B with the Best Local Port data of line card <b>30</b>A, e.g., port <b>1</b>, along with the spanning tree BPDU data that had been received directly from line card <b>30</b>B's physical ports. Assuming that line card <b>30</b>B has 10 physical ports, the spanning tree algorithm operating on line card <b>30</b>B is presented with <b>11</b> inputs, namely the data of each of its 10 physical ports and the pseudo-port <b>11</b> on line card <b>30</b>B, which is actually port <b>1</b> of line card <b>30</b>A, i.e., the determined superior remote port. Assuming that amongst the physical ports of line card <b>30</b>B that port <b>2</b> is the superior port, and assuming that port <b>1</b> of line card <b>30</b>A is superior to port <b>2</b> of line card <b>30</b>B, the spanning tree algorithm on line card <b>30</b>B will determine which of the ports on line card <b>30</b>B must be set to &#x201c;blocking&#x201d; state in order to prevent a routing loop.</p>
<p id="p-0052" num="0051">Finally, line card <b>30</b>C collects Best Local Port data from line card <b>30</b>A and line card <b>30</b>B and then determines which port on these other line cards has received superior spanning tree BPDU data. In other words, line card <b>30</b>C determines whether the Best Local Port data received from line card <b>30</b>A is superior to the Best Local Port data received from line card <b>30</b>B or whether the Best Local Port data received from line card <b>30</b>A is superior to the Best Local Port data received from line card <b>30</b>B. Again, this result may be referred to as a superior &#x201c;remote&#x201d; port because this particular determined superior port is not local to line card <b>30</b>C, the line unit making the determination. The relative superiority of line card <b>30</b>C's ports are not involved in this determination.</p>
<p id="p-0053" num="0052">Assume that line card <b>30</b>C determines that the Best Local Port data received from line card <b>30</b>A, e.g., port <b>1</b> of line card <b>30</b>A, is superior to the Best Local Port data received from line card <b>30</b>B, e.g., port <b>2</b> of line card <b>30</b>B. The spanning tree algorithm on line card <b>30</b>C will be presented, via a pseudo-port &#x201c;on&#x201d; line card <b>30</b>C with the Best Local Port data of line card <b>30</b>A, e.g., port <b>1</b>, along with the spanning tree BPDU data that had been received directly from line card <b>30</b>C's physical ports. Assuming that line card <b>30</b>C has 10 physical ports, the spanning tree algorithm operating on line card <b>30</b>C is presented with 11 inputs, namely the data of each of its 10 physical ports and the pseudo-port <b>11</b> on line card <b>30</b>C, which is actually port <b>1</b> of line card <b>30</b>A, i.e., the determined superior remote port. Assuming that amongst the physical ports of line card <b>30</b>C that port <b>3</b> is the superior port, and assuming that port <b>1</b> of line card <b>30</b>A is superior to port <b>3</b> of line card <b>30</b>C, the spanning tree algorithm on line card <b>30</b>C will determine which of the ports on line card <b>30</b>C must be set to &#x201c;blocking&#x201d; state in order to prevent a routing loop.</p>
<p id="p-0054" num="0053">Using the techniques described throughout this disclosure, the multiple line cards on MAC bridge <b>22</b> may be able to determine a single overall superior port for the network device from amongst all of the ports on MAC bridge <b>22</b> in a fast, efficient, and computationally simple manner, thereby conserving processor resources. Rather than inputting the spanning tree BPDU data from ports <b>1</b>-N on line card <b>30</b>A, ports <b>1</b>-N on line card <b>30</b>B, and ports <b>1</b>-N on line card <b>30</b>C into a spanning tree algorithm operating on a single processor, which would be a computationally complex and resource intensive endeavor and which would become even more so as the number of line cards in a MAC bridge increased, the techniques of this disclosure distribute the spanning tree processing across all of the line cards within a MAC bridge. Each processor of a line card executes a spanning tree algorithm that performs a &#x201c;pre-processing&#x201d; determination or computation in order to determine Best Local Port data for that particular line card and each line card transmits the result of the computation, i.e., the Best Local Port data, to all of the other line cards. This &#x201c;pre-processing&#x201d; computation executed by each of the line cards aids in distributing the burden of the spanning tree computations across each line card, thereby simplifying and expediting the superior port determination for the MAC bridge and improving the scalability of the network device.</p>
<p id="p-0055" num="0054">As described above, each bridge <b>22</b> is assigned a bridge identifier (ID). The bridge ID is the spanning tree term for the numeric value that each port on bridge <b>22</b> transmits, via a BPDU, to identify itself to other networking devices in network <b>20</b>. The bridge ID includes two numbers: a Media Access Control (MAC) address and a bridge priority. The bridge priority is an administrable value that a network administrator may use to force the spanning tree algorithm to select one bridge as the root bridge. When MAC bridge <b>22</b>A in <figref idref="DRAWINGS">FIG. 3</figref> connects to another network device in network <b>20</b>, e.g., MAC bridge <b>22</b>B, each port on each line card of MAC bridge <b>22</b>A transmits a BPDU to MAC bridge <b>22</b>B. Each BPDU transmitted from MAC bridge <b>22</b>A to MAC bridge <b>22</b>B includes a bridge ID.</p>
<p id="p-0056" num="0055">In order to facilitate the illusion that the multiple line cards within a MAC bridge, e.g., MAC bridge <b>22</b>A, are a single line card, and thus ensure that the spanning tree BPDUs that are transmitted by each of the line cards will appear to a receiving network device, e.g., MAC bridge <b>22</b>B, as being transmitted from the same MAC bridge, each line card should operate with the same bridge ID.</p>
<p id="p-0057" num="0056">In one example implementation in accordance with this disclosure, this may be accomplished by designating the chassis MAC address as the bridge MAC address. By designating the chassis MAC address as the bridge MAC address, all of the line cards in a particular MAC bridge, e.g., MAC bridge <b>22</b>A, present the same bridge ID to other networking devices on network <b>20</b>, e.g., MAC bridges <b>22</b>B-<b>22</b>D, thereby retaining the illusion that MAC bridge <b>22</b>A is one network device and not a collection of network devices. Although the MAC addresses programmed into the separate line cards might not used to identify the MAC bridge to external networking devices, these MAC addresses can be used to allow the individual line cards within the MAC bridge to distinguish themselves from one another in internal messages. In other example implementations, a universally unique bridge ID may be, for example, a MAC address programmed into one of the line cards in the MAC bridge or a MAC address assigned by the network operator from a pool of unique MAC addresses.</p>
<p id="p-0058" num="0057">In addition to the bridge ID, each BPDU transmitted includes a Protocol Port Identifier (or &#x201c;Port Identifier&#x201d;). The Port Identifier is the port number that a spanning tree algorithm uses to identify each port that it manages, and is the port number that is transmitted in a spanning tree BPDU. For example, a BPDU transmitted from port <b>1</b> of MAC bridge <b>22</b>A includes a Port Identifier field that identifies port number <b>1</b> as the transmitting port. However, as seen in the example shown in <figref idref="DRAWINGS">FIG. 3</figref>, there may be multiple ports that may be identified as port <b>1</b>, e.g., port <b>1</b> on line card <b>30</b>A, port <b>1</b> on line card <b>30</b>B, and port <b>1</b> on line card <b>30</b>C. To eliminate the confusion, the particular line card on which the port resides should also be specified.</p>
<p id="p-0059" num="0058">In accordance with techniques of this disclosure, in order to specify a particular line card and yet maintain the illusion that the multiple line cards are a single line card, many of the Port Identifiers of the MAC bridge should be renumbered or otherwise reassigned with different IDs. Within a MAC bridge, e.g., MAC bridge <b>22</b>A, each line card should use a distinct range of Port Identifiers to ensure that there is no ambiguity or conflict with other line cards in the MAC bridge. For example, assume that each of line cards <b>30</b>A-<b>30</b>C in <figref idref="DRAWINGS">FIG. 3</figref> include 10 ports. A network administrator may assign ports <b>1</b>-<b>10</b> on line card <b>30</b>A with Port Identifiers <b>1</b>-<b>10</b> (unchanged), ports <b>1</b>-<b>10</b> on line card <b>30</b>B with Port Identifiers <b>11</b>-<b>20</b>, and ports <b>1</b>-<b>10</b> on line card <b>30</b>C with Port Identifiers <b>21</b>-<b>30</b>. These distinct ranges of Port Identifiers permit a spanning tree algorithm to identify both a particular line card and port without having to modify a BPDU to include specific line card information. This also allows the MAC bridge to appear to other network devices on network <b>20</b> as a single spanning tree entity with 30 ports, rather than three line cards each having 10 ports.</p>
<p id="p-0060" num="0059">It should be noted that certain actions can occur that cause the port that is currently in the &#x201c;forwarding&#x201d; state to no longer be able to carry traffic, meaning that the spanning tree algorithm on another line card might be required to change the state of a previously &#x201c;blocked&#x201d; port to become &#x201c;forwarding.&#x201d; This should occur quickly, in order to minimize any disruption in traffic flow. Two such scenarios for which a fast reaction may be desired are disconnection or removal from service of the port that is currently &#x201c;forwarding&#x201d; and disconnection or removal of the line card upon which a currently &#x201c;forwarding&#x201d; port resides.</p>
<p id="p-0061" num="0060">If the port that is currently &#x201c;forwarding&#x201d; is disconnected or removed from service, the &#x201c;forwarding&#x201d; port is no longer able to carry traffic. In this case, the line card upon which this port resides may immediately transmit updated &#x201c;Best Local Port&#x201d; data to all of the other line cards to allow the other line cards the opportunity for an immediate re-computing of which port shall be &#x201c;forwarding.&#x201d;</p>
<p id="p-0062" num="0061">If the line card upon which a currently &#x201c;forwarding&#x201d; port resides is disconnected or removed from service then the line card is no longer able to transmit any updated &#x201c;Best Local Port&#x201d; data. Therefore, a separate mechanism should be in place to inform the remaining line cards of the removal of a line card. When informed of the removal of a line card, each of the remaining line cards may treat that as if it had received a &#x201c;Best Local Port=None&#x201d; indication from the now missing line card.</p>
<p id="p-0063" num="0062">As indicated above, a traditional &#x201c;priority vector calculation&#x201d; technique is used in order for a first card, e.g., line card <b>30</b>A, to determine which of the Best Local Port data received from a second card and a third card within the MAC bridge, e.g., from line card <b>30</b>B and line card <b>30</b>C, is superior. That is, line card <b>30</b>A uses a priority vector calculation to determine whether the Best Local Port data received from line card <b>30</b>B is superior to the Best Local Port data received from line card <b>30</b>C or whether the Best Local Port data received from line card <b>30</b>B is superior to the Best Local Port data received from line card <b>30</b>C. In other words, the priority vector calculation facilitates, for example, determination of a superior remote port in line unit <b>30</b>A. This priority vector calculation facilitates the pre-processing aspect described above.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an example BPDU message that may be used to perform a priority vector calculation in order to implement various techniques of this disclosure. In particular, <figref idref="DRAWINGS">FIG. 4</figref> depicts the parameters and format of rapid spanning tree protocol BPDU message <b>60</b> in accordance with IEEE Standard 802.1D, the entire content of which being incorporated herein by reference. <figref idref="DRAWINGS">FIG. 4</figref> depicts BPDU message <b>60</b> comprising thirteen fields and the particular octets in which each of the thirteen fields is encoded. As seen in <figref idref="DRAWINGS">FIG. 4</figref>, BPDU <b>60</b> comprises the following fields: protocol identifier field <b>62</b>, protocol version identifier field <b>64</b>, BPDU type field <b>66</b>, flags field <b>68</b>, root identifier field <b>70</b>, root path cost field <b>72</b>, bridge identifier field <b>74</b>, port identifier field <b>76</b>, message age field <b>78</b>, maximum age field <b>80</b>, hello time field <b>82</b>, forward delay field <b>84</b>, and version <b>1</b> length field <b>86</b>. The fields of particular relevance to this disclosure were described above, including root identifier field <b>70</b>, root path cost field <b>72</b>, bridge identifier field <b>74</b>, port identifier field <b>76</b>. The remaining fields are well known to those of ordinary skill and described in detail in IEEE Standard 802.1D. As such, the remaining fields will not be described in this disclosure.</p>
<p id="p-0065" num="0064">For each port on each line card of MAC bridge <b>22</b> that is receiving BPDUs, the line card's processor, e.g., processor <b>36</b>, calculates a &#x201c;root path priority vector.&#x201d; The root path priority vector for each port comprises the following five fields: root identifier <b>70</b> (as received in the BPDU), root path cost <b>72</b> (the sum of the root path cost received in the BPDU plus the receiving port's local path cost), bridge identifier <b>74</b> (as received in the BPDU), port identifier <b>76</b> (as received in the BPDU), and the receiving port identifier (this is tied to the local port number).</p>
<p id="p-0066" num="0065">In accordance with techniques of this disclosure, the superior remote port is defined as the port that has the superior &#x201c;root path priority vector.&#x201d; A processor, e.g., processor <b>36</b>, a line card, e.g., line card <b>30</b>, executes an algorithm for comparing the &#x201c;root path priority vector&#x201d; of two ports that consists of a numerical comparison of each of the five fields listed above in the order that is listed. As processor <b>36</b> compares each field, processor <b>36</b> determines a &#x201c;winner&#x201d; based on the lower numerical value. If a field is the same for each port, then the algorithm moves on to compare the next field in the list. In this manner, processor <b>36</b> of a line card, e.g., line card <b>30</b>A, is able to determine which of the two received &#x201c;Best Local Port&#x201d; data from other line cards, e.g., line cards <b>30</b>B and <b>30</b>C, within the MAC bridge is the superior remote port and thus will be input into the line card's pseudo-port in order to determine a single superior port for the MAC bridge.</p>
<p id="p-0067" num="0066">As mentioned above, the techniques of this disclosure are not limited to network devices comprising two or three line cards, but are applicable to network devices comprising more than three line cards. In a configuration in which the network device comprises N line cards, a processor on a line card simply compares the &#x201c;root path priority vector&#x201d; of the N-1 ports received from the other N-1 line cards. Rather than selecting a &#x201c;winner&#x201d; based on the lower numerical value between two ports, a processor selects a winner based on the lower numerical value between the N-1 ports. Thus, regardless of the number of line cards, a winner is chosen and input into a spanning tree computation via a pseudo-port in the manner described above.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart illustrating an example method implementing various techniques of this disclosure. In particular, <figref idref="DRAWINGS">FIG. 5</figref> depicts an example method of determining a superior port of a network device, e.g., MAC bridge <b>22</b>, comprising two line cards, e.g., line cards <b>30</b>A and <b>30</b>B. In the example method shown in <figref idref="DRAWINGS">FIG. 5</figref>, a first processor, e.g., processor <b>36</b>, of a first card, e.g., line card <b>30</b>A, executing a first instance of a spanning tree protocol, determines a first superior local port among a first plurality of ports, e.g., ports <b>1</b>-<b>10</b>, on the first card based on a first plurality of BPDUs received via the first plurality of ports on the first card (<b>100</b>). In other words, processor <b>36</b> of line card <b>30</b>A, for example, determines Best Local Port data based on the BPDUs received via its ports, e.g., ports <b>1</b>-<b>10</b>.</p>
<p id="p-0069" num="0068">After the first card, e.g., line card <b>30</b>A, determines its Best Local Port, processor <b>36</b> of line card <b>30</b>A of the network device, e.g., MAC bridge <b>22</b>, transmits the received BPDU specifying the Best Local Port to the second card, e.g., line card <b>30</b>B of the network device, e.g., MAC bridge <b>22</b>. That is, the first card of the network device transmits to a second card of the network device, a data unit specifying the determined first superior local port among the first plurality of ports (<b>102</b>).</p>
<p id="p-0070" num="0069">Upon receiving the BPDU transmitted from the first card, the second processor, e.g., processor <b>36</b>, of the second card, e.g., line card <b>30</b>B, executing a second instance of the spanning tree protocol, determines a superior port on the network device, e.g., MAC bridge <b>22</b>, among the first superior local port and a second plurality of ports, e.g., ports <b>1</b>-<b>10</b>, on the second card based on a second plurality of BPDUs received via the second plurality of ports (<b>104</b>). The determined Best Local Data (first superior local data) from line card <b>30</b>A may be input via a pseudo-port into line card <b>30</b>B's spanning tree computation along with the data received via each of its physical ports, e.g., ports <b>1</b>-<b>10</b>. The second instance of the spanning tree protocol determines which of the Best Local Data and the data received via each of the second line card's physical ports is the superior port for the network device.</p>
<p id="p-0071" num="0070">Although not depicted in <figref idref="DRAWINGS">FIG. 5</figref>, the second processor, e.g., processor <b>36</b>, of the second card, e.g., line card <b>30</b>B, executing the second instance of the spanning tree protocol, determines a second superior local port among a second plurality of ports, e.g., ports <b>1</b>-<b>10</b>, on the second card based on a second plurality of BPDUs received via the second plurality of ports. In other words, processor <b>36</b> of line card <b>30</b>B, for example, determines Best Local Port data based on the BPDUs received via its ports, e.g., ports <b>1</b>-<b>10</b>.</p>
<p id="p-0072" num="0071">After the second card, e.g., line card <b>30</b>B, determines its Best Local Port, processor <b>36</b> of line card <b>30</b>B of the network device, e.g., MAC bridge <b>22</b>, transmits the received</p>
<p id="p-0073" num="0072">BPDU specifying the Best Local Port to the first card, e.g., line card <b>30</b>A of the network device, e.g., MAC bridge <b>22</b>. That is, the second card of the network device transmits to the first card of the network device, a data unit specifying the determined second superior local port among the second plurality of ports.</p>
<p id="p-0074" num="0073">Upon receiving the BPDU transmitted from the second card, the first processor, e.g., processor <b>36</b>, of the first card, e.g., line card <b>30</b>A, executing the first instance of the spanning tree protocol, determines a superior port on the network device, e.g., MAC bridge <b>22</b>, among the second superior local port and a first plurality of ports, e.g., ports <b>1</b>-<b>10</b>, on the first card based on a first plurality of BPDUs received via the first plurality of ports. The determined Best Local Data (second superior local data) from line card <b>30</b>B may be input via a pseudo-port into line card <b>30</b>A's spanning tree computation along with the data received via each of its physical ports, e.g., ports <b>1</b>-<b>10</b>. The first instance of the spanning tree protocol determines which of the Best Local Data and the data received via each of the first line card's physical ports is the superior port for the network device.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 6</figref> is a flow chart illustrating another example method implementing various techniques of this disclosure. In particular, <figref idref="DRAWINGS">FIG. 6</figref> depicts an example method of determining a superior port of a network device, e.g., MAC bridge <b>22</b>, comprising three or more line cards, e.g., line cards <b>30</b>A-<b>30</b>C. The actions indicated in <b>200</b>-<b>202</b> of <figref idref="DRAWINGS">FIG. 6</figref> are similar those described above with respect to <figref idref="DRAWINGS">FIG. 5</figref> and, as such, will not be described again for conciseness. In the method shown in <figref idref="DRAWINGS">FIG. 6</figref>, a third processor, e.g., processor <b>36</b>, of a third card, e.g., line card <b>30</b>C, executing a third instance of the spanning tree protocol, determines a third superior local port among a third plurality of ports, e.g., ports <b>1</b>-<b>10</b>, on the third card based on a third plurality of BPDUs received via the third plurality of ports (<b>204</b>). In other words, processor <b>36</b> of line card <b>30</b>C, for example, determines Best Local Port data based on the BPDUs received via its ports, e.g., ports <b>1</b>-<b>10</b>.</p>
<p id="p-0076" num="0075">After the third card, e.g., line card <b>30</b>C, determines its Best Local Port, processor <b>36</b> of line card <b>30</b>C transmits the received BPDU specifying the Best Local Port to the second card, e.g., line card <b>30</b>B of the network device, e.g., MAC bridge <b>22</b>. That is, the third card transmits to a second card of the network device, a second data unit specifying the determined third superior local port among the third plurality of ports (<b>206</b>).</p>
<p id="p-0077" num="0076">Upon receiving the first data unit from the first card and second data unit from the third card, the second processor on the second card, e.g., processor <b>36</b> of line card <b>30</b>B, compares the determined first superior local port and the determined third superior local port to determine a superior remote port among the first card and the third card (<b>208</b>). In particular, processor <b>36</b> of line card <b>30</b>B determines which of the determined first superior local port and the determined third superior local port is superior by executing an algorithm for comparing their &#x201c;root path priority vectors&#x201d; in the manner described above with respect to <figref idref="DRAWINGS">FIG. 4</figref>. As processor <b>36</b> compares each field, processor <b>36</b> determines a &#x201c;winner&#x201d; based on the lower numerical value.</p>
<p id="p-0078" num="0077">By executing the second instance of the spanning tree protocol, the second processor on the second card, e.g., processor <b>36</b> of line card <b>30</b>B, determines a superior port on the network device among the first card, the second card, and the third card based on the determined superior remote port and the determined second superior local port (<b>210</b>). In particular, the determined superior remote port, i.e., the superior Best Local Data between the first card and the third card as determined via the root path priority vector comparison, is input via a pseudo-port into line card <b>30</b>B's spanning tree computation along with the determined Best Local Data (second superior local data) from line card <b>30</b>B via a local or physical port on line card <b>30</b>B. The second instance of the spanning tree protocol determines the superior port on the network device based on data received via each of line card <b>30</b>B's physical ports and the superior Best Local Data between the first card and the third card as determined via the root path priority vector comparison.</p>
<p id="p-0079" num="0078">It should be noted that <figref idref="DRAWINGS">FIG. 6</figref> is described above with respect to the second line card, e.g., line card <b>30</b>B. That is, the second line card receives the first data unit and the second data unit from the first and third line cards, respectively, and then the second line card performs a spanning tree computation to determine a superior port for the network device. As described in detail above with respect to <figref idref="DRAWINGS">FIG. 3</figref>, in order to implement the distributive techniques of this disclosure, each line card is also performing these tasks. For example, the first line card is receiving data units from the second and third line cards and determining a superior port for the network device, and the third line card is receiving data units from the first and second line cards and determining a superior port for the network device.</p>
<p id="p-0080" num="0079">In some examples, the determined superior port on the network device is one of the first plurality of ports on the first card in the method shown in <figref idref="DRAWINGS">FIG. 5</figref> and <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0081" num="0080">In other examples, the method shown in <figref idref="DRAWINGS">FIG. 5</figref> and <figref idref="DRAWINGS">FIG. 6</figref> further comprises assigning a first range of port identifiers to the first plurality of ports on the first card and assigning a second range of port identifiers to the second plurality of ports on the second card, wherein the first range of port identifiers is different than the second range of port identifiers.</p>
<p id="p-0082" num="0081">In one example, the method shown in <figref idref="DRAWINGS">FIG. 5</figref> and <figref idref="DRAWINGS">FIG. 6</figref> further comprises assigning a device identifier to the first card, and assigning the device identifier to the second card. In some examples, the network device is a bridge, and the device identifier is a bridge identifier.</p>
<p id="p-0083" num="0082">In another example, the method shown in <figref idref="DRAWINGS">FIG. 5</figref> and <figref idref="DRAWINGS">FIG. 6</figref> further comprises defining a pseudo-port on the second card, wherein the pseudo-port does not physically reside on the second card and presenting, via the pseudo-port, the data unit specifying the determined first superior local port among the first plurality of ports to the second instance of the spanning tree algorithm.</p>
<p id="p-0084" num="0083">In some examples, the network device resides within an Ethernet network.</p>
<p id="p-0085" num="0084">It should be noted that the various techniques described above, each individual line card operates its own instance of the spanning tree algorithm, e.g., ten line cards are operating ten instances of the spanning tree algorithm. However, techniques of this disclosure are not so limited. Rather, in some example implementations, two or more line cards within a network device may be grouped together and controlled by a single instance of the spanning tree algorithm. For example, ten line cards may be grouped in pairs of two line cards, with each pair of line cards operating a single spanning tree algorithm. In such an example, the ten line cards, grouped in pairs of two, operate five instances of the spanning tree algorithm.</p>
<p id="p-0086" num="0085">The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), network processors (NPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term &#x201c;processor&#x201d; or &#x201c;processing circuitry&#x201d; may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.</p>
<p id="p-0087" num="0086">Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate computing hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.</p>
<p id="p-0088" num="0087">The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a non-transitory computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Non-transitory computer-readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer readable media.</p>
<p id="p-0089" num="0088">Various examples of the disclosure have been described. These and other examples are within the scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>determining, via a first processor executing a first instance of a spanning tree protocol on a first card of a network device, a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports;</claim-text>
<claim-text>transmitting, from the first card to a second card of the network device via at least one of a data plane and a communications channel of the network device, a data unit specifying the determined first superior local port among the first plurality of ports;</claim-text>
<claim-text>determining, via a second processor executing a second instance of the spanning tree protocol on the second card, a second superior local port among a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports; and</claim-text>
<claim-text>determining, via the second processor, a superior port on the network device based on at least the determined first superior local port and the determined second superior local port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determined superior port on the network device is the determined first superior local port.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the transmitted data unit is a first data unit, the method further comprising:
<claim-text>determining, via a third processor executing a third instance of the spanning tree protocol on a third card of the network device, a third superior local port among a third plurality of ports on the third card based on a third plurality of BPDUs received via the third plurality of ports; and</claim-text>
<claim-text>transmitting, from the third card to the second card, a second data unit specifying the determined third superior local port among the third plurality of ports,</claim-text>
<claim-text>wherein determining, via the second processor the superior port on the network device based on at least the determined first superior local port and the determined second superior local port comprises:
<claim-text>comparing, via the second processor, the determined first superior local port and the determined third superior local port to determine a superior remote port among the first card and the third card; and</claim-text>
<claim-text>determining, via the second processor the superior port on the network device among the first card, the second card, and the third card based on the determined superior remote port and the determined second superior local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein comparing, via the second processor, the determined first superior local port and the determined third superior local port to determine the superior remote port among the first card and the third card comprises:
<claim-text>comparing a first priority vector to a second priority vector to determine the superior remote port among the first card and the third card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>assigning a first range of port identifiers to the first plurality of ports on the first card; and</claim-text>
<claim-text>assigning a second range of port identifiers to the second plurality of ports on the second card,</claim-text>
<claim-text>wherein the first range of port identifiers is different than the second range of port identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>assigning a device identifier to the first card; and</claim-text>
<claim-text>assigning the device identifier to the second card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the network device is a bridge, and wherein the device identifier is a bridge identifier.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>defining a pseudo-port on the second card, wherein the pseudo-port does not physically reside on the second card; and</claim-text>
<claim-text>presenting, via the pseudo-port, the data unit specifying the determined first superior local port among the first plurality of ports to the second instance of the spanning tree algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network device resides within an Ethernet network.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A network device comprising:
<claim-text>a first processor, executing a first instance of a spanning tree protocol on a first card of the network device, configured to:
<claim-text>determine a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports; and</claim-text>
<claim-text>transmit, from the first card to a second card of the network device via at least one of a data plane and a communications channel of the network device, a data unit specifying the determined first superior local port among the first plurality of ports; and</claim-text>
</claim-text>
<claim-text>a second processor, executing a second instance of the spanning tree protocol on the second card of the network device, configured to:
<claim-text>determine a second superior local port among a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports; and</claim-text>
<claim-text>determine a superior port on the network device based on at least the determined first superior local port and the determined second superior local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the determined superior port on the network device is the determined first superior local port.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the transmitted data unit is a first data unit, the device further comprising:
<claim-text>a third processor, executing a third instance of the spanning tree protocol on a third card of the network device, configured to:
<claim-text>determine a third superior local port among a third plurality of ports on the third card based on a third plurality of BPDUs received via the third plurality of ports; and</claim-text>
<claim-text>transmit, from the third card to the second card, a second data unit specifying the determined third superior local port among the third plurality of ports,</claim-text>
</claim-text>
<claim-text>wherein the second processor configured to determine the superior port on the network device based on at least the determined first superior local port and the determined second superior port is further configured to:
<claim-text>compare the determined first superior local port and the determined third superior local port to determine a superior remote port among the first card and the third card; and</claim-text>
<claim-text>determine the superior port on the network device among the first card, the second card, and the third card based on the determined superior remote port and the determined second superior The local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The network device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the second processor configured to compare the determined first superior local port and the determined third superior local port to determine the superior remote port among the first card and the third card is configured to:
<claim-text>compare a first priority vector to a second priority vector to determine the superior remote port among the first card and the third card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>,
<claim-text>wherein the first plurality of ports on the first card comprises a first range of port identifiers,</claim-text>
<claim-text>wherein the second plurality of ports on the second card comprises a second range of port identifiers, and</claim-text>
<claim-text>wherein the first range of port identifiers is different than the second range of port identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>,
<claim-text>wherein the first card comprises a device identifier, and</claim-text>
<claim-text>wherein the second card comprises the device identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The network device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the network device is a bridge, and wherein the device identifier is a bridge identifier.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:
<claim-text>a pseudo-port defined on the second card, wherein the pseudo-port does not physically reside on the second card,</claim-text>
<claim-text>wherein the data unit specifying the determined first superior local port among the first plurality of ports is presented, via the pseudo-port, to the second instance of the spanning tree algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The network device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the network device resides within an Ethernet network.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A non-transitory computer-readable storage medium comprising instructions that, when executed, cause:
<claim-text>a first processor to:
<claim-text>determine, by executing a first instance of a spanning tree protocol on a first card of a network device, a first superior local port among a first plurality of ports on the first card based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports; and</claim-text>
<claim-text>transmit, from the first card to a second card of the network device via at least one of a data plane and a communications channel of the network device, a data unit specifying the determined first superior local port among the first plurality of ports; and</claim-text>
</claim-text>
<claim-text>a second processor to:
<claim-text>determine, by executing a second instance of the spanning tree protocol on the second card, a second superior local port among a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports; and</claim-text>
<claim-text>determine, by executing the second instance of the spanning tree protocol on the second card, a superior port on the network device based on at least the determined first superior local port and the determined second superior local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the determined superior port on the network device is the first superior local port.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the transmitted data unit is a first data unit, the computer-readable storage medium further comprising instructions that, when executed, cause:
<claim-text>a third processor to:
<claim-text>determine, by executing a third instance of the spanning tree protocol on a third card of the network device, a third superior local port among a third plurality of ports on the third card based on a third plurality of BPDUs received via the third plurality of ports; and</claim-text>
<claim-text>transmit, from the third card to the second card, a second data unit specifying the determined third superior local port among the third plurality of ports,</claim-text>
</claim-text>
<claim-text>wherein the instructions that, when executed by the second processor to determine, by executing the second instance of the spanning tree protocol on the second card, the superior port on the network device based on at least the determined first superior local port and the determined second superior local port comprise further instructions that, when executed, cause the second processor to:
<claim-text>compare the determined first superior local port and the determined third superior local port to determine a superior remote port among the first card and the third card; and</claim-text>
<claim-text>determine, by executing the second instance of the spanning tree protocol on the second card, the superior port on the network device among the first card, the second card, and the third card based on the determined superior remote port and the determined second superior local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the instructions that, when executed, cause the second processor to compare the determined first superior local port and the determined third superior local port to determine the superior remote port among the first card and the third card comprise further instructions that, when executed, cause the second processor to:
<claim-text>compare a first priority vector to a second priority vector to determine the superior remote port among the first card and the third card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>,
<claim-text>wherein the first plurality of ports on the first card comprises a first range of port identifiers,</claim-text>
<claim-text>wherein the second plurality of ports on the second card comprises a second range of port identifiers, and</claim-text>
<claim-text>wherein the first range of port identifiers is different than the second range of port identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>,
<claim-text>wherein the first card comprises a device identifier, and</claim-text>
<claim-text>wherein the second card comprises the device identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the network device is a bridge, and wherein the device identifier is a bridge identifier.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising instructions that, when executed, cause the second processor to:
<claim-text>present, via a pseudo-port on the second card, the data unit specifying the determined first superior local port among the first plurality of ports to the second instance of the spanning tree algorithm,</claim-text>
<claim-text>wherein the pseudo-port does not physically reside on the second card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the network device resides within an Ethernet network.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A network device comprising:
<claim-text>means for determining a first superior local port among a first plurality of ports on a first card of a network device based on a first plurality of bridge protocol data units (BPDUs) received via the first plurality of ports;</claim-text>
<claim-text>means for transmitting, from the first card to a second card of the network device via at least one of a data plane and a communications channel of the network device, a data unit specifying the determined first superior local port among the first plurality of ports;</claim-text>
<claim-text>means for determining a second superior local port among a second plurality of ports on the second card based on a second plurality of BPDUs received via the second plurality of ports; and</claim-text>
<claim-text>means for determining a superior port on the network device based on at least the determined first superior local port and the determined second superior local port.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the determined superior port on the network device is the first superior local port.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the transmitted data unit is a first data unit, the network device further comprising:
<claim-text>means for determining a third superior local port among a third plurality of ports on a third card of the network device based on a third plurality of BPDUs received via the third plurality of ports; and</claim-text>
<claim-text>means for transmitting, from the third card to the second card, a second data unit specifying the determined third superior local port among the third plurality of ports,</claim-text>
<claim-text>wherein the means for determining the superior port on the network device based on at least the determined first superior local port and the determined second superior local port comprises:
<claim-text>means for comparing the determined first superior local port and the determined third superior local port to determine a superior remote port among the first card and the third card; and</claim-text>
<claim-text>means for determining the superior port on the network device among the first card, the second card, and the third card based on the determined superior remote port and the determined second superior local port.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The network device of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the means for comparing comprises:
<claim-text>means for comparing a first priority vector to a second priority vector to determine the superior remote port among the first card and the third card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising:
<claim-text>means for assigning a first range of port identifiers to the first plurality of ports on the first card; and</claim-text>
<claim-text>means for assigning a second range of port identifiers to the second plurality of ports on the second card,</claim-text>
<claim-text>wherein the first range of port identifiers is different than the second range of port identifiers.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising:
<claim-text>means for assigning a device identifier to the first card; and</claim-text>
<claim-text>means for assigning the device identifier to the second card.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The network device of <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein the network device is a bridge, and wherein the device identifier is a bridge identifier.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising:
<claim-text>means for defining a pseudo-port on the second card, wherein the pseudo-port does not physically reside on the second card; and</claim-text>
<claim-text>means for presenting, via the pseudo-port, the data unit specifying the determined first superior local port among the first plurality of ports to the second instance of the spanning tree algorithm.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The network device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the network device resides within an Ethernet network.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626963-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626963</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12773660</doc-number>
<date>20100504</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>71</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>28</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710 22</main-classification>
<further-classification>710  5</further-classification>
<further-classification>710 20</further-classification>
<further-classification>710 21</further-classification>
<further-classification>710 24</further-classification>
<further-classification>710 28</further-classification>
<further-classification>710107</further-classification>
</classification-national>
<invention-title id="d2e53">Packet based data transfer system and method for host-slave interface</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5014265</doc-number>
<kind>A</kind>
<name>Hahne et al.</name>
<date>19910500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5155830</doc-number>
<kind>A</kind>
<name>Kurashige</name>
<date>19921000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5638535</doc-number>
<kind>A</kind>
<name>Rosenthal et al.</name>
<date>19970600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5644594</doc-number>
<kind>A</kind>
<name>Johnson et al.</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5797033</doc-number>
<kind>A</kind>
<name>Ecclesine</name>
<date>19980800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6044225</doc-number>
<kind>A</kind>
<name>Spencer et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 52</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6201813</doc-number>
<kind>B1</kind>
<name>Klausmeier et al.</name>
<date>20010300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6609167</doc-number>
<kind>B1</kind>
<name>Bastiani et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6662280</doc-number>
<kind>B1</kind>
<name>Hughes</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6714553</doc-number>
<kind>B1</kind>
<name>Poole et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370412</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7012913</doc-number>
<kind>B2</kind>
<name>Maturi</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7035948</doc-number>
<kind>B1</kind>
<name>Liang et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7342941</doc-number>
<kind>B2</kind>
<name>Jungers et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370471</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7460766</doc-number>
<kind>B2</kind>
<name>Heo et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>386239</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7620749</doc-number>
<kind>B2</kind>
<name>Biran et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7840722</doc-number>
<kind>B2</kind>
<name>Goh et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 33</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2006/0288129</doc-number>
<kind>A1</kind>
<name>Pope et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2007/0118677</doc-number>
<kind>A1</kind>
<name>Swartzentruber et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710316</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2008/0037543</doc-number>
<kind>A1</kind>
<name>Sala et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370392</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2008/0301697</doc-number>
<kind>A1</kind>
<name>Southgate et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718105</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2009/0216914</doc-number>
<kind>A1</kind>
<name>Kyusojin et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0216937</doc-number>
<kind>A1</kind>
<name>Yasufuku</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711103</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0259786</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710110</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2009/0327533</doc-number>
<kind>A1</kind>
<name>Kallam et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710 25</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2011/0167189</doc-number>
<kind>A1</kind>
<name>Matsubara et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710308</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>CN</country>
<doc-number>1713164</doc-number>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>CN</country>
<doc-number>101335667</doc-number>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>TW</country>
<doc-number>437223</doc-number>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710  1- 22</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 24</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710 28</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710107</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>710  5</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110276730</doc-number>
<kind>A1</kind>
<date>20111110</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Chu-Ming</first-name>
<address>
<city>Hsinchu</city>
<country>TW</country>
</address>
</addressbook>
<residence>
<country>TW</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Huang</last-name>
<first-name>Chiao-Chi</first-name>
<address>
<city>Zhubei</city>
<country>TW</country>
</address>
</addressbook>
<residence>
<country>TW</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Chien-Kuang</first-name>
<address>
<city>Zhubei</city>
<country>TW</country>
</address>
</addressbook>
<residence>
<country>TW</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hsu</last-name>
<first-name>Yu-Tin</first-name>
<address>
<city>Taipei</city>
<country>TW</country>
</address>
</addressbook>
<residence>
<country>TW</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Chu-Ming</first-name>
<address>
<city>Hsinchu</city>
<country>TW</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Huang</last-name>
<first-name>Chiao-Chi</first-name>
<address>
<city>Zhubei</city>
<country>TW</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Chien-Kuang</first-name>
<address>
<city>Zhubei</city>
<country>TW</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Hsu</last-name>
<first-name>Yu-Tin</first-name>
<address>
<city>Taipei</city>
<country>TW</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Chen Yoshimura LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Mediatek Inc.</orgname>
<role>03</role>
<address>
<city>Hsin-Chu</city>
<country>TW</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Unelus</last-name>
<first-name>Ernest</first-name>
<department>2181</department>
</primary-examiner>
<assistant-examiner>
<last-name>Yimer</last-name>
<first-name>Getente A</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In a host-slave data transfer system, the slave device receives packet based data from an external device and stores the packet content in a buffer as data segments. The slave merges a plurality of data segments into data streams and transmits the data streams to the host. The host uses direct memory access (DMA) to unpack the data stream from the slave into individual data segments without memory copy. To enable the host to set up DMA, the slave transmits information regarding sizes of the data segments to the host beforehand via an outband channel, e.g. by transmitting the size information in headers and/or tailers inserted into previous data streams. The host utilizes the data segment size information to program descriptor tables, such that each descriptor in the descriptor tables causes one data segment in the data stream to be stored in the system memory of the host.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="96.77mm" wi="205.32mm" file="US08626963-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="214.04mm" wi="144.86mm" orientation="landscape" file="US08626963-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="115.32mm" wi="177.55mm" orientation="landscape" file="US08626963-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="230.72mm" wi="164.08mm" orientation="landscape" file="US08626963-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="216.58mm" wi="156.97mm" orientation="landscape" file="US08626963-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="222.33mm" wi="130.73mm" orientation="landscape" file="US08626963-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="187.79mm" wi="176.19mm" orientation="landscape" file="US08626963-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates to a data transfer method and related apparatus in a host-slave interface. In particular, it provides a data transfer method in which the host uses direct memory access to unpack a stream of data containing multiple data units received from the slave without memory copy.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">SDIO (Secure Digital Input Output) is an interface that uses the SD (Secure Digital) card form factor for devices other than flash memory cards. Such devices (the slave device in the SDIO interface) may include GPS receivers, Wi-Fi or Bluetooth adapters, modems, Ethernet adapters, barcode readers, IrDA adapters, FM radio tuners, TV tuners, RFID readers, digital cameras, mass storage media such as hard drives, etc. The host devices (the master in the SDIO interface) that support SDIO may be PDAs (personal digital assistants), laptop computers, cell phones (&#x201c;smart phones&#x201d;), etc.</p>
<p id="p-0006" num="0005">In a conventional host-slave system using the SDIO interface, the host device controls data transfer, and the slave device can only move data according to the host's request. The slave device cannot initiate data transfer. In data transfer, there is a time delay between the request sending of the host device and the request receiving of the slave device, and likewise there is a time delay between the response sending of the slave device and the response receiving of the host device. Such a situation is called inter-command delay. Because the slave device must wait for the host to request data, inter-command delay associated with the request command causes delay in data transfer. The inter-command delay may be as much as hundreds of microseconds.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">The present invention is directed to an SDIO or other host-slave system and related method where the slave transfers a data stream containing multiple data segments and the host device employs direct memory access (DMA) to unpack the data segments into individual data segments.</p>
<p id="p-0008" num="0007">An object of the present invention is to provide an efficient data transfer method for an SDIO or other host-slave interface.</p>
<p id="p-0009" num="0008">Additional features and advantages of the invention will be set forth in the descriptions that follow and in part will be apparent from the description, or may be learned by practice of the invention. The objectives and other advantages of the invention will be realized and attained by the structure particularly pointed out in the written description and claims thereof as well as the appended drawings.</p>
<p id="p-0010" num="0009">To achieve these and other advantages and in accordance with the purpose of the present invention, as embodied and broadly described, the present invention provides a data transfer method implemented in a host-slave data transfer system, the slave being in data communication with an external device, the method including: (a) the slave receiving data from the external device and storing the received data in a buffer of the slave, the data comprising a plurality of data segments; (b) the slave obtaining data segment size information specifying sizes of each of the plurality of data segments; (c) the slave transmitting the data segment size information to the host via an outband channel; (d) the host receiving the data segment size information from the slave via the outband channel; (e) the host generating one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and a system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the lengths specified in the descriptors are based on the data segment size information received from the slave; (f) the host issuing a data transfer command to the slave to transfer the plurality of data segments; (g) in response to the data transfer command, the slave transferring the plurality of data segments as a data stream; and (h) the host executing direct memory access according to the descriptor tables to store individual ones of the plurality of data segments contained in the data stream in the system memory of the host at the specified addresses.</p>
<p id="p-0011" num="0010">In another aspect, the present invention provides a data transfer method implemented in a host-slave data transfer system, the slave being in data communication with an external device, the method including: (a) the slave receiving data from the external device and storing the received data in a buffer of the slave, the data comprising a first plurality of data segments and a second plurality of data segments; (b) the slave obtaining data segment size information specifying sizes of each of the second plurality of data segments; (c) in response to a first data transfer command from the host, the slave generating and transmitting to the host a first data stream, the first data stream containing the first plurality of data segments and a plurality of auxiliary segments, wherein the auxiliary segments include the data segment size information which specifies sizes of the second plurality of data segments; (d) the host receiving the first data stream and obtaining data segment size information from the plurality of auxiliary segments; (e) the host generating one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and a system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the lengths specified in the descriptors are based on the data segment size information obtained in step (d); (f) the host issuing a second data transfer command to the slave to transfer the second plurality of data segments as a data stream; (g) in response to the second data transfer command, the slave transferring the second plurality of data segments in a second data stream; and (h) the host executing direct memory access according to the descriptor tables to store individual ones of the second plurality of data segments contained in the second data stream in the system memory of the host at the specified addresses.</p>
<p id="p-0012" num="0011">In another aspect, the present invention provides a data transfer method implemented in a host of a host-slave system, the method including: receiving one or more data streams from the slave, the data streams containing a first plurality of data segments and a plurality of auxiliary segments; obtaining data segment size information from at least a portion of the plurality of auxiliary segments, the data segment size information specifying sizes of a second plurality of data segments stored in the slave; generating one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and a system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the lengths specified in the descriptors are based on the data segment size information; issuing a transfer command to the slave to transfer the second plurality of data segments as a data stream; executing direct memory access according to the descriptor tables to store individual ones of the second plurality of data segments in the data stream from the slave in the system memory of the host at the specified addresses.</p>
<p id="p-0013" num="0012">In another aspect, the present invention provides a host device in a host of a host-slave system, which includes: a processor; and a system memory storing data and program code executed by the processor, the program code being configured to cause the processor to execute a the data transfer process which includes: receiving one or more data streams from the slave, the data streams containing a first plurality of data segments and a plurality of auxiliary segments; obtaining data segment size information from at least a portion of the plurality of auxiliary segments, the data segment size information specifying sizes of a second plurality of data segments stored in the slave; generating one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and the system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the lengths specified in the descriptors are based on the data segment size information; issuing a transfer command to the slave to transfer the second plurality of data segments as a data stream; executing a direct memory access according to the descriptor tables to store individual ones of the second plurality of data segments in the data stream from the slave in the system memory of the host at the specified addresses.</p>
<p id="p-0014" num="0013">In another aspect, the present invention provides a slave device adapted for connecting to a host device in a host-slave system for communicating data between the host device and an external device, which includes: a buffer for storing data received from the external device, the data comprising a first plurality of data segments and a second plurality of data segments; a control circuit coupled to the buffer for obtaining data segment size information specifying sizes of each of the second plurality of data segments in the buffer; and a merging circuit coupled to the buffer and the control circuit, for generating a data stream and transferring the data stream to the host device in response to a data transfer command from the host device, the data stream containing the first plurality of data segments and a plurality of auxiliary segments, wherein the auxiliary segments include the data segment size information.</p>
<p id="p-0015" num="0014">In another aspect, the present invention provides a method implemented in a slave device of a host-slave system to facilitate communication of data between the host device and an external device, which includes: storing data received from the external device in a buffer of the slave device, the data comprising a first plurality of data segments and a second plurality of data segments; obtaining data segment size information specifying sizes of each of the second plurality of data segments in the buffer; and generating a data stream and transferring the data stream to the host device in response to a data transfer command from the host device, the data stream containing the first plurality of data segments and a plurality of auxiliary segments, wherein the auxiliary segments include the data segment size information.</p>
<p id="p-0016" num="0015">These and other objectives of the present invention will no doubt become obvious to those of ordinary skill in the art after reading the following detailed description of the preferred embodiment that is illustrated in the various figures and drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a host-slave data transfer system according to an embodiment of the present invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2</figref> is a schematically illustrates an example for the data format of a data stream transmitted from the slave to the host.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>is a schematic diagram of ADMA2 compliant with SD Host Controller Simplified Specification, Version 2.00.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. 3</figref><i>b </i>and <b>3</b><i>c </i>illustrate the operation of ADMA2. <figref idref="DRAWINGS">FIG. 3</figref><i>b </i>is a state diagram and <figref idref="DRAWINGS">FIG. 3</figref><i>c </i>explains the operation of each state.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. 4 and 5</figref> are flow charts illustrating a data transfer method according to an embodiment of the present invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> shows the process executed by the slave and</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 5</figref> shows the process executed by the host.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0024" num="0023">Certain terms are used throughout the description and following claims to refer to particular components. As one skilled in the art will appreciate, electronic equipment manufacturers may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following description and in the claims, the terms &#x201c;include&#x201d; and &#x201c;comprise&#x201d; are used in an open-ended fashion, and thus should be interpreted to mean &#x201c;include, but not limited to . . . &#x201d;. Also, the term &#x201c;couple&#x201d; is intended to mean either an indirect or direct electrical connection. Accordingly, if one device is coupled to another device, that connection may be through a direct electrical connection, or through an indirect electrical connection via other devices and connections.</p>
<p id="p-0025" num="0024">Commonly owned U.S. patent application Ser. No. 12/339,072, published as US 2009/0259786, describes a host-slave system using the SDIO interface in which the slave facilitates data communication between the host and an external device. In that system, the slave receives data packets from the external device and merges the packets into data streams for transfer to the host. Each data stream includes multiple data segments called SDUs (Service Data Units), where each SDU corresponds to the data content of a packet received from the external device. The slave also inserts headers and/or tailers into the data stream being transferred to the host, which include information regarding the slave's status and buffer conditions. On the host side, the host obtains the buffer condition information about the slave from the headers and/or tailers. Using this information, the host determines the amount of data to transmit or receive from the slave, and issues transfer commands to the slave accordingly. This scheme can significantly reduce inter-command delay.</p>
<p id="p-0026" num="0025">To enhance performance, embodiments of the present invention provide a further improved host-slave system in which the host utilizes direct memory access (DMA) techniques to unpack the data stream received from the slave in an efficient manner. More specifically, when the slave transfers a stream of data containing multiple SDUs to the host, the slave inserts headers and/or tailers into the data stream which contain information regarding the data sizes of SDUs ready to be transferred to the host. The host utilizes the data size information to setup subsequent data transfers using direct memory access (DMA) such that the host can directly unpack the stream of data from the slave into individual packets as the data stream is received by the host, without performing memory copy.</p>
<p id="p-0027" num="0026">In a conventional device that does not implementing the DMA technique described in the present disclosure, entire streams of data would have to be received into a buffer memory of the host, and the buffered data would then be copied out packet-by-packet, in order to unpack the data stream into individual packets for further processing. This is referred to as memory copy. Memory copy requires a relatively large sized buffer area to be allocated for temporarily holding the data stream. In addition, it requires extra host CPU effort for data copy from this buffer to the buffers that hold individual packets. Using the DMA technique described herein, the stream of data is unpacked into packets as the data stream is received from the slave without performing memory copy. Embodiments of the present invention are described in more detail with reference to <figref idref="DRAWINGS">FIGS. 1-5</figref>.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram illustrating a data transfer system <b>100</b> according to an embodiment of the present invention. The data transfer system <b>100</b> includes a host (master) device <b>101</b> and a slave device <b>103</b> connected in a host-slave relationship. In a practical application, the host may be a PDA, a laptop computer, a cell phone, etc., and the slave device may be a GPS receiver, a Wi-Fi or Bluetooth adapters, a modem, an Ethernet adapter, a barcode reader, an IrDA adapter, an FM radio tuner, a TV tuner, an RFID reader, a digital camera, a mass storage device such as a hard drive, etc. The host has a processor (CPU) and memories for storing program code and other data, such as a RAM, a ROM, a mass storage device such as a hard disk drive, etc. In many applications, the slave device communicates with or receives signals from an external device, such as GPS satellites, another Wi-Fi or Bluetooth device, a network, etc., using a communication protocol or data format compatible with the external device.</p>
<p id="p-0029" num="0028">In one particular embodiment, the slave device has a SD (Secure Digital) card form factor. In other words, it has a connector with a physical shape and pin configuration that can be accepted by an SD card slot. In the example described below, the slave device is a communication adapter that facilitates data communication between the host <b>101</b> and an external device (not shown).</p>
<p id="p-0030" num="0029">The slave device <b>103</b> includes a merging circuit <b>111</b>, a control circuit <b>112</b>, a buffer pool <b>114</b> (or simply referred to as the buffer), and an interface circuit <b>116</b>. Other components of the slave <b>103</b> not pertinent to the instant invention are not shown. The buffer <b>114</b> temporarily stores data transferred between the external device and the host <b>101</b>. The interface circuit <b>116</b> controls the data transmission with the external device using appropriate communication protocols or data formats compatible with the external device.</p>
<p id="p-0031" num="0030">The control circuit <b>112</b> manages the buffer pool <b>114</b> and controls the merging circuit <b>111</b>. During a receive transaction (i.e. receiving data from the external device by the host via the slave device), the control circuit <b>112</b> generates header and/or tailer as will be described in more detail later. The header and/or tailer are inputted to the merging circuit <b>111</b>. The merging circuit <b>111</b> merges data in the buffer pool (i.e. data received from the external device) and the header and/or tailer to generate a stream of merged data according to a predetermined data format, and transmits the merged data to the host device <b>101</b>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic diagram illustrating an example for the data format of the data stream which is generated by the merging circuit <b>111</b> and transmitted to the host device <b>101</b>. The data received from the external device are typically packet-based data. The interface circuit <b>116</b> extracts the data content (&#x201c;pure data&#x201d;) from the data packets and places the pure data in the buffer <b>114</b>. In the data structure shown in <figref idref="DRAWINGS">FIG. 2</figref>, each SDU (Service Data Unit) data segment <b>22</b> corresponds to the data content of a packet received from the external device. The merging circuit <b>111</b> adds a header <b>21</b> (&#x201c;SDU header&#x201d;) and a tailer <b>23</b> (&#x201c;SDU tailer&#x201d;) for each SDU data segment <b>22</b>, and merges multiple SDU data segments together with their headers and tailers into a data stream. A data stream is a continuous stream of data that is transferred to the host in response to one transfer command from the host.</p>
<p id="p-0033" num="0032">The dashed lines <b>26</b> in <figref idref="DRAWINGS">FIG. 2</figref> indicate boundaries of blocks defined by the SDIO protocol. In SDIO, as well as many other protocols, the host device transfers data in blocks. SDIO uses multiple blocks in a transaction to access mass data; the block size is configurable between the slave and the host and ranges from 1 B to 2 KB. Each data transfer command issued by the host specifies a number of blocks to be transferred. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, in a data stream generated by the merging circuit <b>111</b> of the slave <b>103</b>, the block boundaries have no relationship to the boundaries of the SDU data segments <b>22</b>, since the size of SDU data segment is determined by the packet size. The SDU data segment may have different sizes. Thus, when the host requires a transaction to receive a certain number of SDIO blocks, these blocks may contain one, or more, or a part of an SDU. The block boundaries (dashed lines <b>26</b>) may fall anywhere in the data stream, such as inside an SDU data segment <b>22</b>, inside an SDU header <b>21</b>, inside an SDU tailer <b>23</b>, etc. At the end of a data stream, padding data <b>25</b> may be added by the slave so that the total amount of data in the data stream makes up the number of blocks specified in the transfer command.</p>
<p id="p-0034" num="0033">The header <b>21</b> and/or tailer <b>23</b> are used by the slave <b>103</b> to convey various information to the host <b>101</b>. The header or tailer data may have any desired format. The location of the SDU headers and tailers is not important; they are not required to be located before or after each SDU. More generally, the header and/or tailer may be collectively referred to as the auxiliary segment while the SDU may be referred to as the data segment of the data stream. In the above-mentioned co-pending patent application, the header and/or tailer contains information regarding the slave's status and buffer conditions. According to embodiments of the present invention, the header and/or tailer contains information regarding the size of the SDUs in the data stream, which can be used by the host <b>101</b> to set up DMA.</p>
<p id="p-0035" num="0034">The host <b>101</b> implements features specified in the SD Host Controller Standard Specification. This is performed by the CPU executing program code stored in the memory of the host. The SD Host Controller Standard Specification provides that an SD host controller may optionally implement data transfer using DMA. The DMA algorithm defined in the SD Host Controller Standard Specification Version 1.00 is called SDMA (Single Operation DMA); the DMA algorithm defined in the SD Specifications, Part A2, SD Host Controller Simplified Specification, Version 2.00 and Version 3.0 is called Advanced DMA (ADMA) (see sections 1.4 and 1.13 of Version 2.00). Under the ADMA scheme, the host driver can program a list of data transfers between system memory and the SD slave to a descriptor table before executing ADMA. This enables ADMA to operate without interrupting the host driver.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>(adapted from <figref idref="DRAWINGS">FIG. 1-9</figref> of the SD Host Controller Simplified Specification, Version 2.00) schematically illustrates ADMA2, which is one of the two versions of ADMA. A descriptor table <b>31</b> is created in the system memory <b>32</b> by the host driver. Each descriptor line (one executable unit) consists of an address, a length and an attribute field. The attribute specifies operation of the descriptor line, such as data transfer (&#x201c;Tran&#x201d;), link, etc. In the example schematically illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the first line of the description table, &#x201c;Address 1 Length 1 Tran&#x201d;, when executed, will cause an amount of transferred data from the slave to be stored in the system memory as &#x201c;Data 1&#x201d;. The third line of the description table &#x201c;Address&#x2014;Link&#x201d;, when executed, will cause the descriptor pointer to move to another address which contains another line of the descriptor table. The structure of the ADMA section <b>33</b> includes the following hardware components: SDMA, State Machine, and Registers circuits (see <figref idref="DRAWINGS">FIG. 3</figref><i>a</i>).</p>
<p id="p-0037" num="0036">The link list feature of the ADMA can be used to unpack data streams containing multiple SDUs concatenated by the slave. A link descriptor, i.e. a descriptor whose Attribute value is Link, can link to another descriptor table specified in the Address field of the link descriptor. For example, in the example shown in <figref idref="DRAWINGS">FIG. 3</figref>, the third line of the descriptor table is a link descriptor. Using link descriptors, many descriptor tables may be linked together so that long data streams can be unpacked.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 3</figref><i>b </i>(adapted from <figref idref="DRAWINGS">FIG. 1-12</figref> of the SD Host Controller Simplified Specification, Version 2.00) shows a state diagram of ADMA2. <figref idref="DRAWINGS">FIG. 3</figref><i>c </i>(adapted from Table 1-12 of the SD Host Controller Simplified Specification, Version 2.00) explains the operation of each state. Four states are defined: Fetch Descriptor state, Change Address state, Transfer Data state, and Stop DMA state. In the Fetch Descriptor state, ADMA2 fetches a descriptor line and sets parameters in the internal registers, and then goes to the Change Address state. In the Change Address state, the link operation loads another Descriptor address to the ADMA System Address register. In other operations, ADMA System Address register is incremented to point to the next descriptor line. If the End value of the attribute field of the descriptor does not indicate an end (End=0), ADMA2 goes to the Transfer Data state. In the Transfer Data state, data transfer of one descriptor line is executed between the system memory and the slave device. If data transfer continues (End=0), ADMA2 goes to the Fetch Descriptor state. If data transfer completes, ADMA2 goes to the Stop DMA state. ADMA2 stays in the Stop DMA state in the following cases: (1) After Power On reset or software reset; and (2) All descriptor data transfers are completed. When a new ADMA2 operation is started by writing Command register, ADMA2 goes to the Fetch Descriptor state. The above description of the ADMA is specified in the SD Host Controller Simplified Specification, Version 2.00 and is familiar to those skilled in the relevant art.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIGS. 4 and 5</figref> are flow diagrams illustrating a data transfer process in which the host receives data from the slave according to an embodiment of the present invention. <figref idref="DRAWINGS">FIG. 4</figref> is a process executed by the slave <b>103</b> and <figref idref="DRAWINGS">FIG. 5</figref> is a process executed by the host <b>101</b>.</p>
<p id="p-0040" num="0039">As shown in <figref idref="DRAWINGS">FIG. 4</figref>, the slave <b>103</b> receives data from the external device and stores it in a buffer (step S<b>41</b>). As mentioned earlier, the data received from the external device are typically packet-based data, and the data content (&#x201c;pure data&#x201d;) is extracted from the data packets and placed in the buffer as SDUs. The control circuit <b>112</b> obtains information regarding the size of the SDUs, as well as buffer condition information and other status information about the slave (step S<b>42</b>). When the slave receives a transfer command from the host (step S<b>43</b>), in this case a command to receive data, the control circuit <b>112</b> generates headers and/or tailers containing the SDU size information and other information (step S<b>44</b>). The order of steps S<b>42</b>, S<b>43</b> and S<b>44</b> is not important. The merging circuit <b>111</b> then merges multiple SDUs with the headers and tailers to generate a data stream (step S<b>45</b>). The data stream is transferred to the host (step S<b>46</b>). This process (steps S<b>41</b> to S<b>46</b>) is repeated so that additional data received from the external device is transferred to the host.</p>
<p id="p-0041" num="0040">It should be noted that the SDU size information in the header or tailer does not describe the size of the SDUs being transferred in the current data stream; rather, the size information pertains to SDUs that are not being transferred in the current data stream but are ready to be transferred later. As described below, the host uses the SDU size information contained in the headers/tailers of a data stream to set up DMA for receiving subsequent data streams.</p>
<p id="p-0042" num="0041">On the host side, as shown in <figref idref="DRAWINGS">FIG. 5</figref>, the host <b>101</b> receives a data stream from the slave <b>103</b> (step S<b>51</b>). As described above, the data stream includes headers and/or tailers containing information about the sizes of SDUs that are ready to be transferred from the slave to the host. Again, note that the sizes information in the headers and/or tailers does not pertain to the SDUs in the current data stream. The host gathers such SDU size information from the headers and/or tailers (step S<b>52</b>). The host can then configure the host controller DMA engine based on the SDU size information to transfer some of the ready SDUs. More specifically, the host generates a descriptor table, by specifying the Address, Length and Attributes of each line of the descriptor table, such that each line corresponds to one SDU to be transferred (step S<b>53</b>). The Length field of the descriptor lines is specified based on the SDU size information previously gathered in step S<b>52</b>. For example, the Length value may be the length of one ready SDU plus the length of a header and the length of a tailer. After the descriptor table is set up, the host <b>101</b> issues a read command to the slave to transfer multiple SDUs (step S<b>54</b>). In response to the transfer command, the slave will transfer the requested data in a data stream. The host executes DMA (e.g. ADMA described above) to unpack the data stream from the slave into individual SDUs and store the SDUs in the host's system memory (step S<b>54</b>). By executing DMA, the data stream from the slave is directly unpacked into individual SDUs without performing memory copy.</p>
<p id="p-0043" num="0042">Note that in the process flow shown in <figref idref="DRAWINGS">FIG. 5</figref>, step S<b>51</b>, a step of receiving a data stream from the slave, may itself use an DMA operation. In step S<b>55</b>, the data stream received from the slave may contain SDU size information in headers and/or tailer regarding other additional SDUs in the slave buffer, and the host will gather the SDU size information to prepare the DMA descriptor table for further data transfers. Steps <b>52</b>-<b>55</b> may be repeated to transfer additional data from the slave.</p>
<p id="p-0044" num="0043">The method executed by the host <b>101</b>, described in <figref idref="DRAWINGS">FIG. 5</figref>, may be implemented in a host SD driver program. The implementation does not require any modification of the hardware structure of the host <b>101</b>. The driver program cooperates with the SD slave <b>103</b> to accomplish the data transfer.</p>
<p id="p-0045" num="0044">In the method described above, the slave uses headers and/or tailers inserted in a first data stream to transmit the data segment size information to the host to enable to host to set up DMA for a second, later data stream. More generally, the slave and host can use any appropriate communication method, generally referred to as an outband channel, to communicate the data segment size information.</p>
<p id="p-0046" num="0045">It should be noted that although the SDIO host-slave system is used as an example in the above descriptions, the invention is not limited to SDIO, and can be applied in other host-slave interface systems. It is particularly beneficial in a host-slave system compliant with a protocol that does not inherently offer flow control.</p>
<p id="p-0047" num="0046">It will be apparent to those skilled in the art that various modification and variations can be made in the host-slave data transfer system and related method of the present invention without departing from the spirit or scope of the invention. Thus, it is intended that the present invention cover modifications and variations that come within the scope of the appended claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A data transfer method implemented in a host of a host-slave system, comprising:
<claim-text>receiving one or more data streams from the slave, the data streams containing a first plurality of data segments and a plurality of auxiliary segments;</claim-text>
<claim-text>obtaining, by a processor, data segment size information from at least a portion of the plurality of auxiliary segments, the data segment size information specifying sizes a size of each of a second plurality of data segments stored in the slave, the second plurality of data segments being different from the first plurality of data segments;</claim-text>
<claim-text>generating, one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and a system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the length specified in each of the descriptors is based partially on the size of one of the second plurality of data segments obtained in the obtaining step;</claim-text>
<claim-text>issuing a transfer command to the slave to transfer the second plurality of data segments as a data stream;</claim-text>
<claim-text>executing, a direct memory access according to the descriptor tables to store individual ones of the second plurality of data segments in the data stream from the slave in the system memory of the host at the specified addresses, wherein execution of each descriptor of the descriptor tables causes one of the second plurality of data segments to be stored in the system memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the descriptor tables further include one or more additional descriptors, each additional descriptor defining a link to another descriptor table.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where the auxiliary segments are headers located before the respective data segments or tailers located after the respective data segments.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the host-slave system uses an SDIO (Secure Digital Input Output) interface.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A host device in a host of a host-slave system, comprising:
<claim-text>a processor; and</claim-text>
<claim-text>a system memory storing data wherein the processor executes a data transfer process which comprises:</claim-text>
<claim-text>receiving one or more data streams from the slave, the data streams containing a first plurality of data segments and a plurality of auxiliary segments;</claim-text>
<claim-text>obtaining data segment size information from at least a portion of the plurality of auxiliary segments, the data segment size information specifying a size of each of a second plurality of data segments stored in the slave, the second plurality of data segments being different from the first plurality of data segments;</claim-text>
<claim-text>generating one or more descriptor tables comprising a plurality of descriptors each defining a data transfer between the slave and the system memory of the host, each of the plurality of descriptors specifying an address in the system memory and a length of data to be transferred, wherein the length specified in each of the descriptors is based partially on the size of one of the second plurality of data segments obtained in the obtaining step;</claim-text>
<claim-text>issuing a transfer command to the slave to transfer the second plurality of data segments as a data stream;</claim-text>
<claim-text>executing a direct memory access according to the descriptor tables to store individual ones of the second plurality of data segments in the data stream from the slave in the system memory of the host at the specified addresses, wherein execution of each descriptor causes one of the second plurality of data segments to be stored in the system memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The host device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the descriptor tables further include one or more additional descriptors, each additional descriptor defining a link to another descriptor table.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The host device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, where the auxiliary segments are headers located before the respective data segments or tailers located after the respective data segments.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The host device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the host-slave system uses an SDIO (Secure Digital Input Output) interface.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A slave device adapted for communicating with a host device in a host-slave system, comprising:
<claim-text>a buffer for storing data, the data comprising a first plurality of data segments and a second plurality of data segments;</claim-text>
<claim-text>a control circuit coupled to the buffer for obtaining data segment size information specifying sizes of each of the second plurality of data segments in the buffer, the second plurality of data segments being different from the first plurality of data segments; and</claim-text>
<claim-text>a merging circuit coupled to the buffer and the control circuit, for generating a first data stream and transferring the first data stream to the host device in response to a data transfer command from the host device, the first data stream containing the first plurality of data segments and a plurality of auxiliary segments, wherein the auxiliary segments include the data segment size information specifying sizes of each of the second plurality of data segments, and for generating a second data stream containing the second plurality of data segments and transferring the second data stream to the host device after transferring the first data stream.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The slave device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the data is received from an external device, the slave device further comprising an interface circuit for controlling data transmission between the slave device and the external device using a predetermined communication protocol, wherein the data received from the external device includes a plurality of data packets, wherein the interface circuit extracts data content from each data packet and places the extracted data content in the buffer as one of the plurality of data segments.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The slave device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the merging circuit transfers the data stream to the host in a block-based manner.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The slave device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, where the auxiliary segments are headers located before the respective data segments or tailers located after the respective data segments.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The slave device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the host-slave system uses an SDIO (Secure Digital Input Output) interface.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method implemented in a slave device of a host-slave system to facilitate communication of data with a host device, comprising:
<claim-text>storing data in a buffer of the slave device, the data comprising a first plurality of data segments and a second plurality of data segments;</claim-text>
<claim-text>obtaining data segment size information specifying sizes of each of the second plurality of data segments in the buffer, the second plurality of data segments being different from the first plurality of data segments;</claim-text>
<claim-text>generating a first data stream and transferring the first data stream to the host device in response to a data transfer command from the host device, the first data stream containing the first plurality of data segments and a plurality of auxiliary segments, wherein the auxiliary segments include the data segment size information specifying sizes of each of the second plurality of data segments; and</claim-text>
<claim-text>generating a second data stream containing the second plurality of data segments and transferring the second data stream to the host device after transferring the first data stream.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the data is received from an external device, the method further comprising:
<claim-text>controlling data transmission between the slave device and the external device using a predetermined communication protocol, wherein the data received from the external device includes a plurality of data packets, the controlling step including extracting data content from each data packet and placing the extracted data content in the buffer as one of the plurality of data segments.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the in the transferring step, the data stream is transferred to the host in a block-based manner.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, where the auxiliary segments are headers located before the respective data segments or tailers located after the respective data segments.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the host-slave system uses an SDIO (Secure Digital Input Output) interface.</claim-text>
</claim>
</claims>
</us-patent-grant>

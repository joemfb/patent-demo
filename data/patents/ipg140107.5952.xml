<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627063-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627063</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12645907</doc-number>
<date>20091223</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>753</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>32</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classifications-cpc>
<main-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>9</main-group>
<subgroup>3268</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</main-cpc>
<further-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>63</main-group>
<subgroup>0823</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>2209</main-group>
<subgroup>38</subgroup>
<symbol-position>L</symbol-position>
<classification-value>A</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</further-cpc>
</classifications-cpc>
<classification-national>
<country>US</country>
<main-classification>713156</main-classification>
<further-classification>713151</further-classification>
<further-classification>713155</further-classification>
<further-classification>713157</further-classification>
<further-classification>713158</further-classification>
</classification-national>
<invention-title id="d2e53">Systems and methods for flash crowd control and batching OCSP requests via online certificate status protocol</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6763459</doc-number>
<kind>B1</kind>
<name>Corella</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713156</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7047404</doc-number>
<kind>B1</kind>
<name>Doonan et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7120793</doc-number>
<kind>B2</kind>
<name>Hope et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0029200</doc-number>
<kind>A1</kind>
<name>Dulin et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 67</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0111607</doc-number>
<kind>A1</kind>
<name>Yellepeddy</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0148323</doc-number>
<kind>A1</kind>
<name>Little et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0154879</doc-number>
<kind>A1</kind>
<name>Engberg et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713157</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2005/0172128</doc-number>
<kind>A1</kind>
<name>Little et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0289084</doc-number>
<kind>A1</kind>
<name>Thayer et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 67</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2007/0073621</doc-number>
<kind>A1</kind>
<name>Dulin et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 50</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2007/0234047</doc-number>
<kind>A1</kind>
<name>Miyazawa</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0013399</doc-number>
<kind>A1</kind>
<name>Cottrell et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2009/0063855</doc-number>
<kind>A1</kind>
<name>Parkinson</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713158</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2010/0146250</doc-number>
<kind>A1</kind>
<name>Bergerson et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>&#x201c;Certificate Revocation: Why You Should Do It and Why You Don't&#x201d;, Paco Hope, ;login, vol. 26, No. 8 (Dec. 2001), p. 36.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>US Office Action in U.S. Appl. No. 12/645,664 DTD Apr. 23, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>US Office Action in U.S. Appl. No. 12/645,664 DTD Oct. 1, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>US Office Action in U.S. Appl. No. 12/645,893 DTD Jan. 31, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>US Office Action in U.S. Appl. No. 12/645,893 DTD Mar. 1, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>US Notice of Allowance on U.S. Appl. No. 12/645,664 Dtd Aug. 29, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>21</number-of-drawing-sheets>
<number-of-figures>23</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110154018</doc-number>
<kind>A1</kind>
<date>20110623</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Edstrom</last-name>
<first-name>Christofer</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kanekar</last-name>
<first-name>Tushar</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Edstrom</last-name>
<first-name>Christofer</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kanekar</last-name>
<first-name>Tushar</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Foley &#x26; Lardner LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>McKenna</last-name>
<first-name>Christopher J.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Citrix Systems, Inc.</orgname>
<role>02</role>
<address>
<city>Fort Lauderdale</city>
<state>FL</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Henning</last-name>
<first-name>Matthew</first-name>
<department>2491</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present invention is directed towards systems and methods for batching OCSP requests and caching corresponding responses. An intermediary between a plurality of clients and one or more servers receives a first client certificate during a first SSL handshake with a first client and a second client certificate during a second SSL handshake with a second client. The intermediary may identify that the statuses of the client certificates are not in a cache of the intermediary. An OCSP responder of the intermediary may transmit a single request to an OCSP server to determine the statuses. The intermediary may determine, from a single response received from the OCSP server, whether to establish SSL connections with the clients based on the statuses. The intermediary may store the statuses to the cache for determining whether to establish a SSL connection in response to receiving a client certificate from the first client.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="181.10mm" wi="242.99mm" file="US08627063-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="249.85mm" wi="192.53mm" orientation="landscape" file="US08627063-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="256.29mm" wi="186.86mm" orientation="landscape" file="US08627063-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="257.56mm" wi="190.33mm" orientation="landscape" file="US08627063-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.54mm" wi="169.50mm" orientation="landscape" file="US08627063-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="216.24mm" wi="204.89mm" file="US08627063-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="208.87mm" wi="208.87mm" file="US08627063-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="222.59mm" wi="139.02mm" file="US08627063-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="250.78mm" wi="191.60mm" orientation="landscape" file="US08627063-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="257.81mm" wi="195.24mm" orientation="landscape" file="US08627063-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="244.77mm" wi="189.23mm" file="US08627063-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="230.80mm" wi="196.60mm" file="US08627063-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="233.17mm" wi="183.30mm" file="US08627063-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="217.85mm" wi="189.91mm" file="US08627063-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="242.15mm" wi="185.93mm" file="US08627063-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="246.80mm" wi="203.54mm" file="US08627063-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="263.91mm" wi="148.17mm" orientation="landscape" file="US08627063-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="258.15mm" wi="172.97mm" orientation="landscape" file="US08627063-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="199.39mm" wi="150.54mm" orientation="landscape" file="US08627063-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="257.81mm" wi="183.30mm" orientation="landscape" file="US08627063-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="216.75mm" wi="159.34mm" orientation="landscape" file="US08627063-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="234.02mm" wi="159.09mm" orientation="landscape" file="US08627063-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading>
<p id="p-0002" num="0001">The present application generally relates to the use of Online Certificate Status Protocol (OCSP) in data communications. In particular, the present application relates to systems and methods for processing one or more OCSP responses in connection with one or more Secure Socket Layer handshaking processes.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">OCSP may be used in any cryptographic system, such as a public key infrastructure (PKI) system, for accessing the status of digital certificates. For example, the status of a digital certificate may be determined to be valid or to have been revoked. A request to initiate a connection may include transmission of a digital certificate of the initiating device that has to be validated. If the status on the certificate is found to be revoked and/or invalid, the request may be refused. In some embodiments, the request for connection may be a request to establish a SSL connection. A client device and a server may establish an SSL connection via a series of handshaking messages.</p>
<heading id="h-0003" level="1">BRIEF SUMMARY</heading>
<p id="p-0004" num="0003">The present application is directed towards methods and systems for using Online Certificate Status Protocol (OCSP) in data communications between at least one client device and at least one server. An intermediary device may reside between the at least one client device and at least one server. There may be a need to validate a certificate of a client device in connection with a request to initiate a communications link via the intermediary device. The intermediary device may receive the request and determine the certificate revocation status of the certificate using OCSP. Based at least in part on the status, the intermediary device may establish the requested connection or refuse the request. The present disclosure describes several techniques to more efficiently perform OCSP processing and validation between clients and servers.</p>
<p id="p-0005" num="0004">In one aspect, the present invention is related to a method of batching OCSP requests and/or caching responses to the OCSP requests. The method includes receiving, by an intermediary device between a plurality of clients and one or more servers, a first client certificate during a first Secure Socket Layer (SSL) handshake with a first client and a second client certificate during a second SSL handshake with a second client. Each of the first client certificate and the second client certificate may correspond to a certificate authority. The intermediary device may identify that a status of the first client certificate and a status of the second client certificate is not in a cache of the intermediary device. An Online Certificate Status Protocol (OCSP) responder of the intermediary device may transmit a single request to an OCSP server to determine the status of each of the first client certificate and the second client certificate. The intermediary device may determine, from a single response received from the OCSP server, whether to establish a first SSL connection with the first client based on the status of the first client certificate and a second SSL connection with the second client based on the status of the second client certificate. The intermediary device may store to the cache a first cache entry identifying the status of the first client certificate and a second cache entry identifying the status of second client certificate. Each of the first cache entry and the second cache entry may be stored in association with the OCSP responder and/or with a cache expiry identified by the OCSP responder. The intermediary device may receive the first client certificate from the first client during a third SSL handshake. The intermediary may determine whether to establish a third SSL connection with the first client based on the status of the first client certificate identified via the cache.</p>
<p id="p-0006" num="0005">In some embodiments, the intermediary device receives one of the first client certificate or the second client certificate comprising an identifier of the certificate authority. The method may include determining that a cache entry for the status of the first client certificate or the second client certificate has expired. The intermediary device may wait a predetermined time period for receipt of additional client certificates corresponding to the certificate authority before transmitting the single request. In one embodiment, the intermediary device may receive a third client certificate before expiration of the predetermined time period and including in the single request to the OCSP server, a request for the status of the third client certificate.</p>
<p id="p-0007" num="0006">In various embodiments, the intermediary device may identify the OCSP responder of a plurality of OCSP responders of the intermediary device corresponding to the certificate authority. The intermediary device may establish SSL connections with those clients having client certificates with a good status and not establishing, by the intermediary device, SSL connection with those clients having client certificates not having a good status. The intermediary device may generate a hash for one of the first cache entry or the second cache entry based on one or more of: an issuer name, a subject name and a response. The intermediary device may store one of the first cache entry or the second cache entry from responses to the OCSP responder separate from cache entries of responses to a second OCSP responder. The intermediary device may determine to establish the third SSL connection based on the first cache entry identifying the status of the first client certificate as good and the first cache entry has not expired.</p>
<p id="p-0008" num="0007">In another aspect, the present invention is related to a system of batching Online Certificate Status Protocol (OCSP) requests and caching responses to the OCSP requests. The system includes an intermediary device receiving a plurality of client certificates during a Secure Socket Layer (SSL) handshake, a first client certificate during a first Secure Socket Layer (SSL) handshake with a first client and a second client certificate during a second SSL handshake with a second client, each of the first client certificate and the second client certificate corresponding to a certificate authority. A cache manager of the intermediary device may identify that a status of the first client certificate and a status of the second client certificate is not in a cache of the intermediary device. An Online Certificate Status Protocol (OCSP) responder of the intermediary device may transmit a single request to an OCSP server to the status of each of the first client certificate and the second client certificate. An SSL engine of the intermediary device may determine, from a single response received from the OCSP server, whether to establish a first SSL connection with the first client based on the status of the first client certificate and a second SSL connection with the second client based on the status of the second client certificate. The cache manager may store to the cache a first cache entry identifying the status of the first client certificate and a second cache entry identifying the status of second client certificate. Each of the first cache entry and the second cache entry stored in association with the OCSP responder and with a cache expiry identified by the OCSP responder. The intermediary device receives from first client during a third SSL handshake, the first client certificate and the SSL engine determines whether to establish a third SSL connection with the first client based on the status of the first client certificate identified via the cache.</p>
<p id="p-0009" num="0008">In some embodiments, the intermediary device receives one of the first client certificate or the second client certificate comprising an identifier of the certificate authority. In certain embodiments, the intermediary device may wait a predetermined time period for receipt of additional client certificates corresponding to the certificate authority before transmitting the single request. The intermediary device may receive a third client certificate before expiration of the predetermined time period. The OCSP responder may include in the single request to the OCSP server a request for the status of the third client certificate. In one embodiment, the intermediary device identifies the OCSP responder from a plurality of OCSP responders of the intermediary device corresponding to the certificate authority. In certain embodiments, the SSL engine establishes SSL connections with those clients having client certificates with a good status. The SSL engine may not establish SSL connection with those clients having client certificates not having a good status.</p>
<p id="p-0010" num="0009">In some embodiments, the cache manager may determine that one of the first cache entry or the second cache entry has expired. The cache manager may generate a hash for one of the first cache entry or the second cache entry based on an issuer name, a subject name and a response. The cache manager may store one of the first cache entry or the second cache entry from responses to the OCSP responder separate from cache entries of responses to a second OCSP responder. In certain embodiments, the SSL engine may determine to establish the third SSL connection based on the first cache entry identifying the status of the first client certificate as good and the first cache entry has not expired.</p>
<p id="p-0011" num="0010">In still another aspect, the present invention is related to a method of determining a status of a client certificate from a plurality of responses for an Online Certificate Status Protocol (OCSP) request. The method includes identifying, by an intermediary device between a plurality of clients and one or more servers, a plurality of Online Certificate Status Protocol (OCSP) responders for determining a status of a client certificate responsive to receiving the client certificate from a client during a Secure Socket Layer (SSL) handshake. Each of the plurality of OCSP responders may transmit a request for the status of the client certificate to a uniform resource locator corresponding to each OCSP responder. The intermediary device may determine a single status for the client certificate from a plurality of statuses of the client certificate received via responses from each uniform resource locator.</p>
<p id="p-0012" num="0011">In some embodiments, the intermediary device identifies the plurality of OCSP responders based on a certificate authority of the client certificate. The method may include identifying the uniform resource locator corresponding to each OCSP responder via a configuration parameter for each OCSP responder. In one embodiments, the method includes identifying a priority assigned to each OCSP responder of the plurality of OCSP responders. In certain embodiments, the method includes identifying an order of each OCSP responder in the plurality of OCSP responders. The method may also include identifying a weight assigned to each OCSP responder of the plurality of OCSP responders.</p>
<p id="p-0013" num="0012">In some embodiments, the intermediary device may determine the single status of the client certificate by applying a policy to the plurality of statuses. The intermediary device may determine the single status of the client certificate by using a status from the plurality of statuses that first identifies one of a good or revoked status. The intermediary device may determine the single status of the client certificate by identifying a status from the plurality of statuses with one of a highest priority or one of a highest weight. The intermediary device may determine the single status of the client certificate by applying a function to the plurality of statuses.</p>
<p id="p-0014" num="0013">In yet another aspect, the present invention is related to a system of determining by an intermediary device a status of a client certificate from a plurality of responses for an Online Certificate Status Protocol (OCSP) request. The intermediary device is located between a plurality of clients and one or more servers. The system includes an intermediary device identifying a plurality of Online Certificate Status Protocol (OCSP) responders for determining a status of a client certificate responsive to receiving the client certificate from a client during a Secure Socket Layer (SSL) handshake. Each OCSP responder of the plurality of OCSP responders may transmit a request for the status of the client certificate to a uniform resource locator corresponding to each OCSP responder. An SSL engine of the intermediary device may determine a single status for the client certificate from a plurality of statuses of the client certificate received via responses from each uniform resource locator.</p>
<p id="p-0015" num="0014">In some embodiments, the intermediary device determines the plurality of OCSP responders based on a certificate authority of the client certificate. Each OCSP responder may identify the uniform resource locator via a configuration parameter. The SSL engine may identify a priority assigned to each OCSP responder of the plurality of OCSP responders. The SSL engine may identify an order of each OCSP responder in the plurality of OCSP responders. The SSL engine may identify a weight assigned to each OCSP responder of the plurality of OCSP responders. The SSL engine may determine the single status of the client certificate by applying a policy to the plurality of statuses. The SSL engine may determine the single status of the client certificate by using a status from the plurality of statuses that first identifies one of a good or revoked status. The SSL engine may determine the single status of the client certificate by identifying a status from the plurality of statuses with one of a highest priority or one of a highest weight. The SSL engine may determine the single status of the client certificate by applying a function to the plurality of statuses.</p>
<p id="p-0016" num="0015">In yet even another aspect, the present invention is related to a method of processing an Online Certificate Status Protocol (OCSP) request in parallel to processing a Secure Socket Layer (SSL) handshake. The method includes transmitting, by an Online Certificate Status Protocol (OCSP) responder of an intermediary device between a plurality of clients and one or more servers, an OCSP request to a OCSP server for a status of a client certificate responsive to receiving the client certificate from a client during a Secure Socket Layer (SSL) handshake. The intermediary device may continue to perform remaining portions of the SSL handshake while the OCSP request to the OCSP server is outstanding. The intermediary device may establish an SSL connection for the SSL handshake. The intermediary device may determine whether to terminate or maintain the established SSL connection based on the status of the client certificate received via a response from the OCSP server.</p>
<p id="p-0017" num="0016">In some embodiments, the intermediary device may identify the OCSP responder from a plurality of OCSP responders based on a certificate authority of the client certificate. The intermediary device may transmit the OCSP request as part of a batch OCSP request to the OCSP server for statuses of a plurality of client certificates. The intermediary device may transmit to the client a secret key encrypted with a public key while the OCSP request to the OCSP server is outstanding. The intermediary device may generate a random number for a pre-master secret key while the OCSP request to the OCSP server is outstanding. The intermediary device may calculate a master secret key while the OCSP request to the OCSP server is outstanding. The intermediary device may establish the SSL connection while the OCSP request to the OCSP server is outstanding. The intermediary device may establish the SSL connection responsive to receipt of the status of the client certificate from the OCSP server.</p>
<p id="p-0018" num="0017">In some embodiments, the method includes determining in response to a request from the client via the established SSL connection whether to terminate or maintain the SSL connection based on the status of the client certificate received via the response. The method may include determining to terminate the established SSL connection based on the status of the client certificate corresponding to one of revoked or unknown.</p>
<p id="p-0019" num="0018">In yet even another aspect, the present invention is related to a system of an intermediary device for processing an Online Certificate Status Protocol (OCSP) request in parallel to processing a Secure Socket Layer (SSL) handshake. The intermediary device resides between a plurality of clients and one or more servers. The system includes an Online Certificate Status Protocol (OCSP) responder of an intermediary device transmitting an OCSP request to a OCSP server for a status of a client certificate responsive to the intermediary device receiving the client certificate from a client during a Secure Socket Layer (SSL) handshake. An SSL engine of the intermediary device may continue to perform remaining portions of the SSL handshake while the OCSP request to the OCSP server is outstanding and establishes and SSL connection for the SSL handshake. The intermediary device may determine whether to terminate or maintain the SSL connection based on the status of the client certificate received via a response from the OCSP server.</p>
<p id="p-0020" num="0019">In some embodiments, the SSL engine identifies the OCSP responder from a plurality of OCSP responders based on a certificate authority of the client certificate. The SSL engine may transmit the OCSP request as part of a batch OCSP request to the OCSP server for statuses of a plurality of client certificates. The SSL engine may transmit to the client a secret key encrypted with a public key while the OCSP request to the OCSP server is outstanding. The SSL engine may generate and/or transmit a random number for a pre-master secret key while the OCSP request to the OCSP server is outstanding. The SSL engine may calculate a master secret key while the OCSP request to the OCSP server is outstanding. The SSL engine may establish the SSL connection while the OCSP request to the OCSP server is outstanding. The SSL engine may establish the SSL connection responsive to receipt of the status of the client certificate from the OCSP server.</p>
<p id="p-0021" num="0020">In certain embodiments, the intermediary device may determine in response to a request from the client via the established SSL connection whether to terminate or maintain the SSL connection based on the status of the client certificate received via the response. The intermediary device may determine to terminate the established SSL connection based on the status of the client certificate corresponding to one of revoked or unknown.</p>
<p id="p-0022" num="0021">The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0023" num="0022">The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0024" num="0023">The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1A</figref> is a block diagram of an embodiment of a network environment for a client to access a server via an appliance;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1B</figref> is a block diagram of an embodiment of an environment for delivering a computing environment from a server to a client via an appliance;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1C</figref> is a block diagram of another embodiment of an environment for delivering a computing environment from a server to a client via an appliance;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 1D</figref> is a block diagram of another embodiment of an environment for delivering a computing environment from a server to a client via an appliance;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIGS. 1E-1H</figref> are block diagrams of embodiments of a computing device;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2A</figref> is a block diagram of an embodiment of an appliance for processing communications between a client and a server;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2B</figref> is a block diagram of another embodiment of an appliance for optimizing, accelerating, load-balancing and routing communications between a client and a server;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an embodiment of a client for communicating with a server via the appliance;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 4A</figref> is a block diagram of an embodiment of a virtualization environment;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 4B</figref> is a block diagram of another embodiment of a virtualization environment;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 4C</figref> is a block diagram of an embodiment of a virtualized appliance;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 5A</figref> are block diagrams of embodiments of approaches to implementing parallelism in a multi-core network appliance;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 5B</figref> is a block diagram of an embodiment of a system utilizing a multi-core network application;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5C</figref> is a block diagram of an embodiment of an aspect of a multi-core network appliance;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 6A</figref> is a block diagram of an embodiment of a system utilizing OCSP to validate certificates;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 6B</figref> a representation of an embodiment of an OCSP request;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 6C</figref> a representation of an embodiment of an OCSP response;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 7A</figref> is a flow diagram of an embodiment of steps of a method for batching and/or caching OCSP responses;</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 7B</figref> is a flow diagram of an embodiment of steps of a method for processing an OCSP request in parallel to processing a SSL handshake; and</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 7C</figref> is a flow diagram of an embodiment of steps of a method for supporting OCSP in connection with an SSL handshaking procedure.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0045" num="0044">The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and/or structurally similar elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0046" num="0045">For purposes of reading the description of the various embodiments below, the following descriptions of the sections of the specification and their respective contents may be helpful:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0046">Section A describes a network environment and computing environment which may be useful for practicing embodiments described herein;</li>
        <li id="ul0002-0002" num="0047">Section B describes embodiments of systems and methods for delivering a computing environment to a remote user;</li>
        <li id="ul0002-0003" num="0048">Section C describes embodiments of systems and methods for accelerating communications between a client and a server;</li>
        <li id="ul0002-0004" num="0049">Section D describes embodiments of systems and methods for virtualizing an application delivery controller;</li>
        <li id="ul0002-0005" num="0050">Section E describes embodiments of systems and methods for providing a multi-core architecture and environment; and</li>
        <li id="ul0002-0006" num="0051">Section F describes embodiments of systems and methods for processing an OCSP response in connection with a SSL handshake.
<br/>
A. Network and Computing Environment
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0047" num="0052">Prior to discussing the specifics of embodiments of the systems and methods of an appliance and/or client, it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to <figref idref="DRAWINGS">FIG. 1A</figref>, an embodiment of a network environment is depicted. In brief overview, the network environment comprises one or more clients <b>102</b><i>a</i>-<b>102</b><i>n </i>(also generally referred to as local machine(s) <b>102</b>, or client(s) <b>102</b>) in communication with one or more servers <b>106</b><i>a</i>-<b>106</b><i>n </i>(also generally referred to as server(s) <b>106</b>, or remote machine(s) <b>106</b>) via one or more networks <b>104</b>, <b>104</b>&#x2032; (generally referred to as network <b>104</b>). In some embodiments, a client <b>102</b> communicates with a server <b>106</b> via an appliance <b>200</b>.</p>
<p id="p-0048" num="0053">Although <figref idref="DRAWINGS">FIG. 1A</figref> shows a network <b>104</b> and a network <b>104</b>&#x2032; between the clients <b>102</b> and the servers <b>106</b>, the clients <b>102</b> and the servers <b>106</b> may be on the same network <b>104</b>. The networks <b>104</b> and <b>104</b>&#x2032; can be the same type of network or different types of networks. The network <b>104</b> and/or the network <b>104</b>&#x2032; can be a local-area network (LAN), such as a company Intranet, a metropolitan area network (MAN), or a wide area network (WAN), such as the Internet or the World Wide Web. In one embodiment, network <b>104</b>&#x2032; may be a private network and network <b>104</b> may be a public network. In some embodiments, network <b>104</b> may be a private network and network <b>104</b>&#x2032; a public network. In another embodiment, networks <b>104</b> and <b>104</b>&#x2032; may both be private networks. In some embodiments, clients <b>102</b> may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network <b>104</b> to the servers <b>106</b> located at a corporate data center.</p>
<p id="p-0049" num="0054">The network <b>104</b> and/or <b>104</b>&#x2032; be any type and/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. In some embodiments, the network <b>104</b> may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network <b>104</b> and/or <b>104</b>&#x2032; may be a bus, star, or ring network topology. The network <b>104</b> and/or <b>104</b>&#x2032; and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.</p>
<p id="p-0050" num="0055">As shown in <figref idref="DRAWINGS">FIG. 1A</figref>, the appliance <b>200</b>, which also may be referred to as an interface unit <b>200</b> or gateway <b>200</b>, is shown between the networks <b>104</b> and <b>104</b>&#x2032;. In some embodiments, the appliance <b>200</b> may be located on network <b>104</b>. For example, a branch office of a corporate enterprise may deploy an appliance <b>200</b> at the branch office. In other embodiments, the appliance <b>200</b> may be located on network <b>104</b>&#x2032;. For example, an appliance <b>200</b> may be located at a corporate data center. In yet another embodiment, a plurality of appliances <b>200</b> may be deployed on network <b>104</b>. In some embodiments, a plurality of appliances <b>200</b> may be deployed on network <b>104</b>&#x2032;. In one embodiment, a first appliance <b>200</b> communicates with a second appliance <b>200</b>&#x2032;. In other embodiments, the appliance <b>200</b> could be a part of any client <b>102</b> or server <b>106</b> on the same or different network <b>104</b>,<b>104</b>&#x2032; as the client <b>102</b>. One or more appliances <b>200</b> may be located at any point in the network or network communications path between a client <b>102</b> and a server <b>106</b>.</p>
<p id="p-0051" num="0056">In some embodiments, the appliance <b>200</b> comprises any of the network devices manufactured by Citrix Systems, Inc. of Ft. Lauderdale Fla., referred to as Citrix NetScaler devices. In other embodiments, the appliance <b>200</b> includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance <b>205</b> includes any of the DX acceleration device platforms and/or the SSL VPN series of devices, such as SA <b>700</b>, SA <b>2000</b>, SA <b>4000</b>, and SA <b>6000</b> devices manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In yet another embodiment, the appliance <b>200</b> includes any application acceleration and/or security related appliances and/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco ACE Application Control Engine Module service software and network modules, and Cisco AVS Series Application Velocity System.</p>
<p id="p-0052" num="0057">In one embodiment, the system may include multiple, logically-grouped servers <b>106</b>. In these embodiments, the logical group of servers may be referred to as a server farm <b>38</b>. In some of these embodiments, the serves <b>106</b> may be geographically dispersed. In some cases, a farm <b>38</b> may be administered as a single entity. In other embodiments, the server farm <b>38</b> comprises a plurality of server farms <b>38</b>. In one embodiment, the server farm executes one or more applications on behalf of one or more clients <b>102</b>.</p>
<p id="p-0053" num="0058">The servers <b>106</b> within each farm <b>38</b> can be heterogeneous. One or more of the servers <b>106</b> can operate according to one type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash.), while one or more of the other servers <b>106</b> can operate on according to another type of operating system platform (e.g., Unix or Linux). The servers <b>106</b> of each farm <b>38</b> do not need to be physically proximate to another server <b>106</b> in the same farm <b>38</b>. Thus, the group of servers <b>106</b> logically grouped as a farm <b>38</b> may be interconnected using a wide-area network (WAN) connection or medium-area network (MAN) connection. For example, a farm <b>38</b> may include servers <b>106</b> physically located in different continents or different regions of a continent, country, state, city, campus, or room. Data transmission speeds between servers <b>106</b> in the farm <b>38</b> can be increased if the servers <b>106</b> are connected using a local-area network (LAN) connection or some form of direct connection.</p>
<p id="p-0054" num="0059">Servers <b>106</b> may be referred to as a file server, application server, web server, proxy server, or gateway server. In some embodiments, a server <b>106</b> may have the capacity to function as either an application server or as a master application server. In one embodiment, a server <b>106</b> may include an Active Directory. The clients <b>102</b> may also be referred to as client nodes or endpoints. In some embodiments, a client <b>102</b> has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients <b>102</b><i>a</i>-<b>102</b><i>n. </i></p>
<p id="p-0055" num="0060">In some embodiments, a client <b>102</b> communicates with a server <b>106</b>. In one embodiment, the client <b>102</b> communicates directly with one of the servers <b>106</b> in a farm <b>38</b>. In another embodiment, the client <b>102</b> executes a program neighborhood application to communicate with a server <b>106</b> in a farm <b>38</b>. In still another embodiment, the server <b>106</b> provides the functionality of a master node. In some embodiments, the client <b>102</b> communicates with the server <b>106</b> in the farm <b>38</b> through a network <b>104</b>. Over the network <b>104</b>, the client <b>102</b> can, for example, request execution of various applications hosted by the servers <b>106</b><i>a</i>-<b>106</b><i>n </i>in the farm <b>38</b> and receive output of the results of the application execution for display. In some embodiments, only the master node provides the functionality required to identify and provide address information associated with a server <b>106</b>&#x2032; hosting a requested application.</p>
<p id="p-0056" num="0061">In one embodiment, the server <b>106</b> provides functionality of a web server. In another embodiment, the server <b>106</b><i>a </i>receives requests from the client <b>102</b>, forwards the requests to a second server <b>106</b><i>b </i>and responds to the request by the client <b>102</b> with a response to the request from the server <b>106</b><i>b</i>. In still another embodiment, the server <b>106</b> acquires an enumeration of applications available to the client <b>102</b> and address information associated with a server <b>106</b> hosting an application identified by the enumeration of applications. In yet another embodiment, the server <b>106</b> presents the response to the request to the client <b>102</b> using a web interface. In one embodiment, the client <b>102</b> communicates directly with the server <b>106</b> to access the identified application. In another embodiment, the client <b>102</b> receives application output data, such as display data, generated by an execution of the identified application on the server <b>106</b>.</p>
<p id="p-0057" num="0062">Referring now to <figref idref="DRAWINGS">FIG. 1B</figref>, an embodiment of a network environment deploying multiple appliances <b>200</b> is depicted. A first appliance <b>200</b> may be deployed on a first network <b>104</b> and a second appliance <b>200</b>&#x2032; on a second network <b>104</b>&#x2032;. For example a corporate enterprise may deploy a first appliance <b>200</b> at a branch office and a second appliance <b>200</b>&#x2032; at a data center. In another embodiment, the first appliance <b>200</b> and second appliance <b>200</b>&#x2032; are deployed on the same network <b>104</b> or network <b>104</b>. For example, a first appliance <b>200</b> may be deployed for a first server farm <b>38</b>, and a second appliance <b>200</b> may be deployed for a second server farm <b>38</b>&#x2032;. In another example, a first appliance <b>200</b> may be deployed at a first branch office while the second appliance <b>200</b>&#x2032; is deployed at a second branch office'. In some embodiments, the first appliance <b>200</b> and second appliance <b>200</b>&#x2032; work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server</p>
<p id="p-0058" num="0063">Referring now to <figref idref="DRAWINGS">FIG. 1C</figref>, another embodiment of a network environment deploying the appliance <b>200</b> with one or more other types of appliances, such as between one or more WAN optimization appliance <b>205</b>, <b>205</b>&#x2032; is depicted. For example a first WAN optimization appliance <b>205</b> is shown between networks <b>104</b> and <b>104</b>&#x2032; and a second WAN optimization appliance <b>205</b>&#x2032; may be deployed between the appliance <b>200</b> and one or more servers <b>106</b>. By way of example, a corporate enterprise may deploy a first WAN optimization appliance <b>205</b> at a branch office and a second WAN optimization appliance <b>205</b>&#x2032; at a data center. In some embodiments, the appliance <b>205</b> may be located on network <b>104</b>&#x2032;. In other embodiments, the appliance <b>205</b>&#x2032; may be located on network <b>104</b>. In some embodiments, the appliance <b>205</b>&#x2032; may be located on network <b>104</b>&#x2032; or network <b>104</b>&#x2033;. In one embodiment, the appliance <b>205</b> and <b>205</b>&#x2032; are on the same network. In another embodiment, the appliance <b>205</b> and <b>205</b>&#x2032; are on different networks. In another example, a first WAN optimization appliance <b>205</b> may be deployed for a first server farm <b>38</b> and a second WAN optimization appliance <b>205</b>&#x2032; for a second server farm <b>38</b>&#x2032;.</p>
<p id="p-0059" num="0064">In one embodiment, the appliance <b>205</b> is a device for accelerating, optimizing or otherwise improving the performance, operation, or quality of service of any type and form of network traffic, such as traffic to and/or from a WAN connection. In some embodiments, the appliance <b>205</b> is a performance enhancing proxy. In other embodiments, the appliance <b>205</b> is any type and form of WAN optimization or acceleration device, sometimes also referred to as a WAN optimization controller. In one embodiment, the appliance <b>205</b> is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In other embodiments, the appliance <b>205</b> includes any of the product embodiments referred to as BIG-IP link controller and WANjet manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance <b>205</b> includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In some embodiments, the appliance <b>205</b> includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco, Calif. In other embodiments, the appliance <b>205</b> includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland, N.J. In one embodiment, the appliance <b>205</b> includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino, Calif., such as the PacketShaper, iShared, and SkyX product embodiments provided by Packeteer. In yet another embodiment, the appliance <b>205</b> includes any WAN related appliances and/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco Wide Area Network Application Services software and network modules, and Wide Area Network engine appliances.</p>
<p id="p-0060" num="0065">In one embodiment, the appliance <b>205</b> provides application and data acceleration services for branch-office or remote offices. In one embodiment, the appliance <b>205</b> includes optimization of Wide Area File Services (WAFS). In another embodiment, the appliance <b>205</b> accelerates the delivery of files, such as via the Common Internet File System (CIFS) protocol. In other embodiments, the appliance <b>205</b> provides caching in memory and/or storage to accelerate delivery of applications and data. In one embodiment, the appliance <b>205</b> provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment, the appliance <b>205</b> provides transport layer protocol optimizations, flow control, performance enhancements or modifications and/or management to accelerate delivery of applications and data over a WAN connection. For example, in one embodiment, the appliance <b>205</b> provides Transport Control Protocol (TCP) optimizations. In other embodiments, the appliance <b>205</b> provides optimizations, flow control, performance enhancements or modifications and/or management for any session or application layer protocol.</p>
<p id="p-0061" num="0066">In another embodiment, the appliance <b>205</b> encoded any type and form of data or information into custom or standard TCP and/or IP header fields or option fields of network packet to announce presence, functionality or capability to another appliance <b>205</b>&#x2032;. In another embodiment, an appliance <b>205</b>&#x2032; may communicate with another appliance <b>205</b>&#x2032; using data encoded in both TCP and/or IP header fields or options. For example, the appliance may use TCP option(s) or IP header fields or options to communicate one or more parameters to be used by the appliances <b>205</b>, <b>205</b>&#x2032; in performing functionality, such as WAN acceleration, or for working in conjunction with each other.</p>
<p id="p-0062" num="0067">In some embodiments, the appliance <b>200</b> preserves any of the information encoded in TCP and/or IP header and/or option fields communicated between appliances <b>205</b> and <b>205</b>&#x2032;. For example, the appliance <b>200</b> may terminate a transport layer connection traversing the appliance <b>200</b>, such as a transport layer connection from between a client and a server traversing appliances <b>205</b> and <b>205</b>&#x2032;. In one embodiment, the appliance <b>200</b> identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance <b>205</b> via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance <b>205</b>&#x2032; via a second transport layer connection.</p>
<p id="p-0063" num="0068">Referring now to <figref idref="DRAWINGS">FIG. 1D</figref>, a network environment for delivering and/or operating a computing environment on a client <b>102</b> is depicted. In some embodiments, a server <b>106</b> includes an application delivery system <b>190</b> for delivering a computing environment or an application and/or data file to one or more clients <b>102</b>. In brief overview, a client <b>10</b> is in communication with a server <b>106</b> via network <b>104</b>, <b>104</b>&#x2032; and appliance <b>200</b>. For example, the client <b>102</b> may reside in a remote office of a company, e.g., a branch office, and the server <b>106</b> may reside at a corporate data center. The client <b>102</b> comprises a client agent <b>120</b>, and a computing environment <b>15</b>. The computing environment <b>15</b> may execute or operate an application that accesses, processes or uses a data file. The computing environment <b>15</b>, application and/or data file may be delivered via the appliance <b>200</b> and/or the server <b>106</b>.</p>
<p id="p-0064" num="0069">In some embodiments, the appliance <b>200</b> accelerates delivery of a computing environment <b>15</b>, or any portion thereof, to a client <b>102</b>. In one embodiment, the appliance <b>200</b> accelerates the delivery of the computing environment <b>15</b> by the application delivery system <b>190</b>. For example, the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location, such as a branch office of the company. In another embodiment, the appliance <b>200</b> accelerates transport layer traffic between a client <b>102</b> and a server <b>106</b>. The appliance <b>200</b> may provide acceleration techniques for accelerating any transport layer payload from a server <b>106</b> to a client <b>102</b>, such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression and 5) caching. In some embodiments, the appliance <b>200</b> provides load balancing of servers <b>106</b> in responding to requests from clients <b>102</b>. In other embodiments, the appliance <b>200</b> acts as a proxy or access server to provide access to the one or more servers <b>106</b>. In another embodiment, the appliance <b>200</b> provides a secure virtual private network connection from a first network <b>104</b> of the client <b>102</b> to the second network <b>104</b>&#x2032; of the server <b>106</b>, such as an SSL VPN connection. It yet other embodiments, the appliance <b>200</b> provides application firewall security, control and management of the connection and communications between a client <b>102</b> and a server <b>106</b>.</p>
<p id="p-0065" num="0070">In some embodiments, the application delivery management system <b>190</b> provides application delivery techniques to deliver a computing environment to a desktop of a user, remote or otherwise, based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine <b>195</b>. With these techniques, a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device <b>100</b>. In one embodiment, the application delivery system <b>190</b> may reside or execute on a server <b>106</b>. In another embodiment, the application delivery system <b>190</b> may reside or execute on a plurality of servers <b>106</b><i>a</i>-<b>106</b><i>n</i>. In some embodiments, the application delivery system <b>190</b> may execute in a server farm <b>38</b>. In one embodiment, the server <b>106</b> executing the application delivery system <b>190</b> may also store or provide the application and data file. In another embodiment, a first set of one or more servers <b>106</b> may execute the application delivery system <b>190</b>, and a different server <b>106</b><i>n </i>may store or provide the application and data file. In some embodiments, each of the application delivery system <b>190</b>, the application, and data file may reside or be located on different servers. In yet another embodiment, any portion of the application delivery system <b>190</b> may reside, execute or be stored on or distributed to the appliance <b>200</b>, or a plurality of appliances.</p>
<p id="p-0066" num="0071">The client <b>102</b> may include a computing environment <b>15</b> for executing an application that uses or processes a data file. The client <b>102</b> via networks <b>104</b>, <b>104</b>&#x2032; and appliance <b>200</b> may request an application and data file from the server <b>106</b>. In one embodiment, the appliance <b>200</b> may forward a request from the client <b>102</b> to the server <b>106</b>. For example, the client <b>102</b> may not have the application and data file stored or accessible locally. In response to the request, the application delivery system <b>190</b> and/or server <b>106</b> may deliver the application and data file to the client <b>102</b>. For example, in one embodiment, the server <b>106</b> may transmit the application as an application stream to operate in computing environment <b>15</b> on client <b>102</b>.</p>
<p id="p-0067" num="0072">In some embodiments, the application delivery system <b>190</b> comprises any portion of the Citrix Access Suite&#x2122; by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server&#x2122; and/or any of the Microsoft&#xae; Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application delivery system <b>190</b> may deliver one or more applications to clients <b>102</b> or users via a remote-display protocol or otherwise via remote-based or server-based computing. In another embodiment, the application delivery system <b>190</b> may deliver one or more applications to clients or users via steaming of the application.</p>
<p id="p-0068" num="0073">In one embodiment, the application delivery system <b>190</b> includes a policy engine <b>195</b> for controlling and managing the access to, selection of application execution methods and the delivery of applications. In some embodiments, the policy engine <b>195</b> determines the one or more applications a user or client <b>102</b> may access. In another embodiment, the policy engine <b>195</b> determines how the application should be delivered to the user or client <b>102</b>, e.g., the method of execution. In some embodiments, the application delivery system <b>190</b> provides a plurality of delivery techniques from which to select a method of application execution, such as a server-based computing, streaming or delivering the application locally to the client <b>120</b> for local execution.</p>
<p id="p-0069" num="0074">In one embodiment, a client <b>102</b> requests execution of an application program and the application delivery system <b>190</b> comprising a server <b>106</b> selects a method of executing the application program. In some embodiments, the server <b>106</b> receives credentials from the client <b>102</b>. In another embodiment, the server <b>106</b> receives a request for an enumeration of available applications from the client <b>102</b>. In one embodiment, in response to the request or receipt of credentials, the application delivery system <b>190</b> enumerates a plurality of application programs available to the client <b>102</b>. The application delivery system <b>190</b> receives a request to execute an enumerated application. The application delivery system <b>190</b> selects one of a predetermined number of methods for executing the enumerated application, for example, responsive to a policy of a policy engine. The application delivery system <b>190</b> may select a method of execution of the application enabling the client <b>102</b> to receive application-output data generated by execution of the application program on a server <b>106</b>. The application delivery system <b>190</b> may select a method of execution of the application enabling the local machine <b>10</b> to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment, the application delivery system <b>190</b> may select a method of execution of the application to stream the application via the network <b>104</b> to the client <b>102</b>.</p>
<p id="p-0070" num="0075">A client <b>102</b> may execute, operate or otherwise provide an application, which can be any type and/or form of software, program, or executable instructions such as any type and/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and/or form of executable instructions capable of executing on client <b>102</b>. In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client <b>102</b> on a server <b>106</b>. In one embodiments the server <b>106</b> may display output to the client <b>102</b> using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to VoIP communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and/or audio.</p>
<p id="p-0071" num="0076">In some embodiments, the server <b>106</b> or a server farm <b>38</b> may be running one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server <b>106</b> or server farm <b>38</b> executes as an application, any portion of the Citrix Access Suite&#x2122; by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server&#x2122;, and/or any of the Microsoft&#xae; Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In other embodiments, the application includes a Remote Desktop (RDP) client, developed by Microsoft Corporation of Redmond, Wash. Also, the server <b>106</b> may run an application, which for example, may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In some embodiments, any of the applications may comprise any type of hosted service or products, such as GoToMeeting&#x2122; provided by Citrix Online Division, Inc. of Santa Barbara, Calif., WebEx&#x2122; provided by WebEx, Inc. of Santa Clara, Calif., or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond, Wash.</p>
<p id="p-0072" num="0077">Still referring to <figref idref="DRAWINGS">FIG. 1D</figref>, an embodiment of the network environment may include a monitoring server <b>106</b>A. The monitoring server <b>106</b>A may include any type and form performance monitoring service <b>198</b>. The performance monitoring service <b>198</b> may include monitoring, measurement and/or management software and/or hardware, including data collection, aggregation, analysis, management and reporting. In one embodiment, the performance monitoring service <b>198</b> includes one or more monitoring agents <b>197</b>. The monitoring agent <b>197</b> includes any software, hardware or combination thereof for performing monitoring, measurement and data collection activities on a device, such as a client <b>102</b>, server <b>106</b> or an appliance <b>200</b>, <b>205</b>. In some embodiments, the monitoring agent <b>197</b> includes any type and form of script, such as Visual Basic script, or Javascript. In one embodiment, the monitoring agent <b>197</b> executes transparently to any application and/or user of the device. In some embodiments, the monitoring agent <b>197</b> is installed and operated unobtrusively to the application or client. In yet another embodiment, the monitoring agent <b>197</b> is installed and operated without any instrumentation for the application or device.</p>
<p id="p-0073" num="0078">In some embodiments, the monitoring agent <b>197</b> monitors, measures and collects data on a predetermined frequency. In other embodiments, the monitoring agent <b>197</b> monitors, measures and collects data based upon detection of any type and form of event. For example, the monitoring agent <b>197</b> may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example, the monitoring agent <b>197</b> may collect data upon detection of any user input events, such as a mouse click. The monitoring agent <b>197</b> may report or provide any monitored, measured or collected data to the monitoring service <b>198</b>. In one embodiment, the monitoring agent <b>197</b> transmits information to the monitoring service <b>198</b> according to a schedule or a predetermined frequency. In another embodiment, the monitoring agent <b>197</b> transmits information to the monitoring service <b>198</b> upon detection of an event.</p>
<p id="p-0074" num="0079">In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> performs monitoring and performance measurement of any network resource or network infrastructure element, such as a client, server, server farm, appliance <b>200</b>, appliance <b>205</b>, or network connection. In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> performs monitoring and performance measurement of any transport layer connection, such as a TCP or UDP connection. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures network latency. In yet one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures bandwidth utilization.</p>
<p id="p-0075" num="0080">In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures end-user response times. In some embodiments, the monitoring service <b>198</b> performs monitoring and performance measurement of an application. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> performs monitoring and performance measurement of any session or connection to the application. In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of a browser. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of HTTP based transactions. In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of a Voice over IP (VoIP) application or session. In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of a remote display protocol application, such as an ICA client or RDP client. In yet another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of any type and form of streaming media. In still a further embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of a hosted application or a Software-As-A-Service (SaaS) delivery model.</p>
<p id="p-0076" num="0081">In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> performs monitoring and performance measurement of one or more transactions, requests or responses related to application. In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures any portion of an application layer stack, such as any .NET or J2EE calls. In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures database or SQL transactions. In yet another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures any method, function or application programming interface (API) call.</p>
<p id="p-0077" num="0082">In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> performs monitoring and performance measurement of a delivery of application and/or data from a server to a client via one or more appliances, such as appliance <b>200</b> and/or appliance <b>205</b>. In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of delivery of a virtualized application. In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of delivery of a streaming application. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of delivery of a desktop application to a client and/or the execution of the desktop application on the client. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors and measures performance of a client/server application.</p>
<p id="p-0078" num="0083">In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> is designed and constructed to provide application performance management for the application delivery system <b>190</b>. For example, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> may monitor, measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors individual ICA sessions. The monitoring service <b>198</b> and/or monitoring agent <b>197</b> may measure the total and per session system resource usage, as well as application and networking performance. The monitoring service <b>198</b> and/or monitoring agent <b>197</b> may identify the active servers for a given user and/or user session. In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> monitors back-end connections between the application delivery system <b>190</b> and an application and/or database server. The monitoring service <b>198</b> and/or monitoring agent <b>197</b> may measure network latency, delay and volume per user-session or ICA session.</p>
<p id="p-0079" num="0084">In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors memory usage for the application delivery system <b>190</b>, such as total memory usage, per user session and/or per process. In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors CPU usage the application delivery system <b>190</b>, such as total CPU usage, per user session and/or per process. In another embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors the time required to log-in to an application, a server, or the application delivery system, such as Citrix Presentation Server. In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors the duration a user is logged into an application, a server, or the application delivery system <b>190</b>. In some embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors active and inactive session counts for an application, server or application delivery system session. In yet another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors user session latency.</p>
<p id="p-0080" num="0085">In yet further embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors measures and monitors any type and form of server metrics. In one embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors metrics related to system memory, CPU usage, and disk storage. In another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors metrics related to page faults, such as page faults per second. In other embodiments, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors round-trip time metrics. In yet another embodiment, the monitoring service <b>198</b> and/or monitoring agent <b>197</b> measures and monitors metrics related to application crashes, errors and/or hangs.</p>
<p id="p-0081" num="0086">In some embodiments, the monitoring service <b>198</b> and monitoring agent <b>198</b> includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In another embodiment, the performance monitoring service <b>198</b> and/or monitoring agent <b>198</b> includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto, Calif. In one embodiment, the performance monitoring service <b>198</b> and/or monitoring agent <b>198</b> includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco, Calif. In other embodiments, the performance monitoring service <b>198</b> and/or monitoring agent <b>198</b> includes any portion of the business service management products, such as the BMC Performance Manager and Patrol products, manufactured by BMC Software, Inc. of Houston, Tex.</p>
<p id="p-0082" num="0087">The client <b>102</b>, server <b>106</b>, and appliance <b>200</b> may be deployed as and/or executed on any type and form of computing device, such as a computer, network device or appliance capable of communicating on any type and form of network and performing the operations described herein. <figref idref="DRAWINGS">FIGS. 1E and 1F</figref> depict block diagrams of a computing device <b>100</b> useful for practicing an embodiment of the client <b>102</b>, server <b>106</b> or appliance <b>200</b>. As shown in <figref idref="DRAWINGS">FIGS. 1E and 1F</figref>, each computing device <b>100</b> includes a central processing unit <b>101</b>, and a main memory unit <b>122</b>. As shown in <figref idref="DRAWINGS">FIG. 1E</figref>, a computing device <b>100</b> may include a visual display device <b>124</b>, a keyboard <b>126</b> and/or a pointing device <b>127</b>, such as a mouse. Each computing device <b>100</b> may also include additional optional elements, such as one or more input/output devices <b>130</b><i>a</i>-<b>130</b><i>b </i>(generally referred to using reference numeral <b>130</b>), and a cache memory <b>140</b> in communication with the central processing unit <b>101</b>.</p>
<p id="p-0083" num="0088">The central processing unit <b>101</b> is any logic circuitry that responds to and processes instructions fetched from the main memory unit <b>122</b>. In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Motorola Corporation of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS/6000 processor, those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computing device <b>100</b> may be based on any of these processors, or any other processor capable of operating as described herein.</p>
<p id="p-0084" num="0089">Main memory unit <b>122</b> may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor <b>101</b>, such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory <b>122</b> may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in <figref idref="DRAWINGS">FIG. 1E</figref>, the processor <b>101</b> communicates with main memory <b>122</b> via a system bus <b>150</b> (described in more detail below). <figref idref="DRAWINGS">FIG. 1F</figref> depicts an embodiment of a computing device <b>100</b> in which the processor communicates directly with main memory <b>122</b> via a memory port <b>103</b>. For example, in <figref idref="DRAWINGS">FIG. 1F</figref> the main memory <b>122</b> may be DRDRAM.</p>
<p id="p-0085" num="0090"><figref idref="DRAWINGS">FIG. 1F</figref> depicts an embodiment in which the main processor <b>101</b> communicates directly with cache memory <b>140</b> via a secondary bus, sometimes referred to as a backside bus. In other embodiments, the main processor <b>101</b> communicates with cache memory <b>140</b> using the system bus <b>150</b>. Cache memory <b>140</b> typically has a faster response time than main memory <b>122</b> and is typically provided by SRAM, BSRAM, or EDRAM. In the embodiment shown in <figref idref="DRAWINGS">FIG. 1F</figref>, the processor <b>101</b> communicates with various I/O devices <b>130</b> via a local system bus <b>150</b>. Various busses may be used to connect the central processing unit <b>101</b> to any of the I/O devices <b>130</b>, including a VESA VL bus, an ISA bus, an EISA bus, a MicroChannel Architecture (MCA) bus, a PCI bus, a PCI-X bus, a PCI-Express bus, or a NuBus. For embodiments in which the I/O device is a video display <b>124</b>, the processor <b>101</b> may use an Advanced Graphics Port (AGP) to communicate with the display <b>124</b>. <figref idref="DRAWINGS">FIG. 1F</figref> depicts an embodiment of a computer <b>100</b> in which the main processor <b>101</b> communicates directly with I/O device <b>130</b><i>b </i>via HyperTransport, Rapid I/O, or InfiniBand. <figref idref="DRAWINGS">FIG. 1F</figref> also depicts an embodiment in which local busses and direct communication are mixed: the processor <b>101</b> communicates with I/O device <b>130</b><i>b </i>using a local interconnect bus while communicating with I/O device <b>130</b><i>a </i>directly.</p>
<p id="p-0086" num="0091">The computing device <b>100</b> may support any suitable installation device <b>116</b>, such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent <b>120</b>, or portion thereof. The computing device <b>100</b> may further comprise a storage device <b>128</b>, such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent <b>120</b>. Optionally, any of the installation devices <b>116</b> could also be used as the storage device <b>128</b>. Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX&#xae;, a bootable CD for GNU/Linux that is available as a GNU/Linux distribution from knoppix.net.</p>
<p id="p-0087" num="0092">Furthermore, the computing device <b>100</b> may include a network interface <b>118</b> to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface <b>118</b> may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device <b>100</b> to any type of network capable of communication and performing the operations described herein.</p>
<p id="p-0088" num="0093">A wide variety of I/O devices <b>130</b><i>a</i>-<b>130</b><i>n </i>may be present in the computing device <b>100</b>. Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I/O devices <b>130</b> may be controlled by an I/O controller <b>123</b> as shown in <figref idref="DRAWINGS">FIG. 1E</figref>. The I/O controller may control one or more I/O devices such as a keyboard <b>126</b> and a pointing device <b>127</b>, e.g., a mouse or optical pen. Furthermore, an I/O device may also provide storage <b>128</b> and/or an installation medium <b>116</b> for the computing device <b>100</b>. In still other embodiments, the computing device <b>100</b> may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.</p>
<p id="p-0089" num="0094">In some embodiments, the computing device <b>100</b> may comprise or be connected to multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>, which each may be of the same or different type and/or form. As such, any of the I/O devices <b>130</b><i>a</i>-<b>130</b><i>n </i>and/or the I/O controller <b>123</b> may comprise any type and/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n </i>by the computing device <b>100</b>. For example, the computing device <b>100</b> may include any type and/or form of video adapter, video card, driver, and/or library to interface, communicate, connect or otherwise use the display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In other embodiments, the computing device <b>100</b> may include multiple video adapters, with each video adapter connected to one or more of the display devices <b>124</b><i>a</i>-<b>124</b><i>n</i>. In some embodiments, any portion of the operating system of the computing device <b>100</b> may be configured for using multiple displays <b>124</b><i>a</i>-<b>124</b><i>n</i>. In other embodiments, one or more of the display devices <b>124</b><i>a</i>-<b>124</b><i>n </i>may be provided by one or more other computing devices, such as computing devices <b>100</b><i>a </i>and <b>100</b><i>b </i>connected to the computing device <b>100</b>, for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device <b>124</b><i>a </i>for the computing device <b>100</b>. One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device <b>100</b> may be configured to have multiple display devices <b>124</b><i>a</i>-<b>124</b><i>n. </i></p>
<p id="p-0090" num="0095">In further embodiments, an I/O device <b>130</b> may be a bridge <b>170</b> between the system bus <b>150</b> and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire <b>800</b> bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.</p>
<p id="p-0091" num="0096">A computing device <b>100</b> of the sort depicted in <figref idref="DRAWINGS">FIGS. 1E and 1F</figref> typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device <b>100</b> can be running any operating system such as any of the versions of the Microsoft&#xae; Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS&#xae; for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and/or form of a Unix operating system, among others.</p>
<p id="p-0092" num="0097">In other embodiments, the computing device <b>100</b> may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer <b>100</b> is a Treo 180, 270, 1060, 600 or 650 smart phone manufactured by Palm, Inc. In this embodiment, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device <b>100</b> can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.</p>
<p id="p-0093" num="0098">As shown in <figref idref="DRAWINGS">FIG. 1G</figref>, the computing device <b>100</b> may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments, the computing device <b>100</b> may comprise a parallel processor with one or more cores. In one of these embodiments, the computing device <b>100</b> is a shared memory parallel device, with multiple processors and/or multiple processor cores, accessing all available memory as a single global address space. In another of these embodiments, the computing device <b>100</b> is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments, the computing device <b>100</b> has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments, the computing device <b>100</b>, such as a multi-core microprocessor, combines two or more independent processors into a single package, often a single integrated circuit (IC). In yet another of these embodiments, the computing device <b>100</b> includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements, the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus, which may be referred to as an element interconnect bus.</p>
<p id="p-0094" num="0099">In some embodiments, the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data (SIMD). In other embodiments, the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data (MIMD). In still other embodiments, the processor may use any combination of SIMD and MIMD cores in a single device.</p>
<p id="p-0095" num="0100">In some embodiments, the computing device <b>100</b> may comprise a graphics processing unit. In one of these embodiments, depicted in <figref idref="DRAWINGS">FIG. 1H</figref>, the computing device <b>100</b> includes at least one central processing unit <b>101</b> and at least one graphics processing unit. In another of these embodiments, the computing device <b>100</b> includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments, the computing device <b>100</b> includes a plurality of processing units of any type, one of the plurality of processing units comprising a graphics processing unit.</p>
<p id="p-0096" num="0101">In some embodiments, a first computing device <b>100</b><i>a </i>executes an application on behalf of a user of a client computing device <b>100</b><i>b</i>. In other embodiments, a computing device <b>100</b><i>a </i>executes a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing devices <b>100</b><i>b</i>. In one of these embodiments, the execution session is a hosted desktop session. In another of these embodiments, the computing device <b>100</b> executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments, the execution session provides access to a computing environment, which may comprise one or more of: an application, a plurality of applications, a desktop application, and a desktop session in which one or more applications may execute.</p>
<p id="h-0006" num="0000">B. Appliance Architecture</p>
<p id="p-0097" num="0102"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates an example embodiment of the appliance <b>200</b>. The architecture of the appliance <b>200</b> in <figref idref="DRAWINGS">FIG. 2A</figref> is provided by way of illustration only and is not intended to be limiting. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, appliance <b>200</b> comprises a hardware layer <b>206</b> and a software layer divided into a user space <b>202</b> and a kernel space <b>204</b>.</p>
<p id="p-0098" num="0103">Hardware layer <b>206</b> provides the hardware elements upon which programs and services within kernel space <b>204</b> and user space <b>202</b> are executed. Hardware layer <b>206</b> also provides the structures and elements which allow programs and services within kernel space <b>204</b> and user space <b>202</b> to communicate data both internally and externally with respect to appliance <b>200</b>. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the hardware layer <b>206</b> includes a processing unit <b>262</b> for executing software programs and services, a memory <b>264</b> for storing software and data, network ports <b>266</b> for transmitting and receiving data over a network, and an encryption processor <b>260</b> for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments, the central processing unit <b>262</b> may perform the functions of the encryption processor <b>260</b> in a single processor. Additionally, the hardware layer <b>206</b> may comprise multiple processors for each of the processing unit <b>262</b> and the encryption processor <b>260</b>. The processor <b>262</b> may include any of the processors <b>101</b> described above in connection with <figref idref="DRAWINGS">FIGS. 1E and 1F</figref>. For example, in one embodiment, the appliance <b>200</b> comprises a first processor <b>262</b> and a second processor <b>262</b>&#x2032;. In other embodiments, the processor <b>262</b> or <b>262</b>&#x2032; comprises a multi-core processor.</p>
<p id="p-0099" num="0104">Although the hardware layer <b>206</b> of appliance <b>200</b> is generally illustrated with an encryption processor <b>260</b>, processor <b>260</b> may be a processor for performing functions related to any encryption protocol, such as the Secure Socket Layer (SSL) or Transport Layer Security (TLS) protocol. In some embodiments, the processor <b>260</b> may be a general purpose processor (GPP), and in further embodiments, may have executable instructions for performing processing of any security related protocol.</p>
<p id="p-0100" num="0105">Although the hardware layer <b>206</b> of appliance <b>200</b> is illustrated with certain elements in <figref idref="DRAWINGS">FIG. 2</figref>, the hardware portions or components of appliance <b>200</b> may comprise any type and form of elements, hardware or software, of a computing device, such as the computing device <b>100</b> illustrated and discussed herein in conjunction with <figref idref="DRAWINGS">FIGS. 1E and 1F</figref>. In some embodiments, the appliance <b>200</b> may comprise a server, gateway, router, switch, bridge or other type of computing or network device, and have any hardware and/or software elements associated therewith.</p>
<p id="p-0101" num="0106">The operating system of appliance <b>200</b> allocates, manages, or otherwise segregates the available system memory into kernel space <b>204</b> and user space <b>204</b>. In example software architecture <b>200</b>, the operating system may be any type and/or form of Unix operating system although the invention is not so limited. As such, the appliance <b>200</b> can be running any operating system such as any of the versions of the Microsoft&#xae; Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS&#xae; for Macintosh computers, any embedded operating system, any network operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices or network devices, or any other operating system capable of running on the appliance <b>200</b> and performing the operations described herein.</p>
<p id="p-0102" num="0107">The kernel space <b>204</b> is reserved for running the kernel <b>230</b>, including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, the kernel <b>230</b> is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of the application <b>104</b>. In accordance with an embodiment of the appliance <b>200</b>, the kernel space <b>204</b> also includes a number of network services or processes working in conjunction with a cache manager <b>232</b>, sometimes also referred to as the integrated cache, the benefits of which are described in detail further herein. Additionally, the embodiment of the kernel <b>230</b> will depend on the embodiment of the operating system installed, configured, or otherwise used by the device <b>200</b>.</p>
<p id="p-0103" num="0108">In one embodiment, the device <b>200</b> comprises one network stack <b>267</b>, such as a TCP/IP based stack, for communicating with the client <b>102</b> and/or the server <b>106</b>. In one embodiment, the network stack <b>267</b> is used to communicate with a first network, such as network <b>108</b>, and a second network <b>110</b>. In some embodiments, the device <b>200</b> terminates a first transport layer connection, such as a TCP connection of a client <b>102</b>, and establishes a second transport layer connection to a server <b>106</b> for use by the client <b>102</b>, e.g., the second transport layer connection is terminated at the appliance <b>200</b> and the server <b>106</b>. The first and second transport layer connections may be established via a single network stack <b>267</b>. In other embodiments, the device <b>200</b> may comprise multiple network stacks, for example <b>267</b> and <b>267</b>&#x2032;, and the first transport layer connection may be established or terminated at one network stack <b>267</b>, and the second transport layer connection on the second network stack <b>267</b>&#x2032;. For example, one network stack may be for receiving and transmitting network packet on a first network, and another network stack for receiving and transmitting network packets on a second network. In one embodiment, the network stack <b>267</b> comprises a buffer <b>243</b> for queuing one or more network packets for transmission by the appliance <b>200</b>.</p>
<p id="p-0104" num="0109">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the kernel space <b>204</b> includes the cache manager <b>232</b>, a high-speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b>, an encryption engine <b>234</b>, a policy engine <b>236</b> and multi-protocol compression logic <b>238</b>. Running these components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> in kernel space <b>204</b> or kernel mode instead of the user space <b>202</b> improves the performance of each of these components, alone and in combination. Kernel operation means that these components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> run in the core address space of the operating system of the device <b>200</b>. For example, running the encryption engine <b>234</b> in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel, thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example, data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode, such as from a kernel level data structure to a user level data structure. In another aspect, the number of context switches between kernel mode and user mode are also reduced. Additionally, synchronization of and communications between any of the components or processes <b>232</b>, <b>240</b>, <b>235</b>, <b>236</b> and <b>238</b> can be performed more efficiently in the kernel space <b>204</b>.</p>
<p id="p-0105" num="0110">In some embodiments, any portion of the components <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> may run or operate in the kernel space <b>204</b>, while other portions of these components <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> may run or operate in user space <b>202</b>. In one embodiment, the appliance <b>200</b> uses a kernel-level data structure providing access to any portion of one or more network packets, for example, a network packet comprising a request from a client <b>102</b> or a response from a server <b>106</b>. In some embodiments, the kernel-level data structure may be obtained by the packet engine <b>240</b> via a transport layer driver interface or filter to the network stack <b>267</b>. The kernel-level data structure may comprise any interface and/or data accessible via the kernel space <b>204</b> related to the network stack <b>267</b>, network traffic or packets received or transmitted by the network stack <b>267</b>. In other embodiments, the kernel-level data structure may be used by any of the components or processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> to perform the desired operation of the component or process. In one embodiment, a component <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> is running in kernel mode <b>204</b> when using the kernel-level data structure, while in another embodiment, the component <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> is running in user mode when using the kernel-level data structure. In some embodiments, the kernel-level data structure may be copied or passed to a second kernel-level data structure, or any desired user-level data structure.</p>
<p id="p-0106" num="0111">The cache manager <b>232</b> may comprise software, hardware or any combination of software and hardware to provide cache access, control and management of any type and form of content, such as objects or dynamically generated objects served by the originating servers <b>106</b>. The data, objects or content processed and stored by the cache manager <b>232</b> may comprise data in any format, such as a markup language, or communicated via any protocol. In some embodiments, the cache manager <b>232</b> duplicates original data stored elsewhere or data previously computed, generated or transmitted, in which the original data may require longer access time to fetch, compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element, future use can be made by accessing the cached copy rather than refetching or recomputing the original data, thereby reducing the access time. In some embodiments, the cache memory element may comprise a data object in memory <b>264</b> of device <b>200</b>. In other embodiments, the cache memory element may comprise memory having a faster access time than memory <b>264</b>. In another embodiment, the cache memory element may comprise any type and form of storage element of the device <b>200</b>, such as a portion of a hard disk. In some embodiments, the processing unit <b>262</b> may provide cache memory for use by the cache manager <b>232</b>. In yet further embodiments, the cache manager <b>232</b> may use any portion and combination of memory, storage, or the processing unit for caching data, objects, and other content.</p>
<p id="p-0107" num="0112">Furthermore, the cache manager <b>232</b> includes any logic, functions, rules, or operations to perform any embodiments of the techniques of the appliance <b>200</b> described herein. For example, the cache manager <b>232</b> includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client <b>102</b> or server <b>106</b>. In some embodiments, the cache manager <b>232</b> may operate as a program, service, process or task executing in the kernel space <b>204</b>, and in other embodiments, in the user space <b>202</b>. In one embodiment, a first portion of the cache manager <b>232</b> executes in the user space <b>202</b> while a second portion executes in the kernel space <b>204</b>. In some embodiments, the cache manager <b>232</b> can comprise any type of general purpose processor (GPP), or any other type of integrated circuit, such as a Field Programmable Gate Array (FPGA), Programmable Logic Device (PLD), or Application Specific Integrated Circuit (ASIC).</p>
<p id="p-0108" num="0113">The policy engine <b>236</b> may include, for example, an intelligent statistical engine or other programmable application(s). In one embodiment, the policy engine <b>236</b> provides a configuration mechanism to allow a user to identify, specify, define or configure a caching policy. Policy engine <b>236</b>, in some embodiments, also has access to memory to support data structures such as lookup tables or hash tables to enable user-selected caching policy decisions. In other embodiments, the policy engine <b>236</b> may comprise any logic, rules, functions or operations to determine and provide access, control and management of objects, data or content being cached by the appliance <b>200</b> in addition to access, control and management of security, network traffic, network access, compression or any other function or operation performed by the appliance <b>200</b>. Further examples of specific caching policies are further described herein.</p>
<p id="p-0109" num="0114">The encryption engine <b>234</b> comprises any logic, business rules, functions or operations for handling the processing of any security related protocol, such as SSL or TLS, or any function related thereto. For example, the encryption engine <b>234</b> encrypts and decrypts network packets, or any portion thereof, communicated via the appliance <b>200</b>. The encryption engine <b>234</b> may also setup or establish SSL or TLS connections on behalf of the client <b>102</b><i>a</i>-<b>102</b><i>n</i>, server <b>106</b><i>a</i>-<b>106</b><i>n</i>, or appliance <b>200</b>. As such, the encryption engine <b>234</b> provides offloading and acceleration of SSL processing. In one embodiment, the encryption engine <b>234</b> uses a tunneling protocol to provide a virtual private network between a client <b>102</b><i>a</i>-<b>102</b><i>n </i>and a server <b>106</b><i>a</i>-<b>106</b><i>n</i>. In some embodiments, the encryption engine <b>234</b> is in communication with the Encryption processor <b>260</b>. In other embodiments, the encryption engine <b>234</b> comprises executable instructions running on the Encryption processor <b>260</b>.</p>
<p id="p-0110" num="0115">The multi-protocol compression engine <b>238</b> comprises any logic, business rules, function or operations for compressing one or more protocols of a network packet, such as any of the protocols used by the network stack <b>267</b> of the device <b>200</b>. In one embodiment, multi-protocol compression engine <b>238</b> compresses bi-directionally between clients <b>102</b><i>a</i>-<b>102</b><i>n </i>and servers <b>106</b><i>a</i>-<b>106</b><i>n </i>any TCP/IP based protocol, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In other embodiments, multi-protocol compression engine <b>238</b> provides compression of Hypertext Markup Language (HTML) based protocols and in some embodiments, provides compression of any markup languages, such as the Extensible Markup Language (XML). In one embodiment, the multi-protocol compression engine <b>238</b> provides compression of any high-performance protocol, such as any protocol designed for appliance <b>200</b> to appliance <b>200</b> communications. In another embodiment, the multi-protocol compression engine <b>238</b> compresses any payload of or any communication using a modified transport control protocol, such as Transaction TCP (T/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol.</p>
<p id="p-0111" num="0116">As such, the multi-protocol compression engine <b>238</b> accelerates performance for users accessing applications via desktop clients, e.g., Microsoft Outlook and non-Web thin clients, such as any client launched by popular enterprise applications like Oracle, SAP and Siebel, and even mobile clients, such as the Pocket PC. In some embodiments, the multi-protocol compression engine <b>238</b> by executing in the kernel mode <b>204</b> and integrating with packet processing engine <b>240</b> accessing the network stack <b>267</b> is able to compress any of the protocols carried by the TCP/IP protocol, such as any application layer protocol.</p>
<p id="p-0112" num="0117">High speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b>, also generally referred to as a packet processing engine or packet engine, is responsible for managing the kernel-level processing of packets received and transmitted by appliance <b>200</b> via network ports <b>266</b>. The high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> may comprise a buffer for queuing one or more network packets during processing, such as for receipt of a network packet or transmission of a network packet. Additionally, the high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> is in communication with one or more network stacks <b>267</b> to send and receive network packets via network ports <b>266</b>. The high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> works in conjunction with encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b>. In particular, encryption engine <b>234</b> is configured to perform SSL processing of packets, policy engine <b>236</b> is configured to perform functions related to traffic management such as request-level content switching and request-level cache redirection, and multi-protocol compression logic <b>238</b> is configured to perform functions related to compression and decompression of data.</p>
<p id="p-0113" num="0118">The high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> includes a packet processing timer <b>242</b>. In one embodiment, the packet processing timer <b>242</b> provides one or more time intervals to trigger the processing of incoming, i.e., received, or outgoing, i.e., transmitted, network packets. In some embodiments, the high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> processes network packets responsive to the timer <b>242</b>. The packet processing timer <b>242</b> provides any type and form of signal to the packet engine <b>240</b> to notify, trigger, or communicate a time related event, interval or occurrence. In many embodiments, the packet processing timer <b>242</b> operates in the order of milliseconds, such as for example 100 ms, 50 ms or 25 ms. For example, in some embodiments, the packet processing timer <b>242</b> provides time intervals or otherwise causes a network packet to be processed by the high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> at a 10 ms time interval, while in other embodiments, at a 5 ms time interval, and still yet in further embodiments, as short as a 3, 2, or 1 ms time interval. The high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> may be interfaced, integrated or in communication with the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression engine <b>238</b> during operation. As such, any of the logic, functions, or operations of the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b> may be performed responsive to the packet processing timer <b>242</b> and/or the packet engine <b>240</b>. Therefore, any of the logic, functions, or operations of the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and multi-protocol compression logic <b>238</b> may be performed at the granularity of time intervals provided via the packet processing timer <b>242</b>, for example, at a time interval of less than or equal to 10 ms. For example, in one embodiment, the cache manager <b>232</b> may perform invalidation of any cached objects responsive to the high speed layer <b>2</b>-<b>7</b> integrated packet engine <b>240</b> and/or the packet processing timer <b>242</b>. In another embodiment, the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer <b>242</b>, such as at every 10 ms.</p>
<p id="p-0114" num="0119">In contrast to kernel space <b>204</b>, user space <b>202</b> is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space <b>204</b> directly and uses service calls in order to access kernel services. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, user space <b>202</b> of appliance <b>200</b> includes a graphical user interface (GUI) <b>210</b>, a command line interface (CLI) <b>212</b>, shell services <b>214</b>, health monitoring program <b>216</b>, and daemon services <b>218</b>. GUI <b>210</b> and CLI <b>212</b> provide a means by which a system administrator or other user can interact with and control the operation of appliance <b>200</b>, such as via the operating system of the appliance <b>200</b>. The GUI <b>210</b> or CLI <b>212</b> can comprise code running in user space <b>202</b> or kernel space <b>204</b>. The GUI <b>210</b> may be any type and form of graphical user interface and may be presented via text, graphical or otherwise, by any type of program or application, such as a browser. The CLI <b>212</b> may be any type and form of command line or text-based interface, such as a command line provided by the operating system. For example, the CLI <b>212</b> may comprise a shell, which is a tool to enable users to interact with the operating system. In some embodiments, the CLI <b>212</b> may be provided via a bash, csh, tcsh, or ksh type shell. The shell services <b>214</b> comprises the programs, services, tasks, processes or executable instructions to support interaction with the appliance <b>200</b> or operating system by a user via the GUI <b>210</b> and/or CLI <b>212</b>.</p>
<p id="p-0115" num="0120">Health monitoring program <b>216</b> is used to monitor, check, report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program <b>216</b> comprises one or more programs, services, tasks, processes or executable instructions to provide logic, rules, functions or operations for monitoring any activity of the appliance <b>200</b>. In some embodiments, the health monitoring program <b>216</b> intercepts and inspects any network traffic passed via the appliance <b>200</b>. In other embodiments, the health monitoring program <b>216</b> interfaces by any suitable means and/or mechanisms with one or more of the following: the encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b>, multi-protocol compression logic <b>238</b>, packet engine <b>240</b>, daemon services <b>218</b>, and shell services <b>214</b>. As such, the health monitoring program <b>216</b> may call any application programming interface (API) to determine a state, status, or health of any portion of the appliance <b>200</b>. For example, the health monitoring program <b>216</b> may ping or send a status inquiry on a periodic basis to check if a program, process, service or task is active and currently running. In another example, the health monitoring program <b>216</b> may check any status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of the appliance <b>200</b>.</p>
<p id="p-0116" num="0121">Daemon services <b>218</b> are programs that run continuously or in the background and handle periodic service requests received by appliance <b>200</b>. In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service <b>218</b> as appropriate. As known to those skilled in the art, a daemon service <b>218</b> may run unattended to perform continuous or periodic system wide functions, such as network control, or to perform any desired task. In some embodiments, one or more daemon services <b>218</b> run in the user space <b>202</b>, while in other embodiments, one or more daemon services <b>218</b> run in the kernel space.</p>
<p id="p-0117" num="0122">Referring now to <figref idref="DRAWINGS">FIG. 2B</figref>, another embodiment of the appliance <b>200</b> is depicted. In brief overview, the appliance <b>200</b> provides one or more of the following services, functionality or operations: SSL VPN connectivity <b>280</b>, switching/load balancing <b>284</b>, Domain Name Service resolution <b>286</b>, acceleration <b>288</b> and an application firewall <b>290</b> for communications between one or more clients <b>102</b> and one or more servers <b>106</b>. Each of the servers <b>106</b> may provide one or more network related services <b>270</b><i>a</i>-<b>270</b><i>n </i>(referred to as services <b>270</b>). For example, a server <b>106</b> may provide an http service <b>270</b>. The appliance <b>200</b> comprises one or more virtual servers or virtual internet protocol servers, referred to as a vServer, VIP server, or just VIP <b>275</b><i>a</i>-<b>275</b><i>n </i>(also referred herein as vServer <b>275</b>). The vServer <b>275</b> receives, intercepts or otherwise processes communications between a client <b>102</b> and a server <b>106</b> in accordance with the configuration and operations of the appliance <b>200</b>.</p>
<p id="p-0118" num="0123">The vServer <b>275</b> may comprise software, hardware or any combination of software and hardware. The vServer <b>275</b> may comprise any type and form of program, service, task, process or executable instructions operating in user mode <b>202</b>, kernel mode <b>204</b> or any combination thereof in the appliance <b>200</b>. The vServer <b>275</b> includes any logic, functions, rules, or operations to perform any embodiments of the techniques described herein, such as SSL VPN <b>280</b>, switching/load balancing <b>284</b>, Domain Name Service resolution <b>286</b>, acceleration <b>288</b> and an application firewall <b>290</b>. In some embodiments, the vServer <b>275</b> establishes a connection to a service <b>270</b> of a server <b>106</b>. The service <b>275</b> may comprise any program, application, process, task or set of executable instructions capable of connecting to and communicating to the appliance <b>200</b>, client <b>102</b> or vServer <b>275</b>. For example, the service <b>275</b> may comprise a web server, http server, ftp, email or database server. In some embodiments, the service <b>270</b> is a daemon process or network driver for listening, receiving and/or sending communications for an application, such as email, database or an enterprise application. In some embodiments, the service <b>270</b> may communicate on a specific IP address, or IP address and port.</p>
<p id="p-0119" num="0124">In some embodiments, the vServer <b>275</b> applies one or more policies of the policy engine <b>236</b> to network communications between the client <b>102</b> and server <b>106</b>. In one embodiment, the policies are associated with a vServer <b>275</b>. In another embodiment, the policies are based on a user, or a group of users. In yet another embodiment, a policy is global and applies to one or more vServers <b>275</b><i>a</i>-<b>275</b><i>n</i>, and any user or group of users communicating via the appliance <b>200</b>. In some embodiments, the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication, such as internet protocol address, port, protocol type, header or fields in a packet, or the context of the communication, such as user, group of the user, vServer <b>275</b>, transport layer connection, and/or identification or attributes of the client <b>102</b> or server <b>106</b>.</p>
<p id="p-0120" num="0125">In other embodiments, the appliance <b>200</b> communicates or interfaces with the policy engine <b>236</b> to determine authentication and/or authorization of a remote user or a remote client <b>102</b> to access the computing environment <b>15</b>, application, and/or data file from a server <b>106</b>. In another embodiment, the appliance <b>200</b> communicates or interfaces with the policy engine <b>236</b> to determine authentication and/or authorization of a remote user or a remote client <b>102</b> to have the application delivery system <b>190</b> deliver one or more of the computing environment <b>15</b>, application, and/or data file. In yet another embodiment, the appliance <b>200</b> establishes a VPN or SSL VPN connection based on the policy engine's <b>236</b> authentication and/or authorization of a remote user or a remote client <b>102</b> In one embodiment, the appliance <b>200</b> controls the flow of network traffic and communication sessions based on policies of the policy engine <b>236</b>. For example, the appliance <b>200</b> may control the access to a computing environment <b>15</b>, application or data file based on the policy engine <b>236</b>.</p>
<p id="p-0121" num="0126">In some embodiments, the vServer <b>275</b> establishes a transport layer connection, such as a TCP or UDP connection with a client <b>102</b> via the client agent <b>120</b>. In one embodiment, the vServer <b>275</b> listens for and receives communications from the client <b>102</b>. In other embodiments, the vServer <b>275</b> establishes a transport layer connection, such as a TCP or UDP connection with a client server <b>106</b>. In one embodiment, the vServer <b>275</b> establishes the transport layer connection to an internet protocol address and port of a server <b>270</b> running on the server <b>106</b>. In another embodiment, the vServer <b>275</b> associates a first transport layer connection to a client <b>102</b> with a second transport layer connection to the server <b>106</b>. In some embodiments, a vServer <b>275</b> establishes a pool of transport layer connections to a server <b>106</b> and multiplexes client requests via the pooled transport layer connections.</p>
<p id="p-0122" num="0127">In some embodiments, the appliance <b>200</b> provides a SSL VPN connection <b>280</b> between a client <b>102</b> and a server <b>106</b>. For example, a client <b>102</b> on a first network <b>102</b> requests to establish a connection to a server <b>106</b> on a second network <b>104</b>&#x2032;. In some embodiments, the second network <b>104</b>&#x2032; is not routable from the first network <b>104</b>. In other embodiments, the client <b>102</b> is on a public network <b>104</b> and the server <b>106</b> is on a private network <b>104</b>&#x2032;, such as a corporate network. In one embodiment, the client agent <b>120</b> intercepts communications of the client <b>102</b> on the first network <b>104</b>, encrypts the communications, and transmits the communications via a first transport layer connection to the appliance <b>200</b>. The appliance <b>200</b> associates the first transport layer connection on the first network <b>104</b> to a second transport layer connection to the server <b>106</b> on the second network <b>104</b>. The appliance <b>200</b> receives the intercepted communication from the client agent <b>102</b>, decrypts the communications, and transmits the communication to the server <b>106</b> on the second network <b>104</b> via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such, the appliance <b>200</b> provides an end-to-end secure transport layer connection for the client <b>102</b> between the two networks <b>104</b>, <b>104</b>&#x2032;.</p>
<p id="p-0123" num="0128">In one embodiment, the appliance <b>200</b> hosts an intranet internet protocol or IntranetIP <b>282</b> address of the client <b>102</b> on the virtual private network <b>104</b>. The client <b>102</b> has a local network identifier, such as an internet protocol (IP) address and/or host name on the first network <b>104</b>. When connected to the second network <b>104</b>&#x2032; via the appliance <b>200</b>, the appliance <b>200</b> establishes, assigns or otherwise provides an IntranetIP address <b>282</b>, which is a network identifier, such as IP address and/or host name, for the client <b>102</b> on the second network <b>104</b>&#x2032;. The appliance <b>200</b> listens for and receives on the second or private network <b>104</b>&#x2032; for any communications directed towards the client <b>102</b> using the client's established IntranetIP <b>282</b>. In one embodiment, the appliance <b>200</b> acts as or on behalf of the client <b>102</b> on the second private network <b>104</b>. For example, in another embodiment, a vServer <b>275</b> listens for and responds to communications to the IntranetIP <b>282</b> of the client <b>102</b>. In some embodiments, if a computing device <b>100</b> on the second network <b>104</b>&#x2032; transmits a request, the appliance <b>200</b> processes the request as if it were the client <b>102</b>. For example, the appliance <b>200</b> may respond to a ping to the client's IntranetIP <b>282</b>. In another example, the appliance may establish a connection, such as a TCP or UDP connection, with computing device <b>100</b> on the second network <b>104</b> requesting a connection with the client's IntranetIP <b>282</b>.</p>
<p id="p-0124" num="0129">In some embodiments, the appliance <b>200</b> provides one or more of the following acceleration techniques <b>288</b> to communications between the client <b>102</b> and server <b>106</b>: 1) compression; 2) decompression; 3) Transmission Control Protocol pooling; 4) Transmission Control Protocol multiplexing; 5) Transmission Control Protocol buffering; and 6) caching. In one embodiment, the appliance <b>200</b> relieves servers <b>106</b> of much of the processing load caused by repeatedly opening and closing transport layers connections to clients <b>102</b> by opening one or more transport layer connections with each server <b>106</b> and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as &#x201c;connection pooling&#x201d;.</p>
<p id="p-0125" num="0130">In some embodiments, in order to seamlessly splice communications from a client <b>102</b> to a server <b>106</b> via a pooled transport layer connection, the appliance <b>200</b> translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as &#x201c;connection multiplexing&#x201d;. In some embodiments, no application layer protocol interaction is required. For example, in the case of an in-bound packet (that is, a packet received from a client <b>102</b>), the source network address of the packet is changed to that of an output port of appliance <b>200</b>, and the destination network address is changed to that of the intended server. In the case of an outbound packet (that is, one received from a server <b>106</b>), the source network address is changed from that of the server <b>106</b> to that of an output port of appliance <b>200</b> and the destination address is changed from that of appliance <b>200</b> to that of the requesting client <b>102</b>. The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement numbers expected by the client <b>102</b> on the appliance's <b>200</b> transport layer connection to the client <b>102</b>. In some embodiments, the packet checksum of the transport layer protocol is recalculated to account for these translations.</p>
<p id="p-0126" num="0131">In another embodiment, the appliance <b>200</b> provides switching or load-balancing functionality <b>284</b> for communications between the client <b>102</b> and server <b>106</b>. In some embodiments, the appliance <b>200</b> distributes traffic and directs client requests to a server <b>106</b> based on layer <b>4</b> or application-layer request data. In one embodiment, although the network layer or layer <b>2</b> of the network packet identifies a destination server <b>106</b>, the appliance <b>200</b> determines the server <b>106</b> to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment, the health monitoring programs <b>216</b> of the appliance <b>200</b> monitor the health of servers to determine the server <b>106</b> for which to distribute a client's request. In some embodiments, if the appliance <b>200</b> detects a server <b>106</b> is not available or has a load over a predetermined threshold, the appliance <b>200</b> can direct or distribute client requests to another server <b>106</b>.</p>
<p id="p-0127" num="0132">In some embodiments, the appliance <b>200</b> acts as a Domain Name Service (DNS) resolver or otherwise provides resolution of a DNS request from clients <b>102</b>. In some embodiments, the appliance intercepts a DNS request transmitted by the client <b>102</b>. In one embodiment, the appliance <b>200</b> responds to a client's DNS request with an IP address of or hosted by the appliance <b>200</b>. In this embodiment, the client <b>102</b> transmits network communication for the domain name to the appliance <b>200</b>. In another embodiment, the appliance <b>200</b> responds to a client's DNS request with an IP address of or hosted by a second appliance <b>200</b>&#x2032;. In some embodiments, the appliance <b>200</b> responds to a client's DNS request with an IP address of a server <b>106</b> determined by the appliance <b>200</b>.</p>
<p id="p-0128" num="0133">In yet another embodiment, the appliance <b>200</b> provides application firewall functionality <b>290</b> for communications between the client <b>102</b> and server <b>106</b>. In one embodiment, the policy engine <b>236</b> provides rules for detecting and blocking illegitimate requests. In some embodiments, the application firewall <b>290</b> protects against denial of service (DoS) attacks. In other embodiments, the appliance inspects the content of intercepted requests to identify and block application-based attacks. In some embodiments, the rules/policy engine <b>236</b> comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities, such as one or more of the following: 1) buffer overflow, 2) CGI-BIN parameter manipulation, 3) form/hidden field manipulation, 4) forceful browsing, 5) cookie or session poisoning, 6) broken access control list (ACLS) or weak passwords, 7) cross-site scripting (XSS), 8) command injection, 9) SQL injection, 10) error triggering sensitive information leak, 11) insecure use of cryptography, 12) server misconfiguration, 13) back doors and debug options, 14) website defacement, 15) platform or operating systems vulnerabilities, and 16) zero-day exploits. In an embodiment, the application firewall <b>290</b> provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following: 1) required fields are returned, 2) no added field allowed, 3) read-only and hidden field enforcement, 4) drop-down list and radio button field conformance, and 5) form-field max-length enforcement. In some embodiments, the application firewall <b>290</b> ensures cookies are not modified. In other embodiments, the application firewall <b>290</b> protects against forceful browsing by enforcing legal URLs.</p>
<p id="p-0129" num="0134">In still yet other embodiments, the application firewall <b>290</b> protects any confidential information contained in the network communication. The application firewall <b>290</b> may inspect or analyze any network communication in accordance with the rules or polices of the engine <b>236</b> to identify any confidential information in any field of the network packet. In some embodiments, the application firewall <b>290</b> identifies in the network communication one or more occurrences of a credit card number, password, social security number, name, patient code, contact information, and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences, in one embodiment, the application firewall <b>290</b> may take a policy action on the network communication, such as prevent transmission of the network communication. In another embodiment, the application firewall <b>290</b> may rewrite, remove or otherwise mask such identified occurrence or confidential information.</p>
<p id="p-0130" num="0135">Still referring to <figref idref="DRAWINGS">FIG. 2B</figref>, the appliance <b>200</b> may include a performance monitoring agent <b>197</b> as discussed above in conjunction with <figref idref="DRAWINGS">FIG. 1D</figref>. In one embodiment, the appliance <b>200</b> receives the monitoring agent <b>197</b> from the monitoring service <b>198</b> or monitoring server <b>106</b> as depicted in <figref idref="DRAWINGS">FIG. 1D</figref>. In some embodiments, the appliance <b>200</b> stores the monitoring agent <b>197</b> in storage, such as disk, for delivery to any client or server in communication with the appliance <b>200</b>. For example, in one embodiment, the appliance <b>200</b> transmits the monitoring agent <b>197</b> to a client upon receiving a request to establish a transport layer connection. In other embodiments, the appliance <b>200</b> transmits the monitoring agent <b>197</b> upon establishing the transport layer connection with the client <b>102</b>. In another embodiment, the appliance <b>200</b> transmits the monitoring agent <b>197</b> to the client upon intercepting or detecting a request for a web page. In yet another embodiment, the appliance <b>200</b> transmits the monitoring agent <b>197</b> to a client or a server in response to a request from the monitoring server <b>198</b>. In one embodiment, the appliance <b>200</b> transmits the monitoring agent <b>197</b> to a second appliance <b>200</b>&#x2032; or appliance <b>205</b>.</p>
<p id="p-0131" num="0136">In other embodiments, the appliance <b>200</b> executes the monitoring agent <b>197</b>. In one embodiment, the monitoring agent <b>197</b> measures and monitors the performance of any application, program, process, service, task or thread executing on the appliance <b>200</b>. For example, the monitoring agent <b>197</b> may monitor and measure performance and operation of vServers <b>275</b>A-<b>275</b>N. In another embodiment, the monitoring agent <b>197</b> measures and monitors the performance of any transport layer connections of the appliance <b>200</b>. In some embodiments, the monitoring agent <b>197</b> measures and monitors the performance of any user sessions traversing the appliance <b>200</b>. In one embodiment, the monitoring agent <b>197</b> measures and monitors the performance of any virtual private network connections and/or sessions traversing the appliance <b>200</b>, such as an SSL VPN session. In still further embodiments, the monitoring agent <b>197</b> measures and monitors the memory, CPU and disk usage and performance of the appliance <b>200</b>. In yet another embodiment, the monitoring agent <b>197</b> measures and monitors the performance of any acceleration technique <b>288</b> performed by the appliance <b>200</b>, such as SSL offloading, connection pooling and multiplexing, caching, and compression. In some embodiments, the monitoring agent <b>197</b> measures and monitors the performance of any load balancing and/or content switching <b>284</b> performed by the appliance <b>200</b>. In other embodiments, the monitoring agent <b>197</b> measures and monitors the performance of application firewall <b>290</b> protection and processing performed by the appliance <b>200</b>.</p>
<p id="h-0007" num="0000">C. Client Agent</p>
<p id="p-0132" num="0137">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, an embodiment of the client agent <b>120</b> is depicted. The client <b>102</b> includes a client agent <b>120</b> for establishing and exchanging communications with the appliance <b>200</b> and/or server <b>106</b> via a network <b>104</b>. In brief overview, the client <b>102</b> operates on computing device <b>100</b> having an operating system with a kernel mode <b>302</b> and a user mode <b>303</b>, and a network stack <b>310</b> with one or more layers <b>310</b><i>a</i>-<b>310</b><i>b</i>. The client <b>102</b> may have installed and/or execute one or more applications. In some embodiments, one or more applications may communicate via the network stack <b>310</b> to a network <b>104</b>. One of the applications, such as a web browser, may also include a first program <b>322</b>. For example, the first program <b>322</b> may be used in some embodiments to install and/or execute the client agent <b>120</b>, or any portion thereof. The client agent <b>120</b> includes an interception mechanism, or interceptor <b>350</b>, for intercepting network communications from the network stack <b>310</b> from the one or more applications.</p>
<p id="p-0133" num="0138">The network stack <b>310</b> of the client <b>102</b> may comprise any type and form of software, or hardware, or any combinations thereof, for providing connectivity to and communications with a network. In one embodiment, the network stack <b>310</b> comprises a software implementation for a network protocol suite. The network stack <b>310</b> may comprise one or more network layers, such as any networks layers of the Open Systems Interconnection (OSI) communications model as those skilled in the art recognize and appreciate. As such, the network stack <b>310</b> may comprise any type and form of protocols for any of the following layers of the OSI model: 1) physical link layer, 2) data link layer, 3) network layer, 4) transport layer, 5) session layer, 6) presentation layer, and 7) application layer. In one embodiment, the network stack <b>310</b> may comprise a transport control protocol (TCP) over the network layer protocol of the internet protocol (IP), generally referred to as TCP/IP. In some embodiments, the TCP/IP protocol may be carried over the Ethernet protocol, which may comprise any of the family of IEEE wide-area-network (WAN) or local-area-network (LAN) protocols, such as those protocols covered by the IEEE 802.3. In some embodiments, the network stack <b>310</b> comprises any type and form of a wireless protocol, such as IEEE 802.11 and/or mobile internet protocol.</p>
<p id="p-0134" num="0139">In view of a TCP/IP based network, any TCP/IP based protocol may be used, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In another embodiment, the network stack <b>310</b> comprises any type and form of transport control protocol, such as a modified transport control protocol, for example a Transaction TCP (T/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol. In other embodiments, any type and form of user datagram protocol (UDP), such as UDP over IP, may be used by the network stack <b>310</b>, such as for voice communications or real-time data communications.</p>
<p id="p-0135" num="0140">Furthermore, the network stack <b>310</b> may include one or more network drivers supporting the one or more layers, such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device <b>100</b> or as part of any network interface cards or other network access components of the computing device <b>100</b>. In some embodiments, any of the network drivers of the network stack <b>310</b> may be customized, modified or adapted to provide a custom or modified portion of the network stack <b>310</b> in support of any of the techniques described herein. In other embodiments, the acceleration program <b>302</b> is designed and constructed to operate with or work in conjunction with the network stack <b>310</b> installed or otherwise provided by the operating system of the client <b>102</b>.</p>
<p id="p-0136" num="0141">The network stack <b>310</b> comprises any type and form of interfaces for receiving, obtaining, providing or otherwise accessing any information and data related to network communications of the client <b>102</b>. In one embodiment, an interface to the network stack <b>310</b> comprises an application programming interface (API). The interface may also comprise any function call, hooking or filtering mechanism, event or call back mechanism, or any type of interfacing technique. The network stack <b>310</b> via the interface may receive or provide any type and form of data structure, such as an object, related to functionality or operation of the network stack <b>310</b>. For example, the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments, the data structure comprises a portion of the network packet processed at a protocol layer of the network stack <b>310</b>, such as a network packet of the transport layer. In some embodiments, the data structure <b>325</b> comprises a kernel-level data structure, while in other embodiments, the data structure <b>325</b> comprises a user-mode data structure. A kernel-level data structure may comprise a data structure obtained or related to a portion of the network stack <b>310</b> operating in kernel-mode <b>302</b>, or a network driver or other software running in kernel-mode <b>302</b>, or any data structure obtained or received by a service, process, task, thread or other executable instructions running or operating in kernel-mode of the operating system.</p>
<p id="p-0137" num="0142">Additionally, some portions of the network stack <b>310</b> may execute or operate in kernel-mode <b>302</b>, for example, the data link or network layer, while other portions execute or operate in user-mode <b>303</b>, such as an application layer of the network stack <b>310</b>. For example, a first portion <b>310</b><i>a </i>of the network stack may provide user-mode access to the network stack <b>310</b> to an application while a second portion <b>310</b><i>a </i>of the network stack <b>310</b> provides access to a network. In some embodiments, a first portion <b>310</b><i>a </i>of the network stack may comprise one or more upper layers of the network stack <b>310</b>, such as any of layers <b>5</b>-<b>7</b>. In other embodiments, a second portion <b>310</b><i>b </i>of the network stack <b>310</b> comprises one or more lower layers, such as any of layers <b>1</b>-<b>4</b>. Each of the first portion <b>310</b><i>a </i>and second portion <b>310</b><i>b </i>of the network stack <b>310</b> may comprise any portion of the network stack <b>310</b>, at any one or more network layers, in user-mode <b>203</b>, kernel-mode, <b>202</b>, or combinations thereof, or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user-mode <b>203</b> and kernel-mode <b>203</b>.</p>
<p id="p-0138" num="0143">The interceptor <b>350</b> may comprise software, hardware, or any combination of software and hardware. In one embodiment, the interceptor <b>350</b> intercept a network communication at any point in the network stack <b>310</b>, and redirects or transmits the network communication to a destination desired, managed or controlled by the interceptor <b>350</b> or client agent <b>120</b>. For example, the interceptor <b>350</b> may intercept a network communication of a network stack <b>310</b> of a first network and transmit the network communication to the appliance <b>200</b> for transmission on a second network <b>104</b>. In some embodiments, the interceptor <b>350</b> comprises any type interceptor <b>350</b> comprises a driver, such as a network driver constructed and designed to interface and work with the network stack <b>310</b>. In some embodiments, the client agent <b>120</b> and/or interceptor <b>350</b> operates at one or more layers of the network stack <b>310</b>, such as at the transport layer. In one embodiment, the interceptor <b>350</b> comprises a filter driver, hooking mechanism, or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack, such as via the transport driver interface (TDI). In some embodiments, the interceptor <b>350</b> interfaces to a first protocol layer, such as the transport layer and another protocol layer, such as any layer above the transport protocol layer, for example, an application protocol layer. In one embodiment, the interceptor <b>350</b> may comprise a driver complying with the Network Driver Interface Specification (NDIS), or a NDIS driver. In another embodiment, the interceptor <b>350</b> may comprise a mini-filter or a mini-port driver. In one embodiment, the interceptor <b>350</b>, or portion thereof, operates in kernel-mode <b>202</b>. In another embodiment, the interceptor <b>350</b>, or portion thereof, operates in user-mode <b>203</b>. In some embodiments, a portion of the interceptor <b>350</b> operates in kernel-mode <b>202</b> while another portion of the interceptor <b>350</b> operates in user-mode <b>203</b>. In other embodiments, the client agent <b>120</b> operates in user-mode <b>203</b> but interfaces via the interceptor <b>350</b> to a kernel-mode driver, process, service, task or portion of the operating system, such as to obtain a kernel-level data structure <b>225</b>. In further embodiments, the interceptor <b>350</b> is a user-mode application or program, such as application.</p>
<p id="p-0139" num="0144">In one embodiment, the interceptor <b>350</b> intercepts any transport layer connection requests. In these embodiments, the interceptor <b>350</b> execute transport layer application programming interface (API) calls to set the destination information, such as destination IP address and/or port to a desired location for the location. In this manner, the interceptor <b>350</b> intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor <b>350</b> or client agent <b>120</b>. In one embodiment, the interceptor <b>350</b> sets the destination information for the connection to a local IP address and port of the client <b>102</b> on which the client agent <b>120</b> is listening. For example, the client agent <b>120</b> may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments, the client agent <b>120</b> then communicates the redirected transport layer communication to the appliance <b>200</b>.</p>
<p id="p-0140" num="0145">In some embodiments, the interceptor <b>350</b> intercepts a Domain Name Service (DNS) request. In one embodiment, the client agent <b>120</b> and/or interceptor <b>350</b> resolves the DNS request. In another embodiment, the interceptor transmits the intercepted DNS request to the appliance <b>200</b> for DNS resolution. In one embodiment, the appliance <b>200</b> resolves the DNS request and communicates the DNS response to the client agent <b>120</b>. In some embodiments, the appliance <b>200</b> resolves the DNS request via another appliance <b>200</b>&#x2032; or a DNS server <b>106</b>.</p>
<p id="p-0141" num="0146">In yet another embodiment, the client agent <b>120</b> may comprise two agents <b>120</b> and <b>120</b>&#x2032;. In one embodiment, a first agent <b>120</b> may comprise an interceptor <b>350</b> operating at the network layer of the network stack <b>310</b>. In some embodiments, the first agent <b>120</b> intercepts network layer requests such as Internet Control Message Protocol (ICMP) requests (e.g., ping and traceroute). In other embodiments, the second agent <b>120</b>&#x2032; may operate at the transport layer and intercept transport layer communications. In some embodiments, the first agent <b>120</b> intercepts communications at one layer of the network stack <b>210</b> and interfaces with or communicates the intercepted communication to the second agent <b>120</b>&#x2032;.</p>
<p id="p-0142" num="0147">The client agent <b>120</b> and/or interceptor <b>350</b> may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack <b>310</b>. For example, in one embodiment, the interceptor <b>350</b> operates or interfaces with the transport layer of the network stack <b>310</b> transparently to any protocol layer below the transport layer, such as the network layer, and any protocol layer above the transport layer, such as the session, presentation or application layer protocols. This allows the other protocol layers of the network stack <b>310</b> to operate as desired and without modification for using the interceptor <b>350</b>. As such, the client agent <b>120</b> and/or interceptor <b>350</b> can interface with the transport layer to secure, optimize, accelerate, route or load-balance any communications provided via any protocol carried by the transport layer, such as any application layer protocol over TCP/IP.</p>
<p id="p-0143" num="0148">Furthermore, the client agent <b>120</b> and/or interceptor may operate at or interface with the network stack <b>310</b> in a manner transparent to any application, a user of the client <b>102</b>, and any other computing device, such as a server, in communications with the client <b>102</b>. The client agent <b>120</b> and/or interceptor <b>350</b> may be installed and/or executed on the client <b>102</b> in a manner without modification of an application. In some embodiments, the user of the client <b>102</b> or a computing device in communications with the client <b>102</b> are not aware of the existence, execution or operation of the client agent <b>120</b> and/or interceptor <b>350</b>. As such, in some embodiments, the client agent <b>120</b> and/or interceptor <b>350</b> is installed, executed, and/or operated transparently to an application, user of the client <b>102</b>, another computing device, such as a server, or any of the protocol layers above and/or below the protocol layer interfaced to by the interceptor <b>350</b>.</p>
<p id="p-0144" num="0149">The client agent <b>120</b> includes an acceleration program <b>302</b>, a streaming client <b>306</b>, a collection agent <b>304</b>, and/or monitoring agent <b>197</b>. In one embodiment, the client agent <b>120</b> comprises an Independent Computing Architecture (ICA) client, or any portion thereof, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is also referred to as an ICA client. In some embodiments, the client <b>120</b> comprises an application streaming client <b>306</b> for streaming an application from a server <b>106</b> to a client <b>102</b>. In some embodiments, the client agent <b>120</b> comprises an acceleration program <b>302</b> for accelerating communications between client <b>102</b> and server <b>106</b>. In another embodiment, the client agent <b>120</b> includes a collection agent <b>304</b> for performing end-point detection/scanning and collecting end-point information for the appliance <b>200</b> and/or server <b>106</b>.</p>
<p id="p-0145" num="0150">In some embodiments, the acceleration program <b>302</b> comprises a client-side acceleration program for performing one or more acceleration techniques to accelerate, enhance or otherwise improve a client's communications with and/or access to a server <b>106</b>, such as accessing an application provided by a server <b>106</b>. The logic, functions, and/or operations of the executable instructions of the acceleration program <b>302</b> may perform one or more of the following acceleration techniques: 1) multi-protocol compression, 2) transport control protocol pooling, 3) transport control protocol multiplexing, 4) transport control protocol buffering, and 5) caching via a cache manager. Additionally, the acceleration program <b>302</b> may perform encryption and/or decryption of any communications received and/or transmitted by the client <b>102</b>. In some embodiments, the acceleration program <b>302</b> performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally, the acceleration program <b>302</b> can perform compression on any of the protocols, or multiple-protocols, carried as a payload of a network packet of the transport layer protocol. The streaming client <b>306</b> comprises an application, program, process, service, task or executable instructions for receiving and executing a streamed application from a server <b>106</b>. A server <b>106</b> may stream one or more application data files to the streaming client <b>306</b> for playing, executing or otherwise causing to be executed the application on the client <b>102</b>. In some embodiments, the server <b>106</b> transmits a set of compressed or packaged application data files to the streaming client <b>306</b>. In some embodiments, the plurality of application files are compressed and stored on a file server within an archive file such as a CAB, ZIP, SIT, TAR, JAR or other archive. In one embodiment, the server <b>106</b> decompresses, unpackages or unarchives the application files and transmits the files to the client <b>102</b>. In another embodiment, the client <b>102</b> decompresses, unpackages or unarchives the application files. The streaming client <b>306</b> dynamically installs the application, or portion thereof, and executes the application. In one embodiment, the streaming client <b>306</b> may be an executable program. In some embodiments, the streaming client <b>306</b> may be able to launch another executable program.</p>
<p id="p-0146" num="0151">The collection agent <b>304</b> comprises an application, program, process, service, task or executable instructions for identifying, obtaining and/or collecting information about the client <b>102</b>. In some embodiments, the appliance <b>200</b> transmits the collection agent <b>304</b> to the client <b>102</b> or client agent <b>120</b>. The collection agent <b>304</b> may be configured according to one or more policies of the policy engine <b>236</b> of the appliance. In other embodiments, the collection agent <b>304</b> transmits collected information on the client <b>102</b> to the appliance <b>200</b>. In one embodiment, the policy engine <b>236</b> of the appliance <b>200</b> uses the collected information to determine and provide access, authentication and authorization control of the client's connection to a network <b>104</b>.</p>
<p id="p-0147" num="0152">In one embodiment, the collection agent <b>304</b> comprises an end-point detection and scanning mechanism, which identifies and determines one or more attributes or characteristics of the client. For example, the collection agent <b>304</b> may identify and determine any one or more of the following client-side attributes: 1) the operating system an/or a version of an operating system, 2) a service pack of the operating system, 3) a running service, 4) a running process, and 5) a file. The collection agent <b>304</b> may also identify and determine the presence or versions of any one or more of the following on the client: 1) antivirus software, 2) personal firewall software, 3) anti-spam software, and 4) internet security software. The policy engine <b>236</b> may have one or more policies based on any one or more of the attributes or characteristics of the client or client-side attributes.</p>
<p id="p-0148" num="0153">In some embodiments, the client agent <b>120</b> includes a monitoring agent <b>197</b> as discussed in conjunction with <figref idref="DRAWINGS">FIGS. 1D and 2B</figref>. The monitoring agent <b>197</b> may be any type and form of script, such as Visual Basic or Java script. In one embodiment, the monitoring agent <b>197</b> monitors and measures performance of any portion of the client agent <b>120</b>. For example, in some embodiments, the monitoring agent <b>197</b> monitors and measures performance of the acceleration program <b>302</b>. In another embodiment, the monitoring agent <b>197</b> monitors and measures performance of the streaming client <b>306</b>. In other embodiments, the monitoring agent <b>197</b> monitors and measures performance of the collection agent <b>304</b>. In still another embodiment, the monitoring agent <b>197</b> monitors and measures performance of the interceptor <b>350</b>. In some embodiments, the monitoring agent <b>197</b> monitors and measures any resource of the client <b>102</b>, such as memory, CPU and disk.</p>
<p id="p-0149" num="0154">The monitoring agent <b>197</b> may monitor and measure performance of any application of the client. In one embodiment, the monitoring agent <b>197</b> monitors and measures performance of a browser on the client <b>102</b>. In some embodiments, the monitoring agent <b>197</b> monitors and measures performance of any application delivered via the client agent <b>120</b>. In other embodiments, the monitoring agent <b>197</b> measures and monitors end user response times for an application, such as web-based or HTTP response times. The monitoring agent <b>197</b> may monitor and measure performance of an ICA or RDP client. In another embodiment, the monitoring agent <b>197</b> measures and monitors metrics for a user session or application session. In some embodiments, monitoring agent <b>197</b> measures and monitors an ICA or RDP session. In one embodiment, the monitoring agent <b>197</b> measures and monitors the performance of the appliance <b>200</b> in accelerating delivery of an application and/or data to the client <b>102</b>.</p>
<p id="p-0150" num="0155">In some embodiments and still referring to <figref idref="DRAWINGS">FIG. 3</figref>, a first program <b>322</b> may be used to install and/or execute the client agent <b>120</b>, or portion thereof, such as the interceptor <b>350</b>, automatically, silently, transparently, or otherwise. In one embodiment, the first program <b>322</b> comprises a plugin component, such an ActiveX control or Java control or script that is loaded into and executed by an application. For example, the first program comprises an ActiveX control loaded and run by a web browser application, such as in the memory space or context of the application. In another embodiment, the first program <b>322</b> comprises a set of executable instructions loaded into and run by the application, such as a browser. In one embodiment, the first program <b>322</b> comprises a designed and constructed program to install the client agent <b>120</b>. In some embodiments, the first program <b>322</b> obtains, downloads, or receives the client agent <b>120</b> via the network from another computing device. In another embodiment, the first program <b>322</b> is an installer program or a plug and play manager for installing programs, such as network drivers, on the operating system of the client <b>102</b>.</p>
<p id="h-0008" num="0000">D. Systems and Methods for Providing Virtualized Application Delivery Controller</p>
<p id="p-0151" num="0156">Referring now to <figref idref="DRAWINGS">FIG. 4A</figref>, a block diagram depicts one embodiment of a virtualization environment <b>400</b>. In brief overview, a computing device <b>100</b> includes a hypervisor layer, a virtualization layer, and a hardware layer. The hypervisor layer includes a hypervisor <b>401</b> (also referred to as a virtualization manager) that allocates and manages access to a number of physical resources in the hardware layer (e.g., the processor(s) <b>421</b>, and disk(s) <b>428</b>) by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system <b>410</b> and a plurality of virtual resources allocated to the at least one operating system <b>410</b>. Virtual resources may include, without limitation, a plurality of virtual processors <b>432</b><i>a</i>, <b>432</b><i>b</i>, <b>432</b><i>c </i>(generally <b>432</b>), and virtual disks <b>442</b><i>a</i>, <b>442</b><i>b</i>, <b>442</b><i>c </i>(generally <b>442</b>), as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system <b>410</b> may be referred to as a virtual machine <b>406</b>. A virtual machine <b>406</b> may include a control operating system <b>405</b> in communication with the hypervisor <b>401</b> and used to execute applications for managing and configuring other virtual machines on the computing device <b>100</b>.</p>
<p id="p-0152" num="0157">In greater detail, a hypervisor <b>401</b> may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor <b>401</b> may provide virtual resources to any number of guest operating systems <b>410</b><i>a</i>, <b>410</b><i>b </i>(generally <b>410</b>). In some embodiments, a computing device <b>100</b> executes one or more types of hypervisors. In these embodiments, hypervisors may be used to emulate virtual hardware, partition physical hardware, virtualize physical hardware, and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare, Inc., of Palo Alto, Calif.; the XEN hypervisor, an open source product whose development is overseen by the open source Xen.org community; HyperV, VirtualServer or virtual PC hypervisors provided by Microsoft, or others. In some embodiments, a computing device <b>100</b> executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments, for example, the computing device <b>100</b> is a XEN SERVER provided by Citrix Systems, Inc., of Fort Lauderdale, Fla.</p>
<p id="p-0153" num="0158">In some embodiments, a hypervisor <b>401</b> executes within an operating system executing on a computing device. In one of these embodiments, a computing device executing an operating system and a hypervisor <b>401</b> may be said to have a host operating system (the operating system executing on the computing device), and a guest operating system (an operating system executing within a computing resource partition provided by the hypervisor <b>401</b>). In other embodiments, a hypervisor <b>401</b> interacts directly with hardware on a computing device, instead of executing on a host operating system. In one of these embodiments, the hypervisor <b>401</b> may be said to be executing on &#x201c;bare metal,&#x201d; referring to the hardware comprising the computing device.</p>
<p id="p-0154" num="0159">In some embodiments, a hypervisor <b>401</b> may create a virtual machine <b>406</b><i>a</i>-<i>c </i>(generally <b>406</b>) in which an operating system <b>410</b> executes. In one of these embodiments, for example, the hypervisor <b>401</b> loads a virtual machine image to create a virtual machine <b>406</b>. In another of these embodiments, the hypervisor <b>401</b> executes an operating system <b>410</b> within the virtual machine <b>406</b>. In still another of these embodiments, the virtual machine <b>406</b> executes an operating system <b>410</b>.</p>
<p id="p-0155" num="0160">In some embodiments, the hypervisor <b>401</b> controls processor scheduling and memory partitioning for a virtual machine <b>406</b> executing on the computing device <b>100</b>. In one of these embodiments, the hypervisor <b>401</b> controls the execution of at least one virtual machine <b>406</b>. In another of these embodiments, the hypervisor <b>401</b> presents at least one virtual machine <b>406</b> with an abstraction of at least one hardware resource provided by the computing device <b>100</b>. In other embodiments, the hypervisor <b>401</b> controls whether and how physical processor capabilities are presented to the virtual machine <b>406</b>.</p>
<p id="p-0156" num="0161">A control operating system <b>405</b> may execute at least one application for managing and configuring the guest operating systems. In one embodiment, the control operating system <b>405</b> may execute an administrative application, such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine, including functionality for executing a virtual machine, terminating an execution of a virtual machine, or identifying a type of physical resource for allocation to the virtual machine. In another embodiment, the hypervisor <b>401</b> executes the control operating system <b>405</b> within a virtual machine <b>406</b> created by the hypervisor <b>401</b>. In still another embodiment, the control operating system <b>405</b> executes in a virtual machine <b>406</b> that is authorized to directly access physical resources on the computing device <b>100</b>. In some embodiments, a control operating system <b>405</b><i>a </i>on a computing device <b>100</b><i>a </i>may exchange data with a control operating system <b>405</b><i>b </i>on a computing device <b>100</b><i>b</i>, via communications between a hypervisor <b>401</b><i>a </i>and a hypervisor <b>401</b><i>b</i>. In this way, one or more computing devices <b>100</b> may exchange data with one or more of the other computing devices <b>100</b> regarding processors and other physical resources available in a pool of resources. In one of these embodiments, this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments, multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices <b>100</b>.</p>
<p id="p-0157" num="0162">In one embodiment, the control operating system <b>405</b> executes in a virtual machine <b>406</b> that is authorized to interact with at least one guest operating system <b>410</b>. In another embodiment, a guest operating system <b>410</b> communicates with the control operating system <b>405</b> via the hypervisor <b>401</b> in order to request access to a disk or a network. In still another embodiment, the guest operating system <b>410</b> and the control operating system <b>405</b> may communicate via a communication channel established by the hypervisor <b>401</b>, such as, for example, via a plurality of shared memory pages made available by the hypervisor <b>401</b>.</p>
<p id="p-0158" num="0163">In some embodiments, the control operating system <b>405</b> includes a network back-end driver for communicating directly with networking hardware provided by the computing device <b>100</b>. In one of these embodiments, the network back-end driver processes at least one virtual machine request from at least one guest operating system <b>110</b>. In other embodiments, the control operating system <b>405</b> includes a block back-end driver for communicating with a storage element on the computing device <b>100</b>. In one of these embodiments, the block back-end driver reads and writes data from the storage element based upon at least one request received from a guest operating system <b>410</b>.</p>
<p id="p-0159" num="0164">In one embodiment, the control operating system <b>405</b> includes a tools stack <b>404</b>. In another embodiment, a tools stack <b>404</b> provides functionality for interacting with the hypervisor <b>401</b>, communicating with other control operating systems <b>405</b> (for example, on a second computing device <b>100</b><i>b</i>), or managing virtual machines <b>406</b><i>b</i>, <b>406</b><i>c </i>on the computing device <b>100</b>. In another embodiment, the tools stack <b>404</b> includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments, at least one of the tools stack <b>404</b> and the control operating system <b>405</b> include a management API that provides an interface for remotely configuring and controlling virtual machines <b>406</b> running on a computing device <b>100</b>. In other embodiments, the control operating system <b>405</b> communicates with the hypervisor <b>401</b> through the tools stack <b>404</b>.</p>
<p id="p-0160" num="0165">In one embodiment, the hypervisor <b>401</b> executes a guest operating system <b>410</b> within a virtual machine <b>406</b> created by the hypervisor <b>401</b>. In another embodiment, the guest operating system <b>410</b> provides a user of the computing device <b>100</b> with access to resources within a computing environment. In still another embodiment, a resource includes a program, an application, a document, a file, a plurality of applications, a plurality of files, an executable program file, a desktop environment, a computing environment, or other resource made available to a user of the computing device <b>100</b>. In yet another embodiment, the resource may be delivered to the computing device <b>100</b> via a plurality of access methods including, but not limited to, conventional installation directly on the computing device <b>100</b>, delivery to the computing device <b>100</b> via a method for application streaming, delivery to the computing device <b>100</b> of output data generated by an execution of the resource on a second computing device <b>100</b>&#x2032; and communicated to the computing device <b>100</b> via a presentation layer protocol, delivery to the computing device <b>100</b> of output data generated by an execution of the resource via a virtual machine executing on a second computing device <b>100</b>&#x2032;, or execution from a removable storage device connected to the computing device <b>100</b>, such as a USB device, or via a virtual machine executing on the computing device <b>100</b> and generating output data. In some embodiments, the computing device <b>100</b> transmits output data generated by the execution of the resource to another computing device <b>100</b>&#x2032;.</p>
<p id="p-0161" num="0166">In one embodiment, the guest operating system <b>410</b>, in conjunction with the virtual machine on which it executes, forms a fully-virtualized virtual machine which is not aware that it is a virtual machine; such a machine may be referred to as a &#x201c;Domain U HVM (Hardware Virtual Machine) virtual machine&#x201d;. In another embodiment, a fully-virtualized machine includes software emulating a Basic Input/Output System (BIOS) in order to execute an operating system within the fully-virtualized machine. In still another embodiment, a fully-virtualized machine may include a driver that provides functionality by communicating with the hypervisor <b>401</b>. In such an embodiment, the driver may be aware that it executes within a virtualized environment. In another embodiment, the guest operating system <b>410</b>, in conjunction with the virtual machine on which it executes, forms a paravirtualized virtual machine, which is aware that it is a virtual machine; such a machine may be referred to as a &#x201c;Domain U PV virtual machine&#x201d;. In another embodiment, a paravirtualized machine includes additional drivers that a fully-virtualized machine does not include. In still another embodiment, the paravirtualized machine includes the network back-end driver and the block back-end driver included in a control operating system <b>405</b>, as described above.</p>
<p id="p-0162" num="0167">Referring now to <figref idref="DRAWINGS">FIG. 4B</figref>, a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview, the system includes a management component <b>404</b> and a hypervisor <b>401</b>. The system includes a plurality of computing devices <b>100</b>, a plurality of virtual machines <b>406</b>, a plurality of hypervisors <b>401</b>, a plurality of management components referred to variously as tools stacks <b>404</b> or management components <b>404</b>, and a physical resource <b>421</b>, <b>428</b>. The plurality of physical machines <b>100</b> may each be provided as computing devices <b>100</b>, described above in connection with <figref idref="DRAWINGS">FIGS. 1E-1H</figref> and <b>4</b>A.</p>
<p id="p-0163" num="0168">In greater detail, a physical disk <b>428</b> is provided by a computing device <b>100</b> and stores at least a portion of a virtual disk <b>442</b>. In some embodiments, a virtual disk <b>442</b> is associated with a plurality of physical disks <b>428</b>. In one of these embodiments, one or more computing devices <b>100</b> may exchange data with one or more of the other computing devices <b>100</b> regarding processors and other physical resources available in a pool of resources, allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments, a computing device <b>100</b> on which a virtual machine <b>406</b> executes is referred to as a physical host <b>100</b> or as a host machine <b>100</b>.</p>
<p id="p-0164" num="0169">The hypervisor executes on a processor on the computing device <b>100</b>. The hypervisor allocates, to a virtual disk, an amount of access to the physical disk. In one embodiment, the hypervisor <b>401</b> allocates an amount of space on the physical disk. In another embodiment, the hypervisor <b>401</b> allocates a plurality of pages on the physical disk. In some embodiments, the hypervisor provisions the virtual disk <b>442</b> as part of a process of initializing and executing a virtual machine <b>450</b>.</p>
<p id="p-0165" num="0170">In one embodiment, the management component <b>404</b><i>a </i>is referred to as a pool management component <b>404</b><i>a</i>. In another embodiment, a management operating system <b>405</b><i>a</i>, which may be referred to as a control operating system <b>405</b><i>a</i>, includes the management component. In some embodiments, the management component is referred to as a tools stack. In one of these embodiments, the management component is the tools stack <b>404</b> described above in connection with <figref idref="DRAWINGS">FIG. 4A</figref>. In other embodiments, the management component <b>404</b> provides a user interface for receiving, from a user such as an administrator, an identification of a virtual machine <b>406</b> to provision and/or execute. In still other embodiments, the management component <b>404</b> provides a user interface for receiving, from a user such as an administrator, the request for migration of a virtual machine <b>406</b><i>b </i>from one physical machine <b>100</b> to another. In further embodiments, the management component <b>404</b><i>a </i>identifies a computing device <b>100</b><i>b </i>on which to execute a requested virtual machine <b>406</b><i>d </i>and instructs the hypervisor <b>401</b><i>b </i>on the identified computing device <b>100</b><i>b </i>to execute the identified virtual machine; such a management component may be referred to as a pool management component.</p>
<p id="p-0166" num="0171">Referring now to <figref idref="DRAWINGS">FIG. 4C</figref>, embodiments of a virtual application delivery controller or virtual appliance <b>450</b> are depicted. In brief overview, any of the functionality and/or embodiments of the appliance <b>200</b> (e.g., an application delivery controller) described above in connection with <figref idref="DRAWINGS">FIGS. 2A and 2B</figref> may be deployed in any embodiment of the virtualized environment described above in connection with <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>. Instead of the functionality of the application delivery controller being deployed in the form of an appliance <b>200</b>, such functionality may be deployed in a virtualized environment <b>400</b> on any computing device <b>100</b>, such as a client <b>102</b>, server <b>106</b> or appliance <b>200</b>.</p>
<p id="p-0167" num="0172">Referring now to <figref idref="DRAWINGS">FIG. 4C</figref>, a diagram of an embodiment of a virtual appliance <b>450</b> operating on a hypervisor <b>401</b> of a server <b>106</b> is depicted. As with the appliance <b>200</b> of <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>, the virtual appliance <b>450</b> may provide functionality for availability, performance, offload and security. For availability, the virtual appliance may perform load balancing between layers <b>4</b> and <b>7</b> of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration, the virtual appliance may perform caching and compression. To offload processing of any servers, the virtual appliance may perform connection multiplexing and pooling and/or SSL processing. For security, the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance <b>200</b>.</p>
<p id="p-0168" num="0173">Any of the modules of the appliance <b>200</b> as described in connection with <figref idref="DRAWINGS">FIG. 2A</figref> may be packaged, combined, designed or constructed in a form of the virtualized appliance delivery controller <b>450</b> deployable as one or more software modules or components executable in a virtualized environment <b>300</b> or non-virtualized environment on any server, such as an off the shelf server. For example, the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to <figref idref="DRAWINGS">FIG. 2A</figref>, any of the cache manager <b>232</b>, policy engine <b>236</b>, compression <b>238</b>, encryption engine <b>234</b>, packet engine <b>240</b>, GUI <b>210</b>, CLI <b>212</b>, shell services <b>214</b> and health monitoring programs <b>216</b> may be designed and constructed as a software component or module to run on any operating system of a computing device and/or of a virtualized environment <b>300</b>. Instead of using the encryption processor <b>260</b>, processor <b>262</b>, memory <b>264</b> and network stack <b>267</b> of the appliance <b>200</b>, the virtualized appliance <b>400</b> may use any of these resources as provided by the virtualized environment <b>400</b> or as otherwise available on the server <b>106</b>.</p>
<p id="p-0169" num="0174">Still referring to <figref idref="DRAWINGS">FIG. 4C</figref>, and in brief overview, any one or more vServers <b>275</b>A-<b>275</b>N may be in operation or executed in a virtualized environment <b>400</b> of any type of computing device <b>100</b>, such as any server <b>106</b>. Any of the modules or functionality of the appliance <b>200</b> described in connection with <figref idref="DRAWINGS">FIG. 2B</figref> may be designed and constructed to operate in either a virtualized or non-virtualized environment of a server. Any of the vServer <b>275</b>, SSL VPN <b>280</b>, Intranet UP <b>282</b>, Switching <b>284</b>, DNS <b>286</b>, acceleration <b>288</b>, App FW <b>280</b> and monitoring agent may be packaged, combined, designed or constructed in a form of application delivery controller <b>450</b> deployable as one or more software modules or components executable on a device and/or virtualized environment <b>400</b>.</p>
<p id="p-0170" num="0175">In some embodiments, a server may execute multiple virtual machines <b>406</b><i>a</i>-<b>406</b><i>n </i>in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller <b>450</b>. In some embodiments, the server may execute one or more virtual appliances <b>450</b> on one or more virtual machines on a core of a multi-core processing system. In some embodiments, the server may execute one or more virtual appliances <b>450</b> on one or more virtual machines on each processor of a multiple processor device.</p>
<p id="h-0009" num="0000">E. Systems and Methods for Providing A Multi-Core Architecture</p>
<p id="p-0171" num="0176">In accordance with Moore's Law, the number of transistors that may be placed on an integrated circuit may double approximately every two years. However, CPU speed increases may reach plateaus, for example CPU speed has been around 3.5-4 GHz range since 2005. In some cases, CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products, such as those of software and networking vendors, that rely on CPUs for performance gains may improve their performance by leveraging these multi-core CPUs. The software designed and constructed for a single CPU may be redesigned and/or rewritten to take advantage of a multi-threaded, parallel architecture or otherwise a multi-core architecture.</p>
<p id="p-0172" num="0177">A multi-core architecture of the appliance <b>200</b>, referred to as nCore or multi-core technology, allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi-core CPUs. In the previous architecture described in connection with <figref idref="DRAWINGS">FIG. 2A</figref>, a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and/or in parallel. With a packet engine running on each core, the appliance architecture leverages the processing capacity of additional cores. In some embodiments, this provides up to a 7&#xd7; increase in performance and scalability.</p>
<p id="p-0173" num="0178">Illustrated in <figref idref="DRAWINGS">FIG. 5A</figref> are some embodiments of work, task, load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme, such as functional parallelism, data parallelism or flow-based data parallelism. In brief overview, <figref idref="DRAWINGS">FIG. 5A</figref> illustrates embodiments of a multi-core system such as an appliance <b>200</b>&#x2032; with n-cores, a total of cores numbers 1 through N. In one embodiment, work, load or network traffic can be distributed among a first core <b>505</b>A, a second core <b>505</b>B, a third core <b>505</b>C, a fourth core <b>505</b>D, a fifth core <b>505</b>E, a sixth core <b>505</b>F, a seventh core <b>505</b>G, and so on such that distribution is across all or two or more of the n cores <b>505</b>N (hereinafter referred to collectively as cores <b>505</b>.) There may be multiple VIPs <b>275</b> each running on a respective core of the plurality of cores. There may be multiple packet engines <b>240</b> each running on a respective core of the plurality of cores. Any of the approaches used may lead to different, varying or similar work load or performance level <b>515</b> across any of the cores. For a functional parallelism approach, each core may run a different function of the functionalities provided by the packet engine, a VIP <b>275</b> or appliance <b>200</b>. In a data parallelism approach, data may be paralleled or distributed across the cores based on the Network Interface Card (NIC) or VIP <b>275</b> receiving the data. In another data parallelism approach, processing may be distributed across the cores by distributing data flows to each core.</p>
<p id="p-0174" num="0179">In further detail to <figref idref="DRAWINGS">FIG. 5A</figref>, in some embodiments, load, work or network traffic can be distributed among cores <b>505</b> according to functional parallelism <b>500</b>. Functional parallelism may be based on each core performing one or more respective functions. In some embodiments, a first core may perform a first function while a second core performs a second function. In functional parallelism approach, the functions to be performed by the multi-core system are divided and distributed to each core according to functionality. In some embodiments, functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases, different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.</p>
<p id="p-0175" num="0180">In some embodiments, distributing work across the cores <b>505</b> according to functional parallelism <b>500</b>, can comprise distributing network traffic according to a particular function such as network input/output management (NW I/O) <b>510</b>A, secure sockets layer (SSL) encryption and decryption <b>510</b>B and transmission control protocol (TCP) functions <b>510</b>C. This may lead to a work, performance or computing load <b>515</b> based on a volume or level of functionality being used. In some embodiments, distributing work across the cores <b>505</b> according to data parallelism <b>540</b>, can comprise distributing an amount of work <b>515</b> based on distributing data associated with a particular hardware or software component. In some embodiments, distributing work across the cores <b>505</b> according to flow-based data parallelism <b>520</b>, can comprise distributing data based on a context or flow such that the amount of work <b>515</b>A-N on each core may be similar, substantially equal or relatively evenly distributed.</p>
<p id="p-0176" num="0181">In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example, core <b>1</b> may perform network I/O processing for the appliance <b>200</b>&#x2032; while core <b>2</b> performs TCP connection management for the appliance. Likewise, core <b>3</b> may perform SSL offloading while core <b>4</b> may perform layer <b>7</b> or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and/or described in conjunction with <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>. In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, division by function may lead to different cores running at different levels of performance or load <b>515</b>.</p>
<p id="p-0177" num="0182">In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example, core <b>1</b> may perform network I/O processing for the appliance <b>200</b>&#x2032; while core <b>2</b> performs TCP connection management for the appliance. Likewise, core <b>3</b> may perform SSL offloading while core <b>4</b> may perform layer <b>7</b> or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and/or described in conjunction with <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>. In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in <figref idref="DRAWINGS">FIG. 5A</figref> division by function may lead to different cores running at different levels of load or performance.</p>
<p id="p-0178" num="0183">The functionality or tasks may be distributed in any arrangement and scheme. For example, <figref idref="DRAWINGS">FIG. 5B</figref> illustrates a first core, Core <b>1</b> <b>505</b>A, processing applications and processes associated with network I/O functionality <b>510</b>A. Network traffic associated with network I/O, in some embodiments, can be associated with a particular port number. Thus, outgoing and incoming packets having a port destination associated with NW I/O <b>510</b>A will be directed towards Core <b>1</b> <b>505</b>A which is dedicated to handling all network traffic associated with the NW I/O port. Similarly, Core <b>2</b> <b>505</b>B is dedicated to handling functionality associated with SSL processing and Core <b>4</b> <b>505</b>D may be dedicated handling all TCP level processing and functionality.</p>
<p id="p-0179" num="0184">While <figref idref="DRAWINGS">FIG. 5A</figref> illustrates functions such as network I/O, SSL and TCP, other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example, any of the functions described in conjunction with <figref idref="DRAWINGS">FIGS. 2A and 2B</figref> may be distributed across the cores on a functionality basis. In some cases, a first VIP <b>275</b>A may run on a first core while a second VIP <b>275</b>B with a different configuration may run on a second core. In some embodiments, each core <b>505</b> can handle a particular functionality such that each core <b>505</b> can handle the processing associated with that particular function. For example, Core <b>2</b> <b>505</b>B may handle SSL offloading while Core <b>4</b> <b>505</b>D may handle application layer processing and traffic management.</p>
<p id="p-0180" num="0185">In other embodiments, work, load or network traffic may be distributed among cores <b>505</b> according to any type and form of data parallelism <b>540</b>. In some embodiments, data parallelism may be achieved in a multi-core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments, a single execution thread or code controls operations on all pieces of data. In other embodiments, different threads or instructions control the operation, but may execute the same code. In some embodiments, data parallelism is achieved from the perspective of a packet engine, vServers (VIPs) <b>275</b>A-C, network interface cards (NIC) <b>542</b>D-E and/or any other networking hardware or software included on or associated with an appliance <b>200</b>. For example, each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different, varying or substantially the same amount of data, and as a result may have varying, different or relatively the same amount of load <b>515</b>.</p>
<p id="p-0181" num="0186">In the case of a data parallelism approach, the work may be divided up and distributed based on VIPs, NICs and/or data flows of the VIPs or NICs. In one of these approaches, the work of the multi-core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example, each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches, the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example, network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases, a core may process data from multiple NICs.</p>
<p id="p-0182" num="0187">While <figref idref="DRAWINGS">FIG. 5A</figref> illustrates a single vServer associated with a single core <b>505</b>, as is the case for VIP<b>1</b> <b>275</b>A, VIP<b>2</b> <b>275</b>B and VIP<b>3</b> <b>275</b>C. In some embodiments, a single vServer can be associated with one or more cores <b>505</b>. In contrast, one or more vServers can be associated with a single core <b>505</b>. Associating a vServer with a core <b>505</b> may include that core <b>505</b> to process all functions associated with that particular vServer. In some embodiments, each core executes a VIP having the same code and configuration. In other embodiments, each core executes a VIP having the same code but different configuration. In some embodiments, each core executes a VIP having different code and the same or different configuration.</p>
<p id="p-0183" num="0188">Like vServers, NICs can also be associated with particular cores <b>505</b>. In many embodiments, NICs can be connected to one or more cores <b>505</b> such that when a NIC receives or transmits data packets, a particular core <b>505</b> handles the processing involved with receiving and transmitting the data packets. In one embodiment, a single NIC can be associated with a single core <b>505</b>, as is the case with NIC<b>1</b> <b>542</b>D and NIC<b>2</b> <b>542</b>E. In other embodiments, one or more NICs can be associated with a single core <b>505</b>. In other embodiments, a single NIC can be associated with one or more cores <b>505</b>. In these embodiments, load could be distributed amongst the one or more cores <b>505</b> such that each core <b>505</b> processes a substantially similar amount of load. A core <b>505</b> associated with a NIC may process all functions and/or data associated with that particular NIC.</p>
<p id="p-0184" num="0189">While distributing work across cores based on data of VIPs or NICs may have a level of independency, in some embodiments, this may lead to unbalanced use of cores as illustrated by the varying loads <b>515</b> of <figref idref="DRAWINGS">FIG. 5A</figref>.</p>
<p id="p-0185" num="0190">In some embodiments, load, work or network traffic can be distributed among cores <b>505</b> based on any type and form of data flow. In another of these approaches, the work may be divided or distributed among cores based on data flows. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance <b>200</b>&#x2032; may be distributed in a more balanced manner than the other approaches.</p>
<p id="p-0186" num="0191">In flow-based data parallelism <b>520</b>, distribution of data is related to any type of flow of data, such as request/response pairings, transactions, sessions, connections or application communications. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core <b>505</b> carries a substantially equal or relatively evenly distributed amount of load, data or network traffic.</p>
<p id="p-0187" num="0192">In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance <b>200</b>&#x2032; may be distributed in a more balanced manner than the other approached. In one embodiment, data flow can be distributed based on a transaction or a series of transactions. This transaction, in some embodiments, can be between a client and a server and can be characterized by an IP address or other packet identifier. For example, Core <b>1</b> <b>505</b>A can be dedicated to transactions between a particular client and a particular server, therefore the load <b>515</b>A on Core <b>1</b> <b>505</b>A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core <b>1</b> <b>505</b>A can be accomplished by routing all data packets originating from either the particular client or server to Core <b>1</b> <b>505</b>A.</p>
<p id="p-0188" num="0193">While work or load can be distributed to the cores based in part on transactions, in other embodiments load or work can be allocated on a per packet basis. In these embodiments, the appliance <b>200</b> can intercept data packets and allocate them to a core <b>505</b> having the least amount of load. For example, the appliance <b>200</b> could allocate a first incoming data packet to Core <b>1</b> <b>505</b>A because the load <b>515</b>A on Core <b>1</b> is less than the load <b>515</b>B-N on the rest of the cores <b>505</b>B-N. Once the first data packet is allocated to Core <b>1</b> <b>505</b>A, the amount of load <b>515</b>A on Core <b>1</b> <b>505</b>A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance <b>200</b> intercepts a second data packet, the appliance <b>200</b> will allocate the load to Core <b>4</b> <b>505</b>D because Core <b>4</b> <b>505</b>D has the second least amount of load. Allocating data packets to the core with the least amount of load can, in some embodiments, ensure that the load <b>515</b>A-N distributed to each core <b>505</b> remains substantially equal.</p>
<p id="p-0189" num="0194">In other embodiments, load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core <b>505</b>. The above-mentioned example illustrates load balancing on a per/packet basis. In other embodiments, load can be allocated based on a number of packets such that every 10, 100 or 1000 packets are allocated to the core <b>505</b> having the least amount of load. The number of packets allocated to a core <b>505</b> can be a number determined by an application, user or administrator and can be any number greater than zero. In still other embodiments, load can be allocated based on a time metric such that packets are distributed to a particular core <b>505</b> for a predetermined amount of time. In these embodiments, packets can be distributed to a particular core <b>505</b> for five milliseconds or for any period of time determined by a user, program, system, administrator or otherwise. After the predetermined time period elapses, data packets are transmitted to a different core <b>505</b> for the predetermined period of time.</p>
<p id="p-0190" num="0195">Flow-based data parallelism methods for distributing work, load or network traffic among the one or more cores <b>505</b> can comprise any combination of the above-mentioned embodiments. These methods can be carried out by any part of the appliance <b>200</b>, by an application or set of executable instructions executing on one of the cores <b>505</b>, such as the packet engine, or by any application, program or agent executing on a computing device in communication with the appliance <b>200</b>.</p>
<p id="p-0191" num="0196">The functional and data parallelism computing schemes illustrated in <figref idref="DRAWINGS">FIG. 5A</figref> can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism <b>500</b>, data parallelism <b>540</b>, flow-based data parallelism <b>520</b> or any portions thereof. In some cases, the multi-core system may use any type and form of load balancing schemes to distribute load among the one or more cores <b>505</b>. The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.</p>
<p id="p-0192" num="0197">Illustrated in <figref idref="DRAWINGS">FIG. 5B</figref> is an embodiment of a multi-core system <b>545</b>, which may be any type and form of one or more systems, appliances, devices or components. This system <b>545</b>, in some embodiments, can be included within an appliance <b>200</b> having one or more processing cores <b>505</b>A-N. The system <b>545</b> can further include one or more packet engines (PE) or packet processing engines (PPE) <b>548</b>A-N communicating with a memory bus <b>556</b>. The memory bus may be used to communicate with the one or more processing cores <b>505</b>A-N. Also included within the system <b>545</b> can be one or more network interface cards (NIC) <b>552</b> and a flow distributor <b>550</b> which can further communicate with the one or more processing cores <b>505</b>A-N. The flow distributor <b>550</b> can comprise a Receive Side Scaler (RSS) or Receive Side Scaling (RSS) module <b>560</b>.</p>
<p id="p-0193" num="0198">Further referring to <figref idref="DRAWINGS">FIG. 5B</figref>, and in more detail, in one embodiment the packet engine(s) <b>548</b>A-N can comprise any portion of the appliance <b>200</b> described herein, such as any portion of the appliance described in <figref idref="DRAWINGS">FIGS. 2A and 2B</figref>. The packet engine(s) <b>548</b>A-N can, in some embodiments, comprise any of the following elements: the packet engine <b>240</b>, a network stack <b>267</b>; a cache manager <b>232</b>; a policy engine <b>236</b>; a compression engine <b>238</b>; an encryption engine <b>234</b>; a GUI <b>210</b>; a CLI <b>212</b>; shell services <b>214</b>; monitoring programs <b>216</b>; and any other software or hardware element able to receive data packets from one of either the memory bus <b>556</b> or the one of more cores <b>505</b>A-N. In some embodiments, the packet engine(s) <b>548</b>A-N can comprise one or more vServers <b>275</b>A-N, or any portion thereof. In other embodiments, the packet engine(s) <b>548</b>A-N can provide any combination of the following functionalities: SSL VPN <b>280</b>; Intranet UP <b>282</b>; switching <b>284</b>; DNS <b>286</b>; packet acceleration <b>288</b>; App FW <b>280</b>; monitoring such as the monitoring provided by a monitoring agent <b>197</b>; functionalities associated with functioning as a TCP stack; load balancing; SSL offloading and processing; content switching; policy evaluation; caching; compression; encoding; decompression; decoding; application firewall functionalities; XML processing and acceleration; and SSL VPN connectivity.</p>
<p id="p-0194" num="0199">The packet engine(s) <b>548</b>A-N can, in some embodiments, be associated with a particular server, user, client or network. When a packet engine <b>548</b> becomes associated with a particular entity, that packet engine <b>548</b> can process data packets associated with that entity. For example, should a packet engine <b>548</b> be associated with a first user, that packet engine <b>548</b> will process and operate on packets generated by the first user, or packets having a destination address associated with the first user. Similarly, the packet engine <b>548</b> may choose not to be associated with a particular entity such that the packet engine <b>548</b> can process and otherwise operate on any data packets not generated by that entity or destined for that entity.</p>
<p id="p-0195" num="0200">In some instances, the packet engine(s) <b>548</b>A-N can be configured to carry out the any of the functional and/or data parallelism schemes illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>. In these instances, the packet engine(s) <b>548</b>A-N can distribute functions or data among the processing cores <b>505</b>A-N so that the distribution is according to the parallelism or distribution scheme. In some embodiments, a single packet engine(s) <b>548</b>A-N carries out a load balancing scheme, while in other embodiments one or more packet engine(s) <b>548</b>A-N carry out a load balancing scheme. Each core <b>505</b>A-N, in one embodiment, can be associated with a particular packet engine <b>548</b> such that load balancing can be carried out by the packet engine. Load balancing may in this embodiment, require that each packet engine <b>548</b>A-N associated with a core <b>505</b> communicate with the other packet engines associated with cores so that the packet engines <b>548</b>A-N can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine <b>548</b>A-N based in part on the age of the engine's vote and in some cases a priority value associated with the current amount of load on an engine's associated core <b>505</b>.</p>
<p id="p-0196" num="0201">Any of the packet engines running on the cores may run in user mode, kernel or any combination thereof. In some embodiments, the packet engine operates as an application or program running is user or application space. In these embodiments, the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments, the packet engine operates in kernel mode or as part of the kernel. In some embodiments, a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments, a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments, the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.</p>
<p id="p-0197" num="0202">In some embodiments the memory bus <b>556</b> can be any type and form of memory or computer bus. While a single memory bus <b>556</b> is depicted in <figref idref="DRAWINGS">FIG. 5B</figref>, the system <b>545</b> can comprise any number of memory buses <b>556</b>. In one embodiment, each packet engine <b>548</b> can be associated with one or more individual memory buses <b>556</b>.</p>
<p id="p-0198" num="0203">The NIC <b>552</b> can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC <b>552</b> can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network <b>104</b>. While a single NIC <b>552</b> is illustrated, the system <b>545</b> can comprise any number of NICs <b>552</b>. In some embodiments, each core <b>505</b>A-N can be associated with one or more single NICs <b>552</b>. Thus, each core <b>505</b> can be associated with a single NIC <b>552</b> dedicated to a particular core <b>505</b>.</p>
<p id="p-0199" num="0204">The cores <b>505</b>A-N can comprise any of the processors described herein. Further, the cores <b>505</b>A-N can be configured according to any of the core <b>505</b> configurations described herein. Still further, the cores <b>505</b>A-N can have any of the core <b>505</b> functionalities described herein. While <figref idref="DRAWINGS">FIG. 5B</figref> illustrates seven cores <b>505</b>A-G, any number of cores <b>505</b> can be included within the system <b>545</b>. In particular, the system <b>545</b> can comprise &#x201c;N&#x201d; cores, where &#x201c;N&#x201d; is a whole number greater than zero.</p>
<p id="p-0200" num="0205">A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core, some level of coordination is eliminated from the case of using the same address space. With a separate address space, a core can perform work on information and data in the core's own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and/or SSL connections.</p>
<p id="p-0201" num="0206">Further referring to <figref idref="DRAWINGS">FIG. 5B</figref>, any of the functionality and/or embodiments of the cores <b>505</b> described above in connection with <figref idref="DRAWINGS">FIG. 5A</figref> can be deployed in any embodiment of the virtualized environment described above in connection with <figref idref="DRAWINGS">FIGS. 4A and 4B</figref>. Instead of the functionality of the cores <b>505</b> being deployed in the form of a physical processor <b>505</b>, such functionality may be deployed in a virtualized environment <b>400</b> on any computing device <b>100</b>, such as a client <b>102</b>, server <b>106</b> or appliance <b>200</b>. In other embodiments, instead of the functionality of the cores <b>505</b> being deployed in the form of an appliance or a single device, the functionality may be deployed across multiple devices in any arrangement. For example, one device may comprise two or more cores and another device may comprise two or more cores. For example, a multi-core system may include a cluster of computing devices, a server farm or network of computing devices. In some embodiments, instead of the functionality of the cores <b>505</b> being deployed in the form of cores, the functionality may be deployed on a plurality of processors, such as a plurality of single core processors.</p>
<p id="p-0202" num="0207">In one embodiment, the cores <b>505</b> may be any type and form of processor. In some embodiments, a core can function substantially similar to any processor or central processing unit described herein. In some embodiment, the cores <b>505</b> may comprise any portion of any processor described herein. While <figref idref="DRAWINGS">FIG. 5A</figref> illustrates seven cores, there can exist any &#x201c;N&#x201d; number of cores within an appliance <b>200</b>, where &#x201c;N&#x201d; is any whole number greater than one. In some embodiments, the cores <b>505</b> can be installed within a common appliance <b>200</b>, while in other embodiments the cores <b>505</b> can be installed within one or more appliance(s) <b>200</b> communicatively connected to one another. The cores <b>505</b> can in some embodiments comprise graphics processing software, while in other embodiments the cores <b>505</b> provide general processing capabilities. The cores <b>505</b> can be installed physically near each other and/or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and/or communicatively coupled to the cores for transferring data between to, from and/or between the cores.</p>
<p id="p-0203" num="0208">While each core <b>505</b> can comprise software for communicating with other cores, in some embodiments a core manager (not shown) can facilitate communication between each core <b>505</b>. In some embodiments, the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments, core to core messaging may be used to communicate between cores, such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments, cores may communicate via any type and form of shared memory interface. In one embodiment, there may be one or more memory locations shared among all the cores. In some embodiments, each core may have separate memory locations shared with each other core. For example, a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments, cores may communicate via any type of programming or API, such as function calls via the kernel. In some embodiments, the operating system may recognize and support multiple core devices and provide interfaces and API for inter-core communications.</p>
<p id="p-0204" num="0209">The flow distributor <b>550</b> can be any application, program, library, script, task, service, process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments, the flow distributor <b>550</b> may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments, the flow distributor distribute, forwards, routes, controls and/ors manage the distribution of data packets among the cores <b>505</b> and/or packet engine or VIPs running on the cores. The flow distributor <b>550</b>, in some embodiments, can be referred to as an interface master. In one embodiment, the flow distributor <b>550</b> comprises a set of executable instructions executing on a core or processor of the appliance <b>200</b>. In another embodiment, the flow distributor <b>550</b> comprises a set of executable instructions executing on a computing machine in communication with the appliance <b>200</b>. In some embodiments, the flow distributor <b>550</b> comprises a set of executable instructions executing on a NIC, such as firmware. In still other embodiments, the flow distributor <b>550</b> comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment, the flow distributor <b>550</b> executes on at least one of the cores <b>505</b>A-N, while in other embodiments a separate flow distributor <b>550</b> assigned to each core <b>505</b>A-N executes on an associated core <b>505</b>A-N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance, such as a NIC, or the kernel may be designed and constructed to support sequential operations across the NICs and/or cores.</p>
<p id="p-0205" num="0210">In embodiments where the system <b>545</b> comprises one or more flow distributors <b>550</b>, each flow distributor <b>550</b> can be associated with a processor <b>505</b> or a packet engine <b>548</b>. The flow distributors <b>550</b> can comprise an interface mechanism that allows each flow distributor <b>550</b> to communicate with the other flow distributors <b>550</b> executing within the system <b>545</b>. In one instance, the one or more flow distributors <b>550</b> can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor <b>550</b> should receive the load. In other embodiments, a first flow distributor <b>550</b>&#x2032; can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria: the load on the associated core is above a predetermined threshold; the load on the associated core is below a predetermined threshold; the load on the associated core is less than the load on the other cores; or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.</p>
<p id="p-0206" num="0211">The flow distributor <b>550</b> can distribute network traffic among the cores <b>505</b> according to a distribution, computing or load balancing scheme such as those described herein. In one embodiment, the flow distributor can distribute network traffic according to any one of a functional parallelism distribution scheme <b>550</b>, a data parallelism load distribution scheme <b>540</b>, a flow-based data parallelism distribution scheme <b>520</b>, or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor <b>550</b> can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment, the flow distributor <b>550</b> can comprise one or more operations, functions or logic to determine how to distribute packers, work or load accordingly. In still other embodiments, the flow distributor <b>550</b> can comprise one or more sub operations, functions or logic that can identify a source address and a destination address associated with a data packet, and distribute packets accordingly.</p>
<p id="p-0207" num="0212">In some embodiments, the flow distributor <b>550</b> can comprise a receive-side scaling (RSS) network driver, module <b>560</b> or any type and form of executable instructions which distribute data packets among the one or more cores <b>505</b>. The RSS module <b>560</b> can comprise any combination of hardware and software, In some embodiments, the RSS module <b>560</b> works in conjunction with the flow distributor <b>550</b> to distribute data packets across the cores <b>505</b>A-N or among multiple processors in a multi-processor network. The RSS module <b>560</b> can execute within the NIC <b>552</b> in some embodiments, and in other embodiments can execute on any one of the cores <b>505</b>.</p>
<p id="p-0208" num="0213">In some embodiments, the RSS module <b>560</b> uses the MICROSOFT receive-side-scaling (RSS) scheme. In one embodiment, RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in-order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.</p>
<p id="p-0209" num="0214">The RSS module <b>560</b> can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The hash function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash, the size may be 40 bytes for IPv6 and 16 bytes for IPv4.</p>
<p id="p-0210" num="0215">The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments, a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types, including TCP/IPv4, TCP/IPv6, IPv4, and IPv6 headers. In some embodiments, a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present (for example, two or four). In some embodiments, hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present (for example, 64 buckets). In some embodiments, the hash function is determined based on a level of computational or resource usage. In some embodiments, the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments, the hash function is determined based on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.</p>
<p id="p-0211" num="0216">The RSS may generate hashes from any type and form of input, such as a sequence of values. This sequence of values can include any portion of the network packet, such as any header, field or payload of network packet, or portions thereof. In some embodiments, the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow, such as any of the following: a four tuple comprising at least two IP addresses and two ports; a four tuple comprising any four sets of values; a six tuple; a two tuple; and/or any other sequence of numbers or values. The following are example of hash types that may be used by RSS:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0217">4-tuple of source TCP Port, source IP version 4 (IPv4) address, destination TCP Port, and destination IPv4 address.</li>
        <li id="ul0004-0002" num="0218">4-tuple of source TCP Port, source IP version 6 (IPv6) address, destination TCP Port, and destination IPv6 address.</li>
        <li id="ul0004-0003" num="0219">2-tuple of source IPv4 address, and destination IPv4 address.</li>
        <li id="ul0004-0004" num="0220">2-tuple of source IPv6 address, and destination IPv6 address.</li>
        <li id="ul0004-0005" num="0221">2-tuple of source IPv6 address, and destination IPv6 address, including support for parsing IPv6 extension headers.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0212" num="0222">The hash result or any portion thereof may used to identify a core or entity, such as a packet engine or VIP, for distributing a network packet. In some embodiments, one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits, such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7, inclusive.</p>
<p id="p-0213" num="0223">The hash result may be used to identify the core or entity via any type and form of table, such as a bucket table or indirection table. In some embodiments, the number of hash-result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hash result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor, such as by a core or processor identifier. In some embodiments, all of the cores of the multi-core system are identified in the table. In other embodiments, a port of the cores of the multi-core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments, the flow controller and/or RSS module may rebalance the network rebalance the network load by changing the indirection table.</p>
<p id="p-0214" num="0224">In some embodiments, the multi-core system <b>575</b> does not include a RSS driver or RSS module <b>560</b>. In some of these embodiments, a software steering module (not shown) or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor <b>550</b> to steer packets to cores <b>505</b> within the multi-core system <b>575</b>.</p>
<p id="p-0215" num="0225">The flow distributor <b>550</b>, in some embodiments, executes within any module or program on the appliance <b>200</b>, on any one of the cores <b>505</b> and on any one of the devices or components included within the multi-core system <b>575</b>. In some embodiments, the flow distributor <b>550</b>&#x2032; can execute on the first core <b>505</b>A, while in other embodiments the flow distributor <b>550</b>&#x2033; can execute on the NIC <b>552</b>. In still other embodiments, an instance of the flow distributor <b>550</b>&#x2032; can execute on each core <b>505</b> included in the multi-core system <b>575</b>. In this embodiment, each instance of the flow distributor <b>550</b>&#x2032; can communicate with other instances of the flow distributor <b>550</b>&#x2032; to forward packets back and forth across the cores <b>505</b>. There exist situations where a response to a request packet may not be processed by the same core, i.e. the first core processes the request while the second core processes the response. In these situations, the instances of the flow distributor <b>550</b>&#x2032; can intercept the packet and forward it to the desired or correct core <b>505</b>, i.e. a flow distributor instance <b>550</b>&#x2032; can forward the response to the first core. Multiple instances of the flow distributor <b>550</b>&#x2032; can execute on any number of cores <b>505</b> and any combination of cores <b>505</b>.</p>
<p id="p-0216" num="0226">The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet, data or data flow. The rules may identify any type and form of tuple information related to a network packet, such as a 4-tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule, the flow distributor may forward the packet to a core or packet engine. In some embodiments, the packet is forwarded to a core via shared memory and/or core to core messaging.</p>
<p id="p-0217" num="0227">Although <figref idref="DRAWINGS">FIG. 5B</figref> illustrates the flow distributor <b>550</b> as executing within the multi-core system <b>575</b>, in some embodiments the flow distributor <b>550</b> can execute on a computing device or appliance remotely located from the multi-core system <b>575</b>. In such an embodiment, the flow distributor <b>550</b> can communicate with the multi-core system <b>575</b> to take in data packets and distribute the packets across the one or more cores <b>505</b>. The flow distributor <b>550</b> can, in one embodiment, receive data packets destined for the appliance <b>200</b>, apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores <b>505</b> of the multi-core system <b>575</b>. In one embodiment, the flow distributor <b>550</b> can be included in a router or other appliance such that the router can target particular cores <b>505</b> by altering meta data associated with each packet so that each packet is targeted towards a sub-node of the multi-core system <b>575</b>. In such an embodiment, CISCO's vn-tag mechanism can be used to alter or tag each packet with the appropriate meta data.</p>
<p id="p-0218" num="0228">Illustrated in <figref idref="DRAWINGS">FIG. 5C</figref> is an embodiment of a multi-core system <b>575</b> comprising one or more processing cores <b>505</b>A-N. In brief overview, one of the cores <b>505</b> can be designated as a control core <b>505</b>A and can be used as a control plane <b>570</b> for the other cores <b>505</b>. The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores <b>505</b>A-N may share a global cache <b>580</b>. While the control core provides a control plane, the other cores in the multi-core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization, configuration and control of the multi-core system.</p>
<p id="p-0219" num="0229">Further referring to <figref idref="DRAWINGS">FIG. 5C</figref>, and in more detail, the cores <b>505</b>A-N as well as the control core <b>505</b>A can be any processor described herein. Furthermore, the cores <b>505</b>A-N and the control core <b>505</b>A can be any processor able to function within the system <b>575</b> described in <figref idref="DRAWINGS">FIG. 5C</figref>. Still further, the cores <b>505</b>A-N and the control core <b>505</b>A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments, the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.</p>
<p id="p-0220" num="0230">Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview, a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example, 50% of each memory of each code may be dedicated or allocated to the shared global cache. That is, in the illustrated embodiment, 2 GB of each core excluding the control plane core or core <b>1</b> may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments, each core may provide a different amount of memory for use by the global cache. In other embodiments, any one core may not provide any memory or use the global cache. In some embodiments, any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow, request or response.</p>
<p id="p-0221" num="0231">The global cache <b>580</b> can be any type and form of memory or storage element, such as any memory or storage element described herein. In some embodiments, the cores <b>505</b> may have access to a predetermined amount of memory (i.e. 32 GB or any other memory amount commensurate with the system <b>575</b>). The global cache <b>580</b> can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores <b>505</b>. In other embodiments, each core <b>505</b> can have a predetermined amount of memory. The global cache <b>580</b> can comprise an amount of the memory allocated to each core <b>505</b>. This memory amount can be measured in bytes, or can be measured as a percentage of the memory allocated to each core <b>505</b>. Thus, the global cache <b>580</b> can comprise 1 GB of memory from the memory associated with each core <b>505</b>, or can comprise 20 percent or one-half of the memory associated with each core <b>505</b>. In some embodiments, only a portion of the cores <b>505</b> provide memory to the global cache <b>580</b>, while in other embodiments the global cache <b>580</b> can comprise memory not allocated to the cores <b>505</b>.</p>
<p id="p-0222" num="0232">Each core <b>505</b> can use the global cache <b>580</b> to store network traffic or cache data. In some embodiments, the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example, the cache manager of <figref idref="DRAWINGS">FIG. 2A</figref> and cache functionality of <figref idref="DRAWINGS">FIG. 2B</figref> may use the global cache to share data for acceleration. For example, each of the packet engines may store responses, such as HTML data, to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.</p>
<p id="p-0223" num="0233">In some embodiments, the cores <b>505</b> can use the global cache <b>580</b> to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments, the cores <b>505</b> can use the global cache <b>580</b> to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores <b>505</b> can, in some embodiments read from and write to cache <b>580</b>, while in other embodiments the cores <b>505</b> can only read from or write to cache <b>580</b>. The cores may use the global cache to perform core to core communications.</p>
<p id="p-0224" num="0234">The global cache <b>580</b> may be sectioned into individual memory sections where each section can be dedicated to a particular core <b>505</b>. In one embodiment, the control core <b>505</b>A can receive a greater amount of available cache, while the other cores <b>505</b> can receiving varying amounts or access to the global cache <b>580</b>.</p>
<p id="p-0225" num="0235">In some embodiments, the system <b>575</b> can comprise a control core <b>505</b>A. While <figref idref="DRAWINGS">FIG. 5C</figref> illustrates core <b>1</b> <b>505</b>A as the control core, the control core can be any core within the appliance <b>200</b> or multi-core system. Further, while only a single control core is depicted, the system <b>575</b> can comprise one or more control cores each having a level of control over the system. In some embodiments, one or more control cores can each control a particular aspect of the system <b>575</b>. For example, one core can control deciding which distribution scheme to use, while another core can determine the size of the global cache <b>580</b>.</p>
<p id="p-0226" num="0236">The control plane of the multi-core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control, management and coordination of operation and functionality the plurality of cores in the multi-core system. This control plane core may provide control, management and coordination of allocation and use of memory of the system among the plurality of cores in the multi-core system, including initialization and configuration of the same. In some embodiments, the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments, the control plane core runs a packet engine and in other embodiments, the control plane core is dedicated to management and control of the other cores of the system.</p>
<p id="p-0227" num="0237">The control core <b>505</b>A can exercise a level of control over the other cores <b>505</b> such as determining how much memory should be allocated to each core <b>505</b> or determining which core <b>505</b> should be assigned to handle a particular function or hardware/software entity. The control core <b>505</b>A, in some embodiments, can exercise control over those cores <b>505</b> within the control plan <b>570</b>. Thus, there can exist processors outside of the control plane <b>570</b> which are not controlled by the control core <b>505</b>A. Determining the boundaries of the control plane <b>570</b> can include maintaining, by the control core <b>505</b>A or agent executing within the system <b>575</b>, a list of those cores <b>505</b> controlled by the control core <b>505</b>A. The control core <b>505</b>A can control any of the following: initialization of a core; determining when a core is unavailable; re-distributing load to other cores <b>505</b> when one core fails; determining which distribution scheme to implement; determining which core should receive network traffic; determining how much cache should be allocated to each core; determining whether to assign a particular function or element to a particular core; determining whether to permit cores to communicate with one another; determining the size of the global cache <b>580</b>; and any other determination of a function, configuration or operation of the cores within the system <b>575</b>.</p>
<p id="h-0010" num="0000">F. Systems and Methods for Processing OCSP Responses in Connection with SSL Handshake Processes</p>
<p id="p-0228" num="0238">In data communications between at least one client device and at least one server, an intermediary device <b>200</b> (hereafter sometimes referred to as &#x201c;intermediary&#x201d; or &#x201c;appliance&#x201d;) may reside between the at least one client device <b>102</b> and at least one server <b>106</b>. A certificate <b>678</b> of a client device may be validated in connection with a request to initiate a communications link via the intermediary device <b>200</b>. The intermediary device <b>200</b>, or a component of the intermediary <b>200</b>, may receive the certificate <b>678</b> and determine a status of the certificate. In some embodiments, Online Certificate Status Protocol (OCSP) may be available and/or supported by the intermediary <b>200</b>. OCSP can be utilized to verify a certificate revocation status of the certificate <b>678</b>.</p>
<p id="p-0229" num="0239">Referring to <figref idref="DRAWINGS">FIG. 6A</figref>, an embodiment of a system <b>600</b> for managing one or more OCSP responses in connection with one or more SSL handshake processes is depicted. In brief overview, the system includes the intermediary <b>200</b>, at least one client <b>102</b>, at least one server <b>106</b> and an OCSP server <b>668</b>. The intermediary <b>200</b> includes an SSL engine <b>667</b> interoperating with at least one OCSP responder <b>688</b>, and may be supported by one or more of: a policy engine <b>236</b>, a plurality of policies, a cache manager <b>232</b> and a cache <b>622</b>. A client <b>102</b> may send a connection request to initiate a SSL handshake <b>677</b> with the intermediary <b>200</b>. As part of the SSL handshake <b>677</b>, the client may send a client certificate <b>678</b> to the intermediary <b>200</b> for validation.</p>
<p id="p-0230" num="0240">OCSP is a protocol used to determine the status of a digital certificate, such as a certificate of a device, user or organization. In some embodiments, the digital certificate is a SSL certificate. A digital certificate (hereafter sometimes generally referred to as &#x201c;certificate&#x201d;), may be issued or otherwise generated by a certificate authority (CA), which may be any entity designated and/or adapted for providing and/or managing certificates <b>678</b>. In some embodiments, a CA may be a trusted third-party. A certificate may be an electronic document which uses a digital signature to bind a public key with an identity (e.g., an identifier or address of a device, person or organization). In certain embodiments, a CA provides the digital signature. In some embodiments, a certificate <b>678</b> can further include any type or form of information, including but not limited to a certificate identifier (e.g., serial number), signature algorithm, certificate validity information, purpose (e.g., for encryption or for verifying a signature) and a security hash. In some embodiments, a certificate <b>678</b> includes an authority information access (AIA) extension that indicates how to access CA information and services of the issuer of the certificate. CA information and services may include on-line validation services and CA policy data.</p>
<p id="p-0231" num="0241">Features of the OCSP supported by the intermediary <b>200</b> may include features specified in the Internet Engineering Task Force (IETF) standards, such as RFC 2560 and/or RFC 5019. OCSP may be used in conjunction with or as an alternative to certificate revocation lists (CRLs). In some embodiments, OCSP may provide several advantages over the traditional CRL method, for example, centralized administration (e.g., by the OCSP respondent/server), less compute and disk load on the client (e.g., dedicated OCSP respondent(s)/server(s)), and greater resistance to tampering (e.g., secured OCSP respondent(s)/server(s)). As used herein, OCSP shall generally refer to any collection of standard, custom and/or modified features that supports and/or implements OCSP features and functionality.</p>
<p id="p-0232" num="0242">An entity that relies on the content of a certificate may perform some level of checking before accepting the certificate as valid. For example, the checking process may include verifying that the certificate has not been revoked. In this context, OCSP provides a request/response protocol where an OCSP client retrieves certificate revocation status from an OCSP responder <b>688</b>. In various embodiments, the OCSP client sends a OCSP request to the OCSP responder <b>688</b> to validate the certificate <b>678</b>. The OCSP responder <b>688</b> can respond with an OCSP response, which may include a status of the certificate. The status may, for example, indicate whether the certificate has been revoked and/or if the certificate is still valid. For example and in one embodiment, the OCSP client may be a web browser that wants to check the validity of a certificate provided by a web server. In some embodiments, the OCSP responder <b>688</b> is associated with the CA that issued the certificate.</p>
<p id="p-0233" num="0243">In one embodiment, the intermediary device <b>200</b>, or a component of the intermediary <b>200</b> (e.g., SSL engine <b>667</b>), may be identified as or configured to behave or act as an OCSP client that seeks to determine the validity of the certificate <b>678</b>. The intermediary <b>200</b> can provide functionality that serves as an OCSP server <b>668</b> to the OCSP client. For example and in one embodiment, the intermediary <b>200</b> may provide an OCSP responder <b>688</b> or service <b>688</b> for validating client certificates. This OCSP responder <b>688</b> or service <b>688</b> (hereafter sometimes referred to as &#x201c;OCSP responder&#x201d; or &#x201c;responder&#x201d;) may be provided via a vserver <b>275</b> or packet engine executing on the intermediary <b>200</b>. In another embodiment, the intermediary <b>200</b> may provide and/or assign at least a portion of one or more cores in provisioning the OCSP responder <b>688</b>. An OCSP responder <b>688</b> may include any application, program, library, script, process, virtual machine, task, thread or any type and form of executable instructions.</p>
<p id="p-0234" num="0244">In some embodiments, the OCSP responder <b>688</b> provides certificate revocation status and/or other responder functionality. The OCSP responder <b>688</b> may provide certificate revocation status and/or other responder functionality by accessing or interacting with at least one other entity. Such an entity may be, but is not limited to, another (e.g., a second) OCSP responder <b>688</b><i>b</i>, a cache <b>622</b> or storage device (e.g., a disk of a storage area network), a server (e.g., OCSP server <b>668</b>) and a CA. For example and in one embodiment, the OCSP responder <b>688</b> of the intermediary <b>200</b> may act as an OCSP client to the second OCSP responder <b>688</b><i>b </i>which provides the certificate status. This entity may reside on the intermediary <b>200</b>, for example, as a local cache <b>622</b> or a second OCSP responder <b>688</b><i>b </i>provided by the intermediary <b>200</b>. The entity may also reside on the network <b>104</b> and communicate with the OCSP responder <b>688</b> over the network <b>104</b>. In other embodiments where the OCSP responder <b>688</b> communicates with multiple entities, these entities may reside in any configuration between the intermediary <b>200</b> and the network <b>104</b>.</p>
<p id="p-0235" num="0245">In some embodiments, the OCSP responder <b>688</b> may be a OCSP vserver <b>275</b> executing on the intermediary <b>200</b>. The OCSP vserver <b>275</b> may include some or all features of a OCSP server <b>668</b>, or may be an interface bound to an OCSP server <b>668</b> on the network <b>104</b>. The intermediary <b>200</b> may provide or execute at least one OCSP responders <b>688</b><i>a</i>-<i>n</i>. In some embodiments, each of the OCSP responders may be associated with or assigned to at least one of: a CA, a client <b>102</b>, a server <b>106</b>, a connection type, a group of clients <b>102</b>, a server farm, a server cluster, an OCSP server <b>668</b> and a cache <b>622</b>. In one embodiment, the intermediary <b>200</b> may direct an OCSP request to one or more OCSP responders <b>688</b> based on the association or assignment. The association or assignment may be configured or stored in a table, hash, or other data structure, for example in the cache <b>622</b> or a storage device. In some embodiments, the intermediary <b>200</b> may change or otherwise update the association or assignment dynamically, e.g., based on some event such as upon decommissioning a CA or an OCSP server <b>668</b>.</p>
<p id="p-0236" num="0246">The intermediary <b>200</b> may direct an OCSP request to one or more OCSP responders via any type or form of load balancing or distribution process. A flow distributor <b>550</b> of the intermediary <b>200</b> may direct an OCSP request to one or more OCSP responders. The intermediary <b>200</b> may identify one or more OCSP responders <b>688</b> to process an OCSP request, e.g., based on application of at least one policy by a policy engine <b>236</b>. The policy may take into account one or more of: any association or assignment of the OCSP responders to the entities described above, load balancing and other distribution processes, priority of the request, information about the certificate and CA, and any assigned order, priority and/or weight of the OCSP responders. In some embodiments the OCSP responder is part of, assigned to or associated with a virtual server and receives the request via the virtual server,</p>
<p id="p-0237" num="0247">The policy engine <b>236</b> may include one or more features of any embodiment of the policy engines <b>195</b>, <b>236</b> described above in connection with <figref idref="DRAWINGS">FIGS. 1D and 2A</figref>. In some embodiments, the policy engine <b>236</b> may apply one or more policies that: i) identifies one or more OCSP responders in response to receiving a certificate, ii) evaluates the status of a certificate based on one or more OCSP responses, iii) determines whether to suspend SSL handshaking while a certificate status is being determined, and iv) determines whether to establish or terminate an SSL connection or session based on the status. These features will be described in further detail here and in connection with <figref idref="DRAWINGS">FIGS. 7A and 7B</figref>.</p>
<p id="p-0238" num="0248">In some embodiments, the intermediary <b>200</b> establishes the one or more OCSP responders. In some embodiments, the one or more OCSP responders are established responsive to receiving one or more client certificates. The intermediary <b>200</b> may establish and/or manage the one or more OCSP responders, for example, via a packet engine or SSL engine <b>667</b>. The one or more OCSP responders <b>688</b> may be established at any point of time and/or responsive to any event. For example, the one or more OCSP responders <b>688</b> may be established during or upon initialization of the intermediary <b>200</b>. In another embodiment, the one or more OCSP responders is established in anticipation of one or more OCSP requests, such as responsive to a request to establish an SSL session. Each OCSP responder <b>688</b> may be configured, initialized and/or established by an administrator, a program and/or a script. In some embodiments, an OCSP responder <b>688</b> may be configured with one or both of: a DNS name and an IP address URL. In certain embodiments, the OCSP responder <b>688</b> may be configured as a HTTP or HTTPS service or server. In certain embodiments, the OCSP responder <b>688</b> may be configured as an OCSP service or server.</p>
<p id="p-0239" num="0249">The OCSP responder <b>688</b> may be configured, initialized or established by way of one or more commands entered and/or activated via an interface (e.g., CLI <b>212</b>, GUI <b>210</b>, as described above in connection with <figref idref="DRAWINGS">FIG. 2A</figref>). These commands may be entered or activated dynamically, in batch mode or as part of a program. By way of illustration and not to be construed as limiting in any way, one embodiment of a set of CITRIX NETSCALER commands for configuring OCSP functionality may include:</p>
<p id="p-0240" num="0250">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>{add,set}ocspResponder&#x3c;name&#x3e;-url &#x3c;url&#x3e;[-cache &#x3c;ENABLED/DISABLED&#x3e;[-</entry>
</row>
<row>
<entry>cacheTimeout&#x3c;n&#x3e;]][[-respCert &#x3c;respCertName&#x3e;]/[-trustResponder]] [-signingCert</entry>
</row>
<row>
<entry>&#x3c;signCertName&#x3e;] [-AIA &#x3c;USE/IGNORE/FALLBACK&#x3e;] [-useNonce]</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0251">(To Add, Configure or Set an Ocsp Responder <b>688</b>.)
        <ul id="ul0007" list-style="none">
            <li id="ul0007-0001" num="0252">rm ocspResponder &#x3c;name&#x3e;</li>
        </ul>
        </li>
        <li id="ul0006-0002" num="0253">(To remove or decommission an OCSP responder <b>688</b>. The &#x201c;rm&#x201d; command may not allow removing an OCSP responder <b>688</b> currently bound to a CA certificate. When an OCSP responder <b>688</b> is removed, the cache <b>622</b> may be flushed.)
<br/>
where:
</li>
        <li id="ul0006-0003" num="0254">name: may be used to identify the OCSP responder <b>688</b></li>
        <li id="ul0006-0004" num="0255">cache: may be used to enable or disable caching of OCSP responses</li>
        <li id="ul0006-0005" num="0256">cacheTimeout: may be used determine the number of seconds to cache a response</li>
        <li id="ul0006-0006" num="0257">respCert: may be used to identify the certificate used to sign the OCSP responses. If omitted, the CA bound to the OCSP may be used to verify responses.</li>
        <li id="ul0006-0007" num="0258">trustResponder: If specified, no signature checks may be performed on the response in certain embodiments.</li>
        <li id="ul0006-0008" num="0259">signingCert: may be used as a name of a certificate/key pair for signing the requests. If omitted, the responses may not be signed.</li>
        <li id="ul0006-0009" num="0260">AIA: may define how an embedded OCSP URL present in some client certificates (the Authority Information Access) can be used. This parameter may be optional and can default to USE. Parameter values:
        <ul id="ul0008" list-style="none">
            <li id="ul0008-0001" num="0261">USE: may indicate to use AIA, followed by fallback to the configured responders.</li>
            <li id="ul0008-0002" num="0262">IGNORE: May indicate to use the configured responders and ignore AIA.</li>
            <li id="ul0008-0003" num="0263">FALLBACK: may indicate that if the queries to the configured OCSP responders fail, use the AIA defined responder.</li>
            <li id="ul0008-0004" num="0264">useNonce: Can be optional; may indicate to enable the OCSP nonce extension to prevent replay attacks.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0241" num="0265">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>{add/set} ssl certkey &#x3c;certKey&#x3e; -CA -ocsp &#x3c;ocspResponder&#x3e;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>-priority &#x3c;n&#x3e; ...</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0266">unset ssl certkey &#x3c;certKey&#x3e;-CA-ocsp &#x3c;ocspResponder&#x3e;</li>
        <li id="ul0010-0002" num="0267">(To set or remove the OCSP responder(s) for a given CA certificate. The priority can define the order in which multiple OCSP servers <b>668</b> are queried, e.g., lower numbers queried first.)</li>
        <li id="ul0010-0003" num="0268">bind ssl vserver &#x3c;service/vserver&#x3e; &#x3c;certKey&#x3e;-CA-ocspCheck &#x3c;MANDATORY/OPTIONAL&#x3e;</li>
        <li id="ul0010-0004" num="0269">(To specify whether OCSP validation should be activated when binding a CA certificate to a vserver authenticated transaction. The ocspCheck parameter may overrides the -crlCheck parameter.)</li>
        <li id="ul0010-0005" num="0270">set ssl params-ocspCacheSize &#x3c;size&#x3e;</li>
        <li id="ul0010-0006" num="0271">(To set the per-core maximum cache size for OCSP responses. This may default to a low value, such as 10 megabytes, to prevent a denial of service attack against the intermediary <b>200</b>.)</li>
        <li id="ul0010-0007" num="0272">set ssl params-ocspBatchTime &#x3c;time&#x3e;</li>
        <li id="ul0010-0008" num="0273">(To set the maximum amount of time, in milliseconds, for an OCSP responder to receive OCSP requests. After this timeout, a batched message may be sent to the OCSP server <b>668</b>. In some embodiments, this setting defaults to 0. Using the default, each OCSP request may be sent to the OCSP server without batching.)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0242" num="0274">In some embodiments, a packet engine of the intermediary <b>200</b> provides the functionality to configure, initialize, establish, bind, assign, remove and/or decommission an OCSP responder <b>688</b> and/or an OCSP client in the intermediary <b>200</b>. The packet engine may include one or more features of the packet engines <b>240</b>, <b>548</b> described above in connection with <figref idref="DRAWINGS">FIGS. 2A and 5B</figref>. In some embodiments, a packet engine <b>240</b> establishes, maintains and/or otherwise manages connections and traffic between a client <b>102</b> and the intermediary <b>200</b>, and between the intermediary <b>200</b> and a server <b>106</b>. The packet engine may direct packets or messages from the client <b>102</b> to a particular core <b>661</b>, vserver <b>275</b>, service or OCSP responder <b>688</b> of the intermediary <b>200</b>, e.g., via application of at least one policy by the policy engine <b>236</b>. In some embodiments, a packet engine may be referred to as a packet processing engine.</p>
<p id="p-0243" num="0275">In some embodiments, the packet engine provides at least a portion of the functionality of the SSL engine <b>667</b>. For example and in one embodiment, the packet engine and the SSL engine <b>667</b> are the same entity. In another embodiment, the packet engine includes the SSL engine <b>667</b>. In still another embodiment, the SSL engine <b>667</b> and the packet engine are different components or modules of the intermediary <b>200</b>. In some embodiments, an intermediary <b>200</b> may include a plurality of packet engines and/or SSL engines, e.g., supported by a multi-core system. For example and in one embodiment, each core of the multi-core system may support a packet engine and/or an SSL engine <b>667</b>.</p>
<p id="p-0244" num="0276">The SSL engine <b>667</b> may comprise hardware or any combination of software and hardware. The SSL engine <b>667</b> may include an application, program, library, script, process, task, thread or any type and form of executable instructions that executes on one or more processors or cores of the intermediary <b>200</b>. The packet engine and/or SSL engine <b>667</b> may incorporate any type or form of library code, such as OpenSSL OCSP client and library code, to support OCSP features and functionality. The SSL engine <b>667</b> may be designed, constructed, configured and/or adapted for initializing and establishing SSL connections and sessions between a client <b>102</b> and a intermediary <b>200</b>, between a intermediary <b>200</b> and a server <b>106</b>, and between a client <b>102</b> and a server <b>106</b> via the intermediary <b>200</b>.</p>
<p id="p-0245" num="0277">The SSL engine <b>667</b> may receive, evaluate, authenticate and/or process a connection request from a client <b>102</b>. The SSL engine <b>667</b> may manage any type or form of connection handshake (e.g., SSL handshake) between any client <b>102</b>, server <b>106</b> or intermediary <b>200</b> pairings. One embodiment of process steps for a SSL handshake is depicted in <figref idref="DRAWINGS">FIG. 7C</figref>. This and other embodiments of SSL handshake may be adapted or extended to support additional features such as OCSP certificate validation. In one embodiment, code present in OpenSSL's apps/ocsp.c libraries may be ported to the kernel of the intermediary <b>200</b> to support OCSP functionality. This code may be used to create OCSP requests and/or validate responses to the OCSP requests. In certain embodiments, OCSP awareness may be incorporated to existing SSL state machines via the SSL engine <b>667</b>, e.g., to execute certificate checks as required and to establish or terminate a SSL connection based on the status of a certificate. SSL state machine changes may include but is not limited to the following: Program Communication Block (PCB) suspension, generating and sending OCSP request(s), parsing OCSP response(s), and taking required actions as defined by configuration (e.g., either denying or allowing the establishment of an SSL connection). An entity such as the packet engine or the SSL engine <b>667</b> may facilitate, control, coordinate and/or manage the interoperation of SSL handshake <b>677</b> and OCSP certificate validation.</p>
<p id="p-0246" num="0278">The SSL engine <b>667</b> may communicate with one or more OCSP responders to determine a status of a certificate <b>678</b>. The communication with the one or more OCSP responders may incorporate any type or form of conventional, standard or proprietary message exchange and/or handshaking methods. For example and in one embodiment, the SSL engine <b>667</b> may be associated with a first core of a multi-core system of the intermediary <b>200</b> and the OCSP responder <b>688</b> may be associated with a second core. In this embodiment, core-to-core messaging (CCM) may be utilized for communications between the SSL engine <b>667</b> and the OCSP responder <b>688</b>.</p>
<p id="p-0247" num="0279">In one embodiment, the SSL engine <b>667</b> may extract a client certificate <b>678</b> from an SSL handshaking message and transmit the certificate <b>678</b> to a designated OCSP responder <b>688</b>. In another embodiment, the SSL engine <b>667</b> may forward a message containing the certificate <b>678</b> to the OCSP responder <b>688</b> for validation. In some embodiments, the SSL engine <b>667</b> extract information from the certificate and transmit the information to the OCSP responder <b>688</b> either processed or unprocessed. In some embodiments, the SSL engine <b>667</b> processes the extracted information into a OCSP request for transmission to the OCSP responder <b>688</b>. As described herein, interactions between entities (e.g., the SSL engine <b>667</b> and the OCSP responder <b>688</b>) are sometimes discussed with reference to one of each kind for illustrative purposes. It should be understood that any one of each kind may interact with multiple ones of another kind in certain embodiments of operation.</p>
<p id="p-0248" num="0280">In some embodiments, the SSL engine <b>667</b> identifies one of a plurality of OCSP responders to validate a certificate. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> based on a priority and/or weight assigned to each OCSP responder <b>688</b> of the plurality of OCSP responders. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> based on an order of each OCSP responder <b>688</b> in the plurality of OCSP responders. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> based on application of one or more associated policies. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> based on a certificate authority of the client certificate <b>678</b>. In certain embodiments, the SSL engine <b>667</b> may identify a plurality of OCSP responders to determine a status of a client certificate.</p>
<p id="p-0249" num="0281">The SSL engine <b>667</b> may transmit any type or form OCSP request to the one or more OCSP responders. The SSL engine <b>667</b> may transmit a plurality of OCSP requests corresponding to a plurality of received client certificates. In one embodiment, the SSL engine <b>667</b> transmits one or more OCSP requests as part of a batch request associated with a plurality of client certificates. In another embodiment, the SSL engine <b>667</b> combines or consolidates a plurality of OCSP requests into a single request and transmits the single request to the OCSP responder <b>688</b>. In still another embodiment, the SSL engine <b>667</b> combines a portion of the plurality of OCSP requests into one request. For example and in one embodiment, a portion of the plurality of OCSP requests may be identified based on application of a policy by the policy engine <b>236</b> and combined into one request. In another embodiments, a portion of the plurality of OCSP requests may be identified via the corresponding client certificates based on a common CA of the client certificates <b>678</b>.</p>
<p id="p-0250" num="0282">The SSL engine <b>667</b> may generate and/or transmit any type or form of information in supporting OCSP validation during a SSL handshake <b>677</b>. For example and in one embodiment, the SSL engine <b>667</b> may generate and/or transmit to the client a secret key encrypted with a public key, such as while an OCSP request to the OCSP responder <b>688</b> or server is outstanding. The SSL engine <b>667</b> may generate a random number for a pre-master secret key, for example while an OCSP request to the OCSP responder <b>688</b> or server is outstanding. The SSL engine <b>667</b> may calculate or generate a master secret key, for example while an OCSP request to the OCSP responder <b>688</b> or server is outstanding. The SSL handshake may include any number of process steps that may or may not culminate in establishment of an SSL connection. In some embodiments, the SSL engine <b>667</b> establishes the SSL connection while an OCSP certificate status is pending. In other embodiments, the SSL engine <b>667</b> completes a part of the SSL handshaking and/or connection establishment process while an OCSP certificate status is pending. In certain embodiments, the SSL engine <b>667</b> suspends at least a part of the SSL handshaking and/or connection establishment process while a certificate status is pending.</p>
<p id="p-0251" num="0283">The OCSP responder <b>688</b> may receive any type or form of request or communication from the SSL engine <b>667</b>. The request or communication may include information about one or more of: the client certificate <b>678</b>, an OCSP server or service for determining a status of the certificate, an URL identifying the OCSP server or service, and a digital signature. In some embodiments, the OCSP responder <b>688</b> receives an OCSP request from the SSL engine <b>667</b> in connection with a received certificate. The SSL engine <b>667</b> may generate the OCSP request in conformance with OCSP and/or certain OCSP extensions. In one embodiment, the OCSP request is signed. In certain embodiments, the OCSP request may be optionally signed. In some embodiments, the SSL engine <b>667</b> may conform the OCSP request at least in part with the OCSP protocol. The SSL engine <b>667</b> may generate the OCSP request to incorporate features and/or data formats described by Abstract Syntax Notation One (ASN.1).</p>
<p id="p-0252" num="0284">In some embodiments, the OCSP request may include any one or more of, but not limited to: a version of OCSP supported, a priority of the request, OCSP extensions supported or required, algorithm(s) for an associated signature, algorithms for accessing a status of a certificate, and information about the certificate (e.g., an identifier of the certificate). By way of illustration, <figref idref="DRAWINGS">FIG. 6B</figref> depicts one embodiment of a representation of an OCSP request. By way of illustration and not intended to be limiting in any way, one embodiment of an OCSP request includes the following structure:</p>
<p id="p-0253" num="0285">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="203pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>OCSPRequest</entry>
<entry>::=SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>tbsRequestTBSRequest,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;optionalSignature</entry>
<entry>EXPLICIT Signature may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>TBSRequest ::=SEQUENCE {</entry>
</row>
<row>
<entry>VersionEXPLICIT Version DEFAULT v1,</entry>
</row>
<row>
<entry>&#x2003;requestorNameEXPLICIT GeneralName OPTIONAL,</entry>
</row>
<row>
<entry>&#x2003;requestListSEQUENCE OF Request,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;requestExtensions</entry>
<entry>EXPLICIT Extensions may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="14pt" align="left"/>
<colspec colname="3" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry>Signature</entry>
<entry>::=</entry>
<entry>SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>signatureAlgorithm</entry>
<entry>AlgorithmIdentifier,</entry>
</row>
<row>
<entry>&#x2003;signature</entry>
<entry>&#x2003;BIT STRING,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;certs</entry>
<entry>EXPLICIT SEQUENCE OF</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Certificate may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="84pt" align="left"/>
<colspec colname="4" colwidth="98pt" align="left"/>
<tbody valign="top">
<row>
<entry>Version</entry>
<entry>::=</entry>
<entry>INTEGER</entry>
<entry>{ v1 (0) }</entry>
</row>
<row>
<entry>Request</entry>
<entry>::=</entry>
<entry>SEQUENCE</entry>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="91pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>reqCert</entry>
<entry>CertID,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;singleRequestExtensions</entry>
<entry>EXPLICIT Extensions may be OPTIONAL }</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="21pt" align="left"/>
<colspec colname="3" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>CertID</entry>
<entry>::=</entry>
<entry>SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry>hashAlgorithm</entry>
<entry>AlgorithmIdentifier,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;issuerNameHash</entry>
<entry>OCTET STRING</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="119pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>(Hash of Issuer's DN)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;issuerKeyHash</entry>
<entry>OCTET STRING</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="119pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>(Hash of issuer'spubkey)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;serialNumber</entry>
<entry>CertificateSerialNumber</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="259pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0254" num="0286">The intermediary <b>200</b> may support one or more extensions or features of the OCSP protocol. In some embodiments, the intermediary <b>200</b> may support the Number Used Once (&#x201c;nonce&#x201d;) extension. In some embodiments, the nonce extension helps to prevent replay attacks. The nonce extension may add a cryptographically strong unique number (i.e., nonce) to the message in generating the signature. The nonce can cryptographically bind a request and a response to make replay attacks difficult or impossible. One embodiment of the nonce extension is documented in &#xa7;4.4.1 of [RFC2560]. For example and in one embodiments, the OCSP server <b>668</b> (or responder) may replay the nonce sent in an OCSP request and if the OCSP request and OCSP response nonce do not match, the OCSP response may be rejected.</p>
<p id="p-0255" num="0287">The OCSP request may be transmitted using any standard, custom and/or proprietary protocol. In some embodiments, the OCSP request may be transmitted using Hypertext Transfer Protocol (HTTP). In other embodiments, the OCSP request may be transmitted using HTTPS. In certain embodiments, if the OCSP transaction is small enough (i.e., less than 255 bytes), HTTP GET may be used to submit the OCSP request. Otherwise, HTTP POST may be used to submit the OCSP request. By way of illustration, one embodiment of the HTTP GET syntax may be represented as follows:</p>
<p id="p-0256" num="0288">GET {url}/{url-encoding of base-64 encoding of the DER encoding of the OCSP Request}</p>
<p id="p-0257" num="0289">By way of illustration, one embodiment of an OCSP request using the POST method may be constructed and/or configured as follows: The Content-Type header may have the value &#x201c;application/ocsp-request&#x201d;. The body of the message may include a binary value of the distinguished encoding rules (DER) encoding for the OCSP request. Based on the OCSP request received from the SSL engine <b>667</b>, the OCSP responder <b>688</b> may access one or more caches <b>622</b> to determine a status of the client certificate <b>678</b>.</p>
<p id="p-0258" num="0290">To provide the OCSP service, the intermediary <b>200</b> may support any form or type of data structures for storing and/or looking-up OCSP servers <b>668</b> and certificate information. In some embodiments, the intermediary <b>200</b> is designed and/or configured to provide kernel data structures to store OCSP information such as certificate statuses. The data structures may be implemented in a cache <b>622</b>. In some embodiments, the data structure for storing certificate information may include features and functionality substantially similar to, or the same as data structures for a CRL. OCSP responses from an OCSP server <b>668</b> may be stored or cached in these data structures. These data structures may be available for adding flags and/or fields to SSL vservers <b>275</b> and services in support of new or existing OCSP configuration options. In some embodiments, the OCSP configuration may share existing CRL flags or adapt existing CRL flags for use. In one embodiment, flags relating to authentication requirements may be shared and/or adapted. For example and in one embodiment, a flag that indicates that a CRL check is mandatory may be extended or adapted to mean that an OCSP check is mandatory.</p>
<p id="p-0259" num="0291">In certain embodiments such as embodiments supporting a multi-core system, caching may be based on a distributed hash table. Each packet engine or SSL engine <b>667</b> may make a cache request (e.g., via an OCSP responder <b>688</b>) for a client certificate. If the cache request is unsuccessful, the packet engine, SSL engine <b>667</b> or an OCSP responder <b>688</b> may send a request (e.g. OCSP request) to an OCSP server <b>668</b>. In various embodiments, the OCSP responder <b>688</b>, packet engine or SSL engine <b>667</b> may update the cache <b>622</b> with information received in a response <b>680</b> to the request <b>689</b>.</p>
<p id="p-0260" num="0292">In some embodiments, based on the OCSP request from the SSL engine <b>667</b>, the OCSP responder <b>688</b> may access one or more OCSP servers <b>668</b>, services or other responders (hereafter sometimes generally referred to as &#x201c;OCSP servers&#x201d;) to determine a status of the client certificate <b>678</b>. The OCSP responder <b>688</b> may identify one or more caches <b>622</b> and/or OCSP servers to access based on a configuration of the intermediary, the OCSP responder <b>688</b>, the SSL engine <b>667</b> and/or the packet engine. The intermediary may identify the one or more caches <b>622</b> and/or OCSP servers to access via a cache manager <b>232</b> and/or an OCSP responder <b>688</b>. The intermediary <b>200</b> may identify the one or more caches <b>622</b> and/or OCSP servers to access based on application of a policy by the policy engine <b>236</b>. The intermediary <b>200</b> may identify the one or more caches <b>622</b> and/or OCSP servers to access based on information regarding any one or more of: a client certificate, an associated CA, the client, and the requested SSL connection. The intermediary <b>200</b> may access the one or more caches <b>622</b> prior to accessing the one or more OCSP servers, or vice versa. The OCSP responder <b>688</b> may access one or more caches <b>622</b> and/or OCSP servers <b>668</b> in any order until a certificate status is determined (e.g., a first status is available) or validated (e.g., a status is validated by two or more devices or modules).</p>
<p id="p-0261" num="0293">In certain embodiments, the intermediary <b>200</b> includes a cache manager <b>232</b>. The OCSP responder <b>688</b> may access one or more caches <b>622</b> via the cache manager <b>232</b>. Each of the one or more caches <b>622</b> may store, maintain and/or organize any type or form of data, e.g., certificate revocation statuses and other OCSP or certificate related information. The cache <b>622</b> may incorporate any one or more features of any embodiment of the cache <b>140</b> or storage devices <b>122</b>, <b>128</b>, <b>264</b>, <b>428</b> described above in connection with <figref idref="DRAWINGS">FIGS. 1E</figref>, <b>2</b>A and <b>4</b>A. In some embodiments, the OCSP responder <b>688</b> accesses the one or more caches <b>622</b> directly.</p>
<p id="p-0262" num="0294">The cache manager <b>232</b> may include any type or form of hardware and/or combination of hardware and software. The cache manager <b>232</b> may be designed and constructed to control all manner of read/write access to one or more caches <b>622</b>. The cache manager <b>232</b> may include any feature of any embodiment of the cache manager <b>232</b> described above in connection with <figref idref="DRAWINGS">FIG. 2A</figref>. The cache manager <b>232</b> may include any application, program, library, script, process, task, thread or any type and form of executable instructions that executes on any processor or core of the intermediary <b>200</b>. The cache manager <b>232</b> may be designed and constructed to organize and/or partition a cache <b>622</b> into a plurality of partitions. For example and in one embodiments, the cache manager <b>232</b> may assign a cache <b>622</b> or cache partition to an OCSP responder <b>688</b> or a CA.</p>
<p id="p-0263" num="0295">The cache manager <b>232</b> may manage, organize and/or provide access to data structures containing certificate and OCSP information. The cache manager <b>232</b> may retrieve and/or process information from the cache <b>622</b> or cache partition, e.g., on behalf of the intermediary <b>200</b> or in response to a request from the OCSP responder <b>688</b> or SSL engine <b>667</b>. The cache manager <b>232</b> may determine a status of a certificate and provide the status to the OCSP responder <b>688</b>. In some embodiments, the OCSP responder <b>688</b> identifies a certificate to the cache manager <b>232</b>. Based on the identification, the cache manager <b>232</b> may provide information regarding the identified certificate. For example and in some embodiments, the cache manager <b>232</b> may indicate to the OCSP responder <b>688</b> a location in the cache <b>622</b> to access any required information (e.g., a status of the certificate). In other embodiments, the cache manager <b>232</b> may provide the required information after retrieval from the cache <b>622</b> and/or processing.</p>
<p id="p-0264" num="0296">In some embodiments, the OCSP responder <b>688</b> accesses an OCSP server <b>668</b> by transmitting an request. In some of these embodiments, the request is an OCSP request. In other embodiments, the request may include some or all of the information from the OCSP request described above. In certain embodiments, the OCSP responder <b>688</b> forwards the OCSP request received from the SSL engine <b>667</b> to the OCSP server <b>668</b>. The OCSP responder <b>688</b> may forward the OCSP request unchanged to the OCSP server <b>668</b> or may process the OCSP request before transmitting to the OCSP server <b>668</b>. The processing can include any form or type of processing, such as header change, encryption, compression, encryption, protocol translation and/or address change.</p>
<p id="p-0265" num="0297">The OCSP responder <b>688</b> may identify an OCSP server <b>668</b> via any type or form of identifier or address. The identifier or address may be determined via a configuration of the intermediary, application of a policy, and/or application of an algorithm or function. In one embodiment, the OCSP responder <b>688</b> may identify an OCSP server <b>668</b> via an URL of the OCSP server <b>668</b> (i.e., OCSP service, responder or server). For example and in one embodiment, the URL is configured locally in the intermediary <b>200</b>, and may be retrieved from memory or from storage. In another embodiment, the URL can be extracted or determined from the client certificate <b>678</b> (e.g., from the X509v3 Authority Information Access:OCSP-URI extension field, hereafter generally referred to as &#x201c;AIA&#x201d;). In still another embodiment, the URL can be extracted or determined from the OCSP request received from the SSL engine <b>667</b>. In some embodiments, the URL may be generated or identified based on information regarding any one or more of: a certificate, an associated CA, the client, and the SSL connection request.</p>
<p id="p-0266" num="0298">The OCSP server <b>668</b> can be any type or form of server or computing device, incorporating features of any embodiment of the server <b>106</b> and/or computing device <b>100</b> described above in connection with <figref idref="DRAWINGS">FIGS. 1A-1F</figref> and <b>2</b>B. The OCSP server <b>668</b> may be a HTTP or a HTTPS server. In some embodiments, the OCSP server <b>668</b> comprises one or more OCSP responders <b>688</b>, such as any embodiment of OCSP responders as described above or as described by OCSP standards. The OCSP server <b>668</b> may be identified by any identifier or address. In some embodiments, the OCSP server <b>668</b> is identified by an OCSP URL <b>676</b>, described above. The OCSP server <b>668</b> may provide one or more services, including an OCSP responder service for determining a status of a certificate. In certain embodiments, the OCSP server <b>668</b> is a vserver <b>275</b> executing on the intermediary <b>200</b> or another network device. The vserver <b>275</b> may provide one or more services, including an OCSP responder service. In some embodiments, the OCSP responder service is identified by the OCSP URL <b>676</b> as described above.</p>
<p id="p-0267" num="0299">The OCSP server <b>668</b> may include one or more storage devices and/or caches <b>622</b> to store, organize or maintain certification revocation status and other OCSP or certificate related information. These information may be maintained in any type or form of data structure, lists, hash structure and/or tables. These information may be compressed and/or encrypted. The OCSP server <b>668</b> may include a transceiver to receive communications (e.g., requests <b>689</b>) and transmit communications (e.g., responses <b>680</b>). The OCSP responder service of the OCSP server <b>668</b> may process a received request, for example extracting certificate from the request, identifying one or more certificates to be validated, retrieving information (e.g., a status) about each certificate (e.g., from storage), determining or evaluating a status of each certificate, validating the status with another OCSP responder <b>688</b> and/or a CRL, consolidating one or more statuses into a single status, generating one or more responses to one or more received requests, and combining a plurality of responses into a single response <b>680</b>.</p>
<p id="p-0268" num="0300">In some embodiments, the OCSP server <b>668</b> generates and transmits a response <b>680</b> to the OCSP responder <b>688</b>. The response <b>680</b> can be any type or form of communication using any standard, custom or proprietary communications protocol. In some embodiment, the response <b>680</b> is an OCSP response <b>680</b>. The OCSP response <b>680</b> may be HTTP-based or HTTPS-based. For example and in some embodiments, a HTTP-based OCSP response <b>680</b> can include appropriate HTTP headers. An OCSP response <b>680</b> can include a binary value of the DER encoding of the response <b>680</b> to the request <b>689</b>. The OCSP response <b>680</b> may include a Content-Type header that can have a value of &#x201c;application/ocsp-response&#x201d;. The OCSP response <b>680</b> may include a Content-Length header to convey the length of the response <b>680</b>.</p>
<p id="p-0269" num="0301">In some embodiments, the response <b>680</b> is a return code and includes the status of each certificate <b>678</b> that was queried. The response <b>680</b> may include any type or form of information for determining a status of a certificate. In some embodiments, the response <b>680</b> may indicate that the request <b>689</b> is unauthorized, malformed or defective. In some embodiments, the response <b>680</b> does not provide information regarding a status of a certificate if the request is unauthorized, malformed or defective. In other embodiments, the response <b>680</b> may include information regarding the status of a certificate even if the request is unauthorized, malformed or defective. The response <b>680</b> may include one or more of, but not limited to: an algorithm for a signature, a timestamp or identifier of the creation of the response <b>680</b>, certificate information, a version of the OCSP, supported or required OCSP extensions, and an identity of the OCSP server <b>668</b> or responder. The response <b>680</b> may include a status of a certificate indicating that the certificate is good, revoked, unknown, or otherwise. In some embodiments, the response <b>680</b> includes information about the time of revocation or expiration of the certificate.</p>
<p id="p-0270" num="0302">By way of illustration, <figref idref="DRAWINGS">FIG. 6C</figref> depicts one embodiment of an OCSP response. By way of illustration and not intended to be limiting in any way, one embodiment of a basic response type Protocol Data Unit (PDU) and/or structure for an OCSP response is as follows:</p>
<p id="p-0271" num="0303">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>OCSPResponse ::= SEQUENCE {</entry>
</row>
<row>
<entry>responseStatus OCSPResponseStatus,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="77pt" align="left"/>
<tbody valign="top">
<row>
<entry>responseBytes</entry>
<entry>&#x2003;EXPLICIT ResponseBytes</entry>
<entry>may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>OCSPResponseStatus ::= ENUMERATED {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="112pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;successful</entry>
<entry>(0),</entry>
</row>
<row>
<entry>&#x2003;malformedRequest</entry>
<entry>(1),</entry>
</row>
<row>
<entry>&#x2003;internalError</entry>
<entry>(2),</entry>
</row>
<row>
<entry>&#x2003;tryLater</entry>
<entry>(3),</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>--(4) may not be used</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>sigRequired</entry>
<entry>&#x2003;(5),</entry>
</row>
<row>
<entry>unauthorized</entry>
<entry>&#x2003;(6)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="252pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="112pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>ResponseBytes ::=</entry>
<entry>&#x2003;SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>responseType</entry>
<entry>&#x2003;OBJECT IDENTIFIER,</entry>
</row>
<row>
<entry/>
<entry>response</entry>
<entry>&#x2003;OCTET STRING }</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="252pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>For a basic OCSP responder, responseType will be id-pkix-ocsp-basic.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="112pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>id-pkix-ocsp</entry>
<entry>OBJECT IDENTIFIER ::= { id-ad-ocsp }</entry>
</row>
<row>
<entry/>
<entry>id-pkix-ocsp-basic</entry>
<entry>OBJECT IDENTIFIER ::= { id-pkix-ocsp 1 }</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>BasicOCSPResponse&#x2003;::= SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>tbsResponseData</entry>
<entry>ResponseData,</entry>
</row>
<row>
<entry>&#x2003;signatureAlgorithm</entry>
<entry>&#x2003;AlgorithmIdentifier,</entry>
</row>
<row>
<entry>&#x2003;signature</entry>
<entry>&#x2003;BIT STRING,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;certs</entry>
<entry>EXPLICIT SEQUENCE OF Certificate may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>ResponseData ::= SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>Version</entry>
<entry>EXPLICIT Version</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;DEFAULT v1,</entry>
</row>
<row>
<entry>&#x2003;responderID</entry>
<entry>ResponderID,</entry>
</row>
<row>
<entry>&#x2003;producedAt</entry>
<entry>GeneralizedTime,</entry>
</row>
<row>
<entry>&#x2003;responses</entry>
<entry>SEQUENCE OF</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;SingleResponse,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;responseExtensions</entry>
<entry>&#x2003;EXPLICIT Extensions</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="112pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>ResponderID ::= CHOICE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;byName</entry>
<entry>&#x2003;Name,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="112pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;byKey</entry>
<entry>KeyHash</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="210pt" align="left"/>
<tbody valign="top">
<row>
<entry>KeyHash ::=</entry>
<entry>OCTET STRING (SHA-1 hash of</entry>
</row>
<row>
<entry/>
<entry>responder's public key)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>SingleResponse ::= SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry>certID</entry>
<entry>&#x2003;CertID,</entry>
</row>
<row>
<entry>certStatus</entry>
<entry>&#x2003;CertStatus,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;thisUpdate</entry>
<entry>GeneralizedTime,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<colspec colname="3" colwidth="77pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;nextUpdate</entry>
<entry>EXPLICIT GeneralizedTime</entry>
<entry>may be OPTIONAL,</entry>
</row>
<row>
<entry>&#x2003;singleExtensions</entry>
<entry>EXPLICIT Extensions</entry>
<entry>may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>CertStatus ::= CHOICE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="56pt" align="left"/>
<colspec colname="2" colwidth="210pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;good</entry>
<entry>&#x2003;IMPLICIT NULL,</entry>
</row>
<row>
<entry>revoked</entry>
<entry>IMPLICIT RevokedInfo,</entry>
</row>
<row>
<entry>&#x2003;unknown</entry>
<entry>&#x2003;IMPLICIT UnknownInfo }</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>RevokedInfo ::= SEQUENCE {</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry>revocationTime</entry>
<entry>&#x2003;GeneralizedTime,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="98pt" align="left"/>
<colspec colname="2" colwidth="91pt" align="left"/>
<colspec colname="3" colwidth="77pt" align="left"/>
<tbody valign="top">
<row>
<entry>&#x2003;revocationReason</entry>
<entry>&#x2003;EXPLICIT CRLReason</entry>
<entry>may be OPTIONAL</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry>UnknownInfo ::= NULL</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0272" num="0304">In some embodiments, the OCSP response must be signed. In other embodiments, the OCSP response may be optionally signed. In certain embodiments, the intermediary <b>200</b> may support the &#x201c;Authorized Responders&#x201d; extension. Some embodiments of the &#x201c;Authorized Responders&#x201d; extension are described in &#xa7;4.2.2.2 of [RFC2560]. This extension may provide verification that the signing certificate for the OCSP response has the id-kp-OCSPSigningrole in extendedKeyUsage. This extension may apply where the signer of the request may not be the original issuer of the client certificate <b>678</b>. Support for the construction and/or parsing of OCSP request and response data structures may be handled or supported by code described by OpenSSL OCSP/ASN.1. In some embodiments, this code may prevent other methods or programs from directly parsing these structures, e.g., for security reasons.</p>
<p id="p-0273" num="0305">The OCSP responder <b>688</b> may receive the response <b>680</b> in response to the request <b>689</b>. In some embodiments, the OCSP responder <b>688</b> forwards the response <b>680</b> to the SSL engine <b>667</b>. In other embodiments, the OCSP responder <b>688</b> processes the response <b>680</b> and sends a second response to the SSL engine <b>667</b>. In certain embodiments, the response transmitted to the SSL engine <b>667</b> may be in the form of an OCSP response. In one embodiment, the OCSP responder <b>688</b> may process and consolidate a plurality of responses <b>680</b> into a single response for transmission to the SSL engine <b>667</b>. The certificate statuses corresponding to a plurality of responses <b>680</b> may be combined or evaluated into a single status included in the single response. The OCSP responder <b>688</b> may consolidate the responses and/or statuses based on one or more of: an algorithm specified in the configuration of the OCSP responder <b>688</b> and application of one or more policies. A plurality of OCSP responders <b>688</b> may each transmit one or more responses to the SSL engine <b>667</b>.</p>
<p id="p-0274" num="0306">The SSL engine <b>667</b> may be designed and constructed to process responses from one or more OCSP responders <b>688</b>. The SSL engine <b>667</b> may determine or extract a status of a certificate from one or more of the responses. In some embodiments, the SSL engine <b>667</b> may combine or evaluate statuses from a plurality of responses into a single status for a certificate. The SSL engine <b>667</b> may combine or evaluate the statuses into the single status based on one or more of: a weight assigned to each OCSP responder <b>688</b> of the plurality of OCSP responders, application of a policy to the statuses, a configuration (e.g., of the SSL engine <b>667</b>), application of a function or algorithm to the statuses, and a priority assigned to the plurality of responses and/or statuses. The SSL engine <b>667</b> may determine that a status of the received certificate is one of: good, revoked, unknown or otherwise. In some embodiments, the status may be unknown because an associated request is unauthorized, malformed or defective.</p>
<p id="p-0275" num="0307">In some embodiments, the SSL engine <b>667</b> is designed and constructed to establish SSL connections. The SSL engine <b>667</b> may establish an SSL connection in response to a receipt or determination of the status of the client certificate <b>678</b>. In some embodiments, as described above, the SSL engine <b>667</b> establishes an SSL connection while certificate validation is pending. In other embodiments, the SSL engine <b>667</b> may suspend establishment of an SSL connection while certificate validation is pending. In certain embodiments, the SSL engine <b>667</b> may disestablish the SSL connection if the certificate status is determined to be revoked, unknown and/or expired. The SSL engine <b>667</b> may disestablish the SSL connection if the request to the OCSP responder <b>688</b> and/or OCSP server <b>668</b> is unauthorized. In some embodiments, the SSL engine <b>667</b> may establish or maintain an SSL connection if the certificate revocation status is valid (i.e., unexpired) and good (i.e., not revoked). In some embodiments, the SSL engine <b>667</b> may not establish or maintain an SSL connection if the certificate revocation status is invalid (i.e., expired or unknown) and/or revoked.</p>
<p id="p-0276" num="0308">Referring now to <figref idref="DRAWINGS">FIG. 7A</figref>, a flow diagram depicting an embodiment of steps of a method <b>700</b> for batching OCSP requests and caching responses to the OCSP requests is shown. In brief overview, at step <b>701</b>, an intermediary device <b>200</b> receives a client certificate <b>678</b> (referred to for convenience as a first client certificate) during a first SSL Handshake <b>677</b> with a first client and another client certificate <b>678</b> (referred to for convenience as a second client certificate) during a second SSL handshake <b>677</b> with a second client. Each of the first client certificate <b>678</b> and the second client certificate <b>678</b> may correspond to a certificate authority. At step <b>703</b>, the intermediary device <b>200</b> identifies that a status of the first client certificate <b>678</b> and a status of the second client certificate <b>678</b> is not in a cache <b>622</b> of the intermediary device <b>200</b>. At step <b>705</b>, the intermediary device <b>200</b> identifies one of a plurality of OCSP responders of the intermediary device <b>200</b> corresponding to the certificate authority. At step <b>707</b>, the OCSP responder <b>688</b> transmits a single request to an OCSP server <b>668</b> to determine the status of each of the first client certificate <b>678</b> and the second client certificate <b>678</b>. At step <b>709</b>, the intermediary device <b>200</b> continues to perform remaining portions of the SSL handshakes <b>677</b> while the OCSP request to the OCSP server <b>668</b> is outstanding. At step <b>711</b>, the intermediary device <b>200</b> determines from a single response <b>680</b> received from the OCSP server <b>668</b>, whether to establish a first SSL connection with the first client based on the status of the first client certificate <b>678</b> and a second SSL connection with the second client based on the status of the second client certificate <b>678</b>. At step <b>713</b>, the intermediary device <b>200</b> stores to the cache <b>622</b> a first cache entry identifying the status of the first client certificate <b>678</b> and a second cache entry identifying the status of second client certificate <b>678</b>. Each of the first cache entry and the second cache entry may be stored in association with the OCSP responder <b>688</b> and with a cache expiry identified by the OCSP responder <b>688</b>. At step <b>715</b>, the intermediary device <b>200</b> receives the first client certificate <b>678</b> from the first client during a third SSL handshake. At step <b>717</b>, the intermediary <b>200</b> determines whether to establish a third SSL connection with the first client based on the status of the first client certificate <b>678</b> identified via the cache <b>622</b>.</p>
<p id="p-0277" num="0309">In some embodiments, a client <b>102</b> may request access to a resource such as a file or service, or request a connection to a server via the intermediary <b>200</b>. The request may initiate a connection handshake (e.g., SSL handshake <b>677</b>) between the client and the intermediary <b>200</b>. For example, the request may be via HTTPS. As shown in <figref idref="DRAWINGS">FIG. 7C</figref>, one embodiment of a SSL handshake process includes a plurality of steps, including various exchanges between the client and the intermediary. A certificate authority (CA) may issue a client certificate <b>678</b> for the client <b>102</b> prior to or during the handshake for validating the connection request or process. The intermediary <b>200</b> can handle one or more SSL handshakes in connection with one or more client requests.</p>
<p id="p-0278" num="0310">In further details of step <b>701</b>, an intermediary device <b>200</b> receives a first client certificate <b>678</b><i>a </i>during a first SSL handshake <b>677</b><i>a </i>with a first client and a second client certificate <b>678</b><i>b </i>during a second SSL handshake <b>677</b><i>b </i>with a second client. Each of the first client certificate <b>678</b><i>a </i>and the second client certificate <b>678</b><i>b </i>may correspond to a CA. The SSL engine <b>667</b> of the intermediary <b>200</b> may determine that the first and second certificates <b>678</b> corresponds to a common CA. In some embodiments, each of the first and second client certificates <b>678</b> may correspond to a different CA. The intermediary device <b>200</b> may receive one or both of the first client certificate <b>678</b><i>a </i>or the second client certificate <b>678</b><i>b </i>each including an identifier of the corresponding CA. In some embodiments, both the first and second client certificates <b>678</b> include an identifier of the same CA.</p>
<p id="p-0279" num="0311">The intermediary <b>200</b> may receive the first client certificate <b>678</b><i>a </i>at substantially the same time as the second client certificate <b>678</b><i>b</i>. The intermediary <b>200</b> may receive the first and second client certificates <b>678</b> within a predefined time interval. In some embodiments, the intermediary <b>200</b> receiving a first client certificate <b>678</b><i>a </i>may wait to receive a predetermined number of other client certificates, such as a second client certificate <b>678</b><i>b</i>, for example, that is issued by the same CA. In some embodiments, the intermediary may identify a predetermined number of certificates within a predetermined time period. In some embodiments, the intermediary may identify a predetermined number of certificates within a predetermined time period for one or more CAs. In some embodiments, the intermediary may form a set, group or batch from any of these received certificates, such as those certificates received within a predetermined time period and/or reached a predetermined number of certificates. The intermediary may batch any one or more certificates and/or request for the same based on any criteria, including common CA, temporal information, client information, server information or network information.</p>
<p id="p-0280" num="0312">In further details of step <b>703</b>, the intermediary device <b>200</b> identifies that a status of a received client certificate or batch of certificates, such as first client certificate and the second client certificate, is not in a cache <b>622</b> of the intermediary device. The SSL engine <b>667</b> may be in communication with the cache manager <b>232</b> to determine or access a status of the client certificate, such as the first and/or second client certificate <b>678</b> from the cache <b>622</b>. The SSL engine <b>667</b> may identify the cache manager <b>232</b> from a plurality of cache managers in the intermediary <b>200</b>, e.g., via application of one of a plurality of policies. The cache manager <b>232</b> may determine or access a status of the client certificate, such as the first and/or second client certificate <b>678</b><i>m </i>on behalf of the SSL engine <b>667</b>. In some embodiments, the SSL engine <b>667</b> communicates information about the client certificate(s) to the cache manager <b>232</b> to identify a status of the certificates.</p>
<p id="p-0281" num="0313">In some embodiments, the SSL engine <b>667</b> communicates to the cache manager <b>232</b> via an OCSP responder <b>688</b>. The SSL engine <b>667</b> may send a request, such as an OCSP request, to the OCSP responder <b>688</b> as described above in connection with <figref idref="DRAWINGS">FIG. 6A</figref>. The OCSP responder <b>688</b> may control, direct, request or otherwise communicate with the cache manager <b>232</b> to determine a status of the certificate or batch of certificates, such as the first and/or second certificates. The cache manager <b>232</b> may identify or indicate to the SSL engine <b>667</b> or OCSP responder <b>688</b> a cache entry, location or partition of the cache <b>622</b> to access a status of the certificate, such as the first and/or second certificate. The cache manager <b>232</b> may identify or access a CRL or other data structure having features of a CRL in the cache <b>622</b>. The cache manager <b>232</b> may retrieve or determine a status of the certificate, such as the first and/or second certificate. The cache manager <b>232</b> may determine that a status of a certificate is unknown or unavailable (e.g., because the cache <b>622</b> is not accessible or a cache entry for storing the status cannot be identified). The cache manager <b>232</b> may determine that a status of the certificate is not up-to-date. In some embodiments, &#x201c;not up-to-date&#x201d; indicates that the status is unknown or may have changed, e.g., because the status has not been updated within a certain amount of time. The cache manager <b>232</b> may determine that a cache entry for the status of the certificate has expired. In some embodiments, expiration may indicate that the certificate has expired and is no longer valid.</p>
<p id="p-0282" num="0314">In some embodiments, if the cache manager <b>232</b> determines that the status of a batch or set of one or more certificates, such as both the first and second certificates, are unknown, unavailable or not up-to-date. In some of these embodiments, the method may proceed to step <b>705</b>. In another embodiment, if the cache manager <b>232</b> determines that both the status of the first and second certificates has expired, the method may proceed to step <b>705</b>. In still another embodiment, if the cache manager <b>232</b> determines that at least one of the status of the first and second certificates is unknown, unavailable or not up-to-date, the method may proceed to step <b>705</b>. In yet another embodiment, if the cache manager <b>232</b> determines that at least one of the status of the first and second certificates has expired, the method may proceed to step <b>705</b>.</p>
<p id="p-0283" num="0315">In certain embodiments, if any one of the status is identified as good and has not expired, the SSL engine <b>667</b> may complete the SSL handshake <b>677</b> of the corresponding certificate. The SSL engine <b>667</b> may also proceed to establish a SSL connection corresponding to the good certificate(s). In some embodiments, if any one of the status is identified as revoked, the SSL engine <b>667</b> may terminate the corresponding SSL handshake <b>677</b>. In these embodiments, the SSL engine <b>667</b> may deny establishment of a SSL connection corresponding to the revoked certificate(s). In some embodiments, if one of the status is identified as expired, the SSL engine <b>667</b> may terminate the corresponding SSL handshake <b>677</b>. In these embodiments, the SSL engine <b>667</b> may deny establishment of a SSL connection corresponding to the expired certificate(s). In certain embodiments, the SSL engine <b>667</b> may additionally attempt to access a CRL and/or an OCSP server <b>668</b> to validate the status of a certificate.</p>
<p id="p-0284" num="0316">In further details of step <b>705</b>, the intermediary device identifies one of a plurality of OCSP responders of the intermediary device corresponding to the certificate authority. The SSL engine <b>667</b> may identify an OCSP responder <b>688</b> from a plurality of OCSP responders. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> from a plurality of OCSP responders based on the certificate authority of one or both certificates received. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> responsive to determining that a status of one or both of the client certificates <b>688</b> is not in the cache <b>622</b>. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> responsive to determining that a status of one or both of the client certificates is not determinable from the cache <b>622</b>. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> responsive to determining that the cache <b>622</b> is not accessible to at least one of: the cache manager <b>232</b> and the SSL engine <b>667</b>.</p>
<p id="p-0285" num="0317">The intermediary <b>200</b>, such as via the SSL engine <b>667</b>, may identify the OCSP responder <b>688</b> from a plurality of OCSP responders responsive to determining that the status of a batch of certificates, such as each of the first and second certificates are one of: unknown, not available, or not up-to-date. The SSL engine <b>667</b> may identify the OCSP responder <b>688</b> by one or more of: application of one of a plurality of policies (e.g., by a policy engine <b>236</b>), accessing a configuration (e.g., that associates an OCSP responder <b>688</b> to a CA of a certificate), executing an algorithm, applying a function on the plurality of OCSP responders.</p>
<p id="p-0286" num="0318">In some embodiments, the intermediary <b>200</b> establishes an OCSP responder <b>688</b>. The OCSP responder <b>688</b> may be established or executed via the SSL engine <b>667</b> or packet engine. The intermediary <b>200</b> may establish the OCSP responder <b>688</b> based on a determination that a received certificate is issued by a new CA or a CA not associated with other OCSP responders of the intermediary <b>200</b>. The intermediary <b>200</b> may establish the OCSP responder <b>688</b> responsive to receiving information about or from the CA. The intermediary <b>200</b> may establish the OCSP responder <b>688</b> responsive to an inability to determine a status of a received certificate from the cache <b>622</b>. The intermediary <b>200</b> may establish a plurality of OCSP responders, e.g., responsive to receiving one or more client certificates and/or information about one or more CAs. Each OCSP responder <b>688</b> may be established and/or configured using any embodiment of the commands described above in connection with <figref idref="DRAWINGS">FIG. 6A</figref>. The intermediary <b>200</b> may identify a newly established OCSP responder <b>688</b> as the OCSP responder <b>688</b> for certificate validation. In some embodiments, instead of establishing a new OCSP responder <b>688</b>, an existing OCSP responder <b>688</b> may be reconfigured to perform certificate validation for the received certificate.</p>
<p id="p-0287" num="0319">In further details of step <b>707</b>, the OCSP responder <b>688</b> transmits a single request to an OCSP server <b>668</b> to determine the status of a certificate, such one of the first client certificate and the second client certificate. The OCSP responder <b>688</b> may transmit a single request to an OCSP server <b>668</b> to determine the status of a batch of certificates, such as both of the first client certificate and the second client certificate. The OCSP responder <b>688</b> may transmit a request to the OCSP server <b>668</b> in association with one or more certificates. The OCSP responder <b>688</b> may transmit a request to the OCSP server <b>668</b> in connection with one or more certificates issued by the same CA. The OCSP responder <b>688</b> may transmit the request to the OCSP server <b>668</b> as an OCSP request. The OCSP responder <b>688</b> may transmit a request identifying one or more client certificates <b>688</b>. In some embodiments, the OCSP responder <b>688</b> may transmit a request for each client certificate <b>678</b>. The OCSP responder <b>688</b> may transmit a single request for certificates issued by one or more CAs to a single OCSP server <b>668</b> assigned to or associated with the one or more CAs. In certain embodiments, the OCSP responder <b>688</b> may transmit a request to an OCSP service provided by any one of: a OCSP server <b>668</b>, the intermediary <b>200</b> or any other network device.</p>
<p id="p-0288" num="0320">The OCSP responder <b>688</b> may identify the OCSP server <b>668</b> or service by an URL <b>676</b>. The OCSP responder <b>688</b> may identify the OCSP server <b>668</b> or service by a host name and/or IP address. The OCSP responder <b>688</b> may identify the OCSP server <b>668</b> or service by a host name and/or IP address with a port number. The OCSP may identify the OCSP server <b>668</b>, service and/or URL <b>676</b> via one or more of: a configuration of the OCSP responder <b>688</b>, application of a policy by the policy engine <b>236</b>, application of a function or an algorithm, and retrieval of the identification via a hash table or other data structure (e.g., from the cache <b>622</b>). In some embodiments, the OCSP responder <b>688</b> transmits a request to a CRL service or accesses a CRL to determine the status of a client certificate <b>678</b>. In certain embodiments, the OCSP responder <b>688</b> performs a combination of any one or more of the following to determine the status of two or more client certificate <b>678</b><i>s</i>: accessing the cache <b>622</b>, accessing a CRL, and sending a request to an OCSP server <b>668</b>, responder or service.</p>
<p id="p-0289" num="0321">The OCSP responder <b>688</b> may generate a request for one or more certificates. The OCSP responder <b>688</b> may consolidate or batch one or more requests corresponding to one or more certificates into a single request. The OCSP responder <b>688</b> may transmit the single request as a batch request in connection with one or more certificates. The intermediary device <b>200</b> or the OCSP responder <b>688</b> may transmit each OCSP request as part of a batch OCSP request to the OCSP server <b>668</b> for statuses of a plurality of client certificates. The OCSP responder <b>688</b> may consolidate or batch one or more requests corresponding to a common CA. The OCSP responder <b>688</b> may consolidate or batch one or more requests for certificates received at substantially the time. The OCSP responder <b>688</b> may consolidate or batch one or more requests for certificates received within a predetermined or dynamically determined period of time.</p>
<p id="p-0290" num="0322">The intermediary device <b>200</b> or OCSP responder <b>688</b> may wait a predetermined time period for receipt of additional client certificates before transmitting the single request. In some embodiments, the OCSP responder <b>688</b> may wait a predetermined time period for receipt of additional client certificates corresponding to the certificate authority before transmitting the single request <b>689</b>. For example and in one embodiment, the intermediary device <b>200</b> receives a third client certificate <b>678</b><i>c </i>before expiration of the predetermined time period. The intermediary <b>200</b> may include in the single request <b>689</b> to the OCSP server <b>668</b> a request for the status of the third client certificate <b>678</b><i>c</i>. In some embodiments, the OCSP responder <b>688</b> may wait for receipt of a plurality of client certificates before transmitting the single request <b>689</b>. For example and in one embodiment, the OCSP responder <b>688</b> may wait for a specific number of certificates before sending the request <b>689</b>. In another embodiment, the OCSP responder <b>688</b> may wait for at least a certain number of certificates to be reached before sending the request <b>689</b>.</p>
<p id="p-0291" num="0323">In further details of step <b>709</b>, the intermediary device continues to perform remaining portions of the SSL handshakes while the OCSP request to the OCSP server <b>668</b> is outstanding. In some embodiments, the intermediary <b>200</b> may operate in a non-blocking mode. In non-blocking mode, the SSL engine <b>667</b> of the intermediary <b>200</b> may continue to perform remaining portions of the SSL handshakes while the request to the OCSP server <b>668</b> for certificate revocation status is outstanding or pending. The intermediary <b>200</b> may continue to perform remaining portions of the SSL handshakes while the certificate revocation status is outstanding or pending. In one embodiment, the SSL engine <b>667</b> may establish a SSL connection while the certificate status or the OCSP request (hereafter generally referred to as &#x201c;OCSP request&#x201d;) is outstanding. In some embodiments, the SSL engine <b>667</b> determines whether to terminate or maintain the SSL connection based on the status of the client certificate <b>678</b> received via the response. For example and in one embodiment, the SSL engine <b>667</b> determines in response to a request from the client via the established SSL connection whether to terminate or maintain the SSL connection based on the status of the client certificate <b>678</b> received via the response.</p>
<p id="p-0292" num="0324">The intermediary <b>200</b> may continue to perform a portion of the SSL handshakes while the OCSP request is outstanding or pending. For example and in some embodiments, the intermediary <b>200</b> may transmit to the client a secret key encrypted with a public key while the OCSP request or the certificate status is outstanding. The intermediary <b>200</b> or the client <b>102</b> may generate a random number for a pre-master secret key while the OCSP request to the OCSP server <b>668</b> is outstanding. The intermediary <b>200</b> or the client <b>102</b> may calculate or determine a master secret key while the OCSP request to the OCSP server <b>668</b> is outstanding.</p>
<p id="p-0293" num="0325">In some embodiments, the intermediary <b>200</b> may operate in a blocking mode. In blocking mode, the SSL engine <b>667</b> of the intermediary <b>200</b> may suspend one or more SSL handshake steps while the OCSP request to the OCSP server <b>668</b> for certificate revocation status is outstanding or pending. In one embodiment, the SSL engine <b>667</b> may complete the SSL handshake <b>677</b> but may not establish a SSL connection while the OCSP request to the OCSP server <b>668</b> is outstanding. The intermediary <b>200</b> may suspend some portions of a first handshake while continuing to perform remaining portions of a second handshake while the OCSP request or the certificate status is outstanding. The intermediary <b>200</b> may suspend a portion of the SSL handshakes while the certificate revocation status is outstanding or pending.</p>
<p id="p-0294" num="0326">In some embodiments, the intermediary <b>200</b> establishes an SSL connection responsive to receipt of a status of a corresponding client certificate <b>678</b> from the OCSP server <b>668</b>. The intermediary <b>200</b> or SSL engine <b>667</b> may establish an SSL connection responsive to receipt of a status that is good (i.e., neither revoked nor expired). The intermediary <b>200</b> may determine to terminate an established SSL connection based on the status of a corresponding client certificate <b>678</b> corresponding to one of revoked, unknown and/or expired. In some embodiments, the SSL engine <b>667</b> may attempt to re-validate the client certificate <b>678</b>. For example and in one embodiment, the OCSP responder <b>688</b> or SSL engine <b>667</b> may receive a response indicating that the OCSP request is malformed or defective. In another embodiment, the OCSP responder <b>688</b> or SSL engine <b>667</b> may determine that the OCSP server <b>668</b> or service is not responsive. The OCSP responder <b>688</b> may send another (e.g., a second) request to at least one of: the same OCSP server <b>668</b> or service, a second OCSP server <b>668</b> or service, a CRL server, and a cache manager <b>232</b>.</p>
<p id="p-0295" num="0327">In further details of step <b>711</b>, the intermediary <b>200</b> device determines from a single response received from the OCSP server <b>668</b>, whether to establish a first SSL connection with the first client based on the status of the first client certificate <b>678</b> and a second SSL connection with the second client based on the status of the second client certificate <b>678</b><i>b</i>. In certain embodiments, step <b>711</b> operates in accordance with some embodiments of the blocking mode described above. In certain embodiments, the OCSP responder <b>688</b> receives the response as an OCSP response. The OCSP responder <b>688</b> may receive a single response <b>680</b> responsive to the single request <b>689</b>. The OCSP responder <b>688</b> may receive a plurality of responses <b>680</b><i>a</i>-<i>n </i>responsive to the single request <b>689</b>. The OCSP responder <b>688</b> may receive a plurality of responses responsive to a plurality of requests transmitted. In some embodiment, the OCSP responder <b>688</b> receives a single response <b>680</b> that includes the status of one or more certificates (e.g., the first and the second certificates). The OCSP responder <b>688</b> may receive a single response <b>680</b> that includes the status of one or more certificates issued by the same CA. The one or more responses may be generated and/or transmitted by one or more of: an OCSP server <b>668</b>, responder or service, a CRL server, and a cache manager <b>232</b>.</p>
<p id="p-0296" num="0328">In some embodiments, the OCSP responder <b>688</b> may receive a response <b>680</b> indicating that the request is malformed or defective. The OCSP responder <b>688</b> may receive a response <b>680</b> requesting for one or more of: more information about the client certificates, a resend of the one or more requests, a resend of a portion of the requests (e.g., batched into a second single response <b>689</b> or individually), and a resent of a request in a specific format (e.g., in OCSP format).</p>
<p id="p-0297" num="0329">The OCSP responder <b>688</b> may parse, extract, evaluate, determine or otherwise process the one or more received responses <b>680</b> for certification revocation status and/or other information. The OCSP responder <b>688</b> may receive a response <b>680</b> including statuses of at least a portion of the certificates. The OCSP responder <b>688</b> may receive a response <b>680</b> including an indication that a status of at least one of the certificates is good, revoked, unknown, unidentified, expired, out-of-date, and/or unavailable. The SSL engine <b>667</b> may end the suspension of SSL handshakes for corresponding client certificates that have a good and unexpired status. The SSL engine <b>667</b> may continue with remaining portions of SSL handshakes <b>677</b> for corresponding client certificates having a good status. In some embodiments, the SSL engine <b>667</b> may establish SSL connections with those clients having client certificates with a good and unexpired status. The SSL engine <b>667</b> may not establish SSL connections with those clients having client certificates not having a good status. In some embodiments, such as in non-blocking mode, the SSL engine <b>667</b> may determine to maintain established SSL connections for corresponding client certificates determined to have a good and unexpired status.</p>
<p id="p-0298" num="0330">If a status of any of the certificates is determined to be one or more of: revoked, unknown, unidentified, expired, out-of-date, and/or unavailable, the SSL engine <b>667</b> may do one or more of: suspend the corresponding SSL handshake <b>677</b> (e.g., at the time of the determination and/or request the status from another entity), continue the SSL handshake <b>677</b> (e.g., while requesting the status from another entity), terminate the corresponding SSL handshake <b>677</b>, determine not to establish a SSL connection corresponding to the certificate, and determine to disestablish or not to maintain an established SSL connection corresponding to the certificate. If any of the SSL connections is denied or disestablished, the intermediary <b>200</b> may indicate to the client a rejection of the client request for the connection and/or request for a new certificate.</p>
<p id="p-0299" num="0331">In some embodiments, the intermediary <b>200</b> may identify an SSL connection or session previously established for the first client. Based on the status (e.g., good and not expired) of the first certificate, the intermediary <b>200</b> may update, re-establish, re-use or resume the identified SSL connection or session for the first client. For example and in one embodiment, the intermediary <b>200</b> may update, re-establish, re-use or resume the identified SSL connection or session for the first client via the third SSL handshake <b>677</b>.</p>
<p id="p-0300" num="0332">In further details of step <b>713</b>, the intermediary device stores to the cache <b>622</b> a first cache entry identifying the status of the first client certificate <b>678</b><i>a </i>and a second cache entry identifying the status of second client certificate <b>678</b><i>b</i>. Each of the first cache entry and the second cache entry may be stored in association with the OCSP responder <b>688</b> and with a cache expiry identified by the OCSP responder <b>688</b>. The intermediary <b>200</b> may store, via one or more of the OCSP responder <b>688</b> and the cache manager <b>232</b>, a received or determined certificate status. The cache manager <b>232</b> may receive the status from the OCSP responder <b>688</b>. The cache manager <b>232</b> may store the status in the cache <b>622</b> for local retrieval. The cache manager <b>232</b> may store or organize the status in the cache <b>622</b> for quick retrieval. The cache manager <b>232</b> may identify, locate or create a cache entry to store the status. The cache manager <b>232</b> may use a hash (such as a fast hash, e.g., ns_hashmd5 function) to calculate a hash key for storing the status. The cache manager <b>232</b> may use the first and last 32 bits of the issuer and subject to calculate the hash key.</p>
<p id="p-0301" num="0333">The status may be stored if the status is valid (e.g., not expired nor unknown). In some embodiments, the cache manager <b>232</b> may indicate in the cache entry that a status is unknown and/or expired. In certain embodiments, the cache manager <b>232</b> may store any type or form of information to a cache entry corresponding to a client certificate <b>678</b>. For example and in one embodiment, the cache manager <b>232</b> may store an identifier (e.g., URL) of an entity (e.g., OCSP server <b>668</b>, CRL) providing the certificate status, and/or an expiry time for the stored information.</p>
<p id="p-0302" num="0334">The cache manager <b>232</b> may store the status in a CRL, hash table or other data structure in the cache <b>622</b>. The intermediary device may generate (e.g., via the cache manager <b>232</b>) a hash or other data structure for each cache entry storing a status. The cache manager <b>232</b> may generate a hash or other data structure for one of a first cache entry corresponding to the first certificate or a second cache entry corresponding to the second certificate. The cache manager <b>232</b> may generate each hash or other data structure based on one or more of: a certificate, a certificate status, an issuer name, a subject name, the entity providing the status, the corresponding client and the response <b>680</b>. The cache manager <b>232</b> may store the one of the first cache entry or the second cache entry of responses to the OCSP responder <b>688</b> separate from cache entries of responses to a second OCSP responder <b>688</b>. In some embodiments, the cache manager <b>232</b> may partition the cache according to one or more of: a plurality of OCSP responders, a plurality of OCSP servers <b>668</b> or services, and a plurality of CAs.</p>
<p id="p-0303" num="0335">In further details of step <b>715</b>, the intermediary device receives the first client certificate from the first client during a third SSL handshake. The intermediary <b>200</b> may receive a client certificate <b>678</b> from any client for which certificate status is pending, determined or unknown (e.g., no prior certificate validation performed for the particular client certificate <b>678</b>). The intermediary <b>200</b> and its components may perform any embodiments of the steps <b>701</b> and/or <b>703</b> described above in connection with the receipt. The cache manager <b>232</b> may access a status of the client certificate <b>678</b> from the cache <b>622</b>, if available. The SSL engine <b>667</b> may suspend the third SSL handshake while determining the status from the cache <b>622</b>. The SSL engine <b>667</b> may continue with at least a portion of the third SSL handshake while determining the status from the cache <b>622</b>. In some embodiments, the SSL engine <b>667</b> may continue with at least a portion of the third SSL handshake if it is determined that the status of the client certificate <b>678</b> is pending or outstanding (e.g., the first client certificate <b>678</b> from the first SSL handshake is still undergoing validation).</p>
<p id="p-0304" num="0336">In further details of step <b>717</b>, the intermediary <b>200</b> determines whether to establish a another or requested SSL connection, such as a third SSL connection with the first client based on the status of the first client certificate <b>678</b><i>a </i>identified via the cache <b>622</b>. The intermediary <b>200</b> may determine whether to establish or maintain an established SSL connection based on the SSL handshake in accordance with any embodiments of step <b>711</b> described above. In one embodiment, for example while in non-blocking mode, the SSL engine <b>667</b> may establish the SSL connection if it is determined that the status of the client certificate <b>678</b> is pending or outstanding (e.g., the first client certificate from the first SSL handshake is still undergoing validation). The SSL engine <b>667</b> may determine to establish the SSL connection based on the first cache entry identifying the status of the first client certificate as good and the first cache entry has not expired. In some embodiments, the intermediary <b>200</b> may determine that the status of the first client certificate <b>678</b><i>a </i>is one or more of: revoked, expired, unexpired, unknown, not up-to-date, and unavailable. In some of these embodiments, the intermediary <b>200</b> may determine not to establish or maintain an established SSL connection based on the SSL handshake.</p>
<p id="p-0305" num="0337">The SSL engine <b>667</b> may determine whether to establish a SSL connection with the first client based on the first cache entry identifying the status of the first client certificate <b>678</b><i>a </i>as good and the first cache entry as expired. The SSL engine <b>667</b> may determine whether to establish the SSL connection with the first client based on the first cache entry identifying the status of the first client certificate as unknown, unavailable or not up-to-date. In some of these embodiments, the intermediary <b>200</b> may request for an updated status via any embodiments of the one or more steps <b>705</b>-<b>713</b> described above. In one embodiment, the SSL engine <b>667</b> may establish the SSL connection while the updated status is pending. Based on the updated status, the SSL engine <b>667</b> may establish or maintain establishment of the SSL connection.</p>
<p id="p-0306" num="0338">In some embodiments, the intermediary <b>200</b> may identify an SSL connection or session previously established for the first client as described above in connection with step <b>711</b>. Based on the status (e.g., good and not expired) of the first certificate, the intermediary <b>200</b> may update, re-establish, re-use or resume the identified SSL connection or session for the first client.</p>
<p id="p-0307" num="0339">Referring now to <figref idref="DRAWINGS">FIG. 7B</figref>, a flow diagram depicting an embodiment of steps of a method <b>700</b> for determining a status of a client certificate <b>678</b> from a plurality of responses for an OCSP request is shown. In brief overview, at step <b>751</b>, an intermediary device identifies a plurality of OCSP responders for determining a status of a client certificate <b>678</b> responsive to receiving the client certificate <b>678</b> from a client during a SSL handshake <b>677</b>. At step <b>753</b>, each of the plurality of OCSP responders transmits a request for the status of the client certificate <b>678</b> to a uniform resource locator corresponding to each OCSP responder <b>688</b>. At step <b>755</b>, the intermediary device continues to perform remaining portions of the SSL handshake <b>677</b> while the OCSP request is outstanding. At step <b>757</b>, intermediary device establishes an SSL connection for the SSL handshake <b>677</b>. At step <b>759</b>, the intermediary device determines a single status for the client certificate <b>678</b> from a plurality of statuses of the client certificate <b>678</b> received via responses from each uniform resource locator. At step <b>761</b>, the intermediary determines whether to terminate or maintain the established SSL connection based on the single status of the client certificate <b>678</b>.</p>
<p id="p-0308" num="0340">In further details of step <b>751</b>, an intermediary device identifies a plurality of OCSP responders for determining a status of a client certificate <b>678</b> responsive to receiving the client certificate <b>678</b> from a client during a SSL handshake <b>677</b>. The intermediary <b>200</b> may identify one or more OCSP responders as described above in connection with any embodiment of step <b>705</b>. The intermediary <b>200</b> may identify the plurality of OCSP responders for system redundancy. In some embodiments, the intermediary <b>200</b> may establish a plurality of OCSP responders responsive to receiving the client certificate <b>678</b> from a client during a SSL handshake <b>677</b>. The intermediary <b>200</b> may identify the plurality of OCSP responders based on the status of the OCSP responders (e.g., idle, available, waiting for requests, etc). In some embodiments, the intermediary <b>200</b> may identify a single OCSP responder <b>688</b> responsive to receiving the client certificate <b>678</b> from a client during a SSL handshake <b>677</b>.</p>
<p id="p-0309" num="0341">The intermediary <b>200</b> may identify the plurality of OCSP responders based on one or more of: a configuration (e.g., of the SSL engine <b>667</b>, of each of the responders), application of a policy by the policy engine <b>236</b>, application of a function or algorithm, a flow distributer, and a load balancing service. For example and in one embodiment, the intermediary <b>200</b> may identify the plurality of OCSP responders based on a certificate authority of the client certificate <b>678</b>. The intermediary <b>200</b> may identify the plurality of OCSP responders based on one or more of: a supported version of OCSP, an identified OCSP server <b>668</b> or service (e.g., associated with an OCSP responder <b>688</b>), the AIA (e.g., indicating CA information associated with the OCSP responders <b>688</b>), client information, and a priority of the request. For example, the higher the priority, more OCSP responders may be identified. The intermediary <b>200</b> may identify each OCSP responder <b>688</b> by an identifier or an uniform resource locator, for example retrieved from a configuration parameter for each OCSP responder <b>688</b>. The one or more OCSP responders may be identified responsive to any embodiments of step <b>705</b> described above.</p>
<p id="p-0310" num="0342">In further details of step <b>753</b>, each of the plurality of OCSP responders transmits a request for the status of the client certificate <b>678</b> to a uniform resource locator <b>676</b> corresponding to each OCSP responder <b>688</b>. Any of the OCSP responders <b>688</b> may generate and/or transmit a request <b>689</b> as described above in connection with any embodiment of step <b>707</b>. The OCSP responders may identify the uniform resource locator (URL) <b>676</b> corresponding to each OCSP server <b>668</b> or service via a configuration parameter for each OCSP responder <b>688</b>. Each OCSP responder <b>688</b> may transmit an OCSP request as part of a batch OCSP request to the OCSP server <b>668</b> for statuses of a plurality of client certificates. In some embodiments, all requests are transmitted to a single entity, e.g., an OCSP server <b>668</b>, OCSP service, OCSP responder <b>688</b> or a CRL server. The requests may be transmitted to the entity using the identified URL <b>676</b>. In other embodiments, each of the request may be transmitted to one of a plurality of entities including one or more of: an OCSP server <b>668</b>, OCSP service, OCSP responder <b>688</b> or a CRL server, e.g., via the corresponding URL.</p>
<p id="p-0311" num="0343">The intermediary <b>200</b> may identify a priority assigned to each OCSP responder <b>688</b> of the plurality of OCSP responders. The SSL engine <b>667</b> may transmit a request to each OCSP responder <b>688</b> based at least in part on the assigned priority. In some embodiments, the intermediary <b>200</b> may identify an order of each OCSP responder <b>688</b> in the plurality of OCSP responders. The SSL engine <b>667</b> may transmit a request to each OCSP responder <b>688</b> based at least in part on the identified order. In some embodiments, the intermediary <b>200</b> may identify a weight assigned to each OCSP responder <b>688</b> of the plurality of OCSP responders. The SSL engine <b>667</b> may transmit a request to each OCSP responder <b>688</b> based at least in part on the assigned weight. The intermediary <b>200</b> may identify any of the priority, order and/or weight based on application of one or more of a plurality of policies by the policy engine <b>236</b>. The intermediary <b>200</b> may identify any of the priority, order and/or weight based on a configuration of the intermediary <b>200</b>, application of a function or algorithm, a flow distributor, and/or a load balancing service.</p>
<p id="p-0312" num="0344">In further details of step <b>755</b>, the intermediary device continues to perform remaining portions of the SSL handshake <b>677</b> while the OCSP request is outstanding. For each SSL handshake <b>677</b>, the intermediary device may continue to perform remaining portions of the SSL handshake <b>677</b> while the corresponding certificate status or OCSP request is outstanding or pending. For each SSL handshake <b>677</b>, the intermediary device <b>200</b> may continue to perform some portion of the SSL handshake <b>677</b> while the corresponding certificate status or OCSP request is outstanding or pending. The intermediary <b>200</b> may handle the SSL handshake <b>677</b> as described above in connection with any embodiment of step <b>709</b>. For example and in one embodiment, the intermediary <b>200</b> may handle some or all SSL handshakes in blocking mode. In another embodiment, the intermediary <b>200</b> may handle some or all SSL handshakes in non-blocking mode.</p>
<p id="p-0313" num="0345">In further details of step <b>757</b>, the intermediary device establishes an SSL connection for the SSL handshake <b>677</b>. For each SSL handshake <b>677</b>, the intermediary <b>200</b> may determine whether to establish a corresponding SSL connection while the corresponding certificate status or OCSP request is pending or outstanding. For each SSL handshake <b>677</b>, the intermediary <b>200</b> may determine whether to establish a corresponding SSL connection as described above in connection with any embodiment of steps <b>711</b> and/or <b>717</b>. For example and in one embodiment, the intermediary <b>200</b> may handle establishment of some or all SSL connections in blocking mode. In another embodiment, the intermediary <b>200</b> may handle establishment of some or all SSL connections in non-blocking mode.</p>
<p id="p-0314" num="0346">In some embodiments, each of the OCSP responders may receive a response <b>680</b> to a request <b>689</b> for the status of the client certificate <b>678</b>. The intermediary <b>200</b> may determine one or more statuses of the client certificate <b>678</b> as described above in connection with any embodiment of step <b>711</b>. Each of the plurality of responses may be received from one of the plurality of entities. In some embodiments, the plurality of responses are received from a single entity, e.g., OCSP server <b>668</b>. The plurality of requests may indicate one of a plurality of statuses for the client certificate <b>678</b>. For example, the status may be identified as good, revoked, expired or out-of-date depending on when and/or which entity processed the response. In some embodiments, the validity, accuracy or probability of correctness of a returned status may depend on one or more of: the weight, order and priority of the OCSP responders.</p>
<p id="p-0315" num="0347">In further details of step <b>759</b>, the intermediary device determines a single status for the client certificate <b>678</b> from a plurality of statuses of the client certificate <b>678</b> received via responses from each uniform resource locator. A packet engine or SSL engine <b>667</b> of the intermediary <b>200</b> may determine a single status for the client certificate <b>678</b> from the plurality of statuses or responses. The intermediary <b>200</b> may determine the single status of the client certificate <b>678</b> by applying a policy to the plurality of statuses. The intermediary <b>200</b> may determine the single status of the client certificate <b>678</b> by using a status from the plurality of statuses that first identifies one of a good or revoked status. The intermediary <b>200</b> may determine the single status of the client certificate <b>678</b> by identifying a status from the plurality of statuses with one of a highest priority or one of a highest weight. The intermediary <b>200</b> may determine the single status of the client certificate <b>678</b> by applying a function or algorithm to the plurality of statuses. For example, the intermediary may take an average of the responses or weighted average of the responses. The intermediary may identify the response time with the highest count.</p>
<p id="p-0316" num="0348">The intermediary <b>200</b> may determine the single status by considering responses that are received within a certain period of time. The intermediary <b>200</b> may determine the single status by eliminating certain responses, such as responses indicating that the status is unknown, not up-to-date or unavailable. The intermediary <b>200</b> may determine the single status by selecting a status from a statistical distribution and/or function of the returned statuses. The intermediary <b>200</b> may determine the single status by accepting the first returned status that is not expired. In some embodiments, the intermediary <b>200</b> may determine the single status by validating the responses against information stored in the cache <b>622</b> and/or a CRL. In certain embodiments, the intermediary <b>200</b> may store the single status in the cache <b>622</b> as described above in connection with any embodiment of step <b>713</b>.</p>
<p id="p-0317" num="0349">In some embodiments, such as in blocking mode, the intermediary <b>200</b> determines whether to establish the SSL connection responsive to determining the single status. The SSL engine <b>667</b> may determine whether to establish the SSL connection as described above in connection with any embodiment of step <b>711</b>.</p>
<p id="p-0318" num="0350">In further details of step <b>761</b> and in some embodiments, the intermediary <b>200</b> determines whether to terminate or maintain the established SSL connection based on the single status of the client certificate <b>678</b>. The intermediary <b>200</b> may be operating in non-blocking mode. The intermediary <b>200</b> may determine whether to terminate or maintain the established SSL connection as described above in connection with any embodiment of steps <b>711</b> and/or <b>717</b>. For example and in one embodiment, the intermediary <b>200</b> may determine to terminate the established SSL connection based on the status of the client certificate <b>678</b> corresponding to one of revoked or unknown. In another embodiment, the intermediary <b>200</b> may determine to maintain the established SSL connection based on the client certificate <b>678</b> having a good status that is not expired.</p>
<p id="p-0319" num="0351">In some embodiments, the intermediary <b>200</b> may determine whether to terminate or maintain the established SSL connection based on one or more statuses received via the plurality of responses. In some embodiments, the intermediary <b>200</b> may identify an SSL connection or session previously established for the first client as described above in connection with step <b>711</b>. Based on the status (e.g., good and not expired) of the first certificate, the intermediary <b>200</b> may update, re-establish, re-use or resume the identified SSL connection or session for the first client.</p>
<p id="p-0320" num="0352">Referring again to <figref idref="DRAWINGS">FIG. 7C</figref>, one or more steps of the methods described above may operate in conjunction with the depicted SSL handshake <b>677</b>. An SSL handshake <b>677</b> may be initialized by a client_hello message generated and transmitted by the client <b>102</b>. The intermediary <b>200</b>, operating as a receiving end, may respond with a server-hello message. In addition, the intermediary <b>200</b> may request or demand for a client certificate <b>678</b> of the client. The client may validate a certificate of the intermediary <b>200</b> before transmitting the client certificate <b>678</b> to the intermediary <b>200</b>. Upon receiving the client certificate <b>678</b>, the intermediary <b>200</b> may check the client certificate <b>678</b>, such as in accordance with step <b>701</b> described above. Furthermore, one or more of steps <b>703</b>-<b>711</b> or <b>751</b>-<b>755</b> may apply, as indicated in <figref idref="DRAWINGS">FIG. 7C</figref>, concurrent with SSL handshake or while the SSL handshake is suspended. In some embodiments, the SSL handshake <b>677</b> operates in non-blocking mode. In other embodiments, the SSL handshake <b>677</b> operates in blocking mode.</p>
<p id="p-0321" num="0353">Although some of the steps described above may be identified as performed by the intermediary <b>200</b> or by some component or module of the intermediary <b>200</b>, it should be understood that any other component or module may perform the same or substantially the same steps in various embodiments without departing from the spirit and scope of the invention.</p>
<p id="p-0322" num="0354">It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or, in some embodiments, on multiple machines in a distributed system. In addition, the systems and methods described above may be provided as one or more computer-readable programs or executable instructions embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk, a hard disk, a CD-ROM, a flash memory card, a PROM, a RAM, a ROM, or a magnetic tape. In general, the computer-readable programs may be implemented in any programming language, such as LISP, PERL, C, C++, C#, PROLOG, or in any byte code language such as JAVA. The software programs or executable instructions may be stored on or in one or more articles of manufacture as object code.</p>
<p id="p-0323" num="0355">While the invention has been particularly shown and described with reference to specific embodiments, it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of batching Online Certificate Status Protocol (OCSP) requests and caching responses to the OCSP requests, the method comprising:
<claim-text>(a) receiving, by an intermediary device between a plurality of clients and one or more servers, a first client certificate during a first Secure Socket Layer (SSL) handshake with a first client, a second client certificate during a second SSL handshake with a second client, and a third client certificate during a third SSL handshake, each of the first client certificate and the second client certificate corresponding to a first certificate authority, and the third client certificate corresponding to a second certificate authority;</claim-text>
<claim-text>(b) identifying, by the intermediary device, that each of a status of the first client certificate, the second client certificate and the third client certificate is not in a cache of the intermediary device;</claim-text>
<claim-text>(c) transmitting, by an Online Certificate Status Protocol (OCSP) responder of the intermediary device responsive to the first and second client certificates corresponding to the first certificate authority, and responsive to the expiration of a predetermined time period to wait for client certificates corresponding to the first certificate authority, and during both the first SSL handshake and the second SSL handshake, a single request to an OCSP server to determine the status of each of the first client certificate and the second client certificate, and transmitting a separate request for a status of the third client certificate to a second OCSP server during the third SSL handshake;</claim-text>
<claim-text>(d) determining, by the intermediary device from a single response received from the OCSP server, whether to establish a first SSL connection with the first client based on the status of the first client certificate and a second SSL connection with the second client based on the status of the second client certificate;</claim-text>
<claim-text>(e) storing, by the intermediary device, to the cache a first cache entry identifying the status of the first client certificate and a second cache entry identifying the status of second client certificate, each of the first cache entry and the second cache entry stored in association with the OCSP responder and with a cache expiry identified by the OCSP responder;</claim-text>
<claim-text>(f) receiving, by the intermediary device from the first client during a third SSL handshake, the first client certificate; and</claim-text>
<claim-text>(g) determining, by the intermediary, whether to establish a third SSL connection with the first client based on the status of the first client certificate identified via the cache.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (a) further comprising receiving, by the intermediary device, one of the first client certificate or the second client certificate comprising an identifier of the certificate authority.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (b) further comprises determining that a cache entry for the status of the first client certificate or the second client certificate has expired.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (c) further comprises waiting, by the intermediary device, a predetermined time period for receipt of additional client certificates corresponding to the certificate authority before transmitting the single request.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising receiving by the intermediary device, a third client certificate before expiration of the predetermined time period and including in the single request to the OCSP server, a request for the status of the third client certificate.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (c) further comprises identifying, by the intermediary device, the OCSP responder of a plurality of OCSP responders of the intermediary device, corresponding to the certificate authority.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (d) further comprises establishing, by the intermediary device, SSL connections with those clients having client certificates with a good status and not establishing, by the intermediary device, SSL connection with those clients having client certificates not having a good status.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (e) further comprises generating, by the intermediary device, a hash for one of the first cache entry or the second cache entry based on an issuer name, a subject name and a response.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (e) further comprises storing by the intermediary device, one of the first cache entry or the second cache entry from responses to the OCSP responder separate from cache entries of responses to a second OCSP responder.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (g) further comprises determining by the intermediary device to establish the third SSL connection based on the first cache entry identifying the status of the first client certificate as good and the first cache entry has not expired.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein step (c) comprises transmitting the single request to the OCSP server to determine the status of each of the first client certificate and the second client certificate, while remaining portions of the first and second SSL handshakes are performed without the statuses of the first and second client certificates.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system of batching Online Certificate Status Protocol (OCSP) requests and caching responses to the OCSP requests, the system comprising:
<claim-text>an intermediary device receiving a plurality of client certificates during a Secure Socket Layer (SSL) handshake, a first client certificate during a first Secure Socket Layer (SSL) handshake with a first client, a second client certificate during a second SSL handshake with a second client, and a third client certificate during a third SSL handshake, each of the first client certificate and the second client certificate corresponding to a first certificate authority, and the third client certificate corresponding to a second certificate authority;</claim-text>
<claim-text>a cache manager of the intermediary device identifying that each of a status of the first client certificate, the second client certificate and the third client certificate is not in a cache of the intermediary device;</claim-text>
<claim-text>an Online Certificate Status Protocol (OCSP) responder of the intermediary device transmitting, responsive to the first and second client certificates corresponding to the first certificate authority, and responsive to expiration of a predetermined time period to wait for client certificates corresponding to the first certificate authority, and during both the first SSL handshake and the second SSL handshake, a single request to an OCSP server to the status of each of the first client certificate and the second client certificate, and transmitting a separate request for a status of the third client certificate to a second OCSP server during the third SSL handshake;</claim-text>
<claim-text>an SSL engine of the intermediary device determining, from a single response received from the OCSP server, whether to establish a first SSL connection with the first client based on the status of the first client certificate and a second SSL connection with the second client based on the status of the second client certificate;</claim-text>
<claim-text>wherein the cache manager stores to the cache a first cache entry identifying the status of the first client certificate and a second cache entry identifying the status of second client certificate, each of the first cache entry and the second cache entry stored in association with the OCSP responder and with a cache expiry identified by the OCSP responder; and</claim-text>
<claim-text>wherein the intermediary device receives from first client during a third SSL handshake, the first client certificate and the SSL engine determines whether to establish a third SSL connection with the first client based on the status of the first client certificate identified via the cache.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the intermediary device receives one of the first client certificate or the second client certificate comprising an identifier of the certificate authority.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cache manager determines that one of the first cache entry or the second cache entry has expired.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the intermediary device waits a predetermined time period for receipt of additional client certificates corresponding to the certificate authority before transmitting the single request.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the intermediary device receives a third client certificate before expiration of the predetermined time period and the OCSP responder includes in the single request to the OCSP server, a request for the status of the third client certificate.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the intermediary device identifies the OCSP responder from a plurality of OCSP responders of the intermediary device corresponding to the certificate authority.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the SSL engine establishes SSL connections with those clients having client certificates with a good status and not establishing SSL connections with those clients having client certificates not having a good status.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cache manager generates a hash for one of the first cache entry or the second cache entry based on an issuer name, a subject name and a response.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cache manager stores one of the first cache entry or the second cache entry from responses to the OCSP responder separate from cache entries of responses to a second OCSP responder.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the SSL engine determines to establish the third SSL connection based on the first cache entry identifying the status of the first client certificate as good and the first cache entry has not expired. </claim-text>
</claim>
</claims>
</us-patent-grant>

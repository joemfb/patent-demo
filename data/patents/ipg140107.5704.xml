<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626806-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626806</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13449049</doc-number>
<date>20120417</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>53</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classifications-cpc>
<main-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30233</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</main-cpc>
<further-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>53</subgroup>
<symbol-position>L</symbol-position>
<classification-value>A</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
<classification-cpc>
<cpc-version-indicator><date>20130101</date></cpc-version-indicator>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>2212</main-group>
<subgroup>152</subgroup>
<symbol-position>L</symbol-position>
<classification-value>A</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
<scheme-origination-code>C</scheme-origination-code>
</classification-cpc>
</further-cpc>
</classifications-cpc>
<classification-national>
<country>US</country>
<main-classification>707827</main-classification>
<further-classification>707781</further-classification>
<further-classification>707822</further-classification>
<further-classification>707824</further-classification>
<further-classification>717174</further-classification>
<further-classification>717175</further-classification>
<further-classification>717176</further-classification>
<further-classification>717177</further-classification>
<further-classification>717178</further-classification>
</classification-national>
<invention-title id="d2e43">Method and system for managing execution of virtual applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4468732</doc-number>
<kind>A</kind>
<name>Raver</name>
<date>19840800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5495610</doc-number>
<kind>A</kind>
<name>Shing et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5987590</doc-number>
<kind>A</kind>
<name>Wing So</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6263363</doc-number>
<kind>B1</kind>
<name>Rosenblatt et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6453334</doc-number>
<kind>B1</kind>
<name>Vinson et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6493733</doc-number>
<kind>B1</kind>
<name>Pollack et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6564229</doc-number>
<kind>B1</kind>
<name>Baweja et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707741</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6675216</doc-number>
<kind>B1</kind>
<name>Quatrano et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6704808</doc-number>
<kind>B2</kind>
<name>Kasamatsu et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7064760</doc-number>
<kind>B2</kind>
<name>Capin et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7089259</doc-number>
<kind>B1</kind>
<name>Kouznetsov et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7096253</doc-number>
<kind>B2</kind>
<name>Vinson et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7096416</doc-number>
<kind>B1</kind>
<name>Smith et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7117495</doc-number>
<kind>B2</kind>
<name>Blaser et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7130073</doc-number>
<kind>B2</kind>
<name>Kumar et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7240162</doc-number>
<kind>B2</kind>
<name>De Vries</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7272613</doc-number>
<kind>B2</kind>
<name>Sim et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7337298</doc-number>
<kind>B2</kind>
<name>Kawachiya et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7356679</doc-number>
<kind>B1</kind>
<name>Le et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7360097</doc-number>
<kind>B2</kind>
<name>Rothstein</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7386542</doc-number>
<kind>B2</kind>
<name>Maybury et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7437371</doc-number>
<kind>B2</kind>
<name>Rathakrishnan et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7451196</doc-number>
<kind>B1</kind>
<name>de Vries et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7499991</doc-number>
<kind>B2</kind>
<name>Johnson</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7523116</doc-number>
<kind>B2</kind>
<name>Yan</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7536541</doc-number>
<kind>B2</kind>
<name>Isaacson</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7577751</doc-number>
<kind>B2</kind>
<name>Vinson et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7590644</doc-number>
<kind>B2</kind>
<name>Matsakis et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7600097</doc-number>
<kind>B1</kind>
<name>Wright</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7623673</doc-number>
<kind>B2</kind>
<name>Mercier</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7664367</doc-number>
<kind>B2</kind>
<name>Suzuki</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7669189</doc-number>
<kind>B1</kind>
<name>Umamageswaran</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7689825</doc-number>
<kind>B2</kind>
<name>Iwamura</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7707564</doc-number>
<kind>B2</kind>
<name>Marvin et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7743407</doc-number>
<kind>B2</kind>
<name>Sprigg et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7752511</doc-number>
<kind>B2</kind>
<name>Fulton et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7761503</doc-number>
<kind>B2</kind>
<name>Dhawan et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7797748</doc-number>
<kind>B2</kind>
<name>Zheng et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7840961</doc-number>
<kind>B1</kind>
<name>Weathersby</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7950026</doc-number>
<kind>B1</kind>
<name>Urbach</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>7970789</doc-number>
<kind>B1</kind>
<name>Blaser et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>8010667</doc-number>
<kind>B2</kind>
<name>Zhang et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>8065675</doc-number>
<kind>B2</kind>
<name>Strauss et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>8069443</doc-number>
<kind>B2</kind>
<name>Ackerman et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>8219805</doc-number>
<kind>B1</kind>
<name>Ie et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>8230442</doc-number>
<kind>B2</kind>
<name>Aho et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>8271944</doc-number>
<kind>B2</kind>
<name>Austin et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>8375140</doc-number>
<kind>B2</kind>
<name>Tippin et al.</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>8387006</doc-number>
<kind>B1</kind>
<name>Taylor</name>
<date>20130200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>8434093</doc-number>
<kind>B2</kind>
<name>Larimore et al.</name>
<date>20130400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>8468175</doc-number>
<kind>B2</kind>
<name>Obata</name>
<date>20130600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2001/0016905</doc-number>
<kind>A1</kind>
<name>Kasamatsu et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2002/0029283</doc-number>
<kind>A1</kind>
<name>Beckett et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2002/0032754</doc-number>
<kind>A1</kind>
<name>Logston et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2002/0099951</doc-number>
<kind>A1</kind>
<name>O'Connor</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2002/0129129</doc-number>
<kind>A1</kind>
<name>Bloch et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2002/0133491</doc-number>
<kind>A1</kind>
<name>Sim et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2002/0161578</doc-number>
<kind>A1</kind>
<name>Saindon et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2002/0162015</doc-number>
<kind>A1</kind>
<name>Tang</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2003/0031176</doc-number>
<kind>A1</kind>
<name>Sim et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2003/0051169</doc-number>
<kind>A1</kind>
<name>Sprigg et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2004/0083474</doc-number>
<kind>A1</kind>
<name>McKinlay et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717176</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2004/0128342</doc-number>
<kind>A1</kind>
<name>Maes et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2004/0139315</doc-number>
<kind>A1</kind>
<name>Tokutani et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2005/0132359</doc-number>
<kind>A1</kind>
<name>McGuire et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2005/0198647</doc-number>
<kind>A1</kind>
<name>Hipp et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2005/0262553</doc-number>
<kind>A1</kind>
<name>Bialick et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2005/0273772</doc-number>
<kind>A1</kind>
<name>Matsakis et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2006/0048136</doc-number>
<kind>A1</kind>
<name>Vries et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2006/0053380</doc-number>
<kind>A1</kind>
<name>Spataro et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2006/0074733</doc-number>
<kind>A1</kind>
<name>Shukla et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2006/0075064</doc-number>
<kind>A1</kind>
<name>Keohane et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2006/0123185</doc-number>
<kind>A1</kind>
<name>de Vries et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2006/0168294</doc-number>
<kind>A1</kind>
<name>de Vries et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2006/0218165</doc-number>
<kind>A1</kind>
<name>Vries et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2006/0222203</doc-number>
<kind>A1</kind>
<name>Mercier</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2006/0230175</doc-number>
<kind>A1</kind>
<name>de Vries</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2006/0242626</doc-number>
<kind>A1</kind>
<name>Pham et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2006/0248442</doc-number>
<kind>A1</kind>
<name>Rosenstein et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2006/0253535</doc-number>
<kind>A1</kind>
<name>Betros et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2006/0256130</doc-number>
<kind>A1</kind>
<name>Gonzalez</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2007/0016721</doc-number>
<kind>A1</kind>
<name>Gay</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2007/0043943</doc-number>
<kind>A1</kind>
<name>Peretti</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2007/0078988</doc-number>
<kind>A1</kind>
<name>Miloushev et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2007/0168953</doc-number>
<kind>A1</kind>
<name>Diez et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2007/0168965</doc-number>
<kind>A1</kind>
<name>Zenz et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2007/0174824</doc-number>
<kind>A1</kind>
<name>Relyea et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00088">
<document-id>
<country>US</country>
<doc-number>2007/0234277</doc-number>
<kind>A1</kind>
<name>Lei et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00089">
<document-id>
<country>US</country>
<doc-number>2007/0240155</doc-number>
<kind>A1</kind>
<name>Shlomai</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00090">
<document-id>
<country>US</country>
<doc-number>2007/0245331</doc-number>
<kind>A1</kind>
<name>Daynes et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00091">
<document-id>
<country>US</country>
<doc-number>2007/0294674</doc-number>
<kind>A1</kind>
<name>Marilly et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00092">
<document-id>
<country>US</country>
<doc-number>2008/0010389</doc-number>
<kind>A1</kind>
<name>Iwata</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00093">
<document-id>
<country>US</country>
<doc-number>2008/0155171</doc-number>
<kind>A1</kind>
<name>Jeong</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00094">
<document-id>
<country>US</country>
<doc-number>2008/0163194</doc-number>
<kind>A1</kind>
<name>Dias et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00095">
<document-id>
<country>US</country>
<doc-number>2008/0181230</doc-number>
<kind>A1</kind>
<name>Hitt et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00096">
<document-id>
<country>US</country>
<doc-number>2008/0184135</doc-number>
<kind>A1</kind>
<name>Washburn et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00097">
<document-id>
<country>US</country>
<doc-number>2008/0235680</doc-number>
<kind>A1</kind>
<name>Strauss et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00098">
<document-id>
<country>US</country>
<doc-number>2008/0294877</doc-number>
<kind>A1</kind>
<name>Haga et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712216</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00099">
<document-id>
<country>US</country>
<doc-number>2008/0298219</doc-number>
<kind>A1</kind>
<name>Yamagata et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00100">
<document-id>
<country>US</country>
<doc-number>2008/0301672</doc-number>
<kind>A1</kind>
<name>Rao et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00101">
<document-id>
<country>US</country>
<doc-number>2009/0055542</doc-number>
<kind>A1</kind>
<name>Zhao et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00102">
<document-id>
<country>US</country>
<doc-number>2009/0064086</doc-number>
<kind>A1</kind>
<name>Faus et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00103">
<document-id>
<country>US</country>
<doc-number>2009/0077551</doc-number>
<kind>A1</kind>
<name>Whiteley</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00104">
<document-id>
<country>US</country>
<doc-number>2009/0110307</doc-number>
<kind>A1</kind>
<name>Markowitz</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00105">
<document-id>
<country>US</country>
<doc-number>2009/0158432</doc-number>
<kind>A1</kind>
<name>Zheng et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00106">
<document-id>
<country>US</country>
<doc-number>2009/0198358</doc-number>
<kind>A1</kind>
<name>Logan et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00107">
<document-id>
<country>US</country>
<doc-number>2009/0235158</doc-number>
<kind>A1</kind>
<name>Rosenstein et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00108">
<document-id>
<country>US</country>
<doc-number>2009/0240663</doc-number>
<kind>A1</kind>
<name>Plattner et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00109">
<document-id>
<country>US</country>
<doc-number>2009/0249071</doc-number>
<kind>A1</kind>
<name>De Atley et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00110">
<document-id>
<country>US</country>
<doc-number>2009/0300076</doc-number>
<kind>A1</kind>
<name>Friedman et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00111">
<document-id>
<country>US</country>
<doc-number>2009/0300151</doc-number>
<kind>A1</kind>
<name>Friedman et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00112">
<document-id>
<country>US</country>
<doc-number>2009/0307763</doc-number>
<kind>A1</kind>
<name>Rawlins et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00113">
<document-id>
<country>US</country>
<doc-number>2009/0313322</doc-number>
<kind>A1</kind>
<name>Sheehan et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00114">
<document-id>
<country>US</country>
<doc-number>2009/0328030</doc-number>
<kind>A1</kind>
<name>Fries</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00115">
<document-id>
<country>US</country>
<doc-number>2010/0005291</doc-number>
<kind>A1</kind>
<name>Hulten et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00116">
<document-id>
<country>US</country>
<doc-number>2010/0023640</doc-number>
<kind>A1</kind>
<name>Vinson et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00117">
<document-id>
<country>US</country>
<doc-number>2010/0023934</doc-number>
<kind>A1</kind>
<name>Sheehan et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00118">
<document-id>
<country>US</country>
<doc-number>2010/0037206</doc-number>
<kind>A1</kind>
<name>Larimore et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00119">
<document-id>
<country>US</country>
<doc-number>2010/0037235</doc-number>
<kind>A1</kind>
<name>Larimore et al.</name>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00120">
<document-id>
<country>US</country>
<doc-number>2010/0077096</doc-number>
<kind>A1</kind>
<name>Philip et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00121">
<document-id>
<country>US</country>
<doc-number>2010/0088448</doc-number>
<kind>A1</kind>
<name>Min et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00122">
<document-id>
<country>US</country>
<doc-number>2010/0106804</doc-number>
<kind>A1</kind>
<name>He et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00123">
<document-id>
<country>US</country>
<doc-number>2010/0107163</doc-number>
<kind>A1</kind>
<name>Lee</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00124">
<document-id>
<country>US</country>
<doc-number>2010/0121973</doc-number>
<kind>A1</kind>
<name>Lobacheva et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00125">
<document-id>
<country>US</country>
<doc-number>2010/0138479</doc-number>
<kind>A1</kind>
<name>Zhu</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00126">
<document-id>
<country>US</country>
<doc-number>2010/0146590</doc-number>
<kind>A1</kind>
<name>Jung</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00127">
<document-id>
<country>US</country>
<doc-number>2010/0205604</doc-number>
<kind>A1</kind>
<name>Brower et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00128">
<document-id>
<country>US</country>
<doc-number>2010/0241718</doc-number>
<kind>A1</kind>
<name>Rasmussen et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00129">
<document-id>
<country>US</country>
<doc-number>2010/0250782</doc-number>
<kind>A1</kind>
<name>Pratt et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00130">
<document-id>
<country>US</country>
<doc-number>2010/0306849</doc-number>
<kind>A1</kind>
<name>Zheng et al.</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00131">
<document-id>
<country>US</country>
<doc-number>2011/0004840</doc-number>
<kind>A1</kind>
<name>Feinberg et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00132">
<document-id>
<country>US</country>
<doc-number>2011/0145428</doc-number>
<kind>A1</kind>
<name>Wei et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00133">
<document-id>
<country>US</country>
<doc-number>2011/0145726</doc-number>
<kind>A1</kind>
<name>Wei et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00134">
<document-id>
<country>US</country>
<doc-number>2011/0153975</doc-number>
<kind>A1</kind>
<name>Accapadi et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00135">
<document-id>
<country>US</country>
<doc-number>2011/0173607</doc-number>
<kind>A1</kind>
<name>Murphey et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00136">
<document-id>
<country>US</country>
<doc-number>2011/0185013</doc-number>
<kind>A1</kind>
<name>Obata et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00137">
<document-id>
<country>US</country>
<doc-number>2011/0185043</doc-number>
<kind>A1</kind>
<name>Zeller et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00138">
<document-id>
<country>US</country>
<doc-number>2011/0191772</doc-number>
<kind>A1</kind>
<name>Larimore et al.</name>
<date>20110800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00139">
<document-id>
<country>US</country>
<doc-number>2011/0246659</doc-number>
<kind>A1</kind>
<name>Bouazizi</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00140">
<document-id>
<country>US</country>
<doc-number>2011/0289513</doc-number>
<kind>A1</kind>
<name>Degirmenci et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00141">
<document-id>
<country>US</country>
<doc-number>2012/0005237</doc-number>
<kind>A1</kind>
<name>Obata</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00142">
<document-id>
<country>US</country>
<doc-number>2012/0005244</doc-number>
<kind>A1</kind>
<name>Obata et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00143">
<document-id>
<country>US</country>
<doc-number>2012/0005246</doc-number>
<kind>A1</kind>
<name>Obata</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00144">
<document-id>
<country>US</country>
<doc-number>2012/0005309</doc-number>
<kind>A1</kind>
<name>Obata</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00145">
<document-id>
<country>US</country>
<doc-number>2012/0005310</doc-number>
<kind>A1</kind>
<name>Obata</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00146">
<document-id>
<country>US</country>
<doc-number>2012/0005674</doc-number>
<kind>A1</kind>
<name>Larimore et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00147">
<document-id>
<country>US</country>
<doc-number>2012/0096071</doc-number>
<kind>A1</kind>
<name>Murphey et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00148">
<document-id>
<country>US</country>
<doc-number>2012/0110337</doc-number>
<kind>A1</kind>
<name>Murphey et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00149">
<document-id>
<country>US</country>
<doc-number>2012/0203808</doc-number>
<kind>A1</kind>
<name>Larimore et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00150">
<document-id>
<country>US</country>
<doc-number>2013/0132525</doc-number>
<kind>A1</kind>
<name>Tippin</name>
<date>20130500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00151">
<othercit>Chapin, &#x201c;Hive: Operating System Fault Containment for Shared-Memory Multiprocessors&#x201d;, Technical Report No. CSL-TR-97-712, Computer Systems Laboratory, Departments of Electrical Engineering and Computer Science, Stanford University, Jul. 1997, 156 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00152">
<othercit>Final Office Action received in U.S. Appl. No. 12/188,155, dated Aug. 31, 2012, 22 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00153">
<othercit>Final Office Action received in U.S. Appl. No. 12/695,107, dated Oct. 30, 2012, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00154">
<othercit>Final Office Action received in U.S. Appl. No. 12/876,085, dated Nov. 14, 2012, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00155">
<othercit>Final Office Action received in U.S. Appl. No. 12/879,956, dated Nov. 23, 2012, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00156">
<othercit>Information Disclosure Statement Transmittal Letter filed herewith on Nov. 30, 2012, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00157">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/188,161, dated May 10, 2012, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00158">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/879,956, dated Jun. 6, 2012, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00159">
<othercit>Non-Final Office Action received in U.S. Appl. No. 13/171,258, dated Jul. 13, 2012, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00160">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/876,082, dated Oct. 22, 2012, 18 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00161">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/916,348, dated Oct. 24, 2012, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00162">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/685,576, dated Nov. 2, 2012, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00163">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/906,904, dated Nov. 13, 2012, 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00164">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/877,918, dated Jun. 21, 2012, 31 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00165">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/877,918, dated Aug. 16, 2012, 22 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00166">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/877,918, dated Sep. 26, 2012, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00167">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/697,029, dated Aug. 17, 2012, 21 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00168">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/188,161, dated Oct. 10, 2012, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00169">
<othercit>&#x201c;Application Virtualization: A Technical Overview of the Thinstall Application Virtualization Platform,&#x201d; Thinstall (Nov. 26, 2006 (retrieved from the Internet Archive Wayback Machine on Dec. 2, 2011 at http://web.archive.org/web/20061124201334/http://thinstall.com/products/respurces<sub>&#x2014;</sub>geth.php?aid=5).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00170">
<othercit>Information Disclosure Statement Transmittal Letter filed herewith on Apr. 17, 2012, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00171">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/695,107, dated Dec. 8, 2011, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00172">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/188,155, dated Dec. 19, 2011, 19 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00173">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/876,085, dated Mar. 8, 2012, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00174">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/877,918, dated Mar. 19, 2012, 25 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00175">
<othercit>Restriction Requirement received in U.S. Appl. No. 12/188,161, dated Dec. 20, 2011, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00176">
<othercit>Restriction Requirement received in U.S. Appl. No. 12/876,085, dated Jan. 27, 2012, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00177">
<othercit>Susitaival, et al., &#x201c;Anaylizing the File Availability and Download Time in a P2P File Sharing System,&#x201d; IEEE, 2007, pp. 88-95.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00178">
<othercit>Final Office Action received in U.S. Appl. No. 13/171,258, dated Jan. 11, 2013, 33 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00179">
<othercit>Final Office Action received in U.S. Appl. No. 12/916,348, dated Jul. 11, 2013, 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00180">
<othercit>Final Office Action received in U.S. Appl. No. 13/449,140, dated Jul. 22, 2013, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00181">
<othercit>Final Office Action received in U.S. Appl. No. 13/088,265, dated Jul. 25, 2013, 33 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00182">
<othercit>Non-Final Office Action received in U.S. Appl. No. 13/088,265 , dated Dec. 12, 2012, 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00183">
<othercit>Non-Final Office Action received in U.S. Appl. No. 13/449,140, dated Dec. 7, 2012, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00184">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/188,155, dated Feb. 28, 2013, 22 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00185">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/876,085, dated Mar. 18, 2013, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00186">
<othercit>Non-Final Office Action received in U.S. Appl. No. 12/685,576, dated Jun. 20, 2013, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00187">
<othercit>Non Final Office Action received in U.S. Appl. No. 12/879,947, dated Jul. 10, 2013, 22 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00188">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/877,918, dated Apr. 26, 2013, 35 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00189">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/697,029, dated May 24, 2013, 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00190">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/188,161, dated Dec. 14, 2012, 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00191">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/188,161, dated Jan. 4, 2013, 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00192">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/876,082, dated May 10, 2013, 26 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00193">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/879,956, dated Feb. 21, 2013, 17 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00194">
<othercit>Notice of Allowance received in U.S. Appl. No. 12/188,155, dated Jun. 25, 2013, 11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00195">
<othercit>Restriction Requirement received in U.S. Appl. No. 12/705,492, dated Mar. 15, 2013, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00196">
<othercit>Information Disclosure Statement Transmittal Letter filed herewith, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00197">
<othercit>Notice of Allowance issued in U.S. Appl. No. 12/877,918, dated Aug. 20, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00198">
<othercit>Final Office Action issued in U.S. Appl. No. 12/906,904, dated Jul. 31, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00199">
<othercit>Notice of Allowance issued in U.S. Appl. No. 12/188,155, dated Oct. 25, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00200">
<othercit>Notice of Allowance issued in U.S. Appl. No. 12/876,085, dated Nov. 14, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00201">
<othercit>Notice of Allowance issued in U.S. Appl. No. 12/916,348, dated Nov. 13, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00202">
<othercit>Non-Final Rejection issued in U.S. Appl. No. 13/449,140, dated Nov. 15, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>7</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707781</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707822</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707824</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707827</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717174</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717175</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717176</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717177</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717178</main-classification>
</classification-national>
<classification-cpc-text>G06F 17/30233</classification-cpc-text>
<classification-cpc-text>G06F 21/53</classification-cpc-text>
<classification-cpc-text>G06F 2212/152</classification-cpc-text>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>21</number-of-drawing-sheets>
<number-of-figures>28</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12876085</doc-number>
<date>20100903</date>
</document-id>
<parent-status>PENDING</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13449049</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61361373</doc-number>
<date>20100702</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120203807</doc-number>
<kind>A1</kind>
<date>20120809</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Larimore</last-name>
<first-name>Stefan I.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Obata</last-name>
<first-name>Kenji C.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zeller</last-name>
<first-name>Mark Jeremy</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Larimore</last-name>
<first-name>Stefan I.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Obata</last-name>
<first-name>Kenji C.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Zeller</last-name>
<first-name>Mark Jeremy</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Davis Wright Tremaine LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Colburn</last-name>
<first-name>Heather M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Code Systems Corporation</orgname>
<role>02</role>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nguyen</last-name>
<first-name>Phong</first-name>
<department>2162</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method for directing download and execution of an application. A runtime engine receives an identifier of a block of shared memory from a directing process. The shared memory stores a map indicating which portions of an application file have been stored in a local copy of the application file. The runtime engine also receives an instruction from the directing process to execute the local copy when the local copy stores less than the entire application file. As the application executes, the runtime engine identifies requests from the application to access portions of the local copy and uses the map to determine whether the requested portions have been stored in the local copy. If the requested portions are not stored in the local copy, the runtime engine prevents the executing application from accessing the local copy until the map indicates the requested portions have been stored therein.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="114.47mm" wi="170.60mm" file="US08626806-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="246.72mm" wi="173.65mm" file="US08626806-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="262.13mm" wi="205.06mm" file="US08626806-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="240.28mm" wi="197.36mm" file="US08626806-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="246.72mm" wi="201.85mm" file="US08626806-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="242.91mm" wi="210.82mm" file="US08626806-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="233.26mm" wi="200.58mm" file="US08626806-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="162.14mm" wi="181.36mm" file="US08626806-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="226.23mm" wi="192.28mm" file="US08626806-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="246.04mm" wi="215.90mm" file="US08626806-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="251.88mm" wi="187.79mm" file="US08626806-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="240.28mm" wi="205.66mm" file="US08626806-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="265.94mm" wi="164.68mm" file="US08626806-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="238.93mm" wi="197.27mm" file="US08626806-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="118.53mm" wi="120.48mm" file="US08626806-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="217.25mm" wi="147.40mm" file="US08626806-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="201.25mm" wi="135.89mm" file="US08626806-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="252.48mm" wi="123.70mm" file="US08626806-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="199.90mm" wi="170.43mm" file="US08626806-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="251.21mm" wi="196.77mm" file="US08626806-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="192.87mm" wi="107.70mm" file="US08626806-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="247.40mm" wi="186.52mm" orientation="landscape" file="US08626806-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATION(S)</heading>
<p id="p-0002" num="0001">This application is a divisional of U.S. patent application Ser. No. 12/876,085, filed Sep. 3, 2010, which claims the benefit of U.S. Provisional Application No. 61/361,373, filed Jul. 2, 2010, which is incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Field of the Invention</p>
<p id="p-0004" num="0003">The present invention is directed generally to methods and systems for profiling access to a file that implements an application.</p>
<p id="p-0005" num="0004">2. Description of the Related Art</p>
<p id="p-0006" num="0005">A virtual application is a virtual machine image pre-configured with all of the files, registry data, settings, components, runtimes, and other dependencies required for a specific application to execute immediately and without installation on a host computing device. The virtual application is partially isolated from other applications implemented on a host computing device and partially isolated from an underlying host operating system installed and executing on the host computing device. The virtual application is encapsulated from the host operating system by a virtual runtime environment, which includes a virtual operating system, that receives operations performed by the virtualized application and redirects them to one or more virtualized locations (e.g., a virtual filesystem, virtual registry, and the like).</p>
<p id="p-0007" num="0006">Thus, the virtual application may be conceptualized as including two components: a virtualization runtime and a virtual application configuration. The virtualization runtime implements the virtual runtime environment, which implements various operating system application programming interfaces (&#x201c;APIs&#x201d;) in such a way that allows the executing virtual application to access and interact with items that may not be present on the host computer. The virtual application configuration includes data necessary to implement the virtual application within the virtualization runtime.</p>
<p id="p-0008" num="0007">The virtual application is stored in and implemented by one or more data files and/or executable files. Depending upon the implementation details, the one or more data files and/or executable files storing and implementing the virtual application may include blocks of data corresponding to each application file of a natively installed version of the application. Herein, these blocks of data will be referred to as &#x201c;virtual application files.&#x201d; The one or more data files and/or executable files storing and implementing the virtual application also include configuration information.</p>
<p id="p-0009" num="0008">The data files and/or executable files are configured to execute within a virtual runtime environment that is provided at least in part by the virtual operating system. When the virtual application is executed within the virtual runtime engine, the configuration information is used to configure the virtual operating system to execute the virtual application. For example, the configuration information may contain information related to the virtual application files, virtual registry entries, environment variables, services, and the like. The virtual operating system is configured to communicate with the host operating system as required to execute the virtual application on the host computing device.</p>
<p id="p-0010" num="0009">To download and execute a virtual application, a user must either use a specialized streaming protocol or download the entire virtualized application file before executing the application. Therefore, a need exists for a method and system configured to download and execute a virtualized application file without first downloading the entire file or using a specialized streaming protocol. The virtual application can be executed using less than the entire virtualized application file provided the executing virtual application does not request access to a portion of the file that has not been downloaded. Therefore, a need exists for a method or system that determines in which order the virtual application will request access to portions of the virtualized application file. A need also exists for systems and methods for managing the download and execution of a virtual application by a virtual runtime engine. The present application provides these and other advantages as will be apparent from the following detailed description and accompanying figures.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of a system for transferring a virtualized application file from a server computing device to a client computing device over a network.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is an illustration of a conceptualization of software components stored in a system memory of the client computing device of <figref idref="DRAWINGS">FIG. 1</figref>, the software components including a Client Application and a Sandbox Manager.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is an illustration of a conceptualization of software components stored in memory and executing on the server computing device of <figref idref="DRAWINGS">FIG. 1</figref>, the software components include a virtualized application file, and a virtual application authoring tool.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of a profiling process that records accesses made to the xlayer file by a virtual application as it executes.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of a method performed by a directing process implemented by the Sandbox Manager.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating transcripts, a combined transcript created based on the transcripts, and a directed graph structure constructed based on the combined transcript.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram of a method that may be performed by the Sandbox Manager and/or a Client Application.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram of a streaming model.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram of a method of building a streaming model for a particular application and distributing that streaming model across multiple server computing devices.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 10</figref> is an illustration of a ModelRequest table.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 11</figref> is an illustration of an application library database that includes an application table, an application version table, an xlayer table, and an xlayer version table.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 12</figref> is an illustration of a data schema that includes an XStreamModel table, an XFile table, a ServerXFile table, and a Server table.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 13</figref> is a diagram illustrating exemplary communications between a computing device operated by an application publisher or developer (labeled &#x201c;Client (Publisher)&#x201d;), the server computing device of <figref idref="DRAWINGS">FIG. 1</figref> (labeled &#x201c;Public Spoon Serve&#x201d;), and the model building server of <figref idref="DRAWINGS">FIG. 1</figref> (labeled &#x201c;Build Server&#x201d;).</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 14</figref> is an illustration of a block of memory shared by the Sandbox Manager and the virtual runtime engine during directed execution of a virtual application.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 15</figref> is an illustration of data structures uses to implement dynamic population of an xlayer file on the client computing device.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 16</figref> is an exemplary xsequence file format.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 17</figref> is an exemplary xblock format.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 18</figref> is a flow diagram of a method that may be performed by the Sandbox Manager.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 19</figref> is a block diagram of a streaming model.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 20</figref> is a flow diagram of a method of building the streaming model of <figref idref="DRAWINGS">FIG. 19</figref>.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 21</figref> is a flow diagram of a method of distributing streaming models.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 22</figref> is a flow diagram of a method of locating a streaming model.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 23</figref> is a flow diagram of a method of constructing the streaming model of <figref idref="DRAWINGS">FIG. 19</figref>.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 24</figref> is a block diagram of a state object.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 25</figref> is a block diagram of a transition data structure.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 26</figref> is a flow diagram of a method of encoding pages of a directed graph structure into xsequence files.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 27</figref> is a flow diagram of a method of starting a virtual application in a directed fashion.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 28</figref> is a diagram of a hardware environment and an operating environment in which one or more of the computing devices of the system of <figref idref="DRAWINGS">FIG. 1</figref> may be implemented.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a system <b>5</b> for downloading or otherwise transferring a virtualized application file stored on a server computing device <b>7</b> to a client computing device <b>9</b> over a network <b>10</b> (e.g., the Internet, a WAN, a LAN, a combination thereof, and the like). One or more additional computing devices, such as a second server computing device <b>6</b> and a computing device <b>11</b>, may also be coupled to the network <b>10</b>. In the embodiment illustrated, the server computing device <b>7</b> is implemented as a web server. The server computing device <b>7</b> may be connected to one or more additional computing devices. In the embodiment illustrated, the server computing device <b>7</b> is connected to a model building server <b>8</b>. Depending on the implementation details, the server computing device <b>7</b> may be connected to the model building server <b>8</b> by the network <b>10</b>.</p>
<p id="p-0040" num="0039">A diagram of hardware and an operating environment in conjunction with which implementations of the server computing device <b>7</b>, the model building server <b>8</b>, the client computing device <b>9</b>, the computing device <b>11</b>, and the network <b>10</b> may be practiced is provided in <figref idref="DRAWINGS">FIG. 28</figref> and described below.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a system memory <b>22</b>A of the client computing device <b>9</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>) storing a conventional operating system <b>35</b>A, that like most operating systems, includes a filesystem <b>126</b>A, a registry <b>128</b>A, and a process environment and threading subsystems component <b>130</b>A. A Client Application <b>132</b> (e.g., a web browser application) and a Sandbox Manager <b>134</b> are also stored in the system memory <b>22</b>A of the client computing device <b>9</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>). Optionally, the Client Application <b>132</b> may include a plug-in <b>136</b> or similar application. In the embodiment illustrated, the Client Application <b>132</b> communicates with the Sandbox Manager <b>134</b> over a communication link <b>138</b> that may be implemented as a Transmission Control Protocol (&#x201c;TCP&#x201d;) connection using TCP protocol. Each virtualized application file being transferred and/or executed may be identified by a unique session identifier (&#x201c;SessionId&#x201d;). A cache <b>139</b> may be stored on the filesystem <b>126</b>A for use by the Sandbox Manager <b>134</b>. The Sandbox Manager <b>134</b> and Client Application <b>132</b> are described in detail in U.S. patent application Ser. No. 12/695,107, filed on Jan. 27, 2010, and titled SYSTEM FOR DOWNLOADING AND EXECUTING A VIRTUAL APPLICATION, which is incorporated herein by reference.</p>
<p id="p-0042" num="0041">As explained above, a virtualized application file <b>140</b> is transferred to the client computing device <b>9</b> from the server computing device <b>7</b>. The virtualized application file <b>140</b> is illustrated in dashed lines to indicate that the virtualized application file <b>140</b> is stored in the cache <b>139</b> during and after the download. However, before the download begins, the virtualized application file <b>140</b> is not stored in the cache <b>139</b>. As will be explained below, the virtualized application file <b>140</b> may be an executable file or a file configured to execute within a virtualized environment provided by a virtual machine (or virtual runtime engine).</p>
<p id="p-0043" num="0042">The system memory <b>22</b>A stores one or more files implementing one or more virtual machines (or virtual runtime engines). By way of a non-limiting example, the system memory <b>22</b>A may include a plurality of virtual machine executable files <b>137</b> that when executed, each implement a different virtual machine. For example, each of the virtual machine executable files <b>137</b> may implement a different version of the same virtual machine. The virtual machine executable files <b>137</b> may be executed individually. When executed, a virtual machine executable file implements a virtualized environment. Execution of a virtual machine executable file may be initiated by the Sandbox Manager <b>134</b> using a command including a parameter (e.g., a file path) identifying a virtualized application file to execute. In response to receiving the parameter, the virtual machine executable file executes the identified virtualized application file inside the virtualized environment implemented by the virtual machine executable file. <figref idref="DRAWINGS">FIG. 2</figref> illustrates a virtual application <b>110</b> (implemented by the virtualized application file <b>140</b>) being executed by a virtual runtime engine <b>131</b>. The virtual runtime engine <b>131</b> may execute within an operating system shell process. Optionally, the virtual machine executable files <b>137</b> may be stored in the cache <b>139</b>.</p>
<p id="p-0044" num="0043">The Sandbox Manager <b>134</b> and the virtual runtime engine <b>131</b> may both have read/write access to a block of shared memory <b>133</b> that may be used to send settings and state information between the Sandbox Manager <b>134</b> and the virtual runtime engine <b>131</b>.</p>
<p id="p-0045" num="0044">The virtualized application file <b>140</b> includes a version identifier that may be used by the Sandbox Manager <b>134</b> to select which of the virtual machine executable files <b>137</b> is configured to execute the virtualized application file <b>140</b>.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a system memory <b>22</b>B of the server computing device <b>7</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>). The system memory <b>22</b>B stores a conventional host operating system <b>35</b>B, that like most operating systems, includes a host filesystem <b>126</b>B, a host registry <b>128</b>B, and a process environment and threading subsystems component <b>130</b>B. <figref idref="DRAWINGS">FIG. 3</figref> also illustrates an executable virtualized application file <b>140</b> stored in the system memory <b>22</b>B and configured to execute on the host operating system <b>35</b>A (see <figref idref="DRAWINGS">FIG. 2</figref>) of the client computing device <b>9</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>), optionally within a virtual machine implemented by a separate virtual machine executable file, without having been installed on the host operating system <b>35</b>B. The virtualized application file <b>140</b> may be configured to execute on the operating system <b>35</b>B of the server computing device <b>7</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>), optionally within a virtual machine (or virtual runtime engine) implemented by a separate virtual machine executable file, but this is not a requirement.</p>
<p id="p-0047" num="0046">In the embodiment illustrated, the system memory <b>22</b>B stores web server components <b>142</b> configured to implement a web server. The web server components <b>142</b> may be configured to provide a web page having one or more links to virtualized application files using standard Hypertext Transfer Protocol (&#x201c;HTTP&#x201d;) protocol. By way of non-limiting examples, the web server components <b>142</b> may include Internet Information Services (&#x201c;IIS&#x201d;) provided by Microsoft Corporation, Apache, and the like. While illustrated as being outside the filesystem <b>126</b>B, those of ordinary skill in the art appreciate that the virtualized application file <b>140</b> and the web server components <b>142</b> may be conceptualized as being within the filesystem <b>126</b>B.</p>
<p id="p-0048" num="0047">The virtualized application file <b>140</b> may include components necessary to implement a virtual runtime environment including a virtual operating system <b>120</b> configured to execute in the operating system <b>35</b>A (see <figref idref="DRAWINGS">FIG. 2</figref>) of the client computing device <b>9</b> (illustrated in <figref idref="DRAWINGS">FIG. 1</figref>). Alternatively, the virtual runtime environment may be implemented by one of the virtual machine executable files <b>137</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). The virtualized application file <b>140</b> includes components necessary to implement the virtual application <b>110</b> configured to execute in the virtual runtime environment (provided by the virtual runtime engine <b>131</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>). In particular embodiments, a single virtualized application file is used to implement both the virtual operating system <b>120</b> and the virtual application <b>110</b>. However, those of ordinary skill in the art appreciate that more than one virtualized application file may be used to implement the virtual operating system <b>120</b> and the virtual application <b>110</b>. For example, the components implementing the virtual runtime environment may be stored in one of the virtual machine executable files <b>137</b> (see <figref idref="DRAWINGS">FIG. 2</figref>) and the components implementing the virtual application <b>110</b> may be stored in the virtualized application file <b>140</b>. Further, one or more of the files used to implement the virtual application <b>110</b> may be other than an executable file having the &#x201c;exe&#x201d; file extension.</p>
<p id="p-0049" num="0048">The virtual operating system <b>120</b> includes a virtual filesystem <b>150</b>, a virtual registry <b>152</b>, and a virtual process environment and threading subsystems component <b>154</b>. The virtual application <b>110</b> interacts with the virtual filesystem <b>150</b>, virtual registry <b>152</b>, and virtual process environment and threading subsystems component <b>154</b>, instead of interacting directly with the host filesystem <b>126</b>A, the host registry <b>128</b>A, and the process environment and threading subsystems component <b>130</b>A of the host operating system <b>35</b>A illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. The virtual operating system <b>120</b> is configured to communicate with the host operating system <b>35</b>A illustrated in <figref idref="DRAWINGS">FIG. 2</figref> as required to execute the virtual application <b>110</b>.</p>
<p id="p-0050" num="0049">The virtual application <b>110</b> executes inside a virtual runtime environment provided at least in part by the virtual operating system <b>120</b>. Some virtual applications require one or more additional runtime environments to execute. For example, to execute a Flash application, the Flash runtime engine must also be installed. Therefore, to virtualize a Flash application, both the Flash application and Flash runtime engine must be included in the virtualized application file <b>140</b> and configured to execute in the portions of the virtual runtime environment provided by the virtual operating system <b>120</b>. Collectively, all runtime components necessary to execute the virtual application <b>110</b> will be referred to as a virtual runtime engine. However, those of ordinary skill in the art appreciate that the virtual runtime engine may include only the virtual operating system <b>120</b> and components of other additional runtime engines (e.g., the Flash runtime engine) required to execute the virtual application <b>110</b> may be loaded separately by the virtual operating system <b>120</b>. When executed, the virtual runtime engine generates, at least in part, the virtual runtime environment in which the virtual application <b>110</b> executes.</p>
<p id="p-0051" num="0050">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, a natively installed version of an application is configured to execute within a runtime environment provided at least in part by the host operating system <b>35</b>A. Typically, to execute within the runtime environment provided at least in part by the host operating system <b>35</b>A, a natively installed version of an application modifies the configuration and settings of the host operating system <b>35</b>A. For example, the natively installed version may install dynamic link libraries or change registry settings of the host operating system <b>35</b>A. In contrast, a virtual version of the same application may be executed on the host operating system <b>35</b>A without installation on the host operating system <b>35</b>A. Thus, the virtual application <b>110</b> does not modify the configuration or settings of the host operating system <b>35</b>A. For example, to execute the virtual application <b>110</b>, dynamic link libraries (&#x201c;dlls&#x201d;), data files, registry settings, environment variables, and the like need not be modified on to the host operating system <b>35</b>A.</p>
<p id="p-0052" num="0051">The virtualized application file <b>140</b> includes virtualized application files <b>123</b>A-<b>123</b>C corresponding to application files <b>111</b>A-<b>111</b>C of a natively installed version of the same application. The virtualized application files <b>123</b>A-<b>123</b>C are stored as blocks of data inside a configuration data block <b>121</b>. During execution, the virtualized application files <b>123</b>A-<b>123</b>C are accessed via the virtual filesystem <b>150</b>. The virtualized application files <b>123</b>A-<b>123</b>C include one or more startup executables. The virtualized application file <b>140</b> identifies one or more startup executables that are executed when the virtual application <b>110</b> is first executed. The startup executables may be identified in the configuration data block <b>121</b>.</p>
<p id="p-0053" num="0052">When the virtualized application file <b>140</b> is executed, the configuration data block <b>121</b> is used to configure the virtual operating system <b>120</b> to execute the virtual application. For example, the configuration data block <b>121</b> may contain configuration information related to the files in the virtual filesystem <b>150</b> (e.g., the virtualized application files <b>123</b>A-<b>123</b>C), entries in the virtual registry <b>152</b>, environment variables, services, and the like. The configuration data block <b>121</b> may also include basic application metadata and settings such as the application name, application version, and sandbox location. Further, the configuration data block <b>121</b> may provide isolation information to the virtual operating system <b>120</b>. This information indicates which virtualized application files <b>123</b>A-<b>123</b>C, virtual registry keys, virtual registry values, environment variables, and services are to be isolated from the host operating system <b>35</b>A.</p>
<p id="p-0054" num="0053">The configuration data block <b>121</b> may also include one or more virtual layers. Each virtual layer may identify files, registry entries, environment variables, and services. As the virtual layers are read, the corresponding files, registry entries, environment variables, and services are added to appropriate runtime data-structures. If the virtualized application file <b>140</b> is configured to execute on more than one host operating system, the configuration data block <b>121</b> may include a virtual layer for each operating system. In such an embodiment, each virtual layer includes information necessary to configure the virtual runtime environment to execute on a particular operating system. Further, the configuration data block <b>121</b> may include a virtual layer that includes configuration information common to the other virtual layers (e.g., a &#x201c;default&#x201d; virtual layer).</p>
<p id="p-0055" num="0054">To execute the virtual application <b>110</b>, an initialization process is first performed. During this process, the virtual operation system <b>120</b> is launched and configured by the configuration data block <b>121</b>. A component of the virtual runtime engine <b>131</b> referred to as a &#x201c;reader&#x201d; (not shown) reads data stored in the configuration data block <b>121</b> and uses that data to configure the virtual runtime environment. For example, the reader reads the virtual layer for the host operating system <b>35</b>A and any other applicable virtual layers and uses the information read to configure the virtual operation system <b>120</b> (and in some implementations, other components of the virtual runtime environment) to execute the virtual application <b>110</b> on the host operating system <b>35</b>A. The virtual filesystem <b>150</b> may be configured to mirror a host filesystem configured to execute a natively installed version of the application. Similarly, the virtual registry <b>152</b> may be configured to mirror a host registry configured to execute a natively installed version of the application.</p>
<p id="p-0056" num="0055">After the initialization process has completed, the appropriate startup executable(s) is/are launched inside the virtual operating system <b>120</b>. The virtual operating system <b>120</b> intercepts calls to the host operating system <b>35</b>A (see <figref idref="DRAWINGS">FIG. 2</figref>) and routes them to corresponding components of the virtual operating system <b>120</b>. For example, when the virtual application <b>110</b> requests to access an application file using a path of a natively installed version of the application, the virtual operating system <b>120</b> intercepts the request and routes the request to one of the virtualized application files <b>123</b>A-<b>123</b>C corresponding to the application file requested. The virtual operating system <b>120</b> may also route some requests and actions to the host operating system <b>35</b>A (see <figref idref="DRAWINGS">FIG. 2</figref>) for processing.</p>
<p id="p-0057" num="0056">The virtualized application file <b>140</b> is read-only and when executed, cannot be modified by the virtual application <b>110</b> or components of the virtual runtime engine <b>131</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). Therefore, modifications to the data stored in the configuration data block <b>121</b> (e.g., modifications to the virtualized application files <b>123</b>A-<b>123</b>C, modifications to the registry keys of the virtual registry <b>152</b>, and the like) are written to a readable and writable memory location referred to herein as a sandbox <b>124</b>. The sandbox <b>124</b> is a location on the host filesystem <b>126</b>A, a network share, a removable storage device, and the like whereat files may be created, modified, and deleted by the virtual application <b>110</b> at runtime. For example, when the virtual operating system <b>120</b> needs to create, modify, or delete a virtualized application file, the virtual operating system does so in the sandbox <b>124</b>. Similarly, if the virtual application <b>110</b> modifies a virtual registry value, the virtual registry value is changed in the sandbox <b>124</b>. The virtual operating system <b>120</b> may also route some requests and actions to the host operating system <b>35</b>A for processing.</p>
<p id="p-0058" num="0057">U.S. patent application Ser. No. 12/188,155, filed on Aug. 7, 2008, U.S. patent application Ser. No. 12/188,161 filed on Aug. 7, 2008, and U.S. patent application Ser. No. 12/685,576 filed on Jan. 11, 2010, all of which are incorporated herein by reference in their entireties, disclose systems that may be used to create and configure the virtualized application file <b>140</b>. As described in greater detail in U.S. patent application Ser. Nos. 12/188,155, 12/188,161, and 12/685,576, the virtualized application file <b>140</b> may be created by a virtual application executable constructor or authoring tool <b>170</b> using an application template that includes copies of files, such as a configuration file <b>202</b>, application files <b>111</b>A-<b>111</b>C, and the like, used to configure the virtualized application file <b>140</b>. However, the template is not a requirement. Instead, to build the virtualized application file <b>140</b>, the authoring tool <b>170</b> needs only the configuration file <b>202</b> and copies of any applications files <b>111</b>A-<b>111</b>C necessary for a natively installed version of the application to execute. The applications files <b>111</b>A-<b>111</b>C, and the configuration file <b>202</b> are referred to collectively as an application configuration <b>171</b>.</p>
<p id="p-0059" num="0058">The authoring tool <b>170</b> combines the application configuration <b>171</b> and the components of the virtual runtime engine (e.g., the virtual operating system <b>120</b>) into the executable virtualized application file <b>140</b>. Sometimes multiple virtual applications share a common set of virtual machine configuration settings or virtual runtime engine components. By way of a non-limiting example, multiple Flash applications may be configured to be executed by the same Flash runtime engine. Further, system administrators may want to share a common set of configuration options (e.g., browser bookmarks, application settings, etc.) across a department or enterprise. These settings may be stored in a file, referred to as an xlayer file <b>300</b>, and incorporated into one or more virtual application files at runtime by the virtual runtime engine <b>131</b>. Depending upon the implementation details, the authoring tool <b>170</b> may be used to create the xlayer file <b>300</b>.</p>
<p id="p-0060" num="0059">The xlayer file <b>300</b> cannot be executed directly from the host operating system <b>35</b>A and instead requires the virtual runtime environment supplied at least in part by the virtual operating system <b>120</b>. Like the configuration data block <b>121</b>, the xlayer file <b>300</b> may be read by the reader of the virtual runtime engine at runtime. The information stored within the xlayer file <b>300</b> may be made available to a virtual application (e.g., the virtual application <b>110</b>) via the virtual filesystem <b>150</b> and virtual registry <b>152</b> of the virtual operating system <b>120</b> at runtime. By way of a non-limiting example, the configuration data block <b>121</b> may specify a location on the host filesystem <b>126</b>A whereat the virtual runtime engine <b>131</b> is configured to look for xlayer files. If an xlayer file is located in the specified location, the xlayer file <b>300</b> may be read automatically by the reader of the virtual runtime environment. Alternatively, the virtual runtime engine <b>131</b> may be configured to look for xlayer files in a particular location each time the virtual application <b>110</b> is executed.</p>
<p id="p-0061" num="0060">The xlayer file <b>300</b> may be shared between users and used to supply virtual machine settings to multiple virtual applications. The xlayer file <b>300</b> may include all virtual registry and virtual filesystem information associated with a particular software component (e.g., a virtual runtime engine component), allowing the component to be fully installed in the virtual runtime environment. The xlayer file <b>300</b> may include all of the application data required to implement the virtual application <b>110</b> when executed by the virtual runtime engine <b>131</b>. The xlayer file <b>300</b> may be implemented as a binary file. The data in the xlayer file <b>300</b> may be organized in one or more virtual layers substantially similar to the virtual layers of the configuration data block <b>121</b> described above.</p>
<p id="p-0062" num="0061">As is apparent to those of ordinary skill in the art, the number of files and registry keys needed to implement a virtual application (such as the virtual application <b>110</b>) and/or a component encoded in the xlayer file <b>300</b> can be very large. For example, it is not uncommon for the number of files and registry keys needed to implement a virtual application to total in the tens of thousands. Therefore, the performance characteristics of the configuration data block <b>121</b> and the xlayer file <b>300</b> can affect the performance of the virtual application <b>110</b> significantly. In other words, the performance characteristics of the configuration data block <b>121</b> and/or the xlayer file <b>300</b> can increase or decrease the startup time for the virtual application <b>110</b>.</p>
<p id="p-0063" num="0062">Further, the size of the xlayer file <b>300</b> may affect an amount of time required to access data stored by the xlayer file <b>300</b>, which may affect the performance of the virtual application <b>110</b>. The size of the xlayer file <b>300</b> also affects an amount of time required to download (or otherwise communicate) the xlayer file <b>300</b> between computing devices (e.g., the computing devices <b>7</b> and <b>9</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>) and across a network (e.g., the network <b>10</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0064" num="0063">As is apparent to those of ordinary skill in the art, the configuration data block <b>121</b> and the xlayer file <b>300</b> store similar data and therefore, can be formatted in accordance with a common format. U.S. patent application Ser. No. 12/697,029, filed on Mar. 31, 2010, entitled Method and System for Improving Startup Performance and Interoperability of a Virtual Application, which is incorporated herein by reference in its entirety, describes a file format that may be used to configure the configuration data block <b>121</b> portion of the executable virtualized application file <b>140</b> and/or the xlayer file <b>300</b>.</p>
<heading id="h-0005" level="1">Xsequence Files</heading>
<p id="p-0065" num="0064">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, as mentioned above, the size of the xlayer file <b>300</b> may affect the amount of time required to access data stored by the xlayer file <b>300</b>, which may affect the performance of the virtual application <b>110</b>. The size of the xlayer file <b>300</b> also affects an amount of time required to download (or otherwise communicate) the xlayer file <b>300</b> between computing devices (e.g., from the server computing device <b>7</b> to the client computing device <b>9</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>) and across a network (e.g., the network <b>10</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0066" num="0065">Applications often store large amounts of data in a single file stored on a hard disk. For example, the virtual application <b>110</b> may be executed using one or more xlayer files (e.g., the xlayer file <b>300</b>). Unlike streaming media where a file is used in a linear fashion, some applications (e.g., the virtual application <b>110</b>) require random access to chunks of data, referred to herein as &#x201c;pages.&#x201d; Thus, the pages required by the end user (or the application) are retrieved from a file in a non-sequential fashion. In other words, the pages are accessed in non-predetermined sequences that may include some randomness and may be difficult to predict. Depending upon the implementation details, pages may have a predetermined size (e.g., 4 kilobytes, 10 kilobytes, etc.). Alternatively, pages may have non-uniform sizes.</p>
<p id="p-0067" num="0066">If during execution, an application suddenly requires access to a page that has not yet been downloaded, a delay must be introduced to download the page. Alternatively, execution of the application may end. To avoid this problem, when the xlayer file <b>300</b> is hosted on a web server (e.g., a web server implemented by the web server components <b>142</b> of the server computing device <b>7</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>), the user may download the entire xlayer file <b>300</b> to the client computing device <b>9</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref> before the virtual application <b>110</b> can be executed on the client computing device <b>9</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. The delay introduced by the download process greatly impacts the user experience. However, delays may be avoided by preemptively downloading pages before they are needed but, as mentioned above, preemptive downloading is difficult because which pages will be accessed by the application and when may be difficult to predict. Thus, it is desirable to download the pages in an order that is consistent with an order in which the application (when operated by a user) will request access to the pages.</p>
<p id="p-0068" num="0067">If there is a predictable pattern in the order in which the pages are requested by the application, the pages can be ordered and encoded into files that model this pattern. In this manner, the most commonly accessed pages or page sequences may be downloaded first. This improves access time and transmission efficiency. Depending upon the implementation details, this ordering and encoding allows the pages to be distributed using standard Hypertext Transfer Protocol (&#x201c;HTTP&#x201d;), which is a conventional download technology, and does not require the use of specialized streaming protocols. By way of additional non-limiting examples, the pages to be distributed using other conventional download protocols, including File Transfer Protocol (&#x201c;FTP&#x201d;), Server Message Block Protocol (&#x201c;SMB&#x201d;), and the like.</p>
<p id="p-0069" num="0068">For example, pages stored in a large single xlayer file (e.g., the xlayer file <b>300</b>) can be reordered and divided into a plurality of smaller files (referred to herein as &#x201c;xsequence files&#x201d;) encoded using a predetermined file format (referred to herein as &#x201c;xsequence file format,&#x201d; which is described in detail below). The xsequence file format is configured to store permutations of at least a portion of the pages stored in a larger file (e.g., the xlayer file <b>300</b>) and enables streaming distribution of the larger xlayer file. As mentioned above, the smaller xsequence files may be streamed over the Internet using conventional download methods thereby transferring the data of the xlayer file between different computing devices. Thus, the virtual application <b>110</b> may be launched by the client computing device <b>9</b> from the web without first downloading the entire xlayer file <b>300</b>. This may greatly decrease startup latency. The remaining portions of the xlayer file may be downloaded subsequently while the user interacts with the executing virtual application <b>110</b>.</p>
<p id="p-0070" num="0069">For ease of illustration, the file from which one or more xsequence files are created will be referred to as an &#x201c;original file.&#x201d; While the original file may be an xlayer file (e.g., the xlayer file <b>300</b>) having one or more of the file format(s) described in U.S. patent application Ser. No. 12/697,029, it is apparent to those of ordinary skill in the art that the original file may have a format other than the file format(s) described in U.S. patent application Ser. No. 12/697,029. For example, the original file may be an alternate encoding of a virtual machine or virtual application, a data file, an xml file, and the like. For ease of illustration, the original file is described below as implementing the virtual application <b>110</b>. However, as is apparent to those of ordinary skill in the art, the original file may implement other applications, including applications requiring installation on the client computing device <b>9</b> (see <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<heading id="h-0006" level="1">Profiling</heading>
<p id="p-0071" num="0070">Profiling generally refers to a method of analyzing an application (e.g., the virtual application <b>110</b>) to determine usage statistics. A profile or transcript of the application contains information about a single execution of the application such as the order of the page access, and the time spent in each transition between pages. The transcript may be stored in a transcript file <b>125</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). Multiple transcript files may be combined or merged to generate a streaming model <b>122</b> (illustrated in <figref idref="DRAWINGS">FIG. 19</figref> and described below).</p>
<p id="p-0072" num="0071">An application (e.g., the virtual application <b>110</b>) may implement one or more processes that are selectively executed as the application executes. As the virtual application <b>110</b> executes, it implements one or more such processes that each access the original file (e.g., the xlayer file <b>300</b>) to obtain information about the virtual application <b>110</b>. This information includes, but is not limited to, virtual environment settings, virtual filesystem information, virtual registry information, and the like. This information resides in various locations within the original file (e.g., the xlayer file <b>300</b>). Threads and processes spawned by the virtual application <b>110</b> as it executes may be treated as separate instances and merged together in the same transcript file in a manner similar to that used to merge multiple transcript files together (discussed below).</p>
<p id="p-0073" num="0072">A profiling process <b>700</b> described below may be used to determine an order in which blocks of data (pages) stored in a file are accessed by an executing application. For ease of illustration, the profiling process <b>700</b> will be described as being performed with the virtual application <b>110</b>. However, as is apparent to those of ordinary skill in the art, the profiling process <b>700</b> may be performed with other types of applications, including applications requiring installation on the client computing device <b>9</b> (see <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0074" num="0073">The profiling process <b>700</b> profiles usage of the virtual application <b>110</b> to generate transcript files (such as the transcript file <b>125</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>) that are used to generate a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) that specifies an order in which pages are downloaded from the server computing device <b>7</b> to the client computing device <b>9</b>. While the xlayer file <b>300</b> may be thought of as generally opaque, data is written sequentially within the xlayer file <b>300</b>. Furthermore, virtual files within a specific virtual directory are generally written sequentially, one after the other. The same can be said for virtual registry keys and values. Therefore, profiling access to the xlayer file <b>300</b> is substantially similar to profiling access to the underlying files and registry entries of a natively installed application.</p>
<p id="p-0075" num="0074">As mentioned above, the Sandbox Manager <b>134</b> (see <figref idref="DRAWINGS">FIG. 2</figref>) may execute the virtual application <b>110</b> (inside the virtual runtime engine <b>131</b>). As will be explained below, the Sandbox Manager <b>134</b> may implement a directing process <b>129</b> (see <figref idref="DRAWINGS">FIG. 2</figref>) configured to collect profile information that may be used to profile the virtual application's access to the underlying original file (e.g., the xlayer file <b>300</b>). Such profile information may be used to perform statistical analysis of a software application (e.g., the virtual application <b>110</b>) to create a model of its data consumption. The profile information may also be used to make runtime adjustments in real-time to the data-delivery schedule (described in the Modeling Subsection below). The data-delivery schedule being the order in which data or pages are organized in the xsequence files and/or the order in which the xsequence files are delivered to the client computing device <b>9</b>.</p>
<p id="p-0076" num="0075">The information stored in the transcript files (generated by the profiling process <b>700</b>) is then used to divide the original file into pages that are loaded onto the server computing device <b>7</b> for download to the client computing device <b>9</b>. The server computing device <b>7</b> streams the xsequence files to the client computing device <b>9</b> through the Client Application <b>132</b> and the Sandbox Manager <b>134</b> that together download and execute the pages.</p>
<p id="p-0077" num="0076">The profiling process <b>700</b> described herein may be used to perform accurate and low-overhead profiling of a virtual application's access to an underlying xlayer file. Depending upon the implementation details, the profiling process <b>700</b> may include the use of per-thread data structures and named-pipes to communicate to the directing process <b>129</b> that by the executing virtual application <b>110</b> has requested access to raw block level data (stored in the original file, e.g., the xlayer file <b>300</b>). The term &#x201c;per-thread data structure&#x201d; refers to a data structure corresponding to a single thread. Thus, a separate per-thread data structure may be created for each thread used by an application (e.g., the virtual application <b>110</b>). A ThreadDiscriminate value is sent to the Sandbox Manager <b>134</b> by the virtual runtime engine <b>131</b> when a thread is created. The ThreadDiscriminate value is an entry point discriminator for the thread accessing the xlayer file. An example method of generating the ThreadDiscriminate value is described below.</p>
<p id="p-0078" num="0077">The profiling process <b>700</b> is performed using a PseudoPid value and a PseudoTid value. The PseudoPid value and the PseudoTid value are determined by the virtual runtime engine <b>131</b>.</p>
<p id="p-0079" num="0078">The PseudoPid value is a unique process identifier of the application process accessing the original file (e.g., the xlayer file <b>300</b>). Because operating system allocated process identifiers (&#x201c;Pid&#x201d; values) can be recycled and reused, a unique identifier (the PseudoPid value) is generated for each process. The PseudoPid value may be generated by performing a hash function using the operating system allocated Pid value and the current system time as input parameters. For example, the following pseudo code may be used to generate the PseudoPid value:</p>
<p id="p-0080" num="0079">PseudoPid=Hash(GetCurrentProcessId( ), GetSystemTime( )).</p>
<p id="p-0081" num="0080">The hash function performed may be a 32-bit &#x201c;good&#x201d; hash function. Those of ordinary skill in the art are familiar with good hash functions. Therefore, such functions will not be described herein.</p>
<p id="p-0082" num="0081">Furthermore, because operating system allocated thread identifiers (&#x201c;Tid&#x201d; values) can be recycled and reused, a unique identifier (the PseudoTid value) is generated for each thread. The PseudoTid value may be generated by performing a hash function using the operating system allocated Tid value and the current system time as input parameters. For example, the following pseudo code may be used to generate the PseudoTid value:</p>
<p id="p-0083" num="0082">PseudoTid=Hash(GetCurrentThreadId( ), GetSystemTime( ))</p>
<p id="h-0007" num="0000">The hash function performed may be a 32-bit &#x201c;good&#x201d; hash function.</p>
<p id="p-0084" num="0083">Thus, there may be three different scopes for the profiling process <b>700</b>: Session, Process, and Thread. Session scope includes the profiling context of a single execution of the virtual application <b>110</b>. As is apparent to those of ordinary skill in the art, during execution, the virtual application <b>110</b> may include multiple processes and multiple threads.</p>
<p id="p-0085" num="0084">Process scope refers to the lifetime of a single process instance (given a unique PseudoPid value, described below) within a session. If two or more virtualized application files are launched more than once, a separate process for each launched file (each having a different PseudoPid value) and a separate process contexts for each launched file are created (or recorded) within a transcript. If the same virtualized application file is launched more than once, execution statistics recorded for each process can be aggregated using the name of the virtualized application file (or other identifier) to identify execution statistics associated with the same virtualized application file.</p>
<p id="p-0086" num="0085">Thread scope refers to the lifetime of a single thread instance (given a unique PseudoTid value, described below) within a process (and therefore session). Different threads may be identified in the transcript using the ThreadDiscriminate value (described below). If a thread with the same ThreadDiscriminate value is launched more than once, execution statistics recorded for the thread (having that ThreadDiscriminate value) can be aggregated using the ThreadDiscriminate value (or other identifier) to identify execution statistics associated with the same thread or similar threads. As is apparent to those of ordinary skill in the art, because the ThreadDiscriminate value stores an identifier (e.g., a file name) of an entry point module (e.g., a Dynamic Link Library &#x201c;dll&#x201d; file, an executable file, and the like) and a relative offset within the module whereat execution of the thread began, different threads may have the same ThreadDiscriminate value.</p>
<p id="p-0087" num="0086">Each time the virtual application <b>110</b> accesses the original file, access information (including one or more execution statistics) is recorded. For example, each time the virtual application <b>110</b> accesses the original file (e.g., the xlayer file <b>300</b>), the Sandbox Manager <b>134</b> may record a PseudoTid value, an xlayerId value, an AccessOffset value, an AccessBytes value, a TickCount value, and flags. This access is associated with the PseudoPid value of the process that created the thread.</p>
<p id="p-0088" num="0087">The xlayerId value is an identifier of the xlayer file <b>300</b>. The xlayerId value may be a hash (e.g., a &#x201c;good&#x201d; hash) of the path of the xlayer file <b>300</b>. The AccessOffset value is an offset in bytes of the portion of the xlayer file <b>300</b> accessed. The AccessBytes value is a size in bytes of the portion of the xlayer file <b>300</b> accessed. The TickCount value is a current Operating System (&#x201c;OS&#x201d;) tick count at the time the xlayer file <b>300</b> is accessed. The flags may include a Blocked value implemented as Boolean field. The Blocked value indicates whether the virtual runtime engine <b>131</b> and/or the virtual application <b>110</b> is/are blocked from further execution of the page for which access is requested.</p>
<p id="p-0089" num="0088">During performance of the profiling process <b>700</b>, data is recorded for each process over its lifetime. Thus, each process is tracked over the duration of its lifetime. Optionally, shutdown notifications may not be tracked. During performance of the profiling process <b>700</b>, data is recorded for each thread over its lifetime. Thus, each thread is tracked over the duration of its lifetime. Optionally, thread-shutdown notifications may not be tracked.</p>
<p id="p-0090" num="0089">When the profiling process <b>700</b> is performed, it may be useful to aggregate statistics collected for the same application code path. A thread discriminate (the ThreadDiscriminate value) is used to identify a code path by its starting point. The ThreadDiscriminate value may be obtained by performing a hash function using the name of the entry point module (e.g., a file name) and the entry point relative offset within the module as input parameters. Optionally, the name of the entry point module may include the file path. The hash function performed may be a 32-bit &#x201c;good&#x201d; hash function. For example, if the entry point for the thread was in a file named &#x201c;myapplogic.dll,&#x201d; and at an offset of 0x10025, the hash function is performed on the bytes of the string &#x201c;myapplogic.dll&#x201d; using the offset (0x10025) as a seed value. The ThreadDiscriminate value for any xlayer access from this thread is set to the resulting value generated by the hash function. For example, the following pseudo code may be used to generate the ThreadDiscriminate value:</p>
<p id="p-0091" num="0090">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>ThreadDiscriminate = Hash(&#x3c;module name&#x3e;,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2002;&#x3c;relative entry point offset</entry>
</row>
<row>
<entry/>
<entry>in bytes&#x3e;)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0092" num="0091">The ThreadDiscriminate value may be stored in a per-thread data structure. The following is a non-limiting example of such a structure:</p>
<p id="p-0093" num="0092">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct CVmTlsData</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>DWORD UniqueThreadId;</entry>
</row>
<row>
<entry/>
<entry>DWORD Discriminant;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0094" num="0093">By way of a non-limiting example, the ThreadDiscriminate value may be stored in a per-thread data structure (e.g., the structure &#x201c;CVmTIsData&#x201d;) using dynamic thread-local-storage mechanisms via Win32::TIsGetValue and ::TIsSetValue APIs. As is apparent to those of ordinary skill in the art, thread-local-storage mechanisms refer to storing data in a thread-local-storage location that is accessible only by a thread associated with the thread-local-storage location. The ThreadDiscriminate value and/or the PseudoTid value for a particular thread may be stored in the thread-local-storage location associated with the particular thread. The thread may look up the ThreadDiscriminate value and/or the PseudoTid stored in the thread-local-storage location and provide such information to the virtual runtime engine <b>131</b>, which may in turn, communicate the information to the directing process <b>129</b>.</p>
<p id="p-0095" num="0094">The structure may be initialized at thread creation time. By way of a non-limiting example, hooking the CreateThread system call may be used to initialize the structure at thread creation time. In other words, an instance of the structure &#x201c;CVmTIsData&#x201d; may be created in response to each detection of the CreateThread system call by the hook on the CreateThread system call. Hooking the CreateThread system call is a technique known to those of ordinary skill in the art and will not be described in detail.</p>
<p id="p-0096" num="0095">When an application thread is created, a PseudoTid value and ThreadDiscriminate value are determined as described above. Then, memory for the structure &#x201c;CVmTIsData&#x201d; is allocated, and the structure &#x201c;CVmTIsData&#x201d; is saved in thread-local-storage. By way of a non-limiting example, the structure may be saved in thread-local-storage via the Win32::TIsSetValue API. By way of another non-limiting example, the following pseudo code may be used to create a per-thread data structure, which in this example, is the structure &#x201c;CVmTIsData.&#x201d;</p>
<p id="p-0097" num="0096">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Intercept application thread creation</entry>
</row>
<row>
<entry/>
<entry>On new thread creation Do</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>CVmTlsData data = AllocateMemory (sizeof(CVmTlsData))</entry>
</row>
<row>
<entry/>
<entry>data.PseudoTid = Hash(GetCurrentThreadId( ),</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>GetSystemTime( ))</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>data.Discriminate = Hash(&#x3c;module name&#x3e;, &#x3c;relative</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>entry point offset in</entry>
</row>
<row>
<entry/>
<entry>bytes&#x3e;)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>::TlsSetValue(VM_TLS_INDEX, data)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0098" num="0097">After the PseudoTid value and the ThreadDiscriminate value are stored in the per-thread data structure (e.g., the structure &#x201c;CVmTIsData&#x201d;), each access to the original file (e.g., the xlayer file <b>300</b>) during execution of the virtual application <b>110</b> is recorded by the Sandbox Manager <b>134</b> in a transcript file <b>125</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). By way of a non-limiting example, the transcript file <b>125</b> may have a simple binary format and may use the extension &#x201c;xt.&#x201d; The transcript file <b>125</b> may include a header followed by a series of tuples that each include a thread identifier (e.g., the PseudoTid value), a timestamp value, and a block identifier or number. Optionally, the transcript file <b>125</b> may also store the PseudoPid value. In the transcript file <b>125</b>, the tuples may be organized by process (or PseudoPid value) in a hierarchical structure.</p>
<p id="p-0099" num="0098">Named pipe communication may be used to provide communication between the virtual runtime engine <b>131</b> and the directing process <b>129</b> (implemented by the Sandbox Manager <b>134</b>). Thus, the directing process <b>129</b> may &#x201c;listen&#x201d; to the virtual runtime engine <b>131</b> over at least one named pipe connection <b>127</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. Those of ordinary skill in the art are familiar with the use of named pipes as a means of implementing communication between processes. Therefore, named pipes will not be described in further detail.</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of the profiling process <b>700</b> that records accesses made to the original file (e.g., the xlayer file <b>300</b>) by the virtual application <b>110</b> as it executes.</p>
<p id="p-0101" num="0100">In first block <b>710</b>, the virtual runtime engine <b>131</b> receives an instruction from the Sandbox Manager <b>134</b> to execute the virtual application <b>110</b> in profiling mode. As will be described in more detail below, the virtual runtime engine <b>131</b> may also receive information (e.g., the SessionId value, and the path to the xlayer file) from the Sandbox Manager <b>134</b>.</p>
<p id="p-0102" num="0101">Then, in block <b>715</b>, the virtual runtime engine <b>131</b> begins execution of the virtual application <b>110</b> in profiling mode.</p>
<p id="p-0103" num="0102">In block <b>717</b>, the virtual runtime engine <b>131</b> connects to the named pipe of the Sandbox Manager <b>134</b> to form the named pipe connection <b>127</b>.</p>
<p id="p-0104" num="0103">In block <b>718</b>, the virtual runtime engine <b>131</b> constructs a message containing the SessionId value received from the Sandbox Manager <b>134</b> in block <b>710</b> and optionally other information (e.g., the Pid value, the PseudoPid value, a ProcessName value, and a Process Name Length value). This message signals the start of a new process. The virtual application <b>110</b> is associated with a process that may launch one or more additional processes. Thus, the first message received by the Sandbox Manager <b>134</b> signals the start of the virtual application <b>110</b>. The Pid value in the first message is associated with the virtual application <b>110</b> itself. By way of a non-limiting example, the Pid value may be obtained using a function named &#x201c;::GetCurrentProcessId( )&#x201d; As mentioned above, the PseudoPid value may be obtained using a hash function. By way of a non-limiting example, the ProcessName value may be obtained using a function named &#x201c;GetStartupExecutableName( )&#x201d; The ProcessName value is a file name of the entry point executable file of the process. For example, the ProcessName value may be the filename of the original file (e.g., the xlayer file <b>300</b>). However, this is not always the case. The ProcessName value may not be the filename of the original file (e.g., the xlayer file <b>300</b>). The ProcessName Value may be used to merge statistics across processes having the same name.</p>
<p id="p-0105" num="0104">The following structure named &#x201c;SProcessConnectMessage&#x201d; may be used to construct the message containing the new process information.</p>
<p id="p-0106" num="0105">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct SProcessConnectMessage</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>ULONGLONG SessionId;</entry>
</row>
<row>
<entry/>
<entry>DWORD Pid;</entry>
</row>
<row>
<entry/>
<entry>DWORD PseudoPid;</entry>
</row>
<row>
<entry/>
<entry>DWORD NameLength;</entry>
</row>
<row>
<entry/>
<entry>WCHAR Name[CWC_MAX_PROCESS_NAME+1];</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0107" num="0106">In the above pseudo code, the Name variable stores the ProcessName value. The message constructed in block <b>718</b> may inform listeners (e.g., the directing process <b>129</b>) that a new process is starting. The message may be sent by the virtual runtime engine <b>131</b> to the Sandbox Manager <b>134</b> once for each PseudoPid value.</p>
<p id="p-0108" num="0107">Then, in block <b>719</b>, the virtual runtime engine <b>131</b> sends the message constructed in block <b>718</b> to the directing process <b>129</b> implemented by the Sandbox Manager <b>134</b>. At this point, communication between the Sandbox Manager <b>134</b> and the virtual runtime engine <b>131</b> has been properly initialized, and messages including statistics may be sent from the virtual runtime engine <b>131</b> to the Sandbox Manager <b>134</b> for recordation in a transcript file.</p>
<p id="p-0109" num="0108">In next block <b>720</b>, all read operations (e.g., IStream::Read operations) performed by the virtual application <b>110</b> with respect to the original file (e.g., the xlayer file <b>300</b>) are monitored. This may be achieved by abstracting access to the original file through the standard IStream interface, which is used to read data from the original file. The IStream interface is configured to read from and write data to stream objects. Those of ordinary skill in the art are familiar with reading data from a file (such as the xlayer file <b>300</b>) and this process will not be described in detail.</p>
<p id="p-0110" num="0109">In decision block <b>725</b>, the virtual runtime engine <b>131</b> determines whether a read operation is being performed on the original file (e.g., the xlayer file <b>300</b>) or execution of the virtual application <b>110</b> has terminated. The decision in decision block <b>725</b> is &#x201c;ACCESS&#x201d; when a read operation has been detected by the virtual runtime engine <b>131</b>. The decision in decision block <b>725</b> is &#x201c;TERMINATED&#x201d; when the virtual runtime engine <b>131</b> detects execution of the virtual application <b>110</b> has terminated.</p>
<p id="p-0111" num="0110">A method of detecting when execution of the virtual application <b>110</b> has terminated is described below. When the decision in decision block <b>725</b> is &#x201c;TERMINATED,&#x201d; the method <b>700</b> terminates.</p>
<p id="p-0112" num="0111">When the decision in decision block <b>725</b> is &#x201c;ACCESS,&#x201d; in decision block <b>755</b>, the virtual runtime engine <b>131</b> determines whether this is the first time the thread associated with the PseudoTid has accessed the xlayer file. The data stored in the per-thread data structures (e.g., the structures &#x201c;CVmTIsData&#x201d; described above) may be used to determine whether this is the first time the thread associated with the PseudoTid value has accessed the original file. The decision in decision block <b>755</b> is &#x201c;YES&#x201d; when this is the first time the thread associated with the PseudoTid value has accessed the xlayer file. Otherwise, the decision in decision block <b>755</b> is &#x201c;NO&#x201d; when this is not the first time the thread associated with the PseudoTid value has accessed the xlayer file.</p>
<p id="p-0113" num="0112">When the decision in decision block <b>755</b> is &#x201c;NO,&#x201d; the virtual runtime engine <b>131</b> advances to block <b>730</b>.</p>
<p id="p-0114" num="0113">When the decision in decision block <b>755</b> is &#x201c;YES,&#x201d; in block <b>740</b>, the virtual runtime engine <b>131</b> stores the new thread information (e.g., the PseudoTid value, and the ThreadDiscriminate value). In block <b>740</b>, both of the PseudoTid value and the ThreadDiscriminate value may be stored in the per-thread data structure (e.g., the structure &#x201c;CVmTIsData&#x201d;). By way of a non-limiting example, these values may be obtained via the Win32::TIsGetValue API.</p>
<p id="p-0115" num="0114">Then, in block <b>760</b>, the virtual runtime engine <b>131</b> constructs a message containing the new thread information (e.g., the PseudoTid value and the ThreadDiscriminate value). The message constructed in block <b>760</b> is sent by the virtual runtime engine <b>131</b> to the Sandbox Manager <b>134</b> once for each PseudoTid value. The following structure named &#x201c;SThreadStartedMessage&#x201d; may be used to construct the message containing the new thread information.</p>
<p id="p-0116" num="0115">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct SThreadStartedMessage</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="105pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>DWORD</entry>
<entry>PseudoTid;</entry>
</row>
<row>
<entry/>
<entry>DWORD</entry>
<entry>Discriminate;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0117" num="0116">The variable named &#x201c;Discriminate&#x201d; in the above pseudo code stores a ThreadDiscriminate value that is sent when a new thread is created. The ThreadDiscriminate value is an entry point discriminator for the thread accessing the original file (e.g., the xlayer file <b>300</b>).</p>
<p id="p-0118" num="0117">In block <b>765</b>, the virtual runtime engine <b>131</b> sends the message constructed in block <b>760</b> to the Sandbox Manager <b>134</b>. Then, the virtual runtime engine <b>131</b> advances to block <b>730</b>.</p>
<p id="p-0119" num="0118">In block <b>730</b>, an offset value indicating where in the original file the read operation started and a length value indicating an amount of the original file read are recorded. The offset may be implemented as a 64-bit value. The PseudoTid value is also recorded. Further, the current process tick count is recorded as the TickCount value.</p>
<p id="p-0120" num="0119">In next block <b>750</b>, a message including the information recorded above (e.g., the PseudoTid value, the xlayerId value, the AccessOffset value, the AccessBytes value, the TickCount value, and flags) is constructed. The message also includes an xlayerId value that is an identifier of the original file (e.g., the xlayer file <b>300</b>). By way of a non-limiting example, the message may be implemented using the following data structure (named &#x201c;SFeedbackStatsMessage&#x201d;):</p>
<p id="p-0121" num="0120">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct SFeedbackStatsMessage</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="84pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>DWORD</entry>
<entry>PseudoTid;</entry>
</row>
<row>
<entry/>
<entry>DWORD</entry>
<entry>XLayerId;</entry>
</row>
<row>
<entry/>
<entry>DWORD</entry>
<entry>Flags;</entry>
</row>
<row>
<entry/>
<entry>DWORD</entry>
<entry>TickCount;</entry>
</row>
<row>
<entry/>
<entry>ULONGLONG</entry>
<entry>AccessOffset;</entry>
</row>
<row>
<entry/>
<entry>ULONGLONG</entry>
<entry>AccessBytes;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
In the data structure named &#x201c;SFeedbackStatsMessage,&#x201d; a flags member may store the Blocked value (discussed above).
</p>
<p id="p-0122" num="0121">In summary, the Sandbox Manager <b>134</b> sends the SessionId value and the path of the original file to the virtual runtime engine <b>131</b>. The xlayerId value may be determined by performing a hash function (e.g., a &#x201c;good&#x201d; hash function) on the path. When a new process accesses the original file, the virtual runtime engine <b>131</b> sends the SessionId value, the Pid value, the PseduoPid value, the ProcessName value, and the Process Name Length value to the Sandbox Manager <b>134</b>. The Sandbox Manager <b>134</b> may use this information to associate processes with the session identified by the SessionId value. Because two different sessions launched under the directing process <b>129</b> (see <figref idref="DRAWINGS">FIG. 2</figref>) may use the same xlayerId value, the SessionId value is send to the Sandbox Manager <b>134</b> to inform the Sandbox Manager as to which child session sent the information to the directing process <b>129</b> (see <figref idref="DRAWINGS">FIG. 2</figref>).</p>
<p id="p-0123" num="0122">When a new thread accesses the original file, the virtual runtime engine <b>131</b> sends the PseudoTid value and the ThreadDiscriminate value to the Sandbox Manager <b>134</b>. For each read operation performed by the virtual application <b>110</b> on the original file, the virtual runtime engine <b>131</b> sends the PseudoTid value, the xlayerId value, the AccessOffset value, the AccessBytes value, the TickCount value, and flags to the Sandbox Manager <b>134</b>. The Sandbox Manager <b>134</b> may use this information to associate each read operation with the original file identified by the xlayerId value and the thread identified by the PseudoTid value. The xlayerId value is used because a single session may include the execution of one or more application file in addition to the original file.</p>
<p id="p-0124" num="0123">Then, in block <b>752</b>, the virtual runtime engine <b>131</b> sends the message &#x201c;SFeedbackStatsMessage&#x201d; to the directing process <b>129</b>. Then, the virtual runtime engine <b>131</b> returns to block <b>720</b>.</p>
<p id="p-0125" num="0124">The following pseudo code provides a non-limiting example of an implementation of the blocks <b>755</b>, <b>740</b>, <b>760</b>, <b>765</b>, <b>730</b>, <b>750</b>, and <b>752</b> of the profiling process <b>700</b> described above.</p>
<p id="p-0126" num="0125">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Method CaptureXLayerAccess(AccessOffset, AccessBytes)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>CVmTlsData tlsData = ::TlsGetValue(VM_TLS_INDEX)</entry>
</row>
<row>
<entry/>
<entry>PseudoTid = tlsData.UniqueThreadId</entry>
</row>
<row>
<entry/>
<entry>ThreadDiscriminate = tlsData.Discriminant</entry>
</row>
<row>
<entry/>
<entry>TickCount = ::GetTickCount( )</entry>
</row>
<row>
<entry/>
<entry>If FirstTimeSeen(PseudoTid) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>SThreadStartedMessage msgNewThread</entry>
</row>
<row>
<entry/>
<entry>msgNewThread.PseusoTid = PseudoTid</entry>
</row>
<row>
<entry/>
<entry>msgNewThread.Discriminate = ThreadDiscriminate</entry>
</row>
<row>
<entry/>
<entry>SendMessageToDirectingProcess(msgNewThread)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry>SFeedbackStatsMessage msgStats</entry>
</row>
<row>
<entry/>
<entry>msgStats.PseudoTid = PseudoTid</entry>
</row>
<row>
<entry/>
<entry>msgStats.TickCount = TickCount</entry>
</row>
<row>
<entry/>
<entry>msgStats.AccessOffset = AccessOffset</entry>
</row>
<row>
<entry/>
<entry>msgStats.AccessBytes = AccessBytes</entry>
</row>
<row>
<entry/>
<entry>SendMessageToDirectingProcess(msgStats)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0127" num="0126">If the virtual application <b>110</b> initiates a child process, the virtual runtime engine <b>131</b> will perform block <b>718</b> using the same SessionId received in block <b>710</b>. The named pipe connection <b>127</b> created in block <b>717</b> is used for child processes.</p>
<p id="p-0128" num="0127">It may be beneficial if the profiling process <b>700</b> has as little affect on the running application as possible. In such implementations, communication mechanisms may be very fast and invisible to the running application itself. Using the named pipe of the Sandbox Manager <b>134</b> to provide communication between the virtual runtime engine <b>131</b> and the directing process <b>129</b> may provide such benefits. Thus, the messages sent in blocks <b>719</b>, <b>752</b>, and <b>765</b> may be sent over the named pipe connection(s) <b>127</b>.</p>
<p id="p-0129" num="0128">On the WINDOWS&#xae; platform, named pipes are implemented with multiple instance support. Thus, multiple clients (e.g., virtual runtime engines) can communicate with a single named pipe server (implemented by the Sandbox Manager <b>134</b>), with each client having an isolated connection to the same named pipe. In other words, each process (even processes started by the process associated with the virtual application) will connect separately to the named pipe server. On the named pipe server (implemented by the Sandbox Manager <b>134</b>), multiple connections are handled via a unique connection handle for each client (e.g., virtual runtime engine). Thus, each virtual runtime engine running a virtual application can connect to the name pipe of the same Sandbox Manager <b>134</b> and send statistics to the single Sandbox Manager.</p>
<p id="p-0130" num="0129">One named pipe connection per process may be used. In such implementations, access to the named pipe from multiple threads may be serialized within a process via a critical section. This may impact performance of the virtual application <b>110</b> slightly. However, the size of the data being sent is small and named pipe communication is inherently fast. Thus, this method may provide satisfactory performance.</p>
<p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of a method <b>800</b> performed by the directing process <b>129</b> implemented by the Sandbox Manager <b>134</b>. When the virtual application <b>110</b> is launched by the Sandbox Manager <b>134</b> (e.g., by a command received by the virtual runtime engine <b>131</b> from the Sandbox Manager <b>134</b> in block <b>710</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>), the Sandbox Manager <b>134</b> may provide information (e.g., one or more command line parameters) to the virtual runtime engine <b>131</b>. This information may include the SessionId value and the path to the original file (e.g., the xlayer file <b>300</b>). The SessionId value may be the same session identifier value used by a connection between the Client Application <b>132</b> (e.g., the plug-in <b>136</b>) and the Sandbox Manager <b>134</b> (described in U.S. patent application Ser. No. 12/695,107). The SessionId value is passed to the virtual runtime engine <b>131</b> so the directing process <b>129</b> can associate all statistics with the correct virtual application instance, in the event multiple virtual applications are executing and being profiled concurrently.</p>
<p id="p-0132" num="0131">In first block <b>810</b>, the Sandbox Manager <b>134</b> obtains information (e.g., command line parameters) to send to the virtual runtime engine <b>131</b> along with a command to execute the virtual application <b>110</b> in profiling mode. By way of a non-limiting example, the SessionId may have been obtained via a /XExecutionSession command line parameter.</p>
<p id="p-0133" num="0132">In block <b>815</b>, the Sandbox Manager <b>134</b> sends the information and a command to execute the virtual application <b>110</b> in profiling mode to the virtual runtime engine <b>131</b>. The virtual runtime engine <b>131</b> knows it was started by a parent process (the directing process <b>129</b> of the Sandbox Manager <b>134</b>). With that information, the virtual runtime engine <b>131</b> initiates the named pipe communication with the Sandbox Manager <b>134</b> to send messages (including those with execution statistics) to the directing process <b>129</b>.</p>
<p id="p-0134" num="0133">The execute command and the SessionId value are received by the virtual runtime engine <b>131</b> in block <b>710</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref> and described above.</p>
<p id="p-0135" num="0134">As discussed above, while the virtual application <b>110</b> is executing in profiling mode, the Sandbox Manager <b>134</b> may receive messages from the virtual runtime engine <b>131</b> and generate events in response to those messages.</p>
<p id="p-0136" num="0135">In decision block <b>820</b>, the Sandbox Manager <b>134</b> determines whether it has received a message from the virtual runtime engine <b>131</b> or execution of the virtual application <b>110</b> has terminated. If a message is received, the decision in decision block <b>820</b> is &#x201c;RECEIVED&#x201d; and the Sandbox Manager <b>134</b> advances to decision block <b>825</b>. Otherwise, if the virtual runtime engine <b>131</b> stops executing the virtual application <b>110</b> before a message is received, the decision in decision block <b>820</b> is &#x201c;TERMINATED&#x201d; and the method <b>800</b> terminates.</p>
<p id="p-0137" num="0136">When the virtual runtime engine <b>131</b> detects that a process is accessing the original file (e.g., the xlayer file <b>300</b>) for the first time, the virtual runtime engine <b>131</b> sends a message (optionally implemented using a structure name &#x201c;SProcessConnectMessage&#x201d;) to the directing process <b>129</b>. In decision block <b>825</b>, the Sandbox Manager <b>134</b> determines whether the message received in block <b>820</b> indicates a process is accessing the original file (e.g., the xlayer file <b>300</b>) for the first time. The decision in decision block <b>825</b> is &#x201c;YES&#x201d; when the message received in block <b>820</b> indicates a process is accessing the original file (e.g., the xlayer file <b>300</b>) for the first time. For example, the decision in decision block <b>825</b> is &#x201c;YES&#x201d; when the message received was constructed in block <b>718</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>. Otherwise, the decision in decision block <b>825</b> is &#x201c;NO&#x201d; when the message received in block <b>820</b> does not indicate the process is accessing the original file (e.g., the xlayer file <b>300</b>) for the first time.</p>
<p id="p-0138" num="0137">When the decision in decision block <b>825</b> is &#x201c;YES,&#x201d; in block <b>830</b>, the Sandbox Manager <b>134</b> generates a ProcessStarted event. In block <b>835</b>, Sandbox Manager <b>134</b> records information included in the message (e.g., the SessionId, PseudoPid, and ProcessName values). This information may be recorded in the transcript file <b>125</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). Then, the Sandbox Manager <b>134</b> advances to decision block <b>870</b>.</p>
<p id="p-0139" num="0138">When the decision in decision block <b>825</b> is &#x201c;NO,&#x201d; in decision block <b>840</b>, the Sandbox Manager <b>134</b> determines whether the message received in block <b>820</b> includes statistics to be stored in the transcript file <b>125</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). The decision in decision block <b>840</b> is &#x201c;YES&#x201d; when the message received in block <b>820</b> indicates the message received in block <b>820</b> includes statistics to be stored in the transcript file <b>125</b>. For example, the decision in decision block <b>840</b> is &#x201c;YES&#x201d; when the message received was constructed in block <b>750</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>. Otherwise, the decision in decision block <b>840</b> is &#x201c;NO&#x201d; when the message received in block <b>820</b> does not indicate that the message received in block <b>820</b> includes statistics to be stored in the transcript file <b>125</b>.</p>
<p id="p-0140" num="0139">When the decision in decision block <b>840</b> is &#x201c;YES,&#x201d; in block <b>845</b>, the Sandbox Manager <b>134</b> generates an ExecutionStatistic event. Then, in block <b>850</b>, the statistics included in the message are stored in the transcript file <b>125</b>. Then, the Sandbox Manager <b>134</b> advances to decision block <b>870</b>.</p>
<p id="p-0141" num="0140">When the decision in decision block <b>840</b> is &#x201c;NO,&#x201d; in decision block <b>855</b>, the Sandbox Manager <b>134</b> determines whether the message received in block <b>820</b> indicates a thread is accessing the original file (e.g., the xlayer file <b>300</b>) for the first time. The decision in decision block <b>855</b> is &#x201c;YES&#x201d; when the message received in block <b>820</b> indicates a thread is accessing the original file for the first time. Otherwise, the decision in decision block <b>855</b> is &#x201c;NO.&#x201d;</p>
<p id="p-0142" num="0141">When the decision in decision block <b>855</b> is &#x201c;YES,&#x201d; in block <b>860</b>, the Sandbox Manager <b>134</b> generates a ThreadStarted event. Then, in block <b>865</b>, the PseudoTid and ThreadDiscriminate values are stored in memory. This information may be recorded in the transcript file <b>125</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). Then, the Sandbox Manager <b>134</b> advances to decision block <b>870</b>.</p>
<p id="p-0143" num="0142">When the decision in decision block <b>855</b> is &#x201c;NO,&#x201d; the Sandbox Manager <b>134</b> advances to decision block <b>870</b>.</p>
<p id="p-0144" num="0143">In decision block <b>870</b>, the Sandbox Manager <b>134</b> determines whether the virtual runtime engine <b>131</b> has stopped executing the virtual application <b>110</b> (and therefore, no additional statistics will be generated for the virtual application <b>110</b>). The decision in decision block <b>870</b> is &#x201c;NO&#x201d; when the virtual runtime engine <b>131</b> has stopped executing the virtual application <b>110</b>. Otherwise, the decision in decision block <b>870</b> is &#x201c;YES.&#x201d;</p>
<p id="p-0145" num="0144">When the decision in decision block <b>870</b> is &#x201c;NO,&#x201d; the method <b>800</b> terminates.</p>
<p id="p-0146" num="0145">When the decision in decision block <b>870</b> is &#x201c;YES,&#x201d; the Sandbox Manager <b>134</b> returns to decision block <b>820</b>.</p>
<p id="p-0147" num="0146">The information received in the messages constructed in block <b>750</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref> is stored in the transcript file <b>125</b> associated with the original file (e.g., the xlayer file <b>300</b>).</p>
<p id="p-0148" num="0147">The Sandbox Manager <b>134</b> may include a dictionary accessible by the directing process <b>129</b>. The directing process <b>129</b> may use the dictionary to associate all subsequent messages (e.g., implemented using the structures named &#x201c;SThreadStartedMessage&#x201d; and &#x201c;SFeedbackStatsMessage&#x201d;) with the correct PseudoPid value. The dictionary may be keyed by a connection handle to a structure storing the PseudoPid value, Pid value, and Process Name value. The following data structure (named &#x201c;SPipeConnection&#x201d;) is an example of a data structure that may be used to implement the dictionary:</p>
<p id="p-0149" num="0148">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>class SPipeConnection</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="84pt" align="left"/>
<colspec colname="2" colwidth="84pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>private uint</entry>
<entry>SessionId;</entry>
</row>
<row>
<entry/>
<entry>private uint</entry>
<entry>Pid;</entry>
</row>
<row>
<entry/>
<entry>private uint</entry>
<entry>PseudoPid;</entry>
</row>
<row>
<entry/>
<entry>private string</entry>
<entry>Name;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0150" num="0149">As described above, the information stored in the class defined by the pseudo code above is received by the Sandbox Manager <b>134</b> (from the virtual runtime engine <b>131</b>) in the message constructed in block <b>718</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0151" num="0150">The dictionary lookup may be hidden by the implementation of the .NET System.IO.Pipes.NamedPipeServerStream class, which may have been used to perform the named pipe communication. This class uses IO Completion Ports to schedule asynchronous pipe reads from the pipe clients (e.g., the virtual runtime engine <b>131</b>) in the virtual application processes. An asynchronous named pipe completion routine may be responsible for determining the type of message received, reading the message, and calling back into the listening code of the directing process <b>129</b> with the appropriate callbacks. Possible callbacks are: SignalNewProcess (which is called when a new process is started in the virtual application <b>110</b>); SignalNewThread (which is called when a new thread is started within a virtual application process); and SignalXLayerAccess (which is called when access to the original file has been requested by a particular thread within the virtual application process). How this data provided by these callbacks is handled is described below.</p>
<p id="p-0152" num="0151">The following pseudo code provides a non-limiting example of a server-side named pipe completion routine. Portions of the routine may be performed in blocks <b>820</b>, <b>825</b>, <b>840</b>, and <b>855</b>.</p>
<p id="p-0153" num="0152">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>SPipeConnection pipeConnect =</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>GetConnectionDataFromHandle(hPipeClient)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Byte MessageId = ReadByte( )</entry>
</row>
<row>
<entry/>
<entry>If (MessageId == ConnectionMessageId) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>pipeConnect.SessionId = ReadInt64( )</entry>
</row>
<row>
<entry/>
<entry>pipeConnect.Pid = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>pipeConnect.PseudoPid = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>countChars = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>arrayChars = ReadChars(countChars)</entry>
</row>
<row>
<entry/>
<entry>pipeConnect.Name = MakeString(arrayChars)</entry>
</row>
<row>
<entry/>
<entry>SignalNewProcess(pipeConnect.SessionId,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>pipeConnect.Pid,</entry>
</row>
<row>
<entry/>
<entry>pipeConnect.PseudoPid,</entry>
</row>
<row>
<entry/>
<entry>pipeConnect.Name)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Else If (MessageId == ThreadCreatedMessageId) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>PseudoTid = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>Discriminate = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>SignalNewThread(pipeConnect.PseudoPid,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;PseudoTid, Discriminate)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Else If (MessageId == FeedbackStatsMessageId) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>PseudoTid = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>TickCount = ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>AccessOffset = ReadInt64( )</entry>
</row>
<row>
<entry/>
<entry>AccessSize = ReadInt64( )</entry>
</row>
<row>
<entry/>
<entry>SignalXLayerAccess (pipeConnect.PseudoPid, PseudoTid,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="133pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;TickCount, AccessOffset,</entry>
</row>
<row>
<entry/>
<entry>&#x2003;AccessSize)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<heading id="h-0008" level="1">Building and Distributing Application Profiles Via the Web</heading>
<p id="p-0154" num="0153">As mentioned above, the transcript file <b>125</b> generated by the profiling process is used to determine a predictive application access model that is used to determine an order in which to download blocks of data (e.g., portions of the xlayer file <b>300</b>) to the client computing device <b>9</b>. When used to stream blocks of data or pages to the client computing device <b>9</b>, the access model is referred to as a streaming model.</p>
<p id="p-0155" num="0154">The server computing device <b>7</b> provides applications to the client computing device <b>9</b> on a &#x201c;self-serve&#x201d; basis (i.e., a user operating the client computing device <b>9</b> may select any of the applications provided by the server computing device <b>7</b> for download at anytime). After the user has selected an application for download and execution, the server computing device <b>7</b> downloads or streams the selected application to the client computing device <b>9</b>. Multiple client computing devices (e.g., the computing devices <b>9</b> and <b>11</b>) may select applications for download at the same time.</p>
<p id="p-0156" num="0155">Because training and building streaming models is a computationally intensive process and relies on proprietary technologies, it may be preferable to perform this process on a centralized server (e.g., the server computing device <b>7</b> or another computing device connected thereto). The access model may be generated using machine learning techniques that require training. The training of streaming models requires information about the program's access patterns under realistic and/or actual use. Thus, generating &#x201c;transcripts&#x201d; via profiling is a task best performed manually, by an application publisher or test users.</p>
<p id="p-0157" num="0156">As described above, the Sandbox Manager <b>134</b> may be configured to profile an application downloaded from a web page (e.g., via the plug-in <b>136</b>). Transcript files generated by the Sandbox Manager <b>134</b> may then be uploaded to the server computing device <b>7</b> (or another computing device connected thereto), which automatically generates and distributes a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) for the application.</p>
<p id="p-0158" num="0157">As mentioned above, the authoring tool <b>170</b> allows application developers and publishers to virtualize an application and publish it to the web. The result of this process is one or more executable files or xlayer files (e.g., a file named &#x201c;application_p.xlayer&#x201d;) residing on the server computing device <b>7</b>. As described in U.S. patent application Ser. No. 12/695,107, these files can be downloaded and executed from the web via the plug-in <b>136</b> and the Sandbox Manager <b>134</b>. If the plug-in <b>136</b> is executing on a computing device (e.g., the computing device <b>11</b>) that is also executing the authoring tool <b>170</b>, optionally, when the layer file is published to the server computing device <b>7</b>, the xlayer file <b>300</b> will also be copied to the local cache <b>139</b> (see <figref idref="DRAWINGS">FIG. 2</figref>), making future downloads unnecessary.</p>
<p id="p-0159" num="0158">An upper portion of <figref idref="DRAWINGS">FIG. 13</figref> illustrates exemplary communications between the computing device <b>11</b> operated by an application publisher or developer, the server computing device <b>7</b>, and the model building server <b>8</b>. A lower portion of <figref idref="DRAWINGS">FIG. 13</figref> illustrates exemplary communications between the client computing device <b>9</b> operated by a user and the server computing device <b>7</b>. In <figref idref="DRAWINGS">FIG. 13</figref>, the authoring tool <b>170</b>, the profiling tool <b>169</b>, and the Sandbox Manager <b>134</b> are installed and operating on the computing device <b>11</b>. Another instance of the Sandbox Manager <b>134</b> and the Client Application <b>132</b> are installed and operating on the client computing device <b>9</b>. For ease of illustration, the computing device operated by an application publisher will be described as being the computing device <b>11</b>. However, this is not a requirement.</p>
<p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram of a method <b>1100</b> of building a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) for a particular application (e.g., the virtual application <b>110</b>) and distributing that streaming model across multiple servers (e.g., the server computing devices <b>6</b> and <b>7</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>). Before the method <b>1100</b> is performed, the application publisher or developer has published the application (e.g., the virtual application <b>110</b>) to the server computing device <b>7</b>. Turning to <figref idref="DRAWINGS">FIG. 13</figref>, arrow &#x201c;A<b>1</b>&#x201d; illustrates a communication from the computing device <b>11</b> operated by the application publisher or developer publishing the application (e.g., the virtual application <b>110</b>) to the server computing device <b>7</b>.</p>
<p id="p-0161" num="0160">Returning to <figref idref="DRAWINGS">FIG. 9</figref>, in first block <b>1110</b>, the server computing device <b>7</b> receives an instruction from an application publisher or developer that a particular application is to be profiled. Arrow &#x201c;A<b>2</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the computing device <b>11</b> to the server computing device <b>7</b> requesting profiling for an application. The authoring tool <b>170</b> may be configured to allow an application publisher or developer to specify that after an application is downloaded, the Sandbox Manager <b>134</b> is to profile the application and upload transcript files (generated by the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref>) to the server computing device <b>7</b>. For example, the authoring tool <b>170</b> may have a link to an online management panel configured to display a profiling tool <b>169</b> (see <figref idref="DRAWINGS">FIGS. 3 and 13</figref>) operable by a user to indicate a particular application is to be profiled following its download. Using the online management panel the user selects a virtual application (e.g., by selecting an xlayer file implementing the virtual application). For example, the publisher or developer may select a virtual application implemented by an xlayer file named &#x201c;app.xlayer.&#x201d; If an application has been identified as &#x201c;to be profiled,&#x201d; streaming is not enabled. Instead, to run the application from the web, the entire application file (e.g., the xlayer file named &#x201c;application_p.xlayer&#x201d;) must be downloaded before execution can begin. Thus, arrow &#x201c;A<b>3</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication downloading the xlayer file from the server computing device <b>7</b> to the computing device <b>11</b>.</p>
<p id="p-0162" num="0161">The profiling tool <b>169</b> may be implemented as a &#x201c;Profile&#x201d; link in the online management panel. When the publisher clicks on the &#x201c;Profile&#x201d; link, a panel launcher page may be displayed that includes a query string parameter (e.g., &#x201c;&#x26;profile=&#x201d;) set to a value that indicates the application should be profiled. The page may pass the query string parameter (e.g., &#x201c;&#x26;profile=&#x201d;) to an iframe that renders the panel launcher page. The panel launcher page renders a javascript call to the xrfw.go( )method that sets the query string parameter (e.g., &#x201c;&#x26;profile=&#x201d;) equal to &#x201c;TRUE.&#x201d;</p>
<p id="p-0163" num="0162">In block <b>1115</b>, the server computing device <b>7</b> receives an instruction to download the virtual application <b>110</b> to the client computing device <b>9</b>. For example, this instruction may be received in response to a user clicking on a launch button on the panel launcher page.</p>
<p id="p-0164" num="0163">In block <b>1120</b>, the Sandbox Manager <b>134</b> downloads and executes the virtual application file <b>140</b> in a profile mode. When executing an application in profile mode, the Sandbox Manager <b>134</b> instructs the virtual machine (e.g., the virtual runtime engine <b>131</b>) to provide execution statistics (e.g., via messages implemented using the structure named &#x201c;SFeedbackStatsMessage&#x201d;).</p>
<p id="p-0165" num="0164">In block <b>1125</b>, the Sandbox Manager <b>134</b> receives messages from the virtual runtime engine <b>131</b> and handles events generated by the virtual runtime engine <b>131</b> executing the application as the application is running. The method <b>800</b> (described above) may be performed in blocks <b>1120</b> and <b>1125</b>.</p>
<p id="p-0166" num="0165">By way of non-limiting examples, the events may include a ProcessStarted event, a ThreadStarted event, an ExecutionStatistic event, and an Application Ended event. A ProcessStarted event may be identified by the Sandbox Manager <b>134</b> when the directing process <b>129</b> receives a message from the virtual runtime engine <b>131</b> indicating a process has requested access to the xlayer file for the first time. As explained above, such a message may be sent by the virtual runtime engine <b>131</b> in block <b>719</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref> and implemented using the structure named &#x201c;SProcessConnectMessage.&#x201d; A ThreadStarted event may be identified by the Sandbox Manager <b>134</b> when the directing process receives a message indicating a thread has requested access to the xlayer file for the first time. As explained above, such a message may be sent by the virtual runtime engine <b>131</b> in block <b>765</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref> and implemented using the structure named &#x201c;SThreadStartedMessage.&#x201d; The ProcessStarted and ThreadStarted events allow the Sandbox Manager <b>134</b> to separately track access requests from different processes and threads.</p>
<p id="p-0167" num="0166">An ExecutionStatistic event may be identified by the Sandbox Manager <b>134</b> when the directing process <b>129</b> receives a message including access statistics. As explained above, such a message may be sent by the virtual runtime engine <b>131</b> in block <b>752</b> of the profiling process <b>700</b> illustrated in <figref idref="DRAWINGS">FIG. 4</figref> and implemented using the structure named &#x201c;SFeedbackStatsMessage.&#x201d; Every time the virtual application <b>110</b> finishes reading a contiguous section of an xlayer file <b>300</b>, the virtual runtime engine <b>131</b> triggers an ExecutionStatistic event and sends a message including access statistics to the directing process. The message, which may be implemented using the structure named &#x201c;SFeedbackStatsMessage&#x201d; may include an identifier for the xlayer file (e.g., the xlayerId value), the thread (e.g., the PseudoTid value), time (e.g., the TickCount value, timestamp, and the like), the location of the block in the xlayer file (e.g., the AccessOffset value), and the size of the block read (e.g., the AccessBytes value). The TickCount value may be used to track the runtime of a process. An identifier for the process (e.g., the PseudoPid value) may be inferred from the named pipe connection used because the named pipe connection used by each process is unique.</p>
<p id="p-0168" num="0167">In next block <b>1130</b>, the Sandbox Manager <b>134</b> detects that an ApplicationEnded event has been triggered.</p>
<p id="p-0169" num="0168">Then, in block <b>1135</b>, the Sandbox Manager <b>134</b> combines the collected execution statistics into a single combined transcript (e.g., the combined transcript &#x201c;CT&#x201d; illustrated in <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0170" num="0169">In block <b>1140</b>, the Sandbox Manager <b>134</b> uploads the combined transcript to the server computing device <b>7</b>. Arrow &#x201c;A<b>4</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the computing device <b>11</b> to the server computing device <b>7</b> uploading the combined transcript. In block <b>1140</b>, the Sandbox Manager <b>134</b> may connect to a web service running on the server computing device <b>7</b>, and transfer a unique application identifier and a byte array containing the binary data of combined transcript to the server computing device <b>7</b>. By way of a non-limiting example, the application identifier may have the following format:</p>
<p id="h-0009" num="0000">&#x3c;AppInternalName&#x3e;/&#x3c;AppVersion&#x3e;_&#x3c;LayerRevision&#x3e;/&#x3c;AppInternalName&#x3e;_p.xlayer.</p>
<p id="p-0171" num="0170">In block <b>1145</b>, the server computing device <b>7</b> receives the uploaded combined transcript and associated application identifier.</p>
<p id="p-0172" num="0171">In block <b>1150</b>, the server computing device <b>7</b> resolves the application identifier to determine which application and version created the transcript. The server computing device <b>7</b> includes an application library database <b>1151</b> illustrated in <figref idref="DRAWINGS">FIG. 11</figref>. In block <b>1150</b>, the application library database may be queried for an application that has a matching version and xlayer revision. If an xlayer file is found, the transcript will be associated with this xlayer file.</p>
<p id="p-0173" num="0172">In block <b>1155</b>, the server computing device <b>7</b> saves the combined transcript in a predetermined location on the filesystem. In block <b>1155</b>, the binary data contained in the transcript may be written to a file on the server computing device <b>7</b> using a standard .NET BinaryWriter. Each transcript is named using a unique GUID. Files containing the transcripts may be stored at the following location, relative to the web root:</p>
<p id="h-0010" num="0000">Layers\Transcripts\&#x3c;AppInternalName&#x3e;\&#x3c;AppVersion&#x3e;_&#x3c;LayerRevision&#x3e;\&#x3c;AppInternalName&#x3e;_p.xlayer\&#x3c;GUID&#x3e;.xt.</p>
<p id="p-0174" num="0173">In block <b>1160</b>, the server computing device <b>7</b> requests a build of a new streaming model for the xlayer file identified in block <b>1150</b>. Arrow &#x201c;A<b>5</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the server computing device <b>7</b> to the model building server <b>8</b> requesting a build of a new streaming model for the xlayer file identified in block <b>1150</b>. If a streaming model has not been created for a particular xlayer file, in block <b>1160</b>, the server computing device <b>7</b> may automatically add a request for a streaming model to a streaming model build queue. By way of a non-limiting example, the streaming model build queue may be implemented as a ModelRequest table <b>1161</b> illustrated in <figref idref="DRAWINGS">FIG. 10</figref>. In implementations including multiple model build servers, the ModelRequest table <b>1161</b> may be stored in a database accessible by all model build servers.</p>
<p id="p-0175" num="0174">Application publishers can use the profiling tool <b>169</b> to request subsequent model builds as needed (e.g., by adding a request to the ModelRequest table illustrated in <figref idref="DRAWINGS">FIG. 10</figref>), after additional profiling has been performed to generate additional transcripts. This may be achieved by adding a record to the ModelRequest table illustrated in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0176" num="0175">In block <b>1165</b>, the request is processed and a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) is generated for the xlayer file identified in block <b>1150</b>. The streaming model may be generated by the server computing device <b>7</b> or another computing device connected thereto. In the embodiment illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, streaming models are generated by the model building server <b>8</b>. By way of a non-limiting example, an application running as a windows service on the model building server <b>8</b> may be responsible for building the streaming model based on the transcripts associated with the unique application identifier. The model building server <b>8</b> may periodically query the ModelRequest table <b>1161</b> for any requests that have not yet been started. When one is found, the model building server <b>8</b> begins a build (i.e., starts constructing a streaming model).</p>
<p id="p-0177" num="0176"><figref idref="DRAWINGS">FIG. 20</figref> illustrates a method <b>1300</b> of building the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref> that may be performed in block <b>1165</b> of the method <b>1100</b> illustrated in <figref idref="DRAWINGS">FIG. 9</figref>. To build the streaming model, in block <b>1310</b>, the model building server <b>8</b> first collects transcripts associated with the xlayer file identified in block <b>1150</b> (which may be stored on multiple server computing devices, such as the server computing devices <b>6</b> and <b>7</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>). In implementations that include more than one model building server <b>8</b>, the server computing devices may networked, and share a (LibraryResources) folder at the base of their application library resources, so that each can access the other using the following path &#x201c;\\&#x3c;ServerName&#x3e;\LibraryResources\.&#x201d; Transcript files associate with a particular xlayer file can be stored on one or more different server computing devices. If the transcript files associated with a particular xlayer file are stored on a particular server computing device, then the transcript files can be retrieved from that particular server computing device using a consistent folder structure (e.g., &#x201c;&#x3c;ServerHostName&#x3e;\LibraryResources\Layers\Transcripts\ . . . &#x201d;). In other words, a predetermined path may be used to obtain transcript files from different server computing devices that each store transcript files in the same storage location. If a transcript file is not stored on a particular server computing device, the server computing device will issue an error.</p>
<p id="p-0178" num="0177">Then, in block <b>1310</b>, the model building server <b>8</b> copies all transcript files associated with the xlayer file identified in block <b>1150</b> into the same directory in the filesystem of the model building server <b>8</b>. For example, all files stored in a first directory named</p>
<p id="h-0011" num="0000">&#x201c;\\&#x3c;SpoonServer&#x3e;\LibraryResources\Layers\Transcripts\&#x3c;AppInternalName&#x3e;\&#x3c;App Version&#x3e;_&#x3c;LayerRevision&#x3e;\&#x3c;AppInternalName&#x3e;_p.xlayer\&#x201d; may be copied to a second directory named</p>
<p id="p-0179" num="0178">&#x201c;\\&#x3c;BuildServer&#x3e;\LibraryResources\Layers\Transcripts\&#x3c;AppInternalName&#x3e;\&#x3c;AppVersion&#x3e;_&#x3c;LayerRevision&#x3e;\&#x3c;AppInternalName&#x3e;_p.xlayer\.&#x201d; Arrow &#x201c;A<b>6</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the server computing device <b>7</b> to the model building server <b>8</b> uploading the transcript files to the model building server <b>8</b>.</p>
<p id="p-0180" num="0179">When the copying is finished, in block <b>1320</b>, the model building server <b>8</b> tries to delete the original transcript files (stored in the first directory).</p>
<p id="p-0181" num="0180">In decision block <b>1325</b>, the model building server <b>8</b> determines whether the transcript files have been successfully deleted. If the attempt to delete a particular transcript file fails, the model building server <b>8</b> concludes the transcript is still being written and the decision in decision block <b>1325</b> is &#x201c;NO.&#x201d; Then, in block <b>1330</b>, the copy stored in the second directory is deleted. These copy and delete actions may use the standard .NET File class.</p>
<p id="p-0182" num="0181">In block <b>1335</b>, the model building server <b>8</b> then performs a method <b>1600</b> (illustrated in <figref idref="DRAWINGS">FIG. 23</figref>) to construct a streaming model based on the transcripts stored in the second directory. The collection of files (including the transcripts stored in the second directory and the streaming model) may be stored in a third directory named</p>
<p id="h-0012" num="0000">&#x201c;\\&#x3c;BuildServer&#x3e;\LibraryResources\Layers\&#x3c;AppInternalName&#x3e;\&#x3c;AppVersion&#x3e;_&#x3c;LayerRevision&#x3e;\xstream\0\.&#x201d;</p>
<p id="p-0183" num="0182">In block <b>1340</b>, referring to <figref idref="DRAWINGS">FIG. 12</figref>, when the streaming model is saved, the model building server <b>8</b> creates a record in an XStreamModel table <b>1166</b>, as well as corresponding entries in an XFile table <b>1167</b> and a ServerXFile table <b>1168</b>. Arrow &#x201c;A<b>7</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the model building server <b>8</b> to the server computing device <b>7</b> recording information in the XStreamModel table <b>1166</b>, the XFile table <b>1167</b>, and the ServerXFile table <b>1168</b>. These tables may be stored in the same database used to store the ModelRequest table <b>1161</b>. This database may be accessible by each of the server computing devices and model building servers.</p>
<p id="p-0184" num="0183">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) includes a streaming model file <b>1180</b>, and one or more xsequence files <b>1182</b>.</p>
<p id="p-0185" num="0184">Returning to <figref idref="DRAWINGS">FIG. 12</figref>, the records in the XFile table <b>1167</b> and ServerXFile table <b>1168</b> indicate the existence of a new streaming model, and identify on which server(s) the streaming model is stored. The server table <b>1169</b> stores information about each of the server computing devices (e.g., the server computing devices <b>6</b> and <b>7</b>). The XStreamModel table <b>1166</b> indicates a particular streaming model exists, the XFile table <b>1167</b> stores data about the streaming model file <b>1180</b>, and the ServerXFile table <b>1168</b> describes the streaming model file <b>1180</b> located on a particular server computing device. Arrow &#x201c;A<b>8</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the model building server <b>8</b> to the server computing device <b>7</b> storing the streaming model file <b>1180</b> and associated one or more xsequence files <b>1182</b> on the server computing device <b>7</b>. Optionally, the model building server <b>8</b> may store the streaming model file <b>1180</b> and associated one or more xsequence files <b>1182</b> on one or more other server computing devices. The streaming model (which includes the streaming model file <b>1180</b> and associated one or more xsequence files <b>1182</b>) may be stored in a predetermined storage location on the server computing device <b>7</b>.</p>
<p id="p-0186" num="0185">At this point, the streaming models may be distributed to other computing devices connected to the model building server <b>8</b> and/or the network <b>10</b>. <figref idref="DRAWINGS">FIG. 21</figref> is a flow diagram of a method <b>1400</b> of distributing streaming models. Server computing devices (e.g., the server computing devices <b>6</b> and <b>7</b>) may poll or query the ServerXFile table <b>1168</b> to locate files stored on other server computing devices. In first block <b>1410</b>, a querying server computing device (e.g., the server computing device <b>6</b>) polls or queries the ServerXFile table <b>1168</b> for streaming models stored on other server computing devices (e.g., the server computing device <b>7</b>). For example, in block <b>1410</b>, the server computing device <b>6</b> may receive a list of streaming models identified in the ServerXFile table <b>1168</b> that are stored on all other server computing devices.</p>
<p id="p-0187" num="0186">In decision block <b>1415</b>, for each streaming model identified in block <b>1410</b>, the querying server computing device determines whether the streaming model is already stored in the filesystem of the querying server computing device. The decision in decision block <b>1415</b> is &#x201c;NO&#x201d; when the streaming model is already stored in the filesystem of the querying server computing device. Otherwise, the decision in decision block <b>1415</b> is &#x201c;YES&#x201d; when the streaming model is not already stored in the filesystem of the querying server computing device.</p>
<p id="p-0188" num="0187">When the decision in decision block <b>1415</b> is &#x201c;YES,&#x201d; in block <b>1425</b>, the querying server computing device waits for a period of time and then returns to block <b>1410</b>. In block <b>1425</b>, the querying server computing device may wait for a predetermined amount of time, a randomly selected amount of time, or a combination thereof.</p>
<p id="p-0189" num="0188">When the decision in decision block <b>1415</b> is &#x201c;YES,&#x201d; in block <b>1430</b>, the streaming model is copied from a server computing device on which the streaming model is stored to the querying server computing device. Thus, when a record is found in the ServerXFile table <b>1168</b> that the querying server computing device does not yet have stored in its filesystem (according to the ServerXFile table), a copy is initiated. In other words, the querying server computing device (e.g., the server computing device <b>6</b>) may use the ServerXFile table <b>1168</b> to locate model files stored on other server computing devices (e.g., the server computing device <b>7</b>) and copy those files to the local filesystem of the querying server computing device. The files located in this manner may be copied from the third directory to a fourth directory named</p>
<p id="h-0013" num="0000">&#x201c;\\&#x3c;SpoonServer&#x3e;\LibraryResources\Layers\&#x3c;AppInternalName&#x3e;\&#x3c;AppVersion&#x3e;_&#x3c;LayerRevision&#x3e;\xstream\0\.&#x201d; In other words, each server computing device is responsible for distributing streaming model files by copying those files onto their own filesystem.</p>
<p id="p-0190" num="0189">In decision block <b>1435</b>, for each streaming model copied in block <b>1430</b>, the querying server computing device determines whether the streaming model was copied to the filesystem of the querying server computing device successfully. The decision in decision block <b>1435</b> is &#x201c;YES&#x201d; when the streaming model was copied to the filesystem of the querying server computing device successfully. Otherwise, the decision in decision block <b>1435</b> is &#x201c;NO&#x201d; when the streaming model was not copied to the filesystem of the querying server computing device successfully.</p>
<p id="p-0191" num="0190">When the decision in decision block <b>1435</b> is &#x201c;NO,&#x201d; the querying server computing device may return to block <b>1430</b> to retry the copy operation.</p>
<p id="p-0192" num="0191">When the decision in decision block <b>1435</b> is &#x201c;YES&#x201d; (the copy operation has completed successfully), in block <b>1440</b>, the querying server computing device (e.g., the server computing device <b>6</b>) adds a new record to the ServerXFile table <b>1168</b>, indicating that the streaming model is now stored on that particular server computing device. Thus, after a server computing device (e.g., the server computing device <b>6</b>) copies streaming models onto its filesystem, the server computing device records this in the database illustrated in <figref idref="DRAWINGS">FIG. 12</figref>. For example, if a server computing device named &#x201c;publicserver1&#x201d; copies a streaming model named &#x201c;Model1&#x201d; into its filesystem, the &#x201c;publicserver1&#x201d; computing device creates a record in the ServerXFile table <b>1168</b> in which a field named &#x201c;Server&#x201d; is set to &#x201c;publicserver1.&#x201d; Then, the method <b>1400</b> terminates.</p>
<p id="p-0193" num="0192"><figref idref="DRAWINGS">FIG. 22</figref> illustrates a flow diagram of a method <b>1500</b> of locating a streaming model. A server table <b>1169</b> may be used to list all servers on which streaming models may be stored. If the querying server computing device is indicated as being &#x201c;Public&#x201d; in the server table <b>1169</b> illustrated in <figref idref="DRAWINGS">FIG. 12</figref>, pages that render the plug-in <b>136</b> will read a record in the ServerXFile table <b>1168</b> (associated with the querying server computing device) and may instruct the plug-in <b>136</b> to use the new streaming model copied onto the querying server computing device on subsequent application launches. In first block <b>1510</b>, a user operating the client computing device <b>9</b> indicates he/she would like to execute a virtual application (e.g., the virtual application <b>110</b>). By way of a non-limiting example, in block <b>1510</b>, the user may click on a hyperlink (displayed in a web browser) provided by the server computing device <b>7</b> and associated with the virtual application.</p>
<p id="p-0194" num="0193">In optional block <b>1515</b>, the Client Application <b>132</b> communicates that the user would like to execute a virtual application to the Sandbox Manager <b>134</b>.</p>
<p id="p-0195" num="0194">In block <b>1520</b>, the Sandbox Manager <b>134</b> executing on the client computing device <b>9</b> (which may be located somewhere across the world from the server computing device <b>7</b>) requests the virtual application the user indicated he/she would like to execute in block <b>1510</b>.</p>
<p id="p-0196" num="0195">In block <b>1530</b>, the server computing device that services the request (e.g., the server computing device <b>7</b>) will query the ServerXFile table <b>1168</b> to determine which server computing device(s) is/are storing the streaming model for the application requested in block <b>1520</b>. For example, in block <b>1520</b>, the Sandbox Manager <b>134</b> may request an application named &#x201c;App1.xlayer&#x201d; for which a streaming model named &#x201c;Model1&#x201d; was created. In this example, in block <b>1530</b>, the server computing device <b>7</b> may query the ServerXFile table <b>1168</b> to determine which server computing device(s) are storing the streaming model named &#x201c;Model1&#x201d; associated with the application requested in block <b>1520</b>.</p>
<p id="p-0197" num="0196">Then, in block <b>1535</b>, the server computing device that services the request (e.g., the server computing device <b>7</b>) selects one of the server computing device(s) storing the streaming model requested in block <b>1520</b> from which to download the streaming model. Load balancing techniques or a random selection algorithm may be used to select a server computing device in block <b>1535</b>. For example, in block <b>1535</b>, load balancing techniques or a random selection algorithm may be used to select a server computing device (e.g., the &#x201c;publicserver1&#x201d; computing device) from which the &#x201c;Model1&#x201d; model file may be downloaded to the client computing device <b>9</b>.</p>
<p id="p-0198" num="0197">Then, in block <b>1540</b>, the method <b>900</b> (illustrated in <figref idref="DRAWINGS">FIG. 18</figref>) is performed to download and execute the virtual application on the client computing device <b>9</b> using the streaming model. Then, the method <b>1500</b> terminates.</p>
<heading id="h-0014" level="1">Modeling</heading>
<p id="p-0199" num="0198"><figref idref="DRAWINGS">FIG. 23</figref> illustrates the method <b>1600</b> of constructing a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>). As mentioned above, multiple transcripts are recorded during profiling process <b>700</b> and later combined to build a streaming model (e.g., the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref>) for an application (e.g., the virtual application <b>110</b>). In first block <b>1610</b>, referring to <figref idref="DRAWINGS">FIG. 19</figref>, the individual transcripts (e.g., the transcript &#x201c;T<b>1</b>&#x201d; and &#x201c;T<b>2</b>&#x201d;) are combined to form a combined transcript &#x201c;CT.&#x201d;</p>
<p id="p-0200" num="0199">Among other data, each transcript includes information identifying transitions between pages (&#x201c;page transitions&#x201d;). To combine the transcripts, in block <b>1610</b>, the page transitions are broken down and combined. For example, referring to <figref idref="DRAWINGS">FIG. 6</figref>, if a first transcript &#x201c;T<b>1</b>&#x201d; records a first sequence of page transactions (P<b>6</b><img id="CUSTOM-CHARACTER-00001" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b><img id="CUSTOM-CHARACTER-00002" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b><img id="CUSTOM-CHARACTER-00003" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>2</b><img id="CUSTOM-CHARACTER-00004" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>3</b>) indicating a first order in which the pages P<b>6</b>, P<b>4</b>, P<b>5</b>, P<b>2</b>, and P<b>3</b> were accessed by the application, and a second transcript &#x201c;T<b>2</b>&#x201d; records a second sequence of page transactions (P<b>6</b><img id="CUSTOM-CHARACTER-00005" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b><img id="CUSTOM-CHARACTER-00006" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b><img id="CUSTOM-CHARACTER-00007" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>1</b><img id="CUSTOM-CHARACTER-00008" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>3</b>) indicating a second order in which the pages P<b>6</b>, P<b>4</b>, P<b>5</b>, P<b>1</b>, and P<b>3</b> were accessed by the application, the transcripts &#x201c;T<b>1</b>&#x201d; and &#x201c;T<b>2</b>&#x201d; are broken down into individual transitions: (P<b>6</b><img id="CUSTOM-CHARACTER-00009" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b>), (P<b>4</b><img id="CUSTOM-CHARACTER-00010" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b>), (P<b>5</b><img id="CUSTOM-CHARACTER-00011" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>2</b>), (P<b>2</b><img id="CUSTOM-CHARACTER-00012" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>3</b>) for the first transcript &#x201c;T<b>1</b>&#x201d; and (P<b>6</b><img id="CUSTOM-CHARACTER-00013" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b>), (P<b>4</b><img id="CUSTOM-CHARACTER-00014" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b>), (P<b>5</b><img id="CUSTOM-CHARACTER-00015" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>1</b>), (P<b>1</b><img id="CUSTOM-CHARACTER-00016" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>3</b>) for the second transcript &#x201c;T<b>2</b>.&#x201d; In this example, the first sequence (in the first transcript &#x201c;T<b>1</b>&#x201d;) transitioned from page P<b>6</b> to page P<b>4</b> to page P<b>5</b> to page P<b>2</b> to page P<b>3</b> and the second sequence (in the second transcript &#x201c;T<b>2</b>&#x201d;) transitioned from page P<b>6</b> to page P<b>4</b> to page P<b>5</b> to page P<b>1</b> to page P<b>3</b>. Because a transition from page P<b>6</b> to page P<b>4</b> is present in both transcripts &#x201c;T<b>1</b>&#x201d; and &#x201c;T<b>2</b>,&#x201d; in block <b>1610</b>, this transition (P<b>6</b><img id="CUSTOM-CHARACTER-00017" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b>) is combined into a single transition and assigned a weight &#x201c;W&#x201d; (indicating how many times the transition appears in the transcripts, e.g., a weight equal to two) in a combined transcript &#x201c;CT.&#x201d; Similarly, because a transition from page P<b>4</b> to page P<b>5</b> is present in both transcripts &#x201c;T<b>1</b>&#x201d; and &#x201c;T<b>2</b>,&#x201d; in block <b>1610</b>, this transition (P<b>4</b><img id="CUSTOM-CHARACTER-00018" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b>) is combined into a single transition and assigned a weight &#x201c;W&#x201d; (indicating how many times the transition appears in the transcripts, e.g., a weight equal to two) in a combined transcript &#x201c;CT.&#x201d; The other transitions appear in only one transcript. Therefore, in this example, in block <b>1610</b>, these transitions are each assigned a weight equal to one. Further, a timestamp value may be stored for each page indicating a time at which the page was first accessed. After transitioning to page P<b>5</b>, the first and second transcripts &#x201c;T<b>1</b>&#x201d; and &#x201c;T<b>2</b>&#x201d; indicate the user may transition to either page P<b>2</b> or page P<b>1</b>. Thus, the combined transitions include a branch &#x201c;B<b>1</b>&#x201d; and no longer follow a linear path.</p>
<p id="p-0201" num="0200">After the individual transcripts have been combined to form the combined transcript &#x201c;CT,&#x201d; in block <b>1620</b>, the combined transcript &#x201c;CT&#x201d; is used to create a directed graph structure &#x201c;SD.&#x201d; The directed graph structure &#x201c;SD&#x201d; includes states and transitions between states. The states are merely end points (or nodes) for the transitions. Each transition is associated with one or more pages. The directed graph structure &#x201c;SD&#x201d; illustrated in <figref idref="DRAWINGS">FIG. 6</figref> includes five states S<b>1</b> to S<b>5</b>, and five transitions TRANS-<b>1</b> to TRANS-<b>5</b>.</p>
<p id="p-0202" num="0201">In the directed graph structure &#x201c;SD,&#x201d; linear sequences of transitions (i.e., sequences of transitions without any branches) in the combined transcript &#x201c;CT&#x201d; are reduced or simplified into a single transition. For example, the linear sequence of transitions that includes the following transitions (P<b>6</b><img id="CUSTOM-CHARACTER-00019" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b><img id="CUSTOM-CHARACTER-00020" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b>), is simplified into the single transition TRANS-<b>1</b> (or S<b>1</b><img id="CUSTOM-CHARACTER-00021" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>S<b>2</b>) that is associated with the pages P<b>6</b>, P<b>4</b>, and P<b>5</b>. The weight of transition TRANS-<b>1</b> is the same as the weight of each of the transitions (P<b>6</b><img id="CUSTOM-CHARACTER-00022" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>4</b><img id="CUSTOM-CHARACTER-00023" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P<b>5</b>). The transition TRANS-<b>2</b> (or S<b>2</b><img id="CUSTOM-CHARACTER-00024" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>S<b>3</b>) is associated with the pages P<b>5</b> and P<b>1</b>. The transition TRANS-<b>3</b> (or S<b>2</b><img id="CUSTOM-CHARACTER-00025" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>S<b>4</b>) is associated with the pages P<b>5</b> and P<b>2</b>. The transition TRANS-<b>4</b> (or S<b>3</b><img id="CUSTOM-CHARACTER-00026" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>S<b>5</b>) is associated with the pages P<b>1</b> and P<b>3</b>. The transition TRANS-<b>5</b> (or S<b>4</b><img id="CUSTOM-CHARACTER-00027" he="2.79mm" wi="2.46mm" file="US08626806-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>S<b>5</b>) is associated with the pages P<b>2</b> and P<b>3</b>.</p>
<p id="p-0203" num="0202">When the states and transitions are created by combining the transitions in the combined transcript &#x201c;CT,&#x201d; a timestamp delta valued is calculated for each page. The timestamp delta is the difference between the start time of the transcript (e.g., a time at which execution of the virtual application began) and the timestamp recorded for the page in the transcript. Then, an average timestamp delta value is calculated for the pages associated with each of the transitions between states. This average is recorded for each transition between states as a TickDelta member.</p>
<p id="p-0204" num="0203">The directed graph structure &#x201c;SD&#x201d; describes data access by the application while executing and may be stored in one or more state objects. Referring to <figref idref="DRAWINGS">FIG. 24</figref>, each of the states (e.g., the states S<b>1</b> to S<b>5</b>) may be stored in a different state object <b>1660</b>. The state object <b>1660</b> may include a list of transitions <b>1662</b> associated with the state. For example, the list of transitions for a state object corresponding to the state S<b>1</b> would include only the transition TRANS-<b>1</b>. By way of another example, the list of transitions for a state object corresponding to the state S<b>2</b> would include the transitions TRANS-<b>2</b> and TRANS-<b>3</b>. The state object <b>1660</b> may include a degree member <b>1664</b> that indicates a number of transitions associated with the state object <b>1660</b>. For example, the degree member of the state object corresponding to the state S<b>1</b> would indicate only a single transition is associated with the state object (e.g., degree=1). By way of another example, the degree member of the state object corresponding to the state S<b>2</b> would indicate two transitions are associated with the state object (e.g., degree=2). The state object <b>1660</b> may include a weight member <b>1666</b> that stores a total of the weights assigned to the transitions. For example, the weight member of the state object corresponding to the state S<b>1</b> may be set to a weight of two. By way of another example, the weight member of the state object corresponding to the state S<b>2</b> may be set to a weight of two. The weight members of state objects corresponding to the states S<b>3</b> and S<b>4</b> may each be set to a weight of one.</p>
<p id="p-0205" num="0204">Referring to <figref idref="DRAWINGS">FIG. 25</figref>, each of the transitions may be stored in a transition data structure <b>1670</b> that has a weight member <b>1672</b> indicating how many times the transition occurs in the combined transcript. The transition data structure <b>1670</b> may include a page sequence member <b>1674</b> that stores the page identifiers of the pages included in the transition. For example, the page sequence member of a transition data structure storing the transition TRANS-<b>1</b> would store identifiers for pages P<b>6</b>, P<b>4</b>, and P<b>5</b>. The transition data structure <b>1670</b> may include a TickDelta member <b>1676</b> that stores an amount of time (e.g., in nanoseconds) that the transition required.</p>
<p id="p-0206" num="0205">The directed graph structure &#x201c;SD&#x201d; (stored by the one or more state objects) may include loops or cycles. By way of a non-limiting example, the directed graph structure &#x201c;SD&#x201d; may be a directed acyclic graph (&#x201c;DAG&#x201d;). However, this is not a requirement. As mentioned above, in the directed graph structure &#x201c;SD,&#x201d; the transitions (or &#x201c;edges&#x201d;) are labeled with a set of pages or data blocks.</p>
<p id="p-0207" num="0206">Transition data structures that are too large may be divided into two or more separate transition data structures. For example, transition data structures that have a large value stored in the TickDelta member, or have a large number of pages stored in the page sequence member may be subdivided into two or more separate transition data structures.</p>
<p id="p-0208" num="0207">In block <b>1630</b>, the pages identified in the page sequence members of the transition data structures are encoded in one or more xsequence files. The xsequence files each belong to one of three categories: prefetch xsequence files, sequence xsequence files, and rest xsequence files. For example, the xsequence files <b>1182</b> of the streaming model <b>122</b> illustrated in <figref idref="DRAWINGS">FIG. 19</figref> include a prefetch xsequence file <b>1632</b>, a sequence xsequence file <b>1634</b>, and a rest xsequence file <b>1636</b>.</p>
<p id="p-0209" num="0208">As mentioned above, the virtual application <b>110</b> may be streamed from the server computing device <b>7</b> without using a special streaming protocol by encoding the xlayer file into smaller xsequence files. In particular embodiments, the virtual application <b>110</b> may be streamed from the server computing device <b>7</b> using well-known download protocols, such as HTTP, FTP, SMB, and the like. Which category a particular page is encoded into is based upon the directed graph structure &#x201c;SD&#x201d; which predicts when the page may be used by a virtual application as it is executing as xsequence files are concurrently being downloaded.</p>
<p id="p-0210" num="0209"><figref idref="DRAWINGS">FIG. 26</figref> is a flow diagram of a method <b>1700</b> of encoding the pages of the directed graph structure &#x201c;SD&#x201d; into xsequence files. The method <b>1700</b> may be performed in block <b>1630</b> of the method <b>1600</b> illustrated in <figref idref="DRAWINGS">FIG. 23</figref>. In first block <b>1710</b>, the model building server <b>8</b> identifies the pages to be stored in the prefetch xsequence files. Prefetch xsequence files contain pages that must be downloaded before the virtual application (e.g., the virtual application <b>110</b>) launches. For example, depending upon the implementation details, the user may see a buffering dialog while prefetch xsequence files are downloaded. Depending upon the implementation details, each streaming model may include only a single prefetch xsequence file including the pages identified in block <b>1710</b>.</p>
<p id="p-0211" num="0210">In block <b>1710</b>, the pages included in the prefetch xsequence file may be identified by determining how close in time (which may be determined using the time stamp for the page) each page is to an origin or first transition data structure listed in the list of transitions in a first state object in the directed graph structure &#x201c;SD.&#x201d; Then, only the pages accessed within a predetermined amount of time from the first transition data structure may be selected for inclusion in the prefetch xsequence file(s). Alternatively, a predetermined number of pages accessed within a least amount of time from the first transition data structure may be selected for inclusion in the prefetch xsequence file(s). By way of another non-limiting example, a predetermined percentage of pages including those that were accessed within the least amount of time from the first transition data structure may be selected for inclusion in the prefetch xsequence file(s).</p>
<p id="p-0212" num="0211">The following pseudo code provides a non-limiting example of a method of encoding the pages in the prefetch xsequence file using the directed graph structure &#x201c;SD.&#x201d;</p>
<p id="p-0213" num="0212">
<tables id="TABLE-US-00010" num="00010">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public void CompilePrefetch ( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>foreach (State s in Model.states)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>if (s.IsChildOf (OriginState) &#x26;&#x26;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>s.Ticks &#x3c; BUFFERTIME_THRESHOLD)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>ListOfPrefectchStates.Add (s);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0214" num="0213">In the pseudo code above, the function named &#x201c;IsChildOf&#x201d; determines whether a second state (stored in variable named &#x201c;5&#x201d;) is reachable from the first state (stored in a variable named &#x201c;OriginState&#x201d;). In other words, the function named &#x201c;IsChildOf&#x201d; determines whether a path exists in the directed graph structure &#x201c;SD&#x201d; from the first state to the second state. In <figref idref="DRAWINGS">FIG. 6</figref>, the state &#x201c;S<b>1</b>&#x201d; is considered the first or origin state. If the second state is reachable from the first state and less than a threshold amount of time (stored in a constant named &#x201c;BUFFERTIME_THRESHOLD&#x201d;) elapsed between the first and second states, the second state is added to a list of prefetch states. Then, while not included in the pseudo code above, the pages associated with the transitions between the first and second states are written into the prefetch xsequence file.</p>
<p id="p-0215" num="0214">In block <b>1715</b>, the model building server <b>8</b> writes the pages identified in block <b>1710</b> to the prefetch xsequence file(s).</p>
<p id="p-0216" num="0215">In block <b>1720</b>, the model building server <b>8</b> identifies pages for inclusion in the sequence xsequence files. For example, in block <b>1720</b>, the model building server <b>8</b> may identify the pages (identified in the page sequence members of the transition data structures) that were not written to the prefetch xsequence file(s) in block <b>1715</b>.</p>
<p id="p-0217" num="0216">In decision block <b>1725</b>, the model building server <b>8</b> decides whether to create a sequence xsequence file for each transition data structure that was not used to populate the prefetch xsequence file or to reduce the number of sequence xsequence files created by combining the transition data structures that were not used to populate the prefetch xsequence file. The decision in decision block <b>1725</b> is &#x201c;YES&#x201d; when the model building server <b>8</b> decides to combine the transition data structures that were not used to populate the prefetch xsequence file. Otherwise, the decision in decision block <b>1725</b> is &#x201c;NO&#x201d; when the model building server <b>8</b> decides to create a sequence xsequence file for each transition data structure that was not used to populate the prefetch xsequence file.</p>
<p id="p-0218" num="0217">When the decision in decision block <b>1725</b> is &#x201c;YES,&#x201d; in block <b>1730</b>, the model building server <b>8</b> combines at least a portion of the transition data structures that were not used to populate the prefetch xsequence file. For example, in block <b>1730</b>, the model building server <b>8</b> may combine similar transitions into a single transition to be stored in a single sequence xsequence file. By way of another example, a threshold file size may be used to identify sequence xsequence files having a size less than the threshold file size. The sequence xsequence files identified may be combined into one or more larger sequence xsequence files. The following pseudo code provides a non-limiting example of a method of combining transitions into a single transition for storage in a single sequence xsequence file.</p>
<p id="p-0219" num="0218">
<tables id="TABLE-US-00011" num="00011">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public void CompileSequences ( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>foreach (State s in Model.states)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="77pt" align="left"/>
<colspec colname="1" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>MergeSimilarSequences (s);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0220" num="0219">Next, in block <b>1735</b>, the pages identified in block <b>1720</b> are stored in sequence xsequence files. As mentioned above, a sequence xsequence file may be created for each transition data structure that was not used to populate the prefetch xsequence file and used to store the pages of the transition data structure for which the sequence xsequence file was created. Optionally, the number of transition data structures that were not used to populate the prefetch xsequence file may be reduced by combining two or more of them before creating the sequence xsequence files.</p>
<p id="p-0221" num="0220">The sequence xsequence files store the pages that were accessed by the application as it executed. Thus, the sequence xsequence files store all of the pages appearing in all of the transcripts.</p>
<p id="p-0222" num="0221">In block <b>1740</b>, the model building server <b>8</b> identifies pages for inclusion in the rest xsequence files. In block <b>1740</b>, the model building server <b>8</b> identifies pages that did not appear in every transcript for inclusion in the rest xsequence files. For example, referring to <figref idref="DRAWINGS">FIG. 6</figref>, one or more rest xsequence files would store the pages P<b>1</b> and P<b>2</b>. Further, in block <b>1740</b>, the model building server <b>8</b> identifies pages that did not appear in any of the transcripts for inclusion in the rest xsequence files.</p>
<p id="p-0223" num="0222">While a rest xsequence file may store one or more pages also stored in one of the sequence xsequence files, this is not a requirement. Optionally, in decision block <b>1742</b>, the model building server <b>8</b> may decide whether to search the sequence xsequence files for each page and only write pages not found in the sequence xsequence files to the rest xsequence file(s). The decision in decision block <b>1742</b> is &#x201c;YES&#x201d; when the model building server <b>8</b> decides to search the sequence xsequence files for each page. Otherwise, the decision in decision block <b>1742</b> is &#x201c;NO&#x201d; when the model building server <b>8</b> decides not to search the sequence xsequence files for each page.</p>
<p id="p-0224" num="0223">When the decision in decision block <b>1742</b> is &#x201c;NO,&#x201d; in block <b>1744</b>, the model building server <b>8</b> writes the pages identified in block <b>1740</b> to the rest xsequence file(s). It may be beneficial to include all of the pages that did not appear in every transcript in the rest xsequence file(s) because as the directed graph structure &#x201c;SD&#x201d; is traversed, particular transitions may not be visited.</p>
<p id="p-0225" num="0224">When the decision in decision block <b>1742</b> is &#x201c;YES,&#x201d; for each page, in block <b>1745</b>, the model building server <b>8</b> searches the sequence xsequence files to determine whether the page has been written to one or more of the sequence xsequence files.</p>
<p id="p-0226" num="0225">Then, in decision block <b>1750</b>, the model building server <b>8</b> determines whether the page has been written to one or more of the sequence xsequence files. The decision in decision block <b>1750</b> is &#x201c;YES&#x201d; when the page has been written to one or more of the sequence xsequence files. Otherwise, the decision in decision block <b>1750</b> is &#x201c;NO&#x201d; when the page has not been written to one or more of the sequence xsequence files.</p>
<p id="p-0227" num="0226">When the decision in decision block <b>1750</b> is &#x201c;NO,&#x201d; in block <b>1755</b>, the model building server <b>8</b> writes the page to a rest xsequence file. Then, the model building server <b>8</b> advances to decision block <b>1760</b>.</p>
<p id="p-0228" num="0227">When the decision in decision block <b>1750</b> is &#x201c;YES,&#x201d; the page may be omitted from the rest xsequence file and the model building server <b>8</b> advances to decision block <b>1760</b>.</p>
<p id="p-0229" num="0228">In decision block <b>1760</b>, the model building server <b>8</b> determines whether there are any pages for which the sequence xsequence files have not been searched. The decision in decision block <b>1760</b> is &#x201c;YES&#x201d; when the model building server <b>8</b> has not searched the sequence xsequence files for all of the pages. Otherwise, the decision in decision block <b>1760</b> is &#x201c;NO&#x201d; when the model building server <b>8</b> has searched the sequence xsequence files for all of the pages.</p>
<p id="p-0230" num="0229">The pages may be ordered within the rest xsequence files based on the frequencies at which the pages appeared in the transcripts. Rest xsequence files may be downloaded when the download pipeline (that is downloading the xsequence files from the server computing device <b>7</b> to the client computing device <b>9</b>) is idle.</p>
<p id="p-0231" num="0230">The following pseudo code provides a non-limiting example of a method of adding pages to the rest xsequence file.</p>
<p id="p-0232" num="0231">
<tables id="TABLE-US-00012" num="00012">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public void CompileRest(Transcripts)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Transcript.Pages.SortByFrequency ( );</entry>
</row>
<row>
<entry/>
<entry>foreach(Page p in Transcript.Pages)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>RestSequence.Add (p);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0233" num="0232">Then, in block <b>1770</b>, the model building server <b>8</b> creates the streaming model file <b>1180</b> (see <figref idref="DRAWINGS">FIG. 19</figref>). The streaming model file <b>1180</b> stores information in the directed graph structure &#x201c;SD.&#x201d; By way of a non-limiting example, the model file may store a number of states in the directed graph structure &#x201c;SD,&#x201d; a list of states in the directed graph structure &#x201c;SD,&#x201d; a list of transitions for each state, a weight associated with each transition, and a list of pages associated with each transition. The Sandbox Manager <b>134</b> may use this information to predict to which pages the virtual application <b>110</b> will request access as the virtual application <b>110</b> executes. Based on these predictions, the Sandbox Manager <b>134</b> may preemptively download pages before the pages are requested by the virtual application <b>110</b>.</p>
<p id="p-0234" num="0233">Referring to <figref idref="DRAWINGS">FIG. 19</figref>, the following pseudo code provides a non-limiting example of a method of creating the streaming model file <b>1180</b>, and the xsequence files <b>1182</b>, which in the following pseudo code include a single prefetch xsequence file, one or more sequence xsequence files, and one or more rest xsequence files. The following pseudo code uses data that was stored in data structures by pseudo code portions provided above.</p>
<p id="p-0235" num="0234">
<tables id="TABLE-US-00013" num="00013">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public void Save ( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// save the model</entry>
</row>
<row>
<entry/>
<entry>Model.SaveAs(&#x201c;Model.xm&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>// save prefetch file</entry>
</row>
<row>
<entry/>
<entry>ListOfPrefectchStates.Squence.SaveAs(&#x201c;p.xs&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>// save sequences</entry>
</row>
<row>
<entry/>
<entry>foreach(Sequence s in States.Sequences)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// {0} represents the sequence id</entry>
</row>
<row>
<entry/>
<entry>s.SaveAs(&#x201c;s{0}.xs&#x201d;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>// save rest files</entry>
</row>
<row>
<entry/>
<entry>foreach(Sequence s in</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>RestSequence.SplitSequenceBy(RestPagesPerStream))</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// {0} represents the rest sequence id</entry>
</row>
<row>
<entry/>
<entry>s.SaveAs(&#x201c;r{0}.xs&#x201d;);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0236" num="0235">Then, the method <b>1700</b> terminates.</p>
<p id="p-0237" num="0236"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a method <b>1000</b> that may be performed by the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b>. In first block <b>1010</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> requests that the server computing device <b>7</b> stream the virtual application <b>110</b> to the client computing device <b>9</b>. Arrow &#x201c;A<b>9</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the client computing device <b>9</b> to the server computing device <b>7</b> requesting that that the server computing device <b>7</b> stream a virtual application (e.g., the virtual application <b>110</b>) to the client computing device <b>9</b>. By way of a non-limiting example, in block <b>1010</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> may request streaming by passing a URL to the server computing device <b>7</b>.</p>
<p id="p-0238" num="0237">In response to this request, the server computing device <b>7</b> streams the streaming model file <b>1180</b> and the prefetch xsequence file(s) (e.g., the prefetch xsequence file <b>1632</b>) to the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b>. Arrow &#x201c;A<b>10</b>&#x201d; in <figref idref="DRAWINGS">FIG. 13</figref> illustrates a communication from the server computing device <b>7</b> to the client computing device <b>9</b> that streams streaming model file <b>1180</b> and the xsequence files <b>1182</b> (which include the prefetch xsequence file <b>1632</b>) from the server computing device <b>7</b> to the client computing device <b>9</b>.</p>
<p id="p-0239" num="0238">In block <b>1015</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> receive the model file and the prefetch xsequence file(s).</p>
<p id="p-0240" num="0239">By way of a non-limiting example, the following code may be used in blocks <b>1010</b> and <b>1015</b> to pass a URL to the server computing device <b>7</b> and download the model file and the prefetch xsequence files.</p>
<p id="p-0241" num="0240">
<tables id="TABLE-US-00014" num="00014">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>LaunchApplication(&#x201c;http://Host/StreamingApp/&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>LaunchApplication(WebUrl)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Model m = DownloadModel(WebUrl + &#x201c;/Model.xm&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>Prefetch p = DownloadPrefetch(WebUrl + &#x201c;/p.xs&#x201d;);</entry>
</row>
<row>
<entry/>
<entry>Execute(m, p);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0242" num="0241">Then, in block <b>1020</b>, the Sandbox Manager <b>134</b> launches the virtual application <b>110</b>. Thus, the virtual application <b>110</b> begins executing even though less then all of the data stored in the xlayer file <b>300</b> has been downloaded.</p>
<p id="p-0243" num="0242">In decision block <b>1022</b>, the Sandbox Manager <b>134</b> determines whether it has received a notification from the virtual runtime engine <b>131</b> that a page has been requested by the virtual application <b>110</b> that has not yet been downloaded, or whether there are additional xsequence files to be downloaded for the virtual application <b>110</b>.</p>
<p id="p-0244" num="0243">The decision in decision block <b>1022</b> is &#x201c;REQUEST&#x201d; when the Sandbox Manager <b>134</b> determines it has received a notification from the virtual runtime engine <b>131</b> that a page has been requested by the virtual application <b>110</b> that has not yet been downloaded.</p>
<p id="p-0245" num="0244">The decision in decision block <b>1022</b> is &#x201c;MORE TO DOWNLOAD&#x201d; when the Sandbox Manager <b>134</b> determines there are additional xsequence files to be downloaded for the virtual application <b>110</b> and the Sandbox Manager <b>134</b> determines it has not received a notification from the virtual runtime engine <b>131</b> that a page has been requested by the virtual application <b>110</b> that has not yet been downloaded.</p>
<p id="p-0246" num="0245">When the decision in decision block <b>1022</b> is &#x201c;REQUEST,&#x201d; in block <b>1030</b>, the directing process <b>129</b> identifies the xsequence file storing the page for which access has been requested. The directing process <b>129</b> may use the model file to look up which xsequence file is storing the page for which access has been requested. Optionally, the directing process <b>129</b> may pause execution of the virtual application <b>110</b>.</p>
<p id="p-0247" num="0246">In block <b>1035</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> download the xsequence file indentified in block <b>1030</b> while the virtual application <b>110</b> is in use. Then, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> return to decision block <b>1022</b>.</p>
<p id="p-0248" num="0247">The Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> may download additional xsequence files even without receiving a notification from the virtual runtime engine <b>131</b> indicating a page stored by the xsequence file has been requested. For example, after the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> have downloaded the model file and the prefetch xsequence file(s), the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> may download the sequence xsequence files.</p>
<p id="p-0249" num="0248">When the decision in decision block <b>1022</b> is &#x201c;MORE TO DOWNLOAD,&#x201d; in decision block <b>1045</b>, the Sandbox Manager <b>134</b> determines whether one or more of the sequence xsequence files have yet to be downloaded. The decision in decision block <b>1045</b> is &#x201c;YES&#x201d; when one or more of the sequence xsequence files have yet to be downloaded. Otherwise, the decision in decision block <b>1045</b> is &#x201c;NO&#x201d; when all of the sequence xsequence files have been downloaded.</p>
<p id="p-0250" num="0249">When the decision in decision block <b>1045</b> is &#x201c;YES,&#x201d; in block <b>1050</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> download one of the sequence xsequence files. The directing process <b>129</b> may use the model file to determine which sequence xsequence file to download. Because the directing process <b>129</b> knows which of the sequence xsequence file was the last one downloaded, the directing process <b>129</b> may use the model file to traverse the directed graph structure &#x201c;SD&#x201d; and locate the next sequence xsequence file to download. By way of a non-limiting example, the following pseudo code provides an exemplary download loop that may be used to download the sequence xsequence file (referred to in the following pseudo code as &#x201c;blocks&#x201d;). The function named &#x201c;GetNextXferBlock( )&#x201d; reads the model file to identify the next sequence xsequence file to download.</p>
<p id="p-0251" num="0250">
<tables id="TABLE-US-00015" num="00015">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>private void DoStreamDownload( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>while (!DownloadComplete)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// prediction logic</entry>
</row>
<row>
<entry/>
<entry>Url urlBlock = GetNextXferBlock( );</entry>
</row>
<row>
<entry/>
<entry>// download the block using http</entry>
</row>
<row>
<entry/>
<entry>Block block = DownloadBlock(urlBlock);</entry>
</row>
<row>
<entry/>
<entry>// write the pages to memory shared</entry>
</row>
<row>
<entry/>
<entry>// with virtual machine</entry>
</row>
<row>
<entry/>
<entry>MemoryMap.Write(block);</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0252" num="0251">The above download loop continues looping until all of the sequence xsequence files listed in the model file are written to the shared memory block <b>133</b>. As mentioned above, in the above pseudo code, the order in which the sequence xsequence files are downloaded is determined by the function named &#x201c;GetNextXferBlock( )&#x201d; The following pseudo code provides an exemplary implementation of the function named &#x201c;GetNextXferBlock( )&#x201d;</p>
<p id="p-0253" num="0252">
<tables id="TABLE-US-00016" num="00016">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>public Block GetNextXferBlock( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>// sort all threads and processes by last</entry>
</row>
<row>
<entry/>
<entry>// scheduled time to ensure fairness</entry>
</row>
<row>
<entry/>
<entry>VirtualApp.Threads.SortByLastScheduledTime( );</entry>
</row>
<row>
<entry/>
<entry>Block xferBlock = null;</entry>
</row>
<row>
<entry/>
<entry>// get the predicted sequence</entry>
</row>
<row>
<entry/>
<entry>foreach (VirtualThread vt in VirtualApp.Threads)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>xferBlock =</entry>
</row>
<row>
<entry/>
<entry>&#x2002;GetPredictedBlock(VirtualApp.Threads.First);</entry>
</row>
<row>
<entry/>
<entry>if (xferBlock != null)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="63pt" align="left"/>
<colspec colname="1" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>vt.LastScheduledTime = DateTime.UtcNow;</entry>
</row>
<row>
<entry/>
<entry>return xferBlock;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>// finally get a rest block if no other blocks</entry>
</row>
<row>
<entry/>
<entry>// are required</entry>
</row>
<row>
<entry/>
<entry>xferBlock = GetNextRestBlock( );</entry>
</row>
<row>
<entry/>
<entry>return xferBlock;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0254" num="0253">As discussed above, the directed graph structure &#x201c;SD&#x201d; may include one or more branches. Therefore, when the Sandbox Manager <b>134</b> is traversing the directed graph structure &#x201c;SD&#x201d; (using the model file) and encounters a branch, the Sandbox Manager <b>134</b> must select one of the transitions of the branch. The Sandbox Manager <b>134</b> may perform a weighted depth first traversal of the directed graph structure &#x201c;SD,&#x201d; which reflects the order(s) in which the pages are most commonly accessed as determined by the profiling process <b>700</b> and the modeling process. Alternatively, other types of traversal, such as a breadth first traversal may be used. The weight assigned to a transition to a particular sequence xsequence file (which stores the pages of one or more transition data structures) may be a percentage that the particular transition occurred out of all of the transitions recorded in the transcripts. <figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary traversal of a streaming model containing the sequence xsequence files SXF<b>1</b> to SXF<b>6</b>. Each transition between two consecutively accessed sequence xsequence file is assigned a weight. For example, the weight assigned to the transition between the sequence xsequence file SXF<b>1</b> and SXF<b>2</b> is 40%. In this example, the sequence xsequence files are downloaded in the following order: SXF<b>1</b>, SXF<b>3</b>, SXF<b>5</b>, SXF<b>6</b>, SXF<b>4</b>, and SXF<b>2</b>.</p>
<p id="p-0255" num="0254">Returning to <figref idref="DRAWINGS">FIG. 7</figref>, the rest xsequence files are downloaded after the sequence xsequence files have been downloaded. Thus, when the decision in decision block <b>1045</b> is &#x201c;NO,&#x201d; in block <b>1060</b>, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> download one or more rest xsequence files. The rest xsequence files are ordered by the frequency in which their pages were accessed during the profiling process <b>700</b>. For example, a rest file &#x201c;0&#x201d; (r0.xs) may contains pages that are most likely to be accessed, and should be downloaded first. Then, the Sandbox Manager <b>134</b> and/or the Client Application <b>132</b> advances to decision block <b>1065</b>.</p>
<p id="p-0256" num="0255">In decision block <b>1065</b>, the Sandbox Manager <b>134</b> determines whether all of the xsequence files have been downloaded. The decision in decision block <b>1065</b> is &#x201c;YES&#x201d; when all of the xsequence files have been downloaded. Otherwise, the decision in decision block <b>1065</b> is &#x201c;NO&#x201d; when all of the xsequence files have not been downloaded.</p>
<p id="p-0257" num="0256">When the decision in decision block <b>1065</b> is &#x201c;NO,&#x201d; the Sandbox Manager <b>134</b> returns to decision block <b>1022</b>.</p>
<p id="p-0258" num="0257">When the decision in decision block <b>1065</b> is &#x201c;YES,&#x201d; all of the rest xsequence files have been downloaded. Therefore, the application download is complete, and the method <b>1000</b> terminates.</p>
<p id="p-0259" num="0258">The following pseudo code is a non-limiting example of a method of downloading the rest xsequence files and determining when the download is complete.</p>
<p id="p-0260" num="0259">
<tables id="TABLE-US-00017" num="00017">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>private Block GetNextRestBlock( )</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>if (DownloadedRestBlocks &#x3c; Model.RestBlocks)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>return Model.RestBlocks[DownloadedRestBlocks++];</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>else</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>DownloadedComplete = true;</entry>
</row>
<row>
<entry/>
<entry>return null;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<heading id="h-0015" level="1">Directing Download</heading>
<p id="p-0261" num="0260">U.S. patent application Ser. No. 12/695,107 (which is incorporated herein by reference) describes the Sandbox Manager <b>134</b>, which is a virtual process manager configured to download and execute a virtualized application file from a server computing device to a client computing device. Each of the streaming model file <b>1180</b> (see <figref idref="DRAWINGS">FIG. 19</figref>), the prefetch xsequence files, the sequence xsequence files, and the rest sequence files may be downloaded using well-known conventional download protocols, such as HTTP, FTP, SMB, and the like. As discussed above, the Sandbox Manager <b>134</b> may be used to implement the directing process <b>129</b> configured to direct the delivery and execution of the virtual application <b>110</b>. The directing process <b>129</b> may perform operations on behalf of the virtual application <b>110</b> including, but not limited to, streaming application code and data, profiling execution (e.g., by performing the method <b>800</b> illustrated in <figref idref="DRAWINGS">FIG. 5</figref>), managing the sandbox <b>124</b>, performing shell integration, and performing instance management. To support these operations in a cooperative fashion, the directing process <b>129</b> selectively starts, pauses, terminates, and monitors the virtual application <b>110</b>. By way of a non-limiting example, the directing process <b>129</b> may start, pause, resume, terminate the virtual application <b>110</b> in response to a command or instruction from a user or another process (or application) separate from the Sandbox Manager <b>134</b> and the virtual runtime engine <b>131</b>. The directing process <b>129</b> may also dynamically populate the underlying xlayer file <b>300</b> during execution of the virtual application <b>110</b>.</p>
<p id="p-0262" num="0261"><figref idref="DRAWINGS">FIG. 14</figref> illustrates the block of shared memory <b>133</b> that may be used to send settings and state between the directing process <b>129</b> and the virtual runtime engine <b>131</b>. As illustrated in <figref idref="DRAWINGS">FIG. 14</figref>, the directing process <b>129</b> may direct multiple virtual runtime engines, which may each communicate with the directing process <b>129</b> via a named pipe connection (described above). Depending upon the implementation details, the directing process <b>129</b> may use one or more special command-line arguments <b>1170</b>, status events, one or more sentinel objects <b>1174</b>, and shared memory structures <b>1172</b> (stored in the shared memory block <b>133</b>) to control the dynamic delivery, starting, monitoring, pausing, and/or termination of the virtual application <b>110</b> executing with the virtual environment implemented by the virtual runtime engine <b>131</b>.</p>
<p id="p-0263" num="0262">As mentioned above, the directing process <b>129</b> may send one or more special command-line arguments <b>1170</b> to the virtual runtime engine <b>131</b>. For example, settings may be provided to the virtual runtime engine <b>131</b> via the special command-line arguments <b>1170</b>. An exemplary command-line argument may include &#x201c;/XExecutionSession=&#x3c;SessionId&#x3e;.&#x201d; This SessionId value is used by the directing process <b>129</b> and the virtual runtime engine <b>131</b> to lookup the shared memory by name.</p>
<p id="p-0264" num="0263">By way of a non-limiting example, the shared memory block <b>133</b> may have a name with the following format:</p>
<p id="p-0265" num="0264">_xmgr_&#x3c;managerVersion&#x3e;_sessioninfo_&#x3c;sessionId&#x3e;</p>
<p id="h-0016" num="0000">In the above format, &#x201c;managerVersion&#x201d; is one of the special command-line arguments <b>1170</b> (like the SessionId value). By way of a non-limiting example, the SessionId value may be implemented as a 64-bit integer.</p>
<p id="p-0266" num="0265">Status events are created and used by the directing process <b>129</b> to signal changes in the state of the session to the virtual runtime engine <b>131</b>. By way of a non-limiting example, the session may have the following states, which may be assigned the exemplary values indicated:</p>
<p id="p-0267" num="0266">
<tables id="TABLE-US-00018" num="00018">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>ESessionStates</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="105pt" align="left"/>
<colspec colname="2" colwidth="63pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>eSessionPaused</entry>
<entry>= 0x1,</entry>
</row>
<row>
<entry/>
<entry>eSessionRunning</entry>
<entry>= 0x2,</entry>
</row>
<row>
<entry/>
<entry>eSessionShutdown</entry>
<entry>= 0x3,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0268" num="0267">The sentinel object <b>1174</b>, which is a named kernel object, is used to indicate the lifetime of the virtual application. For example, a named mutex may be used. Once the sentinel object <b>1174</b> disappears (which may be determined by polling in the directing process <b>129</b>) all processes of the virtual application <b>110</b> have terminated. As is appreciated by those of ordinary skill in the art, some operating systems, such as Microsoft WINDOWS&#xae;, are configured to track or count references by other objects to named kernel objects. Thus, when a WINDOWS&#xae; process has a reference (or handle) to the sentinel object <b>1174</b>, the host operating system <b>35</b>A (see <figref idref="DRAWINGS">FIG. 2</figref>) will store an indication of this reference. For example, the host operating system <b>35</b>A may store a reference count indicating how many objects have references to the sentinel object <b>1174</b>. When the reference count is zero, no processes have references to the sentinel object <b>1174</b>.</p>
<p id="p-0269" num="0268">In addition to the above fixed-sized shared memory structures used to manage execution of the virtual application <b>110</b>, optionally, another named shared memory block <b>1176</b> containing handles to a shared mapping of the xlayer file (e.g., the xlayer file <b>300</b>) itself may be used, along with a shared memory based bit-array structure <b>1178</b> to support dynamic population of the xlayer file (e.g., the xlayer file <b>300</b>) while the virtual application <b>110</b> is running. This is done to support streaming delivery of the virtual application <b>110</b> using the streaming model <b>122</b>.</p>
<p id="h-0017" num="0000">Starting a Virtual Application</p>
<p id="p-0270" num="0269"><figref idref="DRAWINGS">FIG. 27</figref> is a flow diagram of a method <b>1200</b> of starting a virtual application in a directed fashion. The method <b>1200</b> may be performed in block <b>1020</b> of the method <b>1000</b> illustrated in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0271" num="0270">In first block <b>1210</b>, the directing process <b>129</b> allocates the block of shared memory <b>133</b> (see <figref idref="DRAWINGS">FIG. 2</figref>). In next block <b>1215</b>, the directing process <b>129</b> allocates a status event object used for signaling changes in the state of the session. The status event objects may be implemented using the WINDOWS&#xae; event system that uses kernel handles.</p>
<p id="p-0272" num="0271">Then, in block <b>1220</b>, the directing process <b>129</b> sets the values of any specific settings or values stored in the shared memory block. For example, the shared memory block may store a SignalEvent value and a State value. The SignalEvent value is set to the handle value of the status event object allocated in block <b>1215</b>.</p>
<p id="p-0273" num="0272">Whenever the State value is changed or the xlayer mapping <b>1176</b> is updated by the directing process <b>129</b> (e.g., when additional xsequence files have been downloaded), the directing process <b>129</b> triggers a SignalEvent. In response to detecting the SignalEvent, each thread launched by the execution of the virtual application <b>110</b> checks the State value to determine if the state of the virtual application <b>110</b> is to be changed (e.g., paused, resumed, or terminated). Any threads waiting for the xlayer mapping <b>1176</b> to indicate a particular portion of the downloading virtualized application file is available (or stored in a local copy of the virtualized application file), also check the xlayer mapping <b>1176</b> to determine whether the data has been delivered.</p>
<p id="p-0274" num="0273">The initial value of the State value depends upon in which state the virtual application <b>110</b> is to be launched. If the virtual application is to be launched in a &#x201c;paused&#x201d; state, the State value is set to a value indicating the application is paused (e.g., the eSessionPaused value). Otherwise, the State value is set to a value indicating the application is executing (e.g., the eSessionRunning value). If at some point, the application is terminated, the State value is set to a value indicating the application has shutdown (e.g., the eSessionShutdown value).</p>
<p id="p-0275" num="0274">Once the shared memory block <b>133</b>, status event object(s), and command-line arguments are prepared, in block <b>1225</b>, the directing process <b>129</b> launches the virtual application <b>110</b>. By way of a non-limiting example, the virtual application <b>110</b> may be launched via standard a Win32 CreateProcess function or ShellExecute APIs. The following pseudo code provides a non-limiting example of a method of starting a virtual application.</p>
<p id="p-0276" num="0275">
<tables id="TABLE-US-00019" num="00019">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>SessionId = Allocate random 64-bit integer</entry>
</row>
<row>
<entry/>
<entry>SharedMemoryName =</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x201c;_xmgr_&#x3c;mgrVersion&#x3e;_sessionInfo_&#x3c;SessionId&#x3e;&#x201d;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>SharedMemory = CreateSharedMemory(ReadWritePerms,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>SharedMemoryName)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Prepare shared memory settings and initial state, either</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>eSessionPaused or eSessionRunning</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>CreateProcessArgs = &#x201c;/XExecutionSession=&#x3c;SessionId&#x3e;&#x201d;</entry>
</row>
<row>
<entry/>
<entry>CreateProcess(VirtualAppPath, CreateProcessArgs)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0277" num="0276">The first code portion to execute within the virtual application <b>110</b> is called &#x201c;bootstrap&#x201d; code. The &#x201c;bootstrap&#x201d; code includes the virtual runtime engine code that, when executing, sets up the virtual runtime environment, reads the configuration information (e.g., virtual filesystem information, virtual registry settings, and the like), and other initialization tasks. As explained above, the configuration information may be stored in an xlayer file (e.g., the xlayer file <b>300</b>). When the SessionId value is passed to the &#x201c;bootstrap&#x201d; code, the &#x201c;bootstrap&#x201d; code uses the SessionId value to determine a name of the shared memory block <b>133</b> having the predetermined format specified above, and searches for the shared memory block <b>133</b> using that name. The &#x201c;bootstrap&#x201d; code may also create the sentinel object <b>1174</b>. Once found, addition settings can be read as well as the State value. As discussed above, in particular implementations, the State value may be set to the eSessionPaused value, the eSessionRunning value, or the eSessionShutdown value.</p>
<p id="p-0278" num="0277">Then, the method <b>1200</b> terminates.</p>
<p id="h-0018" num="0000">Pausing and Resuming a Virtual Application</p>
<p id="p-0279" num="0278">As mentioned previously, once a virtual application has been started in the directed fashion, it is able to detect SignalEvents that provide notification of changes in the state of the session. Depending upon the implementation details, this may be done via the Win32::WaitForMultipleObjects APIs, and by associating the SignalEvent value with the handle of the directing process <b>129</b>. After detecting a SignalEvent, the virtual application <b>110</b> can check the State value of the shared memory block <b>133</b>. If the State value indicates the session has been paused (e.g., the State value is set to the eSessionPaused value), the virtual runtime engine <b>131</b> blocks access by the virtual application <b>110</b> to the underlying xlayer file (which contains the virtual filesystem and registry among other things). The virtual runtime engine <b>131</b> could also explicitly suspend application threads. However, this may not be necessary.</p>
<p id="p-0280" num="0279">The following pseudo code provides a non-limiting example of a method of pausing a virtual application by setting the value of the State value to the eSessionPaused value and triggering a SignalEvent to indicate a change in the state of the session.</p>
<p id="p-0281" num="0280">SetStateInSharedMemory(SharedMemory, eSessionPaused)</p>
<p id="p-0282" num="0281">PulseEvent(SignalEvent)</p>
<p id="p-0283" num="0282">When the State value indicates the session is running (e.g., the State value is set to the eSessionRunning value), access to the xlayer file is restored. In other words, the virtual application <b>110</b> resumes. The following pseudo code provides a non-limiting example of a method of resuming a virtual application by setting the value of the State value to the eSessionRunning value and triggering a SignalEvent to indicate a change in the state of the session.</p>
<p id="p-0284" num="0283">SetStateInSharedMemory(SharedMemory, eSessionRunning)</p>
<p id="p-0285" num="0284">PulseEvent(SignalEvent)</p>
<p id="h-0019" num="0000">Monitoring a Virtual Application</p>
<p id="p-0286" num="0285">The directing process <b>129</b> has the ability to tell the virtual application to shutdown. However, this shutdown occurs asynchronously. Additionally, the virtual application can shut itself down at any time, or may be shut down due to user control, for example when the user closes the virtual application. As mentioned above, the named sentinel object <b>1174</b> is used to determine when the virtual application is completely shutdown. Each process within the virtual application duplicates the handle of the named sentinel object <b>1174</b> to the child process during any create-process call. For example, the name of the named sentinel object <b>1174</b> may be determined as follows:</p>
<p id="p-0287" num="0286">_xmgr_&#x3c;managerVersion&#x3e;_mtx_sentinel_&#x3c;sessionId&#x3e;</p>
<p id="p-0288" num="0287">Duplicating the handle of the named sentinel object <b>1174</b> into each child process ensures that the named sentinel object <b>1174</b> remains alive (e.g., has a reference count greater than zero) for the lifetime of the virtual application. The directing process <b>129</b> may determine the virtual application is executing by polling for the existence of the named sentinel object <b>1174</b> occasionally (e.g., at regular intervals). For example, the directing process <b>129</b> may poll for the named sentinel object <b>1174</b> once every second via a Win32 timer thread function. In embodiments in which a reference count is available, the polling may simply poll to determine if the reference count is equal to zero meaning no objects have references (or handles) to the named sentinel object <b>1174</b>.</p>
<p id="p-0289" num="0288">The following pseudo code provides a non-limiting example of a method of monitoring for virtual application shutdown.</p>
<p id="p-0290" num="0289">
<tables id="TABLE-US-00020" num="00020">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Begin Shutdown Polling</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Delay For Polling Interval</entry>
</row>
<row>
<entry/>
<entry>SentinelName =</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x201c;_xmgr_&#x3c;mgrVersion&#x3e;_mtx_sentinel_&#x3c;SessionId&#x3e;&#x201d;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>OpenMutex(SyncPermission, SentinelName)</entry>
</row>
<row>
<entry/>
<entry>If Found</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Goto Begin Shutdown Polling</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0291" num="0290">Once shutdown is detected, the directing process <b>129</b> may perform custom actions, such as cleaning up resources, marking the end time in usage statistics, recording the termination in a transcript file, etc.</p>
<p id="h-0020" num="0000">Dynamic Population of XLayer File During Application Execution</p>
<p id="p-0292" num="0291">To begin execution of a virtual application as soon as possible, one may try to determine which portions of the xlayer file are necessary for initial execution and deliver those portions to the virtual application first. To actually support dynamic population of the underlying xlayer file while it is being executed requires a system and method for doing so.</p>
<p id="p-0293" num="0292">The directing process <b>129</b> is responsible for preparing the data-structures described above and illustrated in <figref idref="DRAWINGS">FIG. 15</figref>. The named shared-memory block <b>133</b> contains handle values of the xlayer mapping <b>1176</b> and the bit-array page mask <b>1178</b>. The shared-memory block <b>133</b> includes a file <b>1176</b> mapping of the underlying xlayer file (e.g., the xlayer file <b>300</b>) with read-write access enabled. The shared-memory block <b>133</b> includes a block of shared memory used to store the bit-array <b>1178</b> for indicating which pages have been populated within the xlayer being used by the virtual runtime engine <b>131</b> to execute the virtual application <b>110</b>.</p>
<p id="p-0294" num="0293">By way of a non-limiting example, the name of the shared memory block <b>133</b> may have the following format:</p>
<p id="p-0295" num="0294">_xmgr_&#x3c;managerVersion&#x3e;_mem_xlayerinfo_&#x3c;xlayerpathhash&#x3e;. Where &#x201c;managerVersion&#x201d; is an argument passed on the command line from the directing process <b>129</b>. The &#x201c;xlayerpathhash&#x201d; may be a hash (e.g., a &#x201c;good&#x201d; hash) of the normalized path to the xlayer file being populated.</p>
<p id="p-0296" num="0295">If the shared memory block <b>133</b> has been allocated, the virtual runtime engine <b>131</b> concludes the xlayer file is to be dynamically delivered. If the shared memory block <b>133</b> has not been allocated, the virtual runtime engine <b>131</b> concludes the xlayer file is fully populated.</p>
<p id="p-0297" num="0296">By way of a non-limiting example, the shared-memory block <b>133</b> may be implemented using the following structure:</p>
<p id="p-0298" num="0297">
<tables id="TABLE-US-00021" num="00021">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct SXLayerInfo</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>HANDLE XLayerMapping;</entry>
</row>
<row>
<entry/>
<entry>HANDLE PageMap;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>};</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0299" num="0298">The following pseudo code provides a non-limiting example of a method of preparing dynamic xlayer population data-structures.</p>
<p id="p-0300" num="0299">
<tables id="TABLE-US-00022" num="00022">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>xlayerPathHash = GoodHash(xlayerPath)</entry>
</row>
<row>
<entry>String nameSharedMemory =</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>_xmgr_&#x3c;managerVersion&#x3e;_mem_xlayerinfo_&#x3c;xlayerPathHash&#x3e;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>SXLayerInfo info = CreateSharedMemory(ReadWritePerms,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>nameSharedMemory)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>info.XLayerMapping = CreateFileMapping(xlayerPath)</entry>
</row>
<row>
<entry>PageMapPages = (FileSize(xlayerPath) + PAGESIZE &#x2212; 1) /</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>PAGESIZE</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>PageMapSize = (PageMapPages + 7) / 8</entry>
</row>
<row>
<entry>into.PageMap = CreateSharedMemory(ReadWritePerms,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>NULL_NAME, PageMapSize)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0301" num="0300">After this data structure is prepared, execution of the application may be started as described above. Note the local copy of the xlayer file need not be fully populated to launch the virtual application. However, once started, the virtual application will begin to demand access to various parts of the local copy of the xlayer file and will wait until these requests are satisfied. By way of a non-limiting example, this access may be requested via an IStream interface abstraction of the xlayer file. The blocking is done by way of a check of the pageMap bit-array <b>1178</b>. If a requested page is not yet populated, as indicated by this bit-array, the virtual application waits on the SignalEvent, until the PageMap indicates the page has been populated within the local copy of the xlayer file. The following pseudo code provides a non-limiting example of a method by which the virtual application may access the xlayer file and check the PageMap.</p>
<p id="p-0302" num="0301">
<tables id="TABLE-US-00023" num="00023">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>XLayerAccess (AccessOffset, AccessBytes)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>PageStart = AccessOffset / PAGESIZE</entry>
</row>
<row>
<entry/>
<entry>PageEnd = (AccessOffset + AccessBytes &#x2212; 1) / PAGESIZE</entry>
</row>
<row>
<entry/>
<entry>For Each (Page from PageStart to PageEnd)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>While (IsBitSetInBitArray(PageMap, Page) is FALSE)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>WaitForSingleObject(SignalEvent,</entry>
</row>
<row>
<entry/>
<entry>ONE_SECOND_POLL_TIMEOUT)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0303" num="0302">Simultaneously, the directing process <b>129</b> may populate any portion of the xlayer file. The following pseudo code provides a non-limiting example of a method by which the directing process may populate any portion of the xlayer file.</p>
<p id="p-0304" num="0303">
<tables id="TABLE-US-00024" num="00024">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>PopulateXLayer(Data, Index)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>OffsetTarget = Index * PAGESIZE</entry>
</row>
<row>
<entry/>
<entry>MappedView = MapViewOfFile(info.XLayerMapping,</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="91pt" align="left"/>
<colspec colname="1" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>OffsetTarget, PAGESIZE)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Memcopy(MappedView, Data, PAGESIZE)</entry>
</row>
<row>
<entry/>
<entry>UnMapViewOfFile(MappedView)</entry>
</row>
<row>
<entry/>
<entry>SetBitInBitArray(info.PageMap, Index)</entry>
</row>
<row>
<entry/>
<entry>PulseEvent(SignalEvent)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0305" num="0304">As the virtual application <b>110</b> executes, it sends messages (e.g., messages using the data structure named &#x201c;SFeedbackStatsMessage&#x201d;) to the directing process <b>129</b> indicating which page of the local copy of the xlayer file is currently being accessed by the executing virtual application <b>110</b>. The directing process <b>129</b> uses these messages to determine where in the streaming model file <b>1180</b> the page currently being accessed by the executing virtual application <b>110</b> is located. The directing process <b>129</b> then begins reading the streaming model file <b>1180</b> from that location. This allows the traversal of the directed graph structure stored by the streaming model file <b>1180</b> to be modified by the user choices occurring during the execution of the virtual application <b>110</b>. Thus, the directing process <b>129</b> traverse the streaming model file <b>1180</b> in a custom manner dictated by the actions of a user. As discussed above, the SFeedbackStatsMessage type message includes the blocked value. The virtual runtime engine <b>131</b> may communicate to the directing process <b>129</b> that the virtual runtime engine has tried to access a page that has not yet been downloaded (e.g., is not indicated as being included in the local copy of the downloaded xlayer file by the xlayer mapping <b>1176</b>) by setting the blocked value to &#x201c;TRUE.&#x201d;</p>
<heading id="h-0021" level="1">Xsequence File Format</heading>
<p id="p-0306" num="0305"><figref idref="DRAWINGS">FIG. 16</figref> illustrates an exemplary xsequence file format <b>600</b>. The prefetch xsequence file, sequence xsequence files, and rest xsequence files may each be constructed using the xsequence file format <b>600</b>. The xsequence file format <b>600</b> illustrated in <figref idref="DRAWINGS">FIG. 16</figref> includes a file header portion <b>610</b>, which may be the first item of the xsequence file format, and one or more data blocks <b>620</b> (referred to as &#x201c;xblocks&#x201d;). Each of the xblocks <b>820</b> may store a single page. The file header portion <b>610</b> includes a signature value <b>622</b>, a version stamp <b>624</b>, one or more flags <b>625</b>, a size indicator <b>626</b>, an indicator of size of the original file <b>628</b>, an indicator of size of the xblocks <b>630</b>, a number of xblocks indicator <b>632</b>, and an optional number of xblocks per chapter indicator <b>634</b>. The data in file header portion <b>610</b> is ordered with the signature value <b>622</b> being first followed by the version stamp <b>624</b>, which is followed by the size indicator <b>626</b>, which is followed by the indicator of size of the original file <b>628</b>, which is followed by the indicator of size of the xblocks <b>630</b>, which is followed by the number of xblocks indicator <b>632</b>, which is followed by the optional number of xblocks per chapter indicator <b>634</b>.</p>
<p id="p-0307" num="0306">The signature value <b>622</b> is a value used to authenticate the information stored in a file. For example, the signature value <b>622</b> may be used to validate a particular xsequence file. By way of a non-limiting example, the signature value <b>622</b> of a valid xsequence file may store a predetermined value (e.g., the string &#x201c;xsequencedfile&#x201d;). Thus, to validate the xsequence file, the Sandbox Manager <b>134</b> may simply confirm the signature value <b>622</b> stores the predetermined value. The signature value <b>622</b> may be implemented as a 16-byte array. The value stored in the signature value <b>622</b> may be generated using any method and the present teachings are not limited to use with a signature value generated using any particular method.</p>
<p id="p-0308" num="0307">The version stamp <b>624</b> may include a major version identifier <b>636</b> and a minor version identifier <b>638</b>. The major version identifier <b>636</b> is typically modified when a change is made to the xsequence file format <b>600</b> that would make the file incompatible with a previous version of the virtual runtime engine <b>131</b>. The minor version identifier <b>638</b> may be incremented for informational purposes when the xsequence file format <b>600</b> is modified such that it requires special handling to enable backwards compatibility. By way of a non-limiting example, each of the major and minor version identifiers <b>636</b> and <b>638</b> may be implemented as 32-bit integers.</p>
<p id="p-0309" num="0308">The flags <b>625</b> may include a flag that indicates whether the data stored in the xblocks <b>620</b> has been compressed. The flags <b>625</b> may include a flag that indicates which type of compression was used to compress the data stored in the xblocks <b>620</b>. By way of a non-limiting example, the flags <b>625</b> may be implemented as a 32-bit integer.</p>
<p id="p-0310" num="0309">The size indicator <b>626</b> identifies a location in memory that corresponds to the end of an xsequence file having the xsequence file format <b>600</b>. The location in memory to which the size indicator <b>626</b> refers is identified in <figref idref="DRAWINGS">FIG. 16</figref> by a curved arrow &#x201c;A<b>6</b>.&#x201d; By way of a non-limiting example, the size indicator <b>626</b> may be implemented as a 64-bit integer.</p>
<p id="p-0311" num="0310">The indicator of size of the original file <b>628</b> indicates the size of the original file (e.g., the xlayer file <b>300</b>). By way of a non-limiting example, the indicator of size of the original file <b>628</b> may be implemented as a 64-bit integer.</p>
<p id="p-0312" num="0311">The indicator of size of the xblocks <b>630</b> indicates the size of all of the xblocks <b>620</b> in the xsequence file combined. By way of a non-limiting example, the indicator of size of the xblocks <b>630</b> may be implemented as a 32-bit integer.</p>
<p id="p-0313" num="0312">The number of xblocks indicator <b>632</b> indicates the number of the xblocks <b>620</b> in the xsequence file. By way of a non-limiting example, the number of xblocks indicator <b>632</b> may be implemented as a 32-bit integer.</p>
<p id="p-0314" num="0313">The number of xblocks per chapter indicator <b>634</b> indicates a number of xblocks stored in a particular chapter. Chapters may be used by the directing process <b>129</b> of the Sandbox Manager <b>134</b> to skip to a particular portion of the xsequence file. By way of a non-limiting example, the number of xblocks per chapter indicator <b>634</b> may be implemented as a 32-bit integer.</p>
<p id="p-0315" num="0314">As mentioned above, the xsequence file format <b>600</b> includes one or more xblocks <b>620</b> that each contains a portion of the data stored in the original file (e.g., the xlayer file <b>300</b>). Referring to <figref idref="DRAWINGS">FIG. 17</figref>, each of the xblocks <b>620</b> has a block structure <b>660</b> that may include a signature value <b>662</b>, one or more flags <b>668</b>, an xblock index value <b>670</b>, an xblock identifier <b>674</b>, an xblock size indicator <b>678</b>, and a data portion <b>680</b>. The data in the block structure <b>660</b> is ordered with the signature value <b>662</b> being first followed by the flags <b>668</b>, which is followed by the xblock index value <b>670</b>, which is followed by the xblock identifier <b>674</b>, which is followed by the xblock size indicator <b>678</b>, which is followed by the number of the data portion <b>680</b>.</p>
<p id="p-0316" num="0315">The signature value <b>662</b> is a value used to authenticate the information stored in an xblock and contains a unique value assigned to the xblock. The signature value <b>662</b> may be implemented as a 6-byte array. The value stored in the signature value <b>662</b> may be generated using any method and the present teachings are not limited to use with a signature value generated by any particular method.</p>
<p id="p-0317" num="0316">The flags <b>668</b> may include values for various block options. By way of a non-limiting example, the flags <b>668</b> may include an indicator that a block stores metadata instead of virtual application data. By way of a non-limiting example, the flags <b>668</b> may be implemented as a 16-bit integer.</p>
<p id="p-0318" num="0317">The xblock index value <b>670</b> is a numeric index value assigned to the xblock within the xsequence file. This xblock index value <b>670</b> is an index value associated with the block within an xsequence file. For example, if an xsequence file has four xblocks, the xblocks may be assigned index values of 0, 1, 2, and 3 in the order in which the xblocks were written to xsequence file. By way of a non-limiting example, the index value <b>670</b> may be implemented as a 32-bit integer.</p>
<p id="p-0319" num="0318">The xblock identifier <b>674</b> identifies the data stored in the xblock within the original file (e.g., the xlayer file <b>300</b>). The model builder server <b>8</b> divides the original xlayer file into pages. For example, an xlayer file may be divided into pages P<b>0</b>, P<b>1</b>, P<b>2</b>, P<b>3</b>, P<b>4</b>, . . . PN. The xblock identifier <b>674</b> stores the location of the page in the original xlayer file. Thus, when the xblock is read by the Sandbox Manager <b>134</b>, the Sandbox Manager <b>134</b> knows where to write the xblock in the locally reconstructed copy of the xlayer file. By way of a non-limiting example, the xblock identifier <b>674</b> may be implemented as a 32-bit integer.</p>
<p id="p-0320" num="0319">The xblock size indicator <b>678</b> indicates the size of the xblock. By way of a non-limiting example, the xblock size indicator <b>678</b> may be implemented as a 32-bit integer.</p>
<p id="p-0321" num="0320">The data portion <b>680</b> stores the data of the xblock.</p>
<p id="p-0322" num="0321">As described above, the streaming model is used to create the prefetch xsequence file, sequence xsequence files, and rest xsequence files in accordance with an order specified in the streaming model. After one or more of these files are downloaded, the Sandbox Manager <b>134</b> may begin the process of reassembling or reconstructing the original file (e.g., the xlayer file <b>300</b>).</p>
<heading id="h-0022" level="1">Reconstructing the Original File from One or More Xsequence Files</heading>
<p id="p-0323" num="0322"><figref idref="DRAWINGS">FIG. 18</figref> is a flow diagram of a method <b>900</b> that may be performed by the Sandbox Manager <b>134</b>. In particular, the method <b>900</b> may be performed by the directing process <b>129</b> of the Sandbox Manager <b>134</b>.</p>
<p id="p-0324" num="0323">In first block <b>910</b>, the Sandbox Manager <b>134</b> receives an xsequence file.</p>
<p id="p-0325" num="0324">In next block <b>912</b>, the Sandbox Manager <b>134</b> reads the information stored in the file header portion <b>610</b> (see <figref idref="DRAWINGS">FIG. 16</figref>) of the xsequence file.</p>
<p id="p-0326" num="0325">In decision block <b>915</b> (using the information read in block <b>912</b>), the Sandbox Manager <b>134</b> determines whether the xsequence file received in block <b>910</b> is valid. An xsequence file must be validated (or authenticated) before it can be used. As mentioned above, the Sandbox Manager <b>134</b> may validate an xsequence file by confirming the signature value <b>622</b> stores the predetermined value (e.g., the unique string &#x201c;xsequencedfile&#x201d;). Further, to ensure compatibility, the Sandbox Manager <b>134</b> may confirm that the major and minor versions match those of the virtual runtime engine <b>131</b>.</p>
<p id="p-0327" num="0326">The following pseudo code provides a non-limiting example of an implementation of blocks <b>912</b> and <b>915</b>.</p>
<p id="p-0328" num="0327">
<tables id="TABLE-US-00025" num="00025">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Method ReadXSequenceFileHeader(File)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Byte[ ] signature = File.Read(GLOBAL_SIGNATURE_LENGTH)</entry>
</row>
<row>
<entry/>
<entry>For (int i = 0; i &#x3c; GLOBAL_SIGNATURE_LENGTH; i++)</entry>
</row>
<row>
<entry/>
<entry>Begin</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>If (signature[i] != GLOBAL_SIGNATURE[i]) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Throw Invalid signature exception</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry>MajorVersion = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>MinorVersion = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>If (MajorVersion != CURRENT_MAJOR_VERSION) or</entry>
</row>
<row>
<entry/>
<entry>&#x2003;(MinorVersion != CURRENT_MINOR_VERSION)</entry>
</row>
<row>
<entry/>
<entry>Begin</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Throw Invalid version exception</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry>Flags = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>Size = File.ReadInt64( )</entry>
</row>
<row>
<entry/>
<entry>SourceFileSize = File.ReadInt64( )</entry>
</row>
<row>
<entry/>
<entry>BlockSize = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>BlockCount = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>BlocksPerChapter = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0329" num="0328">In the pseudo code above, if the signature value <b>622</b> (read into variable &#x201c;signature&#x201d;) does not equal the predetermined value (stored in the constant &#x201c;GLOBAL_SIGNATURE&#x201d;), an exception is generated. Further, if the major version identifier <b>636</b> (read into variable &#x201c;MajorVersion&#x201d;) does not match the major version of the virtual runtime engine <b>131</b> (stored in the constant &#x201c;CURRENT_MAJOR_VERSION&#x201d;) or the minor version identifier <b>638</b> (read into variable &#x201c;MinorVersion&#x201d;) does not match the major version of the virtual runtime engine <b>131</b> (stored in the constant &#x201c;CURRENT_MINOR_VERSION&#x201d;), an exception is generated. After the xsequence file has been verified, in the pseudo code above, the remaining data stored in the file header portion <b>610</b> is read (e.g., the flags <b>625</b>, the size indicator <b>626</b>, the indicator of size of the original file <b>628</b>, the indicator of size of the xblocks <b>630</b>, the number of xblocks indicator <b>632</b>, and the number of xblocks per chapter indicator <b>634</b>). At this point, the Sandbox Manager <b>134</b> knows the number of blocks stored in the xsequence file (which is provided by the number of xblocks indicator <b>632</b>) and block sizes (which is provided by the indicator of size of the xblocks <b>630</b>).</p>
<p id="p-0330" num="0329">The decision in decision block <b>915</b> is &#x201c;YES&#x201d; when Sandbox Manager <b>134</b> determines the xsequence file is valid. Otherwise, the decision in decision block <b>915</b> is &#x201c;NO&#x201d; when Sandbox Manager <b>134</b> determines the xsequence file is invalid. By way of a non-limiting example, the decision in decision block <b>915</b> is &#x201c;NO&#x201d; when the pseudo code above generates an exception because the signature value <b>622</b> does not equal the predetermined value, the major version identifier <b>636</b> does not match the major version of the virtual runtime engine <b>131</b>, and/or the minor version identifier <b>638</b> does not match the minor version of the virtual runtime engine <b>131</b>. Otherwise, in this example, the decision in decision block <b>915</b> is &#x201c;YES.&#x201d;</p>
<p id="p-0331" num="0330">When the decision in decision block <b>915</b> is &#x201c;NO,&#x201d; the method <b>900</b> terminates.</p>
<p id="p-0332" num="0331">As mentioned above, the xsequence files are configured to be transferred from one computing device to another (e.g., using conventional streaming methods). When the client computing device <b>9</b> receives an xsequence file from the server computing device <b>7</b>, portions of the original file contained in the received xsequence file are used to populate a copy of the original file constructed or assembled on the client computing device <b>9</b>.</p>
<p id="p-0333" num="0332">When the decision in decision block <b>915</b> is &#x201c;YES,&#x201d; in decision block <b>920</b>, the Sandbox Manager <b>134</b> determines whether the xsequence file received is the first one for the original file. The decision in decision block <b>920</b> is &#x201c;YES&#x201d; when the xsequence file received in block <b>910</b> is the first one for the original file. Otherwise, the decision in decision block <b>920</b> is &#x201c;NO&#x201d; when one or more xsequence files have been received previously for the original file.</p>
<p id="p-0334" num="0333">When the decision in decision block <b>920</b> is &#x201c;YES,&#x201d; in block <b>925</b>, the Sandbox Manager <b>134</b> allocates the memory mapped file <b>1176</b> illustrated in <figref idref="DRAWINGS">FIG. 15</figref>. The memory mapped file <b>1176</b> is not yet populated with data at this point. Alternatively, the Sandbox Manager <b>134</b> may create the memory mapped file <b>1176</b> when the Sandbox Manager <b>134</b> receives the model file. In such embodiments, block <b>925</b> is omitted from the method <b>900</b> and when the decision in decision block <b>920</b> is &#x201c;YES,&#x201d; the Sandbox Manager <b>134</b> advances directly to block <b>930</b>.</p>
<p id="p-0335" num="0334">In block <b>930</b>, the Sandbox Manager <b>134</b> reads the data portions <b>680</b> of the xblocks into the memory mapped file <b>1176</b> (optionally allocated in block <b>925</b>). As explained above, the block structure <b>660</b> includes the xblock identifier <b>674</b> that indicates the location in the original file from which the data in the xblock was obtained. The xblock identifier <b>674</b> may be used to write the data stored in the xblock in the correct location of the memory mapped file <b>1176</b>.</p>
<p id="p-0336" num="0335">The following pseudo code provides a non-limiting example of a method of reading a single xblock into memory.</p>
<p id="p-0337" num="0336">
<tables id="TABLE-US-00026" num="00026">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Method ReadXSequenceBlocks(File)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Byte[ ] signature = File.Read(BLOCK_SIGNATURE_LENGTH)</entry>
</row>
<row>
<entry/>
<entry>For (int i = 0; i &#x3c; BLOCK_SIGNATURE_LENGTH; i++)</entry>
</row>
<row>
<entry/>
<entry>Begin</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>If (signature[i] != BLOCK_SIGNATURE[i]) Then</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Throw Invalid block signature exception</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry>Flags = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>CurrentBlockIndex = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>CurrentBlockOriginId = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry>CurrentBlockSize = File.ReadInt32( )</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0338" num="0337">Then, in block <b>932</b>, the Sandbox Manager <b>134</b> sends one or notifications that data has been downloaded. In block <b>932</b>, the Sandbox Manager <b>134</b> may send a notification to the virtual runtime engine <b>131</b> (e.g., that signals an event) that the blocks have been downloaded. The following pseudo code provides a non-limiting example of a method of writing the data in an xblock into the correct location of the memory mapped file <b>1176</b> and sending a notification to the virtual runtime engine <b>131</b>.</p>
<p id="p-0339" num="0338">
<tables id="TABLE-US-00027" num="00027">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Method ReadXSequenceData(File, TargetStream)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Byte[ ] CurrentBlockData = File.Read(CurrentBlockSize)</entry>
</row>
<row>
<entry/>
<entry>TargetStream.Position = CurrentBlockOriginId *</entry>
</row>
<row>
<entry/>
<entry>BlockSize</entry>
</row>
<row>
<entry/>
<entry>TargetStream.Write(CurrentBlockData, BlockSize)</entry>
</row>
<row>
<entry/>
<entry>NotifyBlockDownloaded(CurrentBlockIndex,</entry>
</row>
<row>
<entry/>
<entry>CurrentBlockOriginId)</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0340" num="0339">In block <b>932</b>, the Sandbox Manager <b>134</b> may also modify the bit array page mask <b>1178</b> before sending the notification to the virtual runtime engine <b>131</b>.</p>
<p id="p-0341" num="0340">Then, in block <b>945</b>, the Sandbox Manager <b>134</b> instructs the virtual runtime engine <b>131</b> to launch the virtualized application file <b>140</b> to thereby execute the virtual application <b>110</b>. Depending upon the implementation details, at this point, a prefetch xsequence file may have been downloaded and used to initiate execution of the virtual application <b>110</b>. However, the data stored in the prefetch xsequence file may be inadequate to support all features of the virtual application <b>110</b>. Therefore, in decision block <b>950</b>, the Sandbox Manager <b>134</b> determines whether all of the xsequence files have been downloaded. The method <b>1000</b> illustrated in <figref idref="DRAWINGS">FIG. 7</figref> and described above is used to determine the order in which the xsequence files are downloaded and to request the download of each of the xsequence files in accordance with that order. Then, the Sandbox Manager <b>134</b> advances to decision block <b>950</b>.</p>
<p id="p-0342" num="0341">When the decision in decision block <b>920</b> is &#x201c;NO,&#x201d; in block <b>955</b>, the Sandbox Manager <b>134</b> reads the data portions <b>680</b> of the xblocks into the memory mapped file <b>1176</b> (optionally allocated in block <b>925</b>). Block <b>955</b> may be substantially identical to block <b>930</b>.</p>
<p id="p-0343" num="0342">Then in block <b>957</b>, the Sandbox Manager <b>134</b> sends one or more notifications that blocks have been downloaded. Block <b>957</b> may be substantially identical to block <b>932</b>. Then, the Sandbox Manager <b>134</b> advances to decision block <b>950</b>.</p>
<p id="p-0344" num="0343">The decision in decision block <b>950</b> is &#x201c;YES&#x201d; when all of the xsequence files have been downloaded. The decision in decision block <b>950</b> is &#x201c;NO&#x201d; when all of the xsequence files have not been downloaded.</p>
<p id="p-0345" num="0344">When the decision in decision block <b>950</b> is &#x201c;NO,&#x201d; the Sandbox Manager <b>134</b> returns to block <b>910</b> whereat the Sandbox Manager <b>134</b> receives another xsequence file.</p>
<p id="p-0346" num="0345">When the decision in decision block <b>950</b> is &#x201c;YES,&#x201d; in block <b>935</b>, in block <b>940</b>, the copy of the original file (which is at least partially populated) is written to the local cache <b>139</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>. The following pseudo code provides a non-limiting example of a method of copying the copy of the original file to the local cache <b>139</b>.</p>
<p id="p-0347" num="0346">
<tables id="TABLE-US-00028" num="00028">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Method WriteXSequenceData(TargetStream, FileName)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>TargetStream.Position = 0</entry>
</row>
<row>
<entry/>
<entry>FileTarget = OpenFile(FileName)</entry>
</row>
<row>
<entry/>
<entry>For (int i; i &#x3c; TargetStream.Length; i++)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>FileTarget.WriteByte(TargetStream.ReadByte)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>End</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0348" num="0347">Thus, the Sandbox Manager <b>134</b> need not wait until the entire original file has been assembled to instruct the virtual runtime engine <b>131</b> to execute the virtual application <b>110</b>. In other words, a partially assembled version of the original file may be written to the local cache <b>139</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0349" num="0348">The copy of the original file is illustrated in <figref idref="DRAWINGS">FIG. 2</figref> as the virtualized application file <b>140</b> (e.g., a copy of the xlayer file <b>300</b>) stored in the local cache <b>139</b>.</p>
<heading id="h-0023" level="1">Computing Devices</heading>
<p id="p-0350" num="0349"><figref idref="DRAWINGS">FIG. 28</figref> is a diagram of hardware and an operating environment in conjunction with which implementations of the virtual application file <b>140</b>, the xlayer file <b>300</b>, the authoring tool <b>170</b>, the Sandbox Manager <b>134</b>, the Client Application <b>132</b>, and/or virtual runtime engine <b>131</b> may be practiced. The description of <figref idref="DRAWINGS">FIG. 28</figref> is intended to provide a brief, general description of suitable computer hardware and a suitable computing environment in which implementations may be practiced. Although not required, implementations are described in the general context of computer-executable instructions, such as program modules, being executed by a computer, such as a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types.</p>
<p id="p-0351" num="0350">Moreover, those skilled in the art will appreciate that implementations may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Implementations may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0352" num="0351">The exemplary hardware and operating environment of <figref idref="DRAWINGS">FIG. 28</figref> includes a general-purpose computing device in the form of a computing device <b>12</b>. Each of the virtual application file <b>140</b>, the xlayer file <b>300</b>, the authoring tool <b>170</b>, the Sandbox Manager <b>134</b>, the Client Application <b>132</b>, and/or virtual runtime engine <b>131</b> may be implemented using one or more computing devices like the computing device <b>12</b>. By way of non-limiting example, the virtual application file <b>140</b>, the xlayer file <b>300</b>, the authoring tool <b>170</b>, the Sandbox Manager <b>134</b>, the Client Application <b>132</b>, and/or virtual runtime engine <b>131</b> may be implemented on the computing device <b>12</b>. Further, each of the server computing device <b>7</b>, the model building server <b>8</b>, the client computing device <b>9</b>, and the computing device <b>11</b> may be implemented by computing devices substantially similar to the computing device <b>12</b>.</p>
<p id="p-0353" num="0352">The computing device <b>12</b> includes the system memory <b>22</b>, a processing unit <b>21</b>, and a system bus <b>23</b> that operatively couples various system components, including the system memory <b>22</b>, to the processing unit <b>21</b>. There may be only one or there may be more than one processing unit <b>21</b>, such that the processor of computing device <b>12</b> comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel processing environment. The computing device <b>12</b> may be a conventional computer, a distributed computer, or any other type of computer.</p>
<p id="p-0354" num="0353">The system bus <b>23</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM) <b>24</b> and random access memory (RAM) <b>25</b>. A basic input/output system (BIOS) <b>26</b>, containing the basic routines that help to transfer information between elements within the computing device <b>12</b>, such as during start-up, is stored in ROM <b>24</b>. The computing device <b>12</b> further includes a hard disk drive <b>27</b> for reading from and writing to a hard disk, not shown, a magnetic disk drive <b>28</b> for reading from or writing to a removable magnetic disk <b>29</b>, and an optical disk drive <b>30</b> for reading from or writing to a removable optical disk <b>31</b> such as a CD ROM, DVD, or other optical media.</p>
<p id="p-0355" num="0354">The hard disk drive <b>27</b>, magnetic disk drive <b>28</b>, and optical disk drive <b>30</b> are connected to the system bus <b>23</b> by a hard disk drive interface <b>32</b>, a magnetic disk drive interface <b>33</b>, and an optical disk drive interface <b>34</b>, respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules, and other data for the computing device <b>12</b>. It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, USB drives, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment. As is apparent to those of ordinary skill in the art, the hard disk drive <b>27</b> and other forms of computer-readable media (e.g., the removable magnetic disk <b>29</b>, the removable optical disk <b>31</b>, flash memory cards, USB drives, and the like) accessible by the processing unit <b>21</b> may be considered components of the system memory <b>22</b>.</p>
<p id="p-0356" num="0355">A number of program modules may be stored on the hard disk drive <b>27</b>, magnetic disk <b>29</b>, optical disk <b>31</b>, ROM <b>24</b>, or RAM <b>25</b>, including an operating system <b>35</b>, one or more application programs <b>36</b>, other program modules <b>37</b>, and program data <b>38</b>. A user may enter commands and information into the computing device <b>12</b> through input devices such as a keyboard <b>40</b> and pointing device <b>42</b>. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <b>21</b> through a serial port interface <b>46</b> that is coupled to the system bus <b>23</b>, but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor <b>47</b> or other type of display device is also connected to the system bus <b>23</b> via an interface, such as a video adapter <b>48</b>. In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.</p>
<p id="p-0357" num="0356">The computing device <b>12</b> may operate in a networked environment using logical connections to one or more remote computers, such as remote computer <b>49</b>. These logical connections are achieved by a communication device coupled to or a part of the computing device <b>12</b> (as the local computer). Implementations are not limited to a particular type of communications device. The remote computer <b>49</b> may be another computer, a server, a router, a network PC, a client, a memory storage device, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computing device <b>12</b>. The remote computer <b>49</b> may be connected to a memory storage device <b>50</b>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 28</figref> include a local-area network (LAN) <b>51</b> and a wide-area network (WAN) <b>52</b>. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p>
<p id="p-0358" num="0357">When used in a LAN-networking environment, the computing device <b>12</b> is connected to the local area network <b>51</b> through a network interface or adapter <b>53</b>, which is one type of communications device. When used in a WAN-networking environment, the computing device <b>12</b> typically includes a modem <b>54</b>, a type of communications device, or any other type of communications device for establishing communications over the wide area network <b>52</b>, such as the Internet. The modem <b>54</b>, which may be internal or external, is connected to the system bus <b>23</b> via the serial port interface <b>46</b>. In a networked environment, program modules depicted relative to the personal computing device <b>12</b>, or portions thereof, may be stored in the remote computer <b>49</b> and/or the remote memory storage device <b>50</b>. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.</p>
<p id="p-0359" num="0358">The computing device <b>12</b> and related components have been presented herein by way of particular example and also by abstraction in order to facilitate a high-level view of the concepts disclosed. The actual technical design and implementation may vary based on particular implementation while maintaining the overall nature of the concepts disclosed.</p>
<p id="p-0360" num="0359">Returning to <figref idref="DRAWINGS">FIGS. 1B and 1C</figref>, the system memory <b>22</b>A and the system memory <b>22</b>B may each be substantially similar to the system memory <b>22</b>. Thus, the host operating system <b>35</b>A, the host operating system <b>35</b>B, the virtual application file <b>140</b>, the xlayer file <b>300</b>, the authoring tool <b>170</b>, the Sandbox Manager <b>134</b>, the Client Application <b>132</b>, and/or virtual runtime engine <b>131</b> may be stored as computer executable components on the system memory <b>22</b>A and/or <b>22</b>B. Each of the host operating system <b>35</b>A, the host operating system <b>35</b>B, the virtual application file <b>140</b>, the xlayer file <b>300</b>, the authoring tool <b>170</b>, and/or virtual runtime engine may be implemented using software components that are executable by the processing unit <b>21</b> and when executed perform the functions described above. Further, each of the methods <b>500</b>, <b>505</b>, <b>518</b>, <b>540</b>, <b>700</b>, <b>800</b>, <b>900</b>, <b>1000</b>, <b>1100</b>, and <b>1200</b> may be implemented as computer executable instructions that are executable by the processing unit <b>21</b>.</p>
<p id="p-0361" num="0360">The foregoing described embodiments depict different components contained within, or connected with, different other components. It is to be understood that such depicted architectures are merely exemplary, and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense, any arrangement of components to achieve the same functionality is effectively &#x201c;associated&#x201d; such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as &#x201c;associated with&#x201d; each other such that the desired functionality is achieved, irrespective of architectures or intermedial components. Likewise, any two components so associated can also be viewed as being &#x201c;operably connected,&#x201d; or &#x201c;operably coupled,&#x201d; to each other to achieve the desired functionality.</p>
<p id="p-0362" num="0361">While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those within the art that, in general, terms used herein, and especially in the appended claims (e.g., bodies of the appended claims) are generally intended as &#x201c;open&#x201d; terms (e.g., the term &#x201c;including&#x201d; should be interpreted as &#x201c;including but not limited to,&#x201d; the term &#x201c;having&#x201d; should be interpreted as &#x201c;having at least,&#x201d; the term &#x201c;includes&#x201d; should be interpreted as &#x201c;includes but is not limited to,&#x201d; etc.). It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended, such an intent will be explicitly recited in the claim, and in the absence of such recitation no such intent is present. For example, as an aid to understanding, the following appended claims may contain usage of the introductory phrases &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; to introduce claim recitations. However, the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an&#x201d; (e.g., &#x201c;a&#x201d; and/or &#x201c;an&#x201d; should typically be interpreted to mean &#x201c;at least one&#x201d; or &#x201c;one or more&#x201d;); the same holds true for the use of definite articles used to introduce claim recitations. In addition, even if a specific number of an introduced claim recitation is explicitly recited, those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number (e.g., the bare recitation of &#x201c;two recitations,&#x201d; without other modifiers, typically means at least two recitations, or two or more recitations).</p>
<p id="p-0363" num="0362">Accordingly, the invention is not limited except as by the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for use with a virtual runtime engine, the method being performed by a directing process, the method comprising:
<claim-text>instructing the virtual runtime engine separate from the directing process to execute a virtual application file to thereby initiate execution of a virtual application at least partially implemented by the virtual application file, the virtual application executing on an operating system that maintains a reference count for each named kernel object, the reference count indicating how many objects have references to the named kernel object, wherein when the virtual application begins executing, a first thread begins executing, a sentinel object that is a named kernel object is created, and the first thread has a reference to the sentinel object;</claim-text>
<claim-text>allocating a block of shared memory, the virtual runtime engine being configured to access the identified block of shared memory;</claim-text>
<claim-text>pausing execution of the virtual application by storing in the block of shared memory an indication that execution of the virtual application is to be paused, the virtual runtime engine being configured to read the indication that execution of the virtual application is to be paused and after the reading thereof, prevent the virtual application from accessing the virtual application file;</claim-text>
<claim-text>resuming execution of the virtual application by storing in the block of shared memory an indication that execution of the virtual application is to be resumed, the virtual runtime engine being configured to read the indication that execution of the virtual application is to be resumed and after the reading thereof, allow the virtual application to access the virtual application file; and</claim-text>
<claim-text>detecting execution of the virtual application has terminated, the detecting comprising detecting the sentinel object has a reference count equal to zero.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein pausing execution of the virtual application further comprises triggering a signal event detectable by the virtual runtime engine, the virtual runtime engine being configured to detect the signal event and in response thereto, read the indication stored in the block of shared memory that execution of the virtual application is to be paused.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein resuming execution of the virtual application further comprises triggering a signal event detectable by the virtual runtime engine, the virtual runtime engine being configured to detect the signal event and in response thereto, read the indication stored in the block of shared memory that execution of the virtual application is to be resumed.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>receiving an instruction from a user or another process separate from the virtual runtime engine and the directing process to pause execution of the virtual application and in response thereto, pausing execution of the virtual application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>receiving an instruction from a user or another process separate from the virtual runtime engine and the directing process to resume execution of the virtual application and in response thereto, resuming execution of the virtual application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>initiating a session with the virtual runtime engine, a session identifier being associated with the session; and</claim-text>
<claim-text>passing the session identifier to the virtual runtime engine, the virtual runtime engine being configured to use the session identifier to locate the block of shared memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein as the virtual application executes, one or more other threads are created and each begin executing, each of the one or more other threads having a reference to the sentinel object.</claim-text>
</claim>
</claims>
</us-patent-grant>

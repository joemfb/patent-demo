<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626800-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626800</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12331017</doc-number>
<date>20081209</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1176</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707803</main-classification>
<further-classification>707810</further-classification>
</classification-national>
<invention-title id="d2e53">Synchronization of artifacts across different domains</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2005/0050068</doc-number>
<kind>A1</kind>
<name>Vaschillo et al.</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2006/0026251</doc-number>
<kind>A1</kind>
<name>Cheng et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00003">
<othercit>Bin Zhou &#x201c;Build strong, flexible J2EE apps with a WebShpere cluster environment&#x201d; found at http://www-128.ibm.com/developerworks/websphere/library/techarticles/0606<sub>&#x2014;</sub>zhou.html on Aug. 14, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00004">
<othercit>IBM Software Group &#x201c;WebSphere Business Modeler V6.1&#x201d; found at http://publib.boulder.ibm.com/infocenter/ieduasst/v1r1m0/topic/com.ibm.iea.wpi<sub>&#x2014;</sub>v6/wbmodeler/6.1/Overview/WBIV61<sub>&#x2014;</sub>WBModelerUpdate<sub>&#x2014;</sub>Iterative.pdf, (2008).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>Laura Olson Synchronize UDDI registries with WebSphere Service Registry and Repository for better SOA governance found at http:www/ibm.com/developerworks/websphere/library/techarticles/0802<sub>&#x2014;</sub>olson/0802<sub>&#x2014;</sub>olson.html on Aug. 14, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Shiwa S. Fu, Jeaha Yang, Jim Laredo, Ying Huang, Henry Chang, Santhosh Kumaran, and Jen-Yao Chung; &#x201c;Solution Templates Tool for Enterprise Business Applications Integration&#x201d;, Sensor Networks, Ubiquitous and Trustworthy Computing, 2008. SUTC '08 IEEE International Conference on Date: Jun. 11-13, 2008, pp. 314-319 Digital Object Identifier 10-1109/SUTC.2008.84.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>6</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100145907</doc-number>
<kind>A1</kind>
<date>20100610</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Carbajales</last-name>
<first-name>Sebastian</first-name>
<address>
<city>Toronto</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chau</last-name>
<first-name>Tak Seng</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Klicnik</last-name>
<first-name>Vladimir</first-name>
<address>
<city>Oshawa</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kong</last-name>
<first-name>Raymond L.</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Loi</last-name>
<first-name>Lok T.</first-name>
<address>
<city>Toronto</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rotarescu</last-name>
<first-name>Alina Y.</first-name>
<address>
<city>Newmarket</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Xiaobin</first-name>
<address>
<city>Richmond Hill</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Carbajales</last-name>
<first-name>Sebastian</first-name>
<address>
<city>Toronto</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Chau</last-name>
<first-name>Tak Seng</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Klicnik</last-name>
<first-name>Vladimir</first-name>
<address>
<city>Oshawa</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Kong</last-name>
<first-name>Raymond L.</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Loi</last-name>
<first-name>Lok T.</first-name>
<address>
<city>Toronto</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Rotarescu</last-name>
<first-name>Alina Y.</first-name>
<address>
<city>Newmarket</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Xiaobin</first-name>
<address>
<city>Richmond Hill</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Cantor Colburn LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Uddin</last-name>
<first-name>Rahan</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Hasan</last-name>
<first-name>Syed</first-name>
<department>2158</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of synchronizing artifacts of a first domain with artifacts of a second domain is provided. The method includes: loading a first set of transformed artifacts and a first artifact map from a first domain into a second domain; generating an association model based on an evaluation of the first artifact map and a second artifact map; comparing a first transformed artifact of the first set of transformed artifacts with a second artifact of a second set of artifacts corresponding to the second artifact map based on the association model; determining differences based on the comparing; and selectively updating the second artifact map based on the differences.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="160.27mm" wi="236.39mm" file="US08626800-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="199.73mm" wi="172.38mm" orientation="landscape" file="US08626800-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="234.02mm" wi="199.31mm" orientation="landscape" file="US08626800-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="237.91mm" wi="178.82mm" orientation="landscape" file="US08626800-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="236.14mm" wi="176.70mm" orientation="landscape" file="US08626800-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="216.24mm" wi="193.63mm" orientation="landscape" file="US08626800-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present disclosure relates to methods, systems, and computer program products for synchronizing artifacts across two or more domains.</p>
<p id="p-0003" num="0002">Cross-domain iterative development, where artifacts developed in a first domain are imported into a second domain and developed in parallel with the artifacts in the first domain, allows for development to occur at varying levels. For example, a business analyst may develop a higher level application in a first domain (e.g., WebSphere Business Modeler (WBM)). At some point, the analyst exports the application and generates runtime artifacts which are then imported by an IT specialist/developer into a second domain (e.g., WebSphere Integration Developer (WID)). The artifacts are then edited in the second domain at a lower level.</p>
<p id="p-0004" num="0003">However, it is often the case that, in the mean time, the business analyst continues developing the high lever application in WBM. At some point, the business analyst decides to export a new version of the application. However, when the IT specialist/developer attempts to re-import the new version, the newly generated artifacts do not synchronize with the artifacts in WID. Provided that changes were made in parallel in both applications, there is no easy way to associate new and existing artifacts especially if the newly generated artifacts are drastically different from the original version.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">According to one embodiment of the present invention a method of synchronizing artifacts of a first domain with artifacts of a second domain is provided. The method includes: loading a first set of transformed artifacts and a first artifact map from a first domain into a second domain; generating an association model based on an evaluation of the first artifact map and a second artifact map; comparing a first transformed artifact of the first set of transformed artifacts with a second artifact of a second set of artifacts corresponding to the second artifact map based on the association model; determining differences based on the comparing; and selectively updating the second artifact map based on the differences.</p>
<p id="p-0006" num="0005">Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features, refer to the description and to the drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">The drawings described herein are for illustration purposes only and are not intended to limit the scope of the present disclosure in any way. It should be understood that throughout the drawings, corresponding reference numerals indicate like or corresponding parts and features.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a functional block diagram of a computing system that includes a synchronization system in accordance with an exemplary embodiment.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is dataflow diagram of the synchronization system of <figref idref="DRAWINGS">FIG. 1</figref> in accordance with an exemplary embodiment.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a functional block diagram illustrating an artifact map of the synchronization system of <figref idref="DRAWINGS">FIG. 2</figref> in accordance with an exemplary embodiment.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a functional block diagram illustrating an associations model of the synchronization system of <figref idref="DRAWINGS">FIG. 2</figref> in accordance with an exemplary embodiment.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is flowchart illustrating a synchronization method that can be performed by the synchronization system of <figref idref="DRAWINGS">FIG. 2</figref> in accordance with an exemplary embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0013" num="0012">Turning now to the drawings in greater detail, it will be seen that in <figref idref="DRAWINGS">FIG. 1</figref> an exemplary computing system includes a synchronization system in accordance with the present disclosure. The computing system <b>100</b> is shown to include a computer <b>101</b>. As can be appreciated, the computing system <b>100</b> can include any computing device, including but not limited to, a desktop computer, a laptop, a server, a portable handheld device, or any other electronic device. For ease of the discussion, the disclosure will be discussed in the context of the computer <b>101</b>.</p>
<p id="p-0014" num="0013">The computer <b>101</b> is shown to include a processor <b>102</b>, memory <b>104</b> coupled to a memory controller <b>106</b>, one or more input and/or output (I/O) devices <b>108</b>, <b>110</b> (or peripherals) that are communicatively coupled via a local input/output controller <b>112</b>, and a display controller <b>114</b> coupled to a display <b>116</b>. In an exemplary embodiment, a conventional keyboard <b>122</b> and mouse <b>124</b> can be coupled to the input/output controller <b>112</b>. In an exemplary embodiment, the computing system <b>100</b> can further include a network interface <b>118</b> for coupling to a network <b>120</b>. The network <b>120</b> transmits and receives data between the computer <b>101</b> and external systems.</p>
<p id="p-0015" num="0014">In various embodiments, the memory <b>104</b> stores instructions that can be executed by the processor <b>102</b>. The instructions stored in memory <b>104</b> may include one or more separate programs, each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of <figref idref="DRAWINGS">FIG. 1</figref>, the instructions stored in the memory <b>104</b> include a suitable operating system (OS) <b>126</b>. The operating system <b>126</b> essentially controls the execution of other computer programs and provides scheduling, input-output control, file and data management, memory management, and communication control and related services.</p>
<p id="p-0016" num="0015">When the computer <b>101</b> is in operation, the processor <b>102</b> is configured to execute the instructions stored within the memory <b>104</b>, to communicate data to and from the memory <b>104</b>, and to generally control operations of the computer <b>101</b> pursuant to the instructions. The processor <b>102</b> can be any custom made or commercially available processor, a central processing unit (CPU), an auxiliary processor among several processors associated with the computer <b>101</b>, a semiconductor based microprocessor (in the form of a microchip or chip set), a macroprocessor, or generally any device for executing instructions.</p>
<p id="p-0017" num="0016">The processor <b>102</b> executes the instructions of a synchronization system <b>128</b> of the present disclosure. In various embodiments, the synchronization system <b>128</b> of the present disclosure is stored in the memory <b>104</b> (as shown), is executed from a portable storage device (e.g., CD-ROM, Diskette, FlashDrive, etc.) (not shown), and/or is run from a remote location, such as from a central server (not shown).</p>
<p id="p-0018" num="0017">Generally speaking, the synchronization system <b>128</b> employs a traceability mechanism that maintains cross-domain relationships between artifacts from two or more different domains. Using the traceability mechanism, the synchronization system <b>128</b> compares the artifacts from the two or more different domains and updates the artifacts in each domain such that they are synchronized.</p>
<p id="p-0019" num="0018">In one example, the first domain is a high-level developer application, such as, WebSphere Business Modeler (WBM), and the second domain is a lower-level developer application, such as, WebSphere Integration Developer (WID). As can be appreciated, the domains can be any artifact generating domain and are not limited to the present example.</p>
<p id="p-0020" num="0019">Turning now to <figref idref="DRAWINGS">FIG. 2</figref>, the synchronization system <b>128</b> is shown in more detail in accordance with an exemplary embodiment. The synchronization system <b>128</b> includes one or more sub-modules and datastores. As can be appreciated, the sub-modules can be implemented as software, hardware, firmware and/or other suitable components that provide the described functionality. As can be appreciated, the sub-modules shown in <figref idref="DRAWINGS">FIG. 2</figref> can be combined and/or further partitioned to similarly synchronize artifacts from different domains. In this example, the synchronization system includes an artifact transform module <b>130</b>, an update module <b>132</b>, a compare module <b>134</b>, and a synchronization module <b>136</b>.</p>
<p id="p-0021" num="0020">The artifact transform module <b>130</b> receives as input one or more artifacts <b>138</b> from the first domain. In one example, the artifacts <b>138</b> are retrieved from a datastore <b>140</b> of the first domain. The artifact transform module <b>130</b> transforms a representation of the artifacts <b>138</b> generated by the first domain to a representation that is compatible with the second domain (hereinafter referred to as a transformed artifacts <b>142</b>). Based on the transformation, the artifact transform module <b>130</b> generates an artifact map <b>144</b>. The artifact map <b>144</b> captures traceability information between the first domain artifact and the transformed artifact <b>142</b> of the second domain.</p>
<p id="p-0022" num="0021">As shown in <figref idref="DRAWINGS">FIG. 3</figref>, the artifact map <b>144</b> includes pairs <b>170</b> of object definition elements <b>172</b>, <b>174</b>. The pairs <b>170</b> include a first domain object definition element <b>172</b> and a second domain object definition element <b>174</b>. Each domain object definition element <b>172</b>, <b>174</b> includes a unique identifier (UID), a reference <b>176</b>, <b>178</b> to a corresponding artifact of a domain and one or more descriptors of the corresponding artifact. The unique identifier is unique for each artifact and can be preserved through several transformations of the same artifact. The unique identifier can be used to develop associations between object definitions <b>174</b> of pairs <b>170</b> of different artifact maps <b>154</b> (as will be discussed in more detail with regard to <figref idref="DRAWINGS">FIG. 4</figref>). In various embodiments, the descriptors can include, but are not limited to, a definition, an artifact value, a timestamp, a location or relationship to the first domain output (such as, for example, a document location).</p>
<p id="p-0023" num="0022">The first domain object definition element <b>172</b> includes a reference <b>176</b> to a corresponding artifact <b>138</b> of the first domain. The second domain object definition element <b>174</b> includes a reference <b>178</b> to the corresponding transformed artifact <b>142</b> of the second domain.</p>
<p id="p-0024" num="0023">With reference back to <figref idref="DRAWINGS">FIG. 2</figref>, in one example, the functions of the artifact transform module <b>130</b> can be called on demand and/or scheduled to execute based on predetermined events.</p>
<p id="p-0025" num="0024">The update module <b>132</b> receives as input the transformed artifact <b>142</b>, the artifact map <b>144</b>, and artifact changes <b>146</b>. The artifact changes <b>146</b> can be generated based on modifications to the transformed artifacts <b>142</b> by, for example, a user in the second domain. The update module <b>132</b> imports the transformed artifact <b>142</b> and the artifact map <b>144</b> into a domain two datastore <b>151</b>. Based on the artifact changes <b>146</b>, the update module <b>132</b> updates the artifacts <b>148</b> and the artifact maps <b>150</b> stored in the domain two datastore <b>151</b>.</p>
<p id="p-0026" num="0025">The compare module <b>134</b> receives as input the transformed artifacts <b>142</b> and the transformed artifact map <b>144</b> that are generated, for example, from a subsequent execution of the functions of the artifact transform module <b>130</b>, and artifacts <b>152</b> and an artifact map <b>154</b> from the domain two datastore <b>151</b>. The compare module <b>134</b> develops an association model <b>400</b> (<figref idref="DRAWINGS">FIG. 4</figref>) based on the transformed artifacts maps <b>144</b> and the artifact maps <b>154</b> from the domain two datastore <b>151</b>. The association model <b>400</b> (<figref idref="DRAWINGS">FIG. 4</figref>) maintains a relationship between the different artifacts <b>152</b> and <b>142</b> by using the information in the artifact maps <b>144</b> and <b>154</b>.</p>
<p id="p-0027" num="0026">With reference to <figref idref="DRAWINGS">FIG. 4</figref> and continued reference to <figref idref="DRAWINGS">FIG. 3</figref>, in one example, to build the association model <b>400</b>, the compare module <b>134</b> evaluates each map <b>144</b>, <b>154</b> sequentially. Based on the evaluation, the compare module <b>134</b> creates, for each new unique identifier found in an object definition <b>174</b>, a new association object <b>401</b> in the associations model <b>400</b>. The association object includes a reference <b>402</b>, <b>403</b> to one or more objects definitions <b>174</b>. The objects definitions <b>174</b> are considered to be associated with each other and can include: a new object, a current object, a merged object, an ancestor object. The compare module <b>134</b> then updates the new association object <b>401</b> for any new artifact with an already processed unique identifier. In various embodiments, the lifespan of the association model <b>400</b> is that of a single compare session between the version one artifact set and the version two artifact set.</p>
<p id="p-0028" num="0027">Once the association model <b>400</b> is complete, the compare module <b>134</b> uses the association model <b>400</b> to compare the associated artifacts <b>142</b>, <b>152</b> and determines any differences. The differences are determined in terms of the second domain and expressed in a transform delta model <b>160</b>.</p>
<p id="p-0029" num="0028">In one example, the transform delta model <b>160</b> is created when the user has committed any changes to the domain two artifacts <b>152</b> based on the differences. The transform delta model <b>160</b> captures changes that were not accepted by the user thus, representing outstanding differences to be reported to the first domain.</p>
<p id="p-0030" num="0029">The transform delta model <b>160</b> includes delta objects that reference the object definition elements from the map <b>144</b>, <b>154</b>. One transform delta model <b>160</b> is created for each difference left uncommitted between the first and the second domain, or committed by the second domain, by the compare module <b>134</b>.</p>
<p id="p-0031" num="0030">The synchronization module <b>136</b> receives as input artifacts <b>138</b> or the first domain, and the transform delta model <b>160</b>. The synchronization module <b>136</b> interprets the transform delta model <b>160</b> and determines which changes in the first domain affected the existing objects in the second domain. Based on the changes, the synchronization module <b>136</b> optionally updates the artifacts <b>138</b> of the first domain with the changes.</p>
<p id="p-0032" num="0031">Turning now to <figref idref="DRAWINGS">FIG. 5</figref>, a flow chart illustrates a synchronization method that can be performed by the synchronization system of <figref idref="DRAWINGS">FIG. 2</figref> in accordance with an exemplary embodiment. As can be appreciated in light of the disclosure, the order of operation within the method is not limited to the sequential execution as illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, but may be performed in one or more varying orders as applicable and in accordance with the present disclosure.</p>
<p id="p-0033" num="0032">In one example, the method may begin at <b>200</b>. The artifacts from a latest version residing in the first domain are exported from the first domain at process block <b>210</b>. The export generates a set of transformed artifacts and artifact maps. The transformed artifacts and the artifact maps are then loaded into the second domain at process block <b>220</b>. The current artifacts and corresponding current maps are retrieved in the second domain at process block <b>230</b>. Based on the current artifact maps and the transformed artifact maps, the association model is built at process block <b>240</b>.</p>
<p id="p-0034" num="0033">Upon completion of the association model at process block <b>240</b>, the transformed artifacts and the associated current artifacts are compared at process block <b>250</b> for differences. When a difference is found at process block <b>260</b>, a prompt may optionally be generated for allowing a user to accept or reject the changes at process block <b>270</b>. When the changes are accepted at process block <b>280</b>, the corresponding current artifact and artifact map are updated at process block <b>290</b>. The process continues until all differences have been reviewed at process block <b>260</b>.</p>
<p id="p-0035" num="0034">Upon completion of evaluating all differences at process block <b>260</b>, the transform delta model is generated at process block <b>300</b> based on the differences. In one example, the transform delta model is generated based on the accepted changes, the rejected changes, or when changes were based on changes from the second domain rather than the first domain. When the differences are only as a result of changes from the first domain and all changes are consolidated, the transform delta model can optionally not be generated at <b>300</b>.</p>
<p id="p-0036" num="0035">Once the transform delta model is generated at process block <b>300</b>, the differences depicted by the transform delta mode are evaluated at process block <b>310</b>. When the transform delta model depicts a difference at process block <b>310</b>, a prompt may optionally be generated for allowing a user to accept or reject the changes in the first domain at process block <b>320</b>. When the changes are accepted at process block <b>330</b>, the corresponding current artifact in the first domain is updated at process block <b>340</b>. The process continues until all differences provided in the transform delta model have been reviewed at process block <b>310</b>. Thereafter, the method may end at <b>350</b>.</p>
<p id="p-0037" num="0036">As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, the present invention may take the form of an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer-usable program code embodied in the medium.</p>
<p id="p-0038" num="0037">Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-useable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.</p>
<p id="p-0039" num="0038">Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0040" num="0039">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instruction.</p>
<p id="p-0041" num="0040">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one ore more other features, integers, steps, operations, element components, and/or groups thereof.</p>
<p id="p-0042" num="0041">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated</p>
<p id="p-0043" num="0042">While the preferred embodiment to the invention had been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of synchronizing artifacts of a first domain with artifacts of a second domain, the method comprising:
<claim-text>loading a first set of transformed artifacts and a first artifact map from a first domain into a second domain, the first set of transformed artifacts based on a first artifact of a first set of artifacts, and the first set of transformed artifacts of the first domain compatible with the second domain the first artifact may capturing traceability information between artifacts in the first domain and the first set of transformed artifacts;</claim-text>
<claim-text>generating an association model based on an evaluation of the first artifact map and a second artifact map;</claim-text>
<claim-text>comparing a first transformed artifact of the first set of transformed artifacts with a second artifact of a second set of artifacts corresponding to the second artifact map based on the association model;</claim-text>
<claim-text>determining differences based on the comparing;</claim-text>
<claim-text>selectively updating the second artifact map based on the differences; and</claim-text>
<claim-text>selectively updating the first artifact based on the differences such that the first artifact and the second artifact are synchronized with one another, the updating of the first artifact based on a traceability mechanism that maintains a cross-domain relationship between the first artifact and the second artifact.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising generating a delta model based on the differences.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the generating the delta model is based on differences with respect to changes in the first domain that were not accepted in the second domain.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the generating the delta model is further based on differences with respect to changes in the second domain.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising loading the delta model into the first domain and updating a first set of non-transformed objects associated with the first set of transformed objects based on the delta model.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>generating a unique identifier for each transformed artifact; and</claim-text>
<claim-text>storing the unique identifier in the artifact map, and</claim-text>
<claim-text>wherein the generating the association model is based on the unique identifier stored in the artifact map. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

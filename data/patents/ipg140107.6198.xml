<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627322-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627322</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12915439</doc-number>
<date>20101029</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>373</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>46</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>718102</main-classification>
</classification-national>
<invention-title id="d2e53">System and method of active risk management to reduce job de-scheduling probability in computer clusters</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7065764</doc-number>
<kind>B1</kind>
<name>Prael et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2006/0195508</doc-number>
<kind>A1</kind>
<name>Bernardin et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0244601</doc-number>
<kind>A1</kind>
<name>Zeis et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0256541</doc-number>
<kind>A1</kind>
<name>Rai</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0259500</doc-number>
<kind>A1</kind>
<name>Sahoo et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  7</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2009/0300633</doc-number>
<kind>A1</kind>
<name>Altrichter et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2011/0029675</doc-number>
<kind>A1</kind>
<name>Yeow et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>23</number-of-claims>
<us-exemplary-claim>15</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>718102</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>13</number-of-drawing-sheets>
<number-of-figures>13</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120110584</doc-number>
<kind>A1</kind>
<date>20120503</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chaudhry</last-name>
<first-name>Geeta</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cirne</last-name>
<first-name>Walfredo</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Scott David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chaudhry</last-name>
<first-name>Geeta</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Cirne</last-name>
<first-name>Walfredo</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Johnson</last-name>
<first-name>Scott David</first-name>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Birch, Stewart, Kolasch &#x26; Birch, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Google Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zhe</last-name>
<first-name>Mengyao</first-name>
<department>2195</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems and methods are provided for generating backup tasks for a plurality of tasks scheduled to run in a computer cluster. Each scheduled task is associated with a target probability for execution, and is executable by a first cluster element and a second cluster element. The system classifies the scheduled tasks into groups based on resource requirements of each task. The system determines the number of backup tasks to be generated. The number of backup tasks is determined in a manner necessary to guarantee that the scheduled tasks satisfy the target probability for execution. The backup tasks are desirably identical for a given group. And each backup task can replace any scheduled task in the given group.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="132.76mm" wi="156.29mm" file="US08627322-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="237.74mm" wi="191.26mm" orientation="landscape" file="US08627322-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.31mm" wi="198.37mm" orientation="landscape" file="US08627322-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="99.23mm" wi="159.85mm" orientation="landscape" file="US08627322-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="176.61mm" wi="155.19mm" orientation="landscape" file="US08627322-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="184.74mm" wi="158.67mm" orientation="landscape" file="US08627322-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="151.81mm" wi="137.58mm" orientation="landscape" file="US08627322-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="173.23mm" wi="161.88mm" orientation="landscape" file="US08627322-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="155.87mm" wi="153.59mm" orientation="landscape" file="US08627322-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="80.60mm" wi="125.73mm" orientation="landscape" file="US08627322-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="82.13mm" wi="128.52mm" orientation="landscape" file="US08627322-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="87.04mm" wi="168.32mm" orientation="landscape" file="US08627322-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="247.48mm" wi="151.21mm" orientation="landscape" file="US08627322-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="225.04mm" wi="177.46mm" orientation="landscape" file="US08627322-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">The present invention relates generally to risk management in computer clusters. More particularly, aspects of the invention relate to containing job de-scheduling risks within a target bound by creating backup tasks for heterogeneous tasks with similar resource requirements.</p>
<p id="p-0004" num="0003">2. Description of Related Art</p>
<p id="p-0005" num="0004">Computing power required by applications has been increasing at a tremendous rate. By aggregating the power of widely distributed resources, computer clusters permit organizations to boost their processing power through linked computers and a collection of shared resources such as computing nodes, processors, memory, databases, network bandwidth, I/O devices, etc. Heterogeneous application jobs/tasks are allocated with resources and scheduled to run in series or in parallel on different machines by cluster management infrastructure such as resource managers and job schedulers.</p>
<p id="p-0006" num="0005">In a distributed computing environment, execution failures of the jobs or tasks already scheduled may occur for various reasons such as network failure, machine crash, power failure, overloaded resource conditions, distrusted security policy, competing tasks or jobs, or other incidents that lead to non-availability of scheduled and/or required resources.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">To reduce such execution failures, aspects of the invention minimize the de-scheduling possibilities of the scheduled jobs or tasks due to the above-mentioned reasons in order to provide a risk-resilient cluster with a robust stay-scheduling capability.</p>
<p id="p-0008" num="0007">In accordance with aspects of the invention, a system creates backup tasks for a plurality of tasks scheduled to run in a computer cluster. Each scheduled task is associated with a target probability for execution. Each scheduled task is executable by a first cluster element and a second cluster element. In one example, the first cluster element comprises a machine and the second cluster element includes a rack that houses the machine. The system classifies the scheduled tasks into different groups based on the resource requirements of each task. The system may determine, for each group, the number of backup tasks to be generated based on target probabilities of the scheduled tasks in the group. The system is configured to generate the backup tasks based on the determination, where each backup task in a given group is identical and can be employed to backup/replace any scheduled task in the group.</p>
<p id="p-0009" num="0008">In accordance with one embodiment, a computer-implemented method is executable by a processor for allocating backup tasks to a plurality of tasks scheduled to run in a computer cluster. The method comprises classifying the plurality of scheduled tasks in groups based on one or more resource requirements associated with each task, each group containing at least one of the scheduled tasks; determining, for at least a respective one of the groups, a number of backup tasks necessary to guarantee that the scheduled tasks of the respective group satisfy a target probability for execution; and generating, with the processor, the backup tasks based on the determination, the generated backup tasks being identical, and each backup task in the respective group being configured to replace any scheduled task in the respective group.</p>
<p id="p-0010" num="0009">In one example the computer cluster includes first and second cluster elements. Here, the first cluster element comprises a machine and the second cluster element comprising a rack that houses the machine. In an alternative, determining the number of backup tasks is based on at least one of a failure probability of the first cluster element and a failure probability of the second cluster element.</p>
<p id="p-0011" num="0010">In another example, each scheduled task of the respective group is linked with a job, and each job is associated with the target probability for execution of its linked task. In a further example, each group contains tasks with identical resource requirements. In yet another example, one of the resource requirements for a selected one of the scheduled tasks is a memory range requirement.</p>
<p id="p-0012" num="0011">In an alternative, the computer cluster includes a plurality of the first cluster elements and a plurality of the second cluster elements. Here, the method further comprises receiving, from each scheduled task, a preference for execution by a given one of the plurality of the first cluster elements or a given one of the plurality of the second cluster elements. In this case, the classification is performed based on the received preference.</p>
<p id="p-0013" num="0012">In a further alternative, the method comprises determining a first cost to create the backup tasks for the respective group; for each group, determining a second cost to create additional backup tasks for a combination group that includes the respective group, the determining the second cost being obtained by dividing the plurality of scheduled tasks and the respective group; comparing the first cost with the second cost; creating the backup tasks for the respective group if the first cost is less than the second cost; and creating the additional backup tasks for the combination group if the first cost is larger than or equal to the second cost.</p>
<p id="p-0014" num="0013">In one example, determining the number of backup tasks comprises iteratively calculating a probability of losing no more than all current backup tasks in a given one of the plurality of groups; comparing the calculated probability to the target probabilities for execution; adding one backup task to a class of the given group if the calculated probability is greater than all the target probabilities; and ceasing to add backup tasks to the given group if the calculated probability is smaller than all the target probabilities. In an alternative, calculating the probability is based on at least one of a failure probability of a first cluster element in the cluster, a failure probability of a second cluster element in the cluster, and the number of current backup tasks in the given group.</p>
<p id="p-0015" num="0014">In another alternative, the cluster includes a plurality of first and second cluster elements, and calculating the probability further comprises: for each second cluster element used by the scheduled tasks in the given group, dividing the second cluster elements into sub-second-elements. In this case, the sub-second elements each include one or more of the first cluster elements. And each of the first cluster elements in each respective sub-second-element executes the same number of the scheduled tasks. For each sub-second-element, the method calculates a probability of losing no more than all the scheduled tasks therein based on a failure probability of the first cluster elements in the respective sub-second-element, the number of the first cluster elements in the respective sub-second element, and the number of the scheduled tasks in the respective sub-second-element.</p>
<p id="p-0016" num="0015">In yet another example, the method further comprises monitoring task execution status and cluster status; and performing modification or deletion of the backup tasks in the respective group based on the monitoring.</p>
<p id="p-0017" num="0016">In a further example, the computer cluster includes first and second cluster elements, and the method further comprises estimating a failure probability of the first cluster element and a failure probability of the second cluster element. In an alternative, determining the number of backup tasks is further based on a failure probability of a third cluster element in the computer cluster. Here, the third cluster element comprises at least a cluster element other than the first and the second cluster elements.</p>
<p id="p-0018" num="0017">In accordance with another embodiment, a system is provided to generate backup tasks for a plurality of tasks scheduled to run in a computer cluster. The system comprises a memory and a processor coupled to the memory. The processor is configured to execute a set of instruction stored in the memory to classify the plurality of scheduled tasks in groups based on one or more resource requirements associated with each task. Each scheduled task is associated with a target probability for execution. Each scheduled task is executable by a first cluster element and a second cluster element. Each group contains at least one of the scheduled tasks. The processor is also configured to determine, for at least a respective one of the groups, a number of backup tasks necessary to guarantee that the scheduled tasks of the respective group satisfy the target probability for execution. The processor is further configured to generate the backup tasks based on the determination. The generated backup tasks in the respective group are identical. And each backup task in the respective group is configured to replace any scheduled task in the respective group.</p>
<p id="p-0019" num="0018">In one example, one of the resource requirements for a selected one of the scheduled tasks is a memory range requirement. In another example, the first cluster element comprises at least one of a plurality of machines and the second cluster element comprises at least one of a plurality of racks.</p>
<p id="p-0020" num="0019">In a further example, the first cluster element comprises a plurality of the first cluster elements, the second cluster element comprises a plurality of the second cluster elements, and the processor is further configured to receive, from each scheduled task, a preference for execution by a given one of the plurality of the first cluster elements or a given one of the plurality of the second cluster elements. Here, the classification is performed based on the received preference.</p>
<p id="p-0021" num="0020">In another example, the processor is further configured to determine a first cost to create the backup tasks for the respective group. For each group, the processor is configured to determine a second cost to create additional backup tasks for a combination group that includes the respective group. The determined second cost is obtained by dividing the plurality of scheduled tasks and the respective group. The processor is further configured to compare the first cost with the second cost, to create the backup tasks for the respective group if the first cost is less than the second cost, and to create the additional backup tasks for the combination group if the first cost is larger than or equal to the second cost.</p>
<p id="p-0022" num="0021">In yet another example, the processor determines the number of backup tasks by iteratively executing the instructions for calculating a probability of losing no more than all current backup tasks in a given one of the plurality of groups; comparing the calculated probability to the target probabilities for execution; adding one backup task to a class of the given group if the calculated probability of losing no more than all current backup tasks is greater than all the target probabilities; and ceasing to add backup tasks to the given group if the calculated probability is smaller than all the target probabilities.</p>
<p id="p-0023" num="0022">In an alternative, the first cluster element comprises a plurality of first cluster elements and the second cluster element comprises a plurality of second cluster elements. Here, the processor is further configured to calculate a probability of losing no more than all current backup tasks in a given group by: for each second cluster element used by the scheduled tasks in the given group, dividing the second cluster element into sub-second-elements. The sub-second-elements each include one or more of the first cluster elements. Each of the first cluster elements in each respective sub-second-element executes the same number of the scheduled tasks. For each sub-second-element, the processor is further configured to calculate a probability of losing no more than all the scheduled tasks therein based on a failure probability of the first cluster elements in the respective sub-second-element, the number of the first cluster elements in the respective sub-second-element, and the number of the scheduled tasks in the respective sub-second-element.</p>
<p id="p-0024" num="0023">In another alternative, the processor is further configured to monitor task execution status and cluster status, and perform modification or deletion of the backup tasks in the respective group based on the monitoring. In an additional example, the processor is further configured to estimate a failure probability of the first cluster element and a failure probability of the second cluster element. And in a further example, the processor is additionally configured to determine the number of backup tasks based on a failure probability of a third cluster element in the computer cluster. Here, the third cluster element comprises at least a cluster element other than the first and the second cluster elements.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of a network environment in accordance with aspects of the invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> is a functional diagram in accordance with aspects of the system of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> is a main flow diagram in accordance with aspects of the invention.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 4</figref> is an exemplary scenario in accordance with aspects of the invention.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 5</figref> is another exemplary scenario in accordance with aspects of the invention.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram in accordance with aspects of the invention.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 7</figref> is another flow chart in accordance with aspects of the invention.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 8</figref> is yet another flow diagram in accordance with aspects of the invention.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 9</figref> is a further flow diagram in accordance with aspects of the invention.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 10</figref> is another flow diagram in accordance with aspects of the invention.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 11</figref> is a further flow diagram in accordance with aspects of the invention.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 12</figref> is another exemplary scenario in accordance with aspects of the invention.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 13</figref> is a further exemplary scenario in accordance with aspects of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0038" num="0037">Aspects, features and advantages of the invention will be appreciated when considered with reference to the following description of exemplary embodiments and accompanying figures. The same reference numbers in different drawings may identify the same or similar elements. Furthermore, the following description is not limiting; the scope of the invention is defined by the appended claims and equivalents.</p>
<p id="p-0039" num="0038">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, a computer cluster <b>100</b> in accordance with aspects of the invention includes one or more network computing elements <b>102</b>, <b>104</b> and <b>106</b> for performing job/task processing. The cluster may be any type of distributed computing system. For example, cluster <b>100</b> may be a high-availability cluster that includes redundant processing entities to improve the availability of services, or a load-balancing cluster that has one or more load-balancing front ends which all workload come through and are distributed to a collection of back end servers.</p>
<p id="p-0040" num="0039">In other scenarios, cluster <b>100</b> may be a high-performance cluster that divides a computational task into chunks and distributes the chunks across many different processing entities in the cluster. In further examples, cluster <b>100</b> may be a grid cluster that supports more heterogeneous collections. Alternatively, the cluster may be a dedicated cluster that performs parallel computing across entire cluster or a non-dedicated cluster that allows certain applications to be executed in idle CPU cycles.</p>
<p id="p-0041" num="0040">Cluster computing elements such as <b>102</b>, <b>104</b> and <b>106</b>, also known as processing entities, may communicate with each other through network <b>90</b>. Network <b>90</b> may include various types of intervening nodes such as routers, gateways, servers, databases and operation terminals. Network <b>90</b> may also comprise various configurations and use various protocols including wide area networks, local area networks, wireless networks, personal area networks, virtual private networks, private networks using communication protocols proprietary to one or more companies and various combinations of the foregoing. Although only a few network nodes are depicted in <figref idref="DRAWINGS">FIG. 1</figref>, it should be appreciated that a typical cluster can include a large number of connected computers. Such communication may be facilitated by any device capable of transmitting data to and from other computers, such as Ethernet network interfaces, T1 lines, fiber optic cables, and/or wireless interfaces.</p>
<p id="p-0042" num="0041">Each network computing element <b>102</b>, <b>104</b> and <b>106</b> may reside on a unique network node and may comprise various types of computing facilities. For example, computing element <b>102</b> may be an independent computing machine with its own operating system, memory, processor(s), input/output bus, network adapters, etc. In another example, processing entity <b>104</b> may be a rack server comprising at least one machine.</p>
<p id="p-0043" num="0042">Each processing entity is associated with various hardware and software resources, such as resources <b>108</b>, <b>110</b> and <b>112</b>, respectively. These hardware and software resources may include processors, memory, disks, tapes, swaps, input/output devices or interfaces, network bandwidth, network connections, licenses, or any other site-specific resources. As such, cluster <b>100</b> has a set of distributed and heterogeneous resources that may be centrally or locally managed and utilized by the incoming application jobs/tasks. These resources may be allocated to and shared across multiple jobs or tasks.</p>
<p id="p-0044" num="0043">Jobs <b>114</b>, <b>116</b> and <b>118</b> may come from one or more user applications. Each job may comprise a series of individual tasks. For example, job <b>114</b> may include one or more tasks <b>120</b>. Job <b>116</b> may include a series of tasks <b>122</b> and job <b>118</b> may include tasks <b>124</b>. These tasks may be linked as parallel tasks, or may be dependent or sequential tasks. Each job may be performed on a cluster of processors. The tasks may be discrete blocks of executable code or functions that may be performed on one or more processors in the cluster. Tasks may have specific input or output data that is shared between certain tasks and may be the basis for relationships between tasks.</p>
<p id="p-0045" num="0044">Each job is desirably associated with a set of job-related information. For instance, job <b>114</b> may be associated with information <b>126</b>, job <b>116</b> may be associated with information <b>128</b>, and job <b>118</b> may be associated with information <b>130</b>. The job-related information may include one or more job objectives, performance goals, policies, restrictions and/or preferences. The performance goals may include a probability target for a given job to stay scheduled. For example, if the probability target is 99.999% for job <b>114</b>, it means that this job requires a guarantee with a probability of 99.999% that the job will stay scheduled in the face of expected unavailability of resources due to events such as machine/rack failures.</p>
<p id="p-0046" num="0045">The job-related information may also include a range of resource requirements for each job, including the minimum or the maximum resources needed. Each job or task may have separately defined resources required to implement the job or task. Thus, each job or task may use a range of the shared cluster resources <b>108</b>-<b>112</b> on different levels. In one example, a job or a task may require a single resource such as a single processor or a single software license. In another example, a job or a task may require multiple resources. A task may be configured run with either a minimum amount of memory or a maximum amount of memory.</p>
<p id="p-0047" num="0046">In other examples, each job or task may be configured to use multiple resources spanning different categories of resources. For instance, task <b>120</b> may use 1.0 CPU, 1 GB RAM, a specific software license and a certain amount of network bandwidth, while task <b>122</b> may require no specific software license or network bandwidth, but certain I/O devices, 2.0 CPU and 0.5 GB RAM. The job-related info may also include restrictions or preferences information such as machines or racks to avoid or to prefer, etc.</p>
<p id="p-0048" num="0047">The job-related information may further include any other type of objectives pre-established by the application that dispatches the job. These objectives may include, for instance, job or task initiation requirements, target job or task completion time, etc. In other examples, these performance goals may also be set by an administrative infrastructure or other entity associated with the cluster, such as cluster management infrastructure <b>132</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0049" num="0048">The cluster management infrastructure <b>132</b> may perform various kinds of cluster management functions, including managing the cluster resources and scheduling the application jobs or tasks to run on the designated hardware and software platforms. The cluster management infrastructure <b>132</b> may comprise one or more software layers that include various management modules or functions running on centralized servers or on distributed host platforms.</p>
<p id="p-0050" num="0049">For example, the management infrastructure may include one or more modules <b>134</b> for performing resource management, job scheduling, flow management, etc. These management modules may analyze the incoming jobs and tasks to determine the minimum and maximum amount of resources required for each job or task. Jobs and tasks may be scheduled when the required resources become available. The management modules may also determine scheduling weights or priority values based on pre-established policies and job objectives, and perform job scheduling accordingly. The per job stay-scheduled probability target may also be determined by the cluster management infrastructure <b>132</b> based on various factors (e.g., control policy of the cluster, priority of the job/task, etc).</p>
<p id="p-0051" num="0050">Risk manager <b>136</b> may be implemented as a separate management module in addition to other cluster administrative functions, as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. Alternatively, the risk manager <b>136</b> may be implemented as part of any of the other functional modules such as a job scheduler, a resource manager or a backup task manager. The risk manager <b>136</b> is responsible for determining the number of backup tasks needed to guarantee the stay-scheduled probability target.</p>
<p id="p-0052" num="0051">Specifically, the risk manager <b>136</b> classifies the incoming tasks across heterogeneous jobs based on their respective resource requirements. Classification of the tasks may be performed such that the tasks with similar resource requirements are grouped into the same class. The risk manager may receive the pre-established degree of similarity from the cluster management policy. In further embodiments, the risk manager or the cluster management infrastructure (e.g., in the risk manager) may be configured to dynamically adjust and improve the degree of similarity based on previous performance of the system.</p>
<p id="p-0053" num="0052">Then the risk manager <b>136</b> estimates the de-scheduling probabilities of the tasks in each class based on a variety of pre-established assumptions and predetermined failure probabilities of the network elements involved in the task executions. The predetermined failure probabilities may include failure probabilities of machines, racks, switches, or any other types of computing facilities. These failure probabilities may be estimated by and obtained from other cluster management entities. Alternatively, estimation of these failure probabilities may be performed by the risk manager <b>136</b>.</p>
<p id="p-0054" num="0053">Based on the estimated de-scheduling probabilities and the stay-scheduled probability target associated with tasks in the class, the risk manager <b>136</b> determines how many backup tasks are needed by a given class to guarantee the tasks therein with the stay-scheduled probability targets. The risk manager may then generate the backup tasks for each class accordingly. Alternatively, the risk manager may pass the determined number of backup tasks to other cluster management entities (e.g., a backup task manager, not shown) to have the backup tasks generated for each group.</p>
<p id="p-0055" num="0054">A backup task may be defined by a collection of information such as the task name, the tasks that are to be backed up, the location where the backup task will be saved, the resource requirements and resource locations in the cluster, and backup options for the particular backup task. In system <b>100</b>, a number of identical backup tasks <b>138</b> are created by the risk manager <b>136</b> for each class. Each backup task <b>138</b> is able to replace any task with a given class. As such, in a given class, each backup task <b>138</b> is linked with a set of cluster resources sufficient to support any scheduled task in the class.</p>
<p id="p-0056" num="0055">In one example of system <b>100</b>, the stay-scheduled probability targets may be received by the risk manager <b>136</b> as part of the job/task objectives included in the job-related information <b>126</b>, <b>128</b> and/or <b>130</b>. In another example, the stay-scheduling probability may be determined by a resource manager or a job scheduler, or the risk manager, or other management module in the cluster management infrastructure.</p>
<p id="p-0057" num="0056">The resource requirements may be provided by each incoming job/task, or may be determined and monitored by the risk manager. For example, risk manager <b>136</b> may have a job/task analyzer module that determines the maximum or minimum resource requirements to initiate or execute a job/task based on the job objectives and any relevant policy of the cluster.</p>
<p id="p-0058" num="0057">The risk manager <b>136</b> may also perform job/task monitoring functions to monitor the job/task changes and execution status. The risk manager <b>136</b> may also monitor the status of machines, racks or various other computing facilities in the cluster. Alternatively, the risk manager <b>136</b> may receive the job/task execution status, machine or rack status, or other cluster status information from other cluster management modules such as a resource manager and a job scheduler. Based on the monitored information, the risk manager <b>136</b> may adjust or optimize the backup tasks in each class by adding new backup tasks, deleting or modifying existing backups.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 2</figref> shows a system block diagram <b>200</b> in accordance with aspects of the invention. As illustrated, the risk manager <b>202</b> (equivalent to the risk manager <b>136</b> in <figref idref="DRAWINGS">FIG. 1</figref>) may reside on one node in cluster <b>226</b>. The risk manager <b>202</b> may obtain various information from cluster <b>226</b> and generate risk management information accordingly. The risk manager <b>202</b> may also comprise a plurality of computers that exchange information with different nodes of a network for the purpose of receiving, processing and transmitting data to other machines or operation terminals.</p>
<p id="p-0060" num="0059">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the risk manager <b>202</b> may be a computer (e.g., a server) that contains a processor <b>204</b>, memory <b>206</b> and other components typically present in general purpose computers. Processor <b>204</b> may be any conventional processor, such as off-shelf processors from Intel Corporation or Advanced Micro Devices. Alternatively, the processor may be a dedicated device such as an ASIC, or may be an ARM processor.</p>
<p id="p-0061" num="0060">Memory <b>206</b> stores information accessible by processor <b>204</b>, including instructions <b>208</b> that may be executed or otherwise used by the processor <b>204</b>. It also includes data <b>218</b> that may be retrieved, manipulated or stored by the processor. The memory may be of any type capable of storing information accessible by the processor, including a computer-readable medium, or other tangible medium that stores data that may be read with the aid of an electronic device, such as a hard-drive, memory card, ROM, RAM, DVD or other optical disks, as well as other write-capable and read-only memories. Systems and methods may include different combinations of the foregoing, whereby different portions of the instructions and data are stored on different types of media.</p>
<p id="p-0062" num="0061">Instructions <b>208</b> may be any set of instructions to be executed directly (such as binary machine code) or indirectly (such as scripts from any programming language) by the processor. For example, the instructions may be stored as computer code on the computer-readable medium. In that regard, the terms &#x201c;instructions&#x201d; and &#x201c;programs&#x201d; may be used interchangeably herein. The instructions may be stored in object code format for direct processing by the processor, or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance.</p>
<p id="p-0063" num="0062">In addition, methods and routines of the instructions may include various programs or functions in accordance with aspects of the invention. For instance, instructions <b>210</b> may be executed to receive stay-scheduled probabilities <b>230</b> and job or task resource requirements <b>232</b> from the incoming jobs/tasks in cluster <b>226</b>. Based on the received information, instructions <b>210</b> may be executed to perform job/task similarity estimation and task classifications.</p>
<p id="p-0064" num="0063">The instructions may also include risk estimation instructions <b>212</b> to perform functions such as de-scheduling probability calculations, and backup task creation/optimization instructions <b>214</b> to perform functions such as delete/modification of the existing backup tasks in each class to ensure the validity of the backup tasks and ensure the tasks in each given class are guaranteed with the stay-scheduled probability targets.</p>
<p id="p-0065" num="0064">Cluster status monitoring instructions <b>216</b> may be executed to observe and process cluster status information <b>228</b> to determine the updated resource requirements of the tasks in each class based on the cluster status information.</p>
<p id="p-0066" num="0065">Instructions <b>208</b> may also be configured to perform distribution of risk management information <b>234</b>, which includes backup tasks, to other cluster management entities to facilitate functions such as job scheduling, flow management or resource management. Instructions <b>208</b> may further include instructions to estimate failure probabilities of network elements in cluster <b>226</b> to facilitate the de-scheduling risk estimation.</p>
<p id="p-0067" num="0066">Data <b>218</b> may be retrieved, stored or modified by processor <b>204</b> in accordance with the instructions <b>208</b>. For instance, although the system and method is not limited by any particular data structure, the data may be stored in computer registers, in a relational database as a table having a plurality of different fields and records, XML documents or in other formats.</p>
<p id="p-0068" num="0067">As illustrated, data <b>218</b> may include task class data <b>220</b> created in accordance with the task classification instructions and backup task creation/optimization instructions. The task class data <b>220</b> describes the properties of each class and may include information such as resource requirements of the tasks in the class, as well as the stay-scheduled probability targets of each task. Furthermore, the class data also stores information of the backup tasks created for each class by the risk manager.</p>
<p id="p-0069" num="0068">Data <b>222</b> stores cluster status information that may be used by the risk manager to contain the de-scheduling probability within the desired limit. The status information may include, for example, job execution status and the updated resource requirements, failed machines/racks, outages of various cluster elements, and other information monitored and recorded by the risk manager.</p>
<p id="p-0070" num="0069">Data <b>224</b> stores various types of empirical or estimated failure probabilities for use by the risk estimation and backup task creation instructions. These may include, for example, failure probabilities of network elements like switches, machines or racks, or job/task failure probabilities on one or more or combinations of these network elements.</p>
<p id="p-0071" num="0070">The above-mentioned data may reside on risk manager <b>202</b> as illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, or may be stored on distributed databases in the cluster associated with the risk manager. Processor <b>204</b> may execute instructions <b>208</b> to access these databases and retrieve data from therein.</p>
<p id="p-0072" num="0071">Although <figref idref="DRAWINGS">FIG. 2</figref> functionally illustrates the processor and memory as being within the same block, the processor and memory may actually comprise multiple processors and memories that may or may not be stored within the same physical housing. For example, the memory <b>206</b> may be one or more hard drives or other storage media located in a server farm of a data center. In another example, some of the instructions and data may be stored on removable read-only memory and others within a read-only computer chip. Some or all of the instructions and data may be stored in a location physically remote from, yet still accessible by, the processor. Similarly, the processor may actually comprise a collection of processors which may or may not operate in parallel. Accordingly, references to a processor, a computer, or a memory will be understood to include references to a collection of processors, machines or memories that may or may not operate in parallel.</p>
<p id="p-0073" num="0072">Risk manager <b>202</b> may be at one node in cluster <b>226</b> and be capable of directly and indirectly communicating with other nodes in the cluster. For example, instead of monitoring the cluster information or estimating the resource requirements or the probability targets by itself, the risk manager may obtain the cluster information from other cluster management modules which reside in other nodes in cluster <b>226</b>. In this instance, the risk manager may be at one of many nodes included in the cluster management infrastructure <b>132</b> illustrated in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0074" num="0073">Although certain advantages are obtained when information is transmitted or received as noted above, other aspects of the system and method are not limited to any particular manner of transmission of information. For example, in some aspects, information may be sent via a tangible computer-readable medium such as a disk, tape, CD-ROM or solid-state memory such as a flash drive. In other aspects, the information may be transmitted in a non-electronic format and manually entered into the system. And, although some functions are indicated as taking place on a plurality of machines or servers, various aspects of the invention may be implemented by a single computer having a single processor.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a flow chart <b>300</b> in accordance with aspects of the invention, where a risk management system in a computer cluster creates backup tasks for a plurality of tasks scheduled based on their probability targets to stay scheduled, estimated de-scheduling probabilities and resource requirements.</p>
<p id="p-0076" num="0075">As shown in <figref idref="DRAWINGS">FIG. 3</figref>, the process preferably starts in block <b>302</b> with the risk management system dividing the scheduled tasks into classes based on the resource requirement of each task. The tasks in each class may come from heterogeneous jobs but have identical or similar resource requirements. The task classification may also be performed based on additional criteria such as preferred or to-be-avoided machines, racks or other network computing entities.</p>
<p id="p-0077" num="0076">As shown in blocks <b>304</b> and <b>306</b>, respectively, the system then performs an iterative process of generating the backup tasks and determining if the existing backup tasks can guarantee the probability targets to stay scheduled. In block <b>304</b>, the number of the backup tasks may be increased by one in each iteration. Block <b>306</b> may be performed by estimating the de-scheduling probability of the tasks and comparing the estimated de-scheduling probability to the stay-scheduled probability targets. If the de-scheduling probability is greater than or equal to the probability targets, the process reverts back to block <b>304</b> and generate more backup tasks. If the de-scheduling probability is greater than the probability targets, no more backup tasks will be generated and the process proceeds to block <b>308</b>.</p>
<p id="p-0078" num="0077">In one scenario, the system starts with no classes and creates new classes for all the scheduled tasks. With later scheduled tasks, instead of creating new classes, the risk management system may match these tasks to a most suitable class based on the tasks' resource requirements and the properties of existing classes. The system may also modify the existing class to accommodate the new tasks.</p>
<p id="p-0079" num="0078">In block <b>308</b>, the risk management system performs incremental optimization of the backup tasks. The optimization may be performed by the risk management system by monitoring or receiving notifications from other cluster management entities of the changes to the tasks as well as to the cluster. These changes may include jobs/tasks finishing, changing or leaving the cluster. The changes may also include the outage of machines, congestion of a network node, crash of a computing process, the addition or removal of network elements, etc.</p>
<p id="p-0080" num="0079">Based on the monitored information, the system determines if the existing backup tasks in each class still match the requirements of the tasks in the class. This may be performed periodically after an accrual of the changing events, or may be triggered by a changing event such as a job leaving a class. If the backup tasks in a class do not match the requirement of a particular scheduled task in that class, the system may determine that the scheduled task is not backed up, and perform modifications on the existing backup tasks or adding new backup tasks to the class.</p>
<p id="p-0081" num="0080">In one example, the system may remove a backup task that is still valid but has become unnecessary due to its completion or leaving the cluster (e.g., returning to the user application with the completion results). In another example, the system may leave some extra backup tasks to avoid the possibility of growing the class again in the next round of classification or optimization of the tasks. In this way, the system efficiency is increased with the reduced amount of deletion or creation. In this situation, the number or the criteria of extra backup tasks to be left for each class may be predetermined.</p>
<p id="p-0082" num="0081">In the optimization process, the system desirably removes any backup tasks that have become invalid due to events like machine failures. As such, unnecessary backup resources may be returned to the cluster in a timely manner to improve the utilization efficiency of the cluster resources.</p>
<p id="p-0083" num="0082">Various other optimizations may also be performed by the system. For one example, jobs or tasks may be scheduled and executed without backup tasks created. This opt-out option may depend on the job objectives or policies associated with each job or task. In this situation, the system may decide to deny modifying or growing an existing class when the disruptions for the non-backed-up tasks during the optimization process are great. For example, when deletions of all the backup tasks and re-creations are required, modification or growing may be denied.</p>
<p id="p-0084" num="0083">In another example, if the backup tasks in a given class become smaller (e.g., due to jobs finishing or leaving the cluster) and the backup tasks are to be reduced accordingly, the system may schedule all the reduced backup tasks on the same machine or rack, or on the least number of network elements possible in order to reduce any unnecessary computations or disruptions.</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an exemplary scenario <b>400</b> in which the risk management system operates in accordance with an aspect of the present invention. In this scenario, job <b>402</b> has 10 tasks, job <b>404</b> has 6 tasks and job <b>406</b> has 5 tasks, respectively. The tasks in each job may have different resource requirements and the tasks with similar resource requirements are pooled together into one class. For example, task <b>408</b> from job <b>402</b>, task <b>412</b> from job <b>404</b> and task <b>418</b> from job <b>406</b> may have similar resource requirements and may be classified into &#x201c;task class <b>1</b>&#x201d; (<b>422</b>). &#x201c;Task class <b>2</b>&#x201d; (<b>424</b>) may include task <b>410</b> from job <b>402</b> and task <b>414</b> from job <b>404</b>. Task <b>416</b> from job <b>404</b> may have similar resource requirement with task <b>420</b> from job <b>406</b>, and therefore both tasks are put into &#x201c;task class <b>3</b>&#x201d; (<b>426</b>).</p>
<p id="p-0086" num="0085">In addition to the resource requirements, the risk management system may also classify the tasks by taking into account other criteria, such as scheduling policy or preference of machines to execute the job/task. These criteria may come from other cluster management entities such as a job scheduler or a resource manager as illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, or alternatively, from the job-related information carried by each job. Thus, each class is a set of jobs/tasks that are similar in at least the resource requirements and other aspects.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 5</figref> illustrates another exemplary scenario <b>500</b> in which backup tasks are created by the risk management system in accordance with an aspect of the present invention. In each class, the backup tasks are identical and can replace any scheduled task in this class. As such, each backup task is associated with a set of cluster resources that can satisfy the maximum resource requirements of the scheduled tasks. For example, in &#x201c;task class <b>1</b>&#x201d; (<b>522</b>), task <b>508</b> from job <b>502</b> may need 1 GB RAM and 1.0 CPU, task <b>512</b> from job <b>504</b> may need 10 MB RAM and 2.0 CPU and task <b>518</b> from job <b>506</b> may need 100 MB RAM and 1.5 CPU. Thus, each of the backup tasks <b>528</b> in task class should have at lest 1 GB RAM and 2.0 CPU to be able to replace either task <b>508</b>, task <b>512</b> or task <b>518</b>. Similarly, backup task <b>530</b> is able to accommodate the maximum resource requirements of the tasks in &#x201c;task class <b>2</b>&#x201d; (<b>524</b>), and can replace task <b>516</b> and task <b>520</b>. Backup task <b>532</b> in &#x201c;task class <b>3</b>&#x201d; (<b>526</b>) is also allocated with the maximum resources needed for all the tasks in task class <b>3</b>, and can replace task <b>510</b> and task <b>514</b>.</p>
<p id="p-0088" num="0087">Operations in accordance with aspects of the invention will now be described in detail with reference to processes illustrated in <figref idref="DRAWINGS">FIGS. 6-11</figref>. <figref idref="DRAWINGS">FIGS. 6-7</figref> illustrate the operational breakdown of a detailed process of dividing tasks into classes (block <b>302</b> in <figref idref="DRAWINGS">FIG. 3</figref>). <figref idref="DRAWINGS">FIGS. 8-11</figref> illustrate the operational breakdown of a detailed process of generating backup tasks and estimating if the existing backup tasks can guarantee the stay-scheduled probability targets. It should be understood that the following operations do not have to be performed in the precise order described below. Rather, various operations can be handled in a different order or simultaneously.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a task classification process <b>600</b>. In block <b>602</b>, the system divides all the scheduled tasks into signatures (preliminary groups) such that in each given signature or preliminary group the tasks have identical or similar resource requirements and performance restriction (e.g., preferred/to-avoid machines/racks, etc.) or scheduling policies.</p>
<p id="p-0090" num="0089">In block <b>604</b>, the system determines if there is any existing class to which to allocate the tasks. If there is not, the process proceeds to block <b>606</b> to create classes based on the divided signatures or groups. If there is any existing class, the process proceeds to block <b>608</b> to select a matching class and modify the class as necessary.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an exemplary process <b>700</b> according to which the system performs the operations in block <b>608</b>, namely, selecting a class and modifying the class as necessary for each signature or each group of tasks. In block <b>702</b>, for each existing class the system determines a cost, C<sub>s+b</sub>, to create backup tasks in the respective class for signature S. Then in block <b>704</b>, the system selects the class with the minimum cost, min(C<sub>(s+b)</sub>).</p>
<p id="p-0092" num="0091">In block <b>706</b>, the system determines a cost C<sub>s </sub>to create backup tasks for each signature alone. Since larger classes lead to greater resource utilization efficiency, a penalty <b>708</b> may be applied to the determination of cost C<sub>s </sub>to discourage creating singleton backup tasks. In block <b>710</b>, the system compares the minimum cost to create backup tasks for the signature and the existing class (min(C<sub>(s+b)</sub>)) to cost C<sub>s</sub>. If min(C<sub>(s+b)</sub>) is less than or equal to C<sub>s</sub>, the process proceeds to block <b>712</b> to create a new class for the signature alone and new backup tasks for the new class. If min(C<sub>(s+b)</sub>) is greater than C<sub>s</sub>, the process proceeds to block <b>714</b> to grow the class with the minimum cost min(C<sub>(s+b)</sub>), by adding signature S to the class and creating extra backup tasks if necessary.</p>
<p id="p-0093" num="0092">Process <b>700</b> may be iteratively performed on each created signature. The system may perform the iteration in various orders. For one example, the iteration may start with the signature for which the number of the compatible machines needed by the tasks in each signature is the lowest or the highest. Alternatively, the iteration order may be based on other restrictions, preferences or policies associated with the incoming tasks. In a further example, the iteration may be performed in a random order.</p>
<p id="p-0094" num="0093">Instead of selecting a matching class and growing the class based on the costs to create the backup tasks, the system may determine the number of classes needed and a range of resource requirements for each class based on the range of resource requirements of all the tasks in the cluster. Thus, a given signature may fit exactly into a class.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary iterative process <b>800</b> according to which the system determines the number of backup tasks required for each class, and generates backup tasks accordingly. The process starts in block <b>802</b>, where the system computes the overall probability of losing no more than all the (b) backup tasks for a given class with a number (n) of scheduled tasks therein.</p>
<p id="p-0096" num="0095">Then in block <b>804</b>, the system determines if this overall probability is greater than the stay-scheduled probability target of each task. If the comparison shows that the overall probability of losing b backup tasks is greater than the probability target, the process proceeds to block <b>808</b> where the risk management system adds one backup task to the class. Otherwise, there have been enough backup tasks in the class to ensure each of the n number of tasks to stay scheduled. Then the process proceeds to block <b>806</b> where the system stops generating backup tasks for the class.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an exemplary process <b>900</b> where the system performs the operations in block <b>802</b>, namely, computing an overall probability of losing no more than all b backup tasks in a given class. As shown, the system may first estimate the risk of losing k tasks for k=0 . . . n+b, in block <b>902</b>, then add these probabilities for k=0 . . . b in block <b>904</b>.</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an exemplary process <b>1000</b> of how the risk estimation of losing k tasks for k=0 . . . n+b may be performed by the system. The system may first determine in block <b>1002</b>, for each rack (or other selected unit of the distributed computing elements in the cluster), the possibility of losing all the tasks on the rack. Then, in block <b>1004</b>, the system removes the assumption of all the tasks being on a single rack by performing the convolution of the per rack probabilities for all the racks used by the k tasks in a given cluster.</p>
<p id="p-0099" num="0098">To compute the per rack probability of losing tasks, the system may first use a set of preset assumptions and then remove these assumptions one by one in later calculations. As illustrated in the exemplary process <b>1100</b> in <figref idref="DRAWINGS">FIG. 11</figref>, the system may first calculate the failure probabilities of the tasks on the same rack. The process may start from block <b>1102</b>, where the system calculates a probability density function
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P</i><sub>r</sub>(<i>f=x</i>)&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
that x tasks de-scheduled on a given rack r with an assumption that no more than one task runs on each machine and all the tasks are on the same rack, i.e., rack r. Here, rack r may be assumed to have at least m machines and R may be used to designate the number of machines used by the tasks residing on rack r.
</p>
<p id="p-0100" num="0099">P<sub>r</sub>(f=x) may be obtained from p(r), p(m|&#x2dc;r) and R where:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>r</i>)=probability that rack <i>r </i>fails&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>m|&#x2dc;r</i>)=probability that the machine <i>m </i>fails but rack <i>r </i>does not&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0101" num="0100">The above failure probabilities p(r) and p(m|&#x2dc;r) may be estimated by the risk management system. Alternatively, these probabilities may be predetermined and obtained from an empirical data set such as data <b>224</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>, or from other cluster management entities.</p>
<p id="p-0102" num="0101">Thus, the following computations may be performed by the system to obtain P<sub>r</sub>(f=x):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P</i><sub>r</sub>(<i>f&#x3e;R</i>)=0;&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P</i><sub>r</sub>(<i>f=R</i>)=<i>p</i>(<i>r</i>)+<i>p</i>(&#x2dc;<i>r</i>)&#xb7;<i>PIr</i>(<i>f=R</i>);&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P</i><sub>r</sub>(<i>f=x&#x3c;R</i>)=<i>p</i>(&#x2dc;<i>r</i>)&#xb7;<i>PIr</i>(<i>f=x</i>);&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>PIr</i>(<i>f=x</i>)=Binomial(<i>x,R,p</i>(<i>m|&#x2dc;r</i>))&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0103" num="0102">Next, the process proceeds to block <b>1104</b>. At this point, the assumption of no more than one task per machine is removed by dividing rack r into sub-racks such that within each sub-rack, each machine therein runs an identical number of tasks.</p>
<p id="p-0104" num="0103">In block <b>1106</b>, the system determines, for each sub-rack, the probability of i tasks failing. In other words, the system changes the above computations of the probability density function PIr(f=x) to consider the situation where each failing machine brings down i tasks on each machine. Once the per sub-rack probability is obtained, discrete convolutions may be performed in block <b>1108</b> to add up all the per sub-rack probability density functions.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIGS. 12-13</figref> show exemplary scenarios of the above processes in blocks <b>1104</b> and <b>1106</b>. <figref idref="DRAWINGS">FIG. 12</figref> illustrates a rack <b>1201</b> that houses six machines: <b>1202</b>, <b>1204</b>, <b>1206</b>, <b>1208</b>, <b>1210</b> and <b>1212</b>. Each machine has one or more tasks scheduled to run and to consume the machine resources. For example, machine <b>1202</b> has task <b>1214</b>, task <b>1216</b> and task <b>1218</b>. Machine <b>1204</b> has task <b>1220</b> and <b>1222</b>, while task <b>1224</b>, <b>1226</b> and <b>1228</b> reside on machine <b>1206</b>. Machines <b>1208</b>, <b>1210</b> and <b>1212</b> have four, three and four tasks running thereon, respectively.</p>
<p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. 13</figref> shows a scenario <b>1300</b> where the rack <b>1201</b> is divided into three sub-racks: sub-rack <b>1</b>, sub-rack <b>2</b> and sub-rack <b>3</b>. Each sub-rack desirably houses machines with an identical number of tasks running thereon. After the division, sub-rack <b>1</b> houses the two-task machine <b>1204</b>, sub-rack <b>2</b> houses the three-task machines <b>1202</b> and <b>1210</b>, and sub-rack <b>3</b> houses the four-task machines <b>1206</b>, <b>1208</b> and <b>1212</b>. As such, the possible failure scenarios with each sub-rack can only bring down i&#xd7;R<sub>sub </sub>number of tasks. Here, i is the number of tasks running on each machine in the sub-rack and R<sub>sub </sub>is an integer number from 0 to the maximum number of machines on each sub-rack r<sub>sub</sub>. Specifically, in scenario <b>1300</b>, sub-rack <b>1</b> may only lose 0 or 2 number of tasks, and sub-rack <b>2</b> may only lose 0, 3 or 6 number of tasks. It is possible for sub-rack <b>3</b> to lose 0, 4, 8 or 12 number of tasks. Each of these probabilities follows a binomial distribution.</p>
<p id="p-0107" num="0106">With known failure probability of each independent machine p(m|&#x2dc;r), the probability density function that maps to the probability of losing x=i&#xd7;R<sub>sub </sub>number of tasks
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>P</i><sub>r</sub><sub><sub2>sub</sub2></sub>(<i>f=x</i>)&#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
may be easily obtained by finding the binomial distribution
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>PIr</i><sub>sub</sub>(<i>f=x</i>)=Binomial(<i>x,R</i><sub>sub</sub><i>,p</i>(<i>m|&#x2dc;r</i><sub>sub</sub>))&#x2003;&#x2003;(9)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
for each sub-rack r<sub>sub </sub>from sub-rack <b>1</b> to <b>3</b> with respective R<sub>sub </sub>number of machines.
</p>
<p id="p-0108" num="0107">As illustrated in <figref idref="DRAWINGS">FIG. 13</figref>, for sub-rack <b>1</b> where i=2 and R<sub>sub</sub>=1, the system calculates PIr<sub>sub1</sub>(f=0) and PIr<sub>sub1</sub>(f=2). For sub-rack <b>2</b> where i=3 and R<sub>sub</sub>=2, PIr<sub>sub2</sub>(f=0), PIr<sub>sub2</sub>(f=3) and PIr<sub>sub2</sub>(f=6) are obtained. For sub-rack <b>3</b> where i=4 and R<sub>sub</sub>=3, PIr<sub>sub3</sub>(f=0), PIr<sub>sub3</sub>(f=4), PIr<sub>sub3</sub>(f=8) and PIr<sub>sub3</sub>(f=12) are calculated.</p>
<p id="p-0109" num="0108">Once the probability distributions on a per-sub-rack basis are found, the probability density function P<sub>r</sub><sub><sub2>1201</sub2></sub>(f=x) for rack <b>1201</b> may be found by computing convolutions of the binomial distributions for all the sub-racks <b>1</b>-<b>3</b>. As it is not possible to lose a fraction of a task, the convolutions here are discrete convolutions.</p>
<p id="p-0110" num="0109">As the previous discussions regarding process <b>1000</b> in <figref idref="DRAWINGS">FIG. 10</figref> go, once the per-rack pdfs (probability density functions) are obtained, the assumption of a single rack is removed by performing convolutions on these pdfs to add up the per-rack probability density functions in a given cluster.</p>
<p id="p-0111" num="0110">Besides the probability that rack r fails and the probability that machine m fails but rack r does not, any other failure probabilities or correlations between the descheduling risks of the tasks and the failures of a particular network or cluster element may be used by the system to obtain the failure probability of x tasks on a given rack. In this regard, similar divisions of lower-level cluster elements housed on, or coupled with, a higher level cluster element may be performed such that the higher-level cluster element are divided into sub-elements, as discussed above with regard to scenarios <b>1200</b> and <b>1300</b>. For example, if the failure probability of a switch is to be employed in the calculations, a switch may be divided into sub-switches. In this example, each respective sub-switch is coupled with racks having an identical number of machines, and each rack may be further divided in a way similar to scenarios <b>1200</b> and <b>1300</b>. Thus, the failure probability of any cluster element on any hierarchy order in the cluster may be used by the risk management system. Although <figref idref="DRAWINGS">FIGS. 12 and 13</figref> illustrate a two-level hierarchy scenario that involves a machine level and a rack level, systems and methods according to aspects of the invention may involve further multi-level scenarios. In addition, the cluster elements are not limited to machines and racks.</p>
<p id="p-0112" num="0111">The system may also be refined to take into account of different failure probabilities for network or cluster elements of the same type. For example, different machines may have different failure probabilities and different racks or switches may also associate with different failure probabilities.</p>
<p id="p-0113" num="0112">It will be further understood that the sample values, types and configurations of data described and shown in the figures are for the purposes of illustration only. In that regard, systems and methods in accordance with aspects of the invention may include various types of computer clusters, networks, transmission devices, operation terminals, servers, data values, data types and configurations. The data may be provided and received at different times (e.g., via different servers or databases) and by different entities (e.g., some values may be pre-suggested or provided from different sources).</p>
<p id="p-0114" num="0113">As these and other variations and combinations of the features discussed above can be utilized without departing from the invention as defined by the claims, the foregoing description of exemplary embodiments should be taken by way of illustration rather than by way of limitation of the invention as defined by the claims. It will also be understood that the provision of examples of the invention (as well as clauses phrased as &#x201c;such as,&#x201d; &#x201c;e.g.&#x201d;, &#x201c;including&#x201d; and the like) should not be interpreted as limiting the invention to the specific examples; rather, the examples are intended to illustrate only some of many possible aspects.</p>
<p id="p-0115" num="0114">Unless expressly stated to the contrary, every feature in a given embodiment, alternative or example may be used in any other embodiment, alternative or example herein. For instance, any method for determining the per job stay-scheduled probability target may be employed in any configuration herein. Each way of monitoring or obtaining job/task execution status and cluster status may be used in any configuration herein. The risk management system may communicate with various cluster management entities in the cluster with any of the configurations herein. Various backup task optimization methods or iteration order to generate task signatures may be employed.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is: </us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method executable by a processor for allocating backup tasks to a plurality of tasks scheduled to run in a computer cluster, the method comprising:
<claim-text>classifying the plurality of scheduled tasks into one or more task groups based on one or more resource requirements associated with each task, each task group containing at least one of the scheduled tasks;</claim-text>
<claim-text>determining, for at least a respective one of the task groups, a number of backup tasks necessary to guarantee that the scheduled tasks of the respective task group satisfy a target probability for execution; and</claim-text>
<claim-text>the processor generating the backup tasks based on the determined number of backup tasks, where the generated backup tasks for the respective task group are all identical, and each generated backup task in the respective task group is configured such that it can replace any scheduled task in the respective task group,</claim-text>
<claim-text>wherein determining the number of backup tasks comprises:</claim-text>
<claim-text>calculating a probability of losing no more than all current backup tasks in a given one of the plurality of task groups;</claim-text>
<claim-text>comparing the calculated probability to the target probabilities for execution of the tasks in the task group;</claim-text>
<claim-text>in response to a comparison outcome indicating that the calculated probability is greater than or equal to all the target probabilities, adding one backup task to a class of the given task group and performing said steps of calculating and comparing again; and</claim-text>
<claim-text>in response to a comparison outcome indicating that the calculated probability is less than all the target probabilities, ceasing to add backup tasks to the given task group and performing said steps of calculating and comparing again.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer cluster includes first and second cluster elements, the first cluster element comprising a machine and the second cluster element comprising a rack that houses the machine.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining the number of backup tasks is based on at least one of a failure probability of the first cluster element and a failure probability of the second cluster element.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each scheduled task of the respective task group is linked with a job, and each job is associated with the target probability for execution of its linked task.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each task group contains tasks with identical resource requirements.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein one of the resource requirements for a selected one of the scheduled tasks is a memory range requirement.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer cluster includes a plurality of first computer cluster elements and a plurality of second computer cluster elements, the method further comprising:
<claim-text>receiving, from each scheduled task, a preference for execution by a given one of the plurality of the first computer cluster elements or a given one of the plurality of the second computer cluster elements, wherein the classification is performed based on the received preference.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>determining a first cost to create the backup tasks for the respective task group;</claim-text>
<claim-text>for each task group, determining a second cost to create additional backup tasks for a combination group that includes the respective task group, the determining the second cost being obtained by dividing the plurality of scheduled tasks and the respective task group;</claim-text>
<claim-text>comparing the first cost with the second cost;</claim-text>
<claim-text>creating the backup tasks for the respective task group in response to a comparison result indicating the first cost is less than the second cost; and</claim-text>
<claim-text>creating the additional backup tasks for the combination group in response to a comparison result indicating the first cost is larger than or equal to the second cost.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein calculating the probability of losing no more than all current backup tasks is based on at least one of a failure probability of a first cluster element in the cluster, a failure probability of a second cluster element in the cluster, and the number of current backup tasks in the given task group.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the cluster includes a plurality of first and second cluster elements, and calculating the probability of losing no more than all current backup tasks further comprises:
<claim-text>for each second cluster element used by the scheduled tasks in the given task group, dividing the second cluster elements into sub-second-elements, the sub-second elements each including one or more of the first cluster elements, and where each of the first cluster elements in each respective sub-second-element executes the same number of the scheduled tasks; and</claim-text>
<claim-text>for each sub-second-element, calculating a probability of losing no more than all the scheduled tasks therein based on a failure probability of the first cluster elements in the respective sub-second-element, the number of the first cluster elements in the respective sub-second element, and the number of the scheduled tasks in the respective sub-second-element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>monitoring task execution status and cluster status; and</claim-text>
<claim-text>performing modification or deletion of the backup tasks in the respective task group based on the monitoring.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer cluster includes first and second cluster elements, and the method further comprises estimating a failure probability of the first cluster element and a failure probability of the second cluster element; and
<claim-text>where a number of backup tasks necessary is determined based on the estimated failure probabilities.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein determining the number of backup
<claim-text>tasks is further based on a failure probability of a third cluster element in the computer cluster, the third cluster element comprising at least a cluster element other than the first and the second cluster elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where each scheduled task is associated with a target probability of execution; and
<claim-text>where the step of determining includes determining, for at least a respective one of the task groups, a number of backup tasks necessary to guarantee that all the scheduled tasks of the respective task group satisfy their associated target probabilities for execution.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system to generate backup tasks for a plurality of tasks scheduled to run in a computer cluster, the system comprising:
<claim-text>a memory; and</claim-text>
<claim-text>a processor coupled to the memory and configured to execute a set of instruction stored in the memory to:</claim-text>
<claim-text>classify the plurality of scheduled tasks into one or more task groups based on one or more resource requirements associated with each task, each scheduled task being associated with a target probability for execution, each scheduled task being executable by a first cluster element and a second cluster element, each task group containing at least one of the scheduled tasks;</claim-text>
<claim-text>determine, for at least a respective one of the task groups, a number of backup tasks necessary to guarantee that the scheduled tasks of the respective task group satisfy their associated target probabilities for execution; and</claim-text>
<claim-text>generate the backup tasks based on the determined number of backup tasks necessary, where the generated backup tasks for the respective task group are all identical, and each generated backup task in the respective task group is configured such that it can replace any scheduled task in the respective task group,</claim-text>
<claim-text>wherein the processor determines the number of backup tasks by iteratively executing the instructions for
<claim-text>calculating a probability of losing no more than all current backup tasks in a given one of the plurality of task groups;</claim-text>
<claim-text>comparing the calculated probability to the target probabilities for execution of the tasks in the task group;</claim-text>
<claim-text>in response to a comparison outcome indicating that the calculated probability is greater than or equal to all the target probabilities, adding one backup task to a class of the given task group and performing said steps of calculating and comparing again; and</claim-text>
<claim-text>in response to a comparison outcome indicating that the calculated probability is less than all the target probabilities, ceasing to add backup tasks to the given task group and performing said steps of calculating and comparing again.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein one of the resource requirements for a selected one of the scheduled tasks is a memory range requirement.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first cluster element comprises at least one of a plurality of machines and the second cluster element comprises at least one of a plurality of racks.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first cluster element comprises a plurality of the first cluster elements, the second cluster element comprises a plurality of
<claim-text>the second cluster elements, and the processor is further configured to:</claim-text>
<claim-text>receive, from each scheduled task, a preference for execution by a given one of the plurality of the first cluster elements or a given one of the plurality of the second cluster elements, wherein the classification is performed based on the received preference.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to:
<claim-text>determine a first cost to create the backup tasks for the respective task group, for each task group, determine a second cost to create additional backup tasks for a combination group that includes the respective task group, the determined second cost being obtained by dividing the plurality of scheduled tasks and the respective task group;</claim-text>
<claim-text>compare the first cost with the second cost;</claim-text>
<claim-text>create the backup tasks for the respective task group in response to a comparison result indicating the first cost is less than the second cost; and</claim-text>
<claim-text>create the additional backup tasks for the combination group in response to a comparison result indicating the first cost is larger than or equal to the second cost.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first cluster element comprises a plurality of first cluster elements, the second cluster element comprises a plurality of second cluster elements, and the processor is further configured to calculate a probability of losing no more than all current backup tasks in a given task group by:
<claim-text>for each second cluster element used by the scheduled tasks in the given task group, dividing the second cluster element into sub-second-elements, the sub-second elements each including one or more of the first cluster elements, and each of the first cluster elements in each respective sub-second-element executes the same number of the scheduled tasks; and</claim-text>
<claim-text>for each sub-second-element, calculating a probability of losing no more than all the scheduled tasks therein based on a failure probability of the first cluster elements in the respective sub-second-element, the number of the first cluster elements in the respective sub-second-element, and the number of the scheduled tasks in the respective sub-second-element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to:
<claim-text>monitor task execution status and cluster status; and</claim-text>
<claim-text>perform modification or deletion of the backup tasks in the respective task group based on the monitoring.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to estimate a failure probability of the first cluster element and a failure probability of the second cluster element.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to determine the number of backup tasks based on a failure probability of a third cluster element in the computer cluster, the third cluster element comprising at least a cluster element other than the first and the second cluster elements. </claim-text>
</claim>
</claims>
</us-patent-grant>

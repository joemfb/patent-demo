<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626959-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626959</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13224543</doc-number>
<date>20110902</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>200</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>710  8</main-classification>
</classification-national>
<invention-title id="d2e53">Discovery and configuration of new devices added via dynamic reconfiguration</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6336152</doc-number>
<kind>B1</kind>
<name>Richman et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7162554</doc-number>
<kind>B1</kind>
<name>Cole et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7203774</doc-number>
<kind>B1</kind>
<name>Zhou et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>710 17</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7864713</doc-number>
<kind>B2</kind>
<name>Ban</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>370256</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>710  8</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>5</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130060967</doc-number>
<kind>A1</kind>
<date>20130307</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ruzek</last-name>
<first-name>Gary Lee</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Schwendiman</last-name>
<first-name>Chris Alan</first-name>
<address>
<city>Round Rock</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ruzek</last-name>
<first-name>Gary Lee</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Schwendiman</last-name>
<first-name>Chris Alan</first-name>
<address>
<city>Round Rock</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Van Leeuwen &#x26; Van Leeuwen</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Talpis</last-name>
<first-name>Matthew B.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Lee</last-name>
<first-name>Chun-Kuan</first-name>
<department>2181</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An approach is provided in which a device is detected when it has been added to an operating system partition. The detecting occurs during a dynamic reconfiguration process, and the device is associated with a device type. A parent device is identified that corresponds to the added device. The identifying of the parent device is performed during the dynamic reconfiguration process and the identification of the parent device is based on the device type of the added device with the identified parent device corresponding to a parent device name. A unit address corresponding to the added device is retrieved and this retrieved unit address and the identified parent device name are passed to a configuration manager process. The added device is then configured based on the identified parent device name.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="245.28mm" wi="178.48mm" file="US08626959-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="158.75mm" wi="122.17mm" file="US08626959-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="200.24mm" wi="158.75mm" file="US08626959-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="245.11mm" wi="182.71mm" file="US08626959-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="238.25mm" wi="181.27mm" file="US08626959-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.59mm" wi="181.44mm" file="US08626959-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present disclosure relates to an approach to discover new devices added to a computer system through dynamic reconfiguration. More particularly, the present disclosure provides an approach that discovers and configures such devices.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">In some system environments, when new devices are added to a partition via Dynamic Reconfiguration (DR), the operating system (OS) executes code to discover these devices and configure them. Configuration may include, for example, loading a device driver and making the device available for use by applications. In the AIX&#x2122; operating system this is accomplished by running a particular command (the &#x201c;cfgmgr&#x201d; command). The drawback to executing this command is that it processes all device configuration methods to look for new devices. In partitions with a lot of devices, this can take a very long time (minutes to hours). This can result in a lengthy delay before the newly added device can be utilized by users and system applications.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">An approach is provided in which a device is detected when it has been added to an operating system partition. The detecting occurs during a dynamic reconfiguration process, and the device is associated with a device type. A parent device is identified that corresponds to the added device. The identifying of the parent device is performed during the dynamic reconfiguration process and the identification of the parent device is based on the device type of the added device with the identified parent device corresponding to a parent device name. A unit address corresponding to the added device is retrieved and this retrieved unit address and the identified parent device name are passed to a configuration manager process. The added device is then configured based on the identified parent device name.</p>
<p id="p-0005" num="0004">The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings, wherein:</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a data processing system in which the methods described herein can be implemented;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> provides an extension of the information handling system environment shown in <figref idref="DRAWINGS">FIG. 1</figref> to illustrate that the methods described herein can be performed on a wide variety of information handling systems which operate in a networked environment;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart showing steps taken to identify a device added to an operating system partition and to retrieve parent device data;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing steps taken by a configuration manager to execute a parent configuration method and identify child device data that matches the device added to the operating system partition; and</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing steps taken when matching child device data is identified and a child configuration method is obtained and invoked to configure the added device.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well-known details often associated with computing and software technology are not set forth in the following disclosure, however, to avoid unnecessarily obscuring the various embodiments of the invention. Further, those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally, while various methods are described with reference to steps and sequences in the following disclosure, the description as such is for providing a clear implementation of embodiments of the invention, and the steps and sequences of steps should not be taken as required to practice this invention. Instead, the following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention, which is defined by the claims that follow the description.</p>
<p id="p-0013" num="0012">The following detailed description will generally follow the summary of the invention, as set forth above, further explaining and expanding the definitions of the various aspects and embodiments of the invention as necessary. To this end, this detailed description first sets forth a computing environment in <figref idref="DRAWINGS">FIG. 1</figref> that is suitable to implement the software and/or hardware techniques associated with the invention. A networked environment is illustrated in <figref idref="DRAWINGS">FIG. 2</figref> as an extension of the basic computing environment, to emphasize that modern computing techniques can be performed across multiple discrete devices.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 1</figref> illustrates information handling system <b>100</b>, which is a simplified example of a computer system capable of performing the computing operations described herein. Information handling system <b>100</b> includes one or more processors <b>110</b> coupled to processor interface bus <b>112</b>. Processor interface bus <b>112</b> connects processors <b>110</b> to Northbridge <b>115</b>, which is also known as the Memory Controller Hub (MCH). Northbridge <b>115</b> connects to system memory <b>120</b> and provides a means for processor(s) <b>110</b> to access the system memory. Graphics controller <b>125</b> also connects to Northbridge <b>115</b>. In one embodiment, PCI Express bus <b>118</b> connects Northbridge <b>115</b> to graphics controller <b>125</b>. Graphics controller <b>125</b> connects to display device <b>130</b>, such as a computer monitor.</p>
<p id="p-0015" num="0014">Northbridge <b>115</b> and Southbridge <b>135</b> connect to each other using bus <b>119</b>. In one embodiment, the bus is a Direct Media Interface (DMI) bus that transfers data at high speeds in each direction between Northbridge <b>115</b> and Southbridge <b>135</b>. In another embodiment, a Peripheral Component Interconnect (PCI) bus connects the Northbridge and the Southbridge. Southbridge <b>135</b>, also known as the I/O Controller Hub (ICH) is a chip that generally implements capabilities that operate at slower speeds than the capabilities provided by the Northbridge. Southbridge <b>135</b> typically provides various busses used to connect various components. These busses include, for example, PCI and PCI Express busses, an ISA bus, a System Management Bus (SMBus or SMB), and/or a Low Pin Count (LPC) bus. The LPC bus often connects low-bandwidth devices, such as boot ROM <b>196</b> and &#x201c;legacy&#x201d; I/O devices (using a &#x201c;super I/O&#x201d; chip). The &#x201c;legacy&#x201d; I/O devices (<b>198</b>) can include, for example, serial and parallel ports, keyboard, mouse, and/or a floppy disk controller. The LPC bus also connects Southbridge <b>135</b> to Trusted Platform Module (TPM) <b>195</b>. Other components often included in Southbridge <b>135</b> include a Direct Memory Access (DMA) controller, a Programmable Interrupt Controller (PIC), and a storage device controller, which connects Southbridge <b>135</b> to nonvolatile storage device <b>185</b>, such as a hard disk drive, using bus <b>184</b>.</p>
<p id="p-0016" num="0015">ExpressCard <b>155</b> is a slot that connects hot-pluggable devices to the information handling system. ExpressCard <b>155</b> supports both PCI Express and USB connectivity as it connects to Southbridge <b>135</b> using both the Universal Serial Bus (USB) the PCI Express bus. Southbridge <b>135</b> includes USB Controller <b>140</b> that provides USB connectivity to devices that connect to the USB. These devices include webcam (camera) <b>150</b>, infrared (IR) receiver <b>148</b>, keyboard and trackpad <b>144</b>, and Bluetooth device <b>146</b>, which provides for wireless personal area networks (PANs). USB Controller <b>140</b> also provides USB connectivity to other miscellaneous USB connected devices <b>142</b>, such as a mouse, removable nonvolatile storage device <b>145</b>, modems, network cards, ISDN connectors, fax, printers, USB hubs, and many other types of USB connected devices. While removable nonvolatile storage device <b>145</b> is shown as a USB-connected device, removable nonvolatile storage device <b>145</b> could be connected using a different interface, such as a Firewire interface, etcetera.</p>
<p id="p-0017" num="0016">Wireless Local Area Network (LAN) device <b>175</b> connects to Southbridge <b>135</b> via the PCI or PCI Express bus <b>172</b>. LAN device <b>175</b> typically implements one of the IEEE .802.11 standards of over-the-air modulation techniques that all use the same protocol to wireless communicate between information handling system <b>100</b> and another computer system or device. Optical storage device <b>190</b> connects to Southbridge <b>135</b> using Serial ATA (SATA) bus <b>188</b>. Serial ATA adapters and devices communicate over a high-speed serial link. The Serial ATA bus also connects Southbridge <b>135</b> to other forms of storage devices, such as hard disk drives. Audio circuitry <b>160</b>, such as a sound card, connects to Southbridge <b>135</b> via bus <b>158</b>. Audio circuitry <b>160</b> also provides functionality such as audio line-in and optical digital audio in port <b>162</b>, optical digital output and headphone jack <b>164</b>, internal speakers <b>166</b>, and internal microphone <b>168</b>. Ethernet controller <b>170</b> connects to Southbridge <b>135</b> using a bus, such as the PCI or PCI Express bus. Ethernet controller <b>170</b> connects information handling system <b>100</b> to a computer network, such as a Local Area Network (LAN), the Internet, and other public and private computer networks.</p>
<p id="p-0018" num="0017">While <figref idref="DRAWINGS">FIG. 1</figref> shows one information handling system, an information handling system may take many forms. For example, an information handling system may take the form of a desktop, server, portable, laptop, notebook, or other form factor computer or data processing system. In addition, an information handling system may take other form factors such as a personal digital assistant (PDA), a gaming device, ATM machine, a portable telephone device, a communication device or other devices that include a processor and memory.</p>
<p id="p-0019" num="0018">The Trusted Platform Module (TPM <b>195</b>) shown in <figref idref="DRAWINGS">FIG. 1</figref> and described herein to provide security functions is but one example of a hardware security module (HSM). Therefore, the TPM described and claimed herein includes any type of HSM including, but not limited to, hardware security devices that conform to the Trusted Computing Groups (TCG) standard, and entitled &#x201c;Trusted Platform Module (TPM) Specification Version 1.2.&#x201d; The TPM is a hardware security subsystem that may be incorporated into any number of information handling systems, such as those outlined in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> provides an extension of the information handling system environment shown in <figref idref="DRAWINGS">FIG. 1</figref> to illustrate that the methods described herein can be performed on a wide variety of information handling systems that operate in a networked environment. Types of information handling systems range from small handheld devices, such as handheld computer/mobile telephone <b>210</b> to large mainframe systems, such as mainframe computer <b>270</b>. Examples of handheld computer <b>210</b> include personal digital assistants (PDAs), personal entertainment devices, such as MP3 players, portable televisions, and compact disc players. Other examples of information handling systems include pen, or tablet, computer <b>220</b>, laptop, or notebook, computer <b>230</b>, workstation <b>240</b>, personal computer system <b>250</b>, and server <b>260</b>. Other types of information handling systems that are not individually shown in <figref idref="DRAWINGS">FIG. 2</figref> are represented by information handling system <b>280</b>. As shown, the various information handling systems can be networked together using computer network <b>200</b>. Types of computer network that can be used to interconnect the various information handling systems include Local Area Networks (LANs), Wireless Local Area Networks (WLANs), the Internet, the Public Switched Telephone Network (PSTN), other wireless networks, and any other network topology that can be used to interconnect the information handling systems. Many of the information handling systems include nonvolatile data stores, such as hard drives and/or nonvolatile memory. Some of the information handling systems shown in <figref idref="DRAWINGS">FIG. 2</figref> depicts separate nonvolatile data stores (server <b>260</b> utilizes nonvolatile data store <b>265</b>, mainframe computer <b>270</b> utilizes nonvolatile data store <b>275</b>, and information handling system <b>280</b> utilizes nonvolatile data store <b>285</b>). The nonvolatile data store can be a component that is external to the various information handling systems or can be internal to one of the information handling systems. In addition, removable nonvolatile storage device <b>145</b> can be shared among two or more information handling systems using various techniques, such as connecting the removable nonvolatile storage device <b>145</b> to a USB port or other connector of the information handling systems.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart showing steps taken to identify a device added to an operating system partition and to retrieve parent device data. Processing commences at <b>300</b> whereupon, at step <b>310</b>, the process makes the newly added device available to the partition by including data pertaining to the newly added device to the device tree. At step <b>320</b>, the resource type of the newly added device is checked. At step <b>325</b>, the dynamic reconfiguration process identifies the parent device based on the type of device that was added to the system. The parent device data is then retrieved from Object Data Manager (ODM) data store <b>330</b>.</p>
<p id="p-0022" num="0021">A decision is made as to whether the added device type is a &#x201c;slot&#x201d; device (decision <b>340</b>). If the newly added device has a device type indicating that the device is a slot device, then decision <b>340</b> branches to the &#x201c;yes&#x201d; branch whereupon, at step <b>345</b>, the parent of the newly added device is deemed to be the system bus (e.g., sysplanar0, etc.).</p>
<p id="p-0023" num="0022">On the other hand, if the added device type does not indicate that the added device is a slot device, then decision <b>340</b> branches to the &#x201c;no&#x201d; branch whereupon a decision is made as to whether the device's type indicates that the device is a virtual slot device (decision <b>350</b>). If the newly added device has a device type indicating that the device is a virtual slot device, then decision <b>350</b> branches to the &#x201c;yes&#x201d; branch whereupon, at step <b>355</b>, the parent of the newly added device is deemed to be a virtual bus (e.g., vio0, etc.).</p>
<p id="p-0024" num="0023">On the other hand, if the added device type does not indicate that the added device is a virtual slot device, then decision <b>350</b> branches to the &#x201c;no&#x201d; branch whereupon a decision is made as to whether the device's type indicates that the device is a PCI hot plug slot device (decision <b>360</b>). If the newly added device has a device type indicating that the device is a PCI hot plug slot device, then decision <b>360</b> branches to the &#x201c;yes&#x201d; branch whereupon, at step <b>365</b>, the parent of the newly added device is deemed to be the PCI bus that corresponds to the slot where the newly added device was added to the system.</p>
<p id="p-0025" num="0024">After the parent device has been identified as discussed in steps <b>325</b> through <b>365</b>, the unit address of the newly added device is extracted from the device tree. At predefined process <b>380</b>, the identified parent device and the retrieved unit address are used by the configuration manager to configure the newly added device (see <figref idref="DRAWINGS">FIG. 4</figref> and corresponding text for processing details).</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing steps taken by a configuration manager to execute a parent configuration method and identify child device data that matches the device added to the operating system partition. This configuration manager process is called by predefined process <b>380</b> in the flowchart shown on <figref idref="DRAWINGS">FIG. 3</figref>. In <figref idref="DRAWINGS">FIG. 4</figref>, the configuration manager process is shown commencing at <b>400</b> whereupon, at step <b>405</b>, the configuration manager is invoked by providing the unit address and parent name of the device that is being added to the system. For example, using a command with parameters such as &#x201c;cfgmgr-l &#x3c;parent_name&#x3e;-c &#x3c;unit_address&#x3e;-r&#x201d;, etc., where &#x3c;parent_name&#x3e; is the name (identifier) of the parent device and &#x3c;unit_address&#x3e; is the unit address that corresponds to the newly added device.</p>
<p id="p-0027" num="0026">At step <b>410</b>, object data manager (ODM) data that corresponds to the parent device (&#x3c;parent_name&#x3e;) is retrieved from ODM data store <b>330</b>. The ODM data identifies a configuration method that corresponds to the parent device. At step <b>415</b>, the identified configure method is invoked, as shown in device configure method <b>420</b>. Device configure method <b>420</b>, in this case configuring the parent device, commences at <b>425</b> with the invocation being to configure the parent (&#x3c;parent_name&#x3e;) device. At step <b>430</b>, the configure method identifies (finds) child devices that correspond to the parent device. At step <b>435</b>, data pertaining to the identified child devices are added to ODM data store <b>330</b> if such child device data is not yet stored in the ODM data store. At step <b>440</b>, the parent configure method returns a list of one or more child device names to the configuration manager process.</p>
<p id="p-0028" num="0027">At step <b>450</b>, the configuration manager process receives the child device names returned from the parent device configure method and, at step <b>455</b>, the received child device names are parsed. At step <b>470</b>, the first returned child device name is selected. At step <b>475</b>, ODM data pertaining to the selected child device name is retrieved from ODM data store <b>330</b>. The data pertaining to the child device includes the child device address and the configure method that is used to configure the child device. At step <b>480</b>, the child device address from the ODM data is compared with the unit address of the newly added device. In one embodiment, the unit address of the newly added device was provided to the configuration manager as an argument when the configuration manager was invoked.</p>
<p id="p-0029" num="0028">A decision is made as to whether the child device address from the ODM data for the selected child device matches the unit address of the newly added device (decision <b>485</b>). If the addresses do not match, then decision <b>485</b> branches to the &#x201c;no&#x201d; branch whereupon a decision is made as to whether there are additional device names to process (decision <b>490</b>). If there are more device names to process, then decision <b>490</b> branches to the &#x201c;yes&#x201d; branch which loops back to select the next child device name (step <b>470</b>) and process it as outlined above. If there are no more child device names to process, then decision <b>490</b> branches to the &#x201c;no&#x201d; branch whereupon processing returns at <b>499</b>. Returning to decision <b>485</b>, if the child device address from the ODM data for the selected child device name matches the unit address of the newly added device, then decision <b>485</b> branches to the &#x201c;yes&#x201d; branch whereupon, at predefined process <b>495</b>, the match is handled (see <figref idref="DRAWINGS">FIG. 5</figref> and corresponding text for processing details) after which processing returns at <b>499</b>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing steps taken when matching child device data is identified and a child configuration method is obtained and invoked to configure the added device. Processing commences at <b>500</b> whereupon, at step <b>515</b>, the process invokes the configure method pertaining to the newly added device, the process being retrieved from ODM data store <b>330</b> as shown and described in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0031" num="0030">Device configure method <b>520</b>, in this case configuring the child device, commences at <b>525</b> with the invocation being to configure the newly added device (&#x3c;name&#x3e;). At step <b>530</b>, the configure method identifies (finds) any child devices that correspond to the newly added device. At step <b>535</b>, data pertaining to the identified child devices are added to ODM data store <b>330</b> if such child device data is not yet stored in the ODM data store. At step <b>540</b>, the configure method returns a list of one or more child device names to the configuration manager process with each of the child devices being children of the newly added device.</p>
<p id="p-0032" num="0031">At step <b>550</b>, the configuration manager process receives the child device names returned from the configure method corresponding to the newly added device and, at step <b>555</b>, the received child device names are parsed. A decision is made as to whether there are any child device names that pertain to the newly added device (decision <b>560</b>). If there are no child devices that pertain to the newly added device, then decision <b>560</b> branches to the &#x201c;no&#x201d; branch whereupon processing returns to the calling routine at <b>565</b>.</p>
<p id="p-0033" num="0032">On the other hand, if there are child devices pertaining to the newly added device, decision <b>560</b> branches to the &#x201c;yes&#x201d; branch whereupon, at step <b>570</b>, the first returned child device name is selected. At step <b>575</b>, ODM data pertaining to the selected child device name is retrieved from ODM data store <b>330</b>. The data pertaining to the child device includes the child device address and the configure method that is used to configure the child device. At step <b>580</b>, the child device address from the ODM data is compared with the unit address of the newly added device. In one embodiment, the unit address of the newly added device was provided to the configuration manager as an argument when the configuration manager was invoked.</p>
<p id="p-0034" num="0033">A decision is made as to whether the child device address from the ODM data for the selected child device matches the unit address of the newly added device (decision <b>585</b>). If the addresses do not match, then decision <b>585</b> branches to the &#x201c;no&#x201d; branch whereupon a decision is made as to whether there are additional device names to process (decision <b>590</b>). If there are more device names to process, then decision <b>590</b> branches to the &#x201c;yes&#x201d; branch which loops back to select the next child device name (step <b>570</b>) and process it as outlined above. If there are no more child device names to process, then decision <b>590</b> branches to the &#x201c;no&#x201d; branch whereupon processing returns at <b>599</b>. Returning to decision <b>585</b>, if the child device address from the ODM data for the selected child device name matches the unit address of the newly added device, then decision <b>585</b> branches to the &#x201c;yes&#x201d; branch whereupon, at predefined process <b>595</b>, the match is recursively handled using the routine shown in <figref idref="DRAWINGS">FIG. 5</figref> (with the routine now identifying child devices of the selected child device). The routine shown in <figref idref="DRAWINGS">FIG. 5</figref> can then be recursively called by successive generations of child devices. When processing of the child device is complete, processing returns at <b>599</b>.</p>
<p id="p-0035" num="0034">One of the preferred implementations of the invention is a client application, namely, a set of instructions (program code) or other functional descriptive material in a code module that may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive). Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes, but is not limited to, computer programs, instructions, rules, facts, definitions of computable functions, objects, and data structures.</p>
<p id="p-0036" num="0035">While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, that changes and modifications may be made without departing from this invention and its broader aspects. Therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an&#x201d;; the same holds true for the use in the claims of definite articles.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method comprising:
<claim-text>detecting that a device has been added to an operating system partition, wherein the detecting occurs during a dynamic reconfiguration process, and wherein the device is associated with a device type;</claim-text>
<claim-text>identifying a parent device that corresponds to the added device, wherein the identifying is performed during the dynamic reconfiguration process, wherein the identified parent device is based on the device type of the device, and wherein the identified parent device corresponds with a parent device name;</claim-text>
<claim-text>retrieving a unit address corresponding to the added device;</claim-text>
<claim-text>passing the retrieved unit address and the identified parent device name to a configuration manager process; and</claim-text>
<claim-text>configuring the added device based on the identified parent device name.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the parent device name is a system bus in response to the device type being a slot device, wherein the parent device name is a virtual bus in response to the device type being a virtual slot device, and wherein, in response to the device type being a PCI hot plug slot, the parent device name is a PCI bus that corresponds to a slot where the device was added.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>making the added device available to processes by including the added device in a system device tree;</claim-text>
<claim-text>checking a resource type of the added device; and</claim-text>
<claim-text>retrieving parent device data corresponding to the identified parent device name from an object data manager.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising:
<claim-text>obtaining a parent configuration method from the retrieved parent device data, wherein the configuring of the added device includes invoking the obtained parent configuration method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> further comprising:
<claim-text>executing the obtained parent configuration method in response to the invoking;</claim-text>
<claim-text>receiving one or more child device names in response to the execution of the obtained parent configuration method;</claim-text>
<claim-text>retrieving a plurality of child device name data corresponding to one or more of the child device names, wherein the child device name data includes a child device address and a child device configuration method;</claim-text>
<claim-text>identifying one of the child device addresses included in the child device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a child configuration method from the child device name data that corresponds to the identified child device address, wherein the configuring of the added device includes invoking the obtained child configuration method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> wherein the executing, receiving, retrieving, identifying, and obtaining steps are recursively repeated for one or more additional levels of child devices.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:
<claim-text>executing the obtained child configuration method in response to the invoking;</claim-text>
<claim-text>receiving one or more grandchild device names in response to the execution of the obtained child configuration method;</claim-text>
<claim-text>retrieving a plurality of grandchild device name data corresponding to one or more of the grandchild device names, wherein the grandchild device name data includes a grandchild device address and a grandchild device configuration method;</claim-text>
<claim-text>identifying one of the grandchild device addresses included in the grandchild device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a grandchild configuration method from the grandchild device name data that corresponds to the identified grandchild device address, wherein the configuring of the added device includes invoking the obtained grandchild configuration method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An information handling system comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>a memory coupled to at least one of the processors;</claim-text>
<claim-text>an operating system stored in the memory and executed by one or more of the processors, wherein the operating system includes one or more partitions; and</claim-text>
<claim-text>a set of instructions stored in the memory and executed by at least one of the processors in order to perform actions of:
<claim-text>detecting that a device has been added to the operating system partition, wherein the detecting occurs during a dynamic reconfiguration process, and wherein the device is associated with a device type;</claim-text>
<claim-text>identifying a parent device that corresponds to the added device, wherein the identifying is performed during the dynamic reconfiguration process, wherein the identified parent device is based on the device type of the device, and wherein the identified parent device corresponds with a parent device name;</claim-text>
<claim-text>retrieving a unit address corresponding to the added device;</claim-text>
<claim-text>passing the retrieved unit address and the identified parent device name to a configuration manager process; and</claim-text>
<claim-text>configuring the added device based on the identified parent device name.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The information handling system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the parent device name is a system bus in response to the device type being a slot device, wherein the parent device name is a virtual bus in response to the device type being a virtual slot device, and wherein, in response to the device type being a PCI hot plug slot, the parent device name is a PCI bus that corresponds to a slot where the device was added.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The information handling system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the set of instructions performs additional actions comprising:
<claim-text>making the added device available to processes by including the added device in a system device tree;</claim-text>
<claim-text>checking a resource type of the added device; and</claim-text>
<claim-text>retrieving parent device data corresponding to the identified parent device name from an object data manager.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The information handling system of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the set of instructions performs additional actions comprising:
<claim-text>obtaining a parent configuration information handling system from the retrieved parent device data, wherein the configuring of the added device includes invoking the obtained parent configuration information handling system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The information handling system of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the set of instructions performs additional actions comprising:
<claim-text>executing the obtained parent configuration information handling system in response to the invoking;</claim-text>
<claim-text>receiving one or more child device names in response to the execution of the obtained parent configuration information handling system;</claim-text>
<claim-text>retrieving a plurality of child device name data corresponding to one or more of the child device names, wherein the child device name data includes a child device address and a child device configuration information handling system;</claim-text>
<claim-text>identifying one of the child device addresses included in the child device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a child configuration information handling system from the child device name data that corresponds to the identified child device address, wherein the configuring of the added device includes invoking the obtained child configuration information handling system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The information handling system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the executing, receiving, retrieving, identifying, and obtaining steps are recursively repeated for one or more additional levels of child devices.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The information handling system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the set of instructions performs additional actions comprising:
<claim-text>executing the obtained child configuration method in response to the invoking;</claim-text>
<claim-text>receiving one or more grandchild device names in response to the execution of the obtained child configuration method;</claim-text>
<claim-text>retrieving a plurality of grandchild device name data corresponding to one or more of the grandchild device names, wherein the grandchild device name data includes a grandchild device address and a grandchild device configuration method;</claim-text>
<claim-text>identifying one of the grandchild device addresses included in the grandchild device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a grandchild configuration method from the grandchild device name data that corresponds to the identified grandchild device address, wherein the configuring of the added device includes invoking the obtained grandchild configuration method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product stored in a computer memory, comprising functional descriptive material that, when executed by an information handling system, causes the information handling system to perform actions that include:
<claim-text>detecting that a device has been added to an operating system partition, wherein the detecting occurs during a dynamic reconfiguration process, and wherein the device is associated with a device type;</claim-text>
<claim-text>identifying a parent device that corresponds to the added device, wherein the identifying is performed during the dynamic reconfiguration process, wherein the identified parent device is based on the device type of the device, and wherein the identified parent device corresponds with a parent device name;</claim-text>
<claim-text>retrieving a unit address corresponding to the added device;</claim-text>
<claim-text>passing the retrieved unit address and the identified parent device name to a configuration manager process; and</claim-text>
<claim-text>configuring the added device based on the identified parent device name.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the parent device name is a system bus in response to the device type being a slot device, wherein the parent device name is a virtual bus in response to the device type being a virtual slot device, and wherein, in response to the device type being a PCI hot plug slot, the parent device name is a PCI bus that corresponds to a slot where the device was added.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein the actions further comprise:
<claim-text>making the added device available to processes by including the added device in a system device tree;</claim-text>
<claim-text>checking a resource type of the added device; and</claim-text>
<claim-text>retrieving parent device data corresponding to the identified parent device name from an object data manager.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the actions further comprise:
<claim-text>obtaining a parent configuration computer program product from the retrieved parent device data, wherein the configuring of the added device includes invoking the obtained parent configuration computer program product.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the actions further comprise:
<claim-text>executing the obtained parent configuration computer program product in response to the invoking;</claim-text>
<claim-text>receiving one or more child device names in response to the execution of the obtained parent configuration computer program product;</claim-text>
<claim-text>retrieving a plurality of child device name data corresponding to one or more of the child device names, wherein the child device name data includes a child device address and a child device configuration computer program product;</claim-text>
<claim-text>identifying one of the child device addresses included in the child device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a child configuration computer program product from the child device name data that corresponds to the identified child device address, wherein the configuring of the added device includes invoking the obtained child configuration computer program product.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the actions further comprise:
<claim-text>executing the obtained child configuration method in response to the invoking;</claim-text>
<claim-text>receiving one or more grandchild device names in response to the execution of the obtained child configuration method;</claim-text>
<claim-text>retrieving a plurality of grandchild device name data corresponding to one or more of the grandchild device names, wherein the grandchild device name data includes a grandchild device address and a grandchild device configuration method;</claim-text>
<claim-text>identifying one of the grandchild device addresses included in the grandchild device name data that matches the unit address that corresponds to the added device; and</claim-text>
<claim-text>obtaining a grandchild configuration method from the grandchild device name data that corresponds to the identified grandchild device address, wherein the configuring of the added device includes invoking the obtained grandchild configuration method. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625895-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625895</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12414365</doc-number>
<date>20090330</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1318</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>34</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382173</main-classification>
<further-classification>382195</further-classification>
</classification-national>
<invention-title id="d2e53">Table grid detection and separation</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5923782</doc-number>
<kind>A</kind>
<name>Chhabra et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6360006</doc-number>
<kind>B1</kind>
<name>Wang</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6711292</doc-number>
<kind>B2</kind>
<name>Wang</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382199</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7069240</doc-number>
<kind>B2</kind>
<name>Spero et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>51</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382173</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382176</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382190</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382195</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382204</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382245</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382257</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382258</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382286</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>22</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100246958</doc-number>
<kind>A1</kind>
<date>20100930</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ma</last-name>
<first-name>Huanfeng</first-name>
<address>
<city>Drexel Hill</city>
<state>PA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ma</last-name>
<first-name>Huanfeng</first-name>
<address>
<city>Drexel Hill</city>
<state>PA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Woodcock Washburn LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>The Neat Company, Inc.</orgname>
<role>02</role>
<address>
<city>Philadelphia</city>
<state>PA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tran</last-name>
<first-name>Phuoc</first-name>
<department>2668</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A technique is described for table grid detection and separation during the analysis and recognition of documents containing table contents. The technique includes the steps of table detection, grid separation, and table cell extraction. The technique is characterized by the steps of detecting the grid lines of a table using, for example, inverse cell detection, separating noise and touching text from the grid lines, and extracting the cell contents for OCR recognition.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="242.40mm" wi="111.08mm" file="US08625895-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="222.25mm" wi="143.00mm" orientation="landscape" file="US08625895-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="252.05mm" wi="151.98mm" file="US08625895-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="83.31mm" wi="111.08mm" file="US08625895-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="228.77mm" wi="146.22mm" file="US08625895-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="62.48mm" wi="171.53mm" file="US08625895-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="77.22mm" wi="169.50mm" file="US08625895-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="247.14mm" wi="172.38mm" file="US08625895-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="62.48mm" wi="137.08mm" file="US08625895-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="82.89mm" wi="194.06mm" file="US08625895-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="165.44mm" wi="157.23mm" file="US08625895-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="232.41mm" wi="160.95mm" file="US08625895-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="222.25mm" wi="157.65mm" file="US08625895-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="62.99mm" wi="146.39mm" file="US08625895-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="185.84mm" wi="164.59mm" file="US08625895-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="121.75mm" wi="172.80mm" file="US08625895-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="134.79mm" wi="135.21mm" file="US08625895-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="199.31mm" wi="167.05mm" file="US08625895-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="182.20mm" wi="160.95mm" file="US08625895-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The invention relates to analyzing and recognizing the content of scanned documents and, more particularly, to techniques for analyzing and recognizing the contents of tables within scanned documents.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">Reading table content plays a very important role in parsing documents that contain table contents. Such documents can be invoices, bills, shipping receipts, medical or insurance claim forms, financial spread sheets, and the like. Considering the large variations of table designs on these documents, providing a correct reading order that helps the parsing of document content is a challenging task. Reading tables from document images, especially when the images have skewing or handwriting, is even more challenging. The technique described herein addresses these issues by providing a methodology for detecting and separating table grids from scanned document images.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0004" num="0003">A technique is provided for scanning invoice images and other documents with tables in order to detect tables and their contents, extract inverse and regular table cells, separate noise, graphics or handwriting from the table grid, and separate touching texts from the table grid. Although the techniques described herein were initially designed for processing invoice document images in an exemplary embodiment, those skilled in the art will appreciate that the techniques described herein may be readily applied to extract the contents of other types of tables of other types of documents as desired.</p>
<p id="p-0005" num="0004">In particular, the invention encompasses methods, systems, and computer readable media storing instructions for implementing on a processor a method for detecting a table grid in a received digital document and extracting the table grid from the received digital document. In an exemplary embodiment, the technique includes extracting connected components from the received digital document to identify table grid candidates, extracting inverse cells from the table grid candidates, extracting grid line components from the table grid candidates, validating that the grid line components belong to a table grid, and extracting regular cells from the validated grid line components. An exemplary embodiment of the method also includes separating noise, graphics, handwriting, and/or touching text from the validated grid line components.</p>
<p id="p-0006" num="0005">In an exemplary embodiment, extracting inverse cells from the table grid candidates comprises generating a binary image from connected components by assigning white background and assigning all pixels in the connected components a black value, and applying a smearing operation to the generated binary image in both the horizontal and vertical directions. White holes in the connected components that are smaller than a predetermined size also may be filled with black pixels, and horizontal and vertical short runs having lengths less than a predetermined threshold may be removed by setting pixels in the short runs to white color. Extracting inverse cells from the table grid candidates may also include removing all black connected components in the binary image and validating whether each connected component may be an inverse cell. The validation includes, for each extracted component with perimeter S, width w<sub>c</sub>, height h<sub>c </sub>and pixel number N<sub>p</sub>, calculating the rectangularity degree D<sub>rect </sub>of this connected component as follows:</p>
<p id="p-0007" num="0006">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>D</mi>
      <mi>rect</mi>
    </msub>
    <mo>=</mo>
    <mrow>
      <mi>min</mi>
      <mo>(</mo>
      <mrow>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <msub>
              <mi>w</mi>
              <mi>c</mi>
            </msub>
            <mo>&#xb7;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <mfrac>
              <mrow>
                <mi>S</mi>
                <mo>-</mo>
                <mrow>
                  <mn>2</mn>
                  <mo>&#x2062;</mo>
                  <mstyle>
                    <mspace width="0.3em" height="0.3ex"/>
                  </mstyle>
                  <mo>&#x2062;</mo>
                  <mrow>
                    <mi>min</mi>
                    <mo>&#x2061;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <msub>
                          <mi>w</mi>
                          <mi>c</mi>
                        </msub>
                        <mo>,</mo>
                        <msub>
                          <mi>h</mi>
                          <mi>c</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
              </mrow>
              <mn>2</mn>
            </mfrac>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>min</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>w</mi>
                    <mi>c</mi>
                  </msub>
                  <mo>,</mo>
                  <msub>
                    <mi>h</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mfrac>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<br/>
and determining that the connected component is a valid inverse cell component if the rectangularity degree D<sub>rect </sub>is larger than a predefined threshold. Validating whether each connected component may be an inverse cell also includes computing the variance V<sub>r </sub>of the lengths of all runs in the connected component as follows:
</p>
<p id="p-0008" num="0007">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>V</mi>
    <mi>r</mi>
  </msub>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>horizontal</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <msub>
                <mi>w</mi>
                <mi>c</mi>
              </msub>
            </mrow>
            <mo>&#x3c;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>vertical</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mi>Otherwise</mi>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where var(.) is an operator to compute the variance of an integer sequence, and determining that a connected component is an inverse cell component if V<sub>r </sub>is less than a threshold.
</p>
<p id="p-0009" num="0008">In exemplary embodiments, extracting grid line components from the table grid candidates includes determining that any horizontal run or vertical run of pixels in the connected components not smaller than a threshold is part of a table grid.</p>
<p id="p-0010" num="0009">On the other hand, validating the grid line components as belonging to a table grid may be done by determining whether the grid line components satisfy one or more of the following tests:</p>
<p id="p-0011" num="0010">(1) determining whether the density D of a connected component is greater than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component, computing the ratio R<sub>t </sub>between the number of inverse cell component pixels and the number of the original connected component pixels, and determining that the grid line components belong to a table grid containing inverse cells if R<sub>t </sub>is greater than a second threshold;</p>
<p id="p-0012" num="0011">(2) determining whether the density D of a connected component is less than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component, and determining that the grid line components belong to a table grid if D is less than the threshold;</p>
<p id="p-0013" num="0012">(3) determining whether every line component of the grid line components is long enough and large enough to be part of a table grid based on the width and height of each connected component of the grid line components;</p>
<p id="p-0014" num="0013">(4) checking the number of horizontal and vertical grid line components and when the number is greater than a predetermined number, identifying four margin lines that are two horizontal lines with minimum and maximum Y coordinates and two vertical lines with minimum and maximum X coordinates, and determining that the grid line components are part of a round-corner grid when (1) the sum of the lengths of the four margin lines S<sub>l </sub>is greater than or equal to a&#xb7;S, where a is a value between 0 and 1 and S is the perimeter of an original table grid comprising a round-corner rectangle where S is defined as two times the width plus height of the connected components of the original table grid, and (2) the area A<sub>l </sub>of the table grid formed by the grid line components is greater than or equal to a&#xb7;A, where A is the area of the original table grid defined as width times the height of the original table grid;</p>
<p id="p-0015" num="0014">(5) identifying the two longest horizontal lines and two longest vertical lines of the grid line components with a length tolerance T<sub>t</sub>, identifying two horizontal margins as the longest horizontal line with length L<sub>h </sub>from horizontal grid line components, getting all horizontal grid lines with length larger than L<sub>h</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>h</sub>, and from G<sub>h</sub>, taking the line with the minimum Y coordinate as the top margin and the line with the maximum Y coordinate as the bottom margin, identifying two vertical margins as the longest vertical line with length L<sub>v </sub>from vertical grid line components, getting all vertical grid lines with length larger than L<sub>v</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>v </sub>and from G<sub>v</sub>, taking the line with the minimum X coordinate as the left margin and the line with the maximum X coordinate as the right margin, calculating the distance between the left and right margins, the distance between the top and bottom margins, the position difference between end points of the left and right margins, the position difference between end points of the top and bottom margins, the height difference between the left and right margins, and the width difference between the top and bottom margins, and validating the grid line components if each of the following tests is satisfied:</p>
<p id="p-0016" num="0015">every pair of margins has the same length,</p>
<p id="p-0017" num="0016">every pair of margins is at the same level,</p>
<p id="p-0018" num="0017">there exists at least one thin margin,</p>
<p id="p-0019" num="0018">the left and right margins are parallel,</p>
<p id="p-0020" num="0019">the top and bottom margins are parallel, and</p>
<p id="p-0021" num="0020">the table grid is large enough;</p>
<p id="p-0022" num="0021">(6) determining that the table grid comprises an open table defined as a table grid with only top and bottom margins and one or multiple vertical separator lines by computing the distance between the top and bottom margins, the position difference between end points of the top and bottom margins, and the width difference between the top and bottom margins and validating the grid line components if each of the following tests is satisfied:</p>
<p id="p-0023" num="0022">there exists at least one vertical separator line,</p>
<p id="p-0024" num="0023">the top and bottom margins have the same length,</p>
<p id="p-0025" num="0024">the top and bottom margins are at the same level,</p>
<p id="p-0026" num="0025">both the top and bottom margins are thin margins,</p>
<p id="p-0027" num="0026">the top and bottom margins are parallel, and</p>
<p id="p-0028" num="0027">the table grid is large enough; and</p>
<p id="p-0029" num="0028">(7) validating a single-cell by generating a binary image from the original connected components, adding a black bounding box to the binary image, extracting all white holes from the image to get the hole with a maximum area A<sub>max</sub>, and validating the grid line components if the hole with the maximum area has an area that is at least a predetermined percentage of the total area of the original connected components.</p>
<p id="p-0030" num="0029">In exemplary embodiments of the invention, separating noise, graphics, handwriting, and/or touching text from validated grid line components comprises initializing the table grid by merging all inverse cell components into one single connected component, merging all horizontal and vertical black connected components that are connected with the table grid to the table grid to identify short grid lines shorter than a threshold and all remaining connected components that are not connected with an inverse cell component. The short grid lines and the connected components that are not connected with an inverse cell component may then be classified by, for each connected component C:</p>
<p id="p-0031" num="0030">merging C to a final table grid CC<sub>F </sub>if C is a short line and connected with CC<sub>F</sub>;</p>
<p id="p-0032" num="0031">adding C to a group of all remaining black connected components if C is a short line but is not connected with CC<sub>F</sub>;</p>
<p id="p-0033" num="0032">adding C the group of all remaining black connected components if C is not a short line but connected to at least one component in the group of all remaining black connected components; and</p>
<p id="p-0034" num="0033">merging C to CC<sub>F </sub>if C is not a short line and not connected with any component in the group of all remaining black connected components.</p>
<p id="p-0035" num="0034">Once so classified, the components in the group of all remaining black connected components may be classified into graphics, grid or text by:</p>
<p id="p-0036" num="0035">determining that a connected component with one dimension larger than a maximum text size is graphics;</p>
<p id="p-0037" num="0036">determining that a connected component with one dimension smaller than a minimum text size is a grid;</p>
<p id="p-0038" num="0037">checking that a connected component with text size has one round corner component and, if so, merging the round corner component into a grid; and</p>
<p id="p-0039" num="0038">determining that components with text size that do not have round corner components are text.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0040" num="0039">The foregoing summary, as well as the following detailed description of various embodiments of the present invention, will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the embodiments, there are shown in the drawings embodiments that are presently preferred. It should be understood, however, the embodiments of the present invention are not limited to the precise arrangements and instrumentalities shown.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a schematic diagram of a portable scanning system that may be adapted to scan documents for table grid detection and separation using the techniques of the invention.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart of table grid detection and separation in accordance with the invention.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an enlarged character &#x2018;V&#x2019; to illustrate the definition of a &#x2018;run&#x2019; and a &#x2018;connected component,&#x2019; where (a) is the original image and (b) is the rotated and flipped image used to extract vertical runs.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> illustrates the procedure to detect and extract inverse cells from a connected component in accordance with the invention.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the pre-processing result of a connected component image, where (a) is the original binary image and (b) is the processed image.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example of filling small white holes and removing non-inverse cell runs for inverse cell detection and extraction, where (a) is the obtained image after filling small white holes and (b) is the obtained image after removing non-inverse cell runs.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart showing how to extract grid line components from a binary grid image.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example of grid line component extraction, where (a) is the obtained grid after inverse cell subtraction, (b) is the extracted horizontal grid line components, (c) is the extracted vertical grid line components, and (d) is the obtained grid (inverse cells and grid lines).</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 9</figref> illustrates extracted table grid cells, including the inverse cell, three regular cells, and the extracted grid lines.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an exemplary procedure to validate an extracted clean grid.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 11</figref> illustrates the validation of four margins of a polluted table grid.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart of open table validation in accordance with the invention.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an example showing the remaining components of a grid, where (a) is the original grid, (b) are all of the remaining components, (c) is the restored grid, and (d) is the separated touching text.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 14</figref> illustrates the restored grid and separate touching texts and graphics.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 15</figref> illustrates positions to check if a component is a round corner component.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 16</figref> illustrates a grid that passed the validation based on high density, where (a) is the original grid and (b) is the separated grid and detected cells, where inverse texts are inverted to regular text and the inverse cell is shaded.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 17</figref> illustrates a grid that passed the validation based on low density, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 18</figref> illustrates a grid that passed the validation based on border lines, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 19</figref> illustrates a grid that passed the validation based on margins, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 20</figref> illustrates a grid that passed the round-corner table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 21</figref> illustrates a grid that passed the open table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 22</figref> illustrates a grid that passed the single-cell table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS</heading>
<p id="p-0063" num="0062">Exemplary embodiments of the invention will be described in detail below with reference to <figref idref="DRAWINGS">FIGS. 1-22</figref>. Those skilled in the art will appreciate that the description given herein with respect to those figures is for exemplary purposes only and is not intended in any way to limit the scope of the invention. All questions regarding the scope of the invention may be resolved by referring to the appended claims.</p>
<p id="h-0006" num="0000">Exemplary System</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a schematic diagram of a portable scanning system that may be adapted to scan documents for table grid detection and separation using the techniques of the invention. Of course, the techniques described herein may also be used with conventional, non-portable scanning systems as well. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, sheet-fed scanner <b>100</b> is connected through communication cable <b>112</b> to a computing device <b>102</b>, which may be a desktop or laptop computer, for example. Scanner <b>100</b> scans a sheet <b>110</b>, which may be a sheet of paper, a receipt, a business card, or the like, and digitizes the text and graphics thereon in a conventional manner. The scanning result is generally a digital image that is transferred to the computing device <b>102</b> through communications cable <b>112</b>. The digital image may then be manipulated by a computer program executed by computing device <b>102</b>. The computer program as executed by computing device <b>102</b> may implement various aspects of the claimed method as explained below. Thus, the computing device <b>102</b> is a machine that implements the method described herein.</p>
<p id="p-0065" num="0064">The computing device <b>102</b> includes a display monitor <b>104</b> on which the scanned image and/or cropped image is displayed to users. Computing device <b>102</b> may optionally include a memory slot <b>114</b>, a disk drive <b>116</b> for storing image files and application program files, and a keyboard <b>106</b> for providing data input. A mouse <b>108</b> is also provided to permit execution of commands by the computing device <b>102</b>.</p>
<p id="p-0066" num="0065">In an exemplary embodiment, the computer program executed by the computing device <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref> analyzes the images received from the scanner <b>100</b>, converts the images to text, analyzes the text data, extracts expense data, and puts the extracted expense data into an expense report. In another exemplary embodiment, the computer program executed by the computing device <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref> analyzes business card or other documents images received from the scanner <b>100</b>, converts the images to text, analyzes the text data, extracts contacts data, and puts the contacts data into a contacts database. An exemplary system for capturing, storing and processing documents, such as receipts and business cards, are described in U.S. Pat. No. 7,069,240. The contents of that patent are hereby incorporated by reference in their entirety.</p>
<p id="h-0007" num="0000">Table Grid Detection and Separation</p>
<p id="p-0067" num="0066">The techniques of the invention relate to processing scanned document images to detect table grids and to separate the text from the table grid for inclusion of the text in, for example, an expense report. <figref idref="DRAWINGS">FIG. 2</figref> is a flowchart of table grid detection and separation in accordance with the invention. As illustrated, the starting point of the proposed approach is a binary image received from the scanner <b>100</b>, for example at <b>201</b>. Color and grayscale images are binarized at <b>201</b> by applying, for example, an adaptive image binarizer. Then, at <b>202</b>, all connected components are extracted from the binary image in a conventional fashion. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, after obtaining the connected components, the technique is divided into the following steps: get table grid candidates (<b>203</b>); for each table grid candidate (<b>204</b>-<b>212</b>), determine if inverse cells exist (<b>205</b>) and, if so, extract (<b>206</b>) and remove inverse cells (<b>207</b>); extract grid line components (<b>208</b>); validate the table grid (<b>209</b>); separate noise and touching texts from the table grids (<b>210</b>); and extract regular cells (<b>211</b>) if necessary. The result is a clean table grid with extracted cells (<b>213</b>). Each step of this approach will be described in detail below.</p>
<p id="p-0068" num="0067">Before describing the technique in detail, the following two data structures will be defined to help the description and the understanding of the algorithm described below.</p>
<p id="p-0069" num="0068">The first data structure NCRun is used to represent a run on a binary image. Each run is a sequence of connected pixels with the same value and on the same row of an image. The structure NCRun has three integer variables: Row, cFirst and cLast whose meanings are included in the code definition. The enlarged character &#x2018;V&#x2019; shown in <figref idref="DRAWINGS">FIG. 3(</figref><i>a</i>) will be used as an example to explain the concept of NCRun. In <figref idref="DRAWINGS">FIG. 3(</figref><i>a</i>), each black block represents a black pixel on the binary image. In <figref idref="DRAWINGS">FIG. 3(</figref><i>a</i>), character &#x2018;V&#x2019; has dimension 27&#xd7;29 pixels. Each row in rows <b>0</b> to <b>22</b> (numbered from top of &#x201c;V&#x201d;) contains two runs, while each row in rows <b>23</b> to <b>28</b> contains only one run. Assuming the top-left point coordinates are (0, 0), the three member variables of the first NCRun in the first row have values Row=0, cFirst=0 and cLast=5. Thus</p>
<p id="p-0070" num="0069">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct NCRun{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="147pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;int Row;</entry>
<entry>//the row of the run on the image</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int cFirst;</entry>
<entry>//the first column of the run on the image</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int cLast;</entry>
<entry>//the last column of the run on the image</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0071" num="0070">The above definition of NCRun can be called a horizontal run since all pixels in a run are on the same row. However, NCRun also may be defined in the vertical orientation as follows. In the technique described herein, many times both horizontal and vertical runs are required. Fortunately, the fast run extraction method used to extract horizontal runs can be applied to extract vertical runs without any code change by rotating the original image counter-clockwise by 90 degree then flip the image upside down as shown in <figref idref="DRAWINGS">FIG. 3(</figref><i>b</i>). In other words, a vertical run may be defined as:</p>
<p id="p-0072" num="0071">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct NCRun{</entry>
<entry/>
</row>
<row>
<entry/>
<entry>&#x2003;int Column;</entry>
<entry>//the column of the run on the image</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int rFirst;</entry>
<entry>//the first row of the run on the image</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int rLast;</entry>
<entry>//the last row of the run on the image</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
It should be noted that for the same image the numbers of horizontal runs and vertical runs are usually not the same. For example, the character &#x2018;V&#x2019; shown in <figref idref="DRAWINGS">FIG. 3</figref> has 52 horizontal runs but only 27 vertical runs. In the following description, unless clearly specified, all runs mean horizontal runs.
</p>
<p id="p-0073" num="0072">The second data structure NCConnComponent is used to represent a &#x2018;connected component&#x2019; on a binary image. Each connected component is a group of connected runs where &#x2018;connection&#x2019; is defined as an 8-neighbor field connection. NCConnComponent contains four integer member variables x, y, w and h and a vector member variable runs whose meanings are included in the following code definition:</p>
<p id="p-0074" num="0073">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>struct NCConnComponent{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="28pt" align="left"/>
<colspec colname="2" colwidth="168pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;int x;</entry>
<entry>//the X coordinate of the top-left corner of the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>connected component</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int y;</entry>
<entry>//the Y coordinate of the top-left corner of the</entry>
</row>
<row>
<entry/>
<entry/>
<entry>connected component</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int w;</entry>
<entry>//the width of the connected component</entry>
</row>
<row>
<entry/>
<entry>&#x2003;int h;</entry>
<entry>//the height of the connected component</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;vector&#x3c;NCRun&#x3e; runs;</entry>
<entry>&#x2003;//the vector of runs contained in</entry>
</row>
<row>
<entry/>
<entry/>
<entry>&#x2003;the connected component</entry>
</row>
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
In <figref idref="DRAWINGS">FIG. 3</figref>, character &#x2018;V&#x2019; can be represented with one single connected component. By assuming the top-left point coordinates to be (0, 0), the four integer member variables have values x=0, y=0, w=27 and h=29 and the vector runs contains 52 runs inside.
<br/>
Get Table Grid Candidates (Step <b>203</b>; <figref idref="DRAWINGS">FIG. 2</figref>)
</p>
<p id="p-0075" num="0074">The procedure to get table grid candidates is based on the size of the connected component obtained in step <b>202</b>. Given an image with resolution R (unit is DPI), the thresholds used to obtain table grid candidates are T<sub>gmin</sub>=R/4 (minimum grid size) and T<sub>cmin</sub>=R/10 (minimum table cell size). Given a connected component with dimension w&#xd7;h, it is considered a table grid candidate if max(w,h)&#x2267;T<sub>gmin </sub>and min(w,h)&#x2267;T<sub>cmin</sub>.</p>
<p id="h-0008" num="0000">Extract and Remove Inverse Cells (Steps <b>206</b> and <b>207</b>; <figref idref="DRAWINGS">FIG. 2</figref>)</p>
<p id="p-0076" num="0075">An inverse cell is defined as a cell in a table with inverse (white) text on a dark background. Since inverse cell components on a table grid affect the extraction of horizontal and vertical line components and the validation of the table grid, inverse cells should be extracted and separated from the original connected component first if a table grid is determined at step <b>206</b> to contain inverse cells. The procedure to detect and extract inverse cells is shown in the flowchart of <figref idref="DRAWINGS">FIG. 4</figref>. All major steps in this procedure are described below.</p>
<p id="p-0077" num="0076">Pre-Processing</p>
<p id="p-0078" num="0077">A connected component contains all required information to describe the component; therefore, it is a straight-forward process to generate a binary image from the connected component received at <b>401</b> by assigning a white background and assigning all pixels in the connected component a black value at <b>402</b>. The generated binary image is pre-processed at <b>403</b> to help the detection and extraction of inverse cells. In the image pre-processing step <b>403</b>, a smearing operation is applied to the binary image in both horizontal and vertical directions. This operation can help the detection and extraction of inverse cells with a meshed dark background. The pseudo code of the horizontal smearing is:</p>
<p id="p-0079" num="0078">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>for each row on the binary image</entry>
</row>
<row>
<entry/>
<entry>&#x2003;find all white gaps between two black pixels</entry>
</row>
<row>
<entry/>
<entry>&#x2003;for each white gap</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;compute the length L of the gap</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;if L&#x3c;=T then</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;fill the gap with black pixels</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;end</entry>
</row>
<row>
<entry/>
<entry>&#x2003;end</entry>
</row>
<row>
<entry/>
<entry>end</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
where T is a predefined gap length threshold depending on the resolution of the original image. In an exemplary implementation, T=5 for an image with resolution 300 DPI. The vertical smearing operation is different from the horizontal smearing operation only in that the operation is on columns instead of rows.
</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 5</figref> gives a pre-processing example which shows a connected component before (<figref idref="DRAWINGS">FIG. 5(</figref><i>a</i>)) and after (<figref idref="DRAWINGS">FIG. 5(</figref><i>b</i>)) the pre-processing. As illustrated, the pre-processing can make the inverse part solid and easier to detect and extract.</p>
<p id="p-0081" num="0080">Fill Small White Holes</p>
<p id="p-0082" num="0081">Given the image resolution R with unit DPI, a threshold T<sub>h </sub>is defined as T=R/7. A white hole (with width w<sub>hole</sub>, height h<sub>hole </sub>and pixel number N<sub>hole</sub>) on the binary image is considered a small hole if it satisfies any one of the following two conditions.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>max(<i>w</i><sub>hole</sub><i>,h</i><sub>hole</sub>)&#x3c;<i>T</i><sub>hole</sub>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>N</i><sub>hole</sub><i>&#x3c;T</i><sub>h</sub><sup>2</sup><i>,h</i><sub>hole</sub>&#x3c;5<i>w</i><sub>hole</sub>&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
All identified small holes will be filled with solid black color at <b>404</b>. For example, the obtained binary image after filling small white holes of image in <figref idref="DRAWINGS">FIG. 5(</figref><i>b</i>) is shown in <figref idref="DRAWINGS">FIG. 6(</figref><i>a</i>).
</p>
<p id="p-0083" num="0082">Remove Non-Inverse Cell Runs</p>
<p id="p-0084" num="0083">At <b>405</b>, both horizontal and vertical runs are extracted from the processed binary image with small holes filled. All runs with length shorter than a predefined length threshold T<sub>l </sub>are identified as short runs that can not be included in an inverse cell at <b>406</b>. All short runs are removed by setting pixels in short runs to be white (background) color. In an exemplary implementation, T<sub>l</sub>=R/10, where R is the resolution of the original image. <figref idref="DRAWINGS">FIG. 6(</figref><i>b</i>) shows the result after removing all short runs from the image shown in <figref idref="DRAWINGS">FIG. 6(</figref><i>a</i>).</p>
<p id="p-0085" num="0084">Inverse Cell Validation</p>
<p id="p-0086" num="0085">At <b>407</b>, all black connected components are extracted from the binary image obtained from <b>406</b>. Based on the assumption that all cells in a table should have a rectangular shape, the extracted connected components are validated at <b>408</b>-<b>411</b> to check if they can be an inverse cell component. For example, for each extracted component (with perimeter S, width w<sub>c</sub>, height h<sub>c </sub>and pixel number N<sub>p</sub>), the rectangularity degree D<sub>rect </sub>of this connected component is computed at <b>408</b> as follows:</p>
<p id="p-0087" num="0086">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>D</mi>
    <mi>rect</mi>
  </msub>
  <mo>=</mo>
  <mrow>
    <mi>min</mi>
    <mo>(</mo>
    <mrow>
      <mfrac>
        <msub>
          <mi>N</mi>
          <mi>p</mi>
        </msub>
        <mrow>
          <msub>
            <mi>w</mi>
            <mi>c</mi>
          </msub>
          <mo>&#xb7;</mo>
          <msub>
            <mi>h</mi>
            <mi>c</mi>
          </msub>
        </mrow>
      </mfrac>
      <mo>,</mo>
      <mfrac>
        <msub>
          <mi>N</mi>
          <mi>p</mi>
        </msub>
        <mrow>
          <mfrac>
            <mrow>
              <mi>S</mi>
              <mo>-</mo>
              <mrow>
                <mn>2</mn>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.3em" height="0.3ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mrow>
                  <mi>min</mi>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <msub>
                        <mi>w</mi>
                        <mi>c</mi>
                      </msub>
                      <mo>,</mo>
                      <msub>
                        <mi>h</mi>
                        <mi>c</mi>
                      </msub>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mrow>
            </mrow>
            <mn>2</mn>
          </mfrac>
          <mo>&#xb7;</mo>
          <mrow>
            <mi>min</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>w</mi>
                  <mi>c</mi>
                </msub>
                <mo>,</mo>
                <msub>
                  <mi>h</mi>
                  <mi>c</mi>
                </msub>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mfrac>
    </mrow>
    <mo>)</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
If the rectangularity degree D<sub>rect </sub>is larger than a predefined high threshold T<sub>hr </sub>at <b>408</b>, then the connected component is considered a valid inverse cell component at <b>410</b>. On the other hand, if the rectangularity degree D<sub>rect </sub>is smaller than a predefined low threshold T<sub>lr </sub>at <b>408</b>, then the connected component is considered an invalid inverse cell component at <b>411</b>. For any component with D<sub>rect </sub>satisfies T<sub>lr</sub>&#x2266;D<sub>rect</sub>&#x2266;T<sub>hr</sub>, a second checking step is required. Because of the skewing of scanned images, a rectangle shape on the original document might appear as a parallelogram. The second checking step is to make sure that these shapes are also considered as inverse cell components.
</p>
<p id="p-0088" num="0087">For the second step validation, the variance V<sub>r </sub>of the lengths of all runs in the connected component is computed as follows:</p>
<p id="p-0089" num="0088">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>V</mi>
          <mi>r</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mrow>
                  <mi>var</mi>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>lengths</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>of</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>all</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>horizontal</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>runs</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>w</mi>
                      <mi>c</mi>
                    </msub>
                  </mrow>
                  <mo>&#x3c;</mo>
                  <msub>
                    <mi>h</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mrow>
                  <mi>var</mi>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>lengths</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>of</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>all</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>vertical</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.8em" height="0.8ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>runs</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
              </mtd>
              <mtd>
                <mi>Otherwise</mi>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
where var(.) is an operator to compute the variance of an integer sequence. Once the run length variance is available, the decision is made as follows:
</p>
<p id="p-0090" num="0089">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>Component</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mi>is</mi>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>inverse&#xa0;&#xa0;cell&#xa0;&#xa0;component</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>V</mi>
                      <mi>r</mi>
                    </msub>
                  </mrow>
                  <mo>&#x2264;</mo>
                  <mn>10</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>not&#xa0;&#xa0;inverse&#xa0;&#xa0;cell&#xa0;&#xa0;component</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mi>Otherwise</mi>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>2</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
The rectangularity degree D<sub>rect </sub>of the connected component shown in <figref idref="DRAWINGS">FIG. 6(</figref><i>b</i>) is 96, so it is definitely an inverse cell component. Once a connected component is decided as an inverse cell component, the filled holes are put back to restore the original shape of the cells.
<br/>
Extract Grid Line Components (Step <b>208</b>; <figref idref="DRAWINGS">FIG. 2</figref>)
</p>
<p id="p-0091" num="0090">If a table grid contains inverse cells that are detected as described above, these inverse cells will be subtracted from the original connected component before extracting grid line components. For the table grid shown in <figref idref="DRAWINGS">FIG. 5</figref>, for example, the obtained connected component after subtracting the inverse cell components is shown in <figref idref="DRAWINGS">FIG. 8(</figref><i>a</i>).</p>
<p id="p-0092" num="0091">Once the grid with inverse cells subtracted is available, grid line (horizontal and vertical line) components are extracted from the obtained grid image. Because of the skewing during scanning, a long straight line may appear as a group of connected line segments. Although a Hough transform is an effective approach to detect lines from a binary image, the algorithm has the following two disadvantages which make Hough transform inappropriate for use in the method of the invention: (1) the algorithm is extremely slow when the original image is large; and (2) end points of detected lines have to be decided by going through the original image. In accordance with the invention, a line detection and extraction algorithm based on runs is used instead of the Hough transform. The algorithm has the following two advantages that are exactly the opposite of Hough transform's disadvantages: (1) The algorithm runs very fast; and (2) Detected lines are extracted automatically as line segments. The procedure of this algorithm is shown in the flowchart of <figref idref="DRAWINGS">FIG. 7</figref>, where L(.) is an operator to compute the length of a run, and T<sub>L </sub>is a threshold to decide based on image resolution and skewing tolerance. Basically the larger the skewing, then the smaller the value of T<sub>L</sub>. In an exemplary implementation, T<sub>L</sub>=R/6, where R is the image resolution.</p>
<p id="p-0093" num="0092">In the flowchart shown in <figref idref="DRAWINGS">FIG. 7</figref>, the horizontal and vertical grid line components <b>707</b> and <b>713</b> are the output of this procedure. The basic idea of grid line extraction can be described as follows: any horizontal run with length not smaller T<sub>L </sub>is considered a part of the horizontal grid line components, and any vertical run with length not smaller than T<sub>L </sub>is considered a part of the vertical grid line components. A group of connected horizontal runs belonging to horizontal line components is a horizontal line segment, and a group of connected vertical runs belonging to vertical line components is a vertical line segment. In <figref idref="DRAWINGS">FIG. 7</figref>, the binary grid image is obtained at <b>701</b> and horizontal and vertical runs are extracted at <b>702</b>. For each horizontal run U (<b>703</b>, <b>708</b>), it is determined at <b>704</b> whether L(U)&#x2267;T<sub>L</sub>. If L(U)&#x2267;T<sub>L</sub>, then U is a horizontal line (<b>705</b>) with group connected runs (<b>706</b>) and corresponds to the horizontal grid line components (<b>707</b>). On the other hand, if L(U)&#x3c;T<sub>L</sub>, the process is repeated for the next horizontal run U. The same process is followed at <b>709</b>-<b>714</b> for the vertical runs.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIGS. 8(</figref><i>b</i>) and <b>8</b>(<i>c</i>) show the extracted horizontal grid line and vertical grid lines, respectively, from the grid image shown in <figref idref="DRAWINGS">FIG. 8(</figref><i>a</i>). By combining the extracted grid lines and inverse cell components, the clean table grid component is obtained as shown in <figref idref="DRAWINGS">FIG. 8(</figref><i>d</i>), where white holes are restored.</p>
<p id="h-0009" num="0000">Table Grid Validation (Step <b>209</b>; <figref idref="DRAWINGS">FIG. 2</figref>)</p>
<p id="p-0095" num="0094">For some steps of the table grid validation, it is desirable to extract the regular table cells first. The procedure to extract regular cells is similar to the procedure to extract inverse cells. The only difference is, instead of extracting all black runs, all white runs are extracted from the clean grid image. After all white runs are available, the process to remove non-regular-cell runs is exactly the same as the procedure shown in <figref idref="DRAWINGS">FIG. 4</figref>. <figref idref="DRAWINGS">FIG. 9</figref> shows the extracted grid cells from the image shown in <figref idref="DRAWINGS">FIG. 8(</figref><i>d</i>).</p>
<p id="p-0096" num="0095">There are certain amount of documents that contains graphics such as logos. Some of these graphics components might contain some solid components that are detected as inverse cell components, line drawings that are extracted as grid line components, and white holes that are extracted as regular cells. The goal of the &#x2018;table grid validation&#x2019; step is to remove those graphics components that satisfy part of the table grid criteria thus are incorrectly detected as table grids. The validation process is a six-step procedure, as shown in <figref idref="DRAWINGS">FIG. 10</figref>, where each block <b>1001</b>-<b>1006</b> represents one validation step. If any one of the six validation steps is passed, the extracted grid is considered a table grid at <b>1007</b>. In other words, a grid is not considered to be a table (<b>1008</b>) only when all six steps of validation have failed.</p>
<p id="p-0097" num="0096">The details of each validation step will be described in detail below. Before providing such details, some thresholds based on image resolution will be defined and some values will be pre-computed as well. Given the following connected component information:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0097">CC<sub>o</sub>: the original connected component without any processing;</li>
        <li id="ul0002-0002" num="0098">CC<sub>c</sub>: the clean connected component containing only inverse cell and grid line components;</li>
        <li id="ul0002-0003" num="0099">ICC: the group that contains all inverse cell components;</li>
        <li id="ul0002-0004" num="0100">HCC: the group that contains all horizontal grid line components;</li>
        <li id="ul0002-0005" num="0101">VCC: the group that contains all vertical grid line components;</li>
        <li id="ul0002-0006" num="0102">W<sub>o </sub>and H<sub>o</sub>: the width and height of CC<sub>o</sub>;</li>
        <li id="ul0002-0007" num="0103">W<sub>c </sub>and H<sub>c</sub>: the width and height of CC<sub>c</sub>;</li>
        <li id="ul0002-0008" num="0104">N<sub>h</sub>: the number of horizontal line components in HCC;</li>
        <li id="ul0002-0009" num="0105">N<sub>v</sub>: the number of vertical line components in VCC;</li>
        <li id="ul0002-0010" num="0106">N<sub>po</sub>: the number of pixels in CC<sub>o</sub>;</li>
        <li id="ul0002-0011" num="0107">N<sub>pi</sub>: the number of pixels in all inverse cell components;</li>
        <li id="ul0002-0012" num="0108">N<sub>ph</sub>: the number of pixels in all members of HCC;</li>
        <li id="ul0002-0013" num="0109">N<sub>pv</sub>: the number of pixels in all members of VCC;</li>
        <li id="ul0002-0014" num="0110">N<sub>pr</sub>: the number of remaining pixels after removing inverse cells and all grid lines from CC<sub>o</sub>;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0098" num="0111">one predefines and pre-computes the following values:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0112">D<sub>h</sub>: the high density threshold (70 in an exemplary implementation);</li>
        <li id="ul0004-0002" num="0113">D<sub>l</sub>: the low density threshold (5 in an exemplary implementation); and</li>
        <li id="ul0004-0003" num="0114">T<sub>cgmin</sub>: the minimum clean grid size (R/10 in an exemplary implementation).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0099" num="0115">Validation Based on Density (Step <b>1001</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0100" num="0116">The step <b>1001</b> of validation based on density is divided into two more steps. One step is based on the high density threshold D<sub>h</sub>, and another step is based on the low density threshold D<sub>l</sub>. The two steps of validation are described as follows.</p>
<p id="p-0101" num="0117">1. Validation Based on High Density</p>
<p id="p-0102" num="0118">A connected component will be validated based on high density only if D&#x3e;D<sub>h </sub>is satisfied, where</p>
<p id="p-0103" num="0119">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mrow>
  <mi>D</mi>
  <mo>=</mo>
  <mfrac>
    <msub>
      <mi>N</mi>
      <mi>po</mi>
    </msub>
    <mrow>
      <msub>
        <mi>W</mi>
        <mi>o</mi>
      </msub>
      <mo>&#xb7;</mo>
      <msub>
        <mi>H</mi>
        <mi>o</mi>
      </msub>
    </mrow>
  </mfrac>
</mrow>
</math>
</maths>
<br/>
is the density of the original connected component. If D&#x3e;D<sub>h </sub>is satisfied, the ratio R<sub>t </sub>between the number of inverse cell component pixels and the number of the original connected component pixels is computed as
</p>
<p id="p-0104" num="0120">
<maths id="MATH-US-00007" num="00007">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>R</mi>
          <mi>t</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mfrac>
            <msub>
              <mi>N</mi>
              <mi>pi</mi>
            </msub>
            <msub>
              <mi>N</mi>
              <mi>po</mi>
            </msub>
          </mfrac>
          <mo>.</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
The decision is made as follows:
</p>
<p id="p-0105" num="0121">
<maths id="MATH-US-00008" num="00008">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>Validation</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>passed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>R</mi>
                      <mi>t</mi>
                    </msub>
                  </mrow>
                  <mo>&#x3e;</mo>
                  <mn>0.2</mn>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>failed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>R</mi>
                      <mi>t</mi>
                    </msub>
                  </mrow>
                  <mo>&#x2264;</mo>
                  <mn>0.2</mn>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>3</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
This step of validation will capture the table grids containing large inverse cell components.
</p>
<p id="p-0106" num="0122">2. Validation Based on Low Density</p>
<p id="p-0107" num="0123">In this step of validation, the same density D (the density of the original connected component) is computed. The decision is made as follows:</p>
<p id="p-0108" num="0124">
<maths id="MATH-US-00009" num="00009">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>Validation</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>passed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>D</mi>
                  </mrow>
                  <mo>&#x3c;</mo>
                  <msub>
                    <mi>D</mi>
                    <mi>l</mi>
                  </msub>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>failed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>D</mi>
                  </mrow>
                  <mo>&#x2265;</mo>
                  <msub>
                    <mi>D</mi>
                    <mi>l</mi>
                  </msub>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>4</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
This step of validation will capture the large table grids containing no inverse cell components.
</p>
<p id="p-0109" num="0125">Validation Based on Border Lines (Step <b>1002</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0110" num="0126">Because of noise on scanned images, a table grid on a binarized image might have broken grids that make the table incomplete. This step of validation will try to capture these incomplete table grids. The procedure of validation based on border lines is as follows:</p>
<p id="p-0111" num="0127">1. The table grid should be an incomplete grid. A grid that satisfies min(N<sub>h</sub>, N<sub>v</sub>)=1 is identified as an incomplete grid.</p>
<p id="p-0112" num="0128">2. Every line component should be long enough. A line component (either horizontal or vertical line) with width W<sub>l </sub>and height H<sub>l </sub>is considered a long-enough line only if max(W<sub>l</sub>,H<sub>l</sub>)&#x2267;5&#xb7;min(W<sub>l</sub>,H<sub>l</sub>).</p>
<p id="p-0113" num="0129">3. All line components should be large enough. The line components are considered as large enough only if the condition</p>
<p id="p-0114" num="0130">
<maths id="MATH-US-00010" num="00010">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>(</mo>
    <mrow>
      <msub>
        <mi>N</mi>
        <mi>po</mi>
      </msub>
      <mo>-</mo>
      <msub>
        <mi>N</mi>
        <mi>pr</mi>
      </msub>
    </mrow>
    <mo>)</mo>
  </mrow>
  <mo>&#x2265;</mo>
  <mfrac>
    <msub>
      <mi>N</mi>
      <mi>po</mi>
    </msub>
    <mn>3</mn>
  </mfrac>
</mrow>
</math>
</maths>
<br/>
is satisfied.
</p>
<p id="p-0115" num="0131">4. Clean grid size should be large enough. A clean grid is considered to be large enough only if min(W<sub>c</sub>, H<sub>c</sub>)&#x2267;T<sub>cgmin </sub>is satisfied.</p>
<p id="p-0116" num="0132">It should be noted that, if any of these steps of validation failed, the validation will terminate immediately by reporting a failure message back.</p>
<p id="p-0117" num="0133">Round Corner Table Validation (Step <b>1003</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0118" num="0134">For a table grid with round corners, the grid line extraction process will break the grid borders into unconnected lines. The result is runs in the clean grid CC<sub>c </sub>that are not connected into one single connected component. In this step of validation, these types of table grids are captured, and the round corners are put back to the clean grid later (see below).</p>
<p id="p-0119" num="0135">The first step of round-corner table validation is to check the number of horizontal and vertical line components. Only when min(N<sub>h</sub>,N<sub>v</sub>)&#x2267;2 is satisfied, will the next step proceed. From the grid line components, four margin lines are identified that are two horizontal lines with minimum and maximum Y coordinates and two vertical lines with minimum and maximum X coordinates. If the original table grid is a round-corner rectangle with perimeter S, then the sum S<sub>l </sub>of the lengths of these four lines is S&#x2212;S<sub>c</sub>, where S<sub>c </sub>is the sum of four corner lengths and S is computed as S=2&#xb7;(W<sub>o</sub>+H<sub>o</sub>).</p>
<p id="p-0120" num="0136">The grid is considered to be a round-corner grid only if the following two conditions are satisfied:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>S</i><sub>l</sub>&#x2267;0.8<i>&#xd7;S</i>&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>W</i><sub>c</sub><i>&#xd7;H</i><sub>c</sub>&#x2267;0.8<i>&#xd7;W</i><sub>o</sub><i>&#xd7;H</i><sub>o</sub>&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where the first condition is based on the grid perimeter and the second condition is based on grid area.
</p>
<p id="p-0121" num="0137">Validation Based on Grid Margins (Step <b>1004</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0122" num="0138">On real documents such as invoices, it is common for handwriting to pollute the original table grid, especially the bounding box of the grid. Sometimes, the handwriting may contain one or multiple line components. Since the handwriting can make the bounding box of the grid much larger than a clean grid, the previous steps of validation based on size will fail with very high probability. In this validation procedure, these polluted table grids are captured by removing the effects of the handwriting.</p>
<p id="p-0123" num="0139">As in the previous validation step, min(N<sub>h</sub>,N<sub>v</sub>)&#x2267;2 is the precondition of this validation step. If this condition is satisfied, from those line components, the two longest horizontal lines and two longest vertical lines are identified with a length tolerance T<sub>t</sub>. The tolerance T<sub>t </sub>is set to make sure one can correctly identify the four margins of the grid. T<sub>t</sub>=10 in an exemplary implementation. The procedure to identify the two horizontal margins is:</p>
<p id="p-0124" num="0140">1. Get the longest horizontal line with length L from HCC;</p>
<p id="p-0125" num="0141">2. Get all lines inside HCC with length larger than L&#x2212;T<sub>t </sub>and put them in a group G; and</p>
<p id="p-0126" num="0142">3. From G, take the line with the minimum Y coordinate as the top margin and the line with the maximum Y coordinate as the bottom margin.</p>
<p id="h-0010" num="0000">The procedure to identify the two vertical margins is the same.</p>
<p id="p-0127" num="0143">After obtaining these four margin lines, where each line is a connected component represented with NCConnComponent, C<sub>L </sub>and C<sub>R </sub>are used to represent the left and the right margins and C<sub>T </sub>and C<sub>B </sub>are used to represent the top and bottom margins. The following values are computed:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0144">Dis<sub>LR</sub>=C<sub>R</sub>&#xb7;x+C<sub>R</sub>&#xb7;w&#x2212;C<sub>L</sub>&#xb7;x: the distance between the left and right margins;</li>
        <li id="ul0006-0002" num="0145">Dis<sub>TB</sub>=C<sub>B</sub>&#xb7;y+C<sub>B</sub>&#xb7;h&#x2212;C<sub>T</sub>&#xb7;y: the distance between the top and bottom margins;</li>
        <li id="ul0006-0003" num="0146">Dif<sub>LR</sub>=|C<sub>L</sub>&#xb7;y&#x2212;C<sub>R</sub>&#xb7;y|+|C<sub>L</sub>&#xb7;y&#x2212;C<sub>R</sub>&#xb7;y+(C<sub>L</sub>&#xb7;h&#x2212;C<sub>R</sub>&#xb7;h)|: the position difference between end points of the left and right margins;</li>
        <li id="ul0006-0004" num="0147">Dif<sub>TB</sub>=|C<sub>T</sub>&#xb7;x&#x2212;C<sub>B</sub>&#xb7;x|+|C<sub>T</sub>&#xb7;x&#x2212;C<sub>B</sub>&#xb7;x+(C<sub>T</sub>&#xb7;w&#x2212;C<sub>B</sub>&#xb7;w)|: the position difference between end points of the top and bottom margins;</li>
        <li id="ul0006-0005" num="0148">Dif<sub>H</sub>=|C<sub>L</sub>&#xb7;h&#x2212;C<sub>R</sub>&#xb7;h|: the height difference between the left and right margins; and</li>
        <li id="ul0006-0006" num="0149">Dif<sub>W</sub>=|C<sub>T</sub>&#xb7;w&#x2212;C<sub>B</sub>&#xb7;w|: the width difference between the top and bottom margins.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0128" num="0150">Predefining a distance threshold T<sub>d</sub>, the procedure of validation is shown in <figref idref="DRAWINGS">FIG. 11</figref>. The meaning of each step is as follows:</p>
<p id="p-0129" num="0151">1. Step <b>1101</b>: Validate that every pair of margins have the same length;</p>
<p id="p-0130" num="0152">2. Step <b>1102</b>: Validate that every pair of margins are at the same level;</p>
<p id="p-0131" num="0153">3. Step <b>1103</b>: Validate that there exists at least one thin margin (remove the affection of inverse components);</p>
<p id="p-0132" num="0154">4. Step <b>1104</b>: Validate that the left and right margins are parallel;</p>
<p id="p-0133" num="0155">5. Step <b>1105</b>: Validate that the top and bottom margins are parallel; and</p>
<p id="p-0134" num="0156">6. Step <b>1106</b>: Validate that the new grid is large enough (using threshold T<sub>cgmin </sub>defined above).</p>
<p id="p-0135" num="0157">Once the validation of <figref idref="DRAWINGS">FIG. 11</figref> is passed at <b>1108</b>, a new clean grid will be generated. All other components out of the bounding box defined by these four margins are considered as noise. In an exemplary implementation, T<sub>d</sub>=40 which is decided based on experimental results. It certainly can take other values if higher performance can be obtained.</p>
<p id="p-0136" num="0158">Open Table Validation (Step <b>1005</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0137" num="0159">On invoice documents, for example, a certain amount of open tables exist that can not pass any previous step of validation. In this step, this type of table is captured. An open table is defined as a table grid with only top and bottom margins and one or multiple vertical separator lines. Open tables usually do not contain any inverse header. The validation of an open table is similar to the previous step (<figref idref="DRAWINGS">FIG. 11</figref>). After obtaining the top and bottom margins C<sub>T </sub>and C<sub>B </sub>and the longest vertical separator line with length L<sub>max</sub>, the following values are computed:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0160">Dis<sub>TB</sub>=C<sub>B</sub>&#xb7;y+C<sub>B</sub>&#xb7;h&#x2212;C<sub>T</sub>&#xb7;y: the distance between the top and bottom margins;</li>
        <li id="ul0008-0002" num="0161">Dif<sub>TB</sub>=|C<sub>T</sub>&#xb7;x&#x2212;C<sub>B</sub>&#xb7;x|+|C<sub>T</sub>&#xb7;x&#x2212;C<sub>g</sub>&#xb7;x+(C<sub>T</sub>&#xb7;w&#x2212;C<sub>g</sub>&#xb7;w)|: the position difference between end points of the top and bottom margins; and</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0138" num="0162">Dif<sub>w</sub>=|C<sub>T</sub>&#xb7;w&#x2212;C<sub>B</sub>&#xb7;w|: the width difference between the top and bottom margins.</p>
<p id="p-0139" num="0163">The open table validation procedure is shown in the flow chart of <figref idref="DRAWINGS">FIG. 12</figref>. The properties validated in each step are as follows:</p>
<p id="p-0140" num="0164">1. Step <b>1201</b>: Validate that there exists at least one vertical separator line;</p>
<p id="p-0141" num="0165">2. Step <b>1202</b>: Validate that the top and bottom margins have the same length;</p>
<p id="p-0142" num="0166">3. Step <b>1203</b>: Validate that the top and bottom margins are at the same level;</p>
<p id="p-0143" num="0167">4. Step <b>1204</b>: Validate that both the top and bottom margins are thin margins;</p>
<p id="p-0144" num="0168">5. Step <b>1205</b>: Validate that the top and bottom margins are parallel; and</p>
<p id="p-0145" num="0169">6. Step <b>1206</b>: Validate the new grid is large enough (using threshold T<sub>cgmin </sub>defined above).</p>
<p id="p-0146" num="0170">As in <figref idref="DRAWINGS">FIG. 11</figref>, once the validation is passed, a new clean grid will be generated from the two margins and the vertical separator lines. All other components out of the bounding box defined by these two margins are considered as noise. The values of T<sub>t </sub>and T<sub>d </sub>are also the same as in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0147" num="0171">Single-Cell Table Validation (Step <b>1006</b>; <figref idref="DRAWINGS">FIG. 10</figref>)</p>
<p id="p-0148" num="0172">A single-cell table usually can pass one or several of the previous steps of validation. However, because of the skewing caused by scanning, margins of a single cell might not be thin enough or parallel in the horizontal and vertical directions. In this step, skewed single-cell tables are captured. Given the original grid component CC<sub>o </sub>(with dimensions W<sub>o </sub>and H<sub>o</sub>), the validation of a single-cell procedure is:</p>
<p id="p-0149" num="0173">1. Generate the binary image from CC<sub>o</sub>;</p>
<p id="p-0150" num="0174">2. Add a black bounding box (rectangle) to the image;</p>
<p id="p-0151" num="0175">3. Extract all white holes from the image and get the hole with the maximum area A<sub>max</sub>; and</p>
<p id="p-0152" num="0176">4. Make decisions as follows:</p>
<p id="p-0153" num="0177">
<maths id="MATH-US-00011" num="00011">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>Validation</mi>
        <mo>=</mo>
        <mrow>
          <mo>{</mo>
          <mtable>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>passed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>A</mi>
                  </mrow>
                  <mo>&#x2265;</mo>
                  <mrow>
                    <mn>0.75</mn>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.3em" height="0.3ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>W</mi>
                      <mi>o</mi>
                    </msub>
                    <mo>&#xd7;</mo>
                    <msub>
                      <mi>H</mi>
                      <mi>o</mi>
                    </msub>
                  </mrow>
                </mrow>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mstyle>
                  <mtext>failed</mtext>
                </mstyle>
              </mtd>
              <mtd>
                <mrow>
                  <mrow>
                    <mi>if</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.8em" height="0.8ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>A</mi>
                  </mrow>
                  <mo>&#x3c;</mo>
                  <mrow>
                    <mn>0.75</mn>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.3em" height="0.3ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <msub>
                      <mi>W</mi>
                      <mi>o</mi>
                    </msub>
                    <mo>&#xd7;</mo>
                    <msub>
                      <mi>H</mi>
                      <mi>o</mi>
                    </msub>
                  </mrow>
                </mrow>
              </mtd>
            </mtr>
          </mtable>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>7</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<br/>
Separate Noise and Touching Texts from Table Grids (Step <b>210</b>; <figref idref="DRAWINGS">FIG. 2</figref>)
</p>
<p id="p-0154" num="0178">The table grid that passed the validation (step <b>209</b>) is a clean grid containing only inverse cells and long grid lines. However, after the scanning, there is a lot of noise added to the grid lines that make the lines not have the same thickness. This noise usually appears as small black spots on the component image with the clean grid removed. On the other hand, printing texts and handwriting on documents can touch grid lines too. While handwriting can be identified as graphics or noise, printing texts should also be identified as texts so that they can be put back into the original image to help with the accuracy of the OCR process.</p>
<p id="p-0155" num="0179">The operations in this step will restore the original grids and also separate touching text and handwriting from the grids. For example, the image shown in <figref idref="DRAWINGS">FIG. 13(</figref><i>b</i>) is the obtained image after removing the clean grid from the connected component image shown in <figref idref="DRAWINGS">FIG. 13(</figref><i>a</i>). As shown, it contains both grid remainders and touching text (letter J). All of these remaining black components RCC are collected and the process shown in the flowchart of <figref idref="DRAWINGS">FIG. 14</figref> is performed. In the flowchart of <figref idref="DRAWINGS">FIG. 14</figref>, ICC, HCC and VCC have the same meanings as above. The definitions of other variables are:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0180">RCC: the group containing all remaining black connected components after removing ICC, HCC, VCC from the original connected component;</li>
        <li id="ul0010-0002" num="0181">CC<sub>F</sub>: the final grid (a single connected component);</li>
        <li id="ul0010-0003" num="0182">GCC: the group containing all graphics components;</li>
        <li id="ul0010-0004" num="0183">TCC: the group containing all text components;</li>
        <li id="ul0010-0005" num="0184">T<sub>tmax</sub>=R/4: the maximum text size;</li>
        <li id="ul0010-0006" num="0185">T<sub>tmin</sub>=3: the minimum text size; and</li>
        <li id="ul0010-0007" num="0186">T<sub>L</sub>=R/3: the threshold used to decide if a line is a long line.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0156" num="0187">The procedure of the separation can be divided into three major phases. The details of operations in each major phase are described below.</p>
<p id="p-0157" num="0188">1. Generate the Initial Grid</p>
<p id="p-0158" num="0189">In the flowchart of <figref idref="DRAWINGS">FIG. 14</figref>, the first phase (steps <b>1401</b>-<b>1410</b>) stops at the checking point &#x201c;HVCC empty?&#x201d; (<b>1410</b>). In this phase, the output grid is first initialized by merging all inverse cell components into one single connected component at <b>1401</b>, <b>1402</b>. Then all components in HVRCC that connected with the initial grid are merged to the grid (<b>1403</b>-<b>1406</b>). All grid lines that are longer than T<sub>L </sub>are merged to the grid at <b>1407</b>-<b>1408</b>. After all the operations in the first phase (loop <b>1403</b>-<b>1409</b> is completed), HVCC should contain only grid lines shorter than T<sub>L </sub>and RCC contains all remaining components that are not connected with the inverse cell component.</p>
<p id="p-0159" num="0190">2. Classify Short Lines and Remaining Components</p>
<p id="p-0160" num="0191">The second phase contains all the operations on the right half (steps <b>1411</b>-<b>1421</b>) of the flowchart of <figref idref="DRAWINGS">FIG. 14</figref>. Operations in this phase will be performed only if the updated HVCC is not empty at <b>1410</b>. In other words, only when the extracted grid lines contains some short lines will steps <b>1411</b>-<b>1421</b> be performed.</p>
<p id="p-0161" num="0192">In steps <b>1411</b>-<b>1414</b> of this phase, all components in RCC that comprise a short straight segment are put in non-empty HVCC. Then, all components in HVCC that are connected are merged (<b>1415</b>). Next, for each connected component C in the updated HVCC (<b>1416</b>), the following operations will happen:</p>
<p id="p-0162" num="0193">(a) C is merged to CC<sub>F </sub>if it is a short line and connected with CC<sub>F </sub>(<b>1418</b>);</p>
<p id="p-0163" num="0194">(b) C is added to RCC if it is a short line but is not connected with CC<sub>F</sub>(<b>1419</b>);</p>
<p id="p-0164" num="0195">(c) C is added to RCC if it is not a short line but connected to at least one component in RCC (<b>1420</b>, <b>1419</b>); and</p>
<p id="p-0165" num="0196">(d) C is merged to CC<sub>F </sub>if it is not a short line and not connected with any component in RCC (<b>1421</b>).</p>
<p id="p-0166" num="0197">At <b>1412</b>, the connected component C is considered to be a line if any one of the following two conditions is satisfied:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>max(<i>W</i><sub>r</sub><i>,H</i><sub>r</sub>)&#x2267;20 min(<i>W</i><sub>r</sub><i>,H</i><sub>r</sub>)&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>max(<i>W</i><sub>r</sub><i>,H</i><sub>r</sub>)&#x2267;5 min(<i>W</i><sub>r</sub><i>,H</i><sub>r</sub>) and <i>V&#x3c;</i>2&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where V is the variance of horizontal run lengths for vertical lines and the variance of vertical run lengths for horizontal lines.
</p>
<p id="p-0167" num="0198">3. Classify Remaining Components</p>
<p id="p-0168" num="0199">After the completion of steps <b>1411</b>-<b>1421</b>, the group HVCC is now empty (<b>1410</b>), and a component used to be inside (<b>1422</b>) is merged to the grid or added to RCC. In this step, the components in RCC are classified into graphics, grid or texts. The procedure is as follows:</p>
<p id="p-0169" num="0200">(a) A large component (with one dimension larger than the maximum text size T<sub>tmax</sub>) is considered as graphics (handwriting) at <b>1423</b>-<b>1424</b>;</p>
<p id="p-0170" num="0201">(b) A small component (with one dimension smaller than the minimum text size T<sub>tmin</sub>) is considered as a grid at <b>1425</b>-<b>1426</b>;</p>
<p id="p-0171" num="0202">(c) A component with text size will be checked to see if it has one round corner and the round corner component will be merged into a grid at <b>1427</b>-<b>1428</b>; and</p>
<p id="p-0172" num="0203">(d) All components with text size that are not round corners will be classified as text and put in TCC at <b>1429</b>.</p>
<p id="p-0173" num="0204">At <b>1427</b>, the round corner checking operates as follows:</p>
<p id="p-0174" num="0205">(a) Decide the round corner size as</p>
<p id="p-0175" num="0206">
<maths id="MATH-US-00012" num="00012">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>L</mi>
      <mi>c</mi>
    </msub>
    <mo>=</mo>
    <mrow>
      <mi>min</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mfrac>
            <mrow>
              <mi>min</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>W</mi>
                    <mi>c</mi>
                  </msub>
                  <mo>,</mo>
                  <msub>
                    <mi>H</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mn>3</mn>
          </mfrac>
          <mo>,</mo>
          <mfrac>
            <mi>R</mi>
            <mn>3</mn>
          </mfrac>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<br/>
where W<sub>c </sub>and H<sub>c </sub>is the width and height of the grid component; and
</p>
<p id="p-0176" num="0207">(b) If the component falls in one of the four round corner positions shown in <figref idref="DRAWINGS">FIG. 15</figref>, then it is a round corner component.</p>
<p id="p-0177" num="0208"><figref idref="DRAWINGS">FIG. 13(</figref><i>c</i>) shows the restored grid and <figref idref="DRAWINGS">FIG. 13(</figref><i>d</i>) shows the separated text from the original grid.</p>
<p id="p-0178" num="0209">After all the previous steps, a restored grid is obtained with detected inverse cells and without any touching texts and graphics. Obviously, if the original grid is polluted by touching texts or graphics, regular cells need to be re-extracted from the restored grid using the approach described in the table grid validation section above. The final output of all of the operations described herein is a restored grid with both inverse and regular cells, separated text and separated graphics. The next step is to read the table in a correct reading order and to process the separated text and separated graphics in the desired manner (see, for example, U.S. Pat. No. 7,069,240).</p>
<heading id="h-0011" level="1">EXAMPLES</heading>
<p id="p-0179" num="0210"><figref idref="DRAWINGS">FIG. 16</figref> illustrates a grid that passed the validation based on high density, where (a) is the original grid and (b) is the separated grid and detected cells, where inverse texts are inverted to regular text and the inverse cell is shaded.</p>
<p id="p-0180" num="0211"><figref idref="DRAWINGS">FIG. 17</figref> illustrates a grid that passed the validation based on low density, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0181" num="0212"><figref idref="DRAWINGS">FIG. 18</figref> illustrates a grid that passed the validation based on border lines, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0182" num="0213"><figref idref="DRAWINGS">FIG. 19</figref> illustrates a grid that passed the validation based on margins, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0183" num="0214"><figref idref="DRAWINGS">FIG. 20</figref> illustrates a grid that passed the round-corner table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0184" num="0215"><figref idref="DRAWINGS">FIG. 21</figref> illustrates a grid that passed the open table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<p id="p-0185" num="0216"><figref idref="DRAWINGS">FIG. 22</figref> illustrates a grid that passed the single-cell table validation, where (a) is the original grid and (b) is the separated grid and detected cells.</p>
<heading id="h-0012" level="1">VARIOUS EMBODIMENTS</heading>
<p id="p-0186" num="0217">As is apparent from the above, all or portions of the various systems, methods, and aspects of the present invention may be embodied in hardware, software, or a combination of both. When embodied in software, the methods and apparatus of the present invention, or certain aspects or portions thereof, may be embodied in the form of program code (i.e., instructions). This program code may be stored on a computer-readable medium, such as a magnetic, electrical, or optical storage medium, including without limitation a floppy diskette, CD-ROM, CD-RW, DVD-ROM, DVD-RAM, magnetic tape, flash memory, hard disk drive, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer or server, the machine becomes an apparatus for practicing the invention. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, a computer on which the program code executes will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and/or storage elements), at least one input device, and at least one output device. The program code may be implemented in a high level procedural or object oriented programming language. Alternatively, the program code can be implemented in an assembly or machine language. In any case, the language may be a compiled or interpreted language. When implemented on a general-purpose processor, the program code may combine with the processor to provide a unique apparatus or machine that operates analogously to specific logic circuits.</p>
<p id="p-0187" num="0218">Moreover, the invention can be implemented in connection with any computer or other client or server device, which can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system or environment having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with processes for improving image processing in accordance with the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local services.</p>
<p id="p-0188" num="0219">Distributed computing facilitates sharing of computer resources and services by exchange between computing devices and systems. These resources and services include, but are not limited to, the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate processing performed in connection with the image processing using the methods of the present invention.</p>
<p id="p-0189" num="0220">Although not required, the invention can be implemented via an operating system, and/or included within application or server software that operates in accordance with the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, the invention may be practiced with other computer system configurations and protocols. Other well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like.</p>
<p id="p-0190" num="0221">Those skilled in the art will appreciate that other image processing features besides those specifically described herein may be used with the techniques described herein. Such variations are intended to be included within the scope of the invention as defined by the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08625895-20140107-M00001.NB">
<img id="EMI-M00001" he="9.57mm" wi="76.20mm" file="US08625895-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US08625895-20140107-M00002.NB">
<img id="EMI-M00002" he="7.45mm" wi="76.20mm" file="US08625895-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US08625895-20140107-M00003.NB">
<img id="EMI-M00003" he="9.57mm" wi="76.20mm" file="US08625895-20140107-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US08625895-20140107-M00004.NB">
<img id="EMI-M00004" he="7.45mm" wi="76.20mm" file="US08625895-20140107-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US08625895-20140107-M00005.NB">
<img id="EMI-M00005" he="8.81mm" wi="76.20mm" file="US08625895-20140107-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US08625895-20140107-M00006.NB">
<img id="EMI-M00006" he="6.35mm" wi="76.20mm" file="US08625895-20140107-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00007" nb-file="US08625895-20140107-M00007.NB">
<img id="EMI-M00007" he="7.03mm" wi="76.20mm" file="US08625895-20140107-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00008" nb-file="US08625895-20140107-M00008.NB">
<img id="EMI-M00008" he="8.81mm" wi="76.20mm" file="US08625895-20140107-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00009" nb-file="US08625895-20140107-M00009.NB">
<img id="EMI-M00009" he="8.81mm" wi="76.20mm" file="US08625895-20140107-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00010" nb-file="US08625895-20140107-M00010.NB">
<img id="EMI-M00010" he="6.01mm" wi="76.20mm" file="US08625895-20140107-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00011" nb-file="US08625895-20140107-M00011.NB">
<img id="EMI-M00011" he="8.81mm" wi="76.20mm" file="US08625895-20140107-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00012" nb-file="US08625895-20140107-M00012.NB">
<img id="EMI-M00012" he="6.35mm" wi="76.20mm" file="US08625895-20140107-M00012.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00013" nb-file="US08625895-20140107-M00013.NB">
<img id="EMI-M00013" he="9.57mm" wi="76.20mm" file="US08625895-20140107-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00014" nb-file="US08625895-20140107-M00014.NB">
<img id="EMI-M00014" he="7.45mm" wi="76.20mm" file="US08625895-20140107-M00014.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00015" nb-file="US08625895-20140107-M00015.NB">
<img id="EMI-M00015" he="9.57mm" wi="76.20mm" file="US08625895-20140107-M00015.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00016" nb-file="US08625895-20140107-M00016.NB">
<img id="EMI-M00016" he="7.45mm" wi="76.20mm" file="US08625895-20140107-M00016.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00017" nb-file="US08625895-20140107-M00017.NB">
<img id="EMI-M00017" he="9.57mm" wi="76.20mm" file="US08625895-20140107-M00017.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00018" nb-file="US08625895-20140107-M00018.NB">
<img id="EMI-M00018" he="7.45mm" wi="76.20mm" file="US08625895-20140107-M00018.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for detecting a table grid in a received digital document and extracting the table grid from the received digital document, comprising:
<claim-text>extracting connected components from the received digital document to identify table grid candidates;</claim-text>
<claim-text>extracting inverse cells from said table grid candidates;</claim-text>
<claim-text>extracting grid line components from said table grid candidates;</claim-text>
<claim-text>validating the grid line components as belonging to a table grid; and</claim-text>
<claim-text>extracting regular cells from said validated grid line components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein extracting inverse cells from said table grid candidates comprises generating a binary image from connected components by assigning white background and assigning all pixels in the connected components a black value, and applying a smearing operation to the generated binary image in both horizontal and vertical directions.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein extracting inverse cells from said table grid candidates comprises filling white holes in said connected components that are smaller than a predetermined size with black pixels.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein extracting inverse cells from said table grid candidates comprises removing horizontal and vertical short runs having lengths less than a predetermined threshold by setting pixels in said short runs to white color.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein extracting inverse cells from said table grid candidates comprises removing all black connected components in said binary image and validating whether each connected component may be an inverse cell.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein validating whether each connected component may be an inverse cell comprises for each extracted component with perimeter S, width w<sub>c</sub>, height h<sub>c </sub>and pixel number N<sub>p</sub>, calculating the rectangularity degree D<sub>rect </sub>of this connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00013" num="00013">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>D</mi>
      <mi>rect</mi>
    </msub>
    <mo>=</mo>
    <mrow>
      <mi>min</mi>
      <mo>(</mo>
      <mrow>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <msub>
              <mi>w</mi>
              <mi>c</mi>
            </msub>
            <mo>&#xb7;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <mfrac>
              <mrow>
                <mi>S</mi>
                <mo>-</mo>
                <mrow>
                  <mn>2</mn>
                  <mo>&#x2062;</mo>
                  <mstyle>
                    <mspace width="0.3em" height="0.3ex"/>
                  </mstyle>
                  <mo>&#x2062;</mo>
                  <mrow>
                    <mi>min</mi>
                    <mo>&#x2061;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <msub>
                          <mi>w</mi>
                          <mi>c</mi>
                        </msub>
                        <mo>,</mo>
                        <msub>
                          <mi>h</mi>
                          <mi>c</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
              </mrow>
              <mn>2</mn>
            </mfrac>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>min</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>w</mi>
                    <mi>c</mi>
                  </msub>
                  <mo>,</mo>
                  <msub>
                    <mi>h</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mfrac>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>and determining that the connected component is a valid inverse cell component if the rectangularity degree D<sub>rect </sub>is larger than a predefined threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein validating whether each connected component may be an inverse cell further comprises computing the variance V<sub>r </sub>of the lengths of all runs in the connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00014" num="00014">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>V</mi>
    <mi>r</mi>
  </msub>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>horizontal</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <msub>
                <mi>w</mi>
                <mi>c</mi>
              </msub>
            </mrow>
            <mo>&#x3c;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>vertical</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mi>Otherwise</mi>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<claim-text>where var(.) is an operator to compute the variance of an integer sequence, and determining that a connected component is an inverse cell component if V<sub>r </sub>is less than a threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein extracting grid line components from said table grid candidates comprises determining that any horizontal run or vertical run of pixels in said connected components not smaller than a threshold is part of a table grid.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>determining whether the density D of a connected component is greater than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component;</claim-text>
<claim-text>computing the ratio R<sub>t </sub>between the number of inverse cell component pixels and the number of the original connected component pixels; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid containing inverse cells if R<sub>t </sub>is greater than a second threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>determining whether the density D of a connected component is less than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid if D is less than said threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises determining whether every line component of the grid line components is long enough and large enough to be part of a table grid based on the width and height of each connected component of the grid line components.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>checking the number of horizontal and vertical grid line components;</claim-text>
<claim-text>when the number is greater than a predetermined number, identifying four margin lines that are two horizontal lines with minimum and maximum Y coordinates and two vertical lines with minimum and maximum X coordinates; and</claim-text>
<claim-text>determining that the grid line components are part of a round-corner grid when (1) the sum of the lengths of the four margin lines S<sub>l </sub>is greater than or equal to aS, where a is a value between 0 and 1 and S is the perimeter of an original table grid comprising a round-corner rectangle where S is defined as two times the width plus height of the connected components of the original table grid, and (2) the area A<sub>l </sub>of the table grid formed by the grid line components is greater than or equal to aA, where A is the area of the original table grid defined as width times the height of the original table grid.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>identifying the two longest horizontal lines and two longest vertical lines of said grid line components with a length tolerance T<sub>t</sub>;</claim-text>
<claim-text>identifying two horizontal margins as the longest horizontal line with length L<sub>h </sub>from horizontal grid line components;</claim-text>
<claim-text>getting all horizontal grid lines with length larger than L<sub>h</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>h</sub>;</claim-text>
<claim-text>from G<sub>h</sub>, taking the line with the minimum Y coordinate as the top margin and the line with the maximum Y coordinate as the bottom margin;</claim-text>
<claim-text>identifying two vertical margins as the longest vertical line with length L<sub>v </sub>from vertical grid line components;</claim-text>
<claim-text>getting all vertical grid lines with length larger than L<sub>v</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>v</sub>;</claim-text>
<claim-text>from G<sub>v</sub>, taking the line with the minimum X coordinate as the left margin and the line with the maximum X coordinate as the right margin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>calculating the distance between the left and right margins, the distance between the top and bottom margins, the position difference between end points of the left and right margins, the position difference between end points of the top and bottom margins, the height difference between the left and right margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>every pair of margins has the same length;</claim-text>
<claim-text>every pair of margins is at the same level;</claim-text>
<claim-text>there exists at least one thin margin;</claim-text>
<claim-text>the left and right margins are parallel;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises:
<claim-text>determining that the table grid comprises an open table defined as a table grid with only top and bottom margins and one or multiple vertical separator lines by:</claim-text>
<claim-text>computing the distance between the top and bottom margins, the position difference between end points of the top and bottom margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>there exists at least one vertical separator line;</claim-text>
<claim-text>the top and bottom margins have the same length;</claim-text>
<claim-text>the top and bottom margins are at the same level;</claim-text>
<claim-text>both the top and bottom margins are thin margins;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein validating the grid line components as belonging to a table grid comprises validating a single-cell by:
<claim-text>generating a binary image from the original connected components;</claim-text>
<claim-text>adding a black bounding box to the binary image;</claim-text>
<claim-text>extracting all white holes from the image to get the hole with a maximum area A<sub>max</sub>; and</claim-text>
<claim-text>validating the grid line components if the hole with the maximum area has an area that is at least a predetermined percentage of the total area of the original connected components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising separating noise, graphics, handwriting, and/or touching text from validated grid line components.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A system for detecting a table grid in a received digital document and extracting the table grid from the received digital document, comprising:
<claim-text>a memory that stores a received digital document for processing; and</claim-text>
<claim-text>a processor that is programmed to extract connected components from the received digital document to identify table grid candidates, extract inverse cells from said table grid candidates, extract grid line components from said table grid candidates, validate the grid line components as belonging to a table grid, and extract regular cells from said validated grid line components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor extracts inverse cells from said table grid candidates by generating a binary image from connected components by assigning white background and assigning all pixels in the connected components a black value, and applying a smearing operation to the generated binary image in both horizontal and vertical directions.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the processor extracts inverse cells from said table grid candidates by filling white holes in said connected components that are smaller than a predetermined size with black pixels.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the processor extracts inverse cells from said table grid candidates by removing horizontal and vertical short runs having lengths less than a predetermined threshold by setting pixels in said short runs to white color.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the processor extracts inverse cells from said table grid candidates by removing all black connected components in said binary image and validating whether each connected component may be an inverse cell.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the processor validates whether each connected component may be an inverse cell by, for each extracted component with perimeter S, width w<sub>c</sub>, height h<sub>c </sub>and pixel number N<sub>p</sub>, calculating the rectangularity degree D<sub>rect </sub>of this connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00015" num="00015">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>D</mi>
      <mi>rect</mi>
    </msub>
    <mo>=</mo>
    <mrow>
      <mi>min</mi>
      <mo>(</mo>
      <mrow>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <msub>
              <mi>w</mi>
              <mi>c</mi>
            </msub>
            <mo>&#xb7;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <mfrac>
              <mrow>
                <mi>S</mi>
                <mo>-</mo>
                <mrow>
                  <mn>2</mn>
                  <mo>&#x2062;</mo>
                  <mstyle>
                    <mspace width="0.3em" height="0.3ex"/>
                  </mstyle>
                  <mo>&#x2062;</mo>
                  <mrow>
                    <mi>min</mi>
                    <mo>&#x2061;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <msub>
                          <mi>w</mi>
                          <mi>c</mi>
                        </msub>
                        <mo>,</mo>
                        <msub>
                          <mi>h</mi>
                          <mi>c</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
              </mrow>
              <mn>2</mn>
            </mfrac>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>min</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>w</mi>
                    <mi>c</mi>
                  </msub>
                  <mo>,</mo>
                  <msub>
                    <mi>h</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mfrac>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>and determining that the connected component is a valid inverse cell component if the rectangularity degree D<sub>rect </sub>is larger than a predefined threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The system of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the processor validates whether each connected component may be an inverse cell by computing the variance V<sub>r </sub>of the lengths of all runs in the connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00016" num="00016">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>V</mi>
    <mi>r</mi>
  </msub>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>horizontal</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <msub>
                <mi>w</mi>
                <mi>c</mi>
              </msub>
            </mrow>
            <mo>&#x3c;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>vertical</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mi>Otherwise</mi>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<claim-text>where var(.) is an operator to compute the variance of an integer sequence, and determining that a connected component is an inverse cell component if V<sub>r </sub>is less than a threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor extracts grid line components from said table grid candidates by determining that any horizontal run or vertical run of pixels in said connected components not smaller than a threshold is part of a table grid.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>determining whether the density D of a connected component is greater than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component;</claim-text>
<claim-text>computing the ratio R<sub>t </sub>between the number of inverse cell component pixels and the number of the original connected component pixels; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid containing inverse cells if R<sub>t </sub>is greater than a second threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>determining whether the density D of a connected component is less than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid if D is less than said threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by determining whether every line component of the grid line components is long enough and large enough to be part of a table grid based on the width and height of each connected component of the grid line components.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>checking the number of horizontal and vertical grid line components;</claim-text>
<claim-text>when the number is greater than a predetermined number, identifying four margin lines that are two horizontal lines with minimum and maximum Y coordinates and two vertical lines with minimum and maximum X coordinates; and</claim-text>
<claim-text>determining that the grid line components are part of a round-corner grid when (1) the sum of the lengths of the four margin lines S<sub>l </sub>is greater than or equal to aS, where a is a value between 0 and 1 and S is the perimeter of an original table grid comprising a round-corner rectangle where S is defined as two times the width plus height of the connected components of the original table grid, and (2) the area A<sub>l </sub>of the table grid formed by the grid line components is greater than or equal to aA, where A is the area of the original table grid defined as width times the height of the original table grid.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>identifying the two longest horizontal lines and two longest vertical lines of said grid line components with a length tolerance T<sub>t</sub>;</claim-text>
<claim-text>identifying two horizontal margins as the longest horizontal line with length L<sub>h </sub>from horizontal grid line components;</claim-text>
<claim-text>getting all horizontal grid lines with length larger than L<sub>h</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>h</sub>;</claim-text>
<claim-text>from G<sub>h</sub>, taking the line with the minimum Y coordinate as the top margin and the line with the maximum Y coordinate as the bottom margin;</claim-text>
<claim-text>identifying two vertical margins as the longest vertical line with length L<sub>v </sub>from vertical grid line components;</claim-text>
<claim-text>getting all vertical grid lines with length larger than L<sub>v</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>v</sub>; and</claim-text>
<claim-text>from G<sub>v</sub>, taking the line with the minimum X coordinate as the left margin and the line with the maximum X coordinate as the right margin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>calculating the distance between the left and right margins, the distance between the top and bottom margins, the position difference between end points of the left and right margins, the position difference between end points of the top and bottom margins, the height difference between the left and right margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>every pair of margins has the same length;</claim-text>
<claim-text>every pair of margins is at the same level;</claim-text>
<claim-text>there exists at least one thin margin;</claim-text>
<claim-text>the left and right margins are parallel;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid by:
<claim-text>determining that the table grid comprises an open table defined as a table grid with only top and bottom margins and one or multiple vertical separator lines by:</claim-text>
<claim-text>computing the distance between the top and bottom margins, the position difference between end points of the top and bottom margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>there exists at least one vertical separator line;</claim-text>
<claim-text>the top and bottom margins have the same length;</claim-text>
<claim-text>the top and bottom margins are at the same level;</claim-text>
<claim-text>both the top and bottom margins are thin margins;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor validates the grid line components as belonging to a table grid comprises validating a single-cell by:
<claim-text>generating a binary image from the original connected components;</claim-text>
<claim-text>adding a black bounding box to the binary image;</claim-text>
<claim-text>extracting all white holes from the image to get the hole with a maximum area A<sub>max</sub>; and</claim-text>
<claim-text>validating the grid line components if the hole with the maximum area has an area that is at least a predetermined percentage of the total area of the original connected components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor further separates noise, graphics, handwriting, and/or touching text from validated grid line components.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. A computer readable storage medium containing instructions stored thereon that when processed by a processor implements method for detecting a table grid in a received digital document and extracting the table grid from the received digital document by:
<claim-text>extracting connected components from the received digital document to identify table grid candidates;</claim-text>
<claim-text>extracting inverse cells from said table grid candidates;</claim-text>
<claim-text>extracting grid line components from said table grid candidates;</claim-text>
<claim-text>validating the grid line components as belonging to a table grid; and</claim-text>
<claim-text>extracting regular cells from said validated grid line components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for extracting inverse cells from said table grid candidates comprises instructions for generating a binary image from connected components by assigning white background and assigning all pixels in the connected components a black value, and by applying a smearing operation to the generated binary image in both horizontal and vertical directions.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The medium of <claim-ref idref="CLM-00036">claim 36</claim-ref>, wherein the instructions for extracting inverse cells from said table grid candidates comprises instructions for filling white holes in said connected components that are smaller than a predetermined size with black pixels.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The medium of <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the instructions for extracting inverse cells from said table grid candidates comprises instructions for removing horizontal and vertical short runs having lengths less than a predetermined threshold by setting pixels in said short runs to white color.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The medium of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein the instructions for extracting inverse cells from said table grid candidates comprises instructions for removing all black connected components in said binary image and validating whether each connected component may be an inverse cell.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The medium of <claim-ref idref="CLM-00039">claim 39</claim-ref>, wherein the instructions for validating whether each connected component may be an inverse cell comprises instruction for, for each extracted component with perimeter S, width w<sub>c</sub>, height h<sub>c </sub>and pixel number N<sub>p</sub>, calculating the rectangularity degree D<sub>rect </sub>of this connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00017" num="00017">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>D</mi>
      <mi>rect</mi>
    </msub>
    <mo>=</mo>
    <mrow>
      <mi>min</mi>
      <mo>(</mo>
      <mrow>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <msub>
              <mi>w</mi>
              <mi>c</mi>
            </msub>
            <mo>&#xb7;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mfrac>
          <msub>
            <mi>N</mi>
            <mi>p</mi>
          </msub>
          <mrow>
            <mfrac>
              <mrow>
                <mi>S</mi>
                <mo>-</mo>
                <mrow>
                  <mn>2</mn>
                  <mo>&#x2062;</mo>
                  <mstyle>
                    <mspace width="0.3em" height="0.3ex"/>
                  </mstyle>
                  <mo>&#x2062;</mo>
                  <mrow>
                    <mi>min</mi>
                    <mo>&#x2061;</mo>
                    <mrow>
                      <mo>(</mo>
                      <mrow>
                        <msub>
                          <mi>w</mi>
                          <mi>c</mi>
                        </msub>
                        <mo>,</mo>
                        <msub>
                          <mi>h</mi>
                          <mi>c</mi>
                        </msub>
                      </mrow>
                      <mo>)</mo>
                    </mrow>
                  </mrow>
                </mrow>
              </mrow>
              <mn>2</mn>
            </mfrac>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>min</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>w</mi>
                    <mi>c</mi>
                  </msub>
                  <mo>,</mo>
                  <msub>
                    <mi>h</mi>
                    <mi>c</mi>
                  </msub>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mfrac>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>and for determining that the connected component is a valid inverse cell component if the rectangularity degree D<sub>rect </sub>is larger than a predefined threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The medium of <claim-ref idref="CLM-00040">claim 40</claim-ref>, wherein the instructions for validating whether each connected component may be an inverse cell further comprises instructions for computing the variance V<sub>r </sub>of the lengths of all runs in the connected component as follows:</claim-text>
<claim-text>
<maths id="MATH-US-00018" num="00018">
<math overflow="scroll">
<mrow>
  <msub>
    <mi>V</mi>
    <mi>r</mi>
  </msub>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>horizontal</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <msub>
                <mi>w</mi>
                <mi>c</mi>
              </msub>
            </mrow>
            <mo>&#x3c;</mo>
            <msub>
              <mi>h</mi>
              <mi>c</mi>
            </msub>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mi>var</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>lengths</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>of</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>all</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>vertical</mi>
                <mo>&#x2062;</mo>
                <mstyle>
                  <mspace width="0.8em" height="0.8ex"/>
                </mstyle>
                <mo>&#x2062;</mo>
                <mi>runs</mi>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mi>Otherwise</mi>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<claim-text>where var(.) is an operator to compute the variance of an integer sequence, and for determining that a connected component is an inverse cell component if V<sub>r </sub>is less than a threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for extracting grid line components from said table grid candidates comprises instructions for determining that any horizontal run or vertical run of pixels in said connected components not smaller than a threshold is part of a table grid.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>determining whether the density D of a connected component is greater than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component;</claim-text>
<claim-text>computing the ratio R<sub>t </sub>between the number of inverse cell component pixels and the number of the original connected component pixels; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid containing inverse cells if R<sub>t </sub>is greater than a second threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>determining whether the density D of a connected component is less than a threshold, where D is the number of pixels in the connected component divided by the product of the width and height of the connected component; and</claim-text>
<claim-text>determining that the grid line components belong to a table grid if D is less than said threshold.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for determining whether every line component of the grid line components is long enough and large enough to be part of a table grid based on the width and height of each connected component of the grid line components.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>checking the number of horizontal and vertical grid line components;</claim-text>
<claim-text>when the number is greater than a predetermined number, identifying four margin lines that are two horizontal lines with minimum and maximum Y coordinates and two vertical lines with minimum and maximum X coordinates; and</claim-text>
<claim-text>determining that the grid line components are part of a round-corner grid when (1) the sum of the lengths of the four margin lines S<sub>l </sub>is greater than or equal to aS, where a is a value between 0 and 1 and S is the perimeter of an original table grid comprising a round-corner rectangle where S is defined as two times the width plus height of the connected components of the original table grid, and (2) the area A<sub>l </sub>of the table grid formed by the grid line components is greater than or equal to aA, where A is the area of the original table grid defined as width times the height of the original table grid.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>identifying the two longest horizontal lines and two longest vertical lines of said grid line components with a length tolerance T<sub>t</sub>;</claim-text>
<claim-text>identifying two horizontal margins as the longest horizontal line with length L<sub>h </sub>from horizontal grid line components;</claim-text>
<claim-text>getting all horizontal grid lines with length larger than L<sub>h</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>h</sub>;</claim-text>
<claim-text>from G<sub>h</sub>, taking the line with the minimum Y coordinate as the top margin and the line with the maximum Y coordinate as the bottom margin;</claim-text>
<claim-text>identifying two vertical margins as the longest vertical line with length L<sub>v </sub>from vertical grid line components;</claim-text>
<claim-text>getting all vertical grid lines with length larger than L<sub>v</sub>&#x2212;T<sub>t </sub>and putting them in a group G<sub>v</sub>; and</claim-text>
<claim-text>from G<sub>v</sub>, taking the line with the minimum X coordinate as the left margin and the line with the maximum X coordinate as the right margin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The medium of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>calculating the distance between the left and right margins, the distance between the top and bottom margins, the position difference between end points of the left and right margins, the position difference between end points of the top and bottom margins, the height difference between the left and right margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>every pair of margins has the same length;</claim-text>
<claim-text>every pair of margins is at the same level;</claim-text>
<claim-text>there exists at least one thin margin;</claim-text>
<claim-text>the left and right margins are parallel;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The medium of <claim-ref idref="CLM-00047">claim 47</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for:
<claim-text>determining that the table grid comprises an open table defined as a table grid with only top and bottom margins and one or multiple vertical separator lines by:</claim-text>
<claim-text>computing the distance between the top and bottom margins, the position difference between end points of the top and bottom margins, and the width difference between the top and bottom margins; and</claim-text>
<claim-text>validating the grid line components if each of the following tests is satisfied:</claim-text>
<claim-text>there exists at least one vertical separator line;</claim-text>
<claim-text>the top and bottom margins have the same length;</claim-text>
<claim-text>the top and bottom margins are at the same level;</claim-text>
<claim-text>both the top and bottom margins are thin margins;</claim-text>
<claim-text>the top and bottom margins are parallel; and</claim-text>
<claim-text>the table grid is large enough.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions for validating the grid line components as belonging to a table grid comprises instructions for validating a single-cell by:
<claim-text>generating a binary image from the original connected components;</claim-text>
<claim-text>adding a black bounding box to the binary image;</claim-text>
<claim-text>extracting all white holes from the image to get the hole with a maximum area A<sub>max</sub>; and</claim-text>
<claim-text>validating the grid line components if the hole with the maximum area has an area that is at least a predetermined percentage of the total area of the original connected components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, further comprising instructions for separating noise, graphics, handwriting, and/or touching text from validated grid line components. </claim-text>
</claim>
</claims>
</us-patent-grant>

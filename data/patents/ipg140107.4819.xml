<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625912-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625912</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12331312</doc-number>
<date>20081209</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>638</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>36</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382233</main-classification>
</classification-national>
<invention-title id="d2e55">JPEG 2000-like access using the JPM compound document file format</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7477793</doc-number>
<kind>B1</kind>
<name>Boliek et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382240</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7577301</doc-number>
<kind>B1</kind>
<name>Wu et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382233</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7583847</doc-number>
<kind>B1</kind>
<name>Boliek et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>382240</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0091665</doc-number>
<kind>A1</kind>
<name>Beek et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>&#x201c;Facsimile coding schemes and coding control functions for group 4 facsimile apparatus,&#x201d; ITU-T Rec. T.6, Nov. 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>&#x201c;Mixed Raster Content (MRC),&#x201d; ITU-T Rec. T.44, Study Group-8 Contributions, 1997.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Bottou, L., et al, &#x201c;Efficient Conversion of Digital Documents to Multilayer Raster Formats,&#x201d; Int. Conf. Doc. Analysis and Recognition, Seattle, WA, pp. 444-448, Sep. 2001.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Bottou, L., et al, &#x201c;High Quality Document Image Compression with DjVu,&#x201d; J. Electronic Image, pp. 410-425, Jul. 1998).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>De Queiroz, R.L., et al, &#x201c;Optimizing Block-Thresholding Segmentation for Multilayer Compression of Compound Images,&#x201d; IEEE Trans. on Image Processing, vol. 9, No. 9, pp. 1461-1471, Sep. 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Huttenlocher, D., et al, &#x201c;Digipaper: A Versatile Color Document Image Representation,&#x201d; Proc. Int. Conf. on Image Processing, Kobe, Japan, Oct. 1999.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>JBIG&#x2014;&#x201c;Information Technology&#x2014;Coded representation of picture and audio information&#x2014;Progressive bi-level image compression,&#x201d; ITU-T Rec. T.82, Mar. 1995.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>JBIG-2&#x2014;&#x201c;Information Technology&#x2014;Lossy/Lossless coding of bi-level images,&#x201d; ITU-T Rec. T.88, Feb. 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>McIntyre, L, &#x201c;File Format for Internet Fax,&#x201d; IETF FRC 2301, http://www.ietf.org/rfc/rfc2301.text, Mar. 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Mukherjee, C. Chrysafis, &#x201c;JPEG 2000-Matched MRC Compression of Compound Documents,&#x201d; Proc. Int. Conf. on Image Processing, Rochester, New York, Sep. 2002.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>W3C, &#x201c;Scalable Vector Graphics (SVG)&#x201d;, &#x3c;http://www.w3.org/TR/SVG&#x3e;, dated Jun. 22, 2010, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Buckley et al. (&#x201c;JPEG 2000 Part 6 FCD 15444-6&#x201d;, Published on Nov. 16, 2001, pp. i-iv and 1-76).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>William Blake (&#x201c;Xerox Research Allows Web Visitors to View Richer, More Coloful Images&#x201d;, Published on Oct. 4, 2002, one page).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>W.P. Pennebaker, et al. &#x201c;JPEG Still Image Compression Standard&#x201d;, Chapters 1-14, published 1993.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>D.S. Taubman, et al. &#x201c;JPEG 2000 Image Coding System&#x201d;, 226 pages, Published Aug. 18, 2000.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382173</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382232</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382233</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382240</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382244</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382245</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382302</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>358  115</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707102</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>23</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10404507</doc-number>
<date>20030331</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7477793</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12331312</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090180699</doc-number>
<kind>A1</kind>
<date>20090716</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Boliek</last-name>
<first-name>Martin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Kok G.</first-name>
<address>
<city>Daly City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Schwartz</last-name>
<first-name>Edward L.</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gormish</last-name>
<first-name>Michael J.</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Boliek</last-name>
<first-name>Martin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Kok G.</first-name>
<address>
<city>Daly City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Schwartz</last-name>
<first-name>Edward L.</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Gormish</last-name>
<first-name>Michael J.</first-name>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Blakely, Sokoloff, Taylor &#x26; Zafman LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Ricoh Co., Ltd.</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dang</last-name>
<first-name>Duy M</first-name>
<department>2667</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Compound document images are usually high resolution and high quality images that include color, graphics, and images in addition to text. The need for good compression is important for storage and transmission. Due to the large size, even compressed, it is often difficult to access document images quickly and efficiently for display on monitors. The nascent JPM file format enables the best compound document image compression in terms of rate-distortion. However, the access into a JPM file is limited by the access features of the coders used. JPEG 2000 is an image coding system that allows access to lower resolutions, progressive bit-rates, and regions of interest.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="135.47mm" wi="210.14mm" file="US08625912-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="210.82mm" wi="152.32mm" orientation="landscape" file="US08625912-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="134.96mm" wi="170.35mm" file="US08625912-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="190.58mm" wi="168.66mm" orientation="landscape" file="US08625912-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="133.86mm" wi="168.32mm" file="US08625912-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="218.95mm" wi="113.71mm" orientation="landscape" file="US08625912-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="225.30mm" wi="146.05mm" file="US08625912-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="217.25mm" wi="135.30mm" orientation="landscape" file="US08625912-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="205.06mm" wi="144.70mm" orientation="landscape" file="US08625912-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="226.65mm" wi="152.82mm" orientation="landscape" file="US08625912-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="136.65mm" wi="176.11mm" file="US08625912-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="153.84mm" wi="173.74mm" file="US08625912-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="243.84mm" wi="188.89mm" file="US08625912-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="214.21mm" wi="178.14mm" file="US08625912-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="227.41mm" wi="154.86mm" file="US08625912-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="246.21mm" wi="185.17mm" file="US08625912-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="243.25mm" wi="186.52mm" file="US08625912-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="240.45mm" wi="188.89mm" file="US08625912-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="199.73mm" wi="181.44mm" file="US08625912-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This is a divisional of U.S. application Ser. No. 10/404,507, filed on Mar. 31, 2003 now U.S. Pat. No. 7,477,793, entitled &#x201c;JPEG 2000-Like Access Using the JPM Compound Document File Format,&#x201d; assigned to the corporate assignee of the present invention and incorporated herein by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates to the field of file formats; more particularly, the present invention relates to accessing coded data using specific file formats.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Documents often include not only text, but color graphics and imagery. These are often referred to as compound documents. Magazines, newspapers, brochures and annual reports have had these attributes for a long time. With the popularity of desktop publishing, color scanners, color printers, color copiers and color digital cameras for the consumer and office markets, the ability to make use of color, graphics and imagery in documents is now commonplace.</p>
<p id="p-0005" num="0004">There are various compressors for specific image types. These include fax compression technologies such as G3, G4, MMR, and JBIG. Other well-known compression technologies include JPEG.</p>
<p id="p-0006" num="0005">Some compressors can handle portions of these document efficiently based on their data types. However, many of these compressors cannot handle compound documents well. For example, binary compressors, such as JBIG, provide excellent compression for text that can be characterized as binary. However, such compressors, including the traditional facsimile compression technologies (G3, G4, MMR, JBIG), are insufficient for color images or even grayscale. Similarly, continuous tone compressors like, for example, JPEG, are better natural images with little high frequency information yet wide dynamic range JPEG (see W. P. Pennebaker, J. L. Mitchell, <i>JPEG: Still Image Compression Standard</i>, Van Nostrand Reinhold, 1993) or JPEG 2000 (see &#x201c;Information Technology&#x2014;JPEG 2000 Image Coding Standard,&#x201d; <i>ITU</i>-<i>T Rec. T.</i>800<i>|IS </i>15444-1, December 2000 and D. S. Taubman, M. W. Marcellin, <i>JPEG </i>2000 <i>Image Compression Fundamentals, Standards, and Practice</i>, Kluwer Academic Publishers, Boston, 2002). However, JPEG does not provide a lossless representation and is not so efficient for sharp edges created by text.</p>
<p id="p-0007" num="0006">Furthermore, none of these technologies discussed above allows access of lower resolution, progression from lossy to lossless, or access to regions-of-interest. This access is useful for delivering document images from databases or capture devices, to different target devices such as computer and PDA displays, and printers.</p>
<p id="p-0008" num="0007">JPEG 2000 is a state-of-the-art continuous-tone image coding system. Based on wavelet transform technology followed by bit-plane coding, JPEG 2000 generally provides better rate-distortion performance than the original discrete cosine transform based JPEG coding system. However, the real advantages of JPEG 2000 are the access of different resolutions, progressive bit-rates from very lossy to lossless, access to regions-of-interest, and access to color components. Although JPEG 2000 is capable of reasonable lossless performance on binary images, it is not as good as a dedicated binary image compressor like JBIG or JBIG-2.</p>
<p id="p-0009" num="0008">Many have been working on the problem of determining how a page image should be segmented for the best rate-distortion. For example, see D. Mukherjee, C. Chrysafis, &#x201c;JPEG 2000-Matched MRC Compression of Compound Documents&#x201d; <i>Proc. Int. Conf on Image Processing</i>, Rochester, N.Y., September 2002; R. L. de Queiroz, Z. Fan, T. D. Tran, &#x201c;Optimizing Block-Thresholding Segmentation for Multilayer Compression of Compound Images,&#x201d; <i>IEEE Trans. on Image Processing</i>, Vol. 9, No. 9, pp. 1461-71, September 2000; and L. Bottou, P. Haffner, Y. LeCun, &#x201c;Efficient Conversion of Digital Documents to Multilayer Raster Formats,&#x201d; <i>Int. Conf. Doc. Analysis and Recognition</i>, Seattle, Wash., pp. 444-48, September 2001.</p>
<p id="p-0010" num="0009">JPM is a new standard file format that has been designed to address these problems. The JPM file format (JPEG Mixed Raster Content) is Part 6 of the JPEG 2000 standard. See &#x201c;Information Technology&#x2014;JPEG 2000 Image Coding Standard&#x2014;Part 6: Compound Image File Format,&#x201d; ISO/IEC FDIS 15444-6. The JPM standard is a file format that specifies multiple page collections and pages, multiple objects with object images, mask (binary or alpha), location, scale, and order, and background color. The algorithms and implementations for the encoder include how to segment the image into objects, which of a variety of image compressors to use for each object, while how to construct the objects is left unspecified for the encoder. <figref idref="DRAWINGS">FIG. 1A</figref> shows an example of some of the elements of a JPM file.</p>
<p id="p-0011" num="0010">JPM enables the segmentation of document images into images that are better compressed by different standard image compressors. For example, text and graphic images with high frequency information but little dynamic range are best compressed with a binary coder such as Group 4 (&#x201c;Facsimile coding schemes and coding control functions for group 4 facsimile apparatus,&#x201d; <i>ITU</i>-<i>T Rec. T.</i>6, November 1998), or JBIG (&#x201c;Information Technology&#x2014;Coded representation of picture and audio information&#x2014;Progressive bi-level image compression,&#x201d; <i>ITU</i>-<i>T Rec. T.</i>82, March 1995), or JBIG-2 (&#x201c;Information Technology&#x2014;Lossy/Lossless coding of bi-level images,&#x201d; <i>ITU</i>-<i>T Rec. T.</i>88, February 2000).</p>
<p id="p-0012" num="0011">JPM has three key advantages. First, it allows JPEG 2000 coder use. Second, it allows multiple pages and collections of pages to be contained, or referenced, in a single file. Third, it enables a compressed masked imaging system. Called &#x201c;layout objects&#x201d;, they contain a &#x201c;mask,&#x201d; &#x201c;image,&#x201d; and attributes such as order (with respect to other objects), scale, position, and cropping (or extent). These layout objects are merged together to form the final &#x201c;page&#x201d; image. <figref idref="DRAWINGS">FIG. 1B</figref> shows an example of the merging of JPM objects with image and mask elements.</p>
<p id="p-0013" num="0012">JPM is considered by some to be a descendent from the Mixed Raster Content file format often used for Internet-based facsimile. See &#x201c;Mixed Raster Content (MRC),&#x201d; <i>ITU</i>-<i>T Rec. T.</i>44, Study Group-8 Contributions, 1998. Mixed Raster Content was standardized as ITU-T Rec. T.44 (&#x201c;Mixed Raster Content (MRC),&#x201d; <i>ITU</i>-<i>T Rec. T.</i>44, Study Group-8 Contributions, 1998). This standard was used in the IETF facsimile standard (&#x201c;File Format for Internet Fax,&#x201d; IETF FRC 2301, http://www.ietf.org/rfc/rfc2301.txt, March 1998) and Xerox's Digipaper product (see D. Huttenlocher, P. Felzenszwalb, W. Ruckidge, &#x201c;Digipaper: A Versatile Color Document Image Representation,&#x201d; <i>Proc. Int. Conf on Image Processing</i>, Kobe, Japan, October 1999).</p>
<p id="p-0014" num="0013">Another related technology that preceded JPM is DjVu (see L. Bottou, et. al., &#x201c;High Quality Document Image Compression with DjVu,&#x201d; <i>J. Electronic Imaging</i>, pp. 410-25, July 1998). This technology is similar to, but not compliant with, Mixed Raster Content. However, it does take advantage of wavelet technology for continuous-tone coding. Another related technology is Scalable Vector Graphics (SVG) standardized by the W3C (see http://www.w3.org/TR/SVG). This technology provides multiple resolutions for objects, but limited options for raster content.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0015" num="0014">Method and apparatus for providing access features with JPM files is disclosed. In one embodiment, the method comprises receiving a JPEG 2000 codestream and multiple binary codestreams in a JPM file, including codestreams of redundant binary masks, where each of the binary redundant masks is a different resolution, and accessing only the mask codestream and the JPEG 2000 codestream for a specified resolution.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015">The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1A</figref> shows an example of the elements of a JPM file.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 1B</figref> is an example of a compound document from object masks and images.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 2A</figref> illustrates a redundant binary mask for resolution progression.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2B</figref> illustrates resolution access with JBIG resolution reduction.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3A</figref> illustrates tiled binary masks for region-of-interest access.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 3B</figref> illustrates region of interest access with banded and tiled binary (JBIG) codestreams.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 3C</figref> illustrates an exemplary JPM file.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 3D</figref> illustrates another JPM file in which boxes are arranged to facilitate progressive processing.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 4</figref> illustrates JPEG 2000 codestream access via shared data boxes.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 5</figref> illustrates exemplary metadata for a compact index representation of a shared data entry box.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 6</figref> illustrates another exemplary metadata for a compact index representation of a shared data entry box.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 7</figref> illustrates still another exemplary metadata for a compact index representation of a shared data entry box.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an exemplary metadata for pages and page collection descriptions.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an example of pointers in a JPM file.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 10</figref> illustrates parsing a JPM file.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 11</figref> is a multi-page description of JPM access.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 12</figref> illustrates a hierarchical relationship regarding a page collection arranged by tile with the tiles from each page collected together.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 13</figref> illustrates a hierarchical relationship regarding a page collection arranged by page with all tiles for each page collected together.</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 14A</figref> is an example that shows parsing a lossless JPM file to a low bit-rate JPM file.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 14B</figref> is an example showing a parser switching a page into a free box and out of a free box.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 14C</figref> illustrates a parser parsing a 2-page JPM file to a 1-page JPM file.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 15</figref> is a block design of a computer system.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 16</figref> illustrates a flow diagram of the use of a consolidator after parsing a JPM file.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE PRESENT INVENTION</heading>
<p id="p-0040" num="0039">A method and apparatus for creating standard JPM document files that have one or more of the following features: that have access to lower resolutions, progression bit rates, region of interest; that fragment codestreams via parsing or re-rendering without decoding; that collect pages of different characteristic or integrate descriptions of one page of those characteristics (e.g., thumbnail, monitor resolution, etc.); and that have metadata to describe all of these features.</p>
<p id="p-0041" num="0040">In the following description, numerous details are set forth to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.</p>
<p id="p-0042" num="0041">Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0043" num="0042">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;processing&#x201d; or &#x201c;computing&#x201d; or &#x201c;calculating&#x201d; or &#x201c;determining&#x201d; or &#x201c;displaying&#x201d; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0044" num="0043">The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.</p>
<p id="p-0045" num="0044">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.</p>
<p id="p-0046" num="0045">A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable medium includes read only memory (&#x201c;ROM&#x201d;); random access memory (&#x201c;RAM&#x201d;); magnetic disk storage media; optical storage media; flash memory devices; electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.</p>
<p id="h-0006" num="0000">Overview</p>
<p id="p-0047" num="0046">This application describes using JPEG 2000 in conjunction with older binary coders with a JPM file. Using these techniques, it is possible to get close to the best rate distortion performance and have access into the JPM file. A description of how to access lower resolutions, regions, and bit-rate progression of the page image is described below, particularly in cooperation with the use of a file format such as JPM. It is in the organization of objects, use of redundant objects and codestreams, use of shared data, arrangement of object masks, and use of metadata that contributes to techniques described herein.</p>
<p id="p-0048" num="0047">Other formats, such as JPEG, could be used with these techniques.</p>
<p id="h-0007" num="0000">JPM Features</p>
<p id="p-0049" num="0048">JPM is a multiple page file format that uses an object-based representation of a page, where each layout object has a scale, location, and possibly an object mask and/or an object image. No more than one codestream is associated with an object mask or with an object image.</p>
<p id="p-0050" num="0049">A JPM file is made up of boxes. Some of the boxes may contain codestreams. These codestreams may be object images or object masks that are encoded with one particular encoder. Since object masks are typically binary, they are typically compressed with a binary compressor (e.g., a JBIG compressor), while images are often continuous-tone and compressed with a continuous tone compressor (e.g., a JPEG 2000 compressor). However, object masks may be continuous tone (contone) and object images may be binary and can be compressed accordingly. The techniques for extending JPEG 2000 access features to the JPM file can be used with any non-JPEG 2000 encoder for either an object mask or image.</p>
<p id="p-0051" num="0050">Note that the techniques described herein may be used with JPEG 2000. A separate set of techniques is described herein to achieve these features for non-JPEG 2000 type compressors. The application of these techniques is independent of whether the object is an object image or object mask.</p>
<p id="p-0052" num="0051">Note also that the techniques described herein do not require having a codestream in a box, although a box may refer to a file.</p>
<p id="h-0008" num="0000">JPEG 2000 Coding Features</p>
<p id="p-0053" num="0052">JPEG 2000 is a continuous-tone image compression system designed to provide state-of-the-art compression while also having features like access to lower resolutions, lossy to lossless bit-rate progression, and region-of-interest access. JPEG 2000 takes advantage of a wavelet transformation for multiresolution access, bit-plane coding of the coefficients for bit-rate progression, and tiling, precincts and coefficient shifting for region-of-interest access. JPEG 2000 can be used for the image and/or mask part of an object.</p>
<p id="p-0054" num="0053">JPM was not designed with these features in mind. It was designed to store multiple pages with multiple objects oriented within a page. There is no inherent scalability in non-JPEG 2000 codestreams. The JPM binary object mask and image architecture does not trivially allow these desirable features. Portions of this disclosure describe techniques to create and access JPM files that allow this type of access.</p>
<p id="p-0055" num="0054">One technique described herein includes storing some redundant data (e.g., extra pages, extra object masks, extra metadata, extra boxes, etc.) and some non-redundant data (e.g., JPEG 2000 compressed images) to allow progression and manipulation of a JPM file. In this way, the JPEG 2000 features are preserved.</p>
<p id="h-0009" num="0000">Access Features</p>
<p id="p-0056" num="0055">JPEG 2000 allows many different types of access to the codestream. A number of these access features may be used to achieve JPEG 2000 type access when a codestream is stored in a JPM file. That is, when both JPEG 2000 and non-JPEG 2000 codestreams are stored in a JPM file, some of the same types of access that are permitted to JPEG 2000 codestreams using standard JPEG 2000 decoders are available. Note that this access may be independent of how the codestream is stored.</p>
<p id="p-0057" num="0056">The access features described below are based on dividing up one or more codestreams in a known manner and creating a legal JPM codestream that may be operated upon by a dumb decoder to produce an output image or by a smart decoder that is able to take advantage of how the codestream(s) are arranged inside the file to provide a desired access to the JPM file. A dumb decoder is a decoder that is capable of handling a standard compliant JPM file, while a smart decoder is a decoder that is capable of handling a standard compliant JPM file in addition to being able to handle other features.</p>
<p id="h-0010" num="0000">Resolution Access with Redundant Object Masks</p>
<p id="p-0058" num="0057">JPEG 2000 files allow access to resolutions that differ in size by powers of 2. For JPEG 2000, if an individual desires a lower resolution image, the packets in the codestream corresponding to the lower resolution sub-bands may be taken in a manner well-known in the art and described in the JPEG 2000 standard. The number of resolutions available depends on the number of decompositions performed.</p>
<p id="p-0059" num="0058">There are other coders for which JPM object masks and JPM object images may be used that don't have the same features as JPEG 2000. For these cases, the coders may be supplemented with additional functionality to generate images at different resolutions or may utilize redundant codestreams in the file to achieve redundant codestreams. This information may be wrapped in boxes, referenced by page descriptions, and explained by metadata in boxes or referenced in other boxes to create the correct JPM file for the various resolutions.</p>
<p id="p-0060" num="0059">More specifically, in one embodiment, a decoder receives a command to provide an output image at a particular resolution. The command may come from an application program, a command line interface, a user interface, a parser, or any other well-known command generator. In response to the command, the decoder accesses a JPM file and locates the object masks corresponding to the requested resolution and decodes it. In one embodiment, the decoding may be performed using a JBIG decoder. Similarly, the decoder accesses only that portion of the JPEG 2000 codestream necessary to obtain object image at the desired resolution in a manner well-known in the art for JPEG 2000 processing.</p>
<p id="p-0061" num="0060">In one embodiment, to obtain better compression performance, most object masks and some object images may be better compressed with a binary compressor. To achieve lower resolution, it is certainly possible to decode an object mask and scale it to the correct size. To do this, it is important to match the downsampled object mask to the downsampled object image for the best reconstructed object.</p>
<p id="p-0062" num="0061">For faster access and to be able to be decoded by standard decoders, it may be desirable to have redundant versions of the binary object mask (or image). <figref idref="DRAWINGS">FIG. 2A</figref> shows an example resolution access to three resolutions with the JPEG 2000 image codestream. In one embodiment, different resolutions are all available by storing multiple binary (e.g., JBIG) codestreams in a JPM file. In one embodiment, these are redundant binary object masks and only differ in resolution. In one embodiment, to create three resolutions for the object mask, three JBIG codestreams are used. Referring to <figref idref="DRAWINGS">FIG. 2A</figref>, JPEG 2000 resolution progression enables access to various resolutions from the same codestream using a JPEG 2000 decoder. The resulting images are shown as images <b>2002</b>, <b>2003</b>, and <b>2004</b>. These are accessed in a manner well-known in JPEG 2000 by accessing the JPEG 2000 codestream to a certain depth using the correct headers associated with data in a manner well-known in the art. There is also a unique JBIG codestream at each resolution. To obtain the desired resolution, only the JBIG codestream for the desired resolution is obtained from the file and decoded. Note that in one embodiment, the object image in the JPM file in <figref idref="DRAWINGS">FIG. 2A</figref> is the JPEG 2000 codestream while the JBIG codestreams represent redundant versions of the object mask, with the background color for the output image being white; however, the association of the object image to the JPEG 2000 codestream and JBIG codestreams to the object mask may be reversed.</p>
<p id="p-0063" num="0062">The JBIG standard does provide for encoding two resolutions for one codestream with the lower resolution appearing in the codestream first and being independently decodable. This can be used to reduce the number of codestreams to</p>
<p id="p-0064" num="0063">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2308;</mo>
    <mfrac>
      <mi>num_res</mi>
      <mn>2</mn>
    </mfrac>
    <mo>&#x2309;</mo>
  </mrow>
  <mo>.</mo>
</mrow>
</math>
</maths>
<br/>
This is shown in <figref idref="DRAWINGS">FIG. 2B</figref>. Referring to <figref idref="DRAWINGS">FIG. 2B</figref>, the first JBIG codestream <b>210</b> corresponds to images <b>220</b> and <b>221</b>, while the second JBIG codestream <b>211</b> corresponds to image <b>222</b>. These can be used to reduce redundant codestreams.
</p>
<p id="p-0065" num="0064">A smart decoder accesses only the object mask codestreams and the JPEG 2000 codestream resolution necessary to reconstruct the desired image in order to generate an image at the desired resolution. Such a smart decoder may know which object mask is which in the JPM file by using metadata in the JPM file. Alternatively, a non-metadata way is to arrange object masks in resolution order may be used.</p>
<p id="p-0066" num="0065">Page box and page collections may also be used to inform a smart decoder about which object mask is which in a JPM file.</p>
<p id="h-0011" num="0000">Region of Interest (ROI)</p>
<p id="p-0067" num="0066">There are two basic types of ROI, predetermined ROI (at encode time) and user interactive (on the fly, at decode or transmission time). Predetermined ROI is supported in the JPEG 2000 codestreams by the ROI coefficient shifting functions (see JPEG 2000 Part 1). If a JPEG 2000 codestream is prepared in this way, then it can be placed in a JPM codestream.</p>
<p id="p-0068" num="0067">Normal JPEG 2000 bit-rate progression exposes and refines the ROI areas before the background. This may be implemented by having a self-masking JPEG 2000 codestream. In this case, the mask of the object would be fully rendered and the JPEG 2000 codestream would only have the ROI rendered.</p>
<p id="p-0069" num="0068">Another way to execute predetermined ROI in JPM is to create objects that correspond to the ROI. That is, using object ordering, a number of objects, n, that fit into the region of interest, where n is greater than or equal to one, and a smart decoder stops decoding after the region of interest or sets up a page to only contain that region of interest. These objects would be called out first in the Page box. In this case, both the mask and image of the object are fully rendered before the next object is rendered.</p>
<p id="p-0070" num="0069">In another embodiment, the other method of ROI is interactive with the user. Perhaps the user desires to zoom or pan around an image. To facilitate this functionality, the document is &#x201c;tiled&#x201d; into adjacent rectangular and regular objects. The binary object mask is divided into the correct independent codestreams for each &#x201c;tile&#x201d; (with perhaps redundant codestreams for different resolutions, etc.). The JPEG 2000 codestream may remain one codestream with the shared data entry boxes (SDEs) or tile-parts for a &#x201c;tile&#x201d; associated with the object. Thus, objects are used as tiles.</p>
<p id="p-0071" num="0070">Finer grain access to binary object images or masks can be provided by splitting the binary image into different layout objects. Each layout object contains a complete codestream, but only for a small portion of the image. The smart JPM decoder will not access those layout objects that lie outside the region of interest. A single JPEG2000 codestream is tiled and each tile is accessed for a different image object. The corresponding mask object could be created by tiling the object mask and having separate codestreams, one for each tile object. A &#x201c;tiled&#x201d; JPM file can be created by mapping objects to tiles and tiles to objects. A JPEG 2000 codestream can be regularly tiled (and/or divided into precincts). This is not the case with most binary compressors. To achieve tiling for binary codestreams, whether or not these codestreams are associated with JPEG 2000 tiled codestreams, the binary images can be tiled before compression and the individual streams stored as separate objects. That is, for a non-JPEG 2000 codestream, the codestream is divided up into tiles and each tile is separately encoded into separate codestreams. <figref idref="DRAWINGS">FIG. 3A</figref> shows region of interest access with tiles. A decoder accesses only the object mask codestreams and the JPEG 2000 codestream tiles necessary to reconstruct the desired image. Referring to <figref idref="DRAWINGS">FIG. 3A</figref>, a number of tiles are shown (1, 2, 3), where the object mask is divided into multiple codestreams. In the JPM file, each of the tiles is a layout object, and all layout object is derived from one JPEG 2000 codestream and a number of other non-JPEG 2000 codestreams. Thus, the decoder provides region of interest access with binary codestreams. Note that a standard decoder decoding this JPM, the output image would still be the full image, not the region of interest, while a smart decoder decoding this JPM file could obtain the region of interest.</p>
<p id="p-0072" num="0071">With a standard decoder without knowledge attempted to display, for example, the upper left corner of a page, it would render the entire page in memory, and then only copy the upper left corner to the screen. This is inefficient because all layout objects and codestreams must be accessed and decoded. A smart decoder would only access the necessary layout objects, which intersect the upper left corner. Any layout objects and the corresponding codestreams that only affect other portions of the page need not be accessed and decoded.</p>
<p id="p-0073" num="0072">If a layout object that intersects the region of interest contains a JPEG 2000 codestream, only the portions of that JPEG 2000 codestream that affect the ROI need be decoded. For example, if the JPM decoder is decoding the upper left corner of a page and there is a layout object of an image covering the entire page, only those tiles of the JPEG 2000 image which will be on the upper left corner of the page once decoded and rendered need to be accessed.</p>
<p id="p-0074" num="0073">JBIG and the other binary codestreams do not provide random access to tiles. JBIG codestreams do allow banding or striping, that is random access to portions of the image that are the width of the page, but some limited number of lines high. In this case, an advanced decoder could just access the bands that intersect the region of interest. This is likely to be more efficient than decoding the entire codestream, but less efficient than accessing tiles.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 3B</figref> illustrates the use of banding. Referring to <figref idref="DRAWINGS">FIG. 3B</figref>, an image <b>320</b> is divided up vertically into four codestreams, <b>321</b>-<b>324</b>. Then banding may be used to divide each of codestreams <b>321</b>-<b>324</b>. These may be considered tiles. The object image or object mask may be handled in this manner.</p>
<p id="p-0076" num="0075">The banding allowed in JBIG may be combined with splitting a binary image into separate layout objects. Thus, as shown in <figref idref="DRAWINGS">FIG. 3B</figref>, a large region can be divided into 4 layout objects (called tiles in <figref idref="DRAWINGS">FIG. 3B</figref>). This provides random access in one dimension. Each of those codestream in those layout objects can be banded, providing access in the other dimension.</p>
<p id="p-0077" num="0076">Note that the division of binary object images and masks into smaller portions may be most efficient if it matches the tiles in a JPEG 2000 codestream for the same region, but this is not necessary. In fact, the binary object could be divided into overlapping layout objects.</p>
<p id="h-0012" num="0000">Rate Control and Progression</p>
<p id="p-0078" num="0077">JPEG 2000 offers bit-rate progression. For JPM files that are dominated in size by JPEG 2000 codestreams as is usually the case, the rate control for JPEG 2000 can be used for JPM rate control. For example, in the case of a JPM file with two JPEG 2000 codestreams, a certain rate allocation may be made between the two in a manner well-known in JPEG 2000. On the other hand, if there are binary codestreams in JPEG multi-resolution or JBIG lossless, then there is discardable data and other rate control is necessary such as is described below.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 3C</figref> illustrates an exemplary JPM file. Referring to <figref idref="DRAWINGS">FIG. 3C</figref>, JPM file <b>301</b> includes a number of boxes (e.g., SDE boxes). These boxes include boxes that store metadata, portions of a JPEG 2000 codestream and portions of a JBIG codestream. Note that there is a substantially larger amount of JPEG 2000 codestream <b>302</b> than the other portions of the JPM file, such as JBIG codestream <b>303</b>. In one embodiment, a command may be given that limits the size of the JPM file to a specified size. The size can be user or application specified. In such a case, all the boxes of JPM file <b>301</b> other than those containing the portions of JPEG 2000 codestream <b>302</b> are processed further (e.g., sent, prepared to be sent, stored, etc.) and then JPEG 2000 codestream <b>302</b> is truncated, potentially to fit in the remaining bandwidth that is available if the codestream <b>302</b> is being sent. That is, all of the JBIG codestream <b>303</b> is stored before any of JPEG 2000 codestream <b>302</b> and then depending on the remaining available bandwidth a portion of JPEG 2000 codestream <b>302</b> is stored. This is possible because of the progressive nature of the JPEG 2000 codestream. Thus, portions of the JPEG 2000 codestream are sent until the allowed rate is reached.</p>
<p id="p-0080" num="0079">Some limited binary progression is also enabled by the two-stage codestream of the JBIG-2 coder (codebook look-ups followed by difference image). In such a case, this codestream could also participate in rate control and discard the different image for one layer of bit-rate progression.</p>
<p id="p-0081" num="0080">Likewise, the resolution reduction allowed by the JBIG compressor allows some progression. The high resolution data can be discarded and the low resolution data interpolated.</p>
<p id="p-0082" num="0081">More specifically, in one embodiment, the JPM file includes many SDE boxes. <figref idref="DRAWINGS">FIG. 3D</figref> illustrates an exemplary JPM file. Five of the SDE boxes may contain, for example, a first JPEG 2000 part (J2K<sub>1</sub>), a first JBIG-2 part (JBIG2<sub>1</sub>), a second JPEG 2000 part (J2K<sub>2</sub>), a second JBIG-2 part (JBIG2<sub>2</sub>) and a third JPEG 2000 part (J2K<sub>3</sub>). The boxes can be arranged to allow the JPM file to be progressive such that as the JPM file is being processed and when a particular portion of the file has been reached, for instance, after sending a predetermined amount of the file, the remainder of the JPM file is truncated. In <figref idref="DRAWINGS">FIG. 3D</figref>, line <b>350</b> illustrates a truncation point in which the boxes to the left of line <b>350</b> are sent (or processed) and the boxes to the right are truncated.</p>
<p id="h-0013" num="0000">Component Access</p>
<p id="p-0083" num="0082">It is possible to extract certain components only. For example, in one embodiment, only the luminance component is extracted from a JPEG 2000 file. The color could be changed according to the application by accessing the Base Color box. A RBG (red, green, blue) background noise may be converted to a luminance. That is, when putting the object mask and luminance image together, only a black and white image (gray scale) is then produced. This may be useful when printing to a black and white printer.</p>
<p id="p-0084" num="0083">In another example, the luminance of an object and the luminance of a colored background may be extracted and combined using an object mask. Thus, a component may be extracted from a JPM file to enable access to components normally available only to a JPEG 2000 parser operating on a JPEG 2000 codestream.</p>
<p id="h-0014" num="0000">Codestream Storage in a JPM File</p>
<p id="p-0085" num="0084">One JPEG 2000 codestream can contribute to several objects. A codestream may be broken down to facilitate parsing. The broken down codestream may be in the JPM file in a manner that facilities parsing. For example, a JPEG 2000 codestream may be in a JPM file in a contiguous codestream box.</p>
<p id="p-0086" num="0085">In the JPM file, since all the essential elements of a JPEG 2000 codestream are available, the codestream may be divided and wrapped in individual shared data entry (SDE) boxes. Each box may contain a single packet, a tile-part, or some other useful structure corresponding to resolution, tile, progression layer or all of the above. Each of these SDE boxes may be referred to in order to access it in a certain order.</p>
<p id="p-0087" num="0086">In another embodiment, the fragment list, or table, allows fragments to be entered in such a way that when the fragments are put together a parsed codestream is formed. The fragment table points to parts of the codestream that are to be put together. In one embodiment, in order to modify a codestream, only the fragment table need be modified. The same structures can be listed in the fragment table.</p>
<p id="p-0088" num="0087">Through the use of the fragment table or shared data reference boxes, a new codestream may be put together. More specifically, the shared data reference boxes may point to a specific shared data entry boxes, while a fragment table uses lengths and offsets to point to specific parts of the JPM file. This new codestream is referenced without requiring a parser to generate the codestream. Thus, one can throw away those parts of the codestream that are not going to be used in the future since they are not referenced. This could be done by a consolidator function, such as is described in more detail below.</p>
<p id="p-0089" num="0088">The SDE box may contain any part of a JPEG 2000 codestream, only one tile-part, or only one packet. A tile-part can contain a number of packets from a given tile. The location and progression of tile-parts are well defined in the JPEG 2000 codestream. However, the image data represented and the packets contained in the tile-parts are not defined by the codestream. The encoder has many choices.</p>
<p id="p-0090" num="0089">In one embodiment, all codestreams may be non-JPEG 2000 codestreams with tile-resolution association and may be stored in SDE boxes or listed in fragment tables. In one embodiment, a JBIG-2 codestream may include a lossy image and a remainder image in two separate SDE boxes. In another embodiment, JBIG has a mode where there is an image of low resolution and a high resolution remainder.</p>
<p id="h-0015" num="0000">Metadata for Informating a Parser of Codestream Parts and Meaning</p>
<p id="p-0091" num="0090">Metadata may be used to describe the JPM file to the parser. In one embodiment, metadata is used to describe how the codestream has been divided into SDE boxes. In one embodiment, the metadata is located in the beginning of a JPM file. However, this is not a requirement for the metadata may be located anywhere in the JPM file or in many places in the JPM file.</p>
<p id="p-0092" num="0091">Note that this metadata is not strictly needed by a parser. A JPM parser could receive a JPM file, extract the codestreams, and then use a conventional JPEG 2000 parser to divide up the codestreams so that only those parts desired by a user remain. Other methods, even complete decoding, could be used. However, this process would be slower than with informative metadata.</p>
<p id="h-0016" num="0000">Index of SDE Signals Content</p>
<p id="p-0093" num="0092">There are a number of ways to explain what codestream data is present and which SDE box it is in. The index values of the SDE boxes may be used to indicate what parts of the codestream are contained in those boxes. Then the SDE Boxes present (or the ranges) can be signaled in metadata as described in more detail below. Also, metadata can explicitly describe the contents of each SDE Box.</p>
<p id="p-0094" num="0093">One or more indices may be used to gain access to the codestream without use of the fragment table. Each SDE box has its own index. The indices may be in any order. In one embodiment, the index can be any number; however, the selection of indices may enable the indices to provide information on its face as to what information in the SDE box or as to the data the SDE box points.</p>
<p id="h-0017" num="0000">SDE Box Index Value</p>
<p id="p-0095" num="0094">Using a shared_data_ID as the descriptor for the codestream packet information is one technique for selecting a unique ID for SDE box. Use of this technique results in the selection of a unique ID number for SDE box and shared data reference box could be selected so that a packet data of a JPEG 2000 codestream for a given tile, resolution, layer and component can be identified.</p>
<p id="p-0096" num="0095">The pseudo code below describes one embodiment of a process for assigning index numbers for JPEG 2000 codestream packets. This technique works for multiple codestreams.</p>
<p id="p-0097" num="0096">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="280pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>offset [0] = 0</entry>
</row>
<row>
<entry/>
<entry>for(i = 0; i &#x3c; Codestream; i++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(tile = 0; tile &#x3c; num_tile[i]; tile++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="252pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(resolution = 0; resolution &#x3c; num_res[i]; resolution++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="238pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(layer = 0; layer &#x3c; num_layer[i]; layer++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="224pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(comp = 0; comp &#x3c; num_comp[i]; comp++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="210pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>var = tile&#x2003;* (num_comp[i] * num_layer[i] * num_res[i])</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="98pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>+ resolution&#x2003;* (num_comp[i] * num_layer[i])</entry>
</row>
<row>
<entry/>
<entry>+ layer * num_comp[i] + comp;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="84pt" align="left"/>
<colspec colname="1" colwidth="210pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>index[i][var] = offset[i] + var</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="70pt" align="left"/>
<colspec colname="1" colwidth="224pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="238pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="252pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="266pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>offset[i+1] = offset [i] + num_tile [i]*num_comp[i]*num_layer[i]*num_res[i];</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="280pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="294pt" align="left"/>
<tbody valign="top">
<row>
<entry>Constraint:</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="280pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>((num_tile[i] * num_res[i]) * (1 + (num_layer[i] * num_comp[i])) + 2 * num_code) &#x3c; 65,536</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="294pt" align="left"/>
<tbody valign="top">
<row>
<entry>where num_code = the number of codestreams in the JPM file,</entry>
</row>
<row>
<entry>i is the index which counts the number of codestreams from 0 to num_code,</entry>
</row>
<row>
<entry>num_tile[i] = the number of tiles in codestream i,</entry>
</row>
<row>
<entry>num_res[i] = the max number of resolutions in codestream i,</entry>
</row>
<row>
<entry>num_layer[i] = the max number of layers in codestream i, and</entry>
</row>
<row>
<entry>num_comp[i] = the number of components in codestream i.</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0098" num="0097">Below is a specific example showing SDE box index numbers generated using the algorithm for 3 codestreams. The first codestream has 2 tiles and 1 resolution. The second codestream has 3 tiles and 1 resolution. The third codestream has 2 tiles, 2 resolutions. The corresponding index numbers are shown for object masks, main header and tile headers. Note that the component and layer do not change the object mask size. The same object mask could be used for different layers and different components.</p>
<p id="h-0018" num="0000">Codestream 0</p>
<p id="p-0099" num="0098">index=65535 var=0 tile=0 resolution=0</p>
<p id="p-0100" num="0099">index=65534 var=1 tile=1 resolution=0</p>
<p id="p-0101" num="0100">tileheader=65532 mainheader=65533</p>
<p id="h-0019" num="0000">Codestream 1</p>
<p id="p-0102" num="0101">index=65531 var=0 tile=0 resolution=0</p>
<p id="p-0103" num="0102">index=65530 var=1 tile=1 resolution=0</p>
<p id="p-0104" num="0103">index=65529 var=2 tile=2 resolution=0</p>
<p id="p-0105" num="0104">tileheader=65527 mainheader=65528</p>
<p id="h-0020" num="0000">Codestream 2</p>
<p id="p-0106" num="0105">index=65526 var=0 tile=0 resolution=0</p>
<p id="p-0107" num="0106">index=65525 var=1 tile=0 resolution=1</p>
<p id="p-0108" num="0107">index=65524 var=2 tile=1 resolution=0</p>
<p id="p-0109" num="0108">index=65523 var=3 tile=1 resolution=1</p>
<p id="p-0110" num="0109">tileheader=65521 mainheader=65522</p>
<p id="h-0021" num="0000">Note that all the tile headers are given the same indexes.</p>
<p id="p-0111" num="0110">These example results show the corresponding packets related to the object masks, main headers and tile headers mentioned above. Additional information regarding Codestream 0 is the 3 components for Tile 0 and Tile 1. Similarly, more additional information can be seen for Codestream 1 and Codestream 2.</p>
<p id="p-0112" num="0111">In the examples, numbers at the upper end are used to index the object mask and headers. The numbers starting from zero and increasing are used for packets. This way packets for a particular resolution and tile can be identified easily.</p>
<p id="h-0022" num="0000">Codestream 0</p>
<p id="p-0113" num="0112">index=0 var=0 tile=0 res=0 lay=0 comp=0</p>
<p id="p-0114" num="0113">index=1 var=1 tile=0 res=0 lay=0 comp=1</p>
<p id="p-0115" num="0114">index=2 var=2 tile=0 res=0 lay=0 comp=2</p>
<p id="p-0116" num="0115">index=3 var=3 tile=1 res=0 lay=0 comp=0</p>
<p id="p-0117" num="0116">index=4 var=4 tile=1 res=0 lay=0 comp=1</p>
<p id="p-0118" num="0117">index=5 var=5 tile=1 res=0 lay=0 comp=2</p>
<p id="h-0023" num="0000">Codestream 1</p>
<p id="p-0119" num="0118">index=6 var=0 tile=0 res=0 lay=0 comp=0</p>
<p id="p-0120" num="0119">index=7 var=1 tile=0 res=0 lay=0 comp=1</p>
<p id="p-0121" num="0120">index=8 var=2 tile=0 res=0 lay=1 comp=0</p>
<p id="p-0122" num="0121">index=9 var=3 tile=0 res=0 lay=1 comp=1</p>
<p id="p-0123" num="0122">index=10 var=4 tile=1 res=0 lay=0 comp=0</p>
<p id="p-0124" num="0123">index=11 var=5 tile=1 res=0 lay=0 comp=1</p>
<p id="p-0125" num="0124">index=12 var=6 tile=1 res=0 lay=1 comp=0</p>
<p id="p-0126" num="0125">index=13 var=7 tile=1 res=0 lay=1 comp=1</p>
<p id="p-0127" num="0126">index=14 var=8 tile=2 res=0 lay=0 comp=0</p>
<p id="p-0128" num="0127">index=15 var=9 tile=2 res=0 lay=0 comp=1</p>
<p id="p-0129" num="0128">index=16 var=10 tile=2 res=0 lay=1 comp=0</p>
<p id="p-0130" num="0129">index=17 var=11 tile=2 res=0 lay=1 comp=1</p>
<p id="h-0024" num="0000">Codestream 2</p>
<p id="p-0131" num="0130">index=18 var=0 tile=0 res=0 lay=0 comp=0</p>
<p id="p-0132" num="0131">index=19 var=1 tile=0 res=0 lay=0 comp=1</p>
<p id="p-0133" num="0132">index=20 var=2 tile=0 res=1 lay=0 comp=0</p>
<p id="p-0134" num="0133">index=21 var=3 tile=0 res=1 lay=0 comp=1</p>
<p id="p-0135" num="0134">index=22 var=4 tile=1 res=0 lay=0 comp=0</p>
<p id="p-0136" num="0135">index=23 var=5 tile=1 res=0 lay=0 comp=1</p>
<p id="p-0137" num="0136">index=24 var=6 tile=1 res=1 lay=0 comp=0</p>
<p id="p-0138" num="0137">index=25 var=7 tile=1 res=1 lay=0 comp=1</p>
<p id="p-0139" num="0138">There are a number of ways to access tile headers. If the tile headers are limited to contain only SOT and SOD markers, then every tile header is 14 bytes long. This way an appropriate tile header can be extracted based on the sequential order of tile headers stored in this SDE box. There are several ways to arrange the tile headers. One example is to have the Resolution 0 tile header for Tile 0 first, then the Resolution 1 tile header for Tile 0 and Resolution 2 tile header for Tile 0. The same order for Tile 1 follows.</p>
<p id="p-0140" num="0139">If the tile headers have variable length, the appropriate tile headers may be extracted based on the sequential order and the SOT and SOD markers. In one embodiment, tile headers always begin with SOT marker and end with SOD marker. By tracking these markers, tile headers can be identified. The tile header is to be extracted it depends on the sequential order of how tile headers are arranged in SDE as mentioned above.</p>
<p id="p-0141" num="0140">If the main headers are stored in a similar order as mentioned above, namely Resolution 0, Resolution 1 and Resolution 2, an appropriate main header can be easily identified since main headers begin with SOC markers. Thus, access to main headers is easy.</p>
<p id="h-0025" num="0000">SDE Boxes Containing Tile Parts</p>
<p id="p-0142" num="0141">If instead of packets the intention is to store tile-parts in the codestream, the pseudo code below may be used as one embodiment of a such a process.</p>
<p id="p-0143" num="0142">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>for(i = 0; i &#x3c; Codestream; i++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(tile = 0; tile &#x3c; num_tile[i]; tile++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(tile-part = 0; tile-part &#x3c; num_tp[i]; tile-part++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>var = tile * num_tp[i] + tile-part;</entry>
</row>
<row>
<entry/>
<entry>index[i][var] = offset[i] + tile * num_tp[i] + tile-part;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>offset[i+l] = var + offset[i] + 1;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>Codestream 0</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>index =0 var=0 tile=0 tp=0</entry>
</row>
<row>
<entry/>
<entry>index =1 var=1 tile=0 tp=1</entry>
</row>
<row>
<entry/>
<entry>index =2 var=2 tile=1 tp=0</entry>
</row>
<row>
<entry/>
<entry>index =3 var=3 tile=1 tp=1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>Codestream 1</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>index =4 var=0 tile=0 tp=0</entry>
</row>
<row>
<entry/>
<entry>index =5 var=1 tile=0 tp=1</entry>
</row>
<row>
<entry/>
<entry>index =6 var=2 tile=1 tp=0</entry>
</row>
<row>
<entry/>
<entry>index =7 var=3 tile=1 tp=1</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Object Masks for Tiles Stored in SDE Boxes
</p>
<p id="p-0144" num="0143">In one embodiment, the number of object masks for tiles required is the number of tiles multiplied by the number of resolutions. The index number for the object masks will be numbers counting down from the maximum number allowed in the 2-byte number, which in one embodiment is 65,535. Images with different quality layers and different components can re-use the object masks provided above because the image sizes do not change.</p>
<p id="p-0145" num="0144">In one embodiment, main headers of the JPEG 2000 codestreams for different output options such as resolutions, qualities, tile regions and components, are stored in a SDE box. Similarly, in one embodiment, tile headers for different situations are stored in a separate SDE box. In one embodiment, tile headers are stored in sequential order so that the correct tile header for a particular tile can be parsed or extracted based on the tile number.</p>
<p id="p-0146" num="0145">For better parsing, tile headers for one resolution, such as, for example, a thumbnail, can be stored in a separate SDE box if the index number permits.</p>
<p id="p-0147" num="0146">In one embodiment, the 2-byte index number in the SDE box allows 65,536 unique SDE boxes. If the number of packets, the number of object masks, the main headers and tile headers are fewer than 65,536, then it is possible to have the index imply the data contained in the SDE.</p>
<p id="p-0148" num="0147">The pseudo code below describes one embodiment of a process for assigning index numbers for object masks, main headers and tile headers of JPEG2000 codestreams.</p>
<p id="p-0149" num="0148">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>for(i = 0; i &#x3c; codestreams; i++)</entry>
</row>
<row>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(tile = 0; tile &#x3c; num_tile[i]; tile++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>for(resolution = 0; resolution &#x3c; num_res[i]; resolution++)</entry>
</row>
<row>
<entry/>
<entry>{</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>var = tile * num_res[i] + resolution;</entry>
</row>
<row>
<entry/>
<entry>index_mask[i][var] =</entry>
</row>
<row>
<entry/>
<entry>65535&#x2212;offset[i]&#x2212;tile*num_res[i]&#x2212;resolution;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>}</entry>
</row>
<row>
<entry/>
<entry>offset[i+1] = var + offset[i] + 3;</entry>
</row>
<row>
<entry/>
<entry>index_tileheader[i] = 65535 &#x2212; var &#x2212; offset[i] &#x2212; 2;</entry>
</row>
<row>
<entry/>
<entry>index_mainheader[i] = 65535 &#x2212; var &#x2212; offset[i] &#x2212; 1;</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Metadata Boxes to Describe SDE Contents
</p>
<p id="p-0150" num="0149">In one embodiment, each index is indicative of the codestream portion that is in the SDE box.</p>
<p id="p-0151" num="0150">In one embodiment, if the indices generated above are sequential, it may be possible to specify ranges when indicating a portion of the codestream that is desired. The ranges may be specified using the beginning and ending indices of a given parameter.</p>
<p id="h-0026" num="0000">Range of Packets Present, SDE Indices Implied</p>
<p id="p-0152" num="0151"><figref idref="DRAWINGS">FIG. 6</figref> shows an another alternative embodiment of a syntax. The syntax is contained in a metadata box, such as a Free box. Referring to <figref idref="DRAWINGS">FIG. 6</figref>, the ranges of packets/SDE boxes present are shown. This one is denoted with a unique ASCII string such as, for example, RICOHJPM50; other strings may be used. For each range (which could be only one packet/SDE Box), the beginning and ending tile (T<sub>00</sub>, T<sub>0n</sub>), beginning and ending resolution (R<sub>00</sub>, R<sub>0n</sub>), beginning and ending layer (L<sub>00</sub>, L<sub>0n</sub>), and beginning and ending component (C<sub>00</sub>, C<sub>0n</sub>) are given. In this example, each value in the range is limited to 8 bits (0-255). Other sizes could be chosen for each field.</p>
<p id="p-0153" num="0152">There is no requirement that either of these types of metadata be present. Also, there is no requirement that all, or any, of the SDE boxes be described. In fact, a metadata box with the ASCII string (either, for example, RICOHJPM99 or RICOHJPM50) but no SDE information would be useful for alerting the parser or decoder that the index of the SDE boxes indicate the codestream data therein. There is no relationship between the order of the entries in the metadata box and the order that the SDE boxes are found in the file.</p>
<p id="h-0027" num="0000">Range of Packets in Each SDE (Index May or May not Apply)</p>
<p id="p-0154" num="0153">In this embodiment, there is no constraint on the number of packets of the codestream contained in the one SDE box. In one embodiment, a range of packets is put into one or more SDE boxes. In this case, metadata may be used to indicate to the parser which packets are in a particular SDE box.</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 7</figref> illustrates metadata for compactly representing SDE boxes. Referring to <figref idref="DRAWINGS">FIG. 7</figref>, the data in the SDE box is the following metadata distinguished by the ASCII string &#x201c;RICOHJPM32&#x2019;. In this example, the index of the SDE box does not necessarily indicate the contents. Also, there is no restriction on the number of packets or precincts in one SDE box.</p>
<p id="p-0156" num="0155">The SDE index and the number of bytes to describe the ranges are included. Otherwise, it is similar to &#x2018;RICOHJPM50&#x2019;. In one embodiment, the fields for the index of the SDE Box (SDE), the tiles (T), and the layers (L) are all two bytes, and the fields for the length of the SDE Box range description (S), resolutions (R), and components (C) are all one byte. Once again, different sizes could be chosen.</p>
<p id="h-0028" num="0000">Same Metadata for Tile-Parts</p>
<p id="p-0157" num="0156">It is possible to have similar metadata boxes, distinguished by a different number, signal that the SDE boxes contain tile-parts. These tile-parts can be enumerated by listing the SDE indexes, when indexes indicate tile-parts, or by listing the tile-parts present in each SDE boxes when they do not.</p>
<p id="p-0158" num="0157">Another difference with the packet per SDE box for tile-parts is that it may not be clear what part of the image data the tile-parts describe. A field with an entry from the following table could describe how the tile-parts are organized (starting with the first through the last for each tile). This assumes that the progression of tile-parts is the same for each tile.</p>
<p id="p-0159" num="0158">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Type field for tile-part progression in SDE boxes metadata</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="42pt" align="center"/>
<colspec colname="2" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry>Type</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>0</entry>
<entry>Resolution progressive (lowest res, then next res, and so</entry>
</row>
<row>
<entry/>
<entry>on), interleaved color</entry>
</row>
<row>
<entry>1</entry>
<entry>Layer progressive (lowest quality, next layer, and so on),</entry>
</row>
<row>
<entry/>
<entry>interleaved color</entry>
</row>
<row>
<entry>2</entry>
<entry>Resolution progressive (lowest res, then next res, and so</entry>
</row>
<row>
<entry/>
<entry>on), luminance then chrominance</entry>
</row>
<row>
<entry>3</entry>
<entry>Layer progressive (lowest quality, next layer, and so on),</entry>
</row>
<row>
<entry/>
<entry>luminance then chrominance</entry>
</row>
<row>
<entry>4</entry>
<entry>Thumbnail, monitor, printer, lossless</entry>
</row>
<row>
<entry>5</entry>
<entry>Inconsistent for each tile</entry>
</row>
<row>
<entry>6-255</entry>
<entry>reserved</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
<br/>
Bit-Rate of SDE Boxes
</p>
<p id="p-0160" num="0159">It is possible to include a repeating field in a metadata box that would offer the size of every SDE box. This would allow a parser to perform rate control by knowing the size of all the codestream parts.</p>
<p id="h-0029" num="0000">Multiple Page Descriptions</p>
<p id="h-0030" num="0000">Different Page Boxes for the Same Page in the File Found Anywhere</p>
<p id="p-0161" num="0160">In one embodiment, the JPM file includes different page boxes for the same page. Each of these page boxes stores (or points to a file that stores) a different description of the same page. These page boxes may be found anywhere in the file.</p>
<p id="h-0031" num="0000">Page Collections</p>
<p id="p-0162" num="0161">There are a number of different ways to sort the multiple page descriptions. For example, all the page boxes with different page attributes for the same page may be grouped together. These different page attributes may include thumbnail, lossless/full resolution, monitor resolution, printer resolution, low-bit rate, etc.). On the other hand, all the page boxes with the same page attribute for the different pages may be grouped together.</p>
<p id="h-0032" num="0000">Same Page Attributes, Different Pages (1, 2, 3, etc.)</p>
<p id="p-0163" num="0162">Another way to organize a JPM file is by using multiple pages in a page collection to describe the same page. <figref idref="DRAWINGS">FIG. 11</figref> shows an example of multi-page descriptions. Referring to <figref idref="DRAWINGS">FIG. 11</figref>, a JPM codestream <b>1100</b> is shown with page 1 being a thumbnail (<b>1101</b>), page 2 being the text (<b>1102</b>) of the image, and page 3 being the full image (<b>1103</b>). A traditional decoder would decode three independent pages, all correct. However, with the proper metadata, a smart parser or decoder could extract or decode only the appropriate page for each real page in the collection.</p>
<p id="p-0164" num="0163">These pages could also serve as the description of differently parsed images. All a parser has to do to parse for a given page is remove the unreferenced codestream divisions and boxes, reform the file, and change all the pointers to the new locations.</p>
<p id="p-0165" num="0164">With all parts of a codestream available in shared data boxes, there can be many different descriptions of a page without expanding the JPM file size much. These are referred to as page collections. In other words, a page may be described differently, possibly based on different characteristics.</p>
<p id="p-0166" num="0165">Three main types of page collections are described herein. These include a page collection with only a single page, collections sorted by description type (e.g., thumbnail description of all the pages), and collections sorted by page (e.g., all descriptions of page 1). <figref idref="DRAWINGS">FIG. 12</figref> illustrates a hierarchical relationship regarding a page collection arranged by resolution with the resolutions (e.g., thumbnail, low bite rate, monitor resolution, full resolution) from each page collected together. <figref idref="DRAWINGS">FIG. 13</figref> illustrates a hierarchical relationship regarding a page collection arranged by page with all tiles for each page collected together.</p>
<p id="p-0167" num="0166">As described herein, these page collections may be set up using shared data boxes, where each shared data box points to a certain object for a page, and metadata that describes the collection to a parser.</p>
<p id="p-0168" num="0167">In one embodiment, the page description parser receives a JPM file with shared data boxes and metadata and user desired output control. The user desired output control may include specifying the description type, pages, page collections, an amount of structure to preserve.</p>
<p id="p-0169" num="0168">The operations performed by such a parser may include reading the metadata, editing boxes, skipping or removing (without copying) shared data boxes or other boxes, and/or removing and/or adding metadata boxes around the page description boxes as appropriate. For example, one of the operations may result in changing the relationship between the boxes in the file. This may be as simple as changing pointers to shared data and/or other boxes.</p>
<p id="p-0170" num="0169">The output of such a parser is either a regular JPM file or a JPM file with the metadata and shared data box structure described herein.</p>
<p id="h-0033" num="0000">Metadata to Describe Page Attributes and Page Collections</p>
<p id="p-0171" num="0170">In one embodiment, metadata is used to describe the attributes and the page collections. Attributes are the character of the page collections. For example, an attribute may indicate that a page collection is a thumbnail. The techniques described herein provide for multiple page descriptions that provide alternative representations for pages present in a JPM file. For example, page 1 might be a full resolution image of the first page, page 2 could be a thumbnail representation of the same page, and so on. The goal of metadata is two fold. First, the metadata describes pages and collections of pages that are in order, that is page 1, page 2, etc. Second, it describes how these pages are represented, e.g., full resolution, thumbnail, etc.</p>
<p id="p-0172" num="0171"><figref idref="DRAWINGS">FIG. 8</figref> illustrates exemplary metadata for page and page collection descriptions. Referring to <figref idref="DRAWINGS">FIG. 8</figref>, the metadata includes a header containing &#x201c;RICOHJPM52&#x201d;. This header alerts the decoder that the following metadata signals that there are pages in this JPM file which uses a particular way of using shared data entry boxes to describe multiple pages.</p>
<p id="p-0173" num="0172">Ranges of pages, or page collections, are also described below. For each range, there is a &#x201c;Type&#x201d; value in Table 2 that describes how the pages are described by the JPM file. Also for each range, there is a &#x201c;Desc&#x201d; value in Table 3 that shows whether page or page collection boxes are referred to, shows whether or not these page or page collection boxes are obscured in a Free boxes (as defined in part 6 of the JPEG 2000 standard), and shows whether the description is an index to the page or page collection boxes or an absolute offset pointer to them. These two fields are followed by a &#x201c;Len&#x201d; field that describes the length in bytes of the description of this range. Thus, it is possible to have several range descriptions in one metadata box.</p>
<p id="p-0174" num="0173">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 2</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Type field for Page and Page Collection</entry>
</row>
<row>
<entry>Box Attribute Description Metadata</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="91pt" align="center"/>
<colspec colname="2" colwidth="126pt" align="left"/>
<tbody valign="top">
<row>
<entry>Type</entry>
<entry>Meaning</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>0</entry>
<entry>Full image</entry>
</row>
<row>
<entry>1</entry>
<entry>Thumbnail</entry>
</row>
<row>
<entry>2</entry>
<entry>Monitor resolution</entry>
</row>
<row>
<entry>3</entry>
<entry>ROI</entry>
</row>
<row>
<entry>4</entry>
<entry>Low bit-rate, full resolution</entry>
</row>
<row>
<entry>5</entry>
<entry>Low bit rate, monitor resolution</entry>
</row>
<row>
<entry>6</entry>
<entry>Representative icon page</entry>
</row>
<row>
<entry>7</entry>
<entry>Text Only</entry>
</row>
<row>
<entry>8</entry>
<entry>Image Mask</entry>
</row>
<row>
<entry>9</entry>
<entry>Other</entry>
</row>
<row>
<entry>10-255</entry>
<entry>Reserved</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0175" num="0174">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 3</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Desc field for Page and Page Collection</entry>
</row>
<row>
<entry>Box Description Metadata</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="70pt" align="left"/>
<colspec colname="2" colwidth="119pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>Description</entry>
<entry>Meaning</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry/>
<entry>0000 0xx0</entry>
<entry>Page</entry>
</row>
<row>
<entry/>
<entry>0000 0xx1</entry>
<entry>Page Collection</entry>
</row>
<row>
<entry/>
<entry>0000 0x0x</entry>
<entry>In JPM File Format</entry>
</row>
<row>
<entry/>
<entry>0000 0x1x</entry>
<entry>In Free box</entry>
</row>
<row>
<entry/>
<entry>0000 00xx</entry>
<entry>Indexed</entry>
</row>
<row>
<entry/>
<entry>0000 01xx</entry>
<entry>Offset</entry>
</row>
<row>
<entry/>
<entry>0000 11x0</entry>
<entry>Offset, followed by page size</entry>
</row>
<row>
<entry/>
<entry/>
<entry>All other values reserved</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0176" num="0175">Notice that the first run, noted by 0, describes the page or page collection boxes with a number, n, ranges of indexes each starting at b and ending at e. The next run, noted by m, describes page or page collection boxes with a series of offsets 0 through l. The last example shown, noted by z, shows page boxes described by offsets with the page size, PS, denoted. This is useful for responding to fixed or limited rate requests.</p>
<p id="h-0034" num="0000">Storage for Metadata</p>
<p id="p-0177" num="0176">The metadata is stored in metadata boxes. In one embodiment, from the JPM standard (Part 6), the box for this metadata is the Free box. To allow efficient parsing, it may be desirable to locate the metadata at the beginning of a JPM file. The metadata may be located immediately after the information that is required to be in the first part of a JPM file (to have the file still be considered a legal JPM file). In one embodiment, the metadata is in one of the assigned boxes, e.g., the Free box, and begins with a unique ASCII string such as, for example, RICOHJPM49. This is followed by the indexes, in binary, of each SDE box in the file. <figref idref="DRAWINGS">FIG. 5</figref> shows an exemplary syntax. Referring to <figref idref="DRAWINGS">FIG. 5</figref>, the size of an SDE box index is two bytes. The information is included in a box, such as a Free box.</p>
<p id="p-0178" num="0177">Since JPEG 2000 Part 6 does not set forth dedicated metadata boxes, other boxes are used. For example, from JPEG 2000 Annex Part 1, the Intellectual Property box, XML box, UUID box, and UUID Info box all allow user created data to be entered. Therefore, these may all be used for metadata that a decoder, configured and/or programmed to recognize it and act based on it.</p>
<p id="p-0179" num="0178">Other boxes from JPEG 2000, Part 6 may also be used. Also possible are the Media Data Box and the Shared Data Entry Box.</p>
<p id="p-0180" num="0179">Alternatively, the data may be hidden in the entropy coded codestream. There is a rich body of literature in hiding data in entropy coded codestream and specifically in JPEG 2000 and JBIG. Any of these techniques may be used. Furthermore, it may be possible to have extra data at the end of a shared data box, perhaps the final one for the codestream, that is not decoded by an entropy coder. This data would also be acceptable for metadata.</p>
<p id="h-0035" num="0000">Parser</p>
<p id="p-0181" num="0180">The goal of the parsing is to convert one JPM file to another JPM file. As described above, an image may be divided into parts, may be stored in various boxes, and metadata may be used to indicate the contents of the boxes, the image may be described in various pages and metadata may be used to indicate where the pages are in a JPM file. Once JPM file has been set up, a parser may be used to obtain the data that is desired.</p>
<p id="p-0182" num="0181">In one embodiment, a parser is a program that takes as its input a JPM file and the desired characteristics of the output JPM file (resolution, bit-rate, region of interest, component, object layering, text vs. image, page, etc.) and creates a new JPM file with only the needed data. This is done without decoding or decompressing the various codestreams in the JPM file.</p>
<p id="p-0183" num="0182">The information used by a parser is from the available metadata, the JPM file boxes, and the codestream file formats and syntax. <figref idref="DRAWINGS">FIG. 10</figref> shows an example of parsing. Referring to <figref idref="DRAWINGS">FIG. 10</figref>, a JPM file <b>1001</b> and an indication of the desired characteristics <b>1002</b> of an output image are input to JPM parser <b>1003</b>, which generates a new JPM file <b>1004</b>. JPM file <b>1004</b> may, for example, be a lower resolution version of JPM file <b>1001</b>. Such a parser may be used to parse a JPM file with four pages to a JPM file with two pages.</p>
<p id="p-0184" num="0183">In one embodiment, the parser is a generic parser that takes any JPM file (without the structure specified herein) and user desired output control specifying what the user wants. This input may be specified using a command line interface or application. Examples of user desired output control include specifying a resolution, bit-rate, area, component, pages, page collections (e.g., pages 1-4, 10 and 20-22). In response to these inputs, the parser parses the JPEG 2000 file or decodes all or part of the JPEG 2000 file and edits it (and subsequently re-encodes it). The parser may also edit boxes. The resulting output of the parser is a legal JPM codestream with the structure of shared data boxes and metadata described herein.</p>
<p id="h-0036" num="0000">Parsing SDE Packed JPM Files</p>
<p id="p-0185" num="0184">In another embodiment, the parser may be a SDE box parser that receives as in input a JPM file with the shared data box and metadata structure described herein along with user desired output control. Examples of user desired output control include specifying a resolution, bit-rate, area, component, pages, page collections (e.g., pages 1-4, 10 and 20-22), layout objects, an indication of whether objects are present or not, scale, location, and order. The operations performed by the parser may include reading metadata, editing one or more boxes, and skipping or removing one or more shared data boxes or other boxes based on the specified operation. The output is a JPM file with or without the shared data box and metadata structure described herein.</p>
<p id="h-0037" num="0000">Parsing Page Descriptions</p>
<p id="p-0186" num="0185">Note that the shared data box parser and the generic parser may be the same parser. This is also the case for the page description parser described in more detail below. The advantage of the SDE boxes with metadata parsing is that it is much quicker and requires no understanding of the JPEG 2000 codestream.</p>
<p id="h-0038" num="0000">Consolidator</p>
<p id="p-0187" num="0186">In one embodiment, after parsing, a smaller or minimum sized JPM file may be created. <figref idref="DRAWINGS">FIG. 16</figref> illustrates such a function where a JPM file <b>1601</b> undergoes parsing by parser <b>1602</b> to create JPM file <b>1603</b>. The parsing may be performed to create a JPM file for a specific purpose (e.g., resolution, region of interest, etc.). The consolidator <b>1604</b> receives JPM file <b>1603</b> and removes data in JPM file <b>1603</b> that is no longer needed for the specific purpose for which parser <b>1602</b> parsed JPM file <b>1601</b>.</p>
<heading id="h-0039" level="1">AN EXAMPLE</heading>
<p id="h-0040" num="0000">An SDE Parsing Example</p>
<p id="p-0188" num="0187">In this example, an RGB color image is split into an object mask and an object image using a segmentor. The full size object mask is divided into six tiles. These object masks are compressed at full size, down sampled and compressed at &#xbc; size and twice downsized and compressed at &#x215b; size. Thus, there are 18 (6 tile&#xd7;3 resolutions) independent object mask codestreams.</p>
<p id="p-0189" num="0188">There is no requirement when a object mask is downsampled and compressed at multiple resolutions that it be split into the same number of layout objects at each resolution. There is some advantage to splitting it into the same tiles as a JPEG 2000 image used in the image part, but there is an advantage to using fewer layout objects at low resolution. Each layout object has some amount of overhead, and the overhead for 6 &#x201c;tiles&#x201d; on a page may not be much at high resolution, but at &#x215b;th resolution the overhead is much higher. Thus at &#x215b;th resolution it may make sense to use only one layout object for the entire object mask.</p>
<p id="p-0190" num="0189">The full size background contone image is compressed with a JPEG 2000 encoder once with settings of six tiles and three resolution levels. Thus, there is the possibility of accessing only the background data needed to correspond to any of the 18 foreground object mask codestreams.</p>
<p id="p-0191" num="0190">For example, a background contone image of the JPEG 2000 test image cmpnd1 of 768&#xd7;512 RGB color image is compressed with a JPEG 2000 encoder for tile_number=6, resolution_number=3, layer_number=2, component_number=3, precinct_number=1.</p>
<p id="p-0192" num="0191">Assuming only one precinct per tile, T2R0L0C0 indicates Tile 2, Resolution 0, Layer 0, Component 0. The &#x201c;packet=2437&#x201d; means the packet size is 2437 bytes. For resolution progression, the main and tile headers for the full size, half size and quarter size images are made available. The main and tile headers for a 1-layer image and 1-component image are also made available.</p>
<p id="p-0193" num="0192">Because SDE boxes are used to store all pieces of codestream, the same data may be reused as many times as needed without redundantly repeating the data. In the actual place where the data is needed to be present, a pointer is used to refer to the data stored in a particular SDE box specified with a unique ID. For region progressive feature by tiling, Tile 2 out of 6 tiles is selected. The following data is for Tile 2 only.</p>
<p id="p-0194" num="0193">For resolution progression in Table 4, three resolutions for Tile 2 are demonstrated. The quarter size Tile 2 includes Resolution 0 data in the first column. The half size Tile 2 contains Resolution 0 and Resolution 1 data as shown in the second column. The full size Tile 2 comprises data in all resolutions.</p>
<p id="p-0195" num="0194">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 4</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example 1: Resolution progression packet</entry>
</row>
<row>
<entry>size and index for the SDE Box</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="119pt" align="center"/>
<colspec colname="2" colwidth="49pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Packet size in bytes</entry>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="49pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="center"/>
<colspec colname="2" colwidth="42pt" align="center"/>
<colspec colname="3" colwidth="35pt" align="center"/>
<colspec colname="4" colwidth="49pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Quarter size</entry>
<entry>Half size</entry>
<entry>Full size</entry>
<entry>SDE Box index</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="1" colwidth="49pt" align="left"/>
<colspec colname="2" colwidth="42pt" align="char" char="."/>
<colspec colname="3" colwidth="42pt" align="char" char="."/>
<colspec colname="4" colwidth="35pt" align="char" char="."/>
<colspec colname="5" colwidth="49pt" align="center"/>
<tbody valign="top">
<row>
<entry>T2R0L0C0</entry>
<entry>2437</entry>
<entry>2437</entry>
<entry>2437</entry>
<entry>36</entry>
</row>
<row>
<entry>C1</entry>
<entry>1723</entry>
<entry>1723</entry>
<entry>1723</entry>
<entry>37</entry>
</row>
<row>
<entry>C2</entry>
<entry>1575</entry>
<entry>1575</entry>
<entry>1575</entry>
<entry>38</entry>
</row>
<row>
<entry>T2R0L1C0</entry>
<entry>464</entry>
<entry>464</entry>
<entry>464</entry>
<entry>39</entry>
</row>
<row>
<entry>C1</entry>
<entry>433</entry>
<entry>433</entry>
<entry>433</entry>
<entry>40</entry>
</row>
<row>
<entry>C2</entry>
<entry>424</entry>
<entry>424</entry>
<entry>424</entry>
<entry>41</entry>
</row>
<row>
<entry>T2R1L0C0</entry>
<entry>&#x2014;</entry>
<entry>5510</entry>
<entry>5510</entry>
<entry>42</entry>
</row>
<row>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>4341</entry>
<entry>4341</entry>
<entry>43</entry>
</row>
<row>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>3703</entry>
<entry>3703</entry>
<entry>44</entry>
</row>
<row>
<entry>T2R1L1C0</entry>
<entry>&#x2014;</entry>
<entry>1409</entry>
<entry>1409</entry>
<entry>45</entry>
</row>
<row>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>1440</entry>
<entry>1440</entry>
<entry>46</entry>
</row>
<row>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>1483</entry>
<entry>1483</entry>
<entry>47</entry>
</row>
<row>
<entry>T2R2L0C0</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>16,639</entry>
<entry>48</entry>
</row>
<row>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>13,978</entry>
<entry>49</entry>
</row>
<row>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>11,617</entry>
<entry>50</entry>
</row>
<row>
<entry>T2R2L1C0</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>5892</entry>
<entry>51</entry>
</row>
<row>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>5819</entry>
<entry>52</entry>
</row>
<row>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>&#x2014;</entry>
<entry>5862</entry>
<entry>53</entry>
</row>
<row>
<entry namest="1" nameend="5" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0196" num="0195">For quality progression in Table 5, two layers of quality in Tile 2 are shown. In this example, the Layer 0 quality codestream contains data in the first column. The higher quality codestream includes more data as shown in the second column.</p>
<p id="p-0197" num="0196">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 5</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example 2: Quality progression packet</entry>
</row>
<row>
<entry>size and index for the SDE Box</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="7pt" align="center"/>
<colspec colname="2" colwidth="84pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>Packet size in bytes</entry>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Lossy</entry>
<entry>Lossless</entry>
<entry>SDE Box index</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="56pt" align="char" char="."/>
<colspec colname="3" colwidth="35pt" align="char" char="."/>
<colspec colname="4" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>T2R0L0C0</entry>
<entry>2437</entry>
<entry>2437</entry>
<entry>36</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>1723</entry>
<entry>1723</entry>
<entry>37</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>1575</entry>
<entry>1575</entry>
<entry>38</entry>
</row>
<row>
<entry/>
<entry>T2R1L0C0</entry>
<entry>5510</entry>
<entry>5510</entry>
<entry>42</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>4341</entry>
<entry>4341</entry>
<entry>43</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>3703</entry>
<entry>3703</entry>
<entry>44</entry>
</row>
<row>
<entry/>
<entry>T2R2L0C0</entry>
<entry>16,639</entry>
<entry>16,639</entry>
<entry>48</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>13,978</entry>
<entry>13,978</entry>
<entry>49</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>11,617</entry>
<entry>11,617</entry>
<entry>50</entry>
</row>
<row>
<entry/>
<entry>T2R0L1C0</entry>
<entry>&#x2014;</entry>
<entry>464</entry>
<entry>39</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>433</entry>
<entry>40</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>424</entry>
<entry>41</entry>
</row>
<row>
<entry/>
<entry>T2R1L1C0</entry>
<entry>&#x2014;</entry>
<entry>1409</entry>
<entry>45</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>1440</entry>
<entry>46</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>1483</entry>
<entry>47</entry>
</row>
<row>
<entry/>
<entry>T2R2L1C0</entry>
<entry>&#x2014;</entry>
<entry>5892</entry>
<entry>51</entry>
</row>
<row>
<entry/>
<entry>C1</entry>
<entry>&#x2014;</entry>
<entry>5819</entry>
<entry>52</entry>
</row>
<row>
<entry/>
<entry>C2</entry>
<entry>&#x2014;</entry>
<entry>5862</entry>
<entry>53</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0198" num="0197">For progression by component in Table 6, a grayscale version of Tile 2 is shown. This codestream includes data for Component 0 only.</p>
<p id="p-0199" num="0198">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE 6</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Example 3: Component 0 Packet Size and Index for the SDE Box</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="7pt" align="center"/>
<colspec colname="2" colwidth="84pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>Packet size in bytes</entry>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="56pt" align="center"/>
<colspec colname="2" colwidth="35pt" align="center"/>
<colspec colname="3" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>Lossy</entry>
<entry>Lossless</entry>
<entry>SDE Box index</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="5">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="42pt" align="left"/>
<colspec colname="2" colwidth="56pt" align="char" char="."/>
<colspec colname="3" colwidth="35pt" align="char" char="."/>
<colspec colname="4" colwidth="70pt" align="center"/>
<tbody valign="top">
<row>
<entry/>
<entry>T2R0L0C0</entry>
<entry>2437</entry>
<entry>2437</entry>
<entry>36</entry>
</row>
<row>
<entry/>
<entry>T2R1L0C0</entry>
<entry>5510</entry>
<entry>5510</entry>
<entry>42</entry>
</row>
<row>
<entry/>
<entry>T2R2L0C0</entry>
<entry>16,639</entry>
<entry>16,639</entry>
<entry>48</entry>
</row>
<row>
<entry/>
<entry>T2R0L1C0</entry>
<entry>&#x2014;</entry>
<entry>464</entry>
<entry>39</entry>
</row>
<row>
<entry/>
<entry>T2R1L1C0</entry>
<entry>&#x2014;</entry>
<entry>1409</entry>
<entry>45</entry>
</row>
<row>
<entry/>
<entry>T2R2L1C0</entry>
<entry>&#x2014;</entry>
<entry>5892</entry>
<entry>51</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="4" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0200" num="0199"><figref idref="DRAWINGS">FIG. 9</figref> is an example of a JPM file box structure using pointers to describe a page. Referring to <figref idref="DRAWINGS">FIG. 9</figref>, JPM file <b>900</b> includes JPEG 2000 Signature box <b>901</b>, File Type box <b>902</b>, JP2 Header box <b>903</b>, Compound Image Header box <b>904</b>, one or more Shared Data Entry boxes for object mask <b>905</b><sub>1-n</sub>, one or more Shared Data Entry boxes for headers <b>906</b><sub>1-n</sub>, one or more Shared Data Entry boxes for packets <b>907</b><sub>1-n</sub>, a Page Collection box <b>908</b> that contains a Page Collection Locator Box <b>908</b>A and a Page Table box <b>908</b>B, a Page Box <b>909</b> that includes a Page Header box <b>909</b>A, a Page Collection Locator box <b>909</b>B, and one or more Layout Object boxes, such as Layout Object box <b>910</b> that contains Layout Object Header box <b>910</b>A and one or more Object boxes such as Object box <b>911</b>, which may contain Object Header box <b>912</b>, and Object box <b>913</b>, and Layout object box <b>914</b>. JPM file <b>900</b> also includes a Fragment Table box <b>915</b>, which has a Fragment List box <b>915</b>A, a Media Data box <b>916</b>, a Contiguous Codestream boxes <b>917</b> and <b>918</b>. Contiguous Codestream box <b>918</b> includes a pair of Shared Data Reference (SDR) boxes.</p>
<p id="p-0201" num="0200">Page boxes, such as Page box <b>909</b>, points to the Layout Object boxes, such as Layout Object box <b>910</b>. Layout Object boxes, such as Layout Object box <b>910</b>, points into the Fragment Table box, such as Fragment Table box <b>915</b>. The Fragment Table box, such as Fragment Table box <b>915</b>, points to either the SDE Boxes or the Media Data Boxes. In <figref idref="DRAWINGS">FIG. 9</figref>, Fragment List box <b>915</b>A or Fragment Table box <b>915</b> points to Media Data box <b>916</b> and one or more SDE boxes for the object mask, headers and packets. Object box <b>913</b> points to Contiguous Codestream box <b>917</b>. Layout Object box <b>913</b> points to Contiguous Codestream box <b>918</b>, which includes two Shared Data Reference boxes that point to SDEs for the object mask and headers, in this example.</p>
<p id="p-0202" num="0201"><figref idref="DRAWINGS">FIG. 14A</figref> shows an example of a parser taking a full resolution lossless JPM file and creating a full resolution lossy JPM file. The parser understands the contents of the SDE boxes either by the indexes or the metadata boxes that describe the contents or both. The SDE boxes containing the full resolution object masks and full resolution first layer packets for the images are selected for the new file. The Fragment Table box is edited to point to the new SDE box locations.</p>
<p id="h-0041" num="0000">Page Description Example</p>
<p id="p-0203" num="0202"><figref idref="DRAWINGS">FIG. 14B</figref> shows a JPM with two Page boxes. One of them is encapsulated in a Free box making it unusable for a generic decoder. The parser finds the Page box of interest, frees it from the Free box by removing the box header and encapsulates the other Page box in the Free box. Thus, the generic decoder now decodes the other Page box instead of the original.</p>
<p id="p-0204" num="0203"><figref idref="DRAWINGS">FIG. 14C</figref> shows the same file as on the right side of <figref idref="DRAWINGS">FIG. 14B</figref>. Now the file is consolidated to its minimum form by removing all the unnecessary SDE and Page boxes and rewriting all the pointers appropriately.</p>
<p id="p-0205" num="0204">The access features of JPEG 2000 can be preserved with the JPM format even if the object masks are compressed with older coding standards. The cost for this is fairly reasonable in terms of bits and the coding gain over JPEG 2000 is preserved. The Shared Data Box architecture of JPM makes access of both the mask and JPEG 2000 coded image codestreams straight forward.</p>
<p id="h-0042" num="0000">An Exemplary Computer System</p>
<p id="p-0206" num="0205"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram of an exemplary computer system that may perform one or more of the operations described herein. Referring to <figref idref="DRAWINGS">FIG. 15</figref>, computer system <b>1500</b> may comprise an exemplary client <b>1550</b> or server <b>1500</b> computer system. Computer system <b>1500</b> comprises a communication mechanism or bus <b>1511</b> for communicating information, and a processor <b>1512</b> coupled with bus <b>1511</b> for processing information. Processor <b>1512</b> includes a microprocessor, but is not limited to a microprocessor, such as, for example, Pentium&#x2122;, PowerPC&#x2122;, Alpha&#x2122;, etc.</p>
<p id="p-0207" num="0206">System <b>1500</b> further comprises a random access memory (RAM), or other dynamic storage device <b>1504</b> (referred to as main memory) coupled to bus <b>1511</b> for storing information and instructions to be executed by processor <b>1512</b>. Main memory <b>1504</b> also may be used for storing temporary variables or other intermediate information during execution of instructions by processor <b>1512</b>.</p>
<p id="p-0208" num="0207">Computer system <b>1500</b> also comprises a read only memory (ROM) and/or other static storage device <b>1506</b> coupled to bus <b>1511</b> for storing static information and instructions for processor <b>1512</b>, and a data storage device <b>1507</b>, such as a magnetic disk or optical disk and its corresponding disk drive. Data storage device <b>1507</b> is coupled to bus <b>1511</b> for storing information and instructions.</p>
<p id="p-0209" num="0208">Computer system <b>1500</b> may further be coupled to a display device <b>1521</b>, such as a cathode ray tube (CRT) or liquid crystal display (LCD), coupled to bus <b>1511</b> for displaying information to a computer user. An alphanumeric input device <b>1522</b>, including alphanumeric and other keys, may also be coupled to bus <b>1511</b> for communicating information and command selections to processor <b>1512</b>. An additional user input device is cursor control <b>1523</b>, such as a mouse, trackball, trackpad, stylus, or cursor direction keys, coupled to bus <b>1511</b> for communicating direction information and command selections to processor <b>1512</b>, and for controlling cursor movement on display <b>1521</b>.</p>
<p id="p-0210" num="0209">Another device that may be coupled to bus <b>1511</b> is hard copy device <b>1524</b>, which may be used for printing instructions, data, or other information on a medium such as paper, film, or similar types of media. Furthermore, a sound recording and playback device, such as a speaker and/or microphone may optionally be coupled to bus <b>1511</b> for audio interfacing with computer system <b>1500</b>. Another device that may be coupled to bus <b>1511</b> is a wired/wireless communication capability <b>1525</b> to communication to a phone or handheld palm device.</p>
<p id="p-0211" num="0210">Note that any or all of the components of system <b>1500</b> and associated hardware may be used in the present invention. However, it can be appreciated that other configurations of the computer system may include some or all of the devices.</p>
<p id="p-0212" num="0211">Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as essential to the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08625912-20140107-M00001.NB">
<img id="EMI-M00001" he="5.67mm" wi="76.20mm" file="US08625912-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>receiving, with a processing system, a JPM file having at least one codestream divided and stored in a plurality of boxes in the file with metadata that describes to a parser how portions of the at least one codestream have been divided and stored in each of the plurality of boxes within the file; and</claim-text>
<claim-text>performing one or more operations on information in the file based on the metadata.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the boxes are shared data entry boxes.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein performing the one or more operations comprises the parser operating on the information in the file based on the description of the at least one codestream in the metadata.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the metadata is located near the beginning of the file.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method defined in <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein the metadata is located after a File Type box in the file.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of the boxes includes information to specify a portion of the one or more codestreams stored therein.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method defined in <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein the information comprises an index.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method defined in <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein at least one index is indicative of the contents of the box with which the at least one index is associated.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method defined in <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the indices are sequential and a portion of the codestream is specified using a range of indices.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the metadata includes a string to indicate a range of packets of the codestream present in each of the boxes.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method defined in <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the boxes comprise shared data entry boxes.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of one or more boxes stores a packet of one of the codestreams.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of one or more boxes stores a tile-part of one of the codestreams.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method defined in <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the metadata comprises information for one from a group consisting of a page and a page collection boxes.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A non-transitory computer-readable recordable media with instructions stored thereon which, when executed by a system, cause the system to:
<claim-text>receive a JPM file having at least one codestream divided and stored in a plurality of boxes in the file with metadata that describes to a parser how portions of the at least one codestream have been divided and stored in each of the plurality of boxes within the file; and</claim-text>
<claim-text>perform one or more operations on information in the file based on the metadata.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An apparatus comprising:
<claim-text>an input to receive a JPM file having at least one codestream divided and stored in a plurality of boxes in the file with metadata that describes to a parser how portions of the at least one codestream have been divided and stored in each of the plurality of boxes within the file; and</claim-text>
<claim-text>a processing unit coupled to the input to perform one or more operations on information in the file based on the metadata.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

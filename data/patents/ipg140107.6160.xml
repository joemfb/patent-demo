<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627284-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627284</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12488164</doc-number>
<date>20090619</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>991</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717120</main-classification>
<further-classification>707609</further-classification>
</classification-national>
<invention-title id="d2e53">Managed system extensibility</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5526523</doc-number>
<kind>A</kind>
<name>Straub et al.</name>
<date>19960600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5903753</doc-number>
<kind>A</kind>
<name>Bramnick et al.</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6008806</doc-number>
<kind>A</kind>
<name>Nakajima et al.</name>
<date>19991200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2005/0177581</doc-number>
<kind>A1</kind>
<name>Sezgin et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0156913</doc-number>
<kind>A1</kind>
<name>Miyamoto et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0021921</doc-number>
<kind>A1</kind>
<name>Horn</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2008/0256095</doc-number>
<kind>A1</kind>
<name>Wakefield</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2009/0141110</doc-number>
<kind>A1</kind>
<name>Gervasi et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>347100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>CN</country>
<doc-number>101167053</doc-number>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>&#x201c;Managed Extensibility Framework&#x201d;, Retrieved at&#x3c;&#x3c;http://www.devtopics.com/managed-extensibility-framework/&#x3e;&#x3e;, Mar. 2003, p. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Hackett Scott, &#x201c;Plug-in Extensibility through Reflection in .Net and Java&#x201d;, Retrieved at&#x3c;&#x3c;http://blog.slickedit.com/?p=217&#x3e;&#x3e;, Feb. 20, 2008, pp. 6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Bershad, et al.&#x201c;Extensibility, Safety and Performance in the SPIN Operating System&#x201d;, Retrieved at&#x3c;&#x3c;http://www-cse.ucsd.edu/&#x2dc;savage/papers/Sosp95.pdf&#x3e;&#x3e;, pp. 17.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>&#x201c;TEP: Common Category Framework (CCF)&#x201d;, Retrieved at&#x3c;&#x3c;http://t3flyers.wordpress.com/2006/09/14/tep-common-category-framework-ccf/&#x3e;&#x3e;, Sep. 14, 2006, pp. 12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;Firefox Mass Extensions Manager 1.0 description&#x201d;, Retrieved at&#x3c;&#x3c;http://wareseeker.com/Network-Internet/firefox-mass-extensions-manager-1.0.zip/3505180&#x3e;&#x3e;, p. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Ghormley, et al.&#x201c;Interposition as an Operating System Extension Mechanism&#x201d;, Retrieved at&#x3c;&#x3c;http://www.eecs.berkeley.edu/Pubs/TechRpts/1996/CSD-96-920.pdf&#x3e;&#x3e;, pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>&#x201c;Extensible Operating Systems&#x201d;, Retrieved at&#x3c;&#x3c;http://www.cs.unm.edu/&#x2dc;riesen/prop/node26.html&#x3e;&#x3e;, p. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>&#x201c;International Search Report&#x201d;, Mailed Date: Feb. 8, 2011, Application No. PCT/US2010/039117, Filed Date: Jun. 18, 2010, pp. 8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;Foreign Office Action&#x201d;, Chinese Application No. 201080027255.7, (Jun. 8, 2013), 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>10</number-of-drawing-sheets>
<number-of-figures>10</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100325085</doc-number>
<kind>A1</kind>
<date>20101223</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Stritzel</last-name>
<first-name>Adam D.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Canter</last-name>
<first-name>Adriaan W.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Traut</last-name>
<first-name>Eric P.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sinha</last-name>
<first-name>Suyash</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Erdogan</last-name>
<first-name>Tahsin</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rajpure</last-name>
<first-name>Dattatraya B.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sheehan</last-name>
<first-name>John M.</first-name>
<address>
<city>Cambridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Stritzel</last-name>
<first-name>Adam D.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Canter</last-name>
<first-name>Adriaan W.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Traut</last-name>
<first-name>Eric P.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Sinha</last-name>
<first-name>Suyash</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Erdogan</last-name>
<first-name>Tahsin</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Rajpure</last-name>
<first-name>Dattatraya B.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Sheehan</last-name>
<first-name>John M.</first-name>
<address>
<city>Cambridge</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wolfe-SBMC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Nam</last-name>
<first-name>Hyun</first-name>
<department>2184</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">One or more extension registrations are received for each of multiple software components installed on a computing device. The one or more extension registrations identify the software components as providers of functionality. A record of the one or more extension registrations for each of the multiple software components is maintained. Requests are received, from other software components installed on the computing device, that identify particular functionality. In response to such requests, the information regarding one or more of the multiple software components that provide the particular functionality is returned to the other software components.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="206.93mm" wi="166.45mm" file="US08627284-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="205.57mm" wi="174.24mm" file="US08627284-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="188.98mm" wi="157.73mm" file="US08627284-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="232.24mm" wi="165.44mm" file="US08627284-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="175.26mm" wi="146.47mm" file="US08627284-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="249.09mm" wi="176.02mm" file="US08627284-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="169.67mm" wi="152.15mm" file="US08627284-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="196.43mm" wi="143.68mm" file="US08627284-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="238.25mm" wi="172.80mm" file="US08627284-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="163.41mm" wi="139.87mm" file="US08627284-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="119.80mm" wi="130.73mm" file="US08627284-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">A computer typically runs an operating system that provides various functionality including allowing other applications to be installed and run on the computer. Such an operating system oftentimes provides a location where applications can store information serving to register the applications as providing certain functionality to other applications and thereby extending the functionality of the operating system. This location could be, for example, an operating system registry. While maintaining such information can be beneficial to the applications, current storage mechanisms are not without their problems.</p>
<p id="p-0003" num="0002">One such problem is that different applications typically interact with the same location, allowing situations to arise where information stored by one application is deleted, overwritten, or otherwise corrupted by another application. Such situations can result in applications not running and providing their intended functionality. Another such problem is that applications are typically responsible for removing their information from that location when they are uninstalled. If applications do not remove their information correctly, at any given time the location can store information indicating certain applications are available to run even though those applications have been uninstalled and are not actually available to run.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0004" num="0003">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p>
<p id="p-0005" num="0004">In accordance with one or more aspects, one or more extension registrations are received for each of multiple software components installed on a computing device. The one or more extension registrations identify the software components as providers of functionality. A record of the one or more extension registrations for each of the multiple software components is maintained. Requests are received, from other software components installed on the computing device, that identify particular functionality. In response to such requests, the information regarding one or more of the multiple software components that provide the particular functionality is returned to the other software components.</p>
<p id="p-0006" num="0005">In accordance with one or more aspects, a new extension registration is obtained from an extension management module. The extension management module manages access to an extension registration database, and the new extension registration corresponds to an extension provider that communicates with the extension management module. Extension information based on the new extension registration can optionally be stored in a legacy store.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">The same numbers are used throughout the drawings to reference like features.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example computing device implementing the managed system extensibility in accordance with one or more embodiments.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example software component in accordance with one or more embodiments.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example extension registration database in accordance with one or more embodiments.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart illustrating an example process for implementing managed system extensibility in accordance with one or more embodiments.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart illustrating another example process for implementing managed system extensibility in accordance with one or more embodiments.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating an example process for using the managed system extensibility to identify an extension provider associated with a particular file extension in accordance with one or more embodiments.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an example process for using the managed system extensibility to obtain dynamic link library (DLL) locations in accordance with one or more embodiments.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example legacy management system in accordance with one or more embodiments.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating an example process for supporting legacy extension consumers with the managed system extensibility in accordance with one or more embodiments.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an example computing device that can be configured to implement the managed system extensibility in accordance with one or more embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0018" num="0017">Managed system extensibility is discussed herein. An operating system includes an extension management module that operates as a broker between extension providers and extension consumers. An extension provider registers with the extension management module, giving the extension management module information describing the functionality provided by the extension provider. An extension consumer that desires information describing one or more extension providers that provide particular functionality makes a request to the extension management module for such information. In response to such a request, the extension management module reviews the information given by the extension providers and identifies one or more extension providers that provide the requested functionality. Information regarding these one or more extension providers is then returned to the requesting extension consumer.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example computing device <b>100</b> implementing the managed system extensibility in accordance with one or more embodiments. Computing device <b>100</b> can be a variety of different devices capable of running software applications. For example, computing device <b>100</b> can be a desktop computer, a server computer, a laptop computer, a mobile station, an entertainment appliance, a set-top box communicatively coupled to a display device, a cellular or other wireless phone, a game console, an automotive computer, and so forth. Thus, computing device <b>100</b> may range from a full resource device with substantial memory and processor resources (e.g., personal computers, game consoles) to a low-resource device with limited memory and/or processing resources (e.g., traditional set-top boxes, hand-held game consoles).</p>
<p id="p-0020" num="0019">Computing device <b>100</b> includes an operating system <b>102</b> having an extension management module <b>104</b> and an extension registration database <b>106</b>. Computing device <b>100</b> also includes extension consumers <b>112</b> and extension providers <b>114</b>. Each extension consumer <b>112</b> is a software component, and each extension provider <b>114</b> is a software component. A software component performs various operations and is included as part of a software application or software product. The same software component can be shared by multiple such applications or products. Although illustrated as separate from operating system <b>102</b>, alternatively one or more extension consumers <b>112</b> and/or one or more extension providers <b>114</b> can be components or modules of operating system <b>102</b>.</p>
<p id="p-0021" num="0020">Each software component includes instructions and data that can be run on computing device <b>100</b> and one or more software components provide the functionality of a software product or software application. Operating system <b>102</b> communicates with the individual software components when running, rather than with the software product as a whole.</p>
<p id="p-0022" num="0021">Each extension provider <b>114</b> provides functionality that can be used by extension consumers <b>112</b>. This functionality is in addition to or in place of functionality provided by operating system <b>102</b> and thus can be referred to as extending the functionality of operating system <b>102</b>. It should be noted that a particular software component can be an extension consumer <b>112</b> for one type of functionality and an extension provider <b>114</b> for another type of functionality (or the same type of functionality).</p>
<p id="p-0023" num="0022">Extension providers <b>114</b> can provide a variety of different types of functionality. Extension management module <b>104</b> is notified of the particular type of functionality that is provided by a particular software component when the software component is installed on computing device <b>100</b>. Extension management module <b>104</b> can also be notified of additional functionality provided by a particular software component while that software component is running. A record of the particular type of functionality provided by each extension provider <b>114</b> is maintained by extension management module <b>104</b> in extension registration database <b>106</b>. When an extension consumer <b>112</b> desires information regarding software components that provide particular functionality, the extension consumer <b>112</b> sends a request to extension management module <b>104</b> for such information.</p>
<p id="p-0024" num="0023">For example, assume that multiple extension providers <b>114</b> provide functionality to interpret and operate on image files stored in the Joint Photographic Experts Group (JPEG) format. Each of these extension providers <b>114</b>, when it is installed on computing device <b>100</b>, notifies extension management module <b>104</b> that the extension provider <b>114</b> provides functionality to interpret and operate on image files stored in the JPEG format. A record of this functionality provided by these extension providers <b>114</b> is maintained in extension registration database <b>106</b>. Subsequently, assume that an extension consumer <b>112</b> desires to run a software component that can interpret and operate on image files stored in the JPEG format. The extension consumer <b>112</b> sends a request to extension management module <b>104</b> for information identifying extension providers <b>114</b> that can interpret and operate on image files stored in the JPEG format. Extension management module <b>104</b> accesses extension registration database <b>106</b> to identify the extension providers <b>114</b> that can interpret and operate on image files stored in the JPEG format, and returns to the extension consumer <b>112</b> an indication of the extension providers <b>114</b> that can interpret and operate on image files stored in the JPEG format.</p>
<p id="p-0025" num="0024">Generally, an extension refers to a first software component affecting the behavior of a second software component through an extension registration that is accessed by the second software component. This behavior can include, for example, invoking the first software component (e.g., invoking a traditional plug-in module), displaying information (e.g., shortcuts or menu items), and so forth. A variety of different types of extensions providing different types of functionality can be provided by extension providers <b>114</b>.</p>
<p id="p-0026" num="0025">Examples of such different types of extensions include file associations (e.g., software components that can interpret and operate on, also referred to as handle, particular types of files), language parsers (e.g., software components that can parse files in particular languages and/or formats), spell checkers (e.g., software components that provide spellchecking functionality), and dynamic link libraries (e.g., software components to provide particular dynamic link libraries (DLLs)). Additional examples of such different types of extensions include help files (e.g., software components that provide help information), localization files (e.g., software components that are localized to a particular language or region), plug and play (PnP) drivers (e.g., software components that provide PnP drivers), menu items (e.g., software components that provide items to be included in a menu to be displayed to a user), shortcut items (e.g., software components that provide shortcuts or links to be displayed on a particular screen or in a particular window to a user), and so forth. It is to be appreciated that, although example types of extensions are discussed herein, the managed system extensibility is not limited to these example types and can be used with other types of extensions.</p>
<p id="p-0027" num="0026">Extension registration database <b>106</b> is a record of extension registration declarations that have been made by extension providers <b>114</b>. Extension management module <b>104</b> manages extension registration database <b>106</b>, adding extension registrations to and removing extension registrations from database <b>106</b> as appropriate. Such additions and removals are performed by module <b>104</b> in response to requests from other components or modules. Oftentimes, an installer component or module that is installing (or uninstalling) a component provides such requests for adding and removing extension registrations. However, such requests can also be received from other components or modules, such as extension providers <b>114</b>.</p>
<p id="p-0028" num="0027">Extension providers <b>114</b> and extension consumers <b>112</b> do not have direct access to information stored in extension registration database <b>106</b>. Rather, extension providers <b>114</b> and extension consumers <b>112</b> access the information stored in database <b>106</b> via extension management module <b>104</b>. Extension registration database <b>106</b> can be implemented in a variety of different manners, such as using tables, lists, database records or entries, and so forth.</p>
<p id="p-0029" num="0028">Furthermore, it should be noted that the managed system extensibility discussed herein provides a centralized and common model for the registration of extensions and the discovery of extensions across multiple different types of extensions. Extension management module <b>104</b> provides a common interface for accessing extension registrations regardless of the type of the extension.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an example software component <b>200</b> in accordance with one or more embodiments. A software component is a collection of both one or more files and metadata that describes the software component. Software component <b>200</b> includes one or more resource files <b>202</b> each storing various instructions and/or data for the software component <b>200</b>. The particular resource files <b>202</b> that are included in software component <b>200</b> can vary based on the desires of the developer of software component <b>200</b>.</p>
<p id="p-0031" num="0030">Manifest <b>204</b> stores metadata describing software component <b>200</b>. In one or more embodiments, manifest <b>204</b> includes an identifier of software component <b>200</b>, one or more version numbers of software component <b>200</b>, and one or more extension registration declarations <b>206</b> for software component <b>200</b>. The identifier of software component <b>200</b> allows software component <b>200</b> to be distinguished from other software components installed on a device. The identifier can be generated in a variety of different manners, such as based on the name assigned by the developer of software component <b>200</b>, an identifier of the developer of software component <b>200</b>, an identifier of the publisher or distributor of software component <b>200</b>, the version number of software component <b>200</b>, and so forth.</p>
<p id="p-0032" num="0031">The version number of software component <b>200</b> allows different versions of software component <b>200</b> to be readily identified. In one or more embodiments, two different version numbers are included in manifest <b>204</b>: a contract version (also referred to as a generational version) number and a servicing version number. Alternatively, the contract version number and servicing version number can be combined together into a multi-element number with one or more elements being the contract version number and one or more elements being the servicing version number.</p>
<p id="p-0033" num="0032">Multiple (m) extension registration declarations <b>206</b> are illustrated as being included in manifest <b>204</b>. Each extension registration declaration describes particular extended functionality that is provided by software component <b>200</b>. For example, one extension registration declaration <b>206</b> can describe a first file association, another extension registration declaration <b>206</b> can describe a second file association, another extension registration declaration <b>206</b> can describe a spellchecker and yet another extension registration declaration can describe a shortcut item. Although multiple extension registration declarations <b>206</b> are illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, alternatively a manifest <b>204</b> can include a single extension registration declaration or even no extension registration declarations.</p>
<p id="p-0034" num="0033">Each extension registration declaration <b>206</b> includes a category identifier <b>212</b>, extension metadata <b>214</b>, and extension data <b>216</b>. Category identifier <b>212</b> identifies the category associated with extension registration declaration <b>206</b>. Each type of extension corresponds to a different category. For example, file associations correspond to one category, spell checkers correspond to another category, and so forth. The type of extension being described by extension registration declaration <b>206</b> is identified by category identifier <b>212</b>.</p>
<p id="p-0035" num="0034">Category identifier <b>212</b> can be a variety of different letters, numbers, symbols, other characters, and so forth. In one or more embodiments, category identifier <b>212</b> is a string of characters that is known to both extension consumers and extension providers. Accordingly, extension providers can use a particular category identifier to identify a particular type of extension and know that extension consumers are aware of that particular category identifier and can request information regarding that particular type of extension by using that particular category identifier. This requesting of information regarding extensions based on category identifier is discussed in more detail below.</p>
<p id="p-0036" num="0035">Extension metadata <b>214</b> includes information describing extension registration declaration <b>206</b>. A variety of different information can be included in metadata <b>214</b>. Examples of such information include a name of the extension registration declaration that allows the extension registration declaration to be distinguished from other extension registration declarations, another identifier of the extension registration declaration, and so forth.</p>
<p id="p-0037" num="0036">Extension data <b>216</b> includes various data for extension registration declaration <b>206</b>. The particular data included can vary for different types of extensions as well as for different extensions of the same type. For example, extension data <b>216</b> can include file paths to images of icons to be displayed, file paths to executable files, file paths to DLLs, firewall rules, information regarding the category to which the extension registration declaration corresponds (e.g., for a file association an indication that the extension registration declaration is for &#x201c;.jpg&#x201d; files), and so forth. When information regarding extension registration declaration <b>206</b> is to be returned to an extension consumer in response to a request for information, the data in extension data <b>216</b> is returned to the extension consumer.</p>
<p id="p-0038" num="0037">In one or more embodiments, the data in extension data <b>216</b> includes one or more registration parameters. Each registration parameter includes a name, type, and value. The registration parameter name is an identifier of the registration parameter allowing the registration parameter to be distinguished from other registration parameters in the extension registration declaration. The registration parameter type identifies a type of data included in the registration parameter. A variety of different setting types can be supported, such as integers, floating point numbers, Boolean values, character strings, date and/or time values, references to files or directories (e.g., by file paths), and so forth. The registration parameter value is a specific value for the registration parameter.</p>
<p id="p-0039" num="0038">For example, a registration parameter could have a name of &#x201c;FileAssociationName&#x201d;, a type of &#x201c;string&#x201d;, and a value of &#x201c;.jpg&#x201d;. By way of another example, a registration parameter could have a name of &#x201c;ShortcutIcon&#x201d;, a type of &#x201c;path&#x201d;, and a value of &#x201c;image.gif&#x201d;.</p>
<p id="p-0040" num="0039">In one or more embodiments, a category definition is defined for each category identifier. A category definition for a category identifier describes the information that is to be included in extension registration declarations having that category identifier. An extension management module (such as extension management module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>) or other component or module can optionally monitor extension registrations and return, in response to requests regarding the extension registrations, only those extension registrations which conform to the category definition for their category identifiers. Alternatively, no verification of such conformance may be performed, with extension providers and extension consumers being relied on as adhering to the category definitions.</p>
<p id="p-0041" num="0040">By way of example, a category definition can have a format that includes a name, a description, one more parameters, and zero or more arrays. The category name is a category identifier as discussed above. The category description is a description of the category designed to allow development tools to assist a developer in authoring extension registration declarations. Each parameter (e.g., a registration parameter as discussed above) describes data for an extension registration declaration. Each parameter can include one or more of a name of the parameter, a type of data supported by the parameter, a minimum value for the parameter, a maximum value for the parameter, an indication of whether the parameter is required for a valid extension registration declaration, and a user-friendly, human-readable description of the parameter. Each array is a collection of zero or more parameters. Each array can include one or more of a name of the array and a user-friendly, human-readable description of the array. It is to be appreciated that this category definition format is an example and other formats including additional information and/or not including some of the information described in this example can be used.</p>
<p id="p-0042" num="0041">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, in order to run a software component on computing device <b>100</b>, that software component is installed on computing device <b>100</b>. The installation process is typically performed by an installation component or module, and typically includes storing files in various locations of a file system of operating system <b>102</b>, storing various information describing the software component in various stores, and so forth. As part of the process of installing a software component on computing device <b>100</b>, extension management module <b>104</b> is made aware of the extension registration declarations included in the manifest of the software component.</p>
<p id="p-0043" num="0042">Extension management module <b>104</b> can be made aware of the extension registration declarations included in the manifest of a software component in a variety of different manners. In one or more embodiments, the manifest (or at least the extension registration declarations) is maintained in a location accessible to module <b>104</b>. Accordingly, module <b>104</b> can retrieve the extension registration declarations when desired and add the extension registration declarations to extension registration database <b>106</b>. Alternatively, module <b>104</b> can be made aware of the extension registration declarations in other manners, such as an installation component or module invoking a method of an application programming interface (API) exposed by module <b>104</b>, an installation component or module using other operations or techniques to pass the extension registration declarations to module <b>104</b>, and so forth.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an example extension registration database <b>300</b> in accordance with one or more embodiments. Extension registration database <b>300</b> can be, for example, an extension registration database <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Extension registration database <b>300</b> includes multiple extension registrations <b>302</b> and <b>304</b>. In the example of <figref idref="DRAWINGS">FIG. 3</figref>, the extension registrations are organized by category. For example, multiple (x) extension registrations <b>302</b> are included in a first category <b>312</b>, and multiple (z) extension registrations <b>304</b> are included in a second category <b>314</b>. Multiple (y) categories can be included in extension registration database <b>300</b>. An extension registration declaration from a manifest of a software component (e.g., manifest <b>204</b> of <figref idref="DRAWINGS">FIG. 2</figref>) is obtained by an extension management module (e.g., module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>) and added to extension registration database <b>300</b> as an extension registration. For example, the information in an extension registration declaration in a manifest of a software component can be copied to an extension registration of the extension registration database.</p>
<p id="p-0045" num="0044">In the example of <figref idref="DRAWINGS">FIG. 3</figref>, the extension registrations <b>302</b>, <b>304</b> are organized by category. Each category corresponds to a category identifier (e.g., a category identifier <b>212</b> of <figref idref="DRAWINGS">FIG. 2</figref>). When an extension management module (such as module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>) adds an extension registration to database <b>300</b>, the extension management module obtains the category identifier for the extension registration being added. If a category <b>312</b>, <b>314</b> already exists in database <b>300</b> for that category identifier, then the extension registration is added to that category. However, if no such category already exists in database <b>300</b>, then a new category for that category identifier is created in database <b>300</b>.</p>
<p id="p-0046" num="0045">Each extension registration <b>302</b> includes extension metadata <b>324</b> and extension data <b>326</b>. Similarly, each extension registration <b>304</b> includes extension metadata <b>334</b> and extension data <b>336</b>. Extension metadata <b>324</b> and <b>334</b> are analogous to extension metadata <b>214</b> of <figref idref="DRAWINGS">FIG. 2</figref>. Extension data <b>326</b> and <b>336</b> are analogous to extension data <b>216</b> of <figref idref="DRAWINGS">FIG. 2</figref>. Accordingly, when the extension management module adds an extension registration to database <b>300</b>, both the extension metadata and the extension data obtained from the extension registration declaration in the manifest of the software component (e.g., manifest <b>204</b> of <figref idref="DRAWINGS">FIG. 2</figref>) can be copied to the extension registration in database <b>300</b>. An extension registration declaration name or identifier included in extension metadata <b>214</b> becomes an extension registration name or identifier in extension metadata <b>324</b> or <b>334</b>. The extension registration name or identifier allows the extension registration to be distinct from other extension registrations in database <b>300</b>.</p>
<p id="p-0047" num="0046">It should be noted that as the extension registrations are organized in database <b>300</b> by category, the category identifier obtained from the extension registration declaration in the manifest need not be maintained in the extension registration in database <b>300</b>. Alternatively, the extension registrations <b>302</b>, <b>304</b> can include the category identifier copied from the extension registration declaration in the manifest of the software component. In situations where the extension registration in database <b>300</b> include the category identifiers, database <b>300</b> need not be organized by category, although alternatively database <b>300</b> can be organized by category with the category identifiers still be included in the extension registrations in database <b>300</b>.</p>
<p id="p-0048" num="0047">Additionally, when an extension registration is added to database <b>300</b>, an indication is maintained of the software component that corresponds to that extension registration (e.g., the software component that included the extension registration declaration for that extension registration). This indication can be maintained in a variety of different manners, such as by adding to the extension metadata an identifier of the software component to which the extension registration corresponds, maintaining a separate list or record of which software components correspond to which extension registrations, storing extension registrations for different software components in different locations, and so forth.</p>
<p id="p-0049" num="0048">Returning to <figref idref="DRAWINGS">FIG. 1</figref>, when an extension consumer <b>112</b> desires information regarding extension registrations in extension registration database <b>106</b>, the extension consumer <b>112</b> sends a request for information to extension management module <b>104</b>. This request includes, for example, an indication of the category (the type of extension) desired by the extension consumer <b>112</b>. This request can also include additional information regarding the category (e.g., for a file association the request can include an indication that information regarding extension registrations for &#x201c;.jpg&#x201d; files is requested).</p>
<p id="p-0050" num="0049">In one or more embodiments, multiple different versions of software components can be installed on computing device <b>100</b>. As discussed above, the software component can have two different version numbers: a contract version number and a servicing version number. Operating system <b>102</b> can identify software components having the same software component identifier but different contract version numbers as different software components. Accordingly, two different software components having different contract version numbers can be installed on computing device <b>100</b> concurrently. Each of these two different software components can be an extension provider <b>114</b> and have extension registrations included in extension registration database <b>106</b>.</p>
<p id="p-0051" num="0050">However, the operating system <b>102</b> can identify software components having the same software component identifier and contract version number to be the same software components, even if the servicing version numbers are different. Although two such software component versions can be installed on computing device <b>100</b> concurrently, one of the software components is selected as an active software component. These two software component versions can be extension providers <b>114</b>, and the active software component can have extension registrations included in extension registration database <b>106</b>. The other non-active software component does not have extension registrations included in extension registration database <b>106</b>. When a new version of a software component that is an extension provider <b>114</b> is installed on computing device <b>100</b>, the extension registrations of the previous version of the software component are removed from extension registration database <b>106</b>, and extension registrations of the new version of the software component are added to extension registration database <b>106</b>.</p>
<p id="p-0052" num="0051">The extension registrations obtained from extension registration declarations in a manifest of a software component can also be referred to as static extension registrations. In addition, extension management module <b>104</b> can also support dynamic extension registrations. A dynamic extension registration is an extension registration performed by a software component after being installed on computing device <b>100</b>. The registration can be performed in response to a user request, or alternatively in response to settings or rules followed by the software component, or in response to a request from another component or module.</p>
<p id="p-0053" num="0052">A dynamic extension registration is made by the software component (typically an extension provider <b>114</b>) submitting a request to add an extension registration to extension registration database <b>106</b>. The request includes the metadata and data for the extension registration, including both an identifier of the corresponding software component and a category identifier, analogous to the extension registration declarations in the manifests discussed above. Extension management module <b>104</b> receives the request and adds the extension registration to extension registration database <b>106</b> in the same manner as module <b>104</b> adds static extension registrations to database <b>106</b>.</p>
<p id="p-0054" num="0053">By way of example, a particular extension provider <b>114</b> may be able to interpret and operate on image files in both the JPEG format and the Tagged Image File Format (TIFF) format. However, the default setting for the extension provider <b>114</b> may be to provide functionality for only images in the JPEG format. Accordingly, a static extension registration is made when the extension provider <b>114</b> is installed on computing device <b>100</b>, the static extension registration indicating a file association to the JPEG format. Subsequent requests for information regarding extension registrations that provide functionality to interpret and operate on files in the JPEG format would return information regarding the extension provider <b>114</b>, but requests for information regarding extension registrations that provide functionality to interpret and operate on files in the TIFF format would not return information regarding the extension provider <b>114</b>.</p>
<p id="p-0055" num="0054">Continuing with this example, assume that a user of the extension provider <b>114</b> subsequently inputs a request to have the extension provider <b>114</b> also be responsible for operating on images in the TIFF format. The extension provider <b>114</b> makes a request to extension management module <b>104</b> to add an extension registration to extension registration database <b>106</b>. This extension registration to be added to database <b>106</b> indicates a file association of the extension provider <b>114</b> to the TIFF format. Accordingly, subsequent requests for information regarding extension registrations that provide functionality to interpret and operate on files in the JPEG format or the TIFF format would return information regarding the extension provider <b>114</b>.</p>
<p id="p-0056" num="0055">In addition to extension management module <b>104</b> adding extension registrations to extension registration database <b>106</b>, module <b>104</b> can also remove or delete extension registrations from database <b>106</b>. An extension deletion or removal is performed in response to a request by a component or module (e.g., by an uninstaller component), typically when a software component is being uninstalled from computing device <b>100</b>. When uninstalling a software component, extension management module <b>104</b> deletes extension registrations from database <b>106</b> that correspond to that software component. Information indicating the software component to which each extension registration corresponds can be maintained in a variety of different manners as discussed above Accordingly, extension management module <b>104</b> can help ensure that extension registrations corresponding to a software component are removed from database <b>106</b> when the software component is uninstalled from computing device <b>100</b>. Module <b>104</b> need not rely on the software component itself (or an uninstaller component associated with that software component) removing the extension registrations corresponding to that software component from computing device <b>100</b>.</p>
<p id="p-0057" num="0056">In one or more embodiments, various operations are supported by extension management module <b>104</b> allowing extension consumers <b>112</b> (and/or other components or modules) to access extension registration database <b>106</b>. These operations can be exposed as methods of an API or alternatively requests for these operations to be performed can be made to control module <b>104</b> in other manners. In one or more embodiments, such an API can also be used by extension providers <b>114</b> to add and/or remove extension registrations from database <b>106</b>. Alternatively, extension registrations can be added to database <b>106</b> in other declarative manners rather than via an API. Table I below describes an example of such operations supported by extension management module <b>104</b> in accessing extension registration database <b>106</b>.</p>
<p id="p-0058" num="0057">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="196pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE I</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Operation</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Enumerate</entry>
<entry>Returns a list of extension registrations in the extension registration</entry>
</row>
<row>
<entry>registrations</entry>
<entry>database. The caller typically specifies a category, in which case</entry>
</row>
<row>
<entry/>
<entry>only extension registrations of the specified category are returned.</entry>
</row>
<row>
<entry>Get registration</entry>
<entry>Looks up an extension registration. The caller provides a</entry>
</row>
<row>
<entry/>
<entry>component identity and an extension registration name. If the</entry>
</row>
<row>
<entry/>
<entry>specified extension registration is found, the extension registration</entry>
</row>
<row>
<entry/>
<entry>information (e.g., the extension data and/or extension metadata) is</entry>
</row>
<row>
<entry/>
<entry>returned to the caller.</entry>
</row>
<row>
<entry>Get registration</entry>
<entry>Returns the value of a specified extension registration parameter of</entry>
</row>
<row>
<entry>parameter</entry>
<entry>a specified registration. Extension data and/or extension metadata</entry>
</row>
<row>
<entry/>
<entry>can be specified and returned using this operation.</entry>
</row>
<row>
<entry>Add registration</entry>
<entry>Specifies an extension registration to be added to the extension</entry>
</row>
<row>
<entry/>
<entry>registration database.</entry>
</row>
<row>
<entry>Get category change</entry>
<entry>Returns a change number for the category specified by the caller.</entry>
</row>
<row>
<entry>number</entry>
</row>
<row>
<entry>Request</entry>
<entry>Allows a caller to register for a notification when an extension</entry>
</row>
<row>
<entry>category change</entry>
<entry>registration of a specified category is added to or removed from the</entry>
</row>
<row>
<entry>notification</entry>
<entry>extension registration database. Changes to the extension</entry>
</row>
<row>
<entry/>
<entry>registration database are monitored by the extension management</entry>
</row>
<row>
<entry/>
<entry>module and a notification is sent to the caller when an extension</entry>
</row>
<row>
<entry/>
<entry>registration is added to or removed from the extension registration</entry>
</row>
<row>
<entry/>
<entry>database for the registered-for category.</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0059" num="0058">Table I includes a reference to a change number for a category. In one or more embodiments, extension management module <b>104</b> maintains a different change number for each category in extension registration database <b>106</b>. Module <b>104</b> modifies (e.g., increments) this change number each time an extension registration is added to or removed from extension registration database <b>106</b>. A caller can use this change number in different manners. For example, an extension consumer <b>112</b> can obtain the change number for a category from extension management module <b>104</b>. If the change number is the same as the previous change number that the extension consumer <b>112</b> obtained then the extension consumer knows that no changes have been made to the category since the extension consumer <b>112</b> last obtained the change number. However, if the change number is not the same as the previous change number, then the extension consumer <b>112</b> knows that an extension registration has been added to and/or removed from the category since the extension consumer <b>112</b> last obtained the change number.</p>
<p id="p-0060" num="0059">Alternatively, rather than using change numbers for a category, a caller (e.g., an extension consumer <b>112</b>) can determine when an extension registration has been added to and/or removed from the category in other manners. For example, a timestamp can be associated with a category. This timestamp is updated each time an extension registration is added to and/or removed from a category. The caller can obtain this timestamp and determine whether a change has been made to the category since the extension consumer last obtained the timestamp&#x2014;if the timestamps are the same then no changes have been made to the category, whereas if the timestamps are different then a change has been made to the category.</p>
<p id="p-0061" num="0060">Thus, it can be seen that a variety of different types of extensibility can be provided by extension providers <b>114</b>, with the extension registrations being stored in extension registration database <b>106</b>. The different extensibility available on computing device <b>100</b> can be readily identified by extension consumers <b>112</b> via extension management module <b>104</b> (which in turn accesses the extension registrations stored in database <b>106</b>).</p>
<p id="p-0062" num="0061">It can also be seen that extension management module <b>104</b> operates as a central authority via which extension providers <b>114</b> can register the extensibility that they provide and via which extension consumers <b>112</b> can access the extensibility provided by multiple extension providers <b>114</b>. Rather than having extension consumers <b>112</b> provide a specific location (e.g., a particular file, a particular portion of a registry, etc.) that the extension providers <b>114</b> can modify, both consumers <b>112</b> and providers <b>114</b> interact with module <b>104</b>. This centralized authority allows module <b>104</b> to, for example, maintain knowledge regarding the various extension providers <b>114</b> installed on computing device <b>100</b>, and readily remove extension registrations if an extension provider <b>114</b> is uninstalled from computing device <b>100</b>. This centralized authority also allows providers <b>114</b> and consumers <b>112</b> to be installed and uninstalled in different orders and at different times&#x2014;no constraints on the ordering of installation or uninstallation of providers <b>114</b> and consumers <b>112</b> need be imposed by module <b>104</b>.</p>
<p id="p-0063" num="0062">It is to be appreciated that the managed system extensibility discussed herein provides a variety of different system extensibility scenarios. For example, an extension consumer <b>112</b> can be an operating system shell program or module that displays a user interface for operating system <b>102</b> to a user of computing device <b>100</b>. Different software components that can be run by the user can be included as extension providers <b>114</b>. Each extension provider can have one or more extension registrations that have registration parameters identifying a path to or location of an icon to be displayed as a shortcut on the user interface, an entry in a menu of the user interface, and so forth. Additionally, the one or more extension registrations can include registration parameters identifying paths to locations where executable files for the corresponding software components are stored. In response to a user selection of such an icon or menu entry, the path to the executable file for the corresponding software component can be readily identified and the executable file run.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart illustrating an example process <b>400</b> for implementing managed system extensibility in accordance with one or more embodiments. Process <b>400</b> is carried out by an extension management module of an operating system running on a device, such as extension management module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and can be implemented in software, firmware, hardware, or combinations thereof. Process <b>400</b> is an example process for implementing managed system extensibility; additional discussions of implementing managed system extensibility are included herein with reference to different figures.</p>
<p id="p-0065" num="0064">In process <b>400</b>, one or more extension registrations for each of multiple software components is received (act <b>402</b>). These multiple software components are also referred to as extension providers as discussed above. These extension registrations can be received as extension registration declarations from software component manifest as discussed above. These extension registrations can also be received in different manners as discussed above, such as by the extension management module accessing the manifest or other declaration of the extension registration declarations, via an API of the extension management module being invoked, and so forth.</p>
<p id="p-0066" num="0065">A record of the received extension registrations is maintained (act <b>404</b>). This record is an extension registration database as discussed above, such as database <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref> or database <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref>. Extension registrations can be added to and/or removed from the extension registration database at various times, as discussed above.</p>
<p id="p-0067" num="0066">Additionally, requests are received from software components for information regarding the multiple software components that provide particular functionality (act <b>406</b>). These requests identify the particular functionality. These software components from which the requests are received are also referred to as extension consumers as discussed above. The requests can be received from the software components from which the extension registrations are received in act <b>402</b> and/or other software components. The information being requested can be requested in a variety of different manners such as by submitting an enumerate registrations request to carry out the enumerate registrations operation discussed above. For example, following some of the examples above, a request received in act <b>406</b> can be a request for information identifying extension providers <b>114</b> that can interpret and operate on image files stored in the JPEG format.</p>
<p id="p-0068" num="0067">In response to such requests, information regarding the multiple software components that provide the particular functionality is returned to the caller (act <b>408</b>). Information that is returned is obtained by the extension management module from the record of received extension registrations that is maintained. The information returned to the caller in act <b>408</b> can vary. In one or more embodiments, the information returned is the extension registrations that provide the particular requested functionality. In other embodiments, the information returned is one or more objects or handles corresponding to the extension registrations that provide the particular requested functionality, and these one or more objects or handles can subsequently be used by the caller to retrieve data or metadata from the extension registrations (via subsequent requests to the extension management module).</p>
<p id="p-0069" num="0068">In one or more embodiments, the request received in act <b>406</b> identifies the particular functionality by including a category identifier in the request. In response to such a request, information regarding all the extension registrations in the identified category (or having the category identifier) of the extension registration database is returned in act <b>408</b>. For example, the request could include a category identifier for shortcut items, and in response information regarding all the shortcut item extension registrations in the extension registration database is returned in act <b>408</b>.</p>
<p id="p-0070" num="0069">In other embodiments, the request received in act <b>406</b> identifies the particular functionality by including an indication of one or more registration parameter names and corresponding values (and optionally including a category identifier). In response to such a request, information regarding all the extension registrations having the identified one or more registration parameter names and corresponding values (and, if a category identifier is included in the request, that also are in the identified category or have the category identifier) is returned in act <b>408</b>. For example, the request could include a category identifier for file associations, and a registration parameter name and value of a file association name of &#x201c;.jpg&#x201d;. In response to such a request, information regarding all the file association extension registrations in the extension registration database that have a registration parameter name and value of a file association name of &#x201c;.jpg&#x201d; is returned in act <b>408</b>.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart illustrating an example process <b>500</b> for implementing managed system extensibility in accordance with one or more embodiments. Process <b>500</b> is carried out by an extension management module of an operating system running on a device, such as extension management module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and can be implemented in software, firmware, hardware, or combinations thereof. Process <b>500</b> is an example process for implementing managed system extensibility; additional discussions of implementing managed system extensibility are included herein with reference to different figures.</p>
<p id="p-0072" num="0071">In process <b>500</b>, a request regarding an extension registration is received (act <b>502</b>). These requests can be received in different manners as discussed above, such as by the extension management module accessing the manifest or other declaration of the extension registration declarations, via an API of the extension management module being invoked, and so forth.</p>
<p id="p-0073" num="0072">A type of the received request is identified (act <b>504</b>). A variety of different types of requests can be received. In one or more embodiments, the types of requests that can be received include add requests, delete requests, and information requests.</p>
<p id="p-0074" num="0073">Add requests can be received at different times, such as when a software component is being installed on the computing device implementing process <b>500</b>, or when a software component is dynamically registering an extension registration. In response to an add request, extension registration information regarding the request is obtained (act <b>506</b>). The extension registration information refers to the data and metadata of the extension registration that is to be added to the extension registration database. The extension registration information can be received as part of the request or alternatively can be obtained in other manners such as by accessing a manifest or other declaration that includes the extension registration information.</p>
<p id="p-0075" num="0074">A category for the extension registration information is identified (act <b>508</b>). An identifier of this category is included in the extension registration information as discussed above.</p>
<p id="p-0076" num="0075">The extension registration information is added to the extension registration database as an extension registration under the identified category (act <b>510</b>). Alternatively, if the extension registration database is not organized by category, the extension registration information including the category identifier is added to the extension registration database. As part of the adding of the extension registration information in act <b>510</b>, a change number for the category for the extension registration can be updated as discussed above. Additionally, another component or module that has requested notification of changes to the extension registration database can also be notified of this added extension registration as discussed above. Process <b>500</b> then proceeds to act <b>502</b> to receive an additional request regarding an extension registration.</p>
<p id="p-0077" num="0076">Returning to act <b>504</b>, delete requests can be received at different times, such as when a software component is being uninstalled from the computing device implementing process <b>500</b>. In response to a delete request, one or more extension registrations to be deleted from the extension registration database are determined (act <b>512</b>). The extension registrations that are to be deleted can be determined in different manners. For example, the delete request can include registration names identifying the particular extension registrations that are to be deleted. By way of another example, a manifest or other declaration that identifies particular extension registrations that are to be deleted can be accessed. By way of yet another example, the delete request can include an indication of a software component being uninstalled. The extension registration database can be searched to identify, as the particular extension registrations that are to be deleted, the extension registrations that correspond to that software component. Information indicating the software component to which each extension registration corresponds can be maintained in a variety of different manners as discussed above.</p>
<p id="p-0078" num="0077">The one or more extension registrations determined in act <b>512</b> are deleted from the extension registration database (act <b>514</b>). As part of the deleting of the extension registration in act <b>514</b>, a change number for the category for the extension registration can be updated as discussed above. Additionally, another component or module that has requested notification of changes to the extension registration database can also be notified of this deleted extension registration as discussed above. Process <b>500</b> then proceeds to act <b>502</b> to receive an additional request regarding an extension registration.</p>
<p id="p-0079" num="0078">Returning to act <b>504</b>, information requests can be received at different times, such as when an extension consumer desires to identify an extension provider that provides particular functionality. In response to an information request, the extension management module identifies one or more extension registrations corresponding to the request (act <b>516</b>). The one or more extension registrations corresponding to the request can be identified in different manners based on the particular request. The request can specify, for example, a particular category identifier, a particular extension registration, a particular registration parameter, and so forth. The one or more extension registrations in the extension registration database satisfying the parameters included in the request are identified in act <b>516</b>.</p>
<p id="p-0080" num="0079">The one or more extension registrations identified in act <b>516</b> are retrieved from the extension registration database (act <b>518</b>). Information regarding the retrieved one or more extension registrations is returned to the requester (act <b>520</b>). The information returned in act <b>520</b> can vary. In one or more embodiments, the information returned is the one or more extension registrations that are retrieved in act <b>518</b>, or the particular requested data or metadata from the one or more extension registrations retrieved in act <b>518</b>. In other embodiments, other information is returned, such as one or more objects or handles corresponding to the one or more extension registrations that are retrieved in act <b>518</b>, and these one or more objects or handles can subsequently be used by the requester to retrieve data or metadata from the extension registrations (via subsequent information requests). Process <b>500</b> then proceeds to act <b>502</b> to receive an additional request regarding an extension registration.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart illustrating an example process <b>600</b> for using the managed system extensibility to identify an extension provider associated with a particular file extension in accordance with one or more embodiments. Process <b>600</b> is carried out by an extension management module of an operating system running on a device, such as extension management module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and can be implemented in software, firmware, hardware, or combinations thereof. Process <b>600</b> is an example process for using the managed system extensibility; additional discussions of using the managed system extensibility are included herein with reference to different figures.</p>
<p id="p-0082" num="0081">In process <b>600</b>, a request for an extension provider associated with a particular file extension is received (act <b>602</b>). The request received in act <b>602</b> specifies (e.g., as a registration parameter) a particular file extension, such as a &#x201c;.jpg&#x201d; extension, a &#x201c;.gif&#x201d;, a &#x201c;.mp3&#x201d; extension, and so forth. The request is typically received from an extension consumer that is a component or module of the operating system on the device implementing process <b>600</b>, although alternatively the request can be received from other components are modules.</p>
<p id="p-0083" num="0082">In response to the request, an extension registration database is accessed (act <b>604</b>). The extension registration database includes a category of file association extensions. The extension registration database can be organized by category and/or each extension registration can include a category identifier as discussed above.</p>
<p id="p-0084" num="0083">One or more extension registrations in the extension registration database that correspond to the request received an act <b>602</b> are identified (act <b>606</b>). Each extension registration for a file association in the extension registration database includes an identifier of a file extension (e.g., as a registration parameter). Each extension registration that includes the file extension specified in the request received in act <b>602</b> is identified in act <b>606</b>.</p>
<p id="p-0085" num="0084">Information identifying the one or more extension providers associated with the registrations identified in act <b>606</b> is returned to the requester (act <b>608</b>). This information is obtained from the one or more extension registrations in act <b>606</b> (e.g., the extension data and/or metadata). This information can include, for example, an identification or description of the one or more extension providers, file paths to executable files to execute the one or more extension providers, and so forth. The requester can then use this information as desired (e.g., to identify a file path to an extension provider that can be executed to interpret and operate on a file having the particular file extension identified in the request in act <b>602</b>).</p>
<p id="p-0086" num="0085">Additionally, as discussed above one type of extension is a DLL. Extension registrations can be included in the extension registration database that identify particular DLLs. Each such extension registration typically includes an identifier of the corresponding software component as well as data identifying a location in a file system of the operating system where the DLL is stored.</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an example process <b>700</b> for using the managed system extensibility to obtain DLL locations in accordance with one or more embodiments. Process <b>700</b> is carried out by an extension management module of an operating system running on a device, such as extension management module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>, and can be implemented in software, firmware, hardware, or combinations thereof. Process <b>700</b> is an example process for using the managed system extensibility; additional discussions of using the managed system extensibility are included herein with reference to different figures.</p>
<p id="p-0088" num="0087">In process <b>700</b>, a request for a path to a DLL is received (act <b>702</b>). A DLL is included as a resource file of a software component (e.g., a resource file <b>202</b> of <figref idref="DRAWINGS">FIG. 2</figref>). The request received in act <b>702</b> specifies (e.g., as a registration parameter) the particular DLL desired as well as a corresponding software component that includes the DLL. The request is typically received from an extension consumer that is a component or module of the operating system on the device implementing process <b>700</b>, although alternatively the request can be received from other components or modules.</p>
<p id="p-0089" num="0088">In response to the request, an extension registration database is accessed (act <b>704</b>). The extension registration database includes a category of DLL extensions. The extension registration database can be organized by category and/or each extension registration can include a category identifier as discussed above.</p>
<p id="p-0090" num="0089">An extension registration in the extension registration database that corresponds to the request received in act <b>702</b> is identified (act <b>706</b>). Each extension registration for a DLL in the extension registration database includes an identifier of the DLL (e.g., as a registration parameter), an identifier of a corresponding software component that includes the DLL (e.g., as metadata), and the location in the file system where the DLL is stored (e.g., as a registration parameter). The extension registration that includes both an identifier of the DLL specified in the request received in act <b>702</b> and an identifier of the software component specified in the request received in act <b>702</b> as the corresponding software component is identified in act <b>706</b>.</p>
<p id="p-0091" num="0090">The location in the file system of the DLL is obtained from the extension registration identified in act <b>706</b> (act <b>708</b>). This location of the DLL obtained in act <b>706</b> is returned to the requester (act <b>710</b>). The requester can then access the DLL at the identified location and load or otherwise use the DLL as desired.</p>
<p id="p-0092" num="0091">As can be seen in process <b>700</b>, searching through one or more directories or folders in a file system to locate a particular DLL need not be performed. Rather, the location of the DLL is readily determined by the extension management module based on the extension registrations maintained in the extension registration database.</p>
<p id="p-0093" num="0092">In the discussions herein, the extension management module is described as maintaining a record of one or more extension registrations in an extension registration database (e.g., database <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref> or database <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref>). Alternatively, no such separate record or database need be maintained. Rather, the manifest of each software component installed on the computing device (e.g., manifest <b>204</b> of <figref idref="DRAWINGS">FIG. 2</figref>) can be maintained and searched in response to requests from extension consumers.</p>
<p id="p-0094" num="0093">Additionally, it should be noted that situations can arise where an extension registration database (e.g., database <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref> or database <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref>) is accessed directly by another device. Such accesses need not be managed by an extension management module (e.g., module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>). For example, referring to <figref idref="DRAWINGS">FIG. 1</figref>, a second computing device (not shown in <figref idref="DRAWINGS">FIG. 1</figref>) coupled to computing device <b>100</b> can access a storage device of computing device <b>100</b> where extension registration database <b>106</b> is stored. This second computing device can be, for example, a computing device run by a system or network administrator, a third party that updates or manages computing device <b>100</b>, and so forth. This second computing device can access database <b>106</b> directly, bypassing extension management module <b>104</b>, and make changes to database <b>106</b>. This allows, for example, the second computing device to add extension registrations to database <b>106</b>, remove extension registrations from database <b>106</b>, and/or otherwise access extension registrations in database <b>106</b> without extension management module <b>104</b> running. Accordingly, extension registration database <b>106</b> can be updated even when &#x201c;offline&#x201d; (e.g., when no user is logged into computing device <b>100</b> and/or extension management module <b>104</b> is not running).</p>
<p id="p-0095" num="0094">In the discussions above, an extension management module operates as a broker between extension providers and extension consumers. Both extension providers and extension consumers have knowledge of the extension management module and how to communicate with the extension management module. However, situations can arise where a legacy provider and/or legacy consumer is run on the computing device. A legacy provider or legacy consumer refers to a program or module that operates without making use of the extension management module. Accordingly, legacy providers and legacy consumers do not have the knowledge of how to communicate with the extension management module.</p>
<p id="p-0096" num="0095">To resolve such situations, a legacy management system is employed. The legacy management system supports translation of legacy providers into a new model that understands how to communicate with the extension management module. The legacy management system further supports legacy registration stores, configurations, and communications to allow registrations performed by extension providers via the extension management module to be made available to legacy consumers.</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example legacy management system <b>800</b> in accordance with one or more embodiments. Legacy management system <b>800</b> is implemented as part of an operating system, such as operating system <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Legacy management system <b>800</b> includes an adapter management module <b>802</b> and one or more adapter modules <b>804</b>. Extension management module <b>812</b> is an extension management module as discussed above (e.g., module <b>104</b> of <figref idref="DRAWINGS">FIG. 1</figref>). Component management module <b>814</b> manages other aspects of software components other than the extensibility managed by module <b>812</b>. For example, module <b>814</b> can manage the storage of state information for the software components.</p>
<p id="p-0098" num="0097">As discussed above, extension registrations are added to an extension registration database by an extension management module such as module <b>812</b>. This can occur when a software component is installed on a computing device as well as at other times. Adapter management module <b>802</b> detects when a change is made to the extension registration database by module <b>812</b>. Adapter management module <b>802</b> can detect such changes in a variety of different manners. In one or more embodiments, module <b>802</b> registers with extension management module <b>812</b> to receive notifications of such changes. In response to such a registration, module <b>812</b> sends a notification to module <b>802</b> when a change is made to the extension registration database by module <b>812</b>. Alternatively, module <b>802</b> can detect such changes in different manners, such as polling module <b>812</b> for the registrations in the extension registration database and checking whether any changes occurred since the last polling module <b>812</b>, being informed of such changes by another component or module, and so forth.</p>
<p id="p-0099" num="0098">When adapter management module <b>802</b> detects a change that is made to the extension registration database by module <b>812</b>, module <b>802</b> notifies one or more adapter modules <b>804</b> of the change. Each adapter module <b>804</b> communicates with a corresponding legacy store <b>820</b>. Each adapter module <b>804</b> has knowledge of how to communicate with the corresponding legacy store <b>820</b>, as well as how to convert an extension registration from the extension registration database into a format used by the corresponding legacy store <b>820</b>. In one or more embodiments, the developer of each adapter module <b>804</b> configures the adapter module <b>804</b> with the knowledge of how to perform this communication and conversion for particular types of extensions. Alternatively, one or more legacy extension registration declarations <b>822</b> can be provided to the adapter module <b>804</b> directly or via adapter management module <b>802</b>. Each such legacy extension registration declaration <b>822</b> describes how to perform this communication and conversion for a particular type of extension.</p>
<p id="p-0100" num="0099">Legacy stores <b>820</b> are stores used by legacy extension consumers and/or legacy extension providers to store information regarding extensibility. A variety of different types of stores can be included as legacy stores <b>820</b>. For example, legacy stores <b>820</b> can include an operating system registry, a service control manager store, a firewall, a file system, a configuration file, and so forth.</p>
<p id="p-0101" num="0100">Accordingly, when an extension registration for a software component that is an extension provider is added to an extension registration database by module <b>812</b>, this addition is detected by module <b>802</b>. Module <b>802</b> obtains the added extension registration from module <b>812</b> and forwards the extension registration to an adapter module <b>804</b>. The adapter module <b>804</b> receives the extension registration, analyzes the extension registration, and stores the appropriate information in a legacy store <b>820</b> based on the extension registration. As the extension registration information for the software component is now included in a legacy store <b>820</b>, a legacy extension consumer can identify and invoke the extension provider.</p>
<p id="p-0102" num="0101">The particular adapter module <b>804</b> to which the extension registration is forwarded can be determined in different manners. In one or more embodiments, different adapter modules <b>804</b> handle different types of extension registrations and these different types are known to module <b>802</b>. Alternatively, module <b>802</b> can query an adapter module <b>804</b> for the types of extension registrations the adapter module <b>804</b> can handle. Accordingly, given an extension registration, module <b>802</b> can forward the extension registration to the appropriate adapter module <b>804</b> based on the type of the extension registration. Alternatively, module <b>802</b> can determine the adapter module <b>804</b> to which an extension registration is forwarded in different manners. For example, extension registrations can be forwarded to all of the adapter modules <b>804</b>, and each adapter module <b>804</b> can determine the appropriate information, if any, from the extension registration to store in a legacy store <b>820</b>.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating an example process <b>900</b> for supporting legacy extension consumers with the managed system extensibility in accordance with one or more embodiments. Process <b>900</b> is carried out by a legacy management system of an operating system running on a device, such as legacy management system <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref>, and can be implemented in software, firmware, hardware, or combinations thereof. Process <b>900</b> is an example process for supporting legacy extension consumers; additional discussions of supporting legacy extension consumers are included herein with reference to different figures.</p>
<p id="p-0104" num="0103">In process <b>900</b>, an adapter management module detects a new extension registration (act <b>902</b>). This detection can be performed in a variety of different manners as discussed above, such as registering with an extension management module for changes to the extension registration database.</p>
<p id="p-0105" num="0104">In response to a new extension registration being detected, the adapter management module obtains the new extension registration (act <b>904</b>). The adapter management module can obtain the new extension registration in a variety of manners, such as being passed the new extension registration with the notification of the change to the extension registration database, by requesting the new extension registration from the extension management module, by accessing a location where the new extension registration is known to be stored, and so forth.</p>
<p id="p-0106" num="0105">The adapter management module then sends the new extension registration to an adapter module (act <b>906</b>). The particular adapter module or modules to which the new extension registration is sent can be determined in a variety of different manners as discussed above.</p>
<p id="p-0107" num="0106">The adapter management module then updates a corresponding legacy store based on the new extension registration (act <b>908</b>). As discussed above, the adapter management module is able to communicate with the legacy store and store information from the new extension registration into the legacy store in a manner expected by the legacy store and legacy extension consumers.</p>
<p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an example computing device <b>1000</b> that can be configured to implement the managed system extensibility in accordance with one or more embodiments. Computing device <b>1000</b> can be, for example, computing device <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0109" num="0108">Computing device <b>1000</b> includes one or more processors or processing units <b>1002</b>, one or more computer readable media <b>1004</b> which can include one or more memory and/or storage components <b>1006</b>, one or more input/output (I/O) devices <b>1008</b>, and a bus <b>1010</b> that allows the various components and devices to communicate with one another. Computer readable media <b>1004</b> and/or one or more I/O devices <b>1008</b> can be included as part of, or alternatively may be coupled to, computing device <b>1000</b>. Bus <b>1010</b> represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, a processor or local bus, and so forth using a variety of different bus architectures. Bus <b>1010</b> can include wired and/or wireless buses.</p>
<p id="p-0110" num="0109">Memory/storage component <b>1006</b> represents one or more computer storage media. Component <b>1006</b> can include volatile media (such as random access memory (RAM)) and/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component <b>1006</b> can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).</p>
<p id="p-0111" num="0110">The techniques discussed herein can be implemented in software, with instructions being executed by one or more processing units <b>1002</b>. It is to be appreciated that different instructions can be stored in different components of computing device <b>1000</b>, such as in a processing unit <b>1002</b>, in various cache memories of a processing unit <b>1002</b>, in other cache memories of device <b>1000</b> (not shown), on other computer readable media, and so forth. Additionally, it is to be appreciated that the location where instructions are stored in computing device <b>1000</b> can change over time.</p>
<p id="p-0112" num="0111">One or more input/output devices <b>1008</b> allow a user to enter commands and information to computing device <b>1000</b>, and also allows information to be presented to the user and/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.</p>
<p id="p-0113" num="0112">Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise &#x201c;computer storage media&#x201d; and &#x201c;communications media.&#x201d;</p>
<p id="p-0114" num="0113">&#x201c;Computer storage media&#x201d; include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.</p>
<p id="p-0115" num="0114">&#x201c;Communication media&#x201d; typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.</p>
<p id="p-0116" num="0115">Generally, any of the functions or techniques described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms &#x201c;module&#x201d; and &#x201c;component&#x201d; as used herein generally represent software, although can alternatively also incorporate firmware and/or hardware. In the case of a software implementation, the module or component represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found with reference to <figref idref="DRAWINGS">FIG. 10</figref>. The features of the managed system extensibility described herein are platform-independent, meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.</p>
<p id="p-0117" num="0116">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. One or more computer storage memories having stored thereon multiple instructions of an operating system that, when executed by one or more processors of a computing device, cause the one or more processors to:
<claim-text>receive, for each of multiple software components installed on the computing device, one or more extension registrations identifying the software component as a provider of functionality;</claim-text>
<claim-text>maintain a record of the one or more extension registrations for each of the multiple software components;</claim-text>
<claim-text>receive requests, from other software components installed on the computing device, that identify particular functionality; and</claim-text>
<claim-text>return to the other software components, in response to the requests and based on the record, information regarding one or more of the multiple software components that provide the particular functionality</claim-text>
<claim-text>receive an indication that one of the multiple software components is to be uninstalled from the computing device;</claim-text>
<claim-text>identify the one or more extension registrations in the record that correspond to the one of the multiple software components; and</claim-text>
<claim-text>delete from the record the one or more extension registrations that correspond to the one of the multiple software components.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to receive the one or more extension registrations for a software component is to obtain the one or more extension registrations from a manifest of the software component when the software component is installed on the computing device.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to receive the one or more extension registrations for a software component is to receive, via an application programming interface method invoked by the software component, the one or more extension registrations from the software component.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to receive the requests from other software components is to receive requests from the other software components via an application programming interface exposed by an extension management module of the operating system.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more extension registrations comprise multiple extension registrations, and different ones of the multiple extension registrations comprise different types of extensions.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the one or more extension registrations includes both metadata describing the extension registration and one or more registration parameters for the extension registration.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. One or more computer storage memories as recited in <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein each of the one or more registration parameters comprises a registration parameter name, a registration parameter type, and a registration parameter value.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multiple instructions further cause the one or more processors to convert at least one of the one or more extension registrations into a format used by a legacy store, and store the converted at least one extension registration in the legacy store.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more extension registrations maintained in the record comprise multiple different types of extensions.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. One or more computer storage memories as recited in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the one or more extension registrations include at least one file association, at least one menu item, and at least one shortcut item.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the one or more extension registrations has a category identifier indicating an extension type of the extension registration, and wherein each of the one or more extension registrations conforms to a category definition defined for the category identifier of the extension registration.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. One or more computer storage memories as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multiple instructions further cause the one or more processors to send, to another module of the computing device, a notification of changes to the record of the one or more extension registrations.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method implemented in an operating system running on a computing device, the method comprising:
<claim-text>obtaining a new extension registration from an extension management module that manages access to an extension registration database, the new extension registration corresponding to an extension provider that communicates with the extension management module;</claim-text>
<claim-text>storing, in a legacy store, extension information based on the new extension registration; and</claim-text>
<claim-text>registering with the extension management module to receive notifications of changes to the extension registration database.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>,
<claim-text>wherein the obtaining comprises obtaining a new extension registration in response to a notification of a change to the extension registration database received from extension management module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>receiving, from the extension management module, a notification of when an extension registration is removed from the extension registration database; and</claim-text>
<claim-text>removing, from the legacy store, extension information corresponding to the extension registration.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising accessing a legacy extension registration declaration to determine how to convert the new extension registration into a format used by the legacy store.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the legacy store comprises an operating system registry.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method as recited in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the extension registration database includes multiple different types of extensions.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. One or more computer storage memories having stored thereon multiple instructions of an operating system that, when executed by one or more processors of a computing device, cause the one or more processors to:
<claim-text>receive, from a requester executing on the computing device, a request for a path to a dynamic link library, the request specifying both an identifier of the dynamic link library and an identifier of a corresponding software component that includes the dynamic link library;</claim-text>
<claim-text>access, in response to the request, an extension registration database that includes multiple extension registrations including extension registrations for both dynamic link libraries and file associations;</claim-text>
<claim-text>identify an extension registration in the extension registration database that corresponds to the request by identifying the extension registration in the extension registration database that includes both the identifier of the dynamic link library and the identifier of the corresponding software component specified in the request;</claim-text>
<claim-text>obtain, from the extension registration, a location of the dynamic link library; and</claim-text>
<claim-text>return, to the requester, the location of the dynamic link library.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626791-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626791</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13159882</doc-number>
<date>20110614</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707778</main-classification>
<further-classification>707776</further-classification>
<further-classification>707777</further-classification>
<further-classification>707810</further-classification>
<further-classification>706 12</further-classification>
<further-classification>706 21</further-classification>
</classification-national>
<invention-title id="d2e51">Predictive model caching</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5602761</doc-number>
<kind>A</kind>
<name>Spoerre et al.</name>
<date>19970200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702179</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5727128</doc-number>
<kind>A</kind>
<name>Morrison</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5729661</doc-number>
<kind>A</kind>
<name>Keeler et al.</name>
<date>19980300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5752007</doc-number>
<kind>A</kind>
<name>Morrison</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5842189</doc-number>
<kind>A</kind>
<name>Keeler et al.</name>
<date>19981100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5862513</doc-number>
<kind>A</kind>
<name>Mezzatesta et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5933345</doc-number>
<kind>A</kind>
<name>Martin et al.</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 44</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6038528</doc-number>
<kind>A</kind>
<name>Mammone et al.</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6063028</doc-number>
<kind>A</kind>
<name>Luciano</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>600300</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6292830</doc-number>
<kind>B1</kind>
<name>Taylor et al.</name>
<date>20010900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6317731</doc-number>
<kind>B1</kind>
<name>Luciano</name>
<date>20011100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6498993</doc-number>
<kind>B1</kind>
<name>Chen et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6519534</doc-number>
<kind>B2</kind>
<name>Chen et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702 34</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6591254</doc-number>
<kind>B1</kind>
<name>Keeler et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6823334</doc-number>
<kind>B2</kind>
<name>Vishnubhotla et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6917952</doc-number>
<kind>B1</kind>
<name>Dailey et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6941301</doc-number>
<kind>B2</kind>
<name>Ferguson et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6944616</doc-number>
<kind>B2</kind>
<name>Ferguson et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7020642</doc-number>
<kind>B2</kind>
<name>Ferguson et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7054847</doc-number>
<kind>B2</kind>
<name>Hartman et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 12</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7124054</doc-number>
<kind>B2</kind>
<name>Kim et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702181</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7167871</doc-number>
<kind>B2</kind>
<name>Farahat et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7188117</doc-number>
<kind>B2</kind>
<name>Farahat et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707688</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7349919</doc-number>
<kind>B2</kind>
<name>Russell et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7599897</doc-number>
<kind>B2</kind>
<name>Hartman et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7643989</doc-number>
<kind>B2</kind>
<name>Deng et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704209</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>8046058</doc-number>
<kind>B2</kind>
<name>Lin et al.</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>600509</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>8175897</doc-number>
<kind>B2</kind>
<name>Lee et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>8209271</doc-number>
<kind>B1</kind>
<name>Lin et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>8209274</doc-number>
<kind>B1</kind>
<name>Lin et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>8229864</doc-number>
<kind>B1</kind>
<name>Lin et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>8250009</doc-number>
<kind>B1</kind>
<name>Breckenridge et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 14</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2002/0052699</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>702 34</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2003/0033194</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2003/0033587</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717104</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2003/0078683</doc-number>
<kind>A1</kind>
<name>Hartman et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 44</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2003/0139828</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 53</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2003/0140023</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2003/0140039</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2003/0149603</doc-number>
<kind>A1</kind>
<name>Ferguson et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  7</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2003/0177117</doc-number>
<kind>A1</kind>
<name>Vishnubhotla et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2003/0212851</doc-number>
<kind>A1</kind>
<name>Drescher et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2004/0133531</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2005/0159996</doc-number>
<kind>A1</kind>
<name>Lazarus et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2005/0234753</doc-number>
<kind>A1</kind>
<name>Pinto et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2006/0100721</doc-number>
<kind>A1</kind>
<name>Piche</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 47</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2006/0111993</doc-number>
<kind>A1</kind>
<name>Lawrence et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 35</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2007/0150424</doc-number>
<kind>A1</kind>
<name>Igelnik</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2007/0158040</doc-number>
<kind>A1</kind>
<name>Benaoudia et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>162 49</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2007/0282766</doc-number>
<kind>A1</kind>
<name>Hartman et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 15</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2007/0288641</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709227</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2009/0030864</doc-number>
<kind>A1</kind>
<name>Pednault et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2009/0106178</doc-number>
<kind>A1</kind>
<name>Chu</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2010/0205008</doc-number>
<kind>A1</kind>
<name>Hua et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2011/0184884</doc-number>
<kind>A1</kind>
<name>Lyons et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 36 R</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Ozawa, Seiichi, &#x201c;A Multitask Leaning Model for Online Pattern Recognition,&#x201d; Mar. 2009, IEEE Transactions on Neural Networks, vol. 20, No. 3., pp. 430-445.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Wang, Zheng, et al., &#x201c;Mapping Parallelism to Multi-cores: A Machine Learning Based Approach,&#x201d; Feb. 14-18, 2009, ACM, pp. 75-84.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Deshpande, Amol., et al., &#x201c;Model-Driven Data Acquisition in Sensor Network,&#x201d; 2004, Proceedings of the 30th VLDB Conference, pp. 588-599.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Yang, Quiang, et al., &#x201c;Mining Web Logs for Prediction Models in WWW Caching and Prefetching,&#x201d; 2001, KDD '01, ACM, pp. 473-478.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Lempel, Ronny, et al., &#x201c;Predictive Caching and Prefetching of Query Results in Search Engines,&#x201d; May 20-24, 2003, ACM, pp. 19-28.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Duchi, John, et al., &#x201c;Boosting with Structural Sparsity&#x201d;, 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: &#x3c;URL: http://www.cs.berkeley.edu/&#x2dc;jduchi/projects/DuchiSi09d.pdf&#x3e;, 41 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Duchi, John, et al., &#x201c;Boosting with Structural Sparsity&#x201d;, Proceedings of the 26th International Conference on Machine Learning, Montreal, Canada, 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: &#x3c;URL: http://www.cs.berkeley.edu/&#x2dc;jduchi/projects/DuchiSi09a.pdf&#x3e;, 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>R-Project web pages, 190 pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: &#x3c;URL: http://www.r-project.org/&#x3e;, 190 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Uclassify web pages, [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: &#x3c;URL: http://www.uclassify.com/&#x3e;, 16 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Zementis web pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: &#x3c;URL: http://www.zementis.com/&#x3e;, 34 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Weiss, Integrating Real-Time Predictive Analytics into SAP Applications [online], Dec. 30, 2009 [retrieved on Sep. 29, 2011], Retrieved from the Internet: ,URL:http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/a07faefd-61d7-2c10-bba6-89ac5ffc302c?QuickLink=index&#x26;overridelayout=true&#x3e;, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Hutter, et al., &#x201c;Performance Prediction and Automated Tuning of Randomized and Parametric Algorithms,&#x201d;, Principles and Practice of Constraint Programing, Lecture Notes in Computer Science, 2006, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>SAS Rapid Predictive Modeler, Overview, 2010, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Postema, et al., &#x201c;A Decision Support Tool for Tuning Parameters in a Machine Learning Algorithm&#x201d;, Nanyang Techonological University, 1997, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>&#x201c;Active learning (machine learning),&#x201d; Wikipedia, the free encyclopedia, [online] [retrieved on Sep. 8, 2011]. Retrieved from the Internet: http://en.wikipedia.org/wiki/Active learning (machine learning), 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-cpc-text>G06F 17/00</classification-cpc-text>
<classification-cpc-text>G06F 17/30</classification-cpc-text>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Wei-Hao</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Green</last-name>
<first-name>Travis H. K.</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kaplow</last-name>
<first-name>Robert</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Fu</last-name>
<first-name>Gang</first-name>
<address>
<city>Kearny</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mann</last-name>
<first-name>Gideon S.</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lin</last-name>
<first-name>Wei-Hao</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Green</last-name>
<first-name>Travis H. K.</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Kaplow</last-name>
<first-name>Robert</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Fu</last-name>
<first-name>Gang</first-name>
<address>
<city>Kearny</city>
<state>NJ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Mann</last-name>
<first-name>Gideon S.</first-name>
<address>
<city>New York</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fish &#x26; Richardson P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Google Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Syed</last-name>
<first-name>Farhan</first-name>
<department>2165</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods, systems, and apparatus, including computer programs encoded on one or more computer storage devices, for caching predictive models are described. Records are obtained, each record including a time of a previously submitted predictive request and an identifier of a trained predictive model. A trained scheduling model is generated using the records as training data. A set of identifiers of trained predictive models are determined from a plurality of trained predictive models that are stored in a secondary memory of a computing system. The target time is inputted to the trained scheduling model. In response, a second predictive output is received that comprises the set of identifiers. A set of trained predictive models are obtained that correspond to the set of identifiers from the secondary memory. The set of trained predictive models are stored in a primary memory of the computing system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="195.07mm" wi="242.65mm" file="US08626791-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="252.05mm" wi="187.45mm" orientation="landscape" file="US08626791-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="262.64mm" wi="187.88mm" file="US08626791-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.72mm" wi="200.58mm" orientation="landscape" file="US08626791-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="241.38mm" wi="145.03mm" file="US08626791-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">This specification relates to management of predictive models.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Predictive analytics generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns or performing sentiment analysis, to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Typically, a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively.</p>
<p id="p-0004" num="0003">Computer systems frequently have multiple different types of memory that operate at different speeds. Primary storage modules (for example, Dynamic-Random Access Memory (DRAM) modules) are fast to access but are relatively expensive. In contrast, secondary storage modules (for example, hard drives) are inexpensive but slower to access. Generally, computer systems read programs and data from secondary storage into primary storage before executing the program.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">This document describes techniques for predictive model caching.</p>
<p id="p-0006" num="0005">In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a plurality of records, each record including a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a first predictive output in response to the previously submitted predictive request. The actions include generating a trained scheduling model using the records as training data. The actions include in association with a target time, determining a set of identifiers of trained predictive models from a plurality of trained predictive models that are stored in a secondary memory of a computing system. The actions include inputting the target time to the trained scheduling model. The actions include receiving in response a second predictive output that comprises the set of identifiers. The actions include obtaining a set of trained predictive models that correspond to the set of identifiers from the secondary memory. The actions also include storing the set of trained predictive models in a primary memory of the computing system, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</p>
<p id="p-0007" num="0006">Other embodiments of this aspect include corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.</p>
<p id="p-0008" num="0007">The foregoing and other embodiments can each optionally include one or more of the following features, alone or in combination. The time may include at least one of a group consisting of a date, a day of a week, and a time of the day. The actions may include obtaining a portion of the records submitted by a single user. The actions may include generating a trained individual scheduling model using the portion of the records as training data. Determining the set of model identifiers may include inputting the target time to the trained individual scheduling model. Determining the set of model identifiers may include receiving in response a third predictive output that comprises the set of identifiers. Determining the set of identifiers may include obtaining a size of an identified predictive model identified by an identifier of the set of identifiers and determining that the size is below a threshold value. Determining the set of identifiers may also include identifying a most recently used predictive model. The actions may include generating a score for each model identifier in the set of identifiers. The actions may include obtaining at least one predictive model from the secondary memory based on the set of identifiers comprises comparing the score of each model identifier in the set of model identifiers. Each record may include a geographic region and determining the set of identifiers may include providing a target geographic region to the trained collective scheduling model. The actions may include receiving a predictive request submitted to a model of the set of trained predictive models; obtaining the model from the primary memory; and providing the predictive requests to the model.</p>
<p id="p-0009" num="0008">Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages: latency can be reduced, and memory resources may be efficiently utilized. The utilization of computer resources may be improved.</p>
<p id="p-0010" num="0009">The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">DESCRIPTION OF DRAWINGS</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic representation of an example system that provides a predictive analytic platform.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram showing an example system for providing a dynamic predictive analytic platform over a network.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram showing an example system for caching predictive models.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing an example process for caching predictive models.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0015" num="0014">Like reference symbols in the various drawings indicate like elements.</p>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic representation of an example system that provides a predictive analytic platform. The system <b>100</b> includes multiple client computing systems <b>104</b><i>a</i>-<i>c </i>that can communicate with a predictive modeling server system <b>109</b>. In the example shown, the client computing systems <b>104</b><i>a</i>-<i>c </i>can communicate with a server system front end <b>110</b> by way of a network <b>102</b>. The network <b>102</b> can include one or more local area networks (LANs), a wide area network (WAN), such as the Internet, a wireless network, such as a cellular network, or a combination of all of the above. The server system front end <b>110</b> is in communication with, or is included within, one or more data centers, represented by the data center <b>112</b>. A data center <b>112</b> generally is a large number of computers, housed in one or more buildings, that are typically capable of managing large volumes of data.</p>
<p id="p-0017" num="0016">A client entity&#x2014;an individual or a group of people or a company, for example&#x2014;may desire a trained predictive model that can receive input data from a client computing system <b>104</b><i>a </i>belonging to or under the control of the client entity and generate a predictive output. To train a particular predictive model can require a significant volume of training data, for example, one or more gigabytes of data. The client computing system <b>104</b><i>a </i>may be unable to efficiently manage such a large volume of data. Further, selecting and tuning an effective predictive model from the variety of available types of models can require skill and expertise that an operator of the client computing system <b>104</b><i>a </i>may not possess.</p>
<p id="p-0018" num="0017">The system <b>100</b> described here allows training data <b>106</b><i>a </i>to be uploaded from the client computing system <b>104</b><i>a </i>to the predictive modeling server system <b>109</b> over the network <b>102</b>. The training data <b>106</b><i>a </i>can include initial training data, which may be a relatively large volume of training data the client entity has accumulated, for example, if the client entity is a first-time user of the system <b>100</b>. The training data <b>106</b><i>a </i>can also include new training data that can be uploaded from the client computing system <b>104</b><i>a </i>as additional training data becomes available. The client computing system <b>104</b><i>a </i>may upload new training data whenever the new training data becomes available on an ad hoc basis, periodically in batches, in a batch once a certain volume has accumulated, or otherwise. The system <b>100</b> also allows training data <b>106</b><i>b </i>and training data <b>106</b><i>c </i>to be uploaded from the client computing system <b>104</b><i>b </i>and the client computing system <b>104</b><i>c</i>, respectively.</p>
<p id="p-0019" num="0018">The server system front end <b>110</b> can receive, store and manage large volumes of data using the data center <b>112</b>. One or more computers in the data center <b>112</b> can run software that uses the training data to estimate the effectiveness of multiple types of predictive models and make a selection of a trained predictive model to be used for data received from the particular client computing system <b>104</b><i>a</i>. The selected model can be trained and the trained model made available to users who have access to the predictive modeling server system <b>109</b> and, optionally, permission from the client entity that provided the training data for the model. Access and permission can be controlled using any conventional techniques for user authorization and authentication and for access control, if restricting access to the model is desired. The client computing systems <b>104</b><i>a</i>, <b>104</b><i>b</i>, <b>104</b><i>c </i>can transmit prediction requests <b>108</b><i>a</i>, <b>108</b><i>b</i>, <b>108</b><i>c </i>over the network. The selected trained model executing in the data center <b>112</b> receives the prediction request, input data and request for a predictive output, and generates the predictive output <b>114</b>. The predictive output <b>114</b> can be provided to the client computing system <b>104</b><i>a</i>, for example, over the network <b>102</b>.</p>
<p id="p-0020" num="0019">Advantageously, when handling large volumes of training data and/or input data, the processes can be scaled across multiple computers at the data center <b>112</b>. The predictive modeling server system <b>109</b> can automatically provision and allocate the required resources, using one or more computers as required. An operator of the client computing system <b>104</b><i>a </i>is not required to have any special skill or knowledge about predictive models. The training and selection of a predictive model can occur &#x201c;in the cloud&#x201d;, i.e., over the network <b>102</b>, thereby lessening the burden on the client computing system's processor capabilities and data storage, and also reducing the required client-side human resources.</p>
<p id="p-0021" num="0020">The term client computing system is used in this description to refer to one or more computers, which may be at one or more physical locations that can access the predictive modeling server system. The data center <b>112</b> is capable of handling large volumes of data, e.g., on the scale of terabytes or larger, and as such can serve multiple client computing systems. For illustrative purposes, three client computing systems <b>104</b><i>a</i>-<i>c </i>are shown, however, scores of client computing systems can be served by such a predictive modeling server system <b>109</b>.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram showing a system <b>200</b> for providing a dynamic predictive analytic platform over a network. For illustrative purposes, the system <b>200</b> is shown with one client computing system <b>202</b> communicating over a network <b>204</b> with a predictive modeling server system <b>206</b>. However, it should be understood that the predictive modeling server system <b>206</b>, which can be implemented using multiple computers that can be located in one or more physical locations, can serve multiple client computing systems. In the example shown, the predictive modeling server system includes an interface <b>208</b>. In some implementations, the interface <b>208</b> can be implemented as one or more modules adapted to interface with components included in the predictive modeling server system <b>206</b> and the network <b>204</b>, for example, the training data queue <b>213</b>, the training data repository <b>214</b>, the model selection module <b>210</b> and/or the trained model repository <b>218</b>.</p>
<p id="p-0023" num="0022">From the perspective of the client computing system, the client computing system <b>202</b> uploads training data (i.e., the initial training data) to the predictive modeling server system <b>206</b> over the network <b>204</b>. In some implementations, the initial training data is uploaded in bulk (e.g., a batch) by the client computing system <b>202</b>. In other implementations, the initial training data is uploaded incrementally by the client computing system <b>202</b> until a threshold volume of data has been received that together forms the &#x201c;initial training data&#x201d;. The size of the threshold volume can be set by the system <b>206</b>, the client computing system <b>202</b> or otherwise determined. In response, the client computing system <b>202</b> receives access to a trained predictive model, for example, trained predictive model <b>218</b>.</p>
<p id="p-0024" num="0023">In the implementations shown, the trained predictive model <b>218</b> is not itself provided. The trained predictive model <b>218</b> resides and executes at a location remote from the client computing system <b>202</b>. For example, referring back to <figref idref="DRAWINGS">FIG. 1</figref>, the trained predictive model <b>218</b> can reside and execute in the data center <b>112</b>, thereby not using the resources of the client computing system <b>202</b>. Once the client computing system <b>202</b> has access to the trained predictive model <b>218</b>, the client computing system can send input data and a prediction request to the trained predictive model. In response, the client computing system receives a predictive output generated by the trained predictive model from the input data.</p>
<p id="p-0025" num="0024">From the perspective of the client computing system <b>202</b>, training and use of a predictive model is relatively simple. The training and selection of the predictive model, tuning of the hyper-parameters and features used by the model (to be described below) and execution of the trained predictive model to generate predictive outputs is all done remote from the client computing system <b>202</b> without expending client computing system resources. The amount of training data provided can be relatively large, e.g., gigabytes or more, which is often an unwieldy volume of data for a client entity.</p>
<p id="p-0026" num="0025">As describe above, if the initial training data is uploaded incrementally, the training data can accumulate until a threshold volume is received before training of predictive models is initiated. The training data can be in any convenient form that is understood by the modeling server system <b>206</b> to define a set of records, where each record includes an input and a corresponding desired output. By way of example, the training data can be provided using a comma-separated value format, or a sparse vector format. In another example, the client computing system <b>202</b> can specify a protocol buffer definition and upload training data that complies with the specified definition.</p>
<p id="p-0027" num="0026">The system <b>200</b> can be used in various different applications. Some examples include (without limitation) making predictions relating to customer sentiment, transaction risk, species identification, message routing, diagnostics, churn prediction, legal docket classification, suspicious activity, work roster assignment, inappropriate content, product recommendation, political bias, uplift marketing, e-mail filtering and career counseling. For illustrative purposes, system <b>200</b> will be described using an example that is typical of how predictive analytics are often used. In this example, the client computing system <b>202</b> provides a web-based online shopping service. The training data includes multiple records, where each record provides the online shopping transaction history for a particular customer. The record for a customer includes the dates the customer made a purchase and identifies the item or items purchased on each date. The client computing system <b>202</b> is interested in predicting a next purchase of a customer based on the customer's online shopping transaction history.</p>
<p id="p-0028" num="0027">Various techniques can be used to upload a training request and the training data from the client computing system <b>202</b> to the predictive modeling server system <b>206</b>. In some implementations, the training data is uploaded using an HTTP web service. The client computing system <b>202</b> can access storage objects using a RESTful API to upload and to store their training data on the predictive modeling server system <b>206</b>. In other implementations, the training data is uploaded using a hosted execution platform, e.g., AppEngine available from Google Inc. of Mountain View, Calif. The predictive modeling server system <b>206</b> can provide utility software that can be used by the client computing system <b>202</b> to upload the data. In some implementations, the predictive modeling server system <b>206</b> can be made accessible from many platforms, including platforms affiliated with the predictive modeling server system <b>206</b>, e.g., for a system affiliated with Google, the platform could be a Google App Engine or Apps Script (e.g., from Google Spreadsheet), and platforms entirely independent of the predictive modeling server system <b>206</b>, e.g., a desktop application. The training data can be large, e.g., many gigabytes. The predictive modeling server system <b>206</b> can include a data store, e.g., the training data repository <b>214</b>, operable to store the received training data.</p>
<p id="p-0029" num="0028">The predictive modeling server system <b>206</b> includes a repository of training functions for various predictive models, which in the example shown are included in the training function repository <b>216</b>. At least some of the training functions included in the repository <b>216</b> can be used to train an &#x201c;updateable&#x201d; predictive model. An updateable predictive model refers to a trained predictive model that was trained using a first set of training data (e.g., initial training data) and that can be used together with a new set of training data and a training function to generate a &#x201c;retrained&#x201d; predictive model. The retrained predictive model is effectively the initial trained predictive model updated with the new training data. One or more of the training functions included in the repository <b>216</b> can be used to train &#x201c;static&#x201d; predictive models. A static predictive model refers to a predictive model that is trained with a batch of training data (e.g., initial training data) and is not updateable with incremental new training data. If new training data has become available, a new static predictive model can be trained using the batch of new training data, either alone or merged with an older set of training data (e.g., the initial training data) and an appropriate training function.</p>
<p id="p-0030" num="0029">Some examples of training functions that can be used to train a static predictive model include (without limitation): regression (e.g., linear regression, logistic regression), classification and regression tree, multivariate adaptive regression spline and other machine learning training functions (e.g., Na&#xef;ve Bayes, k-nearest neighbors, Support Vector Machines, Perceptron). Some examples of training functions that can be used to train an updateable predictive model include (without limitation) Online Bayes, Winnow, Support Vector Machine (SVM) Analogue, Maximum Entrophy (MaxEnt) Analogue, Gradient based (FOBOS) and AdaBoost with Mixed Norm Regularization. The training function repository <b>216</b> can include one or more of these example training functions.</p>
<p id="p-0031" num="0030">Multiple predictive models, which can be all or a subset of the available predictive models, are trained using some or all of the training data. In the example predictive modeling server system <b>206</b>, a model training module <b>212</b> is operable to train the multiple predictive models. The multiple predictive models include one or more updateable predictive models and can include one or more static predictive models.</p>
<p id="p-0032" num="0031">The client computing system <b>202</b> can send a training request to the predictive modeling server system <b>206</b> to initiate the training of a model. For example, a GET or a POST request could be used to make a training request to a URL. A training function is applied to the training data to generate a set of parameters. These parameters form the trained predictive model. For example, to train (or estimate) a Na&#xef;ve Bayes model, the method of maximum likelihood can be used. A given type of predictive model can have more than one training function. For example, if the type of predictive model is a linear regression model, more than one different training function for a linear regression model can be used with the same training data to generate more than one trained predictive model.</p>
<p id="p-0033" num="0032">For a given training function, multiple different hyper-parameter configurations can be applied to the training function, again generating multiple different trained predictive models. Therefore, in the present example, where the type of predictive model is a linear regression model, changes to an L1 penalty generate different sets of parameters. Additionally, a predictive model can be trained with different features, again generating different trained models. The selection of features, i.e., feature induction, can occur during multiple iterations of computing the training function over the training data. For example, feature conjunction can be estimated in a forward stepwise fashion in a parallel distributed way enabled by the computing capacity of the predictive modeling server system, i.e., the data center.</p>
<p id="p-0034" num="0033">Considering the many different types of predictive models that are available, and then that each type of predictive model may have multiple training functions and that multiple hyper-parameter configurations and selected features may be used for each of the multiple training functions, there are many different trained predictive models that can be generated. Depending on the nature of the input data to be used by the trained predictive model to predict an output, different trained predictive models perform differently. That is, some can be more effective than others.</p>
<p id="p-0035" num="0034">The effectiveness of each of the trained predictive models is estimated (Step <b>406</b>). For example, a model selection module <b>210</b> is operable to estimate the effectiveness of each trained predictive model. In some implementations, cross-validation is used to estimate the effectiveness of each trained predictive model. In a particular example, a 10-fold cross-validation technique is used. Cross-validation is a technique where the training data is partitioned into sub-samples. A number of the sub-samples are used to train an untrained predictive model, and a number of the sub-samples (usually one) is used to test the trained predictive model. Multiple rounds of cross-validation can be performed using different sub-samples for the training sample and for the test sample. K-fold cross-validation refers to portioning the training data into K sub-samples. One of the sub-samples is retained as the test sample, and the remaining K&#x2212;1 sub-samples are used as the training sample. K rounds of cross-validation are performed, using a different one of the sub-samples as the test sample for each round. The results from the K rounds can then be averaged, or otherwise combined, to produce a cross-validation score. 10-fold cross-validation is commonly used.</p>
<p id="p-0036" num="0035">In some implementations, the effectiveness of each trained predictive model is estimated by performing cross-validation to generate a cross-validation score that is indicative of the accuracy of the trained predictive model, i.e., the number of exact matches of output data predicted by the trained model when compared to the output data included in the test sub-sample. In other implementations, one or more different metrics can be used to estimate the effectiveness of the trained model. For example, cross-validation results can be used to indicate whether the trained predictive model generated more false positive results than true positives and ignores any false negatives.</p>
<p id="p-0037" num="0036">In other implementations, techniques other than, or in addition to, cross-validation can be used to estimate the effectiveness. In one example, the resource usage costs for using the trained model can be estimated and can be used as a factor to estimate the effectiveness of the trained model.</p>
<p id="p-0038" num="0037">In some implementations, the predictive modeling server system <b>206</b> operates independently from the client computing system <b>202</b> and selects and provides the trained predictive model <b>218</b> as a specialized service. The expenditure of both computing resources and human resources and expertise to select the untrained predictive models to include in the training function repository <b>216</b>, the training functions to use for the various types of available predictive models, the hyper-parameter configurations to apply to the training functions and the feature-inductors all occurs server-side. Once these selections have been completed, the training and model selection can occur in an automated fashion with little or no human intervention, unless changes to the server system <b>206</b> are desired. The client computing system <b>202</b> thereby benefits from access to a trained predictive model <b>218</b> that otherwise might not have been available to the client computing system <b>202</b>, due to limitations on client-side resources.</p>
<p id="p-0039" num="0038">Each trained model is assigned a score that represents the effectiveness of the trained model. As discussed above, the criteria used to estimate effectiveness can vary. In the example implementation described, the criterion is the accuracy of the trained model and is estimated using a cross-validation score. Based on the scores, a trained predictive model is selected. In some implementations, the trained models are ranked based on the value of their respective scores, and the top ranking trained model is chosen as the selected predictive model. Although the selected predictive model was trained during the evaluation stage described above, training at that stage may have involved only a sample of the training data, or not all of the training data at one time. For example, if k-fold cross-validation was used to estimate the effectiveness of the trained model, then the model was not trained with all of the training data at one time, but rather only K&#x2212;1 partitions of the training data. Accordingly, if necessary, the selected predictive model is fully trained using the training data (e.g., all K partitions), for example, by the model training module <b>212</b>. A trained model (i.e., &#x201c;fully trained&#x201d; model) is thereby generated for use in generating predictive output, e.g., trained predictive model <b>218</b>. The trained predictive model <b>218</b> can be stored by the predictive modeling server system <b>206</b>. That is, the trained predictive model <b>218</b> can reside and execute in a data center that is remote from the client computing system <b>202</b>.</p>
<p id="p-0040" num="0039">Of the multiple trained predictive models that were trained as described above, some or all of them can be stored in the predictive model repository <b>215</b>. Each trained predictive model can be associated with its respective effectiveness score. One or more of the trained predictive models in the repository <b>215</b> are updateable predictive models. In some implementations, the predictive models stored in the repository <b>215</b> are trained using the entire initial training data, i.e., all K partitions and not just K&#x2212;1 partitions. In other implementations, the trained predictive models that were generated in the evaluation phase using K&#x2212;1 partitions are stored in the repository <b>215</b>, so as to avoid expending additional resources to recompute the trained predictive models using all K partitions.</p>
<p id="p-0041" num="0040">Access to the trained predictive model is provided rather than the trained predictive model itself. In some implementations, providing access to the trained predictive model includes providing an address to the client computing system <b>202</b> or other user computing platform that can be used to access the trained model; for example, the address can be a URL (Universal Resource Locator). Access to the trained predictive model can be limited to authorized users. For example, a user may be required to enter a user name and password that has been associated with an authorized user before the user can access the trained predictive model from a computing system, including the client computing system <b>202</b>. If the client computing system <b>202</b> desires to access the trained predictive model <b>218</b> to receive a predictive output, the client computing system <b>202</b> can transmit to the URL a request that includes the input data. The predictive modeling server system <b>206</b> receives the input data and prediction request from the client computing system <b>202</b>. In response, the input data is input to the trained predictive model <b>218</b> and a predictive output generated by the trained model. The predictive output is provided; it can be provided to the client computing system.</p>
<p id="p-0042" num="0041">In some implementations, where the client computing system is provided with a URL to access the trained predictive model, input data and a request to the URL can be embedded in an HTML document, e.g., a webpage. In one example, JavaScript can be used to include the request to the URL in the HTML document. Referring again to the illustrative example above, when a customer is browsing on the client computing system's web-based online shopping service, a call to the URL can be embedded in a webpage that is provided to the customer. The input data can be the particular customer's online shopping transaction history. Code included in the webpage can retrieve the input data for the customer, which input data can be packaged into a request that is sent in a request to the URL for a predictive output. In response to the request, the input data is input to the trained predictive model and a predictive output is generated. The predictive output is provided directly to the customer's computer or can be returned to the client computer system, which can then forward the output to the customer's computer. The client computing system <b>202</b> can use and/or present the predictive output result as desired by the client entity. In this particular example, the predictive output is a prediction of the type of product the customer is most likely to be interested in purchasing. If the predictive output is &#x201c;blender&#x201d;, then, by way of example, an HTML document executing on the customer's computer may include code that in response to receiving the predictive output cause to display on the customer's computer one or more images and/or descriptions of blenders available for sale on the client computing system's online shopping service. This integration is simple for the client computing system, because the interaction with the predictive modeling server system can use a standard HTTP protocol, e.g. GET or POST can be used to make a request to a URL that returns a JSON (JavaScript Object Notation) encoded output. The input data also can be provided in JSON format.</p>
<p id="p-0043" num="0042">The customer using the customer computer can be unaware of these operations, which occur in the background without necessarily requiring any interaction from the customer. Advantageously, the request to the trained predictive model can seamlessly be incorporated into the client computer system's web-based application, in this example an online shopping service. A predictive output can be generated for and received at the client computing system (which in this example includes the customer's computer), without expending client computing system resources to generate the output.</p>
<p id="p-0044" num="0043">In other implementations, the client computing system can use code (provided by the client computing system or otherwise) that is configured to make a request to the predictive modeling server system <b>206</b> to generate a predictive output using the trained predictive model <b>218</b>. By way of example, the code can be a command line program (e.g., using cURL) or a program written in a compiled language (e.g., C, C++, Java) or an interpreted language (e.g., Python). In some implementations, the trained model can be made accessible to the client computing system or other computer platforms by an API through a hosted development and execution platform, e.g., Google App Engine.</p>
<p id="p-0045" num="0044">In the implementations described above, the trained predictive model <b>218</b> is hosted by the predictive modeling server system <b>206</b> and can reside and execute on a computer at a location remote from the client computing system <b>202</b>. However, in some implementations, once a predictive model has been selected and trained, the client entity may desire to download the trained predictive model to the client computing system <b>202</b> or elsewhere. The client entity may wish to generate and deliver predictive outputs on the client's own computing system or elsewhere. Accordingly, in some implementations, the trained predictive model <b>218</b> is provided to a client computing system <b>202</b> or elsewhere, and can be used locally by the client entity.</p>
<p id="p-0046" num="0045">Components of the client computing system <b>202</b> and/or the predictive modeling system <b>206</b>, e.g., the model training module <b>212</b>, model selection module <b>210</b> and trained predictive model <b>218</b>, can be realized by instructions that upon execution cause one or more computers to carry out the operations described above. Such instructions can comprise, for example, interpreted instructions, such as script instructions, e.g., JavaScript or ECMAScript instructions, or executable code, or other instructions stored in a computer readable medium. The components of the client computing system <b>202</b> and/or the predictive modeling system <b>206</b> can be implemented in multiple computers distributed over a network, such as a server farm, in one or more locations, or can be implemented in a single computer device.</p>
<p id="p-0047" num="0046">As discussed above, the predictive modeling server system <b>206</b> can be implemented &#x201c;in the cloud&#x201d;. In some implementations, the predictive modeling server system <b>206</b> provides a web-based service. A web page at a URL provided by the predictive modeling server system <b>206</b> can be accessed by the client computing system <b>202</b>. An operator of the client computing system <b>202</b> can follow instructions displayed on the web page to upload training data &#x201c;to the cloud&#x201d;, i.e., to the predictive modeling server system <b>206</b>. Once completed, the operator can enter an input to initiate the training and selecting operations to be performed &#x201c;in the cloud&#x201d;, i.e., by the predictive modeling server system <b>206</b>, or these operations can be automatically initiated in response to the training data having been uploaded.</p>
<p id="p-0048" num="0047">The operator of the client computing system <b>202</b> can access the one or more trained models that are available to the client computing system <b>202</b> from the web page. For example, if more than one set of training data (e.g., relating to different types of input that correspond to different types of predictive output) had been uploaded by the client computing system <b>202</b>, then more than one trained predictive model may be available to the particular client computing system. Representations of the available predictive models can be displayed, for example, by names listed in a drop down menu or by icons displayed on the web page, although other representations can be used. The operator can select one of the available predictive models, e.g., by clicking on the name or icon. In response, a second web page (e.g., a form) can be displayed that prompts the operator to upload input data that can be used by the selected trained model to provide predictive output data (in some implementations, the form can be part of the first web page described above). For example, an input field can be provided, and the operator can enter the input data into the field. The operator may also be able to select and upload a file (or files) from the client computing system <b>202</b> to the predictive modeling server system <b>206</b> using the form, where the file or files contain the input data. In response, the selected predicted model can generate predictive output based on the input data provided, and provide the predictive output to the client computing system <b>202</b> either on the same web page or a different web page. The predictive output can be provided by displaying the output, providing an output file or otherwise.</p>
<p id="p-0049" num="0048">In some implementations, the client computing system <b>202</b> can grant permission to one or more other client computing systems to access one or more of the available trained predictive models of the client computing system. The web page used by the operator of the client computing system <b>202</b> to access the one or more available trained predictive models can be used (either directly or indirectly as a link to another web page) by the operator to enter information identifying the one or more other client computing systems being granted access and possibly specifying limits on their accessibility. Conversely, if the client computing system <b>202</b> has been granted access by a third party (i.e., an entity controlling a different client computing system) to access one or more of the third party's trained models, the operator of the client computing system <b>202</b> can access the third party's trained models using the web page in the same manner as accessing the client computing system's own trained models (e.g., by selecting from a drop down menu or clicking an icon).</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram showing a system <b>300</b> including a scheduling module <b>306</b> for caching predictive models. The system <b>300</b> includes a scheduling module <b>306</b> that can be used together with the dynamic predictive modeling server system <b>206</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> and described above. For ease of illustration, only the components of the dynamic predictive modeling server system <b>206</b> discussed here are shown in <figref idref="DRAWINGS">FIG. 3</figref>, i.e., the predictive model repository <b>215</b> and the interface <b>208</b>. However, it should be understood that the dynamic predictive modeling server system <b>206</b> can include more components than those shown in <figref idref="DRAWINGS">FIG. 3</figref>, e.g., some or all of the components shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0051" num="0050">For illustrative purposes, the system <b>300</b> is shown with one client computer system <b>202</b> communicating over a network <b>204</b> with a dynamic predictive modeling server system <b>206</b>. The dynamic predictive modeling server system <b>206</b> can be implemented using multiple computers located in one or more physical locations and can serve multiple client computer systems.</p>
<p id="p-0052" num="0051">Predictive models may be cached in primary memory in order to speed the response time of predictive requests to those models. Generally, a predictive request to a predictive model that is not in primary memory requires that the requested predictive model be located in secondary memory and loaded into primary memory before the predictive request can be satisfied. Generally, primary memory is volatile memory that is directly accessible by the central processing unit (CPU) of the computer. The CPU reads instructions stored in primary memory and executes them as required. Secondary memory is non-volatile memory that is not directly accessible by the CPU of a computer. A computer usually uses its input and output channels to access secondary storage and transfers desired data using primary memory. Any data actively operated on by the CPU is also stored in primary memory. Therefore, any trained predictive model stored in secondary memory is moved into primary memory through an input channel before the model can be executed. Pre-loading predictive models into primary memory before a user submits a predictive request can reduce latency in providing predictive output to the user. Determining which predictive models to pre-load into primary memory can be determined by analyzing historic predictive requests.</p>
<p id="p-0053" num="0052">A user of the client computer system <b>202</b> submits prediction requests to an interface <b>208</b> executing on the predictive model server system <b>206</b>. To satisfy the predictive request, the interface forwards the predictive request to a trained predictive model (not shown). The trained predictive model produces a predictive output which is then sent to the client computing system <b>202</b>. Generally, the trained predictive model is located and executes at a location remote from the client computing system <b>202</b>. For example, referring back to <figref idref="DRAWINGS">FIG. 1</figref>, the trained predictive model can reside and execute in the data center <b>112</b>, thereby not using the resources of the client computing system <b>202</b>.</p>
<p id="p-0054" num="0053">The interface <b>208</b> stores information about the predictive requests in a predictive model usage data store <b>310</b>. For example, the interface <b>208</b> can store the some or all of: date and time the predictive request was received, the contents of the predictive requests, an identifier that identifies the user of the client computing system <b>202</b>, an identifier that identifies the predictive model that satisfied the request, and a measure of the size of the predictive model that satisfied the request. For situations in which the systems discussed here collect information about users, the users may be provided with an opportunity to opt in/out of programs or features that may collect information (e.g., the date and time of the predictive request, the identifier that identifies the user of the client computing system <b>202</b>, etc.).</p>
<p id="p-0055" num="0054">A scheduler <b>320</b> obtains the predictive model usage data collected in the predictive model usage data store <b>310</b> over a period of time (for example, a month, two months, a year, multiple years, etc.) The scheduler <b>320</b> trains one or more scheduling models using the predictive model usage data as training data. The scheduling models are, themselves, trained predictive models. Trained scheduling models can be either static predictive models or updatable predictive models.</p>
<p id="p-0056" num="0055">In some implementations, the scheduler <b>320</b> trains a scheduling model using the date and time of the predictive request as input and the identifier of the predictive model that satisfied the request as an output. A scheduling model trained in this manner can predict which trained predictive models are likely to receive a predictive request based on date and time. In some implementations, the scheduler <b>320</b> can train a first scheduling model using the date of the predictive request as input and the identifier of the predictive model as output and the scheduler <b>320</b> can train a second scheduling model using the time of the predictive request as input and the identifier of the predictive model as output, referred to as a collective scheduling model.</p>
<p id="p-0057" num="0056">The scheduler can also train scheduling models to identify trained predictive models likely to receive predictive requests from a specific user, referring to as an individual scheduling model. In some implementations, users may be grouped together based on a shared characteristic. For example, users may be associated together based on employer. Users that are employed by the same company may be grouped together. Using the trained scheduling model, the scheduler could determine to load particular trained predictive models on behalf of a particular company. For example, a company may contract with the provider of the trained predictive models to have some of its trained predictive models stored in memory at any given time.</p>
<p id="p-0058" num="0057">The scheduler <b>320</b> can also train a scheduling model to determine trained predictive models that are likely to be used in tandem. In some implementations, the scheduler trains predictive models to analyze correlation patterns in usage.</p>
<p id="p-0059" num="0058">In some implementations, the scheduler <b>320</b> trains separate scheduling models for each trained predictive model. In these implementations, predictive model usage data that corresponds to prediction requests that were satisfied by the trained predictive model are supplied to the scheduling model as a positive test case and predictive model usage data that corresponds to prediction requests that were not satisfied by the trained predictive model are supplied to the scheduling predictive model as a negative test case.</p>
<p id="p-0060" num="0059">In some implementations, the scheduler can train scheduling models for particular geographic regions. For example, the use of predictive models can vary based on a region of the country (e.g. East and West, North and South, Midwest, Plain States, Mid-Atlantic, etc). Multiple data centers within a region may combine their predictive model usage data and train a common set of scheduling models.</p>
<p id="p-0061" num="0060">The scheduler uses the scheduling models to predict a set of trained predictive models that are likely to receive predictive requests when a given condition is satisfied. The given condition can be the input to the scheduling models and identifiers for the set of trained predictive models are the predictive output from the scheduling models. For example, the condition may be a particular time and date. In this example, the scheduler may determine that on June 1<sup>st </sup>(a Wednesday) at 9:00 am, a particular set of trained predictive models are most likely to receive predictive requests. In another example, the condition may be a particular time and date in a particular geographic region that is served by the predictive models to be loaded into a predictive model cache <b>316</b>. The scheduler loads the identified predictive models from a predictive model repository <b>215</b> in secondary memory and stores the identified predictive models in the predictive model cache <b>316</b> in primary memory. Loading predictive models into primary memory prior to likely usage decreases the latency in providing predictive requests, as the time required to load a predictive model from secondary memory to primary memory is no longer included in the time required to service the request.</p>
<p id="p-0062" num="0061">If the predictive model cache <b>215</b> does not have sufficient resources available to load all of the identified predictive models into primary memory, then less frequently used predictive models may be removed from the predictive model cache <b>316</b> to free up resources. In some implementations, the scheduling models may be utilized to determine the trained predictive model in the predictive model cache <b>316</b>, or identified but not yet loaded into the cache <b>316</b>, that is the least likely to be used, and that trained predictive model is removed or not loaded into the cache <b>316</b> in the first place. In some implementations, a predictive model that has recently received a predictive request will remain on the cache <b>316</b> regardless of other factors. For example, a trained predictive model that has received a predictive request in the past 5 minutes will remain on the predictive model cache <b>316</b>.</p>
<p id="p-0063" num="0062">In some implementations, the scheduler balances the size of the predictive model with the amount of primary memory available to store predictive models. In some implementations, the scheduler stores as many predictive models in the cache as possible. In some implementations, the scheduler compares the size of the predictive model to the likelihood the predictive model will be accessed to determine if the model should be stored in the predictive model cache <b>316</b>.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart showing an example of a process <b>400</b> for caching predictive models. The process <b>400</b> is carried out to identify and cache predictive models that are likely to receive predictive requests. The process <b>400</b> can be performed by, for example, the scheduler <b>320</b> of <figref idref="DRAWINGS">FIG. 3</figref>. For convenience, the process <b>400</b> will be described in terms of a system performing the process.</p>
<p id="p-0065" num="0064">The process <b>400</b> obtains records describing previously submitted predictive requests (Step <b>402</b>). In some implementations, the previously submitted predictive requests can include a date and time at which the predictive request was submitted and an identifier associated with the predictive model that received the previously submitted predictive request. The records can be stored in a database, for example, a relational database or in a flat file. In some implementations, multiple databases or flat files are accessed to obtain the predictive results.</p>
<p id="p-0066" num="0065">The process <b>400</b> generates a trained scheduling model (Step <b>404</b>). The trained scheduling model can be generated by training a predictive model using the records as described above. That is, in this example, the data and time at which a predictive request was submitted to a trained predictive model can be input data and the identifier associated with the predictive model that responded to the predictive request can be output data, and the input data and output data together are a training data sample. Such training data samples are used to train the trained scheduling model.</p>
<p id="p-0067" num="0066">The process <b>400</b> determines a set of models that satisfy a given condition (Step <b>406</b>). For example, the condition can be satisfied by the set of models are models that are most likely to receive predictive requests in the near future. Determining the set of models can include a target time and a target date (i.e., the input data) to the trained scheduling model with the predictive request. The trained scheduling model identifies a set of one or more trained predictive models as the corresponding predictive output.</p>
<p id="p-0068" num="0067">The process <b>400</b> obtains the identified one or more trained predictive models from a secondary memory based on the set of model indicators (step <b>408</b>). The secondary memory can be, for example, a magnetic storage device, a flash memory device, or other similar memory. Referring again to the example system in <figref idref="DRAWINGS">FIG. 3</figref>, the secondary memory can be the predictive model repository <b>215</b>. The predictive model repository can be a database, such as a relational database, or in a series of files.</p>
<p id="p-0069" num="0068">The process <b>400</b> stores the set of predictive models in a cache in a primary memory (Step <b>410</b>). By way of example, the cache can be the predictive model cache <b>316</b> shown in the example system in <figref idref="DRAWINGS">FIG. 3</figref>. The primary memory can be, for example, Random Access Memory (RAM) or Dynamic Random Access Memory (DRAM) modules, or other similar memory. The cache can be a data structure capable of maintaining references to predictive models. The cache can obtain a predictive model based on a request including an identifier associated with the predictive model. In some implementations, if the requested predictive model is not in the cache, the cache obtains the requested predictive model from the secondary memory. In other implementations, if the requested predictive model is not in the cache, the cache notifies the requesting process of the error.</p>
<p id="p-0070" num="0069">Storing a predictive model in the cache results in improved performance by decreasing the latency between when a predictive request is received and when a predictive output can be provided. When a predictive request is received, the cache is checked to determine if a predictive model that can satisfy the predictive request present. If the predictive model is in the cache then the predictive model is accessed directly from primary memory. If the predictive model is not in the cache then the predictive model has to be loaded from secondary memory into primary memory before it can be accessed. By pre-loading the predictive model into the cache prior to the receipt of the predictive request the latency associated with loading the predictive model can be eliminated or reduced.</p>
<p id="p-0071" num="0070">Various implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.</p>
<p id="p-0072" num="0071">These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms &#x201c;machine-readable medium&#x201d; &#x201c;computer-readable medium&#x201d; refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term &#x201c;machine-readable signal&#x201d; refers to any signal used to provide machine instructions and/or data to a programmable processor.</p>
<p id="p-0073" num="0072">To provide for interaction with a user, the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.</p>
<p id="p-0074" num="0073">The systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (&#x201c;LAN&#x201d;), a wide area network (&#x201c;WAN&#x201d;), and the Internet.</p>
<p id="p-0075" num="0074">The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p>
<p id="p-0076" num="0075">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p>
<p id="p-0077" num="0076">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p>
<p id="p-0078" num="0077">A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention.</p>
<p id="p-0079" num="0078">In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method comprising:
<claim-text>maintaining, in a secondary memory of a computing system, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted by a first user;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is a trained individual scheduling model that is specific to the first user;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the computing system, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the target time is a date, a day of a week, a time of the day, a date and time of day, or a day or week and time of day.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>,
<claim-text>wherein the first user is a client entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A computer storage medium encoded with computer program instructions that when executed by one or more computers cause the one or more computers to perform operations comprising:
<claim-text>maintaining, in a secondary memory of the one or more computers, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted by a first user;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is a trained individual scheduling model that is specific to the first user;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the one or more computers, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the target time is a date, a day of a week, a time of the day, a date and time of day, or a day or week and time of day.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>,
<claim-text>wherein the first user is a client entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>,
<claim-text>wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted from a particular geographic region; and</claim-text>
<claim-text>wherein the trained scheduling model is specific to the particular geographic region.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A system comprising:
<claim-text>one or more computers and one or more storage devices storing instructions that are operable, when executed by the one or more computers, to cause the one or more computers to perform operations comprising:
<claim-text>maintaining, in a secondary memory of a computing system, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted by a first user;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is a trained individual scheduling model that is specific to the first user;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the computing system, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the target time is a date, a day of a week, a time of the day, a date and time of day, or a day or week and time of day.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>,
<claim-text>wherein the first user is a client entity.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>,
<claim-text>wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted from a particular geographic region; and</claim-text>
<claim-text>wherein the trained scheduling model is specific to the particular geographic region.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>using the trained scheduling model to identify one or more other trained predictive models that are most likely to be used in tandem with the particular set of trained predictive models;</claim-text>
<claim-text>obtaining, from the secondary memory, prior to the target time, the one or more other trained predictive models; and</claim-text>
<claim-text>storing the one or more other trained predictive models in the primary memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise:
<claim-text>using the trained scheduling model to identify one or more other trained predictive models that are most likely to be used in tandem with the particular set of trained predictive models;</claim-text>
<claim-text>obtaining, from the secondary memory, prior to the target time, the one or more other trained predictive models; and</claim-text>
<claim-text>storing the one or more other trained predictive models in the primary memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein generating the trained scheduling model comprises:
<claim-text>training a scheduling model using, for each of the plurality of records, the respective time of the previously submitted request as input and the respective identifier of the trained predictive models that satisfied the request as output.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operations further comprise:
<claim-text>determining that the primary memory does not have sufficient resources available to store the selected one or more of the trained predictive models; and</claim-text>
<claim-text>removing, from the primary memory, one or more trained predictive models to free up resources.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operations further comprise:
<claim-text>selecting, for removing, the one or more trained predictive models that are less likely to receive predictive models at the target time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A computer-implemented method comprising:
<claim-text>maintaining, in a secondary memory of a computing system, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted from a particular geographic region;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is specific to the particular geographic region;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>obtaining, from the secondary memory, prior to the target time, the particular set of trained predictive models that are most likely to receive predictive requests at the target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the computing system, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A computer storage medium encoded with computer program instructions that when executed by one or more computers cause the one or more computers to perform operations comprising:
<claim-text>maintaining, in a secondary memory of the one or more computers, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted from a particular geographic region;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is specific to the particular geographic region;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>obtaining, from the second memory, prior to the target time, the particular set of trained predictive models that are most likely to receive predictive requests at the target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the one or more computers, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A system comprising:
<claim-text>one or more computers and one or more storage devices storing instructions that are operable, when executed by the one or more computers, to cause the one or more computers to perform operations comprising:
<claim-text>maintaining, in a secondary memory of a computing system, a collection of trained predictive models, wherein each trained predictive model in the collection has a respective identifier;</claim-text>
<claim-text>obtaining a plurality of records, wherein each record includes a time of a previously submitted predictive request and an identifier of a trained predictive model that provided a predictive output in response to the previously submitted predictive request, and wherein each of the plurality of records identifies the respective previously submitted predictive request as having been submitted from a particular geographic region;</claim-text>
<claim-text>generating a trained scheduling model using the plurality of records as training data, wherein the trained scheduling model is specific to the particular geographic region;</claim-text>
<claim-text>identifying, using the trained scheduling model, a particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>obtaining, from the secondary memory, prior to the target time, the particular set of trained predictive models that are most likely to receive predictive requests at a target time;</claim-text>
<claim-text>selecting, for storing, one or more of the trained predictive models in the particular set of trained predictive models that have a likelihood of receiving a predictive request at the target time that is higher relative to others of the trained predictive models in the particular set of trained predictive models; and</claim-text>
<claim-text>storing the selected one or more of the trained predictive models in the particular set of trained predictive models in a primary memory of the computing system, wherein the primary memory comprises volatile memory and the secondary memory comprises a non-volatile memory.</claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

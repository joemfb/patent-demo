<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627282-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627282</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13078694</doc-number>
<date>20110401</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>453</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717114</main-classification>
<further-classification>717100</further-classification>
<further-classification>717116</further-classification>
</classification-national>
<invention-title id="d2e53">Wide-spectrum type system incorporating representation types, correctness types, coercions, and function overload resolution</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5696974</doc-number>
<kind>A</kind>
<name>Agrawal et al.</name>
<date>19971200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717152</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8195712</doc-number>
<kind>B1</kind>
<name>McCormick</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707803</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0221182</doc-number>
<kind>A1</kind>
<name>Tip et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717116</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0130021</doc-number>
<kind>A1</kind>
<name>Plum et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0034353</doc-number>
<kind>A1</kind>
<name>Rajamani et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717139</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0282238</doc-number>
<kind>A1</kind>
<name>Meijer et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0299658</doc-number>
<kind>A1</kind>
<name>Ng et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717140</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Stansifer et al., &#x201c;Type reconstruction for coercion polymorphism (Technical summary),&#x201d; Computer Science Technical Reports, 1991.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>Smith et al., &#x201c;Principal Type Schemes for Functional Programs with Overloading and Subtyping,&#x201d; Cornell University, Dec. 1994.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>Leuschel et al., &#x201c;Abstract Conjunctive Partial Deduction using Regular Types and its Application to Model Checking,&#x201d; Springer-Verlag Berlin Heidelberg 2002.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Kaes et al., &#x201c;Type Inference in the Presence of Overloading, Subtyping and Recursive Types,&#x201d; ACM, 1992.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Shields et al., &#x201c;Object-Oriented Style Overloading for Haskell,&#x201d; Microsoft, 2001.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Henglein, &#x201c;Polymorphic Type Inference and Semi-Unification,&#x201d; May 1989.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Xiong, &#x201c;An Extensible Type System for Component-Based Design,&#x201d; 2002.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Siek et al., &#x201c;Gradual Typing with Unification-based Inference,&#x201d; ACM, 2008.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Rowe, &#x201c;Intersection Types for Class-based Object Oriented Programming,&#x201d; Sep. 2008.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Pierce, Types and Programming Languages, MIT Press (Cambridge, MA; London, England), 2002&#x2014;ISBN: 9780262162098, pp. 206-207.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Reynolds, Theories of Programming Languages, Cambridge University Press (U.S. Britain), 2009&#x2014;ISBN: 9780521106979, pp. 349-358.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>19</number-of-drawing-sheets>
<number-of-figures>19</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61320544</doc-number>
<date>20100402</date>
</document-id>
</us-provisional-application>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Karr</last-name>
<first-name>Michael</first-name>
<address>
<city>Brookline</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Karr</last-name>
<first-name>Michael</first-name>
<address>
<city>Brookline</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Venable LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Sartori</last-name>
<first-name>Michael A.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="03" rep-type="attorney">
<addressbook>
<last-name>Farnsworth</last-name>
<first-name>Todd R.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>The MathWorks, Inc.</orgname>
<role>02</role>
<address>
<city>Natick</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kang</last-name>
<first-name>Insun</first-name>
<department>2198</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In an embodiment of the invention, one or more tangible non-transitory computer-readable storage media may store the following instructions. Defining representation type spaces R<sub>1 </sub>and R<sub>2 </sub>and correctness type spaces C<sub>1 </sub>and C<sub>2 </sub>over the representation type spaces R<sub>1 </sub>and R<sub>2</sub>, respectively. Defining a representation type space R and a correctness type space C over the representation type space R, such that a semilattice associated with the correctness type space C is a function semilattice over respective semilattices associated with the correctness type spaces C<sub>1 </sub>and C<sub>2</sub>.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="234.44mm" wi="187.88mm" file="US08627282-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="242.91mm" wi="193.89mm" file="US08627282-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="187.37mm" wi="161.97mm" file="US08627282-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="184.83mm" wi="176.28mm" file="US08627282-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="198.63mm" wi="148.67mm" file="US08627282-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="227.84mm" wi="158.67mm" file="US08627282-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="243.84mm" wi="174.41mm" file="US08627282-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="241.64mm" wi="169.08mm" file="US08627282-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="246.97mm" wi="172.80mm" file="US08627282-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="242.32mm" wi="162.81mm" file="US08627282-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="240.45mm" wi="175.34mm" file="US08627282-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="208.03mm" wi="175.01mm" file="US08627282-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="244.52mm" wi="168.49mm" file="US08627282-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="235.37mm" wi="174.41mm" file="US08627282-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="248.58mm" wi="195.75mm" file="US08627282-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="248.58mm" wi="175.01mm" file="US08627282-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="226.91mm" wi="182.88mm" file="US08627282-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="250.78mm" wi="185.42mm" file="US08627282-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="227.25mm" wi="186.69mm" file="US08627282-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="196.77mm" wi="183.22mm" file="US08627282-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This patent application claims the benefit of U.S. Provisional Application No. 61/320,544, filed Apr. 2, 2010. Provisional Application No. 61/320,544 is hereby incorporated by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Many computer programming languages have a notion of type. The precise meaning of this notion differs from language to language, but in most cases, types are involved in at least two related aspects of the language:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0003">Types describe the representation of values. For example, the type char might describe an 8-bit value, while double might describe a 64-bit value.</li>
        <li id="ul0002-0002" num="0004">Types are used to resolve overloads of at least some functions. For example, + of two 32-bit integer values behaves differently from + of two 32-bit floating point values.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0004" num="0005">In some programming languages, often called statically typed languages, types may play an additional role of providing certain correctness guarantees: the computer programming language processing system may reject certain programs as not type-correct. Other programming languages are said to be dynamically typed. A few languages offer both a statically and a dynamically typed aspect.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0005" num="0006">The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments of the invention and, together with the description, explain the invention. In the drawings,</p>
<p id="p-0006" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example programming environment in an illustrative embodiment;</p>
<p id="p-0007" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> illustrates example numerical types connected by coercion relationships in an illustrative embodiment;</p>
<p id="p-0008" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> illustrates example coercions between real numerical types and complex numerical counterparts in an illustrative embodiment;</p>
<p id="p-0009" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> illustrates example coercions between algebraic objects in an illustrative embodiment;</p>
<p id="p-0010" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> illustrates an algebraic characterization of a universal semilattice over a partially ordered set using a commutative diagram in an illustrative embodiment;</p>
<p id="p-0011" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example flowchart describing a counter-example-to-canonical-form function performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0012" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example flowchart describing an adjoin-element function performed in a programming environment an illustrative embodiment;</p>
<p id="p-0013" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example flowchart describing a canonicalize function performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0014" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an example flowchart describing the process for calculating the greatest lower bound performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0015" num="0016"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an example flowchart describing the process for a lattice operator less-than-or-equal-to performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0016" num="0017"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an algebraic characterization of a universal function semilattice over a compliant map using a commutative diagram in an illustrative embodiment;</p>
<p id="p-0017" num="0018"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an example flowchart describing the overload resolution rule performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0018" num="0019"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an example flowchart describing the coercion of function values performed in a programming environment in an illustrative embodiment;</p>
<p id="p-0019" num="0020"><figref idref="DRAWINGS">FIGS. 14A</figref>, <b>14</b>B, <b>14</b>C, and <b>14</b>D illustrate example software class definitions that may be configured to practice an illustrative embodiment of the invention</p>
<p id="p-0020" num="0021"><figref idref="DRAWINGS">FIG. 15</figref> illustrates an example distributed environment that may be configured to practice an illustrative embodiment; and</p>
<p id="p-0021" num="0022"><figref idref="DRAWINGS">FIG. 16</figref> illustrates an example of a computer system that may be configured to practice an illustrative embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<heading id="h-0005" level="1">Overview</heading>
<p id="p-0022" num="0023">One embodiment of the invention may relate to a particular type system called a wide-spectrum type system, suitable for a computer programming language that offers both statically and dynamically typed aspects. There exists an extensive literature on this subject, including <i>Theories of Programming Languages </i>by John C. Reynolds, published 1998 and 2009, which may provide the prerequisites for the material discussed here.</p>
<p id="p-0023" num="0024">A fundamental property of a type is that it may describe, in one way or another, a set of values. Throughout this document a type t has an associated set of values V<sub>t</sub>. The set V<sub>t </sub>may be infinite, but in any given computation, only a finite subset of V<sub>t </sub>is used. Some type systems may introduce a notion of a subtype, a relation on types that may say something about the relationship of the associated sets of values. For example, if t<sub>1 </sub>is a subtype of t<sub>2</sub>, then V<sub>t</sub><sub><sub2>1 </sub2></sub>is a subset of V<sub>t</sub><sub><sub2>2</sub2></sub>. Another definition of subtype may state, for example, that if t<sub>1 </sub>is a subtype of t<sub>2</sub>, then the programming language supplies a coercion from t<sub>1 </sub>to t<sub>2</sub>. A coercion may be implicitly introduced by the programming language implementation when, for example, a variable has a value of type t<sub>1 </sub>but a value of type t<sub>2 </sub>is needed. For example, in the C programming language the type single may be said to be a subtype of the type double. If x has type single and the function &#x192; takes one argument of type double, then the construct &#x192;(x) is type-correct, and an implementation of the C language automatically supplies an application of the coercion function that takes an argument of type single and produces a result of type double. If t<sub>1 </sub>is a subtype of t<sub>2</sub>, for example, this document will use the notation &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1 </sub2></sub>to denote the coercion function from t<sub>1 </sub>to t<sub>2</sub>. Thus, the C programming language has a rule that for the above f and x, the construct &#x192;(x) is equivalent to the construct &#x192;(&#x3b3;<sub>double, single</sub>(x)).</p>
<p id="h-0006" num="0000">Example Programming Environment</p>
<p id="p-0024" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example programming environment <b>100</b> in an illustrative embodiment. The programming environment <b>100</b> may include wide-spectrum type system module <b>110</b>, type space module <b>120</b>, function semilattices module <b>130</b>, and function type space module <b>140</b>.</p>
<p id="p-0025" num="0026">Type space module <b>120</b> may include both representation types <b>150</b>, correctness types <b>160</b>, and coercions <b>155</b>. Representation types <b>150</b> may correspond most closely to the traditional meaning of &#x201c;type,&#x201d; because they correspond to the representation of values.</p>
<p id="p-0026" num="0027">A single element of the set of correctness types <b>160</b> may correspond to many elements of the set of representation types <b>150</b>. A correctness type <b>160</b> may serve to unify different representations of the same underlying data semantics.</p>
<p id="p-0027" num="0028">Coercions <b>155</b> may correspond to the traditional meaning of the term, referring to a function g implicitly applied to the argument of a function &#x192;, before calling &#x192; For example, the language semantics may say that for certain &#x192; and x, &#x192;(x) means &#x192;(g(x)).</p>
<p id="p-0028" num="0029">Function semilattices module <b>130</b> may correspond to predicates on function values. Function values form the basis of function types, and function values may also be used in the absence of types to analyze function behavior.</p>
<p id="p-0029" num="0030">Function type space module <b>140</b> may provide the fundamental operations on function representation types. Function type space module <b>140</b> may include function overload resolution <b>180</b>, function coercion <b>170</b>, function correctness types <b>175</b>, and function representation types <b>185</b>.</p>
<p id="p-0030" num="0031">Function overload resolution <b>180</b> may provide the technique that decides not only which overload to call for a particular application of an overloaded function, but also the application of coercions <b>155</b> that align the arguments of the call to those expected by the chosen overload.</p>
<p id="p-0031" num="0032">Function coercion <b>170</b> may refer to the coercion technique applied specifically to function values.</p>
<p id="p-0032" num="0033">Function representation types <b>185</b> may refer to a set of representation types <b>150</b>, each of whose elements is a representation type for a function represented as a list of overloads.</p>
<p id="p-0033" num="0034">Function correctness types <b>175</b> may refer to a set of correctness types <b>160</b>, each of whose elements corresponds to a set of mutually coercible function representation types.</p>
<p id="p-0034" num="0035">The wide-spectrum type system <b>110</b> may combine representation types <b>150</b>, correctness types <b>160</b>, and coercions <b>155</b> aspects and the operations on function representation types <b>185</b>. Operations on function representation types <b>185</b> may include function overload resolution <b>180</b> and function type coercion <b>170</b>, and function correctness types <b>175</b>. Function correctness types <b>175</b> may include operators of function semilattices <b>130</b>.</p>
<p id="p-0035" num="0036"><figref idref="DRAWINGS">FIG. 2</figref> illustrates example numerical types connected by coercions <b>155</b> relationships <b>210</b>, <b>220</b> in an illustrative embodiment. The coercions <b>155</b>, for example, integer to rational <b>210</b> and double to single <b>220</b> are shown. Other coercions <b>155</b> of numerical types of higher and lower precision may also be similarly expressed. The direction of coercions <b>155</b> may follow, for example, the rule in the MATLAB&#xae; computer program from MathWorks, Inc., which coerces higher precision types to lower precision types. Reversing the direction of the vertical arcs, for example, may give the rule from the C programming language that coerces a lower precision type (single) to a higher precision type (double). In an embodiment of the invention, coercions <b>155</b> may be handled at the system level and not necessarily by particular choices of coercions or of particular types.</p>
<p id="p-0036" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> illustrates example coercions <b>155</b> between real types and complex counterparts in an illustrative embodiment. As shown in <figref idref="DRAWINGS">FIG. 3</figref>, an integer 310 may be coerced to either a value of type rational <b>320</b> or complex 330. For example, any type t where complex(t) is valid, there may be a coercion taking a value x of type t to x+0&#x221a;&#x2212;1, a value of type complex(t). Thus, a real number may be considered to be a complex number, via another example of a coercion.</p>
<p id="p-0037" num="0038">In one embodiment, a type denoted <smallcaps>NEVER</smallcaps>, about which the key fact is V<sub>NEVER</sub>=0, (i.e., there are no values of this type) may be considered as the only type with an empty set of values. Thus, there is a coercion from <smallcaps>NEVER </smallcaps>to any type t, namely the map with an empty domain. But, this map may rarely be used because functions usually do not have <smallcaps>NEVER </smallcaps>as an argument type, as that results in never calling the function. On the other hand, a function may often have <smallcaps>NEVER </smallcaps>as a result type, because in practice, an implemented function may never return. For example, the function may loop forever, it may throw control to an outer point such as an error function, etc.</p>
<p id="p-0038" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> illustrates example coercions <b>155</b> between some algebraic objects in an illustrative embodiment. <figref idref="DRAWINGS">FIG. 4</figref> illustrates coercions <b>155</b> between types that in many languages may be called classes. Classes may be considered at a higher level than types of values. In this case, coerces-to corresponds to what an object-oriented language may call inherits from. <figref idref="DRAWINGS">FIG. 4</figref> depicts the following objects OrderedField(p, t) <b>410</b>, Field(p, t) <b>420</b>, Chain (t) <b>430</b>, and EquivalenceDomain(t) <b>440</b>. OrderedField(p, t) <b>410</b> may be a type constructor corresponding to the mathematical definition of an ordered field.</p>
<p id="p-0039" num="0040">OrderedField(p, t) <b>410</b> may take two parameters, namely a precision value (e.g., exact, approximate, etc) and a type (e.g., rational, single, double, etc.)</p>
<p id="p-0040" num="0041">Field(p, t) <b>420</b> may be a type constructor corresponding to the mathematical notion of a field. Field(p, t) <b>420</b> may take the same parameters as OrderedField(p, t) <b>410</b>. Mathematically, any ordered field may also be a field.</p>
<p id="p-0041" num="0042">Chain (t) <b>430</b> may be a type constructor corresponding to the mathematical definition of a set X and a relation &#x3c; that is a total ordering on X. Chain (t) <b>430</b> may take only a single parameter, namely a type.</p>
<p id="p-0042" num="0043">EquivalenceDomain(t) <b>440</b> may be a type constructor corresponding to the mathematical definition of an equivalence relation E on a set X when for all x, y, z&#x3b5;X, E has reflexivity (e.g., x E x), symmetry (e.g., x E y if and only if y E x) and transitivity (e.g., if x E y and y E z, then x E z). EquivalenceDomain(t) <b>440</b> may take a single parameter, namely a type.</p>
<p id="p-0043" num="0044">EquivalenceDomain(t) <b>440</b> may be a base class to Field(p, t) <b>420</b> and Chain (t) <b>430</b>. In other words, Field(p, t) <b>420</b> and Chain (t) <b>430</b> may be derived (e.g., subclasses) from EquivalenceDomain(t) <b>440</b>. Further, OrderedField(p, t) <b>410</b> may be derived from both Field(p, t) <b>420</b> and Chain (t) <b>430</b>.</p>
<p id="p-0044" num="0045">OrderedField(p, t) <b>410</b> may be coerced to Field(p, t) <b>420</b> and/or Chain (t) <b>430</b>. Field(p, t) <b>420</b> or Chain (t) <b>430</b> may be coerced to EquivalenceDomain(t) <b>440</b>.</p>
<p id="p-0045" num="0046">The types or classes are specific examples only and an embodiment of the invention may be implemented at a lower level or higher level (e.g., system) than individual classes. The notion that t<sub>1 </sub>can be used as t<sub>2 </sub>may be analogous to the concept of inheritance used in object-oriented languages. For example, if a function has class t<sub>2 </sub>as the type of a formal parameter, and if t<sub>1 </sub>inherits from t<sub>2</sub>, then an actual value of class t<sub>1 </sub>may be supplied as an actual parameter to the function.</p>
<heading id="h-0007" level="1">ILLUSTRATIVE EMBODIMENTS</heading>
<p id="p-0046" num="0047">In an embodiment of the invention, programming environment <b>100</b> may distinguish between representation types <b>150</b> and correctness types <b>160</b>. There may be a set of representation types <b>150</b>. A set of representation types may be defined by the above-mentioned property that each of its elements describes a set of values. There is a relation on representation types <b>150</b> that amounts to the subtype relation, in that it may govern coercions <b>155</b>. For example, given types t<sub>1 </sub>and t<sub>2</sub>, the relation may be denoted by t<sub>1</sub>&#x2266;t<sub>2</sub>, and the relation may be called coerces-to to emphasize that it may be cyclic (e.g., the sub in subtype may connote acyclicity). For technical convenience, it may be stated that <smallcaps>NEVER</smallcaps>&#x3c;t for any representation type <b>150</b> t. Observe that this is consistent with the earlier remark that there is a coercion from <smallcaps>NEVER </smallcaps>to t. It may be possible for distinct types t<sub>1 </sub>and t<sub>2 </sub>to satisfy t<sub>1</sub>&#x2266;t<sub>2 </sub>and t<sub>2</sub>&#x2266;t<sub>1</sub>. This condition may be denoted by t<sub>1</sub>&#x2248;t<sub>2</sub>, and t<sub>1 </sub>and t<sub>2 </sub>may be referred to as equivalent, reflecting the fact that &#x2248; is indeed an equivalence relation. If t<sub>1</sub>&#x2248;t<sub>2</sub>, then the coercion may be inverses of one another (i.e., the composition of &#x3b3;<sub>t</sub><sub><sub2>1</sub2></sub><sub>,t</sub><sub><sub2>2 </sub2></sub>and &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>, denoted &#x3b3;<sub>t</sub><sub><sub2>1</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub>&#x2218;&#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>, may be the identity on V<sub>t</sub><sub><sub2>1 </sub2></sub>and &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>&#x2218;&#x3b3;<sub>t</sub><sub><sub2>1</sub2></sub><sub>,t</sub><sub><sub2>2 </sub2></sub>may be the identity on V<sub>t</sub><sub><sub2>2</sub2></sub>). In other words, in a sequence of coercions <b>155</b> on types t<sub>1</sub>&#x2266;t<sub>2</sub>&#x2266; . . . &#x2266;t<sub>k</sub>, where t<sub>k</sub>=t<sub>1</sub>, called a cycle of coercions, each coercion may be a non-information-losing change of representation.</p>
<p id="p-0047" num="0048">The behavior of coercions <b>155</b> on cycles may be a special case of a more general rule about the coerces-to relation and its interaction with coercions <b>155</b>. It may be required that coerces-to be a quasi-ordering, meaning that, for example, (a) for any type t, t&#x2266;t (reflexivity) and (b) for types t<sub>1</sub>, t<sub>2</sub>, and t<sub>3</sub>, if t<sub>1</sub>&#x2266;t<sub>2 </sub>and t<sub>2</sub>&#x2266;t<sub>3</sub>, then t<sub>2</sub>&#x2266;t<sub>3 </sub>(transitivity). The corresponding rules for function coercion <b>170</b> may be (a) for any type t, &#x3b3;<sub>t,t </sub>is the identity function on V<sub>t </sub>(a technical convenience), and (b) for types t<sub>1</sub>, t<sub>2</sub>, and t<sub>3</sub>, if t<sub>1</sub>&#x2266;t<sub>2 </sub>and t<sub>2</sub>&#x2266;t<sub>3</sub>, then &#x3b3;<sub>t</sub><sub><sub2>3</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub>&#x2218;&#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>=&#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,d</sub><sub><sub2>1</sub2></sub>&#x2218;&#x3b3;<sub>t</sub><sub><sub2>3</sub2></sub><sub>,t</sub><sub><sub2>1 </sub2></sub>(the composition rule).</p>
<p id="p-0048" num="0049">A representation type space, by definition, is a triple R, &#x2266;, &#x3b3; where R is a set of representation types <b>150</b>, &#x2266; is a quasi-ordering of R, and &#x3b3; is a function that maps a pair of types t<sub>1</sub>, t<sub>2</sub>, where t<sub>1</sub>&#x2266;t<sub>2</sub>, to a function which we have called a coercion and denoted &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>, which maps values of type t<sub>1 </sub>to values of t<sub>2</sub>.</p>
<p id="p-0049" num="0050">The coerces-to relation on types may be visualized as a graph, one that is potentially cyclic. By standard graph theory, the strongly connected components of this graph partition the types into equivalence classes over &#x2248;, and by the above remarks, any pair of types in the same equivalence class are mutually coercible. This permits a precise characterization of correctness types <b>160</b>. For example, let R, &#x2266;, &#x3b3; be a representation type space, and let R/&#x2248; denote the set of equivalence classes of &#x2248;. To say that C, &#x3c4; is a correctness type space over R, &#x2266;, &#x3b3; means, by definition, that &#x3c4; is a map from R onto C such that &#x3c4;t<sub>1</sub>=&#x3c4;t<sub>2 </sub>if and only if t<sub>1</sub>&#x2248;t<sub>2</sub>. Thus, there is a 1-1 correspondence between T1&#x2248; and T.</p>
<p id="p-0050" num="0051">This innovative distinction between relatedness of representation types <b>150</b> and correctness types <b>160</b> may serve the purposes both of the dynamically typed aspects of a language (when representation may be all that matters) and statically typed aspects (because absence of type faults may depend only on correctness types <b>160</b>).</p>
<p id="h-0008" num="0000">Correctness Types</p>
<p id="p-0051" num="0052">The partitioning of a graph into strongly connected components induces a relation on the components. For example, imagine drawing an arc from one strongly connected component to a second if there is an arc from any element of the first strongly connected component to any element of the second. The resulting graph on strongly connected components is acyclic. This graph-theoretic fact may say the following with regard to correctness types <b>160</b>: for example, denoting the element-of relation by &#x3b5;, let t<sub>1</sub>, t<sub>2</sub>&#x3b5;T be any elements satisfying t<sub>1</sub>&#x2266;t<sub>2</sub>; then there may be an arc from the strongly connected component to which t<sub>1 </sub>belongs to the strongly connected component to which t<sub>2 </sub>belongs. Because elements of T are in 1-1 correspondence with the strongly connected components, an arc may exist from &#x3c4;t<sub>1 </sub>to &#x3c4;t<sub>2</sub>, a relation that may be written with a different symbol, still suggestive of ordering: &#x3c4;t<sub>1 </sub><img id="CUSTOM-CHARACTER-00001" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> &#x3c4;t<sub>2</sub>; briefly, this relation on T may be defined by the rule that for T<sub>1</sub>, T<sub>2</sub>&#x3b5;T, T<sub>1</sub><img id="CUSTOM-CHARACTER-00002" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> T<sub>2 </sub>holds if and only if there exists t<sub>1</sub>, t<sub>2</sub>&#x3b5;T such that t<sub>1</sub>&#x2266;t<sub>2 </sub>and &#x3c4;t<sub>1</sub>=T<sub>i </sub>for i=1 and 2. Applying this rule to <smallcaps>NEVER</smallcaps>, the fact that <smallcaps>NEVER</smallcaps>&#x2266;t for all t&#x3b5;T means that &#x3c4;(<smallcaps>NEVER</smallcaps>)<img id="CUSTOM-CHARACTER-00003" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> &#x3c4;t. Denotation of &#x3c4;(<smallcaps>NEVER</smallcaps>) may be by &#x22a5;, referred to as bottom. Since for every T&#x3b5;T there may be some t&#x3b5;T with &#x3c4;t=T, it follows that &#x22a5;<img id="CUSTOM-CHARACTER-00004" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> T for every T&#x3b5;T.</p>
<p id="p-0052" num="0053">To understand intuitively what <img id="CUSTOM-CHARACTER-00005" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> means, suppose that a variable x has correctness type <b>160</b> T<sub>1 </sub>and that the argument of f has correctness type <b>160</b> T<sub>2</sub>, with T<sub>1</sub><img id="CUSTOM-CHARACTER-00006" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> T<sub>2</sub>. Then, without knowing the representation type <b>150</b> of x or of the argument of &#x192;, one may still conclude that the construct &#x192;(x) is type-correct. The reasoning is as follows. From T<sub>1</sub><img id="CUSTOM-CHARACTER-00007" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> T<sub>2</sub>, we know that there exists t<sub>1</sub>, t<sub>2</sub>&#x3b5;T such that t<sub>1</sub>&#x2266;t<sub>2 </sub>and &#x3c4;t<sub>1</sub>=T<sub>i </sub>for i=1 and 2. For example, let the representation type <b>150</b> of x be t&#x2032;<sub>1</sub>&#x3b5;T, so &#x3c4;t&#x2032;<sub>1</sub>=&#x3c4;t<sub>1</sub>. By the definition of correctness types <b>160</b>, t&#x2032;<sub>1</sub>&#x2248;t<sub>1</sub>, and by the definition of &#x2248;, it follows that t&#x2032;<sub>1</sub>&#x2266;t<sub>1</sub>. Similarly, let the representation type <b>150</b> of the argument of &#x192; be t&#x2032;<sub>2</sub>&#x3b5;T, for example. Then t<sub>2</sub>&#x2266;t&#x2032;<sub>2</sub>, with the same reasoning as before. Since t<sub>1</sub>&#x2266;t<sub>2</sub>, transitivity says that t&#x2032;<sub>1</sub>&#x2266;t&#x2032;<sub>2</sub>. Thus &#x192;(x) is type-correct, since x may be coerced to the type required by &#x192;, specifically, by &#x3b3;<sub>t&#x2032;</sub><sub><sub2>2</sub2></sub><sub>,t&#x2032;</sub><sub><sub2>1</sub2></sub>. So the intuitive meaning of <img id="CUSTOM-CHARACTER-00008" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> may be phrased as &#x201c;can be used without type-fault as&#x201d;.</p>
<p id="p-0053" num="0054">With this intuitive understanding, the purely formal properties of <img id="CUSTOM-CHARACTER-00009" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> may be characterized. The properties of a quasi-ordering and the definition of <img id="CUSTOM-CHARACTER-00010" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> may guarantee that <img id="CUSTOM-CHARACTER-00011" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> is not merely a quasi-ordering, <img id="CUSTOM-CHARACTER-00012" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> is a partial ordering. As a partial ordering, <img id="CUSTOM-CHARACTER-00013" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> obeys the additional axiom of anti-symmetry: if T<sub>1</sub><img id="CUSTOM-CHARACTER-00014" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2 </sub>and T<sub>2</sub><img id="CUSTOM-CHARACTER-00015" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1</sub>, then T<sub>1</sub>=T<sub>2</sub>.</p>
<p id="h-0009" num="0000">Overload Resolution</p>
<p id="p-0054" num="0055">Many programming languages, for example C++, may allow distinct function definitions to have the same name, provided that the argument types are distinct. Each such function definition may be said to be an overload. If two overloads share the same name, then the language definition specifies, for an application of that function name, which overload function application may actually call. The issue of how to resolve overloads in the presence of coercions <b>155</b> has bedeviled language design. For example, let &#x192;<sub>1 </sub>and &#x192;<sub>2 </sub>be overloads of the same name &#x192;, and let t<sub>i1 </sub>be the argument representation type <b>150</b> of &#x192;<sub>i</sub>. Assume that t<sub>11</sub>&#x2260;t<sub>21 </sub>and that &#x192;<sub>1 </sub>and &#x192;<sub>2 </sub>are the only overloads of &#x192;. Consider the construct &#x192;(x) where the type of x is t&#x2032;. The overload that should be called is not obvious. A possibility may be that &#x3c4;t<sub>11</sub>=&#x3c4;t<sub>21</sub>. For example, a language that uses an embodiment of this invention may specify that a specific type is coerced to another specific type. However, in an embodiment of this invention may not need to provide specific type to type coercions <b>155</b>.</p>
<p id="p-0055" num="0056">In other words, an embodiment of the invention may be independent of the particular choice of types and coercions <b>155</b> that may be used in any particular context. We may thus assume that &#x3c4;t<sub>i1</sub>=T<sub>i1 </sub>for i=1 and 2, and that T<sub>11</sub>&#x2260;T<sub>21</sub>. Define T&#x2032; to be &#x3c4;t&#x2032;. An embodiment of this invention may specify that the answer of which overload function application call depends only upon the correctness types <b>160</b> T<sub>11</sub>, T<sub>21</sub>, and T&#x2032;. Suppose first that T&#x2032;<img id="CUSTOM-CHARACTER-00016" he="3.13mm" wi="1.78mm" file="US08627282-20140107-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>i1 </sub>for both i=1 and 2. Then x may not be coerced to either argument type, and the construct &#x192;(x) may be said to have a type fault. If T&#x2032;<img id="CUSTOM-CHARACTER-00017" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11 </sub>and T&#x2032;<img id="CUSTOM-CHARACTER-00018" he="3.13mm" wi="1.78mm" file="US08627282-20140107-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>12</sub>, then obviously &#x192;(x) should call &#x192;<sub>1</sub>, and there may be a symmetric case for when calling &#x192;<sub>2 </sub>is the only option. The interesting case is when T&#x2032;<img id="CUSTOM-CHARACTER-00019" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>i1 </sub>for both i=1 and 2. One possibility is that T<sub>11</sub>, T<sub>21 </sub>(i.e., T<sub>11</sub><img id="CUSTOM-CHARACTER-00020" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21 </sub>and T<sub>11</sub>&#x2260;T<sub>21</sub>) In this case, it may be preferable to call &#x192;<sub>1</sub>. A more technical justification is provided later, but the intuitive idea may be to coerce to the nearest available argument type. If T&#x2032;<img id="CUSTOM-CHARACTER-00021" he="2.46mm" wi="2.12mm" file="US08627282-20140107-P00003.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub><img id="CUSTOM-CHARACTER-00022" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00004.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>, then T<sub>21 </sub>may be &#x201c;farther&#x201d; from T&#x2032; than T<sub>11</sub>. Symmetrically, if T<sub>21</sub><img id="CUSTOM-CHARACTER-00023" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00005.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub>, then &#x192;<sub>2 </sub>may be called by function application. Otherwise, T<sub>11</sub>, T<sub>21 </sub>may be unordered (by definition, meaning that T<sub>11</sub><img id="CUSTOM-CHARACTER-00024" he="3.13mm" wi="1.78mm" file="US08627282-20140107-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21 </sub>and T<sub>21</sub><img id="CUSTOM-CHARACTER-00025" he="3.13mm" wi="1.78mm" file="US08627282-20140107-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub>) and it may not be clear what to do.</p>
<p id="p-0056" num="0057">However, suppose the type system required the following:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0058">For any T<sub>1 </sub>and T<sub>2</sub>, there exists a T<sub>0 </sub>such that:
        <ul id="ul0005" list-style="none">
            <li id="ul0005-0001" num="0059">T<sub>0</sub><img id="CUSTOM-CHARACTER-00026" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1 </sub>and T<sub>0</sub><img id="CUSTOM-CHARACTER-00027" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>.</li>
            <li id="ul0005-0002" num="0060">If T&#x2032;<sub>0</sub><img id="CUSTOM-CHARACTER-00028" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1 </sub>and T&#x2032;<sub>0</sub><img id="CUSTOM-CHARACTER-00029" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>, then T&#x2032;<sub>0</sub><img id="CUSTOM-CHARACTER-00030" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>0</sub>.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0057" num="0061">By a well-known lattice theoretic result, T<sub>0 </sub>is unique. T<sub>0 </sub>may be called the greatest lower bound (glb) of T<sub>1 </sub>and T<sub>2</sub>, and may be denoted with an operator that suggests intersection: T<sub>1</sub><img id="CUSTOM-CHARACTER-00031" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>. A partial ordering for which glb exists is said to be a semilattice-ordering. While the programming languages C and C++ do not have a notion of type glb, Java does have such a notion for some types.</p>
<p id="h-0010" num="0000">Constraints on Overloads</p>
<p id="p-0058" num="0062">Intersection and overloads of &#x192; are described in this section. Since T&#x2032;<img id="CUSTOM-CHARACTER-00032" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>i1 </sub>for i=1 and 2, we may conclude that T&#x2032;<img id="CUSTOM-CHARACTER-00033" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub><img id="CUSTOM-CHARACTER-00034" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>. Further, since T&#x2032;&#x2260;&#x22a5;, we conclude that T<sub>11</sub><img id="CUSTOM-CHARACTER-00035" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;. If &#x192;<sub>1 </sub>and &#x192;<sub>2 </sub>are the only overloads of &#x192;, then the set of overloads of &#x192; may be said to be incomplete. Even before encountering an application of a function that does not have a natural overload resolution, the programming language implementation may look at the two overloads of &#x192;, with unordered types having a non-&#x22a5; intersection, and issue a warning or error informing the user that there should be an overload whose correctness argument type T<sub>0 </sub>satisfies T<sub>11</sub><img id="CUSTOM-CHARACTER-00036" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub><img id="CUSTOM-CHARACTER-00037" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>0</sub>. By requiring such a property of overloads, subject to some extensions defined later, the programming language definition may guarantee that if applications do not have a type-fault, then they can be resolved. This may require that correctness types <b>160</b> have a glb operation.</p>
<p id="p-0059" num="0063">A few purely lattice-theoretic facts follow. The above definition of H guarantees that T<sub>1</sub><img id="CUSTOM-CHARACTER-00038" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2 </sub>if and only if T<sub>1</sub>=T<sub>1</sub><img id="CUSTOM-CHARACTER-00039" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>. (To gain some intuition here, think of E as set inclusion and H as set intersection.) The definition of <img id="CUSTOM-CHARACTER-00040" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>also guarantees that <img id="CUSTOM-CHARACTER-00041" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>is idempotent (T<img id="CUSTOM-CHARACTER-00042" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T=T), commutative (T<sub>1</sub><img id="CUSTOM-CHARACTER-00043" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>=T<sub>2</sub><img id="CUSTOM-CHARACTER-00044" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1</sub>), and associative ((T<sub>1</sub><img id="CUSTOM-CHARACTER-00045" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2</sub>)<img id="CUSTOM-CHARACTER-00046" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>3</sub>=T<sub>1</sub><img id="CUSTOM-CHARACTER-00047" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>2</sub><img id="CUSTOM-CHARACTER-00048" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>3</sub>)). A semilattice, by definition, is a set together with a function that is idempotent, commutative, and associative. For example, consider any semilattice S, denoting its function by <img id="CUSTOM-CHARACTER-00049" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>. Define a relation on S, denoted <img id="CUSTOM-CHARACTER-00050" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>, by the rule that s<sub>1</sub><img id="CUSTOM-CHARACTER-00051" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s<sub>2 </sub>if and only if s<sub>1</sub><img id="CUSTOM-CHARACTER-00052" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s<sub>1</sub><img id="CUSTOM-CHARACTER-00053" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s<sub>2</sub>. Then E is a partial ordering and <img id="CUSTOM-CHARACTER-00054" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> is its glb function. This fact will be useful, because it may provide two ways of looking at the same thing.</p>
<p id="h-0011" num="0000">Function Types</p>
<p id="p-0060" num="0064">Function types may be defined as types whose associated sets of values act as functions. Most type systems, even that for C, have some notion of function types. Given representation types <b>150</b> t<sub>1</sub>&#x2260;<smallcaps>NEVER </smallcaps>and t<sub>2</sub>, one may form the function representation type <b>150</b> from t<sub>1 </sub>to t<sub>2</sub>, whose set of values may be defined as the set of all functions taking an argument of type t<sub>1 </sub>and yielding a value of type t<sub>2</sub>. For example, in C, with t<sub>1</sub>=double and t<sub>2</sub>=single, the function type is written single (*) (double). Here, the notation double&#x2190;single is a function type for a function that takes an argument of type single and yields a result of type double, or generically, t<sub>2</sub>&#x2190;t<sub>1 </sub>is a function type for a function that takes an argument of type t<sub>1 </sub>and yields a result of type t<sub>2</sub>. Underneath, in both C and the notation here, a function type may be viewed as including a pair of types. (The type system may be assumed to be rich enough so that a single type can describe multiple arguments and results.)</p>
<p id="p-0061" num="0065">While the type system of C may be viewed as having an implicit coercion from single to double, the type system of C does not have any coercions <b>155</b> of its function types. Suppose, for example, we have function representation types <b>185</b> t<sub>2</sub>&#x2190;t<sub>1 </sub>and t&#x2032;<sub>2</sub>&#x2190;t&#x2032;<sub>1</sub>. In an embodiment of the invention, coercions <b>155</b> on function types may be defined to work as follows.</p>
<p id="p-0062" num="0066">The following addresses when is it true that (t<sub>2</sub>&#x2190;t<sub>1</sub>)&#x2266;(t&#x2032;<sub>2</sub>&#x2190;t&#x2032;<sub>1</sub>). Consider the example function &#x192;, which has type t<sub>1 </sub>as its argument type and t<sub>2 </sub>as its result type. More succinctly, &#x192; has representation type <b>150</b> t<sub>2</sub>&#x2190;t<sub>1</sub>. Let g be another function whose argument type is t&#x2032;<sub>2</sub>&#x2190;t&#x2032;<sub>1</sub>.</p>
<p id="p-0063" num="0067">The following addresses when the construct g(&#x192;) may be type-correct. Consider what g may do with its argument. For example, g may call the argument on a value of type t&#x2032;<sub>1</sub>. By definition, such a value would be a type-correct argument to &#x192; when t&#x2032;<sub>1</sub>&#x2266;t<sub>1</sub>. Similarly, consider what g does with the result of calling its argument &#x192;. For example, g may use the result of the call in a context expecting a value of type t&#x2032;<sub>2</sub>. This would be type-correct as long as t<sub>2</sub>&#x2266;t&#x2032;<sub>2</sub>. Thus:
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0000">
    <ul id="ul0007" list-style="none">
        <li id="ul0007-0001" num="0068">(t<sub>2</sub>&#x2190;t<sub>1</sub>)&#x2266;(t&#x2032;<sub>2</sub>&#x2190;t&#x2032;<sub>1</sub>) if and only if t<sub>2</sub>&#x2266;t&#x2032;<sub>2 </sub>and t&#x2032;<sub>1</sub>&#x2266;t<sub>1 </sub></li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0064" num="0069">The following addresses the coerced value that may be passed to g. Based on the above discussion, the coerced value would be: &#x3b3;<sub>t&#x2032;</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub>&#x2218;&#x192;&#x2218;&#x3b3;<sub>t</sub><sub><sub2>1</sub2></sub><sub>,t&#x2032;</sub><sub><sub2>1</sub2></sub>. In other words, &#x3b3;<sub>t&#x2032;</sub><sub><sub2>2</sub2></sub><sub>&#x2190;t&#x2032;</sub><sub><sub2>1</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub><sub>&#x2190;t</sub><sub><sub2>1 </sub2></sub>may be defined by the rule:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b3;<sub>t&#x2032;</sub><sub><sub2>2</sub2></sub><sub>&#x2190;t&#x2032;</sub><sub><sub2>1</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub><sub>&#x2190;t</sub><sub><sub2>1</sub2></sub>(&#x192;)=&#x3b3;<sub>t&#x2032;</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>2</sub2></sub>&#x2218;&#x192;&#x2218;&#x3b3;<sub>t</sub><sub><sub2>1</sub2></sub><sub>,t&#x2032;</sub><sub><sub2>1 </sub2></sub><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0065" num="0070">Note that the coercions <b>155</b> on the result types are in the same direction as that of the function types (it may be said to be covariant), but the coercion on the argument types is in the opposite direction from that on the function types (it may be said to be contravariant).</p>
<p id="h-0012" num="0000">Intersection of Function Types</p>
<p id="p-0066" num="0071">In an embodiment of the invention, correctness types <b>160</b> may likewise apply to everything previously mentioned above regarding representation types <b>150</b>:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0072">Given correctness types <b>160</b> T<sub>1</sub>&#x2260;&#x22a5; and T<sub>2</sub>, T<sub>2</sub>&#x2190;T, is a correctness function type.</li>
        <li id="ul0009-0002" num="0073">Given correctness types <b>160</b> T<sub>1</sub>, T<sub>2</sub>, T&#x2032;<sub>1</sub>, and T&#x2032;<sub>2</sub>, with T<sub>1</sub>&#x2260;&#x22a5;T&#x2032;<sub>1</sub>:
        <ul id="ul0010" list-style="none">
            <li id="ul0010-0001" num="0074">(T<sub>2</sub>&#x2190;T<sub>1</sub>)<img id="CUSTOM-CHARACTER-00055" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>(T&#x2032;<sub>2</sub>&#x2190;T&#x2032;<sub>1</sub>) if and only if T<sub>2</sub><img id="CUSTOM-CHARACTER-00056" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T&#x2032;<sub>2 </sub>and T&#x2032;<sub>1</sub><img id="CUSTOM-CHARACTER-00057" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1 </sub></li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0067" num="0075">The following addresses (T<sub>12</sub>&#x2190;T<sub>11</sub>)<img id="CUSTOM-CHARACTER-00058" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>22</sub>&#x2190;T<sub>21</sub>), given T<sub>i2</sub>&#x2190;T<sub>i1 </sub>for i=1 and 2. Because of contravariance, T<sub>12</sub><img id="CUSTOM-CHARACTER-00059" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>&#x2190;T<sub>11</sub><img id="CUSTOM-CHARACTER-00060" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21 </sub>may not provide a greatest lower bound for the ordering <img id="CUSTOM-CHARACTER-00061" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> on function types. The presence of contravariance might tempt one to require that the semilattice of correctness types <b>160</b> be a lattice, so it would have a union-like operator &#x2423;. With a union-like operator U, a suitable proposed definition of the above intersection may be T<sub>12</sub><img id="CUSTOM-CHARACTER-00062" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>&#x2190;(T<sub>11</sub>&#x2423;T<sub>21</sub>). This may fix the contravariance problem with greatest lower bound, but it is incorrect for semantic reasons. (Briefly, the problem is that while H always corresponds to logical conjunction, there are useful lattices in which U does not correspond to logical disjunction, so the use of U in the proposed definition may not be logically sound.)</p>
<p id="p-0068" num="0076">In sum, for example, let T<sub>1 </sub>and T<sub>2 </sub>be sets of correctness types <b>160</b>. These may be the same sets, T<sub>1 </sub>may be viewed as possible argument types, and T<sub>2 </sub>may be viewed as possible result types. As proposed, a candidate set of function types from T<sub>1 </sub>to T<sub>2 </sub>may be defined by F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>)=T<sub>2</sub>&#xd7;(T<sub>1</sub>&#x2212;&#x22a5;), where the following two facts may be observed:
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0077">There exists a partial ordering on F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) that is contravariant on the T<sub>1 </sub>component and covariant on the T<sub>2 </sub>component.</li>
        <li id="ul0012-0002" num="0078">F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) may not be semilattice-ordered even with additional constraints on T<sub>1</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0069" num="0079">A key to getting past the impasse of F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) not being semilattice-ordered even with additional constraints on T<sub>1 </sub>may be to inject F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) into a larger set, which may be denoted by F(T<sub>1</sub>, T<sub>2</sub>). A function may be defined on this set which may make it a semilattice. The function may be denoted by <img id="CUSTOM-CHARACTER-00063" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>, and the related partial ordering may be denoted by <img id="CUSTOM-CHARACTER-00064" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>. A key property:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0080">Let &#x3c4; be the injection from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to F(T<sub>1</sub>, T<sub>2</sub>). Then for T<sub>2</sub>&#x2190;T<sub>1 </sub>and T&#x2032;<sub>2</sub>&#x2190;T&#x2032;<sub>1 </sub>in F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>):
        <ul id="ul0015" list-style="none">
            <li id="ul0015-0001" num="0081">(T<sub>2</sub>&#x2190;T<sub>1</sub>)<img id="CUSTOM-CHARACTER-00065" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>(T&#x2032;<sub>2</sub>&#x2190;T&#x2032;<sub>1</sub>) if and only if &#x3c4;(T<sub>2</sub>&#x2190;T<sub>1</sub>)<img id="CUSTOM-CHARACTER-00066" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>&#x3c4;(T&#x2032;<sub>2</sub>&#x2190;T&#x2032;<sub>1</sub>)</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0070" num="0082">Intuitively, F(T<sub>1</sub>, T<sub>2</sub>) has a copy of F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) inside F(T<sub>1</sub>, T<sub>2</sub>), with the same ordering.</p>
<p id="p-0071" num="0083">The construction of F(T<sub>1</sub>, T<sub>2</sub>) is described in detail below. The construction may require several steps:
<ul id="ul0016" list-style="none">
    <li id="ul0016-0001" num="0000">
    <ul id="ul0017" list-style="none">
        <li id="ul0017-0001" num="0084">Use the partial ordering F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to construct a semilattice, denoted F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>).</li>
        <li id="ul0017-0002" num="0085">F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) may turn out to be too big for the set of function types, in that it may have different elements whose role as types may be identical. A particular equivalence relation &#x2248; may be defined on F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) that takes into account these equivalences. The set of partitions of this equivalence relation, denoted F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>)/&#x2248;, is also a semilattice.</li>
        <li id="ul0017-0003" num="0086">Providing an algorithm to compute the canonical form for elements of F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>)/&#x2248;. By definition, F(T<sub>1</sub>, T<sub>2</sub>) is the set of these canonical forms. Thus F(T<sub>1</sub>, T<sub>2</sub>) is isomorphic to F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>)/&#x2248;. The algorithm for canonical form may lead directly to an algorithm for computing <img id="CUSTOM-CHARACTER-00067" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> and indirectly to an algorithm for <img id="CUSTOM-CHARACTER-00068" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> on F(T<sub>1</sub>, T<sub>2</sub>). These algorithms may provide a practical implementation of function types.
<br/>
Intersection of Function Types, Step 1
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0072" num="0087">A universal semilattice over a partially ordered set P may be described, whose ordering may be denoted by <img id="CUSTOM-CHARACTER-00069" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>. A subset of P may be defined to be unordered if each pair of elements is unordered. The set of elements for the semilattice may be given by:
<ul id="ul0018" list-style="none">
    <li id="ul0018-0001" num="0000">
    <ul id="ul0019" list-style="none">
        <li id="ul0019-0001" num="0088">S={p<img id="CUSTOM-CHARACTER-00070" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P|p is finite, non-empty, and unordered}</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0073" num="0089">Let p={p<sub>1</sub>, . . . , p<sub>k</sub>}, where p may represent the symbolic expression p<sub>1</sub><img id="CUSTOM-CHARACTER-00071" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> . . . <img id="CUSTOM-CHARACTER-00072" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>k</sub>.
<ul id="ul0020" list-style="none">
    <li id="ul0020-0001" num="0000">
    <ul id="ul0021" list-style="none">
        <li id="ul0021-0001" num="0090">Given p<img id="CUSTOM-CHARACTER-00073" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>P, define the minimal elements of p, abbreviated mnl(p), to be {p&#x3b5;p|&#x2203;/p&#x2032;&#x3b5;p with p&#x2032;<img id="CUSTOM-CHARACTER-00074" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00005.TIF" alt="custom character" img-content="character" img-format="tif"/>p}.</li>
        <li id="ul0021-0002" num="0091">Given p<sub>1</sub>, p<sub>2</sub>&#x3b5;S, by definition p<sub>1</sub><img id="CUSTOM-CHARACTER-00075" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>=mnl(p<sub>1</sub>&#x2229;p<sub>2</sub>).</li>
        <li id="ul0021-0003" num="0092">For example, let p<sub>i</sub>={p<sub>i</sub>} for i=1 and 2, where p<sub>1</sub><img id="CUSTOM-CHARACTER-00076" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>. Then p<sub>1 </sub></li>
        <li id="ul0021-0004" num="0093"><img id="CUSTOM-CHARACTER-00077" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2 </sub>reduces to
        <ul id="ul0022" list-style="none">
            <li id="ul0022-0001" num="0094">mnl({p<sub>1</sub>}&#x222a;{p<sub>2</sub>})=mnl({p<sub>1</sub>, p<sub>2</sub>})={p<sub>1</sub>}&#x2018;=&#x2019;p<sub>1 </sub></li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0074" num="0095">This represents the symbolic equation p<sub>1</sub><img id="CUSTOM-CHARACTER-00078" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>=p<sub>1 </sub>when p<sub>1</sub><img id="CUSTOM-CHARACTER-00079" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>.</p>
<p id="p-0075" num="0096">S and <img id="CUSTOM-CHARACTER-00080" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> form a semilattice. The partial ordering associated with this semilattice has the following algorithmic characterization:
<ul id="ul0023" list-style="none">
    <li id="ul0023-0001" num="0000">
    <ul id="ul0024" list-style="none">
        <li id="ul0024-0001" num="0097">p<sub>1</sub><img id="CUSTOM-CHARACTER-00081" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2 </sub>if and only if for all p<sub>2</sub>&#x3b5;p<sub>2</sub>, there exists p<sub>1</sub>&#x3b5;p<sub>1 </sub>such that p<sub>1</sub><img id="CUSTOM-CHARACTER-00082" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0076" num="0098">There may be a natural way of injecting P into S, namely:
<ul id="ul0025" list-style="none">
    <li id="ul0025-0001" num="0000">
    <ul id="ul0026" list-style="none">
        <li id="ul0026-0001" num="0099">The map from P to S is given by defining &#x3c4;(p) to be {p}. It satisfies:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Equation one:<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i><sub>1</sub><img id="CUSTOM-CHARACTER-00083" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><i>p</i><sub>2 </sub>if and only if &#x3c4;(<i>p</i><sub>1</sub>)<img id="CUSTOM-CHARACTER-00084" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>p</i><sub>2</sub>)&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0077" num="0100"><figref idref="DRAWINGS">FIG. 5</figref> illustrates the algebraic characterization of a universal semilattice over a partially ordered set, using a mathematical technique known as a commutative diagram in an illustrative embodiment. The meaning of universal in this context is that if S&#x2032; <b>550</b> is any other semilattice such that there is an injection &#x3c4;&#x2032; <b>560</b> from P <b>510</b> to S&#x2032;<b>550</b> satisfying equation one (1) but with &#x3c4;&#x2032; <b>560</b> rather than &#x3c4;<b>520</b>, then there exists a unique map h <b>440</b> from S <b>530</b> to S&#x2032; <b>550</b> such that:
<ul id="ul0027" list-style="none">
    <li id="ul0027-0001" num="0000">
    <ul id="ul0028" list-style="none">
        <li id="ul0028-0001" num="0101">h(s<sub>1</sub><img id="CUSTOM-CHARACTER-00085" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s<sub>2</sub>)=h(s<sub>1</sub>)<img id="CUSTOM-CHARACTER-00086" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>h(s<sub>2</sub>)</li>
        <li id="ul0028-0002" num="0102">t&#x2032;=h&#x2218;t</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0078" num="0103">F(T<sub>1</sub>, T<sub>2</sub>) may be obtained by applying the above construction to the partially ordered set F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to create, for example, a semilattice.</p>
<p id="p-0079" num="0104">Questions may arise such as to what do the elements of F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) mean as correctness types <b>160</b> and what is the underlying set of representation types <b>150</b> that some &#x3c4; maps to F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>). For example, suppose that T<sub>11</sub>, T<sub>21</sub>&#x3b5;T<sub>1 </sub>are unordered and non-&#x22a5;, and let T<sub>12</sub>, T<sub>22</sub>&#x3b5;T<sub>2 </sub>be arbitrary. Then T<sub>12</sub>&#x2190;T<sub>11 </sub>and T<sub>22</sub>&#x2190;T<sub>21 </sub>are unordered, and:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Equation two:<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>{<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub><i>,T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub><i>}&#x3b5;F</i><sub>1</sub>(<i>T</i><sub>1</sub><i>,T</i><sub>2</sub>)&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0080" num="0105">For i=1 and 2, let &#x192;<sub>i </sub>be an overload of the function &#x192;, and suppose that these are the only overloads of &#x192;. Let the correctness type <b>160</b> of &#x192;<sub>i </sub>be T<sub>i2</sub>&#x2190;T<sub>i1</sub>, and suppose that T<sub>11</sub><img id="CUSTOM-CHARACTER-00087" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>=&#x22a5;, so this is a valid set of overloads. Since T<sub>i1</sub>&#x2260;&#x22a5; and T<sub>11</sub><img id="CUSTOM-CHARACTER-00088" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>=&#x22a5;, it follows that T<sub>11</sub>, T<sub>21 </sub>are unordered, so equation two (2) holds. This suggests what {T<sub>12</sub>&#x2190;T<sub>11</sub>, T<sub>22</sub>&#x2190;T<sub>21</sub>} means as a correctness type <b>160</b>: it is the type of the overall function &#x192;. For example:
<ul id="ul0029" list-style="none">
    <li id="ul0029-0001" num="0000">
    <ul id="ul0030" list-style="none">
        <li id="ul0030-0001" num="0106">It is valid to call &#x192; on a value whose correctness type <b>160</b> is T<sub>11</sub>, and in this case, the result has correctness type <b>160</b> T<sub>12</sub>; and</li>
        <li id="ul0030-0002" num="0107">it is valid to call &#x192; on a value whose correctness type <b>160</b> is T<sub>21</sub>, and in this case, the result has correctness type <b>160</b> T<sub>22</sub>.
<br/>
The C and C++ programming languages do not have function types of this kind.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0081" num="0108">The representation types <b>150</b> corresponding to the correctness types <b>160</b> of F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) may be understood by asking what function values look like. In the case where function &#x192; consists of overloads &#x192;<sub>1 </sub>and &#x192;<sub>2</sub>, a value representing &#x192; includes two pointers, one to &#x192;<sub>1 </sub>and one to &#x192;<sub>2</sub>. An implemented representation of such value would commit to the order in which &#x192;<sub>1 </sub>and &#x192;<sub>2 </sub>appear in the value. So, for t<sub>ij </sub>such that &#x3c4;t<sub>ij</sub>=T<sub>ij</sub>, here are some possible representation types <b>150</b> that correspond to {T<sub>12</sub>&#x2190;T<sub>11</sub>, T<sub>22</sub>&#x2190;T<sub>21</sub>}
<ul id="ul0031" list-style="none">
    <li id="ul0031-0001" num="0000">
    <ul id="ul0032" list-style="none">
        <li id="ul0032-0001" num="0109">&#x3c;T<sub>12</sub>&#x2190;T<sub>11</sub>, T<sub>22</sub>&#x2190;T<sub>21</sub>&#x3e; (describes the pair &#x192;<sub>1</sub>, &#x192;<sub>2</sub>)</li>
        <li id="ul0032-0002" num="0110">&#x3c;T<sub>22</sub>&#x2190;T<sub>21</sub>, T<sub>12</sub>&#x2190;T<sub>11</sub>&#x3e; (describes the pair &#x192;<sub>2</sub>,&#x192;<sub>1</sub>)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0082" num="0111">Note that such values may be passed as arguments and results, incorporated into data structures, etc.</p>
<p id="h-0013" num="0000">Intersection of Function Types Step 2</p>
<p id="p-0083" num="0112">With this understanding of function representation types <b>150</b> and their corresponding values, we turn to the previous statement that F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) is too big. The technical statement behind this remark may be that correctness function types should characterize an overall function. For reasons detailed below, F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) may be constructed so that the following equality holds whenever T<sub>11</sub><img id="CUSTOM-CHARACTER-00089" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Equation three:<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00090" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)=(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00091" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)<img id="CUSTOM-CHARACTER-00092" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>((<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>22</sub>)&#x2190;(<i>T</i><sub>11</sub><i>&#x2266;T</i><sub>21</sub>))&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0084" num="0113">To explain why equation three (3) should hold, suppose, for example, that the function g takes a function argument &#x192; and that g has two call sites off, the i<sup>th </sup>site having an argument whose correctness type <b>160</b> is T<sub>i1 </sub>and requires that the result has correctness type <b>160</b> T<sub>i2</sub>. Let T be the correctness type <b>160</b> of &#x192;. Since &#x192; can be used at call site i, it may be plausible that where the correctness type <b>160</b> is effectively T<sub>i2</sub>&#x2190;T<sub>i1</sub>, that &#x192; is coercible to a value of this type, i.e., that T<img id="CUSTOM-CHARACTER-00093" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>i2</sub>&#x2190;T<sub>i1 </sub>for i=1 and 2. In a semilattice, this is equivalent to:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Equation four:<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i><img id="CUSTOM-CHARACTER-00094" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00095" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0085" num="0114">Conversely, if T obeys this inequality, then the type-correctness of the call sites in g may be guaranteed. Given that T is the type of &#x192;, equation four (4) may be the condition for the type-correctness of the construct g(&#x192;), under the assumption that the type of the argument of g is (T<sub>12</sub>&#x2190;T<sub>11</sub>)<img id="CUSTOM-CHARACTER-00096" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>22</sub>&#x2190;T<sub>21</sub>).</p>
<p id="p-0086" num="0115">Suppose that a function &#x192; has overloads for i=1 and 2, and that &#x192;<sub>i </sub>has correctness type <b>160</b> T<sub>i2</sub>&#x2190;T<sub>i1</sub>. Since T<sub>11</sub><img id="CUSTOM-CHARACTER-00097" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;, &#x192; should also have a third overload, whose correctness argument type is T<sub>11</sub><img id="CUSTOM-CHARACTER-00098" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>. Let the correctness result type of this overload be T<sub>02</sub>, so the overload has correctness function type T<sub>02</sub>&#x2190;T<sub>11</sub><img id="CUSTOM-CHARACTER-00099" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>. Since this overload of &#x192; may be called at either site of the argument of g, type-correctness requires T<sub>02</sub><img id="CUSTOM-CHARACTER-00100" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>i2</sub>, for i=1 and 2, or equivalently, T<sub>02</sub><img id="CUSTOM-CHARACTER-00101" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>12</sub><img id="CUSTOM-CHARACTER-00102" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>. This may be formalized by strengthening the constraint on overloads to include this rule on the result type, but weakening the constraint on the argument type:
<ul id="ul0033" list-style="none">
    <li id="ul0033-0001" num="0000">
    <ul id="ul0034" list-style="none">
        <li id="ul0034-0001" num="0116">If there are overloads of the same function with correctness types <b>160</b> T<sub>i2</sub>&#x2190;T<sub>i1 </sub>for i=1 and 2, and if T<sub>11</sub><img id="CUSTOM-CHARACTER-00103" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;, then there must be an overload of the function with argument type T<sub>01 </sub>such that T<sub>11</sub><img id="CUSTOM-CHARACTER-00104" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub><img id="CUSTOM-CHARACTER-00105" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>01 </sub>and result type T<sub>02 </sub>such that T<sub>02</sub><img id="CUSTOM-CHARACTER-00106" he="3.13mm" wi="1.78mm" file="US08627282-20140107-P00002.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>12</sub><img id="CUSTOM-CHARACTER-00107" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0087" num="0117">Given the above, consider a function h which has two call sites of its argument with the same characteristics as those of g, but also has a third call site of its argument with correctness argument type T<sub>11</sub><img id="CUSTOM-CHARACTER-00108" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21 </sub>and correctness result type T<sub>12</sub><img id="CUSTOM-CHARACTER-00109" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>. As with g, the correctness argument type of g is:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Equation five:<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00110" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)<img id="CUSTOM-CHARACTER-00111" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>((<i>T</i><sub>12</sub><img id="CUSTOM-CHARACTER-00112" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>22</sub>)&#x2190;(<i>T</i><sub>11</sub><img id="CUSTOM-CHARACTER-00113" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>21</sub>))&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0088" num="0118">Then &#x192; is also a type-correct argument to h. Thus, any type-correct argument to g may be a type-correct argument to h. The converse holds (g has a subset of the call site characteristics of those of h). As such, the intersection type in equation five (5) and the right-hand side of equation four (4) are the same. This equality is what explains equation three (3).</p>
<p id="h-0014" num="0000">Intersection of Function Types, Step 3</p>
<p id="p-0089" num="0119">Mathematically, F(T<sub>1</sub>, T<sub>2</sub>) may be defined to be F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) modulo the equivalence relation given by equation three (3). It is not clear a priori that such a semilattice exists. An algorithmic construction of such a semilattice may be used to imply the existence of such a semilattice. A step in the construction of the semilattice may be an algorithm for computing the canonical representation of elements. For example:
<ul id="ul0035" list-style="none">
    <li id="ul0035-0001" num="0000">
    <ul id="ul0036" list-style="none">
        <li id="ul0036-0001" num="0120">Let p&#x3b5;F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>), and let &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e;&#x3b5;p for i=1 and 2, and define p&#x2032; to be p&#x2212;&#x3c;T<sub>12</sub>, T<sub>11</sub>&#x3e;&#x2212;&#x3c;T<sub>22</sub>, T<sub>21</sub>&#x3e;. Then by the construction of F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p=p&#x2032;</i><img id="CUSTOM-CHARACTER-00114" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00115" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0036-0002" num="0121">Suppose T<sub>11</sub><img id="CUSTOM-CHARACTER-00116" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;. Then by equation three (3):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p=p</i>&#x2032;(<i>T</i><sub>12</sub><i>&#x2190;T</i><sub>11</sub>)<img id="CUSTOM-CHARACTER-00117" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(<i>T</i><sub>22</sub><i>&#x2190;T</i><sub>21</sub>)<img id="CUSTOM-CHARACTER-00118" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>((<i>T</i><sub>12</sub><img id="CUSTOM-CHARACTER-00119" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>22</sub>)&#x2190;(<i>T</i><sub>11</sub><img id="CUSTOM-CHARACTER-00120" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>21</sub>))<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
        <li id="ul0036-0003" num="0122">Undoing the liberties with notation and using the algorithm for <img id="CUSTOM-CHARACTER-00121" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> in F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>):
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>&#x2248;mnl(<i>p&#x2032;&#x222a;{&#x3c;T</i><sub>12</sub><i>,T</i><sub>11</sub><i>&#x3e;,&#x3c;T</i><sub>22</sub><i>,T</i><sub>21</sub><i>&#x3e;,&#x3c;T</i><sub>12</sub><img id="CUSTOM-CHARACTER-00122" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>22</sub><i>,T</i><sub>11</sub><img id="CUSTOM-CHARACTER-00123" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>21</sub>&#x3e;})=mnl(<i>p+&#x3c;T</i><sub>12</sub><img id="CUSTOM-CHARACTER-00124" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>22</sub><i>,T</i><sub>11</sub><img id="CUSTOM-CHARACTER-00125" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><i>T</i><sub>21</sub>&#x3e;)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0090" num="0123">It may be possible for the final set here to be exactly the same as S, and if this is so for every possible pair &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e;&#x3b5;S, then S is said to be in function semilattice canonical form. More algorithmically, we use the next definition, which then leads to a definition of F(T<sub>1</sub>, T<sub>2</sub>):
<ul id="ul0037" list-style="none">
    <li id="ul0037-0001" num="0000">
    <ul id="ul0038" list-style="none">
        <li id="ul0038-0001" num="0124">p&#x3b5;F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) is said to be in canonical form when for every pair of elements &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e; in p, for i=1 and 2, either T<sub>11</sub><img id="CUSTOM-CHARACTER-00126" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>=&#x2014;or there exists &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;p such that T<sub>2</sub>&#x2190;T<sub>1</sub><img id="CUSTOM-CHARACTER-00127" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>12</sub><img id="CUSTOM-CHARACTER-00128" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>)&#x2190;(T<sub>11</sub><img id="CUSTOM-CHARACTER-00129" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>).</li>
        <li id="ul0038-0002" num="0125">By definition, F(T<sub>1</sub>, T<sub>2</sub>)={p&#x3b5;F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>)|p is in canonical form}.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0091" num="0126">An algorithm to compute the canonical form, called the function semilattice reduction algorithm follows:
<ul id="ul0039" list-style="none">
    <li id="ul0039-0001" num="0000">
    <ul id="ul0040" list-style="none">
        <li id="ul0040-0001" num="0127">canonicalize(p&#x3b5;F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>))&#x2192;F(T<sub>1</sub>, T<sub>2</sub>)</li>
        <li id="ul0040-0002" num="0128">While &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e; for i=1 and 2 is a counter-example to canonical form: &#x2014;Set p to mnl(p+&#x3c;T<sub>12</sub><img id="CUSTOM-CHARACTER-00130" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>, T<sub>11</sub><img id="CUSTOM-CHARACTER-00131" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x3e;).</li>
        <li id="ul0040-0003" num="0129">Return p as the final result.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0092" num="0130"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example flowchart <b>600</b> describing a counter example to canonical form performed in programming environment <b>100</b> in an illustrative embodiment. In block <b>620</b>, execution of the counter-example-to-canonical-form function may begin. The counter-example-to-canonical-form function may accept p as a parameter and may return no-counter-example-found or a pair of elements.</p>
<p id="p-0093" num="0131">In block <b>630</b>, a pair of elements of p may be examined. If all the elements of p have been examined, the function may return no-counter-example-found and flow may end at <b>690</b>. If a pair of elements of p remains to be examined, flow may continue.</p>
<p id="p-0094" num="0132">In block <b>640</b>, the pair of elements to be examined may be defined as &#x3c;T<sub>12</sub>, T<sub>11</sub>&#x3e;, &#x3c;T<sub>22</sub>, T<sub>21</sub>&#x3e;. T<sub>1 </sub>may be defined as T<sub>11</sub><img id="CUSTOM-CHARACTER-00132" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>.</p>
<p id="p-0095" num="0133">In block <b>650</b>, a check may be performed to determine whether T<sub>1 </sub>is equal to the bottom element &#x22a5;, then flow may move back to <b>630</b>. If T<sub>1 </sub>is not equal to the bottom element &#x22a5;, then flow may continue.</p>
<p id="p-0096" num="0134">In block <b>660</b>, T<sub>2 </sub>may be defined as T<sub>12</sub><img id="CUSTOM-CHARACTER-00133" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>.</p>
<p id="p-0097" num="0135">In block <b>670</b>, a check may be performed to determine whether a &#x3c;T&#x2032;<sub>2</sub>, T&#x2032;<sub>1</sub>&#x3e; exists in p such that T&#x2032;<sub>2</sub><img id="CUSTOM-CHARACTER-00134" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2 </sub>and T<sub>1</sub><img id="CUSTOM-CHARACTER-00135" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T&#x2032;<sub>1</sub>, if so, then flow may move back to <b>630</b>. If a &#x3c;T&#x2032;<sub>2</sub>, T&#x2032;<sub>1</sub>&#x3e; does not exist in p such that T&#x2032;<sub>2</sub><img id="CUSTOM-CHARACTER-00136" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>2 </sub>and T<sub>1</sub><img id="CUSTOM-CHARACTER-00137" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T&#x2032;<sub>1</sub>, then flow may continue.</p>
<p id="p-0098" num="0136">In block <b>680</b>, the function may return &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e; and flow may move to <b>690</b> and end.</p>
<p id="p-0099" num="0137">It may be proved that (a) this algorithm always terminates, and (b) the final result is independent of arbitrary choices made for &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e;. Neither fact is obvious, and the proofs are omitted here because the proofs are not necessary to practice an embodiment of the invention.</p>
<p id="p-0100" num="0138"><figref idref="DRAWINGS">FIG. 7</figref> illustrates an example flowchart <b>700</b> describing an adjoin-element function performed in programming environment <b>100</b> in an illustrative embodiment. In block <b>720</b>, execution of the adjoin-element function may begin. The adjoin-element function may accept p and a pair of elements as parameters and may return a modified p.</p>
<p id="p-0101" num="0139">In block <b>730</b>, p may be examined. A check may be performed to determined whether all of the elements in p have been examined, if so then &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e; may be added to p and the modified p may be returned and flow may move to <b>770</b> and end. If not all of the elements in p have been examined, then a pair of elements may be selected and flow may continue.</p>
<p id="p-0102" num="0140">In block <b>740</b>, the selected pair of elements may be defined as &#x3c;T&#x2032;<sub>2</sub>, T&#x2032;I&#x3e;.</p>
<p id="p-0103" num="0141">In block <b>750</b>, a check may be performed to determine whether T<sub>2</sub><img id="CUSTOM-CHARACTER-00138" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T&#x2032;<sub>2 </sub>and T&#x2032;<sub>1</sub><img id="CUSTOM-CHARACTER-00139" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1</sub>, if so, remove &#x3c;T&#x2032;<sub>2</sub>, T&#x2032;<sub>1</sub>&#x3e; from p.</p>
<p id="p-0104" num="0142">In block <b>760</b>, flow may move back to <b>730</b>.</p>
<p id="p-0105" num="0143"><figref idref="DRAWINGS">FIG. 8</figref> illustrates an example flowchart describing canonicalize function performed in programming environment <b>100</b> in an illustrative embodiment. In block <b>820</b>, execution of the canonicalize function may begin. The canonicalize function may accept p as a parameter and may return a modified p.</p>
<p id="p-0106" num="0144">In block <b>830</b>, x may be the result of calling counter-example-to-canonical-form <b>600</b> with p as a parameter.</p>
<p id="p-0107" num="0145">In block <b>840</b>, x may be examined. A check may be performed to determine whether x is equal to no-counter-example-found, if so, then p should be returned and flow may move to <b>890</b> and end. If x is not equal to no-counter-example-found then flow may continue.</p>
<p id="p-0108" num="0146">In block <b>850</b>, the value x may have the form &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;. The value p may be set equal to adjoin-element <b>600</b> with the parameters p and &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;.</p>
<p id="p-0109" num="0147">In block <b>860</b>, flow may move to <b>830</b>.</p>
<p id="p-0110" num="0148">The definition of F(T<sub>1</sub>, T<sub>2</sub>) makes it clear that F(T<sub>1</sub>, T<sub>2</sub>) <img id="CUSTOM-CHARACTER-00140" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>). The semilattice operation defined in F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) by <img id="CUSTOM-CHARACTER-00141" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1 </sub>and its partial ordering may be denoted by <img id="CUSTOM-CHARACTER-00142" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>. This notation may be used in the implementation of the semilattice and associated partial ordering on F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>), using <img id="CUSTOM-CHARACTER-00143" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> and <img id="CUSTOM-CHARACTER-00144" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>. The algorithms for the semilattice (all p<sub>i</sub>&#x3b5;F(T<sub>1</sub>, T<sub>2</sub>)):</p>
<p id="p-0111" num="0149"><img id="CUSTOM-CHARACTER-00145" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> takes (p<sub>1</sub>, p<sub>2</sub>) as arguments and returns p<sub>0 </sub>as a result:
<ul id="ul0041" list-style="none">
    <li id="ul0041-0001" num="0000">
    <ul id="ul0042" list-style="none">
        <li id="ul0042-0001" num="0150">Return canonicalize(p<sub>1</sub><img id="CUSTOM-CHARACTER-00146" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>p<sub>2</sub>).</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0112" num="0151"><img id="CUSTOM-CHARACTER-00147" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> takes (p<sub>1</sub>, p<sub>2</sub>) and returns false or true as a result
<ul id="ul0043" list-style="none">
    <li id="ul0043-0001" num="0000">
    <ul id="ul0044" list-style="none">
        <li id="ul0044-0001" num="0152">Return p<sub>1</sub><img id="CUSTOM-CHARACTER-00148" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0113" num="0153"><figref idref="DRAWINGS">FIG. 9</figref> illustrates an example flowchart <b>900</b> describing the process for greatest lower bound <img id="CUSTOM-CHARACTER-00149" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> performed in programming environment <b>100</b> in an illustrative embodiment. In block <b>920</b>, execution of the H function may begin. The <img id="CUSTOM-CHARACTER-00150" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> function may accept p<sub>1 </sub>and p<sub>2 </sub>as parameters and return p<sub>0</sub>.</p>
<p id="p-0114" num="0154">In block <b>930</b>, the value p<sub>0 </sub>may be defined as mnl(p<sub>1</sub>&#x222a;p<sub>2</sub>). Based on the discussion above, p<sub>1</sub><img id="CUSTOM-CHARACTER-00151" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>p<sub>2</sub>=mnl(p<sub>1</sub>&#x222a;p<sub>2</sub>).</p>
<p id="p-0115" num="0155">In block <b>940</b>, p<sub>0 </sub>may be defined to be canonicalize(p<sub>0</sub>) as in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0116" num="0156">In block <b>950</b>, p<sub>0 </sub>may be returned and flow may end at <b>960</b>.</p>
<p id="p-0117" num="0157"><figref idref="DRAWINGS">FIG. 10</figref> illustrates an example flowchart <b>1000</b> describing the process for a lattice operator less-than-or-equal-to <img id="CUSTOM-CHARACTER-00152" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> function performed in programming environment <b>100</b> in an illustrative embodiment. In block <b>1020</b>, execution of the <img id="CUSTOM-CHARACTER-00153" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> function may begin. The <img id="CUSTOM-CHARACTER-00154" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> function may accept p<sub>1 </sub>and p<sub>2 </sub>as parameters and return either true or false.</p>
<p id="p-0118" num="0158">In block <b>1030</b>, p<sub>2 </sub>may be examined. A check may be performed to determined whether all elements of p<sub>2 </sub>have been examined, if so, then the function may return true, and flow may move to <b>1070</b> and end. If not all elements of p<sub>2 </sub>have been examined, then an element from p<sub>2 </sub>may be selected that has not yet been examined and flow may continue.</p>
<p id="p-0119" num="0159">In block <b>1040</b>, the selected element of p<sub>2 </sub>may be defined as &#x3c;T<sub>22</sub>, T<sub>21</sub>&#x3e;.</p>
<p id="p-0120" num="0160">In block <b>1050</b>, p<sub>1 </sub>may be examined. A check may be performed to determine whether there is no element &#x3c;T<sub>12</sub>, T<sub>11</sub>&#x3e; such that T<sub>12</sub><img id="CUSTOM-CHARACTER-00155" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22 </sub>and T<sub>21</sub><img id="CUSTOM-CHARACTER-00156" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub>, if so, then return false, and flow may move to <b>1070</b> and end. If there is an element &#x3c;T<sub>12</sub>, T<sub>11</sub>&#x3e; such that T<sub>12</sub><img id="CUSTOM-CHARACTER-00157" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22 </sub>and T<sub>21</sub><img id="CUSTOM-CHARACTER-00158" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>11</sub>, then flow may continue.</p>
<p id="p-0121" num="0161">In block <b>1060</b>, flow may move back to <b>1030</b>.</p>
<p id="p-0122" num="0162">The idempotency and commutativity of H follow from the same properties of <img id="CUSTOM-CHARACTER-00159" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>, but the following are not obvious (and the proofs are omitted):
<ul id="ul0045" list-style="none">
    <li id="ul0045-0001" num="0000">
    <ul id="ul0046" list-style="none">
        <li id="ul0046-0001" num="0163"><img id="CUSTOM-CHARACTER-00160" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> is associative and is the glb for <img id="CUSTOM-CHARACTER-00161" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>.</li>
        <li id="ul0046-0002" num="0164"><img id="CUSTOM-CHARACTER-00162" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> coincides with <img id="CUSTOM-CHARACTER-00163" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1 </sub>on F(T<sub>1</sub>, T<sub>2</sub>).</li>
        <li id="ul0046-0003" num="0165">For all p<sub>1</sub>, p<sub>2</sub>&#x3b5;F(T<sub>1</sub>, T<sub>2</sub>):
        <ul id="ul0047" list-style="none">
            <li id="ul0047-0001" num="0166">canonicalize(p<sub>1</sub><img id="CUSTOM-CHARACTER-00164" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>p<sub>2</sub>)=canonicalize(p<sub>1</sub>) <img id="CUSTOM-CHARACTER-00165" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>canonicalize(p<sub>2</sub>)</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0123" num="0167">Another (and also non-obvious and not proved here) property of this construction requires a preliminary definition.
<ul id="ul0048" list-style="none">
    <li id="ul0048-0001" num="0000">
    <ul id="ul0049" list-style="none">
        <li id="ul0049-0001" num="0168">Let S be any lattice, and let &#x3ba; be a map from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to S. For clarity, the operator and ordering on S may be denoted as <img id="CUSTOM-CHARACTER-00166" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s </sub>and <img id="CUSTOM-CHARACTER-00167" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>. Viewing F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) as a partially ordered set in the usual way, &#x3ba; may be referred to as compliant (i.e., with equation three (3)) when it satisfies these conditions:
        <ul id="ul0050" list-style="none">
            <li id="ul0050-0001" num="0169">If &#x3c;T<sub>12</sub>, T<sub>11</sub>&#x3e;<img id="CUSTOM-CHARACTER-00168" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>&#x3c;T<sub>22</sub>, T<sub>21</sub>&#x3e;, then &#x3ba;(T<sub>11</sub>, T<sub>12</sub>) <img id="CUSTOM-CHARACTER-00169" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>&#x3ba;(T<sub>21</sub>, T<sub>22</sub>).</li>
            <li id="ul0050-0002" num="0170">For all &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e;&#x3b5;F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>), for i=1 and 2, with T<sub>11</sub><img id="CUSTOM-CHARACTER-00170" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>T<sub>12</sub>&#x2260;&#x22a5;:
            <ul id="ul0051" list-style="none">
                <li id="ul0051-0001" num="0171">&#x3ba;(T<sub>11</sub>, T<sub>12</sub>) <img id="CUSTOM-CHARACTER-00171" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>&#x3ba;(T<sub>21</sub>, T<sub>22</sub>)=&#x3ba;(T<sub>11</sub>, T<sub>12</sub>) <img id="CUSTOM-CHARACTER-00172" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>&#x3ba;(T<sub>21</sub>, T<sub>22</sub>)<img id="CUSTOM-CHARACTER-00173" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>&#x3ba;(T<sub>12</sub><img id="CUSTOM-CHARACTER-00174" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>2</sub>T<sub>22</sub>, T<sub>11</sub><img id="CUSTOM-CHARACTER-00175" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>T<sub>12</sub>)</li>
            </ul>
            </li>
        </ul>
        </li>
        <li id="ul0049-0002" num="0172">Define &#x3ba;<sub>F </sub>from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to F(T<sub>1</sub>, T<sub>2</sub>) by &#x3ba;(T<sub>1</sub>, T<sub>2</sub>)={&#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;}. Then &#x3ba;<sub>F </sub>is compliant, and if S is any semilattice and there is a compliant &#x3ba; from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) to S, then there exists a unique h such that:
        <ul id="ul0052" list-style="none">
            <li id="ul0052-0001" num="0173">For all p<sub>1</sub>, p<sub>2</sub>&#x3b5;F(T<sub>1</sub>, T<sub>2</sub>), h(p<sub>1</sub><img id="CUSTOM-CHARACTER-00176" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>)=h(p<sub>1</sub>)<img id="CUSTOM-CHARACTER-00177" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>h(p<sub>2</sub>).</li>
            <li id="ul0052-0002" num="0174">&#x3ba;=h&#x2218;&#x3ba;<sub>F</sub>.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0124" num="0175"><figref idref="DRAWINGS">FIG. 11</figref> illustrates an algebraic characterization of a universal function semilattice over a compliant map using a mathematical technique known as a commutative diagram. <figref idref="DRAWINGS">FIG. 11</figref> includes semilattices F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) <b>1110</b> and F(T<sub>1</sub>, T<sub>2</sub>) <b>1140</b>, semilattice S <b>1160</b>, and maps h <b>1150</b>, &#x3ba; <b>1130</b> and &#x3ba;<sub>F </sub><b>1120</b>. The meaning of universal in this context is that if S <b>1160</b> is any other semilattice such that there is an injection &#x3ba; <b>1130</b> from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) <b>1110</b> to S <b>1160</b> instead of &#x3ba;<sub>F </sub><b>1120</b> from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) <b>1110</b> to F(T<sub>1</sub>, T<sub>2</sub>) <b>1140</b>, then there exists a unique map h <b>1150</b> from F(T<sub>1</sub>, T<sub>2</sub>) <b>1140</b> to S <b>1160</b> such that:
<ul id="ul0053" list-style="none">
    <li id="ul0053-0001" num="0000">
    <ul id="ul0054" list-style="none">
        <li id="ul0054-0001" num="0176">For all p<sub>1</sub>, p<sub>2</sub>&#x3b5;F(T<sub>1</sub>, T<sub>2</sub>), h(p<sub>1</sub><img id="CUSTOM-CHARACTER-00178" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>p<sub>2</sub>)=h(p<sub>1</sub>) <img id="CUSTOM-CHARACTER-00179" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>s</sub>h(p<sub>2</sub>)</li>
        <li id="ul0054-0002" num="0177">&#x3ba;=h&#x2218;&#x3ba;<sub>F </sub>
<br/>
By definition, a function semilattice <b>130</b> over a pair of semilattices T<sub>1</sub>, T<sub>2 </sub>is a set S&#x2032; that is in 1-1 correspondence with F(T<sub>1</sub>, T<sub>2</sub>), and which thus supports a function from F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>) that is equivalent to &#x3ba;<sub>F</sub>, and a glb operations that is equivalent to glb on F(T<sub>1</sub>, T<sub>2</sub>).
<br/>
Intersection of Function Types Summary
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0125" num="0178">In an embodiment of the invention, start with two sets of representation types <b>150</b> T<sub>1 </sub>and T<sub>2</sub>, and associated coercions <b>155</b>, as described above. Also as described above, obtain sets of correctness types <b>160</b> T<sub>1 </sub>and T<sub>2</sub>. Initial consideration of overload resolution <b>180</b> may lead to requiring that the T<sub>i </sub>may be semilattice-ordered. Denote the intersection operator on T<sub>i </sub>by <img id="CUSTOM-CHARACTER-00180" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>i</sub>. The ability to always and unambiguously chose an overload to invoke when there is no apparent type-fault may lead to requirements that the set of overloads must obey certain constraints related to <img id="CUSTOM-CHARACTER-00181" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>. These constraints may then lead to a definition of a set of correctness types <b>160</b> F(T<sub>1</sub>, T<sub>2</sub>) and a semilattice operation on them, which may be denoted <img id="CUSTOM-CHARACTER-00182" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>. This construction may describe function types from T<sub>1 </sub>to T<sub>2</sub>.</p>
<p id="p-0126" num="0179">In another embodiment of the invention, the partially ordered set that corresponds to the above semilattice is isomorphic to the set of equivalence classes of a certain quasi-ordering whose elements may be viewed as representation types <b>150</b> of functions from T<sub>1 </sub>to T<sub>2</sub>, where each function value is represented by a list of overloads, and where coercion is defined by composition of overloads with coercion of the argument (before the call on the overload) and of the result (after the call on the overload).</p>
<p id="h-0015" num="0000">Using the Canonical Form of Correctness Types to Reformulate the Constraint on Overload Arguments</p>
<p id="p-0127" num="0180">The above description introduced the use of the intersection of types to address overload resolution. The above description also suggested a constraint on the correctness types <b>160</b> of overload arguments to avoid type-faults, provided only that the types of the overload argument types cover the type of an argument at a call site. Because this constraint may use the intersection of types and because it may be desirable to have an overload resolution rule that works for all functions, including those with function arguments, the type system of this invention defines the intersection of function types. This culminates in the construction of a particular semilattice given semilattices for correctness argument types and result types. An element of this construction is a canonical form for elements of the semilattice.</p>
<p id="p-0128" num="0181">In another embodiment of the invention, the canonical form of correctness types <b>160</b> may be used to reformulate the constraint on overload arguments. This constraint may have an advantage that in certain circumstances, for example, it may reduce the number of overloads that must be defined. However, one consequence is that the constraint may align the behavior of the correctness type <b>160</b> of the overall function with the representation types <b>150</b> of the overloads. As such, analysis based on the correctness types <b>160</b> of functions reflects what happens in the overloads.</p>
<p id="p-0129" num="0182">The constraints assume a function &#x192; with overloads &#x192;<sub>1</sub>, . . . , &#x192;<sub>k</sub>, k&#x3e;0, where &#x192; has the function representation type <b>150</b> t<sub>i2</sub>&#x2190;t<sub>I1</sub>, i.e., the argument representation type <b>150</b> is t<sub>i1 </sub>(t<sub>i1</sub>&#x2260;<smallcaps>NEVER</smallcaps>) and the result representation type <b>150</b> is t<sub>i2</sub>. For convenience, T<sub>ij </sub>may be defined to be &#x3c4;t<sub>ij</sub>, for i=1, . . . , k and j=1 or 2. The constraints, with suggestive names:
<ul id="ul0055" list-style="none">
    <li id="ul0055-0001" num="0000">
    <ul id="ul0056" list-style="none">
        <li id="ul0056-0001" num="0183">Argument Representation Type Distinctness If i<sub>1</sub>&#x2260;i<sub>2</sub>, then &#x3c4;t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub>&#x2260;t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>. In other words, the set {&#x3c;t<sub>i2</sub>, t<sub>i1</sub>&#x3e;}<sub>i=1, . . . , k </sub>has distinct second components.</li>
        <li id="ul0056-0002" num="0184">Argument Correctness Type Distinctness If t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub>=t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>, then t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub>=t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2</sub>. In other words, the set {&#x3c;t<sub>i2</sub>, t<sub>i1</sub>&#x3e;}<sub>i=1, . . . , k </sub>has distinct second components.</li>
        <li id="ul0056-0003" num="0185">No Missing Overloads If t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub>, t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1 </sub>are unordered and t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00183" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>&#x2260;&#x22a5;, then there exists i such that t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00184" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00185" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i1 </sub>and t<sub>i2</sub><img id="CUSTOM-CHARACTER-00186" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00187" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2</sub>.</li>
        <li id="ul0056-0004" num="0186">Consistent Coercibility If t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00188" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00005.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>, then t<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00189" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00005.TIF" alt="custom character" img-content="character" img-format="tif"/>t<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0130" num="0187">In another embodiment of the invention, define T<sub>&#x192; </sub>to be mnl{&#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e;}<sub>i=1, . . . k</sub>. From the definition of F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>) as having elements that are unordered sets, it follows that T<sub>&#x192;</sub>&#x3b5;F<sub>1</sub>(T<sub>1</sub>, T<sub>2</sub>). Less obviously, if the above constraints are met, then T<sub>&#x192;</sub>&#x3b5;F(T<sub>1</sub>, T<sub>2</sub>). In other words, T<sub>&#x192;</sub> is in canonical form, or that canonicalize(T<sub>&#x192;</sub>)=T<sub>&#x192;</sub>. Thus, T<sub>&#x192;</sub> is the correctness type <b>160</b> of f. Choosing a representation type <b>150</b> of &#x192; involves picking an order for the overloads. If that order is 1, . . . , k, then t<sub>&#x192;</sub>=&#x3c;&#x3c;t<sub>12</sub>, t<sub>11</sub>&#x3e;, . . . , &#x3c;t<sub>k2</sub>, t<sub>k1</sub>&#x3e;&#x3e; is the representation type <b>150</b>. This leads to:
<ul id="ul0057" list-style="none">
    <li id="ul0057-0001" num="0000">
    <ul id="ul0058" list-style="none">
        <li id="ul0058-0001" num="0188">Given sets of representation types <b>150</b> T<sub>i </sub>and maps &#x3c4;<sub>i </sub>to sets of correctness types <b>160</b> T<sub>i</sub>, for i=1 and 2, a non-empty sequence &#x3c;&#x3c;t<sub>i2</sub>, t<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k </sub>may be defined to be an admissible function representation type <b>185</b> when it obeys the constraints on overloads (which are stated, after all, using only T<sub>i</sub>, &#x3c4;<sub>i</sub>, T<sub>1</sub>).</li>
        <li id="ul0058-0002" num="0189">With the same notation, the set of function representation types <b>150</b> from T<sub>1</sub>, &#x3c4;<sub>1</sub>, T<sub>1 </sub>to T<sub>2</sub>, &#x3c4;<sub>2</sub>, T<sub>2 </sub>is by definition:
        <ul id="ul0059" list-style="none">
            <li id="ul0059-0001" num="0190">F={t&#x3b5;(F<sub>0</sub>(T<sub>1</sub>, T<sub>2</sub>))<sup>k</sup>|k&#x3e;0, &#x3c4; is admissible}
<br/>
The notation F suppresses the dependence on T<sub>i</sub>, &#x3c4;<sub>i</sub>, T<sub>i</sub>.
</li>
        </ul>
        </li>
        <li id="ul0058-0003" num="0191">The map &#x3c4; from F to F(T<sub>1</sub>, T<sub>2</sub>) is given by:
        <ul id="ul0060" list-style="none">
            <li id="ul0060-0001" num="0192">&#x3c4;(&#x3c;&#x3c;t<sub>i2</sub>, t<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub>)=mnl{&#x3c;&#x3c4;<sub>2</sub>t<sub>i2</sub>, &#x3c4;<sub>1</sub>t<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub>}</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0131" num="0193">By the above remarks, the range of &#x3c4; is indeed F(T<sub>1</sub>, T<sub>2</sub>).</p>
<p id="p-0132" num="0194">In defining quasi-ordering on F, the definition may use the quasi-ordering &#x2266;<sub>i </sub>defined on T<sub>i</sub>:
<ul id="ul0061" list-style="none">
    <li id="ul0061-0001" num="0000">
    <ul id="ul0062" list-style="none">
        <li id="ul0062-0001" num="0195">&#x3c;&#x3c;t<sub>1,i,2</sub>, t<sub>1,i,1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub><sub><sub2>2</sub2></sub>&#x2266;&#x3c;&#x3c;t<sub>2,i,2</sub>, t<sub>2,i,1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub><sub><sub2>1 </sub2></sub>if and only if for every i<sub>2 </sub>&#x3b5;{1, . . . , k<sub>2</sub>}, there exists i<sub>1</sub>&#x3b5;{1, . . . , k<sub>1</sub>} such that:
        <ul id="ul0063" list-style="none">
            <li id="ul0063-0001" num="0196">t<sub>1,i</sub><sub><sub2>l</sub2></sub><sub>,2</sub>&#x2266;<sub>2</sub>t<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,2 </sub>and t<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>&#x2266;<sub>1</sub>t<sub>1,i</sub><sub><sub2>1</sub2></sub><sub>,1 </sub></li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0133" num="0197">Omitted are the proofs that &#x2266; is a quasi-ordering and that &#x3c4;t<sub>1</sub>=&#x3c4;t<sub>2 </sub>if and only if t<sub>1</sub>&#x2248;t<sub>2</sub>. To complete the definition of F, &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1 </sub2></sub>may need to be defined when t<sub>1</sub>&#x2266;t<sub>2</sub>. That definition may use a technique developed in the next section.</p>
<p id="p-0134" num="0198">Note, a consequence of consistent coercibility may be that picking the nearest available overloads avoids, if possible, type-faults in nested applications. For example, in &#x192;(g(x)), if the nearest overload of g may be chosen for the invocation at x, then the result of g(x) may be the most coercible, (smallest in <img id="CUSTOM-CHARACTER-00190" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>) that is possible. Making any other choice might cause an unnecessary type-fault at the invocation of &#x192;.</p>
<p id="h-0016" num="0000">Overload Resolution Rule</p>
<p id="p-0135" num="0199">Another embodiment of the invention may include an overload resolution rule, which uses the fact that sets of overloads obey the constraints of the previous section. For example, suppose there is a function &#x192; with representation type <b>150</b> t<sub>&#x3b8;</sub>, as above. In the call &#x192;(x), let x have representation type <b>150</b> t. Here is a function that produces either the index i where &#x192;<sub>i </sub>is the function to invoke, or else a value referred to as type-fault, meaning that x is not a type-correct argument of &#x192;:
<ul id="ul0064" list-style="none">
    <li id="ul0064-0001" num="0000">
    <ul id="ul0065" list-style="none">
        <li id="ul0065-0001" num="0200">overload-resolution-rule(t<sub>&#x192; </sub>a function representation type <b>185</b>, t a representation type <b>150</b>)&#x2192;i or type-fault
        <ul id="ul0066" list-style="none">
            <li id="ul0066-0001" num="0201">Let T<sub>&#x192;</sub> be &#x3c4;t<sub>&#x192;</sub>, i.e., the correctness function type corresponding to t<sub>&#x192;</sub>.</li>
            <li id="ul0066-0002" num="0202">Let T be &#x3c4;t, i.e., the correctness function type corresponding to t.</li>
            <li id="ul0066-0003" num="0203">Let E be the set {&#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;T<sub>&#x192;</sub>|T<img id="CUSTOM-CHARACTER-00191" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1</sub>}. These are the set of eligible overloads, i.e., those whose arguments types do not rule out being called.</li>
            <li id="ul0066-0004" num="0204">If E=&#xd8;, then return type-fault. Otherwise, continue with the following steps.</li>
            <li id="ul0066-0005" num="0205">Define R=mnl{T<sub>2</sub>|&#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;E}. It is not obvious, but it is nevertheless the case that R has a single element, which we will denote T<sub>result</sub>.</li>
            <li id="ul0066-0006" num="0206">For convenience in the next step, let t<sub>&#x192;</sub>=&#x3c;&#x3c;t<sub>i2</sub>, t<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub>.</li>
            <li id="ul0066-0007" num="0207">Define A=mnl{&#x3c4;t<sub>1</sub>|&#x3c4;t<sub>i2</sub>=T<sub>result </sub>for some i=1, . . . , k}. Like R, A has a single element, which we will denote T<sub>argument</sub>.</li>
            <li id="ul0066-0008" num="0208">The result i will satisfy the equations &#x3c4;t<sub>i1</sub>=T<sub>argument </sub>and &#x3c4;t<sub>i2</sub>=T<sub>result</sub>. The set of such indices is non-empty, and in practice usually includes one element. In the case of more than one such i, the final choice is made on the basis of the relationship between t and t<sub>i1</sub>.</li>
            <li id="ul0066-0009" num="0209">Return i.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0136" num="0210">Note that the representation type <b>150</b> of the result of &#x192;(x) may depend upon the choice of i (if indeed there is a choice), but that the correctness type <b>160</b> is T<sub>result</sub>, which is independent of i.</p>
<p id="p-0137" num="0211"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an example flowchart <b>1200</b> describing the overload resolution rule performed in a programming environment <b>100</b> in an illustrative embodiment. In block <b>1220</b>, execution may begin by calling the overload-resolution-rule function. The overload-resolution-rule function may accept two parameters t<sub>&#x192;</sub>, a function representation type <b>185</b> of function &#x192;, and t, a representation type <b>150</b> of an argument to function &#x192;. The overload-resolution-rule function may return either i or a type-fault. Returning index i indicates that &#x192;, is the function to invoke. Returning a type-fault indicates that there is not a representation type <b>150</b> t that is a type-correct argument to function &#x192;.</p>
<p id="p-0138" num="0212">In block <b>1230</b>, T<sub>&#x192;</sub> may be &#x3c4;t<sub>&#x192;</sub>.</p>
<p id="p-0139" num="0213">In block <b>1240</b>, T may be &#x3c4;t.</p>
<p id="p-0140" num="0214">In block <b>1250</b>, E may be the set of eligible overloads (i.e., those whose arguments types do not rule out being called) defined as {&#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;T<sub>&#x192;</sub>|T<img id="CUSTOM-CHARACTER-00192" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1</sub>}.</p>
<p id="p-0141" num="0215">In block <b>1260</b>, E may be examined. A check may be performed to determine whether E=&#xd8;, if so, return type-fault and flow may move to <b>1295</b> and end. If E&#x2260;&#xd8;, flow may continue.</p>
<p id="p-0142" num="0216">In block <b>1270</b>, R may be defined as R=mnl{T<sub>2</sub>|&#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;E}. It is not obvious, but it is nevertheless the case that R has a single element, which is denoted T<sub>result</sub>.</p>
<p id="p-0143" num="0217">In block <b>1280</b>, A may be defined as A=mnl{T<sub>1</sub>|&#x3c;T<sub>result</sub>, T<sub>1</sub>&#x3e;&#x3b5;E}. Like R in <b>1270</b>, A has a single element, denoted T<sub>argument</sub>.</p>
<p id="p-0144" num="0218">In block <b>1290</b>, the result may be an index i such that T<sub>i1</sub>=T<sub>argument </sub>and T<sub>i2</sub>=T<sub>result</sub>. This set is non-empty, and in practice usually includes one element. In the case of more than one such i, the final choice is made on the basis of the relationship between t and t<sub>i1</sub>.</p>
<p id="p-0145" num="0219">In block <b>1295</b>, the value i may be returned and the function may end at <b>1299</b>.</p>
<p id="p-0146" num="0220">For t<sub>1</sub>, t<sub>2</sub>&#x3b5;F with t<sub>1</sub>&#x2266;t<sub>2</sub>, the definition of the function coercion <b>170</b> algorithm, denoted &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1 </sub2></sub>uses the overload resolution rule <b>180</b>. Recall that the definition of &#x2266; says that for all i<sub>2</sub>&#x3b5;{1, . . . , k<sub>2</sub>} there exists i<sub>1</sub>&#x3b5;{1, . . . , k} such that t<sub>1,i</sub><sub><sub2>1</sub2></sub><sub>,2</sub>&#x2266;<sub>2</sub>t<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,2 </sub>and t<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>&#x2266;<sub>1</sub>t<sub>1,i</sub><sub><sub2>1</sub2></sub><sub>,1</sub>. By the overload resolution rule, if there exists an i<sub>1</sub>, then the overload resolution picks a particular one, given by i<sub>1</sub>=r(i<sub>2</sub>). Thus, when t<sub>h</sub>=&#x3c;&#x3c;t<sub>hi2</sub>, t<sub>hi1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub><sub><sub2>h </sub2></sub>for h=1 and 2, and t<sub>1</sub>&#x2266;t<sub>2</sub>, define, for any &#x192;=&#x3c;&#x192;<sub>1</sub>, . . . , f<sub>k</sub><sub><sub2>1</sub2></sub>&#x3e;&#x3b5;V<sub>t</sub><sub><sub2>1</sub2></sub>:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>(&#x192;)=&#x3c;&#x3c;&#x3b3;<sub>t</sub><sub><sub2>2,i,2</sub2></sub><sub>,t</sub><sub><sub2>1,r(i),2</sub2></sub>&#x2218;&#x192;<sub>r(i)</sub>&#x2218;&#x3b3;<sub>t</sub><sub><sub2>1,r(i),1</sub2></sub><sub>,t</sub><sub><sub2>2i1</sub2></sub>&#x3e;&#x3e;<sub>i=1, . . . ,k</sub><sub><sub2>2 </sub2></sub><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
This equation, abstracted over &#x192;, defines &#x3b3;<sub>t</sub><sub><sub2>2</sub2></sub><sub>,t</sub><sub><sub2>1</sub2></sub>.
</p>
<p id="p-0147" num="0221"><figref idref="DRAWINGS">FIG. 13</figref> illustrates an example flowchart <b>1300</b> describing the coercions <b>155</b> of function values performed in a programming environment in an illustrative embodiment. In block <b>1220</b>, execution may begin by calling the coerces-to function. The coerces-to function may accept two parameters, t<sub>1 </sub>and t<sub>2</sub>, both are function representation types <b>150</b>. The coerces-to function may return &#x3b3;, representing a function, which when given a function &#x192;<sub>1</sub>, represented as a list of overloads, and having a representation type <b>150</b> t<sub>1</sub>, yields a function &#x192;<sub>2</sub>, again represented as a list of overloads, and having a representation type <b>150</b> t<sub>1</sub>. Thus &#x192;<sub>2 </sub>is the coercion of &#x192;<sub>1 </sub>to type t<sub>2</sub>. The values t<sub>1 </sub>and t<sub>2 </sub>exist in F and t<sub>1</sub>&#x2266;t<sub>2</sub>.</p>
<p id="p-0148" num="0222">In block <b>1330</b>, t<sub>j </sub>may be defined as &#x3c;&#x3c;t<sub>j,i,2</sub>, t<sub>j,i,i</sub>&#x3e;&#x3e;<sub>i=1 . . . , k</sub><sub><sub2>j</sub2></sub>. Initially, &#x3b3;<sub>1</sub>, . . . , &#x3b3;<sub>k</sub><sub><sub2>2 </sub2></sub>are undefined. The i<sub>2</sub><sup>th </sup>step of the algorithm defines &#x3b3;<sub>i</sub><sub><sub2>2</sub2></sub>.</p>
<p id="p-0149" num="0223">In block <b>1340</b>, the value i<sub>2 </sub>may be examined. A check may be performed to determine whether all values of i<sub>2 </sub>in the range 1, . . . , k<sub>2 </sub>have been considered, if so, then &#x3b3;<sub>1</sub>, . . . , &#x3b3;<sub>k</sub><sub><sub2>2 </sub2></sub>are all defined, and return &#x3b3;=&#x3c;&#x3b3;<sub>1</sub>, . . . , &#x3b3;<sub>k</sub><sub><sub2>2</sub2></sub>&#x3e; and flow may move to <b>1390</b> and end. Otherwise, examine i<sub>2 </sub>where &#x3b3;<sub>i</sub><sub><sub2>2 </sub2></sub>is not yet defined and flow may continue.</p>
<p id="p-0150" num="0224">In block <b>1350</b>, the overload-resolution-rule(t<sub>1</sub>, t<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>), as in <figref idref="DRAWINGS">FIG. 12</figref>, may be called. Because t<sub>1</sub>&#x2266;t<sub>2</sub>, the result is not type-fault, so the result will be it in the range 1, . . . , k<sub>1</sub>. For convenience, define t&#x2032;<sub>jk </sub>to be t<sub>j, i</sub><sub><sub2>j</sub2></sub><sub>1 </sub>for j, k=1, 2. It is guaranteed that t&#x2032;<sub>21</sub>&#x2266;t&#x2032;<sub>11 </sub>and t&#x2032;<sub>12</sub>&#x2266;t&#x2032;<sub>22</sub>.</p>
<p id="p-0151" num="0225">In block <b>1360</b>, coerces-to may be used on the constituent type spaces (perhaps recursively). The value &#x3b3;&#x2032;<sub>2 </sub>may be defined by coerces-to(t&#x2032;<sub>12</sub>, t&#x2032;<sub>22</sub>) and &#x3b3;&#x2032;<sub>1 </sub>by coerces-to(t&#x2032;<sub>21</sub>, t&#x2032;<sub>11</sub>).</p>
<p id="p-0152" num="0226">In block <b>1370</b>, the value &#x3b3;<sub>i</sub><sub><sub2>2 </sub2></sub>may be defined by the abstraction over &#x192; of &#x3b3;&#x2032;<sub>2</sub>&#x2218;f&#x2218;&#x3b3;&#x2032;<sub>1</sub>. Flow may move back to <b>1340</b>.</p>
<p id="h-0017" num="0000">Illustrative Embodiment Summary</p>
<p id="p-0153" num="0227">One embodiment of the invention may include a type system with the following features:
<ul id="ul0067" list-style="none">
    <li id="ul0067-0001" num="0000">
    <ul id="ul0068" list-style="none">
        <li id="ul0068-0001" num="0228">Representation types <b>150</b>, viewed as elements of a quasi-ordering in which t<sub>1</sub>&#x2266;t<sub>2 </sub>may mean that a value of type t<sub>1 </sub>is implicitly coercible <b>155</b> to a value of type t<sub>2</sub>.</li>
        <li id="ul0068-0002" num="0229">Correctness types <b>160</b>, viewed as elements of a partial-ordering that may be isomorphic to the set of equivalence classes of representation types <b>150</b>, where the equivalence relation is defined by t<sub>1</sub>&#x2248;t<sub>2 </sub>if and only if t<sub>1</sub>&#x2266;t<sub>2 </sub>and t<sub>2</sub>&#x2266;t<sub>1</sub>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0154" num="0230">Another embodiment may include the above with the following features:
<ul id="ul0069" list-style="none">
    <li id="ul0069-0001" num="0000">
    <ul id="ul0070" list-style="none">
        <li id="ul0070-0001" num="0231">The partial ordering on correctness types <b>160</b> may be a semi-lattice ordering. The greatest lower bound operator is denoted by <img id="CUSTOM-CHARACTER-00193" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0155" num="0232">The partial ordering may have a bottom element denoted by &#x22a5;.
<ul id="ul0071" list-style="none">
    <li id="ul0071-0001" num="0000">
    <ul id="ul0072" list-style="none">
        <li id="ul0072-0001" num="0233">Given correctness types <b>160</b> T<sub>1</sub>&#x2260;&#x22a5; and T<sub>2</sub>, there is a type representing a set of functions with argument correctness type <b>160</b> T<sub>1 </sub>and result correctness type <b>160</b> T<sub>2</sub>. This type may be denoted as T<sub>2</sub>&#x2190;T<sub>1</sub>.</li>
        <li id="ul0072-0002" num="0234">Given correctness types <b>160</b> T<sub>i1</sub>&#x2260;&#x22a5; and T<sub>i2</sub>, for i=1 and 2, the <img id="CUSTOM-CHARACTER-00194" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> and &#x2190; operators may be related by the following equation, which holds whenever T<sub>11</sub><img id="CUSTOM-CHARACTER-00195" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;:</li>
        <li id="ul0072-0003" num="0235">(T<sub>12</sub>&#x2190;T<sub>11</sub>)<img id="CUSTOM-CHARACTER-00196" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>22</sub>&#x2190;T<sub>21</sub>)=(T<sub>12</sub>&#x2190;T<sub>11</sub>) <img id="CUSTOM-CHARACTER-00197" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>(T<sub>22</sub>&#x2190;T<sub>21</sub>) <img id="CUSTOM-CHARACTER-00198" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>((T<sub>12</sub><img id="CUSTOM-CHARACTER-00199" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22</sub>)&#x2190;(T<sub>11</sub><img id="CUSTOM-CHARACTER-00200" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>))</li>
        <li id="ul0072-0004" num="0236">The canonical form for a correctness type <b>160</b> may be a set p of pairs of types, subject to these constraints:
        <ul id="ul0073" list-style="none">
            <li id="ul0073-0001" num="0237">The second component of a pair is not &#x22a5;. As such, a pair &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e; as representing a function type T<sub>2</sub>&#x2190;T<sub>1</sub>.</li>
            <li id="ul0073-0002" num="0238">If &#x3c;T<sub>i2</sub>, T<sub>i1</sub>&#x3e; are elements of p, for i=1 and 2, and if T<sub>11</sub><img id="CUSTOM-CHARACTER-00201" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub>&#x2260;&#x22a5;, then there exists &#x3c;T<sub>2</sub>, T<sub>1</sub>&#x3e;&#x3b5;p such that:
            <ul id="ul0074" list-style="none">
                <li id="ul0074-0001" num="0239">T<sub>11</sub><img id="CUSTOM-CHARACTER-00202" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>21</sub><img id="CUSTOM-CHARACTER-00203" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>1 </sub>and T<sub>2</sub><img id="CUSTOM-CHARACTER-00204" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>12</sub><img id="CUSTOM-CHARACTER-00205" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>T<sub>22 </sub></li>
            </ul>
            </li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0156" num="0240">Another embodiment may include the above with the following features:
<ul id="ul0075" list-style="none">
    <li id="ul0075-0001" num="0000">
    <ul id="ul0076" list-style="none">
        <li id="ul0076-0001" num="0241">Functions may be overloaded, where the argument and result representation types <b>150</b> of the set of overloads may be subject to the constraints as described in the third illustrative embodiment section.</li>
        <li id="ul0076-0002" num="0242">Function representation types <b>150</b> may be lists of pairs of representation types <b>150</b>, subject to these same constraints.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0157" num="0243">Another embodiment may include the above with the following features:
<ul id="ul0077" list-style="none">
    <li id="ul0077-0001" num="0000">
    <ul id="ul0078" list-style="none">
        <li id="ul0078-0001" num="0244">The resolution algorithm as described above may be given a representation type <b>150</b> t and a function representation type <b>150</b> p. The result of the algorithm may be either the indication that t is not matched by any element of p or an index saying which element of p is the best match for t.</li>
        <li id="ul0078-0002" num="0245">The resolution algorithm may be used in the overload resolution algorithm and in the algorithm for coercing one function type to another.
<br/>
Example Software Implementation
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0158" num="0246"><figref idref="DRAWINGS">FIGS. 14A</figref>, <b>14</b>B, <b>14</b>C, and <b>14</b>D illustrate example software class definitions that may be configured to practice an illustrative embodiment of the invention.</p>
<p id="p-0159" num="0247">OrderedSetWithBottom class <b>1405</b> may be a base class with a definition common to a partially ordered set and a quasi ordered set.</p>
<p id="p-0160" num="0248">QuasiOrderedSet class <b>1410</b> may subclass OrderedSetWithBottom class <b>1405</b> and may implement a quasi-ordered set.</p>
<p id="p-0161" num="0249">PartiallyOrderedSet class <b>1415</b> may subclass OrderedSetWithBottom class <b>1405</b> and may implement a partially ordered set.</p>
<p id="p-0162" num="0250">Semilattice class <b>1420</b> may subclass PartiallyOrderedSet class <b>1415</b> and may implement a semilattice. Semilattice class <b>1420</b> may have only one class definition, that of a parameterized class Semilattice. Concrete subclasses of the Semilattice class <b>1420</b> (an example may be seen in class <b>1430</b>) may need to define the glb (corresponds to H) and is_bottom methods, for example.</p>
<p id="p-0163" num="0251">RepresentationTypeSpace class <b>1425</b> may be a subclass of QuasiOrderedSet class <b>1410</b> and may implement a representation type <b>150</b>. Concrete subclasses of the RepresentationTypeSpace class <b>1425</b> (an example may be seen in <b>1460</b>) may need to define gamma (corresponds to &#x3b3;).</p>
<p id="p-0164" num="0252">CorrectnessTypeSpace class <b>1430</b> may subclass RepresentationTypeSpace class <b>1425</b> and Semilattice class <b>1420</b>. CorrectnessTypeSpace class <b>1430</b> may implement correctness types <b>160</b>. The tau method of this class represents the connection &#x3c4; between representation and correctness types <b>160</b>.</p>
<p id="p-0165" num="0253">ResultArgumentPair class <b>1435</b> may be a generic class for pairs typed by result and argument classes.</p>
<p id="p-0166" num="0254">RepresentationParameterFunction class <b>1440</b> may provide a generic means of defining a class for lists of pairs associated with arguments and results. Two examples of its use, with different template parameters, may be seen in class <b>1460</b>.</p>
<p id="p-0167" num="0255">BottomFunction class <b>1445</b> defines the bottom of a quasi-ordered set for functions.</p>
<p id="p-0168" num="0256">OrderedSetWithBottomFunction class <b>1450</b> may subclass OrderedSetWithBottom class <b>1405</b>. OrderedSetWithBottomFunction class <b>1450</b> may define &#x201c;le&#x201d; for the quasi-ordered set of function representation types <b>150</b>. In an illustrative embodiment, OrderedSetWithBottomFunction class <b>1450</b>, may be used to implement the <img id="CUSTOM-CHARACTER-00206" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/> function as illustrated in <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0169" num="0257">QuasiOrderedSetFunction class <b>1455</b> may subclass QuasiOrderedSet class <b>1310</b> and OrderedSetWithBottomFunction class <b>1450</b>. QuasiOrderedSetFunction class <b>1455</b> may enhance the definition of the quasi-ordered set of function representation types <b>150</b> by defining equality.</p>
<p id="p-0170" num="0258">RepresentationTypeSpaceFunction class <b>1460</b> may subclass RepresentationTypeSpace class <b>1425</b>. RepresentationTypeSpaceFunction class <b>1460</b> may define gamma (coercion) for function representation types <b>150</b>.</p>
<p id="p-0171" num="0259">CorrectnessParameterFunction class <b>1465</b> may provide a generic means of defining a class for sets of pairs associated with arguments and results. Two examples of its use, with different template parameters, are in class <b>1475</b>.</p>
<p id="p-0172" num="0260">SemilatticeFunction class <b>1470</b> may subclass Semilattice class <b>1420</b>. In an illustrative embodiment, software code, SemilatticeFunction class <b>1470</b>, may be used to implement the <img id="CUSTOM-CHARACTER-00207" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/> function as illustrated in <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0173" num="0261">CorrectnessTypeSpaceFunction class <b>1475</b> may subclass CorrectnessTypeSpace class <b>1430</b>, RepresentationTypeSpaceFunction class <b>1460</b>, and SemilatticeFunction class <b>1470</b>. CorrectnessTypeSpaceFunction class <b>1475</b> may define &#x3c4;.</p>
<p id="p-0174" num="0262">The CorrectnessParameterFunction class <b>1465</b> may be parameterized by the class of the argument type and class of a function type. The CorrectnessParameterFunction class <b>1465</b>, may be a list of pairs, which represents the set of pairs discussed above. Other embodiments may include other representations of sets of pairs.</p>
<p id="p-0175" num="0263">The CorrectnessTypeSpaceFunction class <b>1475</b> constructor may take two CorrectnessTypeSpace objects, corresponding to arguments and results. These objects become fields of the resulting CorrectnessTypeSpaceFunction object (note that CorrectnessTypeSpaceFunction may be derived from CorrectnessTypeSpace). This type may be also the type defined by CorrectnessTypeSpaceFunction, and this type may be obtained by CorrectnessTypeSpaceFunction &#x3c; . . . &#x3e;.T. This type may be the argument/result type of the meet method and the argument type of the is_bottom method. Note that these methods are only declared, not defined.</p>
<p id="p-0176" num="0264">Class definitions <b>1405</b>-<b>1475</b> represent example software code. Class definitions <b>1405</b>-<b>1475</b> (i.e., example software code) may be stored in tangible non-transitory computer readable storage media.</p>
<p id="p-0177" num="0265">Other embodiments may include additional classes. In other embodiments, classes may be combined as needed. Class definitions <b>1405</b>-<b>1475</b> are written in the C++ programming language, but similar implementations may be written in other types of programming languages such as, but not limited to, the MATLAB&#xae; language, C, Fortran, Forth, ADA, Pascal, JavaScript, Python, C#, Java, Visual Basic, the Mathlab language, etc.</p>
<p id="h-0018" num="0000">Example Distributed System</p>
<p id="p-0178" num="0266"><figref idref="DRAWINGS">FIG. 15</figref> illustrates a distributed environment <b>1500</b> that may be configured to practice an illustrative embodiment. Referring to <figref idref="DRAWINGS">FIG. 15</figref>, environment <b>1500</b> may include a client <b>1510</b>, network <b>1540</b>, service provider <b>1550</b>, target environment <b>1560</b> and cluster <b>1570</b>. Note that the distributed environment illustrated in <figref idref="DRAWINGS">FIG. 15</figref> is just one example of a distributed environment that may be used. Other distributed environments may include additional devices, fewer devices, or devices in arrangements that differ from the arrangement of environment <b>1500</b>. For example, distributed environment <b>1500</b> can be implemented as a computing cloud if desired.</p>
<p id="p-0179" num="0267">Client <b>1510</b> may include a device capable of sending and/or receiving information (e.g., data) to and/or from another device, such as target environment <b>1560</b>. Information may include any type of machine-readable information having substantially any format that may be adapted for use, e.g., in one or more networks and/or with one or more devices. The information may include digital information and/or analog information. The information may further be packetized and/or non-packetized. In an embodiment, client <b>1510</b> may download data and/or code via network <b>1540</b>. For example, client <b>1510</b> can download code for a wide-spectrum type system <b>110</b> consistent with aspects of the invention.</p>
<p id="p-0180" num="0268">Client <b>1510</b>, service provider <b>1550</b>, and/or target environment <b>1560</b> may implement programming environment <b>100</b>.</p>
<p id="p-0181" num="0269">Client <b>1510</b> may be, for example, a desktop computer, a laptop computer, a client computer, a server computer, a mainframe computer, a personal digital assistant (PDA), a web-enabled cellular telephone, a smart phone, smart sensor/actuator, or another computation or communication device that executes instructions that enable the device to perform one or more activities and/or generate one or more results.</p>
<p id="p-0182" num="0270">In an embodiment, client <b>1510</b> may include a technical computing environment (TCE) <b>1520</b>, graphical modeling software <b>1530</b> and analysis software <b>1535</b>. In other embodiments, client <b>1510</b> may include other components, applications, etc. Embodiments of TCE <b>1520</b> may contain computer-executable instructions (e.g., code) and data that are configured to implement the TCE. The instructions may include instructions configured to implement modeling software <b>1520</b> and/or graphical analysis software <b>1535</b>. An example embodiment of the current invention may be implemented in a TCE <b>1510</b>. An example embodiment of one or more of function semilattices <b>130</b>, correctness types <b>160</b>, representation types <b>150</b>, function overload resolution <b>180</b>, function coercion <b>170</b>, and/or a wide-spectrum type system <b>110</b> provided by programming environment <b>100</b> may be implemented in a TCE <b>1520</b>.</p>
<p id="p-0183" num="0271">Modeling software <b>1530</b> and the analysis software <b>1535</b> may be graphical, textual or a hybrid that includes both textual and graphical capabilities/features. Modeling software <b>1530</b> may include computer-executable instructions that allow, e.g., a user to build and/or execute a model. For example, modeling software <b>1530</b> may allow a user to build and execute a time-based model, a state-based model, an event-based model, a dataflow-based model, etc. An example embodiment of the current invention may be implemented as part of modeling software <b>1530</b>.</p>
<p id="p-0184" num="0272">Analysis software <b>1535</b> may include computer-executable instructions that allow information in a model to be evaluated. Evaluating a model may include generating tests for the model that satisfy model coverage objectives, user-defined objectives, etc. In addition, evaluating a model may include proving various model properties and generating examples of violations of these properties. Moreover, evaluating a model may include analyzing the model, in accordance with techniques described herein. In an illustrative embodiment, analysis software <b>1535</b> may include the Simulink&#xae; Design Verifier software which is available from MathWorks, Inc. An example embodiment of the current invention may be implemented as part of analysis software <b>1535</b>.</p>
<p id="p-0185" num="0273">Network <b>1540</b> may include any network capable of exchanging information between entities associated with the network, including, for example, client <b>1510</b>, service provider <b>1550</b>, target environment <b>1560</b> and cluster <b>1570</b>. Exchanged information may include, for example, packet data and/or non-packet data. Implementations of network <b>1540</b> may include local area networks (LANs), metropolitan area networks (MANs), wide-area networks (WANs), etc. Information may be exchanged between entities using any network protocol, such as, but not limited to, the Internet Protocol (IP), Asynchronous Transfer Mode (ATM), Synchronous Optical Network (SONET), the User Datagram Protocol (UDP), Institute of Electrical and Electronics Engineers (IEEE) 802.11, etc.</p>
<p id="p-0186" num="0274">Network <b>1540</b> may include various network devices, such as, for example, routers, switches, firewalls, servers, etc. Portions of network <b>1540</b> may be wired (e.g., using wired conductors, optical fibers, etc.) and/or wireless (e.g., free-space optical (FSO), radio frequency (RF), acoustic transmission paths, etc.). Portions of network <b>1540</b> may include a substantially open public network, such as the Internet. Portions of network <b>1540</b> may include a more restricted network, such as a virtual private network (VPN). It should be noted that implementations of networks and/or devices operating on networks described herein are not limited with regards to information carried by the networks, protocols used in the networks, the architecture/configuration of the networks, etc.</p>
<p id="p-0187" num="0275">Service provider <b>1550</b> may include code (e.g., software), logic (e.g., hardware or a combination of hardware and software), etc., that makes a service available to another device in distributed environment <b>1500</b>. Service provider <b>1550</b> may include a server operated by an entity (e.g., an individual, a corporation, an educational institution, a government agency, etc.) that provides one or more services to a destination, such as client <b>1510</b>. The services may include software containing computer-executable instructions that may be executed, in whole or in part, by a destination, by service provider <b>1550</b> on behalf of the destination, or some combination thereof. An example embodiment of the current invention may be implemented as part of service provider <b>1550</b>.</p>
<p id="p-0188" num="0276">For example, in an embodiment, service provider <b>1550</b> may provide one or more subscription-based services to various customers via network <b>1540</b>. These services may be accessed by the customer (e.g., via client <b>1510</b>). Service provider <b>1550</b> may limit access to certain services based on, e.g., a customer service agreement between the customer and service provider <b>1550</b>. The service agreement may allow the customer to access services that allow the customer to build and/or execute a model. In addition, the service agreement may allow the customer to further analyze models, generate code from the models, generate various reports, access audit services that allow a customer's code to be audited, etc. The service agreement may include other types of arrangements, such as certain fee-based arrangements or restricted access arrangements. For example, a customer may pay a fee which provides the customer unlimited access to a given package of services for a given time period (e.g., hourly, daily, monthly, yearly, etc.). For services not included in the package, the customer may have to pay an additional fee in order to access the services. Still other arrangements may be resource-usage based. For example, the customer may be assessed a fee based on an amount of computing resources used, network bandwidth used, etc.</p>
<p id="p-0189" num="0277">Target environment <b>1560</b> may include a device that receives information from client <b>1510</b>, service provider <b>1550</b>, or cluster <b>1570</b>. For example, target environment <b>1560</b> may receive executable code from client <b>1510</b>, where the executable code allows target environment to perform an operation when the code is executed. Client <b>1510</b> may have generated the executable code using TCE <b>1520</b>, graphical modeling software <b>1530</b>, and/or a code generator (not shown in <figref idref="DRAWINGS">FIG. 15</figref>).</p>
<p id="p-0190" num="0278">Cluster <b>1570</b> may include a number of processing resources that perform processing on behalf of another device, such as client <b>1510</b>, service provider <b>1550</b> and/or target environment <b>1560</b>. Cluster <b>1570</b> may include logic that manages and/or coordinates the operation of multiple processing resources. For example, cluster <b>1570</b> may send data to and/or receive results from these processing resources. In an embodiment, cluster <b>1570</b> may include units of execution (UEs) <b>1580</b><i>a, b, c</i>, and <i>d </i>(collectively UEs <b>1580</b>) that may perform processing on behalf of client <b>1510</b> and/or another device, such as service provider <b>1550</b>. An example embodiment of the current invention may be implemented on one or more UEs <b>1580</b>.</p>
<p id="p-0191" num="0279">UEs <b>1580</b> may include hardware, software, or hybrid logic that performs processing operations on behalf of TCE <b>1520</b>. For example, in an embodiment UEs <b>1580</b> may parallel process portions of a graphical model created by user of client <b>1510</b>. This parallel processing may include performing analysis on the model, parsing the model into portions, and/or aggregating results from respective UEs <b>1580</b> into a single result for display to a user at client <b>1510</b>. UEs <b>1580</b> may reside on a single device or chip or on multiple devices or chips. For example, UEs <b>1580</b> may be implemented in a single application specific integrated circuit (ASIC) or in multiple ASICs. Likewise, UEs <b>1580</b> can be implemented in a single computer system using virtualization techniques. Other examples of UEs <b>1580</b> may include field programmable gate arrays (FPGAs), complex programmable logic devices (CPLDs), application specific instruction-set processors (ASIPs), microprocessors, etc.</p>
<p id="h-0019" num="0000">Illustrative Computing Architecture Example System</p>
<p id="p-0192" num="0280"><figref idref="DRAWINGS">FIG. 16</figref> illustrates an example of a computer system <b>1600</b> that may be configured to practice an embodiment of the invention. For example, computer system <b>1600</b> may be used to implement client <b>1510</b>, service provider <b>1550</b>, target environment <b>1560</b>, programming environment <b>100</b>, etc. Computer system <b>1600</b> may include processor <b>1620</b>, memory <b>1670</b>, storage device <b>1640</b>, input device <b>1610</b>, output device <b>1660</b>, and network interface <b>1680</b>. Processor <b>1620</b> may include logic configured to execute computer-executable instructions that implement embodiments of the invention. An example of a processor that may be used with the invention includes the Pentium&#xae; processor, Core i7&#xae; processor, or Xeon&#xae; processor all available from Intel Corporation, Santa, Clara, Calif. The instructions may reside in memory <b>1670</b> and may include instructions associated with TCE <b>1520</b>.</p>
<p id="p-0193" num="0281">Memory <b>1670</b> may be a computer-readable medium that may be configured to store instructions configured to implement embodiments of the invention. Memory <b>1670</b> may be a primary storage accessible to processor <b>1620</b> and can include a random-access memory (RAM) that may include RAM devices, such as, for example, Dynamic RAM (DRAM) devices, flash memory devices, Static RAM (SRAM) devices, etc. Storage device <b>1640</b> may include a magnetic disk and/or optical disk and its corresponding drive for storing information and/or instructions. Memory <b>1670</b> and/or storage device <b>1640</b> may store class definitions <b>1405</b>-<b>1475</b>.</p>
<p id="p-0194" num="0282">Interconnect <b>1650</b> may include logic that operatively couples components of computer system <b>1600</b> together. For example, interconnect <b>1650</b> may allow components to communicate with each other, may provide power to components of computer system <b>1600</b>, etc. In an embodiment of computer system <b>1600</b>, interconnect <b>1650</b> may be implemented as a bus.</p>
<p id="p-0195" num="0283">Input device <b>1610</b> may include logic configured to receive information for computer system <b>1600</b> from, e.g., a user. Embodiments of input device <b>1610</b> may include keyboards, touch sensitive displays, biometric sensing devices, computer mice, trackballs, pen-based point devices, etc. Output device <b>1660</b> may include logic configured to output information from computer system. Embodiments of output device <b>1660</b> may include cathode ray tubes (CRTs), plasma displays, light-emitting diode (LED) displays, liquid crystal displays (LCDs), printers, vacuum florescent displays (VFDs), surface-conduction electron-emitter displays (SEDs), field emission displays (FEDs), etc.</p>
<p id="p-0196" num="0284">Network interface <b>1680</b> may include logic configured to interface computer system <b>1600</b> with a network, e.g., network <b>1540</b>, and may enable computer system <b>1600</b> to exchange information with other entities connected to the network, such as, for example, service provider <b>1550</b>, target environment <b>1560</b> and cluster <b>1570</b>. Network interface <b>1680</b> may be implemented as a built-in network adapter, network interface card (NIC), Personal Computer Memory Card International Association (PCMCIA) network card, card bus network adapter, wireless network adapter, Universal Serial Bus (USB) network adapter, modem or any other device suitable for interfacing computer system <b>1600</b> to any type of network.</p>
<p id="p-0197" num="0285">It should be noted that embodiments may be implemented using some combination of hardware and/or software. It should be further noted that a computer-readable medium that includes computer-executable instructions for execution in a processor may be configured to store embodiments of the invention. The computer-readable medium may include volatile memories, non-volatile memories, flash memories, removable discs, non-removable discs and so on. In addition, it should be noted that various electromagnetic signals such as wireless signals, electrical signals carried over a wire, optical signals carried over optical fiber and the like may be encoded to carry computer-executable instructions and/or computer data on e.g., a communication network for an embodiment of the invention.</p>
<p id="p-0198" num="0286">A hardware unit of execution may include a device (e.g., a hardware resource) that performs and/or participates in parallel programming activities. For example, a hardware unit of execution may perform and/or participate in parallel programming activities in response to a request and/or a task it has received (e.g., received directly or via a proxy). A hardware unit of execution may perform and/or participate in substantially any type of parallel programming (e.g., task, data, stream processing, etc.) using one or more devices. For example, in one implementation, a hardware unit of execution may include a single processing device that includes multiple cores, and in another implementation, the hardware unit of execution may include a number of processors <b>1620</b>. A hardware unit of execution may also be a programmable device, such as a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), a digital signal processor (DSP), etc. Devices used in a hardware unit of execution may be arranged in substantially any configuration (or topology), such as a grid, ring, star, etc. A hardware unit of execution may support one or more threads (or processes) when performing processing operations.</p>
<p id="p-0199" num="0287">A software unit of execution may include a software resource (e.g., a technical computing environment [e.g., MATLAB&#xae; software], a worker, a lab, etc.) that performs and/or participates in parallel programming activities. For example, a software unit of execution may perform and/or participate in parallel programming activities in response to receipt of a program and/or one or more portions of the program. In an embodiment, a software unit of execution may perform and/or participate in substantially any type of parallel programming using one or more hardware units of execution. Embodiments of a software unit of execution may support one or more threads and/or processes when performing processing operations.</p>
<p id="p-0200" num="0288">A TCE <b>1520</b> may include hardware and/or software based logic that provides a computing environment that allows users to perform tasks related to disciplines, such as, but not limited to, mathematics, science, engineering, medicine, business, etc., more efficiently than if the tasks were performed in another type of computing environment, such as an environment that required the user to develop code in a conventional programming language, such as C++, C, Fortran, Pascal, etc. Example software code <b>1400</b> may be complied and processed by processor <b>1620</b> and implemented in TCE <b>1520</b>.</p>
<p id="p-0201" num="0289">In one implementation, the TCE <b>1520</b> may include a dynamically typed language that can be used to express problems and/or solutions in mathematical notations familiar to those of skill in the relevant arts. For example, the TCE <b>1520</b> may use an array as a basic element, where the array may not require dimensioning. These arrays may be used to support array programming in that operations can apply to an entire set of values, such as values in an array. Array programming may allow array based operations to be treated as a high-level programming technique or model that lets a programmer think and operate on whole aggregations of data without having to resort to explicit loops of individual non-array, i.e., scalar operations.</p>
<p id="p-0202" num="0290">A TCE <b>1520</b> may further be adapted to perform matrix and/or vector formulations that can be used for data analysis, data visualization, application development, simulation, modeling, algorithm development, etc. These matrix and/or vector formulations may be used in many areas, such as statistics, finance, image processing, signal processing, control design, life sciences, education, discrete event analysis and/or design, state based analysis and/or design, etc.</p>
<p id="p-0203" num="0291">A TCE <b>1520</b> may further provide mathematical functions and/or graphical tools (e.g., for creating plots, surfaces, images, volumetric representations, etc.). In one implementation, the TCE <b>1520</b> may provide these functions and/or tools using toolboxes (e.g., toolboxes for signal processing, image processing, data plotting, parallel processing, optimization, etc.). In another implementation, the TCE <b>1520</b> may provide these functions as block sets (e.g., an optimization block set). In still another implementation, the TCE <b>1520</b> may provide these functions in another way, such as via a library, etc. The TCE <b>1520</b> may be implemented as a text based environment, a graphically based environment, or another type of environment, such as a hybrid environment that is both text and graphically based.</p>
<heading id="h-0020" level="1">ALTERNATIVE EMBODIMENTS</heading>
<p id="p-0204" num="0292">An alternative embodiment may implement a TCE <b>1520</b> using one or more text-based products. For example, a text-based TCE <b>1520</b>, may be implemented using products such as, but not limited to, MATLAB&#xae; by MathWorks, Inc.; Octave; Python; Comsol Script; MATRIXx from National Instruments; Mathematica from Wolfram Research, Inc.; Mathcad from Mathsoft Engineering &#x26; Education Inc.; Maple from Maplesoft; Extend from Imagine That Inc.; Scilab from The French Institution for Research in Computer Science and Control (INRIA); Virtuoso from Cadence; or Modelica or Dymola from Dynasim.</p>
<p id="p-0205" num="0293">Other embodiments may implement a TCE <b>1520</b> in a graphically-based TCE <b>1520</b> using products such as, but not limited to, Simulink&#xae;, Stateflow&#xae;, SimEvents&#x2122;, etc., by MathWorks, Inc.; VisSim by Visual Solutions; LabView&#xae; by National Instruments; Dymola by Dynasim; SoftWIRE by Measurement Computing; WiT by DALSA Coreco; VEE Pro or SystemVue by Agilent; Vision Program Manager from PPT Vision; Khoros from Khoral Research; Gedae by Gedae, Inc.; Scicos from (INRIA); Virtuoso from Cadence; Rational Rose from IBM; Rhopsody or Tau from Telelogic; Ptolemy from the University of California at Berkeley; or aspects of a Unified Modeling Language (UML) or SysML environment.</p>
<p id="p-0206" num="0294">Another alternative embodiment may be implemented in a language that is compatible with a product that includes a TCE <b>1520</b>, such as one or more of the above identified text-based or graphically-based TCE's <b>1520</b>. For example, MATLAB&#xae; (a text-based TCE <b>1520</b>) may use a first command to represent an array of data and a second command to transpose the array. Another product, that may or may not include a TCE <b>1520</b>, may be MATLAB&#xae;-compatible and may be able to use the array command, the array transpose command, or other MATLAB&#xae; commands. For example, the other product may use the MATLAB&#xae; commands to suggest proper identifiers when an unknown identifier is presented.</p>
<p id="p-0207" num="0295">Yet another alternative embodiment may be implemented in a hybrid TCE <b>1520</b> that combines features of a text-based and graphically-based TCE <b>1520</b>. In one implementation, one TCE <b>1520</b> may operate on top of the other TCE <b>1520</b>. For example, a text-based TCE <b>1520</b> (e.g., MATLAB&#xae;) may operate as a foundation and a graphically-based TCE <b>1520</b> (e.g., Simulink) may operate on top of MATLAB&#xae; and may take advantage of text-based features (e.g., commands) to provide a user with a graphical user interface and graphical outputs (e.g., graphical displays for data, dashboards, etc.).</p>
<heading id="h-0021" level="1">CONCLUSION</heading>
<p id="p-0208" num="0296">Implementations may provide devices and techniques that implement a wide-spectrum type system, suitable for a programming language that offers both statically and dynamically typed aspects. An implementation may include representation types <b>150</b> and correctness types <b>160</b> as described herein. Another implementation may include function overload resolution <b>180</b>.</p>
<p id="p-0209" num="0297">The foregoing description of example embodiments of the invention provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example, while a series of acts has been described with regard to <figref idref="DRAWINGS">FIGS. 6-10</figref> and <b>12</b>-<b>13</b> the order of the acts may be modified in other implementations consistent with the principles of the invention. Further, non-dependent acts may be performed in parallel.</p>
<p id="p-0210" num="0298">In addition, implementations consistent with principles of the invention can be implemented using devices and configurations other than those illustrated in the figures and described in the specification without departing from the spirit of the invention. Devices and/or components may be added and/or removed from the implementations of <figref idref="DRAWINGS">FIGS. 15 and 16</figref>. depending on specific deployments and/or applications. Further, disclosed implementations may not be limited to any specific combination of hardware.</p>
<p id="p-0211" num="0299">Further, certain portions of the invention may be implemented as &#x201c;logic&#x201d; that performs one or more functions. This logic may include hardware, such as hardwired logic, an application-specific integrated circuit, a field programmable gate array, a microprocessor, software, wetware, or a combination of hardware and software.</p>
<p id="p-0212" num="0300">No element, act, or instruction used in the description of the invention should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article &#x201c;a&#x201d; is intended to include one or more items. Where only one item is intended, the term &#x201c;one&#x201d; or similar language is used. Further, the phrase &#x201c;based on,&#x201d; as used herein is intended to mean &#x201c;based, at least in part, on&#x201d; unless explicitly stated otherwise.</p>
<p id="p-0213" num="0301">Headings and/or subheadings used herein are used to segment this patent application into portions to facilitate the readability of the application. These headings and/or subheadings are not intended to define or limit the scope of the invention disclosed and/or claimed in this patent application.</p>
<p id="p-0214" num="0302">The scope of the invention is defined by the claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. One or more tangible non-transitory computer-readable storage media for storing computer-executable instructions executable by processing logic, the media storing one or more instructions for:
<claim-text>constructing semilattices S<sub>1 </sub>and S<sub>2 </sub>in a programming environment by a computer, where S<sub>1 </sub>has bottom element denoted &#x22a5;<sub>1</sub>;</claim-text>
<claim-text>determining a set S<sub>0 </sub>of elements constructed from sets of elements associated with the semilattices S<sub>1 </sub>and S<sub>2 </sub>in the programming environment by the computer;</claim-text>
<claim-text>determining a partial ordering, denoted <img id="CUSTOM-CHARACTER-00208" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>, on elements of the set S<sub>0 </sub>in the programming environment by the computer;</claim-text>
<claim-text>determining a greatest lower bound operation, denoted <img id="CUSTOM-CHARACTER-00209" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>, on the set S<sub>0</sub>, consistent with <img id="CUSTOM-CHARACTER-00210" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>, in the programming environment by the computer;</claim-text>
<claim-text>determining a map, denoted &#x2190;, taking as arguments an element of the semilattice S<sub>1 </sub>other than &#x22a5;<sub>1 </sub>and an element of the semilattice S<sub>2</sub>, and yielding an element of S<sub>0</sub>, in the programming environment by the computer, where &#x2190; is anti-isotonic on the element of S<sub>1 </sub>and isotonic on the element of S<sub>2</sub>, an effect of &#x2190; on s<sub>1 </sub>an element of S<sub>1 </sub>and s<sub>2 </sub>an element of S<sub>2 </sub>denoted by s<sub>2</sub>&#x2190;s<sub>1</sub>;</claim-text>
<claim-text>determining, in the programming environment by the computer, a function semilattice S over the semilattices S<sub>1 </sub>and S<sub>2</sub>, where S comprises the function &#x2190; from S<sub>1</sub>&#xd7;S<sub>2 </sub>to S<sub>0 </sub>and a semilattice with constituents S<sub>0</sub>, <img id="CUSTOM-CHARACTER-00211" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>, and <img id="CUSTOM-CHARACTER-00212" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>; and</claim-text>
<claim-text>constructing a representation for elements of the function semilattice S over the semilattices S<sub>1 </sub>and S<sub>2</sub>, each element s of S including a set of pairs {&#x3c;s<sub>i2</sub>,s<sub>i1</sub>&#x3e;}<sub>i=1, . . . , k</sub>, k being the size of element s and each s<sub>ij </sub>being an element of S<sub>j </sub>for i=1, . . . , k and j=1 or 2, the set of pairs being in a function semilattice canonical form.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising instructions for:
<claim-text>determining a second set of pairs {&#x3c;s&#x2032;<sub>i2</sub>, s&#x2032;<sub>i1</sub>&#x3e;}<sub>i=1, . . . , k</sub>, each s&#x2032;<sub>ij </sub>being an element of S<sub>j </sub>for i=1, . . . , k and j=1 or 2, to be in the function semilattice canonical form as equivalent to the condition that for all i<sub>1 </sub>and i<sub>2 </sub>in a range from 1 to k, either s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,i</sub><img id="CUSTOM-CHARACTER-00213" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>=&#x22a5; or there exists i<sub>0 </sub>in the range from 1 to k such that s&#x2032;<sub>i</sub><sub><sub2>0</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00214" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00215" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2 </sub>and s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00216" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00217" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>0</sub2></sub><sub>,1</sub>, based on the determining, including the second set of pairs in the function semilattice canonical form.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising instructions for:
<claim-text>accepting an s&#x2032; as input, where s&#x2032;=&#x3c;&#x3c;s&#x2032;<sub>i2</sub>, s&#x2032;<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . k</sub>, each s&#x2032;<sub>ij </sub>being an element of S<sub>j </sub>for i=1, . . . , k and j=1 or 2;</claim-text>
<claim-text>applying a function semilattice reduction algorithm to s&#x2032; to obtain an element of S.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the function semilattice reduction algorithm comprises instructions for:
<claim-text>accepting an s&#x2032; as input, where s&#x2032;=&#x3c;&#x3c;s&#x2032;<sub>i2</sub>, s&#x2032;<sub>i1</sub>&#x3e;&#x3e;<sub>i=1, . . . k</sub>, each s&#x2032;<sub>ij </sub>being an element of S<sub>j </sub>for i=1, . . . , k and j=1 and 2;</claim-text>
<claim-text>repeating until neither of the following can be performed:
<claim-text>if a non-minimal element of s&#x2032; exists, then deleting the non-minimal element from s&#x2032;, or</claim-text>
<claim-text>if there exists i<sub>1 </sub>and i<sub>2 </sub>in a range from 1 to k such that s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1 </sub><img id="CUSTOM-CHARACTER-00218" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>&#x2260;&#x22a5; and there does not exist i<sub>0 </sub>in the range from 1 to k such that s&#x2032;<sub>i</sub><sub><sub2>0</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00219" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00220" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2 </sub>and s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00221" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1 </sub><img id="CUSTOM-CHARACTER-00222" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>0</sub2></sub><sub>,1</sub>, then adding &#x3c;s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00223" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,2</sub>, s&#x2032;<sub>i</sub><sub><sub2>1</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00224" he="2.79mm" wi="1.78mm" file="US08627282-20140107-P00006.TIF" alt="custom character" img-content="character" img-format="tif"/>s&#x2032;<sub>i</sub><sub><sub2>2</sub2></sub><sub>,1</sub>&#x3e; to s&#x2032;; and</claim-text>
</claim-text>
<claim-text>yielding the current value of s&#x2032;.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising instructions for:
<claim-text>accepting an s<sub>1 </sub>and s<sub>2 </sub>as input, where s<sub>1 </sub>and s<sub>2 </sub>are elements of the function semilattice S over semilattices S<sub>1 </sub>and S<sub>2</sub>; and</claim-text>
<claim-text>calculating a greatest lower bound for s<sub>1 </sub>and s<sub>2 </sub>using the greatest lower bound operations of S<sub>1 </sub>and S<sub>2</sub>.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the greatest lower bound operation comprises instructions for:
<claim-text>accepting an s<sub>1 </sub>and s<sub>2 </sub>as input, where s<sub>1 </sub>and s<sub>2 </sub>are elements of the function semilattice S over semilattices S<sub>1 </sub>and S<sub>2</sub>, represented as elements in function semilattice canonical form; and</claim-text>
<claim-text>applying the function semilattice reduction algorithm to a set union of s<sub>1 </sub>and s<sub>2</sub>.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising instructions for:
<claim-text>providing element s<sub>1 </sub>and element s<sub>2 </sub>in function semilattice canonical form;</claim-text>
<claim-text>calculating whether element s<sub>1 </sub>is less than or equal to element s<sub>2 </sub>by the condition that for every &#x3c;s<sub>22</sub>, s<sub>21</sub>&#x3e; there must exist &#x3c;s<sub>12</sub>, s<sub>11</sub>&#x3e; such that s<sub>12 </sub>is less than or equal to s<sub>22 </sub>and s<sub>11 </sub>is less than or equal to s<sub>21</sub>.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The one or more tangible non-transitory computer-readable storage media of <claim-ref idref="CLM-00001">claim 1</claim-ref>, where in the algorithm for the partial ordering further comprises instructions for:
<claim-text>accepting an s<sub>1 </sub>and s<sub>2 </sub>as input, where s<sub>h</sub>=&#x3c;&#x3c;s<sub>hi2</sub>, s<sub>hi1</sub>&#x3e;&#x3e;<sub>i=1, . . . , k</sub><sub><sub2>h</sub2></sub>, each s<sub>hij </sub>being an element of S<sub>j </sub>for h=1 and 2, i=1, . . . , k<sub>h</sub>, and j=1 and 2, a partial ordering on S<sub>j </sub>denoted <img id="CUSTOM-CHARACTER-00225" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>j</sub>;</claim-text>
<claim-text>calculating s<sub>1</sub><img id="CUSTOM-CHARACTER-00226" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/>s<sub>2 </sub>as a condition that for every i<sub>2 </sub>in a range 1, . . . , k<sub>2</sub>, there exists i<sub>1 </sub>in the range 1, . . . , k<sub>2 </sub>such that r<sub>1,i</sub><sub><sub2>1</sub2></sub><sub>,2</sub><img id="CUSTOM-CHARACTER-00227" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>2</sub>r<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,2 </sub>and r<sub>2,i</sub><sub><sub2>2</sub2></sub><sub>,1</sub><img id="CUSTOM-CHARACTER-00228" he="2.79mm" wi="2.12mm" file="US08627282-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif"/><sub>1</sub>r<sub>1,i</sub><sub><sub2>1</sub2></sub><sub>,1</sub>.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626824-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626824</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12714376</doc-number>
<date>20100226</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>977</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
<further-classification>709217</further-classification>
<further-classification>709224</further-classification>
<further-classification>345428</further-classification>
</classification-national>
<invention-title id="d2e55">Persisting graphics structures across resolution change in graphics remoting environment</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7359920</doc-number>
<kind>B1</kind>
<name>Rybicki et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8230008</doc-number>
<kind>B2</kind>
<name>Tsirkin et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0023735</doc-number>
<kind>A1</kind>
<name>Funahashi et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2006/0271500</doc-number>
<kind>A1</kind>
<name>Obrea et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 76</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2007/0183493</doc-number>
<kind>A1</kind>
<name>Kimpe</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>3752401</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2008/0222273</doc-number>
<kind>A1</kind>
<name>Lakshmanan et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2009/0036190</doc-number>
<kind>A1</kind>
<name>Brosnan et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>463 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2010/0211983</doc-number>
<kind>A1</kind>
<name>Chou</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725 93</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0211987</doc-number>
<kind>A1</kind>
<name>Chou</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725119</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2010/0312548</doc-number>
<kind>A1</kind>
<name>Herley</name>
<date>20101200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  9</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2011/0084965</doc-number>
<kind>A1</kind>
<name>Gould et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345426</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>&#x201c;Solid Ice: Provisioning Manager,&#x201d; Qumranet, Apr. 2008, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>&#x201c;Solid Ice: Virtual Desktop Server (VDS),&#x201d; Qumranet, Apr. 2008, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;Solid Ice: Connection Broker,&#x201d; Qumranet, Apr. 2008, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>&#x201c;Solid Ice: Overview,&#x201d; Qumranet, Apr. 2008, 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>&#x201c;KVM&#x2014;Kernel-based Virtualization Machine,&#x201d; Qumranet, white paper, 2006, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Red Hat Israel Office Action for U.S. Appl. No. 12/714,380, mailed Oct. 13, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Red Hat Israel Notice of Allowance for U.S. Appl. No. 12/714,380, mailed Mar. 21, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709214</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345428</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>345643</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110210972</doc-number>
<kind>A1</kind>
<date>20110901</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tsirkin</last-name>
<first-name>Michael S.</first-name>
<address>
<city>Yokneam</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Eidus</last-name>
<first-name>Izik</first-name>
<address>
<city>Kfar Saba</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Tsirkin</last-name>
<first-name>Michael S.</first-name>
<address>
<city>Yokneam</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Eidus</last-name>
<first-name>Izik</first-name>
<address>
<city>Kfar Saba</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lowenstein Sandler LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Red Hat Israel, Ltd.</orgname>
<role>03</role>
<address>
<city>Raanana</city>
<country>IL</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Broome</last-name>
<first-name>Said</first-name>
<department>2679</department>
</primary-examiner>
<assistant-examiner>
<last-name>Hoang</last-name>
<first-name>Peter</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A local system receives a graphics structure generated from an application hosted within the local system, where the application is accessed by a remote system. The graphics structure represents a display output from the application, where the graphics structure is generated in response to a change of display characteristics of the local system. A hash generator generates a first hash from the graphics structure according to a hash algorithm. It is determining whether there is an existing hash maintained by the local system that matches the first hash. The local system transmits the first hash to the remote system without sending the graphics structure if there is an existing hash matching the first hash. The first hash is used by the remote system to identify a graphics structure maintained by the remote system for rendering a display of the remote system.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="180.26mm" wi="237.57mm" file="US08626824-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="244.77mm" wi="185.17mm" orientation="landscape" file="US08626824-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="169.33mm" wi="164.76mm" orientation="landscape" file="US08626824-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="178.56mm" wi="202.61mm" orientation="landscape" file="US08626824-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="250.44mm" wi="190.42mm" orientation="landscape" file="US08626824-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="172.97mm" wi="180.85mm" orientation="landscape" file="US08626824-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="160.44mm" wi="202.95mm" orientation="landscape" file="US08626824-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="170.01mm" wi="190.08mm" orientation="landscape" file="US08626824-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="241.22mm" wi="168.06mm" file="US08626824-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="239.86mm" wi="187.11mm" file="US08626824-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates generally to graphics remoting. More particularly, this invention relates to persisting graphics structures across resolution changes in graphics remoting applications.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Graphics remoting systems allow computing device network clients to connect to a remote server (also referred to as a hosting server or host) and receive a visual representation of at least some of the graphics being displayed at or output by the server. Often the network client can display all the graphical output associated with the session. Likewise, the client may be allowed to interact with the session, injecting user input, generated from devices such as a mouse or keyboard connected to the client, into the server session.</p>
<p id="p-0004" num="0003">Graphical applications, such as video games, can request displaying complex graphics structures, such as textures and surfaces, on screen. How these graphics structures are displayed by a graphical user interface (GUI) system (also referred to as a window system such as X Window System&#x2122;) depends on the display resolution. When an application desires to change the display resolution, it sends a command to the window system.</p>
<p id="p-0005" num="0004">When the display resolution changes, typically the graphics structures have to be redrawn differently. Sometimes, an application may also desire to use different graphics structures. Currently, when the display resolution changes, the window system notifies a graphics driver regarding the change of display resolution. The window system discards all graphics structures (e.g., textures) and notifies the applications of the display resolution changed. The applications have to send all graphics structures which are then re-rendered by the graphics driver. This works relatively well for the local window system.</p>
<p id="p-0006" num="0005">However, in a graphics remoting configuration, when the display resolution changes, an amount of data exchanged between a local system and a remote system will be relatively large since all graphics structures have to be resent from a hosting server to a client.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a network configuration according to one embodiment.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to one embodiment of the invention.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an example of a virtualized environment which may be used with one embodiment of the invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> is flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> is flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> is a block diagram illustrating a data processing system which may be used with an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0017" num="0016">In the following description, numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.</p>
<p id="p-0018" num="0017">Reference in the specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification do not necessarily all refer to the same embodiment.</p>
<p id="p-0019" num="0018">According to some embodiments, graphics structures are maintained by a client system and/or a host system. In addition, for each graphics structure, a hash is generated from the graphics structure and maintained by both the client system and the host system. When a display resolution is changed at the host system, a new graphics structure is generated according to the new display resolution and a new hash is generated from the new graphics structure. The host system then compares the new hash with the ones maintained locally to determine whether there is an existing hash that matches the new hash. If there is an existing hash that matches the new hash, the new hash is transmitted from the host system to the client system without sending the entire graphics structure. When the client system receives the hash, the client system identifies a graphics structure stored locally based on the hash and renders the graphics structure in a display of the client. Thus, instead of resending the entire graphics structure, if the host system determines that the client system already had the same graphics structure based on the comparison of the hashes, the hash is sent to the client. The entire new graphics structure is sent to the client only if it is determined that the client does not have the new graphics structure (e.g., there is no existing hash matching the new one). As a result, the traffic across the network between the host system and the client system can be reduced significantly.</p>
<p id="p-0020" num="0019">According to an alternatively embodiment, when a client requests changing the display resolution of the host, the client transmits all hashes to the host, the hashes representing all graphics structures stored locally at the client. When the host generates a new hash based on the new graphics structure in view of the new display resolution, the host can compare the new hash with the hashes received from the client to determine whether the new graphics structure needs to be sent to the client over the network. In this situation, the host does not have to maintain all the graphics structures and hashes for the particular client locally.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a network configuration according to one embodiment. Referring to <figref idref="DRAWINGS">FIG. 1</figref>, system <b>100</b> includes, but is not limited to, one or more clients <b>101</b>-<b>102</b> communicatively coupled to a remote server or a cluster of servers <b>104</b> over a network <b>103</b>. Network <b>103</b> may be a local area network (LAN) or a wide area network (WAN) and may be a combination of one or more networks. Clients <b>101</b>-<b>102</b> can be any computer system in communication with server <b>104</b> for remote execution of applications at server <b>104</b>. For example, system <b>100</b> may be implemented as part of a graphics remoting system. Generally, a client such as client <b>101</b> can be a computer system in communication with server <b>104</b> for remote execution of applications at server <b>104</b>. Thus, input data (e.g., mouse and keyboard input) representing application commands is received at a client (e.g., client <b>101</b>) and transferred over network <b>103</b> to server <b>104</b>. Server <b>104</b> can be any computing system.</p>
<p id="p-0022" num="0021">In response to client side data, an application (e.g., application <b>111</b>) can generate output display commands (e.g., graphics commands referred to herein as graphics data or structures), which may include one or more paint and/or draw operations, for example, in the form of executable instructions. The output display commands can then be transmitted (e.g., as graphics update commands) with or without compression by a remote display system (e.g., remote display system <b>112</b>) to the remote client (e.g. client <b>101</b>) and a remote display application (e.g., rendering agent <b>106</b>) of the remote client can collect the graphics commands and generate corresponding drawing commands for rendering data at the display (e.g., display <b>105</b>) of the client.</p>
<p id="p-0023" num="0022">The data may be exchanged between client <b>101</b> and server <b>104</b> using a variety of communication protocols, such as, for example, remote desktop protocol (RDP) available from Microsoft&#xae; Corporation of Redmond, Wash. or alternatively, SPICE&#x2122; (simple protocol for independent computing environments) protocol available from Red Hat, Inc.</p>
<p id="p-0024" num="0023">Referring back to <figref idref="DRAWINGS">FIG. 1</figref>, in this example, application <b>111</b> is hosted by server <b>104</b> and remotely accessed by client <b>101</b>. For example, application <b>111</b> may be a virtual desktop application hosted by a virtual desktop server (VDS) and remotely accessed by client <b>101</b>, similar to the Solid ICE&#x2122; (independent computing environments) virtualization solution available from Red Hat. Application <b>111</b> generates an output (e.g., an image to be displayed) in a form of graphics structures, which are transmitted to client <b>101</b> over network <b>103</b> and rendered by rendering agent <b>106</b> in a display <b>105</b> of client <b>101</b>. Typically, as described above, when a display resolution changes at server <b>104</b>, client <b>101</b> may discard the existing graphics structures and the new graphics structures may have to be transmitted from server <b>104</b> to client <b>101</b>. These graphics structures tend to be complicated and large in size. As a result, amount traffic between client <b>101</b> and server <b>104</b> across network <b>103</b> is significant.</p>
<p id="p-0025" num="0024">According to one embodiment, graphics structures used by display outputs of application <b>111</b> are optionally maintained within server <b>104</b> as graphics structures <b>115</b> stored in a storage device <b>114</b>. For example, a graphics structure can be a sphere, which may be described by specifying a sphere center, radius, color, and opacity, etc. In a graphics application such as a video game, more complex graphics structures are needed to draw a video game scene such as textures (e.g., essentially a picture drawn on a surface of a shape). The graphics structures are transmitted by remote display system <b>112</b> to client <b>101</b> over network <b>103</b>, where the graphics structures are rendered by rendering agent <b>106</b> in display <b>105</b>.</p>
<p id="p-0026" num="0025">In addition, for each graphics structure that is transmitted to client <b>101</b>, hash generator <b>113</b> is configured to generate a hash from the respective graphics structure, where the hash is used as a graphics structure identifier identifying a particular graphics structure. A hash can be generated using a variety of hashing algorithms, such as, for example, SHA-1 or MD5 algorithms. The hashes for all graphics structures generated and transmitted to client <b>101</b> are stored locally as hashes <b>116</b> in storage device <b>114</b> of server <b>104</b>. On the other side, whenever client <b>101</b> receives a graphics structure from server <b>104</b> to be rendered by rendering agent <b>106</b>, such a graphics structure is stored locally in storage device <b>108</b> as graphics structures <b>109</b>. In addition, hash generator <b>107</b> is configured to generate a hash from each graphics structure and to store in storage device <b>108</b> as hashes <b>110</b>. Storage device <b>114</b> may consist of one or more types of removable storage and/or non-removable storage.</p>
<p id="p-0027" num="0026">When there is a change in display characteristics of a display at server <b>104</b>, a notification regarding changing of the display resolution is transmitted to client <b>101</b>. For example, a display resolution may be changed at server <b>104</b> in response to a user input, either from a user of client <b>101</b> or from a user of server <b>104</b>. Typically, when such a notification is received at client <b>101</b>, an existing graphics structure or structures are discarded at client <b>101</b>. A new graphics structure is generated within server <b>104</b> in response to the change of display resolution and the new graphics structure is transmitted to client <b>101</b> for updating the display of client <b>101</b>. Often when the display resolution changes, underlying graphics structures do not change that much or do not change at all. However, in a conventional system, new graphics structures are still transmitted to client <b>101</b> from server, even though the basic information of the graphics structures has not been changed due to the change of display resolution. As a result, unnecessary traffic can be incurred over network <b>103</b>.</p>
<p id="p-0028" num="0027">According to one embodiment, a new hash is generated from the new graphics structure by hash generator <b>113</b>. The new hash is compared with existing hashes <b>116</b> to determine whether there is an existing hash that matches the new hash. If there is an existing hash that matches the new hash, the new hash or the existing matched hash is transmitted from server <b>104</b> to client <b>101</b>, without transmitting the corresponding graphics structure. When there is an existing hash that matches the new hash, it means that the corresponding graphics structure has been previously transmitted to client <b>101</b> and it is assumed that client <b>101</b> maintains all graphics structures it received from server <b>104</b>. The new graphics structure is transmitted to client <b>101</b> only when there is no existing hash that matches the new hash. In this situation, at least the new hash is stored in storage device <b>114</b> as part of hashes <b>116</b> for subsequent matching.</p>
<p id="p-0029" num="0028">When client <b>101</b> receives the new hash from server <b>104</b>, the new hash is compared with hashes <b>110</b> stored locally in storage device <b>108</b>. Based on the comparison, the corresponding graphics structure is identified from graphics structures <b>109</b> locally maintained and stored in storage device <b>108</b>. The identified graphics structure is then rendered for updating display <b>105</b>. As a result, the new graphics structure does not need to be retransmitted and the traffic over network <b>103</b> can be reduced for this purpose. Note that in this configuration, server <b>104</b> may not need to maintain graphics structures <b>115</b>. Rather, server <b>104</b> only needs to maintain hashes <b>116</b> for the purpose of determining whether a particular graphics structure has been previously transmitted to client <b>101</b> by matching the corresponding hash with those existing hashes <b>116</b>. Note that some or all of the components as shown in <figref idref="DRAWINGS">FIG. 1</figref> can be implemented in software, firmware, hardware, or a combination thereof.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to one embodiment of the invention. Note that method <b>200</b> may be performed by processing logic which may include software, firmware, hardware, or a combination thereof. For example, method <b>200</b> may be performed by rendering agent <b>106</b> and/or hash generator <b>107</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Referring to <figref idref="DRAWINGS">FIG. 2</figref>, at block <b>201</b>, a hash is received from a remote system, the hash representing a graphics structure of a display output from an application hosted by the remote system in view of a new display resolution. Based on the hash, at block <b>202</b>, a graphics structure is identified from a set of graphics structures locally maintained. The set of graphics structures may be those previously received from the remote system. At block <b>203</b>, the identified graphics structure is rendered to update a display of a local system.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention. Note that method <b>300</b> may be performed by processing logic which may include software, firmware, hardware, or a combination thereof. For example, method <b>300</b> may be performed by remote display system <b>112</b> and/or hash generator <b>113</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Referring to <figref idref="DRAWINGS">FIG. 3</figref>, in response to a request for changing a display resolution of a local system, at block <b>301</b>, the display resolution of the local system is updated in view of the new display resolution. At block <b>302</b>, a new graphics structure representing a display output of an application of the local system is generated and at block <b>303</b>, a new hash is generated from the new graphics structure. At block <b>304</b>, processing logic determines whether there is an existing hash maintained locally that matches the new hash. If there is an existing hash matching the new hash, at block <b>305</b>, the new hash is transmitted to the remote system for updating a display of the remote system without transmitting the new graphics structure. At block <b>306</b>, the new graphics structure is transmitted to the remote system if there is no existing hash that matches the new hash.</p>
<p id="p-0032" num="0031">According to some embodiments, the techniques described above can be applied to a virtualized operating environment. <figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating an example of a virtualized environment which may be used with one embodiment of the invention. Referring to <figref idref="DRAWINGS">FIG. 4</figref>, system <b>400</b> includes one or more virtual machines <b>402</b>A-<b>402</b>B, which can be implemented in a form of a guest OS, hosted by a host OS <b>401</b>. Each of VMs <b>402</b>A-<b>402</b>B can host an application (e.g., applications <b>408</b>A-<b>408</b>B). Multiple guest OSes (e.g., guest OSes <b>402</b>A-<b>402</b>B) and the associated virtual machines may be controlled by host OS <b>401</b>.</p>
<p id="p-0033" num="0032">Typically, a host OS represents a virtual machine monitor (VMM) (also referred to as a hypervisor) for managing the hosted virtual machines. A guest OS may be of the same or different types with respect to the host OS. For example, a guest OS may be a Windows&#x2122; operating system from Microsoft Corporation of Redmond, Wash. and a host OS may be a LINUX operating system available from Red Hat, Inc. of Raleigh, N.C. In addition, the guest OSes running on a host can be of the same or different types. A virtual machine can be any type of virtual machines, such as, for example, hardware emulation, full virtualization, para-virtualization, and operating system-level virtualization virtual machines. Different virtual machines hosted by a server may have the same or different privilege levels for accessing different resources.</p>
<p id="p-0034" num="0033">Referring back to <figref idref="DRAWINGS">FIG. 4</figref>, each VM can include a display driver client (e.g., display driver clients <b>409</b>A-<b>409</b>B) to generate graphics structures of a display output of the corresponding application, a hash generator (e.g., hash generators <b>410</b>A-<b>410</b>B) to generate a hash (e.g., hashes <b>411</b>A-<b>411</b>B) for each graphics structure generated by the respective display driver client and to maintain the hashes in a local storage of the guest OS.</p>
<p id="p-0035" num="0034">For the purpose of illustration, when a display resolution of guest OS <b>402</b>A is changed, application <b>408</b>A is configured to generate a new graphics structure in view of the new display resolution, which is to be provided to host OS <b>401</b> by display driver client <b>409</b>A, and hash generator <b>410</b>A is configured to generate a new hash for the new graphics structure. For example, a user of host system <b>400</b> can select a window that hosts guest OS <b>402</b>A, right-click on the desktop within the window, and click a button requesting resolution change. Alternatively, a specific application running within guest OS <b>402</b>A can communicate with host OS <b>401</b> and request resolution change on behalf of the user. Furthermore, such a request may also be received from remote system <b>403</b> over a network as described above.</p>
<p id="p-0036" num="0035">Referring back to <figref idref="DRAWINGS">FIG. 4</figref>, the new hash is then compared, for example, by display driver client <b>490</b>A, with the existing hashes <b>411</b>A to determine whether there is an existing hash that matches the new hash. If there is an existing hash that matches the new hash, display driver client <b>409</b>A provides the new hash (or the corresponding existing hash) to host OS <b>401</b>, which may be received by display driver server <b>404</b>, where display driver server <b>404</b> may also serve as part of a remote display system as described above for a remote system <b>403</b> for remotely accessing application <b>408</b>A of guest OS <b>402</b>A. Note that module <b>404</b> may be shared among VMs <b>402</b>A-<b>402</b>B or alternatively, there is a specific display driver server/remote display system module for each VM.</p>
<p id="p-0037" num="0036">When module <b>404</b> receives the hash from guest OS <b>402</b>A, module <b>404</b> compares the hash with hashes <b>406</b> maintained by host OS <b>401</b> to determine whether there is an existing hash that matches the hash received from guest OS <b>402</b>A. If there is an existing hash that matches the hash received from guest OS <b>402</b>A, the corresponding graphics structure is identified from graphics structures <b>405</b> maintained by host OS <b>401</b> based on the hash and the identified graphics structure is then rendered for updating display <b>407</b> of host OS <b>401</b>. In this configuration, although guest OS <b>402</b>A and host OS <b>401</b> are located within the same system, communications between a guest OS and a host OS in a virtualized operating environment are still relatively expensive in terms of processing bandwidth. However, since they are located within the same system, remote access protocols may not be needed. Rather, communications between a guest OS and a host OS for this purpose can be done via a shared memory and/or input/output (IO) commands. However, the aforementioned remote access techniques can be applied when remote system <b>403</b> accesses application <b>408</b>A hosted by guest OS <b>402</b>A.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention. For example, method <b>500</b> may be performed by display driver server <b>404</b> of <figref idref="DRAWINGS">FIG. 4</figref>. Referring to <figref idref="DRAWINGS">FIG. 5</figref>, at block <b>501</b>, a hash is received from a guest OS, where the hash represents a graphics structure of a display output of an application running within the guest OS in view of a new display resolution. At block <b>502</b>, a graphics structure stored locally within a host OS is identified based on the hash. At block <b>503</b>, the graphics structure is rendered at a display of the host OS.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 6</figref> is flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention. For example, method <b>600</b> may be performed by display driver client <b>409</b>A of <figref idref="DRAWINGS">FIG. 4</figref>. Referring to <figref idref="DRAWINGS">FIG. 6</figref>, at block <b>601</b>, a request is received for modifying a display resolution of a guest OS and in response, the display of the guest OS is updated in view of the new display resolution. At block <b>602</b>, a new graphics structure is generated which represents a display output of an application running within the guest OS in view of the new display resolution. At block <b>603</b>, a new hash is generated from the new graphics structure. At block <b>604</b>, it is determined whether there is an existing hash that matches the new hash. If so, at block <b>505</b>, the new hash is transmitted to the host OS without transmitting the new graphics structure; otherwise at block <b>606</b>, the new graphics structure is transmitted to the host OS.</p>
<p id="p-0040" num="0039">According to some embodiments, instead of having a hosting node or guest OS to maintain all hashes, when a request for changing a display resolution is received, the client system is also notified of this request. In response, the client system sends all of the hashes it maintains over a time period to the hosting node or guest OS to allow the hosting node to determine whether the client system already has a particular graphics structure.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention. For example, method <b>700</b> may be performed by rendering agent <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref> or display driver server <b>404</b> of <figref idref="DRAWINGS">FIG. 4</figref>. Referring to <figref idref="DRAWINGS">FIG. 7</figref>, at block <b>701</b>, a request for modifying a display resolution of a remote system (or guest OS) is received. At block <b>702</b>, one or more hashes representing one or more graphics structures maintained locally are transmitted to the remote system. At block <b>703</b>, a hash is received from the remote system, where the hash represents a graphics structure of the display output of an application running within the remote system in view of a new display resolution. At block <b>704</b>, a graphics structure is identified in view of the hash received from the remote system and at block <b>705</b>, the identified graphics structure is rendered at a display of the local system.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram illustrating a method for persisting graphics structures in a graphics remoting environment according to another embodiment of the invention. For example, method <b>800</b> may be performed by remote display system <b>112</b> of <figref idref="DRAWINGS">FIG. 1</figref> and/or display driver server <b>404</b> of <figref idref="DRAWINGS">FIG. 4</figref>. Referring <figref idref="DRAWINGS">FIG. 8</figref>, in response to a request to change a display resolution of a local system (or guest OS), at block <b>801</b>, the display resolution is updated at the local system. At block <b>802</b>, a new graphics structure is generated in view of the new display resolution, where the graphics structure represents a display output of an application running within the local system. At block <b>803</b>, a new hash is generated based on the new graphics structure. At block <b>804</b>, one or more hashes are received from the remote system, each representing a graphics structure previously rendered and maintained by the remote system. At block <b>805</b>, the new hash is compared with each of the hashes received from the remote system to determine whether the new hash matches any one of the hashes of the remote system. If there is a match, at block <b>806</b>, the new hash is transmitted to the remote system without having to send the entire new graphics structure to the remote system; otherwise, at block <b>807</b>, the new graphics structure is sent to the remote system only if there is no match.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system <b>1200</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the Internet. The machine may operate in the capacity of a server or a client machine in client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0044" num="0043">The exemplary computer system <b>1200</b> includes a processor <b>1202</b>, a main memory <b>1204</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory <b>1206</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device <b>1216</b>, which communicate with each other via a bus <b>1208</b>.</p>
<p id="p-0045" num="0044">Processor <b>1202</b> represents one or more general-purpose processors such as a microprocessor, a central processing unit, or the like. More particularly, the processor may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor <b>1202</b> may also be one or more special-purpose processors such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor <b>1202</b> is configured to execute the instructions <b>1226</b> for performing the operations and steps discussed herein.</p>
<p id="p-0046" num="0045">The computer system <b>1200</b> may further include a network interface device <b>1222</b>. The computer system <b>1200</b> also may include a video display unit <b>1210</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device <b>1212</b> (e.g., a keyboard), a cursor control device <b>1214</b> (e.g., a mouse), and a signal generation device <b>1220</b> (e.g., a speaker).</p>
<p id="p-0047" num="0046">The data storage device <b>1216</b> may include a computer-accessible storage medium <b>1224</b> (also known as a machine-readable storage medium or a computer-readable medium) on which is stored one or more sets of instructions or software <b>1226</b> embodying any one or more of the methodologies or functions described herein. The instructions or software <b>1226</b> may also reside, completely or at least partially, within the main memory <b>1204</b> and/or within the processor <b>1202</b> during execution thereof by the computer system <b>1200</b>, the main memory <b>1204</b> and the processor <b>1202</b> also constituting machine-accessible storage media. The instructions or software <b>1226</b> may further be transmitted or received over a network via the network interface device <b>1222</b>.</p>
<p id="p-0048" num="0047">The computer-readable storage medium <b>1224</b> may also be used to store instructions or software <b>1226</b> persistently. While the computer-readable storage medium <b>1224</b> is shown in an exemplary embodiment to be a single medium, the term &#x201c;computer-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The terms &#x201c;computer-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term &#x201c;computer-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.</p>
<p id="p-0049" num="0048">The modules <b>1228</b>, components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the modules <b>1228</b> can be implemented as firmware or functional circuitry within hardware devices. Further, the modules <b>1228</b> can be implemented in any combination hardware devices and software components.</p>
<p id="p-0050" num="0049">In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.</p>
<p id="p-0051" num="0050">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0052" num="0051">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;processing&#x201d; or &#x201c;computing&#x201d; or &#x201c;calculating&#x201d; or &#x201c;determining&#x201d; or &#x201c;displaying&#x201d; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0053" num="0052">Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices), etc.</p>
<p id="p-0054" num="0053">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.</p>
<p id="p-0055" num="0054">In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A machine-implemented method for persisting graphics structures in a graphics remoting environment, the method comprising:
<claim-text>identifying, by a local display system of a virtual machine running on a host computer system, a graphics structure generated from an application within the virtual machine, the application accessed by a remote client computer system, the graphics structure representing a display output from the application, wherein the graphics structure is generated in response to a change of display characteristics of the local display system;</claim-text>
<claim-text>generating a first hash from the graphics structure according to a hash algorithm;</claim-text>
<claim-text>determining, by the local display system, whether there is an existing hash maintained by the local display system that matches the first hash; and</claim-text>
<claim-text>transmitting, by the local display system, the first hash to a remote display system of a host operating system of the host computer system without sending the graphics structure if there is an existing hash matching the first hash, wherein the first hash is used by the remote display system to identify a graphics structure for rendering a display of the remote client computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>transmitting the graphics structure to the remote display system if there is no existing hash that matches the first hash; and</claim-text>
<claim-text>storing the first hash in a storage device of the local display system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>maintaining a plurality of hashes within the local display system, each hash represents a graphics structure that has been transmitted to the remote display system; and</claim-text>
<claim-text>comparing the first hash with at least some of the hashes to determine whether there is an existing hash that matches the first hash.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the change of the display characteristics includes a change of display resolution of the display.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local display system is hosted by a guest operating system (OS) as a part of the virtual machine (VM).</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A non-transitory computer readable medium including instructions that, when executed by a host processing system, cause the processing system to perform a method comprising:
<claim-text>identifying, by a local display system of a virtual machine running on a host processing system, a graphics structure generated from an application within the virtual machine, the application accessed by a remote client computer system, the graphics structure representing a display output from the application, wherein the graphics structure is generated in response to a change of display characteristics of the local display system;</claim-text>
<claim-text>generating a first hash from the graphics structure according to a hash algorithm;</claim-text>
<claim-text>determining whether there is an existing hash maintained by the local display system that matches the first hash; and</claim-text>
<claim-text>transmitting the first hash to a remote display system of a host operating system of the host processing system without sending the graphics structure if there is an existing hash matching the first hash, wherein the first hash is used by the remote display system to identify a graphics structure for rendering a display of the remote client computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer readable medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the method further comprises:
<claim-text>transmitting the graphics structure to the remote display system if there is no existing hash that matches the first hash; and</claim-text>
<claim-text>storing the first hash in a storage device of the local display system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer readable medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the method further comprises:
<claim-text>maintaining a plurality of hashes within the local display system, each hash represents a graphics structure that has been transmitted to the remote display system; and</claim-text>
<claim-text>comparing the first hash with at least some of the hashes to determine whether there is an existing hash that matches the first hash.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer readable medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the change of the display characteristics includes a change of display resolution of the display.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer readable medium of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the local display system is hosted by a guest operating system (OS) as a part of the virtual machine.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A system, comprising:
<claim-text>a local display system of a virtual machine to identify a graphics structure generated from an application within the virtual machine, the application accessed by a remote client computer system, the graphics structure representing a display output from the application, wherein the graphics structure is generated in response to a change of display characteristics of the local display system; and</claim-text>
<claim-text>a hash generator coupled to the local display system to generate a first hash from the graphics structure according to a hash algorithm, wherein the local display system is configured to determine whether there is an existing hash maintained locally that matches the first hash and to transmit the first hash to a remote display system of a host operating system of the host computer system without sending the graphics structure if there is an existing hash matching the first hash, wherein the first hash is used by the remote display system to identify a graphics structure for rendering a display of the remote client computer system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the remote display system is configured to transmit the graphics structure to the remote display system if there is no existing hash that matches the first hash and to store the first hash in a storage device.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A non-transitory machine-implemented method for persisting graphics structures in a graphics remoting environment, the method comprising:
<claim-text>receiving, by a rendering agent of a local computer system, a hash from a remote system representing a graphics structure, the graphics structure representing a display output of an application hosted by the remote system and accessed from the local system, wherein the graphics structure is generated by the remote system in response to a change of display characteristics of the remote system;</claim-text>
<claim-text>identifying, by the rendering agent, a graphics structure from a pool of one or more graphics structures maintained by the local system based on the hash, wherein the one or more graphics structures of the pool were received from the remote system previously; and</claim-text>
<claim-text>rendering, by the rendering agent, the identified graphics structure on a display of the local system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>for each of the one or more graphics structures in the pool received from the remote system, generating a hash from the corresponding graphics structure; and</claim-text>
<claim-text>storing hashes for the one or more graphics in a storage device of the local system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein identifying the graphics structure based on the hash comprises:
<claim-text>comparing the hash received from the remote system with the hashes associated with the pool of the graphics structures; and</claim-text>
<claim-text>identifying a graphics structure from the pool of graphics structures having a hash that matches the hash from the remote system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the local system is hosted by a host operating system (OS), and wherein the remote system is hosted by a guest OS as a part of a virtual machine (VM) hosted by the host OS.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A non-transitory computer readable medium including instructions that, when executed by a processing system, cause the processing system to perform a method comprising:
<claim-text>receiving, by a rendering agent of a local system, a hash from a remote system representing a graphics structure, the graphics structure representing a display output of an application hosted by the remote system and accessed from the local system, wherein the graphics structure is generated by the remote system in response to a change of display characteristics of the remote system;</claim-text>
<claim-text>identifying, by the rendering agent, a graphics structure from a pool of one or more graphics structures maintained by the local system based on the hash, wherein the one or more graphics structures of the pool were received from the remote system previously; and</claim-text>
<claim-text>rendering, by the rendering agent, the identified graphics structure on a display of the local system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the method further comprises:
<claim-text>for each of the one or more graphics structures in the pool received from the remote system, generating a hash from the corresponding graphics structure; and</claim-text>
<claim-text>storing hashes for the one or more graphics in a storage device of the local system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein identifying the graphics structure based on the hash comprises:
<claim-text>comparing the hash received from the remote system with the hashes associated with the pool of the graphics structures; and</claim-text>
<claim-text>identifying a graphics structure from the pool of graphics structures having a hash that matches the hash from the remote system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the local system is hosted by a host operating system (OS), and wherein the remote system is hosted by a guest OS as a part of a virtual machine (VM) hosted by the host OS.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626713-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626713</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12963146</doc-number>
<date>20101208</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707639</main-classification>
<further-classification>707825</further-classification>
</classification-national>
<invention-title id="d2e43">Multiple contexts in a redirect on write file system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5287496</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>19940200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5553279</doc-number>
<kind>A</kind>
<name>Goldring</name>
<date>19960900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707615</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5819292</doc-number>
<kind>A</kind>
<name>Hitz et al.</name>
<date>19981000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5864849</doc-number>
<kind>A</kind>
<name>Bohannon et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707648</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6085197</doc-number>
<kind>A</kind>
<name>Federighi et al.</name>
<date>20000700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6233105</doc-number>
<kind>B1</kind>
<name>Chen et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6237001</doc-number>
<kind>B1</kind>
<name>Bamford et al.</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6529913</doc-number>
<kind>B1</kind>
<name>Doig et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707999101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6560601</doc-number>
<kind>B1</kind>
<name>Bjornerstedt</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6779093</doc-number>
<kind>B1</kind>
<name>Gupta</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7028083</doc-number>
<kind>B2</kind>
<name>Levine et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7111021</doc-number>
<kind>B1</kind>
<name>Lewis et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707649</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7418463</doc-number>
<kind>B2</kind>
<name>Verma et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7437360</doc-number>
<kind>B1</kind>
<name>Chitre et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7467265</doc-number>
<kind>B1</kind>
<name>Tawri et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711161</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7472129</doc-number>
<kind>B2</kind>
<name>Adya et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7526668</doc-number>
<kind>B2</kind>
<name>Shitomi et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7587429</doc-number>
<kind>B2</kind>
<name>Liedes et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7599941</doc-number>
<kind>B2</kind>
<name>Bahar</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7617217</doc-number>
<kind>B1</kind>
<name>Chen et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7640274</doc-number>
<kind>B2</kind>
<name>Tinker et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7640278</doc-number>
<kind>B2</kind>
<name>Lashley et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7698289</doc-number>
<kind>B2</kind>
<name>Kazar et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7734669</doc-number>
<kind>B2</kind>
<name>Kottomtharayil et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7747584</doc-number>
<kind>B1</kind>
<name>Jernigan, IV</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7814118</doc-number>
<kind>B2</kind>
<name>Kottomtharayil et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707770</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7840537</doc-number>
<kind>B2</kind>
<name>Gokhale et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707652</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7904434</doc-number>
<kind>B2</kind>
<name>Yalamanchi et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707703</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7953706</doc-number>
<kind>B2</kind>
<name>Prahlad et al.</name>
<date>20110500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707665</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7984085</doc-number>
<kind>B1</kind>
<name>Aggarwal et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707825</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>8095511</doc-number>
<kind>B2</kind>
<name>Zwilling et al.</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707649</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2008/0256138</doc-number>
<kind>A1</kind>
<name>Sim-Tang</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2009/0240744</doc-number>
<kind>A1</kind>
<name>Thomson et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2009/0319486</doc-number>
<kind>A1</kind>
<name>Surlaker et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2009/0327798</doc-number>
<kind>A1</kind>
<name>D'Amato et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2010/0125751</doc-number>
<kind>A1</kind>
<name>Mckean</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2011/0178972</doc-number>
<kind>A1</kind>
<name>Navarro et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2011/0238936</doc-number>
<kind>A1</kind>
<name>Hayden</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2012/0030265</doc-number>
<kind>A1</kind>
<name>Anderson et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2012/0150800</doc-number>
<kind>A1</kind>
<name>Adkins et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2012/0150926</doc-number>
<kind>A1</kind>
<name>Adkins et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2012/0151245</doc-number>
<kind>A1</kind>
<name>Chang et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2012/0216074</doc-number>
<kind>A1</kind>
<name>Chang et al.</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>WO</country>
<doc-number>2010042109</doc-number>
<date>20100200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Ellenberg, Lars , &#x201c;DRBD 9 &#x26; Device-Mapper Linux Block Level Storage Replication&#x201d;, 2008-2009 , 12 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>Shvachko, Konstantin et al., &#x201c;The Hadoop Distributed File System&#x201d;, <i>Google/IEEE </i>2010 , 10 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Suk, Jinsun et al., &#x201c;Snapshot-Based Data Backup Scheme: Open ROW Snapshot&#x201d;, <i>Lecture Notes in Computer Science</i>, vol. 5545 before INSPECT/Springer-Verlag 2009, pp. 657-666.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Ungureanu, Cristian et al., &#x201c;HydraFS: a High-Throughput File System for the HYDRAstor Content-Addressable Storage System&#x201d;, <i>NEC Laboratories America </i>2009-2010, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Weil, Sage et al., &#x201c;RADOS: A Scalable, Reliable Storage Service for Petabyte-Scale Storage Clusters&#x201d;, 2008-2009 , 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Cardellini, Valeria &#x201c;Redirection Algorithms for Load Sharing in Distributed Web-Server Systems&#x201d;, <i>Proceedings 19th IEEE International Conference on Distributed Computing Systems </i>May 31-Jun. 4, 1999 , 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Cluster File Systems, Inc., &#x201c;Lustre: A Scalable, High-Performance File System&#x201d;, Nov. 11, 2002 , 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Hewlett-Packard, &#x201c;Veritas Storage Foundation 4.1 Release Notes&#x201d;, Sep. 2005 , 58 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Lee, Edward K. &#x201c;A Comparison of Two Distributed Disk Systems&#x201d;, <i>Technical Report 155, Systems Research Center, Digital Equipment Corporation </i>Sep. 27, 2001 , 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Mushran, Sunil &#x201c;OCFS2&#x2014;A Cluster File System for Linus-User's Guide for Release 1.4&#x201d;, Jul. 2008, 44 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Panasas Inc., &#x201c;Object Storage Architecture&#x201d;, <i>Panasas White Paper </i>Jan. 25, 2005 , 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Symantec, &#x201c;The VERITAS Cluster File System: Technology and Usage&#x201d;, ISBN 0-321-446100 2010 , 252 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Tewari, Renu &#x201c;IBM Research Report&#x2014;Glamour: A Wide-Area File System Middleware Using NFSv4&#x201d;, 2005 , 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Veritas Software Corp., &#x201c;Veritas Storage Foundation 4.0 Release Notes&#x201d;, Nov. 2006, 40 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Weil, Sage A. &#x201c;Ceph: A Scalable, High-Performance Distributed File System&#x201d;, http://www.ssrc.ucsc.edu/Papers/weil-osdi06.pdf (Obtained from the Internet on Jan. 4, 2011) Nov. 2006, 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>Whitaker, Christopher &#x201c;Design of the Server for the Spiralog File System&#x201d;, <i>Digital Technical Journal</i>, vol. 8, No. 2 1996 , pp. 15-31.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>&#x201c;PCT Application No. PCT/EP2011/070938 International Search Report&#x201d;, May 10, 2012 , 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>&#x201c;U.S. Appl. No. 12/963,166 Office Action&#x201d;, May 17, 2012 , 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Cardellini, Valeria et al., &#x201c;Redirection Algorithms for Load Sharing in Distributed Web-Server Systems&#x201d;, Proceedings 19th IEEE International Conference on Distributed Computing Systems May 31-Jun. 4, 1999 , 8 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Cluster File Systems, Inc. &#x201c;Lustre: A Scalable, High-Performance File System&#x201d;, Nov. 11, 2002 , 13 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>Hewlett-Packard, ,&#x201c;Veritas Storage Foundation 4.1 Release Notes&#x201d;, Sep. 2005 , 58 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>Lee, Edward K. et al., &#x201c;A Comparison of Two Distributed Disk Systems&#x201d;, Technical Report 155, Systems Research Center, Digital Equipment Corporation Sep. 27, 2001 , 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Mushran, Sunil , &#x201c;OCFS2&#x2014;A Cluster File System for Linux&#x2014;User's Guide for Release 1.4&#x201d;, Jul. 2008 , 44 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>Panasas Inc. &#x201c;Object Storage Architecture&#x201d;, Panasas White Paper Jan. 25, 2005 , 24 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00069">
<othercit>Symantec, ,&#x201c;The VERITAS Cluster File System: Technology and Usage&#x201d;, ISBN 0-321-446100 2010 , 252 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00070">
<othercit>Tewari, Renu et al., &#x201c;IBM Research Report&#x2014;Glamour: A Wide-Area File System Middleware Using NFSv4&#x201d;, 2005 , 15 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00071">
<othercit>Veritas Software Corp., , &#x201c;Veritas Storage Foundation 4.0 Release Notes&#x201d;, Nov. 2006 , 40 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00072">
<othercit>Weil, Sage A. et al., &#x201c;Ceph: A Scalable, High-Performance Distributed File System&#x201d;, http://www.ssrc.ucsc.edu/Papers/weil-osdi06.pdf (Obtained from the Internet on Jan. 4, 2011) Nov. 2006 , 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00073">
<othercit>Whitaker, Christopher et al., &#x201c;Design of the Server for the Spiralog File System&#x201d;, Digital Technical Journal, vol. 8, No. 2 1996 , pp. 15-31.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00074">
<othercit>Xiao, Weijun et al., &#x201c;Design and Analysis of Block-Level Snapshots for Data Protection and Recovery&#x201d;, IEEE Transactions on Computers, vol. 58, No. 12 Dec. 2009 , pp. 1615-1625.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00075">
<othercit>Zhang, Chen et al., &#x201c;Supporting Multi-row Distributed Transactions with Global Snapshot Isolation Using Bare-bones HBase&#x201d;, 11th IEEE/ACM International Conference on Grid Computing 2010 , pp. 177-184.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00076">
<othercit>&#x201c;U.S. Appl. No. 12/963,166 Final Office Action&#x201d;, Aug. 30, 2012 , 34 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00077">
<othercit>U.S. Appl. No. 12/963,068, filed Dec. 8, 2010, Adkins, Janet E., et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00078">
<othercit>U.S. Appl. No. 12/963,078, filed Dec. 8, 2010, Chang, Joon et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00079">
<othercit>U.S. Appl. No. 12/963,166, filed Dec. 8, 2010, Adkins, Janet E., et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00080">
<othercit>U.S. Appl. No. 13/458,796, filed Apr. 27, 2012, Chang, Joon et al.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00081">
<othercit>&#x201c;U.S. Appl. No. 12/963,078 Office Action&#x201d;, Sep. 3, 2013 , 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00082">
<othercit>&#x201c;U.S. Appl. No. 13/458,796 Office Action&#x201d;, Aug. 23, 2013 , 32 Pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707639</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707770</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707652</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707665</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707202</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707102</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  8</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707649</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707825</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707768</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707703</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711161</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711162</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120150804</doc-number>
<kind>A1</kind>
<date>20120614</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Adkins</last-name>
<first-name>Janet E.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Joon</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Craft</last-name>
<first-name>David J.</first-name>
<address>
<city>Wimberly</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kumar</last-name>
<first-name>Manoj N.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Solomon</last-name>
<first-name>Andrew N.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Adkins</last-name>
<first-name>Janet E.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Chang</last-name>
<first-name>Joon</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Craft</last-name>
<first-name>David J.</first-name>
<address>
<city>Wimberly</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Kumar</last-name>
<first-name>Manoj N.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Solomon</last-name>
<first-name>Andrew N.</first-name>
<address>
<city>Cedar Park</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>DeLizio Gilliam, PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Trujillo</last-name>
<first-name>James</first-name>
<department>2159</department>
</primary-examiner>
<assistant-examiner>
<last-name>Vu</last-name>
<first-name>Thong</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method includes initiating committing to persistent storage of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system. Each of the plurality of data objects has a first copy of at least two copies of the data having a first context of at least two contexts. The method includes receiving, during committing to storage of the current consistency snapshot, an update to a data object of the plurality of data objects. The method also includes responsive to receipt of the update to the data object, creating a second copy of data of the data object from the first copy. The second copy of the data has a second context of the at least two contexts. The method includes responsive to receipt of the update to the data object, updating, based on the update, the second copy of the data of the data object.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="161.04mm" wi="127.85mm" file="US08626713-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="237.74mm" wi="126.75mm" file="US08626713-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="278.64mm" wi="195.50mm" file="US08626713-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="249.34mm" wi="149.86mm" file="US08626713-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="266.36mm" wi="175.09mm" file="US08626713-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="269.75mm" wi="189.40mm" file="US08626713-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="266.36mm" wi="184.57mm" file="US08626713-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="253.41mm" wi="164.85mm" file="US08626713-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Embodiments of the inventive subject matter generally relate to the field of computers, and, more particularly, to data backups in a redirect on write file system.</p>
<p id="p-0003" num="0002">File systems employ different methods to ensure the consistency therein in the event of a system crash. One approach is for the file system to write modified data to new locations on disk in a bottom-up order every few seconds. These views of the data stored therein are called consistency snapshots. After a system crash, the file system starts with the top of the last consistency snapshot of the file system which is guaranteed to be consistent.</p>
<p id="p-0004" num="0003">While the consistency snapshot is being written, new changes to the file system could be attempted by a user. It would be easy to block these changes until the consistency snapshot is committed to storage on a non-volatile machine-readable medium (e.g., hard disk). However, this approach is not acceptable because such an approach would lead to consistency snapshots not being transparent to the user. In particular, this approach can cause the entire file system to freeze every few seconds, while the consistency snapshot is being committed to storage.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">Embodiments include a method comprising initiating committing to storage, into a nonvolatile machine-readable medium, of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system, wherein each of the plurality of data objects have a first copy of data of the plurality of data objects having a commit-in-progress context. The method also includes assigning a generation value to the current consistency snapshot that is unique relative to generation values of other consistency snapshots. The method includes receiving, during the committing to storage of the current consistency snapshot, an update to a data object of the plurality of data objects. The method also includes, responsive to receiving the update to the data object, incrementing a generation value for the data object. The method includes, responsive to receiving the update to the data object, associating a generation value to the update that is derived from the generation value of the data object. Also responsive to receiving the update to the data object, the method includes creating a second copy of data of the data object that is copied from the first copy of the data of the data object. The second copy of the data of the data object has an update-in-progress context. Also responsive to receiving the update to the data object, the method includes updating, based on the update, the second copy of the data of the data object, independent of updating the first copy of the data of the data object.</p>
<p id="p-0006" num="0005">Embodiments include a method comprising initiating committing to persistent storage of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system, each of the plurality of data objects configurable to have multiple copies of data of the plurality of data objects having different contexts. Each of the plurality of data objects has a first copy of at least two copies of the data having a first context of at least two contexts. The method includes receiving during committing to storage of the current consistency snapshot, an update to a data object of the plurality of data objects. Responsive to receipt of the update to the data object, the method includes creating a second copy of data of the data object from the first copy. The second copy of the data having a second context of at least two contexts. Responsive to receipt of the update to the data object, the method also includes updating, based on the update, the second copy of the data of the data object.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006">The present embodiments may be better understood, and numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> depicts a conceptual diagram of a clustered file system configuration to provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> depicts a more detailed conceptual diagram of clustered file system configuration to provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example buffer header for a data object stored in a clustered file system, according to some embodiments.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> depicts an example timeline of committing a consistency snapshot relative to multiple generations of a data object, according to some embodiments.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. 5-6</figref> depict flowcharts of operations that provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 7</figref> depicts an example computer system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF EMBODIMENT(S)</heading>
<p id="p-0014" num="0013">The description that follows includes example systems, methods, techniques, instruction sequences and computer program products that embody techniques of the present inventive subject matter. However, it is understood that the described embodiments may be practiced without these specific details. For instance, although examples refer to a dual context for data that is part of a file system, some other example embodiments can configure any number of contexts for the data (e.g., three, four, five, etc.). Also while described such that a consistency snapshot is created for a file system, in some other example embodiments consistency snapshots at other levels can be created. For example, a user can configure a subset of files, a particular file, etc. to be backed up into a consistency snapshot more frequently than the periodic snapshots for the file system. Accordingly, some example embodiments are applicable to these other levels of consistency snapshots. In other instances, well-known instruction instances, protocols, structures and techniques have not been shown in detail in order not to obfuscate the description.</p>
<p id="p-0015" num="0014">A cluster is formed from multiple computer systems or nodes and resources, including persistent storage resources. A clustered file system is implemented across the storage resources of a cluster. The cluster storage resources are coupled to allow direct access by the nodes of the cluster. The storage resources can be directly cabled to the nodes and/or accessible via a network (e.g., storage area network).</p>
<p id="p-0016" num="0015">When a cluster is established, an administrator configures one of the nodes of the cluster to operate as a cluster leader. Embodiments can also program a cluster to automatically choose the leader. The cluster leader maintains cluster role data that indicates whether a node is a client, server, or both client and server. A server manages a fileset in the clustered file system. The cluster leader also maintains an indication of which node operates as a clustered file system manager. The clustered file system manager manages metadata for the clustered file system. In some embodiments, the clustered file system manager is the only server for the cluster&#x2014;not accounting for a failover server. In some embodiments, the clustered file system manager delegates management of filesets within the clustered file system to other nodes that are servers. The term &#x201c;fileset&#x201d; is used herein to refer to a set of files and/or directories. Along with the indication of which nodes are servers within the cluster, the cluster leader can maintain an indication of the filesets managed by the servers or &#x201c;fileset managers.&#x201d; A node within a cluster can be configured to operate as the cluster leader and the clustered file system manager. Whether a node operates as a cluster leader, server, client, etc., can be transparent to users of the cluster. A user will perceive a same behavior whether a node operates as both the client and server, or the client is on a remote node.</p>
<p id="p-0017" num="0016">A clustered file system manager can maintain metadata as a hierarchy of inodes for files of the clustered file system. The clustered file system metadata indicates information about logical units of storage of the clustered storage resources. The information can include location of a cluster storage unit (e.g., offset or block number) and length of an extent. In this description, the term &#x201c;block&#x201d; will be used to refer to a unit of cluster storage (e.g., a 4 KB block). This description will also use the term &#x201c;extent&#x201d; to refer to a set of contiguous blocks. When referring to a &#x201c;length&#x201d; of an extent, the length refers to a number of contiguous blocks that form the extent. Using these terms, a clustered file system views a pool of storage resources totaling 10 GB as 0 to 2,621,439 blocks, assuming 4 KB blocks. When a cluster client writes to logical units of cluster storage, the logical units (e.g., block numbers) are translated by a storage virtualization layer into physical locations (e.g., seek and offset) to carry out the write. Embodiments are not limited to blocks and extents, but accommodating every possible implementation for units of cluster storage (e.g., variable blocks, length in bits, etc.) would obfuscate the description.</p>
<p id="p-0018" num="0017">In some embodiments, the clustered file system manager maintains the clustered file system metadata (&#x201c;metadata&#x201d;) in a hierarchical data structure of inodes. The clustered file system manager maintains a root for the metadata a known location (i.e., predefined location) in the cluster storage resources (&#x201c;cluster storage&#x201d;). In a cluster that supports consistency snapshots, multiple locations in the cluster storage are reserved or defined for storing roots of consistency snapshots along with root metadata of the corresponding consistency snapshots. The root metadata helps to identify the consistency snapshots and to ensure integrity of the consistency snapshots. Embodiments can use time-based identifiers of consistency snapshots (e.g., generation value) that track progression of consistency snapshots and root checksums for verifying data integrity. Embodiments can write a first root checksum (&#x201c;header checksum&#x201d;) when a node begins to write the root and a second root checksum (&#x201c;trailer checksum&#x201d;) after the root has successfully been written to persistent cluster storage. Embodiments can use the header checksum and trailer checksum to ensure that writing of the root of a consistency snapshot was not interrupted. To recover from a failure, each of the locations is examined and the location with the most recent generation value is selected to allow recovery to begin with that consistency snapshot referenced by the selected location. Embodiments can configure a cluster to preserve any number of consistency snapshots.</p>
<p id="p-0019" num="0018">Some example embodiments provide consistency snapshots of data in a given file system, wherein such snapshots do not block or delay incoming file system transactions while the consistency snapshot is being committed to storage. Accordingly, updates to data stored in the file system can occur concurrently with the storage of consistency snapshots of the same file system. As further described below, at least two contexts for a same data object are maintained so that this concurrency is enabled.</p>
<p id="p-0020" num="0019">Consistency snapshots of the file system are associated with unique generation values. For example, the generation values can be integer values. Accordingly, when the committing to storage of a consistency snapshot (i.e., syncing of the consistency snapshot) is started, the generation for the file system can be incremented.</p>
<p id="p-0021" num="0020">In some example embodiments, any modification to an object (e.g., data, file, etc.) in the file system is associated with a transaction. The transaction is associated with a generation of the file system and thus associated with a consistency snapshot. In some example embodiments in a dual context configuration, objects in the file system are cached with at most two copies of the object at any one time. One copy is for the update in progress context. In particular, the update in progress context for an object is created after the object is being updated (e.g., a user updates the object) and while a consistency snapshot of the file system having the object is being committed to storage. A second copy of the object is for the commit in progress context. This copy of the object is a copy of the object that is being/will be committed to storage as part of the consistency snapshot. In some example embodiments, the two objects can be cached together as an array of size two. Also, the object has an array of two elements that stores the generation associated with each object in the array.</p>
<p id="p-0022" num="0021">In some example embodiments, to determine which context of the object to use, the generation value or generation number associated with the transaction is compared with the generation number of the cached object. The correct object array element is selected to modify the correct context of the object (e.g., update in progress context or the commit in progress context).</p>
<p id="p-0023" num="0022">As further described below, the consistency snapshots are periodically (e.g., every five seconds) created. These consistency snapshots are created to attempt to recover previous versions of objects. For example, these consistency snapshots can be used to recover objects stored in the file system after a system crash. In some example embodiments, if a consistency snapshot interval is reached before the previous consistency snapshot has finished its sync (commit to storage), the new consistency snapshot is skipped. In particular, no consistency snapshot would be taken at that time because a third copy of the cached object would be required.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> depicts a conceptual diagram of a clustered file system configuration to provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments. The depicted cluster comprises nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b>. The cluster also comprises pool <b>101</b> of directly accessible storage devices; network accessible storage devices <b>113</b>, <b>115</b>; and network infrastructure <b>111</b>. Nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b> communicate via network infrastructure <b>111</b>. Nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b> access storage device pool <b>101</b> via cables and access network accessible storage device <b>113</b>, <b>115</b> via network <b>111</b>. In the depicted cluster, any of the nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b> can be configured as the clustered file system manager for the cluster. The clustered file system manager can manage various aspects of the storage of files of the clustered file system therein. For example, the clustered file system manager can maintain metadata as a hierarchy of inodes for files of the clustered file system. In some example embodiments, some or all of the operations of the clustered file system manager can be distributed to the different nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b>. Some of these operations include operations related to providing multiple contexts for data objects in the clustered file system (as further described below). While described below such that these operations for providing multiple contexts for data objects is distributed across the different nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b>, in some other example embodiments, such operations can be performed by the clustered file system manager.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 2</figref> depicts a more detailed conceptual diagram of clustered file system configuration to provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments. <figref idref="DRAWINGS">FIG. 2</figref> depicts system <b>200</b> that includes node A <b>202</b>, node B <b>204</b>, and node N <b>206</b> that can be representative of the nodes <b>103</b>, <b>105</b>, <b>107</b>, <b>109</b> of <figref idref="DRAWINGS">FIG. 1</figref>. <figref idref="DRAWINGS">FIG. 2</figref> depicts a number of components within node A <b>202</b>. Although not shown, node B <b>204</b> and node N <b>206</b> can include similar components therein.</p>
<p id="p-0026" num="0025">In some example embodiments, system <b>200</b> is configured to store data objects of a file system that uses redirect-on-write (ROW) when data is modified. In particular with a redirect-on-write, a new block is allocated for modified data. The file system can include one or more file sets. In some example embodiments, each file in the file system can include an inode. The inode can be a separate file or a data structure that stores information or metadata about the data stored in the file. For example for each part of the file (e.g., a block), the inode can store the address, the fileset identification, and the generation of the fileset where this data is stored. In particular, blocks where the data of a file are stored can be distributed across different filesets and generations of filesets. The different filesets and generations of filesets can be distributed across multiple storage devices. With reference to <figref idref="DRAWINGS">FIG. 2</figref>, these filesets can be stored in machine-readable media in any of node A <b>202</b>, node B <b>204</b>, and node N <b>206</b>.</p>
<p id="p-0027" num="0026">System <b>200</b> includes a number of client devices (shown as client device <b>208</b> and client device <b>210</b>). System <b>200</b> includes network <b>212</b>, wherein node A <b>202</b>, node B <b>204</b>, node N <b>206</b>, client device <b>208</b>, and client device <b>210</b> are communicatively coupled together through network <b>212</b>.</p>
<p id="p-0028" num="0027">Node A <b>202</b> includes fileset manager <b>214</b>, nonvolatile machine-readable medium <b>216</b>, and memory (e.g., a volatile machine-readable medium) <b>218</b> that are communicatively coupled together. Fileset manager <b>214</b> can be software, firmware, hardware or a combination thereof. For example, fileset manager <b>214</b> can be part of an operating system executing on a processor (not shown) in node A <b>202</b>. Nonvolatile machine-readable medium <b>216</b> stores a number of consistency snapshots that have already been created (shown as consistency snapshot A <b>224</b> and consistency snapshot N <b>226</b>). Nonvolatile machine-readable medium <b>216</b> is also storing current consistency snapshot <b>228</b> that is in the process of being committed to storage therein. In some example embodiments, the consistency snapshots are periodically (e.g., every five seconds) created. The consistency snapshots include a snapshot of the data objects in the file system at a given point in time. In some example embodiments, a consistency snapshot stores any modifications (e.g., changes, additions, deletions, etc.) to the data objects that are in memory <b>218</b> that have not yet been committed to storage in nonvolatile machine-readable medium <b>216</b>, since the last consistency snapshot was committed to storage. These consistency snapshots are created to attempt to recover previous versions of objects stored in the file system. For example, these consistency snapshots can be used to recover objects stored in the file system after a system crash.</p>
<p id="p-0029" num="0028">Memory <b>218</b> stores a number of buffer headers (buffer header A <b>220</b>, buffer header N <b>222</b>, etc.). As further described below (see description of <figref idref="DRAWINGS">FIG. 3</figref>), the buffer headers store various metadata regarding a data object stored in the file system. Fileset manager <b>214</b> creates a buffer header for a data object in the memory <b>218</b> (if not yet created therein) if the data object is being accessed, modified, etc. For example, fileset manager <b>214</b> can create a buffer header when the data object is being accessed to create current consistency snapshot <b>228</b>, when the data object is being modified based on some client device request, etc. Based on the size of memory <b>218</b> and the number of data objects being accessed, fileset manager <b>214</b> may be required to flush some of the buffer headers whose associated data objects are not being accessed. Accordingly, fileset manager <b>214</b> may be required to recreate a buffer header for a data object in memory <b>218</b> when an access of the data object occurs. As further described below, the metadata in the buffer header stores a data pointer for the different copies of the data created for the given data object. In this example, buffer header A <b>220</b> has a first data pointer pointing to first copy of the data <b>250</b> and a second data pointer pointing to second copy of the data <b>252</b>. Similar data pointers can be created for the different buffer headers stored in memory <b>218</b>.</p>
<p id="p-0030" num="0029">In some example embodiments, multiple copies of data for a same data object in the file system are created. Each of the multiple copies of the data can be associated with a different context. In some example embodiments, a data object can have two copies of its data for a dual context configuration. As an example, the memory <b>218</b> stores two copies of data for a same data object (first copy of data <b>250</b> and second copy of data <b>252</b>). Any or all data objects stored in the file system can include this multi-copy, multi-context configuration. As shown, first copy of the data <b>250</b> has commit-in-progress context <b>254</b>, and second copy of the data <b>252</b> has update-in-progress context <b>256</b>. The two contexts for a same data object provide consistency snapshots of data in a file system, wherein such snapshots do not block or delay incoming file system transactions while the consistency snapshot is being committed to storage. Accordingly, updates to data stored in the file system can occur concurrently with the storage of consistency snapshots of the same file system. Specifically, commit-in-progress context <b>254</b> is associated with the copy of the data that is used to create this particular data object in current consistency snapshot <b>228</b>. Update-in-progress context <b>256</b> is associated with the copy of the data that is used to accept updates to the data object (e.g., a user making modifications to the data), while current consistency snapshot <b>228</b> is being committed to storage (created in nonvolatile machine-readable medium <b>216</b>).</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> also depicts a number of operations (operation <b>230</b>, operation <b>232</b>, and operation <b>234</b>). In this example, fileset manager <b>214</b> performs operation <b>230</b>, wherein the fileset manager <b>214</b> initiates committing to storage a current consistency snapshot. In particular, fileset manager <b>214</b> initiates creation of current consistency snapshot <b>228</b>. As part of the operation, fileset manager <b>214</b> can determine what data objects have been modified since the previous consistency snapshot was committed to storage. Fileset manager <b>214</b> can then write the modified data objects to new locations in nonvolatile machine-readable medium <b>216</b> in a bottom-up order. In some example embodiments, for each data object that is being stored in current consistency snapshot <b>228</b>, fileset manager <b>214</b> can create and/or update an associated buffer header in memory <b>218</b> (shown as operation <b>234</b>). If there is no associated buffer header in memory <b>218</b> for a data object, fileset manager <b>214</b> creates the buffer header when such data is being accessed for storing in current consistency snapshot <b>228</b>. As further described below in reference to <figref idref="DRAWINGS">FIGS. 4-6</figref>, the buffer header for each data object includes various metadata (e.g., generation, context, location, data pointers). Fileset manager <b>214</b> updates this metadata as part of creating the buffer header in memory <b>218</b>. Alternatively, if the buffer header is already instantiated within memory <b>218</b> for a given data object, fileset manager <b>214</b> can update the metadata therein. For example, fileset manager <b>214</b> can update various fields defining the generations and contexts for the multiple data being referenced by the data pointers (as further described below).</p>
<p id="p-0032" num="0031">Also, prior to completion of the committing to storage of current consistency snapshot <b>228</b>, a data object that is to be included in current consistency snapshot <b>228</b> is modified. In this example, client device <b>210</b> transmits an update request for a data object that is part of current consistency snapshot <b>228</b> over network <b>212</b> that is received by fileset manager <b>214</b> (shown as operation <b>232</b>). In this situation, fileset manager <b>214</b> creates a second copy of the data in the data object that is copied from the first copy of the data (for example see first copy of data <b>250</b> and second copy of data <b>252</b>). Also, the second copy of the data has a separate and different context from the context defined for the first copy of the data. In some example embodiments, a second copy of data is not created until the second copy is needed to provide dual context. For example, fileset manager <b>214</b> does not create the second copy until an update to a data object is requested while a consistency snapshot to store the same data object is in the process of being created. Also, fileset manager <b>214</b> creates and/or updates the buffer header for this data object in memory <b>218</b>. For example, fileset manager <b>214</b> can update the second data pointer in the buffer header to point to the second copy of the data. Also, fileset manager <b>214</b> updates the contexts so that the two different copies of the data have two different contexts. A more detailed description of the operations of fileset manager <b>214</b> to provide multiple contexts for a data object are set forth below in reference to the flowcharts of <figref idref="DRAWINGS">FIGS. 5-6</figref>.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 3</figref> depicts an example buffer header for a data object stored in a clustered file system, according to some embodiments. Buffer header <b>300</b> includes a number of fields related to a data object stored in a clustered file system. As described above, a buffer header for a data object is created in memory if not already in memory and in response to accessing the data object. For example, fileset manager <b>214</b> can access the data object for storing the data object in a consistency snapshot. In another example, fileset manager <b>214</b> can access the data object in response to some application updating the data object (e.g., a client devices <b>208</b>, <b>210</b>). In addition to creating the buffer header, fileset manager <b>214</b> can also populate the fields therein (<b>302</b>-<b>316</b>). Fields <b>302</b>-<b>304</b> define two different generation values for this data object. Last Committed Generation (LCG) field <b>302</b> defines the generation value for this data object during the last time when this data object was committed to storage in a consistency snapshot. Last Updated Generation (LUG) field <b>304</b> defines the generation value for this data object during the last time when this data object was being updated. The generation value of a data object is incremented each time the data object is initially updated but prior to the data object being committed to persistent storage as part of a consistency snapshot. For example, assume the current generation value of the data object is 15. If some application attempts to update the data object after the data object has been committed to persistent storage as part of a consistency snapshot, the generation value is incremented to 16. This generation value of this data object remains at 16 until the data object is committed to persistent storage as part of a consistency snapshot.</p>
<p id="p-0034" num="0033">Fields <b>306</b>-<b>308</b> define two different context values for this data object. These contexts values are set to either zero or one. In particular, the context for a data object flips between two values (as being part of a dual context). Last Committed Context (LCX) field <b>306</b> defines the context for this data object during the last time when this data object was committed to storage in a consistency snapshot. Last Updated Context (LUX) field <b>308</b> defines the context for this data object during the last time when this data object was being updated. For example, after the data object is committed to persistent storage as part of a consistency snapshot but prior to an update to the data object, both LCX field <b>306</b> and LUX <b>308</b> are set to a same value (e.g., one). Subsequently if some application attempts to update the data object, LUX field <b>308</b> is flipped to a value of zero. Subsequently when this data object is again committed to persistent storage as part of a consistency snapshot, LCX field <b>306</b> is flipped to a value of zero. The use of fields <b>302</b>-<b>308</b> are further described below in reference to the flowcharts of <figref idref="DRAWINGS">FIGS. 5-6</figref>.</p>
<p id="p-0035" num="0034">Physical location field <b>310</b> defines the physical location of the data object in the file system (e.g., the block number). Logical location field <b>312</b> defines the logical location where the data object is stored based on the location of the associated inode for this data object. For example, the logical location can include the physical location of the inode plus some offset where this data object is stored.</p>
<p id="p-0036" num="0035">Data pointer <b>0</b> field <b>314</b> stores a first data pointer (data pointer <b>0</b>) that is pointing to a first copy of the data of the data object in memory <b>218</b>. Data pointer <b>1</b> field <b>316</b> stores a second data pointer (data pointer <b>1</b>) that is pointing to a second copy of the data of the data object in memory <b>218</b>. As described above, a second copy of the data of the data object is not created until a second context for the data object is required. For example, only one copy of data of the data object can be provided after the data object has been committed to persistent storage as part of a consistency snapshot but prior to any subsequent updates to the data object. In this situation, data pointer <b>0</b> field <b>314</b> (pointing to the first copy of the data) points to the first copy of the data, and data pointer <b>1</b> field <b>316</b> (pointing to the second copy of the data) does not point to a location (e.g., NULL). A second copy of the data is created from a copy of the first copy of the data after a second context is needed for the data object. For example, assume that the data object is being stored in a consistency snapshot and concurrently a client device is requesting an update to the data object. In this situation, the second copy of the data object is created. Also, data pointer <b>0</b> field <b>314</b> (pointing to the first copy of the data) still points to the first copy of the data, and data pointer <b>1</b> field <b>316</b> (pointing to the second copy of the data) is now modified to point to the second copy of the data of the data object. The use of fields <b>314</b>-<b>316</b> are further described below in reference to the flowcharts of <figref idref="DRAWINGS">FIGS. 5-6</figref>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 4</figref> depicts an example timeline of committing a consistency snapshot relative to multiple generations of a data object, according to some embodiments. Time line <b>400</b> increases over time from left to right. Time point <b>402</b> is a time when generation N for a data object has ended. Time point <b>404</b> is a later time when a later generation (generation N+1) for the same data object has ended. Time point <b>406</b> is a later time when a later generation (generation N+2) for the same data object has ended. Time period <b>408</b> is a period of time when a consistency snapshot is being committed to persistent storage (that includes the data object). Time period <b>408</b> is initiated at time point <b>402</b> after generation N has ended. As described above as part of the commit, fileset manager <b>214</b> traverses the hierarchy of data objects in bottom up order to capture block numbers and checksums of the child data objects. As shown, within time period <b>408</b> there are two sub periods&#x2014;time period <b>410</b> and time period <b>412</b>. Time period <b>410</b> includes a period of time wherein one copy or version of the data object exists in memory. For example, this time period can include a time when the data object is being committed to persistent storage, wherein the data object has not yet been modified (e.g., by an application executing on a client device). Time period <b>412</b> includes a period of time wherein two copies or versions of the data object exists in memory. Time period <b>412</b> is initiated in response to the data object being modified while the commit of the consistency snapshot for generation N is still occurring. For example, this time period can include a time when the data object is being committed to persistent storage and when the data object is being modified (e.g., by an application executing on a client device). In other words, a first version of a data object exists as part of a generation N consistency snapshot being published. A second version of the data object exists in case of and/or due to a write to the data object occurring in a current generation N+1 prior to completion of publication of the generation N consistency snapshot.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIGS. 5-6</figref> depict flowcharts of operations that provide multiple contexts for data objects in a redirect-on-write file system, according to some example embodiments. <figref idref="DRAWINGS">FIG. 5</figref> depicts flowchart <b>500</b>, and <figref idref="DRAWINGS">FIG. 6</figref> depicts flowchart <b>600</b>. Flowchart <b>600</b> is a continuation of flowchart <b>500</b>, transitioning at point A. The flowcharts <b>500</b>-<b>600</b> are described as occurring in a decentralized configuration, wherein fileset manager <b>214</b> performs the operations therein. In some other example embodiments, the operations of the flowcharts <b>500</b>-<b>600</b> occur in a centralized configuration, wherein a file system manager can perform such operations. The flowcharts <b>500</b>-<b>600</b> depict an example situation where dual context for a data object is needed. In particular in this example situation, a consistency snapshot that includes a particular data object (termed &#x201c;data object A) is being committed to storage in a nonvolatile machine-readable medium because data object A has been modified since a prior consistency snapshot has been committed to storage. Concurrently with this consistency snapshot being committed to storage, there is an operation to further modify data object A. For example, an application executing on a client device can be modifying data object A. Operations of flowcharts <b>500</b>-<b>600</b> are described in reference to <figref idref="DRAWINGS">FIGS. 1-3</figref>. Flowchart <b>500</b> is first described, followed by the description of flowchart <b>600</b></p>
<p id="p-0039" num="0038">Fileset manager <b>214</b> initiates committing to storage, into a nonvolatile machine-readable medium, of a current consistency snapshot that includes a number of data objects in the file system (<b>502</b>). In some example embodiments, fileset manager <b>214</b> periodically commits to storage of a current consistency snapshot (e.g., three seconds, five seconds, 10 seconds, etc.). Accordingly, this operation can be one of the periodic operations for creating a consistency snapshot. With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> initiates committing to storage of current consistency snapshot <b>228</b>. In some example embodiments, current consistency snapshot <b>228</b> will include data objects that have been modified since the prior consistency snapshot. Those changes to the data objects can reside in memory <b>218</b>, such that the changes have not yet been committed to storage in nonvolatile machine-readable medium <b>216</b>. Operations of flowchart <b>500</b> continue at <b>504</b>.</p>
<p id="p-0040" num="0039">Fileset manager <b>214</b> determines whether there are buffer headers in memory for the data objects that are to be stored in the current consistency snapshot (<b>504</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> determines whether there are buffer headers in memory <b>218</b> for the data objects that are to be stored in current consistency snapshot <b>228</b>. In particular in some example embodiments, each time a data object is accessed (read from, written to, etc.), an associated buffer header is created in memory <b>218</b>. If there are already buffer headers in memory for each of the data objects that are to be stored in current consistency snapshot <b>228</b>, operations of flowchart <b>500</b> continue at <b>508</b>. Otherwise, operations of flowchart <b>500</b> continue at <b>506</b>.</p>
<p id="p-0041" num="0040">Fileset manager <b>214</b> creates and updates buffer headers in memory (for data objects that do not already have buffer headers in memory) (<b>506</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> creates a buffer header in memory <b>218</b> for these data objects that do not have a buffer header in memory. Fileset manager <b>214</b> can also update the fields of the buffer header. With reference to <figref idref="DRAWINGS">FIG. 3</figref>, fileset manager <b>214</b> sets the values of these fields for the buffer headers for each of these data objects. Fileset manager <b>214</b> sets both LCG field <b>302</b> and LUG field <b>304</b> to the current generation value for the data object. For example, if the last committed consistency snapshot had a value of 5, fileset manager <b>214</b> would set LCG field <b>302</b> and LUG field <b>304</b> to 5. Context fields (<b>306</b>, <b>308</b>) are set to either zero or one to differentiate between the two contexts (commit-in-progress context and update-in-progress context). Therefore if a second context is required, these two context fields <b>306</b>,<b>308</b> would have opposite values. If only one context is required, these two context fields <b>306</b>, <b>308</b> would have the same value. In this situation, only one context for the data object is needed. Therefore, fileset manager <b>214</b> sets LCX field <b>306</b> and LUX field <b>308</b> to a same value (e.g., one). Fileset manager <b>214</b> sets physical location field <b>310</b> based on the data object's location in the file system (e.g., the block number). Fileset manager <b>214</b> sets logical location field <b>312</b> based on the location of the associated inode for this data object. For example, the logical location can include the physical location of the inode plus some offset where this data object is stored. Fileset manager <b>214</b> updates data pointer <b>0</b> field <b>314</b> in buffer header <b>300</b> to point to the location in memory <b>218</b> where the first copy of the data is located. Because this situation is not requiring multiple contexts, a second data object is not needed. Accordingly, fileset manager <b>214</b> updates data pointer <b>1</b> field <b>316</b> to point to NULL. Operations of flowchart <b>500</b> continue at <b>508</b>.</p>
<p id="p-0042" num="0041">Fileset manager <b>214</b> receives a transaction to update data object A (that is part of the data objects that are to be part of the current consistency snapshot) in the file system (while the committing to storage of the current consistency snapshot is still occurring) (<b>508</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> receives a transaction to update data object A from one of client devices <b>208</b>, <b>210</b>. For example, an application executing on one of client devices <b>208</b>, <b>210</b> can update data object A. Operations of flowchart <b>500</b> continue at <b>510</b>.</p>
<p id="p-0043" num="0042">Fileset manager <b>214</b> determines whether there is a buffer header in memory for data object A (<b>510</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> determines whether there is a buffer header in memory <b>218</b> for data object A. In particular in some example embodiments, each time a data object is accessed (read from, written to, etc.), an associated buffer header is created in memory <b>218</b>. If there is already a buffer header in memory <b>218</b> for data object A, operations of flowchart <b>500</b> continue at continuation point A (<b>518</b>). Otherwise, operations of flowchart <b>500</b> continue at <b>512</b>.</p>
<p id="p-0044" num="0043">Fileset manager <b>214</b> creates a buffer header in memory for data object A (<b>512</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref>, fileset manager <b>214</b> creates a buffer header in memory <b>218</b> for data object A, because there is not an associated buffer header for data object A in memory <b>218</b>. Fileset manager <b>214</b> can also populate the fields of the buffer header (as further described by the operations below). Operations of flowchart <b>500</b> continue at <b>514</b>.</p>
<p id="p-0045" num="0044">Fileset manager <b>214</b> updates data pointer <b>0</b> field in the buffer header for data object A (<b>514</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> updates data pointer <b>0</b> field <b>314</b> in buffer header <b>300</b> to point to the location in memory <b>218</b> where the first copy of the data is located. Operations of flowchart <b>500</b> continue at <b>516</b>.</p>
<p id="p-0046" num="0045">Fileset manager <b>214</b> also updates the physical location, the logical location, the LCG field, and the LCX field in the buffer header for data object A. With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> updates physical location field <b>310</b>, logical location field <b>312</b>, LCG field <b>302</b>, LCX field <b>306</b> for buffer header <b>300</b>. Fileset manager <b>214</b> sets physical location field <b>310</b> based on the data object's location in the file system (e.g., the block number). Fileset manager <b>214</b> sets logical location field <b>312</b> based on the location of the associated inode for this data object. For example, the logical location can include the physical location of the inode plus some offset where this data object is stored. Fileset manager <b>214</b> sets LCG field <b>302</b> to the current generation value for data object A. For example, if the last committed consistency snapshot had a value of 5, fileset manager <b>214</b> would set LCG field <b>302</b> to 5. Context fields (<b>306</b>, <b>308</b>) are set to either 0 or 1 to differentiate between the two contexts (commit-in-progress context and update-in-progress context). Therefore if a second context is required, these two context fields <b>306</b>,<b>308</b> would have opposite values. If only one context is required, these two context fields <b>306</b>, <b>308</b> would have the same value. Assume that fileset manager <b>214</b> sets LCX field <b>306</b> to 1. The setting of LUX field <b>308</b> is described below. Operations of flowchart <b>500</b> continue at continuation point A (<b>518</b>).</p>
<p id="p-0047" num="0046">Continuation point A (<b>518</b>) continues at continuation point A (<b>602</b>) of flowchart <b>600</b>. From continuation point A (<b>602</b>), operations continue at <b>603</b>.</p>
<p id="p-0048" num="0047">Fileset manager <b>214</b> determines whether the value of the LCG field or the LUG field in the buffer header for data object A matches the generation value of the transaction (<b>603</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> determines whether the value of LCG field <b>302</b> or the value of LUG field <b>304</b> in buffer header <b>300</b> matches the generation value of the transaction. The generation value of the transaction is set to the consistency generation based on when the transaction was created. Therefore, fileset manager <b>214</b> determines whether this generation associated with the transaction equals the last committed generation or the last updated generation. If there is not a match, operations continue at <b>604</b>. Otherwise, operations continue at <b>616</b> (further described below).</p>
<p id="p-0049" num="0048">Fileset manager <b>214</b> creates a second copy of data object A from the first copy of data object A (<b>604</b>). With reference to <figref idref="DRAWINGS">FIG. 2</figref> and assume that first copy of data <b>250</b> is a first copy of data object A, fileset manager <b>214</b> copies first copy of data <b>250</b> to a different location in memory <b>218</b>&#x2014;second copy of data <b>252</b>. Operations of flowchart <b>500</b> continue at <b>606</b>.</p>
<p id="p-0050" num="0049">Fileset manager <b>214</b> updates a second data pointer in the buffer header to point to the second copy of data object A (<b>606</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> updates data pointer <b>1</b> field <b>316</b> to point to the second copy of data object A in memory <b>218</b>. Operations of flowchart <b>600</b> continue at <b>608</b>.</p>
<p id="p-0051" num="0050">Fileset manager <b>214</b> updates the LUX field in the buffer header to have an opposite value to the value of the LCX field (<b>608</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> updates LUX field <b>308</b> to have a value that is opposite a value of LCX field <b>306</b> in the buffer header <b>300</b>. As described above, the values of LCX field <b>306</b> and LUX field <b>308</b> can be one of two values. If a dual context situation arises (as in this case), the values of LCX field <b>306</b> and LUX field <b>308</b> are opposite of each other. Operations of flowchart <b>600</b> continue at <b>610</b>.</p>
<p id="p-0052" num="0051">Fileset manager <b>214</b> sets the generation value for the LUG field in the buffer header based on the generation value for the transaction) (<b>610</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref>, fileset manager <b>214</b> updates the generation value for LUG field <b>304</b> (based on the generation value for transaction (see description of generation value for the transaction above in description of <b>603</b>. Operations of flowchart <b>600</b> continue at <b>614</b>.</p>
<p id="p-0053" num="0052">Fileset manager <b>214</b> updates the second copy of the data object A based on this transaction (<b>614</b>). With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref> and assuming second copy of data <b>252</b> is a second copy of the data object A, fileset manager <b>214</b> updates second copy of data <b>252</b> based on the pointer value in data pointer <b>1</b> field <b>316</b>. Operations of flowchart <b>600</b> are complete along this path of flowchart <b>600</b>.</p>
<p id="p-0054" num="0053">Returning to <b>603</b> and assuming that there is a match (yes decision), fileset manager <b>214</b> updates a copy of the data object A using the first data pointer associated with the LUX field in the buffer header for the data object A (<b>616</b>). In this situation, there was a match at <b>603</b> because the generation for the transaction would match the LUG field <b>304</b>. With reference to <figref idref="DRAWINGS">FIGS. 2-3</figref> and assuming the first data pointer is pointing to first copy of data <b>250</b>, fileset manager <b>214</b> updates first copy of data <b>250</b> based on the pointer value in data pointer <b>0</b> field <b>314</b>. Operations of flowchart <b>600</b> are complete along this path of flowchart <b>600</b>.</p>
<p id="p-0055" num="0054">Additional updates to the same or different data objects in the file system can continue to occur. Also, after completion of the committing of the consistency snapshot, fileset manager <b>214</b> can commit an additional consistency snapshot (based on the periodic interval for committing consistency snapshots to persistent storage).</p>
<p id="p-0056" num="0055">As will be appreciated by one skilled in the art, aspects of the present inventive subject matter may be embodied as a system, method or computer program product. Accordingly, aspects of the present inventive subject matter may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0057" num="0056">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0058" num="0057">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0059" num="0058">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0060" num="0059">Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0061" num="0060">Aspects of the present inventive subject matter are described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0062" num="0061">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0063" num="0062">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 7</figref> depicts an example computer system. A computer system includes processor unit <b>701</b> (possibly including multiple processors, multiple cores, multiple nodes, and/or implementing multi-threading, etc.). The computer system includes memory <b>707</b>. Memory <b>707</b> may be system memory (e.g., one or more of cache, SRAM, DRAM, zero capacitor RAM, Twin Transistor RAM, eDRAM, EDO RAM, DDR RAM, EEPROM, NRAM, RRAM, SONOS, PRAM, etc.) or any one or more of the above already described possible realizations of machine-readable media. The computer system also includes bus <b>703</b> (e.g., PCI, ISA, PCI-Express, HyperTransport&#xae;, InfiniBand&#xae;, NuBus, etc.), network interface <b>705</b> (e.g., an ATM interface, an Ethernet interface, a Frame Relay interface, SONET interface, wireless interface, etc.), and storage device(s) <b>709</b> (e.g., optical storage, magnetic storage, etc.). The computer system also comprises fileset manager <b>725</b> that provides for multiple contexts for data objects in a redirect-on-write file system. Any one of these functionalities may be partially (or entirely) implemented in hardware and/or on processing unit <b>701</b>. For example, the functionality may be implemented with an application specific integrated circuit, in logic implemented in processing unit <b>701</b>, in a co-processor on a peripheral device or card, etc. Further, realizations may include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. 7</figref> (e.g., video cards, audio cards, additional network interfaces, peripheral devices, etc.). The processor unit <b>701</b>, storage device(s) <b>709</b>, and network interface <b>705</b> are coupled to bus <b>703</b>. Although illustrated as being coupled to bus <b>703</b>, memory <b>707</b> may be coupled to processor unit <b>701</b>.</p>
<p id="p-0065" num="0064">While the embodiments are described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. Many variations, modifications, additions, and improvements are possible.</p>
<p id="p-0066" num="0065">Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general, structures and functionality presented as separate components in the example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the inventive subject matter.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>initiating committing to storage, into a nonvolatile machine-readable medium, of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system;</claim-text>
<claim-text>responsive to initiating committing to storage of the current consistency snapshot, creating a buffer header for a data object of the plurality of data objects, wherein the buffer header comprises a first data pointer to point to a first copy of the data object, and wherein the buffer header comprises a commit-in-progress context and an update-in-progress context, wherein the commit-in progress context and the update-in-progress context are initially assigned a same value;</claim-text>
<claim-text>assigning a generation value to the current consistency snapshot that is unique relative to generation values of other consistency snapshots, wherein the first copy of the data object has a generation value equal to the generation value of the current consistency snapshot, wherein a second copy of the data object to have a generation value greater than the generation value of the first copy of the data object;</claim-text>
<claim-text>receiving, during the committing to storage of the current consistency snapshot, an update to the data object, the update having a generation value greater than the generation value assigned to the current consistency snapshot;</claim-text>
<claim-text>responsive to receiving the update to the data object,
<claim-text>determining whether the generation value of the update matches at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object;</claim-text>
<claim-text>responsive to the generation value of the update not matching at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object,</claim-text>
<claim-text>assigning the update-in-progress context to a different value;</claim-text>
<claim-text>creating the second copy of the data object that is copied from the first copy of the data object, the second copy of the data object having the update-in-progress context; and</claim-text>
<claim-text>updating, based on the update, the second copy of the data object, independent of updating the first copy of the data object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the buffer header comprises a second data pointer, wherein the method comprises responsive to receiving updating the second data pointer to point to the second copy of the data object.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the buffer header comprises a last committed generation field and a last updated generation field, wherein the last committed generation field and the last updated generation field are initially set to a value equal to a generation value assigned to a prior consistency snapshot that was committed prior to the current consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising, responsive to receiving the update to the data object, updating the buffer header to assign the last updated generation field to the generation value of the update.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the current consistency snapshot comprises updates to the plurality of data objects since a prior consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the initiating of committing to storage of the current consistency snapshot is in response to a periodic operation to create a consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method comprising:
<claim-text>initiating committing to persistent storage of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system, each of the plurality of data objects configurable to have multiple copies of data of the plurality of data objects having different contexts; wherein a data object of the plurality of data objects has a first copy having a first context of at least two contexts, wherein the first copy of the data object has a generation value equal to a generation value of the current consistency snapshot, wherein a second copy of the data object to have a generation value greater than the generation value of the first copy of the data object;</claim-text>
<claim-text>receiving during committing to storage of the current consistency snapshot, an update to a data object of the plurality of data objects; and</claim-text>
<claim-text>responsive to receipt of the update to the data object,
<claim-text>determining whether a generation value of the update matches at least one of the generation value of the first copy and the generation value of a second copy of the data object;</claim-text>
<claim-text>responsive to the generation value of the update not matching at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object,
<claim-text>creating the second copy of the data object from the first copy, the second copy of the data object having a second context of the at least two contexts; and</claim-text>
</claim-text>
<claim-text>updating, based on the update, the second copy of the data object.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising assigning the generation value to the current consistency snapshot that is unique relative to generation values of other consistency snapshots.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the current consistency snapshot comprises updates to the plurality of data objects since a prior consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the initiating of committing to persistent storage of the current consistency snapshot is in response to a periodic operation to create a consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An apparatus comprising:
<claim-text>a nonvolatile machine-readable medium;</claim-text>
<claim-text>a volatile machine-readable medium;</claim-text>
<claim-text>a processor;</claim-text>
<claim-text>a fileset manager operable to execute on the processor, the fileset manager configured to,
<claim-text>initiate committing to storage, into the nonvolatile machine-readable medium, of a current consistency snapshot of a plurality of data objects in a redirect-on-write file system, a data object of the plurality of data objects configurable to have multiple copies of data of the plurality of data objects having different contexts; wherein the first copy having a first context of the different contexts, the first copy configured to be stored in the volatile machine-readable medium, wherein the first copy of the data object has a generation value equal to a generation value of the current consistency snapshot, wherein a second copy of the data object to have a generation value greater than the generation value of the first copy of the data object;</claim-text>
<claim-text>receive, during committing to storage of the current consistency snapshot, an update to a data object of the plurality of data objects; and</claim-text>
<claim-text>responsive to receipt of the update to the data object,
<claim-text>determine whether a generation value of the update matches at least one of the generation value of the first copy and the generation value of a second copy of the data object;</claim-text>
<claim-text>responsive to the generation value of the update not matching at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object,
<claim-text>create the second copy of the data object in the volatile machine-readable medium from the first copy, the second copy of the data object having a second context of the different contexts; and</claim-text>
</claim-text>
<claim-text>update, based on the update, the second copy of the data of the data object.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the fileset manager is configured to assign the generation value to the current consistency snapshot that is unique relative to generation values of other consistency snapshots.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the current consistency snapshot comprises updates to the plurality of data objects since a prior consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the initiation of the committing to storage of the current consistency snapshot is in response to a periodic operation to create a consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product for providing multiple contexts for a data object of a plurality of data objects, the computer program product comprising:
<claim-text>a non-transitory computer readable storage medium having computer usable program code embodied therewith, the computer usable program code comprising a computer usable program code configured to:
<claim-text>initiate committing to storage, into a nonvolatile machine-readable medium, of a current consistency snapshot of the plurality of data objects in a redirect-on-write file system;</claim-text>
<claim-text>responsive to initiation to committing to storage of the current consistency snapshot, create a buffer header for a data object of the plurality of data objects, wherein the buffer header comprises a first data pointer to point to a first copy of the data object, and wherein the buffer header comprises a commit-in-progress context and an update-in-progress context, wherein the commit-in progress context and the update-in-progress context are initially assigned a same value;</claim-text>
<claim-text>assign a generation value to the current consistency snapshot that is unique relative to generation values of other consistency snapshots, wherein the first copy of the data object has a generation value equal to the generation value of the current consistency snapshot, wherein a second copy of the data object to have a generation value greater than the generation value of the first copy of the data object;</claim-text>
<claim-text>receive, during the committing to storage of the current consistency snapshot, an update to the data object, the update having a generation value greater than the generation value assigned to the current consistency snapshot;</claim-text>
<claim-text>responsive to receiving the update to the data object,
<claim-text>determining whether the generation value of the update matches at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object;</claim-text>
<claim-text>responsive to the generation value of the update not matching at least one of the generation value of the first copy of the data object and the generation value of the second copy of the data object,
<claim-text>assigning the update-in-progress context to a different value;</claim-text>
<claim-text>create the second copy of the data object that is copied from the first copy of the data object, the second copy of the data object having the update-in-progress context; and</claim-text>
</claim-text>
<claim-text>update, based on the update, the second copy of the data object, independent of updating the first copy of the data object.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the buffer header comprises a second data pointer, wherein the computer usable program code is configured to, responsive to receipt of the update to the data object, update the second data pointer to point to the second copy of the data object.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the buffer header comprises a last committed generation field and a last updated generation field, wherein the last committed generation field and the last updated generation field are initially set to a value equal to a generation value assigned to a prior consistency snapshot that was committed prior to the current consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the computer usable program code is configured to, responsive to receiving the update to the data object, update the buffer header to assign the last updated generation field to the generation value of the update.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the current consistency snapshot comprises updates to the plurality of data objects since a prior consistency snapshot.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the initiation of committing to storage of the current consistency snapshot is in response to a periodic operation to create a consistency snapshot.</claim-text>
</claim>
</claims>
</us-patent-grant>

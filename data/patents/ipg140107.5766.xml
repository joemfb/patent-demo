<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626871-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626871</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13105127</doc-number>
<date>20110511</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>307</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709217</main-classification>
<further-classification>709213</further-classification>
</classification-national>
<invention-title id="d2e53">Accessing a global vault in multiple dispersed storage networks</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4092732</doc-number>
<kind>A</kind>
<name>Ouchi</name>
<date>19780500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5454101</doc-number>
<kind>A</kind>
<name>Mackay et al.</name>
<date>19950900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5485474</doc-number>
<kind>A</kind>
<name>Rabin</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5774643</doc-number>
<kind>A</kind>
<name>Lubbers et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5802364</doc-number>
<kind>A</kind>
<name>Senator et al.</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5809285</doc-number>
<kind>A</kind>
<name>Hilland</name>
<date>19980900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5890156</doc-number>
<kind>A</kind>
<name>Rekieta et al.</name>
<date>19990300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5987506</doc-number>
<kind>A</kind>
<name>Carter et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709213</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>5987622</doc-number>
<kind>A</kind>
<name>Lo Verso et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>5991414</doc-number>
<kind>A</kind>
<name>Garay et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6012159</doc-number>
<kind>A</kind>
<name>Fischer et al.</name>
<date>20000100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6058454</doc-number>
<kind>A</kind>
<name>Gerlach et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6128277</doc-number>
<kind>A</kind>
<name>Bruck et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6175571</doc-number>
<kind>B1</kind>
<name>Haddock et al.</name>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6185619</doc-number>
<kind>B1</kind>
<name>Joffe et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709229</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6192472</doc-number>
<kind>B1</kind>
<name>Garay et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6256688</doc-number>
<kind>B1</kind>
<name>Suetaka et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6272658</doc-number>
<kind>B1</kind>
<name>Steele et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6301604</doc-number>
<kind>B1</kind>
<name>Nojima</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6356949</doc-number>
<kind>B1</kind>
<name>Katsandres et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6366995</doc-number>
<kind>B1</kind>
<name>Vilkov et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6374336</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6415373</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>6418539</doc-number>
<kind>B1</kind>
<name>Walker</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>6449688</doc-number>
<kind>B1</kind>
<name>Peters et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>6567948</doc-number>
<kind>B2</kind>
<name>Steele et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>6571282</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>6609223</doc-number>
<kind>B1</kind>
<name>Wolfgang</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>6718361</doc-number>
<kind>B1</kind>
<name>Basani et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>6760808</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>6785768</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>6785783</doc-number>
<kind>B2</kind>
<name>Buckland</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>6826711</doc-number>
<kind>B2</kind>
<name>Moulton et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>6879596</doc-number>
<kind>B1</kind>
<name>Dooply</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7003688</doc-number>
<kind>B1</kind>
<name>Pittelkow et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7024451</doc-number>
<kind>B2</kind>
<name>Jorgenson</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7024609</doc-number>
<kind>B2</kind>
<name>Wolfgang et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7080101</doc-number>
<kind>B1</kind>
<name>Watson et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7103824</doc-number>
<kind>B2</kind>
<name>Halford</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>7103915</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>7111115</doc-number>
<kind>B2</kind>
<name>Peters et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>7140044</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>7146644</doc-number>
<kind>B2</kind>
<name>Redlich et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>7155514</doc-number>
<kind>B1</kind>
<name>Milford</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>7171493</doc-number>
<kind>B2</kind>
<name>Shu et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>7222133</doc-number>
<kind>B1</kind>
<name>Raipurkar et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>7240236</doc-number>
<kind>B2</kind>
<name>Cutts et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>7272613</doc-number>
<kind>B2</kind>
<name>Sim et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>7529230</doc-number>
<kind>B2</kind>
<name>Lewis et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370352</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>7613827</doc-number>
<kind>B2</kind>
<name>Bruck et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>7870380</doc-number>
<kind>B2</kind>
<name>VanHeyningen et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713151</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2002/0062422</doc-number>
<kind>A1</kind>
<name>Butterworth et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2002/0166079</doc-number>
<kind>A1</kind>
<name>Ulrich et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2003/0018927</doc-number>
<kind>A1</kind>
<name>Gadir et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2003/0037261</doc-number>
<kind>A1</kind>
<name>Meffert et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2003/0065617</doc-number>
<kind>A1</kind>
<name>Watkins et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2003/0084020</doc-number>
<kind>A1</kind>
<name>Shu</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2004/0024963</doc-number>
<kind>A1</kind>
<name>Talagala et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2004/0122917</doc-number>
<kind>A1</kind>
<name>Menon et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2004/0215998</doc-number>
<kind>A1</kind>
<name>Buxton et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2004/0228493</doc-number>
<kind>A1</kind>
<name>Ma et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2005/0027862</doc-number>
<kind>A1</kind>
<name>Nguyen et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709225</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2005/0100022</doc-number>
<kind>A1</kind>
<name>Ramprashad</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2005/0114594</doc-number>
<kind>A1</kind>
<name>Corbett et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2005/0125593</doc-number>
<kind>A1</kind>
<name>Karpoff et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2005/0131993</doc-number>
<kind>A1</kind>
<name>Fatula, Jr.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2005/0132070</doc-number>
<kind>A1</kind>
<name>Redlich et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2005/0144382</doc-number>
<kind>A1</kind>
<name>Schmisseur</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2005/0229069</doc-number>
<kind>A1</kind>
<name>Hassner</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2006/0047907</doc-number>
<kind>A1</kind>
<name>Shiga et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2006/0136448</doc-number>
<kind>A1</kind>
<name>Cialini et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2006/0156059</doc-number>
<kind>A1</kind>
<name>Kitamura</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2006/0224603</doc-number>
<kind>A1</kind>
<name>Correll, Jr.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2007/0079081</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2007/0079082</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2007/0079083</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2007/0088970</doc-number>
<kind>A1</kind>
<name>Buxton et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2007/0174192</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2007/0214285</doc-number>
<kind>A1</kind>
<name>Au et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2007/0234110</doc-number>
<kind>A1</kind>
<name>Soran et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2007/0283167</doc-number>
<kind>A1</kind>
<name>Venters, III et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00082">
<document-id>
<country>US</country>
<doc-number>2009/0037608</doc-number>
<kind>A1</kind>
<name>Lubbers et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710  5</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00083">
<document-id>
<country>US</country>
<doc-number>2009/0094251</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00084">
<document-id>
<country>US</country>
<doc-number>2009/0094318</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00085">
<document-id>
<country>US</country>
<doc-number>2010/0023524</doc-number>
<kind>A1</kind>
<name>Gladwin et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00086">
<document-id>
<country>US</country>
<doc-number>2010/0138687</doc-number>
<kind>A1</kind>
<name>Noguchi et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714  4</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00087">
<document-id>
<country>US</country>
<doc-number>2010/0217869</doc-number>
<kind>A1</kind>
<name>Esteban et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709226</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00088">
<othercit>Shamir; How to Share a Secret; Communications of the ACM; vol. 22, No. 11; Nov. 1979; pp. 612-613.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00089">
<othercit>Rabin; Efficient Dispersal of Information for Security, Load Balancing, and Fault Tolerance; Journal of the Association for Computer Machinery; vol. 36, No. 2; Apr. 1989; pp. 335-348.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00090">
<othercit>Chung; An Automatic Data Segmentation Method for 3D Measured Data Points; National Taiwan University; pp. 1-8; 1998.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00091">
<othercit>Plank, T1: Erasure Codes for Storage Applications; FAST2005, 4th Usenix Conference on File Storage Technologies; Dec. 13-16, 2005; pp. 1-74.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00092">
<othercit>Wildi; Java iSCSi Initiator; Master Thesis; Department of Computer and Information Science, University of Konstanz; Feb. 2007; 60 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00093">
<othercit>Legg; Lightweight Directory Access Protocol (LDAP): Syntaxes and Matching Rules; IETF Network Working Group; RFC 4517; Jun. 2006; pp. 1-50.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Internationalized String Preparation; IETF Network Working Group; RFC 4518; Jun. 2006; pp. 1-14.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>Smith; Lightweight Directory Access Protocol (LDAP): Uniform Resource Locator; IETF Network Working Group; RFC 4516; Jun. 2006; pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00096">
<othercit>Smith; Lightweight Directory Access Protocol (LDAP): String Representation of Search Filters; IETF Network Working Group; RFC 4515; Jun. 2006; pp. 1-12.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00097">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Directory Information Models; IETF Network Working Group; RFC 4512; Jun. 2006; pp. 1-49.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>Sciberras; Lightweight Directory Access Protocol (LDAP): Schema for User Applications; IETF Network Working Group; RFC 4519; Jun. 2006; pp. 1-33.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>Harrison; Lightweight Directory Access Protocol (LDAP): Authentication Methods and Security Mechanisms; IETF Network Working Group; RFC 4513; Jun. 2006; pp. 1-32.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00100">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map; IETF Network Working Group; RFC 4510; Jun. 2006; pp. 1-8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>Zeilenga; Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names; IETF Network Working Group; RFC 4514; Jun. 2006; pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>Sermersheim; Lightweight Directory Access Protocol (LDAP): The Protocol; IETF Network Working Group; RFC 4511; Jun. 2006; pp. 1-68.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>Satran, et al.; Internet Small Computer Systems Interface (iSCSI); IETF Network Working Group; RFC 3720; Apr. 2004; pp. 1-257.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00104">
<othercit>Xin, et al.; Evaluation of Distributed Recovery in Large-Scale Storage Systems; 13th IEEE International Symposium on High Performance Distributed Computing; Jun. 2004; pp. 172-181.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>16</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709224</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709213-214</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709217-218</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>20</number-of-drawing-sheets>
<number-of-figures>28</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61346203</doc-number>
<date>20100519</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110289215</doc-number>
<kind>A1</kind>
<date>20111124</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Resch</last-name>
<first-name>Jason K.</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Grube</last-name>
<first-name>Gary W.</first-name>
<address>
<city>Barrington Hills</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Markison</last-name>
<first-name>Timothy W.</first-name>
<address>
<city>Mesa</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Resch</last-name>
<first-name>Jason K.</first-name>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Grube</last-name>
<first-name>Gary W.</first-name>
<address>
<city>Barrington Hills</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Markison</last-name>
<first-name>Timothy W.</first-name>
<address>
<city>Mesa</city>
<state>AZ</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Garlick &#x26; Markison</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Markison</last-name>
<first-name>Timothy W.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cleversafe, Inc.</orgname>
<role>02</role>
<address>
<city>Chicago</city>
<state>IL</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Recek</last-name>
<first-name>Jason</first-name>
<department>2442</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method begins by a processing module receiving a dispersed storage network (DSN) access request and determining whether the DSN access request is associated with a local DSN vault or a global DSN vault, wherein the local DSN vault is contained within a DSN of a plurality of DSNs and the global DSN vault is contained within at least some of the plurality of DSNs. The method continues with the processing module identifying a primary DSN of the plurality of DSNs and facilitating processing of the DSN access request by the primary DSN when the DSN access request is associated with the global DSN vault.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="180.42mm" wi="243.25mm" file="US08626871-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="241.98mm" wi="189.91mm" orientation="landscape" file="US08626871-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="221.32mm" wi="174.16mm" orientation="landscape" file="US08626871-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="246.97mm" wi="203.62mm" orientation="landscape" file="US08626871-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="244.01mm" wi="201.68mm" orientation="landscape" file="US08626871-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="256.79mm" wi="192.79mm" orientation="landscape" file="US08626871-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="134.79mm" wi="177.12mm" orientation="landscape" file="US08626871-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="232.16mm" wi="183.98mm" orientation="landscape" file="US08626871-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="111.17mm" wi="183.98mm" orientation="landscape" file="US08626871-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="212.51mm" wi="196.77mm" orientation="landscape" file="US08626871-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="209.55mm" wi="169.25mm" orientation="landscape" file="US08626871-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="135.81mm" wi="191.85mm" orientation="landscape" file="US08626871-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="240.03mm" wi="189.91mm" orientation="landscape" file="US08626871-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="214.46mm" wi="159.34mm" orientation="landscape" file="US08626871-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="205.66mm" wi="189.91mm" orientation="landscape" file="US08626871-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="213.44mm" wi="182.96mm" orientation="landscape" file="US08626871-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="250.87mm" wi="194.82mm" orientation="landscape" file="US08626871-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="200.66mm" wi="174.16mm" orientation="landscape" file="US08626871-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="204.64mm" wi="167.22mm" orientation="landscape" file="US08626871-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="239.10mm" wi="185.93mm" orientation="landscape" file="US08626871-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="161.37mm" wi="185.00mm" orientation="landscape" file="US08626871-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS REFERENCE TO RELATED PATENTS</heading>
<p id="p-0002" num="0001">This patent application is claiming priority under 35 USC &#xa7;119 to a provisionally filed patent application entitled INTER-DISPERSED STORAGE NETWORK COMMUNICATIONS having a provisional filing date of May 19, 2010, and a provisional Ser. No. 61/346,203, which is hereby incorporated herein by reference in its entirety and made part of the present U.S. Utility Patent Application for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT</heading>
<p id="p-0003" num="0002">NOT APPLICABLE</p>
<heading id="h-0003" level="1">INCORPORATION-BY-REFERENCE OF MATERIAL SUBMITTED ON A COMPACT DISC</heading>
<p id="p-0004" num="0003">NOT APPLICABLE</p>
<heading id="h-0004" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0005" num="0004">1. Technical Field of the Invention</p>
<p id="p-0006" num="0005">This invention relates generally to computing systems and more particularly to data storage solutions within such computing systems.</p>
<p id="p-0007" num="0006">2. Description of Related Art</p>
<p id="p-0008" num="0007">Computers are known to communicate, process, and store data. Such computers range from wireless smart phones to data centers that support millions of web searches, stock trades, or on-line purchases every day. In general, a computing system generates data and/or manipulates data from one form into another. For instance, an image sensor of the computing system generates raw picture data and, using an image compression program (e.g., JPEG, MPEG, etc.), the computing system manipulates the raw picture data into a standardized compressed image.</p>
<p id="p-0009" num="0008">With continued advances in processing speed and communication speed, computers are capable of processing real time multimedia data for applications ranging from simple voice communications to streaming high definition video. As such, general-purpose information appliances are replacing purpose-built communications devices (e.g., a telephone). For example, smart phones can support telephony communications but they are also capable of text messaging and accessing the internet to perform functions including email, web browsing, remote applications access, and media communications (e.g., telephony voice, image transfer, music files, video files, real time video streaming. etc.).</p>
<p id="p-0010" num="0009">Each type of computer is constructed and operates in accordance with one or more communication, processing, and storage standards. As a result of standardization and with advances in technology, more and more information content is being converted into digital formats. For example, more digital cameras are now being sold than film cameras, thus producing more digital pictures. As another example, web-based programming is becoming an alternative to over the air television broadcasts and/or cable broadcasts. As further examples, papers, books, video entertainment, home video, etc. are now being stored digitally, which increases the demand on the storage function of computers.</p>
<p id="p-0011" num="0010">A typical computer storage system includes one or more memory devices aligned with the needs of the various operational aspects of the computer's processing and communication functions. Generally, the immediacy of access dictates what type of memory device is used. For example, random access memory (RAM) memory can be accessed in any random order with a constant response time, thus it is typically used for cache memory and main memory. By contrast, memory device technologies that require physical movement such as magnetic disks, tapes, and optical discs, have a variable response time as the physical movement can take longer than the data transfer, thus they are typically used for secondary memory (e.g., hard drive, backup memory, etc.).</p>
<p id="p-0012" num="0011">A computer's storage system will be compliant with one or more computer storage standards that include, but are not limited to, network file system (NFS), flash file system (FFS), disk file system (DFS), small computer system interface (SCSI), internet small computer system interface (iSCSI), file transfer protocol (FTP), and web-based distributed authoring and versioning (WebDAV). These standards specify the data storage format (e.g., files, data objects, data blocks, directories, etc.) and interfacing between the computer's processing function and its storage system, which is a primary function of the computer's memory controller.</p>
<p id="p-0013" num="0012">Despite the standardization of the computer and its storage system, memory devices fail; especially commercial grade memory devices that utilize technologies incorporating physical movement (e.g., a disc drive). For example, it is fairly common for a disc drive to routinely suffer from bit level corruption and to completely fail after three years of use. One solution is to a higher-grade disc drive, which adds significant cost to a computer.</p>
<p id="p-0014" num="0013">Another solution is to utilize multiple levels of redundant disc drives to replicate the data into two or more copies. One such redundant drive approach is called redundant array of independent discs (RAID). In a RAID device, a RAID controller adds parity data to the original data before storing it across the array. The parity data is calculated from the original data such that the failure of a disc will not result in the loss of the original data. For example, RAID 5 uses three discs to protect data from the failure of a single disc. The parity data, and associated redundancy overhead data, reduces the storage capacity of three independent discs by one third (e.g., n&#x2212;1=capacity). RAID 6 can recover from a loss of two discs and requires a minimum of four discs with a storage capacity of n&#x2212;2.</p>
<p id="p-0015" num="0014">While RAID addresses the memory device failure issue, it is not without its own failures issues that affect its effectiveness, efficiency and security. For instance, as more discs are added to the array, the probability of a disc failure increases, which increases the demand for maintenance. For example, when a disc fails, it needs to be manually replaced before another disc fails and the data stored in the RAID device is lost. To reduce the risk of data loss, data on a RAID device is typically copied on to one or more other RAID devices. While this addresses the loss of data issue, it raises a security issue since multiple copies of data are available, which increases the chances of unauthorized access. Further, as the amount of data being stored grows, the overhead of RAID devices becomes a non-trivial efficiency issue.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of an embodiment of a computing system in accordance with the invention;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of an embodiment of a computing core in accordance with the invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an embodiment of a distributed storage processing unit in accordance with the invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an embodiment of a grid module in accordance with the invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of an example embodiment of error coded data slice creation in accordance with the invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram of another embodiment of a computing system in accordance with the invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an example of storing data in accordance with the invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 8</figref> A is a flowchart illustrating another example of storing data in accordance with the invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 8</figref> B is a flowchart illustrating an example of authorizing encoded data slice storage in accordance with the invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating an example of retrieving data in accordance with the invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart illustrating an example of rebuilding data in accordance with the invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 11</figref> A is a flowchart illustrating an example of publishing storage information in accordance with the invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 11</figref> B is a flowchart illustrating another example of accessing data in accordance with the invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart illustrating an example of migrating data in accordance with the invention;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart illustrating an example of modifying the storage of data in accordance with the invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 14</figref> A is a flowchart illustrating an example of generating billing information in accordance with the invention;</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 14</figref> B is a flowchart illustrating an example of aggregating dispersed storage network (DSN) usage information in accordance with the invention;</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 15</figref> A is a flowchart illustrating another example of storing data in accordance with the invention;</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 15</figref> B is a flowchart illustrating another example of retrieving data in accordance with the invention;</p>
<p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. 16</figref> A is a flowchart illustrating an example of assigning a new vault in accordance with the invention;</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 16</figref> B is a flowchart illustrating another example of assigning a new vault in accordance with the invention;</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 16</figref> C is a flowchart illustrating an example of accessing a dispersed storage network in accordance with the invention;</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 17</figref> A is a flowchart illustrating an example of acquiring security information in accordance with the invention;</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 17</figref> B is a flowchart illustrating an example of assigning security information in accordance with the invention;</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 18</figref> A is a flowchart illustrating another example of acquiring security information in accordance with invention;</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 18</figref> B is a flowchart illustrating another example of assigning security information in accordance with the invention;</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 19</figref> A is a flowchart illustrating an example of requesting access to a dispersed storage network (DSN) in accordance with the invention; and</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 19</figref> B is a flowchart illustrating an example of processing a dispersed storage network (DSN) access request in accordance with the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic block diagram of a computing system <b>10</b> that includes one or more of a first type of user devices <b>12</b>, one or more of a second type of user devices <b>14</b>, at least one distributed storage (DS) processing unit <b>16</b>, at least one DS managing unit <b>18</b>, at least one storage integrity processing unit <b>20</b>, and a distributed storage network (DSN) memory <b>22</b> coupled via a network <b>24</b>. The network <b>24</b> may include one or more wireless and/or wire lined communication systems; one or more private intranet systems and/or public internet systems; and/or one or more local area networks (LAN) and/or wide area networks (WAN).</p>
<p id="p-0045" num="0044">The DSN memory <b>22</b> includes a plurality of distributed storage (DS) units <b>36</b> for storing data of the system. Each of the DS units <b>36</b> includes a processing module and memory and may be located at a geographically different site than the other DS units (e.g., one in Chicago, one in Milwaukee, etc.). The processing module may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor, micro-controller, digital signal processor, microcomputer, central processing unit, field programmable gate array, programmable logic device, state machine, logic circuitry, analog circuitry, digital circuitry, and/or any device that manipulates signals (analog and/or digital) based on hard coding of the circuitry and/or operational instructions. The processing module may have an associated memory and/or memory element, which may be a single memory device, a plurality of memory devices, and/or embedded circuitry of the processing module. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. Note that if the processing module includes more than one processing device, the processing devices may be centrally located (e.g., directly coupled together via a wired and/or wireless bus structure) or may be distributedly located (e.g., cloud computing via indirect coupling via a local area network and/or a wide area network). Further note that when the processing module implements one or more of its functions via a state machine, analog circuitry, digital circuitry, and/or logic circuitry, the memory and/or memory element storing the corresponding operational instructions may be embedded within, or external to, the circuitry comprising the state machine, analog circuitry, digital circuitry, and/or logic circuitry. Still further note that, the memory element stores, and the processing module executes, hard coded and/or operational instructions corresponding to at least some of the steps and/or functions illustrated in <figref idref="DRAWINGS">FIGS. 1-19</figref> B.</p>
<p id="p-0046" num="0045">Each of the user devices <b>12</b>-<b>14</b>, the DS processing unit <b>16</b>, the DS managing unit <b>18</b>, and the storage integrity processing unit <b>20</b> may be a portable computing device (e.g., a social networking device, a gaming device, a cell phone, a smart phone, a personal digital assistant, a digital music player, a digital video player, a laptop computer, a handheld computer, a video game controller, and/or any other portable device that includes a computing core) and/or a fixed computing device (e.g., a personal computer, a computer server, a cable set-top box, a satellite receiver, a television set, a printer, a fax machine, home entertainment equipment, a video game console, and/or any type of home or office computing equipment). Such a portable or fixed computing device includes a computing core <b>26</b> and one or more interfaces <b>30</b>, <b>32</b>, and/or <b>33</b>. An embodiment of the computing core <b>26</b> will be described with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0047" num="0046">With respect to the interfaces, each of the interfaces <b>30</b>, <b>32</b>, and <b>33</b> includes software and/or hardware to support one or more communication links via the network <b>24</b> and/or directly. For example, interfaces <b>30</b> support a communication link (wired, wireless, direct, via a LAN, via the network <b>24</b>, etc.) between the first type of user device <b>14</b> and the DS processing unit <b>16</b>. As another example, DSN interface <b>32</b> supports a plurality of communication links via the network <b>24</b> between the DSN memory <b>22</b> and the DS processing unit <b>16</b>, the first type of user device <b>12</b>, and/or the storage integrity processing unit <b>20</b>. As yet another example, interface <b>33</b> supports a communication link between the DS managing unit <b>18</b> and any one of the other devices and/or units <b>12</b>, <b>14</b>, <b>16</b>, <b>20</b>, and/or <b>22</b> via the network <b>24</b>.</p>
<p id="p-0048" num="0047">In general and with respect to data storage, the system <b>10</b> supports three primary functions: distributed network data storage management, distributed data storage and retrieval, and data storage integrity verification. In accordance with these three primary functions, data can be distributedly stored in a plurality of physically different locations and subsequently retrieved in a reliable and secure manner regardless of failures of individual storage devices, failures of network equipment, the duration of storage, the amount of data being stored, attempts at hacking the data, etc.</p>
<p id="p-0049" num="0048">The DS managing unit <b>18</b> performs distributed network data storage management functions, which include establishing distributed data storage parameters, performing network operations, performing network administration, and/or performing network maintenance. The DS managing unit <b>18</b> establishes the distributed data storage parameters (e.g., allocation of virtual DSN memory space, distributed storage parameters, security parameters, billing information, user profile information, etc.) for one or more of the user devices <b>12</b>-<b>14</b> (e.g., established for individual devices, established for a user group of devices, established for public access by the user devices, etc.). For example, the DS managing unit <b>18</b> coordinates the creation of a vault (e.g., a virtual memory block) within the DSN memory <b>22</b> for a user device (for a group of devices, or for public access). The DS managing unit <b>18</b> also determines the distributed data storage parameters for the vault. In particular, the DS managing unit <b>18</b> determines a number of slices (e.g., the number that a data segment of a data file and/or data block is partitioned into for distributed storage) and a read threshold value (e.g., the minimum number of slices required to reconstruct the data segment).</p>
<p id="p-0050" num="0049">As another example, the DS managing module <b>18</b> creates and stores, locally or within the DSN memory <b>22</b>, user profile information. The user profile information includes one or more of authentication information, permissions, and/or the security parameters. The security parameters may include one or more of encryption/decryption scheme, one or more encryption keys, key generation scheme, and data encoding/decoding scheme.</p>
<p id="p-0051" num="0050">As yet another example, the DS managing unit <b>18</b> creates billing information for a particular user, user group, vault access, public vault access, etc. For instance, the DS managing unit <b>18</b> tracks the number of times user accesses a private vault and/or public vaults, which can be used to generate a per-access bill. In another instance, the DS managing unit <b>18</b> tracks the amount of data stored and/or retrieved by a user device and/or a user group, which can be used to generate a per-data-amount bill.</p>
<p id="p-0052" num="0051">The DS managing unit <b>18</b> also performs network operations, network administration, and/or network maintenance. As at least part of performing the network operations and/or administration, the DS managing unit <b>18</b> monitors performance of the devices and/or units of the system <b>10</b> for potential failures, determines the devices and/or unit's activation status, determines the devices' and/or units' loading, and any other system level operation that affects the performance level of the system <b>10</b>. For example, the DS managing unit <b>18</b> receives and aggregates network management alarms, alerts, errors, status information, performance information, and messages from the devices <b>12</b>-<b>14</b> and/or the units <b>16</b>, <b>20</b>, <b>22</b>. For example, the DS managing unit <b>18</b> receives a simple network management protocol (SNMP) message regarding the status of the DS processing unit <b>16</b>.</p>
<p id="p-0053" num="0052">The DS managing unit <b>18</b> performs the network maintenance by identifying equipment within the system <b>10</b> that needs replacing, upgrading, repairing, and/or expanding. For example, the DS managing unit <b>18</b> determines that the DSN memory <b>22</b> needs more DS units <b>36</b> or that one or more of the DS units <b>36</b> needs updating.</p>
<p id="p-0054" num="0053">The second primary function (i.e., distributed data storage and retrieval) begins and ends with a user device <b>12</b>-<b>14</b>. For instance, if a second type of user device <b>14</b> has a data file <b>38</b> and/or data block <b>40</b> to store in the DSN memory <b>22</b>, it send the data file <b>38</b> and/or data block <b>40</b> to the DS processing unit <b>16</b> via its interface <b>30</b>. As will be described in greater detail with reference to <figref idref="DRAWINGS">FIG. 2</figref>, the interface <b>30</b> functions to mimic a conventional operating system (OS) file system interface (e.g., network file system (NFS), flash file system (FFS), disk file system (DFS), file transfer protocol (FTP), web-based distributed authoring and versioning (WebDAV), etc.) and/or a block memory interface (e.g., small computer system interface (SCSI), internet small computer system interface (iSCSI), etc.). In addition, the interface <b>30</b> may attach a user identification code (ID) to the data file <b>38</b> and/or data block <b>40</b>.</p>
<p id="p-0055" num="0054">The DS processing unit <b>16</b> receives the data file <b>38</b> and/or data block <b>40</b> via its interface <b>30</b> and performs a distributed storage (DS) process <b>34</b> thereon (e.g., an error coding dispersal storage function). The DS processing <b>34</b> begins by partitioning the data file <b>38</b> and/or data block <b>40</b> into one or more data segments, which is represented as Y data segments. For example, the DS processing <b>34</b> may partition the data file <b>38</b> and/or data block <b>40</b> into a fixed byte size segment (e.g., 2<sup>1 </sup>to 2<sup>n </sup>bytes, where n=&#x3e;2) or a variable byte size (e.g., change byte size from segment to segment, or from groups of segments to groups of segments, etc.).</p>
<p id="p-0056" num="0055">For each of the Y data segments, the DS processing <b>34</b> error encodes (e.g., forward error correction (FEC), information dispersal algorithm, or error correction coding) and slices (or slices then error encodes) the data segment into a plurality of error coded (EC) data slices <b>42</b>-<b>48</b>, which is represented as X slices per data segment. The number of slices (X) per segment, which corresponds to a number of pillars n, is set in accordance with the distributed data storage parameters and the error coding scheme. For example, if a Reed-Solomon (or other FEC scheme) is used in an n/k system, then a data segment is divided into n slices, where k number of slices is needed to reconstruct the original data (i.e., k is the threshold). As a few specific examples, the n/k factor may be 5/3; 6/4; 8/6; 8/5; 16/10.</p>
<p id="p-0057" num="0056">For each slice <b>42</b>-<b>48</b>, the DS processing unit <b>16</b> creates a unique slice name and appends it to the corresponding slice <b>42</b>-<b>48</b>. The slice name includes universal DSN memory addressing routing information (e.g., virtual memory addresses in the DSN memory <b>22</b>) and user-specific information (e.g., user ID, file name, data block identifier, etc.).</p>
<p id="p-0058" num="0057">The DS processing unit <b>16</b> transmits the plurality of EC slices <b>42</b>-<b>48</b> to a plurality of DS units <b>36</b> of the DSN memory <b>22</b> via the DSN interface <b>32</b> and the network <b>24</b>. The DSN interface <b>32</b> formats each of the slices for transmission via the network <b>24</b>. For example, the DSN interface <b>32</b> may utilize an internet protocol (e.g., TCP/IP, etc.) to packetize the slices <b>42</b>-<b>48</b> for transmission via the network <b>24</b>.</p>
<p id="p-0059" num="0058">The number of DS units <b>36</b> receiving the slices <b>42</b>-<b>48</b> is dependent on the distributed data storage parameters established by the DS managing unit <b>18</b>. For example, the DS managing unit <b>18</b> may indicate that each slice is to be stored in a different DS unit <b>36</b>. As another example, the DS managing unit <b>18</b> may indicate that like slice numbers of different data segments are to be stored in the same DS unit <b>36</b>. For example, the first slice of each of the data segments is to be stored in a first DS unit <b>36</b>, the second slice of each of the data segments is to be stored in a second DS unit <b>36</b>, etc. In this manner, the data is encoded and distributedly stored at physically diverse locations to improved data storage integrity and security. Further examples of encoding the data segments will be provided with reference to one or more of <figref idref="DRAWINGS">FIGS. 2-19</figref> B.</p>
<p id="p-0060" num="0059">Each DS unit <b>36</b> that receives a slice <b>42</b>-<b>48</b> for storage translates the virtual DSN memory address of the slice into a local physical address for storage. Accordingly, each DS unit <b>36</b> maintains a virtual to physical memory mapping to assist in the storage and retrieval of data.</p>
<p id="p-0061" num="0060">The first type of user device <b>12</b> performs a similar function to store data in the DSN memory <b>22</b> with the exception that it includes the DS processing. As such, the device <b>12</b> encodes and slices the data file and/or data block it has to store. The device then transmits the slices <b>11</b> to the DSN memory via its DSN interface <b>32</b> and the network <b>24</b>.</p>
<p id="p-0062" num="0061">For a second type of user device <b>14</b> to retrieve a data file or data block from memory, it issues a read command via its interface <b>30</b> to the DS processing unit <b>16</b>. The DS processing unit <b>16</b> performs the DS processing <b>34</b> to identify the DS units <b>36</b> storing the slices of the data file and/or data block based on the read command. The DS processing unit <b>16</b> may also communicate with the DS managing unit <b>18</b> to verify that the user device <b>14</b> is authorized to access the requested data.</p>
<p id="p-0063" num="0062">Assuming that the user device is authorized to access the requested data, the DS processing unit <b>16</b> issues slice read commands to at least a threshold number of the DS units <b>36</b> storing the requested data (e.g., to at least 10 DS units for a 16/10 error coding scheme). Each of the DS units <b>36</b> receiving the slice read command, verifies the command, accesses its virtual to physical memory mapping, retrieves the requested slice, or slices, and transmits it to the DS processing unit <b>16</b>.</p>
<p id="p-0064" num="0063">Once the DS processing unit <b>16</b> has received a read threshold number of slices for a data segment, it performs an error decoding function and de-slicing to reconstruct the data segment. When Y number of data segments has been reconstructed, the DS processing unit <b>16</b> provides the data file <b>38</b> and/or data block <b>40</b> to the user device <b>14</b>. Note that the first type of user device <b>12</b> performs a similar process to retrieve a data file and/or data block.</p>
<p id="p-0065" num="0064">The storage integrity processing unit <b>20</b> performs the third primary function of data storage integrity verification. In general, the storage integrity processing unit <b>20</b> periodically retrieves slices <b>45</b>, and/or slice names, of a data file or data block of a user device to verify that one or more slices have not been corrupted or lost (e.g., the DS unit failed). The retrieval process mimics the read process previously described.</p>
<p id="p-0066" num="0065">If the storage integrity processing unit <b>20</b> determines that one or more slices is corrupted or lost, it rebuilds the corrupted or lost slice(s) in accordance with the error coding scheme. The storage integrity processing unit <b>20</b> stores the rebuild slice, or slices, in the appropriate DS unit(s) <b>36</b> in a manner that mimics the write process previously described.</p>
<p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. 2</figref> is a schematic block diagram of an embodiment of a computing core <b>26</b> that includes a processing module <b>50</b>, a memory controller <b>52</b>, main memory <b>54</b>, a video graphics processing unit <b>55</b>, an input/output (IO) controller <b>56</b>, a peripheral component interconnect (PCI) interface <b>58</b>, at least one IO device interface module <b>62</b>, a read only memory (ROM) basic input output system (BIOS) <b>64</b>, and one or more memory interface modules. The memory interface module(s) includes one or more of a universal serial bus (USB) interface module <b>66</b>, a host bus adapter (HBA) interface module <b>68</b>, a network interface module <b>70</b>, a flash interface module <b>72</b>, a hard drive interface module <b>74</b>, and a DSN interface module <b>76</b>. Note the DSN interface module <b>76</b> and/or the network interface module <b>70</b> may function as the interface <b>30</b> of the user device <b>14</b> of <figref idref="DRAWINGS">FIG. 1</figref>. Further note that the IO device interface module <b>62</b> and/or the memory interface modules may be collectively or individually referred to as IO ports.</p>
<p id="p-0068" num="0067">The processing module <b>50</b> may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor, micro-controller, digital signal processor, microcomputer, central processing unit, field programmable gate array, programmable logic device, state machine, logic circuitry, analog circuitry, digital circuitry, and/or any device that manipulates signals (analog and/or digital) based on hard coding of the circuitry and/or operational instructions. The processing module <b>50</b> may have an associated memory and/or memory element, which may be a single memory device, a plurality of memory devices, and/or embedded circuitry of the processing module <b>50</b>. Such a memory device may be a read-only memory, random access memory, volatile memory, non-volatile memory, static memory, dynamic memory, flash memory, cache memory, and/or any device that stores digital information. Note that if the processing module <b>50</b> includes more than one processing device, the processing devices may be centrally located (e.g., directly coupled together via a wired and/or wireless bus structure) or may be distributedly located (e.g., cloud computing via indirect coupling via a local area network and/or a wide area network). Further note that when the processing module <b>50</b> implements one or more of its functions via a state machine, analog circuitry, digital circuitry, and/or logic circuitry, the memory and/or memory element storing the corresponding operational instructions may be embedded within, or external to, the circuitry comprising the state machine, analog circuitry, digital circuitry, and/or logic circuitry. Still further note that, the memory element stores, and the processing module <b>50</b> executes, hard coded and/or operational instructions corresponding to at least some of the steps and/or functions illustrated in <figref idref="DRAWINGS">FIGS. 1-19</figref> B.</p>
<p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic block diagram of an embodiment of a dispersed storage (DS) processing module <b>34</b> of user device <b>12</b> and/or of the DS processing unit <b>16</b>. The DS processing module <b>34</b> includes a gateway module <b>78</b>, an access module <b>80</b>, a grid module <b>82</b>, and a storage module <b>84</b>. The DS processing module <b>34</b> may also include an interface <b>30</b> and the DSnet interface <b>32</b> or the interfaces <b>68</b> and/or <b>70</b> may be part of user <b>12</b> or of the DS processing unit <b>14</b>. The DS processing module <b>34</b> may further include a bypass/feedback path between the storage module <b>84</b> to the gateway module <b>78</b>. Note that the modules <b>78</b>-<b>84</b> of the DS processing module <b>34</b> may be in a single unit or distributed across multiple units.</p>
<p id="p-0070" num="0069">In an example of storing data, the gateway module <b>78</b> receives an incoming data object that includes a user ID field <b>86</b>, an object name field <b>88</b>, and the data field <b>40</b> and may also receive corresponding information that includes a process identifier (e.g., an internal process/application ID), metadata, a file system directory, a block number, a transaction message, a user device identity (ID), a data object identifier, a source name, and/or user information. The gateway module <b>78</b> authenticates the user associated with the data object by verifying the user ID <b>86</b> with the managing unit <b>18</b> and/or another authenticating unit.</p>
<p id="p-0071" num="0070">When the user is authenticated, the gateway module <b>78</b> obtains user information from the management unit <b>18</b>, the user device, and/or the other authenticating unit. The user information includes a vault identifier, operational parameters, and user attributes (e.g., user data, billing information, etc.). A vault identifier identifies a vault, which is a virtual memory space that maps to a set of DS storage units <b>36</b>. For example, vault <b>1</b> (i.e., user <b>1</b>'s DSN memory space) includes eight DS storage units (X=8 wide) and vault <b>2</b> (i.e., user <b>2</b>'s DSN memory space) includes sixteen DS storage units (X=16 wide). The operational parameters may include an error coding algorithm, the width n (number of pillars X or slices per segment for this vault), a read threshold T, a write threshold, an encryption algorithm, a slicing parameter, a compression algorithm, an integrity check method, caching settings, parallelism settings, and/or other parameters that may be used to access the DSN memory layer.</p>
<p id="p-0072" num="0071">The gateway module <b>78</b> uses the user information to assign a source name <b>35</b> to the data. For instance, the gateway module <b>60</b> determines the source name <b>35</b> of the data object <b>40</b> based on the vault identifier and the data object. For example, the source name may contain a file identifier (ID), a vault generation number, a reserved field, and a vault identifier (ID). As another example, the gateway module <b>78</b> may generate the file ID based on a hash function of the data object <b>40</b>. Note that the gateway module <b>78</b> may also perform message conversion, protocol conversion, electrical conversion, optical conversion, access control, user identification, user information retrieval, traffic monitoring, statistics generation, configuration, management, and/or source name determination.</p>
<p id="p-0073" num="0072">The access module <b>80</b> receives the data object <b>40</b> and creates a series of data segments <b>1</b> through Y <b>90</b>-<b>92</b> in accordance with a data storage protocol (e.g., file storage system, a block storage system, and/or an aggregated block storage system). The number of segments Y may be chosen or randomly assigned based on a selected segment size and the size of the data object. For example, if the number of segments is chosen to be a fixed number, then the size of the segments varies as a function of the size of the data object. For instance, if the data object is an image file of 4,194,304 eight bit bytes (e.g., 33,554,432 bits) and the number of segments Y=131,072, then each segment is 256 bits or 32 bytes. As another example, if segment sized is fixed, then the number of segments Y varies based on the size of data object. For instance, if the data object is an image file of 4,194,304 bytes and the fixed size of each segment is 4,096 bytes, the then number of segments Y=1,024. Note that each segment is associated with the same source name.</p>
<p id="p-0074" num="0073">The grid module <b>82</b> receives the data segments and may manipulate (e.g., compression, encryption, cyclic redundancy check (CRC), etc.) each of the data segments before performing an error coding function of the error coding dispersal storage function to produce a pre-manipulated data segment. After manipulating a data segment, if applicable, the grid module <b>82</b> error encodes (e.g., Reed-Solomon, Convolution encoding, Trellis encoding, etc.) the data segment or manipulated data segment into X error coded data slices <b>42</b>-<b>44</b>.</p>
<p id="p-0075" num="0074">The value X, or the number of pillars (e.g., X=16), is chosen as a parameter of the error coding dispersal storage function. Other parameters of the error coding dispersal function include a read threshold T, a write threshold W, etc. The read threshold (e.g., T=10, when X=16) corresponds to the minimum number of error-free error coded data slices required to reconstruct the data segment. In other words, the DS processing module <b>34</b> can compensate for X&#x2212;T (e.g., 16&#x2212;10=6) missing error coded data slices per data segment. The write threshold W corresponds to a minimum number of DS storage units that acknowledge proper storage of their respective data slices before the DS processing module indicates proper storage of the encoded data segment. Note that the write threshold is greater than or equal to the read threshold for a given number of pillars (X).</p>
<p id="p-0076" num="0075">For each data slice of a data segment, the grid module <b>82</b> generates a unique slice name <b>37</b> and attaches it thereto. The slice name <b>37</b> includes a universal routing information field and a vault specific field and may be 48 bytes (e.g., 24 bytes for each of the universal routing information field and the vault specific field). As illustrated, the universal routing information field includes a slice index, a vault ID, a vault generation, and a reserved field. The slice index is based on the pillar number and the vault ID and, as such, is unique for each pillar (e.g., slices of the same pillar for the same vault for any segment will share the same slice index). The vault specific field includes a data name, which includes a file ID and a segment number (e.g., a sequential numbering of data segments <b>1</b>-Y of a simple data object or a data block number).</p>
<p id="p-0077" num="0076">Prior to outputting the error coded data slices of a data segment, the grid module may perform post-slice manipulation on the slices. If enabled, the manipulation includes slice level compression, encryption, CRC, addressing, tagging, and/or other manipulation to improve the effectiveness of the computing system.</p>
<p id="p-0078" num="0077">When the error coded data slices of a data segment are ready to be outputted, the grid module <b>82</b> determines which of the DS storage units <b>36</b> will store the EC data slices based on a dispersed storage memory mapping associated with the user's vault and/or DS storage unit attributes. The DS storage unit attributes may include availability, self-selection, performance history, link speed, link latency, ownership, available DSN memory, domain, cost, a prioritization scheme, a centralized selection message from another source, a lookup table, data ownership, and/or any other factor to optimize the operation of the computing system. Note that the number of DS storage units <b>36</b> is equal to or greater than the number of pillars (e.g., X) so that no more than one error coded data slice of the same data segment is stored on the same DS storage unit <b>36</b>. Further note that EC data slices of the same pillar number but of different segments (e.g., EC data slice <b>1</b> of data segment <b>1</b> and EC data slice <b>1</b> of data segment <b>2</b>) may be stored on the same or different DS storage units <b>36</b>.</p>
<p id="p-0079" num="0078">The storage module <b>84</b> performs an integrity check on the outbound encoded data slices and, when successful, identifies a plurality of DS storage units based on information provided by the grid module <b>82</b>. The storage module <b>84</b> then outputs the encoded data slices <b>1</b> through X of each segment <b>1</b> through Y to the DS storage units <b>36</b>. Each of the DS storage units <b>36</b> stores its EC data slice(s) and maintains a local virtual DSN address to physical location table to convert the virtual DSN address of the EC data slice(s) into physical storage addresses.</p>
<p id="p-0080" num="0079">In an example of a read operation, the user device <b>12</b> and/or <b>14</b> sends a read request to the DS processing unit <b>14</b>, which authenticates the request. When the request is authentic, the DS processing unit <b>14</b> sends a read message to each of the DS storage units <b>36</b> storing slices of the data object being read. The slices are received via the DSnet interface <b>32</b> and processed by the storage module <b>84</b>, which performs a parity check and provides the slices to the grid module <b>82</b> when the parity check was successful. The grid module <b>82</b> decodes the slices in accordance with the error coding dispersal storage function to reconstruct the data segment. The access module <b>80</b> reconstructs the data object from the data segments and the gateway module <b>78</b> formats the data object for transmission to the user device.</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic block diagram of an embodiment of a grid module <b>82</b> that includes a control unit <b>73</b>, a pre-slice manipulator <b>75</b>, an encoder <b>77</b>, a slicer <b>79</b>, a post-slice manipulator <b>81</b>, a pre-slice de-manipulator <b>83</b>, a decoder <b>85</b>, a de-slicer <b>87</b>, and/or a post-slice de-manipulator <b>89</b>. Note that the control unit <b>73</b> may be partially or completely external to the grid module <b>82</b>. For example, the control unit <b>73</b> may be part of the computing core at a remote location, part of a user device, part of the DS managing unit <b>18</b>, or distributed amongst one or more DS storage units.</p>
<p id="p-0082" num="0081">In an example of write operation, the pre-slice manipulator <b>75</b> receives a data segment <b>90</b>-<b>92</b> and a write instruction from an authorized user device. The pre-slice manipulator <b>75</b> determines if pre-manipulation of the data segment <b>90</b>-<b>92</b> is required and, if so, what type. The pre-slice manipulator <b>75</b> may make the determination independently or based on instructions from the control unit <b>73</b>, where the determination is based on a computing system-wide predetermination, a table lookup, vault parameters associated with the user identification, the type of data, security requirements, available DSN memory, performance requirements, and/or other metadata.</p>
<p id="p-0083" num="0082">Once a positive determination is made, the pre-slice manipulator <b>75</b> manipulates the data segment <b>90</b>-<b>92</b> in accordance with the type of manipulation. For example, the type of manipulation may be compression (e.g., Lempel-Ziv-Welch, Huffman, Golomb, fractal, wavelet, etc.), signatures (e.g., Digital Signature Algorithm (DSA), Elliptic Curve DSA, Secure Hash Algorithm, etc.), watermarking, tagging, encryption (e.g., Data Encryption Standard, Advanced Encryption Standard, etc.), adding metadata (e.g., time/date stamping, user information, file type, etc.), cyclic redundancy check (e.g., CRC32), and/or other data manipulations to produce the pre-manipulated data segment.</p>
<p id="p-0084" num="0083">The encoder <b>77</b> encodes the pre-manipulated data segment <b>92</b> using a forward error correction (FEC) encoder (and/or other type of erasure coding and/or error coding) to produce an encoded data segment <b>94</b>. The encoder <b>77</b> determines which forward error correction algorithm to use based on a predetermination associated with the user's vault, a time based algorithm, user direction, DS managing unit direction, control unit direction, as a function of the data type, as a function of the data segment <b>92</b> metadata, and/or any other factor to determine algorithm type. The forward error correction algorithm may be Golay, Multidimensional parity, Reed-Solomon, Hamming, Bose Ray Chauduri Hocquenghem (BCH), Cauchy-Reed-Solomon, or any other FEC encoder. Note that the encoder <b>77</b> may use a different encoding algorithm for each data segment <b>92</b>, the same encoding algorithm for the data segments <b>92</b> of a data object, or a combination thereof.</p>
<p id="p-0085" num="0084">The encoded data segment <b>94</b> is of greater size than the data segment <b>92</b> by the overhead rate of the encoding algorithm by a factor of X/T, where X is the width or number of slices, and T is the read threshold. In this regard, the corresponding decoding process can accommodate at most X-T missing EC data slices and still recreate the data segment <b>92</b>. For example, if X=16 and T=10, then the data segment <b>92</b> will be recoverable as long as 10 or more EC data slices per segment are not corrupted.</p>
<p id="p-0086" num="0085">The slicer <b>79</b> transforms the encoded data segment <b>94</b> into EC data slices in accordance with the slicing parameter from the vault for this user and/or data segment <b>92</b>. For example, if the slicing parameter is X=16, then the slicer <b>79</b> slices each encoded data segment <b>94</b> into 16 encoded slices.</p>
<p id="p-0087" num="0086">The post-slice manipulator <b>81</b> performs, if enabled, post-manipulation on the encoded slices to produce the EC data slices. If enabled, the post-slice manipulator <b>81</b> determines the type of post-manipulation, which may be based on a computing system-wide predetermination, parameters in the vault for this user, a table lookup, the user identification, the type of data, security requirements, available DSN memory, performance requirements, control unit directed, and/or other metadata. Note that the type of post-slice manipulation may include slice level compression, signatures, encryption, CRC, addressing, watermarking, tagging, adding metadata, and/or other manipulation to improve the effectiveness of the computing system.</p>
<p id="p-0088" num="0087">In an example of a read operation, the post-slice de-manipulator <b>89</b> receives at least a read threshold number of EC data slices and performs the inverse function of the post-slice manipulator <b>81</b> to produce a plurality of encoded slices. The de-slicer <b>87</b> de-slices the encoded slices to produce an encoded data segment <b>94</b>. The decoder <b>85</b> performs the inverse function of the encoder <b>77</b> to recapture the data segment <b>90</b>-<b>92</b>. The pre-slice de-manipulator <b>83</b> performs the inverse function of the pre-slice manipulator <b>75</b> to recapture the data segment <b>90</b>-<b>92</b>.</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram of an example of slicing an encoded data segment <b>94</b> by the slicer <b>79</b>. In this example, the encoded data segment <b>94</b> includes thirty-two bits, but may include more or less bits. The slicer <b>79</b> disperses the bits of the encoded data segment <b>94</b> across the EC data slices in a pattern as shown. As such, each EC data slice does not include consecutive bits of the data segment <b>94</b> reducing the impact of consecutive bit failures on data recovery. For example, if EC data slice <b>2</b> (which includes bits <b>1</b>, <b>5</b>, <b>9</b>, <b>13</b>, <b>17</b>, <b>25</b>, and <b>29</b>) is unavailable (e.g., lost, inaccessible, or corrupted), the data segment can be reconstructed from the other EC data slices (e.g., 1, 3 and 4 for a read threshold of 3 and a width of 4).</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 6</figref> is a schematic block diagram of another embodiment of a computing system where one or more user devices may store and retrieve data from a plurality of dispersed storage networks (DSNs). Such a system includes one or more user devices <b>12</b>, one or more user devices <b>14</b>, a dispersed storage (DS) processing unit <b>102</b>, a management authority <b>104</b>, a naming authority <b>106</b>, a billing authority <b>108</b>, a security authority <b>110</b>, a publishing authority <b>112</b>, a network <b>24</b>, and a plurality of DSN systems <b>1</b>-D. Each of the DSN systems <b>1</b>-D includes a plurality of DS units <b>36</b>, a DS processing unit <b>16</b>, a DS managing unit <b>18</b>, and a storage integrity processing unit <b>20</b>. The DS processing unit facilitates access to the plurality of DSNs <b>1</b>-D for one or more user devices <b>14</b>.</p>
<p id="p-0091" num="0090">Each of the management authority <b>104</b>, the naming authority <b>106</b>, the billing authority <b>108</b>, the security authority <b>110</b>, and the publishing authority <b>112</b> may be a portable computing device (e.g., a social networking device, a gaming device, a cell phone, a smart phone, a personal digital assistant, a digital music player, a digital video player, a laptop computer, a handheld computer, a video game controller, and/or any other portable device that includes a computing core) and/or a fixed computing device (e.g., a personal computer, a computer server, a cable set-top box, a satellite receiver, a television set, a printer, a fax machine, home entertainment equipment, a video game console, and/or any type of home or office computing equipment). Such a portable or fixed computing device includes a computing core <b>26</b> and one or more interfaces <b>30</b>, <b>32</b>, and <b>33</b>.</p>
<p id="p-0092" num="0091">A user device <b>12</b> of the one or more user devices <b>12</b> affiliates with a DSN system of the plurality of DSNs <b>1</b>-D. For example, user device <b>12</b> affiliates with a home or local DSN system <b>2</b>. As such, user device <b>12</b> normally stores and retrieve encoded data slices to/from a plurality of DS units <b>36</b> of DSN system <b>2</b> via the network <b>24</b>. As another example, user device <b>14</b> stores and retrieves a data object to/from DS processing unit <b>16</b> of DSN system <b>1</b> via the network <b>24</b>. As another example, user device <b>14</b> stores and retrieves the data object to/from the DS processing unit <b>102</b>. Such a DS processing unit <b>102</b> may not be directly associated with a plurality of DS units <b>36</b>. As such, DS processing unit <b>102</b> may be considered as a still further DSN system without specifically assigned DS units <b>36</b>. As an implementation example, DS processing unit <b>102</b> is associated with an internet service provider (ISP) portal such that user device <b>14</b> gains access to the internet through a portal associated with the DS processing unit <b>102</b>. The method of operation of the DS processing unit <b>102</b> is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 15</figref> A-<b>15</b> B.</p>
<p id="p-0093" num="0092">In another example, the user devices <b>12</b>-<b>14</b> affiliate with one or more other DSN system(s) in addition to a local/home DSN system to facilitate access to DS units <b>36</b> of two or more DSN systems. For example, user device <b>12</b> affiliates with DSN system <b>1</b> and DSN system <b>2</b> such that the user device <b>12</b> may store and retrieve data slices to the DS units <b>36</b> of DSN system <b>1</b> and/or DSN system <b>2</b>. For instance, user device <b>12</b> stores data slices of each pillar of a data segment in one or both of DSN system <b>1</b> and DSN system <b>2</b>. As another instance, user device <b>12</b> stores data slices of 5 pillars in DSN system <b>1</b> and nothing in DSN system <b>2</b> when a pillar width is 5. As yet another instance, user device <b>12</b> stores data slices of 5 pillars in DSN system <b>1</b> and stores replicated data slices of all 5 pillars in DSN system <b>2</b> when the pillar width is 5. As a still further instance, user device <b>12</b> stores data slices of a first 3 of 5 pillars in DSN system <b>1</b> and stores data slices of a next 2 of 5 pillars in DSN system <b>2</b> when the pillar width is 5. The method of operation of a DS processing <b>34</b> of user device <b>12</b> and/or of DS processing <b>102</b> to store and/or retrieve data slices to a plurality of DSN systems is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 7-19</figref> B.</p>
<p id="p-0094" num="0093">Such a management authority <b>104</b> functions includes one or more of exchange of management information between two or more DS managing units <b>18</b>, aggregation of management information, reporting of management information, provisioning of global vaults, provisioning of global identities, allocation of storage resources, and establishment of global operational parameters utilized by two or more of the DSN systems.</p>
<p id="p-0095" num="0094">Such a naming authority <b>106</b> functions includes one or more of allocation of global virtual DSN address ranges, allocation of regional virtual DSN address ranges, exchange of naming information between two or more DS managing units <b>18</b>, aggregation of naming information, reporting of naming information, and establishment of global naming parameters utilized by two or more of the DSN systems. For example, the naming authority <b>106</b> allocates a portion of a DSN virtual address range to be common as a global virtual DSN address range across each of the DSN systems <b>1</b>-D. As another example, the naming authority <b>106</b> allocates a second portion of the DSN virtual address range to be common as a regional virtual DSN address range across a first portion and a second portion of the DSN systems <b>1</b>-D. As such, a regional virtual DSN address range may be shared amongst two or more DSN systems. The method of operation of the naming authority <b>106</b> is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 16</figref> A-<b>16</b> B.</p>
<p id="p-0096" num="0095">Such a billing authority <b>108</b> functions includes one or more of allocation of resources, exchanging of billing information between two or more DS managing units <b>18</b>, determination of usage information, aggregation of billing information, balancing billing credits and debits, establishment of billing rates, utilization of billing rates, reporting of billing information, and establishment of global billing parameters utilized by two or more of the DSN systems. For example, the billing authority <b>108</b> determines billing information for user device <b>14</b> based on received DSN system <b>1</b> usage information for user device <b>14</b> and received DSN system <b>3</b> usage information for user device <b>14</b>. The method of operation of the billing authority <b>108</b> is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 14</figref> A-<b>14</b> B.</p>
<p id="p-0097" num="0096">Such a security authority <b>110</b> functions includes one or more of the creation of a root certificate, the processing of a digital signing request from an element of a DSN system, processing of a digital signing request from a user device <b>12</b>-<b>14</b>, certificate validation, and root certificate distribution. For example, the security authority <b>110</b> processes a digital signing request from a DS managing unit <b>18</b> of DSN system <b>6</b>. Next, the security authority <b>110</b> sends a root certificate to DS managing unit <b>18</b> when the security authority <b>110</b> determines that the digital signing request is valid. The method of operation of the security authority <b>110</b> is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 17</figref> A-<b>19</b> B.</p>
<p id="p-0098" num="0097">Such a publishing authority <b>112</b> functions includes one or more of determination of storage locations of data slices for a data object, determination of replication of pillars across two or more of the DSN systems, a determination of estimated optimized DS unit <b>36</b> access performance, publication of storage location information, publication of performance information, and allocation of estimated performance information. For example, the publishing authority <b>112</b> determines that data slices of each pillar of a stored data object are stored in a set of DS units <b>36</b> of DSN system <b>2</b> in are replicated in a set of DS units <b>36</b> of DSN system <b>7</b>. Next, the publishing authority <b>112</b> determines which of the set of DS units <b>36</b> of DSN system <b>2</b> and the set of DS units <b>36</b> of DSN system <b>7</b> have a best-estimated access performance with reference to DS processing unit <b>102</b>. Next, publishing authority <b>112</b> publishes estimated access performance information with reference to DS processing unit <b>102</b> such that DS processing unit <b>102</b> may utilize the estimated access performance information in determining which DSN system to subsequently access (e.g., retrieve, store, delete, list) which pillars. The method of operation of the publishing authority <b>112</b> is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 11</figref> A-<b>11</b> B.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 7</figref> is a flowchart illustrating an example of storing data. The method begins with step <b>114</b> word processing module receives a store data request message from any one of a user device, a dispersed storage (DS) processing unit, a storage integrity processing unit, a DS managing unit, and a DS unit. Such a store data request message may include one or more of a user identifier (ID), a request code, a data ID, a data object, a data segment, a data block, a data type indicator, a data hash, a vault ID, a data size indicator, a priority indicator, a security indicator, storage requirements, and a performance indicator.</p>
<p id="p-0100" num="0099">The method continues at step <b>116</b> where the processing module determines metadata. Such metadata may describe the data (e.g., the indicators and descriptors of the data object) and/or requirements for storage access (e.g., priority, performance, availability, reliability, geographic requirements). Such a determination may be based on one or more of a vault lookup, an affiliation indicator, a command, a message, a predetermination, a data object analysis, the data object name, the data object size, a data type, the data object, input metadata, the priority indicator, the security indicator, the performance indicator, and the storage requirements.</p>
<p id="p-0101" num="0100">The method continues at step <b>118</b> where the processing module determines a replication factor. Such a replication factor indicates how many copies of the data shall be stored (e.g., as multiple sets of encode slices). Such a determination may be based on one or more of the data, requirements, the metadata, a message, a lookup, information received in the store data object message, and replication guidelines. For example, the processing module determines the replication factor to be 2 when the requirements indicate that a higher level of reliability is required. As another example, the processing module determines the replication factor to be 5 when the requirements indicate that broad geographic distribution is required to enable favorable copy retrieval performance (e.g., a desirable access latency).</p>
<p id="p-0102" num="0101">The method continues at step <b>120</b> where the processing module identifies a plurality of dispersed storage networks (DSNs) for storing copies of dispersed storage encoded data based on global data retrieval accesses of the copies of the dispersed storage encoded data. Such a determination may be based on one or more of the replication factor, available DSN systems, DSN system attributes, the data, the requirements, the metadata, a message, and a lookup. For example, the processing module determines to store data slices and replicated data slices in DSN systems <b>1</b> and <b>6</b> when the DSN system attributes match the storage requirements (e.g., closer geographic proximity of the DSN systems to the user device). The processing module may determine the global data retrieval accesses based on one or more of quantity of retrieval accesses, a data type of the data, a data size indicator of the data, a user device geographic affiliation, a dispersed storage processing unit geographic affiliation, a geographic requirement, a DSN geographic affiliation, a retrieval latency requirement, a DSN performance level, an availability requirement, a reliability requirement, a predetermination, and a user identifier (ID).</p>
<p id="p-0103" num="0102">The method continues at step <b>122</b> where the processing module determines DS unit storage sets for each of the DSN systems. Such a determination may be based on one or more of the identified DSNs, the replication factor, available DS unit storage sets, DS unit storage set attributes, the data object, the requirements, the metadata, a message, and a lookup. For example, the processing module determines the DS unit storage sets that are closest to an associated DS processing module based on the DS unit storage set attributes.</p>
<p id="p-0104" num="0103">The method continues at step <b>124</b> where the processing module determines a set of error coding dispersal storage parameters for at least one of the plurality of DSNs based on local data retrieval accesses allocated to the at least one of the plurality of DSNs. The processing module determines the local data retrieval accesses for each of the plurality of DSNs based on an allocation portion of the global data retrieval accesses the processing module determines the allocation portion based on one or more of the global data retrieval accesses, information received in the store data request message, the data, the replication factor, the metadata, the DSN systems, the DS unit storage sets, a vault lookup, a command, a message, and a predetermination.</p>
<p id="p-0105" num="0104">At step <b>124</b> processing module determines a second set of error coding dispersal storage parameters for at least a second one of the plurality of DSNs based on second local data retrieval accesses allocated to the at least the second one of the plurality of DSNs. For example, the processing module determines a common decode threshold for each of the set and second set of error coding dispersal storage parameters to enable utilization of replicated slices between DSNs. Next, the processing module determines a first plurality of parameter subsets for the set of error coding dispersal storage parameters, which includes a first pillar width, a first write threshold, and a first read threshold and the processing module determines a second plurality of parameter subsets for the second set of error coding dispersal storage parameters, which includes a second pillar width, a second write threshold, and a second read threshold.</p>
<p id="p-0106" num="0105">The method continues at step <b>126</b> where the processing module facilitates storage of the error coding dispersal storage parameters and/or facilitates storage of a plurality of DSN identifiers (IDs), wherein each DSN ID of the plurality of DSN IDs corresponds to a DSN of the plurality of DSNs (e.g., to facilitate subsequent access to the copies). The method continues at step <b>128</b> where the processing module encodes data in accordance with the set of error coding dispersal storage parameters to produce a copy of the copies of the dispersed storage encoded data. The method continues at step <b>130</b> where the processing module outputs the copy of the copies of the dispersed storage encoded data to the at least one of the plurality of DSNs.</p>
<p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. 8</figref> A is another flowchart illustrating another example of storing data, which includes similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. The method begins with steps <b>114</b>, <b>116</b>, <b>118</b>, and <b>120</b> of <figref idref="DRAWINGS">FIG. 7</figref> where a processing module receives a store data request message, determines metadata, determines the replication factor, and identifies a plurality of dispersed storage networks (DSNs). The method continues at step <b>140</b> where the processing module determines a local DS unit storage set for a local DSN of the DSNs. Such a determination may be based on one or more of the local DSN, the replication factor, available DS unit storage sets, DS unit storage set attributes, data, requirements, the metadata, a message, and a lookup. For example, the processing module determines the local DS unit storage set that is closest to an associated user device based on local DS unit storage set geographic attributes.</p>
<p id="p-0108" num="0107">The method continues at step <b>142</b> where the processing module determines that a set of the plurality of DSNs have substantially similar local data retrieval accesses. Next, the processing module determines a set of error coding dispersal storage parameters for a set of the plurality of DSNs. The method continues at step <b>126</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module saves the set of error coding dispersal storage parameters.</p>
<p id="p-0109" num="0108">The method continues at step <b>146</b> where the processing module encodes, by one of the set of DSNs, data in accordance with the set of error coding dispersal storage parameters to produce a plurality of sets of encoded data slices. The method continues at step <b>148</b> where the processing module stores, by the one of the set of DSNs, the plurality of sets of encoded data slices within the one of the set of DSNs. For example, the processing module sends the plurality of sets of encoded data slices to the local DS unit storage set for storage therein.</p>
<p id="p-0110" num="0109">The method continues at step <b>150</b> where the processing module outputs, by the one of the set of DSNs, the plurality of sets of encoded data slices to other DSNs of the set of the plurality of DSNs for storage therein (e.g., when storing replicated slices). For example, the processing module sends all pillars of the plurality of sets of encoded data slices to the other DSNs for storage therein. As another example, the processing module sends an encoded data slice of a first pillar to a DS unit of the local DSN system and sends the encoded data slice to a second DSN system for storage in a DS unit of the second DSN system. As yet another example, the processing module sends a decode threshold number of encoded data slices to DS units of the local DSN system and sends other encoded data slices to a second DSN system for storage in DS units of the second DSN system. As stills another example, the processing module sends the encoded data slices such that all pillars are stored in a similar geographic region but in two or more DSN systems. For instance, the first half of the pillars may be stored in DS units of the desired geographic region in the first DSN system and the second half of the pillars may be stored in DS units of the desired geographic region in the second DSN system.</p>
<p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. 8</figref> B is another flowchart illustrating an example of authorizing encoded data slice storage. The method begins with step <b>152</b> where a processing module receives, by a second one of at least one of a plurality of dispersed storage networks (DSNs), a copy of copies of dispersed storage encoded data from a first one of the at least one of the plurality of DSNs. Such a copy may include one or more of a requester identifier (ID), one or more sets of encoded data slices, and error coding dispersal storage parameters.</p>
<p id="p-0112" num="0111">The method continues at step <b>154</b> where the processing module determines whether a requester is authorized to access the second one of the at least one of the plurality of DSNs. Such a determination may be based on one or more of the requester ID, a vault ID, a user ID, a data object name, a slice name, a source name, a root certificate, a DSN digital certificate, a user device certificate, a dispersed storage (DS) processing module of the first DSN system certificate, a security authority query, a DS managing unit query, an authorization record lookup, a command, and a message. For example, the processing module determines that the requester is authorized to the second one of the at least one of the plurality of DSNs when each certificate is valid and the requester ID is authorized to access the second one of the at least one of the plurality of DSNs as indicated by a authorization record lookup.</p>
<p id="p-0113" num="0112">The method branches to step <b>158</b> when the processing module determines that the requester is authorized to access the second one of the at least one of the plurality of DSNs. The method ends with step <b>156</b> when the processing module determines that the requester is not authorized to access the second one of the at least one of the plurality of DSNs. At step <b>156</b>, the processing module sends an un-authorized message to one or more of the requester, a DS processing module, a DS managing unit, a first DSN system, a management authority, and a security authority.</p>
<p id="p-0114" num="0113">The method continues at step <b>158</b> where the processing module determines, by the second one of the at least one of the plurality of DSNs, a set of local DS units. Such a determination may be based on one or more of received error coding dispersal storage parameters, identified DSN systems, a replication factor, available DS unit storage sets (e.g. of the second one of the at least one of the plurality of DSNs), DS unit storage set attributes, encoded data slices, storage requirements, metadata, a message, and a lookup. For example, the processing module determines the local DS unit storage set that is closest to a DS processing module based on the local DS unit storage set attributes. The method continues at step <b>160</b> where the processing module stores a plurality of sets of encoded data slices of the copy of the copies of the dispersed storage encoded data within the set of local DS units.</p>
<p id="p-0115" num="0114">In addition, the processing module may identify, by the second one of the at least one of the plurality of DSNs, a third one of the at least one of the plurality of DSNs and output, by the second one of the at least one of the plurality of DSNs, the copy of the copies of the dispersed storage encoded data to the third one of the at least one of the plurality of DSNs.</p>
<p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. 9</figref> is a flowchart illustrating an example of retrieving data, which include similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. The method begins at step <b>162</b> where a processing module receives a retrieve data request message from a requester (e.g., from a user device). Such a retrieve data request message may include one or more of a user ID, a request, a data object name, a date to identifier (ID), a data type indicator, a data object hash, a vault ID, a data size indicator, a priority indicator, a security indicator, storage requirements, and a performance indicator. The method continues with steps <b>116</b>-<b>124</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines metadata, determines a plurality of dispersed storage networks (DSNs), determines dispersed storage (DS) storage sets, and determines error coding dispersal storage parameters.</p>
<p id="p-0117" num="0116">The method continues at step <b>172</b> where the processing module selects DS units from the DS unit storage sets. Such a selection may be based on one or more of the metadata, the error coding dispersal storage parameters, retrieval requirements, the DSN systems, a DSN lookup table access, the DS unit storage sets, DS unit attributes, DS unit status, estimated DS unit performance, estimated DS units reliability, estimated DS unit availability, and DS unit cost. Encoded data slice may be retrieved from two or more DS units where the two or more DS storage units are part of two or more DSN systems. As such, a data slice and a copy of the data slice may have been replicated in two or more DS units. For example, the processing module selects DS units corresponding to less than a decode threshold number of pillars from a first DSN system where the DS units have favorable estimated performance and the processing module selects DS units from a second DSN system corresponding to pillars to complete a decode threshold number of pillars in total from the two DSN systems such that DS units of the second DSN system have favorable estimated performance.</p>
<p id="p-0118" num="0117">The method continues at step <b>174</b> where the processing module retrieves at least a decode threshold number of encoded data slices from the selected DS units by sending the DS units one or more retrieve encoded data slice request messages. Next, the processing module receives at least a decode threshold number of encoded data slices from at least some of the selected DS units. The method continues at step <b>176</b> where the processing module dispersed storage error decodes the at least the decode threshold number of encoded data slices to reproduce data in accordance with the error coding dispersal storage parameters. The method continues at step <b>178</b> where the processing module sends the reproduced data to the requester.</p>
<p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. 10</figref> is a flowchart illustrating an example of rebuilding data that includes similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. The method begins with step <b>180</b> where a processing module determines a slice name of an encoded slice to be rebuilt within a first dispersed storage network (DSN). Such determining includes at least one of determining a slice name of a missing encoded slice as the slice name of the encoded slice to be rebuilt, determining a slice name of an encoded slice associated with an unfavorable integrity indication to produce the slice name of the encoded slice to be rebuilt, determining a slice name of an encoded slice associated with an unfavorable comparison of retrieved replicated encoded slices from two or more DSNs to produce the slice name of the encoded slice to be rebuilt, and receiving the slice name of the encoded slice to be rebuilt. The method continues with steps <b>120</b>-<b>124</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines DSN systems, determines dispersed storage (DS) unit storage sets, and determines error coding dispersal storage parameters.</p>
<p id="p-0120" num="0119">The method continues at step <b>188</b> where the processing module determines whether a corresponding copy of the encoded slice is stored in a second DSN. Such determining begins with determining whether the first and second DSNs are each storing an encoded copy of a data file (e.g., based on the determination of the DSN systems, and a slice name to DSN table lookup). Next, the processing module determines whether the first and second DSNs utilizes a similar set of error coding dispersal storage parameters to produce the encoded copy of the data file that includes a plurality of sets of encoded slices, when the first and second DSNs are each storing the encoded copy of the data file. The processing module determines that the corresponding copy of the encoded slice is stored in the second DSN when the first and second DSNs are using the similar set of error coding dispersal storage parameters. The method continues to step <b>190</b> when the processing module determines that the corresponding copy of encoded slice is stored in the second DSN.</p>
<p id="p-0121" num="0120">Next, the processing module determines whether the first and second DSNs utilizes a similar decoding threshold when the first and second DSNs are not using the similar set of error coding dispersal storage parameters. The processing module determines whether the encoded slice is an encoded data slice or an encoded parity slice when the first and second DSNs utilize the similar decoding threshold. The processing module determines that the corresponding copy of the encoded slice is not stored in the second DSN when the encoded slice is the encoded parity slice (e.g., different pillar widths lead to different party slices). The method branches to step <b>195</b> when the processing module determines that the corresponding copy of encoded slice is not stored in the second DSN. The processing module determines that the corresponding copy of the encoded slice is stored in the second DSN when the encoded slice is the encoded data slice (e.g., same size unity matrix is included in encoding matrices utilized to encode data into the same encoded data slices pillar by pillar for the decode threshold number of encoded data slices). The method continues to step <b>190</b> when the processing module determines that the corresponding copy of encoded slice is stored in the second DSN.</p>
<p id="p-0122" num="0121">The method continues at step <b>190</b> where the processing module selects a corresponding DS unit from a DS unit storage set associated with the second DSN of the DS unit storage sets. Such a selection may be based on one or more of the slice name, a pillar identifier (ID) associated with the slice name, a DS unit to pillar ID association, a slice name to DS unit table lookup, metadata, the error coding dispersal storage parameters, rebuild requirements, the DSN systems, the DS unit storage sets, DS unit attributes, DS unit status, estimated DS unit performance, estimated DS units reliability, estimated DS unit availability, and DS unit cost.</p>
<p id="p-0123" num="0122">The method continues at step <b>192</b> where the processing module retrieves the corresponding copy of the encoded slice from the second DSN when the corresponding copy of the encoded slice is stored in the second DSN. For example, the processing module sends an encoded slice read request message to the DS unit of the second DSN, wherein the message includes the slice name. Next, the processing module receives the encoded slice. The method continues at step <b>194</b> where the processing module stores the corresponding copy of the encoded slice as a rebuilt encoded slice within the first DSN. For example, the processing module sends a write request message to a corresponding DS unit of the first DSN, wherein the message includes the encoded slice and the slice name.</p>
<p id="p-0124" num="0123">The method continues at step <b>195</b> where the processing module requests a set of encoded slices from at least one of the first and second DSNs, wherein the set of encoded slices includes the encoded slice when the corresponding copy of encoded slice is not stored in the second DSN. Such requesting may include one or more of determining whether to request the set of slices from the first DSN, the second DSN, or a combination of the first and second DSNs based on network status and sending a set of encoded slice read request messages, wherein the request messages include a corresponding set of slice names. Such a set of slice names includes slice names associated with a decode threshold number of encoded slices subsequently utilized to rebuild the encoded slice and may not include the slice name. Such a network status may include one or more of a network utilization level, a network bandwidth availability indicator, a DSN status indicator, a DSN performance level indicator, and a DSN capacity indicator.</p>
<p id="p-0125" num="0124">The method continues at step <b>196</b> where the processing module receives a decode threshold number of encoded slices of a set of encoded slices to produce received encoded slices. The method continues at step <b>197</b> where the processing module rebuilds the encoded slice from the received encoded slices to produce a rebuilt encoded slice. Such rebuilding may be accomplished by a processing module of the first DSN or the second DSN. The method continues at step <b>198</b> where the processing module stores the rebuilt encoded slice in the first DSN.</p>
<p id="p-0126" num="0125">As an example of steps <b>195</b>-<b>198</b>, the first DSN requests the set of encoded slices from the at least one of the first and second DSNs and the first DSN receives the received encoded slices from the at least one of the first and second DSNs. Next, the first DSN rebuilds the encoded slice from the received encoded slices to produce a rebuilt encoded slice and the first DSN stores the rebuilt encoded slice in the first DSN.</p>
<p id="p-0127" num="0126">As another example of steps <b>195</b>-<b>198</b>, the second DSN requests the set of encoded slices from the at least one of the first and second DSNs and the second DSN receives the received encoded slices from the at least one of the first and second DSNs. Next, the second DSN rebuilds the encoded slice from the received encoded slices to produce a rebuilt encoded slice and the second DSN sends the rebuilt encoded slice to the first DSN. Next, the first DSN stores the rebuilt encoded slice in the first DSN.</p>
<p id="p-0128" num="0127"><figref idref="DRAWINGS">FIG. 11</figref> A is a flowchart illustrating an example of publishing storage information, which includes similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. The method begins with steps <b>120</b>-<b>122</b> of <figref idref="DRAWINGS">FIG. 7</figref> where a processing module (e.g., of a publishing authority) determines a plurality of dispersed storage networks (DSNs) of a computing system network and determines a plurality of dispersed storage (DS) unit storage sets within each of the DSNs. The method continues at step <b>208</b> where the processing module identifies sets of DS units for each of the plurality of dispersed storage networks (DSNs) in the computing system network, wherein a set of the sets of DS unit stores an error coded data file. Such an error coded data file may include a plurality of sets of encoded data slices, wherein the data file is dispersed storage error encoded to produce the plurality of sets of encoded data slices. Such identification may be based on one or more of obtaining (e.g., receiving, extracting from a list) an error coded data file identifier (ID) associated with the error coded data file, a source name associated with the error coded data file ID, a source name range, a slice name range, a source name to physical location table lookup, a retrieve data request message, a store data request message, available sets of DS units, DS unit attributes, and metadata.</p>
<p id="p-0129" num="0128">The method continues at step <b>210</b> where the processing module identifies a reference entity within the computing system network. Such an identification may be based on one or more of a reference entity list lookup, a user device to reference entity list lookup, a DS processing unit to reference entity list lookup, a DS processing module to reference entity list lookup, a computing system network topology, and a next reference entity in a reference entity sequence. In addition, the processing module may identify a second reference entity within the computing system network.</p>
<p id="p-0130" num="0129">The method continues at step <b>212</b> where the processing module determines first data access performance information between the reference entity and a first one of the sets of DS units and determines second data access performance information between the reference entity and a second one of the sets of DS units for each of the plurality of DSNs. In addition, when utilizing a second reference entity, the processing module determines third data access performance information between the second reference entity and the first one of the sets of DS units and determines fourth data access performance information between the second reference entity and the second one of the sets of DS units for each of the plurality of DSNs.</p>
<p id="p-0131" num="0130">Such a determination of the performance information may include one or more of determining a likelihood of retrieving a decode threshold number of encoded data slices of at least a portion of the error coded data file, determining data retrieval access latency for retrieving the decode threshold number of encoded data slices, and generating the data access performance information based on the likelihood of retrieving the decode threshold number of encoded data slices and the data retrieval access latency.</p>
<p id="p-0132" num="0131">Alternatively, such a determination of the performance information may include one or more of determining a likelihood of storing a write threshold number of encoded data slices of the at least a portion of the error coded data file, determining data write access latency for storing the write threshold number of encoded data slices, and generating the data access performance information based on the likelihood of storing the write threshold number of encoded data slices and the data write access latency.</p>
<p id="p-0133" num="0132">The method continues at step <b>214</b> for the processing module stores the first and second data access performance information for each of the plurality of DSNs to produce system data access performance information. In addition, the processing module stores the third and fourth data access performance information for each of the plurality of DSNs as part of the system data access performance information when utilizing a second reference entity. In addition, the processing module may update previous data access performance information with current data access performance information to produce the data access performance information. In addition, the processing module may output the data access performance information to an accessing device such that the accessing device determines specific data access performance information based on the reference entity's data access performance information. For example, the processing module outputs the data access performance information on a timed basis. As another example, the processing module outputs the data access performance information in response to a request.</p>
<p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. 11</figref> B is another flowchart illustrating another example of accessing data, which includes similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. Such a data access method may be utilized in a computing system network that includes a plurality of dispersed storage networks (DSNs), wherein each of the plurality of DSNs includes sets of dispersed storage (DS) units, and wherein a set of the sets of DS unit stores an error coded data file. The method begins at step <b>218</b> where a processing module (e.g., of a user device) receives a data access request message (e.g., read, write, delete, list, etc.). The method continues with steps <b>116</b> and <b>124</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines metadata and determines error coded dispersal storage parameters.</p>
<p id="p-0135" num="0134">The method continues at step <b>222</b> where the processing module determines slice names corresponding to the error coded data file. Such a determination may be based on one or more of a file name, a file identifier (ID), a user device ID, a user ID, a vault ID, a directory entry, a directory lookup, a source name retrieval, a source name lookup.</p>
<p id="p-0136" num="0135">The method continues at step <b>224</b> where the processing module contains a reference entity's data access performance information. Such reference entity's data access performance information includes, for each of the plurality of DSN first data access performance information between the reference entity and a first one of the sets of DS units and second data access performance information between the reference entity and a second one of the sets of DS units. Such obtaining of the reference entity's data access performance information includes at least one of outputting a data access performance information request message that identifies the reference entity, receiving the reference entity's data access performance information, and retrieving the reference entity's data access performance information from one of the plurality of DSNs or a publishing authority. For example, the processing module determines to read the error coded data file, identifies one or more of the plurality of DSNs that store a copy of the error coded data file and obtain these the reference entity's data access performance information for the one or more of the plurality of DSNs. As another example, the processing module determines to write the error coded data file and obtains the reference entity's data access performance information for each of the plurality of DSNs.</p>
<p id="p-0137" num="0136">The method continues at step <b>226</b> where the processing module interprets the first and second data access performance information of at least one of the plurality of DSNs to identify a desired set of DS units within one of the plurality of DSNs. Such identification may be based on one or more of the data name, the user ID, metadata, the error coding dispersal storage parameters, the slice names, the data access performance information, access performance requirements, a comparison of data access performance information associated with a first set of DS units to data access performance information associated with a second set of DS units, and a comparison of data access performance information to the access performance requirements. For example, the processing module selects a fourth set of DS units as the desired set of DS units when a comparison of data access performance information associated with the fourth set of DS units compares favorably to the access performance requirements. As another example, the processing module selects a fifth set of DS units as the desired set of DS units when a comparison of data access performance information associated with the fifth set of DS units compares favorably to data access performance information associated with the fourth set of DS units. The method continues at step <b>228</b> where the processing module accesses the desired set of DS units regarding the error coded data file.</p>
<p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. 12</figref> is a flowchart illustrating an example of migrating data, which include similar steps to <figref idref="DRAWINGS">FIGS. 7 and 9</figref>. The method begins with step <b>234</b> where a processing module determines a previously stored data copy for migration. Such a determination may be based on one or more of which step a migration process left off last time, a data copy migration list, whether an amount of elapsed time since a last migration consideration has exceeded a time threshold, whether an elapsed time since an initial storage of the data copy has exceeded a time threshold, a requirements change indicator, a dispersed storage network (DSN) system status change indicator, a predetermination, a command, and a message. Such a data copy migration list may include one or more of a user identifier (ID), a data copy name, a data type indicator, a data object hash, a vault ID, a data size indicator, a priority indicator, a security indicator, storage requirements, an initial storage timestamp, a time stamp corresponding to the last migration consideration, a time threshold, and a performance indicator.</p>
<p id="p-0139" num="0138">The method continues with steps <b>116</b>-<b>126</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines metadata, determines the replication factor, determines a plurality of DSNs, determines DS unit storage sets, determines error coded dispersal storage parameters, and saves the error coding dispersal storage parameters utilizing current data copy storage requirements and a current status and performance level associated with the plurality of DSNs. The method continues with step <b>174</b> of <figref idref="DRAWINGS">FIG. 9</figref> where the processing module retrieves encoded data slices of the data copy (e.g., to be migrated).</p>
<p id="p-0140" num="0139">The method continues with step <b>130</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module sends the data copy to the units of the DS unit storage sets for storage therein. For example, the processing module sends the data copy to DS unit storage sets, wherein the DS unit storage sets are substantially the same as previous DS unit storage sets utilized to previously store the data copy when one or more of the metadata, replication factor, the plurality of DSNs, the DS unit storage sets, and the error coding dispersal storage parameters are substantially the same as corresponding previous metadata, replication factor, plurality of DSNs, DS unit storage sets, and error coding dispersal storage parameters utilized to previously store the data copy. As another example, the processing module sends the data copy to three DS unit storage sets (e.g., a replication factor of 3) when the data copy was originally stored with replication factor of 2 and a higher level of reliability is currently required. As yet another example, the processing module sends the data copy to a single DS unit storage set when the data copy was initially stored with replication factor of 2 and a lower level of reliability is acceptable.</p>
<p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. 13</figref> is a flowchart illustrating an example of modifying the storage of data. The method begins with step <b>252</b> where a processing module determines access performance to copies of dispersed storage encoded data, wherein the copies of the dispersed storage encoded data are stored in a set of a plurality of dispersed storage networks (DSNs). Such determining of the access performance includes at least one of determining an access timing performance level, determining an availability performance level, and determining a reliability performance level. Such determining of the access timing performance level may be based on one or more of access timing performance historical data (e.g., average for a plurality of user devices, average the set of DSNs), a query, at least one ping test, at least one dispersed storage network test, and at least one encoded data slice access timing performance test. Such determining of the availability performance level may be based on one or more of availability performance historical data (e.g., DS unit availability, DSN availability, a number of DS units online, comparing the number of DS units online to one or more of a decode threshold, a write threshold, and a read threshold) and at least one encoded data slice availability test. Such determining of the reliability performance level may be based on one or more of reliability performance historical data (e.g., DS unit reliability, DSN reliability, a number of DS units online, comparing the number of DS units online to one or more of a decode threshold, a write threshold, and a read threshold) and at least one encoded data slice retrieval success test.</p>
<p id="p-0142" num="0141">The method continues at step <b>254</b> where the processing module determines that the access performance is not at the desired access performance level by comparing actual global data retrieval access information with estimated global data retrieval accesses of the copies of the dispersed storage encoded data and indicating that the access performance is not at the desired access performance level when the actual global data retrieval access information compares unfavorably with the estimated global data retrieval accesses. Such estimated global data retrieval accesses may include a desired access performance level further including one or more of an access timing storage performance level goal, an availability storage performance level goal, and a reliability storage performance level goal.</p>
<p id="p-0143" num="0142">The method continues at step <b>256</b> where the processing module modifies the set of the plurality of DSNs based on the access performance and the desired access performance level to produce a modified set of the plurality of DSNs when the access performance is not at a desired access performance level. Such modification of the set of the plurality of DSNs may include one or more of adding a new DSN, removing a current DSN, and reusing a current DSN. For example, the processing module determines differences between the actual global data retrieval access information and the estimated global data retrieval accesses of the copies of the dispersed storage encoded data and identifies the new DSN based on the differences. As another example, the processing module identifies a DSN of the set of DSNs to remove from the set of DSNs based on differences between the actual global data retrieval access information and the estimated global data retrieval accesses of the copies of the dispersed storage encoded data. As yet another example, the processing module identifies a remaining DSN of the set of DSNs to reuse based on reliability information of the access performance and desired reliability of the desired access performance level.</p>
<p id="p-0144" num="0143">The method continues at step <b>258</b> where the processing module determines whether the new DSN is added. The method branches to step <b>264</b> when the processing module determines not to add the new DSN. The method continues to step <b>260</b> when the processing module determines to add the new DSN. The method continues at step <b>260</b> where the processing module determines error coding dispersal storage parameters based on local data retrieval accesses allocated to the new DSN for the new DSN of a modified set of the plurality of DSNs. The method continues at step <b>262</b> where the processing module facilitates the new DSN storing another copy of the dispersed storage encoded data. Such facilitation includes at least one of retrieving one of the copies from a remaining DSN of the set of DSNs, decoding the one of the copies based on error coding dispersal storage parameters of the remaining DSN to produce the data, encoding the data in accordance with the error coding dispersal storage parameters to produce the other copy, and outputting the other copy to the new DSN. Alternatively, the facilitation includes determining that a remaining DSN of the set of DSNs utilized the error coding dispersal storage parameters and coordinating forwarding the other copy from the remaining DSN to the new DSN. As yet another alternative, the facilitation includes outputting the other copy to at least two DSNs of the modified set of the plurality of DSNs, wherein the at least to DSNs includes the new DSN (e.g., a first portion of a set of encoded data slices to one DSN and a remaining portion of the set of encoded data slices to the second DSN).</p>
<p id="p-0145" num="0144">The method continues at step <b>264</b> where the processing module determines whether to remove the DSN of the set of DSNs to remove. The method branches to step <b>266</b> when the processing module determines not to remove the DSN of the set of DSNs. The method continues to step <b>265</b> when the processing module determines to remove the DSN of the set of DSNs. The method continues at step <b>265</b> where the processing module removes the DSN from the set of DSNs. For example, the processing module removes the DSN from a list of DSNs then includes a copy of the copies of the dispersed storage encoded data. Alternatively, or in addition to, the processing module deletes a copy of the copies of the dispersed storage encoded data associated with the DSN of the set of DSNs.</p>
<p id="p-0146" num="0145">The method continues at step <b>266</b> where the processing module determines whether to reuse the remaining DSN of the set of DSNs to reuse. The method branches to step <b>269</b> for the method ends when the processing module determines not to reuse the remaining DSN of the set of DSNs to reuse. The method continues to step <b>265</b> when the processing module determines to reuse the remaining DSN of the set of DSNs to reuse. The method continues at step <b>267</b> where the processing module determines new error coding dispersal storage parameters for a remaining DSN based on a difference between the reliability information of the access performance and the desired reliability of the desired access performance level.</p>
<p id="p-0147" num="0146">The method continues at step <b>268</b> where the processing module facilitates the remaining DSN storing an updated copy of the dispersed storage encoded data based on the new error coding dispersal storage parameters. For example, the processing module retrieves a copy (e.g., a plurality of sets of encoded data slices) of the dispersed storage encoded data from the remaining DSN, dispersed storage error decodes the copy to reproduce the data, dispersed storage error encodes the data utilizing the new error coding dispersal storage parameters to produce the updated copy, and stores the updated copy in the remaining DSN. In an instance, the new error coding dispersal storage parameters includes a same decode threshold number as the error coding dispersal storage parameters and a larger width then a width of the error coding dispersal storage parameters. In such an instance, additional encoded parity slices are added to the remaining DSN (e.g., to improve retrieval reliability). Alternatively, or in addition to, the processing module outputs the updated copy to at least two DSNs of the set of DSNs to reuse, wherein the set of DSNs includes the remaining DSN (e.g., a first portion of a set of encoded data slices to one DSN and a remaining portion of the set of encoded data slices to the second DSN). The method continues to step <b>269</b> where the method ends.</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 14</figref> A is a flowchart illustrating an example of generating billing information. The method begins with step <b>270</b> where a processing module (e.g., of a dispersed storage (DS) managing unit) determines dispersed storage network DSN usage information. Such DSN usage information includes one or more of resource use, user activity by user identifier (ID), user activity by vault ID, resource use since a previous update, activity since a last update, amount of storage utilization, number of data segments stored, number of storage sequences, number retrieval sequence, and any other information that characterizes use inactivity within a corresponding DSN system. Such a determination may be based on one or more of monitoring usage, monitoring activity, historical activity records, historical usage records, a query, a vault lookup, a message, and a command. For example, the processing module determines that user <b>457</b> affiliated with DSN system <b>1</b> has used 1.496 terabytes of storage since a last update. As another example, the processing module determines that the vault A<b>40</b> affiliated with DSN system <b>2</b> has performed 10,492 retrieval sequences since a last update.</p>
<p id="p-0149" num="0148">The method continues with step <b>272</b> where the processing module determines whether to send the DSN usage information. Such a determination may be based on one or more of an elapsed time since a previous update was sent has exceeded a time threshold, a command, receiving a request to send the DSN usage information, a query, a predetermination, an error message, a new transaction indicator, and a DSN system status indicator. For example, the processing module determines to send the DSN usage information when 10 minutes has elapsed since a previous update was sent and the time threshold is 9 minutes. The method repeats back to step <b>270</b> when the processing module determines not to send DSN usage information. The method continues to step <b>274</b> when the processing module determines to send the DSN usage information.</p>
<p id="p-0150" num="0149">The method continues at step <b>274</b> where the processing module sends the DSN usage information to one or more of a billing authority, a DS managing unit, a DS unit, a DS processing unit, and a storage integrity processing unit. For example, the processing module sends the DSN usage information to a billing authority that is operably coupled to two or more DSN systems to resolve billing information between the two or more DSN systems. For instance, the processing module sends billing amounts (e.g., monetary values) corresponding to the DSN usage information in accordance with a billing rate to the billing authority. Such a billing authority may balance credits and debits between two or more DSN systems as discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. 14</figref> B.</p>
<p id="p-0151" num="0150"><figref idref="DRAWINGS">FIG. 14</figref> B is a flowchart illustrating an example of aggregating dispersed storage network (DSN) usage information. The method begins with step <b>276</b> where a processing module (e.g., of a billing authority) receives DSN usage information from two or more DSNs. For example, the processing module receives DSN <b>1</b> usage information from a dispersed storage (DS) managing unit associated with DSN <b>1</b> and the processing module receives DSN <b>2</b> usage information from a DS managing unit associated with DSN <b>2</b>.</p>
<p id="p-0152" num="0151">The method continues at step <b>278</b> where the processing module determines whether to aggregate the DSN usage information. Such a determination may be based on one or more of an elapsed time since a previous aggregation has exceeded an aggregation time threshold, a command, a query, a predetermination, an error message, a new transaction indicator, and a DSN system status indicator. The method repeats back to step <b>276</b> when the processing module determines that to aggregate the DSN usage information. The method continues to step <b>280</b> when the processing module determines to aggregate the DSN usage information.</p>
<p id="p-0153" num="0152">The method continues at step <b>280</b> where the processing module aggregates the DSN usage information. Such aggregation includes one or more of summarizing DSN resource usage by user identifier (ID) and/or vault ID, summarizing DSN activity by user ID and/or vault ID, summarizing DSN resource usage, summarizing DSN activity, converting usage information into billing information based on one or more billing rates, trading usage between different DSN systems, and trading credits and debits between different DSN systems. For example, the processing module evenly trade 10 units of DSN system <b>2</b> usage by user <b>123</b> of DSN system <b>1</b> for 10 units of DSN system <b>1</b> usage by user <b>456</b> of DSN system <b>2</b>. As another example, the processing module creates a debit of two units for DSN system <b>1</b> when there are 8 units of DSN system <b>2</b> usage by user <b>123</b> of DSN system and there are 10 units of DSN system <b>1</b> usage by user <b>456</b> of DSN system <b>2</b>. Such a unit of use may include an amount of storage per unit of time of one or more of data object storage, data segment storage, data slices of a pillar storage, and a data slice.</p>
<p id="p-0154" num="0153">The method continues at step <b>282</b> where the processing module creates a billing report. Such a billing report indicates one or more of the DSN usage information, billing information, and a net credit and debit balance by DSN system ID, user ID and/or vault ID. The processing module may send the billing report to one or more DS managing units associated with one or more DSNs.</p>
<p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. 15</figref> A is another flowchart illustrating another example of storing data, which include similar steps to <figref idref="DRAWINGS">FIG. 7</figref>. The method begins with steps <b>114</b>, <b>116</b>, and <b>118</b> of <figref idref="DRAWINGS">FIG. 7</figref> where a processing module (e.g., associated with a dispersed storage network (DSN) that does not include a dispersed storage (DS) unit but rather interfaces to a plurality of DSN systems that each include at least one DS unit, for instance, an internet service provider portal) receives a store data request message, determines metadata, and determines a replication factor.</p>
<p id="p-0156" num="0155">The method continues at step <b>290</b> where the processing module determines other DSN systems, wherein each DSN system of the other DSN systems includes at least one DS unit (e.g., where a data copy shall be stored). Such a determination may be based on one or more of attributes associated with a DSN portal, permissions associated with a user identifier (ID) associated with the store data request message, the replication factor, available DSN systems, DSN system attributes, data to be stored, storage requirements, the metadata, a message, and a lookup. For example, the processing module determines to store the data and a data copy of the data in DSN systems <b>3</b> and <b>8</b> when the processing module determines that DSN system attributes of DSN <b>3</b> and DSN <b>8</b> substantially match storage requirements (e.g., closer geographic proximity of DSN systems <b>3</b> and <b>8</b> to a user device associated with the data). Note that the processing module may determine to not utilize a local DSN system associated with the processing module when the processing module determines that the local DSN system attributes indicate that there are no DS units (e.g., the processing module is associated with portal with no associated storage).</p>
<p id="p-0157" num="0156">The method continues with steps <b>124</b>, <b>126</b>, and <b>128</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines error coding dispersal storage parameters, saves the error coding dispersal storage parameters, and encodes the data to produce a copy (e.g., at least a plurality of sets of encoded data slices). The method continues with the step where the processing module sends the plurality of sets of encoded data slices and the error coding dispersal storage parameters to the other DSNs for storage therein.</p>
<p id="p-0158" num="0157"><figref idref="DRAWINGS">FIG. 15</figref> B is another flowchart illustrating another example of retrieving data, which include similar steps to <figref idref="DRAWINGS">FIGS. 7</figref>, <b>9</b>, and <b>15</b> A. The method begins with step <b>162</b> of <figref idref="DRAWINGS">FIG. 9</figref> where a processing module (e.g., associated with a dispersed storage network (DSN) that does not include a dispersed storage (DS) unit but rather interfaces to a plurality of DSN systems that each include at least one DS unit, for instance, an internet service provider portal) receives a retrieve data request message from a requester (e.g., a user device). The method continues with steps <b>116</b>, <b>122</b>, and <b>124</b> of <figref idref="DRAWINGS">FIG. 7</figref> where the processing module determines metadata, determines DS unit storage sets, and determines error coding dispersal storage parameters. The method continues with step <b>290</b> of <figref idref="DRAWINGS">FIG. 15</figref> A where the processing module determines other DSN systems. For example, the processing module determines DSN identifiers (IDs) of each DSN of the other DSN systems based on a file ID associated with the retrieved data request message and a file ID to DSN system table lookup.</p>
<p id="p-0159" num="0158">The method continues at step <b>310</b> where the processing module selects DS units of the other DSNs to produce selected DS units. Such a selection may be based on one or more of the metadata, retrieval performance requirements, a DSN performance indicator, a DSN query, a replication factor, the DS unit storage sets the error coding dispersal storage parameters, the other DSN systems, DS unit attributes, DS unit availability information, DS unit reliability information, DS unit access cost, and DS unit performance information. For example, the processing module selects DS units of the other DSN systems that are closest to the processing module based on DS unit attributes and a query. The method continues with steps <b>174</b>, <b>176</b>, and <b>178</b> of <figref idref="DRAWINGS">FIG. 9</figref> where the processing module retrieves at least a decode threshold number of encoded data slices of each of a plurality of sets of encoded data slices corresponding to the data from the selected DS units, dispersed storage error decodes the at least the decode threshold number of encoded data slices of each of the plurality of sets encoded data slices to the produce data in accordance with the error coding dispersal storage parameters, and sends the data object to the requester.</p>
<p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. 16</figref> A is a flowchart illustrating an example of assigning a new vault. Such a new vault may be associated with one or more dispersed storage networks (DSNs). The method begins with step <b>318</b> where a processing module (e.g., of a dispersed storage (DS) managing unit) receives a new vault assignment request from one of a user device, another DS managing unit, and another DSN system. Such a new vault assignment request may include one or more of a user identifier (ID), a user device ID, a vault ID, a group ID, and a naming domain. Such a naming domain refers to utilization of the new vault including global, regional, sub-regional, local, and sub-local.</p>
<p id="p-0161" num="0160">The method continues at step <b>319</b> where the processing module determines a naming domain based on one or more of information interpreted from the new vault assignment request, a user ID, a naming domain table lookup, a vault lookup, a vault list, a message, and a command. The method ends with step <b>320</b> where the processing module assigns local namespace to a new vault when the processing module determines that the naming domain is local. Such local namespace may include a range of source names and/or slice name addresses that are uniquely utilized in one or more DSNs. Such similar namespace may be assigned for use in two or more DSNs enabling use of the namespace range localized within each of the two or more DSNs. The method branches to step <b>321</b> when the processing module determines that the naming domain is not local (e.g., global, regional, sub-regional).</p>
<p id="p-0162" num="0161">The method continues at step <b>321</b> where the processing module forwards the new vault assignment request to a naming authority. The method continues at step <b>322</b> where the processing module receives non-local new vault assignment information (e.g., from the naming authority in response to forwarding the new vault request). Such non-local new vault assignment information may include one or more of vault ID information, user ID information, source name range information, and slice name range information. The method continues at step <b>323</b> where the processing module stores the new vault assignment information for subsequent utilization by a DSN operationally affiliated with the processing module (e.g., a DS managing unit affiliated with the DSN).</p>
<p id="p-0163" num="0162"><figref idref="DRAWINGS">FIG. 16</figref> B is another flowchart illustrating another example of assigning a new vault, which include similar steps to <figref idref="DRAWINGS">FIG. 16</figref> A. The method begins with steps <b>318</b> and of <figref idref="DRAWINGS">FIG. 16</figref> A where a processing module (e.g., of a naming authority) receives a new vault assignment request and determines a naming domain. For example, the processing module determines that the naming domain is global when the new vault assignment request includes a request for a global naming domain.</p>
<p id="p-0164" num="0163">The method continues at step <b>326</b> where the processing module assigns namespace to a new vault. Note that the namespace may include a range of source name and/or slice name addresses that are utilized across two or more dispersed storage networks (DSNs). For example, the processing module assigns namespace that is shared amongst two or more DSNs when the naming domain is global. Note that such namespace assignment may further include assignment of one or more new user IDs and/or one or more new vault IDs. The method continues with step <b>323</b> of <figref idref="DRAWINGS">FIG. 16</figref> A where the processing module stores new vault assignment information to enable subsequent operation of two or more DSNs. The method continues at step <b>328</b> where the processing module sends the non-local new vault assignment information to DS managing unit(s) of affected DSNs.</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 16</figref> C is a flowchart illustrating an example of accessing a dispersed storage network. A method begins with step <b>329</b> where a processing module receives a dispersed storage network (DSN) access request. Such an access request may include one or more of a user identifier (ID), a user device ID, a vault ID, a DSN ID, a source name, a file name, a file ID, a data type indicator, a priority indicator, a performance indicator, a security indicator, and a reliability indicator.</p>
<p id="p-0166" num="0165">The method continues at step <b>330</b> where the processing module determines whether the DSN access request is associated with a local DSN vault or a global DSN vault, wherein the local DSN vault is contained within a DSN of a plurality of DSNs (e.g., local DSN vault includes a namespace address range utilized within at least one DSN and potentially reused within at least one other DSN) and the global DSN vault is contained within at least some of the plurality of DSNs (e.g., global DSN vault includes a namespace address range utilized across two or more DSNs). Such determining includes at least one of interpreting a requester identifier of the DSN access request, interpreting a vault identifier of the DSN access request, interpreting a data type of the DSN access request, accessing a table look-up, interpreting a local or global DSN identifier within the DSN access request (e.g., a flag), and querying a naming authority. For example, the processing module determines that the DSN access request is associated with the global DSN vault when the vault ID of the DSN access request is associated with the global DSN vault. As another example, the processing module determines that the DSN access request is associated with the global DSN vault based on a query response from the naming authority.</p>
<p id="p-0167" num="0166">The method branches to step <b>331</b> when the processing module determines that the DSN access request is associated with the local DSN vault. The method continues to step <b>331</b> when the processing module determines that the DSN access request is associated with the global DSN vault. The method continues at step <b>331</b> where the processing module determines whether the DSN access request includes a vault assignment request when the processing module determines that the DSN access request is associated with the global DSN vault. Such a vault assignment request includes at least one of a user ID, a user device ID, a group ID, and a requested naming domain (e.g., global, local, regional, sub-regional, sub-local). Such a determination may be based on one or more of interpreting the vault assignment request from the DSN access request, determining that the DSN access request is associated with a vault identifier that has not been assigned, a message, and an error indicator.</p>
<p id="p-0168" num="0167">The method continues at step <b>332</b> where the processing module sends the vault assignment request to a naming authority. The method continues at step <b>333</b> where the processing module receives a global vault assignment response that identifies a primary DSN (e.g., associated with the global DSN vault). The method continues at step <b>334</b> where the processing module processes vault assignment information from a global vault assignment response by one or more of extracting the vault assignment information from the global vault assignment response, storing the vault assignment information, and sending the vault assignment information to a sender of the DSN access request.</p>
<p id="p-0169" num="0168">The method continues at step <b>335</b> where the processing module identifies a primary DSN of the plurality of DSNs. Such identifying includes at least one of interpreting a requester identifier of the DSN access request, interpreting a global vault identifier of the DSN access request, interpreting a data type of the DSN access request, accessing a table look-up, interpreting a global DSN identifier within the DSN access request, and querying a naming authority. The method continues at step <b>336</b> where the processing module facilitates processing of the DSN access request by the primary DSN. Such facilitating includes identifying, by a first DSN of the plurality of DSNs, the first DSN as the primary DSN, processing, by the first DSN, the DSN access request to produce a DSN access response, and sending the DSN access response to a sender of the DSN access request. Alternatively, the facilitating includes identifying, by a first DSN of the plurality of DSNs, a second DSN of the plurality of DSNs as the primary DSN and forwarding the DSN access request to the second DSN.</p>
<p id="p-0170" num="0169">The method continues at step <b>331</b> where the processing module determines whether the DSN access request includes the vault assignment request when the DSN access request is associated with the local DSN vault. The method branches to step <b>338</b> when the processing module determines that the DSN access request does not include the vault assignment request. The method continues to step <b>337</b> when the processing module determines that the DSN access request includes the vault assignment request. The method continues at step <b>337</b> where the processing module creates the local vault (e.g., assigns a new local vault identifier to a user of the request, wherein the new local vault identifier may be reused in one or more other DSNs). The method continues at step <b>338</b> where the processing module processes the DSN access request to produce a DSN access response when the DSN access request does not include the vault assignment request. For example, the processing module facilitates storing an encoded data slice in the local DSN vault and generates a write response message as the DSN access response when the DSN access request includes a write request. As another example, the processing module facilitates retrieving an encoded data slice from the local DSN vault and generates a read response message that includes the encoded data slice as the DSN access response when the DSN access request includes a read request. The method continues at step <b>339</b> where the processing module sends the DSN access response to a sender of the DSN access request.</p>
<p id="p-0171" num="0170"><figref idref="DRAWINGS">FIG. 17</figref> A is a flowchart illustrating an example of acquiring security information. The method begins with step <b>340</b> where a processing module (e.g., of a dispersed storage (DS) managing unit) outputs a dispersed storage network (DSN) registration request message to a security authority. For example, the processing module determines to send the DSN registration request message based on at least one of when an affiliated DS managing unit is brought online, when the DS managing unit reboots, and when a previous signed certificate expires. Such a DS managing unit may serve as a local DSN certificate authority (CA) with respect to elements (e.g., a user device, a DS processing unit, other DS managing units, a storage integrity processing unit, and a DS unit) of a local DSN and may serve as an intermediate CA with respect to a root CA (e.g., a security authority), wherein the root CA is associated with a plurality of DSNs that includes the local DSN. Such a DSN registration request message may include one or more of a DSN identifier (ID), a DS managing unit ID, an affiliated user device ID, DSN storage capacity parameters, DSN system status, DSN storage availability parameters, DSN controlling authority contact information, and any other information to facilitate utilization of DSN system resources. Such outputting of the DSN registration request message includes sending the DSN registration request message to one or more of a security authority, a management authority, a naming authority, a billing authority, and the publishing authority. For example, the processing module sends the DSN registration request message to the security authority when the processing module determines that local DSN has been initialized but has not registered with the security authority.</p>
<p id="p-0172" num="0171">The method continues at step <b>342</b> where the processing module receives a DSN registration response message. Such a DSN registration response message includes a local DSN certificate authority universal unique identifier (UUID). Such a UUID uniquely identifies each system element and in an instance is 16 bytes in length. The method continues at step <b>344</b> where the processing module generates and saves a DSN CA public key and a paired local DSN CA private key such that information encrypted with the private key may be decrypted with the public key and information encrypted with the public key may be decrypted with the private key. For example, only the processing module utilizes the private key to encrypt or decrypt messages when the processing module functions as the local DSN CA and any other system element utilizes the public key to encrypt or decrypt messages to and from the local DSN CA.</p>
<p id="p-0173" num="0172">The method continues at step <b>346</b> where the processing module generates a local DSN CA certificate signing request (CSR). Such a request may include one or more of the local DSN CA UUID, the local DSN CA public key, and a local DSN CA signature. Such a local DSN CA signature may be generated by encrypting a hash digest of the request content utilizing the local DSN CA private key. The method continues at step <b>348</b> where the processing module sends the local DSN CA CSR to the security authority.</p>
<p id="p-0174" num="0173">The method continues at step <b>350</b> where the processing module receives a local DSN CA signed certificate signed by security authority (e.g., a root CA) from the security authority. The processing module may validate the signed certificate by comparing a decrypted signature of the signed certificate, utilizing a root CA public key included in the certificate, to a hash digest of the content of the certificate. Next, the processing module determines that the certificate is valid when the comparison is favorable (e.g., the same). Next, the processing module saves the root CA signed local DSN CA certificate when the processing module determines that the certificate is valid.</p>
<p id="p-0175" num="0174">The local DSN DS managing unit may serve as an intermediary for the overall root CA of the security authority such that the managing unit may register and issue signed certificates to elements of the local DSN operating within the local DSN and requesting access to system elements within another DSN of the plurality of DSNs.</p>
<p id="p-0176" num="0175"><figref idref="DRAWINGS">FIG. 17</figref> B is a flowchart illustrating an example of assigning security information. The method begins with step <b>352</b> where a processing module (e.g., of a security authority) receives a dispersed storage network (DSN) registration request from a DSN (e.g., from a dispersed storage (DS) managing unit acting as a certificate authority of the DSN). Such a security authority may be associated with a plurality of DSNs and may serve as at least one of a root certificate authority (CA) and a registration authority with respect to the DSN of the plurality of DSNs. Next, the processing module processing module validates the DSN registration request by comparing DSN information of the DSN registration request to saved DSN information from a previous registration process to authenticate the DSN registration request. For example, the processing module determines that the comparison is favorable when identity information contained in the DSN information is substantially the same as identity information in the saved DSN information.</p>
<p id="p-0177" num="0176">The method continues at step <b>354</b> where the processing module generates a local DSN CA universal unique identifier (UUID) and generates billing information when the processing module determines that the DSN registration request message is valid. Such billing information may include one or more of the local DSN CA UUID, the DSN information, DSN contact information, DSN user device information, and billing rates. The processing module may send the billing information to one or more of a management authority, a naming authority, a billing authority, and a publishing authority. The method continues at step <b>356</b> where the processing module sends a registration response to the local DSN CA that includes the DSN CA UUID and an authorization code.</p>
<p id="p-0178" num="0177">The method continues with step <b>358</b> where the processing module receives a DSN certificate signing request (CSR) from the local DSN CA. The method continues at step <b>360</b> where the processing module validates the CSR. Such validating includes comparing a hash digest of the CSR content to a decrypted local DSN CA signature utilizing the local DSN CA public key. The processing module validates the CSR when the comparison is favorable (e.g., substantially the same). Next, the processing module saves the local DSN CA public key received in the CSR.</p>
<p id="p-0179" num="0178">The method continues at step <b>362</b> where the processing module generates a signed local DSN CA certificate signed by the security authority when the processing module validates the CSR. Such a root CA signed local DSN CA certificate may include one or more of the local DSN CA certificate signing request, a root CA UUID, a root CA public key, and a root CA signature. Such a root CA signature may be generated by encrypting a hash digest of the certificate content utilizing a root CA private key. The method continues at step <b>364</b> where the processing module sends the root CA signed local DSN CA certificate to the local DSN CA. Such a method verifies that the local DSN CA can issue signed certificates to DSN elements on behalf of the root CA such that the DSN elements may subsequently access DSN elements of the plurality of DSNs.</p>
<p id="p-0180" num="0179"><figref idref="DRAWINGS">FIG. 18</figref> A is a flowchart illustrating another example of acquiring security information. The method begins with step <b>368</b> where a processing module (e.g., of a user device) outputs a registration request message that includes requesting access to a local dispersed storage network (DSN) and requesting access to a global DSN, wherein the global DSN includes a plurality of DSNs and the local DSN is one of the plurality of DSNs. Such a registration request message includes at least one of a requester identifier (ID), a DSN ID, a dispersed storage (DS) managing unit ID, a DS processing unit ID, a user device ID, a DSN storage capacity indicator, a DSN status indicator, a DSN storage availability indicator, and authority contact information. Such outputting of the registration request message includes sending the registration request message to at least one of a local DSN registration authority, a global DSN registration authority, a certificate authority (CA), a security authority, a management authority, a naming authority, a billing authority, and a publishing authority.</p>
<p id="p-0181" num="0180">The method continues at step <b>370</b> where the processing module receives a registration response message that includes a global universal unique identifier (UUID) and a local UUID. The method continues at step <b>372</b> where the processing module generates a global public-private key pair and a local public-private key pair. For example, the processing module generates the global public-private key pair and generates the local public-private key pair such that the local public-private key pair is substantially the same as the global public-private key pair. Next, the processing module saves the global public-private key pair and the local public-private key pair.</p>
<p id="p-0182" num="0181">The method continues at step <b>374</b> where the processing module generates a global certificate signing request (CSR) based on the global UUID and a private key of the global public-private key pair. Such a global CSR includes at least one of a global authorization code, the global UUID, a global public key of the global public-private key pair, and a global signature, wherein the global signature includes an encrypted hash of the global CSR utilizing a private key of the global public-private key pair. At step <b>374</b>, the processing module generates a local CSR based on the local UUID and a private key of the local public-private key pair. Such a local CSR includes at least one of a local authorization code, the local UUID, a local public key of the local public-private key pair, and a local signature, wherein the local signature includes an encrypted hash of the local CSR utilizing a private key of the local public-private key pair.</p>
<p id="p-0183" num="0182">The method continues at step <b>376</b> where the processing module sends the global and local CSRs to a certificate authority (CA) (e.g., a security authority associated with the plurality of DSNs). Alternatively, the processing module sends the global CSR to a global CA and the local CSR to a local CA. The method continues at step <b>378</b> where the processing module receives a signed global certificate and a signed local certificate. Next, the processing module saves the signed global certificate and the signed local certificate and to utilize the certificates in subsequent DSN access requests.</p>
<p id="p-0184" num="0183"><figref idref="DRAWINGS">FIG. 18</figref> B is a flowchart illustrating another example of assigning security information. The method begins with step <b>380</b> where a processing module receives a registration request from a valid requesting entity (e.g., the processing module may validate the requesting entity by favorably comparing a requester identifier (ID) with a stored requester ID from a previous registration process). The method continues at step <b>382</b> where the processing module determines whether the registration request includes requesting registration to a global dispersed storage network (DSN) that includes a plurality of DSNs. Such a determination may be based on one or more of the requester ID, a received DSN ID, a table lookup, and a message. At step <b>382</b>, the processing module determines whether the valid requesting entity has a local universally unique identifier (UUID) of a home DSN of the plurality of DSNs when the registration request is requesting registration to the global DSN. Such a determination may be based on one or more of a list of UUIDs associated with the home DSN, a lookup, and a message. Next, the processing module generates a global UUID when the registration request includes requesting registration to the global DSN and when the valid requesting entity has the local UUID. The processing module generates the local UUID and the global UUID when the valid requesting entity does not have the local UUID when the registration request includes requesting registration to the global DSN. In addition, the processing module may facilitate initialization of billing information for the valid requesting entity when the valid requesting entity does not have the local UUID.</p>
<p id="p-0185" num="0184">The method continues at step <b>384</b> where the processing module sends, to the valid requesting entity, a registration response that includes one or more of the local UUID (e.g., newly generated or retrieved from a previous generation sequence) and a local authorization code that is associated with the local UUID, and the global UUID and a global authorization code that is associated with the global UUID. The method continues at step <b>386</b> where the processing module receives a global certificate signing request (CSR) from the valid requesting entity. The method continues at step <b>388</b> where the processing module validates the global CSR by at least one of a favorable comparison of a received authorization code of the global CSR with a stored authorization code associated with the global UUID and a favorable comparison of a hash of the global CSR with a decrypted signature of the global CSR utilizing a public key of the global CSR.</p>
<p id="p-0186" num="0185">The method continues at step <b>390</b> where the processing module generates a global signed certificate when the global CSR is valid. Such a global signed certificate includes at least one of the global CSR, a global certificate authority (CA) UUID, a CA signature, and a CA public key of a public-private key pair. The processing module may generate the CA signature by at least one of hashing the global signed certificate, encrypting the global signed certificate utilizing a CA private key of the public-private key pair, hashing and encrypting the global signed certificate utilizing the CA private key of the public-private key pair, and retrieving the CA signature from another CA (e.g., from a security authority CA). The method continues at step <b>392</b> where the processing module sends the global signed certificate to the valid requesting entity. Alternatively, the processing module receives a local CSR from the valid requesting entity, generates a local signed certificate, sends the local signed certificate to the valid requesting entity when the local CSR is valid and when the valid requesting entity does not have the local UUID. Such a method enables the processing module (e.g., of the user device) to subsequently access different DSN elements of the plurality of DSNs by presenting the signed certificate. Such a method to access different DSN elements is discussed in greater detail with reference to <figref idref="DRAWINGS">FIGS. 19</figref> A and <b>19</b> B.</p>
<p id="p-0187" num="0186"><figref idref="DRAWINGS">FIG. 19</figref> A is a flowchart illustrating an example of requesting access to a dispersed storage network (DSN). The method begins with step <b>396</b> where a processing module (e.g., of a user device) receives a data access request. Such an access may include one or more of a write request, a read request, a delete request, a list request, etc. Such data may be stored as one or more copies in one or more DSNs. The method continues at step <b>398</b> where the processing module determines whether the data access request is requesting access to data stored in a plurality of DSNs (e.g., in just one or two or more DSNs). Such determining includes one or more of determining whether access to the plurality of DSNs is established, establishing access to the plurality of DSNs (e.g., registering and obtaining signed certificates) when the access to the plurality of DSNs is not established, and accessing a DSN look up table based on the data access request when the access to the plurality of DSNs is established. For example, the processing module accesses the DSN lookup table to retrieve the plurality of DSNs when the data access request is a read request. As another example, the processing module accesses the DSN lookup table to determine (e.g., based on storage requirements and DSN attributes) the plurality of DSNs when the data access request is a write request.</p>
<p id="p-0188" num="0187">The method branches to step <b>408</b> when the processing module determines that the data access request is not requesting access to data stored in the plurality of DSNs (e.g., the request is to access data in just one DSN). The method continues to step <b>400</b> when the processing module determines that the data access request is requesting access to data stored in the plurality of DSNs.</p>
<p id="p-0189" num="0188">The method continues at step <b>400</b> where the processing module determines whether one of the plurality of DSNs is a home DSN to a requesting entity. Such a determination may be based on one or more of a user identifier (ID), DSN IDs associated with the plurality of DSNs, a user ID affiliation to DSN ID table lookup, a DSN ID from the data access request, and a message. For example, the processing module determines that one of the plurality of DSNs is the home DSN when the plurality of DSNs includes DSN <b>3</b>, DSN <b>5</b>, and DSN <b>7</b> and a DSN ID table lookup indicates that DSN <b>5</b> is a home DSN for the requesting entity (e.g., of an associated user device). The method branches to step <b>404</b> when the processing module determines that one of the plurality of DSNs is not the home DSN to the requesting entity. The method continues to step <b>402</b> when the processing module determines that one of the plurality of DSNs is the home DSN to the requesting entity. The method continues at step <b>402</b> where the processing module utilizes a local signed certificate to access one or more dispersed storage (DS) units of the home DSN when the plurality of DSNs includes the home DSN.</p>
<p id="p-0190" num="0189">The method continues at step <b>404</b> where the processing module validates a global signed certificate with one or more DS units of a non-home DSN of the plurality of DSNs to produce a valid global signed certificate. Such validating of the global signed certificate with the one or more DS units of the non-home DSN includes at least one of validating the global signed certificate with each of the one or more DS units of the non-home DSN of the plurality of DSNs to produce a set of valid global signed certificates and validating the global signed certificate with a proxy unit (e.g., a DS unit or other unit within the plurality of DSNs) of the one or more DS units of the non-home DSN of the plurality of DSNs to produce the valid global signed certificate. Alternatively, such validating of the global signed certificate with the one or more DS units of the non-home DSN includes obtaining the global signed certificate from a local memory or from a certificate authority, sending the global signed certificate to the one or more DS units of the non-home DSN and receiving a challenge message from the one or more DS units of the non-home DSN, generating a challenge response message in accordance with the challenge message and based on the global signed certificate, sending the challenge response message to the one or more DS units of the non-home DSN, and receiving validation (e.g., a validation message and/or an access response) from the one or more DS units of the non-home DSN. The method continues at step <b>406</b> where the processing module utilizes the valid signed certificate to access the one or more DS units of the non-home DSN.</p>
<p id="p-0191" num="0190">The method continues at step <b>408</b> where the processing module determines whether the one of the plurality of DSNs is the home DSN or the non-home DSN when the data access request is requesting access to data stored in one of the plurality of DSNs. The method branches to step <b>410</b> when the processing module determines that the one DSN is the home DSN. The method continues to step <b>402</b> when the processing module determines that the one DSN is the non-home DSN. The method continues at step <b>402</b> where the processing module accesses one or more DS units of the home DSN utilizing the local signed certificate.</p>
<p id="p-0192" num="0191">The method continues at step <b>410</b> where the processing module validates a global signed certificate with a set of DS units of a non-home DSN of the plurality of DSNs to produce the valid global signed certificate when the one of the plurality of DSNs is the non-home DSN. The method continues at step <b>412</b> where the processing module utilizes the valid global signed certificate to access the set of DS units of the non-home DSN.</p>
<p id="p-0193" num="0192"><figref idref="DRAWINGS">FIG. 19</figref> B is a flowchart illustrating an example of processing a dispersed storage network (DSN) access request. The method begins with step <b>414</b> where a processing module (e.g., of a dispersed storage (DS) unit) receives, from a requesting entity (e.g., a user device), an access request that includes a signed certificate. The method continues at step <b>416</b> with the processing module determines whether the requesting entity is affiliated with a home dispersed storage network (DSN) (e.g., a DSN receiving the access request). Such a determination may be based on one or more of a requesting entity identifier (ID), a received home DSN ID, a predetermined home DSN ID, a requesting entity ID to home DSN ID table lookup, a query, and a message. For example, the processing module determines that the requesting entity is affiliated with the home DSN when a requesting entity ID to home DSN ID table lookup based in the case that the home DSN ID is 5 and the predetermined home DSN ID is 5 (e.g., a DSN associated with the processing module).</p>
<p id="p-0194" num="0193">The method branches to step <b>418</b> when the processing module determines that the requesting entity is not affiliated with the home DSN. The method continues to step <b>417</b> when the processing module determines that the requesting entity is affiliated with the home DSN. The method continues at step <b>417</b> where the processing module processes the access request as a local DSN access request. For example, the processing module authenticates the signed certificate as a local DSN signed certificate and executes the access request when the signed certificate is favorably authenticated.</p>
<p id="p-0195" num="0194">The method continues at step <b>418</b> where the processing module validates the signed certificate when the requesting entity is not affiliated with the home DSN, wherein such validation includes authenticating the signed certificate in accordance with an authenticating function. Such an authenticating function includes determining whether the signed certificate is authentic based on at least one of sending the signed certificate to an authenticating authority entity (e.g., to a security authority) and determining that a hash of at least a portion (e.g., a certificate) of the signed certificate compares favorably to a decrypted corresponding portion (e.g., a signature) of the signed certificate utilizing a public key associated with the requesting entity. The method branches to step <b>422</b> when the processing module determines that the signed certificate is authentic. The method continues to step <b>420</b> when the processing module determines that the signed certificate is not authentic. The method continues at step <b>420</b> where the processing module rejects the access request. Such rejecting includes one or more of sending a reject message to the requesting entity and sending an error message to a dispersed storage managing unit.</p>
<p id="p-0196" num="0195">The method continues at step <b>422</b> where the processing module continues to validate the signed certificate including generating a challenge message based on the access request when the signed certificate is authenticated. Such generating of the challenge message includes at least one of generating a message to include a secret (e.g., a random number, a predetermined character, a predetermined number), generating a challenge instruction that includes an instruction to return a signature of the message using a private key associated with the requesting entity, encrypting the secret utilizing a public key associated with the requesting entity to produce an encrypted secret for inclusion in the message, and generating the challenge instruction to include an instruction to return a decrypted secret using the private key.</p>
<p id="p-0197" num="0196">The method continues at step <b>424</b> with a processing module outputs the challenge message to the requesting entity. The method continues at step <b>426</b> where the processing module receives a challenge response message from the requesting entity and determines whether the challenge response message compares favorably to an expected response. Such determining whether the challenge response message compares favorably to the expected response includes at least one of determining that the signature of the message using the private key is valid based on the public key (e.g., a hash of the message is substantially the same as a decrypted signature utilizing the public key of the requesting entity) and determining that the decrypted secret compares favorably to the secret. The method continues at step <b>428</b> where the processing module executes the access request when the challenge response message compares favorably to the expected response.</p>
<p id="p-0198" num="0197">As may be used herein, the terms &#x201c;substantially&#x201d; and &#x201c;approximately&#x201d; provides an industry-accepted tolerance for its corresponding term and/or relativity between items. Such an industry-accepted tolerance ranges from less than one percent to fifty percent and corresponds to, but is not limited to, component values, integrated circuit process variations, temperature variations, rise and fall times, and/or thermal noise. Such relativity between items ranges from a difference of a few percent to magnitude differences. As may also be used herein, the term(s) &#x201c;operably coupled to&#x201d;, &#x201c;coupled to&#x201d;, and/or &#x201c;coupling&#x201d; includes direct coupling between items and/or indirect coupling between items via an intervening item (e.g., an item includes, but is not limited to, a component, an element, a circuit, and/or a module) where, for indirect coupling, the intervening item does not modify the information of a signal but may adjust its current level, voltage level, and/or power level. As may further be used herein, inferred coupling (i.e., where one element is coupled to another element by inference) includes direct and indirect coupling between two items in the same manner as &#x201c;coupled to&#x201d;. As may even further be used herein, the term &#x201c;operable to&#x201d; or &#x201c;operably coupled to&#x201d; indicates that an item includes one or more of power connections, input(s), output(s), etc., to perform, when activated, one or more its corresponding functions and may further include inferred coupling to one or more other items. As may still further be used herein, the term &#x201c;associated with&#x201d;, includes direct and/or indirect coupling of separate items and/or one item being embedded within another item. As may be used herein, the term &#x201c;compares favorably&#x201d;, indicates that a comparison between two or more items, signals, etc., provides a desired relationship. For example, when the desired relationship is that signal <b>1</b> has a greater magnitude than signal <b>2</b>, a favorable comparison may be achieved when the magnitude of signal <b>1</b> is greater than that of signal <b>2</b> or when the magnitude of signal <b>2</b> is less than that of signal <b>1</b>.</p>
<p id="p-0199" num="0198">While the transistors in the above described figure(s) is/are shown as field effect transistors (FETs), as one of ordinary skill in the art will appreciate, the transistors may be implemented using any type of transistor structure including, but not limited to, bipolar, metal oxide semiconductor field effect transistors (MOSFET), N-well transistors, P-well transistors, enhancement mode, depletion mode, and zero voltage threshold (VT) transistors.</p>
<p id="p-0200" num="0199">The present invention has also been described above with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claimed invention.</p>
<p id="p-0201" num="0200">The present invention has been described, at least in part, in terms of one or more embodiments. An embodiment of the present invention is used herein to illustrate the present invention, an aspect thereof, a feature thereof, a concept thereof, and/or an example thereof. A physical embodiment of an apparatus, an article of manufacture, a machine, and/or of a process that embodies the present invention may include one or more of the aspects, features, concepts, examples, etc. described with reference to one or more of the embodiments discussed herein. Further, from figure to figure, the embodiments may incorporate the same or similarly named functions, steps, modules, etc. that may use the same or different reference numbers and, as such, the functions, steps, modules, etc. may be the same or similar functions, steps, modules, etc. or different ones.</p>
<p id="p-0202" num="0201">The present invention has been described above with the aid of functional building blocks illustrating the performance of certain significant functions. The boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality. To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claimed invention. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for execution by a computing device, the method comprises:
<claim-text>receiving a dispersed storage network (DSN) access request;</claim-text>
<claim-text>determining whether the DSN access request is associated with a local DSN vault or a global DSN vault, wherein the local DSN vault is contained within a DSN of a plurality of DSNs and the global DSN vault is contained within at least some of the plurality of DSNs, wherein each of the plurality of DSNs includes a plurality of storage units, wherein the local DSN vault is a virtual memory space of at least some of the plurality of storage units of the DSN, and wherein the global DSN vault is a virtual memory space of at least some of the plurality of storage units in each of the least some of the plurality of DSNs; and</claim-text>
<claim-text>when the DSN access request is associated with the global DSN vault:
<claim-text>identifying a primary DSN of the plurality of DSNs; and</claim-text>
<claim-text>facilitating processing of the DSN access request by the primary DSN, wherein the DSN access request identifies a set of encoded data slices and wherein a data segment of data is dispersed storage error encoded to produce the set of encoded data slices.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining whether the DSN access request is associated with the local or global DSN vault comprises at least one of:
<claim-text>interpreting a requester identifier of the DSN access request;</claim-text>
<claim-text>interpreting a vault identifier of the DSN access request;</claim-text>
<claim-text>interpreting a data type of the DSN access request;</claim-text>
<claim-text>accessing a table look-up;</claim-text>
<claim-text>interpreting a local or global DSN identifier within the DSN access request; and</claim-text>
<claim-text>querying a naming authority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identifying the primary DSN comprises at least one of:
<claim-text>interpreting a requester identifier of the DSN access request;</claim-text>
<claim-text>interpreting a global vault identifier of the DSN access request;</claim-text>
<claim-text>interpreting a data type of the DSN access request;</claim-text>
<claim-text>accessing a table look-up;</claim-text>
<claim-text>interpreting a global DSN identifier within the DSN access request; and</claim-text>
<claim-text>querying a naming authority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the facilitating processing of the DSN access request comprises:
<claim-text>identifying, by a first DSN of the plurality of DSNs, the first DSN as the primary DSN;</claim-text>
<claim-text>processing, by the first DSN, the DSN access request to produce a DSN access response; and</claim-text>
<claim-text>sending the DSN access response to a sender of the DSN access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the facilitating processing of the DSN access request comprises:
<claim-text>identifying, by a first DSN of the plurality of DSNs, a second DSN of the plurality of DSNs as the primary DSN; and</claim-text>
<claim-text>forwarding the DSN access request to the second DSN.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>when the DSN access request is associated with the local DSN vault:
<claim-text>determining whether the DSN access request includes a vault assignment request; and</claim-text>
<claim-text>when the DSN access request includes the vault assignment request, creating the local vault;</claim-text>
<claim-text>when the DSN access request does not include the vault assignment request:
<claim-text>processing the DSN access request to produce a DSN access response; and</claim-text>
<claim-text>sending the DSN access response to a sender of the DSN access request.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprises:
<claim-text>when the DSN access request is associated with the global DSN vault, determining whether the DSN access request includes a vault assignment request; and</claim-text>
<claim-text>when the DSN access request includes the vault assignment request:
<claim-text>sending the vault assignment request to a naming authority; and</claim-text>
<claim-text>receiving a global vault assignment response that identifies the primary DSN.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> further comprises at least one of:
<claim-text>extracting vault assignment information from the global vault assignment response;</claim-text>
<claim-text>storing the vault assignment information; and</claim-text>
<claim-text>sending the vault assignment information to a sender of the DSN access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computer of a dispersed storage system that includes a plurality of dispersed storage networks (DSNs), the computer comprises:
<claim-text>an interface;</claim-text>
<claim-text>a memory; and</claim-text>
<claim-text>a processing module operable to:
<claim-text>receive, via the interface, a dispersed storage network (DSN) access request;</claim-text>
<claim-text>determine whether the DSN access request is associated with a local DSN vault or a global DSN vault, wherein the local DSN vault is contained within a DSN of a plurality of DSNs and the global DSN vault is contained within at least some of the plurality of DSNs, wherein each of the plurality of DSNs includes a plurality of storage units, wherein the local DSN vault is a virtual memory space of at least some of the plurality of storage units of the DSN, and wherein the global DSN vault is a virtual memory space of at least some of the plurality of storage units in each of the least some of the plurality of DSNs; and</claim-text>
<claim-text>when the DSN access request is associated with the global DSN vault:
<claim-text>identify a primary DSN of the plurality of DSNs; and</claim-text>
<claim-text>facilitate processing of the DSN access request by the primary DSN, wherein the DSN access request identifies a set of encoded data slices and wherein a data segment of data is dispersed storage error encoded to produce the set of encoded data slices.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module functions to determine whether the DSN access request is associated with the local or global DSN vault by at least one of:
<claim-text>interpreting a requester identifier of the DSN access request;</claim-text>
<claim-text>interpreting a vault identifier of the DSN access request;</claim-text>
<claim-text>interpreting a data type of the DSN access request;</claim-text>
<claim-text>accessing a table look-up;</claim-text>
<claim-text>interpreting a local or global DSN identifier within the DSN access request; and</claim-text>
<claim-text>querying, via the interface, a naming authority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module functions to identify the primary DSN by at least one of:
<claim-text>interpreting a requester identifier of the DSN access request;</claim-text>
<claim-text>interpreting a global vault identifier of the DSN access request;</claim-text>
<claim-text>interpreting a data type of the DSN access request;</claim-text>
<claim-text>accessing a table look-up;</claim-text>
<claim-text>interpreting a global DSN identifier within the DSN access request; and</claim-text>
<claim-text>querying, via the interface, a naming authority.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module functions to facilitate processing of the DSN access request by:
<claim-text>identifying, by a first DSN of the plurality of DSNs, the first DSN as the primary DSN;</claim-text>
<claim-text>processing, by the first DSN, the DSN access request to produce a DSN access response; and</claim-text>
<claim-text>sending, via the interface, the DSN access response to a sender of the DSN access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module functions to facilitate processing of the DSN access request by:
<claim-text>identifying, by a first DSN of the plurality of DSNs, a second DSN of the plurality of DSNs as the primary DSN; and</claim-text>
<claim-text>forwarding, via the interface, the DSN access request to the second DSN.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module further functions to:
<claim-text>when the DSN access request is associated with the local DSN vault:
<claim-text>determine whether the DSN access request includes a vault assignment request; and</claim-text>
<claim-text>when the DSN access request includes the vault assignment request, create the local vault;</claim-text>
<claim-text>when the DSN access request does not include the vault assignment request:
<claim-text>process the DSN access request to produce a DSN access response; and</claim-text>
<claim-text>send, via the interface, the DSN access response to a sender of the DSN access request.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing module further functions to:
<claim-text>when the DSN access request is associated with the global DSN vault, determine whether the DSN access request includes a vault assignment request; and</claim-text>
<claim-text>when the DSN access request includes the vault assignment request:
<claim-text>send, via the interface, the vault assignment request to a naming authority; and</claim-text>
<claim-text>receive, via the interface, a global vault assignment response that identifies the primary DSN.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processing module further functions to:
<claim-text>extract vault assignment information from the global vault assignment response;</claim-text>
<claim-text>store, in the memory, the vault assignment information; and</claim-text>
<claim-text>send, via the interface, the vault assignment information to a sender of the DSN access request. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627442-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627442</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13114315</doc-number>
<date>20110524</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>83</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>14</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>08</class>
<subclass>B</subclass>
<main-group>23</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 11</main-classification>
<further-classification>726 23</further-classification>
</classification-national>
<invention-title id="d2e53">Hierarchical rule development and binding for web application server firewall</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7318237</doc-number>
<kind>B2</kind>
<name>Moriconi et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7472413</doc-number>
<kind>B1</kind>
<name>Mowshowitz</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7552471</doc-number>
<kind>B2</kind>
<name>Roddy et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7698398</doc-number>
<kind>B1</kind>
<name>Lai</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7757287</doc-number>
<kind>B2</kind>
<name>Gassoway</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7761638</doc-number>
<kind>B2</kind>
<name>Post</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7818788</doc-number>
<kind>B2</kind>
<name>Meier</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7831693</doc-number>
<kind>B2</kind>
<name>Lai</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7895651</doc-number>
<kind>B2</kind>
<name>Brennan</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>8024804</doc-number>
<kind>B2</kind>
<name>Shulman et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2003/0065942</doc-number>
<kind>A1</kind>
<name>Lineman et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0073811</doc-number>
<kind>A1</kind>
<name>Sanin</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2004/0215630</doc-number>
<kind>A1</kind>
<name>Parekh et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707100</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2007/0022119</doc-number>
<kind>A1</kind>
<name>Roy et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2007/0266149</doc-number>
<kind>A1</kind>
<name>Cobb et al.</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2008/0163373</doc-number>
<kind>A1</kind>
<name>Maynard</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0229381</doc-number>
<kind>A1</kind>
<name>Sikka et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2009/0038015</doc-number>
<kind>A1</kind>
<name>Diamant</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2009/0187964</doc-number>
<kind>A1</kind>
<name>Kao et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2009/0205047</doc-number>
<kind>A1</kind>
<name>Podjarny</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2009/0271863</doc-number>
<kind>A1</kind>
<name>Govindavajhala</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0327411</doc-number>
<kind>A1</kind>
<name>Dang</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2010/0017868</doc-number>
<kind>A1</kind>
<name>Hao et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2010/0070447</doc-number>
<kind>A1</kind>
<name>Pfuntner</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2010/0169974</doc-number>
<kind>A1</kind>
<name>Calendino</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2010/0242114</doc-number>
<kind>A1</kind>
<name>Bunker</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2011/0283359</doc-number>
<kind>A1</kind>
<name>Prince et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 23</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2011/0321151</doc-number>
<kind>A1</kind>
<name>Gluck</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2012/0096536</doc-number>
<kind>A1</kind>
<name>Dewey et al.</name>
<date>20120400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 11</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2012/0117649</doc-number>
<kind>A1</kind>
<name>Holloway et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 24</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2013/0019314</doc-number>
<kind>A1</kind>
<name>Ji</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>Hossain, MS.-et al.; &#x201c;AEGIS: A lightweight Firewall for Wireless Sensor Networks&#x201d;; 6th IEEE Interna'l Conferencee(DCOSS 2010); Springer; pp. 258-272; 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>Henrique, WG.-et al.; &#x201c;Web Application Firewalls: What the vendors do Not want you to know&#x201d;; The OWASP Foundation&#x2014;http://www.owasp.org: AppSec EU09 Poland; 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Tech Republic; &#x201c;Vulnerability Assessment Plus Web Application Firewall (VA+WAF)&#x201d;; F5 Networks &#x26; WhiteHat Security; Jun. 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>Qualys &#x26; Imperva; &#x201c;Unified Web Application Vulnerability Assessment and Virtual Patching with Qualys and Imperva&#x201d;; Imperva WAF's Virtual Patching; Mar. 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>Faust. J.-et al.; &#x201c;Reducing Organizational Risk Through Virtual Patching&#x201d;; 2011 SANS Institute InfoSec Reading Room; Jun. 19, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>Vries, S. de , &#x201c;A Corsaire White Paper: A Modular Approach to Data Validation in Web Applications&#x201d;. Corsaire, Jan. 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>Mell, P. -et al. &#x201c;The NIST Definition of Cloud Computing&#x201d;. NIST, Version 15, Oct. 7, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>Huang et a.; &#x201c;Autonomous Hot Patching for Web-Based Applications&#x201d;, COMPSAC 29th Annual International, Jul. 26-28, 2005, vol. 2, pp. 51-57.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Siemens AG et al.; &#x201c;Automated Patching/Update of Network Management Systems/Network Elements/Applications&#x201d;, IPCOM000170268D, Jun. 3, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Schryen, G. ; &#x201c;A Comprehensive and Comparative Analysis of the Patching behavior of Open Source and . . . Vendors&#x201d;, IMF Fifth Inter. Conf. on, Sep. 15-17, 2009, p. 153-168.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>IBM et al.; &#x201c;System, Method and Apparatus for Fixing Security Vulnerabilities in Web Services Automatically&#x201d;, IPCOM000200264D, Oct. 3, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>Modsecurity, Modsecurity: Open Source Web Application Firewall, pp. 1-2, dowloaded from www.modsecurity.org Apr. 18, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>IBM, &#x201c;web.xml file,&#x201d; downloaded from publib.boulder.ibm.com on Apr. 22, 2011, pp. 1-5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Raja, &#x201c;Struts.xml Configuration File,&#x201d; downloaded from www.javabeat.net on Apr. 22, 2011, pp. 1-4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>13</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 11</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>21</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120304275</doc-number>
<kind>A1</kind>
<date>20121129</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ji</last-name>
<first-name>Peng</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Luo</last-name>
<first-name>Lin</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sreedhar</last-name>
<first-name>Vugranam C.</first-name>
<address>
<city>Yorktown Heights</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Yang</last-name>
<first-name>Shun Xiang</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Yu</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ji</last-name>
<first-name>Peng</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Luo</last-name>
<first-name>Lin</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Sreedhar</last-name>
<first-name>Vugranam C.</first-name>
<address>
<city>Yorktown Heights</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Yang</last-name>
<first-name>Shun Xiang</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Zhang</last-name>
<first-name>Yu</first-name>
<address>
<city>Beijing</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Dougherty</last-name>
<first-name>Anne V.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Otterstedt, Ellenbogen &#x26; Kammer, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Flynn</last-name>
<first-name>Nathan</first-name>
<department>2431</department>
</primary-examiner>
<assistant-examiner>
<last-name>Chiang</last-name>
<first-name>Jason C</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">At least one of an HTTP request message and an HTTP response message is intercepted. A corresponding HTTP message model is identified. The HTTP message model includes a plurality of message model sections. Additional steps include parsing a representation of the at least one of an HTTP request message and an HTTP response message into message sections in accordance with the message model sections of the HTTP message model; and binding a plurality of security rules to the message model sections. The plurality of security rules each specify at least one action to be taken in response to a given condition. The given condition is based, at least in part, on a corresponding given one of the message sections. A further step includes processing the at least one of an HTTP request message and an HTTP response message in accordance with the plurality of security rules. Techniques for developing rules for a web application server firewall are also provided.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="206.08mm" wi="136.14mm" file="US08627442-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="243.50mm" wi="156.97mm" orientation="landscape" file="US08627442-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="208.70mm" wi="178.05mm" orientation="landscape" file="US08627442-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="250.53mm" wi="180.51mm" orientation="landscape" file="US08627442-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="279.74mm" wi="179.15mm" orientation="landscape" file="US08627442-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="141.14mm" wi="139.70mm" file="US08627442-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="279.74mm" wi="182.29mm" orientation="landscape" file="US08627442-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="261.45mm" wi="168.23mm" file="US08627442-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="272.71mm" wi="179.49mm" orientation="landscape" file="US08627442-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="280.50mm" wi="184.74mm" orientation="landscape" file="US08627442-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="232.58mm" wi="167.13mm" file="US08627442-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="240.71mm" wi="145.71mm" file="US08627442-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="176.28mm" wi="130.56mm" orientation="landscape" file="US08627442-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="275.76mm" wi="171.70mm" file="US08627442-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="276.94mm" wi="173.14mm" orientation="landscape" file="US08627442-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="264.67mm" wi="172.47mm" orientation="landscape" file="US08627442-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="260.77mm" wi="173.14mm" file="US08627442-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="256.54mm" wi="177.04mm" file="US08627442-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="225.55mm" wi="135.13mm" file="US08627442-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates to the electrical, electronic and computer arts, and, more particularly, to web infrastructures and the like.</p>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">In a typical Web application a client, such as a browser, interacts with a Web server by exchanging a series of messages that are made up of hypertext transfer protocol (HTTP) requests and responses. An attacker often exploits vulnerabilities that exist in a Web application to launch attacks. Some of the predominant types of attacks against Web applications include Cross-Site Scripting (XSS), SQL Injection (SQL-I), and Cross-Site Request Forgery (CSRF) attacks.</p>
<heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0004" num="0003">Principles of the invention provide techniques for hierarchical rule development and binding for a web application server firewall. In one aspect, an exemplary method for operating a web application server firewall includes the steps of intercepting at least one of an HTTP request message and an HTTP response message; and identifying a corresponding HTTP message model, based on the intercepting step. The HTTP message model includes a plurality of message model sections. Additional steps include parsing a representation of the at least one of an HTTP request message and an HTTP response message into message sections in accordance with the message model sections of the HTTP message model; and binding a plurality of security rules to the message model sections. The plurality of security rules each specify at least one action to be taken in response to a given condition. The given condition is based, at least in part, on a corresponding given one of the message sections. A further step includes processing the at least one of an HTTP request message and an HTTP response message in accordance with the plurality of security rules.</p>
<p id="p-0005" num="0004">In another aspect, an exemplary method for developing rules for a web application server firewall includes the steps of anticipating at least one of an HTTP request message and an HTTP response message likely to be processed by the web application server firewall; and building a corresponding HTTP message model, based on the anticipating step. The HTTP message model includes a plurality of message model sections. An additional step includes developing a plurality of security rules each specifying at least one action to be taken in response to a given condition. The given condition is based, at least in part, on a corresponding section of an actual message. A further step includes binding the plurality of security rules to the message model sections. In some cases, rather than carrying out the anticipating step, such step is performed externally and the method includes building the HTTP message model based on the at least one of an HTTP request message and an HTTP response message anticipated from the externally-performed step as likely to be processed by the web application server firewall.</p>
<p id="p-0006" num="0005">As used herein, &#x201c;facilitating&#x201d; an action includes performing the action, making the action easier, helping to carry the action out, or causing the action to be performed. Thus, by way of example and not limitation, instructions executing on one processor might facilitate an action carried out by instructions executing on a remote processor, by sending appropriate data or commands to cause or aid the action to be performed. For the avoidance of doubt, where an actor facilitates an action by other than performing the action, the action is nevertheless performed by some entity or combination of entities.</p>
<p id="p-0007" num="0006">One or more embodiments of the invention or elements thereof can be implemented in the form of a computer program product including a computer readable storage medium with computer usable program code for performing the method steps indicated. Furthermore, one or more embodiments of the invention or elements thereof can be implemented in the form of a system (or apparatus) including a memory, and at least one processor that is coupled to the memory and operative to perform exemplary method steps. Yet further, in another aspect, one or more embodiments of the invention or elements thereof can be implemented in the form of means for carrying out one or more of the method steps described herein; the means can include (i) hardware module(s), (ii) software module(s) stored in a computer readable storage medium (or multiple such media) and implemented on a hardware processor, or (iii) a combination of (i) and (ii); any of (i)-(iii) implement the specific techniques set forth herein.</p>
<p id="p-0008" num="0007">Techniques of the present invention can provide substantial beneficial technical effects. For example, one or more embodiments may provide one or more of the following advantages:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0008">Hierarchical rule development and binding can make rule configuration much more easy and accurate, and make rule definitions much better align with web application logic according to its hierarchical business needs and technical design</li>
        <li id="ul0002-0002" num="0009">Hierarchical rule development and binding can make security patching for web applications more efficient without any changes of the web application itself</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0009" num="0010">These and other features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> depicts a cloud computing node according to an embodiment of the present invention;</p>
<p id="p-0011" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> depicts a cloud computing environment according to an embodiment of the present invention;</p>
<p id="p-0012" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> depicts abstraction model layers according to an embodiment of the present invention;</p>
<p id="p-0013" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> depicts an exemplary web application security protection architecture in a cloud environment, according to an aspect of the invention;</p>
<p id="p-0014" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> depicts an exemplary HTTP request, according to an aspect of the invention;</p>
<p id="p-0015" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> depicts an exemplary HTTP message model, according to an aspect of the invention;</p>
<p id="p-0016" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> presents an exemplary JSON representation of an HTTP request model, according to an aspect of the invention;</p>
<p id="p-0017" num="0018"><figref idref="DRAWINGS">FIG. 8</figref> presents an exemplary rule definition in a rule development tool, according to an aspect of the invention;</p>
<p id="p-0018" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> presents an exemplary HTTP message and its hierarchical logic on URL, and rule binding to the HTTP message sections in a rule development tool, according to an aspect of the invention;</p>
<p id="p-0019" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> shows an exemplary rule and rule set model, according to an aspect of the invention;</p>
<p id="p-0020" num="0021"><figref idref="DRAWINGS">FIG. 11</figref> shows an exemplary JSON representation for a URI template, according to an aspect of the invention;</p>
<p id="p-0021" num="0022"><figref idref="DRAWINGS">FIG. 12</figref> presents an exemplary rule sample for ModSecurity, according to an aspect of the invention;</p>
<p id="p-0022" num="0023"><figref idref="DRAWINGS">FIG. 13</figref> presents performance evaluation results for different modules enabled in web application security protection, according to an aspect of the invention;</p>
<p id="p-0023" num="0024"><figref idref="DRAWINGS">FIG. 14</figref> presents an exemplary rule instance in Hierarchical Rule Schema (HRS) for the ModSecurity rules of <figref idref="DRAWINGS">FIG. 12</figref>, according to an aspect of the invention;</p>
<p id="p-0024" num="0025"><figref idref="DRAWINGS">FIG. 15</figref> is a table showing a comparison for a Tomcat &#x26; Filter, ModSecurity, and web application security protection, according to an aspect of the invention;</p>
<p id="p-0025" num="0026"><figref idref="DRAWINGS">FIG. 16</figref> is a table showing an experiment environment setting, according to an aspect of the invention;</p>
<p id="p-0026" num="0027"><figref idref="DRAWINGS">FIG. 17</figref> shows average response time versus enabling different modules, according to an aspect of the invention;</p>
<p id="p-0027" num="0028"><figref idref="DRAWINGS">FIG. 18</figref> shows maximum new connections versus enabling different modules, according to an aspect of the invention;</p>
<p id="p-0028" num="0029"><figref idref="DRAWINGS">FIG. 19</figref> shows the cumulative transaction completed ratio versus enabling different modules, according to an aspect of the invention;</p>
<p id="p-0029" num="0030"><figref idref="DRAWINGS">FIG. 20</figref> shows certain URLs and the like, according to an aspect of the invention; and</p>
<p id="p-0030" num="0031"><figref idref="DRAWINGS">FIG. 21</figref> shows a flow chart of an exemplary method, according to an aspect of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading>
<p id="p-0031" num="0032">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g. networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p>
<p id="p-0032" num="0033">Characteristics are as follows:</p>
<p id="p-0033" num="0034">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p>
<p id="p-0034" num="0035">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p>
<p id="p-0035" num="0036">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p>
<p id="p-0036" num="0037">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p>
<p id="p-0037" num="0038">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.</p>
<p id="p-0038" num="0039">Service Models are as follows:</p>
<p id="p-0039" num="0040">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based email). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p>
<p id="p-0040" num="0041">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p>
<p id="p-0041" num="0042">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p>
<p id="p-0042" num="0043">Deployment Models are as follows:</p>
<p id="p-0043" num="0044">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p>
<p id="p-0044" num="0045">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p>
<p id="p-0045" num="0046">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p>
<p id="p-0046" num="0047">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load balancing between clouds).</p>
<p id="p-0047" num="0048">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.</p>
<p id="p-0048" num="0049">Referring now to <figref idref="DRAWINGS">FIG. 1</figref>, a schematic of an example of a cloud computing node is shown. Cloud computing node <b>10</b> is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless, cloud computing node <b>10</b> is capable of being implemented and/or performing any of the functionality set forth herein.</p>
<p id="p-0049" num="0050">In cloud computing node <b>10</b> there is a computer system/server <b>12</b>, which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with computer system/server <b>12</b> include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, handheld or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p>
<p id="p-0050" num="0051">Computer system/server <b>12</b> may be described in the general context of computer system executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system/server <b>12</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p>
<p id="p-0051" num="0052">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, computer system/server <b>12</b> in cloud computing node <b>10</b> is shown in the form of a general-purpose computing device. The components of computer system/server <b>12</b> may include, but are not limited to, one or more processors or processing units <b>16</b>, a system memory <b>28</b>, and a bus <b>18</b> that couples various system components including system memory <b>28</b> to processor <b>16</b>.</p>
<p id="p-0052" num="0053">Bus <b>18</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.</p>
<p id="p-0053" num="0054">Computer system/server <b>12</b> typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system/server <b>12</b>, and it includes both volatile and non-volatile media, removable and non-removable media.</p>
<p id="p-0054" num="0055">System memory <b>28</b> can include computer system readable media in the form of volatile memory, such as random access memory (RAM) <b>30</b> and/or cache memory <b>32</b>. Computer system/server <b>12</b> may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>34</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus <b>18</b> by one or more data media interfaces. As will be further depicted and described below, memory <b>28</b> may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.</p>
<p id="p-0055" num="0056">Program/utility <b>40</b>, having a set (at least one) of program modules <b>42</b>, may be stored in memory <b>28</b> by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules <b>42</b> generally carry out the functions and/or methodologies of embodiments of the invention as described herein.</p>
<p id="p-0056" num="0057">Computer system/server <b>12</b> may also communicate with one or more external devices <b>14</b> such as a keyboard, a pointing device, a display <b>24</b>, etc.; one or more devices that enable a user to interact with computer system/server <b>12</b>; and/or any devices (e.g., network card, modem, etc.) that enable computer system/server <b>12</b> to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces <b>22</b>. Still yet, computer system/server <b>12</b> can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>20</b>. As depicted, network adapter <b>20</b> communicates with the other components of computer system/server <b>12</b> via bus <b>18</b>. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system/server <b>12</b>. Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p>
<p id="p-0057" num="0058"><figref idref="DRAWINGS">FIG. 1</figref> is also generally representative of servers or other general purpose computers that can be used in connection with one or more embodiments of the invention in environments other than a cloud environment.</p>
<p id="p-0058" num="0059">Referring now to <figref idref="DRAWINGS">FIG. 2</figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> comprises one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. 2</figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p>
<p id="p-0059" num="0060">Referring now to <figref idref="DRAWINGS">FIG. 3</figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. 2</figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. 3</figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p>
<p id="p-0060" num="0061">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include mainframes, in one example IBM&#xae; zSeries&#xae; systems; RISC (Reduced Instruction Set Computer) architecture based servers, in one example IBM pSeries&#xae; systems; IBM xSeries&#xae; systems; IBM BladeCenter&#xae; systems; storage devices; networks and networking components. Examples of software components include network application server software, in one example IBM WebSphere&#xae; application server software; and database software, in one example IBM DB2&#xae; database software. (IBM, zSeries, pSeries, xSeries, BladeCenter, WebSphere, and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide).</p>
<p id="p-0061" num="0062">Virtualization layer <b>62</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers; virtual storage; virtual networks, including virtual private networks; virtual applications and operating systems; and virtual clients.</p>
<p id="p-0062" num="0063">In one example, management layer <b>64</b> may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p>
<p id="p-0063" num="0064">Workloads layer <b>66</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation; software development and lifecycle management; virtual classroom education delivery; data analytics processing; transaction processing; and mobile desktop.</p>
<p id="p-0064" num="0065">One or more embodiments provide techniques for design and implementation of hierarchical rules for a web application server firewall. A Web Application Server Firewall (WASF) is a firewall that is enabled inside a Web Application Server, such as a Tomcat server (available from the Apache software foundation), to filter unwanted messages and protect Web applications running on the server. Unlike other kinds of firewalls, a WASF can exploit the richer semantics of the Web applications, and thereby provide a fine-grain protection. One or more embodiments herein provide design and implementation of a fine-grain and hierarchical rule development for a WASF. There are two parts to hierarchical rule development: (1) Hierarchical rule schema and (2) Rule development tool. The hierarchical rule schema supports a number of features, including late binding of rules with messages and ability to handle URI templates and RESTful requests (&#x201c;REST&#x201d;=representational state transfer; a RESTful web service (or RESTful web API is a simple web service implemented using HTTP and the techniques of REST). To improve the usability of developing and deploying firewall rules, one or more embodiments provide a Rule Development Tool (RDT) that provides several capabilities for developing and deploying rules, searching for similar rules, analyzing conflicts among rules, transforming rules from one format to another one, and interactive virtual patching. One or more embodiments of WASF are suitable for deployment in products and in a cloud environment.</p>
<p id="p-0065" num="0066">As noted above, in a typical Web application a client, such as a browser, interacts with a Web server by exchanging a series of messages that are made up of hypertext transfer protocol (HTTP) requests and responses. An attacker often exploits vulnerabilities that exist in a Web application to launch attacks. Some of the predominant types of attacks against Web applications include Cross-Site Scripting (XSS), SQL Injection (SQL-I), and Cross-Site Request Forgery (CSRF) attacks.</p>
<p id="p-0066" num="0067">A Web Application Server Firewall (WASF) is a piece of software installed inside a Web Application Server (WAS), such as a WebSphere&#xae; Application Server (registered mark of International Business Machines Corporation, Armonk, N.Y., USA (hereinafter IBM)) or a Tomcat server, to filter inbound and outbound Web content of the WAS using filter or firewall rules. Unlike a typical network or proxy server firewall, a WASF can exploit the richer semantics of the underlying Web applications to provide fine-grain protection of the Web applications running on the server.</p>
<p id="p-0067" num="0068">A significant aspect in WASF is how and at what level of Web application semantics can be exploited without modifying the Web application itself. Imagine that a Web application developer has released a Web application, but has found vulnerability in the application. Unfortunately due to the release cycle, the developer cannot modify the application. One significant question is whether WASF can be used to provide fine-grain protection of the vulnerable application without any loss of functionality of the application. Modern Web applications that are based on AJAX (asynchronous JavaScript and XML) and REST contain rich content, services and hierarchical resources. A skillful attacker can launch sophisticated attacks targeting specific vulnerable resources and services. Coarse-grain firewall protection can often filter such attacks, but it can also prevent rich functionality provided by the underlying applications.</p>
<p id="p-0068" num="0069">One or more embodiments provide fine-grain hierarchical rule development for a WASF, referred to herein as Web Application Security Protection (WASP), to address the problem of fine-grain protection of Web applications without modifying the vulnerable application and preventing loss of any its functionality. One exemplary solution includes two significant parts: (1) a Hierarchical Rule Schema (HRS) for writing flexible, fine-grained, and hierarchical firewall rules, and (2) a Rule Development Tool (RDT) to quickly develop rules to protect against zero-day attacks. The RDT provides several capabilities to the application developer and security administrator to develop, including searching for similar rules, parsing and modeling Web application configurations which often contain the application layout, integration with black-box testing tool such as AppScan (available from IBM), transforming rules from ModSecurity (well-known open source web application firewall) to the HRS, and the like.</p>
<p id="p-0069" num="0070">Note that WASP is a non-limiting example of a web application firewall; such firewalls per se are known to the skilled artisan and given the teachings herein, the skilled artisan will be able to implement aspects of the invention in one or more web application firewalls.</p>
<p id="p-0070" num="0071">In one or more embodiments, the HRS is based on two design principles: (1) ability to support fine-grain rules to protect hierarchical Web resources and services and (2) late binding of rules to message types. A typical Web applications based on AJAX and REST maintains a large collection of hierarchical resources and services. A fine-grain hierarchical rule schema is necessary for effectively handling RESTful requests. Consider the example <b>2002</b> in <figref idref="DRAWINGS">FIG. 20</figref>.</p>
<p id="p-0071" num="0072">A RESTful Web application that processes the GET requests for the URLs <b>2002</b> will typically not create one static page for each resource. The Web application will construct a layout for the URLs using a URI Template mechanism, described using configuration files or annotations. A URI Template is a mechanism that allows one to specify a URL to include parameters that is substituted before the URL is resolved. Using a URI Template mechanism an application can create the template <b>2004</b> for the example <b>2002</b>, where {pid} and {tid} are resource variables that map to 1 and 3, respectively for the first URL (and will map to 3 and 4, respectively for the second URL). To handle such URI template-based HTTP requests requires the ability to model hierarchical rules and also an understanding of the back-end application structure. Using RDT, in one or more embodiments, parse and explore the configuration files and deployment descriptor of a back-end application and model the underlying hierarchical application structure.</p>
<p id="p-0072" num="0073">In one or more embodiments, using hierarchical rule language, model the above URI Template, obtained by parsing configuration files, as at <b>2006</b>, which represents the instance of Hostname. Pizza {pid}, topping, and {tid} are instances of FilePathNode. For resources {pid} and {uid} also set the attribute isVariable to be true and the variableExpression is set ^[0-9]+$ indicating that it matches numerical value pattern. Another point is to set the attribute inheritParent to the node tid, which means the rule bound to the parent node such as topping will be inherited and applied to the child node. The above URI Template is then represented using JSON (JavaScript Object Notation). JSON is a simple and flexible language that is used in one or more embodiments for representing not only core elements of the rule language; meta-information about various parts of the rule elements that provide additional capabilities can also be expressed.</p>
<p id="p-0073" num="0074">The HRS allows late binding of rules with message components on which the rules operate. To further elaborate the late binding principle, consider a typical HTTP GET request. It includes several components, such as headers, URL, cookies, and the like. One or more rules can be bound to each of these components. A rule includes two parts: condition and action. A rule typically has to be bound to a message before it can be triggered. In other words, an unbounded rule can typically never be triggered, even if its condition is true always. Now, when a condition of a bounded rule is true, then the corresponding action is executed. Using RDT a security administrator can develop new rules, and bind existing rules to different components of a message. Late binding provides flexibility, wherein a security administrator can decide how the rules are bound to messages.</p>
<p id="p-0074" num="0075">A non-limiting exemplary embodiment implements WASP using a J2EE (JAVA enterprise edition) framework and so the exemplary WASP can potentially be deployed inside any J2EE Web application server. In non-limiting experiments, WASP has been integrated into WebSphere application server (WAS) and Tomcat server and has also been deployed in a Cloud environment. Several empirical results that highlight different features of WASP, including results that compare and contrast WASP with ModSecurity and various performance results, are presented herein.</p>
<p id="h-0006" num="0000">Exemplary WASP Design</p>
<p id="p-0075" num="0076">The exemplary design of WASP provides a flexible WASF for new enterprise models such as the Cloud environment. <figref idref="DRAWINGS">FIG. 4</figref> shows the overall system architecture of WASP. The exemplary WASP embodiment includes WASP Server <b>402</b>, WASP Client <b>404</b>, and WASP Central Processor <b>406</b>.</p>
<p id="p-0076" num="0077">WASP Server:</p>
<p id="p-0077" num="0078">The WASP Server <b>402</b> processes HTTP request and response messages and applies rules to filter bad messages and allow good messages. The basic filtering process includes first intercepting the HTTP request/response messages, constructing WASP internal message objects based on a message model (as described in below), and applying filtering rules deployed inside the engine. The WASP Server shown in <figref idref="DRAWINGS">FIG. 4</figref> in turn includes a connector <b>408</b> which essentially captures the HTTP requests and responses, and then forwards them to the message handler <b>410</b>. A non-limiting exemplary embodiment supports Tomcat server and WebSphere Application Server (not separately numbered in block <b>408</b>). In some cases, WASP can be employed in IBM WebSphere proxy server and Apache server, and in these deployments can be used as a proxy firewall that does not exploit the richer application semantics. One or more embodiments do not modify the original messages, but instead create a copy of the message and forward to the Message Handler <b>410</b>.</p>
<p id="p-0078" num="0079">The Message Handler <b>410</b> parses the messages forwarded by the Connector and creates the WASP message object (described in detail below). For each request/response message, multiple sections will be created based on the HTTP message protocol, including the Header Section, Cookie Section, Query String Section, Body Section, and so on. Some encoded characters, such as base64 value, Hex value, and so on, still can launch the XSS attack especially when these characters are embedded in a requested URL as the query string. Thus, the decoder module is used to sanitize the input values if it contains different encoding characters.</p>
<p id="p-0079" num="0080">The Runtime Engine <b>412</b> is a significant module that processes the request/response based on the security rules. The RESTful rewriting module <b>414</b> is used to support RESTful URL and URI templates. To obtain the context of the RESTful requests, one or more embodiments import and analyze the application configuration files such as web.xml, application.xml, and the like, to create the regex (regular expression) pattern for the RESTful URLs and URI templates. Then, based on the URL regex pattern, map the dynamic RESTful URL to the common static one, then index the rules based on the common static one. In this manner, there is no need to create the security rules for each dynamic URL which has the same URL pattern, so that the rule configuration cost can be reduced. After indexing the rules based on the request URL pattern, process each section in the request/response message based on the security rules. If one rule is triggered, the corresponding actions defined in the rule will be enabled, such as denying the request, logging, responding with a friendly error message, and so on.</p>
<p id="p-0080" num="0081">WASP Client:</p>
<p id="p-0081" num="0082">One salient feature of WASP is that in the new enterprise model client side applications are considered as part of the enterprise model. WASP Client provides a number of capabilities, such as user friendly error report when requests are blocked, client pre-checking of rules, and the like.</p>
<p id="p-0082" num="0083">WASP Central Processor:</p>
<p id="p-0083" num="0084">The WASP Central Processor <b>406</b> is where offline analysis, rule development, rule testing, and rule deployment are performed. The Central Processor includes Kernel Services <b>416</b>, Store House <b>418</b>, Analysis Engine <b>420</b> and Rule Management <b>422</b>.</p>
<p id="p-0084" num="0085">Kernel Services:</p>
<p id="p-0085" num="0086">A Cloud environment will typically host many different kinds of application services with different security requirements. The Kernel Services <b>416</b> provide user-centric access to WASP internals so that firewall rules and other log information for one application is not exposed to users of another application.</p>
<p id="p-0086" num="0087">Store House:</p>
<p id="p-0087" num="0088">In one or more embodiments, the Store House <b>418</b> stores all of the relevant information, including rules, analysis results, abstraction of application configuration, and so on. One or more embodiments store most of the information as resources using JSON and/or XML (extensible markup language), and provide a RESTful API (application program interface) to access and update the resources. Some embodiments use APACHE WINK as the RESTful framework. As an example, a rule can be obtained with the specified ID as /rule/{ruleID}, or get all the rules in the ruleset with the specified ruleset ID as /ruleset/{rulesetID}/rules. Also for the rules binding to the different sections of the WASP message, the rules can be obtained from the interface as /message/{messageID}/section/rules. The interface /message/95601/header/rules means it can get all the rules that are bound to the header section in the message with the message ID 95601.</p>
<p id="p-0088" num="0089">Rule Management:</p>
<p id="p-0089" num="0090">Rule Management <b>422</b> includes the Rule Modeler module <b>424</b> and Rule Analysis module <b>420</b>. The Rule Modeler <b>424</b> is used to model the HRS, including the message model and rule model, which is discussed further below.</p>
<p id="h-0007" num="0000">HTTP Message Model</p>
<p id="p-0090" num="0091">Rather than developing a new surface syntax to express rules, in one or more embodiments, WASP uses JSON (JavaScript Object Notation) as the underlying representation for rules. (One or more embodiments also support XML schema representation.) The HRS includes: (1) HTTP Message Model as seen in <figref idref="DRAWINGS">FIG. 6</figref> that defines the core model of the HTTP message structure, (2) Rule Model of <figref idref="DRAWINGS">FIG. 8</figref> that can be used for writing firewall rules, and (3) Message Rule Binding of <figref idref="DRAWINGS">FIG. 7</figref> which is desirable to determine the set of rules that should be triggered at runtime for a given message. In one or more embodiments, the basic format of HTTP request and response messages includes (1) the initial line, (2) a sequence of header lines, (3) a new blank line, and (4) the body. The initial line for a request message typically contains one of the HTTP methods (such as GET, POST, HEAD, and the like). The initial line for a response message typically contains status information that includes status code. <figref idref="DRAWINGS">FIG. 5</figref> illustrates an example of a POST request.</p>
<p id="p-0091" num="0092">It is worth noting at this point that <figref idref="DRAWINGS">FIGS. 8 and 9</figref> are pages from an exemplary web application (the WASP console of <figref idref="DRAWINGS">FIG. 4</figref>). This application can be implemented, for example, in JSP, Java, Servlet and HTML. <figref idref="DRAWINGS">FIG. 8</figref> shows exemplary detailed definition of one rule. <figref idref="DRAWINGS">FIG. 9</figref> shows rule binding; the right block indicates how to bind rules or rulesets onto http message sections, while the left block shows the hierarchy structure in URL (i.e., who is the parent FilePathNode, and whether inherit rules from parent).</p>
<p id="p-0092" num="0093">The overall HTTP message model using UML (Unified Modeling Language) is shown in <figref idref="DRAWINGS">FIG. 6</figref>. The root of the HTTP message model is the abstract element called Message <b>602</b>. The RequestMessage and ResponseMessage <b>604</b>, <b>606</b> are concrete types of Message element, and they correspond to HTTP request and HTTP response messages. Recall that the initial line of an HTTP request contains method, URL, and version; these are represented as Method, URLTemplate and Version elements <b>608</b>, <b>610</b>, <b>612</b>. The Version element is used to represent HTTP version number in both HTTP request and response and so it is part of in the Message element (denoted using solid diamond symbol). A Method element can be one of GET, POST, PUT, DELETE, and HEAD. The URLTemplate element is split into HostName element <b>614</b>, a sequence of FilePathNode elements <b>616</b> and a QueryString element <b>618</b>. Notice that URLTemplate is part of RequestMessage (denoted by solid diamond symbol), whereas URLTemplate is referenced by ResponseMessage (denoted by plain diamond symbol). The distinction is appropriate for indexing rules when response messages are processed.</p>
<p id="p-0093" num="0094">Recall that each HTTP request and response includes a header section, and this can be modeled using the Header element <b>620</b>. The Header element can be considered to be a set of name-value pair represented as a set of Parameter elements <b>622</b>. Notice that in the model cookies are modeled using the Cookie element <b>624</b>; and the reason for this is that they typically contain significant elements (such as session information and authentication information) that are needed for writing filtering rules against cookies. Once again a Cookie element includes a set of name-value pairs and so they are modeled as a set of Parameter elements. The QueryString element, which is part of the URLTemplate element, is also modeled as a set of name-value Parameter elements. Finally, when the value of the Content-Type, defined in the HTTP request header, is application/x-www-form-urlencoded, the message body will also be name-value pairs, and therefore they are modeled as a set of Parameter elements. In an exemplary WRS different types are handled for the body. The Content-Type element defines the content type of the body. Unlike the RequestMessage element, the ResponseMessage element includes a ResponseStatus element <b>626</b>. The statusCode attribute can be any of the status code as defined by the well-known IETF HTTP protocol standard. The ResponseMessage element also includes Header element, Version element, and Body element <b>628</b>.</p>
<p id="p-0094" num="0095">Consider the URL elements of an HTTP request, which can be modeled as a URLTemplate element. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, each URLTemplate element <b>610</b> includes three parts: (1) Hostname element <b>614</b>, (2) sequence of FilePathNode elements <b>616</b>, and (3) QueryString element <b>618</b>. The QueryString includes Parameter element <b>622</b> that represents the name-value pairs. Now consider the HTTP request URL <b>2008</b>. Element <b>2010</b> is an instance of the Hostname element. The resources Account and transferMoney.php are instances of the FilePathNode element. Finally, acct=BOB&#x26;amount=100 is an instance of QueryString. Notice that QueryString includes two name-value pair of Parameter elements separated by &#x26;:acct=BOB and amount=100.</p>
<p id="p-0095" num="0096">Each FilePathNode includes several attributes such as isVariable, variableExpression, and inheritParent, explained below. To summarize, in one or more embodiments, the HTTP message model is concise and is semantically rich for developing rule models. The example in <figref idref="DRAWINGS">FIG. 7</figref> illustrates a JSON representation of an HTTP message model instance for the example shown in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="h-0008" num="0000">Rule Model</p>
<p id="p-0096" num="0097"><figref idref="DRAWINGS">FIG. 10</figref> shows the UML class diagram for the HRS rule model. A security administrator uses RDT for developing rules. <figref idref="DRAWINGS">FIG. 8</figref> shows a screen-shot of rule development using RDT. In one or more embodiments, there are three significant parts in the rule model. The first part includes Rule and RuleSet elements <b>1002</b>, <b>1004</b>; the second part includes Condition and ExternalCondition elements <b>1006</b>, <b>1008</b>; and the last part includes the Action element <b>1010</b>.</p>
<p id="p-0097" num="0098">Rule and RuleSet element: The basic structure of a rule will look like:</p>
<p id="p-0098" num="0099">R01: if condition then action.</p>
<p id="p-0099" num="0100">Whenever the condition holds true the corresponding action is executed. The following is an example of a rule R01:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0101">if (NUM.GT(STR.Length(Request.Header.Parameter[Content-Length]), 100)) then Action.Log.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0100" num="0102">In the above rule, Request.Header.Parameter[Content-Length] identifies a particular header parameter and a check is made whether its string length is greater than 100. Notice the way the HTTP message model elements are accessed. Recall from <figref idref="DRAWINGS">FIG. 6</figref> that Parameter is a name-value type of model element and Content-Length is the name and the notation Parameter[Content-Length] returns its value. An instance of a Rule element typically has three main parts: (1) a Rule identifier that identifies the rule, such as R01, (2) a Condition such as NUM.GT(STR.Length (Request.Header. Parameter[Content-Length]), 100) and (3) Action, such as Action.Log. In one or more embodiments, the WASP rule schema contains several pieces of meta-information, such as name, _id_, description, and the like; those are useful for writing rules, and JSON is used to write rules. One or more embodiments group together a set of rules that have some common purpose using RuleSet elements.</p>
<p id="p-0101" num="0103">Condition and Action element:</p>
<p id="p-0102" num="0104">One or more embodiments use the Condition element to model rule conditions. One or more instances support a number of different condition operators such as regex matching, numeric or string comparison. One or more cases use the Action element to model actions of a rule. A rule can trigger more than one action when the corresponding condition of the rule is satisfied. The attribute actionType is used to represent the action type. The action types such as Block, Allow, and Log are straightforward to understand. The Record(variable, value) is useful when the runtime engine wants to manage state across different rule executions, for instance, supposing it is desired to know if a particular rule R01 had fired previously. In this case, when rule R01 is fired its status will be recorded in a variable using Record(variable, value) action. The action type Execute(path) will execute an external command referenced by a fully qualified path. The action type Rewrite is useful to rewrite values of certain elements, such as rewriting the URL value. See generally block <b>1012</b>.</p>
<p id="h-0009" num="0000">Hierarchical Rule Binding and Inheritance</p>
<p id="p-0103" num="0105">In this section two concepts are discussed; the first is hierarchical rule binding and the second is rule inheritance.</p>
<p id="p-0104" num="0106">Rule Binding:</p>
<p id="p-0105" num="0107">Based on the HTTP message model and the rule model, the next concept that is significant for a security administrator is to understand how to bind rules to HTTP messages. In one or more embodiments of WASP, a rule can triggered only if it is bound to some message element. In other words, unbounded rules can never be fired even if the condition of the rule is always true. A security administrator can use the RDT to bind rules to HTTP message models. <figref idref="DRAWINGS">FIG. 9</figref> illustrates a screen-shot of rule binding using RDT (<figref idref="DRAWINGS">FIG. 14</figref> illustrates binding using JSON format). The first step in the RDT is to create a new template based on the HTTP message model. The RDT will present the new template of the HTTP message model to a security administrator and the template will highlight all the elements of the HTTP message model. There are one or more entries for each element that can be filled in by the security administrator. For instance, for the URLTemplate element, the security administrator can fill in a URL that includes host name and file path nodes. The file path node could contain resource variables (such as pid, as discussed above). One or more embodiments use the URLTemplate instance as an index or key during runtime to retrieve the current HTTP model and/or template instance. For the Header element, one or more embodiments also create the set of headers that are allowable for the current HTTP model instance. Once the instances of all the elements of a new template are created, the security administrator can then bind or associate one or more rules to each element by either using a pre-existing set of rules or by developing new rules. For instance, assume that Content-Length header element is created for the following URL template instance <b>2012</b>.</p>
<p id="p-0106" num="0108">Assume that the following rule is associated:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0109">If (NUM.GT(STR.Length(Header.Parameter[Content-Length]), 100)) then Action.Log.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0107" num="0110">At run time, retrieve the HTTP message template instance using the aforementioned URL as index and then fire all the rules that are bound to various element instances. It should be noted that normalization of the message contents are usually required to be implemented in the WASF engine before executing the rules.</p>
<p id="p-0108" num="0111">Web application developers often want the ability to express the layout of URLs that their application can respond to. To further elaborate, consider the URLs <b>2002</b> that a particular Web application will handle. The Web (REST) application that processes the GET requests for the URLs <b>2002</b> will typically not create one static page for each resource. The Web application will construct a layout for the URLs, and using URLTemplate the template can be created as at <b>2004</b>, where {pid} and {tid} are resource variables. Model the above URLTemplate using the model as follows: URL <b>2006</b> represents the instance of Hostname, pizza, {pid}, topping, and {lid} are instances of FilePathNode. For resources {pid} and {uid}, also set the attribute isVariable to be true and the variableExpression is set to ^[0-9]+$ indicating that it matches the numerical value pattern. The aforementioned URLTemplate can be represented using JSON as shown in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0109" num="0112">Rule Inheritance:</p>
<p id="p-0110" num="0113">Next consider how to inherit rules that are written for parent parts of the HTTP model. To understand the notion of parent, use a URL structure to build a URL tree model. The motivation for inheritance is that most Web applications have a hierarchical structure. For instance, the web.xml file, which contains the configuration of a Web application, describes a tree-like structure for a Web application. To illustrate this further consider the URLs <b>2014</b> that are part of a sequence of HTTP messages.</p>
<p id="p-0111" num="0114">A security administrator can write a set of rules for the resource &#x201c;pizza&#x201d; and this set of rules could apply to all descendants of the pizza node in the above URLs. In other words both order.php and enquire.php can inherit this rule. Now, when an HTTP message with URL <b>2016</b> arrives, construct an instance of the HTTP message model. The run time will then use the URL to access the message model for enquire.php and if the inheritParent attribute is set to true for the file path node enquire.php, the rule bound to &#x201c;pizza&#x201d; will be inherited and applied to HTTP message model elements.</p>
<p id="p-0112" num="0115">A second kind of rule inheritance that is supported in one or more embodiments is called the parameter inheritance. To further explain parameter inheritance, consider a Web application that provide the three related URLS <b>2018</b>. The first of these URLs is the base URL that provide base query opportunity function. The second and third of these URLs with different stype provide two different techniques for a querying opportunity; say, stype=1 is a query by name and stype=2 is a query by time. From a business logic point of view the functions corresponding to the second and third of the URLs are subtype functions of the first URL. Thus, from a security point of view, the second and third URLs can inherit rules from the base URL. One or more embodiments model such rule inheritance for parameters by modeling parameters as a hierarchical structure.</p>
<p id="h-0010" num="0000">Rule Transformation and Chaining</p>
<p id="p-0113" num="0116">One or more embodiments of WASP currently provide capabilities to transform rules from the ModSecurity format to HRS and also from HRS to the IBM DataPower firewall rule format. <figref idref="DRAWINGS">FIG. 14</figref> shows the HRS for the ModSecurity security rules shown in <figref idref="DRAWINGS">FIG. 12</figref>. The rule chaining in HRS is more expressive than the linear chaining rule in ModSecurity. In HRS, one or more embodiments follow the classical forward chaining semantics, where one or more conditions that are shared between rules are considered to be chained. Rules are chained in a tree-like fashion using trigger action type. An action can contain more than one TRIGGER action. One or more embodiments share the conditions between chained rules, and therefore the same condition is evaluated once for all rules. The ModSecurity chain rule for disruptive actions, such as deny action, is restricted to the first rule in the chain, thereby creating unexpected side-effects. For instance, in ModSecurity a request will be denied only when all three rules in the chain trigger and all three non-disruptive actions that set variables will be executed. In one or more embodiments, the deny action is the last rule of the chain. In HRS all actions are performed as though they are standalone rules. This allows one to compose rules via chaining. One or more embodiments separate the deny rule R04 and its condition is set to true, as seen in <figref idref="DRAWINGS">FIG. 14</figref>. Recall that for a rule to be triggered it should also be bound to a message. For HRS rule chaining only the first rule in the chain R01 needs to be bound to a message part, such as content, and the rest of the rules in the chain are triggered as a consequence of the chaining.</p>
<p id="h-0011" num="0000">WASP Functionality</p>
<p id="p-0114" num="0117">By way of a non-limiting exemplary evaluation of the functionality of WASP, compare WASP with two open source WAFs, namely, the Tomcat 7 filter and the aforementioned ModSecurity. First, evaluate the architecture design, the limitation for application code development if enabling WASF function, and the capability to prevent new vulnerability. As shown in the table of <figref idref="DRAWINGS">FIG. 15</figref>, it has been found that for WASP and ModSecurity, the rule definition is independent of the rule engine. It is possible to create or update the rules to prevent a new vulnerability in WASP and ModSecurity, and the firewall function is transparent to the applications, meaning that no modification to application codes is needed. For the Tomcat 7 filter, the security protection is implemented as multiple filters, and the application developer needs to follow the framework to enable the security filters in the application codes. No rules definition is enabled in the Tomcat 7 filter.</p>
<p id="p-0115" num="0118">Second, evaluate the capability for the rules definition. Comparing to ModSecurity rules, a significant feature for WASP HRS is the ability to support the RESTFul URL pattern definition and the validation for the dynamic input values embedded in the RESTful URL. Meanwhile, HRS can support the URL-based rule inheritance by defining the inheritParent attribute to the URL path node.</p>
<p id="p-0116" num="0119">Third, the virtual patching capability is implemented in WASP by using application context information and the AppScan tool. Then it is possible to further re-test the rules using the RDT testing tool. The RDT is implemented as the RESTful service, which provides the RESTful API for users to manage JSON-based rule files in the WASP store house.</p>
<p id="h-0012" num="0000">Empirical Results</p>
<p id="p-0117" num="0120">This section first compares the functionality for the Tomcat 7 filter, ModSecurity and WASP and then describes non-limiting exemplary experiences with WASP, focusing on performance evaluation and usability for user experience.</p>
<p id="p-0118" num="0121">To evaluate the performance impact of WASP, experiments were conducted on 3-node machines connected via a high-speed LAN. As shown in the table of <figref idref="DRAWINGS">FIG. 16</figref>, one of the nodes is an Intel Core2 6700 2.66 GHz, 3G RAM machine with the Windows server <b>2003</b> operating system. Two of the nodes are Intel&#xae; Xeon&#x2122; 2 CPU 2.80 GHz, 4G RAM machines with SUSE LINUX Enterprise Server 9. The nodes are connected to the Internet through a 1000M bps connection. The node with the Windows system is deployed with LoadRunner (version 8.0) and mimics client browsers, simulating multiple users by sending concurrent HTTP requests to the server application. Two of the nodes with SUSE are used on the server side to process HTTP requests. WASP is deployed on one of the nodes in the WebSphere proxy server (version 7); and the other node is deployed with a WebSphere application server (version 7) and IBM DB2&#xae; server (version 9.0)(registered mark of IBM). No other tasks were running on each node.</p>
<p id="p-0119" num="0122"><figref idref="DRAWINGS">FIG. 17</figref> shows average response time versus enabling different modules; <figref idref="DRAWINGS">FIG. 18</figref> shows maximum new connections versus enabling different modules; and <figref idref="DRAWINGS">FIG. 19</figref> shows the cumulative transaction completed ratio versus enabling different modules.</p>
<p id="p-0120" num="0123">Based on the performance metric for application firewalls, three metrics, namely, Maximum New Connections per Second, Maximum Throughput per Second, and Average Response Time, are used for the performance impact evaluation. According to the WASP architecture shown in <figref idref="DRAWINGS">FIG. 4</figref>, the design of the test cases is based on estimation of the potential major bottlenecks in the WASP runtime. Based on the analysis of the WASP runtime code structure, the following four points are identified to be potential performance root causes and are tested in detail.
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0124">Condition operator: The regex matching for the positive pattern and negative pattern are implemented in the condition operator, to validate the users' input values. The negative pattern with long regex pattern will cost more computation resources.</li>
        <li id="ul0008-0002" num="0125">Codecs module: The encoded characters such as Hex, Base64, and the like also can be executed as active content in client browsers to launch XSS attacks. The user input value will be sanitized and decoded in case the encoded characters are detected in this module.</li>
        <li id="ul0008-0003" num="0126">RESTful URL rewriting module: The RESTful URL in which the dynamic value is embedded will be rewritten to the static one based on the URL pattern, then follow the rule retrieving approach on the rewritten static one.</li>
        <li id="ul0008-0004" num="0127">Response handler: To prevent CSRF attacks, some token(s) can be inserted to the response page to prevent the following forgery request based on the preissued token. This operation will increase some response latency.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0121" num="0128">The setting of the test cases is shown in the table of <figref idref="DRAWINGS">FIG. 13</figref>. <figref idref="DRAWINGS">FIG. 17</figref> shows the average response time is 567 milliseconds without enabling rules in the WASP runtime engine, and the average response time will increase to 195 milliseconds after enabling all the modules in WASP, including the condition operator, codecs module, RESTful rewriting module, and response handler. Meanwhile the maximum new connections per second will decrease 22% percent with all the modules enabled in WASP as in <figref idref="DRAWINGS">FIG. 18</figref>. <figref idref="DRAWINGS">FIG. 19</figref> plots the cumulative completed transaction ratio against time. Contrasting their performances, it can be seen that after 1000 ms, the success transaction completed ratio decreases from 100% for no rule enabled to 92% for all the modules enabled.</p>
<p id="h-0013" num="0000">Recapitulation</p>
<p id="p-0122" num="0129">Due consideration has been given to the firewall rule language defined in DataPower, ModSecurity, and the like, as well as the UML model defined in the WADL specification. One or more embodiments provide a WASP rule language HRS. One or more embodiments provide an HTTP message model defined in HRS, which supports URLTemplate, which can validate the dynamic input value embedded in dynamic URL, to support more REST message(s). HRS can express hierarchical fine-grain and semantically rich rules to prevent a broad class of attacks in HTTP request and response. Based on HRS, one or more embodiments implement the WASP rule management tool as a RESTful service to manage the JSON-based rule files. In addition, a rule transformation engine is implemented in the rule development tool, which can transform the WASP rules to IBM DataPower rules.</p>
<p id="p-0123" num="0130">In one or more embodiments, four steps enable the virtual patching for firewall rules. Create the WASP rule template based on HRS and application context information. From application context information such as web.xml, struts.xml, or WADL file, retrieve the URLTemplate especially for the dynamic RESTful URL. For the rule generation, parse the XML report of a security testing tool, AppScan, to generateWASP messages and rules, which will be processed by the runtime WASP engine.</p>
<p id="p-0124" num="0131">One or more embodiments bridge the gap between the firewall and back-end applications. For example, in some current techniques, when a non-compliant character is detected in a server-side firewall, a static error page is thrown out to the end user, which breaks the consistency of application logic and induces a bad user experience. The mechanism of smart error reporting, according to one or more embodiments, is different from these works, and is enabled in a runtime firewall engine to protect on boarding applications. One or more embodiments are consistent with the existing application logics and no modification of application codes is required. Instead of throwing out a static error page to end users when some violation is detected in a runtime WASP engine, a friendly error message and input backfill mechanism is designed to improve the user experience.</p>
<p id="p-0125" num="0132">One or more embodiments provide a WASP rule language and meta-model to handle most aspects of HTTP requests and responses, including the application context. The application context is often encoded in one or more configuration files and/or annotations that are part of the backend methods. One or more embodiments use the application context to develop fine-grained and semantically rich WASF rules. Meanwhile, a rule development tool is provided in one or more embodiments to illustrate how to develop security rules based on the WASP rule language.</p>
<p id="p-0126" num="0133">Virtual patching is a process in which a security administrator will develop and deploy one or more rules on a Web Application Firewall (WASF) to prevent any exploitation of application vulnerability. One or more embodiments provide a mechanism for provisioning rules using application context and testing tool results for interactive virtual patching. An experimental prototype of has been developed in the context of a WASP project. Meanwhile, the smart error reporting mechanism in the context of WASP is provided by one or more embodiments. Rather than simply throwing out a static error page to end users when a violation is detected in the firewall, one or more embodiments provide usable security that provides friendly error messages with a backfill mechanism. The experimental evaluation shows that, in one or more embodiments, the user experience is improved by smart error reporting. Also, this mechanism is consistent with the existing application logic and no modification of application codes is required in at least some instances.</p>
<p id="p-0127" num="0134">Reference should now be had to the flow chart of <figref idref="DRAWINGS">FIG. 21</figref>, which begins in step <b>2100</b>. Given the discussion thus far, it will be appreciated that, in general terms, an exemplary method for operating a web application server firewall includes the step <b>2108</b> of intercepting at least one of an HTTP request message and an HTTP response message, as well as the step <b>2110</b> of identifying a corresponding HTTP message model, based on the intercepting step. The HTTP message model includes a plurality of message model sections. Further step <b>2112</b> includes parsing a representation of the HTTP request or response message into message sections in accordance with the message model sections of the HTTP message model. In the general case, the representation could be the actual message, but in a preferred approach, the representation is a copy of the message copied by the connector and forwarded to the message handler as described above.</p>
<p id="p-0128" num="0135">Additional step <b>2114</b> includes binding a plurality of security rules to the message model sections. The plurality of security rules each specify at least one action to be taken in response to a given condition. The given condition is based, at least in part, on a corresponding given one of the message sections (i.e., the rule is applied by seeing if the corresponding sections in the actual message meet the condition specified for such sections in the rule itself). A further step <b>2116</b> includes processing the at least one of an HTTP request message and an HTTP response message in accordance with the plurality of security rules (typically, filtering &#x201c;bad&#x201d; messages and allowing &#x201c;good&#x201d; messages through).</p>
<p id="p-0129" num="0136">Processing continues at <b>2118</b>.</p>
<p id="p-0130" num="0137">Optional additional steps in the operating method include step <b>2104</b>, building the corresponding HTTP message model, and step <b>2106</b>, developing the plurality of security rules.</p>
<p id="p-0131" num="0138">In some instances, steps <b>2104</b> and/or <b>2106</b> further include causing at least one given one of the plurality of security rules which is written for a parent portion of the HTTP message model to be inherited for a child portion of the HTTP message model.</p>
<p id="p-0132" num="0139">With regard to parameter inheritance, there are two inheritances format on URL:
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0140">1. the resource on the URL at <b>2016</b> can be regarded as a child of the resource on the URL at <b>2020</b>; in this type, filepathnode in the URL is used to mark the resources and their sequences are marked as hierarchy.</li>
        <li id="ul0010-0002" num="0141">2. the resource on URL at the second line of <b>2018</b> can be regarded as a child on the URL at the first line of <b>2018</b>; in this format, parameter &#x201c;type&#x201d; with its value &#x201c;qOpp&#x201d; is used to describe child element for the base module on the given URL.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0133" num="0142">In some instances, steps <b>2104</b> and/or <b>2106</b> further include chaining at least two given ones of the plurality of security rules together based on at least the given condition being common to both of the at least two given ones of the plurality of security rules.</p>
<p id="p-0134" num="0143">In some cases, step <b>2104</b> includes building the corresponding HTTP message model in UML.</p>
<p id="p-0135" num="0144">In some cases, step <b>2116</b> further includes message content normalization.</p>
<p id="p-0136" num="0145">As will be discussed further below, in some cases, the method further includes providing a system, wherein the system includes distinct software modules, each of the distinct software modules being embodied on a computer-readable storage medium. The modules can include, for example, a connector module <b>408</b>, a message handler module <b>410</b>, a rule development tool (RDT) module <b>424</b>, and runtime engine module <b>412</b>. In such cases, step <b>2108</b> is carried out by the connector module executing on at least one hardware processor, steps <b>2110</b> and <b>2112</b> are carried out by the message handler module executing on the at least one hardware processor, steps <b>2104</b>, <b>2106</b>, and <b>2114</b> are carried out by the rule development tool module executing on the at least one hardware processor, and step <b>2116</b> is carried out by the runtime engine module executing on the at least one hardware processor. At least one hardware processor includes, for example, all steps executing on a single processor, or, for example, steps <b>2104</b>, <b>2106</b>, and <b>2114</b> running on one processor and steps <b>2108</b>, <b>2110</b>, <b>2112</b>, and <b>2116</b> running on another.</p>
<p id="p-0137" num="0146">Continued reference should be had to the flow chart of <figref idref="DRAWINGS">FIG. 21</figref>. Given the discussion thus far, it will be appreciated that, in general terms, an exemplary method for developing rules for a web application server firewall includes the step <b>2102</b> of anticipating at least one of an HTTP request message and an HTTP response message likely to be processed by the web application server firewall (for example, by a human expert). A further step <b>2104</b> includes building a corresponding HTTP message model, based on the anticipating step. The HTTP message model includes a plurality of message model sections. Another step <b>2106</b> includes developing a plurality of security rules each specifying at least one action to be taken in response to a given condition. As discussed above, the given condition is based, at least in part, on a corresponding section of an actual message. A further step <b>2114</b> includes binding the plurality of security rules to the message model sections.</p>
<p id="p-0138" num="0147">In some cases, the anticipation of at least one of an HTTP request message and an HTTP response message could be carried out externally and step <b>2104</b> could be based on externally-supplied information about such anticipated message(s).</p>
<p id="p-0139" num="0148">As noted above, processing continues at step <b>2118</b>.</p>
<p id="p-0140" num="0149">In some instances, steps <b>2104</b> and <b>2106</b> further include causing at least one given one of the plurality of security rules which is written for a parent portion of the HTTP message model to be inherited for a child portion of the HTTP message model.</p>
<p id="p-0141" num="0150">In some instances, steps <b>2104</b> and <b>2106</b> further include chaining at least two given ones of the plurality of security rules together based on at least the given condition being common to both of the at least two given ones of the plurality of security rules.</p>
<p id="p-0142" num="0151">In some cases, the building of the corresponding HTTP message model in step <b>2104</b> includes building in UML.</p>
<p id="p-0143" num="0152">As will be discussed further below, in some cases, the method further includes providing a rule development tool system <b>424</b>, wherein the rule development tool system includes distinct software modules, each of the distinct software modules being embodied on a computer-readable storage medium. The modules can include, for example, a message modeling module <b>450</b>, a rule modeling module <b>452</b>, and a message rule binding module <b>454</b>. In such cases, step <b>2104</b> is carried out by the message modeling module executing on at least one hardware processor, step <b>2106</b> is carried out by the rule modeling module executing on the at least one hardware processor, and step <b>2114</b> is carried out by the message rule binding module executing on the at least one hardware processor.</p>
<p id="h-0014" num="0000">Exemplary System and Article of Manufacture Details</p>
<p id="p-0144" num="0153">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0145" num="0154">One or more embodiments of the invention, or elements thereof, can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.</p>
<p id="p-0146" num="0155">One or more embodiments can make use of software running on a general purpose computer or workstation. With reference to <figref idref="DRAWINGS">FIG. 1</figref>, such an implementation might employ, for example, a processor <b>16</b>, a memory <b>28</b>, and an input/output interface <b>22</b> to a display <b>24</b> and external device(s) <b>14</b> such as a keyboard, a pointing device, or the like. The term &#x201c;processor&#x201d; as used herein is intended to include any processing device, such as, for example, one that includes a CPU (central processing unit) and/or other forms of processing circuitry. Further, the term &#x201c;processor&#x201d; may refer to more than one individual processor. The term &#x201c;memory&#x201d; is intended to include memory associated with a processor or CPU, such as, for example, RAM (random access memory) <b>30</b>, ROM (read only memory), a fixed memory device (for example, hard drive <b>34</b>), a removable memory device (for example, diskette), a flash memory and the like. In addition, the phrase &#x201c;input/output interface&#x201d; as used herein, is intended to contemplate an interface to, for example, one or more mechanisms for inputting data to the processing unit (for example, mouse), and one or more mechanisms for providing results associated with the processing unit (for example, printer). The processor <b>16</b>, memory <b>28</b>, and input/output interface <b>22</b> can be interconnected, for example, via bus <b>18</b> as part of a data processing unit <b>12</b>. Suitable interconnections, for example via bus <b>18</b>, can also be provided to a network interface <b>20</b>, such as a network card, which can be provided to interface with a computer network, and to a media interface, such as a diskette or CD-ROM drive, which can be provided to interface with suitable media.</p>
<p id="p-0147" num="0156">Accordingly, computer software including instructions or code for performing the methodologies of the invention, as described herein, may be stored in one or more of the associated memory devices (for example, ROM, fixed or removable memory) and, when ready to be utilized, loaded in part or in whole (for example, into RAM) and implemented by a CPU. Such software could include, but is not limited to, firmware, resident software, microcode, and the like.</p>
<p id="p-0148" num="0157">A data processing system suitable for storing and/or executing program code will include at least one processor <b>16</b> coupled directly or indirectly to memory elements <b>28</b> through a system bus <b>18</b>. The memory elements can include local memory employed during actual implementation of the program code, bulk storage, and cache memories <b>32</b> which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during implementation.</p>
<p id="p-0149" num="0158">Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, and the like) can be coupled to the system either directly or through intervening I/O controllers.</p>
<p id="p-0150" num="0159">Network adapters <b>20</b> may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.</p>
<p id="p-0151" num="0160">As used herein, including the claims, a &#x201c;server&#x201d; includes a physical data processing system (for example, system <b>12</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>) running a server program. It will be understood that such a physical server may or may not include a display and keyboard.</p>
<p id="p-0152" num="0161">As noted, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon. Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0153" num="0162">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0154" num="0163">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0155" num="0164">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0156" num="0165">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0157" num="0166">These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0158" num="0167">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0159" num="0168">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0160" num="0169">It should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a computer readable storage medium; the modules can include, for example, any or all of the elements depicted in the block diagrams and/or described herein. The method steps can then be carried out using the distinct software modules and/or sub-modules of the system, as described above, executing on one or more hardware processors such as 16. Further, a computer program product can include a computer-readable storage medium with code adapted to be implemented to carry out one or more method steps described herein, including the provision of the system with the distinct software modules.</p>
<p id="p-0161" num="0170">In any case, it should be understood that the components illustrated herein may be implemented in various forms of hardware, software, or combinations thereof; for example, application specific integrated circuit(s) (ASICS), functional circuitry, one or more appropriately programmed general purpose digital computers with associated memory, and the like. Given the teachings of the invention provided herein, one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.</p>
<p id="p-0162" num="0171">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms &#x201c;a&#x201d;, &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p>
<p id="p-0163" num="0172">The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for operating a web application server firewall, said method comprising the steps of:
<claim-text>building a plurality of HTTP message models for anticipated messages including HTTP request messages and HTTP response messages, said plurality of HTTP message models including at least a first HTTP message model and a second HTTP message model corresponding to an HTTP request message and an HTTP response message, respectively, and each of said plurality of HTTP message models comprising a plurality of message model sections;</claim-text>
<claim-text>intercepting at least one of said HTTP request message and said HTTP response message;</claim-text>
<claim-text>identifying a corresponding HTTP message model from among said plurality of HTTP message models, based on said intercepting step, said HTTP message model comprising a plurality of message model sections;</claim-text>
<claim-text>parsing a representation of said at least one of said HTTP request message and said HTTP response message into message sections in accordance with said message model sections of said HTTP message model;</claim-text>
<claim-text>binding a plurality of security rules to said message model sections, said plurality of security rules each specifying at least one action to be taken in response to a given condition, said given condition being based, at least in part, on a corresponding given one of said message sections; and</claim-text>
<claim-text>processing said at least one of said HTTP request message and said HTTP response message in accordance with said plurality of security rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein building said plurality of HTTP message models further comprises developing said plurality of security rules.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said building and developing further comprise causing at least one given one of said plurality of security rules which is written for a parent portion of a corresponding HTTP message model to be inherited for a child portion of said corresponding HTTP message model.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said building and developing further comprise chaining at least two given ones of said plurality of security rules together based on at least said given condition being common to both of said at least two given ones of said plurality of security rules.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said building of said plurality of HTTP message models comprises building of said plurality of HTTP message models in UML.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein said processing further comprises message content normalization.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising providing a system, wherein the system comprises distinct software modules, each of the distinct software modules being embodied on a computer-readable storage medium, and wherein the distinct software modules comprise a connector module, a message handler module, a rule development tool module, and runtime engine module;
<claim-text>wherein:</claim-text>
<claim-text>said intercepting is carried out by said connector module executing on at least one hardware processor;</claim-text>
<claim-text>said identifying and said parsing are carried out by said message handler module executing on said at least one hardware processor;</claim-text>
<claim-text>said binding, building, and developing are carried out by said rule development tool module executing on said at least one hardware processor; and</claim-text>
<claim-text>said processing is carried out by said runtime engine module executing on said at least one hardware processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An article of manufacture comprising a computer program product for operating a web application server firewall, said computer program product comprising: a computer readable storage medium, storing in a non-transitory manner computer readable program code, the computer readable program code comprising:
<claim-text>computer readable program code configured to build a plurality of HTTP message models for anticipated messages including HTTP request messages and HTTP response messages, said plurality of HTTP message models including at least a first HTTP message model and a second HTTP message model corresponding to an HTTP request message and an HTTP response message, respectively, and each of said plurality of HTTP message models comprising a plurality of message model sections;</claim-text>
<claim-text>computer readable program code configured to intercept at least one of said HTTP request message and said HTTP response message;</claim-text>
<claim-text>computer readable program code configured to identify a corresponding HTTP message model from among said plurality of HTTP message models, based on said intercepting step, said HTTP message model comprising a plurality of message model sections;</claim-text>
<claim-text>computer readable program code configured to parse a representation of said at least one of said HTTP request message and said HTTP response message into message sections in accordance with said message model sections of said HTTP message model;</claim-text>
<claim-text>computer readable program code configured to bind a plurality of security rules to said message model sections, said plurality of security rules each specifying at least one action to be taken in response to a given condition, said given condition being based, at least in part, on a corresponding given one of said message sections; and</claim-text>
<claim-text>computer readable program code configured to process said at least one of said HTTP request message and said HTTP response message in accordance with said plurality of security rules.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The article of manufacture of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein said computer readable program code configured to build said plurality of HTTP message models further comprising computer readable program code configured to develop said plurality of security rules.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said computer readable program code configured to build and develop further comprises computer readable program code configured to cause at least one given one of said plurality of security rules which is written for a parent portion of a corresponding HTTP message model to be inherited for a child portion of said corresponding HTTP message model.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said computer readable program code configured to build and develop further comprise computer readable program code configured to chain at least two given ones of said plurality of security rules together based on at least said given condition being common to both of said at least two given ones of said plurality of security rules.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said computer readable program code configured to build said plurality of HTTP message models comprises computer readable program code configured to build said plurality of HTTP message models in UML.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said computer readable program code configured to process further comprises computer readable program code configured to carry out message content normalization. </claim-text>
</claim>
</claims>
</us-patent-grant>

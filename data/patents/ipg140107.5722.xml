<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626825-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626825</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12717946</doc-number>
<date>20100304</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>979</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
<further-classification>709219</further-classification>
<further-classification>709246</further-classification>
</classification-national>
<invention-title id="d2e53">Facilitating a service application to operate with different service frameworks in application servers</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5875331</doc-number>
<kind>A</kind>
<name>Lindsey</name>
<date>19990200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5978581</doc-number>
<kind>A</kind>
<name>Sadiq et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6549949</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6640238</doc-number>
<kind>B1</kind>
<name>Bowman-Amuah</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7210121</doc-number>
<kind>B2</kind>
<name>Xia et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717106</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7272824</doc-number>
<kind>B2</kind>
<name>Black-Ziegelbein et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7380003</doc-number>
<kind>B1</kind>
<name>Guo et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7607137</doc-number>
<kind>B2</kind>
<name>Hauser et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0163585</doc-number>
<kind>A1</kind>
<name>Elderon et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709246</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0111464</doc-number>
<kind>A1</kind>
<name>Ho et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0167915</doc-number>
<kind>A1</kind>
<name>Sundararajan et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2005/0144598</doc-number>
<kind>A1</kind>
<name>Sabadell et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2006/0143597</doc-number>
<kind>A1</kind>
<name>Alaluf et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2006/0262915</doc-number>
<kind>A1</kind>
<name>Marascio et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37920101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0155500</doc-number>
<kind>A1</kind>
<name>Richmond</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2009/0037896</doc-number>
<kind>A1</kind>
<name>Grechanik et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>&#x201c;Yang-Seung Jeon et. al.&#x201d;, &#x201c;PSM Approach to Web Service Composition&#x201d;, The Fourth IEEE Workshop on Software Technologies for Future Embedded and Ubiquitous Systems, Publication Date: Apr. 27-28, 2006, pp. 1-9.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;Cedric Chabanois&#x201d;, &#x201c;Transmorph Project Wiki&#x201d;, http://transmorph.sourceforge.net/wiki/index.php/Main<sub>&#x2014;</sub>Page, Publication Date: Jan. 15, 2010, pp. 1-2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>&#x201c;Oracle Corporation&#x201d;, &#x201c;Upgrading Workshop Applications, (Part of &#x201c;BEA, Weblogic Workshoptm Help (Online)&#x201d;)&#x201d;, http://edocs.bea.com/workshop/docs81/doc/en/core/index.html, Downloaded Circa: Aug. 10, 2009, pp. 1-7.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>&#x201c;Oracle Corporation&#x201d;, &#x201c;Web Service Assembler&#x201d;, Oracle&#xae; Application Server Web Services Developer'S Guide, Updated Date: Sep. 2006, pp. 18-1-18-90.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>&#x201c;Ben Van Eyle&#x201d;, &#x201c;Web Services&#x2014;A Business Perspective on Platform Choice&#x201d;, http://www.theserverside.com/news/1365388/Web-Services-A-Business-Perspective-on-Platform-Choice, Publication Date: Aug. 1, 2001, pp. 1-13.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>&#x201c;Chad Vawter and Ed Roman&#x201d;, &#x201c;J2EE vs. Microsoft.Net: A Comparison of Building XML-Based Web Services&#x201d;, http://www.theserverside.com/news/1365389/J2EE-vs-MicrosoftNET-A-comparison-of-building-XML-based-web-services, Publication Date: Jun. 1, 2001, pp. 1-11.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>&#x201c;John Stearns et. al.&#x201d;, &#x201c;An Introduction to the Java EE 5 Platform&#x201d;, http://java.sun.com/developer/technicalArticles/J2EE/intro<sub>&#x2014;</sub>ee5/, Publication Date: May 2006, pp. 1-9.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>&#x201c;BEA Systems, Inc.&#x201d;, &#x201c;BEA Weblogic Portal&#x2014;Migration Guide&#x201d;, Publication Date: Mar. 2006, pp. 1-91.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>&#x201c;Sourceforge.Net&#x201d;, &#x201c;Dozer&#x201d;, http://dozer.sourceforge.net/, Downloaded Circa: Jan. 28, 2010, pp. 1-4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>&#x201c;Franz Garsombke&#x201d;, &#x201c;Dozer 1.3 Released&#x2014;Java Bean to Java Bean Mapper&#x201d;, http://www.theserverside.com/news/thread.tss?thread<sub>&#x2014;</sub>id=34283, Posted Date: Jun. 1 2005, pp. 1-10.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>&#x201c;Amyn Batliwala&#x201d;, &#x201c;Dynamic, Object to Object Converter&#x201d;, http://www.codeproject.com/KB/cs/DTO<sub>&#x2014;</sub>to<sub>&#x2014;</sub>Domain.aspx, The Code Project, Publication Date: Apr. 2, 2008, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>&#x201c;Sourceforge.Net&#x201d;, &#x201c;Ezmorph&#x201d;, http://ezmorph.sourceforge.net/index.html, Downloaded Circa: Jan. 28, 2010, pp. 1-1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>&#x201c;Wayne Beaton&#x201d;, &#x201c;IBM Websphere Developer Technical Journal: Learning From Experience&#x201d;, http://www.ibm.com/developerworks/websphere/techjournal/0308<sub>&#x2014;</sub>beaton/beaton.html, Publication Date: Jun. 2, 2003, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>&#x201c;Neon Tapir&#x201d;, &#x201c;Introducing the Object Mapper&#x201d;, http://neontapir.wordpress.com/2009/12/23/introducing-the-object-mapper, Neon Tapir Blog at Wordpress.com, Publication Date: Dec. 23, 2009, pp. 1-2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>&#x201c;Trustin Lee&#x201d;, &#x201c;Lorentz 2.0 Released: A Generic Object Conversion Framework&#x201d;, http://www.theserverside.com/common/printthread.tss?thread<sub>&#x2014;</sub>id=35700, Publication Date: Aug. 5, 2005, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>Rob Howard', &#x201c;Web Services With ASP.NET&#x201d;, http://msdn.microsoft.com/en-us/library/ms972326.aspx, Publication Date: Feb. 22, 2001, pp. 1-5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>&#x201c;IBM Corporation&#x201d;, &#x201c;Migrating Apache Soap Web Services to Web Services for J2EE Standards&#x201d;, http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/index.jsp?topic=/com.ibm.websphere.nd.multiplatform.doc/info/ae/ae/twbs<sub>&#x2014;</sub>migratewbs.html, Updated Date: Jul. 17, 2009, pp. 1-6.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Gennady Agre et. al., &#x201c;Migrating From Web Services to Semantic Web Services&#x2014;Infrawebs Approach&#x201d;, Institute of Information Technologies&#x2014;BAS, Bulgaria, Research Project No. 511723, Downloaded Circa: Aug. 5, 2009, pp. 1-5.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>&#x201c;Mike Lehmann&#x201d;, &#x201c;Oracle Application Server 10G R3 (10.1.3.1)&#x201d;, An Oracle White Paper, Publication Date: Oct. 2006, pp. 1-31.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>&#x201c;Oracle Corporation&#x201d;, &#x201c;Oracle Containers for J2EE Feature Overview&#x201d;, Downloaded Circa: Mar. 17, 2010, pp. 1-10.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>&#x201c;Oracle Corporation&#x201d;, &#x201c;Oracle Weblogic Server: A Solid Foundation for Service-Oriented Architecture&#x201d;, An Oracle White Paper, Updated Date: Jun. 2008, pp. 1-15.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>&#x201c;Shenoy&#x201d;, &#x201c;OTOM&#x2014;Object to Object Mapping Framework&#x201d;, https://otom.dev.java.net/, Downloaded Circa: Mar. 18, 2010, pp. 1-2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>19</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>16</number-of-drawing-sheets>
<number-of-figures>16</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61240242</doc-number>
<date>20090907</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110060790</doc-number>
<kind>A1</kind>
<date>20110310</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Subramanian</last-name>
<first-name>Velmurugan</first-name>
<address>
<city>Kudankulam</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Srinivasan</last-name>
<first-name>Suresh</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
<residence>
<country>IN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Subramanian</last-name>
<first-name>Velmurugan</first-name>
<address>
<city>Kudankulam</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Srinivasan</last-name>
<first-name>Suresh</first-name>
<address>
<city>Bangalore</city>
<country>IN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Thappeta</last-name>
<first-name>Narendra Reddy</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood Shores</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Walsh</last-name>
<first-name>John B.</first-name>
<department>2451</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An aspect of the present invention facilitates a service application to operate with different frameworks executing in application servers. In one embodiment, the different interfaces according to which the different frameworks are designed to operate with service application are identified, including the interface implemented by the service application. Wrapper modules are then generated based on the differences between the identified interfaces and the interface implemented by the service application. The generated wrapper modules are then deployed along with the service application to facilitate the service application to operate with different frameworks.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="162.56mm" wi="232.33mm" file="US08626825-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="235.20mm" wi="169.93mm" orientation="landscape" file="US08626825-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="140.97mm" wi="153.08mm" orientation="landscape" file="US08626825-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="212.26mm" wi="152.65mm" orientation="landscape" file="US08626825-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="249.43mm" wi="177.04mm" orientation="landscape" file="US08626825-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="253.83mm" wi="173.40mm" orientation="landscape" file="US08626825-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="270.51mm" wi="170.26mm" orientation="landscape" file="US08626825-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="242.49mm" wi="183.56mm" orientation="landscape" file="US08626825-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="258.91mm" wi="183.22mm" orientation="landscape" file="US08626825-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="270.17mm" wi="180.59mm" orientation="landscape" file="US08626825-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="259.84mm" wi="170.35mm" orientation="landscape" file="US08626825-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="258.06mm" wi="173.40mm" orientation="landscape" file="US08626825-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="254.59mm" wi="178.90mm" orientation="landscape" file="US08626825-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="254.68mm" wi="160.36mm" orientation="landscape" file="US08626825-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="249.43mm" wi="162.14mm" orientation="landscape" file="US08626825-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="242.57mm" wi="177.29mm" orientation="landscape" file="US08626825-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="235.63mm" wi="163.83mm" orientation="landscape" file="US08626825-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is related to and claims priority from the co-pending U.S. provisional patent application entitled, &#x201c;Simplifying Migration Of Web Service From One Web Service Stack To Another&#x201d;, Ser. No. 61/240,242, Filed: 7 Sep. 2009, Applicant: Oracle International Corporation, naming the same inventors Velmurugan Subramanian and Suresh Srinivasan as in the subject patent application, and is incorporated in its entirety herewith.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1. Technical Field</p>
<p id="p-0004" num="0003">The present disclosure relates to application servers and more specifically to facilitating a service application to operate with different service frameworks.</p>
<p id="p-0005" num="0004">2. Related Art</p>
<p id="p-0006" num="0005">Application servers refer to server systems which provide web services accessible from other systems according to a contract. A contract specifies the format of invoking a web service (sending the request), the format of the response, etc. The contract is specified in a structured format such as XML, which makes the content machine-understandable. Other systems can request such contracts on a network and then invoke the services according to the received specification. Web Service Definition Language (WSDL) is a common language used for specifying contracts for web services, as is well known in the relevant arts.</p>
<p id="p-0007" num="0006">Service frameworks (hereafter &#x201c;frameworks&#x201d;) and service applications are generally executed in application servers to provide such web services. As is well known, a framework processes web service requests received according to a contract by interacting with service applications. To facilitate such interaction, the framework defines an interface according to which each service application is to be implemented. Each service application contains the program logic underlying the web services, and in addition, needs to be implemented according to defined interface to operate with the framework.</p>
<p id="p-0008" num="0007">It is often desirable that a service application operate with different service frameworks in application servers.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0009" num="0008">Example embodiments of the present invention will be described with reference to the accompanying drawings briefly described below.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example environment (computing system) in which several aspects of the present invention can be implemented.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating the manner in which a service application is facilitated to operate with different service frameworks according to an aspect of the present invention.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the details of implementation of a porting tool in one embodiment.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. 4A-4C</figref> together depicts samples portions of a WSDL file (contract) specifying the details of a web service in one embodiment.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. 5A-5B</figref> depicts portions of a source mapping specifying the procedure definitions to which a source framework maps the operations of a web service specified according to a contract in one embodiment.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIGS. 6A and 6B</figref> depict portions of configuration files respectively specifying the details of a source framework and a target framework in one embodiment.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 7</figref> depicts sample portions of a service endpoint interface (SEI) defined for a WSDL file (contract) by target framework in one embodiment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 8A-8B</figref> together depicts portions of wrapped code generated based on the differences identified between the interfaces of different frameworks in one embodiment.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 9A-9B</figref> depicts portions of a copy utility module that facilitates conversion of different data types in one embodiment.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram illustrating the details of a digital processing system in which various aspects of the present invention are operative by execution of appropriate executable modules.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0020" num="0019">In the drawings, like reference numbers generally indicate identical, functionally similar, and/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<heading id="h-0005" level="1">1. Overview</heading>
<p id="p-0021" num="0020">An aspect of the present invention facilitates a service application to operate with different frameworks executing in application servers. In one embodiment, the different interfaces according to which the different frameworks are designed to operate with service applications are identified, including the interface implemented by the service application. Wrapper modules are then generated based on the differences between the identified interfaces and the interface implemented by the service application. The generated wrapper modules are then deployed along with the service application to facilitate the service application to operate with different frameworks.</p>
<p id="p-0022" num="0021">In one embodiment, a first interface (according to which a first framework is designed to operate with a service application) contains a first set of procedure definitions corresponding to a set of operation defined in the contract for the web service and a second interface (according to which a second framework is designed to operate) contains a second set of procedure definitions corresponding to the same set of operations. Accordingly, the wrapper module is generated based on the differences between a corresponding one of the first set of procedure definitions and a corresponding one of the second set of procedure definitions for each of the set of operations.</p>
<p id="p-0023" num="0022">Several aspects of the present invention are described below with reference to examples for illustration. However, one skilled in the relevant art will recognize that the invention can be practiced without one or more of the specific details or with other methods, components, materials and so forth. In other instances, well-known structures, materials, or operations are not shown in detail to avoid obscuring the features of the invention. Furthermore, the features/aspects described can be practiced in various combinations, though only some of the combinations are described herein for conciseness.</p>
<heading id="h-0006" level="1">2. Example Environment</heading>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example environment (computing system) in which several aspects of the present invention can be implemented. The block diagram is shown containing client system <b>110</b> (which in turn, is shown containing client application <b>115</b>), network <b>120</b>, service <b>130</b>, and server systems <b>140</b>/<b>145</b>. Server system <b>140</b> is shown containing framework <b>170</b> (having interface <b>160</b>) and service application <b>180</b>, while server system <b>145</b> is shown containing porting tool <b>150</b>, framework <b>175</b> (having interface <b>165</b>), service application <b>180</b> and wrapper module <b>190</b>.</p>
<p id="p-0025" num="0024">Merely for illustration, only representative number/types of systems are shown in <figref idref="DRAWINGS">FIG. 1</figref>. Many environments often contain many more systems, both in number and type, and hosting different/multiple web services, depending on the purpose for which the environment is designed. Each system/device of <figref idref="DRAWINGS">FIG. 1</figref> is described below in further detail.</p>
<p id="p-0026" num="0025">Network <b>120</b> provides connectivity between client system <b>110</b> and server systems <b>140</b> and <b>145</b>. Network <b>120</b> may be implemented using protocols such as Transmission Control Protocol (TCP) and/or Internet Protocol (IP), well known in the relevant arts. In general, in TCP/IP environments, a TCP/IP packet is used as a basic unit of transport, with the source address being set to the TCP/IP address assigned to the source system from which the packet originates and the destination address set to the TCP/IP address of the target system to which the packet is to be eventually delivered.</p>
<p id="p-0027" num="0026">Client system <b>110</b> represents a system such as a personal computer, workstation, mobile station, etc., used by users to generate requests for invocation of web services (such as service <b>130</b>) hosted on server systems <b>140</b>/<b>145</b>. The requests may be generated using appropriate user interfaces provided by applications, such as client application <b>115</b>, executing in client system <b>110</b>. In general, client application <b>115</b> sends requests for invocation of specific web services to perform desired tasks to server systems <b>140</b>/<b>145</b> (in particular to frameworks <b>170</b>/<b>175</b>) and receives corresponding responses containing the results of invocation of the requested services (which may then be displayed to the users).</p>
<p id="p-0028" num="0027">Server system <b>140</b> represents an application server executing one or more enterprise applications, such as service application <b>180</b>, which implement the program logic underlying the various web services (such as service <b>130</b>) provided by server system <b>140</b>. Server system <b>140</b> may also execute other software programs such as operating systems, device drivers, virtual machines, etc., which provide a (common) run time environment for execution of the enterprise applications.</p>
<p id="p-0029" num="0028">Framework <b>170</b> (also commonly referred to as web service protocols stack) facilitates web services to be hosted on server system <b>140</b>. In particular, framework <b>170</b> enables different web services to be defined and implemented, as well as to be located by providing the contact to the client systems. Framework <b>170</b> also facilitates the hosted web services to be invoked by client applications (such as <b>115</b>) executing in client systems (such as <b>110</b>) using standard protocols such as HTTP (Hyper Text Transfer Protocol) and SOAP. In one embodiment, framework <b>170</b> represents a web service stack such as Oracle Application Server (OAS) web services stack available from Oracle Corporation, .NET web services stack available from Microsoft Corporation, etc., which facilitates hosting of web services on server system <b>140</b>.</p>
<p id="p-0030" num="0029">Service <b>130</b> represents a web service provided by server system <b>140</b> (in particular framework <b>170</b>) according to a contract specified in WSDL (web service definition language). As is well known, service <b>130</b> contains one or more operations that may be invoked by client application <b>115</b>, with the contract specifying the format of sending a service request, the format of the response, the operations provided by service <b>130</b>, input/output parameters for each of the operations, the type of each parameter, etc. Service <b>130</b> is identified by and accessed using a unique Universal Resource Identifier (URI).</p>
<p id="p-0031" num="0030">Framework <b>170</b> receives web service requests from client systems and then forwards the requests (based on URI and operation requested) to the corresponding implementations. Framework <b>170</b> further receives the results of the requested invocations from the implementations, and then sends corresponding responses (containing the results) to the requesting client systems. To facilitate interaction (forwarding the invocations, receiving the results, etc.) with the implementations, framework <b>170</b> defines interface <b>160</b> according to which the corresponding implementations are to be created. In one common approach, the implementations of the operations contained in a single web service (such as <b>130</b>) form components of a service application such as <b>180</b>, and accordingly service implementation <b>130</b> is required to be created according to interface <b>160</b>.</p>
<p id="p-0032" num="0031">In one embodiment, interface <b>160</b> is provided in a programming language (such as Java&#x2122; language available from Sun Corporation) with each operation specified in the contract mapped to a corresponding procedure definition in the programming language. Service application <b>180</b> is implemented/created by providing the desired program logic (for each operation) as the body of the procedure definitions in the same programming language.</p>
<p id="p-0033" num="0032">Server system <b>145</b> represents another application server which provides the same web service <b>130</b> as provided by server system <b>140</b>, but having a different framework <b>175</b>. A different framework implies that interface <b>165</b> is different from interface <b>160</b> (for example, having different procedure definitions when provided in a programming language). Such different frameworks may be present due to, for example, upgrade of application development/run-time environment (e.g., from OC4J application platform to Weblogic application platform, both available from Oracle Corporation), migration of the service application (as part of migration of an enterprise system, e.g., Human resources system, ERP system) to different platforms/frameworks.</p>
<p id="p-0034" num="0033">It should be noted that framework <b>175</b> can be requested to work with interface <b>160</b>, thereby enabling the same service application <b>180</b> to be deployed in both server systems <b>140</b> and <b>145</b>. However, such a request may cause framework <b>175</b> to generate a new contract/WDSL corresponding to interface <b>160</b>, the new contract being different from that used for invoking service <b>130</b> hosted on server system <b>140</b>. Such a change in the WSDL may necessitate client applications (such as <b>115</b>) invoking the web service to be modified for operation with different formats/WSDLs for invoking the same service (assuming that service <b>130</b> is accessed using the same URI on both server systems <b>140</b> and <b>145</b>).</p>
<p id="p-0035" num="0034">It may be desirable that service application <b>180</b> be operative with different frameworks (<b>170</b> and <b>175</b>) without necessitating changes to client applications invoking the web service. In other words, the client applications continue to send requests to service <b>130</b> according to the same contract/WSDL irrespective of whether service <b>130</b> is hosted by framework <b>170</b> or <b>175</b>. Such an objective may be particularly desirable when service applications forming part of an enterprise system are required to be migrated without disrupting the operation of the other applications (who may be invoking the web service) in the enterprise system.</p>
<p id="p-0036" num="0035">In one prior approach to meeting such an objective, users/developers manually identify the differences between the interfaces (<b>160</b> and <b>165</b>) and then modify the instructions constituting service application <b>180</b> to incorporate the identified differences. By modifying the service application to operate with interface <b>165</b>, framework <b>175</b> is enabled to operate with the same WSDL as used by framework <b>170</b>. As may be appreciated, such an approach may require substantial amount of time/resources to be spent and is prone to mistakes.</p>
<p id="p-0037" num="0036">Wrapper module <b>190</b>, generated according to an aspect of the present invention, represents an executable module that is designed to convert between the different interfaces (such as <b>160</b> and <b>165</b>) of respective different frameworks (such as <b>170</b> and <b>175</b>). Thus, service application <b>180</b> is facilitated to operate with different frameworks, as described below with examples.</p>
<heading id="h-0007" level="1">3. Facilitating a Service Application to Operate with Different Frameworks</heading>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating the manner in which a service application is facilitated to operate with different service frameworks according to an aspect of the present invention. The flowchart is described with respect to <figref idref="DRAWINGS">FIG. 1</figref> merely for illustration. However, the features can be implemented in other environments also without departing from the scope and spirit of various aspects of the present invention, as will be apparent to one skilled in the relevant arts by reading the disclosure provided herein.</p>
<p id="p-0039" num="0038">In addition, some of the steps may be performed in a different sequence than that depicted below, as suited to the specific environment, as will be apparent to one skilled in the relevant arts. Many of such implementations are contemplated to be covered by several aspects of the present invention. The flow chart begins in step <b>201</b>, in which control immediately passes to step <b>210</b>.</p>
<p id="p-0040" num="0039">In step <b>210</b>, porting tool <b>150</b> examines the contract of a web service (<b>130</b>) to identify the operations specified for the web service. Porting tool <b>150</b> may also identify the specific format for each of the operations, such as the name of the operation, the names of the input/output parameters for each operation, the data types of each parameter, etc.</p>
<p id="p-0041" num="0040">In step <b>230</b>, porting tool <b>150</b> identifies the procedure definitions (hereafter &#x201c;source definitions&#x201d;) mapped by the source framework (e.g. <b>170</b>) to the operations of the contract. The identified source definitions forms the interface (<b>160</b>) required by the source framework (<b>170</b>) to interact with the corresponding implementations (hereafter &#x201c;source implementations&#x201d;). In other words, a source definition represents the part of the interface that needs to be implemented for interfacing with the source framework for a corresponding operation.</p>
<p id="p-0042" num="0041">As noted above, source implementations for a single web service commonly form components of a single service application (such as <b>180</b>). Accordingly, the identification of the procedure definitions may be performed by inspecting the source code of an existing implementation (such as service application <b>180</b>). Alternatively, a compiled/executable form of service application <b>180</b> may be inspected using techniques such as reflection, as is well known in the relevant arts.</p>
<p id="p-0043" num="0042">In step <b>250</b>, porting tool <b>150</b> determines the procedure definitions (hereafter &#x201c;target definitions&#x201d;) mapped/defined by the target framework (e.g. <b>175</b>) to the operations in the contract. The identified target definitions forms the interface (<b>165</b>) required by the target framework (<b>170</b>), with each target definition represents the part of the interface that needs to be implemented for interfacing with the target framework for a corresponding operation.</p>
<p id="p-0044" num="0043">The determination of the definitions may be performed by requesting the target framework (<b>175</b>) to provide the corresponding interface (<b>165</b>) for hosting the same web service (examined in step <b>210</b>). In one embodiment described below, a tool provided by the target framework (<b>175</b>) is used to generate the corresponding interface (<b>165</b>), which is then inspected to determine the target definitions.</p>
<p id="p-0045" num="0044">In step <b>270</b>, porting tool <b>150</b> generates instructions based on the differences between the source and target definitions. The generated instructions forms the implementations for the target definitions (hereafter &#x201c;target implementations&#x201d;). Accordingly, a target implementation (for an operation) may be generated based on determining the differences between the corresponding target definition (determined in step <b>250</b>) and the source definition (identified in step <b>230</b>) for the operation.</p>
<p id="p-0046" num="0045">Thus, in a scenario where the definitions are determined to differ only in the names of the procedures/parameters, the implementation of the target definition may include instructions to invoke the corresponding existing source implementation (in service application <b>180</b>). Furthermore, if the data types of the parameters in the source and target definitions are determined to be different, instructions may be generated for converting between the different data types specified in the source and target definitions. A target implementation may not be generated if the source and target definitions are determined to be the same/similar.</p>
<p id="p-0047" num="0046">In step <b>290</b>, porting tool <b>150</b> deploys the generated instructions (target implementations) as a wrapper module (<b>190</b>) between an existing service application (<b>180</b> containing the source implementations) and the target framework (<b>175</b>), thereby facilitating service application <b>180</b> to operate with target framework (<b>175</b>). The flowchart ends in step <b>299</b>.</p>
<p id="p-0048" num="0047">Thus, a service application is facilitated to operate with different frameworks in application servers. It may be observed that the service application is not modified to facilitate operation with the different frameworks. Furthermore, the generation of the wrapper module based on the differences between the source and target definitions may ensure that only the required set of instructions/conversions are performed.</p>
<p id="p-0049" num="0048">The manner in which porting tool <b>150</b> may generate wrapper module <b>190</b> to facilitate service application <b>180</b> to operate with different frameworks (<b>170</b> and <b>175</b>) is described below with examples.</p>
<heading id="h-0008" level="1">4. Example Implementation</heading>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIGS. 3</figref>, <b>4</b>A-<b>4</b>C, <b>5</b>A-<b>5</b>C, <b>6</b>A-<b>6</b>B, <b>7</b>, <b>8</b>A-<b>8</b>B, <b>9</b>A-<b>9</b>B together illustrates the manner in which wrapper modules, facilitating a service application to operate with different frameworks, are generated in one embodiment. Each of the Figures is described in detail below.</p>
<p id="p-0051" num="0050">In the following description, it is assumed that source framework <b>170</b> is an OC4J web service stack, while target framework <b>175</b> is a Web Logic web service stack. It is noted that both the frameworks provide interfaces in Java&#x2122; programming language, and accordingly the service applications are shown as containing instructions in the Java programming language. Furthermore, it is assumed that the contract is according to WSDL and specifies the details of a single web service (<b>130</b>).</p>
<p id="p-0052" num="0051">However, in alternative embodiments, the frameworks may be of other types, the contracts may be in any desired format (specifying one or more web services), the interfaces may be in any other programming environment/language (such as .NET/C#), without departing from the scope and spirit of several aspects of the present invention, as will be apparent to one skilled in the relevant arts by reading the disclosure herewith.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating the details of implementation of porting tool <b>150</b> in one embodiment. The block diagram is shown containing framework <b>175</b>, service application <b>180</b>, WSDL <b>310</b>, configuration files <b>330</b>, service endpoint interface (SEI) <b>340</b>, parser <b>350</b>, source mapping <b>360</b>, target mapping <b>370</b>, code emitter <b>380</b> and wrapper code <b>390</b>. Each of the blocks is described in detail below.</p>
<p id="p-0054" num="0053">WSDL <b>310</b> is in the form of an XML document which specifies the details of a service <b>130</b> accessible at a corresponding URI such as the operations contained in the web service, the input/output parameters of each operation, etc. WSDL <b>310</b> may be published and accessed at another URI (typically in the form of the web service URI appended with the text &#x201c;?wsdl&#x201d;) over network <b>120</b> by client systems (such as <b>110</b>).</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIGS. 4A-4C</figref> together depicts samples portions of a WSDL file (contract) specifying the details of a web service (such as service <b>130</b>) in one embodiment. For conciseness, only the relevant portions are included and described. However, typical contracts contain several more portions, as is well known in the relevant arts.</p>
<p id="p-0056" num="0055">Each of data portions <b>420</b>, <b>425</b>, <b>430</b>, <b>440</b> and <b>445</b> specifies the details of data types used in the WSDL file as well as the input/output elements that may be included in the web service request/response. In particular, data portion <b>420</b> specifies an element &#x201c;RetArrayString1D&#x201d; of the complex type &#x201c;ArrayOfString&#x201d;, which in turn is specified as a sequence (0 or more) of string elements (of type string). Similarly, data portion <b>425</b> specifies another element named &#x201c;RetArrayString1DResponse&#x201d; of the complex type &#x201c;ArrayOfString&#x201d;, while data portion <b>430</b> specifies an element &#x201c;RetArrayDateTime1D&#x201d; of the complex type &#x201c;ArrayOfDateTime&#x201d;.</p>
<p id="p-0057" num="0056">Data portion <b>440</b> specifies an element named &#x201c;RetStructSNSA&#x201d; of the complex type &#x201c;Employee&#x201d;, which in turn is specified as containing the elements &#x201c;BaseDetails&#x201d;, &#x201c;JobID&#x201d;, &#x201c;HireDate&#x201d; and &#x201c;numbers&#x201d; of the respective types Person (not shown), unsignedInt, dateTime and ArrayOfShort. Data portion <b>445</b> specifies an element named &#x201c;RetStructSNSAResponse&#x201d; similar to data portion <b>440</b>.</p>
<p id="p-0058" num="0057">Data portion <b>450</b> specifies the formats of the messages that can be received/sent by the web service, with each of data portions <b>452</b> and <b>454</b> specifying the details of a single message/format. Data portion <b>452</b> specifies a message named &#x201c;RetArrayString1DSoapIn&#x201d; containing an instance of the &#x201c;RetArrayString1D&#x201d; element specified in data portion <b>420</b>, while data portion <b>452</b> specifies another message named &#x201c;RetArrayString1DSoapOut&#x201d; containing an instance of the &#x201c;RetArrayString1DResponse&#x201d; element specified in data portion <b>425</b>.</p>
<p id="p-0059" num="0058">Data portion <b>470</b> specifies the input/output formats for the operations contained in the web services, while data portion <b>475</b> specifies the formats for a single operation named &#x201c;RetArrayString1D&#x201d;. Each of the input/output formats in data portion <b>475</b> is specified as references to messages (by using the message names) specified in data portion <b>450</b>. Thus, data portion <b>475</b> specifies that the operation &#x201c;RetArrayString1D&#x201d; takes as input the message specified in data portion <b>452</b> (an instance of the element &#x201c;RetArrayString1D&#x201d;) and provides as output the message specified in data portion <b>454</b> (an instance of the element &#x201c;RetArrayString1DResponse&#x201d;). The input/output formats for other operations may be specified similar to data portion <b>475</b>.</p>
<p id="p-0060" num="0059">Data portion <b>480</b> specifies the set of the operations contained in the web service, as well as the input/output protocols to be used for the requests/responses for invoking each of the operations. Data portion <b>480</b> further specifies that the input/output formats are to be according to the port type &#x201c;ComplexDataTypesDocLitWServiceSoap&#x201d; (specified in data portion <b>470</b>).</p>
<p id="p-0061" num="0060">Data portion <b>485</b> specifies that an operation named &#x201c;RetArrayString1D&#x201d; is required to use the SOAP protocol (well known in the relevant arts) as the input/output protocols. It may be observed that data portions <b>475</b> and <b>485</b> are specified for the same operation (based on the name), and accordingly, the operation &#x201c;RetArrayString1D&#x201d; is required to be invoked using the input/output formats of data portion <b>475</b> and also the input/output protocols of data portion <b>485</b>. The protocols for other operations may be specified similar to data portion <b>485</b>.</p>
<p id="p-0062" num="0061">Data portion <b>490</b> specifies that a service named &#x201c;ComplexDataTypesDocLitWService&#x201d; supporting the set of operations defined by the binding specified in data portion <b>480</b> (having the name &#x201c;ComplexDataTypesDocLitWServiceSoap&#x201d;) is accessible at the URI &#x201c;http://wsip3.us.acme.com/DotNet20Service/ComplexDataTypes/DocLitWService.asmx&#x201d;.</p>
<p id="p-0063" num="0062">Thus, the contract specifies that a client system/application (such as <b>110</b>/<b>115</b>) wishing to invoke service <b>130</b> is required to send a request (to the URI noted above) containing the name of the specific operation to be invoked (such as &#x201c;RetArrayString1D&#x201d;) along with values for inputs (such as an element &#x201c;RetArrayString1D&#x201d;) according to the respective input formats (data type &#x201c;ArrayOfString&#x201d;) and protocols (SOAP).</p>
<p id="p-0064" num="0063">Porting tool <b>150</b> first examines the WSDL of <figref idref="DRAWINGS">FIGS. 4A-4C</figref> to determine the set of operations specified for the web service (data portion <b>480</b>), the input/output parameters specified for each operation (data portions <b>475</b> and <b>485</b>), the data types of each parameter (data portions such as <b>420</b>, <b>425</b>, <b>452</b>, <b>454</b>), etc. Porting tool <b>150</b> then identifies the source definitions mapped by the source framework (<b>170</b>) to the determined set of operations as described below with examples.</p>
<heading id="h-0009" level="1">5. Identifying Source Mapping</heading>
<p id="p-0065" num="0064">Continuing now with respect to <figref idref="DRAWINGS">FIG. 3</figref>, parser <b>350</b> (contained in porting tool <b>150</b>) receives service application <b>180</b> (implemented according to interface <b>160</b>) and WSDL <b>310</b> as inputs and then identifies the source definitions mapped to the set of operations specified in the WSDL by inspecting service application <b>180</b>. Parser <b>350</b> may either inspect the source code of service application <b>180</b> using parsing techniques or a compiled/executable form of service application <b>180</b> using techniques such as reflection to generate source mapping <b>360</b>.</p>
<p id="p-0066" num="0065">It is noted that service application <b>180</b> typically contains instructions/data (commonly referred to as annotations in Java programming environments) associated with each source implementation/definition. The annotations specify the name of the operation implemented by the corresponding source implementation. Parser <b>350</b> can uses techniques such as reflection (when the source code is not present) to retrieve and inspect the annotations for each source implementation in service application <b>180</b>, to accordingly generate source mapping <b>360</b>.</p>
<p id="p-0067" num="0066">Source mapping <b>360</b> represents a set of mappings between source definitions and corresponding operations specified in WSDL <b>310</b> for service <b>130</b>. Source mapping <b>360</b> may include mappings between the data types specified in the source definitions and those specified in WSDL <b>310</b>. In one embodiment, source mapping <b>360</b> is specified according to XML as described below with examples.</p>
<p id="p-0068" num="0067"><figref idref="DRAWINGS">FIGS. 5A-5B</figref> depicts portions of a source mapping specifying the procedure definitions to which a source framework (<b>170</b>) maps the operations of a web service (<b>130</b>) specified according to the contract (WSDL <b>310</b>) in one embodiment. Data portion <b>510</b> indicates that the mapping is from the operations specified in the WSDL to procedure definitions provided according to Java programming language.</p>
<p id="p-0069" num="0068">Data portion <b>530</b> specifies a mapping between a data type &#x201c;Employee&#x201d; specified in the WSDL and a corresponding type &#x201c;test.sei.generated.Employee&#x201d; (a Java class) in the source definitions. In other words, data portion <b>530</b> indicates that the source framework (<b>170</b>) defines a class/type named &#x201c;Employee&#x201d; for the &#x201c;Employee&#x201d; data type specified in the WSDL (data portion <b>440</b>). Similarly, data portion <b>540</b> indicates that the &#x201c;ArrayOfDateTime&#x201d; data type specified in WSDL <b>310</b> (data portion <b>430</b>) is mapped to the java type &#x201c;java.util.Calendar[ ]&#x201d; in the source definitions.</p>
<p id="p-0070" num="0069">Data portion <b>560</b> specifies the mapping between the services/ports defined in the WSDL to the corresponding Java classes. In particular, data portion <b>560</b> indicates that the service specified in data portion <b>490</b> of WSDL <b>310</b> is implemented as a class having the same name as the service &#x201c;test.sei.generated.ComplexDataTypesDocLitWService&#x201d;. Data portion <b>565</b> specifies the name of the class containing the source implementations in service application <b>180</b>. It may be appreciated that the mappings of data portions <b>560</b> and <b>565</b> is generated based on the annotations associated with the corresponding classes/methods.</p>
<p id="p-0071" num="0070">Data portion <b>570</b> specifies a mapping between an operation defined in the WSDL and a corresponding source definition, a method in the java class indicated by data portion <b>565</b>. In particular, data portions <b>571</b> and <b>572</b> together indicates that the operation &#x201c;RetArrayDateTime1D&#x201d; defined in WSDL <b>310</b> is mapped by the source framework (<b>170</b>) to the source definition &#x201c;retArrayDateTime1D&#x201d;. Such a mapping is generated based on the presence of the operation name &#x201c;RetArrayDateTime1D&#x201d; in the annotations retrieved for the method &#x201c;retArrayDateTime1D&#x201d;.</p>
<p id="p-0072" num="0071">Data portions <b>576</b> and <b>578</b> respectively specify the mappings between the input and output parameters specified for the operation in the WSDL and the corresponding parameters/return value of the method/source definition. The mappings could be generated based on the annotations retrieved for the parameters of the method &#x201c;retArrayDateTime1D&#x201d;. Other operations specified in the WSDL may be mapped to corresponding methods similar to (and by repeating multiple times) data portion <b>570</b>.</p>
<p id="p-0073" num="0072">Thus, porting tool <b>150</b> generates source mapping <b>360</b> identifying the source definitions mapped by the source framework (<b>170</b>) to the operations specified in WSDL <b>310</b>. Source mapping <b>360</b> may be stored in a memory (e.g. volatile memory such as RAM, non-volatile memory such as secondary storage) and later used when generating wrapper module <b>190</b>.</p>
<heading id="h-0010" level="1">6. Configuration Files</heading>
<p id="p-0074" num="0073">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, configuration files <b>330</b> specifies the details of the source and target frameworks. In one embodiment, configuration files <b>330</b> contain a source and a target file specified according to XML, as described below with examples.</p>
<p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. 6A</figref> depicts portions of a source configuration file (part of <b>330</b>) specifying the details of a source framework (<b>170</b>) in one embodiment. Data portion <b>610</b> specifies the location (on a secondary storage) of the source implementation (in the form of service application <b>180</b>), while data portion <b>620</b> specifies the type of implementation as an EAR (Enterprise Archive) package. Data portion <b>630</b> specifies the name/type and version &#x201c;OC4J1013&#x201d; (OC4J 10.13) of the source framework (<b>170</b>).</p>
<p id="p-0076" num="0075">Data portion <b>640</b> specifies the location of the source implementations within the service application, the location of the WSDL in the service application, and the location of the file containing the source mapping (<b>360</b> shown in <figref idref="DRAWINGS">FIGS. 5A-5B</figref>). Data portion <b>650</b> specifies the details of the web service that is sought to be ported and the corresponding implementations in the service application.</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 6B</figref> depicts portions of a target configuration file (part of <b>330</b>) specifying the details of a target framework (<b>175</b>) in one embodiment. Data portion <b>660</b> specifies a type of implementation supported by the target framework (<b>175</b>) as a WAR (web application archive) package. Data portion <b>670</b> specifies the name/type and version &#x201c;WLS103RPC&#x201d; (Weblogic 10.3) of the target framework (<b>175</b>), while data portion <b>675</b> specifies the home location of the framework.</p>
<p id="p-0078" num="0077">Data portion <b>680</b> specifies the location at which the target implementations are to be generated, the location of the WSDL, and the location of the file containing the target mapping (<b>380</b> described in detail below). Data portion <b>690</b> specifies the corresponding implementations in the service application to be generated for the web service (<b>130</b>) that is being ported to the target framework (<b>175</b>).</p>
<p id="p-0079" num="0078">Porting tool <b>150</b> receives configuration files <b>330</b> and generates the source/target mappings based on the information provided in configuration files <b>330</b>. For example, parser <b>350</b> in porting tool <b>150</b> may inspect the source configuration file of <figref idref="DRAWINGS">FIG. 6A</figref> to determine the location of the source implementations, the location of the WSDL, the specific web services for which the wrapper module is to be generated, etc.</p>
<p id="p-0080" num="0079">After identifying the source mapping, porting tool <b>150</b> then determines the procedure definitions mapped by the target framework (<b>175</b>) to the operations, as described below with examples.</p>
<heading id="h-0011" level="1">7. Determining Target Mapping</heading>
<p id="p-0081" num="0080">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, service endpoint interface (SEI) <b>340</b> represents the interface (<b>165</b>), defined by the target framework (<b>175</b>) for the web service (<b>130</b>) specified in WSDL <b>310</b>. SEI <b>340</b> contains the target definitions according to which target implementations are to be created. Thus, SEI <b>340</b> represents the interface that every service application needs to implement to operate with the target framework (<b>175</b>).</p>
<p id="p-0082" num="0081">In one embodiment, porting tool <b>150</b> generates SEI <b>340</b> by invoking a tool provided by the target framework (<b>175</b>) with the contract (WSDL <b>310</b>) of the web service (<b>130</b>). For example, for the Weblogic target stack, porting tool <b>150</b> invokes a proxy generator tool such as WebServiceAssembler tool available from Oracle Corporation for generating SEI <b>340</b>. The target definitions generated for WSDL <b>310</b> for the target framework is described below with examples.</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 7</figref> depicts sample portions of a service endpoint interface (SEI) created for a WSDL file (shown in <figref idref="DRAWINGS">FIGS. 4A-4C</figref>) in one embodiment. For illustration and as noted above, the software code created for SEI is shown in terms of pseudo-code similar to Java&#x2122; language (available from Sun Microsystems), well known in the relevant arts.</p>
<p id="p-0084" num="0083">Data portion <b>710</b> indicates the package name of the SEI, while data portion <b>715</b> specify the names of other packages (and classes) required for execution of the SEI. Data portion <b>720</b> specifies an interface named &#x201c;ComplexDataTypesDocLitWServiceSoap&#x201d; representing the contractual service/web service of the same name, and using a SOAP RPC binding for receiving/sending requests/responses.</p>
<p id="p-0085" num="0084">Data portion <b>740</b> specifies a target definition corresponding to the operation &#x201c;RetArrayString1D&#x201d; specified in data portions <b>475</b>/<b>485</b> of WSDL <b>310</b>. In particular, data portion <b>742</b> specifies the name of the method/target definition as &#x201c;retArrayString1D&#x201d; and the return value/output parameter type as &#x201c;org.tempuri.ArrayOfString&#x201d;, while data portion <b>745</b> specifies the name and data type of an input parameter respectively as &#x201c;inArrayString1D&#x201d; and &#x201c;org.tempuri.ArrayOfString&#x201d;. It may be observed that only a definition is include in SEI <b>340</b> as represented by the semi-colon at the end of the definition and by the keyword &#x201c;interface&#x201d; in data portion <b>720</b>.</p>
<p id="p-0086" num="0085">Similarly, data portion <b>760</b> specifies a method/target definition corresponding to the operation &#x201c;RetArrayDateTime1D&#x201d; specified in data portion <b>460</b> of WSDL <b>310</b>. It may be observed that data portions <b>762</b> and <b>765</b> specify that the input/output data type is &#x201c;org.tempuri.ArrayOfDateTime&#x201d;, which is different from the data type &#x201c;java.util.Calendar[ ]&#x201d; specified in the source definition for the same operation (as indicated by data portion <b>570</b> in source mapping <b>360</b>). Only a few operations are shown in the Figure for illustration, though typically SEI <b>340</b> will contain the target definitions corresponding to all the operations specified in the WSDL.</p>
<p id="p-0087" num="0086">Referring again to <figref idref="DRAWINGS">FIG. 3</figref>, parser <b>350</b> inspects SEI <b>340</b> to determine the target definitions mapped to the set of operations specified in the WSDL. Parser <b>350</b> may either inspect the source code of SEI <b>340</b> using parsing techniques or a compiled/executable form of SEI <b>340</b> using techniques such as reflection to generate target mapping <b>370</b>.</p>
<p id="p-0088" num="0087">Target mapping <b>370</b> represents a set of mappings between target definitions and corresponding operations specified in WSDL <b>310</b> for service <b>130</b>. Target mapping <b>370</b> may include mappings between the data types specified in the target definitions and those specified in WSDL <b>310</b>. However, the content of target mapping <b>370</b> is generally different (having different data type mappings) from the content of source mapping <b>360</b> due to the difference in implementation of the web service (defined by WSDL <b>310</b>) by the different frameworks <b>170</b> and <b>175</b>.</p>
<p id="p-0089" num="0088">After determining the source and target definitions for each of the operations specified in the contract for the web service, porting tool <b>150</b> generates instructions based on the differences between the source and target definitions. Accordingly, porting tool <b>150</b> may compare the source definitions (in service application <b>180</b>) and target definitions (in SEI <b>340</b>) to identify the differences. In one embodiment, the differences are identified based on source mapping <b>360</b> and target mapping <b>370</b> and the instructions accordingly generated as described below with examples.</p>
<heading id="h-0012" level="1">8. Generating Wrapper Module</heading>
<p id="p-0090" num="0089">Continuing with <figref idref="DRAWINGS">FIG. 3</figref>, code emitter <b>380</b> generates instructions based on the differences identified using source mapping <b>360</b> and target mapping <b>370</b>. Code emitter <b>380</b>, first identifies the difference between the corresponding source and target definitions for each operation specified in WSDL <b>310</b>. For example, code emitter <b>380</b> may identify that the source and target definitions for the operation &#x201c;RetArrayDateTime1D&#x201d; (data portion <b>470</b> in WSDL <b>310</b>) differs in the data types specified in the definitions (&#x201c;org.tempuri.ArrayOfDateTime&#x201d; data type in the target definition and &#x201c;java.util.Calendar[ ]&#x201d; data type in the source definition).</p>
<p id="p-0091" num="0090">Code emitter <b>380</b> then generates instructions based on the identified differences. For example, if the difference is identified to be in the names of the procedures, code emitter <b>380</b> generates a target implementation for the corresponding target definition designed to invoke a source implementation (contained in service application <b>180</b>) corresponding to the same operation contained in said service application. If a difference in data types is identified, code emitter <b>380</b> generates instructions in the implementation for converting between the different data types, thereby facilitating the target implementation to invoke the source implementation.</p>
<p id="p-0092" num="0091">In one embodiment, the differences between the source and target definitions are identified by comparing the content of the tags contained in the source and target mappings. For example, the content of the tag &#x201c;&#x3c;java-method-name&#x3e;&#x201d; (shown in data portion <b>571</b>) specified in the source mapping is compared with the content of the same tag specified in the target mapping for the same operation (having the same content for the tag &#x201c;&#x3c;wsdl-operation&#x3e;&#x201d; shown in data portion <b>572</b>) to identify the difference in the names of the procedures. Similarly, the content of the tag &#x201c;&#x3c;param-type&#x3e;&#x201d; for each of the input parameters (shown in data portion <b>576</b>) and the content of the tag &#x201c;&#x3c;method-return-value&#x3e;&#x201d; for the output parameter are compared to identify the differences in the data types of the parameters.</p>
<p id="p-0093" num="0092">Wrapper code <b>390</b> represents the source code/instructions generated by porting tool <b>150</b> based on difference identified between the interfaces (<b>160</b> and <b>165</b>) of the different frameworks (<b>170</b> and <b>175</b>). The instructions are generated as part of the target implementations (for the corresponding target definitions) ready to be deployed on the target framework. Wrapper code <b>390</b> may be compiled (converted to executable form) and then deployed as wrapper module <b>190</b> along with service application <b>180</b> to facilitate the service application to operate with a different framework <b>175</b>. Thus, a service application is facilitated to operate with different frameworks, though the service application is designed to operate with only one framework. Client application (<b>115</b>) may then access web service <b>130</b> on server system <b>145</b>, as well.</p>
<p id="p-0094" num="0093">Wrapper code <b>390</b> that may be generated based on the differences between source definitions (as shown <figref idref="DRAWINGS">FIGS. 5A-5B</figref>) and target definitions (as shown in <figref idref="DRAWINGS">FIG. 7</figref>) for the operations specified in the WSDL (of <figref idref="DRAWINGS">FIGS. 4A-4C</figref>) is described below with examples.</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIGS. 8A-8B</figref> together depicts portions of instructions (wrapper code <b>390</b>) generated based on the difference identified between the interfaces of different frameworks in one embodiment. The instructions are shown generated in Java programming language for deployment on the Weblogic web service stack (target framework as indicated by data portion <b>670</b>).</p>
<p id="p-0096" num="0095">Data portion <b>810</b> specifies that the class &#x201c;ComplexDataTypesDocLitWServiceSoapImpl&#x201d; is an implementation of the endpoint interface specified in data portion <b>720</b> of SEI <b>340</b>. Data portion <b>810</b> further specifies that the URI at which the web service is to be accessed. It may be observed that the name of the file &#x201c;DocLitWService.asmx&#x201d; and the context path form part of the URI specified in data portion <b>490</b> of WSDL <b>310</b>.</p>
<p id="p-0097" num="0096">Data portion <b>830</b> specifies a target implementation generated by code emitter <b>380</b> for the target definition shown in data portion <b>740</b> based on the difference (in data types) identified between the source and target definitions for the operation &#x201c;RetArrayString1D&#x201d;. Accordingly, in data portion <b>832</b>, the input parameter of data type &#x201c;ArrayOfString&#x201d; is converted to the data type &#x201c;String[ ]&#x201d; expected by the source implementation. In data portion <b>834</b>, the source implementation is invoked and the result of invocation stored in the variable &#x201c;_ret2BMigrated&#x201d;. In data portion <b>836</b>, the result of invocation is converted from the data type &#x201c;String[ ]&#x201d; to the data type &#x201c;ArrayOfString&#x201d; specified in the target definition and in data portion <b>838</b> the converted result (stored in &#x201c;_actualRet&#x201d;) is returned as the output/result of the procedure.</p>
<p id="p-0098" num="0097">Similarly, data portions <b>850</b> and <b>870</b> specify target implementation generated by code emitter for the operations &#x201c;RetArrayDateTime1D&#x201d; and &#x201c;RetStructSNSA&#x201d; specified in data portions <b>470</b>/<b>480</b> of WSDL <b>310</b>. It may be appreciated that data portions <b>852</b> and <b>856</b> are generated corresponding to the difference in the data types specified in the source definition (&#x201c;java.util.Calendar[ ]&#x201d; data type) and target definition (&#x201c;org.tempuri.ArrayOfDateTime&#x201d; data type) for the same operation &#x201c;RetArrayDateTime1D&#x201d;.</p>
<p id="p-0099" num="0098">Thus, code emitter <b>380</b> generates instructions (as part of the target implementations) based on the differences identified between the source and target definitions mapped to the operations specified for the web service. Code emitter <b>380</b> may generate target implementations for all the target definitions, with the target implementation for an operation having no difference in the definitions merely invoking the corresponding source implementation.</p>
<p id="p-0100" num="0099">It may be observed that the target implementations generated contains several program statements/instructions (shown as respective portions of <figref idref="DRAWINGS">FIGS. 8A-8B</figref>). It is noted that the program statements are generated programmatically (as opposed to user having to manually specify/code the same). Accordingly, the time and resources required to make the service application operative with different frameworks is substantially reduced (in comparison to the manual approach described above with respect to <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0101" num="0100">It may be further observed in data portions <b>832</b>, <b>836</b>, <b>852</b> and <b>856</b> that the conversion between different data types is performed using a copy method of a copy utility class (which is also included as part of wrapper code <b>390</b>). The copy utility class provided according to an aspect of the present invention facilitates the copying/conversion of different data types as described below with examples.</p>
<heading id="h-0013" level="1">9. Copy Utility Module</heading>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 9A-9B</figref> depicts portions of a copy utility module that facilitates conversion of different data types in one embodiment. Though the instructions are shown in Java programming language, the copy utility module can be implemented in other programming languages as well.</p>
<p id="p-0103" num="0102">Broadly, the copy utility module contains multiple methods/procedures, with each method/procedure designed to accept a specific data type as an input and to generate another data type as the result of invocation of the method. All the methods performing the conversions are named &#x201c;copy&#x201d;, with the specific method to be invoked determined based on the data type of the input parameter.</p>
<p id="p-0104" num="0103">Data portion <b>910</b> specifies the name of the class containing the copy utility methods. The name of the class is used to invoke the desired method, as shown in data portions <b>832</b>, <b>836</b>, <b>852</b> and <b>856</b>. Data portion <b>920</b> specifies a method (invoked in data portion <b>856</b>) which converts/copies from a &#x201c;Calendar[ ]&#x201d; data type (taken as input) to a &#x201c;ArrayOfDateTime&#x201d; data type (provided as the result).</p>
<p id="p-0105" num="0104">Similarly, data portions <b>940</b>, <b>960</b> and <b>980</b> specify other methods that convert from one data type to another, and which are invoked in wrapper code <b>390</b> (shown in <figref idref="DRAWINGS">FIGS. 8A and 8B</figref>) for performing the conversion between the different data types specified in the source and target definitions. It may be observed that in data portion <b>940</b>, the conversion involves copying of the individual elements (such as BaseDetails, JobID, etc.) between the different data types, while in data portion <b>980</b>, the conversion involves copying of individual elements from one array to another.</p>
<p id="p-0106" num="0105">According to an aspect of the present invention, the instruction forming the copy utility module is generated based on the identification of the conversions (between data types) required for in wrapper module <b>190</b>. The copy utility module is generated once and compiled (along with the instructions shown in <figref idref="DRAWINGS">FIGS. 8A-8B</figref>) as part of wrapper code <b>390</b>. Such static integration of the copy utility module is in contrast to a run-time conversion approach where the analysis of the different data types and the corresponding conversions is performed only when processing a web service request (and accordingly is a costly operation since substantial portion of the analysis is repeated for each request).</p>
<p id="p-0107" num="0106">Furthermore, it may be observed that only the copy methods that are used for conversion of data types are included as part of wrapper code <b>390</b>, in contrast to the alternative approach where a pre-defined set of copy methods are provided as a stand-alone module (as a jar/DLL file) which necessitates the module to be dynamically linked/invoked for each web service request.</p>
<p id="p-0108" num="0107">It should be further appreciated that the features described above can be implemented in various embodiments as a desired combination of one or more of hardware, executable modules, and firmware. The description is continued with respect to an embodiment in which various features are operative when the software instructions described above are executed.</p>
<heading id="h-0014" level="1">10. Digital Processing System</heading>
<p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram illustrating the details of digital processing system <b>1000</b> in which various aspects of the present invention are operative by execution of appropriate executable modules. Digital processing system <b>1000</b> may correspond to server system <b>145</b>.</p>
<p id="p-0110" num="0109">Digital processing system <b>1000</b> may contain one or more processors such as a central processing unit (CPU) <b>1010</b>, random access memory (RAM) <b>1020</b>, secondary memory <b>1030</b>, graphics controller <b>1060</b>, display unit <b>1070</b>, network interface <b>1080</b>, and input interface <b>1090</b>. All the components except display unit <b>1070</b> may communicate with each other over communication path <b>1050</b>, which may contain several buses as is well known in the relevant arts. The components of <figref idref="DRAWINGS">FIG. 10</figref> are described below in further detail.</p>
<p id="p-0111" num="0110">CPU <b>1010</b> may execute instructions stored in RAM <b>1020</b> to provide several features of the present invention. CPU <b>1010</b> may contain multiple processing units, with each processing unit potentially being designed for a specific task. Alternatively, CPU <b>1010</b> may contain only a single general-purpose processing unit.</p>
<p id="p-0112" num="0111">RAM <b>1020</b> may receive instructions from secondary memory <b>1030</b> using communication path <b>1050</b>. RAM <b>1020</b> is shown currently containing software instructions constituting operating system <b>1025</b> and/or other code/programs <b>1026</b> (such as client applications, Web browser, application instances processing user requests, load balancer/management applications, RDBMS, etc.). In addition to operating system <b>1025</b>, RAM <b>1020</b> may contain other software programs such as device drivers, virtual machines, etc., which provide a (common) run time environment for execution of other code/programs.</p>
<p id="p-0113" num="0112">Graphics controller <b>1060</b> generates display signals (e.g., in RGB format) to display unit <b>1070</b> based on data/instructions received from CPU <b>1010</b>. Display unit <b>1070</b> contains a display screen to display the images defined by the display signals. Input interface <b>1090</b> may correspond to a keyboard and a pointing device (e.g., touch-pad, mouse) and may be used to provide inputs. Network interface <b>1080</b> provides connectivity to a network (e.g., using Internet Protocol), and may be used to communicate with other systems of <figref idref="DRAWINGS">FIG. 1</figref> such as client system <b>100</b>.</p>
<p id="p-0114" num="0113">Secondary memory <b>1030</b> may contain hard drive <b>1035</b>, flash memory <b>1036</b>, and removable storage drive <b>1037</b>. Secondary memory <b>1030</b> may store the data (for example, portions of WSDL <b>310</b>, configuration files <b>330</b>, source mapping <b>360</b>, target mapping <b>370</b>) and software instructions (for example, portions of service application <b>180</b>, wrapper module <b>190</b>, SEI <b>340</b>, wrapper code <b>390</b> in source and/or compiled form), which enable digital processing system <b>1000</b> to provide several features in accordance with the present invention.</p>
<p id="p-0115" num="0114">Some or all of the data and instructions may be provided on removable storage unit <b>1040</b>, and the data and instructions may be read and provided by removable storage drive <b>1037</b> to CPU <b>1010</b>. Floppy drive, magnetic tape drive, CD-ROM drive, DVD Drive, Flash memory, removable memory chip (PCMCIA Card, EPROM) are examples of such removable storage drive <b>1037</b>.</p>
<p id="p-0116" num="0115">Removable storage unit <b>1040</b> may be implemented using medium and storage format compatible with removable storage drive <b>1037</b> such that removable storage drive <b>1037</b> can read the data and instructions. Thus, removable storage unit <b>1040</b> includes a computer readable (storage) medium having stored therein computer software and/or data. However, the computer (or machine, in general) readable medium can be in other forms (e.g., non-removable, random access, etc.).</p>
<p id="p-0117" num="0116">In this document, the term &#x201c;computer program product&#x201d; is used to generally refer to removable storage unit <b>1040</b> or hard disk installed in hard drive <b>1035</b>. These computer program products are means for providing software to digital processing system <b>1000</b>. CPU <b>1010</b> may retrieve the software instructions, and execute the instructions to provide various features of the present invention described above.</p>
<p id="p-0118" num="0117">Reference throughout this specification to &#x201c;one embodiment&#x201d;, &#x201c;an embodiment&#x201d;, or similar language means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, appearances of the phrases &#x201c;in one embodiment&#x201d;, &#x201c;in an embodiment&#x201d; and similar language throughout this specification may, but do not necessarily, all refer to the same embodiment.</p>
<p id="p-0119" num="0118">Furthermore, the described features, structures, or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the above description, numerous specific details are provided such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of embodiments of the invention.</p>
<heading id="h-0015" level="1">11. Conclusion</heading>
<p id="p-0120" num="0119">While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.</p>
<p id="p-0121" num="0120">It should be understood that the figures and/or screen shots illustrated in the attachments highlighting the functionality and advantages of the present invention are presented for example purposes only. The present invention is sufficiently flexible and configurable, such that it may be utilized in ways other than that shown in the accompanying figures.</p>
<p id="p-0122" num="0121">Further, the purpose of the following Abstract is to enable the U.S. Patent and Trademark Office and the public generally, and especially the scientists, engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology, to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The Abstract is not intended to be limiting as to the scope of the present invention in any way.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of facilitating a service application to operate with different service frameworks executing in application servers, wherein said service application is designed to operate with a first service framework in providing a web service according to a contract, said method being performed in an application server, said method comprising:
<claim-text>identifying that said first service framework is designed to operate with service applications according to a first interface for said web service, wherein said service application is implemented according to said first interface;</claim-text>
<claim-text>determining that a second service framework executing in said application server is designed to operate with service applications according to a second interface for said web service, said second interface being different from said first interface;</claim-text>
<claim-text>examining said contract to identify a set of operations defined in said contract for said web service,</claim-text>
<claim-text>wherein said first interface comprises a first set of procedure definitions, wherein each of said first set of procedure definitions needs to be implemented for interfacing with said first service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said service application implements said first set of procedure definitions,</claim-text>
<claim-text>wherein said second interface comprises a second set of procedure definitions, wherein each of said second set of procedure definitions needs to be implemented for interfacing with said second service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said set of differences comprises differences between a corresponding one of said first set of procedure definitions and a corresponding one of said second set of procedure definitions for each of said set of operations;</claim-text>
<claim-text>generating a wrapper module based on said set of differences identified between said first interface and said second interface; and</claim-text>
<claim-text>deploying said wrapper module and said service application in said application server,</claim-text>
<claim-text>whereby said service application operates with said second service framework to provide said web service according to said contract in said application server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said identifying said first interface is performed by inspecting instructions constituting said service application,
<claim-text>wherein said determining said second interface is performed by invoking a tool provided as part of said second service framework with said contract to generate said second interface.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>creating a first plurality of mappings after said identifying, wherein each of said first plurality of mappings identifies a corresponding one of said first set of procedure definitions for each of said set of operations defined in said contract for said web service;</claim-text>
<claim-text>creating a second plurality of mappings after said determining said second interface, wherein each of said second plurality of mappings identifies a corresponding one of said second set of procedure definitions for each of said set of operations; and</claim-text>
<claim-text>storing said first plurality of mappings and said second plurality of mappings in a memory,</claim-text>
<claim-text>wherein said generating identifies said set of differences based on said first plurality of mappings and said second plurality of mappings stored in said memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein said memory is a non-volatile memory, said method further comprising:
<claim-text>receiving an indication that said service application is to operate with a third service framework executing in said application server, said third service framework designed to operate with service applications according to a third interface for said web service; and</claim-text>
<claim-text>generating a second wrapper module based on a second set of differences identified between said third interface and said first plurality of mappings retrieved from said non-volatile memory,</claim-text>
<claim-text>wherein said deploying deploys said second wrapper module and said service application in said application server,</claim-text>
<claim-text>whereby said service application operates with said third service framework to provide said web service according to said contract in said application server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first difference for a first operation is a difference in the name of a corresponding first procedure definition and a corresponding second procedure definition,
<claim-text>wherein said generating generates a corresponding second implementation for said second procedure definition designed to invoke a first implementation of said first procedure definition contained in said service application,</claim-text>
<claim-text>wherein said first difference is contained in said set of differences, said first operation is contained in said set of operations, said first procedure definition is contained in said first set of procedure definitions, and said second procedure definition is contained in said second set of procedure definitions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a second difference for said first operation is a difference in the data types, wherein said first procedure definition contains a first set of data types and said second procedure definition contains a second set of data types,
<claim-text>wherein said generating generates said second implementation further designed to convert between said first set of data types and said second set of data types, thereby facilitating said second implementation to invoke said first implementation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein said first set of data types contains a first object type and said second set of data types contains a second object type,
<claim-text>wherein said generating generates a first copy method to convert from said first object type to said second object type, and a second copy method to convert from said second object type to said first object type,</claim-text>
<claim-text>wherein said first copy method and said second copy are included in a copy utility module forming part of said wrapper module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising:
<claim-text>compiling said copy utility module along with said wrapper module, before said deploying,</claim-text>
<claim-text>whereby said first copy method and said second copy method are merely invoked when processing each of a sequence of requests for said web service, without having to again identify said set of differences and regenerate said first copy method and said second copy method for each of said sequence of requests.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A computing system comprising:
<claim-text>a first application server to execute a first service framework and a service application, wherein said service application is designed to operate with said first service framework in providing a web service according to a contract, wherein said first service framework is designed to operate with service applications according to a first interface for said web service, said service application being implemented according to said first interface;</claim-text>
<claim-text>a second application server to execute a second service framework designed to operate with service applications according to a second interface for said web service, said second interface being different from said first interface; and</claim-text>
<claim-text>a porting tool to generate a wrapper module based on a set of differences identified between said first interface and said second interface and to deploy said wrapper module and said service application in said second application server,</claim-text>
<claim-text>whereby said service application operates with said second service framework to provide said web service according to said contract in said second application server,</claim-text>
<claim-text>a client system to send a first request for invocation of said web service to said first service framework in said first application server and to send a second request for invocation of said web service to said second service framework in said second application server,</claim-text>
<claim-text>wherein the formats of said first request and said second request are the same according to said contract,</claim-text>
<claim-text>wherein at least one of said client system, first application server, said second application server and said porting tool is implemented by a processor executing instructions retrieved from a memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computing system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein said porting tool is operable to examine said contract to identify a set of operations defined in said contract for said web service,
<claim-text>wherein said first interface comprises a first set of procedure definitions, wherein each of said first set of procedure definitions needs to be implemented for interfacing with said first service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said service application implements said first set of procedure definitions,</claim-text>
<claim-text>wherein said second interface comprises a second set of procedure definitions, wherein each of said second set of procedure definitions needs to be implemented for interfacing with said second service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said set of differences comprises differences between a corresponding one of said first set of procedure definitions and a corresponding one of said second set of procedure definitions for each of said set of operations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computing system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein said porting tool is operable to:
<claim-text>create a first plurality of mappings, wherein each of said first plurality of mappings identifies a corresponding one of said first set of procedure definitions for each of said set of operations defined in said contract for said web service;</claim-text>
<claim-text>create a second plurality of mappings, wherein each of said second plurality of mappings identifies a corresponding one of said second set of procedure definitions for each of said set of operations;</claim-text>
<claim-text>store said first plurality of mappings and said second plurality of mappings in a memory; and</claim-text>
<claim-text>identify said set of differences based on said first plurality of mappings and said second plurality of mappings stored in said memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computing system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said memory is a non-volatile memory, said porting tool further operable to:
<claim-text>receive an indication that said service application is to operate with a third service framework executing in a third application server, said third service framework designed to operate with service applications according to a third interface for said web service;</claim-text>
<claim-text>generate a second wrapper module based on a second set of differences identified between said third interface and said first plurality of mappings retrieved from said non-volatile memory; and</claim-text>
<claim-text>deploy said second wrapper module and said service application in said third application server,</claim-text>
<claim-text>whereby said service application operates with said third service framework to provide said web service according to said contract in said third application server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computing system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein a first difference for a first operation is a difference in the name of a corresponding first procedure definition and a corresponding second procedure definition,
<claim-text>wherein said porting tool generates a corresponding second implementation for said second procedure definition designed to invoke a first implementation of said first procedure definition contained in said service application,</claim-text>
<claim-text>wherein said first difference is contained in said set of differences, said first operation is contained in said set of operations, said first procedure definition is contained in said first set of procedure definitions, and said second procedure definition is contained in said second set of procedure definitions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computing system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein a second difference for said first operation is a difference in the data types, wherein said first procedure definition contains a first set of data types and said second procedure definition contains a second set of data types,
<claim-text>wherein said porting tool generates said second implementation further designed to convert between said first set of data types and said second set of data types, thereby facilitating said second implementation to invoke said first implementation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system facilitating a service application to operate with different service frameworks, wherein said service application is designed to operate with a first service framework in providing a web service according to a contract, wherein said first service framework is designed to operate with service applications according to a first interface for said web service, said service application being implemented according to said first interface, said system comprising:
<claim-text>a processor;</claim-text>
<claim-text>a random access memory (RAM); and</claim-text>
<claim-text>a machine readable medium to store a first set of instructions, a second set of instructions, and a third set of instructions,</claim-text>
<claim-text>wherein said first set of instructions when retrieved into said RAM and executed by said processor form a second service framework designed to operate with service applications according to a second interface for said web service, said second interface being different from said first interface,</claim-text>
<claim-text>said second set of instructions when retrieved into said RAM and executed by said processor form said service application,</claim-text>
<claim-text>said third set of instructions when retrieved into said RAM and executed by said processor form a wrapper module designed to convert between said first interface and said second interface,</claim-text>
<claim-text>thereby enabling said service application to operate with said second service framework to provide said web service according to said contract,</claim-text>
<claim-text>a fourth set of instructions, wherein said fourth set of instructions when retrieved into said RAM and executed by said processor form a porting tool designed to generate said wrapper module based on a set of differences identified between said first interface and said second interface, said porting tool containing one or more instructions for examining said contract to identify a set of operations defined in said contract for said web service,</claim-text>
<claim-text>wherein said first interface comprises a first set of procedure definitions, wherein each of said first set of procedure definitions needs to be implemented for interfacing with said first service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said service application implements said first set of procedure definitions,</claim-text>
<claim-text>wherein said second interface comprises a second set of procedure definitions, wherein each of said second set of procedure definitions needs to be implemented for interfacing with said second service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said set of differences comprises differences between a corresponding one of said first set of procedure definitions and a corresponding one of said second set of procedure definitions for each of said set of operations.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein said porting tool contains one or more instructions for:
<claim-text>creating a first plurality of mappings, wherein each of said first plurality of mappings identifies a corresponding one of said first set of procedure definitions for each of said set of operations defined in said contract for said web service;</claim-text>
<claim-text>creating a second plurality of mappings, wherein each of said second plurality of mappings identifies a corresponding one of said second set of procedure definitions for each of said set of operations;</claim-text>
<claim-text>storing said first plurality of mappings and said second plurality of mappings in a memory; and</claim-text>
<claim-text>identifying said set of differences based on said first plurality of mappings and said second plurality of mappings stored in said memory.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A non-transitory machine readable medium storing one or more sequences of instructions which when executed by one or more processors of a server system causes said server system to process requests invoking web services, said one or more sequences of instructions comprising:
<claim-text>a first set of instructions, when executed in said server system constituting a service application said service application is designed to operate with a first service framework in providing a web service according to a contract, wherein said first service framework is designed to operate according to a first interface for said web service, wherein said service application is implemented according to said first interface, said contract specifying a set of operations for said web service,</claim-text>
<claim-text>wherein said first interface comprises a first set of procedure definitions, wherein each of said first set of procedure definitions needs to be implemented for interfacing with said first service framework for a corresponding one of said set of operations,</claim-text>
<claim-text>wherein said service application implements said first set of procedure definitions;</claim-text>
<claim-text>a second set of instructions constituting a second service framework, wherein said second service framework is designed to operate with service applications according to a second interface for said web service, said second interface being different from said first interface,</claim-text>
<claim-text>wherein said second interface comprises a second set of procedure definitions, wherein each of said second set of procedure definitions needs to be implemented for interfacing with said second service framework for a corresponding one of said set of operations; and</claim-text>
<claim-text>a third set of instructions constituting a wrapper module generated based on a set of differences identified between said first interface and said second interface, wherein said set of differences comprises differences between a corresponding one of said first set of procedure definitions and a corresponding one of said second set of procedure definitions for each of said set of operations,</claim-text>
<claim-text>wherein said second service framework receives a plurality of requests, each request specifying an operation of said set of operations for said web service according to said contract, each request being received from one of a client systems of a plurality of client systems,</claim-text>
<claim-text>in response to receiving of each of said plurality of requests, said service framework being designed to perform invocations in accordance with said second set of procedure definitions, said wrapper module being designed to convert said invocations in accordance with said second set of procedure definitions to invocations in accordance with said first set of procedure definitions, whereby said service application operates with said second service framework to provide said web service according to said contract in said application server.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The machine readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein a first difference for a first operation is a difference in the name of a corresponding first procedure definition and a corresponding second procedure definition,
<claim-text>wherein said generating generates a corresponding second implementation for said second procedure definition designed to invoke a first implementation of said first procedure definition contained in said service application,</claim-text>
<claim-text>wherein said first difference is contained in said set of differences, said first operation is contained in said set of operations, said first procedure definition is contained in said first set of procedure definitions, and said second procedure definition is contained in said second set of procedure definitions.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The machine readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein a second difference for said first operation is a difference in the data types, wherein said first procedure definition contains a first set of data types and said second procedure definition contains a second set of data types,
<claim-text>wherein said generating generates said second implementation further designed to convert between said first set of data types and said second set of data types, thereby facilitating said second implementation to invoke said first implementation. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

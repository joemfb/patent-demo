<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627133-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627133</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12972671</doc-number>
<date>20101220</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>387</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>24</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713500</main-classification>
<further-classification>713  1</further-classification>
<further-classification>713  2</further-classification>
<further-classification>713400</further-classification>
</classification-national>
<invention-title id="d2e53">Virtual machine boot speed-up by clock acceleration</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>8327357</doc-number>
<kind>B2</kind>
<name>Amsden</name>
<date>20121200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2007/0033589</doc-number>
<kind>A1</kind>
<name>Nicholas et al.</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0005551</doc-number>
<kind>A1</kind>
<name>Swanson et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2011/0010714</doc-number>
<kind>A1</kind>
<name>Powell et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>718  1</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713  1</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  24</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713500</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>4</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120159138</doc-number>
<kind>A1</kind>
<date>20120621</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tsirkin</last-name>
<first-name>Michael S.</first-name>
<address>
<city>Yokneam Yillit</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Natapov</last-name>
<first-name>Gleb</first-name>
<address>
<city>Raanana</city>
<country>IL</country>
</address>
</addressbook>
<residence>
<country>IL</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Tsirkin</last-name>
<first-name>Michael S.</first-name>
<address>
<city>Yokneam Yillit</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Natapov</last-name>
<first-name>Gleb</first-name>
<address>
<city>Raanana</city>
<country>IL</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lowenstein Sandler LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Red Hat Israel, Ltd.</orgname>
<role>03</role>
<address>
<city>Raanana</city>
<country>IL</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Huynh</last-name>
<first-name>Kim</first-name>
<department>2116</department>
</primary-examiner>
<assistant-examiner>
<last-name>Choudhury</last-name>
<first-name>Zahid</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A mechanism for virtual machine (VM) boot speed-up by clock acceleration is disclosed. A method of the invention includes detecting that a VM managed by a hypervisor of a host machine is starting a boot up process, modifying a rate of a clock of the VM to speed up the boot up process, determining that the boot up process of the VM is complete, and returning the rate of the VM clock to a normal operational rate that is slower than the rate of the VM clock during the boot up process.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="158.75mm" wi="158.83mm" file="US08627133-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="161.12mm" wi="158.75mm" orientation="landscape" file="US08627133-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="182.96mm" wi="158.75mm" file="US08627133-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="202.95mm" wi="175.60mm" file="US08627133-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="263.91mm" wi="191.77mm" file="US08627133-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The embodiments of the invention relate generally to virtualization systems and, more specifically, relate to virtual machine boot speed-up by clock acceleration.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">In computer science, a virtual machine (VM) is a portion of software that, when executed on appropriate hardware, creates an environment allowing the virtualization of an actual physical computer system. Each VM may function as a self-contained platform, running its own operating system (OS) and software applications (processes). Typically, a hypervisor manages allocation and virtualization of computer resources and performs context switching, as may be necessary, to cycle between various VMs.</p>
<p id="p-0004" num="0003">A host machine (e.g., computer or server) is typically enabled to simultaneously run multiple VMs, where each VM may be used by a local or remote client. The host machine allocates a certain amount of the host's resources to each of the VMs. Each VM is then able to use the allocated resources to execute applications, including operating systems known as guest operating systems. The hypervisor virtualizes the underlying hardware of the host machine or emulates hardware devices, making the use of the VM transparent to the guest operating system or the remote client that uses the VM.</p>
<p id="p-0005" num="0004">As a result, VMs think that they are running on real hardware, when, in fact, this hardware is being emulated by the hypervisor. During boot up of the operating system (OS) of a VM, the VM will often use a timer-based strategy to activate hardware devices of the VM. For example, when looking for devices on the PCI bus, a request is sent to a potential device and then the VM waits for up to 0.5 second for the device to respond. A PCI bus may have up to 32 devices, so this could potentially cause a delay of 15 seconds for the VM. This is just wasted time in a virtualized scenario because hardware responses are always immediate from emulated hardware devices on the VM. In addition, any physically-installed hardware devices will be discovered before-hand by the hypervisor, so the VM will be aware of their existence upon boot up. There are many examples of hardware-related delays like this in working with emulated hardware of a VM. Prior solutions to this time-wasting scenario include having the VM detect that devices it is talking to are fast and then shortening the timeouts applied by the VM.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0006" num="0005">The invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention. The drawings, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary network architecture in which embodiments of the present invention may operate;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method performed by a hypervisor for virtual machine (VM) boot speed-up by clock acceleration according to an embodiment of the invention;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating a method performed by a VM for VM boot speed-up by clock acceleration according to an embodiment of the invention; and</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a block diagram of one embodiment of a computer system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0011" num="0010">Embodiments of the invention provide for virtual machine (VM) boot speed-up by clock acceleration. A method of embodiments of the invention includes detecting that a VM managed by a hypervisor of a host machine is starting a boot up process, modifying a rate of a clock of the VM to speed up the boot up process, determining that the boot up process of the VM is complete, and returning the rate of the VM clock to a normal operational rate that is slower than the rate of the VM clock during the boot up process.</p>
<p id="p-0012" num="0011">In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.</p>
<p id="p-0013" num="0012">Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p>
<p id="p-0014" num="0013">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;sending&#x201d;, &#x201c;receiving&#x201d;, &#x201c;attaching&#x201d;, &#x201c;forwarding&#x201d;, &#x201c;caching&#x201d;, &#x201c;detecting&#x201d;, &#x201c;modifying&#x201d;, &#x201c;determining&#x201d;, &#x201c;returning&#x201d;, or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p>
<p id="p-0015" num="0014">The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium, such as, but not limited to, any type of disk including optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p>
<p id="p-0016" num="0015">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.</p>
<p id="p-0017" num="0016">The present invention may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present invention. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices, etc.), a machine (e.g., computer) readable transmission medium (non-propagating electrical, optical, or acoustical signals), etc.</p>
<p id="p-0018" num="0017">Embodiments of the invention provide a mechanism for VM boot speed-up by clock acceleration. During boot up of a virtual machine, much time is wasted in time outs for hardware discovery of emulated hardware. The solution proposed here involves no VM involvement, and instead delivers timer interrupts to the VM at a frequency higher than normal in order to make the VM boot faster. This accommodates the delays experienced for the emulated hardware discovery that is not necessary. In addition, the solution provides ways to return the VM clock back to &#x201c;normal&#x201d; after the VM boot up process has completed.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary network architecture <b>100</b> in which embodiments of the present invention may operate. The network architecture <b>100</b> includes a host machine <b>110</b> coupled to one or more clients <b>101</b> over a network <b>105</b>. The network <b>105</b> may be a private network (e.g., a local area network (LAN), a wide area network (WAN), intranet, etc.) or a public network (e.g., the Internet). In one embodiment, host machine <b>110</b> may also be known as a host computing device. Typically, host machine <b>110</b> includes at least a processor and a memory. In some cases, host machine <b>110</b> may be a server computing device. In some embodiments, although not illustrated, clients <b>101</b> may be hosted directly by host machine <b>110</b> as a local client on host machine <b>110</b>. Furthermore, there may be multiple host machines connected to network <b>105</b> and serving clients <b>101</b>.</p>
<p id="p-0020" num="0019">The clients <b>101</b> may include computing devices that have a wide range of processing capabilities. Some of the clients <b>101</b> may be thin clients, which have limited processing and memory capacities. For example, a thin client may a laptop computer, cellular phone, personal digital assistant (PDA), a re-purposed desktop computer, etc. Some of the clients <b>101</b> may be thick (fat) clients, which have powerful CPUs and large memory. For example, a thick client may be a dual-core or multi-core computer, workstation, graphics workstation, etc. The client <b>101</b> may run client applications such as a Web browser and a graphic user interface (GUI). The client <b>101</b> may also run other client applications, which receive multimedia data streams or other data from one or more host computers <b>110</b>, <b>120</b> and re-direct the received data to a local display or other user interface.</p>
<p id="p-0021" num="0020">As shown, host machine <b>110</b> may run one or more VMs <b>130</b>. Each VM <b>130</b> runs a guest operating system (OS) that may be different from one VM to another. The guest OS may include, but is not limited to, Microsoft&#x2122; Windows&#x2122;, Linux&#x2122;, Solaris&#x2122;, Macintosh&#x2122; OS, and so on. Furthermore, host machine <b>110</b> may include a hypervisor <b>120</b> that emulates the underlying hardware platform of host machine <b>110</b> for the VMs <b>130</b> that it hosts. The hypervisor <b>120</b> may also be known as a virtual machine monitor (VMM) or a kernel-based hypervisor. In some embodiments, the hypervisor <b>120</b> is part of a host operating system.</p>
<p id="p-0022" num="0021">In one embodiment, each VM <b>130</b> can be accessed by the one or more of the clients <b>101</b> over the network <b>105</b>. In one scenario, each VM <b>130</b> provides a virtual desktop for the client <b>101</b>. From the user's point of view, the virtual desktop functions as a physical desktop (e.g., a personal computer) and is indistinguishable from a physical desktop.</p>
<p id="p-0023" num="0022">A result of the above-described virtualization infrastructure is that the VMs <b>130</b> think that they are running on real hardware, when, in fact, this hardware is being emulated by the hypervisor <b>120</b>. Conventionally, during boot up of the operating system (OS) of a VM <b>130</b>, the VM <b>130</b> will often use a timer-based strategy to activate hardware devices of the VM. This can lead to wasted time in a virtualized scenario because hardware responses are always immediate from emulated hardware devices on the VM. In addition, any physically-installed hardware devices will be discovered before-hand by the hypervisor, so the VM will be aware of their existence upon boot up. As a result, waiting for responses from hardware during boot up is futile because if there is not an immediate response, then the hardware is not there.</p>
<p id="p-0024" num="0023">Embodiments of the invention provide a solution that utilizes the hypervisor <b>120</b> to speed up the VM <b>130</b> boot up process. In embodiments of the invention, the hypervisor <b>130</b> detects VM boot and delivers timer interrupts at a frequency higher than normal. The result is to make VM boot faster.</p>
<p id="p-0025" num="0024">Specifically, the hypervisor <b>120</b> includes a clock management agent <b>125</b> that can detect when any VM <b>130</b> of the host machine <b>110</b> is booting up. Upon detection of boot up of a VM <b>130</b>, the clock management agent <b>125</b> modifies the rate of the VM clock <b>132</b>. In one embodiment, the clock management agent <b>125</b> modifies the rate of VM clock <b>132</b> by delivering periodic interrupts to the VM <b>130</b>. The more interrupts per second that are delivered to the VM <b>130</b>, the more time that the VM <b>130</b> thinks has passed during an actual time interval.</p>
<p id="p-0026" num="0025">In another embodiment, the clock management agent <b>125</b> returns modified clock value in response to guest querying the current time from VM clock <b>132</b>. In this scenario, as part of a typical operation of the VM <b>130</b>, the VM <b>130</b> queries the host machine <b>110</b> on how much time has passed by performing a special instruction to get timer information from the host <b>110</b>, or doing I/O from an emulated clock device and then the hypervisor responds to this timer reading with modified clock information for the VM <b>130</b>.</p>
<p id="p-0027" num="0026">After the boot process is over, the VM clock <b>132</b> can be slowed down again and/or synchronized with the host machine <b>110</b> clock <b>140</b>. This may be to address strange behavior of the VM for timeouts (quick timeouts) because the VM clock <b>132</b> is running faster, or to synchronize the clock with the host machine <b>110</b> for smoother interactions. In one embodiment, to detect that the VM clock <b>132</b> should be adjusted after boot up, one or more heuristics may be used by the clock management agent <b>125</b> to detect some activity that indicates that boot up has completed, such as activity on the network <b>105</b> or that a password has been entered.</p>
<p id="p-0028" num="0027">In some embodiments, although it would mean having to update the VM <b>130</b> with additional programming, a clock management component <b>134</b> on the VM <b>130</b> may also be utilized to implement these discovery heuristics and communicate with the hypervisor <b>120</b> and clock management agent <b>125</b> regarding these heuristics.</p>
<p id="p-0029" num="0028">Once it is detected that the VM clock <b>132</b> should be adjusted, the VM clock <b>132</b> may be returned to its normal rate. In one embodiment, to return the VM clock <b>132</b> to its normal rate, the VM clock <b>132</b> may be run at a slower than normal rate until it is synchronized with the host clock <b>140</b>. Once synchronized, the VM clock <b>132</b> can then be run at a normal rate.</p>
<p id="p-0030" num="0029">In another embodiment, the VM clock <b>132</b> may be moved back by setting the estimated boot time prior to the boot up process occurring. Then, after the VM clock speed-up strategies described above have been implemented during boot up, the VM clock <b>132</b> should be synchronized with the host machine clock <b>140</b>. In this situation, the amount of time that the VM clock is run at the faster rate should be limited so that once synchronized after boot up, the VM clock <b>132</b> will not then speed ahead of the host clock <b>140</b> again.</p>
<p id="p-0031" num="0030">In yet another embodiment, an end user of the VM <b>130</b> may be given control of the VM clock <b>132</b> in order to adjust its rate. In some case, the VM clock <b>132</b> may be controlled via the clock management component <b>134</b> of VM <b>130</b>.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram illustrating a method <b>200</b> performed by a hypervisor for VM boot speed-up by clock acceleration according to an embodiment of the invention. Method <b>200</b> may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (such as instructions run on a processing device), firmware, or a combination thereof. In one embodiment, method <b>200</b> is performed by hypervisor <b>120</b>, and more specifically clock management agent <b>125</b>, of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0033" num="0032">Method <b>200</b> begins at block <b>210</b> where it is detected that a VM managed by the hypervisor is booting up. Then, at block <b>220</b> a rate of the VM clock is modified in order to speed up the boot up process of the VM. In one embodiment, the rate of VM clock is modified by delivering periodic interrupts to the VM. The more interrupts per second that are delivered to the VM, the more time that the VM thinks has passed during an actual time interval, resulting in a speed up of the VM clock. In another embodiment, the rate of the VM clock is modified by utilizing a timer instruction. In this scenario, as part of a typical operation of the VM, the VM queries the host machine on how much time has passed by performing a special instruction to get timer information from the host, or doing I/O from an emulated clock device and then the hypervisor responds to this timer reading with modified clock information for the VM.</p>
<p id="p-0034" num="0033">Subsequently, at block <b>230</b>, it is then determined that the boot up process of the VM has ended. In some embodiments, this determination is made by detecting certain activities being performed by the VM, such as communication over an external network or entering of a password, that indicate the boot up process has completed. In other embodiments, a clock management agent on the VM informs the hypervisor that the boot up process has ended.</p>
<p id="p-0035" num="0034">Lastly, at block <b>240</b>, the rate of the VM is returned to its pre-boot up rate in response to the determination that the boot up process has ended. In some embodiments, the VM clock may be run at a slower than normal rate until it is synchronized with a host machine clock. Once synchronized, the VM clock can then be run at a normal rate, for example, the same rate that the host machine clock is run at or the predetermined default rate of the clock. In another embodiment, the VM clock may be set back prior to the boot up process occurring by an estimated amount of time the boot up process will take. In yet another embodiment, an end user of the VM may be given control of the VM clock in order to adjust its rate.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram illustrating a method <b>300</b> performed by a VM for VM boot speed-up by clock acceleration according to an embodiment of the invention. Method <b>300</b> may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (such as instructions run on a processing device), firmware, or a combination thereof. In one embodiment, method <b>300</b> is performed by VM <b>130</b>, and more specifically clock management component <b>134</b>, of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0037" num="0036">Method <b>300</b> begins at block <b>310</b> where a boot up process of a VM is run at an increase clock rate. The increased clock rate is implemented and controlled by a hypervisor managing the VM. For instance, the hypervisor may utilize periodic interrupts to the VM or timer instructions to speed up the clock rate of the VM. Then, at block <b>320</b>, the VM detects activity that indicates that the VM process has ended. In one embodiment, software on the VM may enable this detection. In other embodiments, heuristics applied by the VM determine that the boot up process has ended.</p>
<p id="p-0038" num="0037">At block <b>330</b>, the VM communicates the detection of the end of the boot up process to the hypervisor. Lastly, at block <b>340</b>, the rate of the VM clock is modified to a &#x201c;normal&#x201d; rate, such as the rate of the clock prior to the boot up process. In some embodiments, the VM itself may modify its clock rate to put it back to a &#x201c;normal&#x201d; rate after the boot up process has ended.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a diagrammatic representation of a machine in the exemplary form of a computer system <b>400</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, or the Internet. The machine may operate in the capacity of a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0040" num="0039">The exemplary computer system <b>400</b> includes a processing device <b>402</b>, a main memory <b>404</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) (such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory <b>406</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device <b>418</b>, which communicate with each other via a bus <b>430</b>.</p>
<p id="p-0041" num="0040">Processing device <b>402</b> represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computer (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>402</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>402</b> is configured to execute the processing logic <b>426</b> for performing the operations and steps discussed herein.</p>
<p id="p-0042" num="0041">The computer system <b>400</b> may further include a network interface device <b>408</b>. The computer system <b>400</b> also may include a video display unit <b>410</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device <b>412</b> (e.g., a keyboard), a cursor control device <b>414</b> (e.g., a mouse), and a signal generation device <b>416</b> (e.g., a speaker).</p>
<p id="p-0043" num="0042">The data storage device <b>418</b> may include a machine-accessible storage medium <b>428</b> on which is stored one or more set of instructions (e.g., software <b>422</b>) embodying any one or more of the methodologies of functions described herein. For example, software <b>422</b> may store instructions to perform VM boot speed-up by clock acceleration by hypervisor <b>120</b> described with respect to <figref idref="DRAWINGS">FIG. 1</figref>. The software <b>422</b> may also reside, completely or at least partially, within the main memory <b>404</b> and/or within the processing device <b>402</b> during execution thereof by the computer system <b>400</b>; the main memory <b>404</b> and the processing device <b>402</b> also constituting machine-accessible storage media. The software <b>422</b> may further be transmitted or received over a network <b>420</b> via the network interface device <b>408</b>.</p>
<p id="p-0044" num="0043">The machine-readable storage medium <b>428</b> may also be used to store instructions to perform methods <b>200</b> and <b>300</b> for VM boot speed-up by clock acceleration described with respect to <figref idref="DRAWINGS">FIGS. 2 and 3</figref>, and/or a software library containing methods that call the above applications. While the machine-accessible storage medium <b>428</b> is shown in an exemplary embodiment to be a single medium, the term &#x201c;machine-accessible storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-accessible storage medium&#x201d; shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term &#x201c;machine-accessible storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.</p>
<p id="p-0045" num="0044">Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims, which in themselves recite only those features regarded as the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>detecting, by a hypervisor executed by a processing device of a host machine, that a virtual machine (VM) managed by the hypervisor is starting a boot up process;</claim-text>
<claim-text>modifying, by the hypervisor, a rate of a clock of the VM to speed up the boot up process;</claim-text>
<claim-text>determining, by the hypervisor, that the boot up process of the VM is complete; and</claim-text>
<claim-text>returning, by the hypervisor, the rate of the VM clock to a normal operational rate that is slower than the rate of the VM clock during the boot up process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein modifying the rate of the VM clock comprises issuing a series of periodic interrupts to the VM.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein modifying the rate of the VM clock comprises responding with a clock value that is more advanced that the normal clock value by the VM at least one of executing a time instruction or performing input/output (I/O) from a clock device.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein detecting that the boot up process of the VM is complete comprises at least one of detecting activity of the VM on an external network or detecting a password entry by the VM.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein detecting that the boot up process of the VM is complete comprises allowing a pre-determined time interval to lapse after detecting the start of the boot up process.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises:
<claim-text>running the VM clock at a slower than normal rate until the VM clock is synchronized with a clock of the host machine; and</claim-text>
<claim-text>returning the VM clock to the normal rate when the VM clock is synchronized with the host machine clock.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises moving the VM clock back by setting an estimated boot up time prior to the boot up process occurring.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein software on the VM informs the hypervisor that the boot up process of the VM is complete and returns the rate of the VM clock to the normal operational rate.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A system, comprising:
<claim-text>a processing device;</claim-text>
<claim-text>a memory communicably coupled to the processing device; and</claim-text>
<claim-text>a hypervisor to execute one or more virtual machines (VMs) from the memory that share use of the processing device, the hypervisor to:
<claim-text>detect that a VM of the one or more VMs is starting a boot up process;</claim-text>
<claim-text>modify rate of a clock of the VM to speed up the boot up process;</claim-text>
<claim-text>determine that the boot up process of the VM is complete; and</claim-text>
<claim-text>return the rate of the VM clock to a normal operational rate that is slower than the rate of the VM clock during the boot up process.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein modifying the rate of the VM clock comprises issuing a series of periodic interrupts to the VM.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein modifying the rate of the VM clock comprises responding with a clock value that is more advanced that the normal clock value by the VM at least one of executing a time instruction or performing input/output (I/O) from a clock device.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein detecting that the boot up process of the VM is complete comprises at least one of detecting activity of the VM on an external network, detecting a password entry by the VM, or allowing a pre-determined time interval to lapse after detecting the start of the boot up process.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises:
<claim-text>running the VM clock at a slower than normal rate until the VM clock is synchronized with a clock of the host machine; and</claim-text>
<claim-text>returning the VM clock to the normal rate when the VM clock is synchronized with the host machine clock.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises moving the VM clock back by setting an estimated boot up time prior to the boot up process occurring.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A non-transitory machine-readable storage medium including data that, when accessed by a processing device, cause the processing device to perform operations comprising:
<claim-text>detecting, by a hypervisor executed by the processing device of a host machine, that a virtual machine (VM) managed by the hypervisor is starting a boot up process;</claim-text>
<claim-text>modifying, by the hypervisor, a rate of a clock of the VM to speed up the boot up process;</claim-text>
<claim-text>determining, by the hypervisor, that the boot up process of the VM is complete; and</claim-text>
<claim-text>returning, by the hypervisor, the rate of the VM clock to a normal operational rate that is slower than the rate of the VM clock during the boot up process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein modifying the rate of the VM clock comprises issuing a series of periodic interrupts to the VM.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein modifying the rate of the VM clock comprises responding with a clock value that is more advanced that the normal clock value by the VM at least one of executing a time instruction or performing input/output (I/O) from a clock device.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein detecting that the boot up process of the VM is complete comprises at least one of detecting activity of the VM on an external network, detecting a password entry by the VM, or allowing a pre-determined time interval to lapse after detecting the start of the boot up process.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises:
<claim-text>running the VM clock at a slower than normal rate until the VM clock is synchronized with a clock of the host machine; and</claim-text>
<claim-text>returning the VM clock to the normal rate when the VM clock is synchronized with the host machine clock.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The non-transitory machine-readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein returning the rate of the VM clock to a normal operation rate comprises moving the VM clock back by setting an estimated boot up time prior to the boot up process occurring.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627119-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627119</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12807389</doc-number>
<date>20100903</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="regional">
<country>EP</country>
<doc-number>10368032</doc-number>
<date>20100823</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>627</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>1</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713300</main-classification>
</classification-national>
<invention-title id="d2e71">Script engine for control of power management controllers</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4881219</doc-number>
<kind>A</kind>
<name>Jacquel</name>
<date>19891100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>700 90</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7227847</doc-number>
<kind>B2</kind>
<name>Gluck</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7643800</doc-number>
<kind>B2</kind>
<name>Rofougaran</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>8116206</doc-number>
<kind>B1</kind>
<name>Dropps et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0124161</doc-number>
<kind>A1</kind>
<name>Moyer et al.</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712234</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0240825</doc-number>
<kind>A1</kind>
<name>El-Batal</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 42</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2007/0030281</doc-number>
<kind>A1</kind>
<name>Chen</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0064454</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>363 49</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0164715</doc-number>
<kind>A1</kind>
<name>Zeng et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>323268</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2007/0229518</doc-number>
<kind>A1</kind>
<name>Kii et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345520</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0046707</doc-number>
<kind>A1</kind>
<name>Hirai et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2008/0126655</doc-number>
<kind>A1</kind>
<name>Baier et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710301</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2008/0144086</doc-number>
<kind>A1</kind>
<name>Shibao</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2009/0132835</doc-number>
<kind>A1</kind>
<name>Ehmann</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2010/0077087</doc-number>
<kind>A1</kind>
<name>Roy et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709228</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2010/0100711</doc-number>
<kind>A1</kind>
<name>Kaplan</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712208</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2010/0145643</doc-number>
<kind>A1</kind>
<name>Katpelly et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>EP</country>
<doc-number>1 069 494</doc-number>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>European Search Report 10368032.8&#x2014;1245, Mail date&#x2014;Feb. 2, 2011, Dialog Semiconductor, GmbH.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>54</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713300</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>2</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120047382</doc-number>
<kind>A1</kind>
<date>20120223</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Barnes</last-name>
<first-name>Mark</first-name>
<address>
<city>Stanton St. Quintin</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hobson</last-name>
<first-name>Chris</first-name>
<address>
<city>Swindon</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Barnes</last-name>
<first-name>Mark</first-name>
<address>
<city>Stanton St. Quintin</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Hobson</last-name>
<first-name>Chris</first-name>
<address>
<city>Swindon</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Saile Ackerman LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Ackerman</last-name>
<first-name>Stephen B.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Dialog Semiconductor GmbH.</orgname>
<role>03</role>
<address>
<city>Kirchheim/Teck-Nabern</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rehman</last-name>
<first-name>Mohammed</first-name>
<department>2116</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A power management IC (PMIC) and methods thereof have been achieved wherein the PMIC invented supports multiple applications while having a high degree of flexibility and allowing a small built and a low power consumption. An embedded script engine on an internal communication bus of the PMIC replaces hard-wired sequencers and control interfaces or using processors as utilized in prior art. The script engine reads instructions from a non-volatile memory as e.g. a one-time programmable (OTP) memory. Furthermore a RAM can be provided to store executable instructions loaded from a host. Moreover a FIFO process is provided if instructions or TAGs are received while a previous script is being exercised. Any type of power supplies, output GPIO or other function could be controlled also by the Script Engine. The invention is also applicable to any other kind of power management circuits.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="178.99mm" wi="159.26mm" file="US08627119-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="198.80mm" wi="158.16mm" file="US08627119-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="113.45mm" wi="164.68mm" file="US08627119-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">(1) Field of the Invention</p>
<p id="p-0003" num="0002">This invention relates generally to the field of Power Management Controllers and relates more specifically to script engines to replace hard-wired sequencers and control interfaces for power management integrated circuits (ICs) or other power management circuits.</p>
<p id="p-0004" num="0003">(2) Description of the Prior Art</p>
<p id="p-0005" num="0004">A Power Management IC (PMIC) is often used to control a number of supplies within an end device. The PMIC must switch these supplies on and off in a set order for the application to work correctly. A PMIC to support e.g. two known applications requires control logic to support both applications and often the requirements of both applications conflict. The only current solution is to add yet more configuration registers to select between features.</p>
<p id="p-0006" num="0005">In regard of an open market product (application specific standard products&#x2014;ASSP) as e.g. an PMIC, details of the signals or their timings are not known, which means very complex programmable interfaces are required to ensure that the PMIC is sufficiently flexible.</p>
<p id="p-0007" num="0006">This causes the control logic extremely complicated to design. Often these added features result in undesired behavior in some modes, which requires exhaustive user-case testing, and there is no guarantee that all the end users requirements are met.</p>
<p id="p-0008" num="0007">Different applications, and even powering up and down in some cases, can have conflicting requirements. With a traditional hard-wired approach these conflicts are difficult to identify before mounting on a board, and difficult to fix.</p>
<p id="p-0009" num="0008">In order to support multiple applications with a single circuit a flexible approach consuming minimal power and being capable to be easily adapted should be achieved.</p>
<p id="p-0010" num="0009">Using a microprocessor for this purpose would provide a flexible solution. The drawbacks of using a microprocessor are relative high power consumption, the amount of chip space required, and the requirement of a Software Development Kit for the processor.</p>
<p id="p-0011" num="0010">Therefore other solutions are desirable combining high flexibility, low power consumption, and minimal chip size required.</p>
<p id="p-0012" num="0011">Solutions dealing with power management controllers supporting multiple applications are described in following patents:</p>
<p id="p-0013" num="0012">U.S. patent (U.S. Pat. No. 7,227,847 to Gluck) discloses an application based power management system comprising a power management application executed on a first device, wherein the power management application monitors communications interfaces for a plurality of applications in communication with one or more devices in a wireless environment, such that the power management application determines bandwidth and latency characteristics for each of the plurality of applications, and determines respective power management settings for each of the corresponding plurality of applications, wherein each respective power management setting optimizes data communicated by each of the applications in accordance with the corresponding bandwidth and latency characteristics.</p>
<p id="p-0014" num="0013">U.S. patent application (U.S. Pat. No. 7,643,800 to Rofougaran) proposes a voice data and RF integrated circuit (IC) including a memory module that stores a least one application as a plurality of operational instructions, the at least one application having a plurality of power modes that each correspond to one of a plurality of use characteristics. A processing module executes the plurality of operational instructions, determines a selected one of the plurality of power modes based on current use characteristics of the at least one application, and generates a power mode signal based on the selected one of the plurality of power modes. An on-chip power management circuit receives the power mode signal and generates a plurality of power supply signals based on the power mode signal.</p>
<p id="p-0015" num="0014">U.S. Patent Publication (US 2010/0145643 to Katpelly et al.) discloses a user-controlled application-based power management function provided for a battery-operated device. In general, for each of a number of applications of the battery-operated device, a power management function enables a user of the battery-operated device to provide a usage parameter for the application defining a desired amount of usage of the application for each of one or more tasks. For each task, the power management function determines an estimated amount of battery life that is sufficient to provide the desired amount of usage of the application for the task and determines whether the estimated amount of battery life is available. If the estimated amount of battery life is available, the power management function allocates an amount of battery life corresponding to the estimated amount of battery life to the application for the task.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0016" num="0015">A principal object of the present invention is to generate a simple reusable architecture for a power management IC (PMIC) supporting multiple applications.</p>
<p id="p-0017" num="0016">A further object of the present invention is to use a Script Engine removing the need to hard-wire interfaces and control sequences for each application into a PMIC.</p>
<p id="p-0018" num="0017">A further object of the present invention is to achieve a flexible solution for a PMIC.</p>
<p id="p-0019" num="0018">A further object of the present invention is to simplify design, verification, and test of a PMIC.</p>
<p id="p-0020" num="0019">A further object of the present invention is to enable field application engineers to develop customer specific products in a very short time.</p>
<p id="p-0021" num="0020">A further object of the present invention is enable fast field upgrades of &#x201c;hard-wired&#x201d; functions.</p>
<p id="p-0022" num="0021">Moreover an object of the present invention is to enable customers to develop &#x201c;software functions&#x201d; in hardware in order to simplify software.</p>
<p id="p-0023" num="0022">Another object of the invention is to utilize the present invention for any kind of power management circuits.</p>
<p id="p-0024" num="0023">In accordance with the objects of this invention a method to achieve a PMIC supporting multiple applications having a high degree of flexibility and allowing a small built and low power consumption has been disclosed. The method invented comprises the steps of (1) providing a PMIC supporting multiple applications, comprising an internal communication bus that is connected to a number of power supplies, to a number of general purpose input/output (GPI/O) devices, and to a non volatile memory, and (2) deploying a script engine on an internal communication bus of the PMIC, wherein the script engine controls said power supplies.</p>
<p id="p-0025" num="0024">In accordance with the objects of this invention a PMIC supporting multiple applications having a high degree of flexibility and allowing a small built and a low power consumption has been achieved. The PMIC invented comprises, firstly: an internal communication bus, connecting an interface to a host system, a bus manager, and a script engine. Furthermore the internal communication bus connects a non-volatile memory, a number of power supplies, and a number of general-purpose input/out (GPIO) devices.</p>
<p id="p-0026" num="0025">In accordance with the objects of this invention a method to achieve a power management circuit supporting multiple applications having a high degree of flexibility and allowing a small built and low power consumption has been disclosed. The method invented comprises the steps of (1) providing a power management circuit supporting multiple applications, comprising an internal communication bus that is connected to a number of power supplies, to a number of general purpose input/output (GPI/O) devices, and to a non volatile memory, and (2) deploying a script engine on an internal communication bus of the PMIC, wherein the script engine controls said power supplies.</p>
<p id="p-0027" num="0026">In accordance with the objects of this invention a power management circuit supporting multiple applications having a high degree of flexibility and allowing a small built and a low power consumption has been achieved. The power management circuit invented comprises, firstly: an internal communication bus, connecting an interface to a host system, a bus manager, and a script engine. Furthermore the internal communication bus connects a non-volatile memory, a number of power supplies, and a number of general-purpose input/out (GPIO) devices.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0028" num="0027">In the accompanying drawings forming a material part of this description, there is shown:</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an embodiment of the PMIC 100 of the present invention.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a flowchart of a method to achieve a PMIC supporting multiple applications</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0031" num="0030">The preferred embodiments of the present invention disclose power management integrated circuits (PMIC) and methods thereof supporting multiple applications wherein a script engine controls the operation of the PMIC. The Script Engine removes the need to hard-wire interfaces and control sequences for each application into a PMIC. This creates a simple reusable architecture.</p>
<p id="p-0032" num="0031">It should be noted that the present invention is applicable not only to PMICs but also to any other power management circuits.</p>
<p id="p-0033" num="0032">The Script Engine can be programmed to have quite different behavior for each application and powering up/down simply by pointing to different scripts. The only other solution this flexible could be to embed a microprocessor. However the Script Engine approach is much smaller, consumes less power (due to required clock speed and number of cycles required per instruction of a microprocessor), and does not require a Software Development Kit for the processor.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a block diagram of an embodiment of the PMIC 100 of the present invention. The Script Engine <b>1</b> is located on the PMICs internal communication bus <b>2</b>. The internal communication bus is controlled by bus manager <b>3</b>. It has access in the preferred embodiment to an embedded One Time Programmable (OTP) memory <b>4</b>, and a small RAM <b>5</b>. It should be noted that alternatively any type of non-volatile memory could be used instead of the OTP memory <b>4</b>. Furthermore any number of General Input/Output (GPIO) ports <b>6</b> can be connected to the bus <b>2</b>. Moreover any number of DC-to-DC converters, such as low drop-out (LDO) converters <b>7</b> or buck converters <b>8</b> can be connected to the bus <b>2</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>. It should be noted any other kind of DC-to-DC converters, such as boost converters, buck/boost converters, etc. could also be connected to the bus <b>2</b>.</p>
<p id="p-0035" num="0034">When powered up, the Script Engine <b>1</b> reads the contents of a first OTP address. The OTP could be e.g. a programmable read-only memory (PROM). The script engine <b>1</b> reads the data at this address and decodes it e.g. as an internal address and data, a delay step, or an instruction. If the data is an internal address, it is sent out on the internal communication bus <b>2</b>. Then the next OTP address is read and the cycle repeats until an End-Of-Script (EOS) code is detected. By always reading the first OTP address, this set of instructions can be used to initially configure the PMIC. If no configuration is required, then this address can be set to EOS.</p>
<p id="p-0036" num="0035">Once active, a Host can write via a serial interface <b>11</b> to an address in the Script Engine <b>1</b>, it is taken as a start address in the OTP, and is processed as described above. So the host can initiate any number of scripts held in OTP to enable sequences of operations.</p>
<p id="p-0037" num="0036">The script manager block <b>10</b> handles fault conditions and contention. It also prioritizes instructions.</p>
<p id="p-0038" num="0037">When an EOS is detected the script engine <b>1</b> shuts down until another script access is made.</p>
<p id="p-0039" num="0038">The PMIC is required to start/shutdown supplies when an input signal is detected. The PMIC can be controlled by Serial Bus or by Input Pins to change state.</p>
<p id="p-0040" num="0039">To facilitate this, each General Input/Output (GPIO) input can be given an active and inactive &#x201c;TAG&#x201d; which is an address for the Script Engine. When the input changes state, the appropriate TAG is sent to the Script Engine <b>1</b>, and contents of the OTP <b>4</b> at the TAG are processed by the Script Engine <b>1</b>. By having two TAGs, the PMIC can behave in one way when the signal goes active and a different way when the signal goes inactive. In this way input pins of the GPIOs <b>6</b> can behave in the same way as Host accesses.</p>
<p id="p-0041" num="0040">For instance when one of the input GPIOs <b>6</b> goes high, the TAG could start a script that enables a Buck converter <b>8</b>, waits e.g. 128 uS, then enables e.g. three LDOs <b>7</b> and toggles a GPIO output to indicate it has finished.</p>
<p id="p-0042" num="0041">When the signal later goes low, the other TAG could start a script that enables e.g. a backup battery, then switches off e.g. the LDOs <b>7</b>, waits e.g. 32 uS, then switches off the Buck converter <b>8</b> and toggles a GPIO twice.</p>
<p id="p-0043" num="0042">This sort of flexibility, which is an important part of the present invention, is simpler to implement and verify than hard wiring interfaces for all known applications.</p>
<p id="p-0044" num="0043">The PMIC 100, shown in <figref idref="DRAWINGS">FIG. 1</figref>, forms a basic structure and is easily to be extended. For instance OTP data can also be identified as instructions such as wait, etc.</p>
<p id="p-0045" num="0044">Clearly the embodiment of the PMIC of the present invention described above would process a script before giving control back to the next TAG of Host instruction. The Script engine <b>1</b> would also have to be able to abandon a script if a serious problem occurred such as over temperature or a catastrophic drop in Voltage. Another consequence of the serial processing is that another instruction or TAG could be received while the previous script is being exercised. This requires a short first-in-first-out (FIFO) memory operation of block <b>9</b> to store TAGs so that they are not lost or missed.</p>
<p id="p-0046" num="0045">So far the Script engine has been assumed to run from an OTP <b>4</b> and this or some form of non-volatile memory is required to start up a system before the Host is active. However an OTP provides a fixed functionality once the PMIC is programmed and mounted in an end Application. By adding a small RAM <b>5</b>, the Host can write to the RAM <b>5</b> and so add to the instructions that can be executed. This could form the basis for field upgrades.</p>
<p id="p-0047" num="0046">Un-programmed OTP memory bits are usually set to 1, and once programmed are fixed as 0 and cannot be reset. This leads to many PMIC devices being thrown away if the programming needs to be changed.</p>
<p id="p-0048" num="0047">It should be noted that any type of power supplies, output GPIO or other function could be controlled also by the Script Engine.</p>
<p id="p-0049" num="0048">To aid script development, the Script Engine <b>1</b> of the present invention can skip un-programmed entries in a script, and instructions marked as skip (by setting all bits in the instruction to 0). So during development the Engineer can leave spaces after any instruction. If the instruction is incorrect he can set all its bits to be skipped and put the new instruction in the next space. This is an important contribution to the flexibility of the PMIC of the present invention.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a flowchart of a method to achieve a PMIC supporting multiple applications having a high degree of flexibility and allowing a small built and low power consumption. A first step <b>20</b> describes the provision of a PMIC supporting multiple applications, comprising an internal communication bus that is connected to a number of power supplies, to a number of general purpose input/output (GPI/O) devices, and to a one time programmable (OTP) memory. Alternatively any kind of non-volatile memory could be deployed as well. Step <b>21</b> illustrates deploying a script engine on an internal communication bus of the PMIC, wherein the script engine controls said power supplies.</p>
<p id="p-0051" num="0050">While the invention has been particularly shown and described with reference to the preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made without departing from the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method to achieve a Power Management Integrated Circuit (PMIC) supporting multiple applications having a high degree of flexibility and allowing a small built and low power consumption comprising the steps of
<claim-text>(1) providing a PMIC supporting multiple applications, comprising an internal communication bus that is connected to a number of power supplies, to a number of general purpose input/output (GPI/O) devices, and to a non-volatile memory configured to be used to start-up the PMIC wherein the content of the non-volatile memory comprises internal addresses, internal data, delay steps, and instructions; and</claim-text>
<claim-text>(2) deploying a script engine located on an internal communication bus of the PMIC, wherein the script engine controls said power supplies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said power supplies comprise any types of DC-to-DC converters.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein, when powered up, the script engine reads a content of a first address of the non-volatile memory and decodes it.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein, if said content is an internal address, following steps are performed:
<claim-text>(3) sending out said address to the internal communication bus; and</claim-text>
<claim-text>(4) reading the content of the next address of the non-volatile memory address, decoding it and, if this content is an internal address go to step (3) until an end-of-script (EOS) signal is detected.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein the script engine shuts down when an EOS is detected until another access is made.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of said GPIOs can be given an active and inactive TAG and when an input changes state an appropriate TAG is sent to the script engine and contents of the non-volatile memory at the TAG address are processed by the script engine.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein non-volatile memory data can also be identified as one or more instructions.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said non-volatile memory is a one time programmable (OTP) memory.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the script engine processes a script before giving control back to a next TAG of Host instruction.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the script engine is able to abandon a script if a serious problem occurs with supplying power.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein a first-in first-out FIFO memory is provided to store TAGs in case an instruction or TAGs are received while a previous script is being exercised.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein in order to aid script development the script engine can skip un-programmed entries in a script hence allowing to leave spaces after any instructions.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein un-programmed bits of the non-volatile memory are set to &#x201c;1&#x201d;.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the script engine can skip instructions marked as skip, which is defined by setting all bits in the instructions to &#x201c;0&#x201d;.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein a host is connected to the PMIC.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein said host is connected via a serial interface.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref> wherein a random access memory (RAM) is provided wherein a host can write instructions to said RAM in order to add instructions which can be executed.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein any type of power supplies, output GPIO or other function could be controlled also by the Script Engine.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A Power Management Integrated Circuit) PMIC supporting multiple applications having a high degree of flexibility and allowing a small built and a low power consumption comprising:
<claim-text>an internal communication bus, connecting:
<claim-text>an interface to a host system;</claim-text>
<claim-text>a bus manager;</claim-text>
<claim-text>a script engine located on the internal communication bus of the PMIC, wherein the script engine controls a number of power supplies;</claim-text>
<claim-text>a non-volatile memory configured to be used to start-up the PMIC wherein the content of the non-volatile memory comprises internal addresses, internal data, delay steps, and instructions;</claim-text>
<claim-text>said number of power supplies; and</claim-text>
<claim-text>a number of general-purpose input/out (GPIO) devices.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein said interface to the host is a serial interface.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein a script FIFO memory is connected to the script engine and to the bus manager, wherein the script FIFO memory stores instructions or TAGS received while a previous script is executed.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein a Script Manager block prioritizes instructions.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein a Script Manager block handles fault conditions and contention.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein said number of power supplies comprises buck converters.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein said number of power supplies comprises low drop-out (LDO) converters.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the internal communication bus is also connected to a random access memory (RAM) in order to store instructions to be added after the PMIC has been already programmed.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The PMIC of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein said non-volatile memory is a one-time-programmable memory.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A method to achieve a power management circuit supporting multiple applications having a high degree of flexibility and allowing a small built and low power consumption comprising the steps of
<claim-text>(1) providing a power management circuit, comprising an internal communication bus that is connected to a number of power supplies, to a number of general purpose input/output (GPI/O) devices, and to a non-volatile memory configured to be used to start-up the power management circuit wherein the content of the non-volatile memory comprises internal addresses, internal data, delay steps, and instructions; and</claim-text>
<claim-text>(2) deploying a script engine located on an internal communication bus of the power management circuit, wherein the script engine controls said power supplies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein said power supplies comprise any types of DC-to-DC converters.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein, when powered up, the script engine reads a content of a first address of the non-volatile memory and decodes it.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. The method of <claim-ref idref="CLM-00030">claim 30</claim-ref> wherein, if said content is an internal address, following steps are performed:
<claim-text>(3) sending out said address to the internal communication bus; and</claim-text>
<claim-text>(4) reading the content of the next address of the non-volatile memory address, decoding it and, if this content is an internal address go to step (3) until an end-of-script (EOS) signal is detected.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref> wherein the script engine shuts down when an EOS is detected until another access is made.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein each of said GPIOs can be given an active and inactive TAG and when an input changes state an appropriate TAG is sent to the script engine and contents of the non-volatile memory at the TAG address are processed by the script engine.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein non-volatile memory data can also be identified as one or more instructions.</claim-text>
</claim>
<claim id="CLM-00035" num="00035">
<claim-text>35. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein said non-volatile memory is a one time programmable (OTP) memory.</claim-text>
</claim>
<claim id="CLM-00036" num="00036">
<claim-text>36. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the script engine processes a script before giving control back to a next TAG of Host instruction.</claim-text>
</claim>
<claim id="CLM-00037" num="00037">
<claim-text>37. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the script engine is able to abandon a script if a serious problem occurs with supplying power.</claim-text>
</claim>
<claim id="CLM-00038" num="00038">
<claim-text>38. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein a first-in first-out FIFO memory is provided to store TAGs in case an instruction or TAGs are received while a previous script is being exercised.</claim-text>
</claim>
<claim id="CLM-00039" num="00039">
<claim-text>39. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein in order to aid script development the script engine can skip un-programmed entries in a script hence allowing to leave spaces after any instructions.</claim-text>
</claim>
<claim id="CLM-00040" num="00040">
<claim-text>40. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein un-programmed bits of the non-volatile memory are set to &#x201c;1&#x201d;.</claim-text>
</claim>
<claim id="CLM-00041" num="00041">
<claim-text>41. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein the script engine can skip instructions marked as skip, which is defined by setting all bits in the instructions to &#x201c;0&#x201d;.</claim-text>
</claim>
<claim id="CLM-00042" num="00042">
<claim-text>42. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein a host is connected to the power management circuit.</claim-text>
</claim>
<claim id="CLM-00043" num="00043">
<claim-text>43. The method of <claim-ref idref="CLM-00042">claim 42</claim-ref> wherein said host is connected via a serial interface.</claim-text>
</claim>
<claim id="CLM-00044" num="00044">
<claim-text>44. The method of <claim-ref idref="CLM-00042">claim 42</claim-ref> wherein a random access memory (RAM) is provided wherein a host can write instructions to said RAM in order to add instructions which can be executed.</claim-text>
</claim>
<claim id="CLM-00045" num="00045">
<claim-text>45. The method of <claim-ref idref="CLM-00028">claim 28</claim-ref> wherein any type of power supplies, output GPIO or other function could be controlled also by the Script Engine.</claim-text>
</claim>
<claim id="CLM-00046" num="00046">
<claim-text>46. A power management circuit supporting multiple applications having a high degree of flexibility and allowing a small built and a low power consumption comprising:
<claim-text>an internal communication bus, connecting:
<claim-text>an interface to a host system;</claim-text>
<claim-text>a bus manager;</claim-text>
<claim-text>a script engine located on the internal communication bus of the PMIC, wherein the script engine controls a number of power supplies;</claim-text>
<claim-text>a non-volatile memory configured to be used to start-up the power management circuit wherein the content of the non-volatile memory comprises internal addresses, internal data, delay steps, and instructions;</claim-text>
<claim-text>said number of power supplies; and</claim-text>
<claim-text>a number of general-purpose input/out (GPIO) devices.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00047" num="00047">
<claim-text>47. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein said interface to the host is a serial interface.</claim-text>
</claim>
<claim id="CLM-00048" num="00048">
<claim-text>48. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein a script FIFO memory is connected to the script engine and to the bus manager, wherein the script FIFO memory stores instructions or TAGS received while a previous script is executed.</claim-text>
</claim>
<claim id="CLM-00049" num="00049">
<claim-text>49. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein a Script Manager block prioritizes instructions.</claim-text>
</claim>
<claim id="CLM-00050" num="00050">
<claim-text>50. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein a Script Manager block handles fault conditions and contention.</claim-text>
</claim>
<claim id="CLM-00051" num="00051">
<claim-text>51. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein said number of power supplies comprises buck converters.</claim-text>
</claim>
<claim id="CLM-00052" num="00052">
<claim-text>52. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein said number of power supplies comprises LDO converters.</claim-text>
</claim>
<claim id="CLM-00053" num="00053">
<claim-text>53. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein the internal communication bus is also connected to a random access memory (RAM) in order to store instructions to be added after the PMIC has been already programmed.</claim-text>
</claim>
<claim id="CLM-00054" num="00054">
<claim-text>54. The power management circuit of <claim-ref idref="CLM-00046">claim 46</claim-ref> wherein said non-volatile memory is a one-time-programmable memory.</claim-text>
</claim>
</claims>
</us-patent-grant>

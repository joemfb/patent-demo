<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626865-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626865</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12795541</doc-number>
<date>20100607</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>69</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>167</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709213</main-classification>
<further-classification>711147</further-classification>
</classification-national>
<invention-title id="d2e53">Shared worker application</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5307086</doc-number>
<kind>A</kind>
<name>Griffin et al.</name>
<date>19940400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5864862</doc-number>
<kind>A</kind>
<name>Kriens et al.</name>
<date>19990100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5923885</doc-number>
<kind>A</kind>
<name>Johnson et al.</name>
<date>19990700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6154756</doc-number>
<kind>A</kind>
<name>Hearn et al.</name>
<date>20001100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6216212</doc-number>
<kind>B1</kind>
<name>Challenger et al.</name>
<date>20010400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6760756</doc-number>
<kind>B1</kind>
<name>Davis et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709215</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6996800</doc-number>
<kind>B2</kind>
<name>Lucassen et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7426713</doc-number>
<kind>B2</kind>
<name>Duggan et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7571197</doc-number>
<kind>B2</kind>
<name>Christensen et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7979791</doc-number>
<kind>B2</kind>
<name>Yang et al.</name>
<date>20110700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>8122381</doc-number>
<kind>B2</kind>
<name>Vignet</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0119760</doc-number>
<kind>A1</kind>
<name>Grossman et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2006/0184537</doc-number>
<kind>A1</kind>
<name>Sauve et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707 10</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2007/0220000</doc-number>
<kind>A1</kind>
<name>Walsh</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2009/0063262</doc-number>
<kind>A1</kind>
<name>Mason</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2009/0132942</doc-number>
<kind>A1</kind>
<name>Santoro et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2009/0172589</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2009/0287559</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2009/0327421</doc-number>
<kind>A1</kind>
<name>Fu et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2009/0328063</doc-number>
<kind>A1</kind>
<name>Corvera et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2010/0077302</doc-number>
<kind>A1</kind>
<name>Bostrom et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2010/0250653</doc-number>
<kind>A1</kind>
<name>Hudgeons et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2010/0274910</doc-number>
<kind>A1</kind>
<name>Ghanaie-Sichanie et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2010/0275156</doc-number>
<kind>A1</kind>
<name>Hoyer et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2011/0082920</doc-number>
<kind>A1</kind>
<name>Bhattacharya et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2011/0082984</doc-number>
<kind>A1</kind>
<name>Yuan</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711147</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2011/0145565</doc-number>
<kind>A1</kind>
<name>Kol et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2011/0161990</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2011/0225509</doc-number>
<kind>A1</kind>
<name>Tsao</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2011/0239138</doc-number>
<kind>A1</kind>
<name>Galushka et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715760</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2011/0282940</doc-number>
<kind>A1</kind>
<name>Zhang et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709204</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2012/0042286</doc-number>
<kind>A1</kind>
<name>Sullivan et al.</name>
<date>20120200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715835</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2012/0060083</doc-number>
<kind>A1</kind>
<name>Yuan et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715234</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>WO</country>
<doc-number>2007100714</doc-number>
<kind>A2</kind>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>U.S. Appl. No. 13/250,179, by Derek Jason Phillips, filed Sep. 30, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>U.S. Appl. No. 12/795,559, by Andrew Grieve, filed Jun. 7, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>U.S. Appl. No. 13/250,129, by Andrew Grieve, filed Sep. 30, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>U.S. Appl. No. 12/855,561, by Derek Phillips, filed Aug. 12, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>U.S. Appl. No. 13/250,149, by Derek Phillips, filed Sep. 30, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Office Action from U.S. Appl. No. 13/250,179, dated Dec. 7, 2011, 14 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Office Action from U.S. Appl. No. 12/795,559, dated Nov. 10, 2011, 13 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>Office Action from U.S. Appl. No. 13/250,129, dated Nov. 23, 2011, 13 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>Office Action from U.S. Appl. No. 13/250,149, dated Feb. 1, 2012, 39 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>Response to Office Action dated Dec. 7, 2011, from U.S. Appl. No. 13/250,179, filed Mar. 7, 2012, 12 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>Response to Office Action dated Nov. 10, 2011, from U.S. Appl. No. 12/795,559, filed Mar. 14, 2012, 10 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>Response to Office Action dated Nov. 23, 2011, from U.S. Appl. No. 13/250,129, filed Feb. 23, 2012, 11 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Office Action from U.S. Appl. No. 13/250,179, dated Apr. 18, 2012, 11 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Response to Office Action dated Apr. 18, 2012, from U.S. Appl. No. 13/250,179, filed Jun. 18, 2012, 11 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Office Action from U.S. Appl. No. 12/855,561, dated Mar. 30, 2012, 76 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Response to Office Action dated Mar. 30, 2012, from U.S. Appl. No. 12/855,561, filed Jun. 27, 2012, 16 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Office Action from U.S. Appl. No. 13/250,149, dated May 25, 2012, 31 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Response to Office Action dated Feb. 1, 2012, from U.S. Appl. No. 13/250,149, filed May 1, 2012, 10 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Mackie, &#x201c;Google Calendar Gets Gmail Tasks Integration,&#x201d; May 13, 2009, GigaOM [online]. Retrieved from the Internet: http://gigaom.com/collaboration/google-calendar-gets-gmail-tasks-integration/, 10 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Rogers, &#x201c;Integrate Google Calendar and Docs into Gmail Natively,&#x201d; Oct. 28, 2008, ZDNet [online]. Retrieved from Internet: http://www.zdnet.com/blog/google/integrate-google-calendar-and-docs-into-gmail-natively/1166, 4 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Web Workers Editors Draft Aug. 25, 2009, Ian Hickson, Google Inc., 2009 W3C, 37 pp., http://dev.w3.org/html5/workers/.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Office Action from U.S. Appl. No. 13/250,179, dated Aug. 3, 2012, 12 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Response to Office Action dated Aug. 3, 2012, from U.S. Appl. No. 13/250,179, filed Nov. 2, 2012, 11 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>Office Action from U.S. Appl. No. 12/855,561, dated Aug. 31, 2012, 61 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>Response to Office Action dated Aug. 31, 2012, from U.S. Appl. No. 12/855,561, filed Oct. 31, 2012, 17 pp.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709213</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>711147</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>11</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Phillips</last-name>
<first-name>Derek</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Grieve</last-name>
<first-name>Andrew</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Bolohan</last-name>
<first-name>Matthew</first-name>
<address>
<city>Kitchener</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kroeger</last-name>
<first-name>Robert</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Phillips</last-name>
<first-name>Derek</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Grieve</last-name>
<first-name>Andrew</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Bolohan</last-name>
<first-name>Matthew</first-name>
<address>
<city>Kitchener</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Kroeger</last-name>
<first-name>Robert</first-name>
<address>
<city>Waterloo</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Google Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Dennison</last-name>
<first-name>Jerry</first-name>
<department>2443</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Techniques are described herein that provide a web application that incorporates one or more shared worker applications. In one example, a shared worker application as described herein may receive a first request for first information for a first web application, acquire the first information in response to the request, and store at least a portion of the first information in a memory of a local communications device. The shared worker may further receive a second request for second information for a second web application. The shared worker may determine whether at least a portion of the first information stored in the memory of the local communications device will satisfy the second request for the second information. The shared worker may provide, from the local memory to the second web application, at least the portion of the first information in response to the second request.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="231.99mm" wi="189.40mm" file="US08626865-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="252.39mm" wi="201.68mm" file="US08626865-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="256.96mm" wi="201.68mm" orientation="landscape" file="US08626865-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="245.45mm" wi="192.11mm" orientation="landscape" file="US08626865-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="246.46mm" wi="194.06mm" orientation="landscape" file="US08626865-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="254.68mm" wi="192.45mm" file="US08626865-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="256.37mm" wi="198.71mm" orientation="landscape" file="US08626865-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="158.75mm" wi="117.77mm" orientation="landscape" file="US08626865-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="243.16mm" wi="196.00mm" file="US08626865-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="254.00mm" wi="191.43mm" orientation="landscape" file="US08626865-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="241.22mm" wi="197.70mm" orientation="landscape" file="US08626865-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="260.27mm" wi="198.37mm" orientation="landscape" file="US08626865-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">This disclosure relates to network communications. More specifically, this disclosure relates to web applications configured to operate in a web browser on a communications device coupled to a network.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">A web browser is an application (computer program) that operates on a computing device (e.g., a personal computer, laptop, personal digital assistant (PDA), cellphone, smartphone, or the like) to enable information available over a network (e.g., the Internet) to be accessed. A web browser may be configured to access information available over a network by utilizing uniform resource identifiers (URIs), which indicate a location by which information may be accessed. A typical web browser may be configured to present network-accessible and/or other information to a user in one or more browser windows, or browser tabs within the browser. A web browser may enable a user to open a plurality of web-browser windows, or tabs within a web browser window, simultaneously.</p>
<p id="p-0004" num="0003">A web application is a software application that is accessible via a web browser as discussed above. For example, a web application may be a document, such as a hyper text markup language (HTML) document. A document web application may be configured to present information available over a network visually to a user. A document web application may present to a user one or more links (e.g., to a URI) to available information. A user may be provided an ability to select one or more links, which may result in presentation of a new web document, including information accessible via a URI associated with the link. User selection of one or more links of a web document may instead, or in addition, execute one or more non-document web applications to perform a desired function within a browser.</p>
<p id="p-0005" num="0004">Many web browsers also allow non-document web applications to operate within the confines of the browser for various purposes. For example, a web application may run within the confines of a browser to facilitate communications between different document web applications running within the browser. In another example, a web application may be a digital video or music player with a representation of controls embedded within a document web application to enable a user to playback audio or video accessible via the network or local to a user's computing device. Other web applications may provide a user, via a web browser, access to email, chat, voice over Internet Protocol (VOIP) or other communications functions. Many other types of web applications may also operate within a browser. A web application may or may not be visible to a user operating the browser. In some examples, web applications are written in the Javascript language, which is a software language specifically utilized for development of web applications.</p>
<p id="p-0006" num="0005">In a typical browser implementation, web applications, and information accessible via a network, may be associated with one or more domains. In order to provide security for users, many web browsers limit communications between web applications associated with different domains operating within the browser. For example, a first web application associated with the domain www.google.com may be prevented from communicating directly with a second web application associated with the domain www.espn.com. In another example, a first web application associated with the domain www.maps.google.com may be prevented from communicating directly with a second web application associated with the domain www.mail.google.com. In order to facilitate inter-domain communications, some web applications are configured to take additional steps to authenticate a web application associated with a different domain to enable inter-domain communications between the web applications.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">This disclosure contemplates improved techniques for the acquisition of network accessible information via a web browser application incorporating one or more shared worker applications. In one example, a computer-readable storage medium comprising instructions is described herein. The instructions cause the computing device to provide a shared worker application executed by a computing device, wherein the shared worker application is operable to share network-accessible information between a plurality of web applications also executed by the computing device. The instructions cause the shared worker application to receive a first request for first information to be provided to a first web application executed by the computing device. The instructions further cause the shared worker application to acquire from at least one server coupled to the computing device via a network, the first information in response to the first request. The instructions further cause the shared worker application to send the first information to the first web application. The instructions further cause the shared worker application to store at least a portion of the first information in a local volatile memory of the computing device. The instructions further cause the shared worker application to receive a second request for second information to be provided to a second web application executed by the computing device. The instructions further cause the shared worker application to determine that at least the portion of the first information stored in the local memory will satisfy the second request for the second information. The instructions further cause the shared worker application to send, from the volatile local memory to the second web application, at least the portion of the first information in response to the second request.</p>
<p id="p-0008" num="0007">In another example, a method is described herein. The method includes providing a shared worker application executed by a computing device, wherein the shared worker application is operable to share network-accessible information between a plurality of web applications executing in the browser. Providing the shared worker application includes receiving a first request for first information to be provided to a first web application executed by the computing device. Providing the shared worker application further includes acquiring, from at least one server coupled to the computing device via a network, the first information in response to the first request. Providing the shared worker application further includes sending the first information to the first web application. Providing the shared worker application further includes storing at least a portion of the first information in a local volatile memory of the computing device. Providing the shared worker application further includes receiving a second request for second information to be provided to a second web application executed by the computing device. Providing the shared worker application further includes determining that at least the portion of the first information stored in the local memory will satisfy the second request for the second information. Providing the shared worker application further includes sending, from the volatile local memory to the second web application, at least the portion of the first information in response to the second request.</p>
<p id="p-0009" num="0008">In another example, a computer system is described herein. The computer system includes a processor configured to execute computer program instructions. The computer system further includes a shared worker application executed by the processor, wherein the shared worker application is operable to share of network-accessible information between a plurality of web applications executed by the processor. The shared worker application includes means for receiving a first request for first information for a first web application executed by the processor. The shared worker application further includes means for communicating with at least one server over a network to acquire the first information in response to the first request. The shared worker application further includes means for storing, in response to the first request, the first information in a local volatile memory of the computer system. The shared worker application further includes means for providing the first information stored in the local volatile memory to a second web application executed by the processor in response to a second request for second information for the second web application.</p>
<p id="p-0010" num="0009">The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is a conceptual diagram depicting one example of a computing device configured to operate a browser application consistent with techniques of this disclosure.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a conceptual diagram depicting one example of a computing device consistent with this disclosure.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating one example of a browser application that includes a shared worker application consistent with this disclosure.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating components of a shared worker application consistent with this disclosure.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart diagram illustrating one example of a method of acquiring information consistent with this disclosure.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating one example of cross-domain communications with a shared worker application consistent with this disclosure.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 7</figref> is a conceptual diagram illustrating one example of a use case using techniques consistent with this disclosure.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 8</figref> is a flow chart diagram illustrating one example of a method for inter-domain communications with a shared worker application consistent with this disclosure.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 9</figref> is a conceptual diagram illustrating one example of inter-domain communications with a shared worker consistent with this disclosure.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 10</figref> is a conceptual diagram illustrating one example of inter-domain communications with a shared worker consistent with this disclosure.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 11</figref> is a block diagram illustrating one example of shared worker communication consistent with this disclosure.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 1</figref> is a conceptual diagram illustrating one example of a computing system including a browser <b>12</b> that incorporates a shared worker application consistent with this disclosure. <figref idref="DRAWINGS">FIG. 1</figref> depicts a local computing device <b>10</b>. Local computing device <b>10</b> may be coupled to a plurality of other computing devices via a network <b>2</b>. Network <b>2</b> may be the Internet. Network <b>2</b> may instead be any other network, e.g., a public/private network or a wireless network. Computing device <b>10</b> depicted in <figref idref="DRAWINGS">FIG. 1</figref> is a personal desktop computer. Although not shown in <figref idref="DRAWINGS">FIG. 1</figref>, computing device <b>10</b> may be any computing device configured to communicate over a network, for example a laptop computer, a cellular phone, or any other device configured to communicate information via network <b>2</b>, whether the device's primary purpose is network-based communication or not. Further, computing device <b>10</b> may be coupled to network <b>2</b> by any number of known mechanisms for network communications, for example wired connections (e.g., Ethernet) or wireless connections (e.g., Wi-Fi, cellular) to network <b>2</b>.</p>
<p id="p-0023" num="0022">As depicted in <figref idref="DRAWINGS">FIG. 1</figref>, computing device <b>10</b> is coupled to a plurality of network server computing devices <b>16</b>A-<b>16</b>E via network <b>2</b>. In order to access information accessible from network servers <b>16</b>A-<b>16</b>E, one or more browser applications (browsers) <b>12</b> may run on local computing device <b>10</b>. Browser <b>12</b> may be configured to run within a local operating system of computing device <b>10</b>. Non-limiting examples of known browser applications include Microsoft Explorer&#x2122;, Apple Safari&#x2122;, Mozilla Firefox&#x2122; and Google Chrome&#x2122; browser. Non-limiting examples of known operating systems for desktop and/or laptop computers may include Microsoft Vista&#x2122;, Apple Snow Leopard&#x2122;, or Linux. Examples of known operating systems for mobile devices (e.g., smartphones, netbooks, etc.) include Microsoft Windows Mobile&#xae;, Apple Iphone OS&#xae;, and Google Android&#x2122; mobile technology platform.</p>
<p id="p-0024" num="0023">Browser <b>12</b> may be configured to enable a user to manipulate access to information accessible via network <b>2</b>. For example, browser <b>12</b> may provide a user with an ability to enter one or more uniform resource indicators (URIs, e.g., www.google.com) in order to access a web application, such as, for example, a hypertext markup language (HTML) document. A web application, and/or information used by a web application, may be stored on one or more network servers <b>16</b>A-<b>16</b>E. Browser <b>12</b> may be configured to access web applications and/or other information stored on network servers <b>16</b>A-<b>16</b>E for presentation to a user of computing device <b>10</b>, among other uses.</p>
<p id="p-0025" num="0024">Known browsers are typically configured such that each time a web application requests access to information available via network <b>2</b>, the web application must access the information from one or more network servers <b>16</b>A-<b>16</b>E, regardless of whether another web application has already accessed the same information. To reduce redundancy, a particular web application may store accessed information (e.g., an HTML document) in a cache for use by the web application. However, known browsers are only configured to use information stored in a cache for a single web application, and a single instance of that web application (e.g., a browser window or tab displaying a particular HTML document). If another web application (or another instance of the same web application) desires to access the same information already acquired, the other web application must again access the information via one or more network servers <b>16</b>A-<b>16</b>E.</p>
<p id="p-0026" num="0025">Known browsers may further include limited capacity to share information between two web applications operating in the browser associated with the same domain via cookies. Cookies are typically stored in long term storage (e.g., hard disc storage), and are configured to only allow the sharing of limited information. A cookie is typically a text file that includes a series of name-value pairs containing small bits of information. The access of cookie information may be time/resource consuming and/or difficult, because to determine a desired cookie a web application must typically review all the cookies currently associated with the browser to access the desired information. Further, cookie information cannot be requested by a web application, and sent back to the web application in response to the request. Cookie information can only be accessed by the web browser searching through all available cookie information.</p>
<p id="p-0027" num="0026">As an example of known browser access of network accessible information, if a user opens a browser window to point to the URI www.google.com, then the browser will access, via network <b>2</b>, one or more network servers associated with www.google.com. The browser may acquire any information needed to display a page (e.g., HTML page) associated with www.google.com. That information may be stored in a cache, and used again if a user navigates (e.g., clicks on a link, enters a search term) within the www.google.com page. However, if a user opens a new instantiation (window or tab within browser <b>12</b>) of the URI associated with www.google.com, or a different page also associated with the www.google.com domain (e.g., www.google.com/contacts), the new instantiation does not have access to the cache in which the information previously acquired was stored, and must re-access the information from the one or more network servers <b>16</b>A-<b>16</b>E.</p>
<p id="p-0028" num="0027">The re-accessing of information over a network may reduce a speed of browser/web application performance. The requirement that already accessed information be re-accessed may also limit a user's ability to perform tasks offline, for example when computing device <b>10</b> is experiencing a network outage or a slow connection. Thus, this disclosure contemplates improvements in web browser implementation techniques that allow for the sharing of previously accessed network information among a plurality of web applications and/or instantiations of web applications operating within a browser <b>12</b>. More specifically, this disclosure is directed to a shared worker web application <b>14</b>A, <b>14</b>B that operates within a browser <b>12</b> to satisfy requests for information for one or more other web applications operating within browser <b>12</b>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> further depicts that network servers <b>16</b>A-<b>16</b>C are associated with a first domain, domain A, while network servers <b>16</b>D-<b>16</b>E are associated with a different, second domain, domain B. As discussed above, known web browser applications are typically configured to limit communication between web applications associated with different domains for security purposes. As such, as shown in <figref idref="DRAWINGS">FIG. 1</figref>, web browser <b>12</b> includes two shared worker applications <b>14</b>A and <b>14</b>B. Shared worker application <b>14</b>A is configured to satisfy requests for information from one or more web applications associated with the first domain, domain A, while shared worker application <b>14</b>B is configured to satisfy requests for information from one or more different web applications associated with a second domain, domain B. As will be discussed in further detail below, this disclosure is further directed to techniques for enabling cross-domain communication with a shared worker <b>14</b>A, <b>14</b>B. For example, according to the techniques described herein, a web application associated with domain A as shown in <figref idref="DRAWINGS">FIG. 1</figref> may be able to communicate requests for information and receive responses to those requests from a shared worker <b>14</b>B associated with domain B.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a conceptual diagram illustrating one example of components of computing systems <b>25</b> that may used by techniques described herein. As depicted in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>25</b> may be included in various types of computing devices. For example, device <b>20</b>A is a desktop computer. Device <b>20</b>B is a laptop computer. Device <b>20</b>C is a network server or mainframe computer. Although not depicted in <figref idref="DRAWINGS">FIG. 2</figref>, devices incorporating computing system <b>25</b> may instead include any number of other devices configured to compute and/or communicate via a network, including mobile devices such as mobile phones, personal digital assistants, smart phones, or any other mobile device. Any of devices <b>20</b>A-<b>20</b>C may be representative of local computing device <b>10</b> depicted in <figref idref="DRAWINGS">FIG. 1</figref>. Any of devices <b>20</b>A-<b>20</b>C may also be representative of network servers <b>16</b>A-<b>16</b>E depicted in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0031" num="0030">System <b>25</b> includes a processor <b>22</b>, a memory <b>26</b>, a storage device <b>24</b>, and an input/output component <b>29</b>. Each of components <b>22</b>, <b>24</b>, <b>26</b>, and <b>29</b> may be interconnected via a system bus <b>28</b> for inter-component communications. Processor <b>22</b> may be configured to process instructions for execution within system <b>25</b>. Processor <b>22</b> may be a single threaded processor, or may instead be a multi-threaded processor configured to process various instructions in parallel simultaneously. Processor <b>22</b> may be capable of processing instructions stored in memory <b>26</b> or instructions stored on storage device <b>24</b>. In one example, processor <b>22</b> may be configured to process instructions to cause a browser <b>12</b> to operate on system <b>25</b> consistent with techniques of this disclosure.</p>
<p id="p-0032" num="0031">System <b>25</b> further includes peripheral devices <b>27</b>. Peripheral devices <b>27</b> may include, for example, a monitor or other display device for presentation of visual information to a user of system <b>25</b>. Peripheral devices <b>27</b> may further include one or more input devices to enable a user to input data to system <b>25</b>, e.g., a keyboard, mouse, touchpad, trackpad, etc. Peripheral devices <b>27</b> may further include printers or other devices to output information. In one example, processor may be configured to process instructions to cause a visual depiction of a browser, e.g., browser <b>12</b> of <figref idref="DRAWINGS">FIG. 1</figref>, to be displayed to a user via a display of peripheral devices <b>27</b>. Browser <b>12</b> may include a shared worker application <b>14</b> as described herein. Browser <b>12</b> may operate on a processor of any of devices <b>20</b>A-<b>20</b>D depicted in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0033" num="0032">Memory <b>26</b> may be configured to store information within system <b>600</b> during operation. Memory <b>26</b> may be described as a computer-readable storage medium. In some examples, memory <b>26</b> is a temporary memory, meaning that a primary purpose of memory <b>26</b> is not long-term storage. Memory <b>26</b> may also be described as a volatile memory, meaning that memory <b>26</b> does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories (RAM), dynamic random access memories (DRAM), static random access memories (SRAM), and other forms of volatile memories known in the art.</p>
<p id="p-0034" num="0033">In some examples, memory <b>26</b> may be used to store program instructions for execution by processor <b>22</b>. In other examples, memory <b>26</b> may be used by software or applications running on system <b>25</b> to temporarily store information during program execution.</p>
<p id="p-0035" num="0034">Storage device <b>24</b> may also be described as a computer-readable storage medium. In contrast to memory <b>26</b>, storage device <b>24</b> may be configured to store larger amounts of information than memory <b>26</b>. Storage device <b>24</b> may further be configured for long-term storage of information. In some examples, storage device <b>24</b> is a non-volatile memory component. In contrast with a volatile memory component, a non-volatile memory may store data whether or not power is supplied to storage device <b>24</b>. Examples of non-volatile storage devices include magnetic hard discs, optical discs, floppy discs, Flash memories, and other forms of electrically programmable memories (EPROM) or electrically eraseable and programmable (EEPROM) memories.</p>
<p id="p-0036" num="0035">The techniques described herein may be implemented according to a computing system <b>25</b> as described with respect to <figref idref="DRAWINGS">FIG. 2</figref> in any combination of digital electronic circuitry, computer hardware, firmware, software, or any combination of digital electronic circuitry, computer hardware, firmware, software. For example, any of the techniques described herein may be implemented via executable program instructions stored in a computer-readable storage medium (e.g., storage device <b>24</b>, memory <b>26</b>) that are readable by processor <b>22</b> to cause processor <b>22</b> to perform the techniques of this disclosure. In other examples, some or all of the techniques of this disclosure may instead or in addition be implemented via dedicated hardware configured for a specific purpose, e.g., a field programmable gate array (FPGA), application specific integrated circuit (ASIC), digital signal processor (DSP) or like device.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram depicting a browser <b>12</b> operating on a local computing device <b>10</b> configured to access network-accessible information. As depicted in <figref idref="DRAWINGS">FIG. 3</figref>, a first web application <b>30</b>A, and a second web application <b>30</b>B, are operating within browser <b>12</b>. In some examples, web applications <b>30</b>A-<b>30</b>B may be web documents, e.g., a HTML document as discussed above. In other examples, web applications <b>30</b>A-<b>30</b>B may be non-document web applications that perform some sort of functionality within a browser <b>12</b>. Web applications <b>30</b>A-<b>30</b>B may or may not be visible to a user via browser <b>12</b> (e.g., one or more of web applications <b>30</b>A-<b>30</b>B may execute without a visual indication in one or more browser <b>12</b> windows or tabs). As also depicted in the example of <figref idref="DRAWINGS">FIG. 3</figref>, web applications <b>30</b>A-<b>30</b>B are both associated with a first domain, domain A. Browser <b>12</b> may also be configured for execution of other web applications operating on any number of different domains, as represented by domain N in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0038" num="0037">Browser <b>12</b> further includes shared worker application <b>14</b>. As discussed above, according to known browser implementations, each of web applications <b>30</b>A and <b>30</b>B are configured to individually communicate with one or more network servers <b>16</b>A-<b>16</b>C to access information stored on network servers <b>16</b>A-<b>16</b>C. For example, web application <b>30</b>A may be tab or window of a browser <b>12</b> that displays a web document (e.g., an HTML page) associated with domain A. Likewise, web application <b>30</b>B may be a tab or window of a browser <b>12</b> that displays a second web document also associated with domain A. Although <figref idref="DRAWINGS">FIG. 3</figref> depicts web application <b>30</b>A operating within the same browser <b>12</b> as web application <b>30</b>B, instead of operating in separate windows or tabs of browser <b>12</b>, web application <b>30</b>A may execute in a first browser, while web application <b>30</b>B executes in a second browser. In one example, the first browser may be first browser type (e.g., Microsoft Explorer&#xae;), while the second browser is a second browser type (e.g., Google Chrome&#xae;). In a related example, the first and second browser may be of the same type (e.g., both Google Chrome&#xae; browsers executing on the same computing device).</p>
<p id="p-0039" num="0038">According to known browser implementations, to access information available on network servers <b>16</b>A-<b>16</b>C of domain A, web application <b>30</b>A must individually communicate with one or more of network servers <b>16</b>A-<b>16</b>C, regardless of whether web application <b>30</b>B has already accessed the information. Such redundant information acquisition may result in a limitation to browser <b>12</b> speed, because computing resources (e.g., processor <b>22</b>, memory <b>26</b> as depicted in <figref idref="DRAWINGS">FIG. 2</figref>) used to re-access information cannot be used for other purposes.</p>
<p id="p-0040" num="0039">Accordingly, browser <b>12</b> includes a shared worker application <b>14</b> consistent with this disclosure. Shared worker application <b>14</b> may be configured to operate as an information acquisition interface for web applications running on browser <b>12</b>. Shared worker application <b>14</b> may operate intra-domain, meaning that shared worker application <b>14</b> may acquire and enable direct access to acquired information by web applications associated with the domain of shared worker application <b>14</b>.</p>
<p id="p-0041" num="0040">Shared worker <b>14</b> may incorporate a top-level application programming interface (API). The API may be a defined set of commands used by one or more web applications <b>30</b>A-<b>30</b>B to interface with shared worker <b>14</b> for purposes of information acquisition and retrieval. For example, the API may define top level commands to acquire information from one or more network servers <b>16</b>A-<b>16</b>C. In one example, where shared worker <b>14</b> is implemented using the HTML <b>5</b> specification for web communications, a top level system call may be a post message system call specifying a URI of information that a web application desires access to. The post message call may direct shared worker <b>14</b> to access information at the specified URI. The post message may also direct shared worker <b>14</b> to return acquired information to the web application. The API may also define commands directing shared worker <b>14</b> where to send acquired information. For example, web application <b>30</b>A may provide shared worker <b>14</b> with a command to access information. The command, or a separate command, may direct the shared worker to supply the requested information to a different web application <b>30</b>B.</p>
<p id="p-0042" num="0041">Web applications <b>30</b>A-<b>30</b>B may be configured to select among a number of options for requests to shared worker <b>14</b>. In one example, Web applications <b>30</b>A-<b>30</b>B may communicate a request for information only if the information is located in a local memory <b>26</b>. According to this example, shared worker <b>14</b> may return an error message if information is not stored in local memory <b>26</b>. In another example, web applications <b>30</b>A-<b>30</b>B may be configured to communicate a request to shared worker to update all information currently stored in local memory <b>26</b>. In another example, web applications <b>30</b>A-<b>30</b>B may be configured to communicate a message indicating that shared worker <b>14</b> should access information via one or more network servers even if the information is currently stored in local memory <b>26</b>.</p>
<p id="p-0043" num="0042">Shared worker <b>14</b> may be configured to receive a request for network accessible information from a first web application (e.g., web application <b>30</b>A). Shared worker <b>14</b> may receive the request via a top-level system call of shared worker <b>14</b>. Shared worker <b>14</b> may communicate with one or more network servers <b>16</b>A-<b>16</b>C associated with the domain of the shared worker <b>14</b> to access the requested information. If the requested information is found, shared worker <b>14</b> may return the requested information to the first web application <b>30</b>A. If the requested information is not located, shared worker <b>14</b> may return an indication to the first web application <b>30</b>A that the information cannot be found.</p>
<p id="p-0044" num="0043">If the information is found, the shared worker <b>14</b> may also store at least a portion of the information accessed in response to the request for the first information in a local memory <b>26</b> of a local computing device <b>20</b> that browser <b>12</b> is operating on. The local memory <b>26</b> may be, as described above with respect to <figref idref="DRAWINGS">FIG. 2</figref>, a volatile memory of the local computing device <b>10</b>. Local memory <b>26</b> may typically be used for storage of program instructions or other data used by applications or software operating on the local computing device <b>10</b>.</p>
<p id="p-0045" num="0044">Shared worker <b>14</b> may further maintain access to the information stored in local memory <b>26</b> in response to the request from first web application <b>30</b>A. For example, shared worker <b>14</b> may maintain a pointer, e.g., one or more memory addresses, indicating a location in memory <b>26</b> where the information was stored.</p>
<p id="p-0046" num="0045">Shared worker <b>14</b> may receive, from second web application <b>30</b>B, another request for information. Before accessing one or more of network servers <b>16</b>A-<b>16</b>C in an attempt to access the information, shared worker <b>14</b> may be configured to review the contents of information stored in local memory <b>26</b> to determine whether the stored information will satisfy the request from second web application <b>30</b>B. If the request from second web application <b>30</b>B can be satisfied based on information stored in local memory <b>26</b>, shared worker <b>14</b> may provide stored information in response to the request. If the request cannot be satisfied based on information stored in local memory <b>26</b>, shared worker <b>14</b> may acquire the requested information from one or more network servers <b>16</b>A-<b>16</b>C, return the acquired information to second web application <b>30</b>B, and store the acquired information in local memory <b>26</b> for later use.</p>
<p id="p-0047" num="0046">Shared worker <b>14</b> may be configured as a long-running application. For example, shared worker <b>14</b> may be configured to continue operating so long as web browser <b>12</b> is operating on local computing device <b>20</b>. Shared worker <b>14</b> may further be considered long-running in the sense that, although shared worker <b>14</b> is operative to access information for first web application <b>30</b>A, shared worker <b>14</b> may be configured to continue running even after first web application <b>30</b>A has been shut down, for example by a user closing a browser <b>12</b> window or tab in which first web application <b>30</b>A was displayed to a user of browser <b>12</b>. Thus, unlike a web application cache as discussed above, shared worker <b>14</b> is configured to share information spanning a plurality of web applications and/or multiple instantiations of a single web application.</p>
<p id="p-0048" num="0047">Implementing a shared worker <b>14</b> in a browser <b>12</b> as depicted in <figref idref="DRAWINGS">FIG. 3</figref> may be advantageous for a number of reasons. For example, shared worker <b>14</b> may improve the speed and/or efficiency of accessing network-accessible information, because particular information need only be acquired once via network <b>2</b>. Such a configuration may be beneficial, because access of information via a network is typically much slower than direct access to local memory <b>26</b>. Shared worker <b>14</b> as depicted in <figref idref="DRAWINGS">FIG. 3</figref> may also be advantageous, because even if a web application <b>30</b>A, <b>30</b>B for which information was originally accessed is shut down, the information remains accessible the next time a web application desires access to at least a portion of already-acquired information. As such, a browser <b>12</b> incorporating a shared worker <b>14</b> may enable a user to perform at least some operations of web application <b>30</b>A, <b>30</b>B when computing device is experiencing a slow network connection or no connection at all.</p>
<p id="p-0049" num="0048">Shared worker <b>14</b> may be particularly beneficial in the case of mobile web applications, because mobile networks are typically inefficient at accessing information via a network. In addition, because shared worker <b>14</b> operates as common source for acquiring network accessible information, shared worker <b>14</b> may enable the simplification of requests for information, which may further improve browser <b>12</b> speeds when web applications <b>30</b>A, <b>30</b>B attempt to handle error cases (e.g., retrying to access information via network <b>2</b>), or when web application <b>30</b>A, <b>30</b>B attempt to pre-fetch data.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating components of a shared worker application <b>14</b> consistent with this disclosure. As depicted in <figref idref="DRAWINGS">FIG. 4</figref>, shared worker application <b>14</b> includes a web application communications module <b>40</b> (hereinafter &#x201c;web app module <b>40</b>&#x201d;). Web app module <b>40</b> may be configured to communicate with one or more web applications <b>30</b>A-<b>30</b>C operating on a browser <b>12</b> in which shared worker <b>14</b> is operating. Web app module <b>40</b> may be configured to, for example, receive requests for information from one or more web applications <b>30</b>A-<b>30</b>C.</p>
<p id="p-0051" num="0050">Shared worker application <b>14</b> further includes server communications module <b>42</b>. Server communications module <b>42</b> (hereinafter &#x201c;server module <b>42</b>&#x201d;) may be configured to communicate with one or more network servers <b>16</b>A-<b>16</b>C via a network (e.g., network <b>2</b> in <figref idref="DRAWINGS">FIG. 1</figref>) in order to access and/or communicate information. For example, web app module <b>40</b> may, upon receipt of a request for information from one or more of web applications <b>30</b>A-<b>30</b>B, communicate a message to server module <b>42</b> to communicate with network servers <b>16</b>A-<b>16</b>C to access the information. Once the information has been retrieved by server module <b>42</b>, server module <b>42</b> may operate to provide the information to web app module <b>40</b>. Web app module <b>40</b> may then provide the acquired information to one or more of web applications <b>30</b>A-<b>30</b>C.</p>
<p id="p-0052" num="0051">As shown in <figref idref="DRAWINGS">FIG. 4</figref>, shared worker application <b>14</b> may further include a memory access module <b>44</b>. As described above, when server module <b>42</b> has received information from one or more network servers <b>16</b>A-<b>16</b>C in response to a request for information, server module <b>42</b> may forward received information to memory access module <b>44</b> in addition to sending the information to web app module <b>40</b>. Memory access module <b>44</b> may be configured to store the received information for potential later use. Memory access module <b>44</b> may store a pointer or other indication of stored information such that the information may be retrieved without further steps to locate the information in local memory <b>26</b>.</p>
<p id="p-0053" num="0052">As described above, when web app module <b>40</b> receives a request for information from one or more of web applications <b>30</b>A-<b>30</b>C, before providing a request message for the information to server module <b>42</b>, web app module <b>40</b> may send an information verification request to memory access module <b>44</b>. Memory access module <b>44</b> may, in response to the request, verify whether some or all of the requested information is stored in local memory <b>26</b>.</p>
<p id="p-0054" num="0053">If at least some of the requested information is stored in local memory <b>26</b>, memory access module <b>44</b> may return the stored information to web app module <b>40</b>. If the request from one or more web applications <b>30</b>A-<b>30</b>C may be satisfied by the information, web app module <b>40</b> may then return the stored information to one or more of web applications <b>30</b>A-<b>30</b>C. If the request is only partially satisfied by the stored information, web app module <b>40</b> may or may not immediately return the partially satisfying information to one or more of web applications <b>30</b>A-<b>30</b>C. In one example, web app module <b>40</b> may determine what information is not satisfied by the stored information, and communicate, to server communications module <b>42</b>, a request for less information than was initially requested by the one or more of web applications <b>30</b>A-<b>30</b>C.</p>
<p id="p-0055" num="0054">Upon receipt of the requested information, if the information received from memory access module <b>44</b> was not already returned to one or more of web applications <b>30</b>A-<b>30</b>B, web app module <b>40</b> may combine the stored information with information received in response to the request to server module <b>42</b>, and return the combined information to one or more of web applications <b>30</b>A-<b>30</b>C to satisfy the original request. Although the above description of the <figref idref="DRAWINGS">FIG. 4</figref> shared worker <b>14</b> describes web app module <b>40</b> initiating communications with memory access module <b>44</b> to determine whether requested information is already stored in temporary memory, server module <b>42</b> may instead initiate such communications in response to receipt of a request for information from web app module <b>40</b>.</p>
<p id="p-0056" num="0055">As also depicted in <figref idref="DRAWINGS">FIG. 4</figref>, memory access module <b>44</b> of shared worker <b>14</b> may, in addition to local memory <b>26</b>, be coupled to local data storage <b>24</b> of a computing device <b>10</b> on which browser <b>12</b> is operating. Memory access module <b>44</b> may be configured to access local data storage <b>24</b> in order to read or write data to local data storage <b>24</b>. In one example, upon shutdown of browser <b>12</b> (e.g., user initiated quitting of browser application program, computing device shutdown, or the like), memory access module <b>44</b> of shared worker <b>14</b> may be configured to write information previously accessed from one or more network servers <b>16</b>A-<b>16</b>C stored in local memory <b>26</b> to one or more locations in local data storage <b>24</b>. When browser <b>12</b> is again initiated by a user or otherwise, shared worker <b>14</b> may begin running (or may be initiated by another web application), and shared worker <b>14</b> may be configured to determine where in local data storage <b>24</b> the previously acquired information is stored, and load that information into local memory <b>26</b> for use in response to requests for information from one or more web applications <b>30</b>A-<b>30</b>C. This configuration may be beneficial, because shared worker <b>14</b> may be configured to better reduce information acquisition inefficiencies by sharing information not only across different web applications while browser <b>12</b> is operating, but by also sharing information between browser <b>12</b> sessions, such as when browser <b>12</b> is shut down entirely.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 5</figref> is a flow chart illustrating one example of a method of accessing network accessible information consistent with this disclosure. The method includes receiving a request for first information for a first web application (<b>31</b>). The method further includes acquiring, via a communications device, the first information in response to the first request (<b>32</b>). The method further includes providing, to the first web application, the first information received in response to the request (<b>33</b>). The method further includes storing at least a portion of the first information in a local memory of the communications device (<b>34</b>). The method further includes receiving a second request for second information from a second web application different than the first web application (<b>35</b>). The method further includes determining whether the at least a portion of the first information stored in the local volatile memory will satisfy the second request for second information (<b>36</b>). The method further include providing, from the local volatile memory, at least the portion of the first information that satisfies at least a portion of the second request for the second information (<b>37</b>).</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIGS. 1-5</figref> generally describe a shared worked <b>14</b> configured to enable sharing of network accessible information among a plurality of web applications associated with a same network domain (e.g., domain A in <figref idref="DRAWINGS">FIG. 3</figref>). However, it may be advantageous to enable a shared worker application <b>14</b> to communicate (including providing already accessed network information), with one or more web applications associated with a different domain than the shared worker <b>14</b> is associated. For example, it may be beneficial to reduce or eliminate duplicate acquisition of information accessed by web applications associated with different domains that are provided by the same provider or otherwise associated providers of the different domains.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram illustrating one example of cross-domain communications with a shared worker <b>14</b> consistent with this disclosure. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, a first web application, parent web application <b>50</b>, may be operating within a browser (e.g., browser <b>12</b>) on a user's local computing device. Parent web application <b>50</b> may be associated with a first domain, domain A. Parent web application <b>50</b> may desire to communicate with one or more web applications associated with a second domain, domain B. A domain as discussed herein may be described as the portion of a URI before the first forward slash (e.g., for the URI www.google.com/contacts, the domain is www.google.com). In particular, parent web application <b>50</b> associated with a first domain, domain A, may desire to communicate with one or more shared worker applications <b>14</b> associated with a second domain, domain B.</p>
<p id="p-0060" num="0059">As depicted in <figref idref="DRAWINGS">FIG. 6</figref>, parent web application <b>50</b> may include a child application generation module <b>54</b>. Child application generation module <b>54</b> may be configured to initiate communications with a shared worker application <b>14</b> associated with domain B. Child application generation module <b>54</b> may be configured to create a child web application, e.g., child application <b>60</b> in the example of <figref idref="DRAWINGS">FIG. 6</figref>. In some examples, child web application <b>60</b> may be an inline frame (iframe) application as is well known in the art. In other examples, child web application <b>60</b> may be a frame application or an xframe application as are also well known in the art. Other examples of child web applications <b>60</b> are also contemplated and consistent with this disclosure. Child web application <b>60</b> may or may not be visible to a user via browser <b>12</b>.</p>
<p id="p-0061" num="0060">As shown in <figref idref="DRAWINGS">FIG. 6</figref>, parent web application <b>50</b> may cause a generated child web application <b>60</b> to be associated with a second domain different than a domain parent web application is associated with. In one example, child application generation module <b>54</b> of parent web application may generate child web application <b>60</b> associated with domain A, and execute commands within browser <b>12</b> to cause child web application <b>60</b> to be associated with the second domain, domain B. Instead, parent web application <b>50</b> may directly generate child web application <b>60</b> associated with domain B.</p>
<p id="p-0062" num="0061">Once child web application <b>60</b> has been generated and associated with domain B, child web application <b>60</b> may be operable to communicate with one or more web applications operating in browser <b>12</b>. However, due to security requirements of browser <b>12</b>, child web application <b>60</b> may be prevented from communicating information associated with domain B to parent web application <b>50</b> associated with domain A.</p>
<p id="p-0063" num="0062">Child web application <b>60</b> may include a shared worker verification module <b>64</b>. Shared worker verification module <b>64</b> may be operable to, upon generation of child web application <b>60</b>, attempt to verify a shared worker <b>14</b> of domain B. For example, shared worker verification module <b>64</b> may attempt to determine whether or not a shared worker <b>14</b> is currently operating in browser <b>12</b> associated with domain B. If shared worker <b>14</b> is currently operating associated with domain B, shared worker <b>14</b> may establish a communications link with shared worker <b>14</b> and remain active for further communications. If a shared worker <b>14</b> is not currently operating associated with domain B, shared worker verification module <b>64</b> may be configured to instantiate, or generate, a shared worker <b>14</b> associated with domain B. In one example, child web application <b>60</b> may generate a shared worker based on execution of one or more programs of browser <b>12</b> in order to generate shared worker <b>14</b>. In one non-limiting example according to the HTML5 specification, a shared worker <b>14</b> may be instantiated by execution of a var worker=new SharedWorker(URI); system call.</p>
<p id="p-0064" num="0063">As depicted in <figref idref="DRAWINGS">FIG. 6</figref>, in one example, parent web application <b>50</b> may have access to a cross-domain XML library <b>55</b> associated with domain A. As also shown in <figref idref="DRAWINGS">FIG. 6</figref>, child web application <b>60</b> may have access to a cross-domain XML library <b>65</b> associated with domain B. In various examples, techniques of this disclosure related to cross-domain communication as described herein may be implemented via operations defined by cross-domain XML libraries <b>55</b> and <b>65</b>. For example, either of cross-domain XML libraries <b>55</b> and <b>65</b> may include executable program instructions that may be executed by a processor <b>22</b> of a local computing device <b>10</b> in order to, for example, generate child web application <b>60</b> and/or verify a shared worker <b>14</b> operating associated with domain B as described above.</p>
<p id="p-0065" num="0064">Once a shared worker <b>14</b>, and/or a communications link to shared worker <b>14</b>, has been established by shared worker verification module <b>64</b>, as mentioned above, due to browser security restrictions, parent web application <b>50</b> may be prevented from communicating with web applications associated with domain B, including shared worker application <b>14</b>, e.g., to send shared worker <b>14</b> a request to access information from one or more network servers <b>16</b>D-<b>16</b>F associated with domain B. However, web browser <b>12</b> may be configured to allow specific types of cross-domain communications in this configuration. For example, communications between parent web application <b>50</b> and child web application <b>60</b> to establish secure cross-domain communications may be allowed. In one example, child web application <b>50</b> may be configured to ignore all messages from parent web application <b>50</b> not related to secure authentication of parent web application <b>50</b> until parent web application <b>50</b> has been authenticated.</p>
<p id="p-0066" num="0065">Parent web application <b>50</b> includes cross-domain security module <b>56</b>. Cross-domain security module <b>56</b> (security module <b>56</b>) may be configured to communicate with an associated cross-domain security module <b>62</b> (security module <b>62</b>) of child web application <b>60</b> to securely authenticate communications between parent web application <b>50</b> (domain A) and web applications associated with domain B, including shared worker application <b>14</b>. In various examples discussed below, security module <b>62</b> may be configured to receive information from security module <b>56</b>, and communicate that information to one or more network servers <b>16</b>D-<b>16</b>F, to determine whether or not parent web application <b>50</b> should be allowed to securely communicate with one or more web applications (e.g., shared worker application <b>14</b>) associated with domain B.</p>
<p id="p-0067" num="0066">In one example, security module <b>56</b> may be configured to communicate, to security module <b>66</b>, one or more identifications of parent web application <b>50</b> and/or domain A. Security module <b>56</b> may communicate the received one or more identifications to a network server associated with domain B, e.g., one or more of network servers <b>16</b>D-<b>16</b>F (network server <b>16</b>D in the example of <figref idref="DRAWINGS">FIG. 6</figref>). In some examples, network server <b>16</b>D-<b>16</b>F may be a network server associated with domain B that is dedicated to authentication of secure communication requests. One or more of network servers <b>16</b>D-<b>16</b>F may include a list of domains and/or web applications for which secure communications should be authorized (e.g., a whitelist). According to this example, network server <b>16</b>D-<b>16</b>F may be configured to compare the one or more identifications received from security module <b>62</b> to the list of authorized domains and/or web applications. If the one or more identifications are included in the list, network server <b>16</b>D may return an indication of authentication to security module <b>62</b>.</p>
<p id="p-0068" num="0067">In another example, security module <b>56</b> may itself include a list of a list of domains and/or web applications for which secure communications should be authorized (whitelist). According to this example, security module <b>56</b> may receive the one or more identifications of domain A and/or parent web application <b>50</b>, and security module itself may perform a comparison to determine whether or not to enable cross-domain communications with parent web application <b>50</b>.</p>
<p id="p-0069" num="0068">In one example, the indication of authentication may indicate that any web application associated with domain A should be allowed to securely communicate with any web application associated with domain B. In other examples, the indication of authentication indicates that parent web application <b>50</b> should be allowed to securely communicate with any web application associated with domain B. In still another example, the indication of authentication indicates that parent web application <b>50</b>, or any web application associated with domain A, should be allowed to securely communicate specifically with shared worker <b>14</b> associated with domain B.</p>
<p id="p-0070" num="0069">In an example, instead of authenticating cross-domain communications as described above, secure cross-domain communications may be established based on security tokens. According to this example, security module <b>56</b> of parent web application <b>50</b> may be configured to request, from one or more network servers <b>16</b>A-<b>16</b>C associated with domain A, a security token for communicating with domain B. The one or more network servers <b>16</b>A-<b>16</b>C associated with domain A may then communicate with one or more network servers <b>16</b>D-<b>16</b>F associated with domain B to acquire the requested security token. One or more of network servers <b>16</b>D-<b>16</b>F may then return to one or more network servers <b>16</b>A-<b>16</b>C a secure token, which is then sent to parent web application <b>60</b>. Parent web application <b>60</b>, via cross domain security module <b>56</b>, send the received token to cross domain security module <b>62</b>. Cross domain security module <b>62</b> may then communicate the received token to the one or more network servers <b>16</b>D-<b>16</b>F associated with domain A, and network servers <b>16</b>D-<b>16</b>F may determine whether the token is the same as the one it generated and sent to parent web application <b>50</b> via one or more network servers <b>16</b>A-<b>16</b>C as described above. If the security token matches the one that was originally sent, the one or more network servers <b>16</b>D-<b>16</b>F may return an indication of authentication that cross-domain communications should be authorized. This indication may be returned to one or more of security modules <b>62</b> and <b>56</b>, and may be used by security modules <b>62</b> and <b>56</b> to enable communications between parent web application <b>50</b> and child web application <b>60</b>. In one example, the indication of authentication may indicate that any web application associated with domain A should be allowed to securely communicate with any web application associated with domain B. In other examples, the indication of authentication indicates that parent web application <b>50</b> should be allowed to securely communicate with any web application associated with domain B. In still another example, the indication of authentication indicates that parent web application, or any web application associated with domain A, should be allowed to securely communicate specifically with shared worker <b>14</b> associated with domain B.</p>
<p id="p-0071" num="0070">In one example, parent web application <b>50</b> may include the security token as a query parameter for the uniform resource locator (URL) of the child web application. Communications may only be allowed between child web application <b>60</b> and parent web application <b>50</b> while the token is valid.</p>
<p id="p-0072" num="0071">If security module <b>62</b> receives an indication of authentication (according to either authentication method described above) that parent web application <b>50</b> should be allowed to securely communicate with web applications associated with domain B, parent web application <b>50</b> and child web application <b>60</b> may establish respective cross-domain communications modules <b>58</b> and <b>66</b>. Cross-domain communications modules <b>58</b> and <b>66</b> may be configured to establish a communications link between parent web application and child web application to exchange information.</p>
<p id="p-0073" num="0072">In one example, a communications link between communication modules <b>58</b> and <b>66</b> may remain established while browser <b>12</b> is operating. In other examples, the communications link may only remain established while at least one web application associated with domain A, and/or at least one web application associated with domain B, is operating in browser <b>12</b>.</p>
<p id="p-0074" num="0073">Once a communications link between parent web application <b>50</b> and shared worker <b>12</b> has been established as discussed above, parent web application <b>50</b> associated with domain A may freely communicate with shared worker <b>14</b> associated with domain B via child application <b>60</b>. For example, parent web application <b>50</b> may communicate requests for information from network servers of domain B, which are received by communications module <b>66</b> of child web application <b>60</b>, and passed to shared worker <b>14</b>. Shared worker <b>14</b> may then acquire information from one or more network servers <b>16</b>D-<b>16</b>F associated with domain B in response to the request, store acquired information in local memory <b>24</b>, and return the acquired information to parent web application <b>50</b> via child web application <b>60</b>.</p>
<p id="p-0075" num="0074">In another example, parent web application <b>50</b> may request information from one or more network locations associated with domain A, acquire the information, and communicate acquired information to shared worker application <b>14</b> via child web application <b>60</b>. Shared worker application <b>14</b> may be configured to store the received information from domain A, and provide the stored information to one or more web applications associated with either of domain A or domain B upon receiving a request for the information. If web applications in addition to parent web application <b>50</b> operating in browser <b>12</b> associated with domain A are also configured to securely communicate with shared worker <b>14</b>, shared worker application <b>14</b> may provide stored information originally received from domain A, and provide that information to other web applications associated with domain A.</p>
<p id="p-0076" num="0075">The examples of cross-domain shared worker communication described above with respect to <figref idref="DRAWINGS">FIG. 6</figref> may be advantageous for a number of reasons. For example, by enabling web applications associated with domains other than a domain associated with a particular shared worker application <b>14</b> to communicate with the shared worker application <b>14</b>, redundant data retrieval may be even further reduced or eliminated. As such, browser <b>12</b> efficiency to access network-accessible information may be improved.</p>
<p id="p-0077" num="0076">The example depicted in <figref idref="DRAWINGS">FIG. 6</figref> shows cross-domain communications between a primary web application <b>50</b> associated with a first domain (domain A) and a shared worker <b>14</b> associated with a second domain, domain B. In other examples not depicted in <figref idref="DRAWINGS">FIG. 6</figref>, shared worker <b>14</b> may be operable to enable cross-domain communication between the primary web application <b>50</b> associated with domain A, and a second primary web application (not shown) associated with the domain that shared worker <b>14</b> is associated with (e.g., domain B). According to these examples, shared worker <b>14</b> may be operable to, via child web application <b>60</b>, enable cross-domain communication between primary web applications associated with different domains. In one such example, a primary web application <b>50</b> may be a calendaring web application (e.g., www.google.com/calendar) associated with domain A. The calendaring web application may receive from a user an indication to send a calendar invitation email. An email web application (e.g., www.gmail.com) associated with a different domain (e.g., domain B) may, via shared worker <b>14</b> associated with domain B, through child web application <b>60</b>, receive at least one indication of the calendar invitation email. Accordingly, the primary web applications (calendaring, domain A; email, domain B) may communicate status updates (e.g., a calendar invitation email) local to the device upon which <b>12</b> is operating, without accessing network <b>2</b> to convey status updates.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 7</figref> illustrates one working example of cross-domain shared worker communications. According to this example, a user operates a browser <b>12</b> on a local computing device <b>10</b> as described above with respect to <figref idref="DRAWINGS">FIG. 1</figref>. In a first window (or tab) of browser <b>12</b>, browser window A, a first web application <b>70</b> is operating associated with the domain mail.google.com (e.g., an HTML page associated with mail.google.com). Web application <b>70</b> may be, for example, configured as an email, instant messaging, voice messaging, video messaging, social network, or other web-based communication platform. A user may be required to enter a username and/or a password to acquire access to the first web application <b>70</b> associated with mail.google.com. Information associated with first web application <b>70</b> may be stored on one or more network servers associated with the mail.google.com domain.</p>
<p id="p-0079" num="0078">In a second window (or tab) of browser <b>12</b>, browser window <b>2</b>, the user operates a second web application <b>82</b> (e.g., an HTML page with the URI www.google.com/contacts) associated with the domain www.google.com. Second web application <b>82</b> may be configured to present a user with a list of the user's contacts, which are stored on a network server associated with the www.google.com/contacts domain. The user's contacts may include email, instant messaging, telephone numbers, social networking identifiers, or any other form of contacts for associates of a user. Second web application <b>82</b> may enable a user to, for example, add a new contact name and contact addresses to a user's contact data stored on one or more network servers associated with the www.google.com domain. For purposes of this example, assume a user has used second web application <b>82</b> to enter an email address for a contact named John Smith. Once the user has created the new contact via second web application <b>82</b>, the new contact information may be provided to one or more network servers associated with www.google.com and stored for later use.</p>
<p id="p-0080" num="0079">First, web application <b>70</b> may desire information available at one or more network servers associated with the www.google.com/contacts domain. For example, a user may desire to send an email to an associate for whom an email address is stored on one or more network servers associated with www.google.com. For purposes of this example, assume that a user desires to send an email to the contact named John Smith. Since the user just entered the contact named John Smith using the second web application <b>82</b> associated with www.google.com, first web application <b>70</b> does not currently have direct access to the updated information. A user may initiate the updating of information associated with www.google.com by selecting a button visually presented to a user via first web application <b>70</b> titled &#x201c;update contacts list,&#x201d; for example.</p>
<p id="p-0081" num="0080">According to traditional browser implementations, in order to acquire the information associated with the contact John Smith, first web application <b>70</b> would be required to send a request for the information to one or more network servers associated with the domain mail.google.com. In response to the request, the one or more network servers associated with the domain mail.google.com may communicate with one or more network servers associated with the domain www.google.com, gain secure access, request the information, receive the information, and return the information to the first web application <b>70</b>. Thus, according to traditional browser implementations, the first web application <b>70</b> must access, via the network, information already accessed (due to the previous operating of the second web application <b>82</b> by the user). This approach may be inefficient, as it results in network access of identical information (a user's www.google.com/contacts contact list) repetitively.</p>
<p id="p-0082" num="0081">However, network information access may be improved according to techniques of this disclosure implementing a browser <b>12</b> configured to run one or more shared worker applications <b>14</b>. According to such techniques, when the user first accessed www.google.com/contacts, instead of second web application <b>82</b> directly accessing information associated with www.google.com from one or more network servers associated with www.google.com, the second web application <b>82</b> instead may send a request to shared worker <b>84</b>. Shared worker <b>84</b> may acquire the requested information from the one or more servers associated with www.google.com, and store the information in a local memory of the user's computing device operating browser <b>12</b>. Accordingly, this information is now available for later use by other web applications associated with www.google.com (e.g. a third browser window viewing the www.google.com HTML document), or by other web applications not associated with www.google.com (e.g., first web application <b>70</b> associated with mail.google.com) via the shared worker.</p>
<p id="p-0083" num="0082">As discussed above, first web application <b>70</b> may desire to access information available via one or more network servers associated with domain www.google.com (e.g., to update a contacts list for mail.google.com such that the user may email the contact named John Smith). According to techniques of this disclosure, first web application <b>70</b> may cause a child web application to be generated and associated with the domain www.google.com/contacts. The child web application <b>80</b> may then attempt to verify whether a shared worker <b>84</b> is operating in browser <b>12</b> associated with the domain www.google.com/contacts. If it is (which is the case here, because as discussed above the user visited www.google.com/contacts to update the user's contacts list), then the child web application <b>80</b> may create a communications link with the shared worker <b>84</b>. If a shared worker <b>84</b> is not operating in browser <b>12</b> associated with the domain www.google.com, child web application <b>80</b> may generate or instantiate shared worker <b>84</b> associated with the domain www.google.com.</p>
<p id="p-0084" num="0083">The child web application <b>80</b> may then attempt to authenticate first web application <b>70</b> for secure communications. For example, child web application <b>80</b> may communicate an identification of first web application <b>70</b> to one or more network servers associated with www.google.com/contacts for comparison to a list (&#x201c;white list&#x201d;) of previously determined domains and/or web application with which secure communications are allowed for web applications associated with www.google.com/contacts. In another example, child web application <b>80</b> may authenticate secure communications via secure token exchange as described above with respect to <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0085" num="0084">Once secure communications have been established between first web application <b>70</b> and the domain www.google.com/contacts, first web application <b>70</b> may, via child web application <b>80</b>, request information associated with www.google.com from shared worker <b>84</b> associated with www.google.com. If shared worker <b>84</b> has previously stored information that would satisfy the request, shared worker <b>84</b> may return the requested information to first web application <b>70</b> via child web application <b>80</b> (which is the case here, as a user recently visited www.google.com, and via shared worker <b>84</b> the information was acquired and stored in a local memory of the user's computing device). If, however, shared worker <b>84</b> has not already previously stored information that would satisfy the request, shared worker <b>84</b> may access the information from one or more network servers associated with www.google.com, return that information to first web application <b>70</b>, and store the acquired information in local memory for later use in response to requests for information associated with the domain www.google.com.</p>
<p id="p-0086" num="0085">Thus, according to the techniques of this disclosure, information already accessed from one or more network locations in response to a request from one or more web applications may be re-used by one or more other web applications. Browser speed may be improved based on the techniques described herein, because the need for redundant network access to acquire information may be reduced or eliminated.</p>
<p id="p-0087" num="0086">Although the examples discussed herein with respect to <figref idref="DRAWINGS">FIGS. 6 and 7</figref> are directed to cross-domain communications with a shared worker involving only two domains, the concepts discussed herein are also applicable to any number of web applications and shared workers operating on different domains. By providing secure cross-domain communication with a shared worker <b>14</b>, a plurality of web applications that previously would have needed to individually access, via one or more network servers, information, may now access that information locally, if a shared worker associated with that domain has already accessed the information and stored it in a local memory of the user's computing device. For example, according to the example of <figref idref="DRAWINGS">FIG. 7</figref>, if a third web application operating on a third domain (e.g., www.maps.google.com) desires access to a user's contacts (e.g., to provide a user with an HTML page including a map showing home addresses of a user's contacts), the third web application may also be configured to establish a communications link with a shared worker associated with the www.google.com domain, and access that information without accessing or more network locations. Thus, the more web applications sharing information via one or more shared workers, the more information acquisition inefficiencies that can be reduced or eliminated.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 8</figref> is a flow chart diagram depicting one example of a method of communicating between a web application associated with a first domain with a shared worker application (e.g., shared worker application <b>14</b>) associated a second, different domain consistent with this disclosure. The method includes creating a child web application by a parent web application operating in a browser and associated with a first domain, and associating the child web application with a second, different domain (<b>101</b>). The method further includes determining whether a shared worker application associated with the second domain is operating in the browser (<b>102</b>). The shared worker acquires information associated with the second domain in response to one or more requests, and stores acquired information associated with the second domain in a volatile memory of the local computing device.</p>
<p id="p-0089" num="0088">If the shared worker application associated with the second domain is not operating in the browser, the child web application may instantiate the shared worker application associated with the second domain (<b>103</b>). Once the shared worker application is instantiated (or determined to be operating at <b>802</b>), the parent web application communicates with the shared worker application via the child web application (<b>104</b>). Communication between the parent web application and the shared worker may include the parent web application requesting information associated with the second domain from the shared worker. The shared worker may provide information to satisfy the request. If information is stored in a memory of the local computing device, the shared worker may provide the information from the memory. If the information is not stored in the memory of the local computing device, the shared worker may access the information from one or more network servers associated with the second domain, and provide acquired information to satisfy the request.</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 9</figref> depicts one example of a technique for providing inter-shared worker cross-domain communication consistent with this disclosure. The techniques described thus far are directed generally to a web application associated with a first domain communicating, via another web application, with a shared worker application associated with a second, different domain to access information associated with the second domain via the shared worker. However, it may further be beneficial for shared workers associated with different domains to directly communicate cross-domain.</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 10</figref> is a block/flow diagram illustrating one example of a technique for cross-domain communication with a shared worker <b>14</b> consistent with this disclosure. As depicted in <figref idref="DRAWINGS">FIG. 9</figref>, a parent web application <b>50</b> is associated with a first domain. The parent web application <b>50</b> creates a child web application <b>60</b> associated with a second domain different than the first domain. Child web application <b>60</b> may verify a shared worker <b>14</b> on the second domain. For example, child web application <b>60</b> may determine whether a shared worker <b>14</b> associated with the second domain is operating. If a shared worker <b>14</b> associated with the second domain is operating, child web application <b>60</b> may open a communications link with shared worker <b>14</b>. If a shared worker <b>14</b> is not operating associated with the second domain, child web application may instantiate or generate shared worker <b>14</b> associated with the second domain.</p>
<p id="p-0092" num="0091">Child web application <b>60</b> may communicate with parent web application <b>50</b> to verify parent web application <b>50</b> for cross-domain communications. Parent web application may send, to child web application <b>60</b>, an authentication message. Child web application <b>60</b> may grant cross-domain communication access to parent web application <b>50</b> if parent web application <b>50</b> is authenticated. In one example, parent web application <b>50</b> may be authenticated according to a whitelist comparison as described above. In another example, parent web application <b>50</b> may be authenticated according to exchange of secure tokens as described above.</p>
<p id="p-0093" num="0092">Once parent web application has been authenticated, parent web application <b>50</b> may be allowed to send messages to child web application. For example, parent web application <b>50</b> may send a Message A to child web application requesting information associated with the second domain. Child web application <b>60</b> may receive Message A, and forward Message A to shared worker <b>14</b>. Shared worker may reply with a Response A, which may be information acquired in response to the request of Message A, e.g., network-accessible information associated with the second domain. Child web application <b>60</b> may receive Response A, and forward response A to parent web application <b>50</b>. Parent web application <b>50</b> may then utilize received information of Response A.</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 10</figref> is a conceptual diagram illustrating cross-domain communications between a parent web application <b>50</b> associated with a first domain and a shared worker <b>14</b> associated with a second domain. As depicted parent web application <b>50</b> may be configured to access, via network <b>2</b>, network-accessible information associated with domain A by sending one or more network requests to one or more servers associated with domain A. Parent web application <b>50</b> may also access information associated with domain B via a shared worker <b>14</b> associated with domain B via a child web application <b>60</b> also associated with domain B. Parent web application <b>50</b> may communicate with child web application <b>60</b> via one or more cross-domain postMessages. Child web application <b>60</b> may communicate with shared worker <b>14</b> via one or more Same-Domain postMessages,</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 11</figref> depicts one example of a technique for enabling direct communications between shared worker applications associated with different domains. In the depicted example, a shared worker application <b>94</b> is operating in a browser <b>12</b> associated with domain B. In the example depicted in <figref idref="DRAWINGS">FIG. 11</figref>, a parent web application <b>90</b> associated with a different domain, domain A, has established a communication link with shared worker <b>94</b> via a child web application as described above with respect to <figref idref="DRAWINGS">FIGS. 6-10</figref>. Accordingly, parent web application <b>90</b> is configured to communicate requests for information associated with domain B to shared worker <b>94</b> via child web application <b>92</b>, and receive information from shared worker <b>94</b> in response to the requests.</p>
<p id="p-0096" num="0095">In the example depicted in <figref idref="DRAWINGS">FIG. 11</figref>, child web application <b>92</b> may desire to establish a direct communication link to a shared worker running in browser <b>12</b> and associated with domain A. In one example, child web application <b>92</b> may be configured to enable a communication link directly to shared worker application <b>98</b> via a communication link already established between parent web application <b>90</b> and child web application <b>92</b>. However, in another example, child web application <b>96</b> may be configured to generate one or more grandchild web applications <b>96</b>. Like child web application <b>92</b>, grandchild web application <b>96</b> may be generated and associated with domain A. Grandchild web application <b>96</b> may be configured to verify whether or not a shared worker <b>98</b> is currently running in browser <b>12</b> associated with domain A. If shared worker <b>98</b> is not currently running, grandchild web application <b>96</b> may be configured to generate/instantiate shared worker application <b>98</b>.</p>
<p id="p-0097" num="0096">In one example, grandchild web application <b>96</b> may be configured to authenticate a secure communications link between child web application <b>92</b>, grandchild web application <b>96</b>, and shared worker application <b>98</b>. Grandchild web application <b>96</b> may be configured to establish the secure communications link via exchange of secure authentication tokens or by whitelist comparison as described above with respect to child web application <b>60</b> in <figref idref="DRAWINGS">FIG. 6</figref>. In other examples, grandchild web application <b>96</b> may be configured to inherit authentication for secure inter-domain communications between domain A and domain B previously established between parent web application <b>90</b> and child web application <b>92</b>.</p>
<p id="p-0098" num="0097">As also shown in <figref idref="DRAWINGS">FIG. 11</figref>, each of shared workers <b>94</b>, <b>98</b> may be configured to store acquired data in a local memory of a computing device upon which browser <b>12</b> is operating. In one such example, as depicted in <figref idref="DRAWINGS">FIG. 9</figref>, each shared worker <b>94</b>, <b>98</b> operating on a computing device may allocate at least a portion of local memory <b>24</b> for storage of acquired information. In the example of <figref idref="DRAWINGS">FIG. 11</figref>, shared worker <b>94</b> has allocated a portion <b>24</b>A of local memory <b>24</b> for storage, and shared worker <b>98</b> has allocated a portion <b>24</b>B of local memory <b>24</b> for storage.</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 11</figref> and the corresponding description above describe the generation of a grandchild web application <b>96</b> in order to establish a communications link between shared workers <b>94</b> and <b>98</b>. Depending on browser <b>12</b> requirements, examples in which child web application <b>92</b> is configured to establish a communications link directly between child web application <b>92</b> and shared worker application <b>98</b> are also contemplated and consistent with this disclosure.</p>
<p id="p-0100" num="0099">The example techniques described with respect to <figref idref="DRAWINGS">FIG. 11</figref> may be advantageous for a number of reasons. For example, by enabling direct cross-domain communication between shared workers <b>94</b> and <b>98</b> themselves (as opposed to cross-domain communication between a shared worker application and a non-shared worker web application e.g., parent web application <b>90</b>), more information can be potentially acquired, stored locally, and provided in response to cross-domain requests between the shared workers.</p>
<p id="p-0101" num="0100">In one example, each time a shared worker is instantiated associated with a particular domain, the shared worker may cause a child web application to be generated and associated with each domain for which web applications are currently operating in the browser. According to such a configuration, each time any shared worker operating in browser acquires information in response to a request, that information may be provided to other shared workers associated with different domains. Thus, should any shared worker receive a request for information that has already been accessed by any shared worker associated with any domain, the shared worker that received the request would already have the information available and stored in local memory. Thus, these techniques may improve browser speed, because the more network accessible data acquisition redundancy eliminated, the more efficient a browser may be able to operate.</p>
<p id="p-0102" num="0101">Also, since more information is available to all of the shared workers, should a user experience a network outage or slowdown, at least some information would be available to allow the user to continue working. As an example, according to the example illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, a user attempting to draft an email to John Smith would still be able to access the information acquired by www.google.com/contacts in order to provide an address to the email, because the information previously acquired from www.google.com/contacts is stored in a local memory of the user's computing device. Thus, the user may create the email, save the email, and send the email at a later time when the user has access to a functioning network connection.</p>
<p id="p-0103" num="0102">The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term &#x201c;processor&#x201d; or &#x201c;processing circuitry&#x201d; may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit including hardware may also perform one or more of the techniques of this disclosure.</p>
<p id="p-0104" num="0103">Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.</p>
<p id="p-0105" num="0104">The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer readable media.</p>
<p id="p-0106" num="0105">Various embodiments of the disclosure have been described. These and other embodiments are within the scope of the following claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method, comprising:
<claim-text>executing, by a computing device, a first and a second web application within a web browser, the first web application being associated with a first domain, the second web application being associated with a second domain that is different from the first domain;</claim-text>
<claim-text>caching, by a shared worker application associated with the first domain and executing on the computing device, information received from the first domain; and</claim-text>
<claim-text>in response to a request from the second web application for the cached information and in response to determining that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain, providing, by the shared worker application, the cached information to the second web application,</claim-text>
<claim-text>wherein determining that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain comprises:
<claim-text>communicating, by the computing device, an identification of the second web application to a network server associated with the first domain; and</claim-text>
<claim-text>receiving, by the computing device, an indication of authentication if the second domain is included in a list of authorized domains or the second web application is included a list of authorized web applications.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first and second domains comprise web resources having different domain names.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>in response to determining, by the shared worker application, that the cached information satisfies the request, providing, by the shared worker application, the cached information to satisfy the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the shared worker application is operable to remain executing after terminating the first web application.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising terminating the web browser after caching the information but prior to providing the cached information to satisfy the request.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>,
<claim-text>wherein the information is requested in a first window or tab of the web browser; and</claim-text>
<claim-text>wherein the request is made in a second window or tab of the web browser.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the web browser is a first web browser; and
<claim-text>wherein the request is made in a second web browser executing on the computing device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computerized system, comprising one or more processors configured to:
<claim-text>execute a first and a second web application within a web browser, the first web application being associated with a first domain, the second web application being associated with a second domain that is different from the first domain;</claim-text>
<claim-text>execute a shared worker application that is associated with the first domain and that is operable to:
<claim-text>cache information received from the first domain, and</claim-text>
<claim-text>provide, in response to a request from the second web application for the cached information and in response to determining that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain, the cached information to the second web application,</claim-text>
</claim-text>
<claim-text>wherein to determine that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain, the one or more processors are configured to:
<claim-text>communicate an identification of the second web application to a network server associated with the first domain; and</claim-text>
<claim-text>receive an indication of authentication if the second domain is included in a list of authorized domains or the second web application is included in a list of authorized web applications.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computerized system comprises a mobile wireless device.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first and second domains comprise web resources having different domain names.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the shared worker application is further operable to:
<claim-text>determine that the cached information satisfies the request, and</claim-text>
<claim-text>provide the cached information to satisfy the request based on the determination that the cached information satisfies the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the shared worker application is further operable to remain executing upon terminating the first and second web applications.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computerized system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the shared worker application is further operable to provide the cached information after the first web application is terminated.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the information is requested in a first window or tab of the web browser; and
<claim-text>wherein the request is made in a second window or tab of the web browser.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>,
<claim-text>wherein the web browser is a first web browser; and</claim-text>
<claim-text>wherein the request is made in a second web browser executing on the computerized system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A non-transitory machine-readable medium with instructions stored thereon, the instructions, when executed, cause a computerized system to:
<claim-text>execute a first and a second web application within a web browser, the first web application being associated with a first domain, the second web application being associated with a second domain that is different from the first domain;</claim-text>
<claim-text>execute a shared worker application configured to:
<claim-text>cache information received from the first domain, and</claim-text>
<claim-text>in response to a request from the second web application for the cached information and in response to determining that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain, provide the cached information to the second web application,</claim-text>
</claim-text>
<claim-text>wherein to determine that web applications associated with the second domain are allowed to securely communicate with web applications associated with the first domain, the instructions cause the computerized system to:
<claim-text>communicate an identification of the second web application to a network server associated with the first domain; and</claim-text>
<claim-text>receive an indication of authentication if the second domain is included in a list of authorized domains or the second web application is included in a list of authorized web applications.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first and second domains comprise web resources having different domain names.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the instructions, when executed, further cause the computerized system to:
<claim-text>provide the cached information to satisfy the request only if the cached information satisfies the request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the shared worker application remains executing upon terminating the first and second web applications.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the information is requested in a first window or tab of the web browser; and
<claim-text>wherein the request is made in a second window or tab of the web browser.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>,
<claim-text>wherein the information is requested in a first browser application; and</claim-text>
<claim-text>wherein the request is made in a second web browser executing on the computerized system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The machine-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the shared worker application is configured to share information spanning multiple instantiations of a single web application.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the shared worker application is configured to share information spanning multiple instantiations of a single web application.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computerized system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the shared worker application is configured to share information spanning multiple instantiations of a single web application.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>requesting, by the second web application and from a network server associated with the second domain, a security token for communicating with the first domain;</claim-text>
<claim-text>receiving the security token;</claim-text>
<claim-text>communicating, by the second web application, the security token to the network server associated with the first domain; and</claim-text>
<claim-text>receiving, by the computing device and from the network server associated with the first domain, an indication that cross-domain communication is authorized. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

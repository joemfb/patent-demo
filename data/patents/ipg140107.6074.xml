<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627198-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627198</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12130754</doc-number>
<date>20080530</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<rule-47-flag/>
<us-term-of-grant>
<us-term-extension>834</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>27</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715234</main-classification>
</classification-national>
<invention-title id="d2e57">Method for synchronously binding an external behavior to a web page element</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5418952</doc-number>
<kind>A</kind>
<name>Morley et al.</name>
<date>19950500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712 14</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6262729</doc-number>
<kind>B1</kind>
<name>Marcos et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715744</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6266681</doc-number>
<kind>B1</kind>
<name>Guthrie</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6347398</doc-number>
<kind>B1</kind>
<name>Parthasarathy</name>
<date>20020200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6397217</doc-number>
<kind>B1</kind>
<name>Melbin</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6411988</doc-number>
<kind>B1</kind>
<name>Tafoya</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6668369</doc-number>
<kind>B1</kind>
<name>Krebs</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6674450</doc-number>
<kind>B1</kind>
<name>Toub et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715749</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6920607</doc-number>
<kind>B1</kind>
<name>Ali</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7383512</doc-number>
<kind>B1</kind>
<name>Martinsen</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0238181</doc-number>
<kind>A1</kind>
<name>Forney et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345473</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Office Action mailed Aug. 22, 2007 cited in U.S. Appl. No. 09/677,445.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Notice of Allowance mailed Feb. 29, 2008 cited in U.S. Appl. No. 09/677,445.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Oct. 7, 2003, 11 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Apr. 1, 2004, 17 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Jun. 14, 2004, 13 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Oct. 14, 2004, 18 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>U.S. Appl. No. 09/677,445, Advisory Action mailed Nov. 10, 2004, 3 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Mar. 10, 2005, 13 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Apr. 21, 2005, 26 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Jul. 13, 2005, 15 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Oct. 11, 2005, 53 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>U.S. Appl. No. 09/677,445, Advisory Action mailed Nov. 1, 2005, 3 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Apr. 5, 2006, 14 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Jul. 5, 2006, 20 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Sep. 20, 2006, 13 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Dec. 15, 2006, 12 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>U.S. Appl. No. 09/677,445, Office Action mailed Mar. 7, 2007, 15 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Jun. 7, 2007, 17 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Oct. 30, 2007, 26 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>U.S. Appl. No. 09/677,445, Amendment and Response filed Nov. 30, 2007, 27 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715749</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715740</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715760</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715762</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715234</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<division>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>09677445</doc-number>
<date>20000929</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7383512</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12130754</doc-number>
</document-id>
</child-doc>
</relation>
</division>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080229189</doc-number>
<kind>A1</kind>
<date>20080918</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Martinsen</last-name>
<first-name>Ronald R.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Massy</last-name>
<first-name>David H.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Beda</last-name>
<first-name>Joseph S.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gardner</last-name>
<first-name>Richard John</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mohan</last-name>
<first-name>Bulusu K.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zotov</last-name>
<first-name>Alexander J.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Harding</last-name>
<first-name>John M.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="008" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Relyea</last-name>
<first-name>Robert A.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="009" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Mielke</last-name>
<first-name>Markus W.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="010" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cox</last-name>
<first-name>Dave</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="011" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Markel</last-name>
<first-name>Kris</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Martinsen</last-name>
<first-name>Ronald R.</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Massy</last-name>
<first-name>David H.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Beda</last-name>
<first-name>Joseph S.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Gardner</last-name>
<first-name>Richard John</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Mohan</last-name>
<first-name>Bulusu K.</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Zotov</last-name>
<first-name>Alexander J.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Harding</last-name>
<first-name>John M.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="008" designation="us-only">
<addressbook>
<last-name>Relyea</last-name>
<first-name>Robert A.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="009" designation="us-only">
<addressbook>
<last-name>Mielke</last-name>
<first-name>Markus W.</first-name>
<address>
<city>Bellevue</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="010" designation="us-only">
<addressbook>
<last-name>Cox</last-name>
<first-name>Dave</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="011" designation="us-only">
<addressbook>
<last-name>Markel</last-name>
<first-name>Kris</first-name>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Merchant &#x26; Gould P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bashore</last-name>
<first-name>William</first-name>
<department>2175</department>
</primary-examiner>
<assistant-examiner>
<last-name>Orr</last-name>
<first-name>Henry</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A new form of DHTML behaviors, called &#x2dc;Element Behaviors,&#x201d; wherein a behavior component is bound to an HTML element, and not just attached to the element as with attached behaviors. A special processing instruction is used to import the Element Behavior into a Web page. Upon parsing the Web page, the Element Behavior is initialized as soon as it has been downloaded and parsed. This immediate initialization makes the Element Behavior declaratively available to bind synchronously to the element(s) it is modifying. A viewLink is a feature of Element Behaviors that permits encapsulation of a behavior component file (e.g., an HTC file) so that the structure of the HTC file is transparent to a Web page (&#x2dc;primary document&#x201d;) to which the HTC file is linked, but the content of the HTC file may be displayed in the primary document. The viewLink provides a pointer to the content in the encapsulated HTC file, and renders that content in the primary document, without incorporating the elements of the encapsulated HTC file into the primary document structure.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="159.60mm" wi="159.17mm" file="US08627198-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="221.57mm" wi="180.51mm" orientation="landscape" file="US08627198-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="192.70mm" wi="163.75mm" file="US08627198-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="222.08mm" wi="195.66mm" file="US08627198-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="188.38mm" wi="174.50mm" file="US08627198-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="183.05mm" wi="112.44mm" file="US08627198-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="205.66mm" wi="162.81mm" orientation="landscape" file="US08627198-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="197.02mm" wi="173.65mm" file="US08627198-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="144.78mm" wi="153.42mm" file="US08627198-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a divisional of U.S. patent application Ser. No. 09/677,445, filed Sep. 29, 2000, which issued as U.S. Pat. No. 7,383,512, on Jun. 3, 2008, entitled METHOD FOR SYNCHRONOUSLY BINDING AN EXTERNAL BEHAVIOR TO A WEB PAGE ELEMENT. The present application claims priority to the foregoing application, which is incorporated herein by reference in its entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The invention relates generally to computer systems, and more particularly to the creation and subsequent rendering of web pages on a computer system.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Dynamic HTML (DHTML) attached behaviors are simple, lightweight components that encapsulate specific functionality or behavior on a page. When applied to a standard HTML element on a page, a DHTML behavior component enhances that element's default behavior. For example, an attached behavior component can be created that toggles the display property of an element's children on a mouse click. When this attached behavior component is applied to a standard unordered list (UL) element on a page, it enhances the unordered list element's default behavior to expand and collapse when clicked. Similarly, another attached behavior component can incrementally set the position of an element from a start point to an end point on the screen, whereby if such a behavior component is applied to an image element, the otherwise statically positioned image &#x201c;flies&#x201d; across the screen.</p>
<p id="p-0005" num="0004">DHTML attached behaviors add great value to a Web application environment, making things easier for everyone involved in the Web development process. Typically, this environment consists of a team of content designers, designers, and developers. Content designers are responsible for writing content. Designers determine what interactive effects can be added to the content, while developers implement those effects. Prior to DHTML behaviors, the task of adding interactive effects to a page involved a lengthy iterative process between the designer and the developer trying to give the page the proper look. The designer, usually with limited programming background, mocked up the desired effect on the content in a desktop publishing environment, and worked closely with the developer to achieve the same effect on the page, usually with scripts.</p>
<p id="p-0006" num="0005">With DHMTL attached behaviors, a developer can work independently on encapsulating the desired effect in a separate behavior component file, while the designer applies that attached behavior component to elements on the page with a few attributes. By providing a simple declarative syntax, requiring no prerequisite knowledge of scripting and DHTML, DHTML behavior components empower Web designers to easily add interactive effects to an otherwise static content.</p>
<p id="p-0007" num="0006">DHTML attached behaviors were introduced in Microsoft&#xae; Internet Explorer 5.0 product, and are described in U.S. patent application Ser. No. 09/316,897, entitled as &#x201c;Dynamic Web Page Behavior,&#x201d; owned by the assignee of the present disclosure, and incorporated herein by reference. With attached behaviors, behavior components are attached to Cascading Style Sheet (CSS) elements and modify their behavior. Attached behaviors bind asynchronously to the elements that they affect, and can be attached or removed from an element programmatically.</p>
<p id="p-0008" num="0007">One problem with attached behaviors is that a Web designer revising the CSS may inadvertently detach an attached behavior component from the element that it is modifying. Alternatively, a Web designer revising the CSS may detach an attached behavior component from the element it is modifying by calling the removeBehavior method in script. Such removal may have an adverse effect on some of the existing document, which may not be readily apparent to the Web designer. In addition, an attached behavior is affected by the CSS style of the element to which it is attached, so the appearance of the element may be different from what the behavior designer intended as a result of CSS inheritance. Finally, attached behaviors are often unpredictable in the asynchronous parsing of a document, because attached behaviors are sometimes not instantiated at the time dependent elements try to access them.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0009" num="0008">The present invention provides a new form of DHTML behaviors, called &#x201c;Element Behaviors,&#x201d; wherein a behavior component is bound to an HTML element, and not just attached to the element as with attached behaviors. A special processing instruction is used to import the Element Behavior into a Web page. Upon parsing the Web page, the Element Behavior is initialized as soon as it has been downloaded and parsed. This immediate initialization makes the Element Behavior declaratively available to bind synchronously to the element or elements it is modifying. When an Element Behavior is implemented with a HTML Component (HTC) file, it is automatically downloaded as a part of the Web page, and the result is a browsing experience where the behavior component download is transparent to the client.</p>
<p id="p-0010" num="0009">Element Behaviors can be used like any other element in an HTML document. In addition, the Element Behavior cannot be disconnected from the underlying element using script or any other mechanism.</p>
<p id="p-0011" num="0010">A default object may be used to set and retrieve the default properties for the behavior component of an Element Behavior. When an Element Behavior is implemented with a HTML Component (HTC) file, this object has a declarative form, the PUBLIC:DEFAULTS element, which is used in the component definition section of an HTC to set the initial state of the behavior's properties.</p>
<p id="p-0012" num="0011">A viewLink is a feature of Element behaviors that permits encapsulation of a visual representation (the &#x201c;behavior component display&#x201d;) that a behavior component may provide to a page so that the structure of the behavior component display is transparent to a Web page (&#x201c;primary document&#x201d;) to which the behavior component is linked, but the content of the behavior component display may be displayed in the primary document. In the case where a behavior component is implemented in an HTC file, the behavior component display may be the content within the HTC file. The viewLink provides a pointer to the behavior component display, and renders the behavior component display in the primary document, without incorporating the elements of the encapsulated behavior component display into the primary document structure.</p>
<p id="p-0013" num="0012">In accordance with another aspect of the present invention, a new HTML Component (HTC) is provided called &#x201c;Lightweight HTC.&#x201d; Lightweight HTC is an HTC file that does not use or render its own static HTML content. With Lightweight HTC, unnecessary parsing and the creation of empty document trees is eliminated. Therefore, the result of using a Lightweight HTC is that the page loads much faster, especially when multiple instances of the same behavior are used.</p>
<p id="p-0014" num="0013">In accordance with another aspect of the present invention, a &#x201c;Literal Content&#x201d; component is defined. When a Literal Content component is utilized, text surrounded by the Literal Content component is not parsed or added to the document tree, but it is accessible using script or via a binary programming interface. This feature permits a Web page designer to add content to an Element Behavior that may be used to implement, for example, a XML island or a Script tag. As an example, a script may be provided to use the Element Behavior content, manipulate it, or parse it in whatever way is necessary to implement a behavior component.</p>
<p id="p-0015" num="0014">Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram representing a computer system into which the present invention may be incorporated;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram representing a number of external behavior components and multiple pages that reference those components for use in rendering an image in accordance with one aspect of the present invention;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a representation of a document tree representing elements hierarchically arranged on a web page and having a Custom Element injected in the tree in accordance with one aspect of the present invention;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a representation of a document tree representing elements hierarchically arranged on a web page and having a Master Element injected in the tree in accordance with one aspect of the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is a representation of an image of four tables representing how a viewLinked External Behavior may be used in accordance with one aspect of the present invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is a representation of a document tree representing elements hierarchically arranged on a web page and having a plurality of nested Master Elements in accordance with one aspect of the present invention; and</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. 7-9</figref> show a general overview of a process for parsing a document that implements an Element Behavior in accordance with one aspect of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="h-0007" num="0000">Exemplary Operating Environment</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an example of a suitable computing system environment <b>100</b> on which the invention may be implemented. The computing system environment <b>100</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment <b>100</b> be interpreted as having any dependency or requirement relating to anyone or combination of components illustrated in the exemplary operating environment <b>100</b>.</p>
<p id="p-0024" num="0023">The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or device&#x2dc;, and the like.</p>
<p id="p-0025" num="0024">The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.</p>
<p id="p-0026" num="0025">With reference to <figref idref="DRAWINGS">FIG. 1</figref>, an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer <b>10</b>. Components of the computer <b>110</b> may include, but are not limited to, a processing unit <b>120</b>, a system memory <b>130</b>, and a system bus <b>121</b> that couples various system components including the system memory to the processing unit <b>120</b>. The system bus <b>121</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.</p>
<p id="p-0027" num="0026">Computer <b>110</b> typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer <b>110</b> and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer <b>110</b>. Communication media typically embodies computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.</p>
<p id="p-0028" num="0027">The system memory <b>130</b> includes computer storage media in the form of volatile and/or nonvolatile memory such as read only memory (ROM) <b>131</b> and random access memory (RAM) <b>132</b>. A basic input/output system <b>133</b> (BIOS), containing the basic routines that help to transfer information between elements within computer <b>110</b>, such as during start-up, is typically stored in ROM <b>131</b>. RAM <b>132</b> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by processing unit <b>120</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 1</figref> illustrates operating system <b>134</b>, application programs <b>135</b>, other program modules <b>136</b>, and program data <b>137</b>.</p>
<p id="p-0029" num="0028">The computer <b>110</b> may also include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <figref idref="DRAWINGS">FIG. 1</figref> illustrates a hard disk drive <b>140</b> that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive <b>151</b> that reads from or writes to a removable, nonvolatile magnetic disk <b>152</b>, and an optical disk drive <b>155</b> that reads from or writes to a removable, nonvolatile optical disk <b>156</b> such as a CD ROM or other optical media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <b>141</b> is typically connected to the system bus <b>121</b> through a non-removable memory interface such as interface <b>140</b>, and magnetic disk drive <b>151</b> and optical disk drive <b>155</b> are typically connected to the system bus <b>121</b> by a removable memory interface, such as interface <b>150</b>.</p>
<p id="p-0030" num="0029">The drives and their associated computer storage media, discussed above and illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, provide storage of computer-readable instructions, data structures, program modules, and other data for the computer <b>110</b>. In <figref idref="DRAWINGS">FIG. 1</figref>, for example, hard disk drive <b>141</b> is illustrated as storing operating system <b>144</b>, application programs <b>145</b>, other program modules <b>146</b>, and program data <b>147</b>. Note that these components can either be the same as or different from operating system <b>134</b>, application programs <b>135</b>, other program modules <b>136</b>, and program data <b>137</b>. Operating system <b>144</b>, application programs <b>145</b>, other program modules <b>146</b>, and program data <b>147</b> are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer <b>20</b> through input devices such as a keyboard <b>162</b> and pointing device <b>161</b>, commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit <b>120</b> through a user input interface <b>160</b> that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor <b>191</b> or other type of display device is also connected to the system bus <b>121</b> via an interface, such as a video interface <b>190</b>. In addition to the monitor, computers may also include other peripheral output devices such as speakers <b>197</b> and printer <b>196</b>, which may be connected through a output peripheral interface <b>190</b>.</p>
<p id="p-0031" num="0030">The computer <b>110</b> may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer <b>180</b>. The remote computer <b>180</b> may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer <b>110</b>, although only a memory storage device <b>181</b> has been illustrated in <figref idref="DRAWINGS">FIG. 1</figref>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 1</figref> include a local area network (LAN) <b>171</b> and a wide area network (WAN) <b>173</b>, but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p>
<p id="p-0032" num="0031">When used in a LAN networking environment, the computer <b>10</b> is connected to the LAN <b>171</b> through a network interface or adapter <b>170</b>. When used in a WAN networking environment, the computer <b>110</b> typically includes a modem <b>172</b> or other means for establishing communications over the WAN <b>173</b>, such as the Internet. The modem <b>172</b>, which may be internal or external, may be connected to the system bus <b>121</b> via the user input interface <b>160</b> or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer <b>110</b>, or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 1</figref> illustrates remote application programs <b>185</b> as residing on memory device <b>181</b>. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.</p>
<p id="h-0008" num="0000">Element Behaviors</p>
<p id="p-0033" num="0032">DHTML behaviors are components that encapsulate specific functionality or behavior on a page, but are external to the page. DHTML Behaviors can be used to implement anything from a simple rollover effect to a complex interactive component. The present invention provides a new form of DHTML behaviors, called &#x201c;Element Behaviors.&#x201d; Element Behaviors enable web developers to define new elements for use by web page designers, called &#x201c;Custom Elements,&#x201d; wherein the Custom Elements are defined by the behavior or functionality of the Element Behavior. To define the behavior of a Custom Element, a web page designer provides a processing instruction for importing the Element Behavior into a web page. Once made available to a web page, the Element Behavior binds with the Custom Element, and appears to the page developer the same as any intrinsic element (e.g., &#x3c;P&#x3e;, &#x3c;B&#x3e;, &#x3c;INPUT&#x3e;).</p>
<p id="p-0034" num="0033">Importing an Element Behavior into a Web page via the processing instruction permits the Element Behavior to be available declaratively to bind synchronously to the Custom Element or Elements. Once an Element Behavior has been downloaded and parsed, it is available to be instantiated. Once a tag representing that Custom Element is parsed, an instance of the Element Behavior is created and exists as a first-class element in the document hierarchy and remains permanently bound to the Custom Element. The binding process assures that an instance of an Element Behavior cannot be disconnected from the Custom Element using script or any other mechanism. In this manner, a web page designer may utilize the Custom Element and be confident that the functionality of the Element Behavior cannot be removed from the Custom Element. Element Behaviors differ from attached behaviors in this respect. An attached behavior binds asynchronously to an element and modifies its behavior, and it can be attached or removed programmatically.</p>
<p id="p-0035" num="0034">In accordance with one aspect of the invention and as represented in <figref idref="DRAWINGS">FIG. 2</figref>, Element Behaviors are provided in behavior components <b>60</b><sub>1</sub>-<b>60</b><sub>3</sub>, which include external behavior code with respect to pages <b>62</b><sub>A</sub>, <b>62</b><sub>B</sub>. The behavior components <b>60</b><sub>1</sub>-<b>60</b><sub>3 </sub>may also include static HTML and/or other content, as described below. The behavior components <b>60</b><sub>1</sub>-<b>60</b><sub>3 </sub>are encapsulated components, and the code of a behavior component may be reused across multiple pages. As a result, improved manageability of pages <b>62</b><sub>A</sub>, <b>62</b><sub>B </sub>is provided. For example, as represented in <figref idref="DRAWINGS">FIG. 2</figref>, the page <b>62</b><sub>A </sub>includes elements that reference and (when parsed by an HTML renderer <b>66</b>) use two external behavior components <b>60</b><sub>1 </sub>and <b>60</b><sub>2</sub>, while the page <b>62</b><sub>B </sub>has elements that also use (another instance) of the behavior components <b>60</b><sub>2 </sub>along with the external behavior component <b>60</b><sub>3</sub>.</p>
<p id="p-0036" num="0035">The renderer <b>66</b> outputs and/or modifies an outputted image <b>64</b> based on the Element Behaviors. A preferred renderer <b>66</b> is Microsoft Corporation's Internet Explorer 5.5 rendering engine (mshtml.dll along with other code modules, including but not limited to iepeers.dll), which, in addition to being able to handle behavior components, provides data manipulation, formatting, and content changes without dependency on a Web server. With such an engine, enhanced programmatic access and control is provided, the location of objects and images can be precisely specified, and HTML tags, style sheets, text, tables, and ActiveX objects can be handled without requiring interaction with a Web server.</p>
<p id="p-0037" num="0036">In the implementation shown in <figref idref="DRAWINGS">FIG. 2</figref>, the pages <b>62</b><sub>A</sub>, <b>62</b><sub>B </sub>include at least one Custom Element <b>68</b><sub>1</sub>, <b>68</b><sub>2</sub>, respectively, and an import instruction <b>70</b><sub>1</sub>, <b>70</b><sub>2</sub>, respectively. As described below, in accordance with one aspect of the present invention, the import instruction <b>70</b> links implementation of an Element Behavior with a Custom Element <b>68</b>. When an Element Behavior is linked to a Custom Element <b>68</b> on a page, the behavior and/or functionality of the Element Behavior <b>60</b> defines that element. For example, an Element Behavior <b>60</b> can be written to set bold and italic font style for text. When a Custom Element <b>68</b> is linked such an Element Behavior <b>60</b>, when the Element Behavior is downloaded and initialized, the Custom Element changes the default style for text contained by the Custom Element to bold and italic.</p>
<p id="p-0038" num="0037">To define the functionality of an Element Behavior, a developer or the like first develops a behavior component (e.g., <b>60</b><sub>1 </sub>of <figref idref="DRAWINGS">FIG. 2</figref>) using script, or alternatively by using a language such as C++ to create a binary file. More particularly, the behavior component for an Element Behavior can be written in script using script component technology to provide a safe extensibility mechanism for those that are familiar with script and the Dynamic HTML Object Model. HTML Components (HTC) provide a mechanism to implement components in script as Dynamic HTML (DHTML) behaviors. Saved with an .htc extension, an HTC is an HTML file that contains script and a set of HTC-specific elements that define the component. An HTML Parser (e.g., the renderer <b>66</b>) or the like converts the script to a COM object. Element Behaviors created in C++ use an OBJECT tag syntax to instantiate, and may be directed to a specific platform, for example, to access Win32 Application Programming Interfaces (APIs) and the interfaces for implementing DHTML behavior components. Binary behaviors may also be provided by a host of the rendering engine, in which case no OBJECT tag is required.</p>
<p id="p-0039" num="0038">As is known, to define a behavior component using an HTC file, the PUBLIC:COMPONENT element is used, which provides a container for other elements that define the behavior component interface and set the default properties of the behavior component. In accordance with one aspect of the present invention, a new attribute, called &#x201c;tagName,&#x201d; is defined for the &#x3c;PUBLIC:COMPONENT&#x3e; element. The tagName attribute defines a portion of the name of the Custom Element. As described below, to prevent name conflicts, in accordance with one aspect of the present invention, when a Web page designer utilizes a Custom Element <b>68</b> on a Web page, the Web page designer is required to associate the tag name of the behavior component with a Namespace. The Namespace can be anything the designer chooses, but only one tag with a given name can exist within a single Namespace. This requirement assures consistent use of a Custom Element throughout a Namespace.</p>
<p id="p-0040" num="0039">In the following example, a &#x201c;checkers&#x201d; Custom Element is implemented.</p>
<p id="p-0041" num="0040">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="21pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<colspec colname="3" colwidth="21pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:COMPONENT tagName=&#x201c;checkers&#x201d;&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;/PUBLIC:COMPONENT&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0042" num="0041">The attributes of a Custom Element can be defined by using the PUBLIC:PROPERTY element. The following sample adds an attribute, named boardWidth, to the checkers Custom Element:</p>
<p id="p-0043" num="0042">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="182pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;PUBLIC:COMPONENT tagName=&#x201c;checkers&#x201d;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;PUBLIC:PROPERTY NAME=&#x201c;boardWidth&#x201d; /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/PUBLIC:COMPONENT&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0044" num="0043">A script function inside an HTC file can be made public to other components or to script in the primary document. In the following sample, a PUBLIC:METHOD element is added to the component; this uses the newGame function to start a new game of checkers. Also, a PUBLIC:ATTACH element is added to map a mouseover function to handle instances of the onmouseover event.</p>
<p id="p-0045" num="0044">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>&#x3c;PUBLIC:COMPONENT tagName=&#x201c;checkers&#x201d;&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;PUBLIC:PROPERTY NAME=&#x201c;boardWidth&#x201d; /&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;PUBLIC:METHOD name=&#x201c;newGame( )&#x201d; /&#x3e;</entry>
</row>
<row>
<entry>&#x2003;&#x3c;PUBLIC:ATTACH event=&#x201c;onmouseover&#x201d; onevent=&#x201c;mouseover( )&#x201d; /&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/PUBLIC:COMPONENT&#x3e;</entry>
</row>
<row>
<entry>&#x3c;SCRIPT Language=&#x201c;Javascript&#x201d;&#x3e;</entry>
</row>
<row>
<entry>function newGame( ){</entry>
</row>
<row>
<entry>// insert code to initialize a new game here</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>function mouseover( ){</entry>
</row>
<row>
<entry>// insert code to handle mouseover events</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry>&#x3c;/SCRIPT&#x3e;</entry>
</row>
<row>
<entry>&#x3c;BODY&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/BODY&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0046" num="0045">To complete the behavior, elements may be added inside the PUBLIC:COMPONENT element to define the remaining methods, properties and event handlers for the checkers component. A completed checkers component may include the script for the checkers game as well. Once completed, the implementation of a game of checkers is completely encapsulated in the Checkers.htc file.</p>
<p id="p-0047" num="0046">Note that the implementation of the checkers component contains no references to a Namespace; the Namespace is declared in the primary document, as described below. The same Element Behavior can actually be imported into multiple Namespaces within a single primary document, and although this technique is not used in the sample, it may be useful with many other types of components.</p>
<p id="p-0048" num="0047">A special processing instruction (e.g., the import instruction <b>70</b>) is used to import the Element Behavior into a Web page (e.g., the page <b>62</b><sub>A</sub>). The HTML document first declares a Namespace, which is used to ensure that the Element Behavior has a unique qualifier. The page designer needs to associate the tag name with a Namespace. The following HTML element declares a Namespace called &#x201c;games&#x201d; using the XMLNS attribute.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0048">&#x3c;HTML XMLNS:games&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0049" num="0049">The XMLNS (XML Namespace) is an attribute of the HTML tag and serves as a mechanism for specifying user-defined Namespaces. A Namespace may be declared in other ways. For example, the import instruction <b>70</b> may include an attribute (e.g., declareNamespace) for declaring a Namespace. In addition, a new Namespaces collection is exposed off the document object. Using this collection, a web designer can enumerate to determine what Namespaces have been added to the document, as well as import behaviors into the Namespaces of the designer's choice.</p>
<p id="p-0050" num="0050">In any event, the next step is to provide instructions to import the Element Behavior into the Namespace, e.g., via the import instruction <b>70</b>. To this end, there is provided a new tag, IMPORT. In the following example, the games Namespace imports the implementation of the Checkers.htc file using the IMPORT tag.
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0051">MPORT Namespace=&#x201c;games&#x201d;implementation=&#x201c;checkers.htc&#x201d;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0051" num="0052">The IMPORT tag is a Processing Instruction, or PI, and uses &#x201c;&#x3c;?&#x201d;H to start the tag instead of the &#x201c;&#x3c;&#x201d; character, which is used with regular HTML elements. When the browser begins processing the IMPORT directive, it suspends some other threads and activity until the contents of the Element Behavior file have been downloaded. This permits the Element Behavior to be available declaratively to bind synchronously to the Custom Element or Elements. As an example of threads that may be suspended, the tokenizer object for the page may be suspended. However, there may be instances where the tokenizer thread may need to continue to run if there are tokenizers that need running. Since it is a processing instruction, the import PI may appear anywhere in the page, as long as it appears before the first use of a Custom Element that is defined by the Element Behavior. This feature allows the web page designer to write code with confidence that the Element Behavior that was imported will be available (assuming a successful import) immediately after the parsing instruction.</p>
<p id="p-0052" num="0053">The Custom Element or Elements <b>68</b> may then be inserted in the body of the document <b>62</b>. A Custom Element can be used like any other tag, except that the Custom Element uses its Namespace as the prefix. Thus, the syntax for the Custom Element is &#x3c;Namespace&#x3e;:&#x3c;tagName&#x3e;. The Custom Element for the checkers game could be defined as follows:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0054">&#x3c;games:checkers&#x3e;&#x3c;/games:checkers&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0053" num="0055">A simple Custom Element does not need to be defined as a block element, so in this case the following form can also be used:
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0000">
    <ul id="ul0008" list-style="none">
        <li id="ul0008-0001" num="0056">&#x3c;games:checkers/&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0054" num="0057">If a Custom Element is used without a closing tag, as in the above example, the last element attribute is required to be separated from the terminating /&#x3e; characters, or the value of the attribute has to be bounded by quotes.</p>
<p id="p-0055" num="0058">The complete HTML file, which implements the checkers element, is shown below:</p>
<p id="p-0056" num="0059">
<tables id="TABLE-US-00004" num="00004">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;HTML xmlns:games&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;?IMPORT Namespace=&#x201c;games&#x201d;</entry>
</row>
<row>
<entry/>
<entry>implementation=&#x201c;checkers.htc&#x201d; &#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;BODY&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;games:checkers /&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/BODY&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/HTML&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0057" num="0060">As described above, Element Behaviors may also be implemented with binary DHTML behavior components, which would typically be written with a language such as Visual c++. As with Element Behaviors implemented using script, for binary Element Behaviors, a Namespace is declared, instructions for importing the Element Behavior are provided, and the Custom Element or Elements are inserted into the document. The following HTML code sample illustrates an example of how to import a binary DHTML behavior in the primary document.</p>
<p id="p-0058" num="0061">
<tables id="TABLE-US-00005" num="00005">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;html xmlns:mybb&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;head&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;object id=mytag ... &#x3e;&#x3c;/object&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/head&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;?import Namespace=mybb implementation=#mytag &#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;body&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;mybb:mytag&#x3e;&#x3c;/mybb:mytag&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/body&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/html&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0059" num="0062">The example contains the OBJECT element in the &#x3c;HEAD&#x3e; section, which is recommended for binary DHTML behaviors. The id attribute has the value my tag (with the remaining attributes for the element not shown for simplicity). The binary behavior is imported using a similar approach to the method used for HTC files, except that the implementation attribute is set to #mytag, which references the OBJECT elements id.</p>
<p id="p-0060" num="0063">Components formed using HTC files are likely to be favored over implementation of binary behavior components, mainly because of the ease at which a behavior component may be implemented in script. In addition, browser security issues are somewhat simplified when using HTC files to implement Element Behaviors, primarily because the client must provide permission before a binary component is downloaded to the browser. In contrast, when an Element Behavior is implemented with a HTC file, it is automatically downloaded as a part of the Web page, and the result is a browsing experience where the component download is transparent to the client.</p>
<p id="p-0061" num="0064">One significant benefit resulting from the use of Element Behaviors is that the IMPORT tag causes the Element Behavior to be downloaded and understood (parsed) as soon as the IMPORT tag has been parsed. This means that as soon as the IMPORT tag is processed, instances of whichever Element Behaviors were specified will be immediately available. Thus, the Element Behaviors are available declaratively to bind synchronously to Custom Elements. Therefore, it is not necessary to add event-handling functions to check to see if the component has been downloaded and initialized.</p>
<p id="h-0009" num="0000">ViewLinked Element Behaviors</p>
<p id="p-0062" num="0065">A viewLink is a feature of Element behaviors that permits encapsulation of a visual representation (the &#x201c;behavior component display&#x201d;) that a behavior component may provide to a page so that the structure of the behavior component display is transparent to a Web page (&#x201c;primary document&#x201d;) to which the behavior component is linked, but the content of the behavior component display may be displayed in the primary document. The viewLink provides a pointer to the behavior component display, and renders the behavior component display in the primary document, without incorporating the elements of the encapsulated behavior component display into the primary document structure.</p>
<p id="p-0063" num="0066">A viewLink is not limited to providing a pointer to the behavior component file, but may provide a pointer to any document having content. This document may be, for example, an HTC document, a document fragment, or a document that is created via CreateDocumentFromUrl.</p>
<p id="p-0064" num="0067">As described above, a regular (non-viewLinked) Element Behavior defines a Custom Element. To distinguish the two, when discussing an Element Behavior that uses a viewLink, the Custom Element in the primary document is referred to herein as the &#x201c;Master Element.&#x201d;</p>
<p id="p-0065" num="0068">As is known, in general, an HTML document, or page, may be considered a document tree, in that elements are contained by other elements in a hierarchical manner. Indeed, the renderer <b>66</b> logically constructs such a tree when provided with a page, (e.g., <b>62</b><sub>A </sub>of <figref idref="DRAWINGS">FIG. 2</figref>), whereby attributes and the like may be applied appropriately to elements as events are received, i.e., the events bubble up through the tree. A simple document tree structure <b>72</b> for a primary document (i.e., a page that has been rendered) is shown in <figref idref="DRAWINGS">FIG. 3</figref>. A Custom Element (e.g., the Custom Element <b>68</b>) has been implemented in the primary document. The HTML document tree <b>72</b> includes elements <b>74</b><sub>1</sub>-<b>74</b><sub>4 </sub>as nodes of the primary document tree <b>72</b>. As described above, the import process for an Element Behavior binds the Element Behavior with a Custom Element so that the Element Behavior becomes an element in the primary document. Thus, in <figref idref="DRAWINGS">FIG. 3</figref>, the Custom Element <b>68</b> is shown as an element in the tree. As described below, elements <b>76</b><sub>1</sub>-<b>76</b><sub>5 </sub>of the Element Behavior may be injected into the primary document tree so as to form a branch of the tree (referred to herein as the &#x201c;document fragment&#x201d;). Thus, if so injected, the elements <b>76</b><sub>1</sub>-<b>76</b><sub>5 </sub>of the Element Behavior are displayed in the HTML document tree for the primary document, such as is shown in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0066" num="0069"><figref idref="DRAWINGS">FIG. 4</figref> shows a document tree <b>78</b> for a primary document, similar to the document represented in <figref idref="DRAWINGS">FIG. 3</figref>, but in which a Master Element <b>79</b> (i.e., an element defined by a viewLinked Element Behavior) is implemented in the primary document. In contrast to <figref idref="DRAWINGS">FIG. 3</figref>, the elements that make up the viewLinked Element Behavior are not displayed with or attached to the primary document tree <b>78</b>, and therefore are not visible in the document tree of the primary document. Instead, only the Master Element <b>78</b> participates in the primary document tree <b>78</b>. The elements <b>76</b><sub>6</sub>-<b>76</b><sub>10 </sub>that make up the viewLinked Element Behavior are contained in a document fragment <b>80</b>. The document fragment <b>80</b> of a viewLinked Element Behavior does not appear in the primary document tree, but it is maintained separately. The Master Element serves as a pointer to the document fragment so that the content in the document fragment is displayed at the location of the Master Element in the primary document.</p>
<p id="p-0067" num="0070">To create a viewLinked Element Behavior, a developer or the like first creates the behavior component file (in binary or script) for the Element Behavior. For ease of understanding, creation of the behavior component file is discussed here with reference to an HTC file. However, if desired, the behavior component file may be implemented as a binary file.</p>
<p id="p-0068" num="0071">An HTC file is essentially a regular HTML document, so it can contain HEAD and BODY elements, as well as other standard HTML elements, but it is only necessary to include the elements that define the behavior and the document content. For Element Behaviors that use ViewLink, the HTC file contains two main sections. The first section is the component definition, which is the PUBLIC:COMPONENT element and the elements contained within it. The PUBLIC:COMPONENT element contains declarations that define the interface for the behavior in terms of its methods, properties, and event handling. The second section is the document fragment, which is contained inside the BODY element. This may include static HTML or other content that is to be displayed in the primary document. Thus, the structure of a viewLinked Element Behavior formed via an HTC file preferably follows the following format:</p>
<p id="p-0069" num="0072">
<tables id="TABLE-US-00006" num="00006">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x3c;HTML&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;HEAD&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;PUBLIC:COMPONENT tagname=tagnamehere&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x3c;PUBLIC:PROPERTY...&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;...</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x3c;PUBLIC:METHOD...&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;...</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x2003;&#x3c;PUBLIC:EVENT...&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;&#x3c;/PUBLIC:COMPONENT&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/HEAD&#x3e;...</entry>
</row>
<row>
<entry/>
<entry>&#x3c; SCRIPT language=&#x3c;language type&#x3e;&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x2003;...</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/SCRIPT&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;BODY&#x3e;</entry>
</row>
<row>
<entry/>
<entry>(Content to be displayed in primary document)</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/BODY&#x3e;</entry>
</row>
<row>
<entry/>
<entry>&#x3c;/HTML&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0070" num="0073">The HTML and HEAD tags are optional. As with a non-viewLinked Element Behavior, the name of the Master Element is declared in an HTC file using the tagName attribute in the PUBLIC:COMPONENT element (or similarly in a binary component), as shown in the example above (i.e., &#x201c;tagnamehere&#x201d;).</p>
<p id="p-0071" num="0074">The defaults object is used to set and retrieve the default properties for Element Behaviors, and viewLink is one of the properties of this object. A viewLink is established for an Element Behavior when the viewLink property is set to an object that contains document content. The object that is assigned to the viewLink property is the document fragment. By default, an Element Behavior does not have a viewLink defined, so the initial value of the viewLink property is undefined.</p>
<p id="p-0072" num="0075">The PUBLIC:DEFAULTS element is the declarative form of the defaults object. The attributes supported by the PUBLIC:DEFAULTS element correspond to the properties collection of the defaults: so either script or declarations can be used to set the defaults object properties. The PUBLIC:DEFAULTS element is used in the component section of an HTC file, where the initial properties of the defaults object can be set.</p>
<p id="p-0073" num="0076">For example, to set up a viewLink between a primary document and a document fragment using script, the following statement can be used. This statement is placed within script located in the HTC file, preferably after the PUBLIC:COMPONENT element.
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0000">
    <ul id="ul0010" list-style="none">
        <li id="ul0010-0001" num="0077">defaults.viewLink=document;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0074" num="0078">A viewLink can also be established using a declaration in the component definition. The following example automatically links the root element of the document fragment in the HTC file to the Master Element in the primary document.
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0000">
    <ul id="ul0012" list-style="none">
        <li id="ul0012-0001" num="0079">&#x3c;PUBLIC:DEFAULTS viewLinkContent=&#x201c;true&#x201d;/&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0075" num="0080">Thus, either of the foregoing may be placed in the HTC file to implement the ViewLink.</p>
<p id="p-0076" num="0081">After the HTC file has been implemented for the viewLinked Element Behavior, a web designer provides an import instruction for importing the viewLinked Element Behavior into the primary document (e.g., the IMPORT tag). A Namespace is declared the primary document, and the Master Element may be inserted into the document utilizing the Namespace as its prefix, followed by a colon (:), and then the tag name. As many Master Elements as necessary can be included in the primary document.</p>
<p id="p-0077" num="0082">When the primary document is instantiated by the renderer <b>66</b>, the viewLink provides a pointer to the document fragment so that the content of the document fragment is displayed at the location(s) of the Master Element(s) in the primary document. As with non-viewLinked Element Behaviors, the viewLinked Element Behavior is available declaratively after it is downloaded and parsed. The contents of the viewLinked Element Behavior, however, do not become a part of the document structure.</p>
<p id="p-0078" num="0083">The following example of an HTC file (WIDGET.HTC) illustrates one possible use of a viewLinked Element Behavior:</p>
<p id="p-0079" num="0084">
<tables id="TABLE-US-00007" num="00007">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>WIDGET.HTC</entry>
</row>
<row>
<entry>&#x3c;PUBLIC:COMPONENT tagName=WIDGET&#x3e;</entry>
</row>
<row>
<entry>&#x3c;PUBLIC:DEFAULTS viewLinkContent= &#x201c;true&#x201d; /&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/PUBLIC:COMPONENT&#x3e;</entry>
</row>
<row>
<entry>&#x3c;BODY&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TABLE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TR&#x3e;&#x3c;TD&#x3e;This is my WIDGET. Notice the encapsulation? - no</entry>
</row>
<row>
<entry>lines!&#x3c;/TD&#x3e;&#x3c;/TR&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TR&#x3e;&#x3c;TD&#x3e;This content will be rendered instead of the Alternate HTML</entry>
</row>
<row>
<entry>string because the viewLink has been set to the document of the</entry>
</row>
<row>
<entry>HTC.&#x3c;/TD&#x3e;&#x3c;/TR&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/TABLE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/BODY&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0080" num="0085">A document (WIDGET.HTM) that includes a Master Element to WIDGET.HTC follows:</p>
<p id="p-0081" num="0086">
<tables id="TABLE-US-00008" num="00008">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>WIDGET.HTM</entry>
</row>
<row>
<entry>&#x3c;HTML xmlns:MYNAMESPACE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;STYLE&#x3e;</entry>
</row>
<row>
<entry>TD { background-color: lines; }</entry>
</row>
<row>
<entry>&#x3c;/STYLE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;?IMPORT Namespace=MYNAMESPACE</entry>
</row>
<row>
<entry>implementation=&#x201c;WIDGET.htc&#x201d; &#x3e;</entry>
</row>
<row>
<entry>&#x3c;BODY&#x3e;</entry>
</row>
<row>
<entry>&#x3c;MYNAMESPACE:WIDGET&#x3e;Alternate HTML for browsers that don't</entry>
</row>
<row>
<entry>support element behaviors&#x3c;/MYNAMESPACE:WIDGET&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TABLE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TR&#x3e;&#x3c;TD&#x3e;This is my table in the primary doc&#x3c;/TD&#x3e;&#x3c;/TR&#x3e;</entry>
</row>
<row>
<entry>&#x3c;TR&#x3e;&#x3c;TD&#x3e;Notice how the cells have lines?&#x3c;/TD&#x3e;&#x3c;/TR&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/TABLE&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/BODY&#x3e;</entry>
</row>
<row>
<entry>&#x3c;/HTML&#x3e;</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0082" num="0087">The result of rendering WIDGET.HTM is shown in <figref idref="DRAWINGS">FIG. 5</figref>. In the example, the viewLinked Element Behavior WIDGET.HTC uses a table to display its content. Likewise, the primary document WIDGET.HTM uses a table to display its content, but further includes a default background style for the table elements in the primary document. If the elements in the WIDGET.HTC file were inside a non-viewLinked Element Behavior, those elements would inherit the default background style property when the document is parsed. This result may be undesirable, depending on the requirements for the component.</p>
<p id="p-0083" num="0088">For the viewLinked (shown) version of WIDGET.HTC, applying the default background style in the primary document has no effect on the rendering of the table in the Master Element file. That is, the lines that are the default style for the background of the tables in the primary document are not applied to the tables in the HTC file. The example illustrates the difference in Cascading Style Sheets (CSS) inheritance for each variation. Encapsulation of element behaviors via ViewLinks makes it possible for content or script in the Element Behavior to not be directly affected by the primary document.</p>
<p id="p-0084" num="0089">When a viewLink is used, script in the primary document does not affect the rendering of the content in the HTC file, unless public methods and properties are added to the HTC file definition to make this possible. A viewLinked Element Behavior may be completely encapsulated such that it's functionality, methods, and style sheet properties are completely hidden from the primary document. Conversely, a viewLinked Element Behavior may be designed to provide an extensive interface of methods and properties, enabling rich interaction between the primary document and the component.</p>
<p id="p-0085" num="0090">A useful feature of viewLink is that it enables the developer to partition the document tree into multiple document fragments by using nested viewLink components. <figref idref="DRAWINGS">FIG. 6</figref> shows an example of a document tree <b>84</b> having several document fragments <b>96</b><sub>1</sub>-<b>96</b><sub>3</sub>. In effect, a viewLink builds logical partitions <b>98</b><sub>A</sub>-<b>98</b><sub>C </sub>(<figref idref="DRAWINGS">FIG. 6</figref>) between the document fragment tree and the primary document tree or the corresponding document fragment. The partition <b>98</b> may be used to prevent events, properties, or styles from being passed across the partition.</p>
<p id="p-0086" num="0091">There are scenarios where it may be desirable or efficient to abstract content and script into multiple layers. As one example, a web designer may insert a calendar Master Element into a primary document. If a Master Element were not used, the web designer would have to insert the necessary table for the calendar into the document (using attached behaviors or other techniques). The table in the calendar would be subject to the changes made to the primary document. For example, if a second designer were to set a CSS attribute to make the backcolor of TD pink, then the table that forms the calendar that was created by the first designer would be pink, even though that is probably not what either designer intended. The encapsulation of ViewLinks allows the first designer to define a calendar element, and have each instance (tag) of that element isolated from the primary document. Thus, if the calendar was implemented as a table in the behavior code of the Element Behavior, the calendar would not be subject to CSS inheritance from the primary document, because to the CSS the calendar is a calendar, not a table.</p>
<p id="p-0087" num="0092">Many problems encountered with the development of DHTML behaviors are avoided when an Element Behavior with a viewLink is used. Styles in the primary document tree are not inherited by the viewLink component unless the component designer permits it by design. Unexpected formatting of the component content. can be avoided completely by defining styles in the HTC file, which take precedence over styles set in the primary document. A web designer also has the option to turn off style inheritance completely.</p>
<p id="h-0010" num="0000">Lightweight HTC Files</p>
<p id="p-0088" num="0093">As discussed above, an HTC file is actually an HTML document, so a document tree is built for its contents when it is parsed by an HTML Renderer (e.g., the HTML renderer <b>66</b>). Thus, an HTML renderer creates a separate document tree for each use of a Behavior in a primary document. When a large number of Element Behaviors are assembled in a single page, the result is often a relatively slow page load.</p>
<p id="p-0089" num="0094">It is often possible to write an HTC file that does not contain any HTML, e.g., checkers.htm above. In accordance with one aspect of the present invention, a new &#x201c;lightweight&#x201d; Attribute of the PUBLIC:COMPONENT element is defined to handle documents not having such content (e.g., static HTML) so that the HTC file is handled in a more efficient manner. These documents are essentially HTC behaviors that are pure programming logic with no content. The following is an example of implementation of the &#x201c;lightweight&#x201d; Attribute on the PUBLIC:COMPONENT element:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0000">
    <ul id="ul0014" list-style="none">
        <li id="ul0014-0001" num="0095">&#x3c;PUBLIC:COMPONENT tagName=&#x201c;rollover&#x201d;lightweight=&#x2018;true&#x2019;&#x3e;&#x3c;/PUBLIC:COMPONENT&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0090" num="0096">The lightweight attribute instructs the HTML renderer that the HTC document does not contain static content, and further instructs the renderer to not parse HTML content in the file, and to not build a document tree for the HTC file. The HTC may include content, but if the lightweight attribute is set to &#x201c;true,&#x201d; then the content is ignored by the renderer. However, scripts and supported tags in the file are parsed and acted upon. At present, only the following tags are supported for Lightweight HTC:</p>
<p id="p-0091" num="0097">
<tables id="TABLE-US-00009" num="00009">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="offset" colwidth="35pt" align="left"/>
<colspec colname="1" colwidth="35pt" align="left"/>
<colspec colname="2" colwidth="112pt" align="left"/>
<colspec colname="3" colwidth="35pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:COMPONENT&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;?IMPORT&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:PROPERTY&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:METHOD&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:ATTACH&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;PUBLIC:DEFAULTS&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;SCRIPT&#x3e;</entry>
<entry/>
</row>
<row>
<entry/>
<entry/>
<entry>&#x3c;HTML&#x3e;</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="3" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0092" num="0098">Lightweight HTC may be utilized in the implementation of both attached behaviors and Element Behaviors. With lightweight HTC, unnecessary parsing, and the creation of empty document trees, is eliminated. Therefore, the result of using a Lightweight HTC is that the page loads much faster, especially when multiple instances of the same custom tag are used.</p>
<p id="p-0093" num="0099">In many applications of HTC files, a behavior does not require a viewLink to render content, or there simply might not be any content to render. In these applications, unnecessary memory usage results, which may be remedied by specifying a Lightweight component. As the &#x3c;?IMPORT&#x3e; processing instruction can be used in a Lightweight HTC file, it is possible to nest lightweight HTC files.</p>
<p id="h-0011" num="0000">Literal Content</p>
<p id="p-0094" num="0100">In accordance with another aspect of the present invention, a &#x201c;Literal Content&#x201d; component is defined. When a Literal Content component is utilized, text surrounded by the</p>
<p id="p-0095" num="0101">Literal Content component is not parsed or added to the document tree, but is accessible using script. This feature permits a Web page designer to add content between the starting and ending Custom Element tags (e.g., between &#x3c;Namespace:tagName&#x3e; and &#x3c;!Namespace:tagName&#x3e;&#x3e; that is not parsed, but may be used to implement, for example, an XML island or a Script tag. As an example, a script may be provided between the tags to use the Element Behavior content, manipulate it, or parse it in whatever way is necessary to</p>
<p id="p-0096" num="0102">implement a behavior component. This feature may be valuable when a viewLinked Element Behavior is utilized, wherein by definition the content of the Element Behavior is not made available to the primary document.</p>
<p id="p-0097" num="0103">A Literal Content Element Behavior is specified by using the &#x201c;literalContent&#x201d; attribute on the PUBLIC:COMPONENT element, as is shown in the following example:
<ul id="ul0015" list-style="none">
    <li id="ul0015-0001" num="0000">
    <ul id="ul0016" list-style="none">
        <li id="ul0016-0001" num="0104">&#x3c;PUBLIC:COMPONENT tagName=&#x201c;myTag&#x201d;literalcontent=true&#x3e;&#x3c;/PUBLIC:COMPONENT&#x3e;</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0098" num="0105">Thus, content within Custom Element tags defined via the above PUBLIC:COMPONENT element is not parsed.</p>
<p id="p-0099" num="0106">The innerText property is not available for a Custom Element that is implemented with a Literal Content Element Behavior. If an attempt is made to set the innerText property of the Custom Element an error occurs. If the innerText property of a Literal Content Element Behaviors is retrieved in script, it returns as null.</p>
<p id="p-0100" num="0107">The innerHTML property can be used to set and retrieve the Element Behavior's Literal Content. The innerHTML property of the Element Behavior is available once the oncontentready event has fired. Therefore, an event handler should be attached to this event in a Literal Content component that retrieves the innerHTML property of the Custom Element. Otherwise, an error occurs, which indicates that the innerHTML property is not yet available.</p>
<p id="p-0101" num="0108">The oncontentsave event is fired during a save, copy, get innerText, get innerHTML, or drag-and-drop operation. This event can be useful when writing a Literal Content Element Behavior.</p>
<p id="p-0102" num="0109">Turning now to an explanation of the operation of the present invention, <figref idref="DRAWINGS">FIGS. 7-9</figref> show a general overview of a process for rendering a document that implements an Element Behavior in accordance with one aspect of the present invention. The process is described from the perspective of the renderer <b>66</b>. For ease of understanding, the Element Behavior in the description is implemented in an HTC behavior component. Beginning at step <b>700</b>, the renderer begins parsing the primary document by parsing an element in the document. If the element does not include the IMPORT tag, then step <b>702</b> branches to step <b>704</b>, where a determination is made whether the element includes a custom or master element. If not, then step <b>704</b> branches to step <b>706</b>, where a determination is made whether all elements have been parsed. If so, then the image is rendered in the conventional manner at step <b>708</b>. If all elements have not been parsed, then step <b>706</b> branches to step <b>708</b>, where the next element is accessed, and the process loops back to step <b>700</b> where the next element is parsed.</p>
<p id="p-0103" num="0110">If a parsed element includes the IMPORT tag, then step <b>702</b> branches to step <b>712</b>, where the IMPORT processing instruction may instruct the renderer to cease some threads with respect to the page (described above), and to access the behavior component <b>60</b> (step <b>714</b>). This may require download of the behavior component <b>60</b> or accessing the behavior component in another manner (e.g., via a cache).</p>
<p id="p-0104" num="0111">Once the behavior component is accessed, the renderer reads enough of the behavior component to read the tag name (step <b>716</b>). Then the process loops back to step <b>706</b>, where a determination is made whether all elements have been parsed (described above).</p>
<p id="p-0105" num="0112">If a parsed element is either a Custom Element or a Master Element, step <b>704</b> branches to step <b>718</b>, where an instance of the element behavior is instantiated, described in <figref idref="DRAWINGS">FIG. 8</figref>. After instantiation, the threads that were stopped in step <b>712</b> may be continued.</p>
<p id="p-0106" num="0113">As can be understood by referencing <figref idref="DRAWINGS">FIG. 7</figref>, a primary document may have multiple IMPORT tags so as to associate the document with multiple Element Behaviors. In addition, the document may include one or more custom or master elements for each Element Behavior.</p>
<p id="p-0107" num="0114"><figref idref="DRAWINGS">FIG. 8</figref> shows a general overview of parsing of the behavior component upon instantiation in accordance with one aspect of the present invention. Beginning at step <b>800</b>, if the viewLink property is set to an object containing document content, then step <b>800</b> branches to step <b>802</b>, where the HTML content of the HTC document is parsed. A document tree is built for the HTC document in step <b>804</b>. The Custom Element or Master Element is then bound to the instance of the Element Behavior (step <b>812</b>).</p>
<p id="p-0108" num="0115">If the viewLink property is not set, then step <b>800</b> branches to step <b>806</b>, where if Lightweight HTC is implemented in the behavior component, the process branches to step <b>808</b>, where the lightweight attribute instructs the HTML renderer that the HTC document does not contain static content, and further instructs the renderer to not parse HTML content in the file, e.g., to not build a document tree for the HTC behavior component (step <b>810</b>). The Custom Element or Master Element is then bound to the instance of the Element Behavior (step <b>812</b>).</p>
<p id="p-0109" num="0116">If Lightweight HTC is not implemented in the HTC behavior component, then the renderer <b>66</b> parses the HTC document, including HTML content (step <b>814</b>). A document tree is built for the HTC behavior component (step <b>816</b>). The process then proceeds to step <b>812</b>, where the Custom Element or Master Element is bound to the instance of the Element Behavior.</p>
<p id="p-0110" num="0117">Step <b>818</b> returns to parsing of the primary document after the HTC document has been parsed and the Element Behavior has been instantiated. If the Custom Element has not been implemented with Literal Content, then step <b>818</b> branches to step <b>820</b>, where the content within the Custom (or Master) Element tags is parsed (if present). The process branches to <figref idref="DRAWINGS">FIG. 9</figref>, described above.</p>
<p id="p-0111" num="0118">If the Custom (or Master) Element has been implemented with Literal Content, step <b>818</b> branches to step <b>822</b>, where the content within the Custom (or Master) Element tags is not parsed. If script or other code such as a programmable API is provided to access the content within the Custom Element tags, the content within the Custom Element tags is accessed at step <b>824</b> by the code and may acted on accordingly (e.g., parsed). step <b>824</b> then branches to <figref idref="DRAWINGS">FIG. 9</figref>, described above. If script is not provided to access the content within the Custom (or Master) Element tags, then step <b>824</b> branches directly to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0112" num="0119"><figref idref="DRAWINGS">FIG. 9</figref> shows a general overview of the effect of the viewLink upon the parsing of the primary document in accordance with one aspect of the present invention. If the HTC document does not include a viewLink, then step <b>902</b> branches to step <b>904</b>, where the behavior is applied (e.g., to content with the Custom Element tags). As described above, if relevant, elements from the HTC document tree may be injected into the tree of the primary document. The process then proceeds to step <b>706</b>, where parsing of the primary document continues.</p>
<p id="p-0113" num="0120">If the HTC document does include a viewLink, then step <b>902</b> branches to step <b>906</b>, where the Master Element sets a pointer to a document fragment. The document fragment may be, for example, the tree for the HTC behavior component. The behavior is then applied at step <b>908</b>. The process then proceeds to step <b>706</b>, where parsing of the primary document continues.</p>
<p id="p-0114" num="0121">While the invention is susceptible to various modifications and alternative constructions, a certain illustrated embodiment thereof is shown in the drawings and has been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product comprising:
<claim-text>a computer storage media having stored thereon, computer-executable instructions for implementing a method in a computer system, the method comprising:</claim-text>
<claim-text>receiving at a browser application, an HTML page for processing and displaying one or more HTML elements declared therein, the HTML page comprising an import tag, having an import instruction for importing element behavior into a declared namespace that is associated with the import tag, wherein the declared namespace is used to ensure that the element behavior has a unique qualifier;</claim-text>
<claim-text>upon an initial automatic parsing of the import tag within the HTML page, processing the import instruction to subsequently link an implementation of the element behavior with a custom HTML element of the one or more HTML elements defined within the body of the HTML page by using the declared namespace as part of a label for the custom element of the one or more elements, wherein the element behavior is a file or binary behavior component separate from the one or more elements within the HTML page and wherein the element behavior encapsulates specific functionality or behavior for the custom HTML element of the one or more HTML elements defined thereby; and</claim-text>
<claim-text>upon parsing of the import instruction, suspending one or more other threads, activities, or both, until the contents of the element behavior have been downloaded, and allowing the element behavior to be available declaratively to bind synchronously to the custom HTML element of the one or more HTML elements; and</claim-text>
<claim-text>prior to processing the custom HTML element of the one or more HTML elements, producing an instance of the element behavior making the specific functionality immediately and declaratively available;</claim-text>
<claim-text>upon further parsing of the HTML page, determining that the label for the custom HTML element of the one or more HTML elements comprises the declared namespace; and</claim-text>
<claim-text>based on the determining that the label for the custom HTML element of the one or more HTML elements comprises the declared namespace, attaching the instance of the element behavior to the custom HTML element of the one or more HTML elements, thereby synchronously binding the instance of the element behavior to the custom HTML element of the one or more elements such that: (i) the instance of the element behavior is permanently bound to the custom HTML element of the one or more HTML elements, and (ii) the custom HTML element is processed as if it were a non-custom HTML element.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A computer program product as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer storage media comprises system memory of a computing system.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. In a computer system, a computer program product that uses a markup language with a behavior component that enhances behavior of a custom HTML element, the computer program product for implementing a method for synchronously binding the behavior component to the custom HTML element, the computer program product comprising one or more computer readable storage devices and having stored thereon computer executable instructions that, when executed by a processor, cause the computer program product to:
<claim-text>receive at a browser application, a page for processing and displaying one or more HTML elements therein;</claim-text>
<claim-text>perform automatic initial processing of the page that includes the one or more HTML elements, by parsing the page and interpreting the page via the browser application, the page further comprising an import instruction to instantiate an element behavior component, which encapsulates specific functionality or behavior on the page for a custom HTML element of the one or more HTML elements;</claim-text>
<claim-text>upon the automatic initial processing of the import instruction, and before interpreting the custom HTML element of the one or more HTML elements, instantiate the element behavior component in order to synchronously bind the instantiated instance of the element behavior component to the custom HTML element of the one or more HTML elements by making the specific functionality or behavior immediately and declaratively available, wherein when the instantiated instance of the element behavior component is synchronously bound to the custom HTML element of the one or more HTML elements, the instantiated instance of the element behavior component is permanently bound to the custom HTML element of the one or more HTML elements such that the custom HTML element is processed as if it were a non-custom HTML element; and</claim-text>
<claim-text>upon processing of the custom HTML element of the one or more HTML elements, modify the initial behavior of the custom HTML element of the one or more HTML elements with the instance of the element behavior previously instantiated.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the element behavior component is a document fragment and the import instruction comprises a pointer to the document fragment.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the instantiation of the element behavior component comprises downloading the document fragment and creating an instance thereof prior to applying the functionality or behavior of the element behavior component to the custom HTML element of the one or more HTML elements.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the document fragment comprises content, and wherein the instantiation of the element behavior component, when parsing the page, comprises inserting the content into the page.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the custom HTML element of the one or more HTML elements is associated with a namespace in the page.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the element behavior component comprises a name for creating the custom HTML element that may be linked to the behavior component, and wherein a syntax for the custom HTML element comprises a reference to the name.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the syntax for the custom HTML element further comprises a reference to the namespace.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the element behavior component is instantiated in accordance with a thread, and wherein the import instruction causes at least one other thread to cease while instantiating the element behavior component.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the element behavior component comprises content, and wherein instantiating the element behavior component comprises inserting the content into the page.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein automatic initial processing of the page comprises interpreting the page, including creating a document structure, and wherein inserting the content into the page comprises inserting the document fragment into the documents structure.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein automatic initial processing of the page comprises:
<claim-text>interpreting the page, including creating a document structure, and wherein instantiating the element behavior component comprises:
<claim-text>creating a document fragment; and</claim-text>
<claim-text>inserting the document fragment into the document structure.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein automatic initial processing of the page comprises:
<claim-text>interpreting the page, including creating a document structure and wherein instantiating the instance of the element behavior component comprises:</claim-text>
<claim-text>creating a document fragment; and</claim-text>
<claim-text>maintaining the document fragment separate from the document structure.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the custom HTML element comprises a pointer to the document fragment.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method for synchronously binding a behavior component to a custom HTML element, the method comprising:
<claim-text>receiving, at a browser application, a page for processing;</claim-text>
<claim-text>displaying one or more HTML elements therein;</claim-text>
<claim-text>automatically processing the page that includes the one or more HTML elements, by parsing the page and interpreting the page via the browser application, the page further comprising an import instruction to instantiate an element behavior component, which encapsulates specific functionality or behavior on the page for a custom HTML element of the one or more HTML elements;</claim-text>
<claim-text>upon the automatic initial processing of the import instruction, and before interpreting the custom HTML element of the one or more HTML elements, instantiating the element behavior component to synchronously bind the instantiated instance of the element behavior component to the custom HTML element of the one or more HTML elements by making the specific functionality or behavior immediately and declaratively available, wherein when the instantiated instance of the element behavior component is synchronously bound to the custom HTML element of the one or more HTML elements, the instantiated instance of the element behavior component is permanently bound to the custom HTML element of the one or more HTML elements such that the custom HTML element is processed as if it were a non-custom HTML element; and</claim-text>
<claim-text>upon processing of the custom HTML element of the one or more HTML elements, modifying the initial behavior of the custom HTML element of the one or more HTML elements with the instance of the element behavior previously instantiated.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the element behavior component is a document fragment and the import instruction comprises a pointer to the document fragment.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the instantiation of the element behavior component comprises downloading the document fragment and creating an instance thereof prior to applying the functionality or behavior of the element behavior component to the custom HTML element of the one or more HTML elements.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the document fragment comprises content, and wherein the instantiation of the element behavior component, when parsing the page, comprises inserting the content into the page.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the custom HTML element of the one or more HTML elements is associated with a namespace in the page.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627187-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627187</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12663167</doc-number>
<date>20080512</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>GB</country>
<doc-number>0710766.7</doc-number>
<date>20070605</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>559</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714786</main-classification>
</classification-national>
<invention-title id="d2e71">Decoding of recursive convolutional codes by means of a decoder for non-recursive convolutional codes</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4517596</doc-number>
<kind>A</kind>
<name>Suzuki</name>
<date>19850500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>37524005</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6044116</doc-number>
<kind>A</kind>
<name>Wang</name>
<date>20000300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375265</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6141391</doc-number>
<kind>A</kind>
<name>Morelos-Zaragoza et al.</name>
<date>20001000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6760385</doc-number>
<kind>B1</kind>
<name>Goodson</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6973614</doc-number>
<kind>B1</kind>
<name>Hagenauer et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7770093</doc-number>
<kind>B2</kind>
<name>Divsalar et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714794</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7774689</doc-number>
<kind>B2</kind>
<name>Chiu et al.</name>
<date>20100800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714786</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8086943</doc-number>
<kind>B2</kind>
<name>Divsalar et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714794</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2005/0138535</doc-number>
<kind>A1</kind>
<name>Parthasarathy et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714796</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0247442</doc-number>
<kind>A1</kind>
<name>Orlik et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375138</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0287453</doc-number>
<kind>A1</kind>
<name>Balachandran et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714790</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>JP</country>
<doc-number>04-032317</doc-number>
<date>19920200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>JP</country>
<doc-number>05-244019</doc-number>
<date>19930900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>JP</country>
<doc-number>06-181443</doc-number>
<date>19940600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>JP</country>
<doc-number>2002-530991</doc-number>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Hindelang T. et al, &#x201c;<i>Channel Coding Techniques for Adaptive Multi Rate Speech Transmission</i>&#x201d;, IEEE International Conference on Communications, 2000, vol. 2, June 18, 2000, pp. 744-748, XP001208750, New Orleans,USA, ISBN, 978-0-7803-6284-0.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Ma Xiao et al, &#x201c;<i>Soft-Input Soft-Output Algorithms for Recursive Convolutional Codes</i>&#x201d;, Electronic Letters , IEE Stevenage, GB, vol. 35, No, 2, Jan. 21, 1999, pp. 1-2, XP006011671, ISSN: 0013-5194.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Joachin Hagenauer et al, &#x201c;Interative Decoding of Binary Block and Convolutional Codes&#x201d;, IEEE Transctions on Information Theory, US, vol. 42, No. 2, Mar. 1, 1996, XP011026493, ISSN: 0018-9448, pp. 429-430.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Bolinth, E., &#x201c;Algorithm to Convert Non-Systematic Feed-Forward Convolutional Codes of Rate R=K/N to Recursive Systematic Codes&#x201d;, International OFDM Workshop, Aug. 31, 2005, pp. 1-6, XP009064405.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Hagenauer, &#x201c;Source-Controlled Channel Decoding&#x201d;, IEEE Transactions on Communications, 43 Sep. 1995, No. 9, pp. 2549-2557.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>Japanese Office Action dated Mar. 27, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>34</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714786</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>24</number-of-drawing-sheets>
<number-of-figures>26</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100185923</doc-number>
<kind>A1</kind>
<date>20100722</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chappaz</last-name>
<first-name>David Franck</first-name>
<address>
<city>Milton</city>
<country>GB</country>
</address>
</addressbook>
<residence>
<country>GB</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chappaz</last-name>
<first-name>David Franck</first-name>
<address>
<city>Milton</city>
<country>GB</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>RatnerPrestia</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Cambridge Silicon Radio Limited</orgname>
<role>03</role>
<address>
<city>Cambridge</city>
<country>GB</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Riad</last-name>
<first-name>Amine</first-name>
<department>2113</department>
</primary-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/GB2008/001626</doc-number>
<kind>00</kind>
<date>20080512</date>
</document-id>
<us-371c124-date>
<date>20091204</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2008/149056</doc-number>
<kind>A </kind>
<date>20081211</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Embodiments of the invention provide a decoder arrangement (<b>400</b>), wherein a decoder (<b>420</b>) which is adapted to decode a bitstream which has been encoded with a non-recursive convolutional encoder is used to at least partially perform the decoding of a recursive convolutionally encoded bitstream, with pre-or post-processing (<b>410</b>) of the bitstream being performed to complete the decoding. More particularly, in one embodiment of the invention a recursively encoded bitstream is input into a conventional decoder (<b>420</b>) which is adapted to decode a non-recursively encoded bitstream. The resulting intermediate output does not represent the correct decoded bitstream, but can then be subject to a post-processing step in the form of a non-recursive encoding operation (<b>410</b>), which effectively completes the decoding operation and provides as its output the correct decoded bitstream. Both hard decision or soft decision inputs can be used.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="172.04mm" wi="390.31mm" file="US08627187-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="186.94mm" wi="144.61mm" orientation="landscape" file="US08627187-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="205.15mm" wi="156.55mm" orientation="landscape" file="US08627187-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="257.22mm" wi="175.09mm" orientation="landscape" file="US08627187-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="207.26mm" wi="114.30mm" orientation="landscape" file="US08627187-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="221.91mm" wi="124.71mm" orientation="landscape" file="US08627187-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="170.94mm" wi="173.06mm" orientation="landscape" file="US08627187-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="218.44mm" wi="120.82mm" orientation="landscape" file="US08627187-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="220.56mm" wi="134.96mm" orientation="landscape" file="US08627187-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="162.56mm" wi="173.74mm" orientation="landscape" file="US08627187-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="187.71mm" wi="142.24mm" orientation="landscape" file="US08627187-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="243.25mm" wi="143.00mm" orientation="landscape" file="US08627187-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="216.75mm" wi="132.50mm" orientation="landscape" file="US08627187-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="183.13mm" wi="188.04mm" orientation="landscape" file="US08627187-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="227.92mm" wi="167.47mm" orientation="landscape" file="US08627187-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="190.50mm" wi="145.03mm" orientation="landscape" file="US08627187-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="191.18mm" wi="179.32mm" orientation="landscape" file="US08627187-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="124.12mm" wi="140.21mm" orientation="landscape" file="US08627187-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="191.85mm" wi="115.99mm" orientation="landscape" file="US08627187-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="177.55mm" wi="138.01mm" orientation="landscape" file="US08627187-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="184.57mm" wi="155.87mm" orientation="landscape" file="US08627187-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="219.54mm" wi="143.00mm" orientation="landscape" file="US08627187-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="217.09mm" wi="138.77mm" orientation="landscape" file="US08627187-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="217.34mm" wi="173.65mm" orientation="landscape" file="US08627187-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="207.60mm" wi="167.64mm" orientation="landscape" file="US08627187-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">The present application is the U.S. national phase of PCT International Patent Application No. PCT/GB2008/001626, filed May 12, 2008, published in English on Dec. 11, 2008, as WO 2008/149056 A1, which claims the benefit of U.K. Patent Application No. 0710766.7, filed Jun. 5, 2007. The disclosure of the above-referenced applications are hereby incorporated by reference in their entireties into the present disclosure.</p>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">The present invention relates to a decoder arrangement for decoding a bitstream which has been coded with a recursive convolutional encoder, but which is able to make use of a decoder adapted for decoding a non-recursive code.</p>
<heading id="h-0003" level="1">BACKGROUND TO THE INVENTION AND PRIOR ART</heading>
<p id="p-0004" num="0003">Within a typical digital communications system, information is represented as a sequence of binary bits. To transmit the information, the binary bits are modulated onto an analogue signal waveform, and transmitted over a telecommunications channel. The communication channel will typically introduce noise and interference that corrupt the transmitted signal. At the receiver, the corrupted received signal is mapped back into the digital domain, but due to the introduced noise, bit errors may result.</p>
<p id="p-0005" num="0004">In order to compensate for bit errors, channel coding is often used in digital communications systems to allow for error detection and correction to occur. Channel coding is most often accomplished by selectively introducing redundant bits into the transmitted bitstream. These additional bits allow detection and correction of bit errors in a received datastream. Using channel coding to obtain this effect, however, leads to a reduction in data rate, or an increase in the bandwidth required to transmit the same amount of information.</p>
<p id="p-0006" num="0005">There are two main types of channel codes, being block codes and convolutional codes. Convolutional codes are one of the most widely used channel codes in practical communications systems. Convolutional codes are commonly specified by three parameters, being the number of output bits n, the number of input bits k, and the number of memory registers m. The ratio between the number of input bits and the number of output bits is called the code rate r. Typically in order to introduce redundancy into the coded bitstream; the number of output bits will be greater than the number of input bits.</p>
<p id="p-0007" num="0006">There are basically two types of convolutional encoder already known in the art. <figref idref="DRAWINGS">FIG. 1</figref> illustrates a first kind of encoder, which is a non-recursive encoder, wherein the output bits are dependent upon the present input bit and the previous input bits. More particularly, <figref idref="DRAWINGS">FIG. 1</figref> illustrates a rate 1/2 encoder, such that two output bits are output for every input bit.</p>
<p id="p-0008" num="0007">More particularly, the 1/2 rate non-recursive encoder <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref> comprises an input line <b>116</b> which inputs a bitstream x<sub>n </sub>to be encoded into the encoder. One bit delays <b>118</b> and <b>120</b> are provided, such that at the input to the encoder the present bit is represented as u<sub>n</sub>, the previous bit is represented after delay <b>118</b> as bit u<sub>n&#x2212;1</sub>, and the second previous bit which had undergone both delays <b>118</b> and <b>120</b> is represented as u<sub>n&#x2212;2</sub>. A first modulo-2 adder <b>112</b> is provided, as is a second modulo-2 adder <b>114</b>. The respective outputs <b>130</b> and <b>132</b> from the adders <b>112</b> and <b>114</b> output the coded bitstreams y<sub>1,n </sub>and y<sub>2,n</sub>. As mentioned, because this is a rate 1/2 encoder, two output bits are obtained for every input bit.</p>
<p id="p-0009" num="0008">Typically, as is well known, the configuration of a convolutional encoder is defined by what is known as a set of generator polynomials G=(g<sub>1</sub>, g<sub>2</sub>, . . . , g<sub>n</sub>) (referred to further herein as the generator matrix). More particularly, each generator polynomial g<sub>1</sub>, g<sub>2</sub>, etc. defines the inputs to the modulo-2 adders, in terms of which of the present and previous bits are input to the adders for modulo-2 addition to then be performed thereon, to produce an output. Within the example 1/2 rate non-recursive encoder of <figref idref="DRAWINGS">FIG. 1</figref>, the first generator polynomial is:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1</sub>(<i>D</i>)=1<i>+D+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
which means that the first modulo-2 adder <b>112</b> outputting the first coded output bit on output line <b>130</b> receives both the present input bit, plus the input bit u<sub>n&#x2212;1 </sub>subject to a first delay, plus the previous input bit u<sub>n&#x2212;2 </sub>subject to both delays <b>118</b> and <b>120</b>. In <figref idref="DRAWINGS">FIG. 1</figref> it can be seen that line <b>122</b> connects the present input bit to the modulo-2 adder <b>112</b>, whereas line <b>124</b> connects the previous bit u<sub>n&#x2212;1 </sub>to the adder, and line <b>126</b> connects the bit before that u<sub>n&#x2212;2 </sub>to the adder.
</p>
<p id="p-0010" num="0009">A generator polynomial is provided for each modulo-2 adder, and hence it will be seen that in <figref idref="DRAWINGS">FIG. 1</figref> a second generator polynomial g<sub>2 </sub>is provided, wherein:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2</sub>(<i>D</i>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0011" num="0010">This means, as can be seen, that the second modulo-2 adder <b>114</b> receives the input bit u<sub>n </sub>via line <b>128</b>, as well as the twice delayed previous bit u<sub>n&#x2212;2 </sub>via line <b>126</b>. The adder <b>114</b> performs modulo-2 addition on these inputs, to provide a second output bit for every input bit. As is known, to encode an input bitstream using a non-recursive encoder of the type shown in <figref idref="DRAWINGS">FIG. 1</figref>, the bitstream is input into the encoder one bit at a time, and the two coded bitstreams are then read out from the outputs <b>130</b> and <b>132</b>. Typically, for transmission the two coded bitstreams would be interleaved to form a single bitstream.</p>
<p id="p-0012" num="0011">A second type of convolutional encoder is shown in <figref idref="DRAWINGS">FIG. 2</figref>. This is known as a recursive convolutional encoder, wherein the coded output bits are dependent not only on the current input bit, but also on previous &#x201c;state&#x201d; bits. Such &#x201c;state&#x201d; bits are, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, bits taken from within the internal processing of the encoder (i.e. bit u<sub>n&#x2212;1 </sub>in <figref idref="DRAWINGS">FIG. 2</figref>) and which are then fed back to the input of the encoder. Due to the feed back of previous &#x201c;state&#x201d; bits to the recursive encoder input, the set of generator polynomials of a recursive convolutional encoder is typically of the form:&#x2014;</p>
<p id="p-0013" num="0012">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mrow>
  <mi>G</mi>
  <mo>=</mo>
  <mrow>
    <mo>(</mo>
    <mrow>
      <mfrac>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>1</mn>
        </mrow>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>0</mn>
        </mrow>
      </mfrac>
      <mo>,</mo>
      <mfrac>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>2</mn>
        </mrow>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>0</mn>
        </mrow>
      </mfrac>
      <mo>,</mo>
      <mi>&#x2026;</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>,</mo>
      <mfrac>
        <mi>gm</mi>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>0</mn>
        </mrow>
      </mfrac>
    </mrow>
    <mo>)</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0014" num="0013">An example recursive convolutional encoder is shown in <figref idref="DRAWINGS">FIG. 2</figref>. Here the recursive convolutional encoder <b>210</b> comprises an input line <b>216</b> upon which an input bitstream x<sub>n </sub>to be encoded is input. The input <b>216</b> feeds into a first modulo-2 adder <b>234</b>, which provides an output line wherein the result of the modulo-2 addition performed thereby is provided as bit u<sub>n</sub>. u<sub>n </sub>is input to a first delay <b>218</b> which has an output line <b>224</b> on which a first delayed bit u<sub>n&#x2212;1 </sub>is provided which inputs into a second delay <b>220</b>, to provide a second delayed bit u<sub>n&#x2212;2</sub>, on line <b>226</b>. A second modulo-2 adder <b>212</b> is provided, the output of which on line <b>230</b> provides a first coded output bit, and a third modulo-2 adder <b>214</b> is also provided, the output of which on line <b>232</b> provides the second coded output bit, for every input bit. As can be seen, the output of the first modulo-2 adder <b>234</b> is input into the second modulo-2 adder <b>212</b> via line <b>222</b>, and into the third modulo-2 adder <b>214</b>, via line <b>228</b>. Additionally, the second modulo-2 adder <b>212</b> receives the first delayed bit u<sub>n&#x2212;1 </sub>via line <b>224</b>, as well as the second delayed bit u<sub>n&#x2212;2</sub>, via line <b>226</b>. The third modulo-2 adder <b>214</b> does not receive the first delayed bit u<sub>n&#x2212;1</sub>, but does receive the second delayed input bit u<sub>n&#x2212;2</sub>, via line <b>226</b>. To provide the recursive operation, the first modulo-2 adder <b>234</b>, in addition to receiving the input bitstream, also receives the first delayed bit u<sub>n&#x2212;1</sub>, via line <b>236</b>. In view of the above arrangement, and as shown in <figref idref="DRAWINGS">FIG. 2</figref>, the generator polynomials for the recursive encoder shown in <figref idref="DRAWINGS">FIG. 2</figref> are:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>0(<i>D</i>)=1<i>+D; </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>1(<i>D</i>)=1<i>+D+D</i><sup>2</sup>; and<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>2(<i>D</i>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0015" num="0014">The encoders of <figref idref="DRAWINGS">FIGS. 1 and 2</figref> relate to rate 1/2 codes i.e. one input bit produces two output bits. More generally however, rate k/n codes are also possible, where k is greater than or equal to 1, and n is greater than or equal to k such that k input bits are encoded into n output bits. Such codes are defined by a set of generator polynomials, represented as a matrix with k rows and n columns, as shown below:&#x2014;</p>
<p id="p-0016" num="0015">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>RCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mi>n</mi>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mi>n</mi>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0017" num="0016">Generally speaking, within the above generator matrix, g<sub>k,n </sub>represents how the kth input contributes to the nth output, whereas g<sub>k,0 </sub>represents the feedback connection for the kth input. Each input may have a different feedback polynomial, as shown.</p>
<p id="p-0018" num="0017">An example rate 2/3 recursive encoder typical of those known in the art is shown in <figref idref="DRAWINGS">FIG. 3</figref>. Here, the rate 2/3 recursive encoder <b>710</b> has two inputs <b>712</b> and <b>714</b>, on which are respectively received input bitstreams x<sub>1,n </sub>and x<sub>2,n</sub>. The first input line <b>712</b> inputs the first bitstream x<sub>1,n </sub>into a first modulo-2 adder <b>716</b>, which provides an output state bit u<sub>1,n </sub>to a first one bit delay <b>720</b>. Additionally, first feed forward line <b>736</b> feeds the state bit u<sub>1,n </sub>to a second modulo-2 adder <b>730</b>, whereas second feed forward line <b>734</b> feeds the state bit u<sub>1,n </sub>to a third modulo-2 adder <b>728</b>. The output of the one bit delay <b>720</b> is a second state bit u<sub>1,n&#x2212;1</sub>, which is fed by feed forward line <b>740</b> to the third modulo-2 adder <b>728</b>, and also by feedback line <b>738</b> to the first modulo adder <b>716</b>. The second state bit u<sub>1,n&#x2212;1 </sub>is also fed to a second delay <b>722</b>, the output of which is third state bit u<sub>1,n&#x2212;2</sub>, which is fed to both the second modulo-2 adder <b>730</b>, and the third modulo-2 adder <b>728</b> respectively. Thus, with respect to the state bits, the first state bit u<sub>1,n </sub>is the result of the modulo-2 addition of the present input bit x<sub>1,n </sub>and the second state bit u<sub>1,n&#x2212;1</sub>; the second state bit u<sub>1,n&#x2212;1 </sub>is the one bit delayed version of the first state bit u<sub>1,n</sub>; and the third state bit u<sub>1,n&#x2212;2 </sub>is the one bit delayed version of the second state bit u<sub>1,n&#x2212;1</sub>. The third modulo-2 adder <b>728</b> outputs a first output bit y<sub>1,n </sub>on output line <b>750</b>, being the result of the modulo-2 addition of each of the first, second and third state bits fed to the third modulo-2 adder <b>728</b>.</p>
<p id="p-0019" num="0018">Turning to the second input line <b>714</b>, on which input bits x<sub>2,n </sub>are input, a fourth modulo-2 adder <b>718</b> receives the input bitstream x<sub>2,n </sub>on line <b>714</b>, and outputs a fourth state bit u<sub>2,n </sub>to a third one bit delay <b>724</b>, and also, via feed forward line <b>746</b>, to a fifth modulo-2 adder <b>732</b>. The one bit delay <b>724</b> outputs a fifth state bit u<sub>2,n&#x2212;1 </sub>to a fourth one bit delay <b>726</b>, and also, via feed forward line <b>742</b> to the second modulo-2 adder <b>730</b>. The second one bit delay <b>726</b> outputs a sixth, state bit u<sub>2,n&#x2212;2 </sub>via line <b>748</b> to the second modulo-2 adder <b>730</b>, and the fifth modulo-2 adder <b>732</b>. Additionally, the sixth state bit u<sub>2,n&#x2212;2 </sub>is also fed back via feedback line <b>744</b> to the fourth modulo-2 adder <b>718</b> at input <b>714</b>. The second modulo-2 adder <b>730</b> therefore receives as input the following state bits: u<sub>1,n</sub>, u<sub>1,n&#x2212;2</sub>, u<sub>2,n&#x2212;1</sub>, and u<sub>2,n&#x2212;2</sub>. Output line <b>752</b> is provided from the second modulo adder <b>730</b>, on which is output an output bitstream y<sub>2,n</sub>. The fifth modulo-2 adder <b>732</b> receives the state bit u<sub>2,n </sub>and u<sub>2,n&#x2212;2 </sub>as inputs, and outputs on line <b>754</b> the third output bitstream y<sub>3,n</sub>. With such an arrangement therefore, for each pair of input bits x<b>1</b>,n and x<b>2</b>,n, three output bits y<sub>1,n</sub>, y<sub>2,n</sub>, and y<sub>3,n </sub>are output. Additionally, in view of the above arrangement, and as shown in <figref idref="DRAWINGS">FIG. 3</figref>, the generator polynomials for the recursive rate 2/3 encoder shown in <figref idref="DRAWINGS">FIG. 3</figref> are as follows:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,1</sub>(<i>D</i>)=1<i>+D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,2</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,3</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,1</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,2</sub>(<i>D</i>)=<i>D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,3</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,0</sub>(<i>D</i>)=1<i>+D</i>; and<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,0</sub>(<i>D</i>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0020" num="0019">Recursive encoders when compared to non-recursive encoders, whilst slightly more complicated, produce a coded output which has more &#x201c;weight&#x201d; i.e. has better error detection and correction properties. Non-recursive convolutional codes have conventionally been used in communications systems such as GSM or the like, but recently there has been introduced a requirement for recursive convolutional codes, because of their better performance characteristics. Conventionally, for a receiver to be able to decode both a non-recursive convolutionally encoded bitstream as well as a recursive convolutionally encoded bitstream, two separate decoders are required, one for the non-recursively coded bitstream, and another for the recursively coded bitstream. Two decoders are typically required because the branch labels in the state transition diagram are different for recursive and non-recursive encoders. Thus, to decode a non-recursively encoded bitstream a decoder particularly adapted to the target non-recursive encoder which produced the bitstream has conventionally been required, and likewise, to decode a recursively encoded bitstream, a decoder particularly adapted to the operation of the target recursive encoder which produced the bitstream has been required. Where the decoders are being implemented in hardware, for example on an integrated circuit, this leads to more silicon area being required, to implement the two decoders. Clearly, therefore, it would be beneficial if the requirement to have a particular decoder for every particular type of convolutional encoding could be removed, and a single, or at least a reduced subset, of decoders provided which can be used to decode both recursive and non-recursively encoded bitstreams.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0021" num="0020">To address the above embodiments of the invention provide a decoder arrangement, wherein a decoder which is adapted to decode a bitstream which has been encoded with a non-recursive convolutional encoder is used to at least partially perform the decoding of a recursive convolutionally encoded bitstream, with pre- or post-processing of the bitstream being performed to complete the decoding. More particularly, in one embodiment of the invention a recursively encoded bitstream is input into a conventional decoder which is adapted to decode a non-recursively encoded bitstream. The resulting intermediate output does not represent the correct decoded bitstream, but can then be subject to a post-processing step in the form of a non-recursive encoding operation, which effectively completes the decoding operation and provides as its output the correct decoded bitstream. In another embodiment, instead of the non-recursive encoding operation being performed as a post-processing step, it is performed as a pre-processing step, the output of which is then fed to the conventional decoder. The output of the conventional decoder is then the correct decoded bitstream. In a further embodiment, a soft decision decoder can be used adapted to decode a bitstream which has been encoded with a non-recursive encoder, and a pre- or post-processing step performed adapted to operate on soft decisions, but which is analogous to a hard decision non-recursive encoding, operation. Thus, in the further embodiment the principles of the invention can also be applied to provide a soft decision decoder, for use where soft-decision symbol detection is used in a receiver.</p>
<p id="p-0022" num="0021">In view of the above, from a first aspect the present invention provides an apparatus for decoding a recursive convolutional encoded bitstream, comprising: a decoder adapted to decode a non-recursive convolutional encoded bitstream; and a post-processing element arranged to receive the output of the decoder and apply a post-processing operation thereto; the decoder and the post-processing element operable together in turn to decode a received recursive convolutional encoded bitstream to provide a decoded bitstream.</p>
<p id="p-0023" num="0022">The advantage of the invention of the first aspect is that the same decoder can be used to decode both non-recursive convolutional codes and, with the post-processing step recursive convolutional codes. It is therefore no longer necessary to provide a separate dedicated decoder for both recursive and non-recursive codes.</p>
<p id="p-0024" num="0023">In a preferred embodiment the decoder receives the recursive convolutional encoded bitstream and partially decodes the bitstream to provide an intermediately decoded bitstream; and the post-processing element receives the intermediately decoded bitstream and applies a post-processing operation thereto to provide the decoded bitstream. The preferred embodiment has the advantage that only one post-processing element is required per input bit stream of a target recursive convolutional encoder (generally there are k of them) to process the output of the decoder, and hence hardware implementations particularly are reduced in complexity.</p>
<p id="p-0025" num="0024">In the preferred embodiment the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder having generator polynomials:</p>
<p id="p-0026" num="0025">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
</mrow>
</math>
</maths>
<br/>
and the decoder is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder having generator polynomials
</p>
<p id="p-0027" num="0026">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NRCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where k is greater than or equal to 1, and n is greater than or equal to k. In this case, k represents the number of inputs to the encoder, and n represents the number of outputs, so that the ratio k/n is the rate of the encoder. The ratio k/n is always lower than or equal to 1.
</p>
<p id="p-0028" num="0027">Within the preferred embodiment the post-processing element is a non-recursive encoder having generator polynomials:</p>
<p id="p-0029" num="0028">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NR</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0030" num="0029">Such an arrangement is applicable to hard decision symbols, and having the post-processing as such a non-recursive encoding operation ensures that as accurate a decoding as possible is obtained.</p>
<p id="p-0031" num="0030">From a second aspect there is provided an apparatus for decoding a recursive convolutional encoded bitstream, comprising: a pre-processing element arranged to receive the recursive convolutional encoded bitstream and to apply a pre-processing operation thereto; and a decoder adapted to decode a non-recursive convolutional encoded bitstream; the pre-processing element and the decoder operable together in turn to decode a received recursive convolutional encoded bitstream to provide a decoded bitstream.</p>
<p id="p-0032" num="0031">The advantage of the invention of the second aspect is the same as that of the first aspect in that the same decoder can be used to decode both non-recursive convolutional codes and, with the pre-processing element, recursive convolutional codes. It is therefore no longer necessary to provide a separate dedicated decoder for both recursive and non-recursive codes.</p>
<p id="p-0033" num="0032">In an embodiment of the second aspect the at least one pre-processing element receives the recursive convolutional encoded bitstream, and applies a pre-processing operation thereto to provide an intermediately decoded bitstream; and wherein the decoder receives the intermediately decoded bitstream, and completes the decoding to provide the decoded bitstream. Preferably there is provided a plurality of pre-processing elements, being one for each coded output bitstream from a target recursive convolutional encoder which produced the recursive convolutional encoded bitstream, the outputs of each pre-processing element being fed to said decoder as inputs. However, as described in the embodiments, the plurality of pre-processing elements can together be considered to be a single pre-processing element having a combined operation. The alternative embodiment can be readily implemented in software, where the pre-processing element can be represented by a single look-up table.</p>
<p id="p-0034" num="0033">Preferably in the embodiment according to the second aspect, the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder having generator polynomials</p>
<p id="p-0035" num="0034">
<maths id="MATH-US-00006" num="00006">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
  <mi>and</mi>
</mrow>
</math>
</maths>
</p>
<p id="p-0036" num="0035">the decoder is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder having generator</p>
<p id="p-0037" num="0036">
<maths id="MATH-US-00007" num="00007">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>polynomials</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.8em" height="0.8ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NRCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where k is greater than or equal to 1, and n is greater than or equal to k. In this case, as in the first aspect, k represents the number of inputs to the encoder, and n represents the number of outputs, so that the ratio k/n is the rate of the encoder.
</p>
<p id="p-0038" num="0037">In one embodiment of the second aspect the pre-processing element is a non-recursive encoder having a generator matrix of n columns and n rows of the form:</p>
<p id="p-0039" num="0038">
<maths id="MATH-US-00008" num="00008">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NR</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0040" num="0039">Such an arrangement is particularly adapted to operate on hard decision symbols, and ensures that as accurate a decoding as possible is obtained. Note that in this embodiment of the second aspect the recursive encoded bitstream has been generated by a recursive encoder having identical feedback polynomials to each input, and hence the generator polynomials of the non-recursive encoder used as the pre-processing element are identical.</p>
<p id="p-0041" num="0040">In alternative embodiments the recursively encoded bitstream is represented by soft-decision symbols. Within such embodiments the pre-processing element or post-processing element, as appropriate, comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein the or each summer is arranged to output an output according to the following:</p>
<p id="p-0042" num="0041">
<maths id="MATH-US-00009" num="00009">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mn>1</mn>
            <mo>+</mo>
            <msup>
              <mi>e</mi>
              <mrow>
                <msub>
                  <mi>&#x3b1;</mi>
                  <mi>n</mi>
                </msub>
                <mo>+</mo>
                <msub>
                  <mi>&#x3b1;</mi>
                  <mrow>
                    <mi>n</mi>
                    <mo>-</mo>
                    <mi>k</mi>
                  </mrow>
                </msub>
              </mrow>
            </msup>
          </mrow>
          <mrow>
            <msup>
              <mi>e</mi>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
            </msup>
            <mo>+</mo>
            <msup>
              <mi>e</mi>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </msup>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
Note: rather than nesting several &#x3a3; operators with 2 inputs, we can also use one, or combinations of generalised &#x3a3; operators with p inputs:
</p>
<p id="p-0043" num="0042">
<maths id="MATH-US-00010" num="00010">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>&#x3b1;</mi>
                  <mrow>
                    <mi>n</mi>
                    <mo>-</mo>
                    <msub>
                      <mi>k</mi>
                      <mi>i</mi>
                    </msub>
                  </mrow>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0044" num="0043">The advantages of such embodiments are that soft decision symbol representations can be used, leading to a more accurate and reliable decoding.</p>
<p id="p-0045" num="0044">In alternative soft decision embodiments the pre-processing element or post-processing element, as appropriate, comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein the or each summer is arranged to output an output according to the following:</p>
<p id="p-0046" num="0045">
<maths id="MATH-US-00011" num="00011">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>&#xf603;</mo>
      <msub>
        <mi>&#x3b1;</mi>
        <mrow>
          <mi>n</mi>
          <mo>-</mo>
          <msub>
            <mi>k</mi>
            <mi>i</mi>
          </msub>
        </mrow>
      </msub>
      <mo>&#xf604;</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0047" num="0046">Note that there are p inputs, where the first delay k<sub>1 </sub>is possibly 0 so that &#x3b1;(n&#x2212;k<sub>1</sub>) is possibly &#x3b1;(n).</p>
<p id="p-0048" num="0047">Such embodiments provide the further advantage that the Sigma function is much reduced in complexity, leading to easier implementation, either in hardware or software.</p>
<p id="p-0049" num="0048">Within the embodiments the decoder is preferably one selected from the group comprising: a sequential decoder; and a maximum likelihood decoder. More particularly, where the decoder is a sequential decoder then the decoder is preferably a Fano decoder. Alternatively, where the decoder is a maximum likelihood decoder then the decoder is preferably a Viterbi decoder. Use of the Fano decoder or the Viterbi decoder is advantageous as both are mature technologies which are well understood with predictable behaviours. Other decoder arrangements (Log-MAP, MAP etc.) are also known in the art, any of which may be used.</p>
<p id="p-0050" num="0049">From a third aspect the invention also provides a method for decoding a recursive convolutional encoded bitstream, comprising applying a decoding operation to the recursive convolutional encoded bitstream, followed by a post-processing operation, wherein the decoding operation is arranged to decode a non-recursive convolutional encoded bitstream; the decoding operation and the post-processing operation operable together in turn to decode the received recursive convolutional encoded bitstream to provide a decoded bitstream. The same advantages as described previously in respect of the first aspect are obtained.</p>
<p id="p-0051" num="0050">Preferably, within embodiments of the third aspect the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder having generator</p>
<p id="p-0052" num="0051">
<maths id="MATH-US-00012" num="00012">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <mi>polynomials</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mrow>
        <msub>
          <mi>G</mi>
          <mi>RCE</mi>
        </msub>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mi>D</mi>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
  <mi>and</mi>
</mrow>
</math>
</maths>
</p>
<p id="p-0053" num="0052">the decoding operation is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder having generator</p>
<p id="p-0054" num="0053">
<maths id="MATH-US-00013" num="00013">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>polynomials</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.8em" height="0.8ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NRCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where k is greater than or equal to 1, and n is greater than or equal to k In this case, as in the first aspect, k represents the number of inputs to the encoder, and n represents the number of outputs, so that the ratio k/n is the rate of the encoder.
</p>
<p id="p-0055" num="0054">In the particularly preferred embodiments the post-processing operation is a non-recursive encoding operation having generator polynomials:</p>
<p id="p-0056" num="0055">
<maths id="MATH-US-00014" num="00014">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NR</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0057" num="0056">This ensures that as accurate a decoding as possible is obtained. Such an arrangement is particularly suitable for hard decision symbols.</p>
<p id="p-0058" num="0057">From a fourth aspect the invention also provides a method for decoding a recursive convolutional encoded bitstream, comprising a pre-processing operation arranged to receive the recursive convolutional encoded bitstream and to apply a pre-processing operation thereto followed by a decoding operation, the decoding operation adapted to decode a non-recursive convolutional encoded bitstream; wherein the pre-processing operation and the decoding operation are operable together in turn to decode the received recursive convolutional encoded bitstream to provide a decoded bitstream. The same advantages as previously described in respect of the second aspect are obtained.</p>
<p id="p-0059" num="0058">Within embodiments of the fourth aspect, the recursive convolutional encoded bitstream has preferably been encoded by a recursive convolutional encoder having generator</p>
<p id="p-0060" num="0059">
<maths id="MATH-US-00015" num="00015">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <mi>polynomials</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mrow>
        <mi>G</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mi>D</mi>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
  <mi>and</mi>
</mrow>
</math>
</maths>
</p>
<p id="p-0061" num="0060">the decoding operation is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder having generator</p>
<p id="p-0062" num="0061">
<maths id="MATH-US-00016" num="00016">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>polynomials</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.8em" height="0.8ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>G</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where k is greater than or equal to 1, and n is greater than or equal to k. Thus, it will be seen that in embodiments of the fourth aspect the feedback polynomials of the target recursive encoder are identical to each other.
</p>
<p id="p-0063" num="0062">In preferred embodiments of the fourth aspect the pre-processing operation is a non-recursive encoding having generator matrix of n columns and n rows of the form:</p>
<p id="p-0064" num="0063">
<maths id="MATH-US-00017" num="00017">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NR</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0065" num="0064">Such operation ensures as accurate a decoding as possible. Moreover, the non-recursive encoding operation is particularly suitable for use with hard-decision input symbols.</p>
<p id="p-0066" num="0065">In other embodiments of the third or fourth aspects the recursively encoded bitstream is represented by soft-decision symbols. This allows for the additional accuracy and reliability of soft decision systems to be obtained.</p>
<p id="p-0067" num="0066">In one soft decision embodiment the pre-processing operation or post-processing operation, as appropriate, comprises receiving, a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and summing the soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</p>
<p id="p-0068" num="0067">
<maths id="MATH-US-00018" num="00018">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>e</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>e</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>e</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0069" num="0068">Or more generally:</p>
<p id="p-0070" num="0069">
<maths id="MATH-US-00019" num="00019">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>&#x3b1;</mi>
                  <mrow>
                    <mi>n</mi>
                    <mo>-</mo>
                    <msub>
                      <mi>k</mi>
                      <mi>i</mi>
                    </msub>
                  </mrow>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
to produce an output soft decision bitstream.
</p>
<p id="p-0071" num="0070">In another soft decision embodiment the pre-processing operation or post-processing operation, as appropriate, comprises receiving a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and processing the soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</p>
<p id="p-0072" num="0071">
<maths id="MATH-US-00020" num="00020">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>&#xf603;</mo>
      <msub>
        <mi>&#x3b1;</mi>
        <mrow>
          <mi>n</mi>
          <mo>-</mo>
          <msub>
            <mi>k</mi>
            <mi>i</mi>
          </msub>
        </mrow>
      </msub>
      <mo>&#xf604;</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
to produce an output soft decision bitstream. This latter embodiment has additional advantages in that the approximation for the sigma function leads to reduced implementation complexity, whether implemented in hardware or software.
</p>
<p id="p-0073" num="0072">Preferably the decoding step is one selected from the group comprising: a sequential decoding; and a maximum likelihood decoding. More preferably, where the decoding is a sequential decoding then the decoding preferably uses a Fano algorithm. Similarly, where the decoding is a maximum likelihood decoding then the decoding preferably uses a Viterbi algorithm. Other known decoding algorithms (e.g. MAP, Log-MAP etc.) may also be used.</p>
<p id="p-0074" num="0073">From a fifth aspect there is provided a software program or suite of software programs arranged such that when run on a processing device they cause the processing device to operate in accordance with the third or fourth aspect described above. Moreover, from a sixth aspect, there is also provided a computer readable storage medium storing a software program or at least one of the suite of software programs according to the fifth aspect. The computer readable storage medium may be any such medium known in the art, such as disk based media such as a hard disk, CD, DVD, or the like, or solid state media such as Flash memory.</p>
<p id="p-0075" num="0074">Further features and advantages of the invention will be apparent from the appended claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0076" num="0075">Further features and advantages of the present invention will become apparent from the following description of embodiments thereof, presented by way of example only, and by reference to the accompanying drawings, wherein like reference numerals refer to like parts, and wherein:&#x2014;</p>
<p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a rate 1/2 non-recursive convolutional encoder of the prior art;</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram illustrating a rate 1/2 recursive convolutional encoder of the prior art;</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating a rate 2/3 recursive convolutional encoder of the prior art;</p>
<p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram illustrating both non-recursive and recursive convolutional encoders for use in explaining the first embodiment of the invention;</p>
<p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram illustrating a first embodiment of the present invention;</p>
<p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram illustrating the steps performed according to a method of the first embodiment of the invention;</p>
<p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram illustrating both recursive and non-recursive convolutional encoders for the purposes of describing a second embodiment of the invention;</p>
<p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of a second embodiment of the invention;</p>
<p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. 9</figref> is a flow diagram illustrating the method performed by the second embodiment of the invention;</p>
<p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram of a third embodiment of the invention;</p>
<p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. 11</figref> is another block diagram of the third embodiment of the invention;</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 12</figref> is a block diagram illustrating both non-recursive and recursive convolutional encoders for use in explaining a fourth embodiment of the invention;</p>
<p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. 13</figref> is a block diagram of a fourth embodiment of the invention;</p>
<p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. 14</figref> is a flow diagram illustrating the steps performed according to a method of the fourth embodiment of the invention;</p>
<p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. 15</figref> is a block diagram illustrating both non-recursive and recursive convolutional encoders for the purposes of describing a fifth embodiment of the invention;</p>
<p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. 16</figref> is a block diagram of a fifth embodiment of the invention;</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 17</figref> is a flow diagram illustrating the steps performed by the fifth embodiment of the invention;</p>
<p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. 18</figref> is a diagram of a rate 1/1 non-recursive encoder used in embodiments of the invention;</p>
<p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. 19</figref> is a block diagram of a processing block arranged to process soft decision input data in further embodiments of the invention;</p>
<p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. 20</figref> is a block diagram of a sixth embodiment of the invention;</p>
<p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. 21</figref> is a block diagram of a seventh embodiment of the invention;</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 22(</figref><i>a</i>) is a block diagram of a non-recursive encoder according to a relatively complex generator polynomial;</p>
<p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. 22(</figref><i>b</i>) is a block diagram of a soft decision input processing block analagous to the non-recursive encoder of <figref idref="DRAWINGS">FIG. 22(</figref><i>a</i>);</p>
<p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. 23</figref> is a block diagram of a further embodiment of the invention, being a variant of the fourth embodiment;</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 24</figref> is a block diagram of a further embodiment of the invention, being another variant of the fourth embodiment;</p>
<p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. 25</figref> is a diagram illustrating how hard decision and soft decision elements can be combined to provide further post-processing embodiments of the invention; and</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 26</figref> is a diagram illustrating how hard decision and soft decision elements can be combined to provide further pre-processing embodiments of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DESCRIPTION OF THE EMBODIMENTS</heading>
<p id="p-0104" num="0103">Before describing the structure and operation of a first embodiment of the present invention, first consider again the recursive convolutional encoder <b>210</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>. When comparing the recursive encoder <b>210</b> with the non-recursive encoder <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>, it will be seen that the only difference between the two encoders is the provision of the feedback line <b>236</b>, and the first modulo-2 adder <b>234</b>. Moreover, as shown in <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, the generator polynomials g<b>1</b> and g<b>2</b> are identical. The recursive encoder then adds in the additional generator polynomial g<b>0</b>, as part of the feedback loop.</p>
<p id="p-0105" num="0104">When one considers the recursive convolutional encoder with respect to the non-recursive convolutional encoder as set out above, it becomes apparent that the recursive encoder can be thought of as having a (virtual) recursive part, and a (virtual) non-recursive part. <figref idref="DRAWINGS">FIG. 4</figref> illustrates such a representation of the recursive encoder, provided with a recursive part <b>310</b>, and a non-recursive part <b>110</b>. As will be seen, the non-recursive part <b>110</b> is identical to the non-recursive encoder <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The recursive part <b>310</b> comprises an input line <b>320</b> receiving the input bitstream x<sub>n </sub>to be coded, which is input into a first modulo-2 adder <b>312</b>. A single delay <b>314</b> is provided, the output bit of which, u<sub>n&#x2212;1 </sub>is fed back via line <b>316</b> to a second input of the modulo-2 adder <b>312</b>. The output of the modulo-2 adder is then both input into the delay <b>314</b>, and output to the non-recursive part of the encoder <b>110</b>, as an input thereto, on output line <b>318</b>. The recursive part of the encoder therefore represents a rate 1/1 recursive encoder, having generator matrix:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>G</i>=(1<i>/g</i>0), where<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>0(<i>D</i>)=1<i>+D </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0106" num="0105">The output bitstream from the recursive part, output on line <b>318</b> to the non-recursive part <b>110</b> can therefore be thought of as a recursively convolutionally encoded bitstream, encoded at rate 1/1 i.e. one output bit for every input bit. This is then fed into the rate 1/2 non-recursive convolutional encoder part <b>110</b>.</p>
<p id="p-0107" num="0106">When considering the recursive convolutional encoder as having a (virtual) recursive part and a non-recursive part as set out in <figref idref="DRAWINGS">FIG. 4</figref>, the present inventor realised that in order to decode a bitstream encoded by a recursive encoder a multiple step decoding operation could be performed which essentially reversed the above described (virtual) stages of the coding. That is, if, as shown in <figref idref="DRAWINGS">FIG. 4</figref>, a recursive encoder can be virtually represented as having a recursive encoding stage, and a non-recursive encoding stage, then to decode the encoded bitstream from such an arrangement one can apply appropriate decoding stages i.e. a decoding stage to decode the non-recursive encoding, and a decoding stage to decode the recursive encoding. Embodiments of the invention are based on this realisation.</p>
<p id="p-0108" num="0107">With reference to <figref idref="DRAWINGS">FIG. 5</figref>, therefore, a decoding arrangement <b>400</b> according to a first embodiment of the present invention will now be described.</p>
<p id="p-0109" num="0108">More particularly, the decoding arrangement <b>400</b> of the first embodiment comprises a first decoding part <b>420</b>, and a second decoding part <b>410</b>. The first decoding part <b>420</b> is a conventional convolutional decoder, which is adapted to decode a bitstream which has been encoded by a non-recursive convolutional encoder of known generator polynomials. More particularly, the decoder <b>420</b> is adapted to decode a bitstream which has been encoded by a non-recursive encoder having the same characteristics and generator polynomials as the (virtual) non-recursive part of the target recursive convolutional encoder which the decoding arrangement <b>400</b> is intended to be able to decode. Therefore, the decoder <b>420</b> has two input lines <b>424</b> and <b>426</b>, to receive the two streams of coded output bits. Where the output bits from the encoder have been interleaved into a single bitstream for transmission, these bits are de-interleaved into the individual coded output streams y<sub>1,n </sub>and y<sub>2,n </sub>prior to being input into the decoder <b>420</b>. In other embodiments described later, such de-interleaving is not required.</p>
<p id="p-0110" num="0109">The operation of the decoder <b>420</b> is conventional, and will not be described herein. The operation of various types of convolutional decoders is well known in the art. For example, the tutorial available at the following URL: http://www.complextoreal.com/chapters/convo.pdf, which is incorporated herein by reference, provides further explanation, if required.</p>
<p id="p-0111" num="0110">The conventional decoder <b>420</b> may use any decoding algorithm already known in the art, such as, for example, a sequential decoding process, or a maximum likelihood decoding process. Where a sequential decoding process is used, preferably the Fano algorithm is used. Where a maximum likelihood decoding process is used, preferably the Viterbi algorithm is used. Both of these algorithms are well known in the art.</p>
<p id="p-0112" num="0111">The decoder <b>420</b> in the first embodiment is preferably a hard decision output decoder, in that it outputs, for each pair of coded input bits, a single output bit (as opposed to a soft decision decoder, which may output a series of probabilities). Embodiments utilising soft-decision inputs/soft decision output decoders will be described later. The output bit u<sub>n </sub>from the decoder <b>420</b> is input on input line <b>422</b> to the second decoding stage <b>410</b>, which in this case is a post processing stage in the form of a non-recursive convolutional encoder. More particularly, the second decoding stage <b>410</b> comprises a non-recursive convolutional encoder having a delay <b>412</b>, and a single modulo-2 adder <b>414</b>. The bitstream u<sub>n </sub>output from the conventional decoder <b>420</b> on line <b>422</b> is input into the non-recursive encoder <b>410</b>, and fed to the delay <b>412</b>. Additionally, the input is also fed via line <b>416</b> to a first input of the modulo-2 adder <b>414</b>. A second input of the modulo-2 adder accepts, on line <b>418</b>, the output of the delay <b>412</b> i.e. the delay bit u<sub>n&#x2212;1</sub>, delayed by 1 bit period. The modulo-2 adder <b>414</b> outputs the decoded bitstream x<sub>n </sub>on output line <b>428</b>.</p>
<p id="p-0113" num="0112">Thus, the second decoding part <b>410</b> can be considered, as mentioned, a non-recursive convolutional encoder, but having rate 1/1 i.e. 1 bit is output for every bit which is input. Moreover, as will be seen from <figref idref="DRAWINGS">FIG. 5</figref>, the generator polynomial for the non-recursive encoder <b>410</b> is defined by the generator polynomial of the recursive part of the target recursive encoder which the decoding arrangement <b>400</b> is intending to decode. That is, with reference to <figref idref="DRAWINGS">FIG. 4</figref>, given that the generator matrix for the recursive part of the recursive encoder was:</p>
<p id="p-0114" num="0113">
<maths id="MATH-US-00021" num="00021">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>G</mi>
    <mo>=</mo>
    <mrow>
      <mo>(</mo>
      <mfrac>
        <mn>1</mn>
        <mrow>
          <mi>g</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>0</mn>
        </mrow>
      </mfrac>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
  <mrow>
    <mrow>
      <mi>where</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mi>g</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mn>0</mn>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mn>1</mn>
      <mo>+</mo>
      <mi>D</mi>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
then the generator matrix for the non-recursive encoder <b>410</b> is given by:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>G=(g<b>0</b>),<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where g<b>0</b>=1+D.
</p>
<p id="p-0115" num="0114">The effect of this non-recursive encoding in accordance with the generator polynomial given above, which is the same as the feedback generator polynomial of the recursive encoder, is that the decoding of the input bitstreams is completed, and the output decoded bitstream x<sub>n </sub>should then be the same as the original input bitstream x<sub>n </sub>input into the recursive convolutional encoder.</p>
<p id="p-0116" num="0115">Therefore, according to the first embodiment, instead of providing a dedicated conventional decoder <b>420</b> for the target recursive encoder which it is intended to decode, an existing decoder <b>420</b> which can also be used to decode non-recursively encoded bitstreams is used, in combination with the rate 1/1 non-recursive encoder <b>410</b>, which is extremely easy to implement. Thus, where, for example, the decoders are being implemented on an integrated circuit which is required to decode both recursive and non-recursively coded signals, then a single conventional decoder <b>420</b> can be provided which can be used to decode both non-recursively encoded bitstreams, as well as, at least partially, the recursively encoded bitstreams, and then the simple rate 1/1 non-recursive encoder can be further provided to complete the decoding of the partially decoded recursively coded bitstreams. In this respect; the complexity, and hence silicon area on the IC which the module will occupy, of the rate 1/1 non-recursive encoder <b>410</b> is much reduced when compared to a dedicated conventional decoder <b>420</b> for the recursive codes, which would otherwise be required.</p>
<p id="p-0117" num="0116"><figref idref="DRAWINGS">FIG. 6</figref> illustrates the process steps performed by the decoder arrangement <b>400</b>. Firstly, at step <b>5</b>.<b>2</b> the conventional decoder <b>420</b> receives the recursively encoded bitstream, which has been encoded by a recursive encoder having the generator matrix:&#x2014;</p>
<p id="p-0118" num="0117">
<maths id="MATH-US-00022" num="00022">
<math overflow="scroll">
<mrow>
  <mi>G</mi>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mfrac>
          <mrow>
            <mi>g</mi>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mn>1</mn>
          </mrow>
          <mrow>
            <mi>g</mi>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mn>0</mn>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mfrac>
          <mrow>
            <mi>g</mi>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mn>2</mn>
          </mrow>
          <mrow>
            <mi>g</mi>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mn>0</mn>
          </mrow>
        </mfrac>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <mfrac>
          <mi>gn</mi>
          <mrow>
            <mi>g</mi>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mn>0</mn>
          </mrow>
        </mfrac>
      </mrow>
      <mo>)</mo>
    </mrow>
    <mo>.</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0119" num="0118">In this respect, the conventional decoder has been adapted to decode a bitstream encoded by a non-recursive encoder having generator matrix: G=(g<b>1</b>, g<b>2</b>, . . . , gn). Thus, at step <b>5</b>.<b>4</b> the decoder <b>420</b> decodes the received coded bitstreams, to provide an intermediately decoded bitstream which is output, at step <b>5</b>.<b>6</b>.</p>
<p id="p-0120" num="0119">At step <b>5</b>.<b>8</b> the intermediately decoded bitstream is received by the non-recursive encoder <b>410</b>, which, as discussed, has generator matrix:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>G=(g<b>0</b>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0121" num="0120">The non-recursive encoder <b>410</b> then non-recursively encodes the intermediately decoded bitstream, to provide a completely decoded bitstream x<sub>n </sub>at its output line <b>428</b>, at step <b>5</b>.<b>10</b>. Thus, through a combination of decoding using a decoder which is adapted to decode a non-recursive code, followed by a post processing stage which is a non-recursive encoding with rate 1/1, a recursively coded bitstream can be completely decoded.</p>
<p id="p-0122" num="0121">A second embodiment of the invention will now be described with respect to <figref idref="DRAWINGS">FIGS. 7 to 7</figref>.</p>
<p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. 7</figref> shows a second (virtual) representation, of the recursive encoder <b>210</b> of <figref idref="DRAWINGS">FIG. 2</figref>. When compared with <figref idref="DRAWINGS">FIG. 4</figref>, it will be seen that in <figref idref="DRAWINGS">FIG. 7</figref>, instead of the recursive encoder being represented by a recursive encoding followed by a non-recursive encoding, instead it is the other way round. In particular, here the input bitstream x<sub>n</sub>, is first non-recursively encoded by a non-recursive encoder <b>110</b>, and then both of the outputs of the non-recursive encoder <b>110</b> are individually recursively encoded by respective recursive encoders <b>310</b> and <b>310</b>&#x2032;. The effect is the same i.e. that the input bitstream is recursively encoded. The generator polynomials of the non-recursive encoder <b>110</b>, and the recursive encoders <b>310</b> and <b>310</b>&#x2032; are the same as previously.</p>
<p id="p-0124" num="0123">Based upon the inventor's realisation that a recursive encoder can also be modelled as shown in <figref idref="DRAWINGS">FIG. 7</figref>, a second decoder arrangement <b>600</b> according to a second embodiment of the invention is further provided. More particularly, when comparing the second decoding arrangement <b>600</b> of <figref idref="DRAWINGS">FIG. 8</figref> with the first decoding arrangement <b>400</b> of <figref idref="DRAWINGS">FIG. 5</figref>, it can be seen that the elements are reversed in order i.e. the coded bitstreams are first subject to a rate 1/1 non-recursive encoding, and are then input into the conventional decoder <b>420</b>.</p>
<p id="p-0125" num="0124">More particularly, the second decoding arrangement <b>600</b> according to the second embodiment comprises two input lines <b>602</b> and <b>600</b>, on which are received the two coded output streams y<sub>1,n </sub>and y<sub>2,n </sub>from the encoder. As in the first embodiment, if the two coded output streams have been interleaved into a single stream for transmission, then the streams are de-interleaved prior to being input into the second decoder arrangement <b>600</b> of <figref idref="DRAWINGS">FIG. 8</figref>. Each coded input stream <b>602</b> or <b>600</b> is input into a respective non-recursive convolutional encoder <b>410</b> or <b>410</b>&#x2032;, having the same structure and operation as the non-recursive convolutional encoder <b>410</b> of the first embodiment. That is, the generator polynomial g<b>0</b> of the non-recursive convolutional encoder corresponds to the feedback polynomial of the target recursive encoder which it is intended to decode. The two non-recursive encoders <b>410</b> and <b>410</b>&#x2032; generate two intermediately decoded output streams v<sub>1,n</sub>, on line <b>606</b> and v<sub>2,n </sub>on line <b>608</b>. These are then input into the conventional decoder <b>420</b>, which is adapted to decode a bitstream encoded by a non-recursive encoder having generator polynomials in accordance with the (virtual) non-recursive part of the target recursive encoder. As in the first embodiment, the decoder <b>420</b> may be any of a sequential decoder, such as a Fano decoder, or a maximum likelihood decoder, such as a Viterbi decoder, as are well known in the art. The decoder <b>420</b> outputs the decoded bitstream x<sub>n</sub>, on output line <b>610</b>.</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 9</figref> illustrates the method performed by the second decoder arrangement <b>600</b> of the second embodiment. More particularly, at step <b>8</b>.<b>2</b> the recursively encoded bitstream is received, and subsequently at step <b>8</b>.<b>4</b> the individual coded bitstreams are non-recursively encoded with the non-recursive encoders <b>410</b> and <b>410</b>&#x2032; to produce intermediately decoded bitstreams. At step <b>8</b>.<b>6</b> the intermediately decoded bitstreams are then input to the non-recursive decoder <b>420</b> which, at step <b>8</b>.<b>8</b> then decodes the intermediately decoded bitstream to produce the completely decoded bitstream x<sub>n</sub>. The decoded bitstream is then output at step <b>8</b>.<b>10</b>.</p>
<p id="p-0127" num="0126">The second decoder arrangement <b>600</b> according to the second embodiment is less preferable than the first decoder arrangement <b>400</b> according to the first embodiment when being implemented in hardware, as multiple non-recursive encoders <b>410</b> are required, for each coded bitstream. Where the number of output bits in the coded bitstream is high (e.g. code rates as low as 1/100 are known for deep space applications) then the second decoder arrangement becomes less practical due to the number of non-recursive encoders <b>410</b> which are required. Nevertheless, where the number of non-recursive encoders <b>410</b> remains a manageable number, then advantages are still provided by the second embodiment when compared to the alternative of providing separate conventional decoders for both the recursive and non-recursive codes.</p>
<p id="p-0128" num="0127">However, in alternative embodiments implemented in software rather than hardware, the non-recursive encoder <b>410</b> can be implemented as a mere look-up table, thus further reducing the complexity of the arrangement. The implementation of non-recursive convolutional encoders as look-up tables is well known in the art. However, in the context of the present embodiments, implementation in software using a look-up table for the non-recursive encoder <b>410</b> is advantageous for the second embodiment described above, as the same look-up table can be used for each of the non-recursive encoders <b>410</b>, <b>410</b>&#x2032; etc. required, with multiple look-up calls being made to the table for each encoder. Thus, for a software implementation of the second embodiment, the disadvantages described above are no longer relevant. Moreover, a further embodiment which does not require de-interleaving of the input coded bitstream and which is described next can also help to alleviate this issue.</p>
<p id="p-0129" num="0128">As noted above, one of the problems with the second embodiment is that a separate non-recursive encoder <b>410</b> is required for each input bit in the coded bitstream i.e. where the bitstream has been coded with a rate k/n encoder, then n non-recursive encoders are required, and the input bitstream is deinterleaved into the separate encoded bitstreams each of which is respectively input into one of the non-recursive encoders. However, within a third embodiment of the invention shown in <figref idref="DRAWINGS">FIGS. 10 and 11</figref>, this requirement is done away with, and the interleaved coded bitstream can remain interleaved, being input into a single non-recursive encoder.</p>
<p id="p-0130" num="0129">More particularly, as shown in <figref idref="DRAWINGS">FIG. 10</figref> an input line <b>1010</b> receives the interleaved bitstream, incorporating in this example separate coded streams y<sub>1 </sub>and y<sub>2</sub>. That is, input line <b>1010</b> receives a bitstream y<sub>2,n</sub>, y<sub>1,n</sub>, y<sub>2,n+1</sub>, y<sub>1,n+1</sub>, etc. etc. The input line <b>1010</b> inputs the received bitstream into a non-recursive encoder <b>1000</b>, which comprises two one bit delays <b>1002</b> and <b>1004</b> arranged in sequence, the output of the second one bit delay <b>1004</b> being input into a modulo-2 adder <b>1006</b>. A feed forward line <b>1008</b> connects the input <b>1010</b> to the modulo-2 adder <b>1006</b>. The output of the modulo-2 adder <b>1006</b> is output on line <b>1016</b> as intermediately decoded bitstream v<sub>1,n</sub>, v<sub>2,n</sub>, etc. etc. to the conventional decoder <b>420</b>. As in the previous embodiments, the conventional decoder <b>420</b> is adapted to decode a bitstream which has been non-recursively encoded by an encoder having a set of generator polynomials G, which is known. The conventional decoder <b>420</b> completes the decoding, and outputs a decoded bitstream x<sub>n </sub>on line <b>610</b>. Generally, therefore, apart from the operation of the non-recursive encoder <b>1000</b>, the remainder of the operation of the third embodiment is identical to that of the second embodiment.</p>
<p id="p-0131" num="0130">Returning to the non-recursive encoder <b>1000</b>, <figref idref="DRAWINGS">FIG. 10</figref> illustrates the &#x201c;state&#x201d; bits within the encoder on an &#x201c;odd&#x201d; iteration i.e. when y<sub>1,n </sub>is the current input bit, whereas <figref idref="DRAWINGS">FIG. 11</figref> shows the state bits on an &#x201c;even&#x201d; iteration i.e. when y<sub>2,n </sub>is the current input bit. Thus, considering an input bitstream in the order y<sub>2,n&#x2212;1</sub>, y<sub>1,n&#x2212;1</sub>, y<sub>2,n</sub>, y<sub>1,n</sub>, <figref idref="DRAWINGS">FIG. 11</figref> shows that the output v<sub>2,n </sub>of the non-recursive encoder <b>1000</b> at the point where the present input bit is y<sub>2,n </sub>is the result of the modulo-2 addition of y<sub>2,n</sub>, and y<sub>2,n&#x2212;1</sub>. Comparing this with the non-recursive encoder <b>410</b>&#x2032; of <figref idref="DRAWINGS">FIG. 8</figref>, it is therefore seen that the output v<sub>2,n </sub>given the present input y<sub>2,n </sub>and the previous inputs, is identical. Similarly, for the next input bit y<sub>1,n</sub>, as shown in <figref idref="DRAWINGS">FIG. 10</figref>, the state bits of <figref idref="DRAWINGS">FIG. 11</figref> have been shifted to the right within <figref idref="DRAWINGS">FIG. 10</figref>, such that the output of the non-recursive encoder block <b>1000</b> v<sub>1,n </sub>is the result of the modulo-2 addition of the present input bit y<sub>1,n</sub>, and the state bit v<sub>1,n&#x2212;1 </sub>output from delay <b>1004</b>. Compare this operation to that of the non-recursive encoder <b>410</b> in <figref idref="DRAWINGS">FIG. 8</figref> operating on the deinterleaved bitstream y<sub>1,n</sub>, and it will be seen that the output v<sub>1,n </sub>for the input bitstream y<sub>1,n </sub>is the same.</p>
<p id="p-0132" num="0131">Thus, using the non-recursive encoder arrangement <b>1000</b>, it does not become necessary to deinterleave the two input coded bitstreams y<sub>1,n </sub>and y<sub>2,n</sub>, as an interleaved intermediately decoded output stream v<sub>k,n </sub>can be provided to the decoder <b>420</b>. Thus, the need for the multiple non-recursive encoders as in the second embodiment is removed. However, it should be noted that the single non-recursive encoder <b>1000</b> of the third embodiment requires the same number of memory registers as the sum of the registers of the multiple non-recursive encoders <b>410</b>, <b>410</b>&#x2032; etc. of the second embodiment. Generally, for encoded output streams which are interleaved, the number of memory registers in the equivalent NRC encoder <b>1000</b> is the sum of the number of memory registers used by the individual NRC encoders when the output streams are deinterleaved, as in the second embodiment. In the present example of the second and third embodiments, the total number of memory registers happens to be equal to the number of coded output streams, because for each of the n streams only one memory register is required by the individual encoders <b>410</b>, <b>410</b>&#x2032; of the second embodiment (due to the feedback polynomial=1+D). However, more generally, in other embodiments where a more complicated feedback polynomial is used in the target recursive encoder, then more memory registers may be required in the non-recursive encoders <b>410</b>, <b>410</b>&#x2032; of the second embodiment, and hence also in the single non-recursive encoder <b>1000</b> of the third embodiment.</p>
<p id="p-0133" num="0132">More particularly, the multiple rate 1/1 non-recursive encoders in the second embodiment are individually defined by the matrix G=(g<b>0</b>(D)). Notice here that the single equivalent non-recursive encoder is defined by the matrix G=(g<b>0</b>(D<sup>2</sup>)). As a matter of fact:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>0(<i>D</i>)=1<i>+D </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>0(<i>D</i><sup>2</sup>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0134" num="0133">If y(n) is the current input sample of the single equivalent encoder and v(n) the current output sample then we can check that:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i>(<i>n</i>)=<i>y</i>(<i>n</i>)+<i>y</i>(<i>n&#x2212;</i>2)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0135" num="0134">This is effectively the same as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i>1(<i>n</i>)=<i>y</i>1(<i>n</i>)+<i>y</i>1(<i>n&#x2212;</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i>2(<i>n</i>)=<i>y</i>2(<i>n</i>)+<i>y</i>2(<i>n&#x2212;</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
when y<b>1</b> and y<b>2</b> are interleaved
</p>
<p id="p-0136" num="0135">Generally speaking, therefore, n rate 1/1 non-recursive encoders with identical generator matrix G=(g<b>0</b>(D)) operating on n deinterleaved streams, can be replaced with a single rate 1/1 non recursive encoder with generator matrix G=(g<b>0</b>(D<sup>n</sup>)) operating on a single interleaved stream</p>
<p id="p-0137" num="0136">Thus far, the first to third embodiments previously described relate to rate 1/2 encoders i.e. where two output bits are generated for every single input bit. However, the present invention is not limited to decoders adapted to decode bitstreams produced by rate 1/2 encoders, and in other embodiments decoders for decoding bitstreams generated by any rate k/n encoder can be provided. Therefore, as further examples, the fourth and the fifth embodiments to be described next relate to decoding arrangements adapted to decode a bitstream encoded by the rate 2/3 recursive encoder of the prior art, described previously with respect to <figref idref="DRAWINGS">FIG. 3</figref>, and which are used as examples as to how a more general decoder for decoding a rate k/n encoded bitstream may be provided.</p>
<p id="p-0138" num="0137">Before describing the fourth embodiment in detail, firstly consider again the rate 2/3 recursive encoder of <figref idref="DRAWINGS">FIG. 3</figref>, described previously. As with the first and second embodiments, the inventor has realised that such a rate 2/3, and, more generally, any rate k/n recursive encoder, can be represented by a purely recursive encoding operation, followed by a purely non-recursive encoding operation, as shown in <figref idref="DRAWINGS">FIG. 12</figref>.</p>
<p id="p-0139" num="0138">More particularly, as with the first and second embodiments, the inventor has realised that as shown in <figref idref="DRAWINGS">FIG. 12</figref> a recursive encoding operation can be considered generally as a rate k/k purely recursive encoding operation, followed by a rate k/n purely non-recursive encoding operation. That is, the generator matrix for the whole recursive encoder G(D) can be considered to be the matrix product of the generator matrix of a rate k/k purely recursive encoder, and the generator matrix of a rate k/n non-recursive encoder i.e.:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>G</i>(<i>D</i>)=<i>G</i><sub>R</sub>(<i>D</i>)&#xb7;<i>G</i><sub>NR</sub>(<i>D</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0140" num="0139">Turning to the specific example of the rate 2/3 recursive encoder of <figref idref="DRAWINGS">FIG. 3</figref>, as shown in <figref idref="DRAWINGS">FIG. 12</figref> this can be represented by two rate 1/1 purely recursive encoders <b>1220</b> and <b>1230</b>, which themselves can be considered to be a rate 2/2 purely recursive encoder, with generator matrix G<sub>R</sub>(D). Specifically, the purely recursive encoder <b>1220</b> receives a first input bitstream x<sub>1,n </sub>on input line <b>712</b>, into a modulo-2 adder <b>716</b>. The modulo-2 adder <b>716</b> outputs a state bit u<sub>1,n </sub>into a one bit delay <b>1222</b>. The output of the one bit delay <b>1222</b>, second state bit u<sub>1,n&#x2212;1</sub>, is fed back via feedback line <b>738</b> into a second input of the modulo-2 adder <b>716</b>.</p>
<p id="p-0141" num="0140">For the second purely recursive encoder <b>1230</b>, the second input bitstream to be coded x<sub>2,n </sub>is input on line <b>714</b> to a modulo-2 adder <b>718</b>. The output of the modulo-2 adder, state bit u<sub>2,n</sub>, is input to a first one bit delay <b>1232</b>, the output of which, second state bit u<sub>2,n&#x2212;1</sub>, is input to a second one bit delay <b>1234</b>. The output of the second one bit delay <b>1234</b>, third state bit u<sub>2,n&#x2212;2</sub>, is fed back via feedback line <b>744</b> to a second input of the modulo-2 adder <b>718</b>. The recursive encoders <b>1220</b> and <b>1230</b> can therefore be thought of as a rate 2/2 purely recursive encoder having generator matrix G<sub>R(D) </sub>as shown below:</p>
<p id="p-0142" num="0141">
<maths id="MATH-US-00023" num="00023">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>R</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where, in <figref idref="DRAWINGS">FIG. 12</figref>, the feedback polynomials are:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,0</sub>(<i>D</i>)=1<i>+D</i>; and<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,0</sub>(<i>D</i>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0143" num="0142">For the non-recursive encoding part <b>1210</b>, this receives intermediately encoded bitstreams u<sub>1,n </sub>and u<sub>2,n </sub>corresponding to the first state bits of the recursive encoders <b>1220</b> and <b>1230</b>. Internally, the non-recursive encoder <b>1210</b> reproduces those non-recursive elements of the target recursive encoder <b>710</b> of <figref idref="DRAWINGS">FIG. 3</figref>, described previously, to produce three coded bitstreams y<sub>1,n</sub>, y<sub>2,n </sub>and y<sub>3,n</sub>. The generator matrix of the non-recursive part is G<sub>NR(D)</sub>, as shown below:&#x2014;</p>
<p id="p-0144" num="0143">
<maths id="MATH-US-00024" num="00024">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NR</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>2</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>3</mn>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>2</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>2</mn>
              <mo>,</mo>
              <mn>2</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>2</mn>
              <mo>,</mo>
              <mn>3</mn>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
and where, in the case of <figref idref="DRAWINGS">FIG. 12</figref>, the individual generator polynomials are:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,1</sub>(<i>D</i>)=1<i>+D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,2</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,3</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,1</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,2</sub>(<i>D</i>)=<i>D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,3</sub>(<i>D</i>)=1<i>+D</i><sup>2 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0145" num="0144">It should be noted that the above noted representation of the recursive encoder <b>710</b> of <figref idref="DRAWINGS">FIG. 3</figref> is a virtual representation i.e. that the encoder can virtually be represented as having the purely recursive parts <b>1220</b> and <b>1230</b>, and the non-recursive part <b>1210</b>.</p>
<p id="p-0146" num="0145">In view of the above described realisation that the operation of a recursive rate k/n encoder can be considered as the combination of the operation of a rate k/k purely recursive encoder, followed by a rate k/n non-recursive encoder, the inventor has realised that in order to provide a corresponding decoder, a decoder arrangement which essentially reverses the above coding steps can be provided. That is, a decoder arrangement according to the fourth embodiment provides a decoder which decodes the non-recursive parts of the recursive encoder, followed by a decoder part which decodes the purely recursive encoding parts. Such an arrangement is shown in <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0147" num="0146">A decoder arrangement <b>1300</b> according to the fourth embodiment therefore receives as input thereto the three coded bitstreams y<sub>1,n</sub>, y<sub>2,n </sub>and y<sub>3,n</sub>. In order to decode the coding due to the non-recursive part of the recursive encoder, a conventional non-recursive decoder <b>1310</b> is provided, which, as described previously with respect to the first and second embodiments, may operate according to any conventional non-recursive decoding algorithm, such as the Viterbi algorithm, the Fano algorithm, or the like. The non-recursive decoder <b>1310</b> partially decodes the received encoded bitstreams, to provide intermediately decoded bitstreams u<sub>1,n </sub>and u<sub>2,n</sub>. The bitstream u<sub>1,n </sub>is input into a first non-recursive encoder element <b>1320</b>, and the bitstream u<sub>2,n</sub>, is input into a second non-recursive encoding element <b>1330</b>. The non-recursive encoding element <b>1320</b> is arranged according to the feedback polynomial of the virtual purely recursive encoding element <b>1220</b> of <figref idref="DRAWINGS">FIG. 12</figref>. Similarly, the non-recursive encoding element <b>1330</b> has a generator polynomial which is the feedback polynomial of the purely recursive encoding element <b>1230</b> of <figref idref="DRAWINGS">FIG. 12</figref>. Therefore, the non-recursive encoding element <b>1320</b> comprises a one bit delay <b>1322</b> into which the intermediately decoded bitstream is received, and then this is output to a modulo-2 adder <b>1326</b>. Additionally, a feed forward line <b>1324</b> feeds forward the received intermediately decoded bitstream to a second input of the modulo-2 adder <b>1326</b>. The output of the modulo-2 adder on line <b>1328</b> then represents the completely decoded first input bitstream x<sub>1,n</sub>.</p>
<p id="p-0148" num="0147">For the second non-recursive encoding element <b>1330</b>, two one bit delays <b>1332</b> and <b>1334</b> are provided in sequence. A modulo-2 adder <b>1338</b> receives the output from the second of the one bit delays <b>1334</b>. A feed forward line <b>1336</b> feeds forward the received intermediately decoded bitstream u<sub>2,n </sub>into a second input of the modulo-2 adder <b>1338</b>, whilst the same input is also fed into the first one bit delay <b>1332</b>. The output of the modulo-2 adder <b>1338</b> on output line <b>1339</b> then represents the completely decoded second input bitstream X<sub>2,n</sub>.</p>
<p id="p-0149" num="0148">It should be noted that together the rate 1/1&#x2032; non-recursive encoding elements <b>1320</b> and <b>1330</b> can be thought of as a rate 2/2 non-recursive encoder, having a generator matrix equal to the matrix inverse of the generator matrix G<sub>R(D) </sub>of the virtual purely recursive part of the target recursive encoder. That is, the generator matrix of the non-recursive encoding elements <b>1320</b> and <b>1330</b> together is as follows:&#x2014;</p>
<p id="p-0150" num="0149">
<maths id="MATH-US-00025" num="00025">
<math overflow="scroll">
<mrow>
  <mrow>
    <msubsup>
      <mi>G</mi>
      <mi>R</mi>
      <mrow>
        <mo>-</mo>
        <mn>1</mn>
      </mrow>
    </msubsup>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>2</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0151" num="0150">Further details of the operation of the decoding arrangement <b>1300</b> of <figref idref="DRAWINGS">FIG. 13</figref> will be described with respect to <figref idref="DRAWINGS">FIG. 14</figref>. <figref idref="DRAWINGS">FIG. 14</figref> is a flow diagram illustrating the operation of the decoding arrangement <b>1300</b>. More particularly, at step <b>14</b>.<b>2</b> the decoding arrangement <b>1300</b> receives the recursively encoded bitstream. As discussed, the encoded bitstream has been encoded by a recursive encoder having a generator matrix G(D). For example, for a rate 2/3 recursive encoder G(D) is as follows:&#x2014;</p>
<p id="p-0152" num="0151">
<maths id="MATH-US-00026" num="00026">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>G</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>2</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>3</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>2</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>3</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0153" num="0152">The received encoded bitstreams are input into the conventional non-recursive decoder <b>1310</b> which has been trained to decode a non-recursively encoded bitstream having a generator matrix defined by the matrix G<sub>NR(D) </sub>as discussed previously. As will be seen, this corresponds to the numerator part of the matrix elements of the generator matrix of the entire recursive encoder.</p>
<p id="p-0154" num="0153">At step <b>14</b>.<b>6</b> the intermediately decoded bitstreams are then output to the non-recursive encoder elements <b>1320</b> and <b>1330</b>, which can together be considered to be a rate 2/2, or, more generally, k/k, non-recursive encoder having a generator matrix G<sub>R</sub><sup>&#x2212;1</sup>(D), as described previously. The non-recursive encoder then non-recursively encodes the intermediately decoded bitstream at step <b>14</b>.<b>8</b>, to give the effect of completely decoding the bitstreams. The completely decoded bitstreams, which now correspond to the input bitstreams x<sub>1,n </sub>and x<sub>2,n</sub>, are then output, at step <b>14</b>.<b>10</b>.</p>
<p id="p-0155" num="0154">Thus, according to the fourth embodiment, the advantages of the first and second embodiments that a conventional non-recursive decoder trained to decode a non-recursive code can also be used, with appropriate post processing, to decode a recursively encoded bitstream are obtained. Moreover, as discussed above, this technique can be applied more generally to any rate k/n recursively encoded bitstream.</p>
<p id="p-0156" num="0155">Within the fourth embodiment just described, which relates to a rate 2/3 code, it can be seen that 2 non recursive coding elements <b>1320</b> and <b>1330</b> are required, together having a generator matrix G<sub>R</sub><sup>&#x2212;1</sup>(D). The two non-recursive coding elements <b>1320</b> and <b>1330</b> are in this case different, as the generator polynomials within the generator matrix are different. Of course, if the generator polynomials within the generator matrix were identical to each other, then the non-recursive coding elements <b>1320</b> and <b>1330</b> would also be identical to each other.</p>
<p id="p-0157" num="0156">With the above in mind, in a variant of the fourth embodiment which represents a special case thereof, where the coded bitstream has been encoded by a recursive encoder having identical feedback polynomials i.e. the recursive part of the generator matrix is, for an example rate 2/2 encoder:</p>
<p id="p-0158" num="0157">
<maths id="MATH-US-00027" num="00027">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>R</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
then the generator matrix of the non-recursive encoding elements in the corresponding decoder becomes:
</p>
<p id="p-0159" num="0158">
<maths id="MATH-US-00028" num="00028">
<math overflow="scroll">
<mrow>
  <mrow>
    <msubsup>
      <mi>G</mi>
      <mi>R</mi>
      <mrow>
        <mo>-</mo>
        <mn>1</mn>
      </mrow>
    </msubsup>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
i.e. the non recursive encoding elements <b>1320</b> and <b>1330</b> are the same, as shown in <figref idref="DRAWINGS">FIG. 23</figref>. In this special case, where the generator polynomials of the non-recursive encoding elements are the same, therefore, then as with the third embodiment described previously where identical pre-processing elements were involved, in the present special case variant of the fourth embodiment then the identical post-processing non-recursive encoders may be combined together, and an interleaved output stream from the non-recursive code decoder output thereto, as shown in <figref idref="DRAWINGS">FIG. 24</figref>.
</p>
<p id="p-0160" num="0159">More particularly, with reference to <figref idref="DRAWINGS">FIG. 24</figref>, here a decoder arrangement <b>1300</b>&#x2033; is provided, where an interleaved output bitstream u<sub>2,n&#x2212;2</sub>, u<sub>1,n&#x2212;1</sub>, U<sub>2,n&#x2212;1</sub>, u<sub>1,n</sub>, u<sub>2,n</sub>, . . . is output from decoder <b>1310</b> into non recursive encoding element <b>1330</b>&#x2033;. Non-recursive encoding element <b>1330</b>&#x2033; has the same number of symbol delays as the sum of the corresponding individual non-recursive encoding elements <b>1320</b> and <b>1330</b>&#x2032; in <figref idref="DRAWINGS">FIG. 23</figref>, in this case two. The operation of the single non-recursive encoding element <b>1330</b>&#x2033; acting as a post-processor is then substantially identical to the operation of the single non-recursive encoding element of the third embodiment acting as a pre-processing element, that is, on an &#x201c;odd&#x201d; cycle the interleaved bits u<sub>1,n&#x2212;1</sub>, u<sub>1,n</sub>, etc. are processed, whilst on an &#x201c;even&#x201d; cycle the interleaved bits u<sub>2,n&#x2212;1</sub>, u<sub>2,n</sub>, etc. are processed. In this way, for the special case where the feedback polynomials of the recursive part of the target encoder are identical, in this variant of the fourth embodiment a simpler implementation can be obtained than with the fourth embodiment which allows the use of an interleaved output from the decoder <b>1310</b>.</p>
<p id="p-0161" num="0160">Generally speaking, therefore, k rate 1/1 non-recursive encoders with identical generator matrix G=(g<b>0</b>(D)) operating on k deinterleaved streams, can be replaced with a single rate 1/1 non recursive encoder with generator matrix G=(g<b>0</b>(D<sup>k</sup>)) operating on a single interleaved stream.</p>
<p id="p-0162" num="0161">It should be seen that the fourth embodiment previously described is the more generalised version of the first embodiment described previously, but extended to take into account rate k/n encoders, where k is greater than 1. Following the first embodiment we were able to describe a second embodiment, which essentially reversed the processing order of the first embodiment. It may, therefore, be thought that with respect to the fourth embodiment, it is possible to provide a fifth embodiment which essentially reverses the processing order i.e. permits a non-recursive encoding operation to be performed, followed by the conventional non-recursive decoding operation. However, because matrix products are not commutative, it is generally not possible to express the generator matrix of a whole rate k/n recursive encoder as the matrix product of the generator matrix of the non-recursive parts, and the generator matrix of the recursive parts, in that order. However, there is a special case where it is possible to express the whole generator matrix of a rate k/n recursive encoder in this order, and that is where the feedback polynomials of each recursive part of the encoder are identical. Thus, where, for example, for a rate 2/3 recursive encoder, the feedback polynomials give a generator matrix for the recursive part G<sub>R(D) </sub>as follows:&#x2014;</p>
<p id="p-0163" num="0162">
<maths id="MATH-US-00029" num="00029">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>R</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mfrac>
            <mn>1</mn>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
then it is possible to express the generator matrix as the matrix product of the recursive part followed by the non-recursive part. In this case, the entire generator matrix of the target recursive encoder would be G(D) as shown below:&#x2014;
</p>
<p id="p-0164" num="0163">
<maths id="MATH-US-00030" num="00030">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>G</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>2</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>3</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>1</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>2</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
        <mtd>
          <mfrac>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>3</mn>
              </mrow>
            </msub>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mfrac>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
<br/>
where in this case the generator matrix G<sub>NR</sub>(D) is the same as described previously with respect to the fourth embodiment.
</p>
<p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. 15</figref> illustrates an example decomposition of a recursive encoder having identical feedback polynomials decomposed into a virtual non-recursive part <b>1210</b>, and virtual purely recursive encoding parts <b>1220</b>. Within <figref idref="DRAWINGS">FIG. 15</figref> the specific generator polynomials are as follows:&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,1</sub>(<i>D</i>)=1<i>+D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,2</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,3</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,1</sub>(<i>D</i>)=0;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,2</sub>(<i>D</i>)=<i>D+D</i><sup>2</sup>;<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>2,3</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup>; and<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>1,0</sub>(<i>D</i>)=1<i>+D </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
from which it will be seen that each of the purely recursive encoding parts <b>1220</b> are identical, reflecting the identical feedback, polynomials.
</p>
<p id="p-0166" num="0165">With a recursive encoding which can be represented as such i.e. with identical feedback polynomials for the recursive part, according to a fifth embodiment of the invention a decoding arrangement <b>1600</b> can be provided which receives encoded bitstreams, in this case the three bitstreams y<sub>1,n</sub>, y<sub>2,n</sub>, and y<sub>3,n</sub>, into respective rate 1/1 non-recursive encoders <b>1320</b>. The non-recursive encoders <b>1320</b> are each configured in accordance with the common feedback polynomial of the target recursive encoder i.e. the generator polynomial G(D) of each non-recursive encoder <b>1320</b> equals g<sub>1,0</sub>(D). Alternatively, the three non-recursive encoders <b>1320</b> can together be thought of as a single rate 3/3 non-recursive encoder, having a generator matrix equal to the matrix inverse of the generator matrix of the recursive part of the target recursive encoder i.e.:&#x2014;</p>
<p id="p-0167" num="0166">
<maths id="MATH-US-00031" num="00031">
<math overflow="scroll">
<mrow>
  <mrow>
    <msubsup>
      <mi>G</mi>
      <mi>R</mi>
      <mrow>
        <mo>-</mo>
        <mn>1</mn>
      </mrow>
    </msubsup>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>0</mn>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0168" num="0167">The non-recursive encoders <b>1320</b> non-recursively encode the received encoded bitstreams to produce intermediately decoded bitstreams v<sub>1,n</sub>, v<sub>2,n </sub>and v<sub>3,n</sub>, which are then input into a conventional non-recursive decoder <b>1310</b>, which again operates according to a conventional algorithm, such as the Viterbi algorithm or the Fano algorithm, or the like. The conventional non-recursive decoder <b>1310</b> is trained to decode a non-recursively encoded bitstream encoded by a non-recursive encoder having a generator matrix corresponding to the non-recursive part of the target recursive encoder. In the present specific example, therefore, the non-recursive decoder <b>1310</b> is trained to decode an encoded bitstream as if the bitstream had been encoded by the non-recursive encoding part <b>1210</b> of <figref idref="DRAWINGS">FIG. 15</figref>. The operation of the non-recursive decoder <b>1310</b> completes the decoding process, and the original input bitstreams x<sub>1,n </sub>and x<sub>2,n </sub>are recovered.</p>
<p id="p-0169" num="0168">The operation of the decoding arrangement <b>1600</b> as just described is also shown in more detail in <figref idref="DRAWINGS">FIG. 17</figref>, to which the reader is referred.</p>
<p id="p-0170" num="0169">Thus, with the fifth embodiment the same advantages as previously described in respect of the first and second embodiments can also be obtained, but for rate k/n encoders, and where, instead of a post processing operation as in the fourth embodiment, a pre-processing non-recursive encoding operation is performed. However, as discussed previously, the fifth embodiment can only be applied in the special case where the feedback polynomials of the target recursive encoder are all identical. Where this is not the case, then it would not be possible to use the fifth embodiment to decode a recursively encoded bitstream from a recursive encoder where feedback polynomials are not identical.</p>
<p id="p-0171" num="0170">The fifth embodiment presents the same drawbacks as the previously described second embodiment, in that a non-recursive encoder element <b>1320</b> is required for each of the encoded bitstreams. This can be problematic for hardware implementations, as discussed previously in respect of the second embodiment, but again, for software implementations this is not problematic, as the same routine can simply be called as many times as required. Moreover, the problem can also be overcome in the same manner as previously described in respect of the third embodiment, that is, by providing a single non-recursive encoding element, but with the same number of one bit delay memory registers arranged in sequence as there are in total in the n individual non-recursive encoders. Then, the input bitstream can remain interleaved whilst the same operation is obtained.</p>
<p id="p-0172" num="0171">The above described embodiments each relate to decoder arrangements adapted to operate on hard decision symbols, that is symbols where a decision has been taken earlier within the processing chain in any receiver in which the decoder is employed, for example within the demodulator and symbol detector. However, as is known in the art it is also possible for a convolutional decoder to operate on soft decision symbols, that is symbols represented by a sign (+ or &#x2212;) to represent the detected symbol value, as well as a confidence value indicating the confidence in the determined sign. Other types of soft decision representation are also possible, for example a signed or even unsigned three bit soft decision representation (three bits allowing for eight values) can allow for the first four values to represent four levels of confidence that the symbol is zero, and the second four values representing four possible confidence values that the received symbol was 1. The use of soft decision symbol representation (soft bits) within convolutional decoders is well known in the art. For example Sachi T et al &#x201c;Soft Decision Viterbi Decoding With Diversity Combining&#x201d;, Global Telecommunications Conference, 1990, 2-5 Dec. 1990, pages 1127 to 1131, Volume 2, describes an example of such a soft decision Viterbi decoder. Many other references are also available.</p>
<p id="p-0173" num="0172">Within the previously described hard decision embodiments, a conventional hard decision input/hard decision output decoder adapted to decode a bitstream encoded with a non-recursive convolutional code corresponding to a virtual non-recursive part of a target recursive convolutional encoder is used for the decoding of a recursively encoded bitstream. In order to complete the decoding, a pre or post processing step is used which, in the hard decision embodiments, corresponds to a rate 1/1 non-recursive encoding operation. More particularly, where pre-processing was used, then a respective rate 1/1 non-recursive encoding operation was used on each of the n input coded bitstreams, which could be thought of as a rate n/n non-recursive encoding operation. Where post processing was used, then a rate 1/1 non-recursive encoding operation is applied to the k outputs of the conventional non-recursive decoder. Again, this can be thought of as applying a rate k/k non-recursive encoding operation to the k outputs of the non-recursive decoder, to obtain the k original inputs.</p>
<p id="p-0174" num="0173"><figref idref="DRAWINGS">FIG. 18</figref> shows again the typical pre or post processing non-recursive encoding block <b>410</b> or <b>1320</b> used in the previously described embodiments. As will be seen, it is typically a rate 1/1 non-recursive encoder having a straightforward generator polynomial G(D)=1+D<sup>k</sup>, where D<sup>k </sup>represents a delay of k symbols. The output symbol b<sub>n </sub>is therefore equal to the result of the modulo-2 addition of the present input symbol a<sub>n </sub>and the previous input symbol a<sub>n&#x2212;k</sub>. We have termed this processing a non-recursive encoding operation, as such operation is commonly used in a transmitter, for coding hard decision input symbols, even though in this case we are concerned with a decoder, which would be typically (although not necessarily exclusively) be present in a receiver. However, when operating with soft decision symbols the concept of a &#x201c;soft decision encoder&#x201d; does not really make much sense, as soft decisions are typically only used in a receiver. Additionally, at some point in the receiver data processing chain, a conversion from soft decisions to hard decisions is typically made, as ultimately the baseband data output of the receiver is usually required to be in hard decision format.</p>
<p id="p-0175" num="0174">Nevertheless, the concepts of the present invention of allowing a conventional non-recursive decoder to decode a recursively encoded bitstream provided that some pre or post processing is applied can be used with soft decision input symbols by using a similar pre or post processing operation adapted to operate with soft decision inputs. Additionally, within the embodiments to be described below, the soft decision processing which is performed is analogous to the hard decision rate 1/1 non-recursive encoding used in the previous embodiments. Such a processing block adapted for use with soft decision input symbols is shown in <figref idref="DRAWINGS">FIG. 19</figref>. Note that this processing block of <figref idref="DRAWINGS">FIG. 19</figref> relates to a generator polynomial of the form g(D)=1+D<sup>k</sup>; further details as to how to represent more complicated generator polynomials in soft decision form will be given later.</p>
<p id="p-0176" num="0175">More particularly, referring to <figref idref="DRAWINGS">FIG. 19</figref> a soft decision pre or post processing block <b>1900</b> which may be used in further embodiments to be described comprises an input line <b>1908</b>, on which soft decision inputs &#x3b1;<sub>n </sub>are received. These are input into a soft decision k bit delay <b>1902</b>, and by &#x201c;k bit delay&#x201d; we mean essentially a k output symbol delay. Thus, for example, where one output symbol is represented by a three bit soft decision input, then the delay <b>1902</b> would output the three bits representing the soft decision symbol for each output symbol that is required from the decoder.</p>
<p id="p-0177" num="0176">The delay <b>1902</b> outputs the delayed soft decision symbols to an adder <b>1904</b>, which is adapted to apply a specific &#x3a3; function, or, in other implementations, an approximation thereof, as described later. A feed forward line <b>1906</b> feeds the input soft decision symbols to a second input of the adder <b>1904</b>. An output line <b>1910</b> is provided from the adder, on which is output soft decision symbols &#x3b2;<sub>n</sub>, as a result of the &#x3a3; function applied in the adder <b>1904</b>.</p>
<p id="p-0178" num="0177">The sigma function applied by the adder <b>1904</b> to give the output stream &#x3b2;<sub>n </sub>and which provides an analogous operation within the soft decision pre or post processing block <b>1900</b> to the rate 1/1 non-recursive encoding block <b>410</b> or <b>1320</b> of the previously described embodiment is as follows:&#x2014;</p>
<p id="p-0179" num="0178">
<maths id="MATH-US-00032" num="00032">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0180" num="0179">The derivation of this &#x3a3; function indicating how it is analogous to the modulo-2 addition applied to hard decision symbols is given in Appendix 1. In other embodiments, in order to make the implementation of the pre or post processing block <b>1900</b> easier, and in particular that of the adder <b>1904</b>, the &#x3a3; function can be approximated as follows (note that this represents one possibility&#x2014;other approximations are possible, but the approximation below is one of the simplest available, and to implement):&#x2014;
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3a3;(&#x3b1;<sub>n</sub>,&#x3b1;<sub>n&#x2212;k</sub>)&#x2248;<i>sgn</i>(&#x3b1;<sub>n</sub>)&#xb7;<i>sgn</i>(&#x3b1;<sub>n&#x2212;k</sub>)&#xb7;Min(|&#x3b1;<sub>n</sub>|,|&#x3b1;<sub>n&#x2212;k</sub>|)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where the function sgn(x) is a function that returns a +1, or a &#x2212;1 value, dependent on the sign (+ or &#x2212;) of x.
</p>
<p id="p-0181" num="0180">With the above described pre or post processing block <b>1900</b>, further embodiments of the invention are then able to provide decoder arrangements which can operate on soft decision symbols, as well as hard decisions: <figref idref="DRAWINGS">FIG. 20</figref> illustrates a sixth embodiment of the invention adapted to operate on soft decision input symbols, using the processing block <b>1900</b> as a post processing block. In this respect, the sixth embodiment shown in <figref idref="DRAWINGS">FIG. 20</figref> is analogous to the first embodiment, described previously, and is adapted to operate on a coded bitstream produced by the rate 1/2 recursive encoder of <figref idref="DRAWINGS">FIG. 2</figref>, described previously (when the symbol delay k is equal to 1).</p>
<p id="p-0182" num="0181">More particularly, a decoding arrangement <b>2000</b> according to the sixth embodiment comprises a conventional soft decision output decoder <b>2002</b> which receives, in this example, two coded input streams represented as soft decision symbols &#x3c6;<sub>1,n</sub>, and &#x3c6;<sub>2,n</sub>, received on respective input lines <b>2004</b> and <b>2006</b>. The soft decision decoder <b>2002</b> is a conventional soft decision output decoder, such as a soft decision viterbi decoder or the like, and which is adapted to decode a non-recursively encoded bitstream produced by a non-recursive encoder having generator polynomials the same as the generator polynomials of the non-recursive part of the target recursive encoder, in the same manner as the previously described embodiments. The conventional soft decision output decoder <b>2002</b> outputs in this case a single intermediately decoded bitstream on output line <b>2008</b> to the post processing block <b>1900</b>, which is the same as described previously with respect to <figref idref="DRAWINGS">FIG. 19</figref>. The intermediately decoded bitstream is a stream of soft bits, representing the soft output of the decoder. The post processing block <b>1900</b> applies the &#x3a3; function as described previously (or, in alternative embodiments the approximation thereof) to produce a completely decoded stream of soft decision symbols. The decoded output can then be subsequently input into a soft decision to hard decision converter, to obtain a final hard decision output. Alternatively, the soft decision symbols may be subject to further processing in other elements of a receiver prior to being finally converted into hard decision symbols.</p>
<p id="p-0183" num="0182">However, as with the previously described hard decision embodiments, the use of the post processing block <b>1900</b> adapted to operate on soft decision inputs allows within this embodiment a conventional soft output non-recursive decoder which is adapted to decode a non-recursively encoded bitstream to be used to decode a recursively encoded bitstream. Thus, all of the advantages of the previous embodiments such as allowing for component and gate reuse, and reduced silicon area in hardware implementations, as well as reduced complexity in software implementations, are obtained with the presently described embodiment, but with the further advantage that it is able to operate on soft decision input symbols.</p>
<p id="p-0184" num="0183">Additionally, a further embodiment is described in <figref idref="DRAWINGS">FIG. 21</figref>. As with the relationship between the first and second embodiments described previously, so the decoding arrangement <b>2100</b> shown in <figref idref="DRAWINGS">FIG. 21</figref> has, the same relationship to the decoding arrangement <b>2000</b> of <figref idref="DRAWINGS">FIG. 20</figref>. That is, in the decoding arrangement <b>2100</b> of <figref idref="DRAWINGS">FIG. 21</figref>, instead of a post processing operation being performed, a pre-processing operation is performed on the input soft decision bitstreams, by the soft decision processing modules <b>1900</b>. This provides intermediately decoded soft decision bitstreams, which can then be input into a conventional soft decision input non-recursive decoder <b>2002</b>, which provides the final soft decision output, on output line <b>2008</b>. The decoding arrangement <b>2100</b> of <figref idref="DRAWINGS">FIG. 21</figref> also presents the same advantages as the previously described embodiments, but, as with the second embodiment described previously, has the same disadvantage that a separate pre-processing block <b>1900</b> is required for every input soft decision bitstream. However, again as with the hard decision equivalents described previously, this drawback can be alleviated if the arrangement is implemented in software, and likewise, as previously described in respect of the third embodiment, the individual soft decision pre-processing blocks <b>1900</b> can be combined in the same manner as described previously with respect to <figref idref="DRAWINGS">FIG. 3</figref>, although the overall number of memory registers required remains the same.</p>
<p id="p-0185" num="0184">The above described embodiments of <figref idref="DRAWINGS">FIGS. 20 and 21</figref> describe decoding arrangements adapted to decode rate 1/2 encoded bitstreams. However, the principles expressed therein can be readily applied more generally to provide decoding arrangements adapted to decode rate kin encoded bitstreams which use soft decision symbol representations. For example, and generally, the soft decision pre or post processing block <b>1900</b> can be, used as a substitute for the non-recursive encoding block <b>410</b> or <b>1320</b> in the previously described hard decision embodiments, with a soft decision input or output decoder (as appropriate) then being substituted for the hard decision decoder in those embodiments. With such substitutions, a soft decision decoder for decoding any rate k/n recursively encoded bitstream can be obtained.</p>
<p id="p-0186" num="0185">As mentioned, the soft decision processing block <b>1900</b> described above can be used to represent generator polynomials of the form
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i>(<i>D</i>)=1<i>+D</i><sup>k </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0187" num="0186">However, where the target recursive encoder has more complicated feedback polynomials in its recursive part, then care must, be taken as to how the sigma function is applied to produce the corresponding soft-decision processing element in a decoder according to soft decision embodiments of the invention. This aspect will be described further with respect to <figref idref="DRAWINGS">FIG. 22</figref>.</p>
<p id="p-0188" num="0187">More particularly, in <figref idref="DRAWINGS">FIG. 22(</figref><i>a</i>) is shown a hard decision non-recursive encoder element having generator polynomial:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>0</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup><i>+D</i><sup>5 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0189" num="0188">As shown, this is implemented using two modulo-2 adders, with the output b<sub>n </sub>being:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>b</i><sub>n</sub>=((<i>a</i><sub>n</sub><i>+a</i><sub>n&#x2212;2</sub>)+<i>a</i><sub>n&#x2212;5</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where +represents here a modulo-2 addition.
</p>
<p id="p-0190" num="0189">To obtain the equivalent soft decision input processing element, the modulo-2 adders may be replaced with the sigma function as described previously, but to obtain the final output the sigma functions need to be nested, as shown in <figref idref="DRAWINGS">FIG. 22(</figref><i>b</i>). Here, as shown the final output of the equivalent soft decision input processing element is given by &#x3b2;<sub>n</sub>, where:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b2;<sub>n</sub>=&#x3a3;(&#x3a3;(&#x3b1;<sub>n</sub>,&#x3b1;<sub>n&#x2212;2</sub>),&#x3b1;<sub>n&#x2212;5</sub>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0191" num="0190">Here, the sigma function is the same as described previously, i.e.:</p>
<p id="p-0192" num="0191">
<maths id="MATH-US-00033" num="00033">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0193" num="0192">In further embodiments of the invention therefore, where more complicated generator polynomials are required to be represented, then a soft decision input can be used by producing a soft-decision input non-recursive encoding element having appropriately nested sigma functions in accordance with the above principles.</p>
<p id="p-0194" num="0193">In other embodiments, one or several combinations of sigma operators with any number of inputs may be used:</p>
<p id="p-0195" num="0194">
<maths id="MATH-US-00034" num="00034">
<math overflow="scroll">
  <mrow>
    <mrow>
      <mi>&#x3a3;</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <msub>
            <mi>&#x3b1;</mi>
            <mrow>
              <mi>n</mi>
              <mo>-</mo>
              <msub>
                <mi>k</mi>
                <mn>1</mn>
              </msub>
            </mrow>
          </msub>
          <mo>,</mo>
          <msub>
            <mi>&#x3b1;</mi>
            <mrow>
              <mi>n</mi>
              <mo>-</mo>
              <msub>
                <mi>k</mi>
                <mn>2</mn>
              </msub>
            </mrow>
          </msub>
          <mo>,</mo>
          <mi>&#x2026;</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>,</mo>
          <msub>
            <mi>&#x3b1;</mi>
            <mrow>
              <mi>n</mi>
              <mo>-</mo>
              <msub>
                <mi>k</mi>
                <mi>p</mi>
              </msub>
            </mrow>
          </msub>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mrow>
        <mn>2</mn>
        <mo>&#xb7;</mo>
        <mi>ar</mi>
      </mrow>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mrow>
        <mi>tanh</mi>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>&#x3b1;</mi>
                  <mrow>
                    <mi>n</mi>
                    <mo>-</mo>
                    <msub>
                      <mi>k</mi>
                      <mi>i</mi>
                    </msub>
                  </mrow>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</math>
</maths>
<maths id="MATH-US-00034-2" num="00034.2">
<math overflow="scroll">
  <mrow>
    <mrow>
      <mi>Eg</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mtext>:</mtext>
      </mstyle>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.6em" height="0.6ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <msub>
        <mi>&#x3b2;</mi>
        <mi>n</mi>
      </msub>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mrow>
        <mn>2</mn>
        <mo>&#xb7;</mo>
        <mi>ar</mi>
      </mrow>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.3em" height="0.3ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mrow>
        <mi>tanh</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>[</mo>
          <mrow>
            <mrow>
              <mi>tanh</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&#x3b1;</mi>
                    <mi>n</mi>
                  </msub>
                  <mo>/</mo>
                  <mn>2</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>tanh</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&#x3b1;</mi>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>2</mn>
                    </mrow>
                  </msub>
                  <mo>/</mo>
                  <mn>2</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mo>&#xb7;</mo>
            <mrow>
              <mi>tanh</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&#x3b1;</mi>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>5</mn>
                    </mrow>
                  </msub>
                  <mo>/</mo>
                  <mn>2</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>]</mo>
        </mrow>
      </mrow>
    </mrow>
  </mrow>
</math>
</maths>
</p>
<p id="p-0196" num="0195">Moreover, in further soft-decision input embodiments requiring more complicated generator polynomials, the approximation to the sigma function mentioned earlier may also be used. However, in this case, the nesting principle is not as important, as the sigma function approximation is very similar to a modulo-2 adder, and can accept multiple inputs. For example, considering representing the generator polynomial:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>0</sub>(<i>D</i>)=1<i>+D</i><sup>2</sup><i>+D</i><sup>5 </sup><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
then using the sigma function approximation, the output &#x3b2;<sub>n </sub>can be approximated as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b2;<sub>n</sub><i>&#x2248;[sgn</i>(&#x3b1;<sub>n</sub>)&#xb7;<i>sgn</i>(&#x3b1;<sub>n&#x2212;2</sub>)&#xb7;<i>sgn</i>(&#x3b1;<sub>n&#x2212;5</sub>)]&#xb7;Min(|&#x3b1;<sub>n</sub>|,|&#x3b1;<sub>n&#x2212;2</sub>|,|&#x3b1;<sub>n&#x2212;5</sub>|<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0197" num="0196">More generally, this can be represented as:</p>
<p id="p-0198" num="0197">
<maths id="MATH-US-00035" num="00035">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>&#xf603;</mo>
      <msub>
        <mi>&#x3b1;</mi>
        <mrow>
          <mi>n</mi>
          <mo>-</mo>
          <msub>
            <mi>k</mi>
            <mi>i</mi>
          </msub>
        </mrow>
      </msub>
      <mo>&#xf604;</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0199" num="0198">Therefore, a single approximation function block can be provided, which accepts all three inputs thereto. Of course, in other embodiments, separate approximation function blocks can be provided, nested in the same manner as with the sigma function adders described previously.</p>
<p id="p-0200" num="0199">Thus, as described, even when operating on soft decision inputs, pre- or post-processing elements corresponding to any desired generator polynomial required to complete the decoding provided by a conventional non-recursive (soft input) decoder can be obtained using the principles described above, and using either the sigma function equivalent to a modulo-2 adder, or the approximation thereto.</p>
<p id="p-0201" num="0200">In further embodiments of the invention, it is possible to combine soft inputs with hard outputs, and vice versa. Conventional non-recursive code decoders which accept soft inputs and provide hard outputs, or vice versa, are known in the art and can be used in embodiments of the invention, with appropriate pre- or post-processing elements as previously described, depending on the inputs (soft or hard) or outputs (soft or hard) of the non-recursive code decoder. <figref idref="DRAWINGS">FIG. 25</figref> gives examples of the various combinations of hard input/hard output, soft input/hard output, soft input/soft output, and hard input/soft output combinations which may be obtained using a post-processing element or elements, whereas <figref idref="DRAWINGS">FIG. 26</figref> illustrates the same using a pre-processing element or elements. Generally, as mentioned previously, soft decision symbols provide a greater degree of information about the incoming signal, and hence soft decision symbols are preferably used as far down the processing chain as possible, provided that the additional information is being used. As soon as the additional information is not being used then the soft symbol is effectively being treated as a hard decision symbol, and the additional complexity of soft decision processing is then wasted.</p>
<p id="p-0202" num="0201">Regarding converting from hard decisions to soft decisions, as a general rule there is no advantage in a reception chain, in converting hard-information into soft-information. Once the soft-information is lost, it cannot be recovered. However, a decoder does not really convert hard-information into soft-information. It replaces the &#x201c;redundancy&#x201d; in a stream of hard-decisions and converts it into reliability measures in a stream of soft-decision: note that the bit-rate is reduced. Therefore, we can say that there is no advantage in a reception chain, in converting hard-decisions into soft-decisions, except when it is associated with a processing (e.g. a decoder) which reduces the bit-rate.</p>
<p id="p-0203" num="0202">The embodiments of the invention provide further advantages. For example, if the decoder arrangements of the embodiments are being implemented in an integrated transceiver IC, wherein the transceiver side is provided with an adaptable non-recursive encoder for encoding a bitstream to be transmitted, then the conventional decoder <b>420</b> of the embodiments can be provided on the receiver side, but the adaptable non-recursive encoder of the transmit side used to perform the non-recursive encoding required by non-recursive encoder <b>410</b> or <b>1320</b>. This thus further provides for functionality re-use of components on the chip, which reduces overall component and gate count, and saves silicon area.</p>
<p id="p-0204" num="0203">Various further modifications and adjustments may be made to the above described embodiments to provide further embodiments, any and all of which are intended to be encompassed by the appended claims.</p>
<p id="h-0007" num="0000">Appendix 1: How Soft Decision Pre- or Post-Processing Relates to Hard Decision Pre- or Post-Processing</p>
<p id="p-0205" num="0204">The following description explains how the sigma function (and its approximation) described earlier and used in the soft decision input embodiments can take the place of the modulo-2 adder used in the hard decision input embodiments. Within the following, a modulo-2 adder is described as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>s=a+b </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where + represents a modulo-2 addition, and a and b are the inputs to the modulo-2 adder, with s being the result. The equivalent sigma function is then
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3c3;=&#x3a3;(&#x3b1;,&#x3b2;)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where &#x3b1; and &#x3b2; are the inputs to the function, and &#x3c3; is the result.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0205">1/By definition, soft-decisions are the Log-Likelihood Ratios associated with the bits (hard-decisions) they represent:</li>
</ul>
</p>
<p id="p-0206" num="0206">
<maths id="MATH-US-00036" num="00036">
<math overflow="scroll">
<mrow>
  <mi>&#x3b1;</mi>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mrow>
        <mi>ln</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>[</mo>
          <mfrac>
            <mrow>
              <mi>Prob</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>a</mi>
                  <mo>=</mo>
                  <mn>0</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
            <mrow>
              <mi>Prob</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>a</mi>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mfrac>
          <mo>]</mo>
        </mrow>
      </mrow>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mi>&#x3b2;</mi>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>b</mi>
                <mo>=</mo>
                <mn>0</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>b</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0002" list-style="none">
    <li id="ul0002-0001" num="0207">2/Therefore the equivalent of the modulo-2 adder operating on soft-decisions must provide an output of the same nature:</li>
</ul>
</p>
<p id="p-0207" num="0208">
<maths id="MATH-US-00037" num="00037">
<math overflow="scroll">
<mrow>
  <mi>&#x3c3;</mi>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mi>Prob</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>s</mi>
              <mo>=</mo>
              <mn>0</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mrow>
          <mi>Prob</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>s</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0209">3/Elementary probabilities: Prob(a=0)+Prob(a=1)=1</li>
</ul>
</p>
<p id="p-0208" num="0210">Therefore:</p>
<p id="p-0209" num="0211">
<maths id="MATH-US-00038" num="00038">
<math overflow="scroll">
<mrow>
  <mi>&#x3b1;</mi>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>a</mi>
                <mo>=</mo>
                <mn>0</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mrow>
            <mn>1</mn>
            <mo>-</mo>
            <mrow>
              <mi>Prob</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>a</mi>
                  <mo>=</mo>
                  <mn>0</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mn>1</mn>
            <mo>-</mo>
            <mrow>
              <mi>Prob</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>a</mi>
                  <mo>=</mo>
                  <mn>1</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>a</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0210" num="0212">A little maths work leads to (same for b and &#x3b2;):</p>
<p id="p-0211" num="0213">
<maths id="MATH-US-00039" num="00039">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>Prob</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>a</mi>
        <mo>=</mo>
        <mn>0</mn>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mfrac>
        <msup>
          <mi>&#x2147;</mi>
          <mi>&#x3b1;</mi>
        </msup>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mi>&#x3b1;</mi>
          </msup>
        </mrow>
      </mfrac>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mi>and</mi>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="0.8em" height="0.8ex"/>
      </mstyle>
      <mo>&#x2062;</mo>
      <mrow>
        <mi>Prob</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mi>a</mi>
            <mo>=</mo>
            <mn>1</mn>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mfrac>
      <mn>1</mn>
      <mrow>
        <mn>1</mn>
        <mo>+</mo>
        <msup>
          <mi>&#x2147;</mi>
          <mi>&#x3b1;</mi>
        </msup>
      </mrow>
    </mfrac>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0004" list-style="none">
    <li id="ul0004-0001" num="0214">4/Barely more advanced probabilities:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Prob</i>(<i>s=</i>0)=<i>Prob</i>(<i>a=</i>0)&#xb7;<i>Prob</i>(<i>b=</i>0)+<i>Prob</i>(<i>a=</i>1)&#xb7;<i>Prob</i>(<i>b=</i>1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
    <li id="ul0004-0002" num="0215">5/Combining results from 3/and 4/:</li>
</ul>
</p>
<p id="p-0212" num="0216">
<maths id="MATH-US-00040" num="00040">
<math overflow="scroll">
  <mrow>
    <mrow>
      <mi>Prob</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mi>s</mi>
          <mo>=</mo>
          <mn>0</mn>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mrow>
        <mrow>
          <mfrac>
            <msup>
              <mi>&#x2147;</mi>
              <mi>&#x3b1;</mi>
            </msup>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b1;</mi>
              </msup>
            </mrow>
          </mfrac>
          <mo>&#xb7;</mo>
          <mfrac>
            <msup>
              <mi>&#x2147;</mi>
              <mi>&#x3b2;</mi>
            </msup>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b2;</mi>
              </msup>
            </mrow>
          </mfrac>
        </mrow>
        <mo>+</mo>
        <mrow>
          <mfrac>
            <mn>1</mn>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b1;</mi>
              </msup>
            </mrow>
          </mfrac>
          <mo>&#xb7;</mo>
          <mfrac>
            <mn>1</mn>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b2;</mi>
              </msup>
            </mrow>
          </mfrac>
        </mrow>
      </mrow>
      <mo>&#x2062;</mo>
      <mstyle>
        <mtext>
</mtext>
      </mstyle>
      <mo>&#x2062;</mo>
      <mstyle>
        <mspace width="6.7em" height="6.7ex"/>
      </mstyle>
      <mo>=</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <mi>&#x3b1;</mi>
              <mo>+</mo>
              <mi>&#x3b2;</mi>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b1;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>&#xb7;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b2;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mfrac>
    </mrow>
  </mrow>
</math>
</maths>
<maths id="MATH-US-00040-2" num="00040.2">
<math overflow="scroll">
  <mrow>
    <mrow>
      <mi>Prob</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mrow>
          <mi>s</mi>
          <mo>=</mo>
          <mn>1</mn>
        </mrow>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mrow>
        <mn>1</mn>
        <mo>-</mo>
        <mrow>
          <mi>Prob</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>s</mi>
              <mo>=</mo>
              <mn>0</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>=</mo>
      <mfrac>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <mi>&#x3b1;</mi>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mi>&#x3b2;</mi>
          </msup>
        </mrow>
        <mrow>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b1;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
          <mo>&#xb7;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mn>1</mn>
              <mo>+</mo>
              <msup>
                <mi>&#x2147;</mi>
                <mi>&#x3b2;</mi>
              </msup>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mfrac>
    </mrow>
  </mrow>
</math>
</maths>
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0217">6/Hence the output which must be provided by the elementary block operating on soft-decisions:</li>
</ul>
</p>
<p id="p-0213" num="0218">
<maths id="MATH-US-00041" num="00041">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3c3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>&#x3b1;</mi>
        <mo>,</mo>
        <mi>&#x3b2;</mi>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>s</mi>
                <mo>=</mo>
                <mn>0</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
          <mrow>
            <mi>Prob</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <mi>s</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mn>1</mn>
            <mo>+</mo>
            <msup>
              <mi>&#x2147;</mi>
              <mrow>
                <mi>&#x3b1;</mi>
                <mo>+</mo>
                <mi>&#x3b2;</mi>
              </mrow>
            </msup>
          </mrow>
          <mrow>
            <msup>
              <mi>&#x2147;</mi>
              <mi>&#x3b1;</mi>
            </msup>
            <mo>+</mo>
            <msup>
              <mi>&#x2147;</mi>
              <mi>&#x3b2;</mi>
            </msup>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0006" list-style="none">
    <li id="ul0006-0001" num="0219">7/This defines the &#x3a3; operator operating on soft-decisions which replaces the + (modulo 2) operator operating on hard-decisions:</li>
</ul>
</p>
<p id="p-0214" num="0220">
<maths id="MATH-US-00042" num="00042">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>x</mi>
        <mo>,</mo>
        <mi>y</mi>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <mi>x</mi>
              <mo>+</mo>
              <mi>y</mi>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <mi>x</mi>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mi>y</mi>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0007" list-style="none">
    <li id="ul0007-0001" num="0221">8/Notice a remarkable property which can make implementation simpler:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3a3;(<i>x,y</i>)&#x2248;<i>sgn</i>(<i>x</i>)&#xb7;<i>sgn</i>(<i>y</i>)&#xb7;Min(|<i>x|,|y</i>|)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
</ul>
</p>
<p id="p-0215" num="0222">This means that sgn(&#x3c3;) is governed by the hard decision s, and that the reliability of the decision |&#x3c3;| is well approximated as the minimum reliability of the components |&#x3b1;| and |&#x3b2;|.</p>
<p id="p-0216" num="0223">A few more details about the &#x25a1; function:</p>
<p id="p-0217" num="0224">
<maths id="MATH-US-00043" num="00043">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>x</mi>
        <mo>,</mo>
        <mi>y</mi>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <mi>x</mi>
              <mo>+</mo>
              <mi>y</mi>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <mi>x</mi>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mi>y</mi>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0225">a/ Notice a symmetry:</li>
</ul>
</p>
<p id="p-0218" num="0226">
<maths id="MATH-US-00044" num="00044">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mi>&#x3a3;</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mi>x</mi>
              <mo>,</mo>
              <mrow>
                <mo>-</mo>
                <mi>y</mi>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>=</mo>
        <mrow>
          <mi>ln</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>[</mo>
            <mfrac>
              <mrow>
                <mn>1</mn>
                <mo>+</mo>
                <msup>
                  <mi>&#x2147;</mi>
                  <mrow>
                    <mi>x</mi>
                    <mo>+</mo>
                    <mi>y</mi>
                  </mrow>
                </msup>
              </mrow>
              <mrow>
                <msup>
                  <mi>&#x2147;</mi>
                  <mi>x</mi>
                </msup>
                <mo>+</mo>
                <msup>
                  <mi>&#x2147;</mi>
                  <mrow>
                    <mo>-</mo>
                    <mi>y</mi>
                  </mrow>
                </msup>
              </mrow>
            </mfrac>
            <mo>]</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mrow>
          <mi>ln</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>[</mo>
            <mfrac>
              <mrow>
                <msup>
                  <mi>&#x2147;</mi>
                  <mi>y</mi>
                </msup>
                <mo>+</mo>
                <msup>
                  <mi>&#x2147;</mi>
                  <mi>x</mi>
                </msup>
              </mrow>
              <mrow>
                <mn>1</mn>
                <mo>+</mo>
                <msup>
                  <mi>&#x2147;</mi>
                  <mrow>
                    <mi>x</mi>
                    <mo>+</mo>
                    <mi>y</mi>
                  </mrow>
                </msup>
              </mrow>
            </mfrac>
            <mo>]</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <mo>=</mo>
        <mrow>
          <mrow>
            <mo>-</mo>
            <mrow>
              <mi>ln</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>[</mo>
                <mfrac>
                  <mrow>
                    <mn>1</mn>
                    <mo>+</mo>
                    <msup>
                      <mi>&#x2147;</mi>
                      <mrow>
                        <mi>x</mi>
                        <mo>+</mo>
                        <mi>y</mi>
                      </mrow>
                    </msup>
                  </mrow>
                  <mrow>
                    <msup>
                      <mi>&#x2147;</mi>
                      <mi>x</mi>
                    </msup>
                    <mo>+</mo>
                    <msup>
                      <mi>&#x2147;</mi>
                      <mi>y</mi>
                    </msup>
                  </mrow>
                </mfrac>
                <mo>]</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>=</mo>
          <mrow>
            <mo>-</mo>
            <mrow>
              <mi>&#x3a3;</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>x</mi>
                  <mo>,</mo>
                  <mi>y</mi>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
<ul id="ul0009" list-style="none">
    <li id="ul0009-0001" num="0227">b/ Using this result:</li>
</ul>
</p>
<p id="p-0219" num="0228">
<maths id="MATH-US-00045" num="00045">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>x</mi>
        <mo>,</mo>
        <mi>y</mi>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>+</mo>
            <mrow>
              <mi>&#x3a3;</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>x</mi>
                  <mo>,</mo>
                  <mrow>
                    <mo>&#xf603;</mo>
                    <mi>y</mi>
                    <mo>&#xf604;</mo>
                  </mrow>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>y</mi>
            </mrow>
            <mo>&#x2265;</mo>
            <mn>0</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mrow>
              <mi>&#x3a3;</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mi>x</mi>
                  <mo>,</mo>
                  <mrow>
                    <mo>&#xf603;</mo>
                    <mi>y</mi>
                    <mo>&#xf604;</mo>
                  </mrow>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>y</mi>
            </mrow>
            <mo>&#x2264;</mo>
            <mn>0</mn>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0010" list-style="none">
    <li id="ul0010-0001" num="0229">c/ This can be simplified as: &#x3a3;(x,y)=sgn(y)&#xb7;&#x3a3;(x,|y|)</li>
</ul>
</p>
<p id="p-0220" num="0230">
<maths id="MATH-US-00046" num="00046">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>sgn</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>t</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>{</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mo>+</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>t</mi>
            </mrow>
            <mo>&#x3e;</mo>
            <mn>0</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>t</mi>
            </mrow>
            <mo>=</mo>
            <mn>0</mn>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mo>-</mo>
            <mn>1</mn>
          </mrow>
        </mtd>
        <mtd>
          <mrow>
            <mrow>
              <mi>if</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.8em" height="0.8ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>t</mi>
            </mrow>
            <mo>&#x3c;</mo>
            <mn>0</mn>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
<ul id="ul0011" list-style="none">
    <li id="ul0011-0001" num="0231">d/ Simple generalisation to the second variable:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3a3;(<i>x,y</i>)=<i>sgn</i>(<i>x</i>)&#xb7;<i>sgn</i>(<i>y</i>)&#xb7;&#x3a3;(|<i>x|,|y</i>|)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
    <li id="ul0011-0002" num="0232">e/ But for any x and y, we have: &#x3a3;(|x|,|y|)&#x2267;0 because:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>1<i>+e</i><sup>|x|+|y|</sup>&#x2212;(<i>e</i><sup>|x|</sup><i>+e</i><sup>|y</sup>|)=(1<i>&#x2212;e</i><sup>|x|</sup>)(1<i>&#x2212;e</i><sup>|y</sup>|)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where 1&#x2212;e<sup>|x|</sup>&#x2266;0 and 1&#x2212;e<sup>|x|</sup>&#x2266;0 so that
</li>
</ul>
</p>
<p id="p-0221" num="0233">
<maths id="MATH-US-00047" num="00047">
<math overflow="scroll">
<mrow>
  <mfrac>
    <mrow>
      <mn>1</mn>
      <mo>+</mo>
      <msup>
        <mi>&#x2147;</mi>
        <mrow>
          <mrow>
            <mo>&#xf603;</mo>
            <mi>x</mi>
            <mo>&#xf604;</mo>
          </mrow>
          <mo>+</mo>
          <mrow>
            <mo>&#xf603;</mo>
            <mi>y</mi>
            <mo>&#xf604;</mo>
          </mrow>
        </mrow>
      </msup>
    </mrow>
    <mrow>
      <msup>
        <mi>&#x2147;</mi>
        <mrow>
          <mo>&#xf603;</mo>
          <mi>x</mi>
          <mo>&#xf604;</mo>
        </mrow>
      </msup>
      <mo>+</mo>
      <msup>
        <mi>&#x2147;</mi>
        <mrow>
          <mo>&#xf603;</mo>
          <mi>y</mi>
          <mo>&#xf604;</mo>
        </mrow>
      </msup>
    </mrow>
  </mfrac>
  <mo>&#x2265;</mo>
  <mn>1</mn>
</mrow>
</math>
</maths>
<ul id="ul0012" list-style="none">
    <li id="ul0012-0001" num="0234">f/Combining d/ and e/ we can characterize the sign and the magnitude of &#x3a3;(x,y)</li>
</ul>
</p>
<p id="p-0222" num="0235">
<maths id="MATH-US-00048" num="00048">
<math overflow="scroll">
<mrow>
  <mo>{</mo>
  <mrow>
    <mo>&#x2003;</mo>
    <mstyle>
      <mspace width="0.em" height="0.ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mtable>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <mi>sgn</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>[</mo>
                <mrow>
                  <mi>&#x3a3;</mi>
                  <mo>&#x2061;</mo>
                  <mrow>
                    <mo>(</mo>
                    <mrow>
                      <mi>x</mi>
                      <mo>,</mo>
                      <mi>y</mi>
                    </mrow>
                    <mo>)</mo>
                  </mrow>
                </mrow>
                <mo>]</mo>
              </mrow>
            </mrow>
            <mo>=</mo>
            <mrow>
              <mrow>
                <mi>sgn</mi>
                <mo>&#x2061;</mo>
                <mrow>
                  <mo>(</mo>
                  <mi>x</mi>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>&#xb7;</mo>
              <mrow>
                <mi>sgn</mi>
                <mo>&#x2061;</mo>
                <mrow>
                  <mo>(</mo>
                  <mi>y</mi>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
          </mrow>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mrow>
            <mrow>
              <mo>&#xf603;</mo>
              <mrow>
                <mi>&#x3a3;</mi>
                <mo>&#x2061;</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mi>x</mi>
                    <mo>,</mo>
                    <mi>y</mi>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
              <mo>&#xf604;</mo>
            </mrow>
            <mo>=</mo>
            <mrow>
              <mi>&#x3a3;</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <mrow>
                    <mo>&#xf603;</mo>
                    <mi>x</mi>
                    <mo>&#xf604;</mo>
                  </mrow>
                  <mo>,</mo>
                  <mrow>
                    <mo>&#xf603;</mo>
                    <mi>y</mi>
                    <mo>&#xf604;</mo>
                  </mrow>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0223" num="0236">Let us now examine the above result in more detail, to show how the sigma function which replaces the modulo-2 adder of the hard decision encoder within the soft decision pre and post processing blocks can be approximated, to make the implementation easier:
<ul id="ul0013" list-style="none">
    <li id="ul0013-0001" num="0237">1/Interpretation of the sign of &#x3a3;(x,y)</li>
</ul>
</p>
<p id="p-0224" num="0238">This easily relates to the modulo-2 adder for the hard-decisions:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>z=x+y </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0225" num="0239">We have: z=0 when (x==y) (both bits are equal)
<ul id="ul0014" list-style="none">
    <li id="ul0014-0001" num="0000">
    <ul id="ul0015" list-style="none">
        <li id="ul0015-0001" num="0240">z=1 when (x !=y)</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0226" num="0241">For the soft-decisions this translates into:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>z</i>=&#x3a3;(<i>x,y</i>)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0227" num="0242">We have: z&#x3e;0 when (sgn(x)==sgn(y)) (both soft decisions are of the same sign) z&#x3c;0 when (sgn(x) !=sgn(y))</p>
<p id="p-0228" num="0243">What this means is that when two soft-decisions are combined, the sign of the result is set according to the equivalent modulo-2 adder operating on hard-decisions
<ul id="ul0016" list-style="none">
    <li id="ul0016-0001" num="0244">2/Interpretation of the magnitude of &#x3a3;(x,y)</li>
</ul>
</p>
<p id="p-0229" num="0245">If we assume that one of the soft-decisions exponential is significantly larger than the other one:</p>
<p id="h-0008" num="0000">e<sup>|x|</sup>&#x3e;&#x3e;e<sup>|y|</sup> where by construction: e<sup>|y&#x2295;&#x3e;</sup>1</p>
<p id="p-0230" num="0246">Then:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>1<i>+e</i><sup>|x|+|y|</sup><i>&#x2248;e</i><sup>|x|+|y|</sup><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>e</i><sup>|x|</sup><i>+e</i><sup>|y|</sup><i>&#x2248;e</i><sup>|x|</sup><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0231" num="0247">Therefore:</p>
<p id="p-0232" num="0248">
<maths id="MATH-US-00049" num="00049">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <mo>&#xf603;</mo>
      <mrow>
        <mi>&#x3a3;</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>(</mo>
          <mrow>
            <mi>x</mi>
            <mo>,</mo>
            <mi>y</mi>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
      <mo>&#xf604;</mo>
    </mrow>
    <mo>&#x2248;</mo>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <mrow>
                <mo>&#xf603;</mo>
                <mi>x</mi>
                <mo>&#xf604;</mo>
              </mrow>
              <mo>+</mo>
              <mrow>
                <mo>&#xf603;</mo>
                <mi>y</mi>
                <mo>&#xf604;</mo>
              </mrow>
            </mrow>
          </msup>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <mo>&#xf603;</mo>
              <mi>x</mi>
              <mo>&#xf604;</mo>
            </mrow>
          </msup>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>&#xf603;</mo>
    <mi>y</mi>
    <mo>&#xf604;</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0233" num="0249">This result can easily be generalised to the two variables as: |&#x3a3;(x,y)|&#x2248;Min(|x|,|y|)</p>
<p id="p-0234" num="0250">What this means is that when two soft-decisions are combined, the reliability of the result is well approximated as the minimum reliability of the two.
<ul id="ul0017" list-style="none">
    <li id="ul0017-0001" num="0251">3/ As a general result &#x3a3;(x,y) can be well approximated as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>&#x3a3;(<i>x,y</i>)&#x2248;<i>sgn</i>(<i>x</i>)&#xb7;<i>sgn</i>(<i>y</i>)&#xb7;Min(|<i>x|,|y</i>|)<?in-line-formulae description="In-line Formulae" end="tail"?>
</li>
</ul>
</p>
<p id="p-0235" num="0252">Also, if n inputs x<sub>1</sub>, x<sub>2</sub>, . . . x<sub>n </sub>have to be combined, this result can be generalised:</p>
<p id="p-0236" num="0253">
<maths id="MATH-US-00050" num="00050">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>1</mn>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mi>n</mi>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <munderover>
      <mo>&#x220f;</mo>
      <mrow>
        <mi>i</mi>
        <mo>=</mo>
        <mn>1</mn>
      </mrow>
      <mi>n</mi>
    </munderover>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mrow>
          <mi>sgn</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <msub>
              <mi>x</mi>
              <mi>i</mi>
            </msub>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>&#xb7;</mo>
        <munder>
          <mi>Min</mi>
          <mrow>
            <mn>1</mn>
            <mo>&#x2264;</mo>
            <mi>i</mi>
            <mo>&#x2264;</mo>
            <mi>n</mi>
          </mrow>
        </munder>
      </mrow>
      <mo>&#x2062;</mo>
      <mrow>
        <mo>&#xf603;</mo>
        <msub>
          <mi>x</mi>
          <mi>i</mi>
        </msub>
        <mo>&#xf604;</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0237" num="0254">Note however, that an exact expression for &#x3a3;(x<sub>1</sub>, x<sub>2</sub>, . . . , x<sub>n</sub>) can also be found (proven by induction):</p>
<p id="p-0238" num="0255">
<maths id="MATH-US-00051" num="00051">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>1</mn>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mi>n</mi>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>[</mo>
    <mfrac>
      <mrow>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msup>
                <mi>&#x2147;</mi>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
              </msup>
              <mo>+</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>+</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msup>
                <mi>&#x2147;</mi>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
              </msup>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mrow>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msup>
                <mi>&#x2147;</mi>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
              </msup>
              <mo>+</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
        <mo>-</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <msup>
                <mn>1</mn>
                <mi>i</mi>
              </msup>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msup>
                <mi>&#x2147;</mi>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
              </msup>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mfrac>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0239" num="0256">Using the relation:</p>
<p id="p-0240" num="0257">
<maths id="MATH-US-00052" num="00052">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>tanh</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <mi>t</mi>
        <mo>/</mo>
        <mn>2</mn>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mfrac>
    <mrow>
      <msup>
        <mi>&#x2147;</mi>
        <mi>t</mi>
      </msup>
      <mo>-</mo>
      <mn>1</mn>
    </mrow>
    <mrow>
      <msup>
        <mi>&#x2147;</mi>
        <mi>t</mi>
      </msup>
      <mo>+</mo>
      <mn>1</mn>
    </mrow>
  </mfrac>
</mrow>
</math>
</maths>
<br/>
we can now express &#x3a3;(x<sub>1</sub>, x<sub>2</sub>, . . . , x<sub>n</sub>) as:
</p>
<p id="p-0241" num="0258">
<maths id="MATH-US-00053" num="00053">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>1</mn>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mi>n</mi>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>[</mo>
    <mfrac>
      <mrow>
        <mn>1</mn>
        <mo>+</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
      <mrow>
        <mn>1</mn>
        <mo>-</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mfrac>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</p>
<p id="p-0242" num="0259">And finally using the reciprocal relation:</p>
<p id="p-0243" num="0260">
<maths id="MATH-US-00054" num="00054">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>ar</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>u</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mfrac>
      <mn>1</mn>
      <mn>2</mn>
    </mfrac>
    <mo>&#xb7;</mo>
    <mrow>
      <mi>ln</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mfrac>
          <mrow>
            <mn>1</mn>
            <mo>+</mo>
            <mi>u</mi>
          </mrow>
          <mrow>
            <mn>1</mn>
            <mo>-</mo>
            <mi>u</mi>
          </mrow>
        </mfrac>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
<br/>
we get the final and shorter expression:
</p>
<p id="p-0244" num="0261">
<maths id="MATH-US-00055" num="00055">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>x</mi>
          <mn>1</mn>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mn>2</mn>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>x</mi>
          <mi>n</mi>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>tanh</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <mrow>
                <msub>
                  <mi>x</mi>
                  <mi>i</mi>
                </msub>
                <mo>/</mo>
                <mn>2</mn>
              </mrow>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627187-20140107-M00001.NB">
<img id="EMI-M00001" he="6.69mm" wi="76.20mm" file="US08627187-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US08627187-20140107-M00002.NB">
<img id="EMI-M00002" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US08627187-20140107-M00003.NB">
<img id="EMI-M00003" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US08627187-20140107-M00004.NB">
<img id="EMI-M00004" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US08627187-20140107-M00005.NB">
<img id="EMI-M00005" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00006" nb-file="US08627187-20140107-M00006.NB">
<img id="EMI-M00006" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00007" nb-file="US08627187-20140107-M00007.NB">
<img id="EMI-M00007" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00008" nb-file="US08627187-20140107-M00008.NB">
<img id="EMI-M00008" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00009" nb-file="US08627187-20140107-M00009.NB">
<img id="EMI-M00009" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00010" nb-file="US08627187-20140107-M00010.NB">
<img id="EMI-M00010" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00011" nb-file="US08627187-20140107-M00011.NB">
<img id="EMI-M00011" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00012" nb-file="US08627187-20140107-M00012.NB">
<img id="EMI-M00012" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00012.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00013" nb-file="US08627187-20140107-M00013.NB">
<img id="EMI-M00013" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00014" nb-file="US08627187-20140107-M00014.NB">
<img id="EMI-M00014" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00014.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00015" nb-file="US08627187-20140107-M00015.NB">
<img id="EMI-M00015" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00015.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00016" nb-file="US08627187-20140107-M00016.NB">
<img id="EMI-M00016" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00016.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00017" nb-file="US08627187-20140107-M00017.NB">
<img id="EMI-M00017" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00017.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00018" nb-file="US08627187-20140107-M00018.NB">
<img id="EMI-M00018" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00018.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00019" nb-file="US08627187-20140107-M00019.NB">
<img id="EMI-M00019" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00019.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00020" nb-file="US08627187-20140107-M00020.NB">
<img id="EMI-M00020" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00020.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00021" nb-file="US08627187-20140107-M00021.NB">
<img id="EMI-M00021" he="6.69mm" wi="76.20mm" file="US08627187-20140107-M00021.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00022" nb-file="US08627187-20140107-M00022.NB">
<img id="EMI-M00022" he="6.69mm" wi="76.20mm" file="US08627187-20140107-M00022.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00023" nb-file="US08627187-20140107-M00023.NB">
<img id="EMI-M00023" he="14.48mm" wi="76.20mm" file="US08627187-20140107-M00023.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00024" nb-file="US08627187-20140107-M00024.NB">
<img id="EMI-M00024" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00024.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00025" nb-file="US08627187-20140107-M00025.NB">
<img id="EMI-M00025" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00025.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00026" nb-file="US08627187-20140107-M00026.NB">
<img id="EMI-M00026" he="13.04mm" wi="76.20mm" file="US08627187-20140107-M00026.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00027" nb-file="US08627187-20140107-M00027.NB">
<img id="EMI-M00027" he="14.48mm" wi="76.20mm" file="US08627187-20140107-M00027.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00028" nb-file="US08627187-20140107-M00028.NB">
<img id="EMI-M00028" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00028.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00029" nb-file="US08627187-20140107-M00029.NB">
<img id="EMI-M00029" he="21.84mm" wi="76.20mm" file="US08627187-20140107-M00029.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00030" nb-file="US08627187-20140107-M00030.NB">
<img id="EMI-M00030" he="13.04mm" wi="76.20mm" file="US08627187-20140107-M00030.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00031" nb-file="US08627187-20140107-M00031.NB">
<img id="EMI-M00031" he="11.26mm" wi="76.20mm" file="US08627187-20140107-M00031.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00032" nb-file="US08627187-20140107-M00032.NB">
<img id="EMI-M00032" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00032.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00033" nb-file="US08627187-20140107-M00033.NB">
<img id="EMI-M00033" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00033.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00034 MATH-US-00034-2" nb-file="US08627187-20140107-M00034.NB">
<img id="EMI-M00034" he="13.04mm" wi="76.20mm" file="US08627187-20140107-M00034.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00035" nb-file="US08627187-20140107-M00035.NB">
<img id="EMI-M00035" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00035.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00036" nb-file="US08627187-20140107-M00036.NB">
<img id="EMI-M00036" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00036.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00037" nb-file="US08627187-20140107-M00037.NB">
<img id="EMI-M00037" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00037.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00038" nb-file="US08627187-20140107-M00038.NB">
<img id="EMI-M00038" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00038.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00039" nb-file="US08627187-20140107-M00039.NB">
<img id="EMI-M00039" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00039.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00040 MATH-US-00040-2" nb-file="US08627187-20140107-M00040.NB">
<img id="EMI-M00040" he="22.27mm" wi="76.20mm" file="US08627187-20140107-M00040.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00041" nb-file="US08627187-20140107-M00041.NB">
<img id="EMI-M00041" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00041.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00042" nb-file="US08627187-20140107-M00042.NB">
<img id="EMI-M00042" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00042.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00043" nb-file="US08627187-20140107-M00043.NB">
<img id="EMI-M00043" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00043.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00044" nb-file="US08627187-20140107-M00044.NB">
<img id="EMI-M00044" he="21.51mm" wi="76.20mm" file="US08627187-20140107-M00044.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00045" nb-file="US08627187-20140107-M00045.NB">
<img id="EMI-M00045" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00045.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00046" nb-file="US08627187-20140107-M00046.NB">
<img id="EMI-M00046" he="11.26mm" wi="76.20mm" file="US08627187-20140107-M00046.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00047" nb-file="US08627187-20140107-M00047.NB">
<img id="EMI-M00047" he="6.69mm" wi="76.20mm" file="US08627187-20140107-M00047.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00048" nb-file="US08627187-20140107-M00048.NB">
<img id="EMI-M00048" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00048.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00049" nb-file="US08627187-20140107-M00049.NB">
<img id="EMI-M00049" he="7.45mm" wi="76.20mm" file="US08627187-20140107-M00049.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00050" nb-file="US08627187-20140107-M00050.NB">
<img id="EMI-M00050" he="8.47mm" wi="76.20mm" file="US08627187-20140107-M00050.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00051" nb-file="US08627187-20140107-M00051.NB">
<img id="EMI-M00051" he="15.16mm" wi="76.20mm" file="US08627187-20140107-M00051.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00052" nb-file="US08627187-20140107-M00052.NB">
<img id="EMI-M00052" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00052.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00053" nb-file="US08627187-20140107-M00053.NB">
<img id="EMI-M00053" he="14.82mm" wi="76.20mm" file="US08627187-20140107-M00053.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00054" nb-file="US08627187-20140107-M00054.NB">
<img id="EMI-M00054" he="6.35mm" wi="76.20mm" file="US08627187-20140107-M00054.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00055" nb-file="US08627187-20140107-M00055.NB">
<img id="EMI-M00055" he="8.47mm" wi="76.20mm" file="US08627187-20140107-M00055.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00056" nb-file="US08627187-20140107-M00056.NB">
<img id="EMI-M00056" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00056.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00057" nb-file="US08627187-20140107-M00057.NB">
<img id="EMI-M00057" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00057.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00058" nb-file="US08627187-20140107-M00058.NB">
<img id="EMI-M00058" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00058.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00059" nb-file="US08627187-20140107-M00059.NB">
<img id="EMI-M00059" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00059.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00060" nb-file="US08627187-20140107-M00060.NB">
<img id="EMI-M00060" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00060.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00061" nb-file="US08627187-20140107-M00061.NB">
<img id="EMI-M00061" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00061.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00062" nb-file="US08627187-20140107-M00062.NB">
<img id="EMI-M00062" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00062.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00063" nb-file="US08627187-20140107-M00063.NB">
<img id="EMI-M00063" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00063.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00064" nb-file="US08627187-20140107-M00064.NB">
<img id="EMI-M00064" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00064.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00065" nb-file="US08627187-20140107-M00065.NB">
<img id="EMI-M00065" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00065.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00066" nb-file="US08627187-20140107-M00066.NB">
<img id="EMI-M00066" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00066.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00067" nb-file="US08627187-20140107-M00067.NB">
<img id="EMI-M00067" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00067.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00068" nb-file="US08627187-20140107-M00068.NB">
<img id="EMI-M00068" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00068.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00069" nb-file="US08627187-20140107-M00069.NB">
<img id="EMI-M00069" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00069.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00070" nb-file="US08627187-20140107-M00070.NB">
<img id="EMI-M00070" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00070.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00071" nb-file="US08627187-20140107-M00071.NB">
<img id="EMI-M00071" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00071.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00072" nb-file="US08627187-20140107-M00072.NB">
<img id="EMI-M00072" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00072.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00073" nb-file="US08627187-20140107-M00073.NB">
<img id="EMI-M00073" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00073.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00074" nb-file="US08627187-20140107-M00074.NB">
<img id="EMI-M00074" he="19.39mm" wi="76.20mm" file="US08627187-20140107-M00074.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00075" nb-file="US08627187-20140107-M00075.NB">
<img id="EMI-M00075" he="25.74mm" wi="76.20mm" file="US08627187-20140107-M00075.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00076" nb-file="US08627187-20140107-M00076.NB">
<img id="EMI-M00076" he="20.15mm" wi="76.20mm" file="US08627187-20140107-M00076.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00077" nb-file="US08627187-20140107-M00077.NB">
<img id="EMI-M00077" he="7.03mm" wi="76.20mm" file="US08627187-20140107-M00077.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00078" nb-file="US08627187-20140107-M00078.NB">
<img id="EMI-M00078" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00078.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00079" nb-file="US08627187-20140107-M00079.NB">
<img id="EMI-M00079" he="8.81mm" wi="76.20mm" file="US08627187-20140107-M00079.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An apparatus for decoding a recursive convolutional encoded bitstream, comprising:
<claim-text>a decoder adapted to decode a non-recursive convolutional encoded bitstream; and</claim-text>
<claim-text>a post-processing element arranged to receive the output of the decoder and apply a post-processing operation thereto;</claim-text>
<claim-text>the decoder and the post-processing element operable together in turn to decode a received recursive convolutional encoded bitstream to provide a decoded bitstream; wherein the post-processing element includes a non-recursive (NR) encoder having a generator polynomial matrix G<sub>NR </sub>of generator polynomials g:</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00056" num="00056">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NR</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>where k is an integer greater than or equal to 1 and D is a bit delay.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. An apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder (RCE) having a generator matrix G<sub>RCE </sub>of generator polynomials g:</claim-text>
<claim-text>
<maths id="MATH-US-00057" num="00057">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>and
<claim-text>the decoder is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder (NRCE) having a generator matrix G<sub>NRCE</sub>of generator polynomials g</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00058" num="00058">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NRCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where n is an integer greater than or equal to k.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. An apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the recursively encoded bitstream is represented by soft-decision symbols.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. An apparatus according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the post-processing element comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein each summer is arranged to output an output according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00059" num="00059">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>or more generally:</claim-text>
<claim-text>
<maths id="MATH-US-00060" num="00060">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>a</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mi>tanh</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>[</mo>
          <mrow>
            <munderover>
              <mo>&#x220f;</mo>
              <mrow>
                <mi>i</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mi>p</mi>
            </munderover>
            <mo>&#x2062;</mo>
            <mrow>
              <mi>tanh</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&#x3b1;</mi>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <msub>
                        <mi>k</mi>
                        <mi>i</mi>
                      </msub>
                    </mrow>
                  </msub>
                  <mo>/</mo>
                  <mn>2</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>]</mo>
        </mrow>
      </mrow>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where n is an integer greater than or equal to k and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. An apparatus according to <claim-ref idref="CLM-00003">claim 3</claim-ref> wherein the post-processing element comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein each summer is arranged to output an output according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00061" num="00061">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>a</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mo>&#xf603;</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>i</mi>
            </msub>
          </mrow>
        </msub>
        <mo>&#xf604;</mo>
      </mrow>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where n is an integer greater than or equal to k and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. An apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the decoder is one selected from the group comprising: a sequential decoder; and a maximum likelihood decoder.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. An apparatus according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein where the decoder is a sequential decoder then the decoder is a Fano decoder.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An apparatus according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein where the decoder is a maximum likelihood decoder then the decoder is a Viterbi decoder.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An apparatus for decoding a recursive convolutional encoded bitstream, comprising;
<claim-text>a pre-processing element arranged to receive the recursive convolutional encoded bitstream and to apply a pre-processing operation thereto; and</claim-text>
<claim-text>a decoder adapted to decode a non-recursive convolutional encoded bitstream;</claim-text>
<claim-text>the pre-processing element and the decoder operable together in turn to decode a received recursive convolutional encoded bitstream to provide a decoded bitstream; wherein the pre-processing element includes a non-recursive (NR) encoder having a generator matrix G<sub>NR</sub>of generator polynomials g of n columns and n rows of the form:</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00062" num="00062">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NR</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>where D is a bit delay.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. An apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder (RCE) having a generator matrix G<sub>RCE </sub>of generator polynomials g</claim-text>
<claim-text>
<maths id="MATH-US-00063" num="00063">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>and
<claim-text>the decoder is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder (NRCE) having a generator matrix G<sub>NRCE </sub>of generator polynomials g</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00064" num="00064">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NRCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where k is an integer greater than or equal to 1, and n is an integer greater than or equal to k.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the recursively encoded bitstream is represented by soft-decision symbols.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. An apparatus according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the pre-processing element comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein each summer is arranged to output an output according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00065" num="00065">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>or more generally:</claim-text>
<claim-text>
<maths id="MATH-US-00066" num="00066">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mi>tanh</mi>
        <mo>&#x2061;</mo>
        <mrow>
          <mo>[</mo>
          <mrow>
            <munderover>
              <mo>&#x220f;</mo>
              <mrow>
                <mi>i</mi>
                <mo>=</mo>
                <mn>1</mn>
              </mrow>
              <mi>p</mi>
            </munderover>
            <mo>&#x2062;</mo>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
            <mo>&#x2062;</mo>
            <mrow>
              <mi>tanh</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <mrow>
                  <msub>
                    <mi>&#x3b1;</mi>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <msub>
                        <mi>k</mi>
                        <mi>i</mi>
                      </msub>
                    </mrow>
                  </msub>
                  <mo>/</mo>
                  <mn>2</mn>
                </mrow>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>]</mo>
        </mrow>
      </mrow>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where k is an integer greater than or equal to 1, n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. An apparatus according to <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the pre-processing element comprises an input for receiving a soft decision bitstream &#x3b1;<sub>n</sub>, at least one symbol delay for producing at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and at least one summer, wherein each summer is arranged to output an output according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00067" num="00067">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mrow>
        <mo>&#xf603;</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>i</mi>
            </msub>
          </mrow>
        </msub>
        <mo>&#xf604;</mo>
      </mrow>
      <mo>.</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where k is an integer greater than or equal to 1, n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. An apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the decoder is one selected from the group comprising: a sequential decoder; and a maximum likelihood decoder.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. An apparatus according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein where the decoder is a sequential decoder then the decoder is a Fano decoder.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An apparatus according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein where the decoder is a maximum likelihood decoder then the decoder is a Viterbi decoder.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A method for decoding a recursive convolutional encoded bitstream, comprising applying a decoding operation to the recursive convolutional encoded bitstream, followed by a post-processing operation, wherein the decoding operation is arranged to decode a non-recursive convolutional encoded bitstream; the decoding operation and the post-processing operation operable together in turn to decode the received recursive convolutional encoded bitstream to provide a decoded bitstream; wherein the post-processing operation is a non-recursive (NR) encoding operation having a generator matrix G<sub>NR </sub>of generator polynomials g:</claim-text>
<claim-text>
<maths id="MATH-US-00068" num="00068">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NR</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>2</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mrow>
                  <mi>k</mi>
                  <mo>-</mo>
                  <mn>1</mn>
                </mrow>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mi>k</mi>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>where k is an integer greater than or equal to 1 and D is a bit delay.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A method according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder (RCE) having a generator matrix G<sub>RCE </sub>of generator polynomials g</claim-text>
<claim-text>
<maths id="MATH-US-00069" num="00069">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>and
<claim-text>the decoding operation is adapted to decode a nonrecursive convolutional encoded bitstream produced by a non-recursive convolutional encoder (NRCE) having a generator matrix G<sub>NRCE </sub>of generator polynomials g</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00070" num="00070">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NRCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where n is an integer greater than or equal to k.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the recursively encoded bitstream is represented by soft-decision symbols.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A method according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the post-processing operation comprises receiving a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and summing soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00071" num="00071">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>or more generally:</claim-text>
<claim-text>
<maths id="MATH-US-00072" num="00072">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>[</mo>
      <mrow>
        <munderover>
          <mo>&#x220f;</mo>
          <mrow>
            <mi>i</mi>
            <mo>=</mo>
            <mn>1</mn>
          </mrow>
          <mi>p</mi>
        </munderover>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.3em" height="0.3ex"/>
        </mstyle>
        <mo>&#x2062;</mo>
        <mrow>
          <mi>tanh</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>/</mo>
              <mn>2</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>to produce an output soft decision bitstream, where n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A method according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the post-processing operation comprises receiving a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and processing the soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00073" num="00073">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>&#xf603;</mo>
      <msub>
        <mi>&#x3b1;</mi>
        <mrow>
          <mi>n</mi>
          <mo>-</mo>
          <msub>
            <mi>k</mi>
            <mi>i</mi>
          </msub>
        </mrow>
      </msub>
      <mo>&#xf604;</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>to produce an output soft decision bitstream, where n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A method according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the decoding operation is one selected from the group comprising: a sequential decoding operation; and a maximum likelihood decoding operation.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. A method according to <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein where the decoding operation is a sequential decoding operation then the operation operates according to the Fano algorithm.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A method according to <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein where the decoding operation is a maximum likelihood decoding operation then the operation operates according to the Viterbi algorithm.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. A method for decoding a recursive convolutional encoded bitstream, comprising a pre-processing operation arranged to receive the recursive convolutional encoded bitstream and to apply a pre-processing operation thereto followed by a decoding operation, the decoding operation adapted to decode a non-recursive convolutional encoded bitstream; wherein the pre-processing operation and the decoding operation are operable together in turn to decode the received recursive convolutional encoded bitstream to provide a decoded bitstream; wherein the pre-processing operation is a non-recursive (NR) encoding having a generator matrix G<sub>NR </sub>of generator polynomials g of n columns and n rows of the form:</claim-text>
<claim-text>
<maths id="MATH-US-00074" num="00074">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>NR</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mn>0</mn>
          </mtd>
          <mtd>
            <msub>
              <mi>g</mi>
              <mrow>
                <mn>1</mn>
                <mo>,</mo>
                <mn>0</mn>
              </mrow>
            </msub>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>,</mo>
</mrow>
</math>
</maths>
<claim-text>where D is a bit delay.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. A method according to <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the recursive convolutional encoded bitstream has been encoded by a recursive convolutional encoder (RCE) having a generator matrix G<sub>RCE </sub>of generator polynomials g</claim-text>
<claim-text>
<maths id="MATH-US-00075" num="00075">
<math overflow="scroll">
<mrow>
  <mrow>
    <mrow>
      <msub>
        <mi>G</mi>
        <mi>RCE</mi>
      </msub>
      <mo>&#x2061;</mo>
      <mrow>
        <mo>(</mo>
        <mi>D</mi>
        <mo>)</mo>
      </mrow>
    </mrow>
    <mo>=</mo>
    <mrow>
      <mo>[</mo>
      <mtable>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mstyle>
              <mspace width="0.3em" height="0.3ex"/>
            </mstyle>
          </mtd>
          <mtd>
            <mi>&#x22f1;</mi>
          </mtd>
          <mtd>
            <mi>&#x22ee;</mi>
          </mtd>
        </mtr>
        <mtr>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mn>1</mn>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mi>&#x2026;</mi>
          </mtd>
          <mtd>
            <mfrac>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mi>k</mi>
                  <mo>,</mo>
                  <mi>n</mi>
                </mrow>
              </msub>
              <msub>
                <mi>g</mi>
                <mrow>
                  <mn>1</mn>
                  <mo>,</mo>
                  <mn>0</mn>
                </mrow>
              </msub>
            </mfrac>
          </mtd>
        </mtr>
      </mtable>
      <mo>]</mo>
    </mrow>
  </mrow>
  <mo>;</mo>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>and
<claim-text>the decoding operation is adapted to decode a non-recursive convolutional encoded bitstream produced by a non-recursive convolutional encoder (NRCE) having a generator matrix G<sub>NRCE </sub>of generator polynomials g</claim-text>
</claim-text>
<claim-text>
<maths id="MATH-US-00076" num="00076">
<math overflow="scroll">
<mrow>
  <mrow>
    <msub>
      <mi>G</mi>
      <mi>NRCE</mi>
    </msub>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>(</mo>
      <mi>D</mi>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mo>[</mo>
    <mtable>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mn>1</mn>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
        </mtd>
        <mtd>
          <mi>&#x22f1;</mi>
        </mtd>
        <mtd>
          <mi>&#x22ee;</mi>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mn>1</mn>
            </mrow>
          </msub>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <mi>&#x2026;</mi>
        </mtd>
        <mtd>
          <msub>
            <mi>g</mi>
            <mrow>
              <mi>k</mi>
              <mo>,</mo>
              <mi>n</mi>
            </mrow>
          </msub>
        </mtd>
      </mtr>
    </mtable>
    <mo>]</mo>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>where k is an integer greater than or equal to 1, and n is an integer greater than or equal to k.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. A method according to <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the recursively encoded bitstream is represented by soft-decision symbols.</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. A method according to <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the pre-processing operation comprises receiving a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and summing the soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00077" num="00077">
<math overflow="scroll">
<mrow>
  <mrow>
    <mo>&#x2211;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mi>n</mi>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <mi>k</mi>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mi>ln</mi>
    <mo>&#x2061;</mo>
    <mrow>
      <mo>[</mo>
      <mfrac>
        <mrow>
          <mn>1</mn>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mi>n</mi>
              </msub>
              <mo>+</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <mi>k</mi>
                </mrow>
              </msub>
            </mrow>
          </msup>
        </mrow>
        <mrow>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mi>n</mi>
            </msub>
          </msup>
          <mo>+</mo>
          <msup>
            <mi>&#x2147;</mi>
            <msub>
              <mi>&#x3b1;</mi>
              <mrow>
                <mi>n</mi>
                <mo>-</mo>
                <mi>k</mi>
              </mrow>
            </msub>
          </msup>
        </mrow>
      </mfrac>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>or more generally:</claim-text>
<claim-text>
<maths id="MATH-US-00078" num="00078">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>=</mo>
  <mrow>
    <mrow>
      <mn>2</mn>
      <mo>&#xb7;</mo>
      <mi>ar</mi>
    </mrow>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mi>tanh</mi>
      <mo>[</mo>
      <mrow>
        <munderover>
          <mo>&#x220f;</mo>
          <mrow>
            <mi>i</mi>
            <mo>=</mo>
            <mn>1</mn>
          </mrow>
          <mi>p</mi>
        </munderover>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.3em" height="0.3ex"/>
        </mstyle>
        <mo>&#x2062;</mo>
        <mrow>
          <mi>tanh</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>/</mo>
              <mn>2</mn>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
      <mo>]</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>to produce an output soft decision bitstream, where k is an integer greater than or equal to 1, n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00029" num="00029">
<claim-text>29. A method according to <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the pre-processing operation comprises receiving a soft decision bitstream &#x3b1;<sub>n</sub>, delaying the received soft decision bitstream to produce at least one delayed soft decision bitstream &#x3b1;<sub>n&#x2212;k</sub>, and processing the soft decision bitstream and the at least one delayed soft decision bitstream according to the following:</claim-text>
<claim-text>
<maths id="MATH-US-00079" num="00079">
<math overflow="scroll">
<mrow>
  <mrow>
    <mi>&#x3a3;</mi>
    <mo>&#x2062;</mo>
    <mstyle>
      <mspace width="0.3em" height="0.3ex"/>
    </mstyle>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>(</mo>
      <mrow>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>1</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mn>2</mn>
            </msub>
          </mrow>
        </msub>
        <mo>,</mo>
        <mi>&#x2026;</mi>
        <mo>&#x2062;</mo>
        <mstyle>
          <mspace width="0.8em" height="0.8ex"/>
        </mstyle>
        <mo>,</mo>
        <msub>
          <mi>&#x3b1;</mi>
          <mrow>
            <mi>n</mi>
            <mo>-</mo>
            <msub>
              <mi>k</mi>
              <mi>p</mi>
            </msub>
          </mrow>
        </msub>
      </mrow>
      <mo>)</mo>
    </mrow>
  </mrow>
  <mo>&#x2248;</mo>
  <mrow>
    <mrow>
      <mrow>
        <mo>[</mo>
        <mrow>
          <munderover>
            <mo>&#x220f;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>p</mi>
          </munderover>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.3em" height="0.3ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>sgn</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>&#x3b1;</mi>
                <mrow>
                  <mi>n</mi>
                  <mo>-</mo>
                  <msub>
                    <mi>k</mi>
                    <mi>i</mi>
                  </msub>
                </mrow>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
        <mo>]</mo>
      </mrow>
      <mo>&#xb7;</mo>
      <munder>
        <mi>Min</mi>
        <mrow>
          <mn>1</mn>
          <mo>&#x2264;</mo>
          <mi>i</mi>
          <mo>&#x2264;</mo>
          <mi>p</mi>
        </mrow>
      </munder>
    </mrow>
    <mo>&#x2062;</mo>
    <mrow>
      <mo>&#xf603;</mo>
      <msub>
        <mi>&#x3b1;</mi>
        <mrow>
          <mi>n</mi>
          <mo>-</mo>
          <msub>
            <mi>k</mi>
            <mi>i</mi>
          </msub>
        </mrow>
      </msub>
      <mo>&#xf604;</mo>
    </mrow>
  </mrow>
</mrow>
</math>
</maths>
</claim-text>
<claim-text>to produce an output soft decision bitstream, where k is an integer greater than or equal to 1, n is an integer greater than or equal to k, and p is an integer greater than or equal to 1.</claim-text>
</claim>
<claim id="CLM-00030" num="00030">
<claim-text>30. A method according to any of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the decoding operation is one selected from the group comprising: a sequential decoding operation; and a maximum likelihood decoding operation.</claim-text>
</claim>
<claim id="CLM-00031" num="00031">
<claim-text>31. A method according to <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein where the decoding operation is a sequential decoding operation then the operation operates according to the Fano algorithm.</claim-text>
</claim>
<claim id="CLM-00032" num="00032">
<claim-text>32. A method according to <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein where the decoding operation is a maximum likelihood decoding operation then the operation operates according to the Viterbi algorithm.</claim-text>
</claim>
<claim id="CLM-00033" num="00033">
<claim-text>33. A software program or suite of software programs arranged such that when run on a processing device the software program or the suite of software programs cause the processing device to operate in accordance with the method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, in combination with a non-transitory computer-readable storage medium storing the software program or at least one of the suite of software programs.</claim-text>
</claim>
<claim id="CLM-00034" num="00034">
<claim-text>34. A software program or suite of software programs arranged such that when run on a processing device the software program or the suite of software programs cause the processing device to operate in accordance with the method of <claim-ref idref="CLM-00025">claim 25</claim-ref>, in combination with a non-transitory computer-readable storage medium storing the software program or at least one of the suite of software programs. </claim-text>
</claim>
</claims>
</us-patent-grant>

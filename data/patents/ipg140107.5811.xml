<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626919-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626919</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12267425</doc-number>
<date>20081107</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>272</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>173</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
<further-classification>717134</further-classification>
<further-classification>726 21</further-classification>
</classification-national>
<invention-title id="d2e53">Installer-free applications using native code modules and persistent local storage</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5893118</doc-number>
<kind>A</kind>
<name>Sonderegger</name>
<date>19990400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2002/0107935</doc-number>
<kind>A1</kind>
<name>Lowery et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709216</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0154265</doc-number>
<kind>A1</kind>
<name>Raffaele et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709221</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0117606</doc-number>
<kind>A1</kind>
<name>Wang et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>712235</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0122785</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0071633</doc-number>
<kind>A1</kind>
<name>Rothstein</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713167</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0116966</doc-number>
<kind>A1</kind>
<name>Graham et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345661</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2005/0197819</doc-number>
<kind>A1</kind>
<name>Hopkins et al.</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2006/0069704</doc-number>
<kind>A1</kind>
<name>Breeden et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707202</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2007/0169108</doc-number>
<kind>A1</kind>
<name>Guillorit et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717174</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0071884</doc-number>
<kind>A1</kind>
<name>Heithcock et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2008/0104195</doc-number>
<kind>A1</kind>
<name>Hawkins et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2008/0168087</doc-number>
<kind>A1</kind>
<name>Repetti et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707103 R</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2008/0295024</doc-number>
<kind>A1</kind>
<name>Schneider</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715804</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2009/0049258</doc-number>
<kind>A1</kind>
<name>Benoit et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2009/0282474</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 21</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2009/0282477</doc-number>
<kind>A1</kind>
<name>Chen et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2010/0013842</doc-number>
<kind>A1</kind>
<name>Green et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345522</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2010/0017461</doc-number>
<kind>A1</kind>
<name>Kokkevis et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2010/0107146</doc-number>
<kind>A1</kind>
<name>Wrighton et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717134</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2010/0115613</doc-number>
<kind>A1</kind>
<name>Ramaswami et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2010/0118038</doc-number>
<kind>A1</kind>
<name>Labour et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>27</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709226</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Papakipos</last-name>
<first-name>Matthew</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Labour</last-name>
<first-name>Antoine</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Uhrhane</last-name>
<first-name>Eric</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Papakipos</last-name>
<first-name>Matthew</first-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Labour</last-name>
<first-name>Antoine</first-name>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Uhrhane</last-name>
<first-name>Eric</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fish &#x26; Richardson P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Google Inc.</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Algibhah</last-name>
<first-name>Hamza</first-name>
<department>2448</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Some embodiments provide a system that executes an application. During operation, the system obtains a resource list associated with the application and stores a set of resources including a native code module from the resource list through communications over a network connection, wherein the resources are stored in persistent local storage. The application then loads the application in the web browser and loads the native code module into a secure runtime environment. Next, the application executes the application independently of the network connection using the native code module and the stored resources.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="228.18mm" wi="165.27mm" file="US08626919-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="256.03mm" wi="177.88mm" file="US08626919-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="251.38mm" wi="181.19mm" file="US08626919-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="247.48mm" wi="195.07mm" file="US08626919-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">1. Field</p>
<p id="p-0003" num="0002">The present embodiments relate to techniques for executing applications on computer systems. More specifically, the present embodiments relate to a method and system for executing installer-free applications using native code modules.</p>
<p id="p-0004" num="0003">2. Related Art</p>
<p id="p-0005" num="0004">Computer systems may include a number of native applications that require significant processing resources to execute. Such applications may perform tasks such as image processing, audio and video decoding and mixing, mathematical modeling, and/or simulation. To run efficiently, these applications are often written in a combination of general-purpose programming languages, such as C or C++, and low-level languages, such as assembly language. Consequently, the applications may be restricted to specific platforms, may involve a lengthy installation process, and may pose a security risk to the computer systems on which the applications are installed.</p>
<p id="p-0006" num="0005">On the other hand, web applications, which have become more prevalent in recent years, are typically written in scripting languages that are more secure and require no installation. However, web applications may lack the performance capabilities of native applications. In particular, a web application may run one or two orders of magnitude more slowly than a native application. Furthermore, web applications are often unable to operate without sending and receiving data with one or more servers through a network connection with the servers. As a result, web applications are currently unable to implement computationally intensive functions that are available in native applications and may also lack the ability to execute independently of a network connection.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">Some embodiments provide a system that executes an application. During operation, the system obtains a resource list associated with the application and stores a set of resources including a native code module from the resource list obtained through communications over a network connection, wherein the resources are stored in persistent local storage. The application then loads the application in the web browser and loads the native code module into a secure runtime environment. Next, the application executes the application independently of the network connection using the native code module and the stored resources.</p>
<p id="p-0008" num="0007">In some embodiments, the system also intercepts a network request for one of the resources from the web browser and serves the network request using the stored resources.</p>
<p id="p-0009" num="0008">In some embodiments, the system also periodically updates the stored resources using the network connection.</p>
<p id="p-0010" num="0009">In some embodiments, the system also validates the native code module prior to loading the native code module into the secure runtime environment.</p>
<p id="p-0011" num="0010">In some embodiments, executing the application independently of the network connection involves locally storing data associated with the application and synchronizing the data with a server using the network connection.</p>
<p id="p-0012" num="0011">In some embodiments, one or more of the stored resources are used to render graphics for the application.</p>
<p id="p-0013" num="0012">In some embodiments, the stored resources further include at least one of a document, a web script, a media file, and a graphics-processing module.</p>
<p id="p-0014" num="0013">In some embodiments, the resource list is obtained based on at least one of a user of the application and a state of the application.</p>
<p id="p-0015" num="0014">In some embodiments, the application is loaded and executed without an installation procedure involving the user.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE FIGURES</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1A</figref> shows a schematic of an embodiment of a system.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 1B</figref> shows a schematic of an embodiment of a system.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 2</figref> shows a flowchart illustrating the process of executing an application.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0019" num="0018">The following description is presented to enable any person skilled in the art to make and use the embodiments, and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present embodiments. Thus, the system is not limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.</p>
<p id="p-0020" num="0019">The data structures and code described in this detailed description are typically stored on a computer-readable storage medium, which may be any device or medium that can store code and/or data for use by a computer system. The computer-readable storage medium includes, but is not limited to, volatile memory, non-volatile memory, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs), DVDs (digital versatile discs or digital video discs), or other media capable of storing computer-readable media now known or later developed.</p>
<p id="p-0021" num="0020">The methods and processes described in the detailed description section can be embodied as code and/or data, which can be stored in a computer-readable storage medium as described above. When a computer system reads and executes the code and/or data stored on the computer-readable storage medium, the computer system performs the methods and processes embodied as data structures and code and stored within the computer-readable storage medium.</p>
<p id="p-0022" num="0021">Furthermore, the methods and processes described below can be included in hardware modules. For example, the hardware modules can include, but are not limited to, application-specific integrated circuit (ASIC) chips, field-programmable gate arrays (FPGAs), and other programmable-logic devices now known or later developed. When the hardware modules are activated, the hardware modules perform the methods and processes included within the hardware modules.</p>
<p id="p-0023" num="0022">The described embodiments provide a method and system for executing an application. This application may correspond to a web application that is loaded in a web browser and executed on a computing system such as a personal computer (PC), a mobile phone, a personal digital assistant (PDA), a graphing calculator, a portable media player, a global positioning system (GPS) receiver, and/or another electronic computing device. In addition, the web application may be obtained by the computing system from a server and execute through communications with the server over the network connection.</p>
<p id="p-0024" num="0023">More specifically, embodiments provide a method and system for executing the web application as a native application using a native code module. The native code module contains native code that is executed within a secure runtime environment. The web application may further be executed independently of the network connection by storing the native code module and/or other resources associated with the web application on the computing system. Subsequent network requests for the resources may be intercepted and served using the stored resources. As a result, the native code module and other stored resources may allow the application to be executed independently of the network connection and/or loaded without an installation procedure involving a user of the application.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 1A</figref> shows a schematic of an embodiment of a system. The system includes a computing system <b>102</b> and a set of servers (e.g., server 1 <b>104</b>, server x <b>106</b>). Computing system <b>102</b> includes a web application <b>116</b> running within a web browser <b>110</b> and a plugin <b>108</b>. Each of these components is described in further detail below.</p>
<p id="p-0026" num="0025">Computing system <b>102</b> may correspond to an electronic device that provides one or more services or functions to a user. For example, computing system <b>102</b> may operate as a mobile phone, personal computer (PC), global positioning system (GPS) receiver, portable media player, personal digital assistant (PDA), and/or graphing calculator. In addition, computing system <b>102</b> may include an operating system (not shown) that coordinates the use of hardware and software resources on computing system <b>102</b>, as well as one or more applications (e.g., web browser <b>110</b>, web application <b>116</b>) that perform specialized tasks for the user. For example, computing system <b>102</b> may include applications such as an email client, address book, document editor, web browser <b>110</b>, and/or media player. To perform tasks for the user, applications may obtain the use of hardware resources (e.g., processor, memory, I/O components, wireless transmitter, etc.) on computing system <b>102</b> from the operating system, as well as interact with the user through a hardware and/or software framework provided by the operating system, as described below.</p>
<p id="p-0027" num="0026">Those skilled in the art will appreciate that computing system <b>102</b> may include functionality to execute both native applications and non-native applications. In other words, computing system <b>102</b> may include native applications, such as web browser <b>110</b>, that are locally installed on computing system <b>102</b> and specific to the operating system and/or one or more hardware devices on computing system <b>102</b>. Such applications may be compiled into native (e.g., machine) code that executes directly on one or more central processing units (CPUs) of computing system <b>102</b>. Code execution in the applications may further be optimized by writing the applications in a combination of general-purpose programming languages (e.g., C, C++, etc.) and assembly language, as well as utilizing libraries that provide hardware acceleration (e.g., graphics hardware acceleration) to the applications. However, the installation of native applications may compromise computing system <b>102</b> and private data stored on computing system <b>102</b>.</p>
<p id="p-0028" num="0027">Computing system <b>102</b> may also include functionality to execute platform-independent, non-native applications. In particular, computing system <b>102</b> may obtain web application <b>116</b> from one or more servers (e.g., server 1 <b>104</b>, server x <b>106</b>) using a network connection with the server(s) and load web application <b>116</b> in web browser <b>110</b>. For example, web application <b>116</b> may be downloaded from an application server over the Internet by web browser <b>110</b>.</p>
<p id="p-0029" num="0028">Once loaded, web application <b>116</b> may provide features and user interactivity comparable to that of native applications on computing system <b>102</b>. For example, web application <b>116</b> may function as an email client, document editor, media player, computer-aided design (CAD) system, and/or computer game. Web application <b>116</b> may also include dynamic user interface elements such as menus, buttons, windows, sub-windows, icons, animations, and/or other graphical objects that emulate analogous user interface elements in native applications. In other words, web application <b>116</b> may correspond to a rich Internet application (RIA).</p>
<p id="p-0030" num="0029">Furthermore, web application <b>116</b> may execute on computing system <b>102</b> regardless of the type of platform (e.g., operating system, drivers, etc.) associated with computing system <b>102</b>. Though platform-independent applications such as web application <b>116</b> may be more portable and secure than native applications, such cross-platform applications may lack certain performance and execution capabilities of native applications.</p>
<p id="p-0031" num="0030">More specifically, non-native applications such as web application <b>116</b> may be written using scripting languages that are interpreted rather than compiled, such as JavaScript (JavaScript&#x2122; is a registered trademark of Sun Microsystems, Inc.). The interpreted nature of web application <b>116</b> and/or other non-native applications may result in significantly slower execution times for the non-native applications than those of compiled native applications. Non-native applications may also be unable to utilize low-level libraries and/or application programming interfaces (API) that are available for use by native applications. Consequently, non-native applications may provide limited functionality in certain tasks.</p>
<p id="p-0032" num="0031">In addition, web application <b>116</b> may be unable to execute without a network connection with one or more servers (e.g., server 1 <b>104</b>, server x <b>106</b>) associated with web application <b>116</b>. For example, web application <b>116</b> may require communications with the server(s) to send and receive data, retrieve code modules, load web pages, and/or otherwise perform tasks for the user. Attempts to load and/or access web application <b>116</b> without the network connection may result in errors, such as HyperText Transfer Protocol (HTTP) errors, and/or other issues that interfere with the execution of web application <b>116</b>. As a result, web application <b>116</b> may be limited in the ability to operate in standalone mode (e.g., without a network connection).</p>
<p id="p-0033" num="0032">To provide computationally intensive features to the user, a native code module <b>118</b> associated with web application <b>116</b> may be used to execute computationally intensive code on behalf of web application <b>116</b>. Like web application <b>116</b>, native code module <b>118</b> may be obtained from one or more servers (e.g., server 1 <b>104</b>, server x <b>106</b>) by web browser <b>110</b>. For example, web application <b>116</b> may provide a hyperlink to native code module <b>118</b> on the Internet. Web browser <b>110</b> may then download native code module <b>118</b> from the Uniform Resource Locator (URL) specified in the hyperlink. Alternatively, native code module <b>118</b> may be specified by the user or by an external source, such as another web application and/or a native application. Execution of computationally intensive code for web applications using native code modules is described in a co-pending non-provisional application by inventors Evangelos Kokkevis, Matthew Papakipos, and David C. Sehr, entitled &#x201c;Method and System for Executing Applications Using Native Code Modules,&#x201d; having Ser. No. 12/266,602 and filing date Nov. 7, 2008, which is incorporated herein by reference.</p>
<p id="p-0034" num="0033">In one or more embodiments, native code module <b>118</b> is executed by a plugin <b>108</b> associated with web browser <b>110</b>. In one or more embodiments, plugin <b>108</b> includes a variety of mechanisms to ensure the safe execution of native code module <b>118</b>. In particular, native code module <b>118</b> may be validated by a validator <b>112</b> provided by plugin <b>108</b> prior to execution. During operation, the computing system <b>102</b> receives the native code module <b>118</b>, which is comprised of untrusted native program code expressed using native instructions in the instruction set architecture associated with the computing system <b>102</b>. The computing system <b>102</b> validates the native code module <b>118</b> to confirm that it will execute safely by: (1) determining that the set of instructions in the native code module <b>118</b> do not include any restricted instructions and/or do not access restricted features of the computing system <b>102</b>; and (2) determining that the set of instructions in the native code module <b>118</b> are aligned along byte boundaries such that a specified set of byte boundaries always contain a valid instruction and a set of control flow instructions in the native code module <b>118</b> have valid targets. The computing system <b>102</b> then allows valid (e.g., successfully validated) native code modules to execute, and rejects native code modules that fail validation. Native code module validation is described in a co-pending non-provisional application by inventors J. Bradley Chen, Matthew T. Harren, Matthew Papakipos, David C. Sehr, and Bennet S. Yee, entitled &#x201c;Method for Validating an Untrusted Native Code Module,&#x201d; having Ser. No. 12/117,634, and filing date 8 May 2008, which is incorporated herein by reference.</p>
<p id="p-0035" num="0034">Once native code module <b>118</b> is validated, native code module <b>118</b> may be loaded into a secure runtime environment <b>114</b> provided by plugin <b>108</b>. (Note that this secure runtime environment need not actually be part of the browser at all. It could be a separate application with which the browser communicates.) Native code execution in a secure runtime environment is described in a co-pending non-provisional application by inventors J. Bradley Chen, Matthew T. Harren, Matthew Papakipos, David C. Sehr, Bennet S. Yee, and Gregory Dardyk, entitled &#x201c;Method for Safely Executing an Untrusted Native Code Module on a Computing Device,&#x201d; having Ser. No. 12/117,650, and filing date 8 May 2008, which is incorporated herein by reference. Secure runtime environment <b>114</b> may also be provided by a web browser extension to web browser <b>110</b>, and/or secure runtime environment <b>114</b> may be built into web browser <b>110</b>.</p>
<p id="p-0036" num="0035">Furthermore, because native code module <b>118</b> may include binary code that runs directly on hardware, native code module <b>118</b> may be platform-independent with respect to the operating system of computing system <b>102</b>, web browser <b>110</b>, and/or other software components on computing system <b>102</b>. As described in the above-referenced applications, plugin <b>108</b> and/or native code module <b>118</b> may also include mechanisms for executing on a variety of instruction set architectures, including the use of &#x201c;fat binaries&#x201d; and binary translators. Consequently, the validation and execution of native code module <b>118</b> may enable web application <b>116</b> to safely utilize natively executing code in performing tasks for the user.</p>
<p id="p-0037" num="0036">In one or more embodiments, native code module <b>118</b> corresponds to a graphics-processing module that enables hardware-accelerated graphics for web application <b>116</b>. The use of native code module <b>118</b> to render graphics for web application <b>116</b> is described in further detail below with respect to <figref idref="DRAWINGS">FIG. 1B</figref>.</p>
<p id="p-0038" num="0037">In one or more embodiments, a local server module <b>120</b> associated with web browser <b>110</b> is used to enable execution of web application <b>116</b> independently of a network connection with the server(s). As with plugin <b>108</b>, local server module <b>120</b> may be implemented as a browser plugin to web browser <b>110</b>, a web browser extension to web browser <b>110</b>, and/or a component of web browser <b>110</b>. To enable offline execution of web application <b>116</b>, local server module <b>120</b> may obtain a resource list <b>122</b> associated with web application <b>116</b> from the server(s). For example, resource list <b>122</b> may be obtained from a Uniform Resource Locator (URL) specified by web application <b>116</b> using the network connection.</p>
<p id="p-0039" num="0038">Resource list <b>122</b> may correspond to a file that contains a set of resources (e.g., resource 1 <b>126</b>, resource n <b>128</b>) required for execution of web application <b>116</b>. For example, resource list <b>122</b> may include a set of URLs for resources such as documents (e.g., HyperText Markup Language (HTML) documents, Portable Document Format (PDF) documents, word processing documents, spreadsheets, etc.), web scripts (e.g., JavaScript code modules), media files (e.g., audio files, images, video files, etc.), and/or native code module <b>118</b>.</p>
<p id="p-0040" num="0039">Local server module <b>120</b> may then use resource list <b>122</b> to retrieve the resources through communications over the network connection and store the resources in a local resource store <b>124</b>, which can comprise persistent, non-volatile storage. For example, local server module <b>120</b> may store the resources in a local directory on computing system <b>102</b>. Local server module <b>120</b> may also implement a storage mechanism (e.g., a relational database) for local storage of data associated with web application <b>116</b>. Native code module <b>118</b> may then be provided to plugin <b>108</b> from local resource store <b>124</b> and used to perform computationally intensive tasks for the user. Furthermore, the storing of native code module <b>118</b> and/or other resources used by web application <b>116</b> may allow local server module <b>120</b> to intercept and serve network requests for the resources from web browser <b>110</b> using local resource store <b>124</b>.</p>
<p id="p-0041" num="0040">In particular, local server module <b>120</b> may intercept a network request (e.g., an HTTP request) for a resource associated with web application <b>116</b> if the resource is stored in local resource store <b>124</b> and serving of network requests from local resource store <b>124</b> is enabled. For example, local server module <b>120</b> may serve the network request from local resource store <b>124</b> if the resource store <b>124</b> is enabled for serving and/or if a cookie associated with the resource specifies that the resource is to be served from resource store <b>124</b>. If serving of the network request for the resource from resource store <b>124</b> is enabled, local server module <b>120</b> may serve the network request using resource store <b>124</b> regardless of the availability of a network connection between computing system <b>102</b> and the server(s). Consequently, the use of resource store <b>124</b> by local server module <b>120</b> may allow web application <b>116</b> to be executed independently of the network connection (e.g., in standalone mode). In other words, requests for data, code modules, and/or other resources by web application <b>116</b> may be served from resource store <b>124</b> by local server module <b>120</b> in lieu of the server(s) and a network connection with the servers.</p>
<p id="p-0042" num="0041">Local server module <b>120</b> may also include functionality to periodically update the resources in resource store <b>124</b> if a network connection is available. More specifically, local server module <b>120</b> may allow for both manual and automatic updates to resources in resource store <b>124</b>. For example, local server module <b>120</b> may receive a request for a manual update from web application <b>116</b> upon the initial loading of web application <b>116</b> by web browser <b>110</b>. Similarly, local server module <b>120</b> may automatically update resource store <b>124</b> upon intercepting and serving network requests for resources using resource store <b>124</b>. Alternatively, local server module <b>120</b> may update resource store <b>124</b> and/or limit updates to resource store <b>124</b> to a pre-specified frequency (e.g., once every ten seconds). Because updates to web application <b>116</b> may be performed by local server module <b>120</b> without user intervention, web application <b>116</b> may be loaded and executed without an installation procedure involving the user.</p>
<p id="p-0043" num="0042">To update resources in resource store <b>124</b>, local server module <b>120</b> may obtain the latest version of resource list <b>122</b> using the network connection and compare the latest version with the version of resource list <b>122</b> used to populate resource store <b>124</b>. If the versions are different, the resources in resource store <b>124</b> are updated using the new (e.g., latest) version of resource list <b>122</b>. For example, resource list <b>122</b> and resource store <b>124</b> may each include numeric versions that denote the current set of resources used by web application <b>116</b>. Differences between the versions of resource list <b>122</b> and resource store <b>124</b> may prompt an update of the resources. For example, a change in resource list <b>122</b> version from &#x201c;1&#x201d; to &#x201c;2&#x201d; may trigger an update, as well as a change in version from &#x201c;2&#x201d; to &#x201c;1.&#x201d;</p>
<p id="p-0044" num="0043">As the resources are updated, network requests for the resources may continue to be served from resource store <b>124</b>. The version of resource store <b>124</b> may then be updated to the latest version (e.g., the version of resource list <b>122</b>) once the update has completed. Moreover, the update may be retried if the version of resource list <b>122</b> has changed during the update.</p>
<p id="p-0045" num="0044">In one or more embodiments, resource list <b>122</b> is obtained based on the user of web application <b>116</b> and/or a state of web application <b>116</b>. For example, resource list <b>122</b> may be obtained based on the user's authentication credentials and/or access privileges to one or more components of web application <b>116</b>. Along the same lines, resource list <b>122</b> may contain different sets of resources as the user and/or web application <b>116</b> requests use of the resources. For example, web application <b>116</b> may correspond to a computer game that specifies different resource lists for different stages of the computer game. Instead of downloading all resources required for the computer game when the game first loads, local server module <b>120</b> may update resource list <b>122</b> and resource store <b>124</b> as the user progresses through the computer game so that new stages are obtained and loaded as the user encounters the new stages.</p>
<p id="p-0046" num="0045">In one or more embodiments, executing web application <b>116</b> independently of a network connection involves locally storing data associated with web application <b>116</b> and synchronizing the data with the server(s) if the network connection is available. As described above, data associated with web application <b>116</b> may be stored in a relational database and/or another local storage mechanism. However, unlike other resources used by web application <b>116</b> (e.g., native code module <b>118</b>), updates to the data may involve both sending and receiving changes to the data using the network connection. For example, web application <b>116</b> may correspond to a web-based email client that synchronizes data with the server(s) by retrieving new emails in the user's inbox from the server(s) and sending offline changes made by the user (e.g., new emails, deleted emails, etc.) to the server(s) when a network connection is available.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 1B</figref> shows a schematic of an embodiment of a system. More specifically, <figref idref="DRAWINGS">FIG. 1B</figref> shows a system for rendering graphics for web application <b>116</b> within computing system <b>102</b>. As with <figref idref="DRAWINGS">FIG. 1A</figref>, the system of <figref idref="DRAWINGS">FIG. 1B</figref> allows web application <b>116</b> to execute independently of a network connection using local server module <b>120</b>, resource list <b>122</b>, and resource store <b>124</b>. The system of <figref idref="DRAWINGS">FIG. 1B</figref> also includes functionality to validate and execute native code module <b>118</b> using plugin <b>108</b>, validator <b>112</b>, and/or secure runtime environment <b>114</b>.</p>
<p id="p-0048" num="0047">To enable hardware-accelerated graphics for web application <b>116</b>, native code module <b>118</b> communicates with a trusted code module <b>132</b> through a command buffer interface <b>130</b>. Trusted code module <b>132</b> then sends rendering commands to a graphics-processing unit (GPU) <b>134</b> on computing system <b>102</b>, which renders graphics for web application <b>116</b> by executing the rendering commands. Web-based graphics rendering using browser plugins is described in a co-pending non-provisional application by inventors Robin Green, Evangelos Kokkevis, Matthew Papakipos and Gregg Tavares, entitled &#x201c;Web-Based Graphics Rendering System,&#x201d; having Ser. No. 12/174,586 and filing date 16 Jul. 2008, which is incorporated herein by reference. Hardware-accelerated graphics rendering for web applications using native code modules is described in a co-pending non-provisional application by Antoine Labour and Matthew Papakipos, entitled &#x201c;Hardware-Accelerated Graphics for Web Applications Using Native Code Modules,&#x201d; having Ser. No. 12/267,095 and filing date Nov. 7, 2008, which is incorporated herein by reference.</p>
<p id="p-0049" num="0048">In one or more embodiments, native code module <b>118</b> corresponds to a graphics-processing module such as a scenegraph renderer or a graphics library. As mentioned previously, native code module <b>118</b> and/or other resources used by web application <b>116</b> may be obtained from one or more servers using a network connection and stored in resource store <b>124</b> by local server module <b>120</b> to enable offline execution of web application <b>116</b>. For example, native code module <b>118</b> may be stored to enable offline execution of a computer game, computer-aided design (CAD) tool, a video editing application, and/or a photo editing application.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 2</figref> shows a flowchart illustrating the process of executing an application. In one or more embodiments, one or more of the steps may be omitted, repeated, and/or performed in a different order. Accordingly, the specific arrangement of steps shown in <figref idref="DRAWINGS">FIG. 2</figref> should not be construed as limiting the scope of the technique.</p>
<p id="p-0051" num="0050">Initially, a resource list associated with the application is obtained (operation <b>202</b>). The application may correspond to a web application that performs tasks for a user, such as web application <b>116</b> of <figref idref="DRAWINGS">FIGS. 1A-1B</figref>. The resource list may be obtained from a URL specified by the application using a network connection. The resource list may further be obtained based on factors such as the user of the application and/or the state of the application. Next, a set of resources from the resource list, including a native code module, is stored in local persistent storage (operation <b>204</b>). For example, the resources may be stored in a local directory and/or a local relational database. In addition to the native code module, the resources may include documents, web scripts, media files, graphics-processing modules, and/or other resources required or used by the application to execute. Next, the application is loaded in a web browser (operation <b>206</b>).</p>
<p id="p-0052" num="0051">The native code module may also be validated (operation <b>208</b>) prior to executing the native code module. If the native code module is found to be invalid, the native code module is discarded without having been executed. If the native code module is successfully validated, the native code module is loaded into a secure runtime environment (operation <b>210</b>). The secure runtime environment may be provided by a plugin associated with the web browser, a browser extension to the web browser, and/or a component within the web browser.</p>
<p id="p-0053" num="0052">The application may then be executed independently of the network connection using the stored resources (operation <b>212</b>) and the native code module. In particular, the storing of the native code module and other resources used by the application may allow the application to execute in standalone mode regardless of the presence of a network connection. Network requests made (operation <b>214</b>) by the web browser for a resource may be intercepted (operation <b>216</b>) and served using the stored resources (operation <b>218</b>) if serving of the resource from the resource store is enabled. If no network requests associated with the application are made, no interception and redirection is required. Standalone execution of the application may further involve locally storing data associated with the application when the network connection is unavailable and synchronizing the data with a server when the network connection is available.</p>
<p id="p-0054" num="0053">The stored resources may also be updated (operation <b>220</b>) if the network connection is available. For example, the stored resources may be manually updated by the application (e.g., upon initial loading of the application), or the stored resources may automatically be updated periodically or upon serving a network request from the stored resources. If the stored resources are to be updated, the stored resources are updated using the network connection (operation <b>222</b>). More specifically, the stored resources may be updated based on changes to the resource list (e.g., different versions of the resource list). Note that the stored resources could theoretically be updated by a client-side application as well.</p>
<p id="p-0055" num="0054">The application may continue executing (operation <b>224</b>) with or without the presence of a network connection. For example, the application may execute until the user is finished using the application. If execution is to continue, the application is executed independently of the network connection using the stored resources (operation <b>212</b>). Network requests for the resources may be intercepted and served using the stored resources (operations <b>214</b>-<b>218</b>), and updates to the stored resources may be periodically made if a network connection is available (operation <b>222</b>). As a result, the use of the native code module and the storing of resources may allow the application to provide native performance, hardware graphics acceleration, and/or offline execution to the user in a secure environment.</p>
<p id="p-0056" num="0055">The foregoing descriptions of embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the embodiments to the forms disclosed. Accordingly, many modifications and variations will be apparent to practitioners skilled in the art. Additionally, the above disclosure is not intended to limit the present embodiments. The scope of the embodiments is defined by the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>obtaining in a computing system a resource list over a network connection, wherein the resource list identifies resources associated with an application, the application providing functionality to a user of the application when the application is executed using the resources identified in the resource list;</claim-text>
<claim-text>obtaining the resources through communications over the network connection and storing the resources in local storage, the local storage being on the computing system and accessible by the computing system without the network connection, wherein the resources include a native code module that includes binary code that can run directly on a central processing unit of the computing system;</claim-text>
<claim-text>loading the application in a web browser on the computing system;</claim-text>
<claim-text>loading the native code module into a secure runtime environment on the computing system;</claim-text>
<claim-text>executing the web browser and the application on the computing system independently of the network connection, including executing the binary code of the native code module in the secure runtime environment directly on the central processing unit of the computing system on which the web browser and the application are executing, wherein the binary code is executed on behalf of the application to provide to a user of the application one or more features of the functionality of the application; and</claim-text>
<claim-text>validating the native code module, wherein the validating includes determining that the set of instructions in the native code module do not include any restricted instructions and do not access restricted features of the computing system, prior to executing the native code module in the secure runtime environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>intercepting a network request from the web browser while the application is executing on the computing system independently of the network connection; and</claim-text>
<claim-text>serving the network request using the resources that are stored in the local storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>periodically updating the stored resources using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>storing data associated with the application in the local storage; and</claim-text>
<claim-text>synchronizing the data with a server using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the native code module is used by the application to render graphics for the application.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the stored resources further include at least one of a document, a web script, a media file, and a graphics-processing module.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the resource list is obtained based on at least one of a user of the application and a state of the application.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the application is loaded and executed without an installation procedure involving the user.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A system comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>a web browser configured to load an application;</claim-text>
<claim-text>a local server module configured to:
<claim-text>obtain a resource list over a network connection, wherein the resource list identifies resources associated with the application, the application providing functionality to a user of the application when the application is executed using the resources identified in the resource list; and</claim-text>
<claim-text>obtain the resources through communications over a network connection, and store the resources in local storage, the local storage being on the system and accessible by the local server module without the network connection, wherein the resources include a native code module that includes binary code that can run directly on a central processing unit of the computing system;</claim-text>
</claim-text>
<claim-text>a secure runtime environment configured to execute the web browser and the application on the system independently of the network connection, including execute the binary code of the native code module directly on the central processing unit of the computing system on which the web browser and the application are being executed, wherein the binary code is executed on behalf of the application to provide to a user of the application one or more features of the functionality of the application; and</claim-text>
<claim-text>a validator configured to validate the native code module including determining that the set of instructions in the native code module do not include any restricted instructions and do not access restricted features of the computing system, prior to executing the native code module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the local server module is further configured to:
<claim-text>intercept a network request from the web browser while the application is executing on the system independently of the network connection; and</claim-text>
<claim-text>serve the network request using the resources that are stored in the local storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the local server module is further configured to:
<claim-text>periodically update the stored resources using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the local server module is further configured to:
<claim-text>store data associated with the application in the local storage; and</claim-text>
<claim-text>synchronize the data with a server using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the native code module is used by the application to render graphics for the application.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the stored resources further include at least one of a document, a web script, a media file, and a graphics-processing module.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the resource list is obtained based on at least one of a user of the application and a state of the application.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the application is loaded and executed without an installation procedure involving the user.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A non-transitory computer-readable storage medium storing instructions that when executed by a computer cause the computer to perform a method for executing an application, the method comprising:
<claim-text>obtaining in the computer a resource list over a network connection, wherein the resource list identifies resources associated with the application, the application providing functionality to a user of the application when the application is executed using the resources identified in the resource list;</claim-text>
<claim-text>obtaining the resources through communications over the network connection, and storing the resources in local storage, the local storage being on the computer and accessible by the computer without the network connection, wherein the resources include a native code module that includes binary code that can run directly on a central processing unit of the computer;</claim-text>
<claim-text>loading the application in the web browser;</claim-text>
<claim-text>loading the native code module into a secure runtime environment;</claim-text>
<claim-text>executing the web browser and the application on the computer independently of the network connection, including executing the binary code of the native code module in the secure runtime environment directly on the central processing unit of the computer on which the web browser and the application are executing, wherein the binary code is executed on behalf of the application to provide to a user of the application one or more features of the functionality of the application; and</claim-text>
<claim-text>validating the native code module, wherein the validating includes determining that the set of instructions in the native code module do not include any restricted instructions and do not access restricted features of the computing system, prior to executing the native code module in the secure runtime environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising:
<claim-text>intercepting a network request from the web browser while the application is executing on the computer independently of the network connection; and</claim-text>
<claim-text>serving the network request using the resources that are stored in the local storage.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising:
<claim-text>periodically updating the stored resources using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising:
<claim-text>storing data associated with the application in the local storage; and</claim-text>
<claim-text>synchronizing the data with a server using the network connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the native code module is used by the application to render graphics for the application.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the stored resources further include at least one of a document, a web script, a media file, and a graphics-processing module.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the resource list is obtained based on at least one of a user of the application and a state of the application.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer-readable storage medium of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the application is loaded and executed without an installation procedure involving the user.</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the native code module is used by the application to provide computationally intensive features to the user on behalf of the application.</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the native code module is used by the application to provide computationally intensive features to the user on behalf of the application.</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the native code module is used by the application to provide computationally intensive features to the user on behalf of the application.</claim-text>
</claim>
</claims>
</us-patent-grant>

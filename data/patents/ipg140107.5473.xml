<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626573-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626573</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13230304</doc-number>
<date>20110912</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>157</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20120101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>Q</subclass>
<main-group>40</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>705 10</main-classification>
</classification-national>
<invention-title id="d2e55">System and method of integrating enterprise applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5560005</doc-number>
<kind>A</kind>
<name>Hoover et al.</name>
<date>19960900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6308887</doc-number>
<kind>B1</kind>
<name>Korman et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6466918</doc-number>
<kind>B1</kind>
<name>Spiegel et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0099562</doc-number>
<kind>A1</kind>
<name>Bruce et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0138013</doc-number>
<kind>A1</kind>
<name>Walker et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0278708</doc-number>
<kind>A1</kind>
<name>Zhao et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0004856</doc-number>
<kind>A1</kind>
<name>Shen et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0117000</doc-number>
<kind>A1</kind>
<name>Lulu</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2010/0153150</doc-number>
<kind>A1</kind>
<name>Prigge et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>WO</country>
<doc-number>WO0101319</doc-number>
<kind>A1</kind>
<date>20010100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>WO</country>
<doc-number>WO0133458</doc-number>
<kind>A1</kind>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>&#x201c;Web service.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://en.wikipedia.org/wiki/Web<sub>&#x2014;</sub>service, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>&#x201c;abstract class from FOLDOC:&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://foldoc.org/foldoc/foldoc.cgi?abstract+class, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;class from FOLDOC.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://foldoc.org/foldoc/foldoc.cgi? class, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>&#x201c;Composite application.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://en.wikipedia.org/wiki/Composite<sub>&#x2014;</sub>applications, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>&#x201c;Enterprise service bus.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://en.wikipedia.org/wiki/Enterprise<sub>&#x2014;</sub>Service<sub>&#x2014;</sub>Bus, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>&#x201c;inheritance from FOLDOC.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://foldoc.org/foldoc/foldoc.cgi?inheritance, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>&#x201c;object-oriented programming from FOLDOC.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://foldoc.org/foldoc/foldoc.cgi?object-oriented+language, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>&#x201c;Sales force management system.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://en.wikipedia.org/wiki/Sales<sub>&#x2014;</sub>Force<sub>&#x2014;</sub>Automation, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>&#x201c;Service-oriented architecture.&#x201d; [online] [retrieved on Oct. 3, 2006]. Retrieved from: http://en.wikipedia.org/wiki/Service-oriented<sub>&#x2014;</sub>architecture, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>705  724</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11582140</doc-number>
<date>20061016</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8019632</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13230304</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110320238</doc-number>
<kind>A1</kind>
<date>20111229</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Niheu</last-name>
<first-name>Eric K.</first-name>
<address>
<city>Newark</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Blakey</last-name>
<first-name>Robert V.</first-name>
<address>
<city>Burlingame</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chiu</last-name>
<first-name>Sherwin S.</first-name>
<address>
<city>South San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Haynie</last-name>
<first-name>Roger</first-name>
<address>
<city>Dublin</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Niheu</last-name>
<first-name>Eric K.</first-name>
<address>
<city>Newark</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Blakey</last-name>
<first-name>Robert V.</first-name>
<address>
<city>Burlingame</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Chiu</last-name>
<first-name>Sherwin S.</first-name>
<address>
<city>South San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Haynie</last-name>
<first-name>Roger</first-name>
<address>
<city>Dublin</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Fish &#x26; Richardson P.C.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Accenture Global Services Limited</orgname>
<role>03</role>
<address>
<city>Dublin</city>
<country>IE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Kazimi</last-name>
<first-name>Hani M</first-name>
<department>3691</department>
</primary-examiner>
<assistant-examiner>
<last-name>Ali</last-name>
<first-name>Hatem M</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">The present disclosure includes systems and techniques relating to enterprise application integration. In general, one aspect of the subject matter described in this specification can be embodied in a computer system including a service oriented architecture (SOA), where the system includes a composite application configured to present sales targeted information by combining services from multiple application resources on a network, wherein the multiple application resources include: a sales force automation (SFA) tool configured to automate sales and sales force management functions; a real-time predictive analytics tool configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data; a knowledge management tool configured to search and retrieve data across multiple integrated applications; and a calendar tool configured to manage appointment scheduling. The multiple application resources can further include a collaboration tool; and a business intelligence tool, including at least one live news feed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="197.02mm" wi="159.85mm" file="US08626573-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="215.82mm" wi="184.49mm" file="US08626573-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="213.87mm" wi="192.79mm" orientation="landscape" file="US08626573-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="244.18mm" wi="196.34mm" orientation="landscape" file="US08626573-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="249.43mm" wi="194.06mm" file="US08626573-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="243.16mm" wi="182.54mm" file="US08626573-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="223.10mm" wi="178.22mm" file="US08626573-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a continuation (and claims the benefit of priority under 35 USC 120) of U.S. application Ser. No. 11/582,140, filed Oct. 16, 2006, and titled &#x201c;SYSTEM AND METHOD OF INTEGRATING ENTERPRISE APPLICATIONS,&#x201d; which is incorporated by reference in its entirety for all purposes.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">The present disclosure relates to enterprise application integration.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Modern companies often rely on multiple enterprise applications (computer programs and systems designed to provide specific functionality) to help manage and run their businesses. For example, CRM (Customer Relationship Management) tools are often used by companies to manage their relationships with customers based on analysis of information stored for existing customers (and potential customers). In many cases, a company will have multiple independently established computer systems designed to address specific business processes or objectives. Such independent systems often come from different vendors and often cannot be readily integrated with each other.</p>
<p id="p-0005" num="0004">Enterprise application integration involves the use of various methods, software and computer systems to integrate a set of enterprise computer applications, and various specific integrations of one application with another have been made previously. In addition, a more recent approach has involved moving toward a service-oriented architecture (SOA) in which resources on a network are made available as independent services that can be accessed without knowledge of their underlying platform. A SOA need not be tied to a specific technology and may be implemented using a wide range of interoperability standards, such as Remote procedure call (RPC), Distributed Component Object Model (DCOM), object request broker (ORB), and Web Services Description Language (WSDL).</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">The present disclosure includes systems and techniques relating to enterprise application integration. In general, one aspect of the subject matter described in this specification can be embodied in a computer system including a service oriented architecture (SOA), where the system includes a composite application configured to present sales targeted information by combining services from multiple application resources on a network, wherein the multiple application resources include: a sales force automation (SFA) tool configured to automate sales and sales force management functions; a real-time predictive analytics tool configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data; a knowledge management tool configured to search and retrieve data across multiple integrated applications; and a calendar tool configured to manage appointment scheduling.</p>
<p id="p-0007" num="0006">The multiple application resources can further include a collaboration tool configured to resolve access rights restrictions and allow multiple users to access information in real time; and a business intelligence tool configured to gather and organize business information from multiple sources, including at least one live news feed. The composite application can include a framework defining a translation service configured at runtime by checking for query handlers that fit in the framework, a query handler being configured to convert between a first language service of the SFA tool and a second language service of another of the application resources.</p>
<p id="p-0008" num="0007">The SFA tool can include a customer relationship management (CRM) tool. The CRM tool can support on-demand indexing, and the knowledge management tool need not support on-demand indexing. Moreover, the knowledge management tool can support natural language queries.</p>
<p id="p-0009" num="0008">In addition, the subject matter described in this specification can be embodied in a computer system including a service oriented architecture (SOA), where the system includes means for presenting sales targeted information by combining services from multiple network accessible means for providing application resources including: means for automating sales and sales force management functions; means for evaluating customer purchasing data and recommending products or services based on the customer purchasing data; means for searching and retrieving data across multiple integrated applications; and means for managing appointment scheduling.</p>
<p id="p-0010" num="0009">The multiple network accessible means for providing application resources can further include means for resolving access rights restrictions and allowing multiple users to access information in real time; and means for gathering and organizing business information from multiple sources, including at least one live news feed. The means for presenting sales targeted information can include means for defining a translation service configured at runtime by checking for query handlers, a query handler including means for converting between a first language service of the means for automating and a second language service of another of the multiple network accessible means for providing application resources.</p>
<p id="p-0011" num="0010">The means for automating can include means for managing customer relationships. The means for managing customer relationships can include means for on-demand indexing, and the means for searching and retrieving data across multiple integrated applications can include means for background crawling and indexing. Moreover, the means for searching and retrieving data across multiple integrated applications can include means for supporting natural language queries.</p>
<p id="p-0012" num="0011">Another aspect of the subject matter described in this specification can be embodied in a computer-implemented method including combining services from multiple application resources on a network, the combining including interfacing with a sales force automation (SFA) tool configured to automate sales and sales force management functions, interfacing with a real-time predictive analytics tool configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data, interfacing with a knowledge management tool configured to search and retrieve data across multiple integrated applications, and interfacing with a calendar tool configured to manage appointment scheduling; and presenting sales targeted information from results obtained through the combining.</p>
<p id="p-0013" num="0012">The combining can include interfacing with a collaboration tool configured to resolve access rights restrictions and allow multiple users to access information in real time. The combining can include interfacing with a business intelligence tool configured to gather and organize business information from multiple sources, including at least one live news feed. The combining can include checking for query handlers that fit in a framework defining a translation service configured at runtime; and converting with a query handler between a first language service of the SFA tool and a second language service of another of the application resources.</p>
<p id="p-0014" num="0013">Interfacing with the SFA tool can include interfacing with a customer relationship management (CRM) tool. The combining can include connecting on-demand indexing supported by the CRM tool with background crawling and indexing supported by the knowledge management tool. The combining can include connecting on-demand indexing supported by the CRM tool with natural language queries supported by the knowledge management tool. Furthermore, the methods described in this specification can be embodied in a computer program product encoded on a computer-readable medium and including instructions operable to cause data processing apparatus to perform method operations.</p>
<p id="p-0015" num="0014">Particular embodiments can be implemented to realize one or more of the following advantages. The robust knowledge repository of a traditional portal can be combined with a more active analytical tool capable of providing advice and collaborative functionality. Sales organizations can be provided with an integrated desktop with built-in, real-time analytics and real-time external data integration, including knowledge management and readily-accessible business intelligence.</p>
<p id="p-0016" num="0015">An integrated view of customer data can be provided, enabling a better understanding of customers and the marketplace. User efficiency can be increased and training time decreased. Sales cycle time can be reduced, process quality and data integrity can be improved, and more consistent customer experiences can be fostered.</p>
<p id="p-0017" num="0016">New capabilities can be developed more rapidly and readily integrated into the system. Data from multiple resources can be combined in a composite application for presentation and interaction among the resources, and the data can remain in the respective resources. There is no need to store all data from all sources in a CRM tool. Thus, customized features can be developed and added to a unified solution sales package with decreased implementation risk, and sales agents can be given rapid access to relevant content needed to support customer care and sales efforts.</p>
<p id="p-0018" num="0017">Owners of the system can be protected from the rapidly changing standards and technology choices facing companies, since changes in an underlying system component can be accommodated by a corresponding change in a translation service employed by the larger system without affecting other system components. Moreover, a solution sales system can provide a comprehensive set of pre-integrated components along with a lightweight reusable framework for custom application development, allowing rapid response to business changes.</p>
<p id="p-0019" num="0018">The details of one or more embodiments of the present systems and techniques are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages will become apparent from the description, the drawings, and the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> shows an example SOA computer system.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> shows another example SOA computer system.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 3</figref> shows an example integration between a CRM tool and a knowledge management (KM) tool.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 4</figref> shows another example integration of a KM tool with a CRM tool.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 5</figref> shows an example reusable service framework for integrating new tools into a composite application.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 6</figref> shows example processes of integrating tools into a composite application.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> shows an example SOA computer system <b>100</b>. The computer system <b>100</b> combines multiple loosely coupled services into a composite application <b>110</b>, which can be implemented using an enterprise portal, web portal, or other user interface structure. The composite application <b>110</b> presents sales targeted information by combining services from multiple application resources on a network <b>130</b>, which can be a local area network, wide area network, public network, enterprise network, or a combination of these.</p>
<p id="p-0027" num="0026">As used herein, the term &#x201c;SOA&#x201d; indicates a service-oriented architecture in general, and does not imply compliance with any particular SOA standard. In addition, the terms &#x201c;application resource&#x201d; and &#x201c;tool&#x201d; are used (interchangeably) herein to refer to a combination of software and hardware. Note that a &#x201c;tool&#x201d; can thus include a software application sold by a first vendor and an underlying computer platform (hardware plus operating system) sold by one or more different vendors.</p>
<p id="p-0028" num="0027">The application resources combined by the composite application <b>110</b> include a sales force automation (SFA) tool <b>140</b>, a real-time predictive analytics tool <b>150</b>, a knowledge management (KM) tool <b>160</b>, and a calendar tool <b>170</b>. The SFA tool <b>140</b> can be configured to automate sales and sales force management functions. The SFA tool <b>140</b> can include additional sales and marketing directed functionality. For example the SFA tool <b>140</b> can be a customer relationship management (CRM) tool, such as existing CRM tools that are commercially available from Oracle Corporation of Redwood Shores, Calif. (and also Siebel Systems, Inc., which was purchased by Oracle Corporation).</p>
<p id="p-0029" num="0028">The real-time predictive analytics tool <b>150</b> can be configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data, such as Real-Time Decision (RTD) software available from Sigma Dynamics (whose intellectual property was purchased by Oracle Corporation of Redwood Shores, Calif.). The real-time predictive analytics tool <b>150</b> can be used to provide sales agents with insights about customer purchasing history and preferences, matched against recommended solutions.</p>
<p id="p-0030" num="0029">The KM tool <b>160</b> can be configured to search and retrieve data across multiple integrated applications, such as InQuira software available from InQuira, Inc. of San Bruno, Calif. The KM tool <b>160</b> can be leveraged to provide a comprehensive content management and knowledge management solution for identifying, acquiring, organizing and sharing any type of enterprise information with co-workers, customers or customer-facing agents. This component can support natural language queries and can derive the intent of an agent's request based on advanced linguistic techniques, rapidly delivering an accurate answer. In effect, the advanced knowledge management capability within the portal can multiply the potential impact of any single sales representative by synthesizing the experiences of all sales persons, categorizing such experiences and making them available in a configured manner to help close a deal.</p>
<p id="p-0031" num="0030">The calendar tool <b>170</b> can be configured to manage appointment scheduling and can also be configured to manage electronic communications, such as Microsoft Outlook and Exchange Server software, available from Microsoft Corporation of Redmond, Wash. Managing contacts and keeping track of meetings and appointments is a big part of any sales agent's day. Many agents rely on the Microsoft Outlook e-mail product to manage contacts and meetings, and find it time-consuming to synchronize their local information with an enterprise CRM system. By integrating the calendar tool <b>170</b> that includes contact and email functionality (e.g., Microsoft Exchange Server), an agent can update contact information or schedule meetings, and the system <b>100</b> pulls these data objects from the tool <b>170</b> and displays them within the user interface (e.g., within a enterprise portal), which can significantly boost agent productivity and make relevant information available to other agents.</p>
<p id="p-0032" num="0031">Additional application resources can also be combined in the system <b>100</b>, such as a business intelligence tool <b>180</b> or a collaboration tool (not shown). The business intelligence tool <b>180</b> can be configured to gather and organize business information from multiple sources, including at least one live news feed. For example, the business intelligence tool <b>180</b> can include business insight software available from OneSource Information Services, Inc. of Concord, Mass. The business intelligence tool <b>180</b> can provide integrated business content from a library of business knowledge, including news, articles, trends and market research, integrated from thousands of sources worldwide.</p>
<p id="p-0033" num="0032">Integrating a business intelligence tool <b>180</b> allows the system to present biographies of key executives, strategic initiatives of the company, and also industry analysis for the particular industry an account is in, such as competitors and industry trends. This allows the sales professional to get a full picture of that account and also the industry context for the account (company). Based on this intelligence, delivered directly into the user interface, agents can uncover risks from changes in corporate structures, mergers and regulatory changes, and react quickly to changes in positioning. They can efficiently evaluate prospective partners or competitors, and can craft more personalized campaigns and messages.</p>
<p id="p-0034" num="0033">The collaboration tool can be configured to resolve access rights restrictions and allow multiple users to access information in real time. For example, the collaboration tool can include Share Point Portal Server software, available from Microsoft Corporation of Redmond, Wash. Using a collaboration tool can enable any person with access to the web to work simultaneously with the sales agent to address an issue. For example, a sales agent in pursuit of a deal may have a need for quick advice and guidance from an internal or external expert. Thus, the system <b>100</b> can include a collaboration tool to allow collaborators to access the same system information in real time.</p>
<p id="p-0035" num="0034">The system <b>100</b> can be viewed as a solution sales portal that presents sales targeted information to sales agents. The system <b>100</b> can also be viewed as an integrated desktop for sales agents. The system <b>100</b> can deliver business capabilities such as pipeline management, automated probability of sale, automated up sell/cross sell recommendations based on historical data, collaboration, and natural language searching. These business capabilities can be provided to sales representatives in a single, integrated sales desktop application leveraging enabling technologies from Siebel, Siebel RTD (Sigma Dynamics), InQuira, OneSource, and Microsoft (as mentioned above).</p>
<p id="p-0036" num="0035">Integrating such independently established systems (e.g., Oracle/Siebel, SAP, etc.) across disparate business processes can be accomplished using data replication via custom interfaces with front office and back office systems. Many application resources available from commercial vendors have recently introduced support for SOA, but such systems often fail to employ a common, standardized language for the services offered. For example, the Siebel Component Assembly (SCA) product (introduced in 2005) provided a SOA for interfacing with the product, but this service was limited to connecting to data sources that can be viewed as databases. Thus, the SCA product issues Structured Query Language (SQL) statements to other data sources.</p>
<p id="p-0037" num="0036">To address these differences in language (communication interface protocols/formats) for the various services offered by the application resources <b>140</b>-<b>180</b>, the system <b>100</b> can include a translation service that operates between the tools. The translation service can take a query from a first of the tools, turn this query into a query formatted appropriately for a second of the tools, and then repackage the result of the query as appropriate for return to the first tool.</p>
<p id="p-0038" num="0037">The translation service can be part of the composite application <b>110</b>, which can include a framework <b>120</b> that defines the translation service. The framework <b>120</b> can allow the translation service to be configured at runtime by checking for query handlers that fit in the framework <b>120</b>. For example, the framework <b>120</b> can include an abstract class for query handlers whose code are located and incorporated into the composite application at runtime. Thus, query handlers <b>122</b> and <b>124</b> can be identified, loaded and executed at runtime to perform translations. A first query handler <b>122</b> can be configured to convert between a first language service of the SFA tool <b>140</b> and a second language service of the real-time predictive analytics tool <b>150</b>, and a second query handler <b>124</b> can be configured to convert between the first language service of the SFA tool <b>140</b> and a third language service of the business intelligence tool <b>180</b>. Thus, the system <b>100</b> can be readily expandable by adding new query handlers to convert a language service of a newly added application resource.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 2</figref> shows another example SOA computer system <b>200</b>. As with the system <b>100</b>, the system <b>200</b> can support first point of contact interactions with customers, providing sales agents with on-demand, relevant, real-time external data feeds, and ready access to analytics based on both external and internal intelligence sources. The system <b>200</b> can include a composite application <b>210</b> with a translation service <b>215</b> built on top of an existing SOA product, such as the Siebel Component Assembly product, and the composite application <b>210</b> can provide a componentized CRM application. In addition, the translation service <b>215</b> can employ an open, XML (Extensible Markup Language) meta-data based framework.</p>
<p id="p-0040" num="0039">The system <b>200</b> includes an analytics resource <b>220</b>, such as can be provided by RTD software available from Sigma Dynamics (whose intellectual property was purchased by Oracle Corporation of Redwood Shores, Calif.). The analytics resource <b>220</b> can be configured to run analysis on historical data and real-time stream events. The analytics resource <b>220</b> can include a built-in, fully configurable proactive alerts engine, and performance management and customer feedback tool (CSAT). Moreover, the analytics resource <b>220</b> can provide product ranking and recommendations with likelihood of acceptance indications.</p>
<p id="p-0041" num="0040">The system <b>200</b> includes a knowledge management (KM) resource <b>230</b>, which can include natural language search capabilities, such as can be provided by InQuira software available from InQuira, Inc. of San Bruno, Calif. The system <b>200</b> includes a Customer Relationship Management (CRM) resource <b>240</b>, such as can be provided by existing CRM tools that are commercially available from Oracle Corporation of Redwood Shores, Calif. (and also Siebel Systems, Inc., which was purchased by Oracle Corporation).</p>
<p id="p-0042" num="0041">The system <b>200</b> includes a real-time external business data resource <b>250</b>, such as can be provided by business insight software available from OneSource Information Services, Inc. of Concord, Mass., which can be accessed through a firewall <b>255</b>. The system <b>200</b> includes calendaring and/or collaboration resource(s) <b>260</b>, such as can be provided by Outlook, Exchange Server and Share Point Portal Server software, available from Microsoft Corporation of Redmond, Wash.</p>
<p id="p-0043" num="0042">The system <b>200</b> can interact with sales agents and managers in a variety of ways. The system <b>200</b> can include a portal user interface (UI) <b>272</b>, a WinForms based UI <b>274</b>, a custom UI <b>276</b>, or a combination of these. In any event, the UI can provide a unified view of customer data pulled from multiple integrated systems. The system <b>200</b> can provide up-to-date sales support recommendations, offerings, information and alerts. In addition, the system <b>200</b> can provide separate account manager and executive views.</p>
<p id="p-0044" num="0043">The composite application <b>210</b> can employ a SOA that runs natively on .NET and J2EE application servers. The composite application <b>210</b> can interface with the resources <b>220</b>, <b>230</b>, <b>240</b>, <b>250</b>, <b>260</b> to provide operational CRM functionality, such as forecasting, quoting, lead distribution, opportunity management, order management, proposal generation, collaboration and pipeline management. The composite application <b>210</b> can interface with the resources <b>220</b>, <b>230</b>, <b>240</b>, <b>250</b>, <b>260</b> to provide business insight functionality, such as cross sell/up sell, knowledge management, compensation/attainment, competency/learning, performance management, metrics and new product introduction. Moreover, the composite application <b>210</b> can interface with the resources <b>220</b>, <b>230</b>, <b>240</b>, <b>250</b>, <b>260</b> to provide productivity functionality, such as calendar, email, contact and task management.</p>
<p id="p-0045" num="0044">The system <b>200</b> can perform analyses of both historical customer data and real-time stream events, and can provide product rankings and recommendations. A fully-configurable, proactive alerts engine can deliver timely advice to sales personnel: customized alerts about meetings, training events, etc., as well as alerts about opportunities and solutions, recommending appropriate products or services for targeted customers, and predicting the likelihood of customer interest.</p>
<p id="p-0046" num="0045">Each resource <b>220</b>, <b>230</b>, <b>240</b>, <b>250</b>, <b>260</b> can be integrated into the system <b>200</b> using a custom interface appropriate to each respective underlying system. Furthermore, integration of a resource <b>220</b>, <b>230</b>, <b>240</b>, <b>250</b>, or <b>260</b> can involve the use of an existing SOA CRM product, such as the Siebel Component Assembly (SCA) product. For example, the calendaring and/or collaboration resource(s) <b>260</b> can be integrated using custom adapter(s) through SCA that connect directly to the Microsoft Exchange server to provide calendar and contact synchronization functions. SCA also packages a custom Outlook Add-In that can be installed in Outlook to provide sales data that can be directly accessed in Outlook. The Sharepoint Portal Server embeds the custom Sharepoint TeamSpace site directly in the Portal UI. A user can automatically create shared team spaces against sales entities in order to share specific information to external users that might not have direct access to the sales portal. This team space can be viewed through the embedded object in the portal UI, or can be accessed directly through a URL link directly accessing the Sharepoint Portal Server.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 3</figref> shows an example integration between a CRM tool and a knowledge management (KM) tool. A middle tier component <b>300</b> of a CRM tool (e.g., an SCA application server) can connect CRM data <b>320</b> to a user interface <b>326</b> through an object manager <b>302</b>. The CRM data <b>320</b> can be provided to a KM search server <b>324</b> of the KM tool. In this example, the CRM tool supports on-demand indexing, whereas the KM tool does not support on-demand indexing. Rather, the KM tool performs background crawling and indexing of data. Thus, the CRM data <b>320</b> can be provided to the KM search server <b>324</b> for crawling and indexing.</p>
<p id="p-0048" num="0047">The middle tier component <b>300</b> of the CRM tool can include an event handler <b>304</b> that triggers both a search updater service <b>306</b> and a search builder service <b>308</b>. These in turn feed data to a KM update engine <b>310</b>. Likewise, a search service <b>314</b> can feed data to a KM search engine <b>316</b>. The CRM component <b>300</b> runs the update and builder services <b>306</b> and <b>308</b> at run time, triggered by the event handler <b>304</b>. The CRM component <b>300</b> also provides an update engine interface <b>312</b> and a search engine interface <b>318</b>. The interfaces <b>312</b> and <b>318</b> allow the integration of the CRM component <b>300</b> with the search server <b>324</b>.</p>
<p id="p-0049" num="0048">Because the CRM component <b>300</b> uses the search engine <b>316</b> to build and update at runtime, if the search engine <b>316</b> does not already support this, the search engine <b>316</b> can be modified to create dummy build and update engines. Note that this can be updated if a later release supports on-demand indexing. When the search server <b>324</b> does not support on-demand indexing, the search server <b>324</b> can provide the ability to crawl and index data independent of the CRM component <b>300</b>.</p>
<p id="p-0050" num="0049">The KM search server <b>324</b> can index information found in the CRM data <b>320</b>, an KM information manager <b>330</b>, and a public network <b>328</b> (e.g., the Internet). The KM search server <b>324</b> is operationally connected to KM data <b>322</b>, where the indexing is stored. The KM tool can support natural language queries and can include the KM information manager <b>330</b> that connects with information manager (IM) data <b>334</b> and an IM user interface <b>332</b>. Note that the analytics tool can also use the Information Manager/Content Manager to provide input.</p>
<p id="p-0051" num="0050">When searching, the response for the CRM tool's data can be tailored to display and function within the tool seamlessly. For a response outside of the CRM tool, like a website, an Internet browser can be opened instead of inside the CRM tool. The search engine can be tailored to limit data based on the intent of the CRM tool. For example, when searching for a company, the word &#x201c;company&#x201d; can limit the search to only company objects. This aspect can be provided as part of the natural language querying.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 4</figref> shows an example integration of a KM tool (including InQuira software) with a CRM tool (including SCA software). Siebel Component Assembly (SCA) allows third party search engines to be integrated by implementing at least two interfaces. One is responsible for aiding the process of building indexes, and the other is responsible for aiding the process of searching and returning data. Both of these processes run on-demand within SCA. However, InQuira's system does not support on-demand indexing, so the architecture of SCA search changes a little when connecting to the InQuira architecture.</p>
<p id="p-0053" num="0052">The SCA search component includes an SCA application server <b>400</b> that connects a CRM database <b>402</b> with a user interface <b>404</b>. When a user performs a command, a service starts. The service calls the corresponding engine class to communicate with the search server. If it is a search command, data is returned back to the user.</p>
<p id="p-0054" num="0053">The SCA search component includes build and update functionality used to index information to be searched. The SCA application server <b>400</b> includes an object manager <b>406</b>, event handler <b>408</b>, search builder service <b>410</b> and search updater service <b>412</b>. These can generate an array of documents <b>414</b>, which can be converted by IUpdateEngine <b>418</b> into the search engine server's expected document object for indexing. For example, a search document can be converted into an IDocument object then passed to the search engine server to index. An InQuiraUpdateEngine <b>416</b> can handle the interface to the InQuira search server <b>440</b>. In some implementations, the InQuiraUpdateEngine <b>416</b> need not update the InQuira search server <b>440</b>, and in other implementations, the InQuiraUpdateEngine <b>416</b> does update the InQuira search server <b>440</b>.</p>
<p id="p-0055" num="0054">In addition to indexing functionality, the SCA search component includes search functionality. A sales portal search engine <b>420</b> (an implementation of ISearchEngine <b>424</b>) takes a query from search service <b>426</b> and converts the query into the search server's request object and passes the request object to the search server. The search server returns its response to the sales portal search engine <b>420</b>, which then converts the response into an array of search documents <b>428</b> and returns this array to the search service <b>426</b>. An InQuiraSearchEngine <b>422</b> can handle the interface to the InQuira search server <b>440</b>. Moreover, communications with the InQuira search server <b>440</b> can be performed using SOAP (Simple Object Access Protocol), starting with connect <b>430</b>, then sending an XML request <b>432</b>, receiving an XML response <b>434</b>, and terminating with disconnect <b>436</b>.</p>
<p id="p-0056" num="0055">In the SCA search component, a search document should be in the same format when it gets built or indexed and when it gets returned from a search. A search document's format is derived from the format of the corresponding search object (searchObj) created using the workbench. A searchObj is not only responsible for setting the values to be indexed and searched; a searchObj also specifies the related business component (busComp) and sets UI functionalities. The busComp is the corresponding business object in SCA that is to be searched and displayed. If the searchObj relates to an external object, any busComp will work; it just will not be used. The resultFields in the searchObj is what will be displayed in a list of results. Under uiInfo, the resultDescriptionField and resultNameField are set using the resultFields. The drillDownDef defines what will be displayed when this searchObj is clicked.</p>
<p id="p-0057" num="0056">The InQuira system provides a search engine server that allows natural language querying. InQuira has an API (Application Program Interface) to integrate with an application and uses SOAP to communicate with the server. InQuira builds indexes by going through each object of a collection, better known as crawling, preprocessing each object, placing each processed object into a database, and finally indexing each object. As of version 7.2, Zena (InQuira's API) does not support on-demand indexing. Because of this, indexing is done by using InQuira's Admin Tool <b>470</b>. A crawler <b>472</b> is created for each collection, and a set of tasks are processed to index a collection. When the SearchBuilderService <b>410</b> or SearchUpdaterService <b>412</b> is called, the InQuira Server Implementation of IUpdateEngine <b>418</b> does nothing since on-demand indexing is not supported.</p>
<p id="p-0058" num="0057">InQuira has database, Web, file, Siebel CRM and Information Manager crawlers available to be configured to match the desired collection. However, the Siebel CRM crawler cannot be used to crawl SCA objects because it is a different CRM. Nonetheless, SCA objects derive from the database. Every SCA object to be searched has a searchObj, and that searchObj has a corresponding database crawler with a specific SQL statement that selects the rowid (row identifier), all corresponding fields stated in that searchObj and all relationships defined by the foreign keys in the table(s). Another way to view this is to determine what the search engine implementation of InQuira needs to create from a search document to correspond to a searchObj and what relationships need to be searched against for this object. Take for instance the Opportunity object. Every Opportunity has an Account or Company. If asked, &#x201c;What Siebel Opportunities are there?&#x201d;, the corresponding Account or Company name must be selected for this relationship to be searchable. Thus, records <b>442</b> can be pulled from the CRM database <b>402</b>, preprocessed and stored in the InQuira database <b>460</b>, and an index <b>444</b> formed.</p>
<p id="p-0059" num="0058">InQuira searches by connecting to the server through SOAP, querying the server, receiving the response, converting the response to corresponding search documents, and returning the resulting search documents. The sales portal search engine <b>420</b> (in combination with InQuiraSearchEngine <b>422</b>) implements these tasks to integrate InQuira Search with SCA. The sales portal search engine <b>420</b> can use the class, IClient, from the InQuira API, j2eeclient.jar, to connect and query the server. To connect, server properties are set prior to attempting to connect, which is all done in initialize( ). To query, IClient expects a request as a string in XML format, and another string in XML format is returned as the response. The sales portal search engine <b>420</b> can parse the XML response and convert each answer into a search document based on the corresponding searchObj. Finally, the resulting search documents are returned to the search service <b>426</b>.</p>
<p id="p-0060" num="0059">The InQuira system can also provide natural language query functionality. When a search is requested, the query gets processed against a dictionary <b>446</b> including concepts and rules. A concept is a grouping of related words; a rule is a regular expression to be matched against and decides what would be the next step in finding answers <b>448</b> for the query. This is done by the InQuira Search Engine Server <b>440</b>.</p>
<p id="p-0061" num="0060">In addition, the InQuira system includes a information manager, which can be integrated with the InQuira search engine server <b>440</b>. The information manager is a content management system that allows multiple users to be able to view documents and upload modified or new documents. The information manager can connect with the Web and with an information manager database <b>480</b>. The information manager can be used as an external component of the executive sales portal and can be used when it is being searched or when it is used as a website.</p>
<p id="p-0062" num="0061">The InQuiraSearchEngine <b>422</b>, InQuiraUpdateEngine <b>416</b>, and Sales Portal Search Engine <b>420</b> can be implemented using java classes. The InQuiraUpdateEngine <b>416</b> can employ a dummy class that implements IUpdateEngine <b>418</b> as described above. The InQuiraSearchEngine <b>422</b> can employ an abstract class that implements ISearchEngine <b>424</b> and helps aid integration between SCA and InQuira. The InQuiraSearchEngine abstract class contains common methods to connect, query, and parse the response from InQuira. If SCA is in a .NET platform, a web service can be created to communicate with InQuira, which can be provided in a Java platform. The sales portal search engine <b>420</b> is an implementation of the InQuiraSearchEngine class that supports SCA objects, Opportunity and Company (assuming the crawler name is the same), Information Manager with repository name, sales portal, and crawler name, IM, and Web and file collections that have a searchObj name, &#x201c;InQuiraContent.&#x201d; If these criteria do not match, the InQuiraSearchEngine abstract class can be implemented by extending it and implementing the abstract methods.</p>
<p id="p-0063" num="0062">In some implementations, there are nine methods. For example, method printResponseXMLFlag can be a basic flag that returns true if the developer wants to export the response from the InQuira Search Server onto a file (e.g., response.xml in C:/). In production, this value should be false, as this is meant for debugging purposes only. Method getSCACollectionsNames can return a String array of all SCA collection names. Method getDefaultSearchObjectName can return the name of a Search Object in SCA reserved for default browser/URL based content. Method getIMRepositoryName can return the name of the Information Manager Repository used. If there are multiple repositories being used, the custom methods, which are described below, can be used. Method getIMCollectionNames can return a String array of all IM collection names. The five methods just described can all be hard-coded.</p>
<p id="p-0064" num="0063">The custom methods, on the other hand, may not be needed if the methods just described are sufficient. If custom methods are not needed, simply return empty, false, or null values. Method getCustomCollectionName and getCustomID can return the collection name and ID respectively from an answer element. The answer element can be an org.w3c.dom.Element in xml form. Each custom collection answer may be different. Method getCustomFieldValue can return the value corresponding to the specified field name in SCA for a customized collection from an answer element. This can be done in similar fashion as getCustomCollectionName and getCustomID. Finally, method is CustomObject can return true if the name given corresponds to one of the custom objects names.</p>
<p id="p-0065" num="0064">The above described approach to integrating a KM tool with a CRM tool can provide significant flexibility, allowing many different types of collections to be searched. In addition, as mentioned above in connection with <figref idref="DRAWINGS">FIG. 1</figref>, a framework <b>120</b> can be used to simplify the integration of new application resources and language services into the SOA system. For example, the framework <b>120</b> can be use to implement data integration web services for both the real-time predictive analytics tool <b>150</b> (e.g., Sigma Dynamics) and the business intelligence tool <b>180</b> (e.g., OneSource).</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 5</figref> shows an example reusable service framework for integrating new tools into a composite application. This example is described in the context of integrating OneSource, Sigma Dynamics and SCA, but is more generally applicable to other system integrations as well. For SCA, integration with external systems was supported by emulating a database interaction pattern (i.e. use the database integration infrastructure provided with SCA). To integrate new resources with SCA in a composite application, a web service can be implemented that accepts SOAP based SQL queries from SCA, determines and retrieves the desired data from an external system, and then massages the returned data into a tabular format that is sent back to SCA.</p>
<p id="p-0067" num="0066">The required types and interfaces used by Siebel SCA for database-oriented communication are available to developers. For example, datasource-interface.wsdl defines the IDataSourceService type that should be implemented for a web service to be callable by SCA. In addition, Siebel's SCA schemas use features of the XML Schema standard, for example polymorphic types. These features are fully supported in Microsoft's .NET framework. Thus, the web services described can be implemented using Microsoft's .NET 2.0, C#2.0, and Asp.net 2.0 technologies.</p>
<p id="p-0068" num="0067">The reusable service framework benefits from the high level of commonality inherent in the database emulation approach described above, and this reusable framework allows several external systems (e.g., OneSource and Sigma Dynamics) to be readily integrated into the composite application (e.g., a sales portal). The framework seeks to minimize the amount of time required to integrate new systems with SCA and creates a simplified extension mechanism of existing integration functionality.</p>
<p id="p-0069" num="0068">The reusable service framework can be viewed as a pluggable architecture. This architecture can include a generic data source web service <b>510</b> including a data source web service <b>512</b> that implements the IDataSourceService interface <b>522</b> for SCA. The IDataSourceService interface <b>522</b> can be an ASP.NET web service derived class that handles requests to the web service's .asmx file. This class can implement the IDataSourceService interface <b>522</b> defined by the SCA file datasource-interface.wsdl. The IDataSourceService interface <b>522</b> can delegate all requests to the SCADataRepository class to service the actual request. Furthermore, the architecture can include an SCA interface library <b>520</b> generated from SCA data source schemas. The SCA interface library <b>520</b> can be a C# .dll (dynamic link library) generated from the Siebel SCA data source related schemas using wsdl.exe (e.g., proxies generated from DataSource-Interface.wsdl).</p>
<p id="p-0070" num="0069">The architecture can include a pluggable SCA library <b>530</b> that leverages .NET Attributes and Reflection in order to find and load query handlers dynamically at runtime. The pluggable SCA library <b>530</b> can include an SCA data repository <b>532</b>, which is a class delegated to by web service to handle SCA query or update requests. The SCA data repository <b>532</b> contains a static constructor that uses Reflection to locate Types marked with the SCAQueryHandlerAttribute in the containing application's CodeBase and constructs Dictionary mapping table name strings to the Types.</p>
<p id="p-0071" num="0070">The SCA library <b>530</b> can include an SCA QueryHandler interface <b>534</b>, which is a base interface for classes wishing to act as query handlers. An SCA QueryHandler&#x3c;T&#x3e; <b>536</b> is an abstract base class for all query handler classes. The SCA QueryHandler&#x3c;T&#x3e; <b>536</b> implements the SCA QueryHandler interface <b>534</b>. In addition, an SCA QueryHandlerAttribute <b>538</b> is a .NET Attribute attached to all query handler classes, and which declares the SCA database table name for which the class handles queries.</p>
<p id="p-0072" num="0071">The above described portions of the pluggable architecture can remain unchanged for each new integration, and the architecture can include a query handler library <b>540</b> that is customized for each external service that will be integrated with SCA. A query handler class can be created for each Data Object that is mapped to the third party external service via a Federation Block in Siebel Workbench. This class can be derived from SCA QueryHandler&#x3c;T&#x3e; <b>536</b> and have the SCA QueryHandlerAttribute <b>538</b> (with the name of the table handled) applied to the class definition. For example, the following definition of OpportunitySuccessHandler <b>550</b> can be used:</p>
<p id="p-0073" num="0072">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="350pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>[SCAQueryHandler(&#x201c;SD_OPPORTUNITY_SUCCESS&#x201d;)]</entry>
</row>
<row>
<entry>public class OpportunitySuccessHandler : SCAQueryHandler&#x3c;IntegrationPointResponse&#x3e;</entry>
</row>
<row>
<entry>{</entry>
</row>
<row>
<entry>&#x2003;public OpportunitySuccessHandler( )</entry>
</row>
<row>
<entry>&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;protected override RowType[ ] ConstructSCARows(IntegrationPointResponse source, string keyColumn, string keyValue)</entry>
</row>
<row>
<entry>&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;//body removed for clarity</entry>
</row>
<row>
<entry>&#x2003;}</entry>
</row>
<row>
<entry>&#x2003;protected override IntegrationPointResponse FetchQueryResults(string id)</entry>
</row>
<row>
<entry>&#x2003;{</entry>
</row>
<row>
<entry>&#x2003;&#x2003;//body removed for clarity</entry>
</row>
<row>
<entry>&#x2003;}</entry>
</row>
<row>
<entry>}</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0074" num="0073">In <figref idref="DRAWINGS">FIG. 5</figref>, various query handlers for Sigma Dynamics are shown. These query handlers service Sigma Dynamics query requests and can include OpportunitySuccessHandler <b>550</b>, RecommendationAlertHandler <b>552</b>, OpportunityAlertHandler <b>554</b>, BroadcastAlertHandler <b>556</b>, and AttritionAlertHandler <b>558</b>. The OpportunitySuccessHandler <b>550</b> handles SCA table SD_OPPORTUNITY_SUCCESS. The RecommendationAlertHandler <b>552</b> handles SCA table SD_RECOMMENDED_SOLUTIONS. The OpportunityAlertHandler <b>554</b> handles SCA table SD_OPPORTUNITY_ALERT. The BroadcastAlertHandler <b>556</b> handles SCA table SD_BROADCAST_ALERT. The AttritionAlertHandler <b>558</b> handles SCA table SD_PRODUCT_ATTRITION. Each of these handlers can derive from SCAQueryHandler&#x3c;T&#x3e; <b>536</b> with a parameterization of IntegrationPointResponse <b>560</b>, which is defined in the sdclient.dll library distributed with Sigma Dynamics.</p>
<p id="p-0075" num="0074">Although not shown in <figref idref="DRAWINGS">FIG. 5</figref>, additional query handlers for OneSource can be added to the query handler library <b>540</b> or a separate library specific to OneSource. These can include CompanyExecutivesRTBuilder (which handles SCA table OS_EXECUTIVES), BusinessSummaryQueryHander (which handles SCA table OS_BUS_SUMMARY), CAReportsQueryHandler (which handles SCA table OS_COMPANY_ANALYSTS_REPORTS), ExecutiveBioQueryHandler (which handles SCA table OS_EXEC_BIO), NewsHeadlinesQueryHandler (which handles SCA table OS_RELATED_NEWS), ExecEducQueryHandler (which handles SCA table OS_EXEC_BIO_EDUCATION), ExecNewsQueryHandler (which handles SCA table OS_EXEC_BIO_NEWS), StrategicInitQueryHandler (which handles SCA table OS_STRATEGIC_INITIATIVES), CorpFamilyQueryHandler (which handles SCA table OS_CORPORATE_FAMILY), ArticlesQueryHandler (which handles SCA table OS_ARTICLES), BalanceSheetQueryHandler (which handles SCA table OS_BALANCESHEET), RatiosQueryHandler (which handles SCA table OS_RATIOS), CashFlowQueryHandler (which handles SCA table OS_CASHFLOW), and IncomeStatementQueryHandler (which handles SCA table OS_INCOMESTATEMENT). Each of these query handlers for OneSource can derive from SCAQueryHandler&#x3c;T&#x3e; <b>536</b> with a parameterization of XmlNode, which is defined in the System.Xml namespace of .NET. In addition, a OneSourceFormatHelper static class can be included, which provides a simple string formatting helper function called ToCurrencyString.</p>
<p id="p-0076" num="0075">As will be understood, the above reusable framework involves various deployment dependencies. For the generic web services, the SCA Interface Library depends on the SCA Data Repository Library, and both of these depend on the active server methods (ASMX) web service. Note that since Reflection is used to locate query handlers, no query handlers need be present for deployment, although the service will not do anything without at least one query handler being present at runtime. For the Sigma Dynamics web service, an sdclient.dll library can be used by the query handlers to communicate with the Sigma Dynamics server; the sdclient.dll library depends on the Sigma Dynamics table handlers, which depend on the SCA Data Repository Library, which depends on the ASMX web service, and the SCA Interface Library depends on the Sigma Dynamics table handlers, the SCA Data Repository Library, and the ASMX web service.</p>
<p id="p-0077" num="0076">For the OneSource integration, the deployment dependencies are as follows. OneSourceQueryProxy and OneSourceReportsProxy are proxy libraries generated from the published OneSource wsdl file using the wsdl.exe utility distributed with Visual Studio 2005. These two libraries can be used by the query handlers to communicate with the OneSource web service. The OneSourceQueryProxy and OneSourceReportsProxy depend on the OneSource table handlers, which depend on the SCA Data Repository Library, which depends on the ASMX web service, and the SCA Interface Library depends on the OneSource table handlers, the SCA Data Repository Library, and the ASMX web service.</p>
<p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. 6</figref> shows example processes of integrating tools into a composite application. Services from multiple application resources on a network can be combined (<b>610</b>). This can involve interfacing (<b>620</b>) with a sales force automation tool configured to automate sales and sales force management functions (e.g., a CRM tool), interfacing (<b>630</b>) with a real-time predictive analytics tool, interfacing (<b>640</b>) with a knowledge management tool, interfacing (<b>650</b>) with a calendar tool, collaboration tool or a combination of these, and interfacing (<b>660</b>) with a business intelligence tool.</p>
<p id="p-0079" num="0078">In addition, the combining can involve checking (<b>670</b>) for query handlers (e.g., sub-classes) that fit in a framework (e.g., an abstract class) defining a translation service configured at runtime, and converting (<b>680</b>) with a query handler between a first language service of the SFA tool and a second language service of another of the application resources. Thus, a dynamic code base can be employed, where a core of the code stays the same, and dynamic libraries (which can be found at runtime) can be added as needed. New code can be dropped into the framework, where this new code identifies the data source it can handle, thus allowing the system to be grown without changing the existing code base.</p>
<p id="p-0080" num="0079">The combining can further include connecting on-demand indexing supported by a CRM tool with background crawling and indexing supported by the knowledge management tool, such as described above. Moreover, the combining can include connecting on-demand indexing supported by a CRM tool with natural language queries supported by the knowledge management tool, such as described above. In any event, sales targeted information can be presented (<b>690</b>) from results obtained through the combining (<b>610</b>).</p>
<p id="p-0081" num="0080">Embodiments of the present systems and techniques, and all of the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of them. Embodiments of the present systems and techniques can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer-readable medium can be a machine-readable device, e.g., a machine-readable storage device, storage medium, or memory device, or multiple ones of them; or it can be a machine-readable communication channel on which a signal is propagated. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.</p>
<p id="p-0082" num="0081">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p>
<p id="p-0083" num="0082">The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).</p>
<p id="p-0084" num="0083">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Information carriers suitable for storing computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p>
<p id="p-0085" num="0084">To provide for interaction with a user, embodiments of the present systems and techniques can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.</p>
<p id="p-0086" num="0085">Embodiments of the present systems and techniques can be implemented in a computing system that includes a back-end component, e.g., a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the present systems and techniques, or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;), a wide area network (&#x201c;WAN&#x201d;) and a network of networks, e.g., the Internet.</p>
<p id="p-0087" num="0086">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p>
<p id="p-0088" num="0087">Particular embodiments of the present systems and techniques have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. Also, although the reusable framework is described above in connection with databases and web services, the framework can also be used to communicate with other systems and technologies, such as communicating through sockets or to a legacy system.</p>
<p id="p-0089" num="0088">Furthermore, the integration of the KM search server can be done using a Servlet or Java Servlet Page (JSP) with the search server's API for web applications instead of utilizing the CRM tool's search framework. An alternate approach to crawling the CRM tool's data can be to create a custom crawler to index the data. Although in practice, the approach of analyzing the data in the database, and then crawling and indexing based on the relationships in the data, can provide a simpler, reusable approach that is just as robust as the custom crawler approach.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer system comprising:
<claim-text>at least one processor; and</claim-text>
<claim-text>at least one non-transitory computer-readable medium coupled to the at least one processor having stored thereon:
<claim-text>a composite application that includes a framework for query handlers and that is configured to combine services from multiple application resources on a network;</claim-text>
</claim-text>
<claim-text>wherein the composite application includes instructions which, when executed by the at least one processor, causes the at least one processor to perform operations comprising:
<claim-text>checking for query handlers that fit in the framework included in the composite application;</claim-text>
<claim-text>based on the checking, locating query handlers that fit in the framework included in the composite application, the located query handlers being configured to convert between a language service used by one of the multiple application resources and a different language service used by another of the multiple application resources;</claim-text>
<claim-text>incorporating, into the composite application at runtime, the located query handlers; and</claim-text>
<claim-text>providing collaborative functionality between the multiple application resources on the network by enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime and presenting results of the collaborative functionality.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein all of the multiple application resources are configured to communicate with the composite application and a subset of the multiple application resources communicate with one another to provide collaborative functionality.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises enabling multiple independent application resources that otherwise would not be able to communicate with one another to communicate with one another.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises enabling multiple independent application resources to exchange communications directly with one another through at least one of the located query handlers, the exchanged communications bypassing the composite application.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one of the multiple independent application resources communicates with the composite application through a pathway that does not include any of the located query handlers.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises:
<claim-text>receiving, at a query handler, a query from a first application resource included in the multiple independent application resources;</claim-text>
<claim-text>turning, by the query handler, the received query into a reformatted query that is formatted appropriately for a second application resource included in the multiple independent application resources, the second application resource being different than the first application resource;</claim-text>
<claim-text>providing, by the query handler, the reformatted query to the second application resource;</claim-text>
<claim-text>receiving, at the query handler and from the second application resource, a result of the reformatted query;</claim-text>
<claim-text>repackaging, by the query handler, the result of the reformatted query for return to the first application resource; and</claim-text>
<claim-text>returning, by the query handler, the repackaged result of the reformatted query to the first application resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the composite application is readily expandable by adding a new query handler to convert a language service of a newly added application resource.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the composite application employs a dynamic code base by:
<claim-text>maintaining a core of the code of the dynamic code base the same;</claim-text>
<claim-text>finding, at runtime, dynamic libraries; and</claim-text>
<claim-text>dropping, into the framework, new code from the dynamic libraries, wherein the new code identifies the data source it can handle.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multiple application resources comprise:
<claim-text>a sales force automation tool configured to automate sales and sales force management functions;</claim-text>
<claim-text>a real-time predictive analytics tool configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data;</claim-text>
<claim-text>a knowledge management tool configured to search and retrieve data across multiple integrated applications; and</claim-text>
<claim-text>a calendar tool configured to manage appointment scheduling, and</claim-text>
<claim-text>wherein enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime comprises enabling the sales force automation tool, the real-time predictive analytics tool, the knowledge management tool, and the calendar tool to communicate with one another through the located query handlers incorporated into the composite application at runtime.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multiple application resources comprise:
<claim-text>a collaboration tool configured to resolve access rights restrictions and allow multiple users to access information in real time; and</claim-text>
<claim-text>a business intelligence tool configured to gather and organize business information from multiple sources, including at least one live news feed, and</claim-text>
<claim-text>wherein enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime comprises enabling the collaboration tool and the business intelligence tool to communicate with one another through the located query handlers incorporated into the composite application at runtime.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A computer-implemented method comprising:
<claim-text>combining, using at least one processor executing instructions of a composite application that includes a framework for query handlers, services from multiple application resources on a network, the combining including:
<claim-text>checking for query handlers that fit in the framework included in the composite application;</claim-text>
<claim-text>based on the checking, locating query handlers that fit in the framework included in the composite application, the located query handlers being configured to convert between a language service used by one of the multiple application resources and a different language service used by another of the multiple application resources;</claim-text>
<claim-text>incorporating, into the composite application at runtime, the located query handlers; and</claim-text>
<claim-text>providing collaborative functionality between the multiple application resources on the network by enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime and presenting results of the collaborative functionality.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein all of the multiple application resources are configured to communicate with the composite application and a subset of the multiple application resources communicate with one another to provide collaborative functionality.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises enabling multiple independent application resources that otherwise would not be able to communicate with one another to communicate with one another.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises enabling multiple independent application resources to exchange communications directly with one another through at least one of the located query handlers, the exchanged communications bypassing the composite application.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein at least one of the multiple independent application resources communicates with the composite application through a pathway that does not include any of the located query handlers.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein enabling multiple independent application resources to communicate with one another comprises:
<claim-text>receiving, at a query handler, a query from a first application resource included in the multiple independent application resources;</claim-text>
<claim-text>turning, by the query handler, the received query into a reformatted query that is formatted appropriately for a second application resource included in the multiple independent application resources, the second application resource being different than the first application resource;</claim-text>
<claim-text>providing, by the query handler, the reformatted query to the second application resource;</claim-text>
<claim-text>receiving, at the query handler and from the second application resource, a result of the reformatted query;</claim-text>
<claim-text>repackaging, by the query handler, the result of the reformatted query for return to the first application resource; and</claim-text>
<claim-text>returning, by the query handler, the repackaged result of the reformatted query to the first application resource.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the composite application is readily expandable by adding a new query handler to convert a language service of a newly added application resource.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the composite application employs a dynamic code base by:
<claim-text>maintaining a core of the code of the dynamic code base the same;</claim-text>
<claim-text>finding, at runtime, dynamic libraries; and</claim-text>
<claim-text>dropping, into the framework, new code from the dynamic libraries, wherein the new code identifies the data source it can handle.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the multiple application resources comprise:
<claim-text>a sales force automation tool configured to automate sales and sales force management functions;</claim-text>
<claim-text>a real-time predictive analytics tool configured to evaluate customer purchasing data and recommend products or services based on the customer purchasing data;</claim-text>
<claim-text>a knowledge management tool configured to search and retrieve data across multiple integrated applications; and</claim-text>
<claim-text>a calendar tool configured to manage appointment scheduling, and</claim-text>
<claim-text>wherein enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime comprises enabling the sales force automation tool, the real-time predictive analytics tool, the knowledge management tool, and the calendar tool to communicate with one another through the located query handlers incorporated into the composite application at runtime.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the multiple application resources comprise:
<claim-text>a collaboration tool configured to resolve access rights restrictions and allow multiple users to access information in real time; and</claim-text>
<claim-text>a business intelligence tool configured to gather and organize business information from multiple sources, including at least one live news feed, and</claim-text>
<claim-text>wherein enabling multiple independent application resources to communicate with one another through the located query handlers incorporated into the composite application at runtime comprises enabling the collaboration tool and the business intelligence tool to communicate with one another through the located query handlers incorporated into the composite application at runtime. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

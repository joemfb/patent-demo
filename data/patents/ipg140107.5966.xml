<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627078-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627078</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13551352</doc-number>
<date>20120717</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2011-201602</doc-number>
<date>20110915</date>
</priority-claim>
</priority-claims>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713168</main-classification>
</classification-national>
<invention-title id="d2e61">Communication apparatus and computer program product</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6363057</doc-number>
<kind>B1</kind>
<name>Ardalan et al.</name>
<date>20020300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2007/0097934</doc-number>
<kind>A1</kind>
<name>Walker et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370338</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0141031</doc-number>
<kind>A1</kind>
<name>Oba et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713170</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2009/0103731</doc-number>
<kind>A1</kind>
<name>Sarikaya</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2011/0085498</doc-number>
<kind>A1</kind>
<name>Oba et al.</name>
<date>20110400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2011/0271110</doc-number>
<kind>A1</kind>
<name>Ohba et al.</name>
<date>20111100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2012/0246473</doc-number>
<kind>A1</kind>
<name>Oba et al.</name>
<date>20120900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>WO</country>
<doc-number>WO 2007/091577</doc-number>
<kind>A1</kind>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>WO</country>
<doc-number>WO 2011/064865</doc-number>
<kind>A1</kind>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>WO</country>
<doc-number>WO 2011/064868</doc-number>
<kind>A1</kind>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>Extended European Search Report issued by the European Patent Office on Jan. 7, 2013, for European Patent Application No. 12176694.3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>Ohba et al., &#x201c;An Authentication Client Proxy Mechanism for Resource-Constrained Devices,&#x201d; Transmission and Distribution Conference and Exposition (May 7, 2012), pp. 1-8.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Clancy et al., &#x201c;EAP Generalized Pre-Shared Key (EAP GPSK),&#x201d; draft-ietf-emu-eap-gpsk-06 (Jul. 6, 2007), pp. 1-35.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>22</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>713168</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>14</number-of-drawing-sheets>
<number-of-figures>21</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130073852</doc-number>
<kind>A1</kind>
<date>20130321</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Oba</last-name>
<first-name>Yoshihiro</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kanda</last-name>
<first-name>Mitsuru</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tanaka</last-name>
<first-name>Yasuyuki</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Yoneyama</last-name>
<first-name>Seijiro</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Oba</last-name>
<first-name>Yoshihiro</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kanda</last-name>
<first-name>Mitsuru</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Tanaka</last-name>
<first-name>Yasuyuki</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Yoneyama</last-name>
<first-name>Seijiro</first-name>
<address>
<city>Kanagawa</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Finnegan, Henderson, Farabow, Garrett &#x26; Dunner, L.L.P.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Kabushiki Kaisha Toshiba</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Pyzocha</last-name>
<first-name>Michael</first-name>
<department>2437</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">According to an embodiment, a communication apparatus establishes communication with an external apparatus through a higher-level device. The communication apparatus includes a main processor and a key generator. The main processor receives a data authentication request including data to be authenticated, a first key specification, and a message authentication algorithm identifier from the higher-level device. The key generator retains a key hierarchy used by an authentication protocol that is used between the higher-level device and the external apparatus, and to generate a first key by use of the key hierarchy and the first key specification. The main processor generates a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the first key, and transmits a data authentication response including the message authentication code to the higher-level device.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="237.24mm" wi="187.96mm" file="US08627078-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="195.92mm" wi="189.23mm" file="US08627078-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="243.92mm" wi="186.94mm" file="US08627078-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="243.92mm" wi="195.50mm" file="US08627078-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="224.20mm" wi="124.71mm" file="US08627078-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="246.80mm" wi="140.38mm" orientation="landscape" file="US08627078-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="242.91mm" wi="166.62mm" file="US08627078-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="214.71mm" wi="141.56mm" orientation="landscape" file="US08627078-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="144.36mm" wi="142.16mm" file="US08627078-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="228.01mm" wi="199.31mm" file="US08627078-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="210.74mm" wi="208.96mm" file="US08627078-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="221.32mm" wi="207.26mm" file="US08627078-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="195.24mm" wi="146.90mm" file="US08627078-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="200.41mm" wi="148.84mm" file="US08627078-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="165.44mm" wi="191.77mm" file="US08627078-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is based upon and claims the benefit of priority from Japanese Patent Application No. 2011-201602, filed on Sep. 15, 2011; the entire contents of which are incorporated herein by reference.</p>
<heading id="h-0002" level="1">FIELD</heading>
<p id="p-0003" num="0002">Embodiments described herein relate generally to a communication apparatus and a computer program product.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">There has conventionally been known a technique of establishing communication between an apparatus such as an electric meter and an external apparatus such as a remote server through a TCP (Transmission Control Protocol)/IP (Internet Protocol) gateway.</p>
<p id="p-0005" num="0004">In this technique, the electric meter transmits measurement data measured by itself to the TCP/IP gateway as a non-IP packet by using Layer 2 frame, and the TCP/IP gateway transmits the measurement data received from the electric meter to the remote server by using HTTP (Hyper Text Transfer Protocol) over TCP/IP.</p>
<p id="p-0006" num="0005">This configuration can simplify the electric meter in the communication between the electric meter and the remote server.</p>
<p id="p-0007" num="0006">However, the above-mentioned conventional technique entails a security problem, which is such that an invalid apparatus can undesirably communicate with the external apparatus.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating an example of a communication system according to an embodiment;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> is a sequence view illustrating an example of a process of the communication system according to the embodiment;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> is a view illustrating a key hierarchy according to the embodiment;</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> is a view illustrating an example of a common message format according to the embodiment;</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> is a view illustrating an example of a payload format of a registration request according to the embodiment;</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 6</figref> is a view illustrating an example of a payload format of a registration response according to the embodiment;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 7</figref> is a view illustrating an example of a payload format of a data authentication request according to the embodiment;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 8</figref> is a view illustrating an example of a key specification according to the embodiment of the embodiment;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 9</figref> is a view illustrating an example of a complete specifier according to the embodiment;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 10</figref> is a view illustrating an example of a payload format of a data authentication response according to the embodiment;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 11</figref> is a view illustrating an example of a payload format of a key request according to the embodiment;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 12</figref> is a view illustrating an example of a payload format of a key response according to the embodiment;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 13</figref> is a view illustrating an example of a complete specifier to SK according to the embodiment;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 14</figref> is a view illustrating an example of a complete specifier to PANA_AUTH_KEY according to the embodiment;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 15</figref> is a flowchart illustrating an example of a process of a child node according to the embodiment;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 16</figref> is a flowchart illustrating an example of a main process according to the embodiment;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart illustrating an example of a process of a parent node according to the embodiment;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart illustrating an example of a parent-node-message reception process according to the embodiment;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart illustrating an example of a parent-node-message transmission process according to the embodiment;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart illustrating an example of a message authentication code acquisition process according to the embodiment; and</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart illustrating an example of a key acquisition process according to the embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0029" num="0028">According to an embodiment, a communication apparatus establishes communication with an external apparatus through a higher-level device. The communication apparatus includes a main processor and a key generator. The main processor is configured to receive a data authentication request including data to be authenticated, a first key specification, and a message authentication algorithm identifier from the higher-level device. The key generator is configured to retain a key hierarchy used by an authentication protocol that is used between the higher-level device and the external apparatus, and to generate a first key by use of the key hierarchy and the first key specification. The main processor generates a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the first key, and transmits a data authentication response including the message authentication code to the higher-level device.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram illustrating one example of a communication system <b>1</b> according to an embodiment. As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the communication system <b>1</b> includes plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N, a parent node <b>20</b>, and an application server <b>30</b>.</p>
<p id="p-0031" num="0030">The communication between the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> may be realized by a network such as a wired LAN (Local Area Network) or wireless LAN or through a short range wireless communications such as Bluetooth or ZigBee. The communication between the parent node <b>20</b> and the application server <b>30</b> may be realized by a network such as a wired LAN (Local Area Network) or wireless LAN, for example.</p>
<p id="p-0032" num="0031">Although each of the child nodes <b>10</b>-<b>1</b> to <b>10</b>-N has a different key hierarchy (described later in detail), they have the same intended purpose, components, and operation to be executed. Therefore, the child node <b>10</b>-<b>1</b> will mainly be described, and the child nodes <b>10</b>-<b>2</b> to <b>10</b>-N will not be described below.</p>
<p id="p-0033" num="0032">The child node <b>10</b>-<b>1</b> (communication apparatus, one example of a lower-level device) is mounted to a gas meter, electric meter, home appliance, illumination device, sensor, actuator, or electric vehicle, for example, and communicates with the application server <b>30</b> (one example of an external apparatus) via the parent node <b>20</b> (communication apparatus, one example of a higher-level device).</p>
<p id="p-0034" num="0033">The child node <b>10</b>-<b>1</b> includes a registration unit <b>11</b>, a main processing unit <b>13</b>, and a key generating unit <b>15</b>. The registration unit <b>11</b>, the main processing unit <b>13</b>, and the key generating unit <b>15</b> may be realized by a processing apparatus including a CPU (Central Processing Unit), RAM (Random Access Memory), and ROM (Read Only Memory), may be realized by an IC (Integrated Circuit), or may be realized by using both the processing apparatus and IC.</p>
<p id="p-0035" num="0034">The registration unit <b>11</b> transmits a list of identifiers of an authentication protocol using a key hierarchy retained by the later-described key generating unit <b>15</b> and a registration request including an authentication identifier of the child node <b>10</b>-<b>1</b> to the parent node <b>20</b>, and receives a registration response from the parent node <b>20</b>. The registration unit <b>11</b> preliminarily retains the list of the identifiers of the authentication protocol using the key hierarchy retained by the key generating unit <b>15</b> and the authentication identifier of the child node <b>10</b>-<b>1</b>.</p>
<p id="p-0036" num="0035">The main processing unit <b>13</b> receives a data authentication request including data to be authenticated, a first key specification, and a message authentication algorithm identifier from the parent node <b>20</b>. The main processing unit <b>13</b> generates a message authentication code for the data to be authenticated by using the massage authentication algorithm identified by the message authentication algorithm identifier and a first key generated from the first key specification by the later-described key generating unit <b>15</b>, and transmits a data authentication response including the message authentication code to the parent node <b>20</b>. The main processing unit <b>13</b> preliminarily retains the message authentication algorithm, and generates the message authentication code by using the message authentication algorithm specified (identified) by the message authentication algorithm identifier.</p>
<p id="p-0037" num="0036">The main processing unit <b>13</b> may be configured to retain a key cache including the first key specification contained in the data authentication request that has been received in the past and the first key generated from the first key specification, in order to compare the first key specification included in the data authentication request newly received and the first key specification included in the key cache. When they agree with each other, the main processing unit <b>13</b> may generate the message authentication code for the data to be authenticated included in the newly received data authentication request by using the first key included in the key cache and the message authentication algorithm identified by the message authentication algorithm identifier included in the newly received data authentication request.</p>
<p id="p-0038" num="0037">The main processing unit <b>13</b> may also receive a key request including a second key specification from the parent node <b>20</b>, and transmit a key response, including a second key generated from the second key specification by the later-described key generating unit <b>15</b>, to the parent node <b>20</b>.</p>
<p id="p-0039" num="0038">The key generating unit <b>15</b> retains the key hierarchy used by the authentication protocol used between the parent node <b>20</b> and the application server <b>30</b>. When the main processing unit <b>13</b> receives the data authentication request, the key generating unit <b>15</b> generates the first key by using the first key specification included in the data authentication request and the retained key hierarchy. When the main processing unit <b>13</b> receives the key request, the key generating unit <b>15</b> generates the second key by using the second key specification included in the key request and the retained key hierarchy. The generated first key and the second key belong to the key hierarchy may be retained by the key generating unit <b>15</b>.</p>
<p id="p-0040" num="0039">The parent node <b>20</b> is mounted to, for example, an electric meter, HEMS (Home Energy Management System) server, concentrator, router, wireless LAN access point, LAN switch, or electric vehicle, and allows the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the application server <b>30</b> to communicate with each other through the parent node <b>20</b>.</p>
<p id="p-0041" num="0040">The parent node <b>20</b> includes a registration unit <b>21</b>, an authentication protocol processing unit <b>23</b>, and a key specification generating unit <b>25</b>. The registration unit <b>21</b>, the authentication protocol processing unit <b>23</b>, and the key specification generating unit <b>25</b> may be realized by a processing apparatus including a CPU, RAM, and ROM, may be realized by an IC, or may be realized by using both the processing apparatus and IC.</p>
<p id="p-0042" num="0041">The registration unit <b>21</b> receives a list of identifiers of an authentication protocol using the key hierarchy retained by the corresponding child node and a registration request including an authentication identifier of the corresponding child node from each of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N. During the registration period of the corresponding child node, the registration unit <b>21</b> retains the content of the registration request and the address of the corresponding child node in association with each other, and transmits the registration response to the child node whose registration request is received. The registration unit <b>21</b> preliminarily retains the addresses of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N, and associates each of these addresses with the content of the registration request. The value of the registration period may be further included in the registration request.</p>
<p id="p-0043" num="0042">The authentication protocol processing unit <b>23</b> executes the process other than the process of generating the message authentication code out of the processes of the authentication protocol used between the parent node <b>20</b> and the application server <b>30</b>. In this embodiment, the authentication protocol includes PANA (Protocol for carrying Authentication for Network Access) method and EAP (Extensible Authentication Protocol) method. However, the authentication protocol is not limited thereto.</p>
<p id="p-0044" num="0043">The authentication protocol processing unit <b>23</b> transmits a data authentication request including the data to be authenticated, a first key specification generated by the later-described key specification generating unit <b>25</b>, and the message authentication algorithm identifier to the child node having the key hierarchy used by the authentication protocol, out of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N. The authentication protocol processing unit <b>23</b> acquires the data to be authenticated and the message authentication algorithm identifier from the message transmitted and received between the application server <b>30</b> and the authentication protocol processing unit <b>23</b>. In this embodiment, the data to be authenticated is application data exchanged between the application server <b>30</b> and the authentication protocol processing unit <b>23</b>. However, the data to be authenticated is not limited thereto. The authentication protocol processing unit <b>23</b> receives the data authentication response including the message authentication code for the data to be authenticated from the child node to which the authentication protocol processing unit <b>23</b> transmitted the data authentication request. The authentication protocol processing unit <b>23</b> executes the message authentication of the data to be authenticated by using the message authentication code received from the child node.</p>
<p id="p-0045" num="0044">The authentication protocol processing unit <b>23</b> may transmit the key request including the second key specification generated by the later-described key specification generating unit <b>25</b> to the child node, having the key hierarchy used by the authentication protocol, out of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N, and receive the key response including the second key generated from the second key specification. The authentication protocol processing unit <b>23</b> receiving the second key encrypts or decrypts the data to be authenticated by using the second key. In this embodiment, it is supposed that the second key included in the key response is shared with the application server <b>30</b>.</p>
<p id="p-0046" num="0045">The key specification generating unit <b>25</b> generates the first key specification that is for allowing the child node, having the corresponding key hierarchy, out of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N to generate the first key belonging to the key hierarchy used by the authentication protocol. The key specification generating unit <b>25</b> may also generate the second key specification that is for allowing the child node, having the corresponding key hierarchy, out of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N to generate the second key belonging to the key hierarchy used by the authentication protocol.</p>
<p id="p-0047" num="0046">The key specification is specified by a complete specifier, which is a sequence list of a complete specifying component including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label, or a reference specifier that is an integer value corresponding to the complete specifier. The key specification includes a specifier type identifying whether the designation is executed by the complete specifier or by the reference specifier. The value of the reference specifier is assigned by the transmission source of the data authentication response, and reported by the data authentication response. The key specification generating unit <b>25</b> retains the correspondence between the reference specifier and the complete specifier. With this configuration, the key specification generating unit <b>25</b> can generate the key specification by the reference specifier, not by the complete specifier. The key specification may be specified only by the complete specifier.</p>
<p id="p-0048" num="0047">The plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> may transmit and receive the registration request, the registration response, the data authentication request, the data authentication response, the key request, and the key response by using a protocol of any one of a data link layer, a network layer, and a transport layer.</p>
<p id="p-0049" num="0048">The plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> may transmit and receive, after encryption or message authentication, the registration request, the registration response, the data authentication request, the data authentication response, the key request, and the key response. In this case, a common key shared between each of the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> is used for the encryption and message authentication. The common key is desirably different for each child node.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 2</figref> is a sequence view illustrating one example of a process executed by the communication system <b>1</b> in this embodiment.</p>
<p id="p-0051" num="0050">In the example illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the communication system <b>1</b> makes authentication by using two types of authentication protocols which are an authentication protocol X and an authentication protocol Y. Specifically, the message of the authentication protocol Y is encapsulated by the message of the authentication protocol X, and the key used by the authentication protocol X for the message authentication is generated from the key hierarchy used by the authentication protocol Y. In the example illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, the authentication protocol X is PANA (RFC 5191), and the authentication protocol Y is EAP-GPSK (RFC 5433). However, the protocols are not limited thereto.</p>
<p id="p-0052" num="0051">In the example illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, only the communication between the child node <b>10</b>-<b>1</b> and the parent node <b>20</b> is illustrated as for the communication between the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b>. The message of the authentication protocol X and the message of the authentication protocol Y transmitted and received between the parent node <b>20</b> and the application server <b>30</b> illustrated in <figref idref="DRAWINGS">FIG. 2</figref> are only those to which the message authentication code is added. Therefore, the message to which the message authentication code is not added, such as the message used for the negotiation of the message authentication algorithm or the message used for the notification of the authentication identifier, is not illustrated in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0053" num="0052">Before a detailed description of the sequence, the key hierarchy retained by the child node <b>10</b>-<b>1</b> and the message format of the message transmitted and received between the child node <b>10</b>-<b>1</b> and the parent node <b>20</b> will be described with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 3</figref> is a view illustrating one example of a key hierarchy retained by the child node <b>10</b>-<b>1</b> in this embodiment. When the parent node <b>20</b> and the application server <b>30</b> use PANA (RFC 5191) as the network authentication protocol, and use EAP authentication method EAP-GPSK (RFC 5433) on the PANA, these authentication protocols employ the key hierarchy illustrated in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0055" num="0054">In the example in <figref idref="DRAWINGS">FIG. 3</figref>, a PSK (Pre-Shared Key) <b>101</b> is a common key for a shared key authentication used in EAP-GPSK, an MK (Master Key) <b>102</b> is a master key derived from the PSK <b>101</b>, an SK (Secret Key) <b>103</b> is a key used to generate a message authentication code of the EAP-GPSK, a PK <b>104</b> is a key used for a payload encryption of the EAP-GPSK, an MSK (Master Session Key) <b>105</b> and EMSK (Extended MSK) <b>106</b> are keys exported to the lower-level layer by the EAP, and a PANA_AUTH_KEY <b>107</b> is a key used to generate the message authentication code of the message of the PANA. In the example in <figref idref="DRAWINGS">FIG. 3</figref>, the PK <b>104</b> is the key used for the payload encryption of the EAP-GPSK. However, the key used for the payload encryption is not limited thereto and may be the one belonging to the key hierarchy below the EMSK <b>106</b>.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 4</figref> is a view illustrating one example of a common message format used by the message. In the example in <figref idref="DRAWINGS">FIG. 4</figref>, the common message format includes a message type, a payload plaintext length, an initialization vector, an encrypted payload, and a message authentication code.</p>
<p id="p-0057" num="0056">The message type indicates a type of a message transmitted and received between the child node <b>10</b>-<b>1</b> and the parent node <b>20</b>. It stores an integer value for distinguishing the data authentication request, the data authentication response, the registration request, the registration response, the key request, and the key response.</p>
<p id="p-0058" num="0057">The payload plaintext length stores an octet length of the payload plaintext of the message indicated by the message type.</p>
<p id="p-0059" num="0058">The initialization vector stores a random value. The random value is used to inhibit a replay attack to the encryption to the encrypted payload and the decryption from the encrypted payload.</p>
<p id="p-0060" num="0059">The encrypted payload stores the payload of the message indicated by the message type, the payload being encrypted by an encryption key (common key) shared between the child node <b>10</b>-<b>1</b> and the parent node <b>20</b>. When the encryption is not needed, the encrypted payload stores the payload indicated by the message type as being a plaintext.</p>
<p id="p-0061" num="0060">The message authentication code stores the value of the message authentication code for the message type, the payload plaintext length, the initialization vector, and the encrypted payload. The value of the message authentication code is generated by using the message authentication key (common key) shared between the child node <b>10</b>-<b>1</b> and the parent node <b>20</b>.</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 5</figref> is a view illustrating one example of a payload format of the registration request in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 5</figref>, the payload format of the registration request includes an authentication protocol identifier list, an authentication identifier, and a registration lifetime (value of a registration period).</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 6</figref> is a view illustrating one example of a payload format of the registration response in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 6</figref>, the payload format of the registration response includes a status. The status indicates whether the registration of the child node whose registration is requested by the registration request is successful or ends in failure. If it is successful, 0 is stored, and if it ends in failure, a value other than 0 indicating the reason of the failure is stored.</p>
<p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. 7</figref> is a view illustrating one example of a payload format of the data authentication request in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 7</figref>, the payload format of the data authentication request includes a key specification, a message authentication algorithm identifier, and data to be authenticated.</p>
<p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. 8</figref> is a view illustrating one example of the key specification in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 8</figref>, the key specification includes a specifier type, and a specifier. The specifier type indicates either one of a complete specifier and a reference specifier. When the specifier type indicates the complete specifier, the complete specifier is stored in the specifier. When the specifier type indicates the reference specifier, the reference specifier that is an integer value is stored in the specifier. When only the complete specifier is used for the specifier (when the reference specifier is not supported), the specifier type can be eliminated.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 9</figref> is a view illustrating one example of the complete specifier in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 9</figref>, the complete specifier is defined as a sequential list of complete specifier components. Each complete specifier component includes fields of a key type, a key length of a parent key, a key derivation function identifier, a hash function identifier, a key derivation function output length, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label.</p>
<p id="p-0067" num="0066">The key type (hereinafter sometimes referred to as &#x201c;T&#x201d;) is a type of the key to be derived. The length of the parent key (hereinafter sometimes referred to as &#x201c;P&#x201d;) is an octet length of the parent key used to derive the key. The key derivation function identifier (the key derivation function is sometimes referred to as &#x201c;D&#x201d; below) is an identifier of the key derivation function used to derive the key with an arbitrary length. The hash function identifier (the hash function is sometimes referred to as &#x201c;H&#x201d; below) is an identifier of the hash algorithm used in the key derivation function. The start position (hereinafter sometimes referred to as &#x201c;s&#x201d;) of a key sequence during the output of the key derivation function is a start position of a key derived during the output sequence of the key derivation function. The end position (hereinafter sometimes referred to as &#x201c;e&#x201d;) of the key sequence during the output of the key derivation function is an end position of a key derived during the output sequence of the key derivation function. The key label (hereinafter sometimes referred to as &#x201c;L&#x201d;) is an input parameter of the key derivation function.</p>
<p id="p-0068" num="0067">When the parent key is defined as KP, the child node <b>10</b>-<b>1</b> generates a key K according to an equation (1) by using the key specification specified by the complete specifier illustrated in <figref idref="DRAWINGS">FIG. 9</figref> from the parent node <b>20</b>.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>K=KDF</i><sub>&#x2014;</sub><i>P</i>(<i>KP, f</i>(<i>L</i>)) [<i>s, e]</i>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0069" num="0068">L1 and L2 are labels undisclosed to the parent node <b>20</b>, and determined by the key type T. f(L) is a function generating a certain octet string from the label L. f(L)=L1&#x2225;L&#x2225;L2 is used as one example of f(L). The L1 and L2 may be NULL. KDF_P (KP, f(L)) is an octet string with an arbitrary length generated by the key derivation function D using the hash function H from the key KP with the octet length P and the octet string f(L). KDF_P (KP, f(L)) is referred to as S below. S[s, e] is a function taking the octet string having the length (e&#x2212;s+1) from the s-th octet to the e-th octet of the octet string S.</p>
<p id="p-0070" num="0069">Examples of the key derivation function include GKDF (Generalized Key Derivation Function) described in RFC 5433 and prf+ described in RFC 5996. The key derivation function may the one in which the P octet at the head of the output octet string is the same as the key KP. This configuration can also be applied to the case where the parent key is used as the child key, such as the case where the message authentication code is generated by using the key of the uppermost hierarchy.</p>
<p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. 10</figref> is a view illustrating one example of a payload format of the data authentication response in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 10</figref>, the payload format of the data authentication response includes the message authentication code for the data to be authenticated, the reference specifier, and the status. Whether the reference specifier is included or not in the status is optionally determined. When the reference specifier is included in the data authentication response, the transmission source of the data authentication response assigns the value of the reference specifier. The status indicates whether the generation of the message authentication code is successful or ends in failure. If it is successful, 0 is stored, and if it ends in failure, a value other than 0 indicating the reason of the failure is stored.</p>
<p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. 11</figref> is a view illustrating one example of the payload format of the key request in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 11</figref>, the payload format of the key request includes the key specification. The detail of the key specification is as described with reference to <figref idref="DRAWINGS">FIGS. 8 and 9</figref>.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 12</figref> is a view illustrating one example of a payload format of the key response in this embodiment. In the example in <figref idref="DRAWINGS">FIG. 12</figref>, the payload format of the key response includes the key and the status. The status indicates whether the acquisition of the key is successful or ends in failure. If it is successful, 0 is stored, and if it ends in failure, a value other than 0 indicating the reason of the failure is stored.</p>
<p id="p-0074" num="0073">The payload of each message described with reference to <figref idref="DRAWINGS">FIGS. 5 to 7</figref> and <figref idref="DRAWINGS">FIGS. 10 to 12</figref> is encrypted, and stored in the encrypted payload of the common message format described in <figref idref="DRAWINGS">FIG. 4</figref>. If the encryption is unnecessary, it is stored as being a plaintext.</p>
<p id="p-0075" num="0074">Next, the sequence will be described in detail.</p>
<p id="p-0076" num="0075">Firstly, the child node <b>10</b>-<b>1</b> transmits the registration request (L, ID, T) to the parent node <b>20</b> (Step S<b>101</b>). Here, it is supposed that L is the authentication protocol identifier list, the ID is the authentication identifier, and T is the registration lifetime (value of the registration period).</p>
<p id="p-0077" num="0076">Subsequently, the parent node <b>20</b> registers the child node <b>10</b>-<b>1</b>, and transmits the registration response (SR<b>1</b>) to the child node <b>10</b>-<b>1</b> during the period indicated by the registration lifetime T (Step S<b>103</b>). It is supposed here that SR<b>1</b> is a status. Thereafter, the parent node <b>20</b> starts the authentication protocol X. At a predetermined timing after (during) the start of the authentication protocol X, the authentication protocol Y is started from the authentication protocol X.</p>
<p id="p-0078" num="0077">It is supposed that the transmission event then occurs after (during) the start of the authentication protocol Y. It is supposed here that the message Y<b>1</b> is a message GPSK-<b>2</b> of the EAP-GPSK. In this case, the parent node <b>20</b> transmits the data authentication request <b>1</b> (SY<b>1</b>, AY, DY<b>1</b>) to the child node <b>10</b>-<b>1</b> in order to acquire the message authentication code necessary for the transmission of the message Y<b>1</b> (Step S<b>105</b>). It is supposed here that the SY<b>1</b> is the key specification of the SK <b>103</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), the AY is the message authentication algorithm identifier, and DY<b>1</b> is the data to be authenticated of the message Y<b>1</b>.</p>
<p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. 13</figref> is a view illustrating one example of the complete specifier to the SK <b>103</b>. In the example in <figref idref="DRAWINGS">FIG. 13</figref>, the complete specifier is defined as a sequential list, including two components which are a complete specifier component <b>1</b>, and a complete specifier component <b>2</b> from the head. The complete specifier component <b>1</b> corresponds to the MK <b>102</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), while the complete specifier component <b>2</b> corresponds to the SK <b>103</b> (see <figref idref="DRAWINGS">FIG. 3</figref>). In both the MK <b>102</b> and SK <b>103</b>, the octet length of the parent key is 32 octets. The GKDF is used for the key derivation function, and HMAC_SHA<b>256</b> is used for the hash function.</p>
<p id="p-0080" num="0079">Next, the child node <b>10</b>-<b>1</b> transmits the authentication response <b>1</b> (CY<b>1</b>, SD<b>1</b>) to the parent node <b>20</b> (Step S<b>107</b>). It is supposed here that the CY<b>1</b> is the message authentication code for the data to be authenticated DY<b>1</b>, and the SD<b>1</b> is the status.</p>
<p id="p-0081" num="0080">Then, the parent node transmits the message Y<b>1</b> (DY<b>1</b>, CY<b>1</b>) to the application server <b>30</b> (Step S<b>109</b>).</p>
<p id="p-0082" num="0081">The parent node <b>20</b> then receives the message Y<b>2</b> (CY<b>2</b>, EY<b>2</b>) from the application server <b>30</b> (Step S<b>111</b>). It is supposed here that the message Y<b>2</b> is the message GPSK-<b>3</b> of the EAP-GPSK, the CY<b>2</b> is the message authentication code for the message Y<b>2</b>, and the EY<b>2</b> is the encrypted data of the message Y<b>2</b>.</p>
<p id="p-0083" num="0082">Next, the parent node <b>20</b> transmits the key request (SY<b>2</b>) to the child node <b>10</b>-<b>1</b> (Step S<b>113</b>). It is supposed here that the SY<b>2</b> is supposed to be the key specification of the PK <b>104</b> (see <figref idref="DRAWINGS">FIG. 3</figref>).</p>
<p id="p-0084" num="0083">The child node <b>10</b>-<b>1</b> transmits the key response (K, SK) to the parent node <b>20</b> (Step S<b>115</b>). The K is supposed to be the PK <b>104</b>, and the SK is supposed to be the status.</p>
<p id="p-0085" num="0084">Then, the parent node <b>20</b> decrypts the EY<b>2</b> by using the K so as to acquire DY<b>2</b>. The DY<b>2</b> is supposed to be the data to be authenticated of the message Y<b>2</b>. The parent node <b>20</b> then transmits the data authentication request <b>2</b> (SY<b>1</b>, AY, DY<b>2</b>) to the child node <b>10</b>-<b>1</b> (Step S<b>117</b>).</p>
<p id="p-0086" num="0085">Next, the child node <b>10</b>-<b>1</b> transmits the data authentication response <b>2</b> (CY<b>2</b>, SD<b>2</b>) to the parent node <b>20</b> (Step S<b>119</b>). The CY<b>2</b> is supposed to be the message authentication code for the data to be authenticated DY<b>2</b>, and the SD<b>2</b> is supposed to be the status. The parent node <b>20</b> confirms that the message authentication code for the message Y<b>2</b> and the message authentication code for the data authentication response <b>2</b> are CY<b>2</b>, and that they agree with each other.</p>
<p id="p-0087" num="0086">Then, it is supposed that the transmission event for the message Y<b>3</b> occurs. The message Y<b>3</b> is supposed to be the message GPSK-<b>4</b> of the EAP-GPSK. In this case, the parent node <b>20</b> transmits the data authentication request <b>3</b> (SY<b>1</b>, AY, DY<b>3</b>) to the child node <b>10</b>-<b>1</b> in order to acquire the message authentication code necessary for the transmission of the message Y<b>3</b> (Step S<b>121</b>). The DY<b>3</b> is supposed to be the data to be authenticated of the message Y<b>3</b>.</p>
<p id="p-0088" num="0087">Then, the child node <b>10</b>-<b>1</b> transmits the data authentication response <b>3</b> (CY<b>3</b>, SD<b>3</b>) to the parent node <b>20</b> (Step S<b>123</b>). The CY<b>3</b> is supposed to be the message authentication code for the data to be authenticated DY<b>3</b>, and the SD<b>3</b> is supposed to be the status.</p>
<p id="p-0089" num="0088">Next, the parent node <b>20</b> transmits the message Y<b>3</b> (DY<b>3</b>, CY<b>3</b>) to the application server <b>30</b> (Step S<b>125</b>).</p>
<p id="p-0090" num="0089">Thus, the message authentication process involved with the authentication protocol Y is completed.</p>
<p id="p-0091" num="0090">Subsequently, the parent node <b>20</b> receives the message X<b>1</b> (DX<b>1</b>, CX<b>1</b>) of the authentication protocol X from the application server <b>30</b> (Step S<b>127</b>). It is supposed here that the C bit is turned on in the PANA-Auth-Request (PAR) message in the message X<b>1</b>. The DX<b>1</b> is supposed to be the data to be authenticated of the message X<b>1</b>, and the CX<b>1</b> is supposed to be the message authentication code for the data to be authenticated DX<b>1</b>.</p>
<p id="p-0092" num="0091">Then, the parent node <b>20</b> transmits the data authentication request <b>4</b> (SX, AX, DX<b>1</b>) to the child node <b>10</b>-<b>1</b> (Step S<b>129</b>). The SX is supposed to be the key specification of the PANA_AUTH_KEY_<b>107</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), and the AX is supposed to be the message authentication algorithm identifier.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 14</figref> is a view illustrating one example of the complete specifier to the PANA_AUTH_KEY <b>107</b>. In the example in <figref idref="DRAWINGS">FIG. 14</figref>, the complete specifier is defined as a sequential list, including three components which are the complete specifier component <b>1</b>, the complete specifier component <b>2</b>, and a complete specifier component <b>3</b> from the head. The complete specifier component <b>1</b> corresponds to the MK <b>102</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), the complete specifier component <b>2</b> corresponds to the MSK <b>105</b> (see <figref idref="DRAWINGS">FIG. 3</figref>), and the complete specifier component <b>3</b> corresponds to the PANA_AUTH_KEY <b>107</b> (see <figref idref="DRAWINGS">FIG. 3</figref>). In the MK <b>102</b>, the octet length of the parent key is <b>32</b> octets, wherein the GKDF is used for the key derivation function, and HMAC_SHA<b>256</b> is used for the hash function. In the MSK <b>105</b>, the octet length of the parent key is 32 octets, wherein the GKDF is used for the key derivation function, and HMAC_SHA<b>256</b> is used for the hash function. In the PANA_AUTH_KEY <b>107</b>, the octet length of the parent key is 64 octets, where the prf+ is used for the key derivation function, and HMAC_SHA<b>1</b> is used for the hash function.</p>
<p id="p-0094" num="0093">Subsequently, the child node <b>10</b>-<b>1</b> transmits the data authentication response <b>4</b> (CX<b>1</b>, SD<b>4</b>) to the parent node <b>20</b> (Step S<b>131</b>). The SD<b>4</b> is supposed to be the status. The parent node <b>20</b> confirms that the message authentication code of the message X<b>1</b> and the message authentication code for the data authentication response <b>4</b> are both CX<b>1</b>, and that they agree with each other.</p>
<p id="p-0095" num="0094">It is supposed that the transmission event of the message X<b>2</b> occurs next. It is supposed here that the C bit is turned on in the PANA-Auth-Answer (PAN) message of the PANA in the message X<b>2</b>. In this case, the parent node <b>20</b> transmits the data authentication request <b>5</b> (SX, AX, DX<b>2</b>) to the child node <b>10</b>-<b>1</b> in order to acquire the message authentication code necessary for the transmission of the message X<b>2</b> (Step S<b>133</b>). The DX<b>2</b> is supposed to be the data to be authenticated of the message X<b>2</b>.</p>
<p id="p-0096" num="0095">The child node <b>10</b>-<b>1</b> transmits the data authentication response <b>5</b> (CX<b>2</b>, SD<b>5</b>) to the parent node <b>20</b> (Step S<b>135</b>). The CX<b>2</b> is supposed to be the message authentication code for the data to be authenticated DX<b>2</b>, and the SD<b>5</b> is supposed to be the status.</p>
<p id="p-0097" num="0096">The parent node <b>20</b> transmits the message X<b>2</b> (DX<b>2</b>, CX<b>2</b>) to the application server <b>30</b> (Step S<b>137</b>).</p>
<p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. 15</figref> is a flowchart illustrating one example of a process executed by the child node <b>10</b>-<b>1</b> in this embodiment.</p>
<p id="p-0099" num="0098">The registration unit <b>11</b> firstly transmits the registration request to the parent node <b>20</b> (Step S<b>201</b>).</p>
<p id="p-0100" num="0099">The registration unit <b>11</b> receives the registration response from the parent node <b>20</b> (Step S<b>202</b>).</p>
<p id="p-0101" num="0100">The main processing unit <b>13</b> executes a main process (Step S<b>203</b>). The detail of the main process will be described later.</p>
<p id="p-0102" num="0101">The registration unit <b>11</b> checks whether or not the registration timeout occurs, and the re-registration is needed for the parent node <b>20</b> (Step S<b>204</b>). If the re-registration is needed (Yes in Step S<b>204</b>), the process returns to the Step S<b>201</b>. If the re-registration is not needed (No in Step S<b>204</b>), the process is ended.</p>
<p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. 16</figref> is a flowchart illustrating one example of the main process in the present embodiment.</p>
<p id="p-0104" num="0103">The main processing unit <b>13</b> firstly receives an event from the parent node <b>20</b> (Step S<b>301</b>).</p>
<p id="p-0105" num="0104">The main processing unit <b>13</b> then checks whether or not the received event is the one indicating the registration timeout (Step S<b>302</b>). If it is the event indicating the registration timeout (Yes in Step S<b>302</b>), the process is ended.</p>
<p id="p-0106" num="0105">If it is not the event indicating the registration timeout (No in Step S<b>302</b>), the main processing unit <b>13</b> checks whether the received event is the data authentication request or not (Step S<b>303</b>).</p>
<p id="p-0107" num="0106">If the received event is the data authentication request (Yes in Step S<b>303</b>), the main processing unit <b>13</b> acquires the key specification S, the data to be authenticated D, and the message authentication algorithm identifier from the data authentication request, and further acquires the message authentication algorithm A identified by the message authentication algorithm identifier (Step S<b>304</b>).</p>
<p id="p-0108" num="0107">The key generating unit <b>15</b> generates the key K corresponding to the key specification S by using the retained key hierarchy and the key specification S (Step S<b>305</b>). The main processing unit <b>13</b> may generate the key cache (S, K), and may retain the resultant. When the main processing unit <b>13</b> retains the key cache (S, K), the generation of the key K by the key generating unit <b>15</b> may be skipped, and the key K may be acquired from the key cache (S, K).</p>
<p id="p-0109" num="0108">The main processing unit <b>13</b> then generates a message authentication code C&#x2032; for the data to be authenticated D by use of the key K and the message authentication algorithm A (Step S<b>306</b>).</p>
<p id="p-0110" num="0109">The main processing unit <b>13</b> then transmits the data authentication response including the message authentication code C&#x2032; to the parent node <b>20</b> (Step S<b>307</b>). Then, the process returns to Step S<b>301</b>.</p>
<p id="p-0111" num="0110">On the other hand, when the received event is not the data authentication request (No in Step S<b>303</b>), the main processing unit <b>13</b> checks whether the received event is the key request or not (Step S<b>308</b>). If it is not the key request (No in Step S<b>308</b>), the process returns to Step S<b>301</b>.</p>
<p id="p-0112" num="0111">When the received event is the key request (Yes in Step S<b>308</b>), the main processing unit <b>13</b> acquires the key specification S from the key request (Step S<b>309</b>).</p>
<p id="p-0113" num="0112">Then, the key generating unit <b>15</b> generates the key K corresponding to the key specification S by use of the retained key hierarchy and the key specification S (Step S<b>310</b>).</p>
<p id="p-0114" num="0113">The main processing unit <b>13</b> then transmits the key response including the key K to the parent node <b>20</b> (Step S<b>311</b>). Then, the process returns to Step S<b>301</b>.</p>
<p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart illustrating one example of the process executed by the parent node <b>20</b> in this embodiment.</p>
<p id="p-0116" num="0115">The authentication protocol processing unit <b>23</b> receives an event (Step S<b>401</b>).</p>
<p id="p-0117" num="0116">The authentication protocol processing unit <b>23</b> checks whether the received event is the registration request or not (Step S<b>402</b>).</p>
<p id="p-0118" num="0117">When the received event is the registration request (Yes in Step S<b>402</b>), the registration unit <b>21</b> registers the child node to which the registration request is transmitted (Step S<b>403</b>). Then, the process returns to Step S<b>401</b>.</p>
<p id="p-0119" num="0118">When the received event is not the registration request (No in Step S<b>402</b>), the registration unit <b>21</b> checks whether or not there is the child node having the registration timeout out of the registered child nodes (Step S<b>404</b>).</p>
<p id="p-0120" num="0119">If there is the child node having the registration timeout (Yes in Step S<b>404</b>), the registration unit <b>21</b> erases the registration of the child node (Step S<b>405</b>). Then, the process returns to Step S<b>401</b>.</p>
<p id="p-0121" num="0120">If there is no child node having the registration timeout (No in Step S<b>404</b>), the authentication protocol processing unit <b>23</b> checks whether the received event is the message reception event from the application server <b>30</b> or not (Step S<b>406</b>).</p>
<p id="p-0122" num="0121">If the received event is the message reception event from the application server <b>30</b> (Yes in Step S<b>406</b>), the authentication protocol processing unit <b>23</b> executes a parent-node-message reception process (Step S<b>407</b>). The detail of the parent-node-message reception process will be described later. Then, the process returns to Step S<b>401</b>.</p>
<p id="p-0123" num="0122">When the received event is not the message reception event from the application server <b>30</b> (No in Step S<b>406</b>), the authentication protocol processing unit <b>23</b> checks whether the received event is the message transmission event from the application server <b>30</b> or not (Step S<b>408</b>).</p>
<p id="p-0124" num="0123">When the received event is not the message transmission event from the application server (No in Step S<b>408</b>), the process returns to Step S<b>401</b>.</p>
<p id="p-0125" num="0124">When the received event is the message transmission event from the application server <b>30</b> (Yes in Step S<b>408</b>), the authentication protocol processing unit <b>23</b> executes a parent-node-message transmission process (Step S<b>409</b>). The detail of the parent-node-message transmission process will be described later. Then, the process returns to Step S<b>401</b>.</p>
<p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. 18</figref> is a flowchart illustrating one example of the parent-node-message reception process in this embodiment.</p>
<p id="p-0127" num="0126">Firstly, when receiving the message from the application server <b>30</b>, the authentication protocol processing unit <b>23</b> determines the child node used for the authentication of the received message, and acquires the protocol type Tp, message type Tm, data to be authenticated D, message authentication code C, and message authentication algorithm identifier (Step S<b>501</b>).</p>
<p id="p-0128" num="0127">The authentication protocol processing unit <b>23</b> then executes a message authentication code acquisition process (Step S<b>502</b>). The detail of the message authentication code acquisition process will be described later.</p>
<p id="p-0129" num="0128">The authentication protocol processing unit <b>23</b> checks whether or not the message authentication code C&#x2032; acquired in Step S<b>502</b> agrees with the message authentication code C acquired in Step S<b>501</b> (Step S<b>503</b>).</p>
<p id="p-0130" num="0129">When both message authentication codes agree with each other (Yes in Step S<b>503</b>), the authentication protocol processing unit <b>23</b> checks whether the decryption of the received message is necessary or not (Step S<b>504</b>). When the decryption of the received message is unnecessary (No in Step S<b>504</b>), the process proceeds to Step S<b>507</b>.</p>
<p id="p-0131" num="0130">When the decryption of the received message is necessary (Yes in Step S<b>504</b>), the authentication protocol processing unit <b>23</b> executes a key acquisition process (Step S<b>505</b>). The detail of the key acquisition process will be described later.</p>
<p id="p-0132" num="0131">The authentication protocol processing unit <b>23</b> decrypts the received message by use of the key acquired in the key acquisition process (Step S<b>506</b>).</p>
<p id="p-0133" num="0132">The authentication protocol processing unit <b>23</b> executes the other message reception process (Step S<b>507</b>), and the process is ended.</p>
<p id="p-0134" num="0133">On the other hand, when both message authentication codes do not agree with each other (No in Step S<b>503</b>), the authentication protocol processing unit <b>23</b> executes a message reception process upon the failure of the message authentication (Step S<b>508</b>), and the process is ended.</p>
<p id="p-0135" num="0134">In the example in <figref idref="DRAWINGS">FIG. 18</figref>, since the encrypted message does not include the message authentication code C, the message is decrypted after the message authentication. However, when the encrypted message includes the message authentication code C, the message authentication is executed after the message is decrypted.</p>
<p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. 19</figref> is a flowchart illustrating an example of the parent-node-message transmission process in this embodiment.</p>
<p id="p-0137" num="0136">When the message transmission event to the application server <b>30</b> occurs, the authentication protocol processing unit <b>23</b> determines the child node used for the authentication of the message that is to be transmitted, and acquires the protocol type Tp, message type Tm, data to be authenticated D, and message authentication algorithm identifier (Step S<b>601</b>).</p>
<p id="p-0138" num="0137">The authentication protocol processing unit <b>23</b> then checks whether the encryption of the message that is to be transmitted is necessary or not (Step S<b>602</b>). When the encryption of the message that is to be transmitted is unnecessary (No in Step S<b>602</b>), the process proceeds to Step S<b>605</b>.</p>
<p id="p-0139" num="0138">When the encryption of the message that is to be transmitted (Yes in Step S<b>602</b>) is needed, the authentication protocol processing unit <b>23</b> executes the key acquisition process (Step S<b>603</b>). The detail of the key acquisition process will be described later.</p>
<p id="p-0140" num="0139">The authentication protocol processing unit <b>23</b> then encrypts the received message by use of the key acquired in the key acquisition process (Step S<b>604</b>).</p>
<p id="p-0141" num="0140">The authentication protocol processing unit <b>23</b> then executes the message authentication code acquisition process (Step S<b>605</b>). The detail of the message authentication code acquisition process will be described later.</p>
<p id="p-0142" num="0141">The authentication protocol processing unit <b>23</b> adds the message authentication code C&#x2032; acquired in Step S<b>605</b> to the encrypted message, and transmits the resultant to the application server (Step S<b>606</b>).</p>
<p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. 20</figref> is a flowchart illustrating one example of the message authentication code acquisition process in this embodiment.</p>
<p id="p-0144" num="0143">The authentication protocol processing unit <b>23</b> firstly checks whether or not the child node used for the authentication of the message is registered (Step S<b>701</b>). If the child node used for the authentication of the message is not registered (No in Step S<b>701</b>), the process is ended.</p>
<p id="p-0145" num="0144">If the child node used for the authentication of the message is registered (Yes in Step S<b>701</b>), the key specification generating unit <b>25</b> generates the key specification S from the protocol type Tp and the message type Tm (Step S<b>702</b>).</p>
<p id="p-0146" num="0145">The authentication protocol processing unit <b>23</b> then transmits the data authentication request including the key specification S, the data to be authenticated D, and the message authentication algorithm identifier to the child node used for the authentication of the message (Step S<b>703</b>), and receives the data authentication response including the message authentication code C&#x2032; from the child node (Step S<b>704</b>).</p>
<p id="p-0147" num="0146">Next, the authentication protocol processing unit <b>23</b> acquires the message authentication code C&#x2032; from the data authentication response (Step S<b>705</b>).</p>
<p id="p-0148" num="0147"><figref idref="DRAWINGS">FIG. 21</figref> is a flowchart illustrating one example of the key acquisition process.</p>
<p id="p-0149" num="0148">The key specification generating unit <b>25</b> firstly generates the key specification S from the protocol type Tp, and the message type Tm (Step S<b>801</b>).</p>
<p id="p-0150" num="0149">The authentication protocol processing unit <b>23</b> then checks whether or not it retains the encryption key corresponding to the key specification S (Step S<b>802</b>).</p>
<p id="p-0151" num="0150">When retaining the encryption key corresponding to the key specification S (Yes in Step S<b>802</b>), the authentication protocol processing unit <b>23</b> validates the retained encryption key (Step S<b>803</b>), and then, the process is ended.</p>
<p id="p-0152" num="0151">When not retaining the encryption key corresponding to the key specification S (No in Step S<b>802</b>), the authentication protocol processing unit <b>23</b> transmits the key request including the key specification S to the child node used for the authentication of the message (Step S<b>804</b>), and receives the key response including the encryption key from the child node (Step S<b>805</b>).</p>
<p id="p-0153" num="0152">The authentication protocol processing unit <b>23</b> then acquires the encryption key from the key response (Step S<b>806</b>). The authentication protocol processing unit <b>23</b> may retain the acquired encryption key in association with the key specification S.</p>
<p id="p-0154" num="0153">The plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> in the above-mentioned embodiment includes, for example, a control device such as a CPU, a storage device such as ROM or RAM, an external storage device such as HDD or SD, and a communication device such as a communication I/F, and they can be realized by a hardware structure utilizing a normal computer.</p>
<p id="p-0155" num="0154">In this case, a program executed in the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> is provided as being installed beforehand in the ROM.</p>
<p id="p-0156" num="0155">A program executed in the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> is recorded on a computer-readable recording medium such as CD-ROM, CD-R, memory card, DVD, or flexible disk (FD) in an installable form or executable form, and provided as a computer program product.</p>
<p id="p-0157" num="0156">The program executed in the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> according to the present embodiment may be stored on a computer connected to the network such as the Internet, and provided as being downloaded through the network. The program executed in the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> according to the present embodiment may be provided or distributed through the network such as the Internet.</p>
<p id="p-0158" num="0157">The program executed in the plural child nodes <b>10</b>-<b>1</b> to <b>10</b>-N and the parent node <b>20</b> according to the present embodiment has a module structure that allows the above-mentioned respective units to be realized on the computer. As a real hardware, the respective units can be realized on the computer by the configuration in which the CPU reads the program on the RAM from the HDD, and executes the same.</p>
<p id="p-0159" num="0158">As described above, according to the communication system according to the embodiment, none of the child nodes needs to manage a state of the authentication protocol, and each child node only generates the key based upon the key specification and generates the message authentication code using the generated key, whereby the communication system can be simplified without deteriorating security.</p>
<p id="p-0160" num="0159">The child node in the embodiment only retains the root key of the key hierarchy, and the other keys may only be generated from the root key and the key specification as needed. Therefore, a memory size of the child node can be reduced.</p>
<p id="p-0161" num="0160">From the above, as the number of the child nodes increases, hardware cost of the whole communication system can be reduced due to the simplification of the child node.</p>
<p id="p-0162" num="0161">In the embodiment, the parent node executes, in place of the child node, the protocol process other than the message authentication for the other party authentication to the child node. Therefore, the other party authentication using the EAP or PANA is possible, even if the child node is simplified. Accordingly, this configuration can prevent an unauthorized device from establishing communication with the application server through the parent node.</p>
<p id="p-0163" num="0162">In the embodiment, the parent node does not retain a key hierarchy. Therefore, the key hierarchy can be prevented even if the parent node is taken over by an attacker.</p>
<p id="p-0164" num="0163">In the embodiment, the encryption key for the data to be authenticated is generated from the key hierarchy retained by the child node. Therefore, even if an attacker takes over the parent node, the confidentiality and completeness of the data to be authenticated can be maintained, whereby the influence to the child node and the application server can be kept to the minimum.</p>
<p id="p-0165" num="0164">Since the parent node in the embodiment does not have to transmit information unique to the authentication protocol to the child node, the size and number of the message transmitted and received between the parent node and the child node can be reduced.</p>
<p id="p-0166" num="0165">As described above, the embodiment can realize simplification and other party authentication.</p>
<p id="p-0167" num="0166">While certain embodiments have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the inventions. Indeed, the novel embodiments described herein may be embodied in a variety of other forms; furthermore, various omissions, substitutions and changes in the form of the embodiments described herein may be made without departing from the spirit of the inventions. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A communication apparatus that establishes communication with an external apparatus through a higher-level device, the communication apparatus comprising:
<claim-text>a main processor configured to receive a data authentication request including data to be authenticated, a first key specification, and a message authentication algorithm identifier from the higher-level device; and</claim-text>
<claim-text>a key generator configured to retain a key hierarchy used by an authentication protocol that is used between the higher-level device and the external apparatus, and to generate a first key by use of the key hierarchy and the first key specification, wherein</claim-text>
<claim-text>the main processor generates a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the first key, and transmits a data authentication response including the message authentication code to the higher-level device, and</claim-text>
<claim-text>the first key specification is specified by a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The communication apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the main processor retains a key cache including: a first key specification included in a data authentication request received in the past; and the first key generated from the first key specification, and</claim-text>
<claim-text>when a first key specification included in a newly received data authentication request agrees with the first key specification included in the key cache, the main processor generates a message authentication code for the data to be authenticated included in the newly received data authentication request, by use of the first key included in the key cache and the message authentication algorithm identified by the message authentication algorithm identifier included in the newly received data authentication request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The communication apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the main processor further receives a key request including a second key specification from the higher-level device;</claim-text>
<claim-text>the key generator further generates a second key by use of the key hierarchy and the second key specification, and</claim-text>
<claim-text>the main processor further transmits a key response including the second key to the higher-level device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The communication apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>a registration unit configured to transmit, to the higher-level device, a registration request including: a list of identifiers of the authentication protocol that uses the key hierarchy; and its authentication identifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The communication apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the authentication protocol includes a PANA (Protocol for carrying Authentication for Network Access) method and EAP (Extensible Authentication Protocol) method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The communication apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the data authentication request or the data authentication response is encrypted or subjected to a message authentication.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A communication apparatus that establishes communication with an external apparatus through a higher-level device, the communication apparatus comprising:
<claim-text>a main processor configured to receive a data authentication request including data to be authenticated, a first key specification, and a message authentication algorithm identifier from the higher-level device; and</claim-text>
<claim-text>a key generator configured to retain a key hierarchy used by an authentication protocol that is used between the higher-level device and the external apparatus, and to generate a first key by use of the key hierarchy and the first key specification, wherein</claim-text>
<claim-text>the main processor generates a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the first key, and transmits a data authentication response including the message authentication code to the higher-level device, and</claim-text>
<claim-text>the first key specification is specified by either one of: a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label; and a reference specifier that is an integer value corresponding to the complete specifier, and</claim-text>
<claim-text>the first key specification includes a specifier type for identifying whether the first key specification is specified by the complete specifier or by the reference specifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The communication apparatus according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein
<claim-text>the value of the reference specifier is assigned by a transmission source of the data authentication response, and is reported by the data authentication response.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A communication apparatus that establishes communication between a lower-level device and an external apparatus through oneself, the communication apparatus comprising:
<claim-text>an authentication protocol processor configured to execute a process, other than a process of generating a message authentication code, out of processes of an authentication protocol used between oneself and the external apparatus; and</claim-text>
<claim-text>a key specification generator configured to generate a first key specification that allows the lower-level device to generate a first key belonging to a key hierarchy used by the authentication protocol, wherein</claim-text>
<claim-text>the authentication protocol processor transmits, to the lower-level device, a data authentication request including data to be authenticated, the first key specification, and a message authentication algorithm identifier, and receives, from the lower-level device, a data authentication response including a message authentication code for the data to be authenticated, and</claim-text>
<claim-text>the first key specification is specified by a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The communication apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein
<claim-text>the key specification generator further generates a second key specification that allows the lower-level device to generate a second key belonging to the key hierarchy, and</claim-text>
<claim-text>the authentication protocol processor further transmits a key request including the second key specification to the lower-level device, and receives a key response including the second key generated from the second key specification from the lower-level device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The communication apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:
<claim-text>a registration unit configured to receive, from the lower-level device, a registration request including: a list of identifiers of the authentication protocol using the key hierarchy; and an authentication identifier of the lower-level device, and to retain content of the registration request and an address of the lower-level device in association with each other during a registration period of the lower-level device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The communication apparatus according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the registration request further includes a value of the registration period.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The communication apparatus according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein
<claim-text>the external apparatus is an application server,</claim-text>
<claim-text>the data to be authenticated is application data that is exchanged with the application server,</claim-text>
<claim-text>the second key is shared with the application server, and</claim-text>
<claim-text>the authentication protocol processor encrypts or decrypts the application data by use of the second key.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The communication apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein
<claim-text>the external apparatus is an application server,</claim-text>
<claim-text>the data to be authenticated is application data that is exchanged with the application server, and</claim-text>
<claim-text>the authentication protocol processor executes a message authentication of the application data by use of the message authentication code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The communication apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein
<claim-text>the authentication protocol includes a PANA (Protocol for carrying Authentication for Network Access) method and EAP (Extensible Authentication Protocol) method.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The communication apparatus according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein
<claim-text>the data authentication request or the data authentication response is encrypted or subjected to a message authentication.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A communication apparatus that establishes communication between a lower-level device and an external apparatus through oneself, the communication apparatus comprising:
<claim-text>an authentication protocol processor configured to execute a process, other than a process of generating a message authentication code, out of processes of an authentication protocol used between oneself and the external apparatus; and</claim-text>
<claim-text>a key specification generator configured to generate a first key specification that allows the lower-level device to generate a first key belonging to a key hierarchy used by the authentication protocol, wherein</claim-text>
<claim-text>the authentication protocol processor transmits, to the lower-level device, a data authentication request including data to be authenticated, the first key specification, and a message authentication algorithm identifier, and recieves, from the lower-level device, a data authentication response including a message authentication code for the data to be authenticated, and</claim-text>
<claim-text>the first key specification is specified by either one of: a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label; and a reference specifier that is an integer value corresponding to the complete specifier, and</claim-text>
<claim-text>the first key specification includes a specifier type for identifying whether the first key specification is specified by the complete specifier or by the reference specifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The communication apparatus according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein
<claim-text>the value of the reference specifier is assigned by a transmission source of the data authentication response, and is reported by the data authentication response.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer program product comprising a non-transitory computer-readable medium containing a program executed by a computer that establishes communication with an external apparatus through a higher-level device, the program causing the computer to execute:
<claim-text>receiving a data authentication request including data to be authenticated, a key specification, and a message authentication algorithm identifier from the higher-level device;</claim-text>
<claim-text>generating a key by use of a key hierarchy, which is used by an authentication protocol used between the higher-level device and the external apparatus, and the key specification;</claim-text>
<claim-text>generating a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the key; and</claim-text>
<claim-text>transmitting a data authentication response including the message authentication code to the higher-level device, wherein</claim-text>
<claim-text>the key specification is specified by a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the sequence during the output of the key derivation function, and a key label.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. A computer program product comprising a non-transitory computer-readable medium containing a program executed by a computer that establishes communication between a lower-level device and an external apparatus through the computer, the program causing the computer to execute:
<claim-text>executing a process, other than a process of generating a message authentication code, out of processes of an authentication protocol used between the computer and the external apparatus;</claim-text>
<claim-text>generating a key specification that allows the lower-level device to generate a key belonging to a key hierarchy used by the authentication protocol;</claim-text>
<claim-text>transmitting, to the lower-level device, a data authentication request including data to be authenticated, the key specification, and a message authentication algorithm identifier; and</claim-text>
<claim-text>receiving, from the lower-level device, a data authentication response including a message authentication code for the data to be authenticated, wherein</claim-text>
<claim-text>the key specification is specified by a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A computer program product comprising a non-transitory computer-readable medium containing a program executed by a computer that establishes communication with an external apparatus through a higher-level device, the program causing the computer to execute:
<claim-text>receiving a data authentication request including data to be authenticated, a key specification, and a message authentication algorithm identifier from the higher-level device;</claim-text>
<claim-text>generating a key by use of a key hierarchy, which is used by an authentication protocol used between the higher-level device and the external apparatus, and the key specification;</claim-text>
<claim-text>generating a message authentication code for the data to be authenticated by use of the message authentication algorithm, which is identified by the message authentication algorithm identifier, and the key; and</claim-text>
<claim-text>transmitting a data authentication response including the message authentication code to the higher-level device, wherein</claim-text>
<claim-text>the key specification is specified by either one of: a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label; and a reference specifier that is an integer value corresponding to the complete specifier, and</claim-text>
<claim-text>the key specification includes a specifier type for identifying whether the key specification is specified by the complete specifier or by the reference specifier.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. A computer program product comprising a non-transitory computer-readable medium containing a program executed by a computer that establishes communication between a lower-level device and an external apparatus through the computer, the program causing the computer to execute:
<claim-text>executing a process, other than a process of generating a message authentication code, out of processes of an authentication protocol used between the computer and the external apparatus;</claim-text>
<claim-text>generating a key specification that allows the lower-level device to generate a key belonging to a key hierarchy used by the authentication protocol;</claim-text>
<claim-text>transmitting, to the lower-level device, a data authentication request including data to be authenticated, the key specification, and a message authentication algorithm identifier; and</claim-text>
<claim-text>receiving, from the lower-level device, a data authentication response including a message authentication code for the data to be authenticated, wherein</claim-text>
<claim-text>the key specification is specified by either one of: a complete specifier that is a sequence list of complete specifier components including a type of key, a length of a parent key, a key derivation function identifier, a hash function identifier, an output length of the key derivation function, a start position of a key sequence during the output of the key derivation function, an end position of the key sequence during the output of the key derivation function, and a key label; and a reference specifier that is an integer value corresponding to the complete specifier, and</claim-text>
<claim-text>the key specification includes a specifier type for identifying whether the key specification is specified by the complete specifier or by the reference specifier. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

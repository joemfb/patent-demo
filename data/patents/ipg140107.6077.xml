<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627201-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627201</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12512200</doc-number>
<date>20090730</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>CN</country>
<doc-number>2008 1 0129997</doc-number>
<date>20080730</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>803</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715239</main-classification>
<further-classification>715234</further-classification>
</classification-national>
<invention-title id="d2e71">Method for generating simple object access protocol messages and process engine</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2007/0136435</doc-number>
<kind>A1</kind>
<name>Lee et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709213</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2008/0109524</doc-number>
<kind>A1</kind>
<name>Meadows et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709207</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2009/0064175</doc-number>
<kind>A1</kind>
<name>Taylor et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719313</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00004">
<othercit>Weihai Yu, Toward a Lightweight Process-Aware Middleware, APWeb/WAIM 2007 Ws, LNCS 4537, pp. 497-503, 2007.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00005">
<othercit>Marcel-C{hacek over (a)}t{hacek over (a)}lin Ro<?img id="CUSTOM-CHARACTER-00001" he="2.79mm" wi="2.46mm" file="US08627201-20140107-P00001.TIF" alt="custom character" img-content="character" img-format="tif" ?>u, A-SOAP: Adaptive SOAP Message Processing and Compression, 2007 IEEE International Conference on Web Services (ICWS 2007).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Ranjit Mulye, METEOR-S Process Design and Development Tool (PDDT), University of Georgia Computer Science Department.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Adrian Giurca, et. al.,Modeling Web Services with URML, Brandenburg University of Technology, May 15, 2006.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Charles Petrie, Service Agents and Virtual Enterprises: A Survey, IEEE Intenet Computing, Special issue on &#x201c;Business Processes on the Web&#x201d;, Jan./Feb. 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>8</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715234</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715243</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715254</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715255</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715239</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>11</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100031138</doc-number>
<kind>A1</kind>
<date>20100204</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ling</last-name>
<first-name>Jin</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Liu</last-name>
<first-name>Liang</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Pan</last-name>
<first-name>Ping</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Tian</last-name>
<first-name>Qi Ming</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
<residence>
<country>CN</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ling</last-name>
<first-name>Jin</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Liu</last-name>
<first-name>Liang</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Pan</last-name>
<first-name>Ping</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Tian</last-name>
<first-name>Qi Ming</first-name>
<address>
<city>Haidian District</city>
<country>CN</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<last-name>Grzesik</last-name>
<first-name>Thomas</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<orgname>Fleit Gibbons Gutman Bongini &#x26; Bianco PL</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Stork</last-name>
<first-name>Kyle</first-name>
<department>2178</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for generating a Simple Object Access Protocol (SOAP) message in XML during execution of a process in a SOA-based process engine apparatus and a corresponding process engine apparatus. The method includes: generating and storing an XML character string containing a fixed SOAP message skeleton; generating and storing an XML character string containing an instance-constant variable; generating an XML character string containing a dynamic variable; and concatenating the XML character string containing the fixed SOAP message skeleton and the XML character string containing the instance-constant variable as previously stored and the XML character string containing the dynamic variable by a character string concatenating operation to generate a SOAP message. A process engine apparatus including a message analyzer unit, a message pre-composer unit, a character string depository, and a message composer unit is also provided.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="182.71mm" wi="206.67mm" file="US08627201-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="169.67mm" wi="129.46mm" file="US08627201-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="227.84mm" wi="142.83mm" orientation="landscape" file="US08627201-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="239.61mm" wi="148.08mm" file="US08627201-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="222.93mm" wi="182.03mm" orientation="landscape" file="US08627201-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="225.55mm" wi="181.10mm" orientation="landscape" file="US08627201-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="238.93mm" wi="185.00mm" orientation="landscape" file="US08627201-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="244.18mm" wi="161.46mm" orientation="landscape" file="US08627201-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="248.07mm" wi="168.66mm" orientation="landscape" file="US08627201-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims priority under 35 U.S.C. &#xa7;119 from Chinese Patent Application No. 200810129997.5, filed Jul. 30, 2008, the entire contents of which are incorporated herein by reference.</p>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention generally relates to the field of Web services and, in particular, to process engine technologies based upon the Service-Oriented Architecture (SOA).</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">In recent years, Web service technologies have advanced rapidly along with speedy development of computer and network technologies. Web service technologies have become a predominant technology foundation and platform for development of applications. Web services have been supported by major corporations in the industry, e.g., IBM, Microsoft, BEA, etc., due to their advantages of easy encapsulation, loose coupling, utilization of standard protocol specifications and the ability of being highly integrated. International standardization organizations including the World Wide Web Consortium (W3C), the Organization for the Advancement of Structured Information Standards (OASIS), have established several standard specifications to thereby impel rapid development of relevant technologies and applications. A Web service which is a stand-alone modular application describes operations to be executed or data to be exchanged with another Web service using protocols based on the eXtensible Markup Language (XML) and typically fails to satisfy operation requirements of a business process by itself. In order to cater to increasingly complex and changing business requirements, Web services are needed to be linked together into a business process to achieve a more sophisticated function. A business process specifies a possible order in which operations of a set of Web services are executed, data shared among these Web services, and is executed automatically by a process execution engine for achieving automation as much as possible.</p>
<p id="p-0005" num="0004">SOA-based process engines have been in increasingly wide use along with development of Web technologies. More and more enterprises or corporations disclose complex systems as Web services and automate business processes by means of process engines. These process engines usually guide execution of processes with use of the Business Process Execution Language (BPEL) and describe services with use of the Web Service Description Language (WSDL). The BPEL is an XML-based work flow definition language, which was initially developed jointly by Microsoft, IBM and BEA. It has a basic function of choreography and coordinating of Web services to deploy their cooperative and transactional behaviors. The BPEL describes internal processes of an enterprise in XML so that business processes originally established on different products can also enable across-platform intercommunicating in the same way as Web services do. When a process engine is intended to execute a work flow described in the developed BPEL, or more particularly described in the Business Process Execution Language for Web Services (BPEL4WS), the process engine usually needs to invoke atomic services or external services provided by various Web service providers or various platforms or systems. In the case of utilizing a SOA solution and the BPEL4WS, invoking of several Web services often occurs in a process instance and business process choreographies are widely adopted in enterprise systems.</p>
<p id="p-0006" num="0005">When invoking a Web service, request and response messages are always Simple Object Access Protocol (SOAP) messages. Multi-round composition and decomposition of SOAP messages will inevitably occur in a business process. That is to say, composition and decomposition of SOAP messages are the basis of invoking of a Web service, and composition of SOAP messages in the XML will occur many times in a process instance. In many existing process engines, all SOAP messages in a process instance are composed independently during execution of the process. However, composition of SOAP messages in the XML is a very frequently occurring and time-consuming character string processing task. That is, composition of SOAP messages is one of major causes resulting in delay in invoking a business process. Moreover, at the service level, a long response time to a Web service may degrade satisfaction of customers, and the Web service often cannot be offered to a sufficient number of concurrent users due to limited resources. Therefore, it is highly desirable to address the problem of how to enable a process engine to reduce the time required for composition of SOAP messages during the execution of a process, thereby optimizing performance of the process engine.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">In order to address the above problem in the prior art, an object of the invention is to provide a method for generating a SOAP message during execution of a business process that can reduce the time required for generating the SOAP message by simple concatenation of character strings in place of conventional composition of the SOAP message and thereby optimize performance of a process engine. Another object of the invention is to provide a process engine improved in performance, which replaces conventional composition of a SOAP message with simple concatenation of character strings so that the time required for generating the SOAP message can be reduced significantly and hence performance of the process engine can be optimized.</p>
<p id="p-0008" num="0007">Accordingly, the present invention provides a method for generating a Simple Object Access Protocol (SOAP) message in eXtensible Markup Language (XML) during execution of a process in a process engine apparatus based upon Service-Oriented Architecture (SOA), which process includes the steps of: generating an XML character string containing a fixed SOAP message skeleton using a message analyzer unit in the process engine apparatus; storing the XML character string containing the fixed SOAP message skeleton in a character string depository in the process engine apparatus; generating an XML character string containing an instance-constant variable using a message pre-composer unit in the process engine apparatus; storing the XML character string containing the instance-constant variable in the character string depository in the process engine apparatus; generating an XML character string containing a dynamic variable using a message composer unit in the process engine apparatus; and concatenating (i) the XML character string containing the fixed SOAP message skeleton, (ii) the XML character string containing the instance-constant variable and (iii) the XML character string containing the dynamic variable using a character string concatenating operation in the message composer unit to generate the SOAP message.</p>
<p id="p-0009" num="0008">The present invention provides a process engine apparatus based upon Service-Oriented Architecture (SOA), including: a message analyzer unit configured to analyze a Simple Object Access Protocol (SOAP) message in eXtensible Markup Language (XML) that is generated during execution of a process and generate an XML character string containing a fixed SOAP message skeleton; a message pre-composer unit configured to generate an XML character string containing an instance-constant variable; a character string depository configured to store the XML character string containing the fixed SOAP message skeleton generated by the message analyzer unit and the XML character string containing the instance-constant variable generated by the message pre-composer unit; and a message composer unit configured to (i) generate an XML character string containing a dynamic variable, (ii) retrieve from the character string depository the XML character string containing the SOAP message skeleton and the XML character string containing the instance-constant variable, and (iii) concatenate all the XML character strings to generate a SOAP message.</p>
<p id="p-0010" num="0009">The present invention improves upon the conventional method of composing a SOAP message by using a light-weight XML character string concatenating operation and thereby optimizing the performance of the process engine.</p>
<p id="p-0011" num="0010">Other features and advantages of the invention will become more apparent from the following detailed description of preferred embodiments of the invention with reference to the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0012" num="0011">The invention can be better understood with reference to the description given below in conjunction with the accompanying drawings, throughout which identical or like components are denoted by identical or like reference signs, and together with which the following detailed description are incorporated into and form a part of the specification and serve to further illustrate preferred embodiments of the invention and to explain principles and advantages of the invention. In the drawings:</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 1</figref> shows a flow chart of a method for generating a SOAP message by a character string concatenating operation in a process engine according to an embodiment of the invention;</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> shows an example of a SOAP message obtained in the method shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 3</figref> shows a schematic block diagram of a process engine according to an embodiment of the invention;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 4</figref> shows an example of definition of a typical and simple business process;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 5</figref> shows a schematic diagram of a procedure of generating an XML character string containing a fixed SOAP message skeleton at the time of deploying a BPEL script onto the process engine shown in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 6</figref> shows a schematic diagram of a procedure of initializing a process instance on the process engine shown in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 7</figref> shows a schematic diagram of a procedure when the process shown in <figref idref="DRAWINGS">FIG. 4</figref> proceeds to ready for invoking a service C on the process engine shown in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 8</figref> shows an example of a SOAP message skeleton generated for the service C during execution of the procedure as shown in <figref idref="DRAWINGS">FIG. 5</figref>;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of an XML character string containing an instant-constant variable, which is generated during execution of the procedure as shown in <figref idref="DRAWINGS">FIG. 6</figref>;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 10</figref> shows an example of an XML character string containing a dynamic variable, which is generated for the service C during execution of the procedure as shown in <figref idref="DRAWINGS">FIG. 7</figref>; and</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 11</figref> shows the manner in which character strings are concatenated in order to obtain a SOAP message for invoking the service C (i.e., a request message to be output to the service C) during execution of the procedure as shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0024" num="0023">The inventors have found during optimizing a process engine that, the majority of contents in a SOAP message resulting from being composed many times during invoking of a Web service are completely identical for all SOAP messages involved in one and the same process and therefore can be referred to as a process-constant variable, a part of the contents are identical for the same process instance but vary from one process instance to another and therefore can be referred to as an instance-constant variable, and the remaining part of the contents vary from one SOAP message to another and therefore can be referred to as a dynamic variable for the sake of simplicity.</p>
<p id="p-0025" num="0024">Therefore, in view of this finding described above, it can be considered that each SOAP message to be output from a process engine may be divided into three parts which can be generated at different points of time as required. Particularly, the first part is a fixed SOAP message skeleton containing a process-constant variable and may be generated, for example, at the time of deployment of a BPEL script onto the process engine; the second part contains a instance-constant variable and may be generated, for example, at the time of initialization of a process instance; and the third part contains a dynamic variable and may be generated, for example, prior to transmission of the SOAP message.</p>
<p id="p-0026" num="0025">In view of the above, in order to attain the above objects of the invention, there is provided according to an aspect of the invention a method for generating a SOAP message in the XML during execution of a process in a SOA-based process engine, which includes the following steps: generating and storing an XML character string containing a fixed SOAP message skeleton; generating and storing an XML character string containing an instance-constant variable; generating an XML character string containing a dynamic variable; and concatenating the XML character string containing the fixed SOAP message skeleton and the XML character string containing the instance-constant variable as previously stored and the XML character string containing the dynamic variable by a character string concatenating operation to generate a SOAP message.</p>
<p id="p-0027" num="0026">According to another aspect of the invention, there is further provided a SOA-based process engine including: a message analyzer adapted to analyze a SOAP message in the XML to be generated during execution of a process and generate an XML character string containing a fixed SOAP message skeleton; a message pre-composer adapted to generate an XML character string containing an instance-constant variable; a character string depository adapted to store the XML character string containing the fixed SOAP message skeleton generated by the message analyzer and the XML character string containing the instance-constant variable generated by the message pre-composer; and a message composer adapted to generate an XML character string containing a dynamic variable, retrieve from the character string depository the XML character string containing the SOAP message skeleton and the XML character string containing the instance-constant variable, and then concatenate all the XML character strings to generate a SOAP message.</p>
<p id="p-0028" num="0027">According to other aspects of the invention, there are further provided a corresponding computer readable storage medium and a corresponding computer program product.</p>
<p id="p-0029" num="0028">Exemplary embodiments of the present invention will be described in conjunction with the accompanying drawings hereinafter. For the sake of clarity and conciseness, not all the features of actual implementations are described in the specification. However, it is to be appreciated that, during developing any of such actual implementations, numerous implementation-specific decisions must be made to achieve the developer's specific goals, for example, compliance with system-related and business-related constraints which will vary from one implementation to another. Moreover, it is also to be appreciated that, such a development effort might be very complex and time-consuming, but may nevertheless be a routine task for those skilled in the art having the benefit of this disclosure.</p>
<p id="p-0030" num="0029">It shall further be noted that only device structures and/or processing steps closely relevant to solutions of the invention will be illustrated in the drawings while omitting other details less relevant to the invention so as not to obscure the invention due to those unnecessary details.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 1</figref> shows a flow chart of a method <b>100</b> for generating a SOAP message by a character string concatenating operation in a process engine according to an embodiment of the invention. Here, the procedure of the method <b>100</b> will be explained by taking a business process described in the BPEL as an example. However, those skilled in the art shall appreciate that the method <b>100</b> according to the embodiment of the invention will not be limited only to a business process in the BPEL but can also be applicable to business processes described in other languages such as BPEL4WS, SCXML (State Chart XML) and so on.</p>
<p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, at step S<b>110</b>, an XML character string containing a fixed SOAP message skeleton is generated based upon the definition of a process and stored, for example, in a character string depository inside a process engine. The processing of step S<b>110</b> may be executed at the time of deploying a BPEL script onto the process engine. However, those skilled in the art shall appreciate that the processing of this step may also be executed later as long as the XML character string containing the SOAP message skeleton is generated prior to initialization of a process instance. Here, the SOAP message skeleton contains a process-constant variable, e.g., a message head of a SOAP message, which is identical for all SOAP messages in one and the same business process.</p>
<p id="p-0033" num="0032">Next, at step S<b>120</b>, an XML character string containing an instance-constant variable is generated and stored in the character string depository. The processing of step S<b>120</b> can be executed, for example, at the time of initializing a process instance. Here, the instance-constant variable is identical for one and the same process instance and can include a global variable, e.g., user ID, etc.</p>
<p id="p-0034" num="0033">Thereafter, at step S<b>130</b>, an XML character string containing a dynamic variable is generated. The processing of step S<b>130</b> can be prior to transmission of the SOAP message, for example. Here, the dynamic variable refers to any variable in the SOAP message, which varies from one SOAP message to another.</p>
<p id="p-0035" num="0034">Then, at step S<b>140</b>, the XML character string containing the fixed SOAP message skeleton and the XML character string containing the instance-constant variable, which were previously stored, are retrieved from the character string depository and concatenated with the XML character string containing the dynamic variable, which was generated at step S<b>130</b>, to thereby obtain the complete SOAP message to be output. The processing of step S<b>140</b> can be executed prior to transmission of the SOAP message.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> shows an example of a SOAP message obtained from concatenation of the character strings in the method <b>100</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. As can be apparent from <figref idref="DRAWINGS">FIG. 2</figref>, the SOAP message can be divided into one part of the fixed message skeleton and the other varying for the process. For example, the SOAP message can be divided by means of a standard reference method or structure (i.e., a reference mechanism) provided in the XML, and the SOAP message can be obtained by concatenating (i) the XML character string containing the SOAP message skeleton, (ii) the XML character string containing the instance-constant variable and (iii) the XML character string containing the dynamic variable.</p>
<p id="p-0037" num="0036">Although the reference mechanism provided in the XML is used in the example of the SOAP message as shown in <figref idref="DRAWINGS">FIG. 2</figref>, those skilled in the art shall appreciate that the SOAP message can be divided into the fixed part and the varying parts by using other similar methods or structures.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> shows a schematic block diagram of a process engine <b>300</b> according to an embodiment of the invention. Only components closely relevant to the invention are shown for conciseness. The method <b>100</b> described above with reference to <figref idref="DRAWINGS">FIG. 1</figref> can be implemented in the process engine <b>300</b> to reduce the time required for composing a SOAP message frequently and thereby optimize performance of the process engine.</p>
<p id="p-0039" num="0038">As shown in <figref idref="DRAWINGS">FIG. 3</figref>, the process engine <b>300</b> includes: a message analyzer; message pre-composer; a message composer; and a character string depository. The message analyzer <b>310</b> is adapted to analyze a SOAP message that can be generated during deployment of a BPEL script, and generate an XML character string containing a fixed SOAP message skeleton. The message pre-composer <b>320</b> is adapted to generate an XML character string containing an instance-constant variable, for example, during initialization of a process instance upon arrival of a new request from a user at the process engine. The character string depository <b>340</b> is adapted to store the XML character string containing the fixed SOAP message skeleton that is generated by the message analyzer <b>310</b>, and the XML character string containing the instance-constant variable that is generated by the message pre-composer <b>320</b>. The message composer <b>330</b> is adapted to generate an XML character string containing a dynamic variable for a Web service to be invoked prior to transmission of a SOAP message for invoking the Web service, retrieve from the character string depository <b>340</b> the XML character string containing the SOAP message skeleton and the XML character string containing the instance-constant variable as stored for the Web service, and then concatenate all the XML character strings for the Web service and thereby obtain the SOAP message for transmission.</p>
<p id="p-0040" num="0039">For a better explanation of the method and the process engine according to the embodiments of the invention described above with reference to <figref idref="DRAWINGS">FIG. 1</figref> and <figref idref="DRAWINGS">FIG. 3</figref>, the processing or operation procedure of the method <b>100</b> and the process engine <b>300</b> will be further detailed below by taking a business process shown in <figref idref="DRAWINGS">FIG. 4</figref> as an example and with reference to the schematic diagrams shown in <figref idref="DRAWINGS">FIGS. 5 to 7</figref>.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 4</figref> shows an example <b>400</b> definition of a typical and simple business process. Web services A, B, C and D (simply referred hereinafter to four nodes A, B, C and D in the business process, respectively) are to be invoked sequentially and WSDL files for the services can be known and introduced into the business process <b>400</b> prior to designing.</p>
<p id="p-0042" num="0041">After the business process is defined, SOAP messages to be transmitted to invoke the Web services A, B, C and D in the process (i.e., SOAP messages for the nodes A, B, C and D) thus have been determined and can be determined from the WSDL files for the services. Therefore, fixed parts (i.e., fixed SOAP message skeletons) in the SOAP messages for the respective nodes can be known prior to deployment of a BPEL script onto the process engine <b>300</b> by analyzing the SOAP messages.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 5</figref> shows a schematic diagram of a procedure of generating an XML character string containing a fixed SOAP message skeleton during deployment of a BPEL script onto the process engine <b>300</b> shown in <figref idref="DRAWINGS">FIG. 3</figref>. In <figref idref="DRAWINGS">FIG. 5</figref>, reference number <b>1</b> denotes that a BPEL script corresponding to the business process <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> is deployed onto the process engine, reference number <b>2</b> denotes that the message analyzer <b>310</b> obtains the WSDL files for the Web services A, B, C and D, and reference number <b>3</b> denotes that the message analyzer <b>310</b> generates XML character strings containing message skeletons of the SOAP messages for the respective nodes by analyzing the SOAP messages for the respective nodes and storing them in the character string depository <b>340</b> for use in a subsequent generation of the SOAP messages.</p>
<p id="p-0044" num="0043">After the business process <b>400</b> is deployed onto the process engine <b>300</b>, when there is a request for triggering a generation of a first instance of the process, those parts in the SOAP messages that are referred to by the respective nodes and keep unchanged in the flow of the process instance throughout the entire process can be analyzed and described in the corresponding character strings (containing an unique identifier and the respective referred-to part) with use of an XML reference mechanism.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 6</figref> shows a schematic diagram of a procedure of initializing a process instance on the process engine <b>300</b> shown in <figref idref="DRAWINGS">FIG. 3</figref>. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, reference number <b>1</b> denotes that the process engine <b>300</b> receives a request for the services in the process to trigger generation of a process instance, and reference number <b>2</b> denotes that the message pre-composer <b>320</b> generates XML character strings containing instance-constant variables and stores them in the character string depository <b>340</b> for use in subsequent generation of the SOAP messages.</p>
<p id="p-0046" num="0045">When the process instance runs to arrive at a node, for example, where the service C is to be invoked and a SOAP message is to be transmitted thereto, the referred-to part (i.e., the XML character string containing the dynamic variable) is dynamically generated based upon the unique identifier assigned in the corresponding character string with use of the XML reference mechanism and in accordance with a return result of the previous invoking. A complete SOAP message packet is formed by concatenating (i) the XML character string containing the SOAP message skeleton and (ii) the XML character string containing the instance-constant variable for the service C, both of which are stored in the character string depository <b>340</b>, and (iii) the generated XML character string containing the dynamic variable. The complete SOAP message packet is then transmitted to a corresponding invoking node.</p>
<p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. 7</figref> shows a schematic diagram of a procedure where the process shown in <figref idref="DRAWINGS">FIG. 4</figref> proceeds to invoke the service C on the process engine <b>300</b> shown in <figref idref="DRAWINGS">FIG. 3</figref>. As shown in <figref idref="DRAWINGS">FIG. 7</figref>, reference number <b>1</b> denotes that the process instance proceeds to invoke the service C, reference number <b>2</b> denotes that the message composer <b>330</b> retrieves from the character string depository <b>340</b> the XML character string containing the SOAP message skeleton for the service C, reference number <b>3</b> denotes that the message composer <b>330</b> retrieves from the character string depository <b>340</b> the XML character string containing the instance-constant variable for the service C, reference number <b>4</b> denotes that the message composer <b>330</b> generates the XML character string containing the dynamic variable for the service C and concatenates the XML character strings retrieved in steps <b>2</b> and <b>3</b> and the generated XML character string and thereby obtains a complete SOAP message, and reference number <b>5</b> denotes that the service C is invoked through the resulting SOAP message.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 8</figref> shows an example of a SOAP message skeleton generated for the service C during execution of the procedure shown in <figref idref="DRAWINGS">FIG. 5</figref>. As shown in <figref idref="DRAWINGS">FIG. 8</figref>, &#x201c;Par<b>1</b>&#x201d; defines those parts in the SOAP message for the service C that are constant for the process, &#x201c;Par<b>2</b>&#x201d; defines instance-constant variables in the SOAP message for the service C, e.g., &#x201c;Var_PhoneNumber&#x201d;, and &#x201c;Par<b>3</b>&#x201d; defines dynamic variables in the SOAP message for the service C, e.g., &#x201c;Var_Accuracy&#x201d;.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of an XML character string containing an instant-constant variable that is generated during execution of the procedure shown in <figref idref="DRAWINGS">FIG. 6</figref>. As shown in <figref idref="DRAWINGS">FIG. 9</figref>, global variables include, for example, &#x201c;Var_PhoneNumber&#x201d;, &#x201c;Var_UserType&#x201d;, etc.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 10</figref> shows an example of an XML character string containing a dynamic variable (&#x201c;Var_Accuracy&#x201d; in this example), which is generated for the service C during execution of the procedure shown in <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 11</figref> shows the manner in which character strings are concatenated to obtain a SOAP message for invoking the service C (i.e., a request message to be output to the service C) during execution of the procedure shown in <figref idref="DRAWINGS">FIG. 7</figref>. The complete SOAP message for the service C, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, can be obtained after concatenating the respective character strings shown in <figref idref="DRAWINGS">FIG. 8</figref>, <figref idref="DRAWINGS">FIG. 9</figref> and <figref idref="DRAWINGS">FIG. 10</figref> in the manner of concatenating the character strings as shown in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0052" num="0051">Using the method and/or the process engine according to the embodiments of the invention described above with reference to the accompanying drawings, a SOAP message can be obtained rapidly and easily by efficient concatenation of XML character strings by means of a standard reference mechanism in the XML. The method and process engine improve upon of the conventional composition of the SOAP message in the XML.</p>
<p id="p-0053" num="0052">In the method and/or the process engine according to the embodiments of the invention, foreknowledge of a process for a specific service is utilized, and a light-weight character string concatenating operation is used to reduce delay in message encapsulation based upon the XML Document Object Model (DOM), which is especially effective during a multi-party interactive session and especially in the case that a SOAP message is needed to be composed many times.</p>
<p id="p-0054" num="0053">Furthermore, the operation procedure of the method according to the present invention described above can also be implemented in the form of a computer executable program stored in various machine readable storage media.</p>
<p id="p-0055" num="0054">Moreover, the objects of the present invention can also be implemented by providing a storage medium with codes of the above executable program stored thereon directly or indirectly to a system or device and then reading out and executing the program codes by a computer or center processing unit (CPU) of a system or device. At this time, as long as the system or device has a function of executing a program, implementing modes of the present invention are not limited to the program, and the program can be in any form including an object program, program executed by an interpreter, or script program provided to an operating system, etc. The machine readable storage media mentioned above may include but not be limited to various memories and storage units, semiconductor devices, magnetic disk units such as optical, magnetic and magneto-optic disks, and other media suitable for storing information, etc.</p>
<p id="p-0056" num="0055">In addition, the present invention may be achieved by a client computer by connecting to corresponding websites on the Internet, downloading the computer program codes according to the present invention and installing the same into the computer and then executing the program codes.</p>
<p id="p-0057" num="0056">An advantage of the invention lies in that, with use of the method for generating a SOAP message and/or the process engine according to the embodiments of the invention, conventional composition of a SOAP message can be replaced with a light-weight XML character string concatenating operation by means of foreknowledge of a process for a specific service, to thereby avoid multiple occurrences of SOAP message composition during execution of the process.</p>
<p id="p-0058" num="0057">Another advantage of the invention lies in that, with use of the method and/or the process engine according to the embodiments of the invention, it is possible to reduce delay in message encapsulation based upon the XML Document Object Model (DOM).</p>
<p id="p-0059" num="0058">Still another advantage of the invention lies in that, the method and/or the process engine according to the embodiments of the invention can be especially effective in a multi-party interactive session and can reduce greatly the time required for conventional composition of a SOAP message to thereby optimize significantly performance of the process engine.</p>
<p id="p-0060" num="0059">Although the embodiments of the present invention have been described in detail with reference to the accompanying drawings, it should be noted that, these embodiments are only used to illustrate the present invention but not to limit the present invention. Various modifications and changes can be made by those skilled in the art without departing from the spirit and scope of the present invention. Therefore, the scope of the present invention is only defined by the appended claims and the equivalents thereof.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for generating a Simple Object Access Protocol (SOAP) message in eXtensible Markup Language (XML) during execution of a process in a process engine apparatus based upon Service-Oriented Architecture (SOA), the method comprising the steps of:
<claim-text>analyzing a script describing a business process workflow of a business process;</claim-text>
<claim-text>identifying, based on the analyzing, at least a first content set that is identical for a plurality of SOAP messages of the business process;</claim-text>
<claim-text>generating, based on the identifying, a first XML character string comprising a fixed SOAP message skeleton comprising at least one process-constant variable corresponding to the first content set using a message analyzer unit in the process engine apparatus, wherein the first XML character string is generated during deployment of the script onto the process engine;</claim-text>
<claim-text>storing the first XML character string comprising the fixed SOAP message skeleton in a character string depository in the process engine apparatus;</claim-text>
<claim-text>identifying, based on the analyzing, at least a second set of content that is identical for one instance of the business process;</claim-text>
<claim-text>generating, based on identifying the at least one instance-constant variable, a second XML character string comprising at least one instance-constant variable corresponding to the second content set using a message pre-composer unit in the process engine apparatus, wherein the second XML character string is generated during an initialization of the one instance of the business process, and wherein the instance-constant variable comprises a global variable;</claim-text>
<claim-text>storing the second XML character string comprising the instance-constant variable in the character string depository in the process engine apparatus;</claim-text>
<claim-text>generating a third XML character string comprising a dynamic variable using a message composer unit in the process engine apparatus, wherein the dynamic variable corresponds to at least one content set that varies in each SOAP message of the plurality of SOAP messages of the business process, wherein the third XML character string is generated prior to transmission of the SOAP message; and</claim-text>
<claim-text>generating a SOAP message based on concatenating the first XML character string comprising the fixed SOAP message skeleton, the second XML character string comprising the instance-constant variable, and the third XML character string comprising the dynamic variable using a character string concatenating operation in the message composer unit.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the process engine apparatus is a Business Process Execution Language (BPEL) engine apparatus.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the SOAP message is divided into a first part for the fixed message skeleton and a second part for varying the process by means of a reference mechanism in the XML.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the XML character strings are generated based on a Web Service Description Language (WSDL) file of a Web service to be invoked in the process.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A process engine apparatus based upon Service-Oriented Architecture (SOA), comprising:
<claim-text>a message analyzer unit configured to
<claim-text>analyze a script describing a business process workflow of a business process;</claim-text>
<claim-text>identify, based on the analysis of the script, at least a first content set that is identical for a plurality of SOAP messages of the business process; and</claim-text>
<claim-text>generate, based on identifying the first content set, a first XML character string comprising a fixed SOAP message skeleton comprising at least one process-constant variable corresponding to the first content set, wherein the message analyzer unit generates the first XML character string during deployment of the script onto the process engine apparatus;</claim-text>
</claim-text>
<claim-text>a message pre-composer unit configured to
<claim-text>identify, based on the analysis of the script, at least a second set of content that is identical for one instance of the business process; and</claim-text>
<claim-text>generate a second XML character string comprising at least one instance-constant variable corresponding to the second content set, wherein the message pre-composer unit generates the second XML character string during an initialization of the one instance of the business process, and wherein the instance-constant variable comprises a global variable;</claim-text>
</claim-text>
<claim-text>a character string depository configured to store the first XML character string comprising the fixed SOAP message skeleton generated by the message analyzer unit and the second XML character string comprising the instance-constant variable generated by the message pre-composer unit; and</claim-text>
<claim-text>a message composer unit configured to
<claim-text>generate third XML character string comprising a dynamic variable, wherein the dynamic variable corresponds to at least one content set that varies in each SOAP message of the plurality of SOAP messages of the business process, wherein the third XML character string is generated prior to transmission of the SOAP message;</claim-text>
<claim-text>retrieve from the character string depository the first XML character string and the second XML character string; and</claim-text>
<claim-text>generate a SOAP message based on concatenating all the first XML character string, the second XML character string, and the third XML character string, wherein the concatenating is completed prior to transmission of the SOAP message,</claim-text>
<claim-text>wherein at least one of the units is part of a computer device having a memory and a processor.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The process engine apparatus according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the process engine apparatus is a Business Process Execution Language (BPEL) engine apparatus.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The process engine apparatus according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the SOAP message is divided into a first part for the fixed message skeleton and a second part for varying the process by means of a reference mechanism in the XML.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The process engine according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein each of the XML character strings are generated based upon a Web Service Description Language (WSDL) file of a Web service to be invoked in the process. </claim-text>
</claim>
</claims>
</us-patent-grant>

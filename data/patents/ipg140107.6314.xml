<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627469-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627469</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13420492</doc-number>
<date>20120314</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>11</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
</classification-national>
<invention-title id="d2e43">Systems and methods for using acquisitional contexts to prevent false-positive malware classifications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7831412</doc-number>
<kind>B1</kind>
<name>Sobel et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7966278</doc-number>
<kind>B1</kind>
<name>Satish</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2004/0205167</doc-number>
<kind>A1</kind>
<name>Grumann</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2005/0021733</doc-number>
<kind>A1</kind>
<name>Clinton et al.</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0283622</doc-number>
<kind>A1</kind>
<name>Hall et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2007/0016953</doc-number>
<kind>A1</kind>
<name>Morris et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2007/0300215</doc-number>
<kind>A1</kind>
<name>Bardsley</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2008/0141240</doc-number>
<kind>A1</kind>
<name>Uthe</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2009/0044024</doc-number>
<kind>A1</kind>
<name>Oberheide et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713188</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2009/0133126</doc-number>
<kind>A1</kind>
<name>Jang et al.</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0115040</doc-number>
<kind>A1</kind>
<name>Sargent et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709206</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2011/0246753</doc-number>
<kind>A1</kind>
<name>Thomas</name>
<date>20111000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Sourabh Satish et al.; Social Trust Based Security Model; Mar. 31, 2006; U.S. Appl. No. 11/394,846.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Sourabh Satish; Method for Determining the Health Impact of an Application Based on Information Obtained from Like-Profiled Computing Systems Using Clustering; Mar. 27, 2008; U.S. Appl. No. 12/056,379.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Sourabh Satish; Systems and methods for Determining and Quantifying the Impact of an Application on the Health of a System; U.S. Appl. No. 12/049,751, filed Mar. 17, 2008.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Non-Final Office Action received in related U.S. Appl. No. 12/049,751; Jun. 24, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Final Office Action received in related U.S. Appl. No. 12/049,751; Jan. 19, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Carey S. Nachenberg; Systems and Methods for Using Reputation Data to Detect Shared-Object-Based Security Threats; U.S. Appl. No. 12/415,834, filed Mar. 31, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Non-Final Office Action received in related U.S. Appl. No. 12/415,834; Oct. 11, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Joseph</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wilhelm</last-name>
<first-name>Jeffrey</first-name>
<address>
<city>Venice</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Chen</last-name>
<first-name>Joseph</first-name>
<address>
<city>Los Angeles</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Wilhelm</last-name>
<first-name>Jeffrey</first-name>
<address>
<city>Venice</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>ALG Intellectual Property, LLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Symantec Corporation</orgname>
<role>02</role>
<address>
<city>Mountain View</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Zecher</last-name>
<first-name>Cordelia</first-name>
<department>2432</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method for using acquisitional contexts to prevent false-positive malware classifications. The method may include (1) receiving, from at least one client-side computing device within a community of users, contextual information associated with a file, (2) determining, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file, and (3) providing the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. Various other methods and systems are also disclosed.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="208.28mm" wi="155.36mm" file="US08627469-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="246.13mm" wi="171.96mm" file="US08627469-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="248.75mm" wi="164.76mm" file="US08627469-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="254.00mm" wi="157.82mm" file="US08627469-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="250.70mm" wi="157.48mm" file="US08627469-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="211.50mm" wi="149.94mm" file="US08627469-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="210.90mm" wi="152.23mm" file="US08627469-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="242.15mm" wi="188.81mm" orientation="landscape" file="US08627469-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="227.67mm" wi="191.77mm" orientation="landscape" file="US08627469-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">In recent years, authors of malicious software (&#x201c;malware&#x201d;) have attempted to proliferate malware by generating thousands or potentially millions of variations of a malicious file. Unfortunately, because many existing antivirus technologies detect malware by detecting or identifying unique digital signatures or fingerprints associated with known-malicious files, malware authors may avoid detection by only distributing new (i.e., unique) or repacked versions of malicious files.</p>
<p id="p-0003" num="0002">In light of this, at least one security-software vendor has begun investigating and implementing reputation-based security systems. In a reputation-based security system, a security-software vendor may attempt to determine whether a file represents malware by collecting, aggregating, and analyzing data from potentially millions of user devices within a community, such as the security-software vendor's user base. For example, by determining a file's source, age, and prevalence within the community, among other details, a security-software vendor may gain a fairly accurate understanding as to whether the file represents malware.</p>
<p id="p-0004" num="0003">In a typical reputation-based security system, a file that has a low prevalence and/or a file for which little is known about its source of origin or age may be classified as malware since these characteristics are common among malware. Because of this, however, typical reputation-based security systems may be unable to accurately distinguish between malware and legitimate files that have a low prevalence and/or for which little is known about their source of origin, which may in turn result in such systems mistakenly classifying legitimate files as malware. These mistakes, known as &#x201c;false positives,&#x201d; may be extremely disruptive and costly for an enterprise since they can result in the deletion or removal of legitimate, and potentially essential, files and software from computing devices within the enterprise. Accordingly, the instant disclosure identifies and addresses a need for additional and improved systems and methods for preventing false-positive malware classifications.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0005" num="0004">As will be described in greater detail below, the instant disclosure generally relates to systems and methods for ensuring that a file that is trusted on one computing device due to the context in which the file was acquired (e.g., from a trusted source) is also trusted on an additional computing device even though the file is acquired at the additional computing device via a context that is insufficient to determine that the file is trustworthy (e.g., from an untrusted or unknown source). In one example, a computer-implemented method for performing such a task may include (1) receiving, from at least one client-side computing device within a community of users, contextual information associated with a file, (2) determining, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file, and (3) providing the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. In this example, the contextual information may identify a context in which the client-side computing device acquired the file and indicate that the client-side computing device determined that the file was trustworthy due to the context in which the client-side computing device acquired the file.</p>
<p id="p-0006" num="0005">The context in which the client-side computing device acquired the file may include a trusted source from which the client-side computing device acquired the file, a trusted domain name from which the client-side computing device acquired the file, a trusted hostname from which the client-side computing device acquired the file, and/or a trusted uniform resource locator (URL) from which the client-side computing device acquired the file.</p>
<p id="p-0007" num="0006">In some examples, the step of determining the reputation rating for the file may include identifying a reputation rating associated with the context in which the client-side computing device acquired the file and then calculating, based at least in part on this reputation rating, a reputation rating for the file. Additionally or alternatively, the step of determining the reputation rating for the file may include calculating a hash that represents the file and then associating the reputation rating for the file with the hash. The step of determining the reputation rating for the file may also include verifying that the file is not a known-malicious file.</p>
<p id="p-0008" num="0007">In some embodiments, the client-side computing device in the above example may have determined that the file was trustworthy based at least in part on reputation information associated with the context in which the file was acquired. For example, the client-side computing device may have determined that the file was trustworthy due to the context in which the client-side computing device acquired the file by (1) obtaining reputation information for a source from which the client-side computing device acquired the file that indicates that the source was trustworthy and then (2) determining, based at least in part on the reputation information for the source from which the client-side computing device acquired the file, that the file was trustworthy.</p>
<p id="p-0009" num="0008">In another example, a computer-implemented method for using acquisitional contexts to prevent false-positive malware classifications may include (1) identifying, at a client-side computing device, a file, (2) requesting a reputation rating for the file from a server-side computing device, (3) receiving the reputation rating for the file from the server-side computing device, and (4) determining, based at least in part on the reputation rating received from the server-side computing device, that the file is trustworthy despite the client-side computing device having acquired the file via a context that is insufficient to determine that the file is trustworthy. In this example, the reputation rating received from the server-side computing device may be based at least in part on an analysis of contextual information received from at least one other client-side computing device within a community of users that indicates that the other client-side computing device determined that a prior instance of the file was trustworthy due to a context in which the other client-side computing device acquired the prior instance of the file.</p>
<p id="p-0010" num="0009">In one embodiment, a system for implementing the above-described methods may include a context-receiving module programmed to receive, at a server-side computing device from at least one client-side computing device within a community of users, contextual information associated with a file. The system may also include a reputation-determining module programmed to determine, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file. The system may also include a providing module programmed to provide the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. Furthermore, the system may include at least one processor configured to execute the context-receiving module, the reputation-determining module, and the providing module.</p>
<p id="p-0011" num="0010">In at least one embodiment, the system may further include a file-identification module programmed to identify, at the additional client-side computing device, an additional instance of the file. The system may also include a reputation-requesting module programmed to request a reputation rating for the additional instance of the file from the server-side computing device. The system may also include a reputation-receiving module programmed to receive the reputation rating for the additional instance of the file from the server-side computing device. The system may also include a trust-determining module programmed to determine, based at least in part on the reputation rating received from the server-side computing device, that the additional instance of the file is trustworthy despite the additional client-side computing device having acquired the additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy.</p>
<p id="p-0012" num="0011">In some examples, the above-described method may be encoded as computer-readable instructions on a computer-readable-storage medium. For example, a computer-readable-storage medium may include one or more computer-executable instructions that, when executed by at least one processor of a computing device, may cause the computing device to (1) receive, from at least one client-side computing device within a community of users, contextual information associated with a file, (2) determine, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file, and (3) provide the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy.</p>
<p id="p-0013" num="0012">As will be explained in greater detail below, by determining reputation ratings for files based on information that identifies the context in which such files were acquired, the systems and methods described herein may prevent reputation-based security systems from falsely classifying legitimate files as malware. Furthermore, by propagating such reputation ratings within a community of users, the systems and methods described herein may ensure that a file that is trusted on one computing device due to the context in which the file was acquired (e.g., a trusted source) is also trusted on an additional computing device even if the file is acquired at the additional computing device via a context (e.g., an untrusted source) that is insufficient to determine that the file is trustworthy.</p>
<p id="p-0014" num="0013">Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014">The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary system for using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an exemplary system for using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of an exemplary method for using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an exemplary method for using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 5</figref> is an illustration of exemplary contextual information.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 6</figref> is an illustration of exemplary reputation information.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an exemplary computing system capable of implementing one or more of the embodiments described and/or illustrated herein.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of an exemplary computing network capable of implementing one or more of the embodiments described and/or illustrated herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0024" num="0023">Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS</heading>
<p id="p-0025" num="0024">The following will provide, with reference to <figref idref="DRAWINGS">FIGS. 1-2</figref>, detailed descriptions of exemplary systems for using acquisitional contexts to prevent false-positive malware classifications. Detailed descriptions of corresponding computer-implemented methods will also be provided in connection with <figref idref="DRAWINGS">FIGS. 3-4</figref>. In addition, detailed descriptions of exemplary contextual information and reputation information will be provided in connection with <figref idref="DRAWINGS">FIGS. 5 and 6</figref>, respectively. Furthermore, detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with <figref idref="DRAWINGS">FIGS. 7 and 8</figref>, respectively.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an exemplary system <b>100</b> for using acquisitional contexts to prevent false-positive malware classifications. As illustrated in this figure, exemplary system <b>100</b> may include one or more modules <b>102</b> for performing one or more tasks. For example, and as will be explained in greater detail below, exemplary system <b>100</b> may include a context-receiving module <b>104</b> programmed to receive, at a server-side computing device from at least one client-side computing device within a community of users, contextual information associated with a file. Exemplary system <b>100</b> may also include a reputation-determining module <b>106</b> programmed to determine, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file.</p>
<p id="p-0027" num="0026">In addition, and as will be described in greater detail below, exemplary system <b>100</b> may include a providing module <b>108</b> programmed to provide the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy.</p>
<p id="p-0028" num="0027">Exemplary system <b>100</b> may also include a file-identification module <b>110</b> programmed to identify, at the additional client-side computing device, an additional instance of the file. Additionally, exemplary system <b>100</b> may include a reputation-requesting module <b>112</b> programmed to request a reputation rating for the additional instance of the file from the server-side computing device. Exemplary system <b>100</b> may also include a reputation-receiving module <b>114</b> programmed to receive the reputation rating for the additional instance of the file from the server-side computing device. Furthermore, exemplary system <b>100</b> may include a trust-determining module <b>116</b> programmed to determine, based at least in part on the reputation rating received from the server-side computing device, that the additional instance of the file is trustworthy despite the additional client-side computing device having acquired the additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. Although illustrated as separate elements, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent portions of a single module or application.</p>
<p id="p-0029" num="0028">In certain embodiments, one or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent one or more software applications or programs (such as a security-software application) that, when executed by a computing device, may cause the computing device to perform one or more tasks. For example, and as will be described in greater detail below, one or more of modules <b>102</b> may represent software modules stored and configured to run on one or more computing devices, such as the devices illustrated in <figref idref="DRAWINGS">FIG. 2</figref> (e.g., computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b>), computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, and/or portions of exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>. One or more of modules <b>102</b> in <figref idref="DRAWINGS">FIG. 1</figref> may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks.</p>
<p id="p-0030" num="0029">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, exemplary system <b>100</b> may also include one or more databases, such as database <b>120</b>. In one example, database <b>120</b> may be configured to store contextual information <b>122</b> (an example of which includes contextual information <b>500</b> in <figref idref="DRAWINGS">FIG. 5</figref>), reputation information <b>124</b> (an example of which includes reputation information <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>), and information that identifies known-malicious files <b>126</b>.</p>
<p id="p-0031" num="0030">Database <b>120</b> may represent portions of a single database or computing device or a plurality of databases or computing devices. For example, database <b>120</b> may represent a portion of computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, and/or portions of exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>. Alternatively, database <b>120</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent one or more physically separate devices capable of being accessed by a computing device, such as reputation service <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, and/or portions of exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0032" num="0031">Exemplary system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref> may be implemented in a variety of ways. For example, all or a portion of exemplary system <b>100</b> may represent portions of exemplary system <b>200</b> in <figref idref="DRAWINGS">FIG. 2</figref>. As shown in <figref idref="DRAWINGS">FIG. 2</figref>, system <b>200</b> may include a plurality of computing devices <b>202</b>(<b>1</b>)-(N) in communication with a reputation service <b>206</b> via a network <b>204</b>.</p>
<p id="p-0033" num="0032">In one embodiment, one or more of modules <b>102</b> from <figref idref="DRAWINGS">FIG. 1</figref> may, when executed by at least one processor of computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b>, enable computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b> to use acquisitional contexts to prevent false-positive malware classifications. For example, and as will be described in greater detail below, one or more of modules <b>102</b> may cause reputation service <b>206</b> to (1) receive, from at least one client-side computing device within a community of users (e.g., computing device <b>202</b>(N)), contextual information associated with a file (e.g., file <b>210</b>), (2) determine, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file, and (3) provide the reputation rating for the file to at least one additional client-side computing device within the community (e.g., computing devices <b>202</b>(<b>1</b>)-(N&#x2014;1)) in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. In this example, the contextual information may identify a context in which the client-side computing device acquired the file and may indicate that the client-side computing device determined that the file was trustworthy due to the context in which the client-side computing device acquired the file.</p>
<p id="p-0034" num="0033">In another embodiment, one or more of modules <b>102</b> from <figref idref="DRAWINGS">FIG. 1</figref> may, when executed by at least one processor of computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b>, enable computing devices <b>202</b>(<b>1</b>)-(N) and/or reputation service <b>206</b> to use acquisitional contexts to prevent false-positive malware classifications by causing computing device <b>202</b>(<b>1</b>) to (1) identify a file (e.g., file <b>210</b>), (2) request a reputation rating for the file from a server-side computing device (e.g., reputation service <b>206</b>), (3) receive the reputation rating for the file from the server-side computing device, and (4) determine, based at least in part on the reputation rating received from the server-side computing device, that the file is trustworthy despite having acquired the file via a context that is insufficient to determine that the file is trustworthy. In this example, the reputation rating received from the server-side computing device may be based at least in part on an analysis of contextual information received from at least one other client-side computing device within a community of users (e.g., computing device <b>202</b>(N)) that indicates that the other client-side computing device determined that a prior instance of the file (e.g., file <b>210</b> located on computing device <b>202</b>(N)) was trustworthy due to a context in which the other client-side computing device acquired the prior instance of the file.</p>
<p id="p-0035" num="0034">Computing devices <b>202</b>(<b>1</b>)-(N) generally represent any type or form of computing device capable of reading computer-executable instructions. Examples of computing devices <b>202</b>(<b>1</b>)-(N) include, without limitation, laptops, tablets, desktops, servers, cellular phones, personal digital assistants (PDAs), multimedia players, embedded systems, combinations of one or more of the same, exemplary computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, or any other suitable computing device. In one example, computing devices <b>202</b>(<b>1</b>)-(N) may represent computing devices of users within a community (such as the user base of a security-software vendor) that interact with a reputation service.</p>
<p id="p-0036" num="0035">Reputation service <b>206</b> generally represents any type or form of computing device that is capable of storing, managing, and/or processing data. Examples of reputation service <b>206</b> include, without limitation, application servers and database servers configured to provide various database services and/or run certain software applications. In at least one embodiment, reputation service <b>206</b> may represent a reputation service that provides reputation information to one or more client-side computing devices and/or that collects, aggregates, and/or analyzes data (e.g., contextual information) from computing devices <b>202</b>(<b>1</b>)-(N).</p>
<p id="p-0037" num="0036">Network <b>204</b> generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network <b>204</b> include, without limitation, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), the Internet, power line communications (PLC), a cellular network (e.g., a GSM Network), exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>, or the like. Network <b>204</b> may facilitate communication or data transfer using wireless or wired connections. In one embodiment, network <b>204</b> may facilitate communication between computing devices <b>202</b>(<b>1</b>)-(N) and reputation service <b>206</b>.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of an exemplary computer-implemented method <b>300</b> for using acquisitional contexts to prevent false-positive malware classifications. The steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may be performed by any suitable computer-executable code and/or computing system. In some embodiments, the steps shown in <figref idref="DRAWINGS">FIG. 3</figref> may be performed by one or more of the components of system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref>, system <b>200</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, and/or portions of exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0039" num="0038">At step <b>302</b>, one or more of the systems described herein may receive, from at least one client-side computing device within a community of users, contextual information associated with a file. For example, at step <b>302</b>, context-receiving module <b>104</b> may, as part of reputation service <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, receive contextual information associated with file <b>210</b>.</p>
<p id="p-0040" num="0039">The term &#x201c;file,&#x201d; as used herein, may generally refer to any file that has a low prevalence within a community of users, is associated with a limited amount of reputation information, and/or is associated with reputation information that is still developing. Examples of files include, without limitation, a newly created file, a file seen for the first time within a community of users, and/or a file seen by a limited number of users within a community. For example, a file may include a newly created executable file, an executable file that has recently been made publicly available, and/or an executable file whose availability is limited (e.g., a beta release).</p>
<p id="p-0041" num="0040">In some examples, the contextual information received in step <b>302</b> may include information that identifies or describes a context in which a client-side computing device acquired a file and/or may indicate that a client-side computing device determined that a file was trustworthy due to the context in which the client-side computing device acquired the file (e.g., the fact that the client-side computing device acquired the file from a trusted source may indicate that the file is also trustworthy).</p>
<p id="p-0042" num="0041">As used herein, the term &#x201c;context&#x201d; may generally refer to the set of circumstances surrounding the acquisition of a file, such as information regarding how the file was acquired, the source of the file, and/or attributes of the client-side computing device that acquired the file. For example, the &#x201c;context&#x201d; in which a file was acquired may refer to a source from which the client-side computing device acquired the file (e.g., an email address or an application), a domain name from which the client-side computing device acquired the file (e.g., download.com), a host or hostname from which the client-side computing device acquired the file (e.g., a767.ms.akamai.net), a URL from which the client-side computing device acquired the file (e.g., http://download.microsoft.com/download/), and/or an IP address from which the client-side computing device acquired the file (e.g., 64.208.241.72).</p>
<p id="p-0043" num="0042">In some examples, a client-side computing device may use information about a trusted context (e.g., a context with a high reputation rating) to determine that a file acquired via the trusted context is trustworthy even though the file does not otherwise have enough reputation information associated with it to determine that the file is trustworthy.</p>
<p id="p-0044" num="0043">The systems described herein may perform step <b>302</b> in a variety of ways. In one example, context-receiving module <b>104</b> may receive contextual information from client-side computing devices as part of collecting, aggregating, and/or analyzing data reported by a community of users. This reported information may enable reputation service <b>206</b> to update reputation information maintained by reputation service <b>206</b>. Additionally or alternatively, context-receiving module <b>104</b> may receive contextual information from a client-side computing device as part of a request by the client-side computing device for reputation information. For example, a client-side computing device may include contextual information when requesting reputation information for a file. In this example, reputation service <b>206</b> may use the contextual information to provide a more accurate reputation rating for the file and/or provide additional reputation information associated with a context provided within the contextual information.</p>
<p id="p-0045" num="0044">In another example, a client-side computing device may provide contextual information to context-receiving module <b>104</b> when reporting the results of one or more trustworthiness determinations made with respect to a file. For example, file-identification module <b>110</b> on computing device <b>202</b>(N) may identify a file (such as file <b>210</b>) downloaded by a user of computing device <b>202</b>(N)). In an attempt to determine whether file <b>210</b> is trustworthy, reputation-requesting module <b>112</b> may request reputation information for file <b>210</b> from reputation service <b>206</b>. In this example, reputation service <b>206</b> may provide reputation information to reputation-receiving module <b>114</b> on computing device <b>202</b>(N) that indicates that file <b>210</b> should not be trusted due to its low prevalence within the community.</p>
<p id="p-0046" num="0045">In some examples, however, trust-determining module <b>116</b> may determine that file <b>210</b> is trustworthy (even in view of the reputation information received from reputation service <b>206</b>) due to the context in which computing device <b>202</b>(N) acquired file <b>210</b>. For example, trust-determining module <b>116</b> may determine that computing device <b>202</b>(N) acquired file <b>210</b> from a known and trusted source, such as a URL with a reputation rating that satisfies a predetermined threshold (e.g., &#x201c;90%&#x201d;). In this example, trust-determining module <b>116</b> may determine that file <b>210</b> is trustworthy, despite its low prevalence within the community, due to originating from a known and trusted source, thereby exonerating file <b>210</b>.</p>
<p id="p-0047" num="0046">Upon determining that file <b>210</b> is trustworthy, trust-determining module <b>116</b> may then report to reputation service <b>206</b> contextual information (e.g., contextual information <b>500</b> in <figref idref="DRAWINGS">FIG. 5</figref>) containing information that both (1) identifies the context in which computing device <b>202</b>(N) acquired file <b>210</b> and (2) indicates that computing device <b>202</b>(N) determined that file <b>210</b> was trustworthy due to the context in which computing device <b>202</b>(N) acquired file <b>210</b>.</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 5</figref> is an illustration of exemplary contextual information <b>500</b> that may be received from a client-side computing device. As illustrated in this figure, contextual information may include information that identifies the name of a file acquired by the client-side computing device (in this example, &#x201c;example.exe&#x201d;), a file hash that uniquely identifies the file (in this example, &#x201c;0x0349EF9A&#x201d;), the method by which the client-side computing device acquired the file (in this example, &#x201c;Browser Download&#x201d;), a source URL from which the client-side computing device acquired the file (in this example, &#x201c;www.example.com/downloads/&#x201d;), a source IP address from which the client-side computing device acquired the file (in this example, &#x201c;75.169.229.19&#x201d;), and a trust determination made with respect to the file (in this example, &#x201c;Trustworthy&#x201d;).</p>
<p id="p-0049" num="0048">In some examples, after receiving this contextual information, context-receiving module <b>104</b> may save the contextual information (e.g., as contextual information <b>122</b> within database <b>120</b>).</p>
<p id="p-0050" num="0049">At step <b>304</b>, one or more of the systems described herein may determine, based at least in part on the contextual information received from the client-side computing device, a reputation rating for the file. For example, at step <b>304</b>, reputation-determining module <b>106</b> may, as part of reputation service <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, determine a reputation rating for file <b>210</b> based at least in part on the contextual information received from computing device <b>202</b>(N) as part of step <b>302</b>.</p>
<p id="p-0051" num="0050">As used herein, the terms &#x201c;reputation rating&#x201d; and &#x201c;reputation information&#x201d; may generally refer to information that indicates the trustworthiness of a file and/or whether the file represents a potential security risk. An example of a reputation rating includes, without limitation, a reputation score (e.g., 70%, on a scale of 1% to 100%, where, for example, a high reputation score indicates that the file is unlikely to represent a security risk and a low reputation score indicates that the file likely represents a security risk). In addition to files, reputation ratings may also be associated with other entities (e.g., contexts) that influence the reputation ratings of files and/or that can be otherwise used in determining reputation ratings for files. For example, a file acquired via a URL with a high reputation rating may be more likely to be trustworthy than a file acquired via a URL with a low reputation rating.</p>
<p id="p-0052" num="0051">The systems described herein may perform step <b>304</b> in a variety of ways. In one example, reputation-determining module <b>106</b> may determine the reputation rating for the file by identifying a reputation rating associated with the context in which the client-side computing device acquired the file and then calculating, based at least in part on the reputation rating associated with the context in which the client-side computing device acquired the file, the reputation rating for the file. For example, reputation-determining module <b>106</b> may determine that a URL from which the client-side computing device acquired the file has a reputation rating of 75%. In this example, reputation-determining module <b>106</b> may calculate a reputation rating for the file by simply using the reputation rating for the URL as the reputation rating for the file (e.g., by assigning a reputation rating of 75% to the file).</p>
<p id="p-0053" num="0052">If the file was acquired via a multi-factor context, reputation-determining module <b>106</b> may calculate the reputation rating for the file using reputation ratings for each contextual factor (e.g., by averaging or by taking the minimum of the reputation ratings of each contextual factor). In other examples, reputation-determining module <b>106</b> may calculate the reputation rating for the file using other reputation information associated with the file and/or the context by which it was acquired.</p>
<p id="p-0054" num="0053">In some examples, reputation-determining module <b>106</b> may also calculate a hash that represents the file and then associate the reputation rating for the file with the hash that represents the file. In one example, this hash may represent a unique identifier for the file that can be used by client-side computing devices to request reputation information for the file and/or by reputation services to identify and/or provide reputation information for the file.</p>
<p id="p-0055" num="0054">In another example, prior to associating the reputation rating for the file with the file and/or the hash that represents the file, reputation-determining module <b>106</b> may verify that the file is not a known-malicious file (perhaps to ensure that the file has not been classified as malware). For example, reputation-determining module <b>106</b> may query database <b>120</b> (which, as detailed above, contains information on known-malicious files <b>126</b>) in order to ensure that the file is not a known-malicious file. In some examples, reputation-determining module <b>106</b> may also store the reputation rating within database <b>120</b> (e.g., as reputation information <b>124</b>).</p>
<p id="p-0056" num="0055">At step <b>306</b>, one or more of the systems described herein may provide the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy. For example, at step <b>306</b>, providing module <b>108</b> may, as part of reputation service <b>206</b> in <figref idref="DRAWINGS">FIG. 2</figref>, provide the reputation rating for file <b>210</b> to computing device <b>202</b>(<b>1</b>) in order to prevent computing device <b>202</b>(<b>1</b>) from falsely classifying file <b>210</b> as untrustworthy due to acquiring file <b>210</b> via a context that is insufficient to determine that file <b>210</b> is trustworthy.</p>
<p id="p-0057" num="0056">In this way, a client-side computing device that would have otherwise been unable to determine that a file was trustworthy due to acquiring the file via an unknown or untrusted context may still determine that the file is trustworthy based on the fact that the same file was acquired by another client-side computing device via a context that allowed it to determine that the file was trustworthy.</p>
<p id="p-0058" num="0057">The systems described herein may perform step <b>306</b> in a variety of ways. In one example, providing module <b>108</b> may provide the reputation rating for the file to the additional client-side computing device in response to a request (e.g., a request as described in step <b>404</b> of <figref idref="DRAWINGS">FIG. 4</figref>) from the additional client-side computing device for reputation information associated with the file. In one example, providing module <b>108</b> may respond to such a request for reputation information for the file by providing reputation information similar to reputation information <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 6</figref> is an illustration of exemplary reputation information <b>600</b> that may be provided by a server-side computing device to a client-side computing device. As illustrated in this figure, reputation information may include information that identifies a name of a file (in this example, &#x201c;example.exe&#x201d;), a file hash that uniquely identifies the file (in this example, &#x201c;0x0349EF9A&#x201d;), and a reputation rating for the file (in this example 75%).</p>
<p id="p-0060" num="0059">Returning to <figref idref="DRAWINGS">FIG. 3</figref>, additionally or alternatively, providing module <b>108</b> may provide the reputation rating for the file to the additional client-side computing device by sending the reputation rating to the additional client-side computing device prior to the additional client-side computing device acquiring the file. For example, the additional client-side computing device may maintain a reputation-information database (e.g., reputation information <b>124</b> within database <b>120</b>), and providing module <b>108</b> may send the reputation rating for the file to the additional client-side computing device as part of updating the reputation-information database. Upon completion of step <b>308</b>, exemplary method <b>300</b> in <figref idref="DRAWINGS">FIG. 3</figref> may terminate.</p>
<p id="p-0061" num="0060">As detailed above, client-side computing devices may use the reputation ratings generated in exemplary method <b>300</b> in order to increase the accuracy of their trustworthiness determinations. <figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an exemplary computer-implemented method for performing such a task. The steps show in <figref idref="DRAWINGS">FIG. 4</figref> may be performed by any suitable computer-executable code and/or computing system. In some embodiments, the steps shown in <figref idref="DRAWINGS">FIG. 4</figref> may be performed by one or more of the components of system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref>, system <b>200</b> in <figref idref="DRAWINGS">FIG. 2</figref>, computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>, and/or portions of exemplary network architecture <b>800</b> in <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0062" num="0061">The steps shown in <figref idref="DRAWINGS">FIG. 4</figref> illustrate how a client-side computing device (e.g., computing device <b>202</b>(<b>1</b>)), that would have otherwise been unable to determine that a file was trustworthy due to acquiring the file via an unknown or untrusted context, may still determine that the file is trustworthy based on the fact that the same file was acquired by another client-side computing device (e.g., computing device <b>202</b>(N)) via a context that allowed it to determine that the file was trustworthy.</p>
<p id="p-0063" num="0062">At step <b>402</b>, one or more of the systems described herein may identify, at a client-side computing device, a file. For example, at step <b>402</b>, file-identification module <b>110</b> may, as part of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>, identify file <b>210</b>.</p>
<p id="p-0064" num="0063">The systems described herein may perform step <b>402</b> in any suitable manner. In one example, file-identification module <b>110</b> may identify the file as part of monitoring files downloaded to and/or otherwise acquired by computing device <b>202</b>(<b>1</b>). For example, file-identification module <b>110</b> may identify a file downloaded by a user via an Internet browser, received in an email message, and/or retrieved from a data storage device (e.g., a USB flash drive or a network storage device). Additionally or alternatively, file-identification module <b>110</b> may identify a file as part of receiving a request to determine whether the file is trustworthy (perhaps received from a user of computing device <b>202</b>(<b>1</b>)).</p>
<p id="p-0065" num="0064">At step <b>404</b>, one or more of the systems described herein may request a reputation rating for the file from a server-side computing device. For example, at step <b>404</b> reputation-requesting module <b>112</b> may, as part of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>, request a reputation rating for file <b>210</b> from reputation service <b>206</b>.</p>
<p id="p-0066" num="0065">The systems described herein may perform step <b>404</b> in a variety of ways. In one example, reputation-requesting module <b>112</b> may include in the request an identifier that identifies the file. For example, reputation-requesting module <b>112</b> may include in the request a file name of the file and/or a hash for the file.</p>
<p id="p-0067" num="0066">In some examples, reputation-requesting module <b>112</b> may request the reputation rating after the file is identified by file-identification module <b>110</b>. In other examples, reputation-requesting module <b>112</b> may request the reputation rating prior to file-identification module <b>110</b> identifying the file. For example, reputation-requesting module <b>112</b> may request the reputation rating as part of a request for general reputation information (e.g., as part of a registration process).</p>
<p id="p-0068" num="0067">At step <b>406</b>, one or more of the systems described herein may receive the reputation rating for the file from the server-side computing device. For example, at step <b>406</b> reputation-receiving module <b>114</b> may, as part of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>, receive the reputation rating for file <b>210</b> from reputation service <b>206</b>. In this example, and as described in connection with <figref idref="DRAWINGS">FIG. 3</figref>, the reputation rating received from reputation service <b>206</b> may be based at least in part on an analysis of contextual information received from computing device <b>202</b>(N) that indicates that computing device <b>202</b>(N) determined that file <b>210</b> was trustworthy due to a context in which computing device <b>202</b>(N) acquired file <b>210</b>.</p>
<p id="p-0069" num="0068">The systems described herein may perform step <b>406</b> in a variety of ways. In one example, reputation-receiving module <b>114</b> may receive the reputation rating as part of reputation information (e.g., reputation information <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref>). In some examples, upon receiving the reputation rating for the file, reputation-receiving module <b>114</b> may store the reputation rating (e.g., as reputation information <b>124</b> in database <b>120</b>).</p>
<p id="p-0070" num="0069">At step <b>408</b>, one or more of the systems described herein may determine, based at least in part on the reputation rating received from the server-side computing device, that the file is trustworthy despite the client-side computing device having acquired the file via a context that is insufficient to determine that the file is trustworthy. For example, at step <b>408</b>, trust-determining module <b>116</b> may, as part of computing device <b>202</b>(<b>1</b>) in <figref idref="DRAWINGS">FIG. 2</figref>, determine, based at least in part on the reputation rating received from the reputation service <b>206</b>, that file <b>210</b> is trustworthy despite having acquired file <b>210</b> via a context that is insufficient to determine that file <b>210</b> is trustworthy.</p>
<p id="p-0071" num="0070">The systems described herein may perform step <b>408</b> in a variety of ways. In one example, trust-determining module <b>116</b> may determine that the file is trustworthy by determining that the reputation rating of the file is above a predetermined amount (e.g., a 70% reputation rating may indicate that the file is trustworthy). For example, the reputation rating provided in reputation information <b>600</b> in <figref idref="DRAWINGS">FIG. 6</figref> may allow trust-determining module <b>116</b> to determine that the file is trustworthy. In other examples, trust-determining module <b>116</b> may determine that the file is trustworthy using other reputation information associated with the file and/or the context by which it was acquired. Upon completion of step <b>408</b>, exemplary method <b>400</b> in <figref idref="DRAWINGS">FIG. 4</figref> may terminate.</p>
<p id="p-0072" num="0071">As explained above, by determining reputation ratings for files based on information that identifies the context in which such files were acquired, the systems and methods described herein may prevent reputation-based security systems from falsely classifying legitimate files as malware. Furthermore, by propagating such reputation ratings within a community of users, the systems and methods described herein may ensure that a file that is trusted on one computing device due to the context in which the file was acquired (e.g., a trusted source) is also trusted on an additional computing device even if the file is acquired at the additional computing device via a context (e.g., an untrusted source) that is insufficient to determine that the file is trustworthy.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an exemplary computing system <b>710</b> capable of implementing one or more of the embodiments described and/or illustrated herein. For example, all or a portion of computing system <b>710</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the preventing, receiving, determining, providing, calculating, associating, verifying, requesting, and identifying steps described herein. All or a portion of computing system <b>710</b> may also perform and/or be a means for performing any other steps, methods, or processes described and/or illustrated herein.</p>
<p id="p-0074" num="0073">Computing system <b>710</b> broadly represents any single or multi-processor computing device or system capable of executing computer-readable instructions. Examples of computing system <b>710</b> include, without limitation, workstations, laptops, client-side terminals, servers, distributed computing systems, handheld devices, or any other computing system or device. In its most basic configuration, computing system <b>710</b> may include at least one processor <b>714</b> and a system memory <b>716</b>.</p>
<p id="p-0075" num="0074">Processor <b>714</b> generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor <b>714</b> may receive instructions from a software application or module. These instructions may cause processor <b>714</b> to perform the functions of one or more of the exemplary embodiments described and/or illustrated herein.</p>
<p id="p-0076" num="0075">System memory <b>716</b> generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and/or other computer-readable instructions. Examples of system memory <b>716</b> include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system <b>710</b> may include both a volatile memory unit (such as, for example, system memory <b>716</b>) and a non-volatile storage device (such as, for example, primary storage device <b>732</b>, as described in detail below). In one example, one or more of modules <b>102</b> from <figref idref="DRAWINGS">FIG. 1</figref> may be loaded into system memory <b>716</b>.</p>
<p id="p-0077" num="0076">In certain embodiments, exemplary computing system <b>710</b> may also include one or more components or elements in addition to processor <b>714</b> and system memory <b>716</b>. For example, as illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, computing system <b>710</b> may include a memory controller <b>718</b>, an Input/Output (I/O) controller <b>720</b>, and a communication interface <b>722</b>, each of which may be interconnected via a communication infrastructure <b>712</b>. Communication infrastructure <b>712</b> generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure <b>712</b> include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.</p>
<p id="p-0078" num="0077">Memory controller <b>718</b> generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system <b>710</b>. For example, in certain embodiments memory controller <b>718</b> may control communication between processor <b>714</b>, system memory <b>716</b>, and I/O controller <b>720</b> via communication infrastructure <b>712</b>.</p>
<p id="p-0079" num="0078">I/O controller <b>720</b> generally represents any type or form of module capable of coordinating and/or controlling the input and output functions of a computing device. For example, in certain embodiments I/O controller <b>720</b> may control or facilitate transfer of data between one or more elements of computing system <b>710</b>, such as processor <b>714</b>, system memory <b>716</b>, communication interface <b>722</b>, display adapter <b>726</b>, input interface <b>730</b>, and storage interface <b>734</b>.</p>
<p id="p-0080" num="0079">Communication interface <b>722</b> broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system <b>710</b> and one or more additional devices. For example, in certain embodiments communication interface <b>722</b> may facilitate communication between computing system <b>710</b> and a private or public network including additional computing systems. Examples of communication interface <b>722</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface <b>722</b> may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface <b>722</b> may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.</p>
<p id="p-0081" num="0080">In certain embodiments, communication interface <b>722</b> may also represent a host adapter configured to facilitate communication between computing system <b>710</b> and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface <b>722</b> may also allow computing system <b>710</b> to engage in distributed or remote computing. For example, communication interface <b>722</b> may receive instructions from a remote device or send instructions to a remote device for execution.</p>
<p id="p-0082" num="0081">As illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, computing system <b>710</b> may also include at least one display device <b>724</b> coupled to communication infrastructure <b>712</b> via a display adapter <b>726</b>. Display device <b>724</b> generally represents any type or form of device capable of visually displaying information forwarded by display adapter <b>726</b>. Similarly, display adapter <b>726</b> generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure <b>712</b> (or from a frame buffer, as known in the art) for display on display device <b>724</b>.</p>
<p id="p-0083" num="0082">As illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, exemplary computing system <b>710</b> may also include at least one input device <b>728</b> coupled to communication infrastructure <b>712</b> via an input interface <b>730</b>. Input device <b>728</b> generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system <b>710</b>. Examples of input device <b>728</b> include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device.</p>
<p id="p-0084" num="0083">As illustrated in <figref idref="DRAWINGS">FIG. 7</figref>, exemplary computing system <b>710</b> may also include a primary storage device <b>732</b> and a backup storage device <b>733</b> coupled to communication infrastructure <b>712</b> via a storage interface <b>734</b>. Storage devices <b>732</b> and <b>733</b> generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions. For example, storage devices <b>732</b> and <b>733</b> may be a magnetic disk drive (e.g., a so-called hard drive), a solid state drive, a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface <b>734</b> generally represents any type or form of interface or device for transferring data between storage devices <b>732</b> and <b>733</b> and other components of computing system <b>710</b>. In one example, database <b>120</b> from <figref idref="DRAWINGS">FIG. 1</figref> may be stored in primary storage device <b>732</b>.</p>
<p id="p-0085" num="0084">In certain embodiments, storage devices <b>732</b> and <b>733</b> may be configured to read from and/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices <b>732</b> and <b>733</b> may also include other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system <b>710</b>. For example, storage devices <b>732</b> and <b>733</b> may be configured to read and write software, data, or other computer-readable information. Storage devices <b>732</b> and <b>733</b> may also be a part of computing system <b>710</b> or may be a separate device accessed through other interface systems.</p>
<p id="p-0086" num="0085">Many other devices or subsystems may be connected to computing system <b>710</b>. Conversely, all of the components and devices illustrated in <figref idref="DRAWINGS">FIG. 7</figref> need not be present to practice the embodiments described and/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in <figref idref="DRAWINGS">FIG. 7</figref>. Computing system <b>710</b> may also employ any number of software, firmware, and/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable-storage medium. The phrase &#x201c;computer-readable-storage medium&#x201d; generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable-storage media include, without limitation, transmission-type media, such as carrier waves, and non-transitory-type media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.</p>
<p id="p-0087" num="0086">The computer-readable-storage medium containing the computer program may be loaded into computing system <b>710</b>. All or a portion of the computer program stored on the computer-readable-storage medium may then be stored in system memory <b>716</b> and/or various portions of storage devices <b>732</b> and <b>733</b>. When executed by processor <b>714</b>, a computer program loaded into computing system <b>710</b> may cause processor <b>714</b> to perform and/or be a means for performing the functions of one or more of the exemplary embodiments described and/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and/or illustrated herein may be implemented in firmware and/or hardware. For example, computing system <b>710</b> may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.</p>
<p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. 8</figref> is a block diagram of an exemplary network architecture <b>800</b> in which client systems <b>810</b>, <b>820</b>, and <b>830</b> and servers <b>840</b> and <b>845</b> may be coupled to a network <b>850</b>. As detailed above, all or a portion of network architecture <b>800</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more of the preventing, receiving, determining, providing, calculating, associating, verifying, requesting, and identifying steps disclosed herein. All or a portion of network architecture <b>800</b> may also be used to perform and/or be a means for performing other steps and features set forth in the instant disclosure.</p>
<p id="p-0089" num="0088">Client systems <b>810</b>, <b>820</b>, and <b>830</b> generally represent any type or form of computing device or system, such as exemplary computing system <b>710</b> in <figref idref="DRAWINGS">FIG. 7</figref>. Similarly, servers <b>840</b> and <b>845</b> generally represent computing devices or systems, such as application servers or database servers, configured to provide various database services and/or run certain software applications. Network <b>850</b> generally represents any telecommunication or computer network including, for example, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), or the Internet. In one example, client systems <b>810</b>, <b>820</b>, and/or <b>830</b> and/or servers <b>840</b> and/or <b>845</b> may include all or a portion of system <b>100</b> from <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0090" num="0089">As illustrated in <figref idref="DRAWINGS">FIG. 8</figref>, one or more storage devices <b>860</b>(<b>1</b>)-(N) may be directly attached to server <b>840</b>. Similarly, one or more storage devices <b>870</b>(<b>1</b>)-(N) may be directly attached to server <b>845</b>. Storage devices <b>860</b>(<b>1</b>)-(N) and storage devices <b>870</b>(<b>1</b>)-(N) generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions. In certain embodiments, storage devices <b>860</b>(<b>1</b>)-(N) and storage devices <b>870</b>(<b>1</b>)-(N) may represent network-attached storage (NAS) devices configured to communicate with servers <b>840</b> and <b>845</b> using various protocols, such as NFS, SMB, or CIFS.</p>
<p id="p-0091" num="0090">Servers <b>840</b> and <b>845</b> may also be connected to a storage area network (SAN) fabric <b>880</b>. SAN fabric <b>880</b> generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric <b>880</b> may facilitate communication between servers <b>840</b> and <b>845</b> and a plurality of storage devices <b>890</b>(<b>1</b>)-(N) and/or an intelligent storage array <b>895</b>. SAN fabric <b>880</b> may also facilitate, via network <b>850</b> and servers <b>840</b> and <b>845</b>, communication between client systems <b>810</b>, <b>820</b>, and <b>830</b> and storage devices <b>890</b>(<b>1</b>)-(N) and/or intelligent storage array <b>895</b> in such a manner that devices <b>890</b>(<b>1</b>)-(N) and array <b>895</b> appear as locally attached devices to client systems <b>810</b>, <b>820</b>, and <b>830</b>. As with storage devices <b>860</b>(<b>1</b>)-(N) and storage devices <b>870</b>(<b>1</b>)-(N), storage devices <b>890</b>(<b>1</b>)-(N) and intelligent storage array <b>895</b> generally represent any type or form of storage device or medium capable of storing data and/or other computer-readable instructions.</p>
<p id="p-0092" num="0091">In certain embodiments, and with reference to exemplary computing system <b>710</b> of <figref idref="DRAWINGS">FIG. 7</figref>, a communication interface, such as communication interface <b>722</b> in <figref idref="DRAWINGS">FIG. 7</figref>, may be used to provide connectivity between each client system <b>810</b>, <b>820</b>, and <b>830</b> and network <b>850</b>. Client systems <b>810</b>, <b>820</b>, and <b>830</b> may be able to access information on server <b>840</b> or <b>845</b> using, for example, a web browser or other client software. Such software may allow client systems <b>810</b>, <b>820</b>, and <b>830</b> to access data hosted by server <b>840</b>, server <b>845</b>, storage devices <b>860</b>(<b>1</b>)-(N), storage devices <b>870</b>(<b>1</b>)-(N), storage devices <b>890</b>(<b>1</b>)-(N), or intelligent storage array <b>895</b>. Although <figref idref="DRAWINGS">FIG. 8</figref> depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and/or illustrated herein are not limited to the Internet or any particular network-based environment.</p>
<p id="p-0093" num="0092">In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server <b>840</b>, server <b>845</b>, storage devices <b>860</b>(<b>1</b>)-(N), storage devices <b>870</b>(<b>1</b>)-(N), storage devices <b>890</b>(<b>1</b>)-(N), intelligent storage array <b>895</b>, or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server <b>840</b>, run by server <b>845</b>, and distributed to client systems <b>810</b>, <b>820</b>, and <b>830</b> over network <b>850</b>.</p>
<p id="p-0094" num="0093">As detailed above, computing system <b>710</b> and/or one or more components of network architecture <b>800</b> may perform and/or be a means for performing, either alone or in combination with other elements, one or more steps of an exemplary method for using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0095" num="0094">While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and/or component described and/or illustrated herein may be implemented, individually and/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.</p>
<p id="p-0096" num="0095">In some examples, all or a portion of exemplary system <b>100</b> in <figref idref="DRAWINGS">FIG. 1</figref> may represent portions of a cloud-computing or network-based environment. Cloud-computing environments may provide various services and applications via the Internet. These cloud-based services (e.g., software as a service, platform as a service, infrastructure as a service, etc.) may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud-based computing environment.</p>
<p id="p-0097" num="0096">The process parameters and sequence of steps described and/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.</p>
<p id="p-0098" num="0097">While various embodiments have been described and/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable-storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.</p>
<p id="p-0099" num="0098">In addition, one or more of the modules described herein may transform data, physical devices, and/or representations of physical devices from one form to another. For example, one or more of the modules recited herein may transform a computing system into a system capable of using acquisitional contexts to prevent false-positive malware classifications.</p>
<p id="p-0100" num="0099">The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.</p>
<p id="p-0101" num="0100">Unless otherwise noted, the terms &#x201c;a&#x201d; or &#x201c;an,&#x201d; as used in the specification and claims, are to be construed as meaning &#x201c;at least one of.&#x201d; In addition, for ease of use, the words &#x201c;including&#x201d; and &#x201c;having,&#x201d; as used in the specification and claims, are interchangeable with and have the same meaning as the word &#x201c;comprising.&#x201d;</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method for using acquisitional contexts to prevent false-positive malware classifications, at least a portion of the method being performed by a server-side computing device comprising at least one processor, the method comprising:
<claim-text>receiving, from at least one client-side computing device within a community of users, contextual information associated with a file, wherein the contextual information:
<claim-text>identifies a context in which the client-side computing device acquired the file;</claim-text>
<claim-text>indicates that the client-side computing device exonerated the file due to the context in which the client-side computing device acquired the file after receiving, from the server-side computing device, reputation information for the file that indicated that the file should not be trusted due to the file's low prevalence within the community;</claim-text>
</claim-text>
<claim-text>using, based at least in part on the file having been exonerated at the client-side computing device due to the context in which the client-side computing device acquired the file after receiving reputation information for the file that indicated that the file should not be trusted due to the file's low prevalence within the community, the context in which the client-side computing device acquired the file to determine a reputation rating for the file;</claim-text>
<claim-text>providing the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the context in which the client-side computing device acquired the file comprises at least one of:
<claim-text>a trusted source from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted domain name from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted hostname from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted uniform resource locator from which the client-side computing device acquired the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the context in which the client-side computing device acquired the file to determine the reputation rating for the file comprises:
<claim-text>identifying a reputation rating associated with the context in which the client-side computing device acquired the file;</claim-text>
<claim-text>calculating, based at least in part on the reputation rating associated with the context in which the client-side computing device acquired the file, the reputation rating for the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the context in which the client-side computing device acquired the file to determine the reputation rating for the file comprises:
<claim-text>calculating a hash that represents the file;</claim-text>
<claim-text>associating the reputation rating for the file with the hash that represents the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein using the context in which the client-side computing device acquired the file to determine the reputation rating for the file comprises verifying that the file is not a known-malicious file.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client-side computing device exonerated the file based at least in part on reputation information associated with the context in which the client-side computing device acquired the file.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the client-side computing device exonerated the file due to the context in which the client-side computing device acquired the file by:
<claim-text>obtaining reputation information for a source from which the client-side computing device acquired the file that indicates that the source was trustworthy;</claim-text>
<claim-text>determining, based at least in part on the reputation information for the source from which the client-side computing device acquired the file, that the file was trustworthy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer-implemented method for using acquisitional contexts to prevent false-positive malware classifications, at least a portion of the method being performed by a client-side computing device comprising at least one processor, the method comprising:
<claim-text>identifying, at the client-side computing device, a file;</claim-text>
<claim-text>requesting a reputation rating for the file from a server-side computing device;</claim-text>
<claim-text>receiving the reputation rating for the file from the server-side computing device, wherein the server-side computing device determined the reputation rating for the file by:
<claim-text>analyzing contextual information received from at least one other client-side computing device within a community of users that indicates that the other client-side computing device exonerated a prior instance of the file due to a context in which the other client-side computing device acquired the prior instance of the file after receiving, from the server-side computing device, reputation information for the prior instance of the file that indicated that the prior instance of the file should not be trusted due to the prior instance of the file's low prevalence within the community;</claim-text>
<claim-text>using, based at least in part on the prior instance of the file having been exonerated at the other client-side computing device due to the context in which the other client-side computing device acquired the prior instance of the file after receiving reputation information for the prior instance of the file that indicated that the prior instance of the file should not be trusted due to the prior instance of the file's low prevalence within the community, the context in which the other client-side computing device acquired the prior instance of the file to determine the reputation rating for the file;</claim-text>
</claim-text>
<claim-text>determining, based at least in part on the reputation rating received from the server-side computing device, that the file is trustworthy despite the client-side computing device having acquired the file via a context that is insufficient to determine that the file is trustworthy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the context in which the other client-side computing device acquired the prior instance of the file comprises at least one of:
<claim-text>a trusted source from which the other client-side computing device acquired the prior instance of the file;</claim-text>
<claim-text>a trusted domain name from which the other client-side computing device acquired the prior instance of the file;</claim-text>
<claim-text>a trusted hostname from which the other client-side computing device acquired the prior instance of the file;</claim-text>
<claim-text>a trusted uniform resource locator from which the other client-side computing device acquired the prior instance of the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the server-side computing device determined the reputation rating for the file by:
<claim-text>identifying a reputation rating associated with the context in which the other client-side computing device acquired the prior instance of the file;</claim-text>
<claim-text>calculating, based at least in part on the reputation rating associated with the context in which the other client-side computing device acquired the prior instance of the file, the reputation rating for the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the server-side computing device determined the reputation rating for the file by:
<claim-text>calculating a hash that represents the prior instance of the file and the file;</claim-text>
<claim-text>associating the reputation rating for the file with the hash that represents the prior instance of the file and the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the server-side computing device determined the reputation rating for the file by verifying that the prior instance of the file was not a known-malicious file.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the other client-side computing device exonerated the prior instance of the file based at least in part on reputation information associated with the context in which the other client-side computing device acquired the prior instance of the file.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the other client-side computing device exonerated the prior instance of the file due to the context in which the other client-side computing device acquired the prior instance of the file by:
<claim-text>obtaining reputation information for a source from which the other client-side computing device acquired the prior instance of the file that indicates that the source was trustworthy;</claim-text>
<claim-text>determining, based at least in part on the reputation information for the source from which the other client-side computing device acquired the prior instance of the file, that the prior instance of the file was trustworthy.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system for using acquisitional contexts to prevent false-positive malware classifications, the system comprising:
<claim-text>a context-receiving module programmed to receive, at a server-side computing device from at least one client-side computing device within a community of users, contextual information associated with a file, wherein the contextual information:
<claim-text>identifies a context in which the client-side computing device acquired the file;</claim-text>
<claim-text>indicates that the client-side computing device exonerated the file due to the context in which the client-side computing device acquired the file after receiving, from the server-side computing device, reputation information for the file that indicated that the file should not be trusted due to the file's low prevalence within the community;</claim-text>
</claim-text>
<claim-text>a reputation-determining module programmed to use, based at least in part on the file having been exonerated at the client-side computing device due to the context in which the client-side computing device acquired the file after receiving reputation information for the file that indicated that the file should not be trusted due to the file's low prevalence within the community, the context in which the client-side computing device acquired the file to determine a reputation rating for the file;</claim-text>
<claim-text>a providing module programmed to provide the reputation rating for the file to at least one additional client-side computing device within the community in order to prevent the additional client-side computing device from falsely classifying the file as untrustworthy due to acquiring an additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy;</claim-text>
<claim-text>at least one processor configured to execute the context-receiving module, the reputation-determining module, and the providing module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>a file-identification module programmed to identify, at the additional client-side computing device, the additional instance of the file;</claim-text>
<claim-text>a reputation-requesting module programmed to request a reputation rating for the additional instance of the file from the server-side computing device;</claim-text>
<claim-text>a reputation-receiving module programmed to receive the reputation rating for the additional instance of the file from the server-side computing device;</claim-text>
<claim-text>a trust-determining module programmed to determine, based at least in part on the reputation rating received from the server-side computing device, that the additional instance of the file is trustworthy despite the additional client-side computing device having acquired the additional instance of the file via a context that is insufficient to determine that the additional instance of the file is trustworthy, wherein the processor is further configured to execute the file-identification module, the reputation-requesting module, the reputation-receiving module, and the trust-determining module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the context in which the client-side computing device acquired the file comprises at least one of:
<claim-text>a trusted source from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted domain name from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted hostname from which the client-side computing device acquired the file;</claim-text>
<claim-text>a trusted uniform resource locator from which the client-side computing device acquired the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the determination module is programmed to use the context in which the client-side computing device acquired the file to determine the reputation rating for the file by:
<claim-text>identifying a reputation rating associated with the context in which the client-side computing device acquired the file;</claim-text>
<claim-text>calculating, based at least in part on the reputation rating associated with the context in which the client-side computing device acquired the file, the reputation rating for the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the determination module is programmed to use the context in which the client-side computing device acquired the file to determine the reputation rating for the file by:
<claim-text>calculating a hash that represents the file;</claim-text>
<claim-text>associating the reputation rating for the file with the hash that represents the file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the client-side computing device exonerated the file based at least in part on reputation information associated with the context in which the client-side computing device acquired the file.</claim-text>
</claim>
</claims>
</us-patent-grant>

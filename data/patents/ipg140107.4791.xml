<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625884-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625884</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12543204</doc-number>
<date>20090818</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1177</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>K</subclass>
<main-group>9</main-group>
<subgroup>66</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>T</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>7</main-group>
<subgroup>18</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>382155</main-classification>
<further-classification>382156</further-classification>
<further-classification>382180</further-classification>
<further-classification>348148</further-classification>
<further-classification>348E785</further-classification>
</classification-national>
<invention-title id="d2e53">Visualizing and updating learned event maps in surveillance systems</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4679077</doc-number>
<kind>A</kind>
<name>Yuasa et al.</name>
<date>19870700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5113507</doc-number>
<kind>A</kind>
<name>Jaeckel</name>
<date>19920500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5748775</doc-number>
<kind>A</kind>
<name>Tsuchikawa et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5751378</doc-number>
<kind>A</kind>
<name>Chen et al.</name>
<date>19980500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5969755</doc-number>
<kind>A</kind>
<name>Courtney</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6252974</doc-number>
<kind>B1</kind>
<name>Martens et al.</name>
<date>20010600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6263088</doc-number>
<kind>B1</kind>
<name>Crabtree et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6570608</doc-number>
<kind>B1</kind>
<name>Tserng</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6661918</doc-number>
<kind>B1</kind>
<name>Gordon et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6674877</doc-number>
<kind>B1</kind>
<name>Jojic et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6678413</doc-number>
<kind>B1</kind>
<name>Liang et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6856249</doc-number>
<kind>B2</kind>
<name>Strubbe et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6940998</doc-number>
<kind>B2</kind>
<name>Garoutte</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>7023469</doc-number>
<kind>B1</kind>
<name>Olson</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>348152</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>7076102</doc-number>
<kind>B2</kind>
<name>Lin et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>7136525</doc-number>
<kind>B1</kind>
<name>Toyama et al.</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>7158680</doc-number>
<kind>B2</kind>
<name>Pace</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>7200266</doc-number>
<kind>B2</kind>
<name>Ozer et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>7227893</doc-number>
<kind>B1</kind>
<name>Srinivasa et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>7436887</doc-number>
<kind>B2</kind>
<name>Yeredor et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7825954</doc-number>
<kind>B2</kind>
<name>Zhang et al.</name>
<date>20101100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7868912</doc-number>
<kind>B2</kind>
<name>Venetianer et al.</name>
<date>20110100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2003/0107650</doc-number>
<kind>A1</kind>
<name>Colmenarez et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2004/0151342</doc-number>
<kind>A1</kind>
<name>Venetianer et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2005/0001759</doc-number>
<kind>A1</kind>
<name>Khosla</name>
<date>20050100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2005/0105765</doc-number>
<kind>A1</kind>
<name>Han et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2005/0240629</doc-number>
<kind>A1</kind>
<name>Gu et al.</name>
<date>20051000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2006/0018516</doc-number>
<kind>A1</kind>
<name>Masoud et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2006/0165386</doc-number>
<kind>A1</kind>
<name>Garoutte</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2006/0190419</doc-number>
<kind>A1</kind>
<name>Bunn et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2006/0222206</doc-number>
<kind>A1</kind>
<name>Garoutte</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2008/0002856</doc-number>
<kind>A1</kind>
<name>Ma et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2008/0074496</doc-number>
<kind>A1</kind>
<name>Venetianer et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>348150</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2008/0181453</doc-number>
<kind>A1</kind>
<name>Xu et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2008/0181499</doc-number>
<kind>A1</kind>
<name>Yang et al.</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2008/0193010</doc-number>
<kind>A1</kind>
<name>Eaton et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2008/0240496</doc-number>
<kind>A1</kind>
<name>Senior</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2008/0252723</doc-number>
<kind>A1</kind>
<name>Park</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2009/0022364</doc-number>
<kind>A1</kind>
<name>Swaminathan et al.</name>
<date>20090100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2009/0067716</doc-number>
<kind>A1</kind>
<name>Brown et al.</name>
<date>20090300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2009/0210367</doc-number>
<kind>A1</kind>
<name>Armstrong et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2009/0297023</doc-number>
<kind>A1</kind>
<name>Lipton et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2009/0324107</doc-number>
<kind>A1</kind>
<name>Walch</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2010/0063949</doc-number>
<kind>A1</kind>
<name>Eaton et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>WO</country>
<doc-number>200949314</doc-number>
<kind>A2</kind>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>J. Connell et al., &#x201c;Detection and Tracking in the IBM PeopleVision System,&#x201d; IEEE ICME, Jun. 2004: pp. 1-4, &#x3c;http://www.research.ibm.com/peoplevision&#x3e;.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>Helmut Grabner et al., &#x201c;On-line Boosting and Vision,&#x201d; IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2006, vol. 1: pp. 260-267.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>Ismail Haritaoglu et al., &#x201c;Ghost: A Human Body Part Labeling System Using Silhouettes,&#x201d; 14th Annual International Conference on Pattern Recognition, Aug. 1998: pp. 77-82.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Richard Nock et al., &#x201c;Statistical Region Merging,&#x201d; IEEE Transactions on Pattern Analysis and Machine Intelligence, Nov. 2004, vol. 26(11): pp. 1452-1458.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Apewokin et al. &#x201c;Multimodal Mean Adaptive Backgrounding for Embedded Real-Time Video Surveillance,&#x201d; Jun. 2007, IEEE 6 pages. Minneapolis, MN US.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00051">
<othercit>Elgammal et al. &#x201c;Non-parametric Model for Background Substraction,&#x201d; Computer Vision Laboratory, University of Maryland; Jun. 2000; 17 pages, College Park, MD US.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>Haritaogul et al. &#x201c;W4: Real-Time Surveillance of People and Their Activities,&#x201d; IEEE Transactions on Pattern Analysis and Machine Intelligence, Aug. 2000; vol. 22, No. 8; pp. 809-830.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Ivanov et al. &#x201c;Video Surveillance of Interactions,&#x201d; MIT Media Laboratory, Cambridge, MA, Jul. 1999; 8 pages, Fort Collins, CO US.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Chris Stauffer et al., &#x201c;Adaptive background mixture models for real-time tracking,&#x201d; Proceedings IEEE Conference on Computer Vision and Pattern Recognition, 1999: pp. 246-252.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Pentti Kanerva &#x201c;Sparse Distributed memory and Related Models,&#x201d; M.H. Hassoun, ed., Associative Neural Memories: Theory and Implementation, 1993, pp. 50-76. New York: Oxford University Press.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Senior et al. &#x201c;Appearance Models for Occlusion Handling,&#x201d; IBM T.J. Watson Research Center, 2001, 8 pages, Yorktown, Heights, NY US.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>Chris Stauffer et al., &#x201c;Learning Patterns of Activity Using Real-Time Tracking,&#x201d; IEEE Transactions on Pattern Analysis and Machine Intelligence (TPAMI), Aug. 2000, vol. 22(8): 747-757.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>21</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>382155</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382156</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>382180</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>348148</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>348E07085</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110044533</doc-number>
<kind>A1</kind>
<date>20110224</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Cobb</last-name>
<first-name>Wesley Kenneth</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Blythe</last-name>
<first-name>Bobby Ernest</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Gottumukkal</last-name>
<first-name>Rajkiran Kumar</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Seow</last-name>
<first-name>Ming-Jung</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Cobb</last-name>
<first-name>Wesley Kenneth</first-name>
<address>
<city>The Woodlands</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Blythe</last-name>
<first-name>Bobby Ernest</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Gottumukkal</last-name>
<first-name>Rajkiran Kumar</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Seow</last-name>
<first-name>Ming-Jung</first-name>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Patterson &#x26; Sheridan LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Behavioral Recognition Systems, Inc.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bali</last-name>
<first-name>Vikkram</first-name>
<department>2667</department>
</primary-examiner>
<assistant-examiner>
<last-name>Torres</last-name>
<first-name>Jose M</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Techniques are disclosed for visually conveying an event map. The event map may represent information learned by a surveillance system. A request may be received to view the event map for a specified scene. The event map may be generated, including a background model of the specified scene and at least one cluster providing a statistical distribution of an event in the specified scene. Each statistical distribution may be derived from data streams generated from a sequence of video frames depicting the specified scene captured by a video camera. Each event may be observed to occur at a location in the specified scene corresponding to a location of the respective cluster in the event map. The event map may be configured to allow a user to view and/or modify properties associated with each cluster. For example, the user may label a cluster and set events matching the cluster to always (or never) generate an alert.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="146.30mm" wi="221.57mm" file="US08625884-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="220.56mm" wi="145.20mm" orientation="landscape" file="US08625884-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="240.71mm" wi="162.14mm" orientation="landscape" file="US08625884-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="110.49mm" wi="127.34mm" orientation="landscape" file="US08625884-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="139.19mm" wi="139.28mm" orientation="landscape" file="US08625884-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="236.73mm" wi="152.82mm" orientation="landscape" file="US08625884-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="200.15mm" wi="139.87mm" orientation="landscape" file="US08625884-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="190.16mm" wi="151.81mm" orientation="landscape" file="US08625884-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="200.49mm" wi="129.03mm" file="US08625884-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="170.94mm" wi="146.47mm" file="US08625884-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Field of the Invention</p>
<p id="p-0003" num="0002">Embodiments of the invention provide techniques for conveying information learned by surveillance systems. More specifically, embodiments of the invention relate to techniques for visualizing and updating event maps in surveillance systems.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Some currently available video surveillance systems provide simple object recognition capabilities. For example, a video surveillance system may be configured to classify a group of pixels (referred to as a &#x201c;blob&#x201d;) in a given frame as being a particular type of object (e.g., a person or vehicle). Once identified, a &#x201c;blob&#x201d; may be tracked frame-to-frame in order to follow the &#x201c;blob&#x201d; moving through the scene over time, e.g., a person walking across the field of vision of a video surveillance camera. Further, such systems may be configured to determine when an object has engaged in certain predefined behaviors.</p>
<p id="p-0006" num="0005">However, such surveillance systems typically require that the objects and/or behaviors which may be recognized by the system to be defined in advance. Thus, in practice, these systems rely on predefined definitions for objects and/or behaviors to evaluate a video sequence. In other words, unless the underlying system includes a description for a particular object or behavior, the system is generally incapable of recognizing that behavior (or at least instances of the pattern describing the particular object or behavior). Thus, what is &#x201c;normal&#x201d; (acceptable) or &#x201c;abnormal&#x201d; (anomalous) behavior needs to be defined in advance, and separate software products need to be developed to recognize additional objects or behaviors. This results in surveillance systems with recognition capabilities that are labor intensive and prohibitively costly to maintain or adapt for different specialized applications. Accordingly, currently available video surveillance systems are typically unable to recognize new patterns of behavior that may emerge in a given scene or recognize changes in existing patterns. More generally, such systems are often unable to identify objects, events, behaviors, or patterns as being &#x201c;normal&#x201d; or &#x201c;abnormal&#x201d; by observing what happens in the scene over time; instead, such systems rely on static patterns defined in advance.</p>
<heading id="h-0002" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">One embodiment of the invention includes a computer-implemented method. The method may generally include receiving a request to view an event map of a specified event type involving a specific class of object for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.</p>
<p id="p-0008" num="0007">Another embodiment of the invention includes a computer-readable storage medium containing a program which, when executed by a computer processor, performs an operation. The operation may generally include receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.</p>
<p id="p-0009" num="0008">Still another embodiment includes a system having one or more computer processors and a memory containing a program, which, when executed by the one or more computer processors is configured to perform an operation. The operation may generally include receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames; retrieving a background image associated with the scene; retrieving an adaptive theory resonance (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene were one or more events of the specified type has been to observed to occur; generating a visual representation of each cluster; and superimposing each visual representation over the background image of the scene.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">So that the manner in which the above recited features, advantages, and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments illustrated in the appended drawings.</p>
<p id="p-0011" num="0010">It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates components of a video analysis and behavior-recognition system, according to one embodiment of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> illustrates components of a computer vision engine and of a machine learning engine, according to one embodiment of the present invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a graph showing a cluster generated by an ART network and a two-dimensional (2D) projection of the cluster, according to one embodiment of the invention.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of a set of clusters generated by two independent ART networks, according to one embodiment of the invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a method for a server application to interact with a client application to visually convey an event map to a user of the client application, according to one embodiment of the invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a graphical user interface (GUI) for visually conveying an event map, according to one embodiment of the invention.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> illustrates examples of clusters generated by different ART networks superimposed over a video frame depicting a scene, according to one embodiment of the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a method for visually conveying an event map, according to one embodiment of the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a method for modifying an event map, according to one embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading>
<p id="p-0021" num="0020">Embodiments of the invention provide an interface configured to visually convey information learned by a behavior-recognition system. The behavior-recognition system may be configured to identify, learn, and recognize patterns of behavior by observing and evaluating events depicted by a sequence of video frames. In a particular embodiment, the behavior-recognition system may include both a computer vision engine and a machine learning engine. The computer vision engine may be configured to evaluate a stream of video frames. Typically, each frame of video may be characterized using multiple color (or grayscale) channels (e.g., a radiance value between 0-255 and a set of red, green, and blue (RGB) color channels values, each between 0-255). Further, the computer vision engine may generate a background image by observing the scene over a number of video frames. For example, consider a video camera trained on a stretch of a highway. In such a case, the background would include the roadway surface, the medians, any guard rails or other safety devices, and traffic control devices, etc., that are visible to the camera. Vehicles traveling on the roadway (and any other person or thing engaging in some activity) that are visible to the camera would represent scene foreground objects.</p>
<p id="p-0022" num="0021">The computer vision engine may compare the pixel values for a given frame with the background image and identify objects as they appear and move about the scene. Typically, when a region of the scene (referred to as a &#x201c;blob&#x201d; or &#x201c;patch&#x201d;) is observed with appearance values that differ substantially from the background image, that region is identified as depicting a foreground object. Once identified, the object may be evaluated by a classifier configured to determine what is depicted by the foreground object (e.g., a vehicle or a person). Further, the computer vision engine may identify features (e.g., height/width in pixels, average color values, shape, area, and the like) used to track the object from frame-to-frame. Further still, the computer vision engine may derive a variety of information while tracking the object from frame-to-frame, e.g., position, current (and projected) trajectory, direction, orientation, velocity, acceleration, size, color, and the like. In one embodiment, the computer vision outputs this information as a stream of &#x201c;context events&#x201d; describing a collection of kinematic information related to each foreground object detected in the video frames. Each context event may provide kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames.</p>
<p id="p-0023" num="0022">Data output from the computer vision engine may be supplied to the machine learning engine. In one embodiment, the machine learning engine may evaluate the context events to generate &#x201c;primitive events&#x201d; describing object behavior. Each primitive event may provide semantic meaning to a group of one or more context events. For example, assume a camera records a car entering a scene, and that the car turns and parks in a parking spot. In such a case, the computer vision engine could initially recognize the car as a foreground object; classify it as being a vehicle, and output kinematic data describing the position, movement, speed, etc., of the car in the context event stream. In turn, a primitive event detector could generate a stream of primitive events from the context event stream such as &#x201c;vehicle appears,&#x201d; vehicle turns,&#x201d; &#x201c;vehicle slowing,&#x201d; and &#x201c;vehicle stops&#x201d; (once the kinematic information about the car indicated a speed of 0). As events occur, and re-occur, the machine learning engine may create, encode, store, retrieve, and reinforce patterns representing the events observed to have occurred, e.g., long-term memories representing a higher-level abstraction of a car parking in the scene&#x2014;generated from the primitive events underlying multiple observations of different cars entering and parking. Further still, patterns representing an anomalous event (relative to prior observation) or events identified as an event of interest may result in alerts passed to users of the behavioral recognition system.</p>
<p id="p-0024" num="0023">In one embodiment, the machine learning engine may include a mapper component configured to parse data coming from the context event stream and the primitive event stream and to supply portions of these streams as input to multiple neural networks (e.g., Adaptive Resonance Theory (ART) networks). Each individual ART network may generate clusters from the set of inputs data specified for that ART network. Each cluster represents an observed statistical distribution of a particular thing or event being observed by that ART network. Further, the mapper component may be configured to detect unusual events occurring in the scene depicted by the video frames. For example, the mapper component may monitor the clusters that emerge from a given one of the ART networks, and in some cases, when a set of inputs results in a new cluster, generate an alert representing the occurrence of an unusual or anomalous event. In one embodiment, the ART network may be configured to provide dynamic clustering. That is, unlike ART networks known in the art, a cluster in the modified ART network described herein may change in size as each set of input data is mapped to that cluster. As described in greater detail below, a cluster may initially be defined as a relatively small size (e.g., an area corresponding to a radius of 5-10 pixels). However, as inputs are mapped to that cluster, the size may grow and change over time. Further, the clusters may decay over time. For example, if a cluster does not receive a set of input data (reinforcing the importance of that cluster) for a specified period of time, such a cluster may be removed from an ART network.</p>
<p id="p-0025" num="0024">Further, an ART network of the mapper component <b>211</b> may determine whether a detected event matches a cluster, according to one embodiment. For example, the ART network may receive a vector as input and either update an existing cluster or create a new cluster, as determined using a choice test and a vigilance test for the ART network. The choice test provides a ranking of the existing clusters, relative to the vector input data. Once ranked, the vigilance test evaluates the existing clusters to determine whether to map the input to a given cluster. If no cluster is found to update using the data supplied to the input layer, evaluated sequentially using the ranked clusters, then a new cluster is created.</p>
<p id="p-0026" num="0025">In one embodiment, the machine learning engine may also include a transaction server. The transaction server may generate an event map using data retrieved from the mapper component. Further, the transaction server allows users to: (i) explore data learned by the machine learning engine and (ii) supply metadata specifying how the system is to respond to certain observed events and/or behaviors (for example, when to produce or not to produce an alert). For example, a user may supply metadata to override default behavior of the machine learning engine. The default behavior may include alerting the user upon detecting novel or rare events occurring (the user is not alerted upon detecting events that frequently occur). For example, the transaction server may receive a request to view an event map generated by the mapper component for a scene. In response, the transaction server may generate a visual representation of the clusters superimposed over background model for the specified scene.</p>
<p id="p-0027" num="0026">Further, the transaction server may also receive user requests to associate metadata with one of the clusters. The metadata may be used to guide system behavior. For example, a user may specify to name a cluster, always alert on a cluster, ignore a cluster, modify metadata for a cluster, etc.</p>
<p id="p-0028" num="0027">In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to any specifically described embodiment. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to &#x201c;the invention&#x201d; shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).</p>
<p id="p-0029" num="0028">One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Examples of computer-readable storage media include (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by an optical media drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other examples media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks.</p>
<p id="p-0030" num="0029">In general, the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention is comprised typically of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described herein may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and/or implied by such nomenclature.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 1</figref> illustrates components of a video analysis and behavior-recognition system <b>100</b>, according to one embodiment of the invention. As shown, the behavior-recognition system <b>100</b> includes a video input source <b>105</b>, a network <b>110</b>, a computer system <b>115</b>, and input and output devices <b>118</b> (e.g., a monitor, a keyboard, a mouse, a printer, and the like). The network <b>110</b> may transmit video data recorded by the video input <b>105</b> to the computer system <b>115</b>. Illustratively, a bus <b>111</b> on the computer system <b>115</b> connects a CPU <b>120</b>, storage <b>125</b> (e.g., a disk drive, optical disk drive, floppy disk drive, and the like), and a memory <b>130</b> containing both a computer vision engine <b>135</b> and a machine learning engine <b>140</b>. As described in greater detail below, the computer vision engine <b>135</b> and the machine learning engine <b>140</b> may provide software applications configured to analyze a sequence of video frames provided by the video input <b>105</b>.</p>
<p id="p-0032" num="0031">Network <b>110</b> receives video data (e.g., video stream(s), video images, or the like) from the video input source <b>105</b>. The video input source <b>105</b> may be a video camera, a VCR, DVR, DVD, computer, web-cam device, or the like. For example, the video input source <b>105</b> may be a stationary video camera aimed at a certain area (e.g., a subway station, a parking lot, a building entry/exit, etc.), which records the events taking place therein. Generally, the area visible to the camera is referred to as the &#x201c;scene.&#x201d; The video input source <b>105</b> may be configured to record the scene as a sequence of individual video frames at a specified frame-rate (e.g., 24 frames per second), where each frame includes a fixed number of pixels (e.g., 320&#xd7;240). Each pixel of each frame may specify a color value (e.g., an RGB value) or grayscale value (e.g., a radiance value between 0-255). Further, the video stream may be formatted using known such formats e.g., MPEG2, MJPEG, MPEG4, H.263, H.264, and the like.</p>
<p id="p-0033" num="0032">The computer vision engine <b>135</b> may be configured to analyze this raw information to identify active objects in the video stream, classify the objects, derive a variety of metadata regarding the actions and interactions of such objects, and supply this information to a machine learning engine <b>140</b>. In turn, the machine learning engine <b>140</b> may be configured to evaluate, observe, learn, and remember details regarding events (and types of events) that transpire within the scene over time.</p>
<p id="p-0034" num="0033">In one embodiment, the machine learning engine <b>140</b> receives the video frames and the data generated by the computer vision engine <b>135</b>. The machine learning engine <b>140</b> may be configured to analyze the received data, build semantic representations of events depicted in the video frames, detect patterns, and, ultimately, to learn from these observed patterns to identify normal and/or abnormal events. Additionally, data describing whether a normal/abnormal behavior/event has been determined and/or what such behavior/event is may be provided to output devices <b>118</b> to issue alerts, for example, an alert message presented on a GUI screen. In general, the computer vision engine <b>135</b> and the machine learning engine <b>140</b> both process video data in real-time. However, time scales for processing information by the computer vision engine <b>135</b> and the machine learning engine <b>140</b> may differ. For example, in one embodiment, the computer vision engine <b>135</b> processes the received video data frame-by-frame, while the machine learning engine <b>140</b> processes data every N-frames. In other words, while the computer vision engine <b>135</b> analyzes each frame in real-time to derive a set of information about what is occurring within a given frame, the machine learning engine <b>140</b> is not constrained by the real-time frame rate of the video input.</p>
<p id="p-0035" num="0034">Note, however, <figref idref="DRAWINGS">FIG. 1</figref> illustrates merely one possible arrangement of the behavior-recognition system <b>100</b>. For example, although the video input source <b>105</b> is shown connected to the computer system <b>115</b> via the network <b>110</b>, the network <b>110</b> is not always present or needed (e.g., the video input source <b>105</b> may be directly connected to the computer system <b>115</b>). Further, various components and modules of the behavior-recognition system <b>100</b> may be implemented in other systems. For example, in one embodiment, the computer vision engine <b>135</b> may be implemented as a part of a video input device (e.g., as a firmware component wired directly into a video camera). In such a case, the output of the video camera may be provided to the machine learning engine <b>140</b> for analysis. Similarly, the output from the computer vision engine <b>135</b> and machine learning engine <b>140</b> may be supplied over computer network <b>110</b> to other computer systems. For example, the computer vision engine <b>135</b> and machine learning engine <b>140</b> may be installed on a server system and configured to process video from multiple input sources (i.e., from multiple cameras). In such a case, a client application <b>250</b>, <b>270</b> running on another computer system may request (or receive) the results of over network <b>110</b>.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> further illustrates components of the computer vision engine <b>135</b> and the machine learning engine <b>140</b> first illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, according to one embodiment of the present invention. As shown, the computer vision engine <b>135</b> includes a background/foreground (BG/FG) component <b>205</b>, a tracker component <b>210</b>, an estimator/identifier component <b>215</b>, and a context processor component <b>220</b>. Collectively, the components <b>205</b>, <b>210</b>, <b>215</b>, and <b>220</b> provide a pipeline for processing an incoming sequence of video frames supplied by the video input source <b>105</b> (indicated by the solid arrows linking the components). Additionally, the output of one component may be provided to multiple stages of the component pipeline (as indicated by the dashed arrows). In one embodiment, the components <b>205</b>, <b>210</b>, <b>215</b>, and <b>220</b> may each provide a software module configured to provide the functions described herein. Of course one of ordinary skill in the art will recognize that the components <b>205</b>, <b>210</b>, <b>215</b>, and <b>220</b> may be combined (or further subdivided) to suit the needs of a particular case.</p>
<p id="p-0037" num="0036">In one embodiment, the BG/FG component <b>205</b> may be configured to separate each frame of video provided by the video input source <b>105</b> into a stationary or static part (the scene background) and a collection of volatile parts (the scene foreground.) The frame itself may include a two-dimensional array of pixel values for multiple channels (e.g., RGB channels for color video or grayscale channel or radiance channel for black and white video). The BG/FG component <b>205</b> may be configured to generate a mask used to identify which pixels of the scene have been determined to depict foreground and, conversely, which pixels have been determined to depict scene background. The BG/FG component <b>205</b> then identifies regions of the scene that contain a portion of scene foreground (referred to as a foreground &#x201c;blob&#x201d; or &#x201c;patch&#x201d;) and supplies this information to subsequent stages of the pipeline. Additionally, portions of the scene determined to depict scene background maybe used to update pixel values in a background image modeling the scene.</p>
<p id="p-0038" num="0037">The tracker component <b>210</b> may receive the foreground patches produced by the BG/FG component <b>205</b> and generate computational models for the patches. The tracker component <b>210</b> may be configured to use this information, and each successive frame of raw-video, to attempt to track the motion of the objects depicted by the foreground patches as they move about the scene. Further, once the tracker component <b>210</b> identifies an object, the tracker component <b>210</b> may continue tracking the object even if the BG/FG component <b>205</b> does not continuously report pixels of the object as foreground.</p>
<p id="p-0039" num="0038">The estimator/identifier component <b>215</b> may receive the output of the tracker component <b>210</b> (and the BF/FG component <b>205</b>) and classify each tracked object as being one of a known category of objects. For example, in one embodiment, estimator/identifier component <b>215</b> may classify a tracked object as being a &#x201c;person,&#x201d; a &#x201c;vehicle,&#x201d; an &#x201c;unknown,&#x201d; or an &#x201c;other.&#x201d; In this context, the classification of &#x201c;other&#x201d; represents an affirmative assertion that the object is neither a &#x201c;person&#x201d; nor a &#x201c;vehicle.&#x201d; Additionally, the estimator/identifier component may identify characteristics of the tracked object, e.g., for a person, a prediction of gender, an estimation of a pose (e.g., standing or sitting) or an indication of whether the person is carrying an object. In an alternative embodiment, the machine learning engine <b>140</b> may classify foreground objects observed by the vision engine <b>135</b>. For example, the machine learning engine <b>140</b> may include an unsupervised classifier (e.g., an ART network) configured to observe, and ultimately classify actors in a scene based on a plurality of micro-features (e.g., size, speed, appearance, etc).</p>
<p id="p-0040" num="0039">The context processor component <b>220</b> may receive the output from other stages of the pipeline (i.e., the tracked objects, the background and foreground models, and the results of the estimator/identifier component <b>215</b>). Using this information, the context processor <b>220</b> may be configured to generate a stream of context events regarding objects tracked (by tracker component <b>210</b>) and classified (by estimator identifier component <b>215</b>). For example, the context processor component <b>220</b> may evaluate a foreground object from frame-to-frame and output context events describing that object's height, width (in pixels), position (as a 2D coordinate in the scene), acceleration, velocity, orientation angle, etc.</p>
<p id="p-0041" num="0040">The computer vision engine <b>135</b> may take the outputs of the components <b>205</b>, <b>210</b>, <b>215</b>, and <b>220</b> describing the motions and actions of the tracked objects in the scene and supply this information to the machine learning engine <b>140</b>. In one embodiment, the primitive event detector <b>212</b> may be configured to receive the output of the computer vision engine <b>135</b> (i.e., the video images, the object classifications, and context event stream) and generate a sequence of primitive events&#x2014;labeling the observed actions or behaviors in the video with semantic meaning. For example, assume the computer vision engine <b>135</b> has identified a foreground object and classified that foreground object as being a vehicle and the context processor component <b>220</b> estimates kinematic data regarding the car's position and velocity. In such a case, this information is supplied to the machine learning engine <b>140</b> and the primitive event detector <b>212</b>. In turn, the primitive event detector <b>212</b> may generate a semantic symbol stream providing a simple linguistic description of actions engaged in by the vehicle. For example, a sequence of primitive events related to observations of the computer vision engine <b>135</b> occurring at a parking lot could include formal language vectors representing the following: &#x201c;vehicle appears in scene,&#x201d; &#x201c;vehicle moves to a given location,&#x201d; &#x201c;vehicle stops moving,&#x201d; &#x201c;person appears proximate to vehicle,&#x201d; &#x201c;person moves,&#x201d; person leaves scene&#x201d; &#x201c;person appears in scene,&#x201d; &#x201c;person moves proximate to vehicle,&#x201d; &#x201c;person disappears,&#x201d; &#x201c;vehicle starts moving,&#x201d; and &#x201c;vehicle disappears.&#x201d; As described in greater detail below, the primitive event stream may be supplied to excite the perceptual associative memory <b>230</b>.</p>
<p id="p-0042" num="0041">Illustratively, the machine learning engine <b>140</b> includes a long-term memory <b>225</b>, a perceptual memory <b>230</b>, an episodic memory <b>235</b>, a workspace <b>240</b>, codelets <b>245</b>, a mapper component <b>211</b>, mapper event data <b>255</b>, and a transaction server <b>260</b>. In one embodiment, the perceptual memory <b>230</b>, the episodic memory <b>235</b>, and the long-term memory <b>225</b> are used to identify patterns of behavior, evaluate events that transpire in the scene, and encode and store observations. Generally, the perceptual memory <b>230</b> receives the output of the computer vision engine <b>135</b> (e.g., the context event stream) and a primitive event stream generated by primitive event detector <b>212</b>. The episodic memory <b>235</b> stores data representing observed events with details related to a particular event. That is, the episodic memory <b>235</b> may encode specific details of a particular event, i.e., &#x201c;what, when, and where&#x201d; something occurred within a scene, such as a particular vehicle (car A) moved to a location believed to be a parking space (parking space 5) at 9:43 AM.</p>
<p id="p-0043" num="0042">The long-term memory <b>225</b> may store data generalizing events observed in the scene. To continue with the example of a vehicle parking, the long-term memory <b>225</b> may encode information capturing observations and generalizations learned by an analysis of the behavior of objects in the scene such as &#x201c;vehicles tend to park in a particular place in the scene,&#x201d; &#x201c;when parking vehicles tend to move a certain speed,&#x201d; and &#x201c;after a vehicle appears and parks, people tend to appear in the scene proximate to the vehicle,&#x201d; etc. Thus, the long-term memory <b>225</b> stores observations about what happens within a scene with much of the particular episodic details stripped away. In this way, when a new event occurs, memories from the episodic memory <b>235</b> and the long-term memory <b>225</b> may be used to relate and understand a current event, i.e., the new event may be compared with past experience, leading to both reinforcement, decay, and adjustments to the information stored in the long-term memory <b>225</b>, over time. In a particular embodiment, the long-term memory <b>225</b> may be implemented as an ART network and a sparse-distributed memory data structure.</p>
<p id="p-0044" num="0043">Further, as described in greater detail below, the mapper component <b>211</b> may receive the context event stream and the primitive event stream and parse information sent to multiple ART networks to generate statistical models of what occurs in the scene for different groups of context events and primitive events. The statistical models of what occurs in the scene for different groups of context events and primitive events may be referred to as what is &#x201c;learned&#x201d; by the mapper component <b>211</b> and may be stored as the mapper event data <b>255</b>. As described below, the transaction server <b>260</b> may generate, at least in part from the mapper event data <b>255</b>, event maps for display via a GUI tool <b>270</b>.</p>
<p id="p-0045" num="0044">Note, however, the transaction server <b>260</b> is shown in <figref idref="DRAWINGS">FIG. 2</figref> as a separate component from the machine learning engine <b>140</b> for reasons of clarity. In an alternative embodiment, the functions provided by the transaction server <b>260</b> may be integrated into the machine learning engine <b>140</b>. For example, the event maps provided for display via the GUI tool <b>270</b> may be generated directly by the mapper component <b>211</b>. Of course, one of ordinary skill in the art will recognize that the functions of the transaction server <b>260</b> may be implemented in a variety of ways.</p>
<p id="p-0046" num="0045">Generally, the workspace <b>240</b> provides a computational engine for the machine learning engine <b>140</b>. For example, the workspace <b>240</b> may be configured to copy information from the perceptual memory <b>230</b>, retrieve relevant memories from the episodic memory <b>235</b> and the long-term memory <b>225</b>, select and invoke the execution of one of codelets <b>245</b>. In one embodiment, each codelet <b>245</b> is a software program configured to evaluate different sequences of events and to determine how one sequence may follow (or otherwise relate to) another (e.g., a finite state machine). More generally, the codelet may provide a software module configured to detect interesting patterns from the streams of data fed to the machine learning engine. In turn, the codelet <b>245</b> may create, retrieve, reinforce, or modify memories in the episodic memory <b>235</b> and the long-term memory <b>225</b>. By repeatedly scheduling codelets <b>245</b> for execution, copying memories and percepts to/from the workspace <b>240</b>, the machine learning engine <b>140</b> performs a cognitive cycle used to observe, and learn, about patterns of behavior that occur within the scene.</p>
<p id="p-0047" num="0046">In one embodiment, the transaction server <b>260</b> processes user requests from the GUI tool <b>270</b> for event maps. The transaction server <b>260</b> may be configured to retrieve information from the mapper component <b>211</b> in order to generate a visual display of information learned by the machine learning engine, i.e., to generate the requested event map. In another embodiment, the mapper component <b>211</b> may itself integrate the transaction server <b>260</b>. Table I shows examples of transactions that may be supported by the transaction server <b>260</b>:</p>
<p id="p-0048" num="0047">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" rowsep="1">TABLE I</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>Transactions supported by the transaction server 260</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="63pt" align="left"/>
<colspec colname="2" colwidth="154pt" align="left"/>
<tbody valign="top">
<row>
<entry>Transaction</entry>
<entry>Description</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Get preset list</entry>
<entry>Obtain a list of presets for a specified camera</entry>
</row>
<row>
<entry>Get scene image</entry>
<entry>Obtain a picture that represents a scene as viewed by</entry>
</row>
<row>
<entry/>
<entry>the camera</entry>
</row>
<row>
<entry>Get list of maps</entry>
<entry>Obtain a list of maps for a specified preset</entry>
</row>
<row>
<entry>Get map</entry>
<entry>Obtains data for a specified map</entry>
</row>
<row>
<entry/>
<entry>(e.g., including properties)</entry>
</row>
<row>
<entry>Set always alert</entry>
<entry>Specifies to always alert on an event matching a</entry>
</row>
<row>
<entry/>
<entry>specified cluster</entry>
</row>
<row>
<entry>Set always ignore</entry>
<entry>Specifies to never alert on an event matching a</entry>
</row>
<row>
<entry/>
<entry>specified cluster</entry>
</row>
<row>
<entry>Modify property</entry>
<entry>Modify a specified property of a specified cluster</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a graph <b>300</b> showing a cluster <b>305</b> generated by an ART network and a two-dimensional (2D) projection <b>310</b> of the cluster <b>305</b>, according to one embodiment. In this example, the cluster <b>305</b> is represented as a hyper-sphere (i.e., a sphere in n dimensions) generated from input data regarding foreground objects classified as &#x201c;persons.&#x201d; In particular, the hyper-sphere has four dimensions, an X, Y position of the person and a height and width of the person (in pixels). The center of the hyper-sphere provides a prototypical position, height and width a person in the scene, based on observations made over time. In one embodiment, the hyper-sphere is defined by the mean and variance from the prototypical person represented by cluster <b>305</b> calculated from the input data mapped to cluster <b>305</b>. For example, the boundary may represent a distance of 2.5 standard deviations away from the mean for one of the input layer dimensions. Each new set of input data mapping to cluster <b>305</b> is used to train (refine) the prototype (X, Y) position, height, and width represented by the cluster <b>305</b>. Additionally, graph <b>300</b> shows the cluster <b>305</b> projected into the (X, Y) plane. The projection <b>310</b> represents a region of the scene where objects represented by the cluster (e.g., foreground objects classified as depicting persons) have been observed to appear, up to 2.5 standard deviations from the prototypical position. Accordingly, when persons appear in another region of the scene (i.e., outside of the projection <b>310</b>), it may represent the occurrence of an unusual event, resulting in the generation of an alert by the mapper component <b>211</b>.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an example of a set of clusters generated by two independent ART networks, according to one embodiment of the invention. In this particular example, the clusters represent the (X, Y) position in a scene where objects have been observed to appear (represented by the solid clusters, e.g., cluster <b>415</b>) or disappear (represented by the dashed clusters, e.g., cluster <b>420</b>). Additionally, the objects are not limited to a particular classification type (e.g., foreground objects classified by the computer vision engine <b>135</b> as depicting a &#x201c;person&#x201d; or a &#x201c;vehicle&#x201d;, instead, the clusters represent a position in the video where any foreground object is observed to appear or disappear.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a method <b>500</b> for a server application (or simply, server) <b>502</b> to interact with a client application (or simply, client) <b>504</b> to visually convey an event map to a user <b>506</b> using the client <b>504</b>, according to one embodiment of the invention. In one embodiment, the server <b>502</b> may be the machine learning engine <b>140</b> of <figref idref="DRAWINGS">FIG. 2</figref>. In another embodiment, the server <b>502</b> may be one or both of the mapper component <b>211</b> and the transaction server <b>260</b>. In one embodiment, the server <b>502</b> may listen for client requests on a specified port (e.g., via Berkeley sockets application programming interface (API) over Transmission Control Protocol/Internet Protocol (TCP/IP)). Further, the client <b>504</b> and the server <b>502</b> may communicate using any application-layer network protocol such as Hypertext Transfer Protocol (HTTP), File Transfer Protocol (FTP), Simple Object Access Protocol (SOAP), etc. Further still, each request to and/or response from the server <b>502</b> may be in a format such as Extensible Markup Language (XML).</p>
<p id="p-0052" num="0051">As shown, the method <b>500</b> begins at step <b>510</b>, where the user <b>506</b> invokes the client <b>504</b>. At step <b>512</b>, the client <b>504</b> connects to the server <b>502</b>. For example, the client <b>504</b> may connect to a specified IP address and port number on which the server <b>502</b> is listening. At step <b>514</b>, the client <b>504</b> queries for a list of cameras and associated presets <b>516</b>. Each preset may include a location and orientation of a respective camera observing (or having observed) a scene. At step <b>516</b>, the server <b>502</b> returns a list of cameras and presets to the client <b>504</b>. At step <b>518</b>, the client <b>504</b> displays the list of cameras and presets to the user <b>506</b>.</p>
<p id="p-0053" num="0052">At step <b>520</b>, the user <b>506</b> selects a camera and a preset. The client <b>504</b> then queries for the event maps from the server <b>502</b> for the selected camera and preset (step <b>522</b>). The query may also specify filtering criteria for excluding event maps from being displayed, according to one embodiment. At step <b>524</b>, the server <b>502</b> returns the event maps to the client <b>504</b>. In another embodiment, the user need not select a camera and/or a preset. For example, the server <b>502</b> may be configured to return the event maps for a currently active scene. At step <b>526</b>, the client <b>504</b> displays the event maps to the user <b>506</b>. In one embodiment, the client <b>504</b> may generate a display based on specified filtering criteria. In one embodiment, the event map may include clusters for an event type superimposed on a background model of the selected camera and preset. The client <b>504</b> may superimpose the clusters on the background model (both of which may be received from the server <b>502</b> in step <b>524</b>), according to one embodiment. The client <b>504</b> may allow the user <b>506</b> to select one or more clusters of the event map. The client <b>504</b> may also display properties associated with selected clusters. The properties may include an identifier for the cluster, a label of the cluster, a location of the cluster in the scene, a size of the cluster, identifiers for ancestors of the cluster, alert preferences for the cluster, etc. Ancestors of a cluster refer to two or more clusters that are merged to form the cluster. The client <b>504</b> may also allow the user <b>506</b> to modify one or more properties for a cluster. For example, a user <b>506</b> may modify a label or display properties for a cluster to customize how the event map conveys information for a particular event.</p>
<p id="p-0054" num="0053">At step <b>528</b>, the user <b>506</b> modifies the displayed event map via the client <b>504</b>. For example, the user <b>506</b> may modify a property of a cluster in the displayed event map. At step <b>530</b>, the client <b>504</b> sends a request to the server <b>502</b> to update the event map. In one embodiment, the server <b>502</b> may treat each client request as a separate transaction. At step <b>532</b>, the server <b>502</b> attempts to update the event map and returns a result to the client <b>504</b> indicating success or failure of the attempted update. After the step <b>532</b>, the method <b>500</b> may terminate or return to the steps <b>512</b>, <b>520</b>, or <b>528</b>. At a discretion of the user, the method <b>500</b> may also terminate prior to the step <b>520</b> or the step <b>528</b>.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a GUI <b>600</b> which provides an example of an event map, according to one embodiment of the invention. As shown, the GUI <b>600</b> includes an event map <b>601</b> and properties <b>620</b> associated with a cluster. The event map <b>601</b> includes a set of dark-shaded clusters <b>604</b>, <b>606</b>, <b>608</b>, <b>610</b> and a set of light-shaded clusters <b>612</b>, <b>614</b>, <b>616</b>. For example, the dark-shaded clusters <b>604</b>, <b>606</b>, <b>608</b>, <b>610</b> may represent a &#x201c;person appearing&#x201d; event, while the light-shaded clusters <b>612</b>, <b>614</b>, <b>616</b> may represent a &#x201c;person disappearing&#x201d; event. Further, a dark-shaded cluster <b>604</b> is shown as being selected by the user. Thus, the properties <b>620</b> are associated with the selected cluster <b>604</b> and include an identifier for the cluster <b>604</b> (i.e., 12983734), a label for the cluster <b>604</b> (i.e., &#x201c;none&#x201d;), a location of the cluster <b>604</b> in the event map <b>601</b> (i.e., coordinates, measured in pixels, of &#x201c;196.8, 112.5&#x201d;), a size of the cluster <b>604</b> (i.e., 38.22&#xd7;14.27 in pixels), identifiers for ancestors of the cluster <b>604</b> (i.e., 10274184, 9716278), and alert settings for the cluster <b>604</b> (i.e., &#x201c;Never&#x201d;). In this example, a user may assign a label for the cluster <b>604</b>. The user may also set the cluster <b>604</b> to alert whenever the machine learning engine determines that an event mapping to this cluster has occurred.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 7</figref> illustrates examples of clusters generated by different ART networks superimposed over a video frame depicting a scene, according to one embodiment of the invention. <figref idref="DRAWINGS">FIG. 7</figref> shows a video frame <b>710</b> with a set of clusters superimposed over the frame image. In this example, each cluster corresponds to a position in the frame <b>710</b> where objects classified as &#x201c;person&#x201d; have been observed to appear in the scene. That is, each cluster represents a prototypical position for the position of a person in the scene and the bounds of each cluster may be determined relative to the prototypical position from the input values mapped to that cluster. Illustratively, each cluster is labeled with a number to represent the number of input instances that mapped to a respective cluster. In one embodiment, if an object classified as person were to appear outside of one of the established clusters, then the mapper component <b>211</b> may generate an alert. Further, the relative significance of each cluster may be tied to the number of input instances that mapped to a given cluster. If the ART network which generated the clusters shown in <figref idref="DRAWINGS">FIG. 7</figref> mapped an instance of input data to a cluster of low relative significance, an alert may be generated to represent the occurrence of an event that, while not resulting in a new cluster being created for this ART network, was nevertheless unusual relative to what has been observed to have occurred in the scene depicted by frame <b>710</b>. Using the clusters, should an object (whether classified as &#x201c;person,&#x201d; &#x201c;vehicle,&#x201d; &#x201c;unknown,&#x201d; or &#x201c;other&#x201d;) appear, e.g., outside of any cluster, the mapper component <b>211</b> may recognize this as an unusual event, and in response, generate an alert indicating that something unusual has occurred. That is, the mapper is configured to only alert based on statistically infrequent events, according to one embodiment. The GUI tool <b>270</b> for event maps allows users to both: (i) visualize what the mapper sees and (ii) specify metadata to change system behavior.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 8</figref> illustrates a method <b>800</b> for generating an event map of a scene, according to one embodiment of the invention. As shown, the method <b>800</b> begins at step <b>810</b>, where the transaction server <b>260</b> receives a request to view an event map for a specified scene. For example, a user may specify a camera and a preset for a camera (for which the user desires to view event maps). At step <b>820</b>, the transaction server <b>260</b> retrieves a background model generated by the computer vision engine <b>135</b>. At step <b>830</b>, transaction server <b>260</b> generates a visual representation of at least one cluster providing a statistical distribution of an event in the specified scene. In one embodiment, if there are no clusters to be displayed (i.e. the system has not observed a sufficient number of events yet), the transaction server <b>260</b> may merely display the background model. The mapper component <b>211</b> may derive the statistical distribution from data streams generated from a sequence of video frames depicting the specified scene captured by a video camera. As noted above, the at least one cluster may emerge as input streams are supplied to an ART network initialized for an event type. Further, the transaction server <b>260</b> may generate a visualization of each cluster at least in part from values of properties of the respective cluster. For example, the transaction server <b>260</b> may determine at least one of shape, size, transparency, orientation, fill color, border thickness, border color, pattern, label, and marking of the visual representation from values of properties of the respective cluster (e.g., relative significance of the cluster).</p>
<p id="p-0058" num="0057">At step <b>840</b>, the transaction server <b>260</b> may superimpose the visual representation over the background model to create the event map. In another embodiment, the transaction server merely provides the background image and a cluster, delegating, to a client application, the steps of generating a visual representation of the cluster and/or superimposing the visual representation on the background image. The event map represents information learned by the mapper component <b>211</b>. For example, the event map may represent ART network clusters that emerge from primitive events and input data showing where people appear in given scene. Further, the GUI tool <b>270</b> for event maps may be configured to allow the user to view and/or modify properties of any cluster selected by the user. Modifying a property of a selected cluster is described further below in conjunction with <figref idref="DRAWINGS">FIG. 9</figref>. At step <b>850</b>, the mapper component <b>211</b> may output the event map to a graphical display. After step <b>850</b>, the method <b>800</b> terminates.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 9</figref> illustrates a method <b>900</b> for modifying an event map, according to one embodiment of the invention. As shown, the method <b>900</b> begins at step <b>910</b>, where the transaction server <b>260</b> receives a user request to modify the event map. If the user request is to name a specified cluster (step <b>940</b>), the transaction server <b>260</b> may set the name for the specified cluster (step <b>945</b>). If the user request is to always alert for a specified cluster (step <b>950</b>), the transaction server <b>260</b> may set the mapper component <b>211</b> to always alert upon detecting input data mapping to the specified cluster (step <b>955</b>). If the user request is to ignore a specified cluster (step <b>960</b>), the transaction server <b>260</b> may set the mapper component <b>211</b> to never alert upon detecting an event matching the specified cluster (step <b>965</b>). Further, the user may also request to modify other properties associated with a cluster. After the steps <b>925</b>, <b>945</b>, <b>955</b>, or <b>965</b>, the transaction server <b>260</b> may respond with a success or failure of servicing the user request (step <b>975</b>). After steps <b>960</b> or <b>975</b>, the method <b>900</b> terminates.</p>
<p id="p-0060" num="0059">Advantageously, embodiments of the invention provide users with a visualization of data observed by a machine learning engine of a behavior recognition system. Further, the visualization may provide an interface used to guide system behavior. For example, a user may use the interface to specify that the behavior recognition system is to alert (or not to alert) on detecting an event that maps to a specified cluster. In one embodiment, the interface visually conveys an event map. The event map represents information learned by the mapper component of the machine learning engine. That is, the event map conveys information used by the computer vision engine to identify uncommon events as they are observed to occur in a sequence of video frames. Further, a transaction server of the machine learning engine may receive a request to view an event map for a specified scene. The transaction server may generate the event map for the specified scene. The event map may include a background model of the specified scene and at least one cluster. The event map may also be configured to allow a user to view and/or modify properties associated with a cluster. For example, the user may label a cluster and set events matching the cluster to never generate an alert.</p>
<p id="p-0061" num="0060">While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method, comprising:
<claim-text>receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames;</claim-text>
<claim-text>retrieving a background image associated with the scene;</claim-text>
<claim-text>retrieving an adaptive resonance theory (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene where one or more events of the specified type has been to observed to occur;</claim-text>
<claim-text>generating a visual representation of each cluster; and</claim-text>
<claim-text>superimposing each visual representation over the background image of the scene.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the visual representation of each cluster is generated at least in part from values of properties of the respective cluster, and wherein at least one of shape, size, transparency, orientation, fill color, border thickness, border color, pattern, label, and marking of the visual representation is determined from values of properties of the respective cluster.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>receiving user input specifying a filter condition for selecting one or more clusters from the ART network to include in the event map; and</claim-text>
<claim-text>excluding clusters from the event map consistent with the filter condition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>receiving user input modifying a property of a specified cluster, wherein the property is selected from at least: (i) a name for the specified cluster; (ii) whether an alert message is to be published upon detecting, from data streams generated from the sequence of video frames, an occurrence of an event mapping to the specified cluster; and (iii) whether an alert message is not to be published even upon detecting, from the data streams, an occurrence of an event matching the specified cluster; and</claim-text>
<claim-text>modifying the property of the specified cluster, based on the received user input.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-implemented method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the data streams include:
<claim-text>(i) a stream of context events generated by a computer vision engine, wherein each context event provides kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames; and</claim-text>
<claim-text>(ii) a stream of primitive events generated by a machine learning engine, and wherein each primitive event provides a semantic description of a group of one or more context events.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer-implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein one of the context events provides a classification of what is depicted by a foreground object detected in the scene by the computer vision engine, and wherein the classification classifies the foreground object as depicting one of a person, a vehicle, or an unknown, and an other class of foreground object.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer-implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the kinematic data includes at least one of a coordinate position in a frame of video where an event is observed to occur, and wherein the event is one of an appearance of a foreground object, a disappearance of a foreground object, a height of a foreground object, a width of a foreground object, a velocity in a horizontal dimension of a foreground object, a velocity in a vertical dimension of a foreground object, a rate of acceleration in a horizontal dimension of a foreground object, and a rate of acceleration in a vertical dimension of a foreground object.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A computer-readable storage medium containing a program which, when executed, performs an operation comprising:
<claim-text>receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames;</claim-text>
<claim-text>retrieving a background image associated with the scene;</claim-text>
<claim-text>retrieving an adaptive resonance theory (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene where one or more events of the specified type has been to observed to occur;</claim-text>
<claim-text>generating a visual representation of each cluster; and</claim-text>
<claim-text>superimposing each visual representation over the background image of the scene.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the visual representation of each cluster is generated at least in part from values of properties of the respective cluster, and wherein at least one of shape, size, transparency, orientation, fill color, border thickness, border color, pattern, label, and marking of the visual representation is determined from values of properties of the respective cluster.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operation further comprises:
<claim-text>receiving user input specifying a filter condition for selecting one or more clusters from the ART network to include in the event map; and</claim-text>
<claim-text>excluding clusters from the event map consistent with the filter condition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the operation further comprises:
<claim-text>receiving user input modifying a property of a specified cluster, wherein the property is selected from at least: (i) a name for the specified cluster; (ii) whether an alert message is to be published upon detecting, from data streams generated from the sequence of video frames, an occurrence of an event mapping to the specified cluster; and (iii) whether an alert message is not to be published even upon detecting, from the data streams, an occurrence of an event matching the specified cluster; and</claim-text>
<claim-text>modifying the property of the specified cluster, based on the received user input.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data streams include:
<claim-text>(i) a stream of context events generated by a computer vision engine, wherein each context event provides kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames; and</claim-text>
<claim-text>(ii) a stream of primitive events generated by a machine learning engine, and wherein each primitive event provides a semantic description of a group of one or more context events.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The computer-readable storage medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein one of the context events provides a classification of what is depicted by a foreground object detected in the scene by the computer vision engine, and wherein the classification classifies the foreground object as depicting one of a person, a vehicle, or an unknown, and an other class of foreground object.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer-readable storage medium of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the kinematic data includes at least one of a coordinate position in a frame of video where an event is observed to occur, and wherein the event is one of an appearance of a foreground object, a disappearance of a foreground object, a height of a foreground object, a width of a foreground object, a velocity in a horizontal dimension of a foreground object, a velocity in a vertical dimension of a foreground object, a rate of acceleration in a horizontal dimension of a foreground object, and a rate of acceleration in a vertical dimension of a foreground object.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system, comprising:
<claim-text>one or more computer processors; and</claim-text>
<claim-text>a memory containing a program, which when executed by the one or more computer processors is configured to perform an operation comprising:
<claim-text>receiving a request to view an event map of a specified event type for a scene depicted in a sequence of video frames;</claim-text>
<claim-text>retrieving a background image associated with the scene;</claim-text>
<claim-text>retrieving an adaptive resonance theory (ART) network modeling the specified event type, wherein the ART network is generated from the sequence of video frames depicting the scene captured by a video camera, and wherein a location of each cluster in the ART network models a region of the scene where one or more events of the specified type has been to observed to occur;</claim-text>
<claim-text>generating a visual representation of each cluster; and</claim-text>
<claim-text>superimposing each visual representation over the background image of the scene.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the visual representation of each cluster is generated at least in part from values of properties of the respective cluster, and wherein at least one of shape, size, transparency, orientation, fill color, border thickness, border color, pattern, label, and marking of the visual representation is determined from values of properties of the respective cluster.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operation further comprises:
<claim-text>receiving user input specifying a filter condition for selecting one or more clusters from the ART network to include in the event map; and</claim-text>
<claim-text>excluding clusters from the event map consistent with the filter condition.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the operation further comprises:
<claim-text>receiving user input modifying a property of a specified cluster, wherein the property is selected from at least: (i) a name for the specified cluster; (ii) whether an alert message is to be published upon detecting, from data streams generated from the sequence of video frames, an occurrence of an event mapping to the specified cluster; and (iii) whether an alert message is not to be published even upon detecting, from the data streams, an occurrence of an event matching the specified cluster; and</claim-text>
<claim-text>modifying the property of the specified cluster, based on the received user input.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the data streams include:
<claim-text>(i) a stream of context events generated by a computer vision engine, wherein each context event provides kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames; and</claim-text>
<claim-text>(ii) a stream of primitive events generated by a machine learning engine, and wherein each primitive event provides a semantic description of a group of one or more context events.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein one of the context events provides a classification of what is depicted by a foreground object detected in the scene by the computer vision engine, and wherein the classification classifies the foreground object as depicting one of a person, a vehicle, or an unknown, and an other class of foreground object.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The system of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the kinematic data includes at least one of a coordinate position in a frame of video where an event is observed to occur, and wherein the event is one of an appearance of a foreground object, a disappearance of a foreground object, a height of a foreground object, a width of a foreground object, a velocity in a horizontal dimension of a foreground object, a velocity in a vertical dimension of a foreground object, a rate of acceleration in a horizontal dimension of a foreground object, and a rate of acceleration in a vertical dimension of a foreground object.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626881-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626881</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13328554</doc-number>
<date>20111216</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>66</us-term-extension>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>177</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709220</main-classification>
<further-classification>709221</further-classification>
<further-classification>709222</further-classification>
<further-classification>709245</further-classification>
</classification-national>
<invention-title id="d2e55">Distributed mesh network</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6519697</doc-number>
<kind>B1</kind>
<name>Denman et al.</name>
<date>20030200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8099479</doc-number>
<kind>B2</kind>
<name>Saint-Hilaire</name>
<date>20120100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2002/0156875</doc-number>
<kind>A1</kind>
<name>Pabla</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0203385</doc-number>
<kind>A1</kind>
<name>Narayanan et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0210657</doc-number>
<kind>A1</kind>
<name>Narayanan et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2004/0219955</doc-number>
<kind>A1</kind>
<name>DaCosta</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2004/0243665</doc-number>
<kind>A1</kind>
<name>Markki et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709201</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2005/0283526</doc-number>
<kind>A1</kind>
<name>O'Neal et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2006/0077985</doc-number>
<kind>A1</kind>
<name>Erwin et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370400</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2006/0168320</doc-number>
<kind>A1</kind>
<name>Kidd</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2007/0005746</doc-number>
<kind>A1</kind>
<name>Roe</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2007/0097895</doc-number>
<kind>A1</kind>
<name>Keshavarzian et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0121671</doc-number>
<kind>A1</kind>
<name>Kaler</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370466</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2007/0150558</doc-number>
<kind>A1</kind>
<name>Teodosiu et al.</name>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0019291</doc-number>
<kind>A1</kind>
<name>Sienel et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2008/0049689</doc-number>
<kind>A1</kind>
<name>Nakfour et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2008/0052514</doc-number>
<kind>A1</kind>
<name>Nakae</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2008/0253306</doc-number>
<kind>A1</kind>
<name>Manion et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370255</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2009/0133096</doc-number>
<kind>A1</kind>
<name>Wouhaybi</name>
<date>20090500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2009/0147698</doc-number>
<kind>A1</kind>
<name>Potvin</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2009/0158394</doc-number>
<kind>A1</kind>
<name>Oh et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2009/0164663</doc-number>
<kind>A1</kind>
<name>Ransom et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709243</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2009/0252127</doc-number>
<kind>A1</kind>
<name>Rangarajan et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2010/0074173</doc-number>
<kind>A1</kind>
<name>Ewing</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2012/0159581</doc-number>
<kind>A1</kind>
<name>Saint-Hilaire</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>CN</country>
<doc-number>1988449</doc-number>
<kind>A</kind>
<date>20070600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>CN</country>
<doc-number>101110707</doc-number>
<kind>A</kind>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>EP</country>
<doc-number>1313336</doc-number>
<kind>A2</kind>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>JP</country>
<doc-number>2002190806</doc-number>
<kind>A</kind>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>JP</country>
<doc-number>2006301749</doc-number>
<kind>A</kind>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>WO</country>
<doc-number>2006059639</doc-number>
<kind>A1</kind>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>WO</country>
<doc-number>2009055556</doc-number>
<kind>A1</kind>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>European Search Report received for European Patent Application No. 10252113.5-2416, Mailed on May 4, 2011, 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00034">
<othercit>Kazuyuki,Sakoda, Wireless LANs, Jul. 12, 2007, 20 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00035">
<othercit>Office Action Received in Japanese Patent Application No. 2010-234643, mailed Feb. 7, 2012, 4 pages of Office Action, including 2 pages of unofficial English Translation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00036">
<othercit>Official Communication received for European Patent Application No. 10252113.5, mailed May 9, 2011, 7 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00037">
<othercit>Decision for Grant received in Japanese Patent Application No. 2010-234643, mailed May 29, 2012, 1 page of Decision for Grant and 1 page of unofficial, partial English translation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00038">
<othercit>Intention to Grant received for European Patent Application No. 10252113.5, mailed Jul. 26, 2012, 30 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00039">
<othercit>Intention to Grant received for European Patent Application No. 10252113.5, mailed Feb. 28, 2013, 30 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Office Action received for Chinese Patent Application No. 201010616214.3, mailed Mar. 27, 2013, 10 pages of Chinese Office Action and 24 pages of unofficial English translation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709208-211</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709220-222</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709227-229</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>370310-350</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12653524</doc-number>
<date>20091215</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8099479</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13328554</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120159581</doc-number>
<kind>A1</kind>
<date>20120621</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Saint-Hilaire</last-name>
<first-name>Ylian</first-name>
<address>
<city>Hillsboro</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Saint-Hilaire</last-name>
<first-name>Ylian</first-name>
<address>
<city>Hillsboro</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Barnes &#x26; Thornburg LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Intel Corporation</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Higa</last-name>
<first-name>Brendan</first-name>
<department>2441</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A device, method, and system are disclosed. In one embodiment a computing device resides in a mesh network. The device includes a first storage device that operates when the computing device is awake. The first storage device stores a last known list of peer computing devices in the mesh network. The device also includes a second storage device that operates regardless of whether any central processing unit in the computing device is awake or asleep. The second storage device includes a local block that stores a list of resources provided by the first computing device and a list of computing devices in the mesh network verified by the first computing device. The second storage device also includes a remote block that stores an unverified remote list of computing devices in the mesh network.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="247.14mm" wi="176.61mm" file="US08626881-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.04mm" wi="169.84mm" file="US08626881-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="246.04mm" wi="175.60mm" file="US08626881-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="199.31mm" wi="183.30mm" file="US08626881-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.20mm" wi="182.03mm" file="US08626881-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="240.28mm" wi="71.12mm" file="US08626881-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="244.77mm" wi="87.12mm" file="US08626881-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application is a Continuation of U.S. patent application Ser. No. 12/653,524, entitled &#x201c;DISTRIBUTED MESH NETWORK,&#x201d; filed on Dec. 15, 2009, now U.S. Pat. No. 8,099,479. This application is hereby entirely incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">This invention relates to peer-to-peer network implementations.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">A peer-to-peer distributed network generally allows network functionality without many centralized administration server requirements that other types of networks utilize. Power efficiency has become increasingly necessary on a computer by computer basis. When taking into consideration the number of computers present at a given time on a large network, processes and devices to lower power per computer can add up to significant company- and/or industry-wide power savings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0005" num="0004">The present invention is illustrated by way of example and is not limited by the drawings, in which like references indicate similar elements, and in which:</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of a computing device in a mesh network.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of a mesh network.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of inter-node familiarity in a mesh network.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an embodiment of a process to update a local node's mesh network information.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of an embodiment of a process of a local node to verify another node in a mesh network and then exchange relevant mesh network information with the other node.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of an embodiment of a process of a local node to contact a third party server and potentially be upgraded to a leader node by the third party server.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0012" num="0011">Embodiments of a device, method, and system to implement a distributed mesh network are described.</p>
<p id="p-0013" num="0012">A distributed mesh network includes a number of peer-to-peer nodes. Each node potentially includes storage locations and logic that are available to other nodes on the mesh network whether the node is awake or asleep. When two nodes interact, they may verify to each other that they are allowed to be on the mesh network through one or more authentication procedures. The nodes may exchange information regarding the resources that each node provides as well as a list of known nodes each exchanging node is aware of on the mesh network. A first node may walk through the mesh network by retrieving a list of known nodes from each of the nodes the first node is already aware of. The first node can then contact any new nodes that the first node becomes aware of through its original known node list.</p>
<p id="p-0014" num="0013">Furthermore, a third party server external to the mesh network may provide each node information about all of the other nodes on the mesh network by utilizing a designated leader node to provide a communication tunnel between the mesh network and the third party server. In many embodiments, the mesh network provides an overall network power savings with the ability to allow many of the nodes in the network to remain in a sleep state while still allowing any one node to retrieve a resource from any other node in the network. The node requesting the resource can send a request to the third party server, which can then send a wake up command through the leader node to the node that is the target of the request. The target node may then wake and provide the resource to the requesting node and then return to a sleep state.</p>
<p id="p-0015" num="0014">Reference in the following description and claims to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; of the disclosed techniques means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosed techniques. Thus, the appearances of the phrase &#x201c;in one embodiment&#x201d; appearing in various places throughout the specification are not necessarily all referring to the same embodiment. In the following description and claims, the terms &#x201c;include&#x201d; and &#x201c;comprise,&#x201d; along with their derivatives, may be used, and are intended to be treated as synonyms for each other.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an embodiment of a computing device in a mesh network. The computer device may be referred to as a node, or more specifically as local node <b>100</b>. Local node <b>100</b> may comprise some form of a computing device. For example, local node <b>100</b> may be a desktop computer, a laptop computer, a workstation computer, a server, a handheld computing device, a gaming console, a television set top box, an integrated computer in another device (e.g. a dashboard computer in an automobile), or another form of a computing device. Local node <b>100</b> includes system memory <b>102</b>. System memory <b>102</b> may be a volatile memory such as dynamic random access memory (DRAM) or system memory <b>102</b> may be a non-volatile memory such as a form of flash memory.</p>
<p id="p-0017" num="0016">The local node may include several types of storage such as disk storage <b>104</b> (e.g. a hard drive) and flash storage <b>106</b> (e.g. flash memory, a solid state drive, etc.). The disk storage <b>104</b> and flash storage <b>106</b> are non-volatile storage devices, which allows them to save information through multiple power cycles. In other words, when the local node is powered off or in a sleep state, the disk storage <b>104</b> and flash storage <b>106</b> may maintain information that is available the next time the local node is powered on.</p>
<p id="p-0018" num="0017">In many embodiments, the local node also includes OOB (out-of-band) management logic <b>108</b>. OOB management logic <b>108</b> may have circuitry that is operational when the rest of local node <b>100</b> is in a sleep state or potentially powered down. An example of OOB management logic is Intel&#xae; Active Management Technology (AMT). There are many uses for OOB management logic <b>108</b>, including allowing remote access to at least a portion of local node <b>100</b> when local node <b>100</b> is not operational due to a hardware or software failure or because the local node <b>100</b> is in a sleep state, among other reasons. In many embodiments, OOB management logic <b>108</b> manages local node <b>100</b> in an out-of-band manner, which correlates to managing local node <b>100</b> during times when local node <b>100</b> is not utilizing standard in-band methods to manage itself. For example, when local node <b>100</b> is in a fully powered state and operating normally, a central processor (not shown) in local node <b>100</b> may be executing instructions for an operating system (OS) residing in system memory <b>102</b>. This may be referred to as in-band operation because when a remote node communicates with local node <b>100</b>, standard communication channels through the local operating system can be utilized. On the other hand, when local node <b>100</b> is in a sleep state, where the central processor is not fully powered and the operating system is not operational, the only communication available with local node <b>100</b> may be an out-of-band communication through OOB management logic <b>108</b> that is operational when the rest of local node <b>100</b> is not.</p>
<p id="p-0019" num="0018">An I/O (input/output) interface <b>110</b> is utilized for communication between the local node <b>100</b> and any entity external to the node. I/O interface <b>110</b> may include one or more of a wired network interface, a wireless network interface utilizing an antenna, and/or one or more other possible network interface solutions that allows I/O communication between local node <b>100</b> and one or more other external devices. In many embodiments, I/O interface <b>110</b> is coupled to local network <b>200</b>. Local network <b>200</b> may be a wired or wireless network and may or may not be coupled to the Internet.</p>
<p id="p-0020" num="0019">OOB management logic <b>108</b> may take advantage of a portion or all of I/O interface <b>110</b> when local node <b>100</b> is in out-of-band mode so that communication between OOB management logic <b>108</b> and other computing devices is possible. In other embodiments, OOB management logic <b>108</b> includes a separately operational integrated I/O interface for external communication purposes.</p>
<p id="p-0021" num="0020">In many embodiments, at least a portion of flash storage <b>106</b> is dedicated for use by the OOB management logic <b>108</b>. Thus, flash storage <b>106</b> would be accessible for use by OOB management logic <b>108</b> during out-of-band operation, such as when the remaining portions of local node <b>100</b> are in a sleep state.</p>
<p id="p-0022" num="0021">Local node <b>100</b> additionally includes a local flash block <b>112</b>, a remote flash block <b>116</b>, a disk storage block <b>118</b>, and an OS mesh agent <b>114</b>. These additional components will be explained in detail within the description of <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an embodiment of a mesh network. The mesh network includes a set of nodes (node A <b>202</b>, node B <b>204</b>, node C <b>206</b>, node D <b>208</b>, node E <b>210</b>, and node F <b>212</b>). In many embodiments, local node <b>100</b> from <figref idref="DRAWINGS">FIG. 1</figref> may be any one of nodes A-F. In other words, nodes A-F may include all of the components within local node <b>100</b> detailed in <figref idref="DRAWINGS">FIG. 1</figref>. E.g., the detailed components of local node <b>100</b> described, in part, above are shown in the blown up detail of node A <b>202</b>. The set of nodes in <figref idref="DRAWINGS">FIG. 2</figref> are coupled to each other through a local network <b>200</b>. The local network may be any form of communication network that allows multiple nodes to communicate with each other. Examples of local network <b>200</b> may be an Ethernet wired network, an IEEE 802.11-based wireless network, a cellular network, a wide-area wireless network such as WiMAX, or another type of network. The network may be coupled to the Internet <b>214</b> through a firewall <b>216</b>. The firewall <b>216</b> may be maintained by a gateway computer on the local network <b>200</b>. The gateway computer includes certain security protocols that do not allow certain types of information to be communicated between the local network <b>200</b> and the Internet <b>214</b>. Thus, nodes A-F may freely communicate amongst themselves since they are all members of local network <b>200</b>, but communication between any node A-F and a remote node, such as one communicatively coupled to local network <b>200</b> specifically through the Internet <b>214</b>, may be limited due to security processes put in place by firewall <b>216</b>.</p>
<p id="p-0024" num="0023">In many embodiments, local network <b>200</b> is a distributed &#x201c;mesh&#x201d; network. In a mesh network all nodes within the network are not necessarily aware of all other nodes. Furthermore, there is not necessarily a centralized node within the mesh network that has information about all nodes. Each node in the mesh network keeps a list of other nodes that it knows about in the mesh network (known nodes may be referred to as acquaintance nodes). This acquaintance list may be stored within the local flash block <b>112</b> that is maintained in flash storage <b>106</b>. In many embodiments, each entry in the acquaintance list includes the IP (Internet protocol) address of its acquaintances. When two nodes are aware of each other and have accepted each other as non-malicious entities, they may refer to each other as a &#x201c;friend.&#x201d; Each node may have a unique mesh certificate that it may advertise to other nodes in the network. In many embodiments, to create a friend relationship, two nodes would need to exchange correct mesh certificates that verify they are allowed on the network. This exchange may take one of many forms, but may include authentication procedures, such as a hash algorithm that combines a public mesh certificate key with a private key provided uniquely to each node.</p>
<p id="p-0025" num="0024">Conversely, if a first node is aware of a second node and yet the second node has failed to produce a mesh certificate, the first node may refer to the second node as an &#x201c;enemy.&#x201d; Whether the second node is a friend or enemy, once the first node is aware of the second node, the second node may become the first node's acquaintance. In some embodiments, the acquaintance list maintained by a node may also include a time stamp of the last point of direct contact of each node in the list. In many embodiments, the list itself is tagged with a version number and time stamp each time the list is updated. The list may be updated to include a new node that has joined the network, to remove a node that has left the network, to change the friend/enemy status of a node, etc. Each node in the mesh network can monitor all other nodes it is aware of on its list. If a given node is not providing a mesh certificate, the other nodes that are acquaintances of this no-certificate node may include a warning about the lack of a certificate in their node acquaintance lists.</p>
<p id="p-0026" num="0025">A trusted relationship between two nodes may require a security handshake utilizing the mesh certificates. In some embodiments, a node may require a mesh certificate security verification of each node that it initially becomes an acquaintance of to allow the acquaintance to be a friend. In other embodiments, a first node that has a second node as a friend, may automatically take any node that is a friend of the second node as its own friend (i.e. a friend of my friend is also my friend). This may be due to a predetermined security clearance level between friends where once a new acquaintance is verified as a new friend by one node, all other friend nodes can just assume the new acquaintance is also of friend of theirs because they utilize the same security-level mesh certificate handshake.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 3</figref> illustrates an embodiment of inter-node familiarity in a mesh network. Node A <b>300</b> knows about node B <b>302</b>, node C <b>304</b>, and node D <b>306</b> but does not know about node E <b>308</b> and node F <b>310</b>. Although, node C <b>304</b>, which is an friend of node A <b>300</b>, does know node E <b>308</b> and node F <b>310</b>. In this case, node A <b>300</b> may ask friend node C <b>304</b> for the information related to node E <b>308</b> and node F <b>310</b> so node A <b>300</b> can put those two nodes on its friend list of known nodes.</p>
<p id="p-0028" num="0027">Returning to <figref idref="DRAWINGS">FIG. 2</figref>, apart from each node maintaining a list of known acquaintance nodes, each node also maintains a list of resources that it can provide to other nodes within the mesh network. The list of resources may include file meta-data such as the names, sizes, and dates of all shared files and file fragments. In other embodiments, the resources may also include lists of services and functions that a node is capable of providing in addition to file meta-data. For example, node A <b>202</b> may store certain portions of sets of data that are relevant to other nodes. This may be prevalent in a peer-to-peer file sharing environment where each node in the mesh network stores portions of the files and they list the portions they have to other nodes. In other embodiments, a given node may store whole files that it lists instead of partial files.</p>
<p id="p-0029" num="0028">In many embodiments, each node includes an OS mesh agent <b>114</b>. The OS mesh agent <b>114</b> may be loaded when the node is awake and fully functioning. The OS mesh agent <b>114</b> may be a process that runs in the background when the OS is operational. The OS mesh agent <b>114</b> may provide some of the same functionality as the OOB management logic <b>108</b>. Thus, when the node is in a sleep state, the OOB management logic <b>108</b> performs the inter-node communication and list management and when the node is in an awake state, the OS mesh agent <b>114</b> performs the inter-node communication and list management. In many embodiments, the OS mesh agent <b>114</b> may also be loaded onto nodes that do not have OOB management logic <b>108</b>, which would allow the inter-node communication to happen when the node is awake, but a node without the OOB management logic <b>108</b> would not be capable of inter-node communication while in a sleep state.</p>
<p id="p-0030" num="0029">A given node may be capable of navigating through the mesh network by contacting each friend node, receiving the list of acquaintances from each friend node, and then contacting the nodes in the acquaintance lists, and so on. To do this, the OS mesh agent <b>114</b> may read the acquaintance list at each friend node maintained in the friends' respective local flash blocks. This navigation may take place whether nodes are awake or asleep because a navigating node can contact another node in the mesh network whether the other node is awake or asleep as long as the other node includes a local flash block that may be maintained in a sleep state by OOB management logic <b>108</b>. In many embodiments, the OS mesh agent <b>114</b> provides local information to a visiting node in the awake state and the OOB management logic <b>108</b> provides local information to a visiting node in the sleep state. In some embodiments, both the OS mesh agent <b>114</b> and the OOB management logic <b>108</b> in a node retrieve acquaintance information as well as its own resource information from the local flash block to provide to the visiting node. In some embodiments, when the node is awake, the acquaintance and resource information may be retrieved from the local flash block <b>112</b>. Thus, in many embodiments, regardless of the awake or sleep state of other nodes, a node may be capable of fully navigating the mesh network.</p>
<p id="p-0031" num="0030">Furthermore, in many embodiments, when a given node navigates through the network it may leave its own list of acquaintances and its own list of resources at each node it visits. The visiting node may place this information (resources and acquaintances) in the remote flash block <b>116</b> in the flash storage <b>106</b> of the node being visited. In some embodiments, when the node being visited is sleeping, this information may sit in the remote flash block <b>116</b> undisturbed until the visited node wakes up.</p>
<p id="p-0032" num="0031">Once awake, the OS mesh agent <b>114</b> of the node that was visited may read the remote flash block <b>116</b> and process the information deposited by the visiting node. During this process, the OS mesh agent <b>114</b> may verify the information deposited by the visiting node by comparing the list of acquaintances that was left by the visiting node. The acquaintances that are common among both lists have already been verified by the local node. If the visiting node has acquaintances not present in the local node's own list of acquaintances, an extra process may be undertaken to verify these unknown acquaintance nodes. Specifically, if one or more acquaintance nodes are present in the visiting node's acquaintance list that are not present in the acquaintance list maintained in the local node's own local flash block <b>112</b>, the OS mesh agent <b>114</b> may contact the unknown acquaintance(s) and perform a mesh certificate exchange with these new node(s) so the one or more new nodes may be added to the local list of acquaintance nodes stored in the local flash block <b>112</b>.</p>
<p id="p-0033" num="0032">Additionally, the resource information of the new acquaintance node(s) may also be utilized by the OS mesh agent <b>114</b>. The disk storage block <b>118</b> stored in local disk storage <b>104</b> may store all known information for all known nodes in the mesh network <b>200</b>. For example, the disk storage block <b>118</b> may include the IP addresses of each known node as well as a list of resources per node. In many embodiments, other information per node may be stored as well. For example, an average network ping latency to each acquaintance node may be stored. Every so often the OS mesh agent <b>114</b> in a given node (while the node is awake) may perform a maintenance update to its known information of the nodes in the mesh network <b>200</b>. This entails contacting each of the nodes in its own acquaintance list to update the information it maintains regarding each of the acquaintance nodes. Some information related to other nodes may be obtained from information a visiting node stores in the remote flash block <b>116</b>. Other information related to other nodes may be obtained directly from other nodes in the mesh network when the OS mesh agent <b>114</b> proactively makes contact with another node.</p>
<p id="p-0034" num="0033">For a given node, the acquaintance information stored in its local flash block <b>112</b> and/or disk storage block <b>118</b> may be compared against the acquaintance information stored by visiting nodes in the remote flash block each time the node wakes up from a sleep state if a list deposited by a visiting node includes the IP address of a new node (i.e. the new node is not part of the list of acquaintance nodes that is maintained by the OS mesh agent <b>114</b>), the OS mesh agent <b>114</b> may contact the new node and perform a mesh certificate exchange with the new node to certify the new node and add it to the local list of acquaintance nodes.</p>
<p id="p-0035" num="0034">In many embodiments, a third party (3P) server <b>218</b> is coupled to the Internet <b>214</b>. The 3P server <b>218</b> may maintain a list of all nodes in the mesh network, including their IP addresses and the resources that each node provides. The 3P server <b>218</b> is outside the firewall <b>216</b>, thus there may be a very limited amount of information that can be communicated between any given node in the mesh network <b>200</b> and the server. To remedy this firewall communication issue, in many embodiments, the mesh network <b>200</b> includes a leader node. The leader node may be any given node in the network. In many embodiments, the OS mesh agent <b>114</b> and/or the OOB management logic <b>108</b>, which are located in all (or at least many) nodes in the network, may all include additional leader logic to allow these nodes to be promoted to leader status. When a node is promoted to leader (e.g. node A <b>200</b>) it may create a two-way communication tunnel <b>220</b> with the 3P server <b>218</b>. The two-way communication tunnel is capable of bypassing the security limitations imposed by the firewall <b>216</b>, which allows the leader node to freely communicate with the 3P server <b>218</b>.</p>
<p id="p-0036" num="0035">In some embodiments, the leader logic may include a capability of waking up a given node in the mesh network. Conversely, nodes other than the leader may not have this ability.</p>
<p id="p-0037" num="0036">As stated above, the 3P server <b>218</b> stores a list of all the nodes in the mesh network <b>200</b> as well as list of resources each node provides. This information may be freely read by any node in the network. For example, this information stored by the 3P server <b>218</b> may be read as a simple HTML (hypertext markup language) file, which generally is acceptable information to be read through the firewall <b>216</b>.</p>
<p id="p-0038" num="0037">Furthermore, a given node (e.g. node C <b>206</b>) may have found a resource list maintained by another node (e.g. node E <b>210</b>) in the mesh network <b>200</b> that includes a resource node C <b>206</b> needs access to. The resource list of node E <b>210</b> may be maintained in a local flash block in node E <b>210</b>. The resource list of node E <b>210</b> may also be maintained by the 3P server <b>218</b>. Node C <b>206</b> may send a request communication to the 3P server <b>218</b> to wake up node E <b>210</b> so node C <b>206</b> can obtain the needed resource that is listed. In many embodiments, the 3P server may send a wake up request for node C <b>206</b> to node A <b>202</b> through the established two-way communication tunnel <b>220</b>. Leader node A <b>202</b> may receive this request and then directly contact node E <b>210</b> within the mesh network <b>200</b> and cause node E <b>210</b> to wake up. Furthermore, leader node A <b>202</b> may send a resource request to node E <b>210</b> to tell node E <b>210</b> to provide the needed resource to the original resource requestor, node C <b>206</b>.</p>
<p id="p-0039" num="0038">This communication and control process may be performed by the leader node regarding any node in the network when the two-way communication tunnel <b>220</b> has been established. Although the 3P server <b>218</b> may not be capable of making this request directly to the target node due to firewall <b>216</b> security processes, the 3P server <b>218</b> can make this request through the leader node using the two-way communication tunnel.</p>
<p id="p-0040" num="0039">The list of acquaintance nodes maintained by each node in the mesh network <b>200</b>, within each respective node's local flash block, may also include additional information stating which node in the list is the leader node. The OS mesh agent <b>114</b> and/or OOB management logic <b>108</b> may maintain the IP address of the 3P server <b>218</b> to retrieve a complete list of the nodes in the mesh network <b>200</b>, including the leader. Due to certain circumstances, a leader node may not be present. For example, if the leader node is disconnected from the mesh network <b>200</b> for some reason, there would then be no leader node present in the mesh network <b>200</b>. In these situations, a node that contacts the 3P server <b>218</b> may be automatically promoted to the leader node. This would only be possible from nodes that have leader logic present. The 3P server <b>218</b> may continuously monitor the two-way communication tunnel, and if this tunnel is interrupted, the 3P server <b>218</b> may set a flag (e.g. a &#x201c;leader position available&#x201d; flag) that tells the next node contacting the 3P server <b>218</b> to elevate itself to the leader node. At this time, the first node (e.g. node B <b>204</b>) to contact the 3P server <b>218</b> would see the flag and elevate itself to the leader. The elevation to leader would give node B <b>204</b> the ability to wake up other nodes through wake up requests. Additionally, the elevation to leader status would cause node B <b>204</b> to establish a new two-way communication tunnel with the 3P server <b>218</b>.</p>
<p id="p-0041" num="0040">When a new node is added to the mesh network, the node may declare itself to other local nodes through a broadcast message on the mesh network. Then at least one node in the mesh network may contact the new node to perform a security authentication procedure for admission to the network. The new node may then begin to walk through the mesh network using the acquaintance list of the node that made contact. Alternatively, the new node may simply be provided the IP address of a local node in the mesh network or the IP address of the 3P server by network administration. If the 3P server IP address is provided, the new node may retrieve the IP address of a local node from the 3P server. The new node may then go through the initial mesh certificate exchange authentication procedure with the local node. In many embodiments, the OOB management logic may be disabled in new nodes by default. Thus, the local node that is the first node in the mesh network to come in contact with the newly arrived node may create an initial trusted connection that may be required for initial set up of the OOB management logic in the newly arrived node. The initial setup may require a security handshake utilizing one or more public and private keys to verify the authenticity of the newly arrived node (as well as the authenticity of the local node in the mesh network). Once the trusted connection has been established with the local node in the mesh network, the OOB management logic may then be enabled and the newly arrived node may then begin to walk through the mesh network to gather information about other nodes.</p>
<p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of an embodiment of a process to update a local node's mesh network information.</p>
<p id="p-0043" num="0042">The process is performed by processing logic which may include hardware (e.g., circuitry in a general purpose computer), software (e.g., OS or software application code), firmware (e.g., microcode or basic input/output system (BIOS) code), or a combination of any two or more of these forms of processing logic. In many embodiments, processing logic for <figref idref="DRAWINGS">FIG. 4</figref> is located within a local node of a mesh network. The process also assumes that another node in the mesh network has stored its list of acquaintances into the local node's remote block. The process begins by processing logic setting a &#x2018;current node&#x2019; variable to point to the first node in a list of acquaintances stored within the local node's remote block (processing block <b>400</b>).</p>
<p id="p-0044" num="0043">Next, processing logic determines if the current node in the remote block acquaintance list is also present in the local block acquaintance list (processing block <b>402</b>). If the current node is not present (i.e. the local node is not aware of the current node), then processing logic attempts to verify the current node (processing block <b>404</b>). The verification procedure can be one of many types of procedures to verify/authenticate a node in different embodiments. One example of a verification procedure is described below in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0045" num="0044">Assuming the verification procedure is successfully completed between the local node and the current node, processing logic may then save the current node's information to its own local block acquaintance list and to its disk storage block (processing block <b>406</b>). This information may include the IP address of the current node, a timestamp as to when the verification was completed, among other information items. Then processing logic can save the current node's resource list to its own disk storage block (processing block <b>408</b>). For example, the resource list may include the meta-data for all files and partial files that the current node is providing to the mesh network. Then processing logic determines if the remote block acquaintance list it is processing is at the end of the list or if there are additional nodes in the list (processing block <b>412</b>). If the list is at the end, then processing the list is finished. Otherwise, if the list is not at the end then processing logic increments the current node to the next node in the list (processing block <b>414</b>) and returns to block <b>402</b> to continue the process.</p>
<p id="p-0046" num="0045">Returning to block <b>402</b>, if the current node is in the local node's local block acquaintance list (i.e. the local node is already aware of the current node), then processing logic determines whether the current node's resource information stored in the local node's disk storage block, is up to date (processing block <b>410</b>). For example, the resource information may be a list that contains a timestamp signifying the exact time the resource information list was last updated by the current node. Thus, if the current node updates any resource in the resource information list it is providing to other nodes in its local block storage location, the timestamp for the entire list is also updated. The resource information list is stored in other nodes (in their disk storage blocks) along with the timestamp. When, for example, the local node wants to check to see if any of the current node's resource information has changed in the list the local node stores in its disk storage block, the local node can compare its stored timestamp against the timestamp currently provided by the current node in the current node's local block. When these two timestamps are the same, the local node knows it has the current resource information list. When the timestamps differ, the local node knows it has an out of date resource information list.</p>
<p id="p-0047" num="0046">If the resource information list is not up to date, then processing logic saves the current node resource list to its own disk storage block (processing block <b>408</b>). Then processing logic determines if the remote block acquaintance list it is processing is at the end of the list or if there are additional nodes in the list (processing block <b>412</b>). If the list is at the end, then processing the list is finished. Otherwise, if the list is not at the end then processing logic increments the current node to the next node in the list (processing block <b>414</b>) and returns to block <b>402</b> to continue the process.</p>
<p id="p-0048" num="0047">Returning to block <b>410</b>, if the resource information list is up to date, then processing logic determines if the remote block acquaintance list it is processing is at the end of the list or if there are additional nodes in the list (processing block <b>412</b>). If the list is at the end, then processing the list is finished. Otherwise, if the list is not at the end then processing logic increments the current node to the next node in the list (processing block <b>414</b>) and returns to block <b>402</b> to continue the process.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of an embodiment of a process of a local node to verify another node in a mesh network and then exchange relevant mesh network information with the other node.</p>
<p id="p-0050" num="0049">The process is performed by processing logic which may include hardware (e.g., circuitry in a general purpose computer), software (e.g., OS or software application code), firmware (e.g., microcode or basic input/output system (BIOS) code), or a combination of any two or more of these forms of processing logic. In many embodiments, processing logic for <figref idref="DRAWINGS">FIG. 5</figref> is located within a local node of a mesh network.</p>
<p id="p-0051" num="0050">The process begins by processing logic in the local node (e.g., a first node) contacting another node (e.g., a second node) in the mesh network (processing block <b>500</b>). The process of &#x201c;contacting&#x201d; requires the first node to have the IP address (or potentially another type of address that provides location information) of the second node. Once contact is made, processing logic in the first node may perform a mesh certificate verification procedure with the second node (processing block <b>502</b>). The mesh certificate verification procedure may include the first node providing its mesh certificate to the second node and the second node providing its mesh certificate to the first node. Once the verification procedure has completed, assuming the verification procedure has been successful, processing logic in the first node may then retrieve the second node's acquaintance list from the second node's local block storage location (processing block <b>504</b>).</p>
<p id="p-0052" num="0051">Finally, processing logic stores the first node's own acquaintance list in the second node's remote block (processing block <b>506</b>). This allows the first node's known acquaintance information to be propagated to the second node. After this entire procedure, both the first node and second node have the combined acquaintance information of what each node had separately prior to the procedure.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 6</figref> is a flow diagram of an embodiment of a process of a local node to contact a third party server and potentially be upgraded to a leader node by the third party server.</p>
<p id="p-0054" num="0053">The process is performed by processing logic which may include hardware (e.g., circuitry in a general purpose computer), software (e.g., OS or software application code), firmware (e.g., microcode or basic input/output system (BIOS) code), or a combination of any two or more of these forms of processing logic. In many embodiments, processing logic for <figref idref="DRAWINGS">FIG. 6</figref> is located within a local node of a mesh network.</p>
<p id="p-0055" num="0054">The process begins by processing logic within the local node contacting the third party server (processing block <b>600</b>). The IP address of the third party server may be provided to the local node by another node within the mesh network or potentially by mesh network administration. Next, processing logic inquires with the third party server if the leader position in the mesh network is available (processing block <b>602</b>). The leader position may be available when the third party server sets a globally visible flag that states the position is available. If the leader position is available and the local node has the capability to upgrade itself to the leader, then the local node establishes a dedicated two-way communication tunnel with the third party server (processing block <b>604</b>). The dedicated tunnel allows the local node to receive detailed information and commands from the third party server. Without the tunnel it may be impossible for a local node to receive commands from the third party server due to a firewall or other security procedures implemented for the mesh network. In many embodiments, a secure verification procedure may take place between the local node and the third party server to authenticate each other prior to establishing the tunnel. If the leader position is not available, then the process is finished (i.e., another node in the mesh network has already been established as the leader and the other node is currently operational).</p>
<p id="p-0056" num="0055">Thus, embodiments of a device, method, and system to implement a distributed mesh network are described. These embodiments have been described with reference to specific exemplary embodiments thereof. It will be evident to persons having the benefit of this disclosure that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the embodiments described herein. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>I claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer system, comprising:
<claim-text>a local node in a mesh network, the local node to:
<claim-text>store a first list of remote nodes in the mesh network verified by the local node;</claim-text>
<claim-text>store a second list of remote nodes in the mesh network not verified by the local node; and</claim-text>
<claim-text>iterate over the second list of remote nodes, wherein for each iteration the local node to:
<claim-text>define a current node from the second list of remote nodes;</claim-text>
<claim-text>determine if the current node is present in the first list of remote nodes;</claim-text>
<claim-text>verify the current node in response to determining the current node is not present in the first list of remote nodes;</claim-text>
<claim-text>store the current node in the first list of remote nodes in response to successfully verifying the current node;</claim-text>
<claim-text>determine if the current node is a last node in the second list of remote nodes; and</claim-text>
<claim-text>define, in response to the current node not being the last node in the second list of remote nodes, a next node from the second list of remote nodes as the current node.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local node further to allow remote nodes in the mesh network to access (i) the first list of remote nodes and (ii) the second list of remote nodes, while a main processor of the computer system is not fully operational.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to store the current node in the first list of remote nodes comprises to:
<claim-text>store an internet protocol (IP) address of the current node;</claim-text>
<claim-text>store a verification timestamp of a most recent direct contact with the current node, the verification timestamp corresponding to a time of verification; and</claim-text>
<claim-text>update a version number and timestamp corresponding to the first list of remote nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local node further to:
<claim-text>store a resource information list comprising resource information corresponding to remote nodes in the mesh network; and</claim-text>
<claim-text>wherein for each iteration the local node further to:
<claim-text>store, in the resource information list, resource information for the current node in response to successfully verifying the current node.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the local node further to:
<claim-text>store a local timestamp corresponding to a date the resource information list was last updated by the local node; and</claim-text>
<claim-text>wherein for each iteration the local node further to:
<claim-text>determine, in response to determining the current node is present in the first list of remote nodes, whether the resource information for the current node stored in the resource information list is up-to-date by comparing the local timestamp to a resource timestamp stored in the resource information of the current node, wherein the resource timestamp corresponds to a date the resource information was created by the current node; and</claim-text>
<claim-text>store, in the resource information list, the resource information for the current node in response to determining the resource information for the current node stored in the resource information list is not up-to-date.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to verify the current node comprises to:
<claim-text>contact the current node;</claim-text>
<claim-text>provide to the current node a first mesh certificate to allow the current node to securely verify the authenticity of the local node;</claim-text>
<claim-text>receive from the current node a second mesh certificate to allow the local node to securely verify the authenticity of the current node;</claim-text>
<claim-text>receive from the current node a third list of remote nodes verified by the current node and storing the third list of remote nodes in the second list of remote nodes; and</claim-text>
<claim-text>store the first list of remote nodes on the current node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local node further to:
<claim-text>inquire with a remote server external to the mesh network whether a leader position in the mesh network is available;</claim-text>
<claim-text>establish a two-way communication tunnel with the remote server in response to the leader position being available;</claim-text>
<claim-text>wake a target node in the mesh network in response to receiving a wakeup request from the remote server over the two-way communication tunnel, the wakeup request received by the local node in response to the remote server receiving a request communication from a requestor node; and</claim-text>
<claim-text>send a resource request to the target node in response to waking the target node, wherein the resource request comprises a request to the target node to provide a resource to the requestor node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method for updating mesh network information of a local node, the method comprising:
<claim-text>storing, on the local node, a first list of remote nodes in a mesh network verified by the local node;</claim-text>
<claim-text>storing, on the local node, a second list of remote nodes in the mesh network not verified by the local node; and</claim-text>
<claim-text>iterating, by the local node, over the second list of remote nodes, wherein each iteration comprises:
<claim-text>defining a current node from the second list of remote nodes;</claim-text>
<claim-text>determining if the current node is present in the first list of remote nodes;</claim-text>
<claim-text>verifying the current node in response to determining the current node is not present in the first list of remote nodes;</claim-text>
<claim-text>storing the current node in the first list of remote nodes in response to successfully verifying the current node;</claim-text>
<claim-text>determining if the current node is a last node in the second list of remote nodes; and</claim-text>
<claim-text>defining, in response to the current node not being the last node in the second list of remote nodes, a next node from the second list of remote nodes as the current node.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising allowing remote nodes in the mesh network to access (i) the first list of remote nodes and (ii) the second list of remote nodes, while a main processor of the local node is not fully operational.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the current node in the first list of remote nodes comprises:
<claim-text>storing an internet protocol (IP) address of the current node;</claim-text>
<claim-text>storing a verification timestamp of a most recent direct contact with the current node, the verification timestamp corresponding to a time of verification; and</claim-text>
<claim-text>updating a version number and timestamp corresponding to the first list of remote nodes.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>storing, on the local node, a resource information list comprising resource information corresponding to remote nodes in the mesh network; and</claim-text>
<claim-text>wherein each iteration further comprises:
<claim-text>storing, in the resource information list, resource information for the current node in response to successfully verifying the current node.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:
<claim-text>storing, on the local node, a local timestamp corresponding to a date the resource information list was last updated by the local node; and</claim-text>
<claim-text>wherein each iteration further comprises:
<claim-text>determining, on the local node, in response to determining the current node is present in the first list of remote nodes, whether the resource information for the current node stored in the resource information list is up-to-date by comparing the local timestamp to a resource timestamp stored in the resource information of the current node, wherein the resource timestamp corresponds to a date the resource information was created by the current node; and</claim-text>
<claim-text>storing, in the resource information list, replacement resource information for the current node in response to determining the resource information for the current node stored in the resource information list is not up-to-date.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein verifying the current node comprises:
<claim-text>contacting the current node;</claim-text>
<claim-text>providing to the current node a first mesh certificate to allow the current node to securely verify the authenticity of the local node;</claim-text>
<claim-text>receiving from the current node a second mesh certificate to allow the local node to securely verify the authenticity of the current node;</claim-text>
<claim-text>receiving from the current node a third list of remote nodes verified by the current node and storing the third list of remote nodes in the second list of remote nodes; and</claim-text>
<claim-text>storing the first list of remote nodes on the current node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:
<claim-text>inquiring, by the local node, with a remote server external to the mesh network whether a leader position in the mesh network is available;</claim-text>
<claim-text>establishing, by the local node, a two-way communication tunnel with the remote server in response to the leader position being available;</claim-text>
<claim-text>waking, by the local node, a target node in the mesh network in response to receiving a wakeup request from the remote server over the two-way communication tunnel, the wakeup request received by the local node in response to the remote server receiving a request communication from a requestor node; and</claim-text>
<claim-text>sending, by the local node, a resource request to the target node in response to waking the target node, the resource request comprising a request to the target node to provide a resource to the requestor node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. One or more machine readable storage devices comprising a plurality of instructions that in response to being executed result in a computing device:
<claim-text>storing a first list of remote nodes in a mesh network verified by the computing device;</claim-text>
<claim-text>storing a second list of remote nodes in the mesh network not verified by the computing device; and</claim-text>
</claim-text>
<claim-text>iterating over the second list of remote nodes, wherein each iteration comprises:
<claim-text>defining a current node from the second list of remote nodes;</claim-text>
<claim-text>determining if the current node is present in the first list of remote nodes;</claim-text>
<claim-text>verifying the current node in response to determining the current node is not present in the first list of remote nodes;</claim-text>
<claim-text>storing the current node in the first list of remote nodes in response to successfully verifying the current node;</claim-text>
<claim-text>determining if the current node is a last node in the second list of remote nodes; and</claim-text>
<claim-text>defining, in response to the current node not being the last node in the second list of remote nodes, a next node from the second list of remote nodes as the current node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The one or more machine readable storage devices of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising a plurality of instructions that in response to being executed result in the computing device allowing remote nodes in the mesh network to access (i) the first list of remote nodes and (ii) the second list of remote nodes, while a main processor of the computing device is not fully operational.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The one or more machine readable storage devices of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising a plurality of instructions that in response to being executed result in the computing device:
<claim-text>storing a resource information list comprising resource information corresponding to remote nodes in the mesh network; and</claim-text>
<claim-text>wherein each iteration further comprises:
<claim-text>storing, in the resource information list, resource information for the current node in response to successfully verifying the current node.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The one or more machine readable storage devices of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising a plurality of instructions that in response to being executed result in the computing device:
<claim-text>storing a local timestamp corresponding to a date the resource information list was last updated by the computing device; and</claim-text>
<claim-text>wherein each iteration further comprises:
<claim-text>determining, in response to determining the current node is present in the first list of remote nodes, whether the resource information for the current node stored in the resource information list is up-to date by comparing the local timestamp to a resource timestamp stored in the resource information of the current node, wherein the resource timestamp corresponds to a date the resource information was created by the current node; and</claim-text>
<claim-text>storing, in the resource information list, replacement resource information for the current node in response to determining the resource information for the current node stored in the resource information list is not up-to-date.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The one or more machine readable storage devices of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein verifying the current node comprises:
<claim-text>contacting the current node;</claim-text>
<claim-text>providing to the current node a first mesh certificate to allow the current node to securely verify the authenticity of the computing device;</claim-text>
<claim-text>receiving from the current node a second mesh certificate to allow the computing device to securely verify the authenticity of the current node;</claim-text>
<claim-text>receiving from the current node a third list of remote nodes verified by the current node and storing the third list of remote nodes in the second list of remote nodes; and</claim-text>
<claim-text>storing the first list of remote nodes on the current node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The one or more machine readable storage devices of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising a plurality of instructions that in response to being executed result in the computing device:
<claim-text>inquiring with a remote server external to the mesh network whether a leader position in the mesh network is available;</claim-text>
<claim-text>establishing a two-way communication tunnel with the remote server in response to the leader position being available;</claim-text>
<claim-text>waking a target node in the mesh network in response to receiving a wakeup request from the remote server over the two-way communication tunnel, the wakeup request received by the computing device in response to the remote server receiving a request communication from a requestor node; and</claim-text>
<claim-text>sending a resource request to the target node in response to waking the target node, the resource request comprises a request to the target node to provide a resource to the requestor node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. A computer system, comprising a local node in a mesh network, the local node comprising:
<claim-text>a local flash block;</claim-text>
<claim-text>a remote flash block; and</claim-text>
<claim-text>an operating system (OS) mesh agent to:
<claim-text>store a first list in the local flash block of remote nodes in the mesh network verified by the mesh agent;</claim-text>
<claim-text>store a second list in the remote flash block of remote nodes in the mesh network not verified by the mesh agent; and</claim-text>
<claim-text>iterate over the second list of remote nodes, wherein for each iteration the OS mesh agent to:
<claim-text>define a current node from the second list of remote nodes;</claim-text>
<claim-text>determine if the current node is present in the first list of remote nodes;</claim-text>
<claim-text>verify the current node in response to determining the current node is not present in the first list of remote nodes;</claim-text>
<claim-text>store the current node in the first list of remote nodes in response to successfully verifying the current node;</claim-text>
<claim-text>determine if the current node is a last node in the second list of remote nodes; and</claim-text>
<claim-text>define, in response to the current node not being the last node in the second list of remote nodes, a next node from the second list of remote nodes as the current node.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the local node further comprises out-of-band management logic to allow remote nodes in the mesh network to access (i) the first list of remote nodes and (ii) the second list of remote nodes, while a main processor of the computer system is not fully operational.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein to verify the current node comprises to:
<claim-text>contact the current node;</claim-text>
<claim-text>provide to the current node a first mesh certificate to allow the current node to securely verify the authenticity of the local node;</claim-text>
<claim-text>receive from the current node a second mesh certificate to allow the local node to securely verify the authenticity of the current node;</claim-text>
<claim-text>receive from the current node a third list of remote nodes verified by the current node and storing the third list of remote nodes in the second list of remote nodes; and</claim-text>
<claim-text>store the first list of remote nodes on the current node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the OS mesh agent further to:
<claim-text>inquire with a remote server external to the mesh network whether a leader position in the mesh network is available;</claim-text>
<claim-text>establish a two-way communication tunnel with the remote server in response to the leader position being available;</claim-text>
<claim-text>wake a target node in the mesh network in response to receiving a wakeup request from the remote server over the two-way communication tunnel, the wakeup request received by the OS mesh agent in response to the remote server receiving a request communication from a requestor node; and</claim-text>
<claim-text>send a resource request to the target node in response to waking the target node, wherein the resource request comprises a request to the target node to provide a resource to the requestor node.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further comprising out-of-band management logic to, while a main processor of the computer system is not fully operational:
<claim-text>inquire with a remote server external to the mesh network whether a leader position in the mesh network is available;</claim-text>
<claim-text>establish a two-way communication tunnel with the remote server in response to the leader position being available;</claim-text>
<claim-text>wake a target node in the mesh network in response to receiving a wakeup request from the remote server over the two-way communication tunnel, the wakeup request received by the out-of-band management logic in response to the remote server receiving a request communication from a requestor node; and</claim-text>
<claim-text>send a resource request to the target node in response to waking the target node, wherein the resource request comprises a request to the target node to provide a resource to the requestor node. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

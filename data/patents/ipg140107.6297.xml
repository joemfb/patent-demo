<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627451-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627451</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12545500</doc-number>
<date>20090821</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>740</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 16</main-classification>
<further-classification>726 17</further-classification>
<further-classification>726 18</further-classification>
<further-classification>726 19</further-classification>
<further-classification>713164</further-classification>
<further-classification>713189</further-classification>
<further-classification>718100</further-classification>
<further-classification>718101</further-classification>
<further-classification>718102</further-classification>
<further-classification>718103</further-classification>
<further-classification>718104</further-classification>
<further-classification>718105</further-classification>
<further-classification>718106</further-classification>
<further-classification>718107</further-classification>
<further-classification>718108</further-classification>
</classification-national>
<invention-title id="d2e53">Systems and methods for providing an isolated execution environment for accessing untrusted content</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6446109</doc-number>
<kind>B2</kind>
<name>Gupta</name>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7246374</doc-number>
<kind>B1</kind>
<name>Simon et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7340723</doc-number>
<kind>B2</kind>
<name>Antonov et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7380136</doc-number>
<kind>B2</kind>
<name>Zimmer et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713193</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7383327</doc-number>
<kind>B1</kind>
<name>Tormasov et al.</name>
<date>20080600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7447896</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7461144</doc-number>
<kind>B1</kind>
<name>Beloussov et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>7496576</doc-number>
<kind>B2</kind>
<name>Bernabeu-Auban et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>7526774</doc-number>
<kind>B1</kind>
<name>Beck et al.</name>
<date>20090400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719320</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>7562220</doc-number>
<kind>B2</kind>
<name>Frank et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>7698400</doc-number>
<kind>B1</kind>
<name>Beloussov et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>7886353</doc-number>
<kind>B2</kind>
<name>Avraham et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 14</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7908653</doc-number>
<kind>B2</kind>
<name>Brickell et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>8312459</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20121100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2002/0161869</doc-number>
<kind>A1</kind>
<name>Griffin et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2002/0184520</doc-number>
<kind>A1</kind>
<name>Bush et al.</name>
<date>20021200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>2003/0172109</doc-number>
<kind>A1</kind>
<name>Dalton et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709203</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>2006/0048099</doc-number>
<kind>A1</kind>
<name>Templin et al.</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>2007/0006321</doc-number>
<kind>A1</kind>
<name>Bantz et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 27</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>2007/0050766</doc-number>
<kind>A1</kind>
<name>Pomerantz</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>2007/0226773</doc-number>
<kind>A1</kind>
<name>Pouliot</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>2008/0016339</doc-number>
<kind>A1</kind>
<name>Shukla</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713164</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>2008/0235806</doc-number>
<kind>A1</kind>
<name>Bantz et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 27</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>2009/0216768</doc-number>
<kind>A1</kind>
<name>Zwilling et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>2009/0259993</doc-number>
<kind>A1</kind>
<name>Konduri et al.</name>
<date>20091000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>2009/0276771</doc-number>
<kind>A1</kind>
<name>Nickolov et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717177</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2010/0058016</doc-number>
<kind>A1</kind>
<name>Nikara et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2010/0082926</doc-number>
<kind>A1</kind>
<name>Sahita et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2010/0192224</doc-number>
<kind>A1</kind>
<name>Ferri et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2010/0274910</doc-number>
<kind>A1</kind>
<name>Ghanaie-Sichanie et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2011/0067105</doc-number>
<kind>A1</kind>
<name>Wolfe et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2011/0138473</doc-number>
<kind>A1</kind>
<name>Yee et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2011/0138474</doc-number>
<kind>A1</kind>
<name>Yee et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2011/0154431</doc-number>
<kind>A1</kind>
<name>Walsh</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2011/0296487</doc-number>
<kind>A1</kind>
<name>Walsh</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2011/0296529</doc-number>
<kind>A1</kind>
<name>Bhanoo et al.</name>
<date>20111200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2012/0159127</doc-number>
<kind>A1</kind>
<name>Spradlin</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2012/0179587</doc-number>
<kind>A1</kind>
<name>Hill et al.</name>
<date>20120700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2012/0216285</doc-number>
<kind>A1</kind>
<name>Walsh</name>
<date>20120800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00040">
<othercit>Yu et al&#x2014;&#x201c;A Feather-Weight Virtual Machine for Windows Applications&#x201d;, Jul. 2007.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00041">
<othercit>Walsh et al., &#x201c;Systems and Methods for Providing Multiple Isolated Execution Environments for Securely Accessing Untrusted Content&#x201d;, U.S. Appl. No. 12/640,657, filed Dec. 17, 2009.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00042">
<othercit>USPTO, Office Action for U.S. Appl. No. 12/640,657 mailed Jun. 27, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00043">
<othercit>USPTO, Final Office Action for U.S. Appl. No. 12/640,657 mailed Dec. 3, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00044">
<othercit>USPTO, Advisory Action for U.S. Appl. No. 12/640,657 mailed Feb. 11, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00045">
<othercit>USPTO, Office Action for U.S. Appl. No. 12/789,554 mailed on Aug. 16, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00046">
<othercit>USPTO, Final Office Action for U.S. Appl. No. 12/789,554 mailed Mar. 11, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00047">
<othercit>USPTO, Office Action for U.S. Appl. No. 13/029,702 mailed Nov. 6, 2012.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00048">
<othercit>USPTO, Office Action for U.S. Appl. No. 13/029,702 mailed Mar. 14, 2013.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00049">
<othercit>Daniel J. Walsh, Systems and Methods for Providing an Fully Functional Isolated Execution Environment for Accessing Content, U.S. Appl. No. 12/789,554, filed May 28, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00050">
<othercit>Daniel J. Walsh, Systems and Methods for Inhibiting Denial-Of-Service Attacks Using Group Controls, U.S. Appl. No. 13/029,702, filed Feb. 17, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>25</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726 16</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 17- 20</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713164</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713189</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>718100</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>718108</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110047613</doc-number>
<kind>A1</kind>
<date>20110224</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Walsh</last-name>
<first-name>Daniel J.</first-name>
<address>
<city>Marlborough</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Paris</last-name>
<first-name>Eric Lynn</first-name>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Walsh</last-name>
<first-name>Daniel J.</first-name>
<address>
<city>Marlborough</city>
<state>MA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Paris</last-name>
<first-name>Eric Lynn</first-name>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Lowenstein Sandler LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Red Hat, Inc.</orgname>
<role>02</role>
<address>
<city>Raleigh</city>
<state>NC</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Rao</last-name>
<first-name>Andy</first-name>
<department>2486</department>
</primary-examiner>
<assistant-examiner>
<last-name>Elahi</last-name>
<first-name>Shan</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A sandbox tool can cooperate with components of a secure operating system to create an isolated execution environment for accessing untrusted content without exposing other processes and resources of the computing system to the untrusted content. The sandbox tool can allocate resources (storage space, memory, etc) of the computing system, which are necessary to access the untrusted content, to the isolated execution environment, and apply security polices of the operating system to the isolated execution environment such that untrusted content running in the isolated execution environment can only access the resources allocated to the isolated execution environment.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="217.76mm" wi="143.93mm" file="US08627451-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="172.13mm" wi="141.48mm" file="US08627451-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="153.84mm" wi="154.18mm" file="US08627451-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="125.90mm" wi="150.96mm" file="US08627451-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="227.25mm" wi="149.18mm" file="US08627451-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="196.85mm" wi="172.55mm" file="US08627451-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="191.94mm" wi="157.40mm" file="US08627451-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="209.55mm" wi="143.51mm" orientation="landscape" file="US08627451-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">This invention relates generally to computer security.</p>
<heading id="h-0002" level="1">DESCRIPTION OF THE RELATED ART</heading>
<p id="p-0003" num="0002">In today's distributed computing environments, security is of the utmost importance. Due to the rise of wide-area public networks, users have unlimited access to content, e.g. data, files, applications, programs, etc., from a variety of sources. Often, the users are unaware of the origin of the content available in the public networks. Malicious entities utilize this ease of accessibility and anonymity to attack the users. For example, the malicious entities can plant viruses, Trojans, or other malicious agents in publicly available content in order to attack the users' computing systems and steal sensitive information from the users. As such, the users must treat content from unknown sources as untrusted and possibly dangerous.</p>
<p id="p-0004" num="0003">Typically, to prevent attacks, the users utilize filtering programs, anti-virus programs, etc. in order to identify and block known dangerous content. These programs, however, suffer from several weaknesses. In order to properly identify and block the dangerous content, the filtering and anti-virus programs must typically be configured with the identity of the source of known dangerous content. As such, the filtering and anti-virus programs lack the ability to stop previously unknown and emerging threats. Likewise, the filtering and anti-virus programs are themselves subject to attack. Many types of dangerous content utilize weaknesses in the filtering and anti-virus programs to attack the users' computing systems using the filtering and anti-virus programs as a vehicle for attaching the users' computing systems. As such, the users lack methods to guarantee that untrusted content does not pose a threat.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0005" num="0004">Various features of the embodiments can be more fully appreciated, as the same become better understood with reference to the following detailed description of the embodiments when considered in connection with the accompanying figures, in which:</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network of computing systems in which various embodiments of the present teachings can be practiced;</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary software environment for utilizing an isolated execution environment, according to various embodiments of the present teachings;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 3</figref> illustrates components of an exemplary secure operating system including a sandbox tool, according to various embodiments;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an exemplary process for accessing untrusted content in the isolated execution environment, according to various embodiments;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIGS. 5A and 5B</figref> illustrate exemplary interfaces for accessing untrusted content in the isolated execution environment, according to various embodiments; and</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary computing system which can implement the secure operating system and the sandbox tool, according to various embodiments.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading>
<p id="p-0012" num="0011">For simplicity and illustrative purposes, the principles of the present teachings are described by referring mainly to exemplary embodiments thereof. However, one of ordinary skill in the art would readily recognize that the same principles are equally applicable to, and can be implemented in, all types of information and systems, and that any such variations do not depart from the true spirit and scope of the present teachings. Moreover, in the following detailed description, references are made to the accompanying figures, which illustrate specific embodiments. Electrical, mechanical, logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present teachings. The following detailed description is, therefore, not to be taken in a limiting sense and the scope of the present teachings is defined by the appended claims and their equivalents.</p>
<p id="p-0013" num="0012">Embodiments of the present teachings relate to systems and methods for accessing, viewing, and running untrusted content, such as data, files, programs, and applications, without exposing a computing system to untrusted content and possibly malicious content. More particularly, a &#x201c;sandbox tool&#x201d; can create an isolated execution environment that is isolated from other processes executing on the computing system for accessing untrusted content.</p>
<p id="p-0014" num="0013">According to embodiments, the sandbox tool can be configured to cooperate with components of a secure operating system, such as security enhanced LINUX (SELinux), to create an isolated execution environment for accessing untrusted content without exposing other processes and resources of the computing system to the untrusted content. In particular, the sandbox tool can be configured to allocate resources (storage space, memory, etc) of the computing system, which are necessary to access the untrusted content, to the isolated execution environment, and apply security polices of the operating system to the isolated execution environment such that untrusted content running in the isolated execution environment can only access the resources allocated to the isolated execution environment. As such, the user can access the untrusted content without exposing the overall computing system to any possible malicious or dangerous content.</p>
<p id="p-0015" num="0014">According to embodiments, to create the isolated execution environment, the sandbox tool can be configured to cooperate with the operating system to create a temporary name space for the isolated execution environment (e.g. including home directory and temporary directory). The sandbox tool can be configured to copy the untrusted content to the temporary name space and can be configured to create an execution file in the temporary name space for accessing the untrusted content such as initiating and executing applications to view data and files. Then, the sandbox tool can be configured to cooperate with the operating system to unshare any other name spaces (e.g. user name space) with the temporary name space and to mount the temporary name space over any existing name spaces so that the processes of isolated execution environment cannot access files and processes of any other name space except the temporary name space.</p>
<p id="p-0016" num="0015">According to embodiments, once the temporary name space is created, the sandbox tool can be configured to associate a security context of the operating system with the isolated execution environment and apply a security label to the execution file and any other processes of the isolated execution environment. The security label can identify the security policies applied by the operating system to the isolated execution environment, thereby, defining the levels of access the untrusted content and any other processes have to the resources of the computing system.</p>
<p id="p-0017" num="0016">According to embodiments, the sandbox tool can be configured to cooperate with the operating system to start a new virtual process server, such as an X Server providing an X Windows interface, for the isolated execution environment. The new virtual process server can be configured to provide a user interface to the untrusted content and other processes running in the isolated execution environment. The new virtual process server can operate within an existing virtual process server for a user execution environment but distinct from any other process servers supported by the operating system. The sandbox tool can be configured to associate the security label of the isolated execution environment with the new virtual process server so that any processes, such as the untrusted content, can only access processes and resources allowed by the security context of the isolated execution environment.</p>
<p id="p-0018" num="0017">According to embodiments, once the isolated execution environment is created, the sandbox tool can initiate execution of the untrusted content in the isolated execution environment. During execution, the operating system can apply the security policies associated with the security context of the isolated execution environment. For example, the operating system can allow the new virtual process server to only access the processes and resources with the security label assigned to the isolated execution environment. Once access to or execution of the untrusted content, the sandbox tool can be configured to remove all traces of the isolated execution environment such as terminating the new process server and removing the temporary name space.</p>
<p id="p-0019" num="0018">According to embodiments, when assigning the security context to the execution environment, the sandbox tool can be configured to assign different access levels to the isolated execution environment. For example, the isolated execution environment can be limited to accesses only the temporary name space created for the isolated execution environment. Likewise, the isolated execution environment can be given greater accesses such as limited network access.</p>
<p id="p-0020" num="0019">By utilizing the sandbox tool, untrusted content can be accessed on a computing system without exposing the computing system to any malicious agents that may be contained in the untrusted content. As such, the untrusted content can be accessed without regard to the source of the content. Likewise, untrusted content can be accessed without the use of other security programs and applications which may be susceptible to malicious agents contained in the untrusted content.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 1</figref> illustrates an exemplary network <b>100</b> of computing systems, according to various embodiments. It should be readily apparent to those of ordinary skill in the art that the network <b>100</b> depicted in <figref idref="DRAWINGS">FIG. 1</figref> represents a generalized schematic illustration and that other components may be added or existing components may be removed or modified. Moreover, the network <b>100</b> may be implemented using software components, hardware components, or combinations thereof.</p>
<p id="p-0022" num="0021">As illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, the network <b>100</b> can represent the systems of private entities, such as individuals, businesses, partnerships, companies, corporations, etc., and public entities, such as universities, governmental agencies, etc. The network <b>100</b> can include a number of computing systems, such as a user computing system <b>102</b> and remote computing systems <b>104</b>. The computing systems, such as the user computing system <b>102</b> and remote computing systems <b>104</b>, can include hardware resources, such as processors, memory, network hardware, storage devices, and the like, and software resources, such as operating systems (OS), application programs, and the like.</p>
<p id="p-0023" num="0022">In embodiments, the user computer system <b>102</b> can include a secure OS <b>106</b>, such as security enhanced Linux (&#x201c;SELinux&#x201d;), available from RED HAT, Inc. In this example, SELinux implements a monolithic kernel which is configured to provide an X-Window computing environment to the user computing system <b>102</b>. SELinux is a version of Linux that integrates FLASK architectural components to provide general support for the enforcement of many kinds of mandatory security policies, including those based on the concepts of type enforcement, role-based access control (&#x201c;RBAC&#x201d;), and multi-level security.</p>
<p id="p-0024" num="0023">In embodiments, the computing systems in environment <b>100</b> can be located at any location, whether located at single geographic location or remotely located from each other. In order to communicate and share data, the user computing system <b>102</b> and the remote computing systems <b>104</b> can be coupled to one or more networks <b>108</b>. The one or more networks <b>108</b> can be any type of communications networks, whether wired or wireless, to allow the computing system to communicate, such as wide-area networks (e.g. Internet) or local-area networks.</p>
<p id="p-0025" num="0024">In embodiments, a user of the user computing system <b>102</b> can utilize the computing environment of the secure OS <b>106</b> to access content on the user computing system <b>102</b>. The content can include any number and type of data, applications, and programs such as word processing applications, web browser applications, file sharing applications, electronic mail (e-mail) applications, multimedia applications, chat applications, etc. Likewise, the content can include files and data utilized by the applications or accessed utilizing the applications. The content accessed on the user computing system <b>102</b> can be acquired from a variety of sources. For example, the content can be installed and copied to the user computing system <b>102</b> from media such as compact discs (CDs) and digital versatile discs (DVDs). Likewise, the content can be downloaded from one or more of the remote computing systems <b>104</b> via the network <b>108</b>.</p>
<p id="p-0026" num="0025">In embodiments, the content accessed on the user computing system <b>102</b> may not be secure. For example, the user computing system <b>102</b> can acquire the content from one or more of the remote computing systems <b>104</b>. In this example, the user computing system <b>102</b> may not know the source of the content and cannot guarantee that the content is secure. Likewise, content installed and copied from media can be untrusted and possibly insecure. As such, the content can be deemed to be untrusted and can possibly be insecure.</p>
<p id="p-0027" num="0026">In embodiments, regardless of whether the content is trusted or untrusted, the user of the user computing system <b>102</b> can desire to access the content without exposing the user computing system <b>102</b> to malicious agents (e.g. viruses, Trojans, etc.). In order to allow access of the content without exposing the user computing system <b>102</b> to malicious agents, the user computing system <b>102</b> can include a sandbox tool <b>110</b>. The sandbox tool <b>110</b> can be configured to cooperate with components of the secure OS <b>106</b> to create an isolated execution environment for accessing untrusted content without exposing other processes and resources of the user computing system <b>102</b> to the untrusted content. In particular, the sandbox tool <b>110</b> can be configured to allocate resources (storage space, memory, etc) of the user computing system <b>102</b>, which are necessary to access the untrusted content, to the isolated execution environment, and apply security polices of the secure OS <b>106</b> to the isolated execution environment such that untrusted content running in the isolated execution environment can only access the resources allocated to the isolated execution environment. As such, the user can access the untrusted content without exposing the user computing system <b>102</b> to any possible malicious or dangerous content.</p>
<p id="p-0028" num="0027">In embodiments, the untrusted content can be applications, programs, files, and/or data. The sandbox tool <b>110</b> can be configured to create the isolated execution environment to allow the applications, programs, files, and/or data to be accessed, executed, or viewed without exposing the user computing system <b>102</b> to any possible malicious or dangerous content. For example, the applications, programs, files, and/or data can only access the resources allocated to the isolated execution environment.</p>
<p id="p-0029" num="0028">In embodiments, as illustrated, the sandbox tool <b>110</b> can be implemented as part of the secure OS <b>106</b>. Likewise, the sandbox tool <b>110</b> can be implemented as a standalone application that communicates with the components of the secure OS <b>106</b>. In either case, the sandbox tool <b>110</b> can be written in any type of known open-source or proprietary programming language, such as C, C++, JAVA, etc.</p>
<p id="p-0030" num="0029">In embodiments, the user computing system <b>102</b> can store and execute the secure operating system <b>106</b> and sandbox tool <b>110</b>. Additionally, one or more of the remote computing systems <b>104</b> can store and execute the secure operating system <b>106</b> and the sandbox tool <b>110</b>. As such, the user computing system <b>102</b> can access the operating system <b>102</b> and the sandbox <b>110</b> stored on the one or more remote computing system <b>104</b> via the network <b>108</b> in order to access content using a client-server model.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> illustrates an exemplary software environment <b>200</b> in accordance with various embodiments. It should be readily apparent to those of ordinary skill in the art that software environment <b>200</b> depicted in <figref idref="DRAWINGS">FIG. 2</figref> represents a generalized schematic illustration and that other components may be added or existing components may be removed or modified.</p>
<p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the software environment <b>200</b> can include the secure OS <b>106</b>, such as SELinux or similar secure multi-tasking, multi-user operating system. A run-time environment (not shown) can be configured to execute on the secure OS <b>106</b>. The run-time environment can provide a set of software that supports the access of content (e.g. applications, files, data, etc.). The run-time environment can also comprise an application program interface (&#x201c;API&#x201d;) <b>205</b> and a complementary API (not shown) within an application space <b>210</b>. The API <b>205</b> can be configured to provide a set of routines that the application space <b>210</b> uses to request lower-level services performed by the secure OS <b>106</b>. The secure OS <b>106</b> can include a kernel (not shown) and device drivers <b>215</b>. The kernel can be configured to provide secure access to the underlying hardware of the user computing system <b>102</b> (e.g. processor, memory, storage, input/output devices, network devices, etc.) through the device drivers <b>215</b>.</p>
<p id="p-0033" num="0032">In embodiments, during operation, the secure OS <b>106</b> can be configured to create a user execution environment <b>220</b> in the application space <b>210</b>. The user execution environment <b>220</b> allows users to interact with the the user computing system <b>102</b> to access content such as run application and programs, view files, etc. The secure OS <b>106</b> can be configured to perform the necessary processes to establish the user execution environment <b>220</b> such as creating a virtual processes server (e.g. X-server) to support user interaction with the user execution environment <b>220</b>, providing access to the devices drivers <b>215</b>, allocating resources (e.g. user namespace such as home directory and temporary directory) to support the user execution environment <b>220</b>, and the like. Likewise, the secure OS <b>120</b> can enforce security policies in the user execution environment <b>220</b> to allow/prevent access to underlying resources (network ports, file directories, memory, etc.) of the user computing system <b>102</b>.</p>
<p id="p-0034" num="0033">In embodiments, in order to provide access to untrusted content <b>225</b> without endangering the user computing system <b>102</b>, the sandbox tool <b>110</b> can be configured to cooperate with components of a secure OS <b>106</b>, to create an isolated execution environment <b>230</b> for accessing untrusted content <b>225</b> without exposing other processes such as the user execution environment <b>220</b> and resources of the user computing system <b>102</b> to the untrusted content <b>225</b>. In particular, the sandbox tool <b>110</b> can be configured to allocate resources (storage space, memory, etc) of the user computing system <b>102</b>, which are necessary to access the untrusted content <b>225</b>, to the isolated execution environment <b>230</b>, and apply security polices of the secure OS <b>106</b> to the isolated execution environment <b>230</b> such that untrusted content <b>225</b> running in the isolated execution environment <b>230</b> can only access the resources allocated to the isolated execution environment <b>230</b>.</p>
<p id="p-0035" num="0034">In embodiments, to create the isolated execution environment <b>230</b>, the sandbox tool <b>110</b> can be configured to cooperate with the secure OS <b>106</b> to create a temporary namespace for the isolated execution environment <b>230</b> (e.g. temporary home directory and tmp directory). The sandbox tool <b>110</b> can be configured to copy (or instruct the secure OS <b>106</b> to copy) the untrusted content <b>225</b> to the temporary namespace and can be configured to create an execution file in the temporary namespace for accessing the untrusted content <b>225</b>, for example, initiating and executing applications to view data and files.</p>
<p id="p-0036" num="0035">In embodiments, the sandbox tool <b>110</b> can be configured to cooperate with the secure OS <b>106</b> to isolate the isolated execution environment <b>230</b> from the user execution environment <b>220</b>. For example, the sandbox tool <b>110</b> can instruct the secure OS <b>106</b> to unshare any other namespaces (e.g. the user name space of the user execution environment <b>220</b>) with the temporary namespace and to mount the temporary namespace over any existing namespaces so that the processes of isolated execution environment <b>230</b> cannot access files and processes of any other namespace except the temporary namespace.</p>
<p id="p-0037" num="0036">In embodiments, once the temporary namespace is created, the sandbox tool <b>110</b> can be configured to cooperate with the secure OS <b>106</b> to associate a security context of the secure OS <b>106</b> with the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can assign (or instruct the secure OS <b>106</b> to assign) a security label to the execution file and any other processes of the isolated execution environment <b>230</b>. The security label can identify the security policies applied by the secure OS <b>106</b> to the isolated execution environment, thereby, defining the levels of access the untrusted content <b>225</b> and any other processes have to the resources of the user computing system <b>102</b> via the device drivers <b>215</b>. Likewise, the secure OS <b>106</b> can utilize the security label to allow processes with a particular security label (i.e. processes of a particular isolated execution environment <b>230</b>) to access only processes with the same particular security label (i.e. other processes of the particular isolated execution environment <b>230</b>).</p>
<p id="p-0038" num="0037">In embodiments, the sandbox tool <b>110</b> can be configured to cooperate with the secure OS <b>106</b> to start a new virtual process server, such as an X Server providing an X Windows interface, for the isolated execution environment <b>230</b>. The new virtual process server can be configured to provide a user interface to the untrusted content <b>225</b> and other processes running in the isolated execution environment <b>230</b>. The new virtual process server can run with other virtual process servers supported by the secure OS <b>106</b>, such as the virtual process server supporting the user execution environment <b>220</b>. The sandbox tool <b>110</b> can be configured to associate the security label of the isolated execution environment <b>230</b> with the new virtual process server. Accordingly, the secure OS <b>106</b> can be aware of the new virtual process server and any processes utilizing the new virtual process server, such as the untrusted content <b>225</b>, can only access processes and resources allowed by the security context of the isolated execution environment <b>230</b>.</p>
<p id="p-0039" num="0038">In embodiments, once the isolated execution environment <b>230</b> is created, the sandbox tool <b>110</b> can initiate execution of the untrusted content <b>225</b> in the isolated execution environment <b>230</b>. During execution, the secure OS <b>106</b> can apply the security policies associated with the security label of the isolated execution environment <b>230</b>. For example, the secure OS <b>106</b> can allow the new virtual process server to only access the processes with the same security label, and to only access the resources, for example, limit and control access to the device drivers <b>215</b>, associated with the security label assigned to the isolated execution environment <b>230</b>. Once the untrusted content <b>220</b> is finished executing, the sandbox tool <b>110</b> can be configured to remove (or instruct the secure OS <b>106</b> to remove) all traces of the isolated execution environment <b>230</b> such as terminating the new process server and removing the temporary namespace.</p>
<p id="p-0040" num="0039">In embodiments, the sandbox tool <b>110</b> can be configured to create and/or maintain one or more isolated execution environments <b>230</b>, simultaneously. The multiple isolated execution environments <b>230</b> can have the same security context, for example, the same levels of access to the resources of the user computing system <b>102</b>. In order to keep the multiple isolated execution environments <b>230</b> isolated from each other, the sandbox tool <b>110</b> can be configured to assign (or instruct the secure OS <b>106</b> to assign) different security labels, for example random security labels, to each of the multiple isolated execution environments <b>230</b>. As such, the sandbox tool <b>110</b> can create one or more isolated execution environments <b>230</b> which co-exist and have the same level of access, but remain isolated from each other.</p>
<p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. 3</figref> shows an exemplary block diagram of the secure OS <b>106</b> including the sandbox tool <b>110</b> according to various embodiments. It should be readily apparent to those of ordinary skill in the art that the secure OS <b>106</b> depicted in <figref idref="DRAWINGS">FIG. 3</figref> represents a generalized schematic illustration and that other components may be added or existing components can be removed or modified. Likewise, while <figref idref="DRAWINGS">FIG. 3</figref> illustrates the sandbox tool <b>110</b> as part of the secure OS <b>106</b>, those of ordinary skill in the art will realize that the sandbox tool <b>110</b> can be implemented as a separate and standalone program or application that can communicate and cooperate with the secure OS <b>106</b>, and the sandbox tool <b>110</b> can incorporate one or more of the components of the secure OS <b>106</b>.</p>
<p id="p-0042" num="0041">As shown in <figref idref="DRAWINGS">FIG. 3</figref>, the secure OS <b>106</b> can include a namespace module <b>305</b>, a security module <b>310</b>, a process server module <b>315</b>. These components can be incorporated into the secure OS <b>106</b> and/or the sandbox tool <b>110</b> to implement the functionality of the isolated execution environment <b>230</b> as previously described and described in greater detail below.</p>
<p id="p-0043" num="0042">In embodiments, the namespace module <b>305</b> can be configured generate and maintain the namespaces that support the user execution environment <b>220</b> and the isolated execution environment <b>230</b>. More particularly, the namespace module <b>305</b> can create directories including a home directory (Homedir), file directory(/tmp) and /var/tmp for the user execution environment <b>220</b> and, when necessary, create a temporary home directory and tmp directory for the isolated execution environment <b>230</b>. Likewise, the namespace module <b>305</b> can be configured to remove the namespace of the isolated execution environment <b>230</b> once the user computing system <b>102</b> has completed accessing the untrusted content <b>225</b>.</p>
<p id="p-0044" num="0043">In embodiments, the security module <b>310</b> can be configured to maintain and enforce the security policies of the secure operating system <b>106</b>. The security policies can define the various access levels of the processes running on the user computing system <b>102</b>. For example, the security policies can define the various resources that are accessible at different access levels such as full or limited network access, full or limited memory access, full or limited storage access, and the like. To enforce the security policies, the security module <b>310</b> can be configured to apply a security context to different processes running on the user computing system <b>102</b> by assigning a security label, for example MCS label in SELinux, to different processes. The security label is associated with the secure OS <b>106</b> and can identify what security policies the security module <b>310</b> should apply to the processes ruing on the user computer system <b>102</b>. When the processes, which are assigned a particular security label, request access to resources of the user computing system <b>102</b>, the secure OS <b>106</b> can read the security label and apply the associated security policy to the processes, thereby restricting access of the processes to the security context. For example, the security module <b>310</b> can allow processes with a particular security label to only access the processes with the same security label, and to only access the resources, for example, limit and control access to the device drivers <b>215</b>, defined by the security policies associated with the particular security label.</p>
<p id="p-0045" num="0044">In embodiments, the process server module <b>315</b> can be configured to implement virtual processes servers for the processes rung on the user computing system <b>102</b> such as the user execution environment <b>220</b> and the isolated execution environment <b>230</b>. For example, if secure OS <b>106</b> is SELinux, the process server module <b>310</b> can be configured to implement one or more X Servers which provide X Windows interfaces that allow the user of the user computing system <b>102</b> to interact with the processes running on the user computing system <b>102</b>.</p>
<p id="p-0046" num="0045">In embodiments, the sandbox tool <b>110</b> can be configured to include the necessary logic, instructions, and commands to implement the methods and processes of creating the isolated execution environment <b>230</b> as described above and below. The sandbox tool <b>110</b> can be configured to cooperate with the secure OS <b>106</b> to create the execution environment <b>230</b> (e.g. creating/removing namespaces, isolating namespaces, copying content, applying security contexts, accessing the untrusted content <b>225</b>, and the like).</p>
<p id="p-0047" num="0046">In embodiments, the sandbox tool <b>110</b> can be configured to apply various security contexts to the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can define various security contexts for the isolated execution environment <b>230</b> from completely isolated (access to resources only necessary to access the untrusted content <b>225</b>) to limited access (limited access to memory, network, storage, etc.). In the case of limited access, the sandbox tool <b>110</b> can be configured to apply security contexts that restrict access to a particular type of resource (e.g. network, memory, storage, processors) and/or that limits access to the different types of resources (e.g. certain network ports, certain memory ranges, certain storage location, certain processors). To apply the security context, the sandbox tool <b>110</b> can apply a security label to the isolated execution environment <b>230</b> and the processes of the isolated execution environment <b>230</b> and/or can instruct the security module <b>310</b> to apply a security label to the execution environment <b>230</b> and the processes of the isolated execution environment <b>230</b>.</p>
<p id="p-0048" num="0047">In embodiments, the sandbox tool <b>110</b> can be configured to create and/or maintain one or more isolated execution environments <b>230</b>, simultaneously. The multiple isolated execution environments <b>230</b> can have the same security context, for example, the same levels of access to the resources of the user computing system <b>102</b>. In order to keep the multiple isolated execution environments <b>230</b> isolated from each other, the sandbox tool <b>110</b> can be configured to assign (or instruct the security module <b>310</b> to assign) different security labels, for example random security labels, to each of the multiple isolated execution environments <b>230</b>. As such, the sandbox tool <b>110</b> can create one or more isolated execution environments <b>230</b> which co-exist and have the same level of access, but remain isolated from each other.</p>
<p id="p-0049" num="0048">In embodiments, the sandbox tool <b>110</b> can be preconfigured with the security context to apply to the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can be preconfigured to apply a completely isolated context or limited access context to the isolated execution environment <b>230</b>. Likewise, the sandbox tool <b>110</b> can be preconfigured to apply a security context based on the type of untrusted content <b>225</b> accessed in the isolated execution environment <b>230</b>. For instance, the sandbox tool <b>110</b> can be preconfigured to apply a limited network access (e.g. access to only specific network ports) security context to any untrusted content that requires network access.</p>
<p id="p-0050" num="0049">In embodiments, the sandbox tool <b>110</b> can be configured to allow the user to select the security context for the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can allow the user to select the preconfigured security context to apply to the isolated execution environment. Likewise, the sandbox tool <b>110</b> can allow the user to select the security context each time an isolated execution environment <b>230</b> is created. As such, the sandbox tool <b>110</b> can be configured to include the necessary logic, instructions, and commands to generate graphical user interfaces (GUIs) that allow a user select a security context to apply to the isolated execution environment <b>230</b>.</p>
<p id="p-0051" num="0050">In embodiments, in order to initiate access in the isolated execution environment <b>230</b>, the sandbox tool <b>110</b> can be configured to allow a user to request the access of untrusted content <b>225</b> in an isolated execution environment <b>230</b>. As such, the sandbox tool <b>110</b> can be configured to include the necessary logic, instructions, and commands to generate GUIs that allow a user to start the sandbox tool <b>110</b>, select untrusted content <b>225</b> to access in the isolated execution environment <b>230</b>, and select a security context to apply to the isolated execution environment <b>230</b>. For instance, the sandbox tool <b>110</b> can be directly accessed in order to initiate access of the untrusted content <b>225</b> in the isolated execution environment <b>230</b>. Additionally, the sandbox tool <b>110</b> can be linked to other applications and programs (e.g. web browsers) to allow access of the untrusted content <b>225</b> in the isolated execution environment <b>230</b>.</p>
<p id="p-0052" num="0051">In embodiments, additionally, in order to initiate access in the isolated execution environment, the sandbox tool <b>110</b> can be configured to automatically initiate access of the untrusted content in the isolated execution environment <b>230</b>. For example, upon the access of certain untrusted content, such as particular files or applications, the sandbox tool <b>110</b> can automatically initiate access of the untrusted content in the isolated execution environment <b>230</b>. As such, the sandbox tool <b>110</b> can be configured to include the necessary logic, instructions, and commands to GUIs that allow selection of types of untrusted content <b>225</b> which will automatically be accessed in the isolated execution environment <b>230</b> and the security context to be applied to the isolated execution environment <b>230</b>.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 4</figref> depicts an exemplary flow diagram <b>400</b> for creating an isolated execution environment in accordance with various embodiments. It should be readily apparent to those of ordinary skill in the art that the flow diagram <b>400</b> depicted in <figref idref="DRAWINGS">FIG. 4</figref> represents a generalized schematic illustration and that other stages can be added or existing stages can be removed or modified.</p>
<p id="p-0054" num="0053">In <b>405</b>, the processing can begin. In <b>410</b>, the sandbox tool <b>110</b> can initiate access of the untrusted content in an isolated execution environment. The sandbox tool <b>110</b> can automatically initiate access of the untrusted content in the isolated execution environment <b>230</b>. For example, upon the access of certain content, such as particular files or applications, the sandbox tool <b>110</b> can automatically initiate access of the untrusted content in the isolated execution environment <b>230</b>.</p>
<p id="p-0055" num="0054">Likewise, the sandbox tool <b>110</b> can initiate access of the untrusted content based on a request from the user of the user computing system <b>106</b>. For example, the sandbox tool <b>110</b> can be configured to be accessed by the user and configured to allow the user to select the untrusted content <b>225</b> to be accessed in the isolated execution environment <b>230</b>. For instance, the sandbox tool <b>110</b> can be directly accessed in order to initiate access of the untrusted content <b>225</b> in the isolated execution environment <b>230</b>. Additionally, the sandbox tool <b>110</b> can be linked to other applications and programs (e.g. web browsers) to allow access of the untrusted content <b>225</b> in the isolated execution environment <b>230</b>.</p>
<p id="p-0056" num="0055">In <b>415</b>, the sandbox tool <b>110</b> can create a temporary namespace for the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can instruct the namespace module <b>305</b> to create a temporary namespace for the isolated execution environment <b>230</b>, such as a temporary home directory and tmp directory. The namespace module <b>205</b> can create the temporary namespace to model the structure of the namespace of the user execution environment <b>220</b> and can label the temporary directories with a unique name such as &#x201c;sandbox_x_file.t&#x201d;.</p>
<p id="p-0057" num="0056">In <b>420</b>, the sandbox tool <b>110</b> can copy the untrusted content <b>225</b> to the temporary namespace for the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can copy or can instruct the secure OS <b>106</b> to copy the untrusted content <b>225</b> to the temporary home directory and tmp directory in the same location it would be found in the home directory and tmp directory of the user execution environment <b>220</b>. In addition to copying the untrusted content <b>225</b>, the sandbox tool <b>110</b> can copy any other necessary content (files, applications, programs) to the temporary namespace, which is required to access the untrusted content <b>225</b>.</p>
<p id="p-0058" num="0057">For example, if the untrusted content <b>225</b> is an untrusted file or data, the sandbox tool <b>110</b> can copy or can instruct the secure OS <b>106</b> to copy the untrusted file and/or data to the temporary home directory and tmp directory in the same location it would be found in the home directory and tmp directory of the user execution environment <b>220</b>. Additionally, the sandbox tool <b>110</b> can copy or can instruct the secure OS <b>106</b> to copy any additional data, files and applications to the temporary home directory and tmp directory that are required to access the untrusted file and/or data.</p>
<p id="p-0059" num="0058">In another example, if the untrusted content <b>225</b> is an untrusted program or application, the sandbox tool <b>110</b> can copy or can instruct the secure OS <b>106</b> to copy the untrusted program or application to the temporary home directory and tmp directory in the same location it would be found in the home directory and tmp directory of the user execution environment <b>220</b>. Additionally, the sandbox tool <b>110</b> can copy or can instruct the secure OS <b>106</b> to copy any additional data, files and applications to the temporary home directory and tmp directory that are required to access and execute the untrusted program or application.</p>
<p id="p-0060" num="0059">In <b>425</b>, the sandbox tool <b>110</b> can create an execution file in the temporary namespace. The execution file can be configured to cause the untrusted content <b>225</b> to execute once the isolated execution environment <b>230</b> is completely created. For example, if the untrusted content <b>225</b> is an untrusted program or application, the execution file can cause the untrusted program or application to begin execution. Likewise, if the untrusted content <b>225</b> is an untrusted file and/or data, the execution file can cause the appropriate applications or programs to begin execution in order to view and access the untrusted data and/or files.</p>
<p id="p-0061" num="0060">In <b>430</b>, the sandbox tool <b>110</b> can isolate the temporary namespace for other namespaces such as the namespace of the user execution environment <b>220</b>. For example, the sandbox tool <b>110</b> can instruct the namespace module <b>305</b> to unshare the namespace of the user execution environment <b>220</b> to prevent access to processes in the user execution environment <b>220</b>. Then, the sandbox tool <b>110</b> can instruct the namespace module <b>305</b> to mount the temporary namespace over the namespace of the user execution environment <b>220</b>, thereby preventing any access by the untrusted content <b>225</b> to the user execution environment <b>220</b>.</p>
<p id="p-0062" num="0061">In <b>435</b>, the sandbox tool <b>110</b> can set the security context of the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can apply or can instruct the security module <b>310</b> to apply a security label, which identifies the security policies, to the isolated execution environment <b>230</b>. The security context can be predetermined for the particular untrusted content <b>225</b> and/or selected by the user of the computing system <b>102</b>.</p>
<p id="p-0063" num="0062">For example, if the secure OS <b>106</b> is SELinux, the sandbox tool <b>110</b> can apply or can instruct the security module <b>310</b> to apply a MCS label, such as &#x201c;MCS<b>1</b>&#x201d;, to the isolated execution environment. In embodiments, the sandbox tool <b>110</b> can be configured to create and/or maintain one or more isolated execution environments <b>230</b>, simultaneously. The multiple isolated execution environments <b>230</b> can have the same security context, for example, the same levels of access to the resources of the user computing system <b>102</b>. In the above example, in order to keep the multiple isolated execution environments <b>230</b> isolated from each other, the sandbox tool <b>110</b> can be configured to assign (or instruct the security module <b>310</b> to apply) different MCS labels, for example random MCS labels, to each of the multiple isolated execution environments <b>230</b>. For instance, the sandbox tool <b>110</b> can assign other isolated execution environment <b>230</b> different MCS labels, such as &#x201c;MCS<b>2</b>&#x201d;, &#x201c;MCS<b>3</b>&#x201d;, etc. As such, the sandbox tool <b>110</b> can create one or more isolated execution environments <b>230</b> which co-exist and have the same level of access, but remain isolated from each other.</p>
<p id="p-0064" num="0063">In <b>440</b>, the sandbox tool <b>110</b> can create a new virtual process server for the isolated execution environment <b>230</b>. For example, the sandbox tool <b>110</b> can instruct the process server module <b>315</b> to create a new virtual process server for the isolated execution environment <b>230</b>. Because a security label has been applied to the isolated execution environment <b>230</b>, the new virtual process server will n according to the attached security label, for example, &#x201c;sandbox_xserver_t:MCS<b>1</b>&#x201d;. In <b>445</b>, the sandbox tool <b>110</b> can remove any data used to create the isolated execution environment <b>230</b>.</p>
<p id="p-0065" num="0064">In <b>450</b>, the sandbox tool <b>110</b> can instruct the new virtual process server to automatically maximize user interfaces generated by the new virtual process server. For example, if the new virtual process server is an X Windows server, the sandbox tool <b>110</b> can instruct, directly or via the process server module <b>315</b>, to maximize the X windows generated by the new X Server. Because a security label has been applied to the isolated execution environment <b>230</b>, the windows manager of the new virtual process server will run according to the attached security label, for example, &#x201c;sandbox_x_t:MCS<b>1</b>&#x201d;.</p>
<p id="p-0066" num="0065">In <b>455</b>, the sandbox tool <b>110</b> can run the execution file for the untrusted content <b>225</b>. As such, the untrusted content <b>225</b> will be accessed in the isolated execution environment. For example, if the untrusted content <b>225</b> is an untrusted program or application, running the execution file causes the untrusted program or application to begin execution. Likewise, if the untrusted content <b>225</b> is an untrusted file and/or data, running the execution file causes the appropriate applications or programs to begin execution in order to view and access the untrusted data and/or files. In these examples, once the untrusted applications, programs, and/or the appropriate application and programs to access the untrusted data and/or files begin execution, the new virtual process server generates user interfaces (e.g. X-Windows environment) to allow the user to interact with the application and programs.</p>
<p id="p-0067" num="0066">Because a security label has been applied to the isolated execution environment <b>230</b>, the untrusted content <b>225</b> and/or any other process will rim according to the attached security label, for example, &#x201c;sandbox_x-client_t:MCS<b>1</b>&#x201d;. As such, the secure OS <b>106</b> will apply security policies and grant/restrict access to the resources of the user computing system <b>102</b> according to the attached security label. Likewise, the untrusted content <b>225</b> and any other process with the applied security label can only access processes with the same security label, &#x201c;MCS<b>1</b>&#x201d;.</p>
<p id="p-0068" num="0067">In <b>460</b>, the sandbox tool <b>110</b> can optionally track malicious activity from the untrusted content <b>225</b>. The sandbox tool <b>110</b> can track or instruct the security module <b>310</b> to track malicious activity from the untrusted content <b>225</b>. For example, the sandbox tool <b>110</b> and/or security module <b>310</b> can monitor for requests to access resources outside the security context of the isolated execution environment. The sandbox tool <b>110</b> and/or the security module <b>310</b> can store a record of the malicious activity and/or notify the user of the malicious. Because the malicious activity is outside the security context of the isolated execution environment, the secure OS <b>106</b> can prevent the malicious activity from gaining access to the resources and processes of the user computing system <b>102</b>.</p>
<p id="p-0069" num="0068">In <b>465</b>, the sandbox tool <b>110</b> can remove the isolated execution environment <b>230</b> after completion of the access of the untrusted content <b>225</b>. For instance, the sandbox tool <b>110</b> can begin removal of the isolated execution environment <b>230</b> once the untrusted applications, programs, and/or the appropriate application and programs to access the untrusted data and/or files are closed. For example, to remove the isolated execution environment, the sandbox tool <b>110</b> can stop or instruct the processor server module <b>315</b> to stop the new virtual process server associated with the isolated execution environment <b>230</b>. Likewise, the sandbox tool <b>110</b> can delete or instruct the namespace module <b>305</b> to delete the temporary namespace (e.g. delete the temporary home directory and tmp directory). Additionally, the sandbox tool <b>110</b> can mount or instruct the namespace <b>305</b> to mount the home directory and tmp directory of the user execution environment <b>220</b>. In <b>470</b>, the processing can end, repeat or return to any point.</p>
<p id="p-0070" num="0069">As mentioned above, the sandbox tool <b>110</b> can be accessed directly or via other programs in order to initiate access of content in the isolated execution environment <b>230</b>. <figref idref="DRAWINGS">FIGS. 5A and 5B</figref> are exemplary screen shots of various methods and processes of initiating the sandbox tool <b>110</b>, and resulting exemplary interface for the isolated execution environment <b>230</b>. As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, the secure OS <b>106</b>, running on the user computing system <b>102</b>, can provide the user execution environment <b>505</b>, such as an X Windows interfaces, that allows a user to run applications and programs, view files and data, and communicate with the remote computing systems <b>104</b>.</p>
<p id="p-0071" num="0070">In one exemplary embodiment, a user can execute a program such as a web browser, in order to communicate with the remote computing systems <b>104</b>. As illustrated, the user can access the web browser through an interface <b>510</b>. The user can desire to access the untrusted content <b>225</b>, such as an ADOBE pdf file &#x201c;game.pdf&#x201d;. Because the user may not know the source of the untrusted content <b>225</b>, the user can desire to isolate the user computing system <b>102</b> for the untrusted content <b>225</b>. In one exemplary embodiments, the sandbox tool <b>110</b> can be configured to generate a selection <b>520</b> in a menu <b>515</b> that allows the user to initiate the sandbox tool <b>110</b> in order to access the untrusted content <b>225</b> in the isolated execution environment <b>230</b>. When the user selects the untrusted content <b>225</b>, the menu <b>515</b> can be presented to the user, which allows the user to initiate the sandbox tool <b>110</b>.</p>
<p id="p-0072" num="0071">In another exemplary embodiment, in order to initiate the sandbox tool <b>110</b>, the user can directly access the sandbox tool <b>110</b>. As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, the sandbox tool <b>110</b> can be configured to provide a icon or link <b>525</b> that causes the sandbox tool <b>110</b> to initiate. In order to initiate the sandbox tool <b>110</b>, the user can select the icon or link <b>525</b>. Once initiated, the sandbox tool <b>110</b> can provide GUIs that allow the user to select the untrusted content <b>225</b> to access in the isolated execution environment <b>230</b>, and select a security context to apply to the isolated execution environment <b>230</b>.</p>
<p id="p-0073" num="0072">As illustrated in <figref idref="DRAWINGS">FIG. 5B</figref>, once the sandbox tool <b>110</b> has created the isolated execution environment <b>230</b> and the execution file is run, the new virtual process server can create a new interface <b>530</b> for displaying the interface <b>535</b> for the application (e.g. ADOBE READER) to access the untrusted content <b>225</b>. As such, the user can access the untrusted content <b>225</b> in the isolated execution environment <b>230</b>.</p>
<p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an exemplary block diagram of a computing system <b>600</b> which can be implemented as user computing system <b>102</b> and/or the remote computing systems <b>104</b> according to various embodiments. The functions of the secure OS <b>106</b> and the sandbox tool <b>110</b> can be implemented in program code and executed by the computing system <b>600</b>.</p>
<p id="p-0075" num="0074">As shown in <figref idref="DRAWINGS">FIG. 6</figref>, the computing system <b>600</b> includes one or more processors, such as processor <b>602</b> that provide an execution platform for embodiments of the guest account module <b>125</b>. Commands and data from the processor <b>602</b> are communicated over a communication bus <b>604</b>. The computing system <b>600</b> also includes a main memory <b>606</b>, for example, one or more computer readable storage media such as a Random Access Memory (RAM), where the secure OS <b>106</b> and the sandbox module <b>110</b> can be executed during runtime, and a secondary memory <b>608</b>. The secondary memory <b>608</b> includes, for example, one or more computer readable storage media such as a hard disk drive <b>610</b> and/or a removable storage drive <b>612</b>, representing a floppy diskette drive, a magnetic tape drive, a compact disk drive, etc., where a copy of a computer application program embodiment for the secure OS <b>106</b> and the sandbox tool <b>110</b> can be stored. The removable storage drive <b>612</b> reads from and/or writes to a removable storage unit <b>614</b> in a well-known manner. A user can interfaces with the secure OS <b>106</b> and the sandbox tool <b>110</b> with a keyboard <b>616</b>, a mouse <b>618</b>, and a display <b>620</b>. The display adapter <b>622</b> interfaces with the communication bus <b>604</b> and the display <b>620</b>. The display adapter <b>622</b> also receives display data from the processor <b>602</b> and converts the display data into display commands for the display <b>620</b>.</p>
<p id="p-0076" num="0075">Certain embodiments may be performed as a computer application or program. The computer program may exist in a variety of forms both active and inactive. For example, the computer program can exist as software program(s) comprised of program instructions in source code, object code, executable code or other formats; firmware program(s); or hardware description language (HDL) files. Any of the above can be embodied on a computer readable medium, which include computer readable storage devices and media, and signals, in compressed or uncompressed form. Exemplary computer readable storage devices and media include conventional computer system RAM (random access memory), ROM (read-only memory), EPROM (erasable, programmable ROM), EEPROM (electrically erasable, programmable ROM), and magnetic or optical disks or tapes. Exemplary computer readable signals, whether modulated using a carrier or not, are signals that a computer system hosting or running the present teachings can be configured to access, including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software program(s) of the computer program on a CD-ROM or via Internet download. In a sense, the Internet itself, as an abstract entity, is a computer readable medium. The same is true of computer networks in general.</p>
<p id="p-0077" num="0076">While the teachings has been described with reference to the exemplary embodiments thereof, those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular, although the method has been described by examples, the steps of the method may be performed in a different order than illustrated or simultaneously. Furthermore, to the extent that the terms &#x201c;including&#x201d;, &#x201c;includes&#x201d;, &#x201c;having&#x201d;, &#x201c;has&#x201d;, &#x201c;with&#x201d;, or variants thereof are used in either the detailed description and the claims, such terms are intended to be inclusive in a manner similar to the term &#x201c;comprising.&#x201d; As used herein, the term &#x201c;one or more of&#x201d; with respect to a listing of items such as, for example, A and B, means A alone, B alone, or A and B. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>receiving a request to access untrusted content within a user namespace of a user execution environment on a computing system;</claim-text>
<claim-text>creating, by a processor in response to receiving the request to access the untrusted content, an isolated execution environment on the computing system, wherein creating the isolated execution environment comprises generating a temporary namespace for the isolated execution environment, copying the untrusted content from the user namespace to the temporary namespace, and isolating the temporary namespace from the user namespace after copying the untrusted content from the user namespace to the temporary namespace;</claim-text>
<claim-text>initiating access of the untrusted content within the isolated execution environment after isolating the temporary namespace from the user namespace;</claim-text>
<claim-text>tracking the access of the untrusted content within the isolated execution environment for malicious activity; and</claim-text>
<claim-text>removing the isolated execution environment after the access of the untrusted content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein creating the isolated execution environment comprises applying a security context to the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising receiving a selection of the security context to apply to the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the temporary namespace comprises a temporary file directory and the user namespace comprises a user file directory, wherein copying the untrusted content comprises copying a directory structure from a location in the user file directory to a corresponding location the temporary file directory, and wherein isolating the temporary namespace comprises unsharing the user namespace from the temporary execution environment and mounting the temporary namespace over the user namespace to prevent access from the temporary namespace to the user namespace.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising labeling the temporary file directory with a name that is different than a name of the user file directory.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein creating the isolated execution environment comprises starting a first virtual process server for the isolated execution environment, and wherein the first virtual process server is separate from a second virtual process server for the user execution environment.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein removing the isolated execution environment comprises terminating the first virtual process server for the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein removing the isolated execution environment comprises removing the temporary namespace for the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the untrusted content comprises at least one of an application or a file.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A non-transitory computer readable storage medium comprising instructions which, when executed by a processor, cause the processor to perform operations comprising:
<claim-text>receiving a request to access untrusted content within a user namespace of a user execution environment on a computing system;</claim-text>
<claim-text>creating, by the processor in response to receiving the request to access the untrusted content, an isolated execution environment on the computing system, wherein creating the isolated execution environment comprises generating a temporary namespace for the isolated execution environment, copying the untrusted content from the user namespace to the temporary namespace, and isolating the temporary namespace from the user namespace after copying the untrusted content from the user namespace to the temporary namespace;</claim-text>
<claim-text>initiating access of the untrusted content within the isolated execution environment after isolating the temporary namespace from the user namespace;</claim-text>
<claim-text>tracking the access of the untrusted content within the isolated execution environment for malicious activity; and</claim-text>
<claim-text>removing the isolated execution environment after the access of the untrusted content.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein creating the isolated execution environment comprises applying a security context to the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the operations further comprise receiving a selection of the security context to apply to the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the temporary namespace comprises a temporary file directory and the user namespace comprises a user file directory, wherein copying the untrusted content comprises copying a directory structure from a location in the user file directory to a corresponding location the temporary file directory, and wherein isolating the temporary namespace comprises unsharing the user namespace from the temporary execution environment and mounting the temporary namespace over the user namespace to prevent access from the temporary namespace to the user namespace.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising labeling the temporary file directory with a name that is different than a name of the user file directory.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein creating the isolated execution environment comprises starting a first virtual process server for the isolated execution environment, and wherein the first virtual process server is separate from a second virtual process server for the user execution environment.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein removing the isolated execution environment comprises terminating the first virtual process server for the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein removing the isolated execution environment comprises removing the temporary namespace for the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the untrusted content comprises at least one of an application or a file.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein creating the isolated execution environment comprises instructing an operating system of the computing system to create the isolated execution environment, and wherein removing the isolated execution environment comprises instructing the operating system to remove the isolated execution environment.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the isolated execution environment has limited access to resources of the computing system.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein creating the isolated execution environment comprises creating the isolated execution environment further in response to a determination that the untrusted content is untrusted.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the isolated execution environment has limited access to resources of the computing system.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein creating the isolated execution environment comprises creating the isolated execution environment further in response to a determination that the untrusted content is untrusted.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. A system comprising:
<claim-text>a memory to store untrusted content;</claim-text>
<claim-text>a processor, coupled to the memory, to:
<claim-text>receive a request to access the untrusted content within a user namespace of a user execution environment on a computing system;</claim-text>
<claim-text>create, in response to receiving the request to access the untrusted content, an isolated execution environment on the computing system, wherein the processor is to create the isolated execution environment by generation of a temporary namespace for the isolated execution environment, duplication of the untrusted content from the user namespace to the temporary namespace, and isolation of the temporary namespace from the user namespace after the duplication of the untrusted content from the user namespace to the temporary namespace;</claim-text>
<claim-text>initiate access of the untrusted content within the isolated execution environment after the isolation of the temporary namespace from the user namespace;</claim-text>
<claim-text>track the access of the untrusted content within the isolated execution environment for malicious activity; and</claim-text>
<claim-text>remove the isolated execution environment after the access of the untrusted content.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The system of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the processor is to create the isolated execution environment further in response to a determination that the untrusted content is untrusted. </claim-text>
</claim>
</claims>
</us-patent-grant>

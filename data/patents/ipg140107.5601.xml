<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626702-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626702</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11646194</doc-number>
<date>20061227</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1710</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>30</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>707600</main-classification>
<further-classification>709238</further-classification>
</classification-national>
<invention-title id="d2e53">Method and system for validation of data extraction</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6853994</doc-number>
<kind>B1</kind>
<name>Gupta</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7203671</doc-number>
<kind>B1</kind>
<name>Wong</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7321939</doc-number>
<kind>B1</kind>
<name>Porter</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709238</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2007/0174236</doc-number>
<kind>A1</kind>
<name>Pagnussat et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  2</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>707  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707  6</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>707600</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709238</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080162999</doc-number>
<kind>A1</kind>
<date>20080703</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Schlueter</last-name>
<first-name>Markus</first-name>
<address>
<city>Rauenberg</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Zimmerer</last-name>
<first-name>Peter Karlheinz</first-name>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Fey</last-name>
<first-name>Harald</first-name>
<address>
<city>Illingen</city>
<country>DE</country>
</address>
</addressbook>
<residence>
<country>DE</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Schlueter</last-name>
<first-name>Markus</first-name>
<address>
<city>Rauenberg</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Zimmerer</last-name>
<first-name>Peter Karlheinz</first-name>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Fey</last-name>
<first-name>Harald</first-name>
<address>
<city>Illingen</city>
<country>DE</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Brake Hughes Bellermann LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>SAP AG</orgname>
<role>03</role>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Peng</last-name>
<first-name>Huawen</first-name>
<department>2158</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Validation of an extraction process from an operation system to an on-line analytics and processing (&#x201c;OLAP&#x201d;) system may be achieved utilizing a function module that reads data from a queue and outputs the data in a structured form. A second function module may be used to perform an existence and uniqueness check on the data to determine the existence and/or uniqueness of various data elements.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="228.35mm" wi="179.75mm" file="US08626702-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="245.62mm" wi="178.65mm" file="US08626702-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="254.00mm" wi="155.36mm" orientation="landscape" file="US08626702-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="195.41mm" wi="168.40mm" orientation="landscape" file="US08626702-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="151.21mm" wi="84.24mm" file="US08626702-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="221.40mm" wi="93.05mm" file="US08626702-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="137.75mm" wi="84.24mm" file="US08626702-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="211.24mm" wi="145.12mm" orientation="landscape" file="US08626702-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="201.85mm" wi="152.57mm" orientation="landscape" file="US08626702-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">This description relates to computer software. In particular, this description relates to a method and system for automatic validation of data extracted from an operational system.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Modern businesses rely upon a myriad of operational systems that generate data. Examples of operational systems may include order generation systems, invoicing systems, billing systems and accounting systems. It is often desirable to move data generated by an operational system for later analysis. For example, it may be desirable to move data for transactions generated in a transaction system into a system where the data can be analyzed. At some later point in time, this data may be analyzed to examine customer trends, preferences, revenue generated by category, or other relevant information. Data visualization tools such as charting and plotting may be employed to provide additional insight into the content of the data. Systems that are utilized to analyze and evaluate data generated from operational systems are often referred to as OLAP (&#x201c;Online Analytical Processing&#x201d;) systems, business warehouse (&#x201c;BW&#x201d;) systems and/or business intelligence (&#x201c;BI&#x201d;) systems.</p>
<p id="p-0004" num="0003">The process of performing the transfer of data from an operational system to an OLAP or BW system is often referred to as an extraction process. The term &#x201c;extraction&#x201d; describes the concept of retrieving data from an operational system and causing the storage of the extracted data in an OLAP or BW system. An extraction system may be deployed which, upon the generation of data in an operational system, automatically transfers the generated data from an operational system to the OLAP system. The extraction process may also perform some rudimentary transformations on the data before it is stored in the OLAP system, in order that, for example, the data is in a format suitable for processing and storage by an OLAP system. An extraction system may be part of an operational system such as a framework implemented within an operational system, or may be a separate system.</p>
<p id="p-0005" num="0004">An extraction system may include a software system that operates in tandem with an operational system to perform extraction of data generated by an operational system. As just referenced, an extraction system may be a separate system from the operational system, or may be combined with the operational system. Typically, an extraction system may include management functions for defining such parameters, such as which operational systems is to be the subject of the data extraction, which data should be extracted, and how often the data extraction process should be performed.</p>
<p id="p-0006" num="0005">An extraction process may perform a number of evaluations or transformations on the data generated by an operational system. The terms transformation and evaluation refer to the fact that the extraction system may process the data generated by the operational system so that it can be stored in the BW system in a convenient format. These transformations may include such processing as aggregating, combining, simplifying, filtering, conversion and any other processing of the underlying data.</p>
<p id="p-0007" num="0006">Evaluations or transformation of data extracted from an operational system is often necessitated by the types of analysis that will be later performed on the data stored in an OLAP system. Often, for example, it will be desirable to analyze data in an OLAP system by querying the OLAP system utilizing any number of convenient parameters. For example, it may be desirable to examine all sales orders generated for the month of July. However, the data generated by the operational system, although it may indicate the month of the sales order, may not include a data item that aggregates all data by month. Thus, it may be convenient to store sales data in a BW system that is aggregated by month.</p>
<p id="p-0008" num="0007">Although it might appear to be a relatively straightforward task to extract data generated by an operational system to a business warehouse system, there are a number of problems that may arise. The mapping between data structures in an operational system and an OLAP system is a natural source of errors because the mapping has to be defined explicitly. Due to the evaluation process described above, many errors may occur when data is transformed and stored in an OLAP system. Data generated by an operational system is often generated in a complex structured format that must be correctly interpreted by an extraction process. Errors may arise in correctly interpreting the format of the data as well as insuring that the data arrives in pristine form in the BW system. Two example types of errors that may arise are the failure to transfer a data item from an operational system to an OLAP system and generation of duplicate or redundant copies of a particular data item in an OLAP system. A third type of error relates to the accuracy or correctness for which data is replicated from an operational system in an OLAP system.</p>
<p id="p-0009" num="0008">These three types of errors that may occur in data extraction from an operational system to an OLAP system may thus be characterized as concerning existence, uniqueness and correctness. With an existence error, a data element generated by an operational system is simply not transferred to an OLAP system (i.e., it fails to exist in the OLAP system). With a uniqueness error, data may be replicated or duplicated erroneously in an OLAP system (i.e., multiple copies of the same data element may be stored in the OLAP system). With a correctness error, a data element is stored in an OLAP system erroneously (i.e., the data element has been mutated from its original form or content). Still another type of error that may occur to data that is not intended to be extracted from an operational system that is, in fact, extracted.</p>
<p id="p-0010" num="0009">Thus, there is a possibility for errors in the operation of extraction systems and/or processes, and such problems may be exacerbated by the heterogeneous nature of data generated by many operational systems, as well as the heterogeneous nature of format of extracted data itself. Consequently, a utility of such extraction systems may be reduced, and some benefits of the available data may be reduced or lost, as well.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0011" num="0010">According to one general aspect a system for validating a data extraction process from an operational system to an OLAP system comprises a queue configured to store extracted data that the extraction process has extracted from the operational system, wherein the extracted data in the queue is stored based upon an associated data source, and a processor that is adapted to determine at least one queue based upon a received data source, read first data from the at least one queue as a function of at least a portion of the selected data source to generate a structured data element that is based upon the selected data source, receive at least one identifier associated with the first data for validation of the structured data element, determine at least one of an existence and uniqueness of each of the at least one identifier in the structured data element, and report a validation result for the structured data element, based upon the existence and uniqueness determination.</p>
<p id="p-0012" num="0011">According to another general aspect a method for validating an extraction process from an operational system to an OLAP system includes determining at least one queue associated with a received data source, reading first data from the at least one a queue as a function of at least a portion of the selected data source to generate a structured data element that is based upon the selected data source, receiving at least one identifier associated with the first data for validation of the structured data element, determining at least one of an existence and uniqueness of each of the at least one identifier in the structured data element, and reporting a validation result for the structured data element, based upon the existence and uniqueness determination.</p>
<p id="p-0013" num="0012">According to another general aspect, a validation interface may be configured to validate an extraction process from an operational system to an OLAP system. The validation interface may include a first function module, the first function module configured to receive a first input of a data source, and configured to read data from a queue to provide an output of data in the queue in a structured form based on the data source, a second function module, the second function module configured to receive an input of the data source for the operational system and configured to provide an output of at least one queue associated with the data source, and a third function module, the third function module configured to determine at least one of an existence and a uniqueness of selected data extracted by an extraction system performing the extraction process.</p>
<p id="p-0014" num="0013">The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of a system for performing an example operation of a data extraction validation system in conjunction with an operational system and an OLAP system.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> is a flowchart depicting the tandem efforts of an operational system and an extraction system in relation to an extraction validation system.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref> shows the structure of a data source according to an example embodiment.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref><i>a </i>is a flowchart of a process executed by an OLAP system reporter function module according to an example embodiment.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref><i>b </i>is a flowchart of a process executed by a queue reader function module according to an example embodiment.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 4</figref><i>c </i>is a flowchart of a process executed by a validation check function module according to an example embodiment.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram depicting a programming unit including an interface for interacting with an extraction validation system according to an example embodiment.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example of an extract structure for a sales order according to an example embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example operation of a data extraction validation system in conjunction with an operational system and an OLAP system. In the example of <figref idref="DRAWINGS">FIG. 1</figref>, a computer system <b>102</b> may include a processor <b>104</b> that executes any number of processes. The computer system <b>102</b> and the processor <b>104</b> may provide an operational system <b>106</b>, an extraction validation system <b>108</b>, and an extraction system <b>110</b>. It should be understood that these various systems <b>102</b>-<b>110</b>, and other elements of the various figures, may be comprised of various hardware and software elements. For example, the operational system <b>106</b> may include the hardware of the computer system <b>102</b> itself, as well as various processes executed by the processor <b>104</b> to provide functions related to the operational system <b>106</b>. Although various processes may be executed on a single computer system <b>102</b> sharing a single processor <b>104</b> and memory system (not shown), it should be understood that these processes may execute on multiple computer systems and/or may be implemented using dedicated hardware. Furthermore, although the term system is used to reference these entities, it should be understood that the extraction system <b>110</b> and the extraction validation system <b>108</b> may each be a separate framework that operates within the operational system <b>106</b>.</p>
<p id="p-0024" num="0023">An operational system <b>106</b> may perform functions related to a business operation such as, for example, order generation, inventory management and accounting. Although <figref idref="DRAWINGS">FIG. 1</figref> shows a single operational system <b>106</b>, it should be understood that the computer system <b>102</b> may host any number of operational system processes <b>106</b> for performing heterogeneous business functions.</p>
<p id="p-0025" num="0024">An operational system <b>106</b> may include any number of data generators <b>132</b>. A data generator <b>132</b> may be any output of the operational system <b>106</b> that generates or provides data <b>114</b>. Although only a single data generator <b>132</b> is shown for the operational system <b>106</b>, it should be understood that an operational system <b>106</b> may include any number of data generators <b>132</b>, which generate data <b>114</b>.</p>
<p id="p-0026" num="0025">Typically, data <b>114</b> may be organized into structured objects comprised of any number of fields or discrete elements. Thus, for example, an order generation system might include a data generator <b>132</b> that generates order record objects. The order record objects might comprise a number of data fields including an order record identifier, a date, a buyer name, or other data fields related to the particular operational system <b>106</b>.</p>
<p id="p-0027" num="0026">Each data element <b>114</b> may be associated with a UUID (&#x201c;Universal Unique Identifier&#x201d;) <b>152</b> that distinguishes the data element. A UUID <b>152</b> is guaranteed or extremely likely to be different from any other generated UUID <b>152</b>. Thus, for example, in the example of an order object comprised of various items, the order itself as well as the individual items comprising the order may each be associated with a respective UUID <b>152</b>. Each of the UUIDs <b>152</b> will be different from each other so as to uniquely identify each item on the sales order.</p>
<p id="p-0028" num="0027">The operational system <b>106</b> may cause data <b>114</b> generated by a data generator <b>132</b> to be stored in an operational system database <b>112</b>. The operational system database <b>112</b> may be, for example, a relational database with a predefined table structure. The predefined table structure may correspond to the structure of data objects generated by the data generator <b>132</b>. Thus, for example, in the order record object example, the database <b>112</b> may include a table structure that includes fields for an order record identifier, a data, a buyer name, or other relevant data. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, data <b>114</b> generated by data generator <b>132</b> may be stored in the operational system database <b>112</b> along with an associated UUID <b>152</b> for the data <b>114</b>.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> also shows an extraction system <b>110</b>. An extraction system <b>110</b> may perform processes in tandem with the operational system <b>106</b> to transfer and process data <b>114</b> generated by any number of data generators <b>132</b> in an operational system <b>106</b> into a format suitable for consumption by an OLAP system <b>126</b>. The extraction system <b>110</b> may comprise a framework that operates within the operational system <b>110</b>. Although <figref idref="DRAWINGS">FIG. 1</figref> shows that the extraction system <b>110</b> is included within the operational system <b>106</b>, alternatively, it may be implemented as a separate system. The extraction system <b>110</b> may perform various evaluation and transformation functions to process data <b>114</b> generated by a data generator <b>132</b> before it is stored in an OLAP system <b>126</b>. These transformations may prepare the data in a format suitable for analytic evaluation and/or storage in an OLAP system <b>126</b> and may include such functions as data aggregation, data combination, data filtering, data conversion and any other type of processing. Although as shown in <figref idref="DRAWINGS">FIG. 1</figref>, the extraction system <b>110</b> is shown as executing on the same processor as the operational system <b>106</b>, it should be understood that an extraction system <b>110</b> may be executed on a separate processor (not shown in <figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0030" num="0029">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the extraction system <b>110</b> may pull data <b>114</b> generated from a data generator <b>132</b>, process and/or transform the data <b>114</b> via a data source <b>154</b> to generate processed data <b>130</b> and then cause the storage of the processed data <b>130</b> in a queue <b>116</b>. The processed data <b>130</b> may be stored in a queue <b>116</b> for subsequent transformation to the OLAP system <b>126</b>. The queue <b>116</b> may be a delta queue. A delta queue may be a set of tables that includes data that has changed, modified, deleted or added. The delta queue <b>116</b> may have an associated name. There may exist several delta queues <b>116</b> for an operational system that allows extraction of data in multiple OLAP systems <b>126</b>.</p>
<p id="p-0031" num="0030">The data source <b>154</b> may comprise a function module (not shown) and a specified extraction structure (not shown), which collectively provide for the transformation and processing of data <b>114</b> into a format suitable for reception by an OLAP system <b>126</b>. An extraction structure may include, for example, any data indicating or specifying how data is to be transformed from its form as generated by the data generator <b>132</b> in an operational system <b>160</b> into processed data <b>130</b>, which is to further processed and stored by the OLAP system <b>126</b>. The data source <b>154</b> also may include a function module, which may utilize an associated extract structure to perform the transformation of data <b>114</b> into the processed data <b>130</b>. The data source <b>154</b> may be associated with any number of OLAP systems <b>126</b>. In particular, it may be desirable to store data generated by an operational system <b>106</b> in any number of separate OLAP systems <b>126</b>.</p>
<p id="p-0032" num="0031">An OLAP system <b>126</b> may refer to, or include, any system that may receive extracted data from the operational system <b>106</b> and/or the extraction system <b>110</b>. The OLAP system <b>126</b> may include a PSA (&#x201c;Persistency Staging Area&#x201d;) <b>142</b>, queries function module <b>144</b> and an analytics database <b>150</b>. Because an analytics database <b>150</b> may store data in a different format from that of an operational system database <b>112</b> due to the nature of analytics processing and analysis, the OLAP system <b>126</b> may cause the transformation of received processed data <b>130</b> into a format suitable for the OLAP system <b>126</b>. For example, the PSA <b>142</b> may function to transform and package processed data <b>130</b> into a suitable format for storage in an OLAP system <b>126</b>.</p>
<p id="p-0033" num="0032">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the analytics database <b>150</b> may store any number of information objects <b>146</b> and information cubes <b>140</b>. The information object <b>146</b> may include a table structure similar to the table structure of an operational system database <b>112</b>. The information cube <b>140</b> may provide metadata for navigating and accessing the information object(s) <b>146</b>. Thus, before the processed data <b>130</b> is stored in an analytics database <b>150</b> it may first be further processed and transformed to be in a format suitable for storage as information objects <b>146</b> and information cubes <b>140</b>. Then, an OLAP user desiring to perform analysis of data stored in an analytics database <b>150</b> may provide queries to the queries system <b>144</b>, which may then cause retrieval of data from the analytics database <b>150</b> and associated reporting.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 1</figref> shows an extraction validation system <b>108</b>, which performs functions for validating data extracted by the extraction system <b>110</b> from the operational system <b>106</b>. The extraction validation system <b>108</b> may include any number of function modules, including, for example, an associated OLAP system reporter <b>120</b>, a queue reader <b>122</b> and a validation checker <b>124</b>. The nature of these function modules will be described in more detail below. However, in brief, an associated OLAP system reporter <b>120</b> may receive a data source name and provide as output <b>134</b> a list of all OLAP systems that are associated with that data source <b>154</b>. A queue reader <b>122</b> receives as input a data source <b>154</b> or data source reference and provides as output structured data <b>136</b>, which includes data read from a queue <b>116</b> corresponding to that data source <b>154</b>. A validation checker <b>124</b> receives as input the structured data <b>136</b> and at least one UUID <b>152</b>, as shown, and provides as output a validation result <b>138</b>, which indicates at least one of the uniqueness or existence in the queue <b>116</b> of each UUID specified.</p>
<p id="p-0035" num="0034">According to an example embodiment, the extraction validation system <b>108</b> may be used to test artificial data for the operational system <b>106</b>. In this example scenario an appropriate stimulus is applied to cause the operational system <b>106</b> to generate data <b>114</b> having predetermined content. Artificial data will be generated as a result and stored in a queue <b>116</b> as outlined above. The extraction validation system <b>108</b> may then be activated to check the validity of the artificial data.</p>
<p id="p-0036" num="0035">According to another example embodiment, the extraction validation system <b>108</b> may be utilized in real time to validate the extraction of data within a productive environment generated by an operational system <b>106</b>. <figref idref="DRAWINGS">FIG. 2</figref> is a flowchart depicting the tandem efforts of the operational system <b>106</b> and the extraction system <b>110</b> in relation to the extraction validation system <b>108</b>. Processes <b>250</b>, <b>260</b> and <b>270</b> may be performed by the operational system <b>106</b>, the extraction system <b>110</b> and the extraction validation system <b>108</b>, respectively.</p>
<p id="p-0037" num="0036">With respect to process <b>250</b> performed by the operational system <b>106</b>, the operational system <b>106</b> is initialized in step <b>218</b>. A transaction may be initialized in step <b>220</b>. An initialization of a transaction may be signalled by a user's interaction with the operational system <b>106</b> to generate some data. For example, a user may desire to create a sales order, which would comprise a transaction initialization.</p>
<p id="p-0038" num="0037">If no transaction is initialized (&#x201c;No&#x201d; branch of step <b>220</b>) flow continues with step <b>220</b> and the detection step is repeated. If a transaction is signalled (&#x2018;Yes&#x2019; branch of step <b>220</b>), flow continues with step <b>222</b> and appropriate data is generated by a data generator <b>132</b>. This generated data may be stored in an internal memory buffer, for example, on the computer system <b>102</b>. Flow then continues with step <b>224</b>, where a signal is detected pertaining to the completion of the transaction. If a user desires to abandon the transaction (&#x201c;No&#x201d; branch of step <b>224</b>), flow continues with step <b>220</b> and the initialization step is detected again. Although not shown in process <b>222</b>, the operational system <b>106</b> may also perform some memory cleanup of the data generated in buffers during step <b>222</b>.</p>
<p id="p-0039" num="0038">If a user desires to complete the transaction, for example by instructing the computer system <b>102</b> to save the generated data (&#x2018;Yes&#x2019; branch of step <b>224</b>), flow continues with step <b>226</b> and the generated data is stored in an operational system database <b>112</b>.</p>
<p id="p-0040" num="0039">An extraction system <b>110</b> may operate concurrently with an operational system <b>106</b>. A process associated with an extraction system is shown by <b>260</b>. The extraction system is initiated in step <b>200</b>. In step <b>202</b>, it is determined whether the operational system <b>106</b> associated with the extraction process has generated a transaction. A transaction may be signalled, for example, by a user's interaction with the operational system <b>106</b>, or generation of some data records and the user's selection to save the data, which may then typically be stored in an operational database <b>112</b>. According to an example embodiment, an extraction system <b>110</b> may subscribe to event notifications from an operational system <b>106</b>. If no operational system transaction is detected (&#x2018;No&#x2019; branch of step <b>202</b>), flow continues with step <b>202</b> and the detection step is repeated. If, on the other hand, a transaction is signalled, step <b>204</b> is performed and the data generated in the transaction is pulled from a data generator <b>132</b> that generated the data and stored in a data queue <b>116</b>.</p>
<p id="p-0041" num="0040">Process <b>270</b> shows various steps that may be executed by an extraction validation system. An extraction validation system <b>108</b> may operate concurrently with an operational system <b>106</b> and an extraction system <b>110</b>. The process is initiated in step <b>206</b> when a validation check is requested. According to an example embodiment the extraction validation system <b>108</b> may periodically perform validation checks on data generated by the operational system <b>106</b>. Or, a validation check may be manually initiated by a human operator at discrete points in time.</p>
<p id="p-0042" num="0041">In step <b>208</b>, a determination of OLAP systems associated with a particular data source <b>154</b> is performed. This determination may be performed by the associated OLAP system reporter <b>120</b> in extraction validation system <b>108</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. As noted above, an associated OLAP system reporter function <b>120</b> receives a data source <b>154</b> or data source reference as an input and generates a list of associated OLAP systems as output <b>134</b>.</p>
<p id="p-0043" num="0042">In step <b>210</b>, data to be validated is read from the queue <b>116</b> in the operational system <b>106</b> and a data structure is generated which includes the data from the queue <b>116</b> in a structured format. According to one embodiment, the queue reading and generation of structured data may be performed by a queue reader function module <b>122</b> in an extraction validation system <b>108</b>. Thus, a queue reader function module <b>122</b> will receive a data source <b>154</b> or data source reference as an input and automatically generate structured data <b>136</b> as output. The structured data <b>136</b> may be generated from data stored in the queue <b>116</b> utilizing a function module and an extraction structure specified for a data source <b>154</b>.</p>
<p id="p-0044" num="0043">In step <b>212</b>, existence and uniqueness checks are performed on one or more data items. According to an example embodiment, existence and uniqueness checks may be performed by a validation checker <b>124</b> in the extraction validation system <b>108</b>. Thus, one or more UUIDs <b>152</b> may be provided to the validation checker <b>124</b>. The validation checker <b>124</b> may then operate on the structured data <b>136</b> generated by the queue reader <b>136</b> to determine the existence and/or uniqueness of various data items, which were stored in the queue <b>116</b>. In addition, the existence and uniqueness checks may also determine UUIDs that should not have been extracted, that is documents that should not be found in the queue.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 3</figref> shows the structure of a data source according to an example embodiment. A data source <b>154</b> may include a function module <b>302</b> and an extract structure <b>304</b>. The function module <b>302</b> and extract structure <b>304</b> may specify how data generated by the data generator <b>132</b> in the operational system <b>106</b> is to be transformed for extraction for storage in the queue <b>116</b>. As shown in <figref idref="DRAWINGS">FIG. 3</figref>, the data generator <b>132</b> may generate data in a structured format that includes a number of fields (e.g., <b>312</b>(<b>1</b>), <b>312</b>(<b>2</b>), <b>312</b>(<b>3</b>) and <b>312</b>(<b>4</b>)). It may be desired to transform the data into a format specified by an extract structure <b>304</b>. Thus, the extract structure specifies a number of fields (e.g., <b>312</b>(<b>5</b>), <b>312</b>(<b>6</b>) and <b>312</b>(<b>7</b>)). The relationship between fields specified in an extract structure <b>304</b> and the fields of structured data generated by a data generator <b>132</b> may be defined utilizing any arbitrary transformation rules, which may be implemented by the function module <b>302</b> in data source <b>154</b>. For example, <figref idref="DRAWINGS">FIG. 3</figref> shows four generic transformations that may be carried out by a function module <b>302</b>. For example, the reading out of the queue may work within the agent framework provided by SAP.</p>
<p id="p-0046" num="0045">In particular, aggregator <b>306</b> performs aggregation of data in field <b>312</b>(<b>1</b>) from data generator <b>132</b> into field <b>312</b>(<b>5</b>) in extract structure <b>304</b>. Aggregated data may represent the cumulative sum of various data elements. For example, if field <b>312</b>(<b>1</b>) stored items for a particular sales order, aggregated data stored in field <b>312</b>(<b>5</b>) of the extract structure <b>304</b> might store the cumulative sum of the value of items for an entire sales order.</p>
<p id="p-0047" num="0046">Combiner <b>306</b> may combine the contents of various fields generated by a data generator <b>132</b> into a single field. Thus, a shown in <figref idref="DRAWINGS">FIG. 3</figref>, fields <b>312</b>(<b>2</b>) and <b>312</b>(<b>3</b>) are combined in a single field <b>312</b>(<b>6</b>) in the extract structure <b>304</b>. An example of a combiner function might be where two attributes for an element such as color and weight represented in two fields may be combined in a single entity using a codeword.</p>
<p id="p-0048" num="0047">Transformer <b>310</b> may operate to process or manipulate data in one or more fields associated with a data generator for storage in one or more fields in the extract structure <b>304</b>. Thus, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, a date field <b>312</b>(<b>4</b>) from data generator is transformed into a new format in date field <b>312</b>(<b>7</b>) of extract structure <b>304</b></p>
<p id="p-0049" num="0048">Identity transformation <b>314</b> copies the exact structure of a field from data generator <b>132</b> in a field in extract structure <b>304</b>. Thus, the identity transformation ensures a one-to-one correspondence between fields from the data generator <b>132</b> and the extract structure <b>304</b>. Thus, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, UUID <b>152</b> in field <b>312</b>(<b>10</b>) is identically replicated in field <b>312</b>(<b>11</b>) of the extract structure <b>304</b>. The identity transformation <b>314</b> thus ensures the preservation of UUIDs during transformation operations.</p>
<p id="p-0050" num="0049">Finally, filter <b>312</b> may filter various information in one or more fields from a data generator <b>132</b> as transformed into a field in an extract structure <b>304</b>. Thus, as shown in <figref idref="DRAWINGS">FIG. 3</figref>, a name field <b>318</b>(<b>8</b>) from an data generator <b>304</b> is filtered to produce a name field in the extract structure <b>312</b>(<b>9</b>) (i.e., the middle initial &#x201c;C&#x201d; is removed).</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 4</figref><i>a </i>is a flowchart of a process executed by the OLAP system reporter function module <b>120</b> according to one embodiment. A function module <b>120</b> may be a method or programming module or other programming unit. As described above, an OLAP system reporter function module <b>120</b> receives a data source <b>154</b> as input and generates a list <b>134</b> of OLAP systems <b>126</b> associated with the data source <b>154</b>. The process may be initiated when a data source <b>154</b> is received (<b>400</b>). A sender operational system of the data may be determined (<b>402</b>), such as the operational system <b>106</b>. Delta queues <b>116</b> associated with the provided data source <b>154</b> may then be determined (<b>404</b>) (i.e., the name of the delta queues <b>116</b>), where there may be a plurality of queues associated with a given data source. Steps <b>406</b> and <b>408</b> relate to validating the correctness of delta queues for the data source <b>154</b>. For example, queues that are associated with a sender system not in focus for validation may be removed (<b>406</b>), and queues which are not initialized may be removed (<b>408</b>). Then, a table of queues may be exported (<b>410</b>).</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 4</figref><i>b </i>is a flowchart of a process executed by a queue reader function module according to one embodiment. The process may effect a pure package-wise reading of the queue without causing a real data extraction into the OLAP system. The package-wise (i.e., a certain number of records are read) reading of the delta queue may require the calling of the package-wise function module in a specific mode, which allows reading of the delta queue multiple times within a session. As described above, the queue reader function module <b>122</b> receives a data source <b>154</b> and list <b>134</b> of OLAP systems <b>126</b> as input and generates structured data <b>136</b> corresponding to data in the queue <b>116</b>. Thus, in the example of <figref idref="DRAWINGS">FIG. 4</figref><i>b</i>, a data source, BW system and a BW filter option may be imported (<b>412</b>). The extract structure for the received data source <b>154</b> may be determined (<b>414</b>). Variables may be created that correspond to the extract structure (<b>416</b>), and the reading of the queue may be initialized (<b>418</b>). The multiple reading of the queue is established (<b>417</b>). This step may be necessary because an existing extraction framework might prohibit the multiple reading of a delta queue within a single session. Then, the queue may be read (<b>420</b>) without changing the state of the queue and data read from the queue may be collected (<b>422</b>). If any data remains to be read (<b>424</b>), flow continues with reading the queue (<b>420</b>); otherwise, the contents of the delta queue that were read may be exported (<b>426</b>).</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 4</figref><i>c </i>is a flowchart of a process executed by a validation checker according to an example embodiment. The process is initiated when a table of identifiers, a check flag for duplicates, a field name of an identifier, and a table of delta queue records are received (<b>428</b>). The existence of the table of identifiers may then be determined for the table data (<b>430</b>). Uniqueness of the identifiers provided also may be determined in the table (<b>432</b>). Results may then be checked for accuracy, and any exceptions are indicated (<b>436</b>), e.g., non-uniqueness or non-existence of identifiers.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram depicting a programming unit including an interface for interacting with and/or implementing an extraction validation system according to an example embodiment. As described above, the extraction validation system <b>108</b> performs functions for validating data extracted by the extraction system <b>110</b> from the operational system <b>106</b>. A programming unit <b>500</b> may include or specify various interfaces and respective associated function modules.</p>
<p id="p-0055" num="0054">As referenced above, the OLAP system reporter <b>120</b> may receive a data source name and provide as output <b>134</b> a list of all OLAP systems that are associated with that data source <b>154</b>. A queue reader <b>122</b> receives as input a data source <b>154</b> or data source reference and provides as output structured data <b>136</b>, which includes data read from a queue <b>116</b> corresponding to that data source <b>154</b>. A validation checker <b>124</b> receives as input at least one UUID and provides as output a validation result <b>138</b>, which indicates at least one of the uniqueness or existence in a queue <b>116</b> of each UUID specified.</p>
<p id="p-0056" num="0055">The following interfaces and associated function modules may be provided by the programming unit <b>500</b> to provide access to the OLAP system reporter <b>120</b>, the queue reader <b>122</b> and the validation checker <b>124</b> respectively:</p>
<p id="p-0057" num="0056">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="21pt" align="left"/>
<colspec colname="1" colwidth="196pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>&#x2003;GET_QUEUES(_data_source)---GET_QUEUES</entry>
</row>
<row>
<entry/>
<entry>&#x2003;READ_QUEUE(_data_source) ---READ_QUEUE</entry>
</row>
<row>
<entry/>
<entry>&#x2003;CHECK_QUEUE_FOR_ENTRIES(_data_source)----</entry>
</row>
<row>
<entry/>
<entry>CHECK_QUEUE_FOR_ENTRIES</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 6</figref> illustrates an example of an extract structure for a single sales order record according to one embodiment. Although only a single sales order record (<b>612</b>) is shown in <figref idref="DRAWINGS">FIG. 6</figref>, it should be understood that this example would apply to an arbitrary number of sales order records. A sales order record <b>612</b>(<b>1</b>) generated by a data extractor may include fields of sales order ID <b>312</b>(<b>1</b>), currency <b>312</b>(<b>2</b>), date <b>312</b>(<b>3</b>), and a plurality of items <b>312</b>(<i>m</i>)-<b>312</b>(<i>n</i>).</p>
<p id="p-0059" num="0058">An extract structure <b>304</b> may include fields of sales order ID <b>312</b>(<b>7</b>), number of items <b>312</b>(<b>8</b>), amount <b>312</b>(<b>9</b>), currency <b>312</b>(<b>10</b>), date <b>312</b>(<b>11</b>) and status <b>312</b>(<b>12</b>). The fields in extract structure <b>304</b> represent transformations performed on the fields in the sales order records <b>612</b>(<b>1</b>) and <b>612</b>(<b>2</b>). Thus, for example, sales order IDs <b>312</b>(<b>1</b>) is processed by identity transformation module <b>314</b> to identically generate sales order ID <b>312</b>(<b>7</b>) in the extract structure <b>304</b>. Items <b>312</b>(<i>m</i>)-<b>312</b>(<i>n</i>) are processed by aggregator <b>306</b> to generate amount field <b>312</b>(<b>9</b>) and number of items fields <b>312</b>(<b>9</b>) in extract structure <b>304</b>. Number of items field <b>312</b>(<b>8</b>) may contain the sum of all items in the sales order record <b>612</b>. Amount field <b>312</b>(<b>9</b>) may contain the total sum of costs of items in the sales order record <b>612</b>.</p>
<p id="p-0060" num="0059">An extraction system <b>108</b> may then be employed to check for existence and uniqueness of the sales order ID <b>312</b>(<b>7</b>) in the extract structure. The queue reader <b>122</b> in extraction validation system <b>108</b> may read the extract structure <b>304</b> to generate data <b>136</b>. A UUID of the sales order in question may then be provided to validation checker module <b>124</b>, which reads structured data <b>136</b> to report the existence and/or uniqueness of the sales order ID.</p>
<p id="p-0061" num="0060">Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.</p>
<p id="p-0062" num="0061">Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).</p>
<p id="p-0063" num="0062">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.</p>
<p id="p-0064" num="0063">To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.</p>
<p id="p-0065" num="0064">Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.</p>
<p id="p-0066" num="0065">While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A system for validating an extraction process from an operational system to an OLAP (&#x201c;Online Analytics Processing&#x201d;) system, comprising:
<claim-text>a queue configured to store extracted data that the extraction process has extracted from the operational system, wherein the extracted data in the queue is stored based upon an associated data source; and</claim-text>
<claim-text>a processor, wherein the processor is adapted to:
<claim-text>determine at least one queue based upon a received data source;</claim-text>
<claim-text>read first data from the at least one queue as a function of at least a portion of the selected data source to generate a structured data element that is based upon the selected data source;</claim-text>
<claim-text>receive at least one identifier associated with the first data for validation of the structured data element;</claim-text>
<claim-text>determine at least one of an existence and uniqueness of each of the at least one identifier in the structured data element, and</claim-text>
<claim-text>report a validation result for the structured data element, based upon the existence and uniqueness determination.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data source comprises a function module and an extraction structure.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the extraction structure comprises a plurality of structured data fields.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the function module is configured to process at least one field generated by a data generator in the operational system to generate at least one transformed field.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the function module is configured to cause the aggregation of a plurality of fields into a single field.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the function module is configured to execute an identity operation.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the function module is configured to cause the filtering of data from at least one field generated by a data generator.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method for validating an extraction process from an operational system to an OLAP (&#x201c;Online Analytics Processing&#x201d;) system, the method comprising:
<claim-text>determining at least one queue, stored in a memory, associated with a received data source;</claim-text>
<claim-text>reading, by an extraction system, first data from the at least one a queue as a function of at least a portion of the selected data source;</claim-text>
<claim-text>generating, based at least in part upon the read first data, a structured data element that is based upon the selected data source;</claim-text>
<claim-text>receiving at least one identifier associated with the first data for validation of the structured data element;</claim-text>
<claim-text>determining, by an extraction validation system, at least one of an existence and uniqueness of each of the at least one identifier in the structured data element, and</claim-text>
<claim-text>reporting a validation result for the structured data element, based upon the existence and uniqueness determination.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein determining the selected queue comprises determining a function module and an extraction structure associated with the selected data source.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the extraction structure comprises a plurality of structured data fields.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the function module is configured to process at least one field generated by a data generator in the operational system to generate at least one transformed field.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the function module is configured to cause the aggregation of a plurality of fields into a single field.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the function module comprises an identity operation.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the function module is configured to cause the filtering of data from at least one field generated by a data generator.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A validation interface apparatus configured to validate an extraction process from an operational system to an OLAP (&#x201c;Online Analytics Processing&#x201d;) system, the validation interface comprising:
<claim-text>a first function module embodied as code segments for execution by a processor and stored on a non-transitory computer readable medium, the first function module configured to:
<claim-text>receive, as input, information from a data source,</claim-text>
<claim-text>read data from a queue, and</claim-text>
<claim-text>generate, as output, structured data based at least in part upon the data read from the queue and upon the data source;</claim-text>
</claim-text>
<claim-text>a second function module embodied as code segments for execution by the processor and stored on the non-transitory computer readable medium, the second function module configured to:
<claim-text>receive, as input, information from the data source for the operational system, and</claim-text>
<claim-text>provide an output of at least one queue associated with the data source; and</claim-text>
</claim-text>
<claim-text>a third function module embodied as code segments for execution by the processor and stored on the non-transitory computer readable medium, the third function module configured to determine at least one of an existence and a uniqueness of selected data extracted by an extraction system performing the extraction process.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The validation interface according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:
<claim-text>a first interface configured to invoke the first function module, the first interface characterized by a first input parameter specifying the data source;</claim-text>
<claim-text>a second interface configured to invoke the second function module, the second interface characterized by the first input parameter specifying the data source; and</claim-text>
<claim-text>a third interface configured to invoke the third function module, the third interface characterized by an input parameter specifying at least one substantially Universal Unique Identifier (UUID) for validation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The validation interface according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the data source includes at least one of a function module and an extraction structure.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The validation interface according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the third function module is configured to check for the existence of at least one data item in a queue associated with the data source.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The validation interface according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the third function module is configured to check for the uniqueness of at least one data item in a queue associated with the data source.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The validation interface according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first function module is further configured to generate a structured table from the data read from the queue, the structured table having a structure corresponding to a metadata for the data source.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626477-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626477</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13040417</doc-number>
<date>20110304</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>100</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>G</subclass>
<main-group>7</main-group>
<subgroup>48</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>20</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>21</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>22</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>24</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>25</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>26</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>27</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>28</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>703  6</main-classification>
<further-classification>715212</further-classification>
</classification-national>
<invention-title id="d2e53">Spreadsheet-based graphical user interface for modeling of products using the systems engineering process</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6535861</doc-number>
<kind>B1</kind>
<name>O'Connor et al.</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6779151</doc-number>
<kind>B2</kind>
<name>Cahill et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6883161</doc-number>
<kind>B1</kind>
<name>Chovin et al.</name>
<date>20050400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7490031</doc-number>
<kind>B1</kind>
<name>Qiu</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7624372</doc-number>
<kind>B1</kind>
<name>Stewart</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0101391</doc-number>
<kind>A1</kind>
<name>Ulke et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0112123</doc-number>
<kind>A1</kind>
<name>Clark et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0282818</doc-number>
<kind>A1</kind>
<name>DeSpain</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0219956</doc-number>
<kind>A1</kind>
<name>Milton</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0098349</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717106</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2008/0256508</doc-number>
<kind>A1</kind>
<name>Jonsson</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0241089</doc-number>
<kind>A1</kind>
<name>Ramamoorthy et al.</name>
<date>20090900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>El-Hajj, Ali et al., &#x201c;On Using Spreadsheets for Logic Networks Simulation&#x201d;, Nov. 1998, IEEE Transactions on Education, vol. 41, No. 4.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>Dos Santos, Walter A. et al., &#x201c;A Knowledge-Based and Model-Driven Requirements Engineering Approach to Conceptual Satellite Design&#x201d;, 2009, Springer-Verlag Berlin Heidelberg.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Mozier, Jonathan D. et al., &#x201c;A Formal but Non-Automated Method to Test the Sensitivity of Systems Dynamics Models&#x201d;, Jun. 21, 2001.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Kempkens, Ralf et al., &#x201c;Instrumenting Measurement Programs with Tools&#x201d;, 2000, Springer-Verlag Berlin Heidelberg.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Mahr, Thomas, &#x201c;Pragmatic Approach to Model-Based Systems Engineering&#x201d; [online], Dec. 3, 2010, [retrieved on Sep. 12, 2012]. Retrieved from the internet; &#x3c;URL: ** &#x3e; http://www.ohm-hochschule.de/institutionen/fakultaeten/elektrotechnik-feinwerktechnik-informationstechnik/1/prof-dr-mahr/prof-dr-mahr/modellbasierte-entwicklung/page.html&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>InterCax, &#x201c;ParaMagic v16.6, sp1 Users Guide&#x201d;, Sep. 9, 2010, InterCax LLC.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>Hause et al., &#x201c;An Overview of Systems Modeling Language&#x201d;, Dec. 14, 2005, retrieved from the internet: &#x3c;http://www.embedded.com/design/prototyping-and-development/4006498/An-overview-of-Systems-Modeling-Language&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>Sparx Systems PTY. LTD., SysML MDG Technology, available at http://www.sparxsystems.com/products/mdg/tech/sysml/index.html. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00021">
<othercit>No Magic, Inc., MagicDraw: Architecture Made Simple, available at https://www.magicdraw.com/sysml. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00022">
<othercit>Altova, SysML for Embedded Systems Modeling, available at http://www.altova.com/umodel/sysml.html. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00023">
<othercit>IBM, Rational Rhapsody Developer, available at http://www-01.ibm.com/software/rational/products/rhapsody/developer/. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00024">
<othercit>Atego, Artisan Studio, available at http://www.atego.com/products/artisan-studio/. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00025">
<othercit>Embedded Plus Engineering, What is OMG SysML?, available at http://www.atego.com/products/artisan-studio/. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00026">
<othercit>IBM, Rational Software Architect Family, available at http://www-01.ibm.com/software/awdtools/swarchitect. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00027">
<othercit>No Magic, Inc., Cameo Simulation Toolkit, available at http://www.magicdraw.com/simulation. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00028">
<othercit>Intercax LLC, SysML and MBSE Training, available at http://www.intercax.com/services/sysml-mbse-training/. Retrieved Aug. 27, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00029">
<othercit>El-Hajj, Ali et al., &#x201c;On Using Spreadsheets for Logic Networks Simulation,&#x201d; Nov. 1998, IEEE Transactions on Education, vol. 41, No. 4.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00030">
<othercit>Bluttman, Ken et al., &#x201c;Microsoft Office Excel 2007 Formulas &#x26; Functions for Dummies,&#x201d; 2007, Wiley Publishing, Inc., pp. 38-39, 46, 48, 75.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00031">
<othercit>PlanMaker, &#x201c;Manual: PlanMaker 2006,&#x201d; 2006, SoftMaker Software GmbH, pp. 19, 245-246.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00032">
<othercit>El-Hajj, Ali et al., &#x201c;A Spreadsheet Simulation of Logic Networks,&#x201d; Feb. 1991, IEEE Transactions on Education, vol. 34, No. 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00033">
<othercit>Bissett, Brian D., &#x201c;Automated Data Analysis Using Excel,&#x201d; 2007, Taylor &#x26; Francis Group, LLC, pp. 175-178.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>703  6</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715212</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>21</number-of-drawing-sheets>
<number-of-figures>21</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120226967</doc-number>
<kind>A1</kind>
<date>20120906</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Oh</last-name>
<first-name>Kong Ping</first-name>
<address>
<city>Troy</city>
<state>MI</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Oh</last-name>
<first-name>Kong Ping</first-name>
<address>
<city>Troy</city>
<state>MI</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Condo Roccia LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>XLDYN, LLC</orgname>
<role>02</role>
<address>
<city>Brighton</city>
<state>MI</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Shah</last-name>
<first-name>Kamini S</first-name>
<department>2123</department>
</primary-examiner>
<assistant-examiner>
<last-name>Johnson</last-name>
<first-name>Cedric D</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A spreadsheet environment is used as a graphical user interface for depicting and interacting with the various aspects of a system. In particular, the spreadsheet environment supports using OMG SysML to model a system and to execute tasks associated with the systems engineering process.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="88.22mm" wi="147.40mm" file="US08626477-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="213.87mm" wi="163.07mm" orientation="landscape" file="US08626477-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="145.63mm" wi="128.19mm" orientation="landscape" file="US08626477-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="172.97mm" wi="134.45mm" orientation="landscape" file="US08626477-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="185.67mm" wi="88.39mm" orientation="landscape" file="US08626477-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="96.86mm" wi="140.12mm" orientation="landscape" file="US08626477-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="101.68mm" wi="88.48mm" file="US08626477-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="152.57mm" wi="134.45mm" orientation="landscape" file="US08626477-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="182.96mm" wi="122.77mm" file="US08626477-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="118.96mm" wi="118.96mm" file="US08626477-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="153.25mm" wi="164.42mm" file="US08626477-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="149.27mm" wi="161.12mm" file="US08626477-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="123.95mm" wi="84.67mm" file="US08626477-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="171.96mm" wi="144.02mm" orientation="landscape" file="US08626477-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="150.96mm" wi="104.48mm" orientation="landscape" file="US08626477-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="126.83mm" wi="166.71mm" file="US08626477-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="118.96mm" wi="163.75mm" file="US08626477-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="152.23mm" wi="128.10mm" orientation="landscape" file="US08626477-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="123.87mm" wi="124.97mm" file="US08626477-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="130.81mm" wi="167.05mm" file="US08626477-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="141.99mm" wi="182.20mm" file="US08626477-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="183.81mm" wi="89.92mm" file="US08626477-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL BACKGROUND</heading>
<p id="p-0002" num="0001">The disclosure relates generally to computer-implemented modeling, simulation, and documentation of systems. More particularly, the disclosure relates to user interfaces for modeling, simulating, and documenting systems using a systems engineering process.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Systems Engineering (SE) is a disciplined process for developing products. Systems Engineering involves a number of sub-processes, which can be characterized as SE Management Processes or SE Technical Processes. SE Management Processes include project and resource planning, project review, and change control. SE Technical Processes include gathering customer input, defining product requirements and use scenarios, performing trade-off studies based on available technology and tools, and validating the design using established test and simulation plans. A variety of tools are available that support both SE Management Processes and SE Technical Processes. Some are meant for large enterprises with complicated products and product lines, while others are targeted at small businesses with a relatively small number of engineers and/or simpler product structure. Regardless of the target users a good SE tool should have an easy-to-use graphical interface to model the product or system. It should also have a model repository for persisting and managing product information, state of requirements, supporting change control and issue management, and allowing data entered in one view to be reflected in other views. A good SE tool should also seamlessly integrate models with tools used for performance evaluation, trade-off studies, and parameter optimization.</p>
<p id="p-0004" num="0003">Some tools, hereafter called Integrated Systems Engineering Environments (ISEEs), integrate modeling, data management, and simulation capabilities into one seamless environment. For exchanging information with the larger SE community, a good ISEE should also follow community standards where available. For Technical Processes, Object Management Group Systems Modeling Language (OMG SysML) is a standardized language for depicting different product aspects in the forms of diagrams. Those diagrams include, for example, a block definition diagram for depicting how the constituent parts are associated, a requirements diagram for how the product is expected to perform, and an internal block diagram, which shows the internal working of the product, e.g., how information flows between model elements.</p>
<p id="p-0005" num="0004">An example block definition diagram <b>200</b> is shown in <figref idref="DRAWINGS">FIG. 2</figref>. OMG SysML standards include abstract syntax, which defines the concepts in the language and how they are related, and concrete syntax, which specifies, e.g., what shapes to use for different diagram elements (rectangles <b>202</b>, arrowheads <b>204</b>, line styles, etc.), special delimiters and keywords, e.g., &#x3c;&#x3c;block&#x3e;&#x3e;, as well as acceptable abbreviation (bdd for block definition diagram). In addition to diagrams, the OMG SysML language also specifies tables, matrices and trees for depicting allocation and hierarchical relationships. OMG SysML specifications are available at http://www.sysml.org.</p>
<p id="p-0006" num="0005">Commercial products are available for modeling systems using the various diagram types specified in the OMG SysML language. Plug-ins to those products provide additional functionalities not specified by OMG SysML. Some plug-ins, for example, can validate system behavior by executing the models depicted in an activity diagram.</p>
<heading id="h-0003" level="1">SUMMARY OF THE DISCLOSURE</heading>
<p id="p-0007" num="0006">According to various example embodiments, a spreadsheet environment is used as a graphical user interface for depicting and interacting with the various aspects of a system. In particular, the spreadsheet environment supports using OMG SysML to model a system and to execute tasks associated with the systems engineering process.</p>
<p id="p-0008" num="0007">One embodiment is directed to a method of modeling a system comprising a plurality of components. A computer is used to provide a spreadsheet environment. Shape objects are defined within the spreadsheet environment. The shape objects represent the components of the system. At least one component is a subsystem comprising a plurality of elements. The spreadsheet environment is used to interact with a plurality of applications for working with the system and to generate a plurality of diagrams of the system in a graphical system modeling language, such as OMG SysML. The plurality of diagrams reflect a requirements view, an activities view, a hierarchical view, a parametric view, a component and subsystem interaction view, a state transition view, and a cross allocation view. The spreadsheet environment is used to diagram a plurality of system models for dynamic system simulation, process automation, and performance index calculations. A macro in the spreadsheet environment is used to perform at least one action on at least one of the system models. The system model is stored using a workbook in the spreadsheet environment, and can be used to simulate the system's behavior. This method may be implemented in a computer-readable storage medium or in a computer system.</p>
<p id="p-0009" num="0008">Because the spreadsheet environments are ubiquitous in the worlds of engineering and information technology, learning it as a tool will be relatively easy for systems engineering practitioners. More importantly, since OMG SysML diagrams are done with shapes in a spreadsheet environment, integration of those diagrams with other objects in the spreadsheet environment, such as pivot tables, cells, charts, hyperlinks, refedits, etc., provides a powerful combination that will improve an engineer's productivity. From a development viewpoint, using a spreadsheet environment as a platform allows the leverage of technology out of the box, such as security protection, privacy control, etc., that are common to Microsoft's OFFICE&#xae; productivity suite. Finally, developers can leverage the interoperability between the EXCEL&#xae; spreadsheet environment and the .Net framework, including Microsoft's Windows Communication Foundation and Windows Presentation Foundation, to provide attractive and effective user interfaces.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a computer system that can be programmed to implement various embodiments.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram illustrating a conventional block definition diagram used in connection with a systems modeling language.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating an example architecture of an ISEE according to one embodiment.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 3</figref><i>a </i>is a diagram illustrating an example user interface for interacting with an ISEE.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref><i>b </i>is a diagram illustrating an example palette for constructing a package diagram.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> is a diagram illustrating a shape in a spreadsheet environment having connection points.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> is a diagram illustrating a diagram frame defined as a combination of other shapes in a spreadsheet environment.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 6</figref> is a diagram illustrating a context-sensitive menu.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> is a diagram depicting a line with a text string attached to the line.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 8</figref> is a diagram illustrating an example block definition diagram.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> is a diagram illustrating an example block definition diagram for one of the components of the block definition diagram of <figref idref="DRAWINGS">FIG. 8</figref>.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> is a diagram illustrating an example tree control.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 10</figref><i>a </i>is a diagram depicting an example package diagram.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 11</figref> is a diagram illustrating an example parametric diagram.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 12</figref> illustrates an example internal block diagram (ibd) that is used to depict a simple system.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 13</figref> depicts an example system diagram that models a simple system.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 14</figref> depicts an example activity diagram that is equivalent to the system diagram of <figref idref="DRAWINGS">FIG. 13</figref>.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 15</figref> depicts an example internal block diagram incorporating a superblock.</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 16</figref> depicts an example activity diagram used for process automation.</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 17</figref> is a diagram illustrating an example table for specifying systems requirements.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 18</figref> is a flow diagram illustrating an example method for modeling a system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DESCRIPTION OF VARIOUS EMBODIMENTS</heading>
<p id="p-0031" num="0030">According to various embodiments, a spreadsheet environment, such as Microsoft's EXCEL&#xae; spreadsheet environment or OpenOffice.org Calc, is used as a graphical user interface (GUI) for depicting and interacting with the various aspects of a system. In particular, the spreadsheet environment supports using OMG SysML to model a system, and to execute tasks associated with the systems engineering process.</p>
<p id="p-0032" num="0031">Referring now to the drawings, <figref idref="DRAWINGS">FIG. 1</figref> is a block diagram illustrating a computer system <b>100</b> that can be programmed to implement various embodiments described herein. The computer system <b>100</b> is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the subject matter described herein. The computer system <b>100</b> should not be construed as having any dependency or requirement relating to any one component or combination of components shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0033" num="0032">The computer system <b>100</b> includes a general computing device, such as a computer <b>102</b>. Components of the computer <b>102</b> may include, without limitation, a processing unit <b>104</b>, a system memory <b>106</b>, and a system bus <b>108</b> that communicates data between the system memory <b>106</b>, the processing unit <b>104</b>, and other components of the computer <b>102</b>. The system bus <b>108</b> may incorporate any of a variety of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. These architectures include, without limitation, Industry Standard Architecture (ISA) bus, Enhanced ISA (EISA) bus, Micro Channel Architecture (MCA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus, also known as Mezzanine bus.</p>
<p id="p-0034" num="0033">The computer <b>102</b> also is typically configured to operate with one or more types of processor readable media or computer readable media, collectively referred to herein as &#x201c;processor readable media.&#x201d; Processor readable media includes any available media that can be accessed by the computer <b>102</b> and includes both volatile and non-volatile media, and removable and non-removable media. By way of example, and not limitation, processor readable media may include storage media and communication media. Storage media includes both volatile and non-volatile, and removable and non-removable media implemented in any method or technology for storage of information such as processor-readable instructions, data structures, program modules, or other data. Storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile discs (DVDs) or other optical disc storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by the computer <b>102</b>. Communication media typically embodies processor-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also intended to be included within the scope of processor readable media.</p>
<p id="p-0035" num="0034">The system memory <b>106</b> includes computer storage media in the form of volatile memory, non-volatile memory, or both, such as read only memory (ROM) <b>110</b> and random access memory (RAM) <b>112</b>. A basic input/output system (BIOS) <b>114</b> contains the basic routines that facilitate the transfer of information between components of the computer <b>102</b>, for example, during start-up. The BIOS <b>114</b> is typically stored in ROM <b>110</b>. RAM <b>112</b> typically includes data, such as program modules, that are immediately accessible to or presently operated on by the processing unit <b>104</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 1</figref> depicts an operating system <b>116</b>, application programs <b>118</b>, other program modules <b>120</b>, and program data <b>122</b> as being stored in RAM <b>112</b>.</p>
<p id="p-0036" num="0035">The computer <b>102</b> may also include other removable or non-removable, volatile or non-volatile computer storage media. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 1</figref> illustrates a hard disk drive <b>124</b> that communicates with the system bus <b>108</b> via a non-removable memory interface <b>126</b> and that reads from or writes to a non-removable, non-volatile magnetic medium, a magnetic disk drive <b>128</b> that communicates with the system bus <b>108</b> via a removable memory interface <b>130</b> and that reads from or writes to a removable, non-volatile magnetic disk <b>132</b>, and an optical disk drive <b>134</b> that communicates with the system bus <b>108</b> via the interface <b>130</b> and that reads from or writes to a removable, non-volatile optical disk <b>136</b>, such as a CD-RW, a DVD-RW, or another optical medium. Other computer storage media that can be used in connection with the computer system <b>100</b> include, but are not limited to, flash memory, solid state RAM, solid state ROM, magnetic tape cassettes, digital video tape, etc.</p>
<p id="p-0037" num="0036">The devices and their associated computer storage media disclosed above and illustrated in <figref idref="DRAWINGS">FIG. 1</figref> provide storage of computer readable instructions, data structures, program modules, and other data that are used by the computer <b>102</b>. In <figref idref="DRAWINGS">FIG. 1</figref>, for example, the hard disk drive <b>124</b> is illustrated as storing an operating system <b>138</b>, application programs <b>140</b>, other program modules <b>142</b>, and program data <b>144</b>. These components can be the same as or different from the operating system <b>116</b>, the application programs <b>118</b>, the other program modules <b>120</b>, and the program data <b>122</b> that are stored in the RAM <b>112</b>. In any event, the components stored by the hard disk drive <b>124</b> are different copies from the components stored by the RAM <b>112</b>.</p>
<p id="p-0038" num="0037">A user may enter commands and information into the computer <b>102</b> using input devices, such as a keyboard <b>146</b> and a pointing device <b>148</b>, such as a mouse, trackball, or touch pad. Other input devices, which are not shown in <figref idref="DRAWINGS">FIG. 1</figref>, may include, for example, a microphone, a joystick, a game pad, a satellite dish, a scanner, a camera, or the like. These and other input devices may be connected to the processing unit <b>104</b> via a user input interface <b>150</b> that is connected to the system bus <b>108</b>. Alternatively, input devices can be connected to the processing unit <b>104</b> via other interface and bus structures, such as a parallel port, a game port, or a universal serial bus (USB).</p>
<p id="p-0039" num="0038">A graphics interface <b>152</b> can also be connected to the system bus <b>108</b>. One or more graphics processing units (GPUs) <b>154</b> may communicate with the graphics interface <b>152</b>. A monitor <b>156</b> or other type of display device is also connected to the system bus <b>108</b> via an interface, such as a video interface <b>158</b>, which may in turn communicate with video memory <b>160</b>. In addition to the monitor <b>156</b>, the computer system <b>100</b> may also include other peripheral output devices, such as speakers <b>162</b> and a printer <b>164</b>, which may be connected to the computer <b>102</b> through an output peripheral interface <b>166</b>.</p>
<p id="p-0040" num="0039">The computer <b>102</b> may operate in a networked or distributed computing environment using logical connections to one or more remote computers, such as a remote computer <b>168</b>. The remote computer <b>168</b> may be a personal computer, a server, a router, a network PC, a peer device, or another common network node, and may include many or all of the components disclosed above relative to the computer <b>102</b>. The logical connections depicted in <figref idref="DRAWINGS">FIG. 1</figref> include a local area network (LAN) <b>170</b> and a wide area network (WAN) <b>172</b>, but may also include other networks and buses. Such networking environments are common in homes, offices, enterprise-wide computer networks, intranets, and the Internet.</p>
<p id="p-0041" num="0040">When the computer <b>102</b> is used in a LAN networking environment, it may be connected to the LAN <b>170</b> through a wired or wireless network interface or adapter <b>174</b>. When used in a WAN networking environment, the computer <b>102</b> may include a modem <b>176</b> or other means for establishing communications over the WAN <b>172</b>, such as the Internet. The modem <b>176</b> may be internal or external to the computer <b>102</b> and may be connected to the system bus <b>108</b> via the user input interface <b>150</b> or another appropriate component. The modem <b>176</b> may be a cable or other broadband modem, a dial-up modem, a wireless modem, or any other suitable communication device. In a networked or distributed computing environment, program modules depicted as being stored in the computer <b>102</b> may be stored in a remote memory storage device associated with the remote computer <b>168</b>. For example, remote application programs may be stored in such a remote memory storage device. It will be appreciated that the network connections shown in <figref idref="DRAWINGS">FIG. 1</figref> are exemplary and that other means of establishing a communication link between the computer <b>102</b> and the remote computer <b>168</b> may be used.</p>
<p id="h-0006" num="0000">Installation of XLSE Add-In</p>
<p id="p-0042" num="0041">According to various example embodiments, a spreadsheet environment, such as Microsoft's EXCEL&#xae; spreadsheet environment or OpenOffice.org Calc, is used as a graphical user interface (GUI) for depicting and interacting with various aspects of a product. An add-in that provides additional features and functionalities, hereafter called the XLSE add-in, enables the EXCEL&#xae; spreadsheet environment to serve as an SE tool interface. The XLSE add-in can be written, for example, in Visual Basic for Applications (VBA), the macro editor shipped with every copy of the EXCEL&#xae; spreadsheet environment. Alternatively, the XLSE add-in can be developed using Microsoft Visual Studio (VS), which is integrated with the EXCEL&#xae; spreadsheet environment. Practitioners skilled in VBA or VS should be familiar with how the macros, scripts, and other language elements are constructed, packaged, and deployed to the user desktop. In addition, templates may be installed in each workbook that uses the XLSE add-in to store static information, such as version numbers and default values for simulation parameters. Templates may also be used to reduce coding in setting the appearance of commonly used worksheets. In the following description, numerous specific details are set forth in order to provide a thorough understanding of various embodiments. It will be apparent to one skilled in the art that some embodiments may be practiced without some or all of these specific details. In other instances, well known components and process steps have not been described in detail.</p>
<p id="h-0007" num="0000">Integrated Systems Engineering Environment (ISEE) Compared to Other System Types</p>
<p id="p-0043" num="0042">Spreadsheets have been used as a graphical user interface (GUI) for many purposes, including building applications, modeling workflow, modeling business processes, and modeling and simulating dynamic systems. Unlike these conventional applications, however, various embodiments described herein use a spreadsheet environment, such as the EXCEL&#xae; spreadsheet environment or OpenOffice.org Calc, as a GUI of an ISEE.</p>
<p id="p-0044" num="0043">Modeling and simulating a technical system differs substantially from simulating workflows, performing business analytics, and modeling and simulating dynamic systems in a number of ways. For example, the objective of simulating a dynamic system is to mimic the behavior of related physical or logical entities over time. This may be done, for example, to support system design and validation. Business analytics applications are concerned with collecting data over time, and do not mimic the behavior of systems having physical or logical components. Business analytics are often used in support of business decisions, such as when to buy or sell a stock or when to replenish a supply or a resource. Workflow simulators mimic the flow of work from one station to another in which human or machines are often involved, but the stations are generally not assumed to have characteristics or behaviors that change over time. Example applications of workflow simulators include, for example, calculating throughput, identifying bottlenecks in a workflow, and optimizing resource consumption.</p>
<p id="p-0045" num="0044">In contrast with dynamic systems, business analytics, and workflows, an ISEE is intended to support product development at the system through component levels. For example, using an ISEE, a systems engineer can decompose the functional requirements of a product and map them to the subsystems of candidate concept designs. High level design principles such as axiomatic design can be applied during this stage to improve performance robustness. Other factors, including cost and market segmentation, are often taken into account at this time. The system engineer can down-select to one or two design concepts by performing trade-off studies at the system level, and pass the concepts to a team of engineers for further development, including design drawing, detailing, performance simulation, and test. Alternatively, using set-based concurrent engineering, the system engineer may postpone concept down-selection and let several groups work on development issues at the same time as they converge on a solution. Performance scope can include various aspects of a product, ranging from noise and fuel economy that can be calculated by dynamic systems simulators, to perceived quality that can be determined by neural network modeling, to fit and finish that can be assessed by observation. Often the ISEE is used to support decisions while resolving conflicts among competing requirements. The model hierarchy in an ISEE should support drill down. For example, starting at the system level, the user should be able to view the requirement status (e.g., red, yellow, or green) in progressively increasing levels of detail. For instance, if the ISEE indicates that the requirement status of the system as a whole is red&#x2014;meaning that requirements have not been met&#x2014;the user should be able to see which subsystems or performance indicators cause the system's requirement status to be indicated as red. Similarly, if the ISEE indicates that the requirement status of a particular subsystem is red, the user should be able to see which components or performance indicators cause that subsystem's requirement status to be indicated as red. The modeling of a technical system from a systems engineering perspective is thus much broader in scope, deeper in model hierarchy, and longer in product life cycle when compared to business analytics, and workflow and dynamic system modeling and simulation.</p>
<p id="h-0008" num="0000">Overall ISEE System Architecture</p>
<p id="p-0046" num="0045">An ISEE is often a federated system of applications. That is, unlike a dynamic system simulator or workflow simulator, which tends to be a monolithic piece of software, an ISEE typically has an application that serves as the access point for modeling, as a system, the product and the resources and processes required to develop the product. It also is the access point to view and update a product's development status, and where appropriate, to initiate development work such as performing a simulation or a test, and ordering hardware. The ISEE typically includes other applications and other components, such as databases, that are needed in working with a system model. <figref idref="DRAWINGS">FIG. 3</figref> is a block diagram illustrating a high level view of an example architecture of an ISEE <b>300</b> according to one embodiment. The EXCEL&#xae; spreadsheet environment, enhanced with an XLSE add-in <b>302</b>, allows the user to author the diagrams that depict the various aspects of a product using the OMG SysML modeling language. The ISEE <b>300</b> also includes a dynamic system simulator (DSS) <b>304</b> and may include other performance simulation tools <b>306</b>. The ISEE <b>300</b>, particularly the XLSE add-in <b>302</b>, may access a number of databases, such as a requirements database <b>308</b>, a work database <b>310</b> for managing work requests and status, and a products database (PDM) <b>312</b>. These databases may be managed using respective database managers (DBMs) <b>314</b>, <b>316</b>, and <b>318</b>. In addition, the PDM <b>312</b> may be configured to work with a CAD system <b>320</b>. The XLSE add-in <b>302</b>, the DSS <b>304</b>, and the performance simulation tools <b>306</b> can be implemented as components of a process automation tool <b>326</b>. According to various embodiments, the EXCEL&#xae; spreadsheet environment, enhanced with the XLSE add-in <b>302</b>, is used to interact with various components of the federated system, such as the DSS <b>304</b>; the performance simulation tools <b>306</b>; the databases <b>308</b>, <b>310</b>, and <b>312</b>; the database managers <b>314</b>, <b>316</b>, and <b>318</b>; and/or the CAD system <b>320</b>. Usage of the databases as components of an ISEE is described in more detail later in this disclosure.</p>
<p id="p-0047" num="0046">In some embodiments, navigation aids built into the diagrams allow the user to view the model at different levels and from different perspectives. Moreover, macros linked to the diagrams can be used to perform tasks that are described in more detail later in this disclosure.</p>
<p id="h-0009" num="0000">Modeling a System Using the XLSE Add-In</p>
<p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. 18</figref> is a flow diagram illustrating at a high level a computer-implemented method <b>1800</b> for modeling a system. A computer is used to provide a spreadsheet environment. Shape objects are defined within the spreadsheet environment at a step <b>1802</b>. The shape objects represent the components of the system. At least one component is a subsystem comprising a plurality of elements. The spreadsheet environment is used to interact with a plurality of applications for working with the system at a step <b>1804</b> and to generate a plurality of views of the system in a graphical system modeling language, such as OMG SysML, at a step <b>1806</b>. The plurality of views include a requirements view, an activities view, a hierarchical view, a parametric view, and a component and subsystem interaction view as depicted in an internal block diagram and cross allocation table or view. A system model is generated at a step <b>1808</b> by using the spreadsheet environment to define relationships between the components of the system. At a step <b>1810</b>, the system model is stored using a workbook in the spreadsheet environment.</p>
<p id="p-0049" num="0048">Within the spreadsheet environment, a worksheet is used as a canvas for drawing OMG SysML diagrams. For drawing a diagram, the XLSE add-in augments native drawing functions in the spreadsheet environment by providing a set of command buttons, for example, in a Ribbon interface <b>330</b> of Microsoft's EXCEL&#xae; spreadsheet environment, as shown in <figref idref="DRAWINGS">FIG. 3</figref><i>a</i>. In this interface <b>330</b>, command buttons <b>332</b> within an XLSE tab <b>334</b> are mapped to OMG SysML diagram types. When one of the command buttons <b>332</b> is clicked, the XLSE add-in will display a palette of nodes and paths that are used in constructing the selected diagram type. In OMG SysML, the term node denotes a two dimensional object, such as a rectangle, and the term path denotes a line or an elbow. For example, <figref idref="DRAWINGS">FIG. 3</figref><i>b </i>illustrates an example palette <b>360</b> for constructing a package diagram. The palette <b>360</b> includes a simple rectangular block <b>362</b> as well as a containment path <b>364</b>, symbolized as a line with a circular crosshair at its end. In general, a menu will consist of OMG SysML modeling elements, namely, nodes, paths, tables, matrices, and trees. Dialogs may be presented to capture data such as block name and import aliases needed in drawing the model elements.</p>
<p id="p-0050" num="0049">To create a diagram, the user first selects various nodes from the aforementioned menus and palettes and connects them as needed with paths. For connecting a pair of nodes, the user first selects the pair and then clicks on the desired path. The XLSE add-in will connect the nodes with connectors that are native to the spreadsheet environment, such as lines and elbows. A dialog may be presented to capture additional data needed in drawing the path, e.g., import aliases. Alternatively, users can make the connections as one normally would with connectors, e.g., to fixed sites that are available in shapes in the spreadsheet environment, such as the four small rectangular midpoints <b>402</b> in the rectangle <b>400</b> shown in <figref idref="DRAWINGS">FIG. 4</figref>. In some versions of the spreadsheet environment, the midpoints <b>402</b> may appear, for example, as red dots when the end of a connector is brought to the vicinity of the shape <b>400</b>.</p>
<p id="p-0051" num="0050">However, in some cases the user may want to connect to a different location. Connecting to other locations can be facilitated by adding a small rectangle <b>404</b> that is then grouped with the node. The added rectangle <b>404</b> acts as a target for a path to connect to. It also provides a shape that can be pointed to by a connectorformat object in the EXCEL&#xae; spreadsheet environment. Since the native EXCEL&#xae; spreadsheet environment provides only a limited set of basic shapes, such as rectangles and ovals, many OMG SysML drawing elements need to be constructed as composites of basic shapes, i.e., by grouping and aligning basic shapes. For example, a diagram frame <b>500</b> shown in <figref idref="DRAWINGS">FIG. 5</figref> can be constructed from two basic shapes that are aligned at an upper left corner <b>502</b>. The rectangle <b>404</b> of <figref idref="DRAWINGS">FIG. 4</figref> facilitates establishing this alignment. Another example is the containment path <b>364</b> of <figref idref="DRAWINGS">FIG. 3</figref><i>b</i>, which can be drawn by joining a line with a crosshair.</p>
<p id="p-0052" num="0051">Macros may be used to automate diagram creation tasks. For example, after drawing the nodes and connecting the nodes with paths, the user can select a frame command <b>602</b> from a context sensitive menu <b>600</b> of <figref idref="DRAWINGS">FIG. 6</figref> to create a diagram frame of appropriate type and size to enclose the nodes and paths. Diagrams and model elements may be deleted and modified as shapes normally would be in the spreadsheet environment.</p>
<p id="p-0053" num="0052">Text strings are an integral part of OMG SysML drawing elements. Keywords with a fixed format in the interior of a shape, such as the abbreviation bdd in <figref idref="DRAWINGS">FIG. 5</figref>, can be inserted programatically. Variable strings to be supplied by the user can be entered manually after the shapes are drawn, or inserted programatically. Inserting variable strings programatically may require using dialogs to capture the required data.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 7</figref> depicts a line <b>700</b> with a text string <b>702</b> attached to the line <b>700</b>. Text strings attached to a line, such as the text string <b>702</b>, can be inserted programmatically into a textbox then grouped with the line <b>700</b>. A command button or a dialog may be used to toggle text visibility, which is useful in controlling the appearance of a diagram.</p>
<p id="p-0055" num="0054">Identifying the nodes that are connected to a path can facilitate using a diagram programmatically. This can be done by using the connectorformat object in conjunction with an endconnectedshape or beginconnectedshape. Alternatively, nodes that are connected to a path can be identified by comparing the x,y coordinates of a path's end point to the x,y location of the node's target location. For computational performance, it may be advantageous to save the connectivity information in a worksheet to reduce the need to recompute connectivity information.</p>
<p id="p-0056" num="0055">Tables and matrices may be added to diagrams in the form of spreadsheet ranges. Shapes and other icons that are not part of the model, such as command buttons and illustrative pictures, can be added to a worksheet to provide functionalities.</p>
<p id="h-0010" num="0000">Model Organization</p>
<p id="p-0057" num="0056">Model organization is important in providing a logical and efficient way to access and view the system from different perspectives. This is particularly true for complex products with many diagrams. Toward this end, the user may want to store the diagrams in various worksheets and workbooks. Hyperlinks strategically placed in nodes, paths, tables, and other model elements can then be used to traverse the model tree. For example, <figref idref="DRAWINGS">FIG. 8</figref> illustrates an example block definition diagram (bdd) <b>800</b> for a vehicle. The bdd <b>800</b> includes a Vehicle block <b>802</b>, a Power Source block <b>804</b>, a Transmission block <b>806</b>, and an Accessories block <b>808</b>. Clicking on the hyperlink attached to the Transmission block <b>808</b> in <figref idref="DRAWINGS">FIG. 8</figref> will activate a worksheet and bring another diagram representing the Transmission block <b>808</b> into view. <figref idref="DRAWINGS">FIG. 9</figref> illustrates an example block definition diagram (bdd) <b>900</b> representing the Transmission block <b>808</b>. The bdd <b>900</b> includes a Transmission block <b>902</b>, a Vehicle Body block <b>904</b>, a Final Drive block <b>906</b>, a Gear Case block <b>908</b>, a Torque Converter block <b>910</b>, and a Braking System block <b>912</b>. Hyperlinks attached to a Transmission block header <b>914</b> will close the workbook and return control to the higher level diagram, i.e., the bdd <b>800</b>.</p>
<p id="p-0058" num="0057">Hyperlinks can be inserted manually or programmatically using information in the package diagram, block definition diagram, and internal block diagram. Alternatively, for navigating the model, a tree control, such as a tree control <b>1000</b> shown in <figref idref="DRAWINGS">FIG. 10</figref>, may be displayed to the user when a Show Tree command button <b>336</b> in <figref idref="DRAWINGS">FIG. 3</figref><i>a </i>is clicked. Clicking on a leaf <b>1002</b> in <figref idref="DRAWINGS">FIG. 10</figref> will activate the worksheet containing the corresponding diagram. To determine the hierarchy required in constructing a model tree, one may, for example, use the element location and position depicted in a package diagram. <figref idref="DRAWINGS">FIG. 10</figref><i>a </i>illustrates an example package diagram <b>1020</b>. From the example package diagram <b>1020</b>, it can be deduced that blocks A, B, and Care children of block P, while blocks D<b>1</b> and D<b>2</b>, as children of block C, are grandchildren of block P. OMG SysML provides other ways of describing the hierarchy, e.g., using the containment path in a package diagram, or whole-part composition relationship in a structural diagram. Appropriate techniques can be developed for those alternative means of depicting a hierarchy.</p>
<p id="p-0059" num="0058">The physical organization of the workbooks is for the user to decide. For example, the user may want to group the diagrams by subsystems, e.g., powertrain in one workbook, and chassis in another. Diagrams in external workbooks may be imported using an OMG SysML import path. To facilitate access, file paths may be used as part of model element names.</p>
<p id="h-0011" num="0000">Usage of OMG SysML Models</p>
<p id="p-0060" num="0059">The various diagrams included in an OMG SysML models can be used to document a system, and as such, serve as a valuable communication tool. But the diagrams, particularly when drawn in a spreadsheet environment, may have other usages.</p>
<p id="p-0061" num="0060">As an example, variables in a system may be related by relatively simple equations. For example, the load on a vehicle can be estimated from the vehicle speed s as F=a+b*s+c*s<sup>2</sup>, where the coefficients a, b, and c are vehicle specific. The vehicle deceleration during coast-down on a flat terrain can in turn be calculated by Newton's law, a=f/m. In OMG SysML, the relationship among variables can be depicted with a parametric diagram. <figref idref="DRAWINGS">FIG. 11</figref> depicts an example parametric diagram <b>1100</b>. By mapping cells or ranges in a spreadsheet to the variables and setting the cell formulae to text extracted from textranges in rounded rectangles <b>1102</b> and <b>1104</b>, the calculation capabilities of the spreadsheet environment can be used to update the vehicle acceleration whenever any of the variables at inputs <b>1106</b>, <b>1108</b>, <b>1110</b>, <b>1112</b>, <b>1114</b>, and <b>1116</b> changes. Associated (linked) text strings in a block compartment and corresponding values in a requirement table can also be updated automatically.</p>
<p id="p-0062" num="0061">In some embodiments, information needed for performance simulation of dynamic systems may include what components are in the system, information relating to signal and energy flow between components, initial conditions, loading, and component properties. The information can be found in several diagram types, including:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0062">Block definition diagram (bdd), which shows the association of various system components, and may contain component properties in their value block compartments;</li>
        <li id="ul0002-0002" num="0063">Internal block diagram (ibd), which shows how components are connected and what items (energy, fluid, current, etc.) flow between blocks;</li>
        <li id="ul0002-0003" num="0064">Parametric diagram (par), which shows how variables are related, typically through equations;</li>
        <li id="ul0002-0004" num="0065">Activity diagram (act), which shows how one or more input variables are transformed into output; and</li>
        <li id="ul0002-0005" num="0066">State machine diagram (stm), which shows how entities transition from one state to the next as triggered by events.
<br/>
Each of these diagrams represents a corresponding model of the system. For instance, the state machine diagram represents a state machine model of the system.
</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0063" num="0067">To launch a dynamic system simulation, the user may create a simulation model from one or more aforementioned OMG SysML diagrams. The methods and algorithms for doing so depend on the dynamic systems simulator, otherwise called the solver. For example, for Modelica solvers, the XLSE add-in will recognize standard Modelica modeling components such as inertia, spring, resistor, etc. For Math Works' SIMULINK&#xae; software, the XLSE add-in needs to recognize similarly named components.</p>
<p id="p-0064" num="0068">Regardless of the target solver, the creation of the simulation model involves determining the components' connectivity. Methods for determining connectivity are well known to those of ordinary skill in the art. <figref idref="DRAWINGS">FIG. 12</figref> illustrates an example internal block diagram (ibd) <b>1200</b> that is used to depict a simple system. The ibd <b>1200</b> includes an Inertia block <b>1202</b>, a Spring block <b>1204</b>, and a Fixed block <b>1206</b>. The XLSE add-in creates a simulation model file that states, in essence, that the inertia is connected to the spring, which is in turn connected to fixed (ground). In addition to the component connectivity, the simulation model also specifies the component properties. For the example, the required properties are the inertia, the spring rate, and the initial velocity and displacement of the inertia. Component properties can be found in a block's value compartments (not shown in the example) of an ibd or bdd.</p>
<p id="p-0065" num="0069">Model elements such as inertia, spring, and fixed are not part of OMG SysML. Hence, the user needs to define them as user-defined classes that comform to the target solver requirements. For the Modelica solver, a workteam is defining a set of modeling classes, called the SysML4Modelica profile, which can be used by the systems engineering community. The methods and algorithms disclosed herein can be adapted to utilize the SysML4Modelica profile when it becomes available.</p>
<p id="p-0066" num="0070">State machines are sometimes appropriate in modeling and simulating a dynamic system in which parts of the system may be in one of several possible states. An example is a vehicle transmission system, which may be in neutral, reverse, or one of several forward driving gears. OMG SysML provides a set of standard graphical and textual notations for describing how change of gears occurs. Parsing algorithms can be developed that recognize the blocks associated with the states, as well as actions that are executed upon, e.g., entry or exit of a block. The algorithms are similar to those used in parsing the diagram for process automation, as described below in connection with <figref idref="DRAWINGS">FIG. 16</figref>. Information gleaned from parsing can be used in a dynamic system simulator that supports state machine, including Modelica and Math Works' STATEFLOW&#xae; software.</p>
<p id="p-0067" num="0071">A command button can be placed in a diagram for launching a simulation. After the simulation is completed, the results can be saved to the same workbook where the simulation was launched. The charting capabilities of the spreadsheet environment can be used to visualize the results.</p>
<p id="p-0068" num="0072">Key performance indices, such as fuel economy, can be written to a cell in a spreadsheet. The same numbers can be used to update the associated text strings in a block's value compartment, or a table in a linked requirement diagram. In some cases, a signal flow approach can be used to model a dynamic system. For example, <figref idref="DRAWINGS">FIG. 13</figref> depicts an example system diagram <b>1300</b> that models a simple system. In the simple model depicted by the system diagram <b>1300</b>, the spring displacement d is obtained by twice integrating the acceleration using integration blocks <b>1302</b>. The acceleration is in turn obtained by using Newton's law a=(f+kd)/m, where k is the spring rate, f is the externally applied force, and m is the inertia. A summation block <b>1304</b> adds f and kd, while a multiplier block <b>1306</b> multiplies the sum (f+kd) by 1/m. The OMG SysML activity diagram is suitable for modeling a dynamic system using the signal flow approach because it shows how input is transformed into output with actions and activity blocks. An equivalent activity diagram <b>1400</b> for the simple system is shown in <figref idref="DRAWINGS">FIG. 14</figref>. The appearances are remarkably similar. The activity diagram <b>1400</b> includes an input node <b>1402</b>, gain nodes <b>1404</b>, integrator nodes <b>1406</b>, and a summation node <b>1408</b>. Although the graphical notations in act and ibd diagrams are different, the algorithm for creating a simulation model from an act diagram is similar to that for ibd. Mainly, the algorithm deals with recognizing the nodes attached to a connector and interpreting the text strings and icons, such as the rakes in the lower right corner of the nodes, in the diagram.</p>
<p id="p-0069" num="0073">A block in an ibd or an act diagram may refer to a group of modeling elements, known as a superblock. <figref idref="DRAWINGS">FIG. 15</figref> shows a simple spring-mass system <b>1500</b> as a superblock <b>1502</b> that is connected to an external force f and a block d to display the displacement. Connecting a superblock to other modeling elements can be done with the help of a dialog or with the dual-window method disclosed in U.S. patent application Ser. No. 12/967,360, filed Dec. 14, 2010, and U.S. patent application Ser. No. 12/972,042, filed Dec. 17, 2010. The disclosures of both applications are incorporated herein in their entirety.</p>
<p id="p-0070" num="0074">In dynamic systems simulation, the solver may reside in the same computer as the spreadsheet environment, or in a remote location. The solver is indicated by the DSS block <b>304</b> of <figref idref="DRAWINGS">FIG. 3</figref>. The &#x201c;cloud&#x201d; with dashed line connecting the XLSE add-in <b>302</b> and the DSS block <b>304</b> indicates the solver may be a local client or in a remote server.</p>
<p id="p-0071" num="0075">In addition, OMG SysML models can be used to launch other product evaluation and validation tools. For example, lumped parameter models are appropriate for characterizing the behavior of dynamics systems in which physical variables such as temperatures, velocity, voltage, etc., are idealized to be concentrated at certain points in space. Details such as shapes, elastic properties, and the like do not enter into the equations. For calculating stresses, magnetic field strengths, velocity distribution around bluff body, etc., high-order methods such as the finite-element or finite-volume methods may be used. Such methods require, among other data, detailed description of the geometry, and in most cases, a remote server to perform resource-intensive calculations. These requirements are beyond what a spreadsheet can provide; a spreadsheet cannot perform resource-intensive calculations and cannot easily be used to create 2D or 3D finite-element models. In those cases, the metadata for, and the results from launching a finite-element or finite-volume simulation can be stored in a block's compartment. Automation script that resides in a remote server can then be triggered by a macro in the spreadsheet environment to prepare the simulation data, launch the simulation, monitor the run, and fetch and report back the results when the run completes. Simulation results include key indices that can be used to update table entries in a linked requirement diagram. Simulation results also include details that are too large to store in a spreadsheet. Those results can be stored in a remote server and be accessed as needed with file path stored in the spreadsheet. Launching other performance simulation tools is indicated in <figref idref="DRAWINGS">FIG. 3</figref> as the box <b>306</b> marked &#x201c;Others.&#x201d; The tools can include, but are not limited to, finite-element and finite-volume meshers and solvers as cited earlier, as well as computer aided design (CAD) software used for drawing and detailing parts, electrical and electronic system design software, knowledge based engineering tools that are often integrated with CAD software, multibody dynamics solvers and antiquated Disk Operating System (DOS) applications that work with command line input and text files.</p>
<p id="p-0072" num="0076">OMG SysML activity diagrams can be used for purposes other than modeling dynamic systems. For example, a number of related models can be run to produce an analysis report from data stored in external files or workbooks. <figref idref="DRAWINGS">FIG. 16</figref> shows an example activity diagram <b>1600</b> that can be used for process automation. Implementing process automation in the EXCEL&#xae; spreadsheet environment consists of launching macros linked to the actions depicted in the diagram when conditions are met. The concepts of tokens and pins in OMG SysML may be used to control the order of launching the macros.</p>
<p id="p-0073" num="0077">In the activity diagram <b>1600</b>, actions are represented by rectangles <b>1602</b> with rounded corners. Tokens are items, such as information or variables, that are passed between actions through pins <b>1604</b> and <b>1606</b>, which are the small rectangles attached to the outside of an action rectangle. Some pins <b>1604</b> are for input, while other pins <b>1606</b> are for output. A string may be appended to the name assigned by the spreadsheet environment to each pin to represent its state. For example, a &#x201c;no&#x201d; indicator, such as 0, signals that the token associated with the pin is not available or has not been received. A &#x201c;yes&#x201d; indicator, such as 1, signals the opposite.</p>
<p id="p-0074" num="0078">Process automation can be implemented as a do loop where the action blocks in an activity diagram are continuously checked for their readiness to launch. For a given action rectangle, the state of all its pins is initially 0. When the macro associated with an action rectangle <b>1602</b> completes execution successfully, its output pins <b>1606</b> are set to 1, i.e., the pin names are updated. Likewise, the input pins <b>1604</b> of the downstream action rectangles <b>1602</b> receiving the token are also set to 1, indicating tokens have been received. The downstream action rectangle <b>1602</b> will launch its macro when all of its input pins <b>1604</b> have a state of 1. The do loop is terminated when the last of the downstream action rectangles <b>1602</b> completes execution.</p>
<p id="p-0075" num="0079">OMG SysML also allows for control tokens to be passed between actions, and provides control nodes such as fork and join for routing the token flow. Those tokens and nodes can be handled using logical (if-then-else) constructs within the do loop.</p>
<p id="p-0076" num="0080">An action in an activity diagram may require a human actor, e.g., to perform a test or run a finite-element simulation in the absence of automation scripts. In those cases, a work request system may be used as an intermediary to accept work order from the XLSE add-in when the user clicks a command button, and to dispatch the order for execution by the appropriate work team. Such a work request system can be as simple as a set of scripts written in an e-mail system, for example, the OUTLOOK&#xae; e-mail client available from Microsoft Corporation. Results can be reported back as attachments when the work is done. Scripts in the OUTLOOK&#xae; e-mail client have the advantage that they can programmatically update the cells, shapes, and other objects in a workbook in the EXCEL&#xae; spreadsheet environment. Process automation is indicated in <figref idref="DRAWINGS">FIG. 3</figref> as the large rectangle with dashed line at reference numeral <b>326</b>.</p>
<p id="p-0077" num="0081">In some embodiments, systems requirements can be specified in OMG SysML in a graphical or tabular format. In a spreadsheet environment, the tabular format can be implemented by first inserting a table <b>1700</b> in a worksheet, and then inserting a diagram frame over the table, as shown in <figref idref="DRAWINGS">FIG. 17</figref>. Users will be able to leverage the capability of the EXCEL&#xae; spreadsheet environment to manipulate tabular data, such as pivot table, filter, row and column grouping, and in certain versions of the EXCEL&#xae; spreadsheet environment, slicers and sparklines. Moreover, cell values can be updated programatically as a result of doing a performance evaluation either as an isolated event, or as part of conducting a process automation.</p>
<p id="p-0078" num="0082">OMG SysML provides various ways, called cross-cutting constructs, to show dependency between system components. For example, a dashed arrow with an appropriate keyword such as &#x3c;&#x3c;satisfy&#x3e;&#x3e; or &#x3c;&#x3c;copy&#x3e;&#x3e; can be used to indicate a relationship between two components. Alternatively, a keyword and name of component, such as satisfiedBy &#x3c;&#x3c;block&#x3e;&#x3e; xyz, may be in a block compartment to indicate the dependency. To programmatically update a requirement table, a macro can be written that parses the aforementioned cross-cutting constructs in a requirement diagram for test cases and related activities which in turn are mapped to launchable performance evaluation processes. The macro will also parse for cell locations and text ranges that need to be updated. Alternatively, where only a tabular format is used to depict the requirements, the macro can extract the required information from appropriate columns in the table.</p>
<p id="p-0079" num="0083">During project review, it is often desirable to have a high-level, compact view of the development status, i.e. whether a system and its subsystems are red, yellow, or green. Moreover, for a subsystem that has development issues, it is often desirable to be able to drill down for root causes and relevant technical information. For example, one may want to know the maximum stresses in a part that has been identified as the &#x201c;culprit.&#x201d; To enable requirement roll-up, where several performance indicators are compared to their target values and the deviations are combined to give an overall rating of red, yellow, or green, a macro can be written that uses the containment information in a requirement package diagram in combination with the constraint equations in a parametric diagram. The drill down also uses the same containment information, but uses the constraint equations in an inverse way.</p>
<p id="p-0080" num="0084">As disclosed above, the XLSE add-in can be used to initiate and manage work using, e.g., a simple email system and to subsequently update the requirements table. In many cases, the user community may want to store the results in a database to provide, for example, better access control and scability. To support that requirement, the XLSE add-in may use an intermediary work management application that not only initiates and tracks work orders and reports back results, but also optimizes work schedules and resources. Since such an application typically uses a database to persist data, the XLSE add-in may programmatically pull information from the database to update activity status in a process automation loop and table entries in a requirement diagram. The update may be triggered by events, such as receipt of a work completion notification. The external databases that XLSE works with are collectively called work databases, shown as the work database <b>310</b> of <figref idref="DRAWINGS">FIG. 3</figref>. Database managers (DBMs) <b>314</b>, <b>316</b>, and <b>318</b> are used to manage and provide alternative views into the databases.</p>
<p id="p-0081" num="0085">In addition to the work databases, the XLSE add-in may have to work with a product database <b>312</b>, which is often tightly integrated with a CAD system <b>320</b> used for detailed design and parts release, as shown in <figref idref="DRAWINGS">FIG. 3</figref>. The XLSE add-in may also have to work with a variety of other databases (not shown in <figref idref="DRAWINGS">FIG. 3</figref>) that contain material properties, historical usage data, customer preferences, etc. The principle of using an intermediary application to initiate and manage work remains the same, but the information passed to the XLSE add-in is different. For example, subjective ratings and results from lumped parameter models may be used in a neural network model to optimize vehicle content and configuration.</p>
<p id="p-0082" num="0086">The requirements database <b>308</b> of <figref idref="DRAWINGS">FIG. 3</figref> may be used to manage requirements. Information may be pulled from those systems in a similar fashion as with the product database <b>312</b>. In this regard, a database may be used to merge the external requirements with those contained in the XLSE add-in. Access to all databases may be made through ODBC connectivity of the spreadsheet environment. In this way, the database can be used as a model repository and can be synchronized with a workbook in the spreadsheet environment.</p>
<p id="p-0083" num="0087">Some spreadsheet environments can take advantage of productivity suite interoperability, which provides a consistent set of object models to all applications in the productivity suite, to enable programmatic creation of other documents in the productivity suite from the shapes and other objects contained in a workbook. For example, comment blocks in various diagrams can be scanned and their contents extracted to populate an analysis report. As another example, one may prefer to view the state of requirements of a particular subsystem in a presentation format. The information may be compiled programmatically by copying the relevant diagrams and annotation to a Microsoft POWERPOINT&#xae; presentation software file or a Portable Document Format (PDF) file and subsequently displaying the file in a Web browser. In addition, developers can take advantage of Office/SharePoint integration in Microsoft's OFFICE&#xae; productivity suite to provide functionalities such as check-in/check-out and version control that are advantageous in a collaboration environment.</p>
<p id="p-0084" num="0088">As demonstrated by the foregoing discussion, various embodiments may provide certain advantages, particularly in the context of modeling and simulating dynamic systems. For example, using a spreadsheet environment, such as Microsoft's EXCEL&#xae; spreadsheet environment, as a GUI for dynamic system simulation has a relatively quick learning curve and facilitates modeling and analyzing dynamic systems. The user can add instances of building blocks to the canvas and copy, cut, paste, connect, align, and distribute building blocks, all with familiar mouse and/or keyboard commands. Familiar commands can also be used to perform spell checking and other language-related functions, plot analysis results and create charts, write macros to automate modeling and simulation tasks, and access cell formulas.</p>
<p id="p-0085" num="0089">It will be understood by those who practice the embodiments described herein and those skilled in the art that various modifications and improvements may be made without departing from the spirit and scope of the disclosed embodiments. The scope of protection afforded is to be determined solely by the claims and by the breadth of interpretation allowed by law.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of modeling a system comprising a plurality of components, the method comprising:
<claim-text>using a computer to provide a spreadsheet environment comprising a plurality of workbooks, each workbook comprising a plurality of worksheets;</claim-text>
<claim-text>defining a plurality of shape objects within the spreadsheet environment, the shape objects representing the components of the system, each shape object having a component property comprising at least one of a spreadsheet environment-given name, a component type, a number of inputs and outputs, or parameters unique to the component type, wherein at least one component is a subsystem comprising a plurality of components, and wherein at least one shape object is a first superblock representing the subsystem, the components of the subsystem represented as a plurality of shape objects in a first worksheet of a workbook different from a second worksheet of the workbook in which other components of the system are represented, at least one shape object of the subsystem comprising a second superblock;</claim-text>
<claim-text>using a macro in the spreadsheet environment that provides user interface elements in the spreadsheet environment to manage the shape objects, relationships between the shape objects, and data associated with at least one of a dynamic system model, a business process model, or a workflow model in the spreadsheet environment, wherein at least one of the relationships between the shape objects comprises a connection between at least two shape objects defined using a graphic connector element having a property comprising respective identities of the at least two shape objects;</claim-text>
<claim-text>using the spreadsheet environment to interact with a federated system comprising a plurality of applications for working with the system;</claim-text>
<claim-text>using the spreadsheet environment in which the system model resides to model at least one of a dynamic system, a business process, or a workflow;</claim-text>
<claim-text>using the spreadsheet environment to generate a plurality of diagrams of the system or subsystem in a graphical system modeling language, the plurality of diagrams reflecting at least one of a requirements view, an activities view, a hierarchical view, a parametric view, a component and subsystem interaction view, a state transition view, or a cross allocation view;</claim-text>
<claim-text>in response to receiving a user input indicating activation of a diagram of the system or subsystem, executing an application of the federated system;</claim-text>
<claim-text>using the spreadsheet environment to diagram a plurality of system models and a plurality of subsystem models;</claim-text>
<claim-text>using a macro in the spreadsheet environment to perform at least one action on at least one of the system models or subsystem models to perform at least one of dynamic system simulation, process automation, and performance index calculations; and</claim-text>
<claim-text>using a simulation result to update a spreadsheet cell that is part of a tabular requirements diagram stored in the workbook.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one action is selected from conducting a simulation of the system model, simulating a dynamic system, automating a process, and calculating a performance index.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>defining a range within the spreadsheet environment; and</claim-text>
<claim-text>using the range to store at least one of a table and a value in the graphical system modeling language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>storing the system model in a database; and</claim-text>
<claim-text>synchronizing the database with the workbook in the spreadsheet environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising providing a tree control to navigate the components of the system.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>associating a hyperlink with a first shape object representing a first component of the system; and</claim-text>
<claim-text>in response to receiving a user selection of the hyperlink, invoking one of a product evaluation and validation tool and a worksheet corresponding to a second component of the system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the graphical system modeling language is OMG SysML.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A non-transitory computer readable storage medium storing instructions that, when executed by a computer, cause the computer to model a system comprising a plurality of components by:
<claim-text>using the computer to provide a spreadsheet environment comprising a plurality of workbooks, each workbook comprising a plurality of worksheets;</claim-text>
<claim-text>defining a plurality of shape objects within the spreadsheet environment, the shape objects representing the components of the system, each shape object having a component property comprising at least one of a spreadsheet environment-given name, a component type, a number of inputs and outputs, or parameters unique to the component type, wherein at least one component is a subsystem comprising a plurality of components, and wherein at least one shape object is a first superblock representing the subsystem, the components of the subsystem represented as a plurality of shape objects in a first worksheet of a workbook different from a second worksheet of the workbook in which other components of the system are represented, at least one shape object of the subsystem comprising a second superblock;</claim-text>
<claim-text>using a macro in the spreadsheet environment that provides user interface elements in the spreadsheet environment to manage the shape objects, relationships between the shape objects, and data associated with at least one of a dynamic system model, a business process model, or a workflow model in the spreadsheet environment, wherein at least one of the relationships between the shape objects comprises a connection between at least two shape objects defined using a graphic connector element having a property comprising respective identities of the at least two shape objects;</claim-text>
<claim-text>using the spreadsheet environment to generate a system model comprising a plurality of diagrams of the system or subsystem in a graphical system modeling language, the plurality of diagrams reflecting at least one of a requirements view, an activities view, a hierarchical view, a parametric view, a component and subsystem interaction view, a state transition view, or a cross allocation view;</claim-text>
<claim-text>using the spreadsheet environment in which the system model was generated to interact with a federated system comprising a plurality of applications for modeling a performance measure associated with the subsystem;</claim-text>
<claim-text>using the spreadsheet environment in which the system model was generated to model at least one of a dynamic system, a business process, or a workflow; and</claim-text>
<claim-text>in response to receiving a user input indicating activation of a diagram of the system, using a macro to execute at least one of a dynamic system model, a business process model, or a workflow model in the spreadsheet environment in which the system model was generated or an application of the federated system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the at least one action is selected from conducting a simulation of the system model, simulating a dynamic system, automating a process, and calculating a performance index.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, storing further instructions for:
<claim-text>defining a range within the spreadsheet environment; and</claim-text>
<claim-text>using the range to store at least one of a table and a value in the graphical system modeling language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, storing further instructions for:
<claim-text>storing the system model in a database; and</claim-text>
<claim-text>synchronizing the database with the workbook in the spreadsheet environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, storing further instructions for providing a tree control to navigate the components of the system.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, storing further instructions for:
<claim-text>associating a hyperlink with a first shape object representing a first component of the system; and</claim-text>
<claim-text>in response to receiving a user selection of the hyperlink, invoking one of a product evaluation and validation tool and a worksheet corresponding to a second component of the system.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the graphical system modeling language is OMG SysML.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer system comprising:
<claim-text>a processor configured to receive and to execute processor-executable instructions;</claim-text>
<claim-text>a memory device in communication with the processor and storing processor-executable instructions that, when executed by the processor, cause the processor to model a system comprising a plurality of components by
<claim-text>using the processor to provide a spreadsheet environment comprising a plurality of workbooks, each workbook comprising a plurality of worksheets;</claim-text>
<claim-text>defining a plurality of shape objects within the spreadsheet environment, the shape objects representing the components of the system, each shape object having a component property comprising at least one of a spreadsheet environment-given name, a component type, a number of inputs and outputs, or parameters unique to the component type, wherein at least one component is a subsystem comprising a plurality of components, and wherein at least one shape object is a first superblock representing the subsystem, the components of the subsystem represented as a plurality of shape objects in a first worksheet of a workbook different from a second worksheet of the workbook in which other components of the system are represented, at least one shape object of the subsystem comprising a second superblock;</claim-text>
<claim-text>using a macro in the spreadsheet environment that provides user interface elements in the spreadsheet environment to manage the shape objects, relationships between the shape objects, and data associated with at least one of a dynamic system model, a business process model, or a workflow model in the spreadsheet environment, wherein at least one of the relationships between the shape objects comprises a connection between at least two shape objects defined using a graphic connector element having a property comprising respective identities of the at least two shape objects;</claim-text>
<claim-text>using the spreadsheet environment to generate a system model comprising a plurality of diagrams of the system or subsystem in a graphical system modeling language, the plurality of diagrams reflecting at least one of a requirements view, an activities view, a hierarchical view, a parametric view, a component and subsystem interaction view, a state transition view, or a cross allocation view;</claim-text>
<claim-text>using the spreadsheet environment in which the system model was generated to interact with a federated system comprising a plurality of applications for determining a performance measure associated with the subsystem;</claim-text>
<claim-text>using the spreadsheet environment in which the system model was generated to model at least one of a dynamic system, a business process, or a workflow;</claim-text>
<claim-text>in response to receiving a user input indicating activation of a diagram of the system or subsystem, using a macro to execute at least one of a dynamic system model, a business process model, or a workflow model in the spreadsheet environment in which the system model was generated or an application of the federated system.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the at least one action is selected from conducting a simulation of the system model, simulating a dynamic system, automating a process, and calculating a performance index.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory device stores further instructions for:
<claim-text>defining a range within the spreadsheet environment; and</claim-text>
<claim-text>using the range to store at least one of a table and a value in the graphical system modeling language.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory device stores further instructions for:
<claim-text>storing the system model in a database; and</claim-text>
<claim-text>synchronizing the database with the workbook in the spreadsheet environment.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory device stores further instructions for providing a tree control to navigate the components of the system.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory device stores further instructions for:
<claim-text>associating a hyperlink with a first shape object representing a first component of the system; and</claim-text>
<claim-text>in response to receiving a user selection of the hyperlink, invoking one of a product evaluation and validation tool and a worksheet corresponding to a second component of the system. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

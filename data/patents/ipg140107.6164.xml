<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627288-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627288</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12507765</doc-number>
<date>20090722</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1075</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717124</main-classification>
</classification-national>
<invention-title id="d2e53">Method and system for web-site testing</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7069497</doc-number>
<kind>B1</kind>
<name>Desai</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715205</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2002/0097268</doc-number>
<kind>A1</kind>
<name>Dunn et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2003/0005044</doc-number>
<kind>A1</kind>
<name>Miller et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0162874</doc-number>
<kind>A1</kind>
<name>Woo et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2008/0275980</doc-number>
<kind>A1</kind>
<name>Hansen</name>
<date>20081100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709224</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>KR</country>
<doc-number>10 2002 0072028</doc-number>
<date>20020900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>29</number-of-drawing-sheets>
<number-of-figures>29</number-of-figures>
</figures>
<us-related-documents>
<us-provisional-application>
<document-id>
<country>US</country>
<doc-number>61135572</doc-number>
<date>20080722</date>
</document-id>
</us-provisional-application>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100064281</doc-number>
<kind>A1</kind>
<date>20100311</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kimball</last-name>
<first-name>Dean C.</first-name>
<address>
<city>Renton</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Crossley</last-name>
<first-name>Peter</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kimball</last-name>
<first-name>Dean C.</first-name>
<address>
<city>Renton</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Crossley</last-name>
<first-name>Peter</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Olympic Patent Works PLLC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Webtrends Inc.</orgname>
<role>02</role>
<address>
<city>Portland</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Tsai</last-name>
<first-name>Henry</first-name>
<department>2184</department>
</primary-examiner>
<assistant-examiner>
<last-name>Borromeo</last-name>
<first-name>Juanito</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Embodiments of the present invention are directed to methods and systems for testing web sites and web servers. In discussed embodiments of the present invention, a third-party testing service collects page-access and conversion information on behalf of a web site. The third-party testing service is straightforwardly configured through a user interface and is engaged for real-time, live statistics collection by means of simple modifications of HTML files served or provided to users by a web site.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="163.91mm" wi="207.69mm" file="US08627288-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="213.44mm" wi="162.05mm" orientation="landscape" file="US08627288-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="214.80mm" wi="177.46mm" orientation="landscape" file="US08627288-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="255.78mm" wi="174.84mm" orientation="landscape" file="US08627288-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="218.52mm" wi="168.40mm" file="US08627288-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="190.25mm" wi="163.41mm" orientation="landscape" file="US08627288-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="214.80mm" wi="165.18mm" orientation="landscape" file="US08627288-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="239.86mm" wi="154.35mm" file="US08627288-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="227.16mm" wi="162.98mm" orientation="landscape" file="US08627288-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="198.04mm" wi="173.91mm" file="US08627288-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="177.12mm" wi="147.49mm" orientation="landscape" file="US08627288-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="194.82mm" wi="171.20mm" orientation="landscape" file="US08627288-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="210.74mm" wi="166.62mm" orientation="landscape" file="US08627288-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="211.24mm" wi="166.20mm" orientation="landscape" file="US08627288-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="199.31mm" wi="164.34mm" orientation="landscape" file="US08627288-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="202.10mm" wi="159.34mm" orientation="landscape" file="US08627288-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="205.74mm" wi="169.33mm" orientation="landscape" file="US08627288-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="198.54mm" wi="167.47mm" orientation="landscape" file="US08627288-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="203.96mm" wi="162.48mm" orientation="landscape" file="US08627288-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00019" num="00019">
<img id="EMI-D00019" he="195.75mm" wi="161.04mm" orientation="landscape" file="US08627288-20140107-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00020" num="00020">
<img id="EMI-D00020" he="230.29mm" wi="166.20mm" file="US08627288-20140107-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00021" num="00021">
<img id="EMI-D00021" he="214.80mm" wi="156.55mm" file="US08627288-20140107-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00022" num="00022">
<img id="EMI-D00022" he="179.75mm" wi="120.14mm" file="US08627288-20140107-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00023" num="00023">
<img id="EMI-D00023" he="238.51mm" wi="131.57mm" file="US08627288-20140107-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00024" num="00024">
<img id="EMI-D00024" he="238.08mm" wi="85.60mm" file="US08627288-20140107-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00025" num="00025">
<img id="EMI-D00025" he="150.71mm" wi="127.42mm" file="US08627288-20140107-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00026" num="00026">
<img id="EMI-D00026" he="235.80mm" wi="102.87mm" file="US08627288-20140107-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00027" num="00027">
<img id="EMI-D00027" he="228.52mm" wi="91.52mm" file="US08627288-20140107-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00028" num="00028">
<img id="EMI-D00028" he="231.82mm" wi="175.85mm" orientation="landscape" file="US08627288-20140107-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00029" num="00029">
<img id="EMI-D00029" he="218.95mm" wi="151.55mm" file="US08627288-20140107-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading>
<p id="p-0002" num="0001">This application claims the benefit of Provisional Application No. 61/135,572, filed Jul. 22, 2008.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">The present invention is related to web sites and web-site-based businesses and organizations, and, in particular, to a method and system for testing a web site in order to collect data that can be subsequently used to evaluate and optimize the web site.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">During the past 20 years, the development of the hypertext markup language (&#x201c;HTML&#x201d;) and web browsers has led to the creation and development of whole new industries and businesses, including Internet retailing of goods and services, search-engine services, electronic encyclopedias, direct retailing and distribution of multi-media content and software, social-networking services, and a variety of additional industries and businesses. Many businesses are based on a web site, a collection of interlinked web pages that are provided to web-site users from a web server, generally one or more servers or higher-end computer systems that receive web-page requests from users via the Internet and respond to the requests by transmitting, to requesting users, HTML files that encode web pages displayed by browser applications executing on users' computers.</p>
<p id="p-0005" num="0004">The creation and maintenance of an effective web site may involve engineers and professionals of a number of different disciplines, including software engineers and web-page developers, artists, writers, and other content creators, and analysts who monitor a web site and evaluate the effectiveness of the web site on an on-going basis. As one example, an Internet retailer may spend millions of dollars in retailing web-site design and development, using teams of engineers, developers, and content creators, and may undertake continuous evaluation of retail results associated with a retailing web site, using marketing professionals and other analysts, in order to attempt to identify potential changes to the web site that can be fed back to the designers and content creators in order to optimize the web site with respect to specific goals and constraints. For an Internet retailer, the total amount of sales generated from a retailing web site, the overall number of visitors who navigate past the home page of a website, the number of redirections to allied web sites using links provided on pages of the web site, and many other metrics may comprise the goals for web-site optimization. Constraints may include human and financial resources needed to effect the changes to the web site, the time needed to make the changes, compatibility of added features with widely used browsers and browser plug-in programs, and many other such constraints.</p>
<p id="p-0006" num="0005">As with any type of live or run-time testing, testing undertaken by marketing professionals and analysts may represent, to a web-site-based business or information service, large expenditures in money, time, and other resources. Furthermore, live testing may unintentionally negatively impact the web site, by creating unintended interruptions, errors, and access delays for customers. Costs and potential liabilities of web-site testing may therefore constitute a significant additional constraint for web-site optimization. For this reason, web-site developers and owners seek cost-effective, time-and-resource-economical, and minimally intrusive methods and systems for web-site testing that can provide a sound statistical basis for web-site analysis and optimization.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">Embodiments of the present invention are directed to methods and systems for testing web sites. In certain embodiments of the present invention, a testing service collects customer page-access and conversion information on behalf of a web site. The testing service is straightforwardly accessed and configured, through a web-site-based user interface, and is virtually incorporated into the web site by simple HTML-file modifications.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 1</figref> provides a context for discussion of method and system embodiments of the present invention.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 2</figref> shows a simple, exemplary web page.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 3</figref> shows the contents of an HTML file that encodes the exemplary web page shown in <figref idref="DRAWINGS">FIG. 2</figref> and that includes simple modifications according to embodiments of the present invention.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 4</figref> provides a tree-like representation of the contents of the exemplary HTML file shown in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a simple web site comprising seven web pages.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. 6-7</figref> illustrate factors, factor levels, and test design according to embodiments of the present invention.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 8</figref> illustrates the concept of segments in testing of web pages.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 9</figref> illustrates the data and data structures that define tests, test runs, and experiments according to embodiments of the present invention.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 10</figref> illustrates the nature of the statistics, or test results, that are collected for a particular test run according to embodiments of the present invention.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 11</figref> illustrates the testing environment used by certain method and system embodiments of the present invention to carry out web-site testing.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. 12A-H</figref> illustrate the general method and system for web-site testing that represents one embodiment of the present invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. 13A-H</figref> provide control-flow diagrams for a web-site testing service that represents one embodiment of the present invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 14</figref> shows the HTML modifications used to virtually incorporate a testing service that represents one embodiment of the present invention into a web site.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 15</figref> provides an exemplary script library downloaded service that represents one embodiment of the present invention by a testing into a web-site server.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0022" num="0021">Certain embodiments of the present invention are directed to live, real-time testing of a web site. There are many different types of web sites and web-site servers that can be tested by method and system embodiments of the present invention. In the following discussion, a generalized web site is tested by a described embodiment of the present invention. It should be noted, at the onset, that method and system embodiments of the present invention are not restricted to a particular class or type of web sites, but are generally applicable to a wide variety of different types of web sites and web-site based businesses and organizations. For example, embodiments of the present invention can be applied to test and to analyze the effectiveness of an Internet-commerce web site, but can also be applied to non-commercial information-distribution web sites, including on-line encyclopedias, to non-commercial social-networking web sites, to search-engine service providers, and many other types of web sites and web-site-based businesses. It should also be noted, at the onset, that the method and system embodiments of the present invention are primarily directed to minimally-intrusive, cost-effective, and time-and resource-efficient live, on-line experimentation and statistics collection. The statistics and data collected by method and system embodiments of the present invention can be subsequently analyzed by a variety of different analytics packages in order to generate various types of reports that provide information to web sites that can be used for optimization. The analytical analysis and reporting may be executed on the testing service computer facilities, or on remote computing facilities. Method and system embodiments of the present invention also provide time-efficient and cost-efficient test design and test implementation.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 1</figref> provides a context for discussion of method and system embodiments of the present invention. In <figref idref="DRAWINGS">FIG. 1</figref>, a server <b>102</b>, comprising one or more servers and/or other types of computer systems, transmits HTML-encoded web pages through the Internet <b>104</b> to a large number of user or customer computers, including as user computer <b>106</b>. As discussed above, the web server may be owned and operated by an Internet retailing organization, an information-distribution system, a social-networking system, or another type Internet-based transactional or content-distribution system. In general, the web server runs continuously, at all times during the day and night, providing HTML-encoded web pages and, usually, additional types of information and services, including downloads of executable code, scripts, and other such information for specific types of web-based applications.</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 2</figref> shows a simple, exemplary web page. A web page is described by an HTML file, discussed below, which is processed by a web browser executing on a computer in order to generate a web page, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, that is displayed to a user on a display device. The exemplary web page <b>202</b> includes a headline graphic <b>204</b>, an offer graphic <b>206</b>, a hero graphic <b>208</b>, and a button graphic <b>210</b>. The exemplary web page is subsequently discussed in the context of tests and experiments in which altered versions of the web page are provided to users of the web server that serves the web page in order to test the effects of modifications to the web page.</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3</figref> shows the contents of an HTML file that encodes the exemplary web page shown in <figref idref="DRAWINGS">FIG. 2</figref> and that includes simple modifications according to embodiments of the present invention. The modifications, used to virtually incorporate a testing service into a website, according to one embodiment of the present invention, are discussed below, with reference to <figref idref="DRAWINGS">FIG. 14</figref>.</p>
<p id="p-0026" num="0025">A complete discussion of HTML is beyond the scope of the current discussion. In <figref idref="DRAWINGS">FIG. 3</figref>, portions of the HTML file are correlated with features in the displayed web page shown in <figref idref="DRAWINGS">FIG. 2</figref>. In addition, general features of HTML are illustrated in <figref idref="DRAWINGS">FIG. 3</figref>. HTML is hierarchical, in nature. In <figref idref="DRAWINGS">FIG. 3</figref>, double-headed arrows, such as double-headed arrow <b>302</b>, have been drawn to the left of the HTML code in order to illustrate tags and tag scoping within the HTML file. In general, HTML statements are delimited by a pair tags, and are hierarchically organized by scope. For example, an outermost statement begins with a first tag of a tag pair that begins with the text &#x201c;&#x3c;html&#xd7;mlns=&#x201d; (<b>304</b> in <figref idref="DRAWINGS">FIG. 3</figref>) and ends with a last tag of the tag pair that begins with the text &#x201c;&#x3c;/HTML&#x201d; (<b>306</b> in <figref idref="DRAWINGS">FIG. 3</figref>). The scope of outermost statement encompasses the entire HTML code. The double-headed arrow <b>302</b> at the left of the HTML code, which represents the scope of this statement, spans the entire HTML file. A second-level that begins with the first tag of a tag pair &#x201c;&#x3c;head&#x3e;&#x201d; <b>308</b> and ends with the last tag of the tag pair &#x201c;&#x3c;/head&#x3e;&#x201d; <b>310</b> spans a first portion of the HTML file, as indicated by double-headed arrow <b>312</b>, and a second statement bounded by the first and last tags of a tag pair &#x201c;&#x3c;body&#x3e;&#x201d; <b>314</b> and &#x201c;&#x3c;/body&#x3e;&#x201d; <b>316</b> span a second portion of the HTML file, indicated by double-headed arrow <b>318</b>. By examining the tags within the exemplary HTML file, shown in <figref idref="DRAWINGS">FIG. 3</figref>, and the double-headed indications of the scope of tag-delimited statements, the hierarchical nature of HTML can be readily appreciated.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 4</figref> provides a tree-like representation of the contents of the exemplary HTML file shown in <figref idref="DRAWINGS">FIG. 3</figref>. The tree <b>402</b> shown in <figref idref="DRAWINGS">FIG. 4</figref> is constructed from the double-headed arrows that annotate the HTML code, in <figref idref="DRAWINGS">FIG. 3</figref>, that span the scopes tag-delimited statements in the exemplary HTML file. For example, the root node <b>404</b> corresponds to double-headed arrow <b>302</b>, and the second level &#x201c;head&#x201d; <b>406</b> and &#x201c;body&#x201d; <b>408</b> nodes correspond to double-headed arrows <b>312</b> and <b>318</b> in <figref idref="DRAWINGS">FIG. 3</figref>, respectively. Note that, at the very bottom of the tree representation of the HTML file, shown in <figref idref="DRAWINGS">FIG. 4</figref>, the four leaf nodes <b>416</b>-<b>419</b> represent the four features <b>204</b>, <b>206</b>, <b>208</b>, and <b>210</b> of the displayed web page encoded by the exemplary HTML file, shown in <figref idref="DRAWINGS">FIG. 2</figref>. Each of these nodes is essentially a reference to an image file that contains a jpeg image of the corresponding web-page feature. The head statement, represented by node <b>406</b> in <figref idref="DRAWINGS">FIG. 4</figref>, includes formatting information, references to highest-level resource-location directories, and a great deal of additional information that is used by a browser to plan construction of a displayed web page. The body statement, represented by node <b>408</b> in <figref idref="DRAWINGS">FIG. 4</figref>, includes references to image files, text, and other features that are rendered by the browser into displayed features of the web page. Intermediate nodes include identifiers, particular met-data information, and references to scripts that are downloaded and run by the web browser during web-page rendering and/or display.</p>
<p id="p-0028" num="0027">As a specific example, node <b>416</b>, a direct and only descendant of the node labeled &#x201c;headline&#x201d; <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref>, corresponds to the headline feature <b>204</b> displayed in the exemplary web page shown in <figref idref="DRAWINGS">FIG. 2</figref>. This node also corresponds to double-headed arrow <b>320</b> in <figref idref="DRAWINGS">FIG. 3</figref>. The statement &#x201c;&#x3c;img src=&#x201c;images/demo_site_hd_green.jpg&#x201d; indicates that the displayed object is encoded as a jpeg image &#x201c;demo_site_offer_green.jpg&#x201d; that can be found in a file-system sub-directory &#x201c;images.&#x201d;</p>
<p id="p-0029" num="0028">In order to transform an HTML file into a displayed web page, a web browser constructs a tree-like binary-encoded data object referred to as a &#x201c;document object model&#x201d; (&#x201c;DOM.&#x201d;) The exact contents and structure of a DOM is beyond the scope of the present invention. However, method and system embodiments of the present invention rely on standardized DOM-editing interfaces that provide routines to identify nodes and subtrees within a DOM and to edit and modify identified nodes and subtrees. Once a browser has created a DOM from the exemplary HTML file shown in <figref idref="DRAWINGS">FIG. 3</figref>, DOM-editing routines can be used to locate the node in the DOM corresponding to the node &#x201c;headline&#x201d; <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref> and replace or modify that node to reference a different image. Following modification, the web browser would then display a modified web page in which the headline image <b>204</b> in <figref idref="DRAWINGS">FIG. 2</figref> is replaced by a different image. To effect more dramatic changes, an entire subtree of a DOM, such as the subtree rooted by a node corresponding to the node &#x201c;right&#x201d; <b>420</b>, can be removed or replaced, to change groups of display features. While the embodiment of the present invention, discussed below, uses DOM tree modification techniques, other types of modification techniques provided by interfaces to other types of binary representations of web pages may be used, in alternative embodiments of the present invention. The DOM is only one of many possible binary representations that may be constructed and employed by web browsers.</p>
<p id="p-0030" num="0029">Another feature of the exemplary HTML file shown in <figref idref="DRAWINGS">FIG. 3</figref> is that the various features displayed in <figref idref="DRAWINGS">FIG. 2</figref> are, in HTML, wrapped by tag-delimited identifiers. For example, the &#x201c;wm_headline&#x201d; tag indicated by double-headed arrow <b>320</b> and by node <b>410</b> in <figref idref="DRAWINGS">FIG. 4</figref> is an identifier for the headline-image-reference statement <b>322</b>. Alphanumeric identifiers, such as the identifier &#x201c;wm_headline,&#x201d; are introduced into an HTML file in order to give easy-to-understand and easy-to-use labels or handles for various objects, particularly objects that correspond to displayed features in a web page. Although objects can be easily identified in this manner, other methods for identifying objects within an HTML file, as well as corresponding nodes of DOM trees and other such binary representations of a rendered page, can be used to reference display objects.</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 5</figref> illustrates a simple web site comprising seven web pages. Each web page, such as web page <b>502</b>, is represented by a rectangle in <figref idref="DRAWINGS">FIG. 5</figref>. Curved arrows, such as curved arrow <b>504</b>, indicate navigational paths between the web pages. Accessing the web site illustrated in <figref idref="DRAWINGS">FIG. 5</figref>, a user generally first accesses a landing page <b>502</b> as a result of clicking a link provided by another web page, such as a web page provided by a search engine, or provided in a list of bookmarked links by a web browser. The landing page is often, but not necessarily, a home page for the website. A home page is a central portal for access to all of the remaining web pages in the web site. In general, a user navigates through the web site by clicking on displayed links embedded in web pages. For example, the web site illustrated in <figref idref="DRAWINGS">FIG. 5</figref> is a retailing web site. The landing page provides links to four different pages <b>510</b>-<b>513</b> that provide product descriptions for four different products. A user, after viewing the landing page <b>502</b>, may click a link in order to navigate to a display of a product-description page <b>510</b>. In the exemplary web site shown in <figref idref="DRAWINGS">FIG. 5</figref>, a user may subsequently navigate from a product-description page or product-details page to a central order page <b>520</b> that contains a button or feature <b>522</b> to which the user can input a mouse click in order to order one or more products. In certain cases, web sites may comprise a single page and, in other cases, a web site may comprise tens to hundreds or more pages, linked together in a network-like graph describing various navigational paths between web pages.</p>
<p id="p-0032" num="0031">An example application of web-site testing would be to monitor access, by users, of the web pages shown in <figref idref="DRAWINGS">FIG. 5</figref> in order to attempt to determine how often users end up navigating to the order page and clicking the place-order button <b>522</b>. One might then modify one or more of the pages, and again monitor users' access to the pages and subsequent input to the place-order button <b>522</b>. In this way, by testing collective user response various alternative web pages, web-site developers and managers may be able to determine an optimal set of web pages that provides the highest ratio of inputs to the place-order button <b>522</b> to user accesses of the landing page <b>502</b>. In testing parlance, clicking the place-order button <b>522</b>, in the exemplary web site shown in <figref idref="DRAWINGS">FIG. 5</figref>, is, in this example, considered to be a conversion event. One goal of optimizing the web site might be to increase the percentage of users clicking on the place-order button <b>522</b> after initially accessing the landing page <b>502</b>. However, conversion events may be arbitrarily defined, and there may be multiple conversion events for a particular web site. Optimization of a web site may also involve multiple, often at-least partially contradictory goals. One goal may be to increase the number of accesses to any page other than the landing page by users who have initially accessed the landing page. Another goal may be to increase total accesses to the landing page, regardless of subsequent page accesses by users accessing the landing page. Another goal may be to obtain maximum possible conversion rates, even at the expense of decreasing the overall rate of page accesses.</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. 6-7</figref> illustrate factors, factor levels, and test design according to embodiments of the present invention. In <figref idref="DRAWINGS">FIG. 6</figref>, an initial, prototype web page <b>602</b> is shown. A web-site owner or developer may decide to systematically alter the prototype web page in order to test the effects of the systematic alterations, so that alterations that appear to maximize goals can be made to the web page in order to optimize the web page. The prototype web page includes a portrait image <b>604</b>, a title <b>606</b>, a user-input feature <b>608</b>, and an informational message <b>610</b>. A systematic tester may decide to alter each of these web-page features, one-at-a-time, in order to determine the effects of the altered features on measured user response. For the web page shown in <figref idref="DRAWINGS">FIG. 6</figref>, the measured user response, or conversion event, would likely be user input to the user-input feature <b>608</b>. As shown in <figref idref="DRAWINGS">FIG. 6</figref>, a tester may devise a first test web page <b>611</b> in which the prototype image <b>604</b> is replaced with a different image <b>612</b>. The tester may devise a second test page <b>614</b> in which the title feature <b>606</b> is replaced with a different title feature <b>616</b>. Similarly, the tester may devise a third test page <b>620</b> in which the informational message <b>610</b> of the prototype web page is replaced with a different informational message <b>622</b>. Finally, the tester may create a fourth test web page <b>624</b> in which the user-input feature <b>608</b> of the prototype web page is replaced with a differently labeled user-input feature <b>626</b>. The systematic tester may change a single feature, in each of the four test pages, in order to judge the effect of changing that feature in isolation from any other changes to the web page that might be contemplated. However, the strictly one-feature-change-at-a-time method would fail to provide data for the effects of various combinations of changes, such as changing both the headline and a portrait and, moreover, would require significant developer time and effort.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a related approach to the testing approach discussed with reference to <figref idref="DRAWINGS">FIG. 6</figref> that represents one embodiment of the present invention. In <figref idref="DRAWINGS">FIG. 7</figref>, the tester has prepared a table of factors and factor levels. Each factor in the table is represented by a column, such as the first column <b>702</b> corresponding to factor <b>1</b>. Each factor is a feature, or group of related features, on a displayed web page that the tester wishes to alter in order to determine whether or not to alter the feature in order to optimize the web page with respect to one or more optimization goals. The various alternatives for each factor are referred to as levels. Thus, for example, factor <b>1</b>, represented in the table by column <b>702</b>, corresponds to the information message (<b>610</b> in <figref idref="DRAWINGS">FIG. 6</figref>), for which the tester has devised six different alternatives, each corresponding to one of six different levels associated with that factor. The tester has devised four alternatives for factor <b>2</b>, the title feature (<b>606</b> in <figref idref="DRAWINGS">FIG. 6</figref>), five alternatives for factor <b>3</b>, the portrait feature (<b>604</b> in <figref idref="DRAWINGS">FIG. 6</figref>), and five alternatives for the fourth factor, the user-input feature (<b>608</b> in <figref idref="DRAWINGS">FIG. 6</figref>). Then, having specified the factors, or web-page features, to be altered, and the various different alternatives for each feature, the tester might try generating all possible test pages corresponding to all possible combinations of level values for the factors in order to test the different alternative web pages to determine an optimal set of four levels corresponding to optimal alternatives for the four factors. Unfortunately, an exhaustive, combinatorial test, in most cases, is not feasible. Even for the very simple example of <figref idref="DRAWINGS">FIGS. 6 and 7</figref>, there are 1260 different alternative pages, including the prototype page, which can be constructed by varying between one and four factors according to the variations, or levels, provided in the table provided in <figref idref="DRAWINGS">FIG. 7</figref>. In general, for the statistics collected from testing to have significance, a sufficient number of tests need to be conducted so each of the different test pages is displayed a relatively large number of times during the test. In the example of <figref idref="DRAWINGS">FIGS. 6 and 7</figref>, each different alternative web page among the 1260 possible alternative web pages may need to be displayed hundreds or thousands of times to users in order to accumulate sufficient test data to make valid statistics-based judgments. In many cases, the number of factors and number of levels for each factor may be far larger than in the simple example shown in <figref idref="DRAWINGS">FIGS. 6 and 7</figref>.</p>
<p id="p-0035" num="0034">The variations of factors, or levels, may include changes in content, display size, display color, object position in the displayed image, or many other different types of changes. Again, as discussed above, a factor may include multiple display features.</p>
<p id="p-0036" num="0035">Because of the general infeasibility of full, exhaustive, combinatorial testing of all possible web-page variations, certain method and system embodiments of the present invention use an experimental-design method referred to as &#x201c;the orthogonal-array method.&#x201d; This method devises a non-exhaustive test strategy that nonetheless gathers sufficient, well-distributed test data in order to make reasonable inferences with regard to the effects of altering the factors in all possible ways. In essence, the orthogonal-array method involves devising a sparse sampling of all possible variations of the web page that provides information about the various dependencies between the different levels of the different features. The orthogonal-array method involves specifying the factors and specifying the levels for each factor for a particular test run, and then, based on the factors and levels for each factor to be tested in a particular test run, devises a set of alternative web pages, by varying the specified factors according to the specified levels, that provide a good basis for collecting statistics for the features to be tested. The orthogonal-array method is well known in testing and statistics. Many additional types of test-design methods may also be used. Whatever test-design technique is employed, each test run defined by clients is associated with a test design that controls generation and distribution of experiments, or modified web pages.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 8</figref> illustrates the concept of segments in testing of web pages. <figref idref="DRAWINGS">FIG. 8</figref> shows the web server and users of the web server using the same illustration conventions as used in <figref idref="DRAWINGS">FIG. 1</figref>. However, in <figref idref="DRAWINGS">FIG. 8</figref>, a first set of three users <b>802</b>-<b>804</b> are marked as belonging to a first segment, segment <b>1</b>, and a second set of three users <b>806</b>-<b>808</b> are marked as belonging to a second segment, segment <b>2</b>. During live, real-time testing of web sites, according to embodiments of the present invention, alternative versions of web pages are provided to subsets of the total number of users, or customers, accessing the web server. During a particular test run, altered web pages are provided to a specified segment of users. A segment of users, or customers, can be defined by any of a wide variety of different parameters. For example, a segment of users may be defined by the web page or link by which the users or customers navigated to a test page served by the web server. Segments may be defined by time periods, by the Internet domains through which users access the Internet, or by many other different criteria.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 9</figref> illustrates the data and data structures that define tests, test runs, and experiments according to embodiments of the present invention. A testing service may, at any given time, carry out a large number of different tests for many different client web-site-based organizations. Each test is defined by a test record, such as test record <b>902</b> in <figref idref="DRAWINGS">FIG. 9</figref>. Information contained in the test record includes an alphanumeric name of the test, an identifier for the client on behalf of whom the test has been created, a description of the test, an indication of the time that the test was created, an indication of the web page that is tested by the test, and a list of the factors that may be involved in any particular test run associated with the test. Note that the factors can be specified by the identifiers associated with features or objects displayed in the web page. For example, referring to <figref idref="DRAWINGS">FIGS. 2-4</figref>, a list of factors for a test of the exemplary web page shown in <figref idref="DRAWINGS">FIG. 2</figref> may include the alphanumeric strings: &#x201c;wm_headline,&#x201d; &#x201c;wm_hero,&#x201d; &#x201c;wm_offer,&#x201d; and &#x201c;wm_button.&#x201d;</p>
<p id="p-0039" num="0038">Any particular test may be carried out over a series of test runs. For example, each test run may be carried out at a different time, with respect to a different segment of users, and may test a different array of features and feature levels. Thus, each test record, such as test record <b>902</b> in <figref idref="DRAWINGS">FIG. 9</figref>, may be associated with one or more test-run records, such as test-run record <b>904</b> in <figref idref="DRAWINGS">FIG. 9</figref>. Test-run records include information such as the levels to be used for each factor, with the levels specified as URLs, or other references to images and other resources, or as text strings or other data directly displayed by the browser, a current state of the test run, a description of the segment to which the test run is directed, an indication of the particular orthogonal-array basis or other test design for the test run, and an indication of one or more conversion events for the test run. Finally, using the orthogonal-array basis or other test design selected for the test run, a test run is associated with a set of experiments, such as experiment <b>906</b> in <figref idref="DRAWINGS">FIG. 9</figref>. Each experiment corresponds to an altered web page that is displayed to users during the test run. An experiment is essentially defined by associating each factor, tested in the test run, with a particular level, or referenced resource, according to a matrix of test pages generated by the orthogonal-array basis or other test design selected for the test run.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 10</figref> illustrates the nature of the statistics, or test results, that are collected for a particular test run according to embodiments of the present invention. The results include indications of the test <b>1002</b> and test run <b>1004</b>, the date on which the test run was conducted <b>1006</b>, a start time and an end time for the test run <b>1008</b>-<b>1009</b>, and a reference <b>1010</b> to a results table <b>1012</b> in which test results are tabulated. The test results table includes a row for each experiment associated with the test run, such as row <b>1014</b> in experimental-results table <b>1012</b>. The row includes an indication of the experiment to which the row corresponds <b>1016</b>, a count of the number of the times that the page corresponding to the experiment was accessed by a user of an active segment <b>1018</b>, an indication of the number of times that a user who accessed the test page generated a corresponding conversion event <b>1020</b>, other similar numerical information in additional columns <b>1022</b>, and, finally, a computed conversion rate <b>1024</b> for each experiment. The test results shown in <figref idref="DRAWINGS">FIG. 10</figref> are but one example of the type of statistics and data that can be collected during a test run according to method and system embodiments of the present invention. Different or additional statistics may be collected by different embodiments of the present invention, or according to different test configurations created by test-service clients.</p>
<p id="p-0041" num="0040">There are many different possible ways of testing a web server in order to accumulate test results, discussed above with reference to <figref idref="DRAWINGS">FIG. 10</figref>, for tests defined for particular web pages and factors associated with those web pages, as discussed above with reference to <figref idref="DRAWINGS">FIG. 9</figref>. One method would require the web server to design a test by creating all or a subset of possible alternative test pages and to then develop a test-page-serving system that would execute concurrently with, or as part of, the web server on an intermittent or continuous basis. As discussed above, testing methods and systems that require the web server to develop and run tests may be prohibitively expensive, both in time and resources, for web-site owners or web-site-based organizations. Furthermore, such testing methods can inadvertently cause serious financial losses and other non-financial damage to a web site. For example, were the test pages improperly constructed or served, sales or other activities generated by real-time users may be lost and, in worst cases, the web site could potentially lose business from particular customers and users altogether. Real-time testing additionally involves significant security risks. A malicious hacker or employee might be able to alter the test system to display fraudulent or offensive test pages, for example. Finally, similar to problems encountered in a variety of physical and behavioral systems, poorly or improperly design tests may so perturb the system being tested that the statistics collected from the tests are meaningless or, in worst cases, lead to false conclusions. For example, a poorly designed test engine may introduce significant delays in web-page service to customers or users. As a result, the conversion rate measured during a test run may fall precipitously, not because of particular alterations made to test web pages, but instead because the significant time delay encountered by users for whom the test page is constructed and to whom the test web page is transmitted. For these, and many other reasons, web-site-based-organization test design and execution can be undesirable and, in worst cases, disruptive and damaging to the web-site-based organization.</p>
<p id="p-0042" num="0041">An alternative approach, to which method and system embodiments of the present invention are directed, involves using a third-party testing service, in tandem with the web server that serves the web site to be tested. However, simply conducting tests by a third-party server does not guarantee that the many pitfalls and disadvantages discussed above with respect to web-site-based-organization test design and execution are necessarily avoided. In fact, in many cases, the pitfalls and disadvantages discussed in the preceding paragraph may be exacerbated by third-party testing of web sites and web servers. For example, in the case that a test web page, requested by a customer, needs to be prepared by the third-party server, in response to a request generated by the web site as a result of a user request for the web page being tested, test-page serving may be significantly delayed, deleteriously perturbing the users' interaction with the web server to the point that the test statistics end up meaningless or misleading. As another example, security issues may be compounded by distributing testing tasks between a web-server computer system and a third-parting testing server. Method and system embodiments of the present invention employ an array of techniques and features that address these pitfalls and disadvantages, and that provide minimally intrusive and cost-effective testing for web sites and web servers.</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 11</figref> illustrates the testing environment used by certain method and system embodiments of the present invention to carry out web-site testing. In <figref idref="DRAWINGS">FIG. 11</figref>, the web site <b>1102</b> is represented as one or more servers or large computer systems that serve web pages through the Internet <b>1104</b> to a generally large number of web-site users or customers, including user <b>1106</b>. The web site or web server is regarded, in the following discussion, as a client web server of the testing service. The client web server also includes a client computer <b>1108</b> by which the client web-server-based organization can access various third-party services and web servers through the Internet. Finally, a web-site testing service is provided by, in the embodiment of the present invention shown in <figref idref="DRAWINGS">FIG. 11</figref>, a distinct server or servers <b>1110</b> accessible to the client web server <b>1102</b>, the web server customer <b>1106</b>, and client computer <b>1108</b> via the Internet <b>1104</b>.</p>
<p id="p-0044" num="0043">The testing service is used by the client web-site-based organization, referred to as the &#x201c;client,&#x201d; below, to design and run real-time, live tests of web pages provided by the client web server to users. In certain embodiments of the present invention, the testing service may run on the same computer systems as the client web server. In general, the testing service is geographically distinct from the client web server, and is concurrently used by multiple, different clients for concurrently executing many different test runs on behalf of the multiple clients.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIGS. 12A-H</figref> illustrate the general method and system for web-site testing that represents one embodiment of the present invention. <figref idref="DRAWINGS">FIGS. 12A-H</figref> all use the same illustration conventions, in which large rectangles represent the four entities shown in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0046" num="0045">A client establishes a relationship with the testing service, as shown in <figref idref="DRAWINGS">FIG. 12A</figref>, by accessing the testing service through a browser executing on the client computer. As shown in <figref idref="DRAWINGS">FIG. 12A</figref>, an employee or owner of the client web server uses the client computer <b>1202</b> to access a testing-service web site, via a browser <b>1204</b> running on the client computer, which allows the client web server to register as a client of the testing service. The testing service <b>1206</b> includes one or more databases <b>1208</b> and <b>1210</b> that store information used to construct library and key files that are downloaded to client web servers, store statistics collected during testing, and store various different data objects and records that describe clients, tests, test runs, experiments, and other data used to conduct web-site testing. The client web server <b>1212</b> serves a number of different web pages described by HTML files <b>1214</b> to users, represented by user <b>1216</b> who access the web pages served by the client-web server through a browser <b>1218</b> running on the customer computer <b>1216</b>. The testing service and client web server additionally include web-server engines, application programs, and other components of servers and computer systems (<b>1215</b> and <b>121</b> in <figref idref="DRAWINGS">FIG. 12A</figref>).</p>
<p id="p-0047" num="0046">As shown in <figref idref="DRAWINGS">FIG. 12B</figref>, the client carries out a dialog <b>1220</b> with the testing service in order to provide the testing service with information about the client that allows the testing service to prepare a client record or records <b>1222</b> that describe the client and to store the client record or records in the database. In addition, the testing service may undertake various authorization and authentication steps to ensure that the client web server is a valid web server and that the client can transmit remuneration for testing services to the testing service. As part of client initialization, the testing service prepares a script library <b>1224</b> and a key file <b>1226</b> that the testing service downloads to the client web server. The script library <b>1224</b> includes routines that are called by client-web-server users during web-site testing. This library is referred to as a &#x201c;script library&#x201d; because script routines are often provided to browsers for execution. However, other types of routines may be provided by other types of libraries in alternative embodiments of the present invention. The key file <b>1226</b> includes cryptographic information that ensures that all information exchanges that occur between client users and the testing service are secure.</p>
<p id="p-0048" num="0047">As shown in <figref idref="DRAWINGS">FIG. 12C</figref>, following client initialization, the client modifies any of the HTML encodings of web pages that may be altered during testing of the client-web server by the testing service. The alternations are minimal. To each HTML file that encodes a web page that may be tested, the client generally adds only two single-line statements and, in the case that display objects are not associated with identifiers, as discussed above with reference to <figref idref="DRAWINGS">FIG. 3</figref>, the client web server provide identifiers for each of the objects that may be specified as factors for testing of web pages. The single-line statements are generally identical for all client web pages, greatly simplifying the web-page modification carried out by the client. The first statement results in downloading of a script library from the client web server, and the second script launches one or more information exchanges between the testing server and user computer. In the case that a conversion event is tied to a specific user-activated display device, such as a button, a call to a conversion script is inserted into the HTML file, so that user activation of the user-activated display device generates an information-exchange transaction with the testing service corresponding to a conversion event. As discussed above, these may be the HTML identifiers discussed with reference to <figref idref="DRAWINGS">FIG. 3</figref>, or other types of identifiers. In many cases, simple changes to the HTML files can be automatically carried out by a script or by routines provided by a content-management-service application-programming interface.</p>
<p id="p-0049" num="0048">Following client initialization and modification of the HTML-file encodings of web pages that may be subsequently tested, the client can configure and run tests through a test-configuration interface provided as a website by the testing service to clients, as shown in <figref idref="DRAWINGS">FIG. 12D</figref>. The test configuration interface <b>1230</b> allows the client computer to define tests <b>1232</b>, specify and modify already-specified test runs <b>1234</b>, and specify segments <b>1236</b>, and, using client-supplied test and test-run specifications, the testing service generates the experiments <b>1238</b> associated with each test run. All of the test, test-run, and segment information is stored in records associated with a reference to the client in one or more databases within the testing service. The test-configuration interface <b>1230</b> additionally provides run-time information to the client web server and allows the client web server to launch trial runs and test runs.</p>
<p id="p-0050" num="0049">When a client web server has created a test and launched a test run for the test, the testing service provides modifications of the tested web page to users of the client-web-server during the test in order that the users receive altered web pages that constitute test experiments, and the testing service collects statistics based on users' access to web pages under test. This process is next described, with reference to <figref idref="DRAWINGS">FIGS. 12E-G</figref>.</p>
<p id="p-0051" num="0050">When a client-web-server user <b>1216</b> accesses a test web page, the client-web-server user sends an HTML-file request through the Internet to the client web server <b>1212</b>, as shown in <figref idref="DRAWINGS">FIG. 12E</figref>, which returns the requested HTML page to the client-web-server user <b>1216</b> for rendering and display by the browser <b>1218</b> executing within the user's computer. As the browser begins to process the HTML file, the browser encounters a statement <b>1240</b> that causes the browser <b>1218</b> to request the script library from the client web server. When the script library is downloaded by the client web server, the HTML file is modified, on the user computer, to launch an additional information exchange with the testing service to download additional library routines from the testing service. This additional information exchange is carried out only when the web page being processed is an active test page, the user computer is a valid test subject for an active test, and the additional library routines are not already cached in the user computer's browser. Insertion of the library-routine-fetch statement is one of the two modifications to the HTML files corresponding to tested web pages made by the client.</p>
<p id="p-0052" num="0051">Next, as the browser continues to process the HTML, as shown in <figref idref="DRAWINGS">FIG. 12F</figref>, the browser encounters a call to the library routine &#x201c;WM.setup&#x201d; <b>1241</b>. When executed by the browser, WM.setup initiates one or more information exchanges with the testing service during which the testing service can access cookies and other information associated with the web page on the user's computer, and the user computer receives web-page modifications from the testing service. Cookies can be used, for example, to ensure that a test subject who repeatedly accesses a landing page receives the same experiment, or test page, each time. Only when the web page being processed by the user computer is an active test page, and the user computer is an active test subject, are web-page modifications returned to the user computer by the testing service, and information uploaded by the testing service from the user computer. When this web page and user are validated, the testing service records the page accessed by the user, an identifier of the user, and a time of access in one or more database entries <b>1242</b> and returns a snippet, representing one or more nodes or sub-trees of the DOM corresponding to the web page, to the user computer, which modifies the DOM constructed by the browser to incorporate the snippet downloaded by the testing service to the user. In other words, the testing service downloads modifications that transform the web page downloaded by the user to a particular altered web page representing an experiment. Thus, following the information transaction illustrated in <figref idref="DRAWINGS">FIG. 12F</figref>, the user's browser alters the DOM and displays, to the user, the altered web page corresponding to an experiment as part of the test run. The snippet is constructed or retried by the testing service based on the orthogonal-array test basis or other test design. The stored test design defines the experiments, from which the testing service selects experiments for provision to users in order to obtain a well-distributed sampling of experiments during the test. Subsequently, as shown in <figref idref="DRAWINGS">FIG. 12G</figref>, should the user download a page, or invoke a feature on a page, corresponding to a conversion event, the user's browser, in processing the HTML file, encounters a library call <b>1250</b> that results in an information transaction between the user and testing service. The testing service checks to ensure that the web page is a valid conversion page for an active test, that the user is a valid test subject. When all of these tests are valid, the conversion event is recorded <b>1352</b> for the experiment by the testing service.</p>
<p id="p-0053" num="0052">Finally, as shown in <figref idref="DRAWINGS">FIG. 12H</figref>, when the testing service has collected sufficient data to consider the test run to be complete, the testing service changes the status of the test run to complete, and may then undertake analysis and reporting of the test results. The test results may be automatically returned to the client web server, or may be subsequently returned, on demand, when the client checks the status of the test run and determines that the test run has been completed.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIGS. 13A-H</figref> provide control-flow diagrams for a web-site testing service that represents one embodiment of the present invention. <figref idref="DRAWINGS">FIG. 13A</figref> provides a high-level event loop carried out by the testing service on behalf of one or more clients. In step <b>1302</b>, the testing services waits for a next client-generated event. When the event corresponds to access of the testing-service website for registration by a new client, as determined in step <b>1304</b>, the routine &#x201c;initialize new client&#x201d; is called in step <b>1306</b>. When the event is a request to construct a new test by an already-registered client through the test-configuration interface, as determined in step <b>1308</b>, the routine &#x201c;test setup&#x201d; is called in step <b>1310</b>. When the event is a request to configure a new test run, as determined in step <b>1312</b>, the routine &#x201c;test run setup&#x201d; is called in step <b>1314</b>. When the event is a request to launch a trial run, as determined in step <b>1316</b>, the routine &#x201c;trial run&#x201d; is called in step <b>1318</b>. When the event is a request to launch a test run, as determined in step <b>1320</b>, the routine &#x201c;test run&#x201d; is called in step <b>1322</b>. When the event is a status, information request, or information-update request, as determined in step <b>1324</b>, then the routine &#x201c;status&#x201d; is called in step <b>1326</b>. For example, a client can obtain test-result information during a test run, and can additional obtain analysis results following completion of a test run. Any of various additional types of events are handled in a default event handler in step <b>1328</b>. Additional events include log-ons to the testing service web site by registered clients, during which clients are authorized and authenticated.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 13B</figref> provides a control-flow diagram for the routine &#x201c;initialize new client&#x201d; called in step <b>1306</b> of <figref idref="DRAWINGS">FIG. 13A</figref>. In step <b>1330</b>, the testing service carries out a dialog, through the testing service web site interface, with a prospective client in order to collect information about the client. This information may include the client's name, address, billing address, web site URL, and other such information. If all needed information has been collected through this dialog, as determined in step <b>1332</b>, then the testing service proceeds to authenticate and authorize the prospective client, in step <b>1334</b>. Otherwise, as with most of the steps carried out by the testing service during dialogs with clients of the testing service, the testing service may elect to retry a previous step, as determined in the current case in step <b>1336</b>, in order to make an attempt to acquire the remaining needed information or, in certain cases, may simply return an error message and fail. Once a client has been authorized, the testing service, in step <b>1336</b>, either through a dialog or via automated methods, determines the web site domains and cookie domains of the client web server, and obtains, from the client, specification of a file-system location at which to download to the client web server the library and key files. In addition, the testing service determines whether or not to use a secure protocol when communicating with client-web-server users and any other information needed for executing tests. Then, in step <b>1338</b>, the testing service creates and downloads the script library and key files to the client web server. In step <b>1340</b>, the testing service prepares and stores one or more client records that describe the client and provide a basis for further interactions with the client and, finally, in step <b>1342</b>, return an acknowledgement to the client. In an actual testing service system, client initialization may contain many additional steps, and may involve solicitation and acquisition of many additional different types of information.</p>
<p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. 13C</figref> provides a control-flow diagram for the routine &#x201c;test set up&#x201d; called in step <b>1310</b> of <figref idref="DRAWINGS">FIG. 13A</figref>. In step <b>1346</b>, the testing service solicits test information from the client and receives the solicited information in step <b>1348</b>. Steps may be iterated in order to carry out a dialog during which the needed information to prepare and store a record describing a test is acquired by the testing service. Once the information is received, the testing service prepares a test record and enters the test record in the testing service's database in step <b>1350</b> in association with, or referenced by, one or more client records. As discussed above, test information may include a test name, creation date, description, list of factors, and other information that provide a basis for subsequent construction of test runs.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 13D</figref> provides a control-flow diagram for the routine &#x201c;test run setup&#x201d; called in step <b>1314</b> of <figref idref="DRAWINGS">FIG. 13A</figref>. In step <b>1354</b>, the testing service receives information about a next test run and opens a test record for the test run. Step <b>1354</b> may involve multiple information exchanges with the client. It should also be noted that the client may elect to update or modify an already existing test run, in which case an already existing test-run record is accessed in step <b>1354</b>. Next, in step <b>1356</b>, the testing service carries out an information exchange with the client to obtain all the information that defines a test run, including various attributes, the levels for each factor, a specification of a test segment, and other such information. Once that information is received, then, in step <b>1358</b>, the testing service provides various orthogonal-array-based or other test-design-based testing alternatives to the client, from which the client web server selects a particular test design. Various different orthogonal-array-based test designs or other types of test designs may be associated with different advantages and disadvantages, and selection of an orthogonal-array-based test or other test design may involve consideration of a number of different trade-offs, including potential length of the test run, computational requirements on the testing service, and many other such factors. Finally, in step <b>1360</b>, the testing service prepares and stores a test-run record and, in addition, sets the test-run status to &#x201c;constructed.&#x201d; Note that, in certain embodiments of the present invention, an initial under-construction status may be associated with a test run as it is being defined and constructed by the routine &#x201c;test run setup.&#x201d;</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 13E</figref> provides a control-flow diagram for the routine &#x201c;test run,&#x201d; called in step <b>1322</b> of <figref idref="DRAWINGS">FIG. 13A</figref>. In step <b>1366</b>, the testing service sets the status of the test run to &#x201c;active.&#x201d; Then, in a continuous loop comprising steps <b>1368</b>-<b>1370</b>, the testing service continues to handle test-run events, primarily information exchanges with test subjects' computers invoked by execution of script-library routines by users' browsers, until the test is complete, as determined in step <b>1370</b>. In general, a test run continues until sufficient data has been collected to provide statistically meaningful results. However, various embodiments of the present invention provide additional means for test runs to be halted through the test-configuration interface by clients, and may provide for halting of test runs by the testing service when certain desirable events or test-run-execution characteristics are detected during the test run by the testing service. Once a test run is completed, the testing service sets the status of the test run to &#x201c;complete,&#x201d; in step <b>1372</b>, and then may undertake analysis of the test results and reporting of results of the analysis, in steps <b>1374</b> and <b>1376</b>. As briefly discussed, above, results may also be reported to a client during the test run, through the web-site interface.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 13F</figref> is a control-flow diagram of the routine &#x201c;handle run events&#x201d; called in step <b>1369</b> of <figref idref="DRAWINGS">FIG. 13E</figref>. This routine is a simple event handler, in which messages sent from user computers as a result of calls to the script-library routine &#x201c;WM.setup&#x201d; by user browsers are handled by a call to the routine &#x201c;wmsetup,&#x201d; in step <b>1380</b>, and messages sent from user computers as a result of calls to the script-library routine &#x201c;WM.convert&#x201d; by user browsers are handled by a call to the routine &#x201c;wm convert,&#x201d; in step <b>1382</b>. Note that the script-library routines &#x201c;WM.setup&#x201d; and &#x201c;WM.convert&#x201d; are called by a browser running on the user computer, and those script routines, in turn, call routines that initiate an information transmission with the testing service.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. 13G</figref> provides a control-flow diagram of the routine &#x201c;wmsetup&#x201d; called in step <b>1380</b> of <figref idref="DRAWINGS">FIG. 13F</figref>. In step <b>1384</b>, the testing service routine receives a message, for request, from a user computer as a result of execution, by a user's browser, of the script-library routine &#x201c;WM.setup.&#x201d; In step <b>1385</b>, the testing service uses a URL for the web page being processed to access the database or databases maintained by the testing service in order to determine whether or not the call to WM.setup represents a page-access event or a conversion event, the type of test being run, whether or mot the web page is an active test page and the user computer is a valid and active test subject, and other such information. When the test page that included a call to &#x201c;WM.setup,&#x201d; which, in turn, generated the message or request received in step <b>1384</b>, is an active test page, as determined in step <b>1386</b> by the testing service, and when the user computer is an authorized test subject, as determined in step <b>1387</b>, then, in step <b>1388</b>, the testing service then in the case that the call to WM.setup represents a landing-page-access event, prepares the DOM modifications needed to generate an experiment for display on the user computer and transmits those modifications to the user computer. Finally, in step <b>1389</b>, the testing services records either a landing-page-access event by the user computer or a conversion event, depending on the web page. Note that, in the case that the page from which the call to &#x201c;WM.setup&#x201d; was made is not an active test page, or in the case that the user computer is not an active and authorized test subject, the routine &#x201c;wmsetup&#x201d; simply returns. In other words, there is almost no performance penalty and no perturbation to the client's web server in the case that a user accesses an inactive test page or in the case that non-test-subject users access test pages. Steps <b>1384</b> and <b>1385</b> may include one or more information exchanges between the user computer and testing service.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 13H</figref> is a control-flow diagram for the routine &#x201c;wmconvert&#x201d; called in step <b>1382</b> of <figref idref="DRAWINGS">FIG. 13F</figref>. This routine is similar to the routine &#x201c;wmsetup,&#x201d; described with reference to <figref idref="DRAWINGS">FIG. 13G</figref>. The primary difference is that this routine is only called for a conversion event, which is recorded, in step <b>1390</b>, as conversion event in a testing-service database.</p>
<p id="p-0062" num="0061">The routine &#x201c;trial run,&#x201d; called in step <b>1318</b> of <figref idref="DRAWINGS">FIG. 13A</figref>, is similar to the routine test-run, discussed above, with the exception that a trial-run status may be set for the test run during a trial run. The routine &#x201c;trial run&#x201d; is not further discussed. The routine &#x201c;status,&#x201d; called in step <b>1326</b>, returns status information with respect to test runs and other information about tests, test runs, and clients. Implementation of this routine is strongly dependent on the particular database organizations used by the testing service and on the particular web-site interface provided to clients, and is not further discussed.</p>
<p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. 14</figref> shows the HTML modifications used to virtually incorporate a testing service that represents one embodiment of the present invention into a web site. The HTML code, previously shown in <figref idref="DRAWINGS">FIG. 3</figref>, includes first statement <b>1402</b> that directs a browser to download the script-routine library and a second statement <b>1404</b> that calls a script-library entry point &#x201c;WM.setup&#x201d; that results in sending a message or request to the testing service to indicate a landing-page-access event or page-access-conversion event. A page that includes a displayed object, activation of which is defined to be a conversion even, is similarly modified to include a call to the library routine &#x201c;WM.convert.&#x201d; By merely adding two statements to an HTML file, or three in the case that the page corresponds both to a landing-page-access event and to a conversion event, the HTML file becomes a potential test web page, and the testing service is virtually incorporated into the client web server. Again, the statements used to modify landing-access-event-associated web pages are identical for all such web pages, as is the statement that is used to modify display-objects associated with conversion events. A client can easily write a script or other program, or use a content-management-system programming interface to introduce these identical statements into web pages. <figref idref="DRAWINGS">FIG. 15</figref> provides an exemplary script library downloaded service that represents one embodiment of the present invention by a testing into a web-site server.</p>
<p id="p-0064" num="0063">Although the present invention has been described in terms of particular embodiments, it is not intended that the invention be limited to these embodiments. Modifications will be apparent to those skilled in the art. For example, many different alternative embodiments of the testing service can be implemented by varying software-implementation parameters, including choice of programming languages, operating systems, control structures, data structures, modular organization, and by varying other such parameters. Alternative embodiments may provide for enhanced testing services and functionality, and may use a variety of different analytics packages and report-generation tools for processing collected data. The above-described techniques for virtual incorporation of the testing service into a client web server can be also employed for non-testing applications, including automated generation and display of advertising, automated display of rapidly changing information, and other applications in which web pages need to be dynamically modified and provided to users.</p>
<p id="p-0065" num="0064">The foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the invention. However, it will be apparent to one skilled in the art that the specific details are not required in order to practice the invention. The foregoing descriptions of specific embodiments of the present invention are presented for purpose of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments are shown and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents:</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A testing service comprising:
<claim-text>one or more testing-service computer systems connected to the Internet that execute testing-service routines, maintain one or more databases, and receive and respond to web-page requests and test-subject-computer requests; and</claim-text>
<claim-text>a client web server that serves web pages to users, the client web server storing a library of routines downloaded to the client web server by the testing service and storing encodings of the web pages, the encoding of each web page tested by the testing service including modifications that direct a user's web browser to download the library of routines from the client web server and to request modifications to a data-object-model representation of the web page by calling a script-library routine.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The testing service of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the testing service routines include:
<claim-text>testing-service routines that implement a web server that provides a web-site interface to clients;</claim-text>
<claim-text>testing-service routines that handle test-related events that occur during test runs; and</claim-text>
<claim-text>testing routines that manage test data storage and access and that pass test data to analytics and test-result reporting routines.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The testing service of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the testing-service web server provides a new-client registration interface, a test-creation-and-test-modification interface, a test-run-creation-and-modification interface, a test-run-launching interface, a status-reporting interface, and additional interfaces that allow clients to request analysis and reporting of test results.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The testing service of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the testing service routines that handle test-related events that occur during test runs receive requests from user computers that download test pages from the client web server for modifications to the downloaded page and respond to each request, when the request is received from a computers of a user representing a valid test subject as a result of downloading an active test page, by logging a page access for the user computer and by returning web-page modification to the user computer that, when carried out by the user computer, transforms the downloaded web page into a test page.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The testing service of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the testing service routines that handle test-related events that occur during test runs receive messages from user computers that download test pages, which represent conversion events, from the client web server and respond to each message reception, when the message is received from a computer of a user representing a valid test subject as a result of downloading an active test page representing a conversion, by logging a conversion event for the user computer.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The testing service of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein a web site test is represented by a stored data object that includes a test name, indication of the client who created the test, a test description, an indication of a web page that is the subject of the test, and indications of the features of the web page that are to be systematically altered during a test.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The testing service of <claim-ref idref="CLM-00006">claim 6</claim-ref> wherein a web site test is associated with one or more records that specify a particular test run, the test-run records indicating the alternatives for each tested web-page feature, a user segment that represents the test subjects for the test run, a test-run design according to which web pages are modified and distributed, an indication of one or more conversion events for the test run, and a test-run status.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. An information-distribution-testing system comprising:
<claim-text>a client server that, when testing is not being carried out, serves one or more information entities to a user device and that, when testing is being carried out, serves one or more modified information entities to the user device as well as provides a library of routines to the user device; and</claim-text>
<claim-text>a testing-service computer system that, when testing is being carried out, receives and stores information about user interactions with displayed information corresponding to the one or more information entities under test and, in response to a request from a routine executed by the user device, returns one or more subtree data structures to the user device that, when incorporated into a tree data structure constructed to represent the displayed information by the user device, changes the information displayed by the user device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The information-distribution-testing system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the testing-service computer system additionally provides a client interface to the client to allow the client to be initialized and to configure web-page testing.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The information-distribution-testing system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the information entities are data files that specify displayed information.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The information-distribution-testing system of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the information entities are HTML data files.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The information-distribution-testing system of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein an application program on the user device renders an information entity for display.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The information-distribution-testing system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the displayed information is a displayed web page.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The information-distribution-testing system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the sub tree data structures are data-object-model trees constructed by a web browser from HTML files.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The information-distribution-testing system of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the one or more modified information entities are HTML files that each includes one or two additional single-line statements and one or more additional object identifiers for objects under test not associated with object identifiers in a corresponding unmodified HTML file.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. An information-distribution-testing system comprising:
<claim-text>a testing-service computer system that
<claim-text>provides a client interface to a client that manages a client information server that serves information entities to a user device;</claim-text>
<claim-text>downloads a library of routines to the client information server;</claim-text>
<claim-text>stores client information and test-configuration received from the client through the client interface in memory; and</claim-text>
<claim-text>when testing is being carried out on one or more information entities, receives and stores information about user interactions with displayed information corresponding to the one or more information entities under test and, in response to a request from a routine executed by the user device, returns one or more subtree data structures to the user device that, when incorporated into a tree data structure constructed to represent the displayed information by the user device, changes the information displayed by the user device corresponding to the one or more information entities under test.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The information-distribution-testing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the information entities are data files that specify displayed information.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The information-distribution-testing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the information entities are HTML data files.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The information-distribution-testing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein an application program on the user device renders an information entity for display.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The information-distribution-testing system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the displayed information is a displayed web page.</claim-text>
</claim>
</claims>
</us-patent-grant>

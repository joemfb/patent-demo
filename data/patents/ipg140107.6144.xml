<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627268-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627268</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>11556961</doc-number>
<date>20061106</date>
</document-id>
</application-reference>
<us-application-series-code>11</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1940</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717100</main-classification>
<further-classification>707683</further-classification>
<further-classification>707684</further-classification>
</classification-national>
<invention-title id="d2e53">System and method for a non-sequential undo mechanism</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5481710</doc-number>
<kind>A</kind>
<name>Keane et al.</name>
<date>19960100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>395700</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5990906</doc-number>
<kind>A</kind>
<name>Hudson et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>345439</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6167451</doc-number>
<kind>A</kind>
<name>Stracke, Jr.</name>
<date>20001200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>709230</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6543006</doc-number>
<kind>B1</kind>
<name>Zundel et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 19</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>RE38270</doc-number>
<kind>E</kind>
<name>Nakajima</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>713  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7003695</doc-number>
<kind>B2</kind>
<name>Li</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 19</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7277900</doc-number>
<kind>B1</kind>
<name>Ganesh et al.</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707682</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2002/0049926</doc-number>
<kind>A1</kind>
<name>Korenshtein</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 16</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2003/0149941</doc-number>
<kind>A1</kind>
<name>Tsao</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>715530</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2004/0006764</doc-number>
<kind>A1</kind>
<name>Van De Vanter et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>717112</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2004/0205663</doc-number>
<kind>A1</kind>
<name>Mohamed</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
<classification-national><country>US</country><main-classification>715530</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2004/0260974</doc-number>
<kind>A1</kind>
<name>Livshits</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 19</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>Berlage, Thomas. A Selective Undo Mechanism for Graphical User Interfaces Based on Command Objects. [online] (Sep. 1994). ACM, pp. 1-29. Retrieved From the Internet &#x3c;http://portal.acm.org/citation.cfm?id=196721&#x3e;.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
</us-references-cited>
<number-of-claims>28</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080109831</doc-number>
<kind>A1</kind>
<date>20080508</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Robert Edward</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Lee</last-name>
<first-name>Robert Edward</first-name>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Van Leeuwen &#x26; Van Leeuwen</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Murray</last-name>
<first-name>Susan</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Puente</last-name>
<first-name>Emerson C</first-name>
<department>2196</department>
</primary-examiner>
<assistant-examiner>
<last-name>Labud</last-name>
<first-name>Jonathan R</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system and method for a non-sequential undo mechanism is presented. An action removal manager stores program states and action descriptions that it receives from a user in a program log corresponding to a software application. In turn, the action removal manager allows the user to remove an action from the program log without first removing actions subsequent to the action that, as a result, undoes an action to a file without undoing subsequent actions to the file. In one embodiment, the undo request includes a request to remove two or more actions from the program log. In this embodiment, the action removal manager evaluates the earliest action description to remove in the program log and then proceeds to evaluate subsequent action descriptions for removal.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="201.17mm" wi="158.75mm" file="US08627268-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="207.52mm" wi="158.75mm" file="US08627268-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="192.87mm" wi="158.75mm" orientation="landscape" file="US08627268-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="201.85mm" wi="158.75mm" file="US08627268-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="158.75mm" wi="113.62mm" file="US08627268-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="158.75mm" wi="122.85mm" file="US08627268-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="158.75mm" wi="124.71mm" file="US08627268-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="158.75mm" wi="126.66mm" file="US08627268-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">1. Technical Field</p>
<p id="p-0003" num="0002">The present invention relates to a system and method for a non-sequential undo mechanism. More particularly, the present invention relates to a system and method for removing a selected action from a program log without removing actions successive to the selected action from the program log that, as a result, undoes an action to a file without undoing subsequent actions to the file.</p>
<p id="p-0004" num="0003">2. Description of the Related Art</p>
<p id="p-0005" num="0004">Software applications use a program log to track user actions and resultant program states. For example, a document creation application's program log may store user actions such as text addition, text formatting, and page break insertions. The software application uses the program log to allow the user to &#x201c;undo&#x201d; prior user actions. For example, a user may have formatted a paragraph and wish to undo to the paragraph formatting.</p>
<p id="p-0006" num="0005">A challenge found with existing art, however, is that existing art does not allow a user to remove a particular action that occurred after the particular action up to a current state. Using the example discussed above, if the user inserts a page break and enters text after the paragraph formatting, the software application must first undo the text addition and the page break before undoing the paragraph formatting. This approach is cumbersome to the user because the user has to &#x201c;redo&#x201d; many actions that had to be removed (e.g., rewrite text, etc.) due to the limited capabilities of existing art.</p>
<p id="p-0007" num="0006">What is needed, therefore, is a system and method that allows a user to undo an action to a file without having to undo subsequent actions to the file.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">It has been discovered that the aforementioned challenges are resolved using a system, method, and program product for removing an action description from a program log without removing successive actions from the program log that, as a result, undoes an action to a file without undoing subsequent actions to the file. The system, method, and program product sequentially receive from a user a plurality of actions to modify a file. The plurality of actions include a &#x201c;last received action,&#x201d; which is the last action received from the user. In turn, the system, method, and program product sequentially store a plurality of action descriptions in a program log. Each of the plurality of action descriptions corresponds to one of the plurality of actions in the order that the plurality of actions were received. As the plurality of actions are received, the system, method, and program product modify the file based upon the received actions. After modifying the file, the system, method, and program product receive an &#x201c;undo request&#x201d; that corresponds to a first action that occurred prior to the last received action. As a result, the system, method, and program product remove a first action description corresponding to the first action from the program log without removing a last action description that corresponds to the last action from the program log. In addition, the system, method, and program product modify the file by undoing the first action without undoing the last action.</p>
<p id="p-0009" num="0008">In one embodiment, the system, method, and program product select a first program state that corresponds to the first action description, identify a second action description that is associated with a second program state, evaluate the first program state against the second action description, and associate the second action description to the first program state.</p>
<p id="p-0010" num="0009">In one embodiment, the system, method, and program product select a third program state that is associated with a third action description, and updates the third program state based upon associating the second action description to the first program state. In this embodiment, the system, method, and program product may evaluate the updated third program state against the third action description, determine that the third action description is independent of the first action description, and associate the updated third program state to the third action description. In another embodiment, the system, method, and program product increments an independent action description counter in response to determining that the third action description is independent of the first action description.</p>
<p id="p-0011" num="0010">In one embodiment, the system, method, and program product select a fourth program state that is associated with a fourth action description. The system, method, and program product then update the fourth program state in response to associating the updated third program state to the third action description, evaluates the updated fourth program state against the fourth action description, determines that the fourth action description is dependent upon the first action description, and remove the fourth action description from the program log.</p>
<p id="p-0012" num="0011">In one embodiment, the system, method, and program product remove successive actions from the program log that are subsequent to the fourth action description in the program log, and sets a current state to the updated fourth program state.</p>
<p id="p-0013" num="0012">In one embodiment, the system, method, and program product notify the user that the fourth action description is dependent upon the first action description, receives a response from the user in response to the notification, and removes the fourth action description from the program log based upon the user's response.</p>
<p id="p-0014" num="0013">In one embodiment, the system, method, and program product receive an undo request that includes a request to remove the first action and a fourth action that corresponds to a fourth action description. In this embodiment, the system, method, and program product selects a fourth program state corresponding to the fourth action description, updates the fourth program state in response to associating the updated third program state to the third action description, selects a fifth action description that is successive to the fourth action description in the program log, evaluates the updated fourth program state against the fifth action description, determines that the fifth action description is independent from the first action description and the fourth action description, and associates the updated fourth program state to the fifth action description.</p>
<p id="p-0015" num="0014">In one embodiment, the system, method, and program product selects a sixth program state that is associated with a sixth action description that is successive to the fifth action description, updates the sixth program state, evaluates the updated sixth program state against the sixth action description, determines that the sixth action description is dependent upon one of the requested actions to remove, removes the sixth action description from the program log, removes successive actions from the program log that are subsequent to the sixth action description, and sets a current state to the updated sixth program state.</p>
<p id="p-0016" num="0015">In one embodiment, the system, method, and program product includes a plurality of actions that are each associated with a single software application and received from the user through a general user interface that displays the file.</p>
<p id="p-0017" num="0016">The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017">The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram showing an action removal manager non-sequentially undoing an action in response to a user request;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing different stages of a program log while an action removal manager removes a non-sequential action description from the program log;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart showing steps taken in an action removal manager removing two non-sequential action descriptions from a program log;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> is a high-level flowchart showing steps taken in removing a non-sequential action description from a program log;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing steps taken in associating subsequent program states to subsequent action descriptions based upon their dependencies toward a removed action;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart showing steps taken in identifying subsequent action descriptions that are dependent upon an action description selected for removal; and</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of a computing device capable of implementing the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0026" num="0025">The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention, which is defined in the claims following the description.</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram showing an action removal manager non-sequentially undoing an action in response to a user request. Action removal manager <b>150</b> stores program states and action descriptions that it receives from user <b>100</b> in program log <b>160</b>. Action removal manager <b>150</b> allows user <b>100</b> to non-sequentially undo an action by removing an action description from program log <b>160</b> without first removing action descriptions subsequent to the action. For example, a user may have bolded text and, after bolding text, performed other actions such as writing a paragraph, inserting page breaks, etc. In this example, the user is able to &#x201c;undo&#x201d; the bolding action without having to undo the added paragraph or inserted page break.</p>
<p id="p-0028" num="0027">User <b>100</b> uses general user interface (GUI) <b>100</b> included in computer system <b>110</b> to provide actions <b>130</b> to computer system <b>110</b>. Actions <b>130</b> may include actions such as mouse clicks, text deletions, text formatting, etc. GUI <b>120</b> provides actions <b>130</b> to application <b>140</b> and action removal manager <b>150</b>. Application <b>140</b> may be a program such as a document generation program. Action removal manager <b>150</b> receives actions <b>130</b> and stores corresponding action descriptions, along with corresponding program states, in program log <b>160</b>. Program log <b>160</b> may be stored on a volatile storage area, such as computer memory.</p>
<p id="p-0029" num="0028">When user <b>100</b> wishes to remove an action (e.g., text formatting), user <b>100</b> uses GUI <b>120</b> to send undo request <b>170</b> to application <b>140</b> and action removal manager <b>150</b>. In turn, action removal manager <b>150</b> identifies the action description to remove in program log <b>160</b> along with its corresponding program state. Next, action removal manager <b>150</b> proceeds through a series of steps to update successive program states and evaluate the updated program states against successive action descriptions.</p>
<p id="p-0030" num="0029">The evaluation entails determining whether the successive action descriptions are independent of the requested action description to remove. When the successive action descriptions are independent, action removal manager <b>150</b> removes the requested action description from program log <b>160</b>, updates the successive program states, and leaves the successive action descriptions in program log <b>160</b>. When action removal manager <b>150</b> encounters a dependent action description, action removal manager <b>150</b> notifies user <b>100</b>. In turn, user <b>100</b> instructs action removal manager <b>150</b> whether to continue with the undo request or cancel the undo request entirely (see <figref idref="DRAWINGS">FIG. 5</figref> and corresponding text for further details).</p>
<p id="p-0031" num="0030">In one embodiment, undo request <b>170</b> includes a request to remove two or more action descriptions from program log <b>160</b>. In this embodiment, action removal manager <b>150</b> evaluates the earliest action description to remove in program log <b>160</b> and then proceeds to evaluate subsequent action descriptions for removal (see <figref idref="DRAWINGS">FIG. 3</figref> and corresponding text for further details).</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 2</figref> is a diagram showing different stages of a program log while an action removal manager removes a non-sequential action description from the program log and undoes an action to a file. An action removal manager stores program states and action descriptions that it receives from a user in a program log. The action removal manager allows the user to remove an action description from the program log without first removing action descriptions subsequent to the action description. <figref idref="DRAWINGS">FIG. 2</figref> shows various stages of the program log while removing an action description in a non-sequential manner.</p>
<p id="p-0033" num="0032">Stage <b>200</b> includes various program states and corresponding action descriptions. The program log's initial stored state is initial state <b>202</b>. When action description <b>204</b> occurs, a different program state results (first program state <b>206</b>). During application execution, the program log stores various program states and corresponding action descriptions, such as program states <b>206</b>, <b>210</b>, <b>214</b>, <b>218</b>, and corresponding action descriptions <b>208</b>, <b>212</b>, <b>216</b>, and <b>220</b>, respectively. At a point in time, the application is at current state <b>224</b> waiting for a new user action description.</p>
<p id="p-0034" num="0033">Stage <b>225</b> shows a user requesting to remove first action description <b>208</b> without removing action descriptions <b>212</b>, <b>216</b>, and <b>220</b>. The action removal manager selects corresponding first program state <b>206</b> and evaluates it against the next successive action description, which is second action description <b>212</b> (shown in stage <b>245</b>). The evaluation entails determining whether second action description <b>212</b> is dependent upon first action description <b>208</b>. For example, first action description <b>208</b> may be typing a word and second action description <b>212</b> may be bolding the word. In this example, second action description <b>212</b> is dependent upon first action description <b>208</b>. In another example, first action description <b>208</b> may be typing a word and second action description <b>212</b> may be inserting a page break. In this example, second action description <b>212</b> is independent of first action description <b>208</b>.</p>
<p id="p-0035" num="0034">When second action description <b>212</b> is independent of first action description <b>208</b>, the action removal manager associates first program state <b>206</b> to second action description <b>212</b>, which is shown in stage <b>255</b>. Stage <b>255</b> also shows that the action removal manager updates third program state <b>214</b> based upon associating first program state <b>206</b> to second action description <b>212</b>. The action removal manager evaluates updated third program state <b>214</b> against third action description <b>216</b> to determine whether third action description <b>216</b> is independent of the removed action description (first action description <b>208</b>). If so, the action removal manager associates updated third program state <b>214</b> to third action description <b>216</b> (shown in stage <b>255</b>).</p>
<p id="p-0036" num="0035">The action removal manager proceeds to update fourth program state <b>218</b> and evaluate it against fourth action description <b>220</b>. Stage <b>255</b> shows that during the evaluation, the action removal manager determined that fourth action description <b>220</b> is dependent upon first action description <b>208</b>. As such, stage <b>265</b> shows that the action removal manager removes fourth action description <b>220</b> and sets current state <b>224</b> to updated fourth program state <b>218</b>.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 3</figref> is a flowchart showing steps taken in an action removal manager removing two non-sequential action descriptions from a program log. <figref idref="DRAWINGS">FIG. 3</figref> is similar to <figref idref="DRAWINGS">FIG. 2</figref> with the exception that <figref idref="DRAWINGS">FIG. 3</figref> shows the removal of two action descriptions as opposed to the removal of one action description.</p>
<p id="p-0038" num="0037">Stage <b>300</b> includes program states <b>302</b>, <b>306</b>, <b>310</b>, <b>314</b>, <b>318</b>, <b>322</b>, and <b>326</b>, with corresponding action descriptions <b>304</b>, <b>308</b>, <b>312</b>, <b>316</b>, <b>320</b>, <b>324</b>, and <b>328</b>. Stage <b>300</b> also includes current state <b>330</b>. A user wishes to remove first action description <b>308</b> and fourth action description <b>320</b>. As such, stage <b>335</b> shows the action removal manager evaluating first program state <b>306</b> against second action description <b>312</b>, which is independent of first action description <b>308</b>. In turn, the action removal manager updates third program state <b>314</b> and evaluates it against third action description <b>316</b>, which is also independent of first action description <b>308</b>. As a result, the action removal manager updates fourth program state <b>318</b> and evaluates it against fifth action description <b>324</b> since the user wishes to remove fourth action description <b>320</b>. Fifth action description <b>324</b> is independent of the removed action descriptions <b>308</b> and <b>322</b> and, therefore, the action removal manager updates sixth program state <b>326</b> and evaluates updated sixth program state <b>326</b> against sixth action description <b>328</b>, which is, in fact, dependent upon first action description <b>308</b> or fourth action description <b>320</b>.</p>
<p id="p-0039" num="0038">Stage <b>360</b> shows the resulting program log of removing first action description <b>308</b> and fourth action description <b>320</b>. As can be seen, first program state <b>306</b> is associated with second action description <b>312</b>, updated third program state <b>314</b> is associated with third action description <b>316</b>, and updated fourth program state <b>318</b> is associated with fifth action description <b>324</b>. In addition, since sixth action description is dependent upon first action description <b>308</b> or fourth action description <b>320</b>, the action removal manager sets current state <b>330</b> to updated sixth program state <b>326</b>.</p>
<p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. 4</figref> is a high-level flowchart showing steps taken in removing a non-sequential action description from a program log and undoing a corresponding action to a file. Processing commences at <b>400</b>, whereupon processing waits for a request from user <b>100</b> at step <b>410</b>. The request may be an action request, such as deleting a word in a document generation application, or the request may be an undo request. The undo request is a request to non-sequentially undo an action and remove a corresponding action description from a program log. User <b>100</b> is the same as that shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0041" num="0040">A determination is made as to whether the request is an action request or an undo request (decision <b>420</b>). If the request is an action request, decision <b>420</b> branches to &#x201c;Action&#x201d; branch <b>422</b> whereupon processing logs the action and advances the program state in program log <b>160</b> (step <b>425</b>). For example, the action may bold particular text and, in this example, processing logs the bold action and advances the program state to account for the bolded text. Program log <b>160</b> is the same as that shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0042" num="0041">On the other hand, if the request is an undo request, decision <b>420</b> branches to &#x201c;Undo&#x201d; branch <b>428</b> whereupon processing selects an action description to remove, along with its corresponding program state, in program log <b>160</b> that correspond with the undo request (step <b>430</b>). For example, user <b>100</b> may wish to undo a fourth action on a file without undoing more recent actions.</p>
<p id="p-0043" num="0042">At step <b>440</b>, processing identifies an action description that is successive to the selected action description and, at step <b>450</b>, processing evaluates the selected action description against the successive action description to determine whether the action description removal is allowable. A determination is made as to whether associating the selected action description's program state to the successive action description is allowable (decision <b>460</b>). If not allowable, decision <b>460</b> branches to &#x201c;No&#x201d; branch <b>462</b> whereupon processing notifies user <b>100</b> at step <b>465</b>.</p>
<p id="p-0044" num="0043">On the other hand, if associating the selected action description's program state to the successive action description is allowable, decision <b>460</b> branches to &#x201c;Yes&#x201d; branch <b>468</b> whereupon processing evaluates whether subsequent action descriptions are dependent upon the selected action description (pre-defined process block <b>470</b>, see <figref idref="DRAWINGS">FIG. 5</figref> and corresponding text for further details).</p>
<p id="p-0045" num="0044">A determination is made as to whether to continue processing (decision <b>480</b>). If processing should continue, decision <b>480</b> branches to &#x201c;Yes&#x201d; I branch <b>482</b> whereupon processing loops back to wait form more requests from user <b>100</b>. This looping continues until processing should terminate, at which point decision <b>480</b> branches to &#x201c;No&#x201d; branch <b>488</b> whereupon processing ends at <b>490</b>.</p>
<p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart showing steps taken in associating subsequent program states to subsequent action descriptions based upon their dependencies toward a removed action. Action removal processing commences at <b>500</b>, whereupon processing evaluates subsequent action descriptions against updated program states to determine whether one of the corresponding subsequent actions is dependent upon an action that a user requests to remove from a program log. The subsequent actions occur at points in time after the requested action that the user wishes to remove (pre-defined process block <b>510</b>, see <figref idref="DRAWINGS">FIG. 6</figref> and corresponding text for further details).</p>
<p id="p-0047" num="0046">A determination is made as to whether one of the subsequent action descriptions is dependent upon the user's corresponding selected action description to remove (decision <b>520</b>). If there are no dependencies, decision <b>520</b> branches to &#x201c;No&#x201d; branch <b>522</b> whereupon processing removes the selected action description from the program log and modifies the file by undoing the corresponding action at step <b>525</b>. At step <b>530</b>, processing applies the selected action program state, which corresponds to the selected action description, to the next successive action description in the program log (see <figref idref="DRAWINGS">FIG. 2</figref> and corresponding text for further details).</p>
<p id="p-0048" num="0047">Processing associates each updated program state to a successive subsequent action description (step <b>535</b>), and sets the current state to the last updated program state included in the program log at step <b>540</b> (see <figref idref="DRAWINGS">FIG. 2</figref> and corresponding text for further details). Processing returns at <b>545</b>.</p>
<p id="p-0049" num="0048">When processing identifies that one of the subsequent action descriptions are dependent upon the selected action description, decision <b>520</b> branches to &#x201c;Yes&#x201d; branch <b>528</b> whereupon processing notifies user <b>100</b> at step <b>550</b>. User <b>100</b> provides a response (step <b>555</b>) and a determination is made as to whether user <b>100</b> wishes to cancel the entire undo request or to perform the undo request and update program states up to the dependent action description (decision <b>560</b>). User <b>100</b> is the same as that shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0050" num="0049">If user <b>100</b> requests to cancel the entire undo request, decision <b>560</b> branches to &#x201c;No&#x201d; branch <b>562</b> whereupon processing returns at <b>565</b>. On the other hand, if user <b>100</b> requests to perform the undo request and update program states up to the dependent action description, decision <b>560</b> branches to &#x201c;Yes&#x201d; branch <b>568</b> whereupon processing removes the selected action description from the program log and modifies the file by undoing the corresponding action at step <b>570</b>. At step <b>575</b>, processing associates the selected action program state to the next action description.</p>
<p id="p-0051" num="0050">In order to identify at which point to associate updated program states to successive subsequent action descriptions, processing retrieves an independent action description counter from temporary store <b>585</b> at step <b>580</b>. The independent action description counter tracks which action descriptions, referenced at the selected action description, are independent of the selected action description (see <figref idref="DRAWINGS">FIG. 6</figref> and corresponding text for further details). Temporary store <b>585</b> may be stored on a volatile storage area, such as computer memory.</p>
<p id="p-0052" num="0051">Using the independent action description counter, processing associates each updated program state to successive subsequent action descriptions up to the dependent action description (step <b>590</b>). In turn, processing flushes out actions and program states after the dependent action description, modifies the file accordingly (step <b>595</b>), and sets the current state to the last updated program state (step <b>598</b>). Processing returns at <b>599</b>.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart showing steps taken in identifying subsequent action descriptions that are dependent upon an action description selected for removal. A user selects an action to undo, and processing identifies whether a corresponding action description is removable by comparing the selected action description's program state to a following action description in the program log. When processing identifies that the selected action description is removable, processing proceeds through a series of steps to identify whether action descriptions successive to the following action description are dependent upon the selected action description to remove.</p>
<p id="p-0054" num="0053">Subsequent action processing commences at <b>600</b>, whereupon processing identifies a successive program state in program log <b>160</b> at step <b>610</b>. At step <b>620</b>, processing updates the successive program state and stores the updated program state in temporary store <b>585</b>. Processing temporarily stores the updated program state because a user may not wish to proceed with undoing an action if processing determines that a subsequent action description depends upon the selected action description to remove. Temporary store <b>585</b> is the same as that shown in <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0055" num="0054">At step <b>630</b>, processing evaluates the updated program state against its corresponding action description. A determination is made as to whether the subsequent action description is dependent upon the selected action description (decision <b>640</b>). If the subsequent action description is dependent upon the selected action description to remove, decision <b>640</b> branches to &#x201c;Yes&#x201d; branch <b>642</b> whereupon processing returns at <b>645</b>.</p>
<p id="p-0056" num="0055">On the other hand, if the subsequent action description is not dependent upon the selected action to remove, decision <b>640</b> branches to &#x201c;No&#x201d; branch <b>648</b> whereupon processing increments an independent action description counter in temporary store <b>585</b> at step <b>650</b>. The independent action description counter tracks how many action descriptions subsequent to the selected action description are independent such that if a dependent action description is identified, processing is able to update program states up to the dependent action description. For example, if five action descriptions subsequent to the selected action description are independent and the sixth action description is dependent, processing is able to remove the selected action description, update the program states for the five independent action descriptions, and flush out the program states thereafter, leaving the current state as the fifth updated program state.</p>
<p id="p-0057" num="0056">A determination is made as to whether there are more program states to evaluate (decision <b>660</b>). If there are more program states to evaluate, decision <b>660</b> branches to &#x201c;Yes&#x201d; branch <b>662</b> which loops back to identify (step <b>670</b>) and process the next subsequent program state. This looping continues until there are no more program states to identify, at which point decision <b>660</b> branches to &#x201c;No&#x201d; branch <b>668</b> and processing returns at <b>680</b>.</p>
<p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. 7</figref> illustrates information handling system <b>701</b> which is a simplified example of a computer system capable of performing the computing operations described herein. Computer system <b>701</b> includes processor <b>700</b> which is coupled to host bus <b>702</b>. A level two (L2) cache memory <b>704</b> is also coupled to host bus <b>702</b>. Host-to-PCI bridge <b>706</b> is coupled to main memory <b>708</b>, includes cache memory and main memory control functions, and provides bus control to handle transfers among PCI bus <b>710</b>, processor <b>700</b>, L2 cache <b>704</b>, main memory <b>708</b>, and host bus <b>702</b>. Main memory <b>708</b> is coupled to Host-to-PCI bridge <b>706</b> as well as host bus <b>702</b>. Devices used solely by host processor(s) <b>700</b>, such as LAN card <b>730</b>, are coupled to PCI bus <b>710</b>. Service Processor Interface and ISA Access Pass-through <b>712</b> provides an interface between PCI bus <b>710</b> and PCI bus <b>714</b>. In this manner, PCI bus <b>714</b> is insulated from PCI bus <b>710</b>. Devices, such as flash memory <b>718</b>, are coupled to PCI bus <b>714</b>. In one implementation, flash memory <b>718</b> includes BIOS code that incorporates the necessary processor executable code for a variety of low-level system functions and system boot functions.</p>
<p id="p-0059" num="0058">PCI bus <b>714</b> provides an interface for a variety of devices that are shared by host processor(s) <b>700</b> and Service Processor <b>716</b> including, for example, flash memory <b>718</b>. PCI-to-ISA bridge <b>735</b> provides bus control to handle transfers between PCI bus <b>714</b> and ISA bus <b>740</b>, universal serial bus (USB) functionality <b>745</b>, power management functionality <b>755</b>, and can include other functional elements not shown, such as a real-time clock (RTC), DMA control, interrupt support, and system management bus support. Nonvolatile RAM <b>720</b> is attached to ISA Bus <b>740</b>. Service Processor <b>716</b> includes JTAG and I2C busses <b>722</b> for communication with processor(s) <b>700</b> during initialization steps. JTAG/I2C busses <b>722</b> are also coupled to L2 cache <b>704</b>, Host-to-PCI bridge <b>706</b>, and main memory <b>708</b> providing a communications path between the processor, the Service Processor, the L2 cache, the Host-to-PCI bridge, and the main memory. Service Processor <b>716</b> also has access to system power resources for powering down information handling device <b>701</b>.</p>
<p id="p-0060" num="0059">Peripheral devices and input/output (I/O) devices can be attached to various interfaces (e.g., parallel interface <b>762</b>, serial interface <b>764</b>, keyboard interface <b>768</b>, and mouse interface <b>770</b> coupled to ISA bus <b>740</b>. Alternatively, many I/O devices can be accommodated by a super I/O controller (not shown) attached to ISA bus <b>740</b>.</p>
<p id="p-0061" num="0060">In order to attach computer system <b>701</b> to another computer system to copy files over a network, LAN card <b>730</b> is coupled to PCI bus <b>710</b>. Similarly, to connect computer system <b>701</b> to an ISP to connect to the Internet using a telephone line connection, modem <b>775</b> is connected to serial port <b>764</b> and PCI-to-ISA Bridge <b>735</b>.</p>
<p id="p-0062" num="0061">While <figref idref="DRAWINGS">FIG. 7</figref> shows one information handling system that employs processor(s) <b>700</b>, the information handling system may take many forms. For example, information handling system <b>701</b> may take the form of a desktop, server, portable, laptop, notebook, or other form factor computer or data processing system. Information handling system <b>701</b> may also take other form factors such as a personal digital assistant (PDA), a gaming device, ATM machine, a portable telephone device, a communication device or other devices that include a processor and memory.</p>
<p id="p-0063" num="0062">One of the preferred implementations of the invention is a client application, namely, a set of instructions (program code) in a code module that may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.</p>
<p id="p-0064" num="0063">While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, that changes and modifications may be made without departing from this invention and its broader aspects. Therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases &#x201c;at least one&#x201d; and &#x201c;one or more&#x201d; to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles &#x201c;a&#x201d; or &#x201c;an&#x201d; limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases &#x201c;one or more&#x201d; or &#x201c;at least one&#x201d; and indefinite articles such as &#x201c;a&#x201d; or &#x201c;an&#x201d;; the same holds true for the use in the claims of definite articles.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method comprising:
<claim-text>sequentially receiving from a user a plurality of actions to modify a file, the plurality of actions including a first action, a second action, a third action, and a last received action, wherein the third action is successive to the second action, the second action is successive to the first action, and the last received action is the last action received from the user;</claim-text>
<claim-text>sequentially storing a plurality of action descriptions in a program log, wherein each of the plurality of action descriptions correspond to one of the plurality of actions in the order that the plurality of actions were received, the plurality of action descriptions including a first action description, a second action description, and a third action description that correspond to the first action, the second action, and the third action, respectively;</claim-text>
<claim-text>modifying the file by executing the plurality of actions in the order that they are received, the modifying further comprising:
<claim-text>storing a first program state in the program log, the first program state corresponding to the file prior to executing the first action;</claim-text>
<claim-text>storing a second program state in the program log, the second program state corresponding to the file after executing the first action; and</claim-text>
<claim-text>storing a third program state in the program log, the third program state corresponding to the file after executing the second action;</claim-text>
</claim-text>
<claim-text>receiving, after the modifying, an undo request corresponding to the first action;</claim-text>
<claim-text>in response to receiving the undo request, the method further comprises:
<claim-text>removing the first action description from the program log without removing the last action description;</claim-text>
<claim-text>associating the second action description to the first program state in response to removing the first action description from the program log;</claim-text>
<claim-text>updating the third program state in response to associating the second action description to the first program state, the updating resulting in an updated third program state;</claim-text>
<claim-text>determining whether the third action description is independent of the first action description;</claim-text>
<claim-text>in response to determining that the third action description is independent of the first action description, associating the updated third program state to the third action description;</claim-text>
<claim-text>in response to determining that the third action description is dependent upon the first action description, removing the third action description from the program log; and</claim-text>
<claim-text>modifying the file by undoing the first action without undoing the last action.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>selecting a fourth program state that is associated with a fourth action description, the fourth action description successive to the third action description in the program log;</claim-text>
<claim-text>updating the fourth program state in response to the association of the updated third program state to the third action description, resulting in an updated fourth program state;</claim-text>
<claim-text>evaluating the updated fourth program state against the fourth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated fourth program state against the fourth action description, that the fourth action description is dependent upon the first action description; and</claim-text>
<claim-text>removing the fourth action description from the program log in response to the determination that the fourth action description is dependent upon the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:
<claim-text>incrementing an independent action description counter in response to the determination that the third action description is independent of the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>in response to removing the fourth action description from the program log, removing successive action descriptions from the program log that are subsequent to the fourth action description in the program log; and</claim-text>
<claim-text>setting a current state to the updated fourth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> further comprising:
<claim-text>notifying the user that the fourth action description is dependent upon the first action description;</claim-text>
<claim-text>receiving a response from the user in response to the notifying; and</claim-text>
<claim-text>performing the removal of the fourth action description from the program log based upon the response.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the undo request includes a request to remove the first action and a fourth action that corresponds to a fourth action description, the fourth action description successive to the third action description in the program log, the method further comprising:
<claim-text>selecting a fourth program state corresponding to the fourth action description;</claim-text>
<claim-text>updating the fourth program state in response to the association of the updated third program state to the third action description;</claim-text>
<claim-text>selecting a fifth action description that is successive to the fourth action description in the program log;</claim-text>
<claim-text>evaluating the updated fourth program state against the fifth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated fourth program state against the fifth action description, that the fifth action description is independent from the first action description and the fourth action description; and</claim-text>
<claim-text>associating the updated fourth program state to the fifth action description in response to the determination that the fifth action description is independent from the first action description and the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref> further comprising:
<claim-text>selecting a sixth program state that is associated with a sixth action description, the sixth action description successive to the fifth action description in the program log;</claim-text>
<claim-text>in response to the association of the updated fourth program state to the fifth action description, updating the sixth program state;</claim-text>
<claim-text>evaluating the updated sixth program state against the sixth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated sixth program state against the sixth action description, that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>removing the sixth action description from the program log in response to the determination that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>in response to removing the sixth action description from the program log, removing successive action descriptions from the program log that are subsequent to the sixth action description; and</claim-text>
<claim-text>setting a current state to the updated sixth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the sixth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of the plurality of actions is associated with a single software application and received from the user through a general user interface that displays the file.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An information handling system comprising:
<claim-text>one or more processors;</claim-text>
<claim-text>a memory accessible by the processors;</claim-text>
<claim-text>one or more non-volatile storage devices accessible by the processors; and</claim-text>
<claim-text>an action removal tool for removing an action description from a program log located in the memory, the action removal tool being effective to:
<claim-text>sequentially receiving from a user a plurality of actions to modify a file located in the memory, the plurality of actions including a first action, a second action, a third action, and a last received action, wherein the third action is successive to the second action, the second action is successive to the first action, and the last received action is the last action received from the user;</claim-text>
<claim-text>sequentially storing a plurality of action descriptions in a program log located in the memory, wherein each of the plurality of action descriptions correspond to one of the plurality of actions in the order that the plurality of actions were received, the plurality of action descriptions including a first action description, a second action description, and a third action description that correspond to the first action, the second action, and the third action, respectively;</claim-text>
<claim-text>modifying the file by executing the plurality of actions in the order that they are received, the modifying further comprising:
<claim-text>storing a first program state in the program log, the first program state corresponding to the file prior to executing the first action;</claim-text>
<claim-text>storing a second program state in the program log, the second program state corresponding to the file after executing the first action; and</claim-text>
<claim-text>storing a third program state in the program log, the third program state corresponding to the file after executing the second action;</claim-text>
</claim-text>
<claim-text>receiving, after the modifying, an undo request corresponding to the first action;</claim-text>
<claim-text>in response to receiving the undo request, the method further comprises:
<claim-text>removing the first action description from the program log without removing the last action description;</claim-text>
<claim-text>associating the second action description to the first program state in response to removing the first action description from the program log;</claim-text>
<claim-text>updating the third program state in response to associating the second action description to the first program state, the updating resulting in an updated third program state;</claim-text>
<claim-text>determining whether the third action description is independent of the first action description;</claim-text>
<claim-text>in response to determining that the third action description is independent of the first action description, associating the updated third program state to the third action description;</claim-text>
<claim-text>in response to determining that the third action description is dependent upon the first action description, removing the third action description from the program log; and</claim-text>
<claim-text>modifying the file by undoing the first action without undoing the last action.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The information handling system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the action removal tool is further effective to:
<claim-text>select a third program state located in the memory that is associated with a third action description, the third action description successive to the second action description in the program log; and</claim-text>
<claim-text>update the third program state based upon the association of the second action description to the first program state, the updating resulting in an updated third program state.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The information handling system of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the action removal tool is further effective to:
<claim-text>evaluate the updated third program state against the third action description;</claim-text>
<claim-text>determine, based upon the evaluation of the updated third program state against the third action description, that the third action description is independent of the first action description; and</claim-text>
<claim-text>associate the updated third program state to the third action description in response to the determination that the third action description is independent of the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The information handling system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the action removal tool is further effective to:
<claim-text>select a fourth program state located in the memory that is associated with a fourth action description, the fourth action description successive to the third action description in the program log;</claim-text>
<claim-text>update the fourth program state in response to the association of the updated third program state to the third action description, resulting in an updated fourth program state;</claim-text>
<claim-text>evaluate the updated fourth program state against the fourth action description;</claim-text>
<claim-text>determine, based upon the evaluation of the updated fourth program state against the fourth action description, that the fourth action description is dependent upon the first action description; and</claim-text>
<claim-text>remove the fourth action description from the program log in response to the determination that the fourth action description is dependent upon the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The information handling system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the action removal tool is further effective to:
<claim-text>increment an independent action description counter located in the memory in response to the determination that the third action description is independent of the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The information handling system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the action removal tool is further effective to:
<claim-text>in response to removing the fourth action description from the program log, remove successive action descriptions from the program log that are subsequent to the fourth action description in the program log; and</claim-text>
<claim-text>set a current state to the updated fourth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The information handling system of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the action removal tool is further effective to:
<claim-text>notify the user that the fourth action description is dependent upon the first action description;</claim-text>
<claim-text>receive a response from the user in response to the notifying; and</claim-text>
<claim-text>perform the removal of the fourth action description from the program log based upon the response.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The information handling system of <claim-ref idref="CLM-00011">claim 11</claim-ref> wherein the undo request includes a request to remove the first action and a fourth action that corresponds to a fourth action description, the fourth action description successive to the third action description in the program log, the action removal tool further effective to:
<claim-text>select a fourth program state located in the memory corresponding to the fourth action description;</claim-text>
<claim-text>update the fourth program state in response to the association of the updated third program state to the third action description;</claim-text>
<claim-text>select a fifth action description that is successive to the fourth action description in the program log;</claim-text>
<claim-text>evaluate the updated fourth program state against the fifth action description;</claim-text>
<claim-text>determine, based upon the evaluation of the updated fourth program state against the fifth action description, that the fifth action description is independent from the first action description and the fourth action description; and</claim-text>
<claim-text>associate the updated fourth program state to the fifth action description in response to the determination that the fifth action description is independent from the first action description and the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The information handling system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the action removal tool is further effective to:
<claim-text>select a sixth program state located in the memory that is associated with a sixth action description, the sixth action description successive to the fifth action description in the program log;</claim-text>
<claim-text>in response to the association of the updated fourth program state to the fifth action description, update the sixth program state;</claim-text>
<claim-text>evaluate the updated sixth program state against the sixth action description;</claim-text>
<claim-text>determine, based upon the evaluation of the updated sixth program state against the sixth action description, that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>remove the sixth action description from the program log in response to the determination that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>in response to removing the sixth action description from the program log, remove successive action descriptions from the program log that are subsequent to the sixth action description; and</claim-text>
<claim-text>set a current state to the updated sixth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the sixth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The information handling system of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein each of the plurality of actions is associated with a single software application and received from the user through a general user interface that displays the file.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A computer program product stored on a computer memory, the computer memory containing instructions for execution by a computer, which, when executed by the computer, cause the computer to implement a method for removing actions from a program log, the method comprising:
<claim-text>sequentially receiving from a user a plurality of actions to modify a file, the plurality of actions including a first action, a second action, a third action, and a last received action, wherein the third action is successive to the second action, the second action is successive to the first action, and the last received action is the last action received from the user;</claim-text>
<claim-text>sequentially storing a plurality of action descriptions in a program log, wherein each of the plurality of action descriptions correspond to one of the plurality of actions in the order that the plurality of actions were received, the plurality of action descriptions including a first action description, a second action description, and a third action description that correspond to the first action, the second action, and the third action, respectively;</claim-text>
<claim-text>modifying the file by executing the plurality of actions in the order that they are received, the modifying further comprising:
<claim-text>storing a first program state in the program log, the first program state corresponding to the file prior to executing the first action;</claim-text>
<claim-text>storing a second program state in the program log, the second program state corresponding to the file after executing the first action; and</claim-text>
<claim-text>storing a third program state in the program log, the third program state corresponding to the file after executing the second action;</claim-text>
</claim-text>
<claim-text>receiving, after the modifying, an undo request corresponding to the first action;</claim-text>
<claim-text>in response to receiving the undo request, the method further comprises:
<claim-text>removing the first action description from the program log without removing the last action description;</claim-text>
<claim-text>associating the second action description to the first program state in response to removing the first action description from the program log;</claim-text>
<claim-text>updating the third program state in response to associating the second action description to the first program state, the updating resulting in an updated third program state;</claim-text>
<claim-text>determining whether the third action description is independent of the first action description;</claim-text>
<claim-text>in response to determining that the third action description is independent of the first action description, associating the updated third program state to the third action description;</claim-text>
<claim-text>in response to determining that the third action description is dependent upon the first action description, removing the third action description from the program log; and</claim-text>
<claim-text>modifying the file by undoing the first action without undoing the last action.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the method further comprises:
<claim-text>selecting a third program state that is associated with a third action description, the third action description successive to the second action description in the program log; and</claim-text>
<claim-text>updating the third program state based upon the association of the second action description to the first program state, the updating resulting in an updated third program state.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computer program product of <claim-ref idref="CLM-00020">claim 20</claim-ref> wherein the method further comprises:
<claim-text>evaluating the updated third program state against the third action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated third program state against the third action description, that the third action description is independent of the first action description; and</claim-text>
<claim-text>associating the updated third program state to the third action description in response to the determination that the third action description is independent of the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the method further comprises:
<claim-text>selecting a fourth program state that is associated with a fourth action description, the fourth action description successive to the third action description in the program log;</claim-text>
<claim-text>updating the fourth program state in response to the association of the updated third program state to the third action description, resulting in an updated fourth program state;</claim-text>
<claim-text>evaluating the updated fourth program state against the fourth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated fourth program state against the fourth action description, that the fourth action description is dependent upon the first action description; and</claim-text>
<claim-text>removing the fourth action description from the program log in response to the determination that the fourth action description is dependent upon the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein the method further comprises:
<claim-text>incrementing an independent action description counter in response to the determination that the third action description is independent of the first action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computer program product of <claim-ref idref="CLM-00022">claim 22</claim-ref> wherein the method further comprises:
<claim-text>in response to removing the fourth action description from the program log, removing successive action descriptions from the program log that are subsequent to the fourth action description in the program log; and</claim-text>
<claim-text>setting a current state to the updated fourth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025" num="00025">
<claim-text>25. The computer program product of <claim-ref idref="CLM-00022">claim 22</claim-ref> wherein the method further comprises:
<claim-text>notifying the user that the fourth action description is dependent upon the first action description;</claim-text>
<claim-text>receiving a response from the user in response to the notifying; and</claim-text>
<claim-text>performing the removal of the fourth action description from the program log based upon the response.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026" num="00026">
<claim-text>26. The computer program product of <claim-ref idref="CLM-00021">claim 21</claim-ref> wherein the undo request includes a request to remove the first action and a fourth action that corresponds to a fourth action description, the fourth action description successive to the third action description in the program log, the method further comprising:
<claim-text>selecting a fourth program state corresponding to the fourth action description;</claim-text>
<claim-text>updating the fourth program state in response to the association of the updated third program state to the third action description;</claim-text>
<claim-text>selecting a fifth action description that is successive to the fourth action description in the program log;</claim-text>
<claim-text>evaluating the updated fourth program state against the fifth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated fourth program state against the fifth action description, that the fifth action description is independent from the first action description and the fourth action description; and</claim-text>
<claim-text>associating the updated fourth program state to the fifth action description in response to the determination that the fifth action description is independent from the first action description and the fourth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00027" num="00027">
<claim-text>27. The computer program product of <claim-ref idref="CLM-00026">claim 26</claim-ref> wherein the method further comprises:
<claim-text>selecting a sixth program state that is associated with a sixth action description, the sixth action description successive to the fifth action description in the program log;</claim-text>
<claim-text>in response to the association of the updated fourth program state to the fifth action description, updating the sixth program state;</claim-text>
<claim-text>evaluating the updated sixth program state against the sixth action description;</claim-text>
<claim-text>determining, based upon the evaluation of the updated sixth program state against the sixth action description, that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>removing the sixth action description from the program log in response to the determination that the sixth action description is dependent upon one of the requested action descriptions to remove;</claim-text>
<claim-text>in response to removing the sixth action description from the program log, removing successive action descriptions from the program log that are subsequent to the sixth action description; and</claim-text>
<claim-text>setting a current state to the updated sixth program state in response to the removal of the successive action descriptions from the program log that are subsequent to the sixth action description.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00028" num="00028">
<claim-text>28. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref> wherein each of the plurality of actions is associated with a single software application and received from the user through a general user interface that displays the file. </claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627069-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627069</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12936908</doc-number>
<date>20090408</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>FR</country>
<doc-number>08 52336</doc-number>
<date>20080408</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>147</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>L</subclass>
<main-group>29</main-group>
<subgroup>06</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20130101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>21</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>713164</main-classification>
<further-classification>726 17</further-classification>
<further-classification>726 27</further-classification>
</classification-national>
<invention-title id="d2e71">System and method for securing a computer comprising a microkernel</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2006/0256105</doc-number>
<kind>A1</kind>
<name>Scarlata</name>
<date>20061100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2006/0294517</doc-number>
<kind>A1</kind>
<name>Zimmer</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2008/0016313</doc-number>
<kind>A1</kind>
<name>Murotake et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711173</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0163370</doc-number>
<kind>A1</kind>
<name>Maynard</name>
<date>20080700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>WO</country>
<doc-number>WO 2007/050797</doc-number>
<kind>A</kind>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00006">
<othercit>Fraser K et al: &#x201c;Safe Hardware Access with the Xen Virtual Machine Monitor&#x201d; Internet Citation, [Online] XP002370809 Retrieved from the Internet: URL:http://www.cl.cam.ac.uk/{akw27/papers/safehw-oasis04-final.pdf&#x3e; [retrieved on Mar. 7, 2006] the whole document.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Barham P et al: &#x201c;Xen and the Art of Virtualization&#x201d; Proceedings of the ACM Symposium on Operating Systems Principles, XX, XX, Oct. 1, 2003, pp. 164-177, XP002298786 sections 3.3.1 and 3.3.2.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00008">
<othercit>Xiaoqi Lu, Scott F. Smith: &#x201c;A microkernel virtual machine: Building security with clear interfaces&#x201d; Conference on Programming Language Design and Implementation; Proceedings of the 2006 Workshop on Programming Languages and Analysis for Security, 2006, pp. 47-56, XP002510783, Ottawa, Ontario, Canada, the whole document.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00009">
<othercit>International Search Report mailed on Dec. 4, 2009 for PCT/FR2009/050623 filed Apr. 8, 2009, together with its English translation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>15</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>1</number-of-drawing-sheets>
<number-of-figures>2</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110035586</doc-number>
<kind>A1</kind>
<date>20110210</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Clermont</last-name>
<first-name>Nicolas</first-name>
<address>
<city>Rambouillet</city>
<country>FR</country>
</address>
</addressbook>
<residence>
<country>FR</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Hauguet</last-name>
<first-name>Francis</first-name>
<address>
<city>Montigny le Bretonneux</city>
<country>FR</country>
</address>
</addressbook>
<residence>
<country>FR</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Meier</last-name>
<first-name>Guillaume</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
<residence>
<country>FR</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Clermont</last-name>
<first-name>Nicolas</first-name>
<address>
<city>Rambouillet</city>
<country>FR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Hauguet</last-name>
<first-name>Francis</first-name>
<address>
<city>Montigny le Bretonneux</city>
<country>FR</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Meier</last-name>
<first-name>Guillaume</first-name>
<address>
<city>Paris</city>
<country>FR</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Gardere Wynne Sewell LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Szuwalski</last-name>
<first-name>Andre M.</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>EADS Secure Networks</orgname>
<role>03</role>
<address>
<city>Elancourt</city>
<country>FR</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Barron, Jr.</last-name>
<first-name>Gilberto</first-name>
<department>2432</department>
</primary-examiner>
<assistant-examiner>
<last-name>Okeke</last-name>
<first-name>Izunna</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/FR2009/050623</doc-number>
<kind>00</kind>
<date>20090408</date>
</document-id>
<us-371c124-date>
<date>20101007</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2009/136080</doc-number>
<kind>A </kind>
<date>20091112</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method of securing a computer comprising a microkernel and a system for interfacing with at least one virtualized operating system are presented. The microkernel includes a clock drive, a scheduler and an inter-process communication manager. The system for interfacing forms at least one virtual machine associated with each operating system and allows execution of the latter without modification. The method includes, at the level of the system for interfacing, the steps of:&#x2014;intercepting any communication between a means external to the operating system and the operating system,&#x2014;verifying that predefined rules of access to said external means are validated by said communication;&#x2014;transmitting the communication to the recipient if the rules are validated.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="184.91mm" wi="190.50mm" file="US08627069-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="263.48mm" wi="196.34mm" file="US08627069-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">PRIORITY CLAIM</heading>
<p id="p-0002" num="0001">This application is a 371 filing from PCT/FR2009/050623 filed Apr. 8, 2009 which claims priority from French Application for Patent No. 08-52336 filed Apr. 8, 2008, the disclosures of which are hereby incorporated by reference.</p>
<heading id="h-0002" level="1">TECHNICAL FIELD</heading>
<p id="p-0003" num="0002">This invention relates to a system and a method for securing a computer comprising a microkernel. It likewise relates to a computer program product implementing the method.</p>
<heading id="h-0003" level="1">BACKGROUND</heading>
<p id="p-0004" num="0003">Conventional operating systems such as Microsoft Windows, GNU/Linux or the like were not designed with strong security constraints. The result is weakly secured design in the form of a two-layer operating system: the first layer consists of the kernel run in a privileged mode and the second layer consists of the applications which are run in an unprivileged mode called the user mode. The kernel is typically a monolithic kernel, even if a modular approach is chosen for managing in particular all of the resources offered by the operating system. The kernel includes the low-level software such as the scheduler, the process manager, the memory manager as well as the peripheral drivers and some high-level services such as the file systems, the network stacks, the encryption algorithms, etc.</p>
<p id="p-0005" num="0004">Accordingly, the kernel comprises millions of code lines with a proportional number of bugs and security flaws. It cannot therefore be verified as compliant with the specifications using the current code verifiers and official proof systems. In addition, they have poor isolation properties. As a matter of fact, the user processes can break the isolation in various ways owing to the tubes, the files, the shared memory, etc. Management of the inter-process communications is not reliable. Furthermore, there is no isolation inside the kernel, or between sub-systems of the kernel, e.g., such as between the drivers and the network stacks. Thus, a bugged or corrupt hardware component driver can endanger the entire system.</p>
<p id="p-0006" num="0005">As security risks increase, kernel designers have attempted to secure the existing kernels by adding mandatory access managers (Mandatory Access Control&#x2014;MAC) with a small granularity for implementing the &#x201c;Reference Monitor&#x201d; concept. As a matter of fact, current operating systems generally implement Discretionary Access Control (DAC), which cannot solve the generic problem of malicious codes, and especially viruses. Examples of operating system security enhancements are SELinux, GRSecurity, AppArmor, RSBAC, SEBSD, etc.</p>
<p id="p-0007" num="0006">However, these implementations do not meet the requirements of the Reference Monitor because the security functions forming part of the kernel are not protected and are unusable within the kernel domain: they do not offer any protection between sub-systems of the kernel. Furthermore, since these kernels manage all of the system resources, it is difficult to establish a security policy, and the result is complex, in terms of configuration and management, thereby making official verification impossible.</p>
<p id="p-0008" num="0007">All of these weaknesses make official verification of the protection offered by these operating systems impossible and produce a number of security threats which limit the use of these systems in environments having a high security requirement. Furthermore, the kernel memory space is shared amongst all of the processes, and with all the sub-systems, even if they belong to different security levels. Consequently, the current operating systems do not offer a healthy and secure environment.</p>
<p id="p-0009" num="0008">As a reaction to the complexity of current monolithic kernels, researchers have proposed the concept of a microkernel, which is characterized by the movement of a maximum number of services outside the kernel, into the user space. These functionalities are then provided by small independent servers possessing their own address space.</p>
<p id="p-0010" num="0009">The microkernel is thus limited to a few basic functions including management of the communications between the servers, which are carried out via message transfer (IPC-Inter Process Communication). In addition to this management, a microkernel includes a clock driver and a scheduler.</p>
<p id="p-0011" num="0010">Thus, while a traditional monolithic kernel comprises several million lines of code, a microkernel generally comprises less than 20,000 lines of code.</p>
<p id="p-0012" num="0011">The attraction of secure system designers for microkernels is thus understood, since they are of a size which enables them to be easily maintained and they can be specifically verified. They can thus be certified at the highest level, EAL7, of the Common Criteria.</p>
<p id="p-0013" num="0012">One of the most widely known and currently used microkernels in various alternatives is the L4 microkernel designed and implemented by Jochen Liedtke.</p>
<p id="p-0014" num="0013">However, along with the microkernel itself, it becomes necessary to develop the necessary servers for the system to offer the functionalities expected from a modern operating system.</p>
<p id="p-0015" num="0014">Therefore, in order to avoid complete rewriting of an operating system, it has been proposed to use the microkernel as a virtualization hypervisor base on which one or more traditional operating systems are run. As a matter of fact, a microkernel and all of the management servers required for partitioning the resources natively perform the function of a hypervisor, namely that of partitioning the available resources between the virtual machines and emulating hardware events (they do not comprise the peripheral drivers, only non-shareable system buses), thereby offering a high-performance native virtualization technology, also known as &#x201c;system&#x201d; level.</p>
<p id="p-0016" num="0015">It is in this way that the L4 Linux project of the University of Dresden (Germany) brought the Linux kernel over to the L4/Fiasco microkernel and the layer of services thereof, thereby creating a (para) virtualized LINUX running on top of a hypervisor, in a completely unprivileged mode, in user mode.</p>
<p id="p-0017" num="0016">In terms of security, such a system benefits from the reliability of the microkernel. However, the security of the servers likewise depends on the reliability of the IPC communications, because it is a possible means of transmitting harmful data. Such being the case, for reasons of efficiency, communications security management is traditionally left to the servers, the microkernel being content with transmitting the messages. The microkernel can, however, offer a communication rights mechanism; two tasks can communicate with one another only if they have the appropriate rights. In the opposite case, the communication is redirected to a specific communications control server which will authorize or not authorize the communication &#x201c;on-the-fly&#x201d;, based on the security policy.</p>
<p id="p-0018" num="0017">In addition, current microkernel architectures are such that security policy is &#x201c;hardwired&#x201d; into the access rules of the microkernel whereby, even in a virtualization context with several virtual machines, they all have the same security policy.</p>
<p id="p-0019" num="0018">It would thus be particularly advantageous to have secure microkernel architecture which enables good control of virtual machine access as well as granularity and flexibility in the implementation of one or more security policies with regard to a single system.</p>
<heading id="h-0004" level="1">SUMMARY</heading>
<p id="p-0020" num="0019">Therefore, according to a first aspect of the invention, a method for securing a computer comprises a microkernel and interface means with at least one virtualized operating system, said microkernel comprising a clock driver, a scheduler and an inter-process communication manager and said interface means forming at least one virtual machine associated with each operating system and enabling the running thereof without modification.</p>
<p id="p-0021" num="0020">At the level of the interface means, the method comprises the steps of:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0021">interception of all communication between a means external to the operating system and the operating system,</li>
        <li id="ul0002-0002" num="0022">verification that the predefined rules of access to said external means are validated by said communication; and</li>
        <li id="ul0002-0003" num="0023">transmission of the communication to the recipient, if the rules are validated.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0022" num="0024">According to other characteristics and embodiments, the external means comprise means of storing secret cryptographic data and any transmission of secret cryptographic data is secured prior to storage.</p>
<p id="p-0023" num="0025">According to a second aspect of the invention, a computer program product comprises program instructions for implementing the preceding process when they are executed on a computer.</p>
<p id="p-0024" num="0026">According to a third aspect, a system for securing a computer comprising a microkernel and interface means with at least one operating system, said microkernel and said interface means forming at least one virtual machine associated with each operating system and enabling the running thereof, is such that the interface means comprise mediators customized for intercepting any communication between a means external to the operating system and the operating system and to transmit said communication to its recipient only if the predefined rules of access to said external means are validated by said communication.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0025" num="0027">The invention will be better understood upon reading the following description given for illustrative purposes only, and made with reference to the appended drawings, in which:</p>
<p id="p-0026" num="0028"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic view of the software layers of a computer comprising a virtualization software; and</p>
<p id="p-0027" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart of a securing method according to an embodiment of the invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0028" num="0030">With reference to <figref idref="DRAWINGS">FIG. 1</figref>, besides the hardware shown symbolically by layer <b>1</b>, a computer conventionally comprises a microkernel <b>3</b>. This microkernel <b>3</b> manages a portion of the hardware directly, namely the processor, the memory controllers, the interrupt controller and the clock driver. The various resource management servers, symbolized by layer <b>4</b>, run on top of the microkernel <b>3</b>, each being responsible for managing a sub-set of kernel objects of a given type. To reach the maximum level of security, a resource-type management server is assigned per security domain (e.g., a physical memory manager per level, each possessing distinct memory areas). The management servers <b>4</b> set forth an interface to virtualized operating systems <b>7</b>, enabling access to the managed resources. Peripheral drivers <b>5</b> are responsible for managing a peripheral and are closely linked to an access mediator <b>11</b>, <b>11</b>&#x2032;. The mediator <b>11</b>&#x2032; is responsible for multiplexing access to the peripheral between several concurrent systems, whereas the mediators <b>11</b> are responsible for applying specific processing to each system (encryption . . . ). In particular, the mediators <b>11</b>, <b>11</b>&#x2032; provide a virtual peripheral to the virtualized operating system <b>7</b>. All of the interfaces set forth by the mediators, on the one hand, and the resource managers, on the other hand, comprise a &#x201c;virtual machine&#x201d;. The mediators <b>11</b>, <b>11</b>&#x2032; comprise security rules which are defined in a security policy management module <b>13</b> and stored in storage means <b>15</b>.</p>
<p id="p-0029" num="0031">In this description, the term operating system is given a broad meaning which includes an operating system per se, such as the Microsoft Windows, Inc. operating system or the Linux system, as well as all of the applications which are run on this operating system.</p>
<p id="p-0030" num="0032">In the described embodiment, the operating system <b>7</b> is enclosed in a &#x201c;cage&#x201d; consisting of the virtual machine and, in particular, the mediators <b>11</b>. <b>11</b>&#x2032;. In this way, for example, any display request by the operating system <b>7</b> passes through a display mediator. In the same way, the network stream passes through a network mediator, etc.</p>
<p id="p-0031" num="0033">The mediators <b>11</b>, <b>11</b>&#x2032; are connected to the corresponding peripheral drivers <b>5</b> conventionally in charge of controlling the hardware.</p>
<p id="p-0032" num="0034">The operation is then as follows, with reference to <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0033" num="0035">Each time that information is transmitted between the operating system <b>7</b> and a driver <b>5</b> or another element external to the operating system <b>7</b>, the corresponding mediator <b>11</b>, <b>11</b>&#x2032; intercepts the flow of information, in step <b>20</b>.</p>
<p id="p-0034" num="0036">Then, this flow is analyzed in step <b>22</b>, based on the predefined rules of access. If, in step <b>24</b>, the flow is compliant with these rules, it is normally transmitted to the recipient thereof at <b>26</b>.</p>
<p id="p-0035" num="0037">On the other hand, if this flow is not compliant with at least one of these rules, it is cancelled in step <b>28</b>, i.e., the recipient does not receive the flow and the sender optionally receives a transmission error message, or else it is modified at <b>30</b> prior to be transmitted at <b>26</b> to the recipient. The purpose of the modification is to validate the flow with respect to the rule or rules violated by the flow in the initial state of same.</p>
<p id="p-0036" num="0038">Several types of mediators can be defined based on the type of filtering and/or associated hardware component.</p>
<p id="p-0037" num="0039">For example, a first type of mediator is defined for the hardware resources shared by several operating systems, each of said systems being run in a virtual &#x201c;cage&#x201d;. For example, a machine generally possesses a single network card. It is then necessary to share the use thereof amongst the various virtualized operating systems, in order to give each one access to the network.</p>
<p id="p-0038" num="0040">In this way, a driver is defined in the virtualization layer consisting of the microkernel and management servers, and the corresponding mediator controls all accesses. In the case of the network card, each operating system receives its own MAC address via the mediator. In this way, a data packet being input onto the physical interface is managed by the driver. The mediator of the network card acts as a virtual bridge by transmitting the packet to the operating system. It is likewise possible to ensure that the outgoing packets are not tampered with by the operating system, e.g., by modifying the source MAC address.</p>
<p id="p-0039" num="0041">Another example relates to access to the disks. For example, if the virtualized operating system has received the first partition of the first disk as storage space, access to the other partitions will be rejected by the mediator linked to the storage driver.</p>
<p id="p-0040" num="0042">Conventionally, communication between two virtualized operating systems on a single machine is carried out by means of a virtual network access managed entirely by the virtualization software. In this way, each operating system transmits information to the other as if the second operating system were on a different machine connected via a data network.</p>
<p id="p-0041" num="0043">A second type of mediator is associated with these virtual network peripherals in order to ensure that only authorized communications are possible. Depending on the established security policy, the mediator then acts as a firewall by blocking unauthorized traffic, or else, encrypts the communications in order to transmit same to an operating system operating at another level of security.</p>
<p id="p-0042" num="0044">A third type of mediator supports cryptographic functions by preventing the disclosure of secrets in an unsecure environment. It is thus possible to entrust sensitive operations to another unsecured operating system.</p>
<p id="p-0043" num="0045">For example, sensitive data having to be stored in encrypted form only is transmitted by the operating system to the storage driver in order to be written onto a hard drive. The corresponding mediator intercepts the data transmission, encrypts same with a key known to them alone and transmits same as encrypted to the storage driver. In this way, the encryption key is never &#x201c;disclosed&#x201d; to the unsecured operating system.</p>
<p id="p-0044" num="0046">The mediators advantageously enable a level of security to be defined for each operating system.</p>
<p id="p-0045" num="0047">Since the microkernel associated with the mediators is much less complex that an operating system, it is easier to write a secure virtualization software capable of being proven as correct.</p>
<p id="p-0046" num="0048">In this way, the isolation of each operating system on the virtual machine thereof with the appropriate level of security enables a level of security to be obtained which is at least equal to that obtained by using separate machines.</p>
<p id="p-0047" num="0049">In addition, it is possible to define a security policy by defining the actions and communication authorized for each level of security. This includes the assignment of a device, the use of a shared resource, the authorized communications, the constraints for exporting/importing data of the associated protection domain.</p>
<p id="p-0048" num="0050">By centralizing management of the security policy in a specific module and by decentralizing the implementation of these rules by each mediator, it is thereby possible to guarantee obtainment of a consistent and upgradeable level of security.</p>
<p id="p-0049" num="0051">As a matter of fact, the security policy is implemented by the mediators via the security rules. It is therefore possible to have dynamic policies by disseminating new rules to the mediators, for example, in order to counteract a specific attack, and without affecting the other levels of security.</p>
<p id="p-0050" num="0052">It is understood that extensive use of the mediators enables the virtualized operating systems to be &#x201c;caged&#x201d;. As a matter of fact, by installing a mediator at each point of connection, all of the flows of information, either incoming or outgoing, are filtered by the mediators. In this way, since the mediators are reliable software packages which enforce a security policy, a virtualized operating system can do nothing more than what is specified in the security policy. Otherwise, the operation is rejected.</p>
<p id="p-0051" num="0053">This enables the operating systems to be run without any particular privilege, in particular without Input/Output or instruction privilege.</p>
<p id="p-0052" num="0054">Furthermore, the &#x201c;caging&#x201d; is transparent for the virtualized operating system because it cannot distinguish between a flow coming from a mediator and a flow coming from a hardware device. This enables additional security processing of the flows in order to protect operating system data without involving same. For example, an antivirus mediator can scan the contents of a USB flash drive prior to installing it on the operating system.</p>
<p id="p-0053" num="0055">The mediators can be concatenated to one another, thereby advantageously enabling several operations to be executed on a flow.</p>
<p id="p-0054" num="0056">For example, in order to write on the USB flash drive, it is possible to concatenate an antivirus mediator and then an encryption mediator.</p>
<p id="p-0055" num="0057">In this way, it is possible to advantageously obtain physical security by protecting sensitive data belonging to various security domains on a single physical medium.</p>
<p id="p-0056" num="0058">Another advantage is that the protection applies without having to modify or involve the operating system, whether it be for protection or for configuration purposes. In this way, the virtualized operating system does not need to be configured for security, the configuration of same being ensured by the security policies implemented by the mediators.</p>
<p id="p-0057" num="0059">The operating system is configured upon boot-up by the mediators, which determine the rules of access and implement the policy while running.</p>
<p id="p-0058" num="0060">As a matter of fact, the security policy can be structured according to mediator class rules, which has the advantage of enabling high modularity: the implementation of a particular class of mediators is substitutable, without having to overwrite the entire security possible; only the rules relating to a particular class must be rewritten. In the same way, modifications can be made dynamically, i.e., during the run time, only with regard to specific mediators, relating solely to specific domains, without impacting the protection of the other interfaces or domains.</p>
<p id="p-0059" num="0061">Thus, platform administration writes access rules for each mediator, specifying the authorized clients, and the allocated resources as well as the associated actions. All of the configuration files for the mediators are then combined into a single security policy file. To start a new virtual operating system or domain, the loader starts by searching in this file for the mediators which have this domain as a client, and it then authorizes the communications of this domain only with these mediators.</p>
<p id="p-0060" num="0062">The operating system cannot override the mediators and therefore the security policy. Then, independently of one another, the mediators apply the access rules defined for this domain to these objects.</p>
<p id="p-0061" num="0063">It is understood that various alternatives are obtainable from this description.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer system, comprising:
<claim-text>a microkernel,</claim-text>
<claim-text>a first and a second virtualized operating system,</claim-text>
<claim-text>a plurality of peripheral drivers supported by the microkernel, and</claim-text>
<claim-text>an access mediator associated with each peripheral driver and coupled to the first and second virtualized operating systems,</claim-text>
<claim-text>said microkernel comprising a clock driver, a scheduler and an inter-process communication manager, and</claim-text>
<claim-text>said access mediators forming a first virtual machine associated with the first virtualized operating system and a second virtual machine associated with the second virtualized operating system,</claim-text>
<claim-text>each access mediator functioning to multiplex first and second virtualized operating system communication access to an associated one of the peripheral drivers and customized to intercept any communication between the peripheral driver and a multiplexed one of the first and second virtualized operating systems and to permit transmission of said intercepted communication if the intercepted communication is compliant with security rules of access specifically defined for the multiplexed one of the first and second virtualized operating systems.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the peripheral driver is a driver for a memory configured for storing sensitive data and wherein the access mediator is further operable to encrypt the intercepted communication with an encryption key known only by the access mediator and the multiplexed one of the first and second virtualized operating systems prior to storage in said memory.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising an additional access mediator interconnecting the first and second virtualized operating systems and customized to enable transmission of the intercepted communication between the first and second virtualized operating systems if the intercepted communication is compliant with security rules of access specifically defined for the communications between the first and second virtualized operating systems.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a security policy is defined for each of the first and second virtualized operating systems in the form of a set of access rules for implementation by the access mediators.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein access rules associated with the security policy for the first and second virtualized operating systems are provided to the access mediators prior to booting up said first and second virtualized operating systems.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a MAC address assigned by the access mediator to each of the first and second virtualized operating systems, said access mediator further configured to ensure that communications originated by the first and second virtualized operating systems utilize the assigned MAC address of the originating one of the first and second virtualized operating systems.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the peripheral driver is a driver for a disk storage device having a storage space partitioned into a first partition associated with the first virtualized operating system and a second partition associated with the second virtualized operating system, said access mediator for the disk storage device peripheral driver further customized to reject the intercepted communication of the first virtualized operating system if the communication is for access to the second partition, and vice versa.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method of securing a computer, wherein the computer comprises:
<claim-text>a microkernel comprising a clock driver, a scheduler and an inter-process communication manager;</claim-text>
<claim-text>a first virtualized operating system;</claim-text>
<claim-text>a second virtualized operating system;</claim-text>
<claim-text>a plurality of peripheral drivers supported by the microkernel;</claim-text>
<claim-text>an access mediator associated with each peripheral driver and coupled to the first and second virtualized operating systems, said access mediators forming a first virtual machine associated with the first virtualized operating system and a second virtual machine associated with the second virtualized operating system;</claim-text>
<claim-text>said method comprising the following operations performed at each one of the access mediators:
<claim-text>multiplexing first and second virtualized operating system communication access to an associated one of the peripheral drivers;</claim-text>
<claim-text>intercepting communications between the peripheral driver and a multiplexed one of the first and second virtualized operating systems;</claim-text>
<claim-text>verifying that the intercepted communication is compliant with security rules of access specifically defined for the multiplexed one of the first and second virtualized operating systems; and</claim-text>
<claim-text>permitting transmission of the intercepted communication if the intercepted communication is compliant with the defined security rules of access.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising assigning through the access mediator a MAC address to each of the first and second virtualized operating systems and ensuring that communications originated by the first and second virtualized operating systems utilize the assigned MAC address of the originating one of the first and second virtualized operating systems.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the peripheral driver is a driver for a disk storage device having a storage space partitioned into a first partition associated with the first virtualized operating system and a second partition associated with the second virtualized operating system, said method further comprising the following operations performed at the access mediator for the disk storage device peripheral driver:
<claim-text>rejecting the intercepted communication of the first virtualized operating system if the communication is for access to the second partition, and vice versa.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the peripheral driver is a driver for a disk storage device having a storage space, and wherein permitting transmission comprises:
<claim-text>identifying the intercepted communication from the first virtualized operating system as including sensitive data for storage on the disk storage device;</claim-text>
<claim-text>encrypting the intercepted communication with an encryption key known only by the access mediator and first virtualized operating system; and</claim-text>
<claim-text>passing the encrypted communication to the disk storage device peripheral driver.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer further comprises an additional access mediator interconnecting the first and second virtualized operating systems, the method further comprising the following operations performed at the additional access mediator:
<claim-text>intercepting communications between the first and second virtualized operating systems;</claim-text>
<claim-text>verifying that the intercepted communication is compliant with security rules of access specifically defined for the communications between the first and second virtualized operating systems; and</claim-text>
<claim-text>permitting transmission of the intercepted communication if the intercepted communication is compliant with the defined security rules of access.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising, in a preliminary step, defining a security policy for each of the first and second virtualized operating systems in the form of a set of access rules for implementation by the access mediators.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising providing the set of access rules associated with the security policy to the access mediators prior to booting up said first and second virtualized operating systems.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A computer program product implemented on a non-transitory computer readable medium and including program code instructions recorded on a computer-readable medium an executable on a computer, said computer comprising:
<claim-text>a microkernel comprising a clock driver, a scheduler and an inter-process communication manager;</claim-text>
<claim-text>a first virtualized operating system;</claim-text>
<claim-text>a second virtualized operating system;</claim-text>
<claim-text>a plurality of peripheral drivers supported by the microkernel;</claim-text>
<claim-text>an access mediator associated with each peripheral driver and coupled to the first and second virtualized operating systems, said access mediators forming a first virtual machine associated with the first virtualized operating system and a second virtual machine associated with the second virtualized operating system;</claim-text>
<claim-text>said program code instructions when executed by the computer causing the following operations to be performed at each one of the access mediators:
<claim-text>multiplexing first and second virtualized operating system communication access to an associated one of the peripheral drivers;</claim-text>
<claim-text>intercepting communications between the peripheral driver and a multiplexed one of the first and second virtualized operating systems;</claim-text>
<claim-text>verifying that the intercepted communication is compliant with security rules of access specifically defined for the multiplexed one of the first and second virtualized operating systems; and</claim-text>
<claim-text>permitting transmission of the intercepted communication if the intercepted communication is compliant with the defined security rules of access. </claim-text>
</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627305-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627305</doc-number>
<kind>B1</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12410191</doc-number>
<date>20090324</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>971</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717163</main-classification>
<further-classification>717124</further-classification>
<further-classification>717127</further-classification>
</classification-national>
<invention-title id="d2e53">System, method, and computer program product for hooking code inserted into an address space of a new process</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7028309</doc-number>
<kind>B2</kind>
<name>Ward et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719328</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7100123</doc-number>
<kind>B1</kind>
<name>Todd et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715862</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7213249</doc-number>
<kind>B2</kind>
<name>Tung Loo et al.</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719330</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7472384</doc-number>
<kind>B1</kind>
<name>Beloussov et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7676798</doc-number>
<kind>B2</kind>
<name>Snover et al.</name>
<date>20100300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717139</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>7703081</doc-number>
<kind>B1</kind>
<name>Buches</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717127</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>7904886</doc-number>
<kind>B2</kind>
<name>Dufour et al.</name>
<date>20110300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717124</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>8015558</doc-number>
<kind>B1</kind>
<name>Beloussov et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2002/0056076</doc-number>
<kind>A1</kind>
<name>Made</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717129</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2005/0039190</doc-number>
<kind>A1</kind>
<name>Rees et al.</name>
<date>20050200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719316</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2006/0156285</doc-number>
<kind>A1</kind>
<name>Jensen et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717120</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2006/0277539</doc-number>
<kind>A1</kind>
<name>Amarasinghe et al.</name>
<date>20061200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2007/0118350</doc-number>
<kind>A1</kind>
<name>van der Made</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>703 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2007/0261044</doc-number>
<kind>A1</kind>
<name>Clark</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717162</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2008/0209557</doc-number>
<kind>A1</kind>
<name>Herley et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 23</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717107</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>717162-168</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>713  2</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715804-805</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719315-316</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>719330-332</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>7</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dalcher</last-name>
<first-name>Gregory William</first-name>
<address>
<city>Tigard</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Edwards</last-name>
<first-name>Jonathan L.</first-name>
<address>
<city>Portland</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Dalcher</last-name>
<first-name>Gregory William</first-name>
<address>
<city>Tigard</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Edwards</last-name>
<first-name>Jonathan L.</first-name>
<address>
<city>Portland</city>
<state>OR</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wong, Cabello, Lutsch, Rutherford &#x26; Brucculeri, LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>McAfee, Inc.</orgname>
<role>02</role>
<address>
<city>Santa Clara</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Do</last-name>
<first-name>Chat</first-name>
<department>2193</department>
</primary-examiner>
<assistant-examiner>
<last-name>Curbelo, III</last-name>
<first-name>Sergio J</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A system, method, and computer program product are provided for hooking code inserted into an address space of a new process. In use, creation of a process is identified. Additionally, code is inserted into an address space of the process. Still yet, at least one module being loaded in association with the process is identified. Further, the code is hooked at an entry point of the at least one module based on a determination of whether the at least one module includes a predefined module.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="244.60mm" wi="176.11mm" file="US08627305-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="190.84mm" wi="150.96mm" file="US08627305-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="140.80mm" wi="156.46mm" file="US08627305-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="170.18mm" wi="156.13mm" file="US08627305-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="247.06mm" wi="175.01mm" file="US08627305-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="208.70mm" wi="161.88mm" file="US08627305-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="228.60mm" wi="183.05mm" file="US08627305-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="136.74mm" wi="179.24mm" file="US08627305-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0002" num="0001">The present invention relates to hooking code, and more particularly to hooking code in association with a new process.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Traditionally, code has been hooked in association with a new process for executing the code in association with the new process. Hooking in association with a new process has generally been utilized in an attempt to execute the hooked code early within execution of an executable associated with the new process. Unfortunately, conventional techniques for hooking code in association with a new process have exhibited various limitations.</p>
<p id="p-0004" num="0003">Just by way of example, one of such conventional techniques has included intercepting a thread creation process and blocking the same while injecting desired code. However, such technique is generally limited since the interception of the thread creation process relies on operating system behavior which changes between versions. Another conventional technique has included intercepting a DLL load mechanism and injecting a desired thread for execution thereof. While libraries are loading, however, loader code within a library (e.g. ntdll.dll) may lock its associated data structures, such that the injected thread is required to wait until the locks are released before the injected code is able to load its own libraries. Accordingly, initialization of the injected code and initialization of the process may run in parallel such that the injected code is prevented from executing at an earlier point within the process.</p>
<p id="p-0005" num="0004">There is thus a need for addressing these and/or other issues associated with the prior art.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">A system, method, and computer program product are provided for hooking code inserted into an address space of a new process. In use, creation of a process is identified. Additionally, code is inserted into an address space of the process. Still yet, at least one module being loaded in association with the process is identified. Further, the code is hooked at an entry point of the at least one module based on a determination of whether the at least one module includes a predefined module.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network architecture, in accordance with one embodiment.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 2</figref> shows a representative hardware environment that may be associated with the servers and/or clients of <figref idref="DRAWINGS">FIG. 1</figref>, in accordance with one embodiment.</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 3</figref> shows a method for hooking code inserted into an address space of a new process, in accordance with one embodiment.</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 4</figref> shows a method for hooking code inserted at an entry point of an executable and at least one library of a new process, in accordance with another embodiment.</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIGS. 5A-5E</figref> show an address space of a new process in which code is inserted, in accordance with yet another embodiment.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a network architecture <b>100</b>, in accordance with one embodiment. As shown, a plurality of networks <b>102</b> is provided. In the context of the present network architecture <b>100</b>, the networks <b>102</b> may each take any form including, but not limited to a local area network (LAN), a wireless network, a wide area network (WAN) such as the Internet, peer-to-peer network, etc.</p>
<p id="p-0013" num="0012">Coupled to the networks <b>102</b> are servers <b>104</b> which are capable of communicating over the networks <b>102</b>. Also coupled to the networks <b>102</b> and the servers <b>104</b> is a plurality of clients <b>106</b>. Such servers <b>104</b> and/or clients <b>106</b> may each include a desktop computer, lap-top computer, hand-held computer, mobile phone, personal digital assistant (PDA), peripheral (e.g. printer, etc.), any component of a computer, and/or any other type of logic. In order to facilitate communication among the networks <b>102</b>, at least one gateway <b>108</b> is optionally coupled therebetween.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 2</figref> shows a representative hardware environment that may be associated with the servers <b>104</b> and/or clients <b>106</b> of <figref idref="DRAWINGS">FIG. 1</figref>, in accordance with one embodiment. Such figure illustrates a typical hardware configuration of a workstation in accordance with one embodiment having a central processing unit <b>210</b>, such as a microprocessor, and a number of other units interconnected via a system bus <b>212</b>.</p>
<p id="p-0015" num="0014">The workstation shown in <figref idref="DRAWINGS">FIG. 2</figref> includes a Random Access Memory (RAM) <b>214</b>, Read Only Memory (ROM) <b>216</b>, an I/O adapter <b>218</b> for connecting peripheral devices such as disk storage units <b>220</b> to the bus <b>212</b>, a user interface adapter <b>222</b> for connecting a keyboard <b>224</b>, a mouse <b>226</b>, a speaker <b>228</b>, a microphone <b>232</b>, and/or other user interface devices such as a touch screen (not shown) to the bus <b>212</b>, communication adapter <b>234</b> for connecting the workstation to a communication network <b>235</b> (e.g., a data processing network) and a display adapter <b>236</b> for connecting the bus <b>212</b> to a display device <b>238</b>.</p>
<p id="p-0016" num="0015">The workstation may have resident thereon any desired operating system. It will be appreciated that an embodiment may also be implemented on platforms and operating systems other than those mentioned. One embodiment may be written using JAVA, C, and/or C++ language, or other programming languages, along with an object oriented programming methodology. Object oriented programming (OOP) has become increasingly used to develop complex applications.</p>
<p id="p-0017" num="0016">Of course, the various embodiments set forth herein may be implemented utilizing hardware, software, or any desired combination thereof. For that matter, any type of logic may be utilized which is capable of implementing the various functionality set forth herein.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> shows a method <b>300</b> for hooking code inserted into an address space of a new process, in accordance with one embodiment. As an option, the method <b>300</b> may be carried out in the context of the architecture and environment of <figref idref="DRAWINGS">FIGS. 1</figref> and/or <b>2</b>. Of course, however, the method <b>300</b> may be carried out in any desired environment.</p>
<p id="p-0019" num="0018">As shown in operation <b>302</b>, creation of a process is identified. The process may include any newly created process, with respect to the present description. Just by way of example, the process may include an operating system process.</p>
<p id="p-0020" num="0019">In one embodiment, the creation of the process may be identified utilizing a driver that is automatically notified upon creation of the process. For example, the driver may include a device driver. In another embodiment, the creation of the process may be identified as a result of a module (e.g. executable, library, etc.) being loaded.</p>
<p id="p-0021" num="0020">Of course, however, the creation of the process may be identified in any desired manner. Further, identifying the creation of the process may include identifying the process itself. To this end, by identifying the creation of the process, a new process (i.e. the created process) may be identified.</p>
<p id="p-0022" num="0021">Additionally, code is inserted into an address space of the process, as shown in operation <b>304</b>. With respect to the present description, the code may include any executable code capable of being hooked for execution thereof. In various embodiments, the code may include code for monitoring for unwanted activity (e.g. malware, etc.), code of an intrusion prevention (IPS) system, code of a anti-virus scanner, code for loading libraries utilized by an application other than an executable of the process, etc.</p>
<p id="p-0023" num="0022">The address space of the process may include any portion of memory utilized by the process. For example, the address space of the process may include address space apportioned to the process for use by the process. For example, the address space may store a main executable, libraries, etc. associated with the process.</p>
<p id="p-0024" num="0023">In one embodiment, the code may be inserted into the address space of the process in response to the identification of the creation of the process. For example, the code may be inserted into the process as a result of an identification of a module of the process being loaded. Accordingly, the code may be inserted into the address space prior to the execution of the process, as an option.</p>
<p id="p-0025" num="0024">In another embodiment, inserting the code into the address space may include inserting the code into an empty portion of the address space. In still yet another embodiment, the address space may include a range of addresses, such that the code may be inserted into any subset of the range of addresses. Of course, however, the code may be inserted into the address space in any desired manner.</p>
<p id="p-0026" num="0025">Furthermore, as shown in operation <b>306</b>, at least one module being loaded in association with the process is identified. As noted above, the module may include a library, such as a dynamic link library (DLL). Thus, for example, the code inserted into the address space of the process may optionally be utilized for loading libraries other than the library included in the module. Just by way of example, a first portion of the code may load the libraries loaded and a second portion of the code may utilize the libraries enabling various functionality of the second portion of the code.</p>
<p id="p-0027" num="0026">As another option, the module may include a main executable. Such main executable may utilize the library (e.g. during execution of the main executable, etc.). Of course, however, the module may include any code, data, etc. capable of being loaded (e.g. linked, etc.), or even already loaded, with respect to the process.</p>
<p id="p-0028" num="0027">Optionally, the module may be identified by a device driver (e.g. the device driver that identified the creation of the process). As another option, the module may be identified based on a mapping of the module into the address space of the process. Since such mapping may be performed prior to the execution of the process, the module may be identified prior to the execution of the process, in one embodiment.</p>
<p id="p-0029" num="0028">Moreover, the code is hooked at an entry point of the at least one module based on a determination of whether the at least one module includes a predetermined module. Note operation <b>308</b>. The entry point may include any portion of the module which initiates execution of the module (e.g. where execution of the module would start), such as a first predetermined number of code instructions of the module, etc.</p>
<p id="p-0030" num="0029">In one embodiment, the code may be hooked at the entry point of the module by modifying executable at the entry point of the module (e.g. the first predetermined number of code instructions of the module) to transfer control to the code upon execution of the executable code. For example, such executable code at the entry point of the module may be replaced with an instruction (or a set of instructions) to transfer control to the code. Such instruction may include a jump instruction, as an option. To this end, by hooking the code at the entry point of a module, the code may be executed upon an attempt to initiate execution the module.</p>
<p id="p-0031" num="0030">It should be noted that hooking the code at an entry point of the at least one module may include hooking different portions of the code, where each portion of the code is hooked at an entry point of a different module. For example, each portion of the code may provide different functionality when executed. In this way, different functionality of the code may be provided at the entry points of the different modules being loaded in association with the process, as an option.</p>
<p id="p-0032" num="0031">Still yet, the code may be hooked at an entry point of the at least one module based on any determination of whether the at least one module includes a predetermined module. In one embodiment, the code may be hooked at an entry point of each module identified as being loaded in association with the process if it is determined that such module includes a predetermined module (e.g. in a list of predetermined modules).</p>
<p id="p-0033" num="0032">With respect to such embodiment, the predetermined module may include a main executable associated with the process. In this way, the code may (e.g. always) be hooked at an entry point of the main executable. Hooking the code at the entry point of the main executable may ensure that the code is executed via the process (at the entry point of the main executable) even when libraries or any other modules are not loaded in association with the process.</p>
<p id="p-0034" num="0033">As another option, the predetermined module may include a 32-bit module if the code is 32-bits. Just by way of example, if the process is associated with a 64-bit operating system and the code is 32-bits, the code may optionally only be hooked at a 32-bit module, thus preventing the 32-bit code from being hooked at a 64-bit module of the 64-bit operating system. As another option, if the code is 64-bits, the predetermined module may include a 64-bit module, for ensuring that the 64-bit code is hooked at a 64-bit module.</p>
<p id="p-0035" num="0034">As yet another option, the predetermined module may include a module predetermined to not be referenced by the code. For example, a module that does not provide functionality which is critical to the code may be hooked. In one embodiment, the aforementioned module may be hooked since execution of such module may not be necessary for the code to correctly execute.</p>
<p id="p-0036" num="0035">In another embodiment, the code may be hooked at an entry point of each module identified as being loaded in association with the process if it is determined that such module does not include a predetermined module. With respect to such embodiment, the predetermined module may optionally include a module predetermined to be reference by (e.g. utilized by) the code, such as a module with functionality that is critical to the code. For example, the predetermined module may include the ntdll.dll library. Thus, as an option, the code may be prevented from being hooked at an entry point of a module if execution of the module is necessary due to use of such module by the code dining execution.</p>
<p id="p-0037" num="0036">Of course, while various examples of predetermined modules have been described hereinabove, it should be noted that the predetermined modules may include any modules predetermined based on the functionality of the code, etc. As noted above, the identification of the module(s) being loaded in association with the process may be performed prior to execution of the process. In this way, the hooking of the code at the entry point of the module(s), based on the determination of whether each module includes a predetermined module, may also be performed prior to execution of the process, such that it may optionally be ensured that the code is executed prior to execution of any modules associated with the process (e.g. if the modules all include predetermined modules at which the code is hooked), only after predetermined modules at which the code is not hooked, etc.</p>
<p id="p-0038" num="0037">More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing technique may or may not be implemented, per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be'construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.</p>
<p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. 4</figref> shows a method <b>400</b> for hooking code inserted at an entry point of an executable and at least one library of a new process, in accordance with another embodiment. As an option, the method <b>400</b> may be carried out in the context of the architecture and environment of <figref idref="DRAWINGS">FIGS. 1-3</figref>. Of course, however, the method <b>400</b> may be carried out in any desired environment. It should also be noted that the aforementioned definitions may apply during the present description.</p>
<p id="p-0040" num="0039">As shown in decision <b>402</b>, it is determined whether an executable is loaded into an address space of a new process. With respect to the present embodiment, the executable includes any executable code which has not yet been executed via the new process. Optionally, the determination may be made by determining whether a driver has been notified of the new process, whether the executable is being loaded, etc.</p>
<p id="p-0041" num="0040">If it is determined that an executable is not loaded into an address space of a new process, the method <b>400</b> continues to wait. If, however, it is determined that an executable is loaded into an address space of a new process, code is injected into the address space. Note operation <b>404</b>. Injecting the code may include inserting (e.g. storing, writing, etc.) the code into the address space in any desired manner.</p>
<p id="p-0042" num="0041">Further, an entry point of the executable is identified, as shown in operation <b>406</b>. In one embodiment, the entry point may be identified by analyzing a header of the executable. For example, the header may include a field indicating the entry point of the executable (e.g. indicating a portion of the executable, such as an instruction, etc., at which execution of the executable begins). Of course, however, the entry point may be identified in any desired manner.</p>
<p id="p-0043" num="0042">Still yet, as shown in operation <b>408</b>, a hook which jumps to the injected code is inserted at the entry point of the executable. For example, the hook may include a jump instruction. In this way, upon an attempted execution of the executable, the injected code may be executed in place of the executable.</p>
<p id="p-0044" num="0043">Moreover, it is determined in decision <b>410</b> whether the hook has executed. Determining whether the hook has executed may include determining whether the hook has been called within the process, etc. If the hook is not determined to have executed, it is further determined whether a library is being loaded in association with the process (see decision <b>414</b>). The library may include a DLL, for example.</p>
<p id="p-0045" num="0044">If it is determined that a library is not being loaded in association with the process, the method <b>400</b> again determines whether the hook has executed (in decision <b>410</b>). If, however, it is determined that a library is being loaded in association with the process, it is determined whether the library is a predetermined library. Note decision <b>416</b>.</p>
<p id="p-0046" num="0045">With respect to the present embodiment, the predetermined library may include a library for which it is predetermined that the injected code is not to be hooked at an entry point thereof. For example, the predetermined library may include a library referenced (e.g. utilized) by the injected code, such that execution of the library is necessary (and thus is not to be hooked) in order for the functionality of the injected code to be fully realized. In one embodiment, determining whether the library is a predetermined library may include determining whether the library is included in a list of predetermined libraries.</p>
<p id="p-0047" num="0046">If it is determined that the library includes a predetermined library, the injected code is not hooked and the method <b>400</b> again determines whether the hook has executed (in decision <b>410</b>). In response to a determination that the library does not include a predetermined library, an entry point of the library is identified. Note operation <b>418</b>.</p>
<p id="p-0048" num="0047">In one embodiment, the entry point may be identified by analyzing a header of the library. For example, the header may include a field indicating the entry point of the library (e.g. indicating a portion of the library, such as an instruction, etc., at which execution of the library begins). Of course, however, the entry point of the library may be identified in any desired manner.</p>
<p id="p-0049" num="0048">In addition, a hook to the injected code is inserted at the entry point of the library, as shown in operation <b>420</b>. For example, the hook may include a jump instruction. In this way, upon an attempted execution of the library, the injected code may be executed in place of the library.</p>
<p id="p-0050" num="0049">Furthermore, in response to the insertion of the hook to the injected code at the entry point of the library, it is yet again determined whether a hook has executed (in decision <b>410</b>). Determining whether a hook has executed may include determining whether the hook at the entry point to the executable or the hook at the entry point to a library has executed. If it is determined that the hook has not executed, it is determined whether another library is being (or has) loaded (see decision <b>414</b>).</p>
<p id="p-0051" num="0050">In this way, the injected code may continue to be hooked at entry points to libraries associated with the new process until one of the hooks (at the executable or at any of the libraries) is executed. Once it is determined that a hook has executed (in decision <b>410</b>), the injected code is executed. Note operation <b>412</b>. The injected code may include various functionality that is realized during execution thereof.</p>
<p id="p-0052" num="0051">In one embodiment, during execution of the injected code, the injected code may undo (e.g. remove) the hook inserted at the entry point to the executable and each hook inserted into an entry point of a library. As an option, the injected code may undo such hooks based on a list of hooks. For example, as each hook is inserted at the executable and libraries, such insertion may be logged in the list of hooks (e.g. including information on each hook such as a location of the hook, etc.). The injected code may then undo each hook indicated in the list (e.g. using the information on each hook).</p>
<p id="p-0053" num="0052">In another embodiment, during execution of the injected code, the injected code may perform an initialization needed for hooking. For example, the injected code may load any libraries referenced by the injected code which have not yet been loaded within the process. In yet another embodiment, during execution of the injected code, the injected code may monitor for unwanted activity, but of course may perform any other desired functionality.</p>
<p id="p-0054" num="0053">It should be noted that while the method <b>400</b> has been described in a manner in which the injected code is hooked at an entry point of the executable prior to being hooked at an entry point of a library, other embodiments are contemplated in which the injected code is hooked at an entry point of a library prior to being hooked at an entry point of the executable. For example, the method <b>400</b> may assume that the executable is loaded into the address space of the process prior to a library being loaded into such address space. However, if a library is loaded into the address space of the process prior to the executable being loaded therein, the injected code may be hooked at an entry point of the library prior to being hooked at an entry point of the executable.</p>
<p id="p-0055" num="0054">In one exemplary embodiment, a Microsoft&#x2122; Windows&#x2122; operating system may start a process. The process may be started by placing code of a main executable into an address space of a new process, placing code for ntdll.dll into the address space, starting a thread which runs loader code into the ntdll.dll, and using the loader code to examine a header of the executable to determine other DLLs that are needed by the main executable. Further, the new process may also be started by loading each DLL code into address space, calling an entry point of each DLL, and calling an entry point of the executable. As an option, a device driver may optionally be notified during the placing of the code of a main executable into an address space of a new process, the placing of the code for ntdll.dll into the address space, the starting of a thread which runs loader code into the ntdll.dll, and the loading of each DLL code into address space.</p>
<p id="p-0056" num="0055">However, since malicious code may run from an entry point of a DLL, code may be injected at the entry point of such DLL for monitoring, preventing, etc. execution of the DLL. For example, when loading of the executable is identified, the code may be injected into the address space of the new process. In addition, when loading of the executable is identified and loading of any DLLs are identified, a header of the executable and each identified DLL may be analyzed to identify the entry point of the associated executable/DLL.</p>
<p id="p-0057" num="0056">The entry point may thus be overwritten with a transfer control instruction which jumps to the injected code, such that the injected code may be hooked at the entry point. As an option, the overwritten code may be stored elsewhere, such that it may be restored when the hook is removed after execution of the injected code has begun. It should be noted that predetermined DLLs, such as ntdll.dll, may not have their associated entry points overwritten with the transfer control instruction which jumps to the injected code.</p>
<p id="p-0058" num="0057">Just by way of example, ntdll.dll may be excluded from having a hook placed therein because it may run early enough in the process such that execution of the injected code is not desired that early, because it may be predetermined to be non-malicious, and because it may be critical to the functionality of the injected code. In addition, the entry point to the executable and each DLL may be hooked since it may not necessarily be known before execution of the injected code begins how many DLLs will load, and since it may be possible that only the executable and ntdll.dll will load via the process.</p>
<p id="p-0059" num="0058">Further, when a DLL entry point is executed (e.g. if no DLLs are loaded), the entry point of the executable may be executed, such that the injected code executes (as a result of the hook to the injected code). The execution of the injected code may allow all the other entry point hooks to be undone and for initialization needed for hooking to be performed. Also, if other DLLs load after the execution of the injected code, such DLLs may be ignored (i.e. not hooked, etc.) since the injected code for monitoring for malicious activity may already be executing in a manner such that activity of the DLLs may be monitored via the injected code.</p>
<p id="p-0060" num="0059"><figref idref="DRAWINGS">FIGS. 5A-5E</figref> show an address space <b>500</b> of a new process in which code is inserted, in accordance with yet another embodiment. As an option, the method <b>400</b> may be implemented in the context of the architecture and environment of <figref idref="DRAWINGS">FIGS. 1-3</figref>. Of course, however, the method <b>400</b> may be implemented in any desired environment. It should also be noted that the aforementioned definitions may apply during the present description.</p>
<p id="p-0061" num="0060">As shown in <figref idref="DRAWINGS">FIG. 5A</figref>, when an executable (referred to as blah.exe) is loaded into an address space <b>500</b> of a new process, a driver is notified and code is injected (referred to as injected code) into the address space. Additionally, when the executable is loaded into the address space <b>500</b> (and the driver notified), an entry point of the executable is hooked to run the injected code. See <figref idref="DRAWINGS">FIG. 5B</figref>.</p>
<p id="p-0062" num="0061">Further, DLLs (referred to as kernel32.dll) being loaded into the address space <b>500</b> are identified (e.g. based on a notification from the driver), as shown in <figref idref="DRAWINGS">FIGS. 5C-5D</figref>. However, predetermined DLLs (referred to as ntdll.dll and 64-bit wow64 cpu.dll) are ignored, as shown in <figref idref="DRAWINGS">FIGS. 5C-5D</figref>. When the identified DLLs (kernel32.dll) are loaded, an entry point of each such DLL is hooked to run the injected code (see <figref idref="DRAWINGS">FIG. 5D</figref>).</p>
<p id="p-0063" num="0062">Once a hooked entry point is called, the injected code is executed. As shown in <figref idref="DRAWINGS">FIG. 5E</figref>, execution of the injected code may load a DLL associated with the injected code and may undo the injection of the code and the insertion of the hooks. In this way, the injected code may be executed early within the new process without necessarily relying on undocumented aspects of operating system behavior. In addition, the injected code may be executed in line with a main thread so the injected code may participate cleanly in a locking mechanism employed by any DLLs associated with the process while allowing execution prior to malicious code.</p>
<p id="p-0064" num="0063">While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer program product embodied on a non-transitory computer readable medium comprising instructions stored thereon to cause one or more processors to:
<claim-text>identify creation of a process;</claim-text>
<claim-text>insert code into an address space of the process prior to execution of the process;</claim-text>
<claim-text>insert a first hook into an entry point of an executable of the process, the first hook pointing to the inserted code;</claim-text>
<claim-text>identify whether the first hook has executed;</claim-text>
<claim-text>wherein if the first hook has not executed, then:
<claim-text>identify at least one library module being loaded in association with the process;</claim-text>
<claim-text>determine whether the at least one library module is related to the execution of the inserted code;</claim-text>
<claim-text>and insert a subsequent hook into an entry point of the at least one library module when it is determined that the at least one library module is not related to the execution of the inserted code, the subsequent hook pointing to the inserted code, wherein the instructions to identify at least one library module, determine, and insert a subsequent hook are repeated for one or more libraries being loaded in association with the process until it is determined that the first hook or the subsequent hook has executed;</claim-text>
</claim-text>
<claim-text>and remove each subsequent hook placed at the entry point of the at least one library module, in response to the execution of the inserted code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the creation of the process is identified utilizing a driver that is automatically notified upon creation of the process.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the instructions are utilized to monitor for unwanted activity.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the instructions are utilized for loading libraries other than the library included in the at least one library module.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the at least one library module is identified based on a mapping of the at least one library module into the address space of the process.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising instructions to cause the one or more processors to identify the entry point of the at least one library module by analyzing a header of the at least one library module.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the instructions to cause the one or more processors to hook the inserted code comprise instructions to cause the one or more processors to replace executable code at the entry point of the at least one library module with an instruction to transfer control to the inserted code.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer program product is operable such that the instructions to cause the one or more processors to determine whether the at least one library module is related to the execution of the inserted code comprise instructions to cause the one or more processors to determine whether the at least one library module includes a predetermined module.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the predetermined module includes a library module predetermined to be referenced by the inserted code.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the predetermined module includes a main executable associated with the process.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the process is associated with a 64-bit operating system and the inserted code is 32-bits such that the predetermined module includes a 32-bit module.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instructions to cause the one or more processors to determine whether the at least one library module is related to the execution of the inserted code comprise instructions to cause the one or more processors to determine whether the at least one library module is necessary to the execution of the inserted code.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A method, comprising:
<claim-text>identifying creation of a process;</claim-text>
<claim-text>inserting code into an address space of the process prior to execution of the process;</claim-text>
<claim-text>inserting a first hook into an entry point of an executable of the process, the first hook pointing to the inserted code;</claim-text>
<claim-text>identifying whether the first hook has executed;</claim-text>
<claim-text>wherein if the first hook has not executed, then:
<claim-text>identifying at least one library module being loaded in association with the process;</claim-text>
<claim-text>determining whether the at least one library module is related to the execution of the inserted code;</claim-text>
<claim-text>and inserting a subsequent hook into an entry point of the at least one library module when it is determined that the at least one library module is not related to the execution of the inserted code, the subsequent hook pointing to the inserted code, wherein the instructions to identify at least one library module, determine, and insert a subsequent hook are repeated for one or more libraries being loaded in association with the process until it is determined that the first hook or the subsequent hook has executed;</claim-text>
</claim-text>
<claim-text>and removing each subsequent hook placed at the entry point of the at least one library module, in response to the execution of the inserted code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein determining whether the at least one library module is related to the execution of the inserted code comprises determining whether the at least one library module is necessary to the execution of the inserted code.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. A system, comprising:
<claim-text>a memory;</claim-text>
<claim-text>and one or more processors communicatively coupled to the memory and configured to:
<claim-text>identify creation of a process;</claim-text>
<claim-text>insert code into an address space of the process prior to execution of the process;</claim-text>
<claim-text>insert a first hook into an entry point of an executable of the process, the first hook pointing to the inserted code;</claim-text>
<claim-text>identify whether the first hook has executed;</claim-text>
<claim-text>wherein if the first hook has not executed, then:
<claim-text>identify at least one library module being loaded in association with the process;</claim-text>
<claim-text>determine whether the at least one library module is related to the execution of the inserted code;</claim-text>
<claim-text>and insert a subsequent hook into an entry point of the at least one library module when it is determined that the at least one library module is not related to the execution of the inserted code, the subsequent hook pointing to the inserted code, wherein the instructions to identify at least one library module, determine, and insert a subsequent hook are repeated for one or more libraries being loaded in association with the process until it is determined that the first hook or the subsequent hook has executed;</claim-text>
</claim-text>
</claim-text>
<claim-text>and remove each subsequent hook placed at the entry point of the at least one library module, in response to the execution of the inserted code.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more processors are further configured to identify the entry point of the at least one library module by analyzing a header of the at least one library module.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more processors configured to determine whether the at least one library module is related to the execution of the inserted code comprise one or more processors configured to determine whether the at least one library module is necessary to the execution of the inserted code. </claim-text>
</claim>
</claims>
</us-patent-grant>

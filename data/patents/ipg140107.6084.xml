<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627208-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627208</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13080500</doc-number>
<date>20110405</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>208</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715746</main-classification>
<further-classification>715744</further-classification>
<further-classification>715762</further-classification>
<further-classification>715763</further-classification>
<further-classification>715826</further-classification>
</classification-national>
<invention-title id="d2e53">Application generator for data transformation applications</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5664206</doc-number>
<kind>A</kind>
<name>Murow et al.</name>
<date>19970900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  8</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>6920608</doc-number>
<kind>B1</kind>
<name>Davis</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715209</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2002/0040359</doc-number>
<kind>A1</kind>
<name>Green et al.</name>
<date>20020400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  3</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2002/0073119</doc-number>
<kind>A1</kind>
<name>Richard</name>
<date>20020600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707513</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2002/0178077</doc-number>
<kind>A1</kind>
<name>Katz et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705 26</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2003/0149934</doc-number>
<kind>A1</kind>
<name>Worden</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715513</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2005/0144166</doc-number>
<kind>A1</kind>
<name>Chapus et al.</name>
<date>20050600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  6</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2005/0171970</doc-number>
<kind>A1</kind>
<name>Ozzie et al.</name>
<date>20050800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707102</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>12</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715239</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715744</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715746</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715762</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715763</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715826</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>18</number-of-drawing-sheets>
<number-of-figures>18</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11312969</doc-number>
<date>20051220</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7921367</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13080500</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110302554</doc-number>
<kind>A1</kind>
<date>20111208</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rivas</last-name>
<first-name>Luis</first-name>
<address>
<city>Denver</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kreider</last-name>
<first-name>Mark</first-name>
<address>
<city>Arvada</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Sharp</last-name>
<first-name>Alec</first-name>
<address>
<city>Boulder</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Rivas</last-name>
<first-name>Luis</first-name>
<address>
<city>Denver</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kreider</last-name>
<first-name>Mark</first-name>
<address>
<city>Arvada</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Sharp</last-name>
<first-name>Alec</first-name>
<address>
<city>Boulder</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Marsh Fischmann &#x26; Breyfogle LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Oracle International Corporation</orgname>
<role>02</role>
<address>
<city>Redwood City</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Iturralde</last-name>
<first-name>Enrique</first-name>
<department>2179</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A utility is provided for generating applications for a variety of data conversion or handling application environments. A user can use a graphical user interface to purpose application adaptable modules to define a desired application. In one implementation, the user interface (<b>1500</b>) includes a node tree panel (<b>1502</b>) and a process assembly panel (<b>1504</b>). The node tree panel (<b>1502</b>) lists tool sets (<b>1508</b>) including transformations, maps and input-output tools. These tools can then be assembled together with identified data sources and then elements using the assembly panel (<b>1504</b>) to define an application. In this manner, an application is generated from a number of generic modules simply by linking the modules to perform a purpose of the desired application. In this manner, an application is generated from a number of generic modules simply by linking the modules to perform a purpose of the desired application.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="171.11mm" wi="90.00mm" file="US08627208-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="196.17mm" wi="158.75mm" orientation="landscape" file="US08627208-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="158.75mm" wi="100.50mm" file="US08627208-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="239.69mm" wi="170.60mm" orientation="landscape" file="US08627208-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="222.84mm" wi="174.41mm" orientation="landscape" file="US08627208-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="226.31mm" wi="166.45mm" orientation="landscape" file="US08627208-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="231.31mm" wi="172.80mm" orientation="landscape" file="US08627208-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="210.65mm" wi="158.75mm" orientation="landscape" file="US08627208-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="158.75mm" wi="123.27mm" orientation="landscape" file="US08627208-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="152.57mm" wi="117.86mm" orientation="landscape" file="US08627208-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="210.99mm" wi="137.75mm" orientation="landscape" file="US08627208-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="207.94mm" wi="132.25mm" orientation="landscape" file="US08627208-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="183.30mm" wi="158.75mm" file="US08627208-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00013" num="00013">
<img id="EMI-D00013" he="210.82mm" wi="158.75mm" orientation="landscape" file="US08627208-20140107-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00014" num="00014">
<img id="EMI-D00014" he="201.25mm" wi="158.75mm" file="US08627208-20140107-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00015" num="00015">
<img id="EMI-D00015" he="217.25mm" wi="160.70mm" orientation="landscape" file="US08627208-20140107-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00016" num="00016">
<img id="EMI-D00016" he="234.10mm" wi="167.72mm" orientation="landscape" file="US08627208-20140107-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00017" num="00017">
<img id="EMI-D00017" he="226.23mm" wi="137.67mm" orientation="landscape" file="US08627208-20140107-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00018" num="00018">
<img id="EMI-D00018" he="206.42mm" wi="135.47mm" file="US08627208-20140107-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application claims priority to U.S. patent application Ser. No. 11/312,969, filed Dec. 20, 2005, entitled &#x201c;APPLICATION GENERATOR FOR DATA TRANSFORMATION APPLICATIONS&#x201d;, the entirety of which is hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">FIELD OF THE INVENTION</heading>
<p id="p-0003" num="0002">The present invention relates generally to software development and servicing, and, in particular, to a tool for building applications involving a data conversion from a first form to a second form using generic or application adaptable modules.</p>
<heading id="h-0003" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0004" num="0003">Software applications generally are operative to perform a predefined functionality in a predefined context. For example, a database application generally allows a user to construct a structured database that can be readily populated and searched.</p>
<p id="p-0005" num="0004">Early software applications had severely limited flexibility as to functionality. Routines were coded to perform a specific function on a specific type of data. If different functionality was required, a new routine had to be written. Even minor modifications of the functionality or data generally required the services of a specialist to write lines of code to address the change.</p>
<p id="p-0006" num="0005">A significant advance was provided by the philosophy of object-oriented programming. This often involves significant flexibility of the functionality within a specific processing context and an abstraction of the data of interest to a metadata model. Thus, items of data or functional components may be represented as &#x201c;objects&#x201d; that can assume different attributes for different processing functions. In this manner, flexible processing components may be established for performing a variety of data handling functions that are commonly required for a particular application. For example, a flexible processing engine may be developed to track inventory. This may involve monitoring additions to inventory and shipments from inventory to facilitate maintenance of a desired stock level. Because the processing engine is flexible, it can be readily configured to add products to be monitored, to revise a stock level or even, perhaps, to revise the specific functionality performed within an application context, e.g., to monitor on-line orders. Ideally, this does not require that new routines be written, it merely requires that the existing objects be associated with attributes that define the new data or functionality.</p>
<p id="p-0007" num="0006">While such programming represents a significant advance, it is still generally necessary to independently obtain or develop applications for each desired application objective and to undertake substantial configuration for each application environment. Thus, a business may have one application for loading data into a database, one application for handling on-line ordering, one application for inventory management, etc. Each of these applications is generally independently developed and configured for a particular application environment, with little or no transference of time and knowledge investment between the applications. From the perspective of the business, this is problematic because of the expense and other resources required to implement, coordinate and update a large number of applications. From the perspective of developers, this is problematic due to the significant maintenance and servicing requirements. This results in the common phenomenon of software development companies gravitating towards software servicing as an increasing operational emphasis.</p>
<heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0008" num="0007">The present invention is directed to a processing tool and related functionality (collectively, &#x201c;utility&#x201d;) for use in generating applications for a variety of data conversion or handling application environments. In this manner, such applications can be developed to a significant extent without the services of a specialist to develop application specific code. Moreover, the invention allows for substantial reuse of knowledge as between multiple applications, thereby enhancing development efficiency and reducing opportunities for error. The invention thus entails an abstraction of functionality and data well beyond that contemplated by object oriented programming so as to provide components that adapt to define new applications, not merely to accommodate new data or new functionality within a given application context and application environment.</p>
<p id="p-0009" num="0008">By way of illustration, the invention can be used to generate applications involving a data conversion from a first form to a second form. In a variety of contexts, it is desired to convert data from a first or input form to a second or target form. Such conversions may involve, for example, linguistics, syntax and formats. In this regard, linguistic differences may be due to the use of different languages or, within a single language, due to terminology, proprietary names, abbreviations, idiosyncratic phrasings or structures, misspellings and other matter that is specific to a location, region, business entity or unit, trade, organization or the like. Also within the purview of linguistic differences for present purposes are different currencies, different units of weights and measures and other systematic differences. Syntax relates to the phrasing, ordering and organization of terms as well as grammatic and other rules relating thereto. Differences in format may relate to data structures or conventions associated with a database or other application and associated tools.</p>
<p id="p-0010" num="0009">One or more of these differences in form may need to be addressed in connection with a conversion process. Some examples of conversion environments include: importing data from one or more legacy systems into a target system; correlating or interpreting an external input (such as a search query) in relation to one or more defined collections of information; correlating or interpreting an external input in relation to one or more external documents, files or other sources of data; facilitating exchanges of information between systems; and translating words, phrases or documents. In all of these cases, a machine-based tool attempts to address differences in linguistics, syntax and/or formats between the input and target environments. It will be appreciated in this regard that the designations &#x201c;input&#x201d; and &#x201c;target&#x201d; are largely a matter of convenience and are process specific. That is, for example, in the context of facilitating exchanges of information between systems, which environment is the input environment and which is the target depends on which way a particular conversion is oriented and can therefore change. Many of the noted conversion processes may be broadly characterized as involving data matching, data publishing or data aggregation.</p>
<p id="p-0011" num="0010">In the context of such conversion environments, a variety of applications may be desired. For example, applications may be desired to respond to requests for quotes, to create a catalog, to merge disparate databases or the like. In such business contexts, each application achieves a defined business purpose. Within a given application environment, e.g., of a business entity or unit, multiple applications may access a common body of or overlapping data. However, conventionally, such applications have generally been conceptualized as performing different and independent functionalities, e.g., a request for quote application identifies required project components and computes associated costs whereas a catalog creation application involves product grouping, formatting, etc.</p>
<p id="p-0012" num="0011">In accordance with the present invention, such applications can be constructed from generic or application adaptable modules that are &#x201c;purposed&#x201d; for a particular application. Examples of such modules that may be used in a variety of data conversion applications include modules for &#x201c;cleaning&#x201d; a product description (e.g., by converting an input description into a standard form), extracting attributes from a product description (e.g., size, product type or the like), obtaining a product description from a product number, identifying particular products matching designated product attributes, etc. It will be appreciated that these modules, considered independent of a particular application context, do not achieve a business purpose. However, these modules can be combined and/or supplemented (e.g., with interface logic) to define an application. For example, an application for identifying particular products from a company database matching an input product description may involve a cleaning module (for standardizing the input description), an attribute extraction module (for identifying particular products matching the extracted attributes), together with appropriate interface logic. The modules are thus purposed to achieve a business objective. A variety of novel functionality and structure is provided in relation to such application generation.</p>
<p id="p-0013" num="0012">In accordance with one aspect of the present invention, a utility is provided that allows for a selection of a module from a library of generic modules so as to construct an application. The utility involves providing a set of generic modules, selecting a module of the set of generic modules and operating a machine-based tool for purposing the selected module for use in the application under consideration. Each of the modules includes rules for use in converting data objects relating to a defined subject matter area between the first form and the second form. The modules are generic in that the rules function independent of any purpose specific to a particular application. However, upon purposing, the selected module is adapted to perform functionality related to an identified purpose of the application.</p>
<p id="p-0014" num="0013">The set of generic data modules may include, for example, modules for performing individual data matching, publishing or aggregating functions. The rules may be specific to the application environment (e.g., the terminology, products or databases of a given entity) or may relate more generally to a subject matter area (e.g., a standard classification or description system of an industry). A particular module may be selected, for example, via a graphical, textual or other user interface. The machine-based tool may be operated to purpose the module, for example, by configuring the module for use in the application, by combining modules based on a desired purpose of the application, or accessing the module for configuration for use in the application. In this manner, the generic modules are readily available for use and re-use in a variety of applications.</p>
<p id="p-0015" num="0014">In accordance with another aspect of the present invention, a utility is provided for at least partially automating a process for generating logic to perform an identified function with respect to a subject matter area. The utility involves identifying a subject matter of interest in relation to a desired data conversion operation and accessing a knowledge base for the subject matter area, wherein associations are established between data items of the source and target forms. A user interface allows a user to identify at least one desired function with respect to source data or target data, and a machine-based tool uses the knowledge base to generate logic for performing the identified function with respect to the subject matter area.</p>
<p id="p-0016" num="0015">For example, the subject matter area of interest may be identified in relation to an industry of the user, the business of a specific entity, a desired application or a database, set of files or other stored information accessed by a user. The knowledge base may be, for example, a base developed for the user, may include information developed for other conversion application environments that is adapted for reuse, or may include conversion information of general applicability with respect to the subject matter area. The noted associations are preferably reflected in conversion rules that govern conversion of data items between the source form and the target form. By way of example, such rules may govern how input or source terms are cleaned for expression in a standardized intermediate form, how terms in an intermediate form are mapped to the target form, how a stream of data is parsed and elements thereof are identified, how syntax is recognized or constructed and conversion ambiguities are resolved, how attributes are extracted and expressed or matched to target information, and/or how input data is classified or associated with a processing frame, as will be described below.</p>
<p id="p-0017" num="0016">The user interface may be provided in textual, graphic and/or another form. A number of predefined functions or functional elements may be identified in a list or a set of graphical elements for selection by the user. In this regard, the function may be simply selected or defined by specifying a relationship between functional elements. For example, the function of extracting attributes from a product description may be identified by graphically linking or otherwise defining a functional link between a description object and an attribute extraction object. A machine-based tool, such as a processing platform (embodied in one or more machines) can then use the knowledge base to generate logic, such as an application, for performing the desired function. Thus, where the knowledge base includes rules for extracting attributes and the function is selected by linking a clean product description object to an attribute extraction object, the machine-based tool may operate to configure logic for extracting product attributes from product descriptions in a clean or intermediate, standardized form. This allows the expertise reflected in a knowledge base to be leveraged to achieve a variety of functionality and applications.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017">For a more complete understanding of the present invention and further advantages thereof, reference is now made to the following detailed description taken in conjunction with the drawings, in which:</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> is a schematic diagram of a semantic conversion system in accordance with the present invention;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating a semantic conversion process in accordance with the present invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a schematic diagram showing an example of a conversion that may be implemented using the system of <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> is a schematic diagram illustrating the use of public and private schema in a conversion process in accordance with the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 5-6B</figref> illustrate exemplary user interfaces in accordance with the present invention;</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic diagram illustrating set-up mode operation of a system in accordance with the present invention;</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 8</figref> is a schematic diagram illustrating a search application implemented in accordance with the present invention;</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. 9 and 10</figref> illustrate a classification system in accordance with the present invention;</p>
<p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. 11</figref> is a flow chart illustrating a process for establishing a parse tree structure in accordance with the present invention;</p>
<p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. 12</figref> is a schematic diagram illustrating a system for implementing a search application in accordance with the present invention;</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 13</figref> is a flow chart illustrating a process that may be implemented by the system of <figref idref="DRAWINGS">FIG. 12</figref>;</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 14</figref> is a schematic diagram illustrating a system using a knowledge base to process legacy information in accordance with the present invention;</p>
<p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. 15</figref> illustrates a graphical user interface for use in generating an application involving a data conversion process in accordance with the present invention; and</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 16</figref> illustrates a process flow implementation in accordance with the present invention; and</p>
<p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. 17</figref> is a flowchart illustrating processes for generating and using a data conversion application in accordance with the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0006" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0034" num="0033">The present invention relates to generating applications for a data conversion environment. Such applications generally involve converting data from a first or source form to a second or target form. As noted above, such conversions may be desired in a variety of contexts relating, for example, to importing data into or otherwise populating an information system, processing a search query, exchanging information between information systems and translation.</p>
<p id="p-0035" num="0034">In many cases, these applications involve matching an input to one or more items of information (e.g., search engine applications), publishing data (e.g., generating a catalog), or aggregating data (e.g., via merging databases). Thus, while a core functionality often relates to mapping an input in a first form to one or more corresponding or related outputs, a variety of applications are thereby supported. Particular applications are described below only for purposes of illustration.</p>
<p id="p-0036" num="0035">In the following description, the invention is set forth in the context of particular examples relating to processing a source stream including a product oriented attribute phrase. Such streams may include information identifying a product or product type together with a specification of one or more attributes and associated attribute values. For example, the source stream (e.g., a search query or product descriptor from a legacy information system) may include the content &#x201c;8 oz. ceramic coffee cup.&#x201d; In this case, the product may be defined by the phrase &#x201c;coffee cup&#x201d; and the implicit attributes of size and material have attribute values of &#x201c;8 oz.&#x201d; and &#x201c;ceramic&#x201d; respectively.</p>
<p id="p-0037" num="0036">While such source streams including product oriented attribute phrases provide a useful mechanism for illustrating various aspects of the invention, and in fact represent significant commercial implementations of the invention, it should be appreciated that the invention is not limited to such environments. Indeed, it is believed that the invention is applicable to virtually any other conversion environment with concepts such as product attributes and attribute values replaced, as necessary, by logical constructs appropriate to the subject environment, e.g., part of speech and form. Moreover, as noted above, the conversion rules are not limited to elements of a single attribute phrase or analog, but may involve relationships between objects, including objects set forth in separate phrases. Accordingly, the specific examples below should be understood as exemplifying the invention and not by way of limitation.</p>
<p id="p-0038" num="0037">The present invention is based in part on the recognition that a broad range of applications can be conceptualized as fundamentally involving converting data from a source form to a target form. Moreover, it has been recognized that such applications, in many cases, can be constructed from modules that can be reused in a variety of such applications. As such, these modules are abstracted from any specific application context; that is, they are substantially application adaptable. Generating an application from these modules thus involves &#x201c;purposing&#x201d; or &#x201c;repurposing&#x201d; the modules in relation to a purpose of an application under consideration, often a business purpose.</p>
<p id="p-0039" num="0038">The following description begins by describing the application generation functionality at a high conceptual level. In the examples provided below, this involves assembling existing application adaptable modules. Thereafter, various functionality for developing and operating such modules is described in greater detail, including functionality relating to both parse tree and frame-slot architectures for data conversion.</p>
<p id="p-0040" num="0039">Referring first to <figref idref="DRAWINGS">FIG. 15</figref>, a screen shot is shown of a user interface <b>1500</b> illustrating application generation functionality in accordance with the present invention. The user interface <b>1500</b> includes a node tree panel <b>1502</b> and a process assembly panel <b>1504</b>. The node tree panel <b>1502</b> provides a hierarchical listing of applications <b>1506</b>, application generation tool sets <b>1508</b>, tool folders <b>1510</b>, and individual tools <b>1512</b>. The process assembly panel <b>1504</b> provides a workspace for assembling application components and defining associated logic to define an application. As will be described in more detail below, the application components and logical interactions thereof are represented as intuitive graphical elements in panel <b>1504</b>.</p>
<p id="p-0041" num="0040">A user can use the interface <b>1500</b> to generate an application as follows. First, the user can access the application generation system, e.g., by loading the system on a processing platform. Various prompts may be provided to guide the user in identifying the desired application operation. In this regard, the user may identify an entity for whom the application will be developed, an industry, relevant databases, or the like. The user can select an existing application for modification or enter a new application name to initiate application generation. In the illustrated example, the application under development is identified as &#x201c;Demo_Matching_for_RFQ_<b>2</b>,&#x201d; a request for quote application involving identification of parts based on matching required or desired attributes to inventory.</p>
<p id="p-0042" num="0041">The processing system will then display a variety of elements <b>1508</b>, <b>1510</b>, <b>1512</b> in node tree form. The displayed elements <b>1508</b>, <b>1510</b>, <b>1512</b> may be a full listing of available elements, or intelligence may be executed in displaying elements likely to be relevant to the application. In the latter regard, such intelligence may be gleaned from responses to the noted prompts during start-up and/or may be gleaned from the application name. As will be understood from the description below, the system of the present invention is particularly well suited to matching an input application name to associated application generation elements. Indeed, this is a species of data conversion.</p>
<p id="p-0043" num="0042">In the illustrated example, the panel <b>1502</b> is populated with application generation tool sets <b>1508</b> including transformations, maps and new input/output tool sets. The transformation toolset includes the transformation tool folders <b>1510</b> identified as lens transforms, database transforms, web services, process control, exception processing, strings and math. The lens transforms folder <b>1510</b>, in turn, includes a number of lens tools <b>1512</b><i>a </i>each associated with a lens icon. Each of these lens tools <b>1512</b><i>a </i>embodies application adaptable logic for transforming data from a first form to a second form. For example, the illustrated lens tools <b>1512</b><i>a </i>include tools for assigning a manufacturing code (e.g., based on an input manufacturer's name or portion thereof), extracting product attributes (e.g., from a product description phrase), cleaning a product description (e.g., re-expressing an input description&#x2014;entered, for example, in free form, legacy database form or other &#x201c;local&#x201d; form&#x2014;in standardized form), extracting a product description from a part number such as an IPN, and extracting product attributes from an IPN (which may be conceptualized as a short-cut for the serial combination of obtaining a product description from an IPN and then extracting attributes from the product description). It will be appreciated that these tools <b>1512</b><i>a</i>, by themselves, do not define an application as a tool standing alone does not fulfill a business (or other) purpose. The development and operation of such tools will be described in greater detail below.</p>
<p id="p-0044" num="0043">The DB transforms folder <b>1510</b> includes a number of tools <b>1512</b><i>b</i>, associated with a database icon, embodying logic for performing conversions involving accessing a designated database. These tools <b>1512</b><i>b </i>are application adaptable tools, generally analogous to the lens tools <b>1512</b><i>a</i>, except that their functionality is linked to a database or databases. In the illustrated implementation, these tools <b>1512</b><i>b </i>include tools for identifying capacitors or resistors from a database (e.g., listing inventory of an entity) that match attributes extracted from a product description and tools for looking up a part or a description from a designated database.</p>
<p id="p-0045" num="0044">The web services folder <b>1510</b> includes tools for accessing the World Wide Web, for example, to receive application inputs (e.g., search queries, RFQs, etc.), output responses (e.g., search results, quotes, etc.), access conversion information (e.g., search databases, industry description/classification conventions, etc.) or other purposes. The process control folder <b>1510</b> includes tools <b>1512</b><i>c </i>for defining the logical operation of other tools <b>1512</b> (e.g., lens tools <b>1512</b><i>a </i>and database tools <b>1512</b><i>b</i>) or logical interoperation of such tools <b>1512</b> so as to achieve a purpose of the application at issue. In some cases, the tools <b>1512</b> may simply be linked to assemble an application. In other cases, it is useful to adapt the tools <b>1512</b> or specify the interoperation thereof. Thus, for example, the illustrated process control folder <b>1510</b> includes a lens attribute tool <b>1512</b><i>c </i>for adapting the operation of a lens transform tool <b>1512</b><i>a</i>. For example, a lens transform tool <b>1512</b><i>a </i>may be configured to access or point to a particular knowledge base. As described below, such knowledge bases may be developed for a specific application environment or may be re-used from another application environment with significant rule inheritance.</p>
<p id="p-0046" num="0045">The illustrated process control folder <b>1510</b> further includes a database field tool <b>1512</b><i>c</i>. As noted above, the database transform tools <b>1512</b><i>b </i>execute conversions relative to particular databases. In this regard, the tools <b>1512</b><i>b </i>may be configured, for example, to point to particular databases and to understand the database structure so as to identify relevant fields. Such configuration may be implemented using the lens attribute tool <b>1512</b><i>c</i>. Predefined or custom configuration or other adaptation functionality may be supported in this regard.</p>
<p id="p-0047" num="0046">The match, else and decision data tools <b>1512</b><i>c </i>define logic such as Boolean logic for further controlling the operation or interoperation of the tools, e.g., <b>1512</b><i>a </i>and <b>1512</b><i>b</i>. Thus, for example, an attribute-extraction lens tool <b>1512</b><i>a </i>may be linked to an attribute compare database tool <b>1512</b><i>b </i>via a link associated with rules for defining a &#x201c;match&#x201d; between attributes of a product description and attributes of a product as defined in the database. This functionality can be implemented using the match <b>1512</b><i>c. </i></p>
<p id="p-0048" num="0047">Not all logic for conversion applications is linear. In some cases, it is useful to support contingent operation (e.g., if parts by a specified manufacturer are available, fulfill request with those parts ELSE extract attributes and match to alternative parts). Process flow corresponding to such contingent operation can be implemented using the ELSE tool <b>1512</b><i>c. </i></p>
<p id="p-0049" num="0048">It will be appreciated that particular decision algorithms may vary from application-to-application. Specific algorithms in this regard, including custom algorithm for an application, can be implemented using the decision data tool <b>1512</b><i>c. </i></p>
<p id="p-0050" num="0049">The illustrated node tree further includes exception processing, strings and math folders <b>1510</b> (not opened or expanded in <figref idref="DRAWINGS">FIG. 15</figref>). Each of these folders <b>1510</b> may include tools for use in defining functionality relative to an application under consideration. For example, the exception processing folder <b>1510</b> may include tools for implementing procedures for dealing with inputs that are not handled by the general processing rules (e.g., where an input term is not recognized by the relevant knowledge base, the knowledge base may be expanded in accordance with defined rules). The strings folder <b>1510</b> may include tools for controlling the processing of data strings, e.g., parsing strings, defining phrases, associating metadata tags with phrase elements, etc. Many logical operations utilize mathematical constructs such as equivalence, greater than, less than, etc., for example, to compare attribute values to defined ranges. Such mathematical constructs, ranging from very simple to arbitrarily complex, can be implemented using tools from the math folder <b>1510</b>.</p>
<p id="p-0051" num="0050">The maps toolset <b>1508</b> is used to graphically map a process flow for an application under consideration. In the illustrated implementation, both transform maps and decision maps are supported and associated tools are included in the transform maps and decision maps folders <b>1510</b>. Generally, process maps are used to graphically construct and represent the process flow at the tool level, e.g., as a series (and/or parallel) arrangement of tools for implementing a purpose of the application. Thus, transform maps are analogous to parse trees as discussed below. Decision maps are used to graphically construct and represent the process flow as a function of decisions, e.g., as a network of decisions that collectively define a purpose of an application. Decision maps may thus be conceptualized as a form of flow chart. It will be appreciated that the same process flow may be mapped as a transform map or a decision map and either map may be useful for defining or understanding the process flow depending, for example, on the user or the particular issue contemplated by the user.</p>
<p id="p-0052" num="0051">The illustrated node tree further includes a new input/output toolset <b>1508</b>. In the conversion application context, the various tools are operative for executing conversion functionality in relation to an input form and an output form. It may be desired to define or expand the input and output forms supported in this regard, e.g., to add or modify source or target databases or source or target data structures. Tools included or includable in the new input/output toolset <b>1508</b> allow for implementation of this functionality.</p>
<p id="p-0053" num="0052">The assembly panel <b>1504</b> provides a graphical workspace for assembling tools <b>1512</b><i>a</i>-<i>c </i>to generate an application. The illustrated panel <b>1504</b> is divided into columns <b>1504</b><i>a</i>-<i>e </i>for use in defining a process flow generally from left to right, though linearity is not required or even necessarily expected. Moreover, substantially any graphical representation desired by a user may be accommodated. The columns <b>1504</b><i>a</i>-<i>e </i>are populated with files, input/output ports, tools and the like that constitute application building blocks. In this regard, the columns may be prepopulated roughly in correspondence to the structure of the node tree (e.g., for Demo_Matching_for_RFQ_<b>2</b> it may be anticipated that DB transform tools <b>1512</b><i>b </i>will generally operate to the right of lens transform tools <b>1512</b><i>a</i>) and/or the corresponding graphical elements may be dragged and dropped (or otherwise positioned) where desired. Conversely, certain changes to the structure shown in panel <b>1504</b> may be reflected in the node tree of panel <b>1502</b>.</p>
<p id="p-0054" num="0053">Process flows can then be defined in relation to the panel <b>1504</b> by establishing appropriate links between the graphical elements. Two examples are illustrated in <figref idref="DRAWINGS">FIG. 15</figref>. Specifically, the illustrated processes match certain inputs <b>1514</b><i>a </i>and <i>b </i>to part numbers in an inventory database (e.g., as an intermediate process in generating a quote). More specifically, for input <b>1514</b><i>a </i>which identifies a requested manufacturer for a part, the input <b>1514</b><i>a </i>is linked to a transformation lens tool <b>1516</b> for associating a manufacturing code with the specified manufacturer. This yields a manufacturing code <b>1518</b> that is linked to a database transform tool <b>1520</b> for mapping the request to an exact match <b>1522</b> from the inventory database. For input <b>1514</b><i>b </i>which identifies a manufacturing code, the input <b>1514</b><i>b </i>can be directly linked to the database transform tool <b>1520</b>.</p>
<p id="p-0055" num="0054">It will be appreciated that the links, though graphically depicted as undifferentiated connecting lines, may reflect a variety of interoperational logic as discussed above. Such logic may be exposed or defined by clicking on or otherwise selecting the connecting line of interest. If desired, different types of logical dependence may be graphically depicted in this regard, e.g., contingent links may be dashed and match or else links may be identified by appropriate icons (see, e.g., icon <b>1524</b> not in this case associated with a link).</p>
<p id="p-0056" num="0055">A further example in this regard is shown in <figref idref="DRAWINGS">FIG. 16</figref>. Specifically, a process flow <b>1600</b> is shown for identifying an alternate part or parts corresponding to a particular part number identified in an input <b>1602</b>. This may be useful, for example, where the designated part is not available or to provide other options as may be desired. In the illustrated process, the input <b>1602</b> is linked to a lens tool <b>1604</b> for extracting a description from the part number. This tool <b>1604</b> in turn is linked to a further lens tool <b>1606</b> for extracting attributes <b>1608</b> from the description output from tool <b>1604</b>. These attributes <b>1608</b> are provided to a database tool that searches the designated search database to identify parts <b>1612</b> with the desired attributes <b>1608</b>.</p>
<p id="p-0057" num="0056">Once an application is thereby generated, input information can be processed to achieve the purpose of the application substantially without any further instructions or code to direct the process. An associated process for generating and using an application is summarized by reference to the flowchart of <figref idref="DRAWINGS">FIG. 17</figref>. The illustrated process of <b>1700</b> is initiated by accessing (<b>1702</b>) the application generator as discussed above. For example, the application generator may run on a desktop computer, a server or other platform. Application adaptable modules can then be identified (<b>1704</b>) for use in the desired application. Thus, as described above, a list of existing modules such as lens transforms, database transforms, and the like may be available for selection on a graphical display. Additional modules may be imported or otherwise accessed. The modules are then purposed (<b>1706</b>) for the application of interest. In the implementations described above, this simply involves graphically linking the modules so that the functions of the modules collectively are adapted to the specific application environment and to achieve the purpose of the application.</p>
<p id="p-0058" num="0057">A new application is thereby defined for achieving the desired purpose. This application can then be used by accessing (<b>1708</b>) the application platform. For example, this platform may be the same desktop computer, server, or other platform used for application generation. Source information can then be identified (<b>1710</b>) together with the application. For example, this may involve a graphical interface similar to that described above in connection with <figref idref="DRAWINGS">FIGS. 15 and 16</figref>. In this case, the newly created application may appear as a graphical element such as a lens tool. The source information in the application may be identified by graphically linking a first graphical element associated with the source information to a second element associated with the newly created application. It will be appreciated that the application may need no further instruction as to executing the desired purpose. Accordingly, the user may then automatically receive (<b>1712</b>) the output from the application. For example, if the purpose of the application was to search an identified database to identify parts having the same attributes as a requested part number, the application will automatically generate a list of available parts from the database. That is, without any further direction from the user other than identifying the source including the part number and the application for achieving the desired purpose, the application may extract the description from the part number, extract attributes from the description, and use the attributes to search the database.</p>
<p id="p-0059" num="0058">The foregoing discussion demonstrated how process flows for achieving an objective of a desired application are implemented. In this process, certain application adaptable conversion tools are purposed for the desired application. It was assumed in this regard that such tools were available or could be developed. Moreover, reference has been made to associated knowledge bases that reflect an application environment. Associated structure and methodology for developing and operating such tools and bases will now be described in more detail. Either or both of a frame-slot architecture or a parse tree architecture may be employed in this regard.</p>
<p id="p-0060" num="0059">In a preferred implementation of the invention, at least some conversions are executed with the assistance of a frame-slot architecture. Such a frame-slot architecture may function independently to define a full conversion model for a given conversion application, or may function in conjunction with one or more parse tree structures to define a conversion model. In the latter regard, the frame-slot architecture and parse tree structures may overlap with respect to subject matter.</p>
<p id="p-0061" num="0060">The above-noted coffee cup example is illustrative in this regard. It may be desired to correlate the source string &#x201c;8 oz. ceramic coffee cup&#x201d; to a product database, electronic catalogue, web-based product information or other product listing. Such a product listing may include a variety of product types, each of which may have associated attributes and grammar rules. In this regard, the product types and attributes may be organized by one or more parse-tree structures. These parse tree structures, which are described and shown in U.S. patent application Ser. No. 10/970,372, generally organize a given subject matter into a hierarchy of classes, subclasses, etc., down to the desired level of granularity, and are useful for improving conversion accuracy and improving efficiency in building a grammar among other things. In this case, &#x201c;coffee cup&#x201d; may fall under a parse tree node &#x201c;cups&#x201d; which, in turn falls under a parent node &#x201c;containers&#x201d; which falls under &#x201c;housewares&#x201d;, etc. Similarly, the same or another parse tree may group the term &#x201c;oz.&#x201d;, or a standardized expression thereof (e.g., defined by a grammar) such as &#x201c;ounce&#x201d; under the node &#x201c;fluid measurements&#x201d; (ounce may also appear under a heading such as &#x201c;weights&#x201d; with appropriate grammar rules for disambiguation) which, in turn, may fall under the parent node &#x201c;measurements&#x201d;, etc.</p>
<p id="p-0062" num="0061">As noted above, such a parse tree structure has certain efficiencies in connection with conversion processes. However, in some cases, very deep parses may be required, e.g., in connection with processing terms associated with large data systems. Moreover, such terms are often processed as individual fields of data rather than closer to the whole record level, thereby potentially losing contextual cues that enhance conversion accuracy and missing opportunities to quickly identify content anomalies or implement private schema to define legal attributes or values for a given information object. Finally, such parse tree processes may impose a rigid structure that limits applicability to a specific subject matter context, thereby limiting reuse of grammar segments.</p>
<p id="p-0063" num="0062">By contrast, a frame-slot architecture allows for consideration of source stream information at, or closer to, the whole record level. This enables substantial unification of ontology and syntax, e.g., collective consideration of attribute phrases, recognized by the grammar and attribute values contained therein. Moreover, this architecture allows for consideration of contextual cues, within or outside of the content to be converted or other external constraints or other external information. In the coffee cup example, the frame-slot architecture allows for consideration of the source stream &#x201c;8 oz. coffee cup&#x201d; in its entirety. In this regard, this stream may be recognized as an attribute phrase, having &#x201c;coffee cup&#x201d; as an object. Grammar rules specific to this object or a class including this object or rules of a public schema may allow for recognition that &#x201c;oz.&#x201d; means &#x201c;ounce&#x201d; and &#x201c;ounce&#x201d; in this context is a fluid measure, not a weight measure. A user-defined schema, for example, a private schema of the source or target information owner, may limit legal quantity values associated with &#x201c;ounce&#x201d; in the context of coffee cups to, for example, &#x201c;6&#x201d;, &#x201c;8&#x201d; and &#x201c;16&#x201d;. In this case, recognition of &#x201c;8&#x201d; by the schema provides increased confidence concerning the conversion. If the value had been &#x201c;12&#x201d;, which would not comply with the schema in this example, this might serve, for example to quickly identify an anomaly (e.g., in the case of mapping records from a legacy data system to a target system) or identify an imperfect match (e.g., in the case of a search query) so that appropriate action may be taken.</p>
<p id="p-0064" num="0063">The frame-slot architecture thus encompasses a utility for recognizing stream segments, obtaining contextual cues from within or external to the stream, accessing grammar rules specific to the subject matter of the stream segment and converting the stream segment. This may avoid deep parses and allow for greater conversion confidence and accuracy. Moreover, greater grammar flexibility is enabled, thus allowing for a higher degree of potential reuse in other conversion contexts. In addition, executing such processes by reference to a schema enables improved context-related analysis. In short, conversions benefit from surrounding and external context cues in a manner analogous to human processing.</p>
<p id="p-0065" num="0064">As noted above, the frame-slot architecture may be developed in a top-down or bottom-up fashion. For example, objects, associated attributes and legal attribute values may be defined as schema that are imposed on the data. In the coffee cup example, all of these may be defined based on an analysis of a product inventory or the structure of a legacy information system. In either case, the schema may dictate the legal values for quantity to 6, 8 and 16. Any information not conforming to the schema would then be identified and processed as an anomaly. Conversely, the legal values may be defined based on the data. For example, files from a legacy information system may be used to define the legal attribute values which, then, develop as a function of the input information.</p>
<p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a system <b>100</b> for implementing such conversion processing. The illustrated system <b>100</b> includes a conversion engine <b>102</b> that is operative to execute various grammar rules and conversion rules for converting source information to a target form. In the illustrated embodiment, the system <b>100</b> is operative to execute both frame-slot architecture methodology and parse tree structure methodology. However, it will be appreciated that a frame-slot architecture may be executed in accordance with the present invention in the absence of a cooperating parse tree environment.</p>
<p id="p-0067" num="0066">The illustrated grammar engine receives inputs and/or provides outputs via a workstation associated with the user interface <b>104</b>. For example, in a set-up mode, a user may select terms for processing and create associated relationships and grammar rules via the user interface <b>104</b>. In the context of a search system, a search query may be entered, and search results may be received, via the user interface <b>104</b>. In this regard, the grammar engine <b>102</b> may be resident at the work station associated with the user interface <b>104</b>, or may communicate with such a work station via a local or wide area network.</p>
<p id="p-0068" num="0067">The source content <b>106</b> includes the source string to be converted. Depending on the specific application, this content <b>106</b> may come from any of a variety of sources. Thus, in the case of an application involving transferring information from one or more legacy information systems into a target information system, the source content <b>106</b> may be accessed from the legacy systems. In the case of a search engine application, the source content may be derived from a query. In other cases, the source content <b>106</b> may be obtained from a text to be translated or otherwise converted. The source content <b>106</b> may be preprocessed to facilitate conversion or may be in raw form. In the case of preprocessing, the raw content may be supplemented, for example, with markers to indicate phrase boundaries, tags to indicate context information, or other matter. Such matter may be provided in a set-up mode process. In addition, some such information may be present in a legacy system and may be used by the conversion engine <b>102</b>. It will be appreciated that the sources of the content <b>106</b> and the nature thereof is substantially unlimited.</p>
<p id="p-0069" num="0068">The illustrated conversion engine <b>102</b> performs a number of functions. In this regard, the engine <b>102</b> is operative to process the source content <b>106</b> to parse the content into potential objects and attributes, identify the associated attribute values, and, in some cases, recognize contextual cues and other matter additional to the content to be transformed that may be present in the source content. The engine <b>102</b> then operates to convert the relevant portion of the source content <b>106</b> using a parse tree structure <b>110</b> and/or a frame-slot architecture <b>111</b>, and provides a converted output, e.g., to a user or target system.</p>
<p id="p-0070" num="0069">With regard to the parse tree structure <b>100</b>, such a structure is generally developed using the conversion engine <b>102</b> in a set-up mode. The nodes of the parse tree structure <b>110</b> may be defined by someone familiar with the subject matter under consideration or based on an analysis of a data set. Moreover, certain structure developed in connection with prior conversion applications may be imported to facilitate the set-up process. Such a set-up process is described in U.S. patent application Ser. No. 10/970,372, which is incorporated herein by reference. At a high level, this set-up involves defining the hierarchical structure of the tree, populating the various nodes of the tree, developing standardized terminology and syntax and associated grammar and conversion rules associated with the tree and mapping source content variants to the standardized terminology and syntax.</p>
<p id="p-0071" num="0070">In the case of the frame-slot architecture <b>111</b>, the conversion engine <b>102</b> obtains the source content <b>102</b> and identifies potential objects, attributes and attribute values therein. In this regard, the source content <b>106</b> may be parsed as discussed above. In addition, the engine <b>102</b> may obtain contextual cues <b>112</b> to assist in the conversion. As noted above, such cues may be internal or external to the source content <b>106</b>. External cues may be based on the identity or structure of a source information system, defined by a schema specific to the frame-slot conversion, or based on information regarding the subject matter under consideration obtained from any external source. For example, information indicating that, when used in connection with &#x201c;coffee cup&#x201d; the term &#x201c;ounce&#x201d; is a fluid (not a weight) measure, may be encoded into metadata of a legacy information system, defined by a private schema developed for the subject conversion application or derived from an analysis of external information sources.</p>
<p id="p-0072" num="0071">In the context of the frame-slot architecture, the conversion engine is operative to: identify potential objects, attributes and attribute values; process such information in relation to certain stored information concerning the objects, attributes and attribute values; access associated grammar and conversion rules; and convert the information from the source form to a target form. In this regard, the illustrated system <b>100</b> includes stored object information <b>114</b>, stored attribute information <b>116</b> and stored attribute value information <b>118</b>. This information may be defined by a public or private schema or by reference to external information regarding the subject matter under consideration. For example, the object information <b>114</b> may include a list of recognized objects for which the frame-slot architecture is applicable together with information associating the object with legal attributes and/or attribute values and other conversion rules associated with that object. The attribute information <b>116</b> may include a definition of legal attributes for the object together with information regarding associated attribute values and associated grammar and conversion rules. Finally, the attribute value information <b>118</b> may include a definition of legal attribute values for given attributes together with associated information concerning grammar and conversion rules.</p>
<p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. 2</figref> shows a flow chart illustrating a process <b>200</b> that may be implemented by a conversion system such as described above. It will be appreciated that the various process steps illustrated in <figref idref="DRAWINGS">FIG. 2</figref> may be combined or modified as to sequence or otherwise. Moreover, the illustrated process <b>200</b> relates to a system that executes a parse tree structure as well as a frame-slot architecture. It will be appreciated that a frame-slot architecture in accordance with the present invention may be implemented independent of any associated parse tree structure.</p>
<p id="p-0074" num="0073">The illustrated process <b>200</b> is initiated by receiving (<b>202</b>) a data stream from a data source. Such a data stream may be entered by a user or accessed from a legacy or other information system. A segment of the data stream is then identified (<b>204</b>) for conversion. For example, the segment may comprise an attribute phrase or any other chunk of source data that may be usefully processed in a collective form. Such a segment may be identified as the&#x2014;entirety of an input such as a search query, the entirety or a portion of a file from a legacy or other information system, or based on a prior processing step whereby phrase boundaries have been marked for purposes of conversion processing or based on logic for recognizing attribute phrases or other chunks to be coprocessed.</p>
<p id="p-0075" num="0074">In the illustrated process <b>200</b> the identified segment is then processed to identify (<b>206</b>) a potential object within the segment. In the case of the coffee cup example above, the object may be identified as the term &#x201c;cup&#x201d; or &#x201c;coffee cup.&#x201d; The potential object may be identified by comparison of individual terms to a collection of recognized objects or based on a preprocessing step wherein metadata has been associated with the source content to identify components thereof including objects. The potential object is then compared (<b>208</b>) to a known object list of a frame-slot architecture. As discussed above, within a given subject matter, there may be a defined subset for which frame-slot processing is possible. In the illustrated process <b>200</b>, if a match (<b>210</b>) is identified, the system then accesses (<b>214</b>) an associated grammar and schema for processing in accordance with the frame-slot architecture. Otherwise, the segment is processed (<b>212</b>) using a parse tree structure. As a further alternative, if no object is recognized, an error message may be generated or the segment may be highlighted for set-up processing for out of vocabulary terms, e.g., so as to expand the vocabulary and associated grammar rules.</p>
<p id="p-0076" num="0075">In the case of processing using the frame-slot architecture, an attribute associated with the object is then identified (<b>216</b>). In the coffee cup example, the terms &#x201c;ceramic&#x201d; or &#x201c;8 oz.&#x201d; may be identified as reflecting attributes. Such identification may be accomplished based on grammar rules or based on metadata associated with such terms by which such terms are associated with particular attribute fields. The associated attribute values are then compared (<b>218</b>) to legal values. For example, the value of &#x201c;8 oz.&#x201d; may be compared to a listing of legal values for the attribute &#x201c;fluid measurement&#x201d; in the context of &#x201c;coffee cup.&#x201d; These legal values may be defined by a private schema, for example, limited to the inventory of an entity's product catalog or may be based on other external information (e.g., defining a legal word form based on part of speech). If a match is found (<b>220</b>) then the attribute phrase is recognized and an appropriate conversion process if executed (<b>223</b>) in accordance with the associated grammar and conversion rules. The process <b>200</b> then determines whether additional stream information (<b>224</b>) is available for processing and either processes such additional information or terminates execution.</p>
<p id="p-0077" num="0076">In the case where the attribute value does not match a legal value, anomaly processing is executed (<b>222</b>). How anomalies are processed generally depends on the application and context. For example, if an anomaly is identified during a set-up process, the anomalous attribute value may be verified and added to the legal values listing. For example, in the coffee cup example, if the attribute value is &#x201c;12 oz.&#x201d; and that value does not match a previously defined legal value but, in fact, represents a valid inventory entry, the term &#x201c;12 oz.&#x201d; (or a standardized version thereof) may be added to the legal values list for the attribute &#x201c;fluid measurement&#x201d; in the context of &#x201c;coffee cup.&#x201d;</p>
<p id="p-0078" num="0077">Alternatively, further processing may indicate that the attribute value is incorrect. For example, if the attribute value was &#x201c;6 pack,&#x201d; an error in parsing may be indicated. In this case, an appropriate error message may be generated or the segment may be reprocessed to associate an alternate attribute type, e.g., &#x201c;object quantity,&#x201d; with the term under consideration.</p>
<p id="p-0079" num="0078">In other contexts, different anomaly processing may be executed. For example, in the case of processing a search query, illegal values may be ignored or closest match algorithms may be executed. Thus, in the case of a query directed to a &#x201c;12 oz. coffee cup,&#x201d; search results may be generated or a link may be executed relative to inventory related to coffee cups in general or to 8 and 16 oz. coffee cups. It will be appreciated that many other types of anomaly processing are possible in accordance with the present invention.</p>
<p id="p-0080" num="0079">In the above examples, the conversion system can implement both a frame-slot architecture and a parse tree structure. This architecture and structure will now be described in more detail. Referring first to <figref idref="DRAWINGS">FIG. 4</figref>, a schematic diagram of a conversion system <b>400</b> in accordance with the present invention is shown. The illustrated conversion system <b>400</b> includes a parser <b>402</b> for use in parsing and converting an input stream <b>403</b> from a source <b>404</b> to provide an output stream <b>411</b> in a form for use by a target system <b>412</b>. In this case, the source stream <b>403</b> includes the content &#x201c;flat bar (1 mm&#xd7;1&#x2033;&#xd7;1&#x2032;).&#x201d; To accomplish the desired conversion, the parser <b>402</b> uses information from a public schema <b>406</b>, a private schema <b>408</b> and a grammar <b>410</b>. The public schema <b>406</b> may include any of various types of information that is generally applicable to the subject matter and is not specific to any entity or group of entities. In this regard, <figref idref="DRAWINGS">FIG. 5</figref> illustrates an example structure <b>500</b> showing how public information related to the subject matter area may be used to define a conversion rule. As shown, a new structure <b>500</b> includes a dictionary <b>504</b> that forms a portion of the public schema <b>502</b>. Panel <b>506</b> shows definitions related to the object &#x201c;flat bar.&#x201d; Specifically, &#x201c;bar&#x201d; is defined as &#x201c;straight piece that is longer than it is wide&#x201d; and &#x201c;flat&#x201d; is defined as including &#x201c;major surfaces distinctly greater than minor surfaces.&#x201d; Such definitions may be obtained from, for example, a general purpose dictionary, a dictionary specific to the subject matter, a subject matter expert or any other suitable source. These definitions are translated to define a rule as shown in panel <b>508</b>. Specifically, the associated rule indicates that &#x201c;length is greater than width and width is greater than thickness.&#x201d; This rule may then be written into the logic of a machine-based conversion tool. Referring again to <figref idref="DRAWINGS">FIG. 4</figref>, this rule is reflected in file <b>407</b> of public schema <b>406</b>.</p>
<p id="p-0081" num="0080">The parser <b>402</b> also receives input information from private schema <b>408</b> in the illustrated example. The private schema <b>408</b> may include conversion rules that are specific to an entity or group of entities less than the public as a whole. For example, the private schema <b>408</b> may define legal values for a given attribute based on a catalog or inventory of an interested entity such as an entity associated with the target system <b>412</b>. An associated user interface <b>600</b> is shown in <figref idref="DRAWINGS">FIG. 6A</figref>. For example, the user interface <b>600</b> may be used in a start-up mode to populate the legal values for a given attribute. In this case, the user interface is associated with a particular project <b>602</b> such as assembling an electronic catalog. The illustrated user interface <b>600</b> includes a data structure panel <b>604</b>, in this case reflecting a parse-tree structure and a frame-slot structure. The interface <b>600</b> further includes a private schema panel <b>605</b>. In this case, the private schema panel <b>605</b> includes a number of windows <b>606</b> and <b>608</b> that define a product inventory of a target company. In this case, a length field <b>610</b> associated with a table for #<b>6</b> machine screws is used to define legal attribute value <b>612</b> at a node of panel <b>604</b> corresponding to attribute values for #<b>6</b> machine screws. Associated legal value information is shown as a file <b>409</b> of the private schema <b>408</b> in <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0082" num="0081">A further example of user interface segments <b>620</b> is shown in <figref idref="DRAWINGS">FIG. 6B</figref> Specifically, <figref idref="DRAWINGS">FIG. 6B</figref> shows a parse tree graphics panel <b>622</b> and a parse tree node map panel <b>624</b>. For purposes of illustration, these panes <b>622</b> and <b>624</b> are shown in a stacked arrangement. However, it should be appreciated that the panels <b>622</b> and <b>624</b> may be otherwise arranged on a user interface screen or provided on separate screens. Panel <b>622</b> shows a parse tree for a particular product descriptor. In this case, the product descriptor is shown at the base level <b>626</b> of the parse tree as &#x201c;ruler 12&#x2033; 1/16&#x2033; divisions.&#x201d; Layers <b>628</b>-<b>630</b> show patent nodes of the parse tree. Of particular interest, both of the chunks &#x201c;12&#x2033;&#x201d; and &#x201c; 1/16&#x2033;&#x201d; are associated with the high level node &#x201c;[length_unit]&#x201d; reflecting the recognition by a parse tool that each of these chunks indicates a measure of length.</p>
<p id="p-0083" num="0082">If the parse tree structure went no deeper, and there was not frame-slot logic available, these two length measures would present an ambiguity. However, human reader would readily recognize that, in the context of rulers, &#x201c;12&#x2033;&#x201d; likely represents the overall length of the ruler and &#x201c; 1/16&#x2033;&#x201d; most likely represents measurement increments. In the case of a frame-slot architecture, such logic can be captured by a rule that enables the parse tool to recognize and apply such context cues to provide accurate interpretations without deep parses.</p>
<p id="p-0084" num="0083">In this case, such a rule is reflected within the parse tree node map of panel <b>624</b>. Specifically, a rule for interpreting &#x201c;length unit&#x201d; designations in the context of rulers (and, perhaps, other length measuring devices) is encoded under the &#x201c;ruler&#x201d; node. As shown, the rule interprets a given &#x201c;length unit&#x201d; as indicating &#x201c;a measuring length&#x201d; if the associated attribute value is greater than 1 unit of measure (uom) and treats the &#x201c;length unit&#x201d; as indicating an &#x201c;increment&#x201d; if the associated attribute value is less than 0.25 uom. This provides a certain and structurally efficient mechanism for disambiguating and converting length units in this context. Moreover, it is anticipated that such rules will be reusable in other contexts within a project (e.g., for tape measures or straight edges) and in other projects.</p>
<p id="p-0085" num="0084">Grammar <b>410</b> also provides information to the parser <b>402</b>. The grammar may provide any of various information defining a lexicon, syntax and an ontology for the conversion process. In this regard, the grammar may involve definition of standardized terminology described in U.S. patent application Ser. No. 10/970,372. Thus, in the illustrated example, file <b>413</b> associates the standardized terms &#x201c;inch,&#x201d; &#x201c;foot,&#x201d; and &#x201c;millimeter&#x201d; with various alternate forms thereof.</p>
<p id="p-0086" num="0085">The parser <b>402</b> can then use the input from the public schema <b>406</b>, private schema <b>408</b> and grammar <b>410</b> to interpret the input stream <b>403</b> to provide an output stream <b>411</b> to the target <b>412</b>. In this case, the noted input stream <b>403</b> is interpreted as &#x201c;flat bar-1&#x2032; long, 1&#x2033; wide and 1 mm thick.</p>
<p id="p-0087" num="0086">Referring to <figref idref="DRAWINGS">FIG. 3</figref>, a further example related to a frame-slot architecture <b>300</b> is illustrated. The architecture <b>300</b> is used to process a source stream <b>302</b>, in this case, &#x201c;bearings for transmission-100 milli. bore.&#x201d; For example, this source stream may be a record from a legacy information system or a search query. As discussed above, the processing of this source stream <b>302</b> may utilize various contextual cues. As will be discussed in more detail below, such contextual cues may be derived from the content of the source stream <b>302</b> itself. However, it is also noted that certain metadata cues <b>304</b> may be included in connection with the source stream <b>302</b>. In this regard, it is noted that legacy information systems such as databases may include a significant amount of structure that can be leveraged in accordance with the present invention. Such structure may be provided in the form of links of relational databases or similar tags or hooks that define data relationships. Such contextual information, which can vary substantially in form, is generally referred to herein as metadata.</p>
<p id="p-0088" num="0087">The frame-slot architecture <b>300</b> is utilized to identify an object <b>306</b> from the source stream <b>302</b>. As noted above, this may involve identifying a term within the stream <b>302</b> and comparing the term to a list of recognized objects or otherwise using logic to associate an input term with a recognized object. It will be noted in this regard that some degree of standardization or conversion, which may involve the use contextual information, may be performed in this regard. Thus, in the illustrated example, the identified object &#x201c;roller bearing&#x201d; does not literally correspond to any particular segment of the stream <b>302</b>. Rather, the object &#x201c;roller bearing&#x201d; is recognized from the term &#x201c;bearing&#x201d; from the stream <b>302</b> together with contextual cues provided by the term &#x201c;transmission&#x201d; included within the content of the stream <b>302</b> and, perhaps, from metadata cues <b>304</b>. Other sources including external sources of information regarding bearings may be utilized in this regard by logic for matching the stream <b>302</b> to the object <b>306</b>.</p>
<p id="p-0089" num="0088">Based on the object <b>306</b>, information regarding attributes <b>308</b> and attribute values <b>314</b> may be accessed. As discussed above, such information may be derived from public and private schema. For example, an attribute type <b>310</b> may be identified for the object <b>306</b> and corresponding legal attribute values <b>312</b> may be determined. In this case, one attribute associated with the object &#x201c;roller bearing&#x201d; is &#x201c;type&#x201d; that has legal values of &#x201c;cylindrical, tapered and spherical.&#x201d; The stream <b>302</b> may be processed using this information to determine a refined object <b>316</b>. In this case, the refined object is determined to be &#x201c;cylindrical roller bearing.&#x201d; Again, it will be noted that this refined object <b>316</b> is not literally derived from the stream <b>302</b> but rather, in the illustrated example, is determined based on certain contextual information and certain conversion processes. Thus, the stream <b>302</b> is determined to match the attribute value &#x201c;cylindrical&#x201d; based on contextual information related to the terms &#x201c;transmission&#x201d; and &#x201c;bore&#x201d; included within the content of the source stream <b>302</b>. Information regarding the attributes <b>308</b> and attribute values <b>314</b> may again be accessed based on this refined object <b>316</b> to obtain further attributes <b>318</b> and associated attribute values <b>320</b>. It should be noted that these attributes and attribute values <b>318</b> and <b>320</b>, though illustrated as being dependent on the attribute <b>310</b> and attribute value <b>312</b> may alternatively be independent attributes and attribute values associated with the object <b>306</b>. However, in the illustrated example, the attribute &#x201c;size parameter&#x201d; is associated with the legal values &#x201c;inside diameter&#x201d; and &#x201c;outside diameter&#x201d; based on the refined object &#x201c;cylindrical roller bearings.&#x201d;</p>
<p id="p-0090" num="0089">In this case, the attribute <b>318</b> and attribute value <b>320</b> are used together with certain contextual cues to define a further refined object <b>322</b>. In this case, the further refined object <b>322</b> is defined as &#x201c;cylindrical roller bearing inside diameter.&#x201d; A selection between the legal value &#x201c;inside diameter&#x201d; and &#x201c;outside diameter&#x201d; is made based on contextual information provided by the term &#x201c;bore&#x201d; included within the content of the stream <b>302</b>. Based on this further refined object <b>322</b>, information regarding the attributes <b>308</b> and attribute values <b>314</b> can be used to identify a further attribute <b>324</b> and associated legal values <b>325</b>. In this case, the attribute <b>324</b> is &#x201c;legal dimensions&#x201d; and associated legal values <b>325</b> are defined as &#x201c;50, 60, 70, 80, 90, 100, 150 . . . 500.&#x201d; These values are assumed for the purposes of this example to be given in millimeters. In this case, the input stream <b>302</b> is processed in view of the attribute <b>324</b> and legal values <b>325</b> to define an output <b>326</b> identified as &#x201c;100 mm ID cylindrical roller bearings.&#x201d; In this regard, the stream term &#x201c;100 milli.&#x201d; is found to match the legal value of &#x201c;100&#x201d; for the attribute &#x201c;legal dimensions&#x201d; in the context of cylindrical roller bearings inside diameter. It will be appreciated that the term &#x201c;milli.&#x201d; has thus been matched, based on a standardization or conversion process, to the designation &#x201c;mm.&#x201d; It should be noted in this regard that success in matching the source term &#x201c;100 milli.&#x201d; to the legal value &#x201c;100 mm&#x201d; provides further confidence was correctly and accurately performed.</p>
<p id="p-0091" num="0090">Various types of outputs reflecting various conversion applications may be provided in this regard. Thus, in the case of converting an input file from a legacy database to an output form of a target information system, the input stream <b>302</b> may be rewritten as &#x201c;100 mm ID cylindrical roller bearing.&#x201d; In the case where the source stream <b>302</b> represents a search query, the output may be provided by way of linking the user to an appropriate web page or including associated information in a search results page. It will be appreciated that other types of output may be provided in other conversion environments.</p>
<p id="p-0092" num="0091">As noted above, the present invention may also implement a parse tree structure for conversion processes. Such conversion processes may relate, for example, to search systems or other information transformation systems as will be described below. Generally, such a search system may be operable in two modes: the set-up mode and the use mode. In the set-up mode, the user, who may be a subject matter expert or layman, performs a number of functions including accessing lists of potential search terms and/or source terms, developing a standardized set or set of terms, establishing a classification structure, associating the standardized terms with the classification structure and selectively transforming (e.g., translating) the terms as necessary.</p>
<p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. 7</figref> is a schematic diagram of a search system <b>700</b>, in accordance with the present invention, operating in the startup mode. Generally, the system <b>700</b> includes a controller <b>702</b> and storage configured to store a term listing <b>704</b>, a parse tree structure <b>706</b> and a set of structured standardized terms <b>708</b>. Although the system <b>3700</b> is illustrated as being implemented on a single platform <b>710</b>, it will be appreciated that the functionality of the system <b>700</b> may be distributed over multiple platforms, for example, interconnected by a local or wide area network.</p>
<p id="p-0094" num="0093">The user <b>712</b> uses the controller <b>702</b> to access a previously developed parse tree structure <b>706</b> or to develop the structure <b>706</b>. In this regard, the parse tree structure <b>706</b> generally defines a number of classifications, each generally including one or more sub-classifications that collectively define the subject matter area. Examples will be provided below. The number of layers of classifications and sub-classifications will generally be determined by the user <b>712</b> and is dependent on the nature of the subject matter. In many cases, many such classifications will be available, for example, corresponding to headings and subheadings of a catalog or other pre-existing subdivisions of a subject matter of interest. In other cases, the subject matter expert may develop the classifications and sub-classifications based on an analysis of the subject matter.</p>
<p id="p-0095" num="0094">The user can then use the controller <b>702</b> to access a term listing <b>704</b> to be processed. As noted above, such a term listing <b>704</b> may include potential search terms, source terms from a source data collection or both. In the case of potential search terms, the terms may be obtained from a pre-existing list or may be developed by the user <b>712</b>. For example, the potential search terms may be drawn from a stored collection of search terms entered by users in the context of the subject matter of interest. Additional sources may be available, in a variety of contexts, for example, lists that have been developed in connection with administering a pay-per-click search engine. The list may be updated over time based on monitoring search requests. Similarly, the source term listing may be previously developed or may be developed by the user <b>712</b>. For example, in the context of online shopping applications, the source listing may be drawn from an electronic product catalog or other product database.</p>
<p id="p-0096" num="0095">After accessing the term listing, the user may perform a number of functions including standardization and classification. Standardization refers to mapping of terms from the term listing <b>704</b> to a second set, generally a smaller set, of standardized terms. In this manner, misspellings, abbreviations, colloquial terms, synonyms, different linguistic/syntax conventions of multiple legacy systems and other idiosyncratic matter can be addressed such that the list of standardized terms is substantially reduced in relation to the original term listing <b>704</b>. It will be appreciated from the discussion below that such standardization facilitates execution of the searching functionality as well as transformation functions as may be desired in some contexts, e.g., translation.</p>
<p id="p-0097" num="0096">The resulting list of standardized terms can then be mapped to the parse tree structure <b>706</b>. As will be described below, this can be executed via a simple drag and drop operation on a graphical user interface. Thus, an item from a source listing, for example, identifying a particular Post-it note product, may be associated with an appropriate base level classification, for example, &#x201c;Adhesive Notepad.&#x201d; Similarly, a term from a potential search term listing such as &#x201c;Sticky Pad&#x201d; may be associated with the same base level classification. It will be appreciated that a given term may be associated with more than one base level classification, a given base level classification may be associated with more than one parent classification, etc.</p>
<p id="p-0098" num="0097">As noted above, such a base level classification may be associated with a parent classification, grandparent classification, etc. All of these relationships are inherited when the term under consideration is associated with a base level classification. The result is that the standardized term is associated with a string of classes and sub-classes of the parse tree structure <b>3706</b>. For example, these relationships may be reflected in an XML tag system or other metadata representation associated with the term. The resulting structured standardized terms are then stored in a storage structure <b>3708</b> such as a database.</p>
<p id="p-0099" num="0098">It will thus be appreciated that, in the illustrated embodiment, both source terms and potential search terms may be mapped to elements of the same parse tree structure. This is shown in <figref idref="DRAWINGS">FIG. 88</figref>. As shown, multiple terms <b>802</b> from the source collection are mapped to the parse tree structure <b>800</b>. Similarly, multiple terms from the potential search term listing <b>804</b> are mapped to corresponding elements of the parse tree structure <b>800</b>. In this manner, a particular search term entered by a user can be used to identify responsive information from the source collection based on a common classification or sub-classification despite the absence of any overlap between the entered search term and the corresponding items from the source collection. It will be appreciated that it may be desirable to link a given term <b>802</b> or <b>804</b> with more than one classification or classification lineage of the parse tree <b>800</b>. This may have particular benefits in connection with matching a particular product or product category to multiple potential search strategies, e.g., mapping &#x201c;pen&#x201d; to searches including &#x201c;writing instrument&#x201d; or &#x201c;office gift.&#x201d;</p>
<p id="p-0100" num="0099">An example of this process is shown in <figref idref="DRAWINGS">FIG. 9</figref> with respect to particular search terms. In particular, <figref idref="DRAWINGS">FIG. 9</figref> shows a user interface representing a portion of a parse tree <b>900</b> for a particular subject matter such as the electronic catalog of an office supply warehouse. In this case, the user uses the graphical user interface to establish an association between search terms <b>902</b> and <b>904</b> and the parse tree <b>900</b>. Specifically, search term <b>902</b>, in this case &#x201c;sticky pad&#x201d; is dragged and dropped on the node <b>906</b> of the parse tree <b>900</b> labeled &#x201c;Adhesive.&#x201d; This node <b>906</b> or classification is a sub-classification of &#x201c;Notepads&#x201d; <b>908</b> which is a sub-classification of &#x201c;Paper Products&#x201d; <b>910</b> which, finally, is a sub-classification of &#x201c;Office_Supplies&#x201d; <b>912</b>. Similarly, term <b>904</b>, in this case &#x201c;Daytimer,&#x201d; is associated with classification &#x201c;Appointment_Books which is a sub-classification of &#x201c;Non-electronic&#x201d; <b>916</b> which, in turn, is a sub-classification of &#x201c;Organizers&#x201d; <b>918</b> which, finally, is a sub-classification of &#x201c;Office_Supplies&#x201d; <b>3912</b>. Data strings <b>920</b> and <b>922</b> illustrate the resulting structured terms reflecting the classification relationships (other syntax, such as standard XML tag syntax, may be used to reflect the classification structure). It will be appreciated that the example of <figref idref="DRAWINGS">FIG. 9</figref> omits the optional step of term standardization. That is, the potential search term &#x201c;Sticky Pad&#x201d; may alternatively first be mapped to a standardized term such as &#x201c;Post-it note&#x201d; before being associated with the parse tree. Such standardization will be described in more detail below.</p>
<p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. 10</figref> illustrates how the same parse tree <b>900</b> may be used to associate a classification with items from a source collection. For example, such a source collection may be drawn from an electronic catalog or other database of the business. In this case, the source term <b>1002</b> denoted &#x201c;3-pack, 3&#xd7;3 Post-it notes (Pop-up)-Asst'd&#x201d; is associated with the same node <b>906</b> as &#x201c;Sticky Pad&#x201d; was in the previous example. Similarly, term <b>1004</b> denoted &#x201c;2005 Daytimer-Weekly-7&#xd7;10-Blk&#x201d; is associated with the same node <b>914</b> as potential search term &#x201c;Daytimer&#x201d; was in the previous example. As will be appreciated from the discussion below, such common associations with respect to the parse tree <b>900</b> facilitate searching.</p>
<p id="p-0102" num="0101">This process for establishing a knowledge base may be summarized with respect to the flow chart of <figref idref="DRAWINGS">FIG. 11</figref>. The illustrated process <b>1100</b> is initiated by developing (<b>1102</b>) a parse tree that defines the subject matter of interest in terms of a number of classifications and sub-classifications. As noted above, such parsing of the subject matter may be implemented with enough levels to divide the subject matter to the desired granularity. The process <b>1100</b> then proceeds on two separate paths relating to establishing classifications for potential search terms and classifications for items from the source collection. It will be appreciated that these two paths may be executed in any order or concurrently. On the potential search term path, the process involves obtaining or developing (<b>1104</b>) a potential search term listing. As noted above, an existing list may be obtained, a new list may be developed by a subject matter expert, or some combination of these processes may occur. The terms are then mapped (<b>1106</b>) to the parse tree structure such as by a drag and drop operation on a graphical user interface as illustrated above. On the source term process line, the process <b>1100</b> proceeds by obtaining or developing (<b>1108</b>) a source term listing. Again, the source term listing may be obtained from existing sources, developed by subject matter expert or some combination of these processes may occur. The individual terms are then mapped (<b>1110</b>) to the parse tree structure, again, for example, by way of a drag and drop operation as illustrated above. Although not shown, the process <b>1100</b> may further include the steps of re-writing the potential search terms and source terms in a standardized form.</p>
<p id="p-0103" num="0102">The search system of the present invention is also operative in a use mode. This is illustrated in <figref idref="DRAWINGS">FIG. 12</figref>. The illustrated system <b>1200</b> includes input structure <b>1202</b> for receiving a search request from a user <b>1204</b>. Depending on the specific network context in which the system <b>1200</b> is implemented, the search request may be entered directly at the machine executing the search system, or may be entered at a remote node interconnected to the platform <b>1206</b> via a local or wide area network. The nature of the input structure <b>1202</b> may vary accordingly. The search request is processed by a controller <b>1208</b> to obtain responsive information that is transmitted to the user <b>1204</b> via output structure <b>1210</b>. Again, the nature of the output structure <b>1210</b> may vary depending on the specific network implementation.</p>
<p id="p-0104" num="0103">In the illustrated implementation, in order to obtain the responsive information, the controller accesses the knowledge base <b>1212</b>. The knowledge base <b>1212</b> includes stored information sufficient to identify a term from the search request, rewrite the term in a standardized form, transform the term if necessary, and obtain the metadata associated with the term that reflects the classification relationships of the term. The controller then uses the standardized term together with the classification information to access responsive information from the source data <b>1214</b>.</p>
<p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. 13</figref> is a flow chart illustrating a corresponding process <b>14300</b>. The process <b>100</b> is initiated by receiving (<b>1302</b>) a search request, for example, from a keyboard, graphical user interface or network port. The system is then operative to identify (<b>1304</b>) a search term from the search request. In this regard, any appropriate search query syntax may be supported. For example, a search term may be entered via a template including predefined Boolean operators or may be entered freeform. Existing technologies allow for identification of search terms thus entered.</p>
<p id="p-0106" num="0105">The search term is then rewritten (<b>1306</b>) in standard form. This may involve correcting misspellings, mapping multiple synonyms to a selected standard term, implementing a predetermined syntax and grammar, etc., as will be described in more detail below. The resulting standard form term is then set (<b>1308</b>) as the current search parameter.</p>
<p id="p-0107" num="0106">In the illustrated implementation, the search then proceeds iteratively through the hierarchy of the parse tree structure. Specifically, this is initiated by searching (<b>1310</b>) the source database using the current search parameter. If any results are obtained (<b>1312</b>) these results may be output (<b>1320</b>) to the user. If no results are obtained, the parent classification at the next level of the parse tree is identified (<b>1314</b>). That parent classification is then set (<b>1316</b>) as the current search parameter and the process is repeated. Optionally, the user may be queried (<b>1318</b>) regarding such a classification search. For example, the user may be prompted to answer a question such as &#x201c;no match found&#x2014;would you like to search for other products in the same classification?&#x201d; In addition, the logic executed by the process controller may limit such searches to certain levels of the parse tree structure, e.g., no more than three parse levels (parent, grandparent, great grandparent) in order to avoid returning undesired results. Alternatively or additionally, such searching may be limited to a particular number of responsive items. The responsive items as presented to the user may be ordered or otherwise prioritized based on relevancy as determined in relation to proximity to the search term in the parse tree structure.</p>
<p id="p-0108" num="0107">It will be appreciated that searching functionalities such as discussed above is not limited to searching of a web site or electronic catalog by outside parties but is more generally useful in a variety of searching and database merging environments. <figref idref="DRAWINGS">FIG. 44</figref> illustrates a system <b>1400</b> for using a knowledge base <b>1404</b> to access information from multiple legacy databases <b>1401</b>-<b>1403</b>. Many organizations have related information stored in a variety of legacy databases, for example, product databases and accounting databases. Those legacy databases may have been developed or populated by different individuals or otherwise include different conventions relating to linguistics and syntax.</p>
<p id="p-0109" num="0108">In the illustrated example, a first record <b>1406</b> of a first legacy database <b>1401</b> reflects a particular convention for identifying a manufacturer (&#x201c;Acme&#x201d;) and product (&#x201c;300W AC Elec. Motor . . . &#x201d;). Record <b>1407</b> associated with another legacy database <b>1403</b> reflects a different convention including, among other things, a different identification of the manufacturer (&#x201c;AcmeCorp&#x201d;) and a misspelling (&#x201c;Moter&#x201d;).</p>
<p id="p-0110" num="0109">In this case, an internal or external user can use the processor <b>1405</b> to enter a substantially freeform search request, in this case &#x201c;Acme Inc. Power Equipment.&#x201d; For example, such a search request may be entered in the hopes of retrieving all relevant information from all of the legacy databases <b>1401</b>-<b>1403</b>. This is accommodated, in the illustrated embodiment, by processing the search request using the knowledge base <b>1404</b>. The knowledge base <b>1404</b> executes functionality as discussed above and in more detail below relating to standardizing terms, associating terms with a classification structure and the like. Thus, the knowledge base <b>1404</b> may first process the search query to standardize and/or classify the search terms. For example, Acme, Inc. may be associated with the standardized term &#x201c;Acme.&#x201d; The term polar equipment may be associated with the standardized term or classification &#x201c;motor.&#x201d; Each of these terms/classifications may in turn be associated with associated legacy forms of the databases <b>1401</b>-<b>1403</b> to retrieve responsive information from each of the databases. Additional conventional functionality such as merge functionality may be implemented to identify and prioritize the responsive information provided as search results to the processor <b>1405</b>. In this manner, searching or merging of legacy data systems is accommodated with minimal additional code.</p>
<p id="p-0111" num="0110">From the discussion above, it will be appreciated that substantial effort is involved in transforming data from one form to another, e.g., from a raw list of potential search or source terms to a set or sets of standardized, classified and, perhaps, translated terms. The present invention also accommodates sharing information established in developing a transformation model such as a semantic metadata model (SMM) used in this regard. Such sharing of information allows multiple users to be involved in creating the knowledge base, e.g., at the same time, and allows components of such information to be utilized in starting new knowledge base creation projects. This functionality is described in detail in U.S. patent application Ser. No. 10/970,372 which is incorporated herein by reference in its entirety.</p>
<p id="p-0112" num="0111">While various embodiments of the present invention have been described in detail, it is apparent that further modifications and adaptations of the invention will occur to those skilled in the art. However, it is to be expressly understood that such modifications and adaptations are within the spirit and scope of the present invention.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for use in developing applications for manipulating data, comprising the steps of:
<claim-text>identifying a subject matter area of interest in relation to a desired conversion involving converting data between a first form and a second form;</claim-text>
<claim-text>accessing a knowledge base for said subject matter area, wherein said knowledge base defines associations between data items of said first form and data items of said second form, wherein said associations are specific to said subject matter area identified;</claim-text>
<claim-text>providing a user interface on a machine-based tool that allows a user to identify at least first and second desired functions to be executed with respect to one of source data or target data, said first desired function comprising a first one of data matching, data aggregation and data publishing and said second function comprising a second one of data matching, data aggregation and data publishing different than said first one of data matching, data aggregation and data publishing, wherein said first and second desired functions collectively define an application related to a defined business purpose in addition to the converting of data between the first form and the second form; and</claim-text>
<claim-text>first operating a machine-based tool to use the knowledge base to generate logic based at least partially on said associations for performing said first desired function with respect to said subject matter area; and</claim-text>
<claim-text>second operating said machine based tool to use the knowledge base to generate logic based at least partially on said associations for performing said second desired function with respect to said subject matter area.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. A method as set forth in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said step of accessing comprises selecting a set of rules for use in converting said data between said first form and said second form.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. A method as set forth in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said knowledge base includes rules for one of normalizing terminology, resolving transformation ambiguities and classifying terms relating to said subject matter area of interest.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. A method as set forth in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the steps of using said user interface to select an application adaptable conversion module, where said module includes rules for use in converting data between said first form and said second form, said module being application adaptable in that said rules function independent of any purpose specific to a particular application beyond said conversion, and purposing said selected module for use in performing said first desired function with respect to said subject matter area.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. A method as set forth in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein said step of using comprises associating said application adaptable module with a source of input information such that said first module operates to convert at least a portion of said input information between said first and second forms.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. A method as set forth in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein said step of using comprises associating said module with a second module such that said first and second modules cooperate to perform steps related to said desired function.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A method for use in developing multiple applications involving transformations of data between a first form and a second form, said multiple applications having different purposes, the method comprising the steps of:
<claim-text>providing a set of application adaptable conversion modules, wherein each said module includes rules for use in converting data objects between said first form and said second form, wherein each application module is adaptable in that said rules function independent of any purpose specific to a particular application beyond said conversion;</claim-text>
<claim-text>selecting two or more of said conversion modules and purposing said selected conversion models for use a desired purpose comprising at least one of data matching, data aggregation and data publishing, said two or more conversation modules comprising an application, wherein said desired purpose relates to a defined business purpose in addition to the converting of data between the first form and the second form;</claim-text>
<claim-text>first identifying a first subject matter area of interest in relation to said desired purpose; first accessing a first knowledge base for said first subject matter area, wherein said first knowledge base defines first associations between data items of said first form and data items of said second form, wherein said first associations are specific to said first subject matter area identified;</claim-text>
<claim-text>first operating a machine-based tool to use said first knowledge base to generate logic specific to said first subject matter area for at least one of said two or more of said conversion modules of said application;</claim-text>
<claim-text>second identifying a second subject matter area of interest in relation to said purposing, wherein said second subject matter is different than said first subject matter;</claim-text>
<claim-text>second accessing a second knowledge base for said second subject matter area, wherein said second knowledge base defines second associations between data items of said first form and data items of said second form, wherein said second associations are specific to said second subject matter area identified; and</claim-text>
<claim-text>second operating a machine-based tool to use said second knowledge base to generate logic specific to said second subject matter area for at least one of said two or more of said conversion modules of said application.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A method as set forth in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said first subject matter area pertains to a first defined business product area and said second subject matter area pertains to a second defined business product area.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method as set forth in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said step of first operating comprises associating said application with a source of input information such that said application operates to convert at least a portion of said input information between said first and second forms.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A method as set forth in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said first accessing and said second accessing comprise selecting a first set of rules specific to said first subject matter area and a second set of rules specific to said second subject matter area, respectively, for use in converting said data between said first form and said second form.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method as set forth in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said first knowledge base and said second knowledge base include rules for one of normalizing terminology, resolving transformation ambiguities and classifying terms relating to said first and second subject matter area of interest, respectively.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A method as set forth in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein said two or more conversion modules of said application cooperate to perform steps related to said desired purpose.</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626917-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626917</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13422715</doc-number>
<date>20120316</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>112</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>15</main-group>
<subgroup>16</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>00</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>709225</main-classification>
<further-classification>709203</further-classification>
</classification-national>
<invention-title id="d2e53">File access using counter locking mechanism</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7428539</doc-number>
<kind>B2</kind>
<name>Clift et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>8145836</doc-number>
<kind>B2</kind>
<name>Nelson et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711112</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>8347401</doc-number>
<kind>B2</kind>
<name>Werner et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 27</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2008/0016021</doc-number>
<kind>A1</kind>
<name>Gulbeden et al.</name>
<date>20080100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2009/0300322</doc-number>
<kind>A1</kind>
<name>Mercer</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711219</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2010/0115207</doc-number>
<kind>A1</kind>
<name>Arora et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711144</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2010/0250809</doc-number>
<kind>A1</kind>
<name>Ramesh et al.</name>
<date>20100900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>710200</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2012/0078866</doc-number>
<kind>A1</kind>
<name>Oshri et al.</name>
<date>20120300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2012/0124291</doc-number>
<kind>A1</kind>
<name>Achilles et al.</name>
<date>20120500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711122</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2013/0019067</doc-number>
<kind>A1</kind>
<name>Vilayannur et al.</name>
<date>20130100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>711144</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>709203</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709223-229</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>709250</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>6</number-of-drawing-sheets>
<number-of-figures>6</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130246622</doc-number>
<kind>A1</kind>
<date>20130919</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Iliev</last-name>
<first-name>Ivaylo</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
<residence>
<country>BG</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Dimitrov</last-name>
<first-name>Vencislav</first-name>
<address>
<city>Pernik</city>
<country>BG</country>
</address>
</addressbook>
<residence>
<country>BG</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Stanev</last-name>
<first-name>Georgi</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
<residence>
<country>BG</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Iliev</last-name>
<first-name>Ivaylo</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Dimitrov</last-name>
<first-name>Vencislav</first-name>
<address>
<city>Pernik</city>
<country>BG</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Stanev</last-name>
<first-name>Georgi</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schwegman Lundberg &#x26; Woessner, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>SAP AG</orgname>
<role>03</role>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Maung</last-name>
<first-name>Zarni</first-name>
<department>2451</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In an embodiment, a method is provided for accessing a file node. In this method, a file access request specifying a file node to be accessed by way of a file system is received at a server from a client device. A counter is referenced to identify that the file node is being accessed in response to a different file access request. The counter is configured to track whether the file node is being accessed. The file node is provided to the client device when the counter indicates a termination of access to the file node resulting from the different file access request.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="156.89mm" wi="138.68mm" file="US08626917-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="224.03mm" wi="180.76mm" file="US08626917-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="213.70mm" wi="140.21mm" file="US08626917-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="209.30mm" wi="150.62mm" file="US08626917-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="233.34mm" wi="146.30mm" file="US08626917-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="238.34mm" wi="144.10mm" file="US08626917-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="230.12mm" wi="158.33mm" file="US08626917-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD</heading>
<p id="p-0002" num="0001">The present disclosure relates generally to file access. In an example embodiment, the disclosure relates to network access to files by way of a file system by a plurality of users.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Generally, a file system may be accessible over a network to one or more users. When a user requests access to the file, the file may be retrieved via the file system and provided to the user if the file is not currently being accessed by another person. While the user is accessing the file, the file may be locked such that other individuals are unable to write to the file.</p>
<p id="p-0004" num="0003">However, if the file is currently being accessed by another person, the file system server may determine that the file is locked and return an error exception to the user indicating that the file is currently in use. In this case, the user may be able to access a read-only copy of the file, and the server may return a copy of the last saved version of the file. However, if the user wishes to modify the file, the user may need to resubmit the request to access the file at a later time. This may require resubmitting the request several times until the file becomes available, which may result in heavy traffic across the network and at the server, as the server may need to process the request each time it is sent and return an error exception each time the request cannot be processed.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading>
<p id="p-0005" num="0004">The present disclosure is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram depicting an architectural overview of a system for accessing files via a network, in accordance with an example embodiment;</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing example components of a repository module, in accordance with an example embodiment;</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of a method of accessing a file node, in accordance with an example embodiment;</p>
<p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of a method of reading a file, in accordance with an example embodiment;</p>
<p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of a method of writing to a file, in accordance with an example embodiment; and</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram depicting a machine in the example form of a computing device within which may be executed a set of instructions for causing the machine to perform any one or more of the methodologies discussed herein.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0012" num="0011">The description that follows includes illustrative systems, methods, techniques, instruction sequences, and computing machine program products that embody illustrative embodiments of the present technology. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident, however, to those skilled in the art, that embodiments of the inventive subject matter may be practiced without these specific details. In general, well-known instruction instances, protocols, structures and techniques have not been shown in detail.</p>
<p id="p-0013" num="0012">Some embodiments described herein provide techniques for accessing files or folders containing files at a server. Throughout the description, access to files may be described. However, the description of access to files may similarly be applied to any file node in a file system (e.g., file system directories, etc.). For example, a repository module at the server may receive from a client device a file access request specifying a file to be accessed by way of a file system. A file access request may include a request to read a file or a request to modify a file (e.g., write to, delete, etc.). The repository module may determine whether the file is currently being accessed in response to another file access request by referencing a locking mechanism counter. If the repository module identifies that the file is being accessed in response to the other file access request, the repository module may wait a predetermined amount of time and reference the counter again thereafter. When the counter indicates access to the file resulting from the other file access request has terminated, the file may be provided to the client device.</p>
<p id="p-0014" num="0013">When the file system server receives a file access request from a client device, the request is held until the requested file becomes available. While the request is being held, the repository module of the server references the locking mechanism counter to determine when the file can be accessed. The locking mechanism counter keeps track of the number of people reading and writing to a file and may be adjusted each time the file is accessed and each time access to the file has terminated.</p>
<p id="p-0015" num="0014">In some embodiments, the file access request may be a batch request requesting access to a plurality of files. If the batch request is a request to read several files, the files may be returned to the requesting client device as each file becomes available, using the counter associated with each file to determine when each file becomes available. If the batch request is a request to modify several files (e.g., add a file, delete a file, change a file, etc.), the repository server may apply the write command to each file specified in the batch request as each file becomes available, using the counter associated with each file to determine when each file becomes available. For example, a file access request may request that a modification be made to files stored within a folder or to a file which includes content contained in one or more other files. The batch request may result in modification of those files as each of the files associated with the batch request becomes available.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram depicting an architectural overview of a system <b>100</b> for accessing files in a file system data repository <b>108</b> via a network <b>110</b>. In some embodiments, the networked system <b>100</b> may include any number of client devices, such as client devices <b>112</b>.<b>1</b>, <b>112</b>.<b>2</b>, <b>112</b>.<b>3</b>, <b>112</b>.<i>n</i>, a network <b>110</b>, and a file system server <b>102</b>. The components of the system <b>100</b> may be connected directly or over a network <b>110</b>, which may be any suitable network. In various embodiments, one or more portions of the network <b>110</b> may include an ad hoc network, an intranet, an extranet, a virtual private network (VPN), a local area network (LAN), a wireless LAN (WLAN), a wide area network (WAN), a wireless WAN (WWAN), a metropolitan area network (MAN), a portion of the Internet, a portion of the Public Switched Telephone Network (PSTN), a cellular telephone network, or any other type of network, or a combination of two or more such networks.</p>
<p id="p-0017" num="0016">The client devices <b>112</b>.<b>1</b>, <b>112</b>.<b>2</b>, <b>112</b>.<b>3</b>, <b>112</b>.<i>n </i>may be any suitable computing device, such as a smart phone, a personal digital assistant, a mobile phone, a personal computer, a laptop, a computing tablet, or any other device suitable for accessing files from the file system server <b>102</b>. The client devices <b>112</b>.<b>1</b>, <b>112</b>.<b>2</b>, <b>112</b>.<b>3</b>, <b>112</b>.<i>n </i>may access the file system server <b>102</b> directly, via the network <b>110</b>, or via a third-party system.</p>
<p id="p-0018" num="0017">The file system server <b>102</b> may be any server managing storage and access to a file system data repository <b>108</b>. The file system server <b>102</b> may include a web server <b>104</b>, a repository module <b>106</b>, and a data repository <b>108</b>. The web server <b>104</b> may be capable of providing access to the file system server <b>102</b> over the network <b>110</b>. In some embodiments, the web server <b>104</b> may be a JAVA web server (e.g., Apache Tomcat). The data repository <b>108</b> may be any storage device capable of storing any number and type of files organized in any manner using a file system.</p>
<p id="p-0019" num="0018">The file system repository module <b>106</b> may manage and control access to the data repository <b>108</b>. The repository module <b>106</b> may use locking mechanism counters to manage file access by keeping track of the number of client devices accessing any particular file. The counters may keep track of writing to files and reading to files in the data repository <b>108</b>. The repository module <b>106</b> is described in more detail below.</p>
<p id="p-0020" num="0019">Although <figref idref="DRAWINGS">FIG. 1</figref> illustrates a particular example of the arrangement of client devices <b>112</b>.<b>1</b>, <b>112</b>.<b>2</b>, <b>112</b>.<b>3</b>, <b>112</b>.<i>n</i>, a network <b>110</b>, a file system server <b>102</b>, and components within the file system server <b>102</b>, this disclosure includes any suitable arrangement or configuration of client devices <b>112</b>.<b>1</b>, <b>112</b>.<b>2</b>, <b>112</b>.<b>3</b>, <b>112</b>.<i>n</i>, a network <b>110</b>, a file system server <b>102</b>, and its components.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing example components of a repository module <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>). In some embodiments, the repository module <b>106</b> may include a request module <b>202</b>, a lock mechanism module <b>204</b>, and a dispatch module <b>206</b>.</p>
<p id="p-0022" num="0021">The request module <b>202</b> may be configured to receive a request to access a file node stored in the data repository <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>). A file node may be content stored at any particular directory location within the data repository (e.g., a file, a folder having one or more files, a file referencing one or more additional files, etc.). A request may be sent using any web protocol for sending a request over a network and may be received at the request module <b>202</b> from a client device (e.g., client device <b>112</b>.<b>1</b>) via the network <b>110</b> (<figref idref="DRAWINGS">FIG. 1</figref>). The request module <b>202</b> may be configured to parse a received request to determine information about the file node to be accessed, such as, e.g., the file node specified in the request (or file nodes specified if the file access request is a batch request), whether the request involves reading or writing to the file node, etc.</p>
<p id="p-0023" num="0022">The lock mechanism module <b>204</b> may be configured to use the information parsed from the file access request received at the request module <b>202</b> to track access to a file node and identify whether the file node to be accessed is currently being accessed due to another file access request. For example, another client device may be accessing the file node specified in the request when the request is received. The lock mechanism module <b>204</b> may identify access to a file node by referencing a mechanism counter associated with the file node. A lock mechanism counter may track whether a file node is being accessed and when that access is terminated, whether the file node is being read or being written to, the number of client devices accessing the file node, etc. The counter is described in more detail below.</p>
<p id="p-0024" num="0023">The dispatch module <b>206</b> may be configured to provide the client device with access to the file node requested if the counter indicates that the file node is available to be accessed (e.g., the file node is not being accessed by another client device). If the file access request is a request to read a file, the dispatch module <b>206</b> may access the file, create a copy of the file, and provide the copy of the file to the requesting client device via the network <b>110</b> (<figref idref="DRAWINGS">FIG. 1</figref>). If the file access request is a request to write to a file, the dispatch module <b>206</b> may provide access to the file via the network <b>110</b> so that the file may be modified and saved in the data repository <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. 3</figref> is a flow diagram of a method <b>300</b> of accessing a file node. In an example embodiment, the method <b>300</b> may be implemented by the repository module <b>106</b> included in the system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0026" num="0025">In operation <b>304</b> of method <b>300</b>, the request module <b>202</b> (<figref idref="DRAWINGS">FIG. 2</figref>) of the repository module <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>) receives a file access request from a client device. The file access request specifies a file node to be accessed by way of a file system. In some embodiments, the file access request may be a batch request indicating a plurality of file nodes to be accessed.</p>
<p id="p-0027" num="0026">In operation <b>306</b>, the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) of the repository module <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>) may reference a counter to identify that the file node is being accessed in response to a different file access request. The counter may be any device which stores (and may sometimes display) the number of times a particular event or process has occurred. The locking mechanism counter may indicate whether the file node is being accessed by someone else. As discussed above, the counter may be configured to track whether the file node is being accessed. If the file access request is a batch request, the lock mechanism module <b>204</b> may reference a counter for each of the file nodes specified in the batch request to determine access to each of the file nodes.</p>
<p id="p-0028" num="0027">In operation <b>308</b>, the dispatch module <b>206</b> (<figref idref="DRAWINGS">FIG. 2</figref>) of the repository module <b>106</b> (<figref idref="DRAWINGS">FIG. 1</figref>) may provide access to the file node to the client device when the counter indicates a termination of access to the file node resulting from the different access request. If the request is a batch request, the dispatch module <b>206</b> may provide access to each of the file nodes as they become available (e.g., when each of the file nodes is no longer being accessed by another client device).</p>
<p id="p-0029" num="0028">In some embodiments, the counter may be configured to track whether a file is being read or being modified by adjusting (e.g., incrementing or decrementing) each time the file is accessed. For example, if the file is not being accessed via a client device, the counter may equal zero. If the file is being modified, the counter may decrement when the file is accessed for modification such that the counter=&#x2212;1, indicating that the file has a write lock. If the file is being read via a client device, the counter may be incremented when the file is accessed to be read such that the counter=1, indicating that the file has a read lock. In some embodiments, any number of client devices may read the file, and the counter is incremented each time the file is read. In that case, if the counter is greater than zero, the counter may indicate that the file is being read by one or more client devices, and the counter may indicate the number of client devices accessing the file (e.g., if the counter=5, there are five client devices accessing the file based on a read request). In the example described above, the counter is incremented when a file is read and decremented when a file is modified; however, the counter may be adjusted in any manner such that the counter may indicate the status of the file.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 4</figref> is a flow diagram of a method <b>400</b> of reading a file. In an example embodiment, the method <b>400</b> may be implemented by the repository module <b>106</b> included in the system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0031" num="0030">In operation <b>404</b> of method <b>400</b>, the request module <b>202</b> (<figref idref="DRAWINGS">FIG. 2</figref>) receives a read file access request from a client device. The read file access request specifies a file to be accessed and read by way of a file system.</p>
<p id="p-0032" num="0031">In some embodiments, a file may not be read if the file is being modified by someone else. For example, the file system server <b>102</b> (<figref idref="DRAWINGS">FIG. 1</figref>) may not allow a file to be read if it is being modified by someone else so as to avoid corruption of the file. in operation <b>406</b>, the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) may determine whether the file to be read has a write lock associated with the file (e.g., whether the file is being modified by someone else). This may be determined by referencing a lock counter associated with the file. The lock counter may be configured to track whether a file is being modified (e.g., added, changed, deleted, etc.). For example, in some embodiments, when the counter for a particular file has a value of &#x2212;1, that value may indicate that the file has a write lock associated with the file. In some embodiments, any number of client devices may modify a file simultaneously. In some embodiments, the lock counter may ensure that the file is only accessed by one client device during a write operation. When a file is not being modified (e.g., the file has no write lock), the counter may specify a particular value (e.g., counter&#x2267;0). When a file is accessed for modification, the counter may be adjusted by the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) to reflect the modification to the file and indicate a write lock (e.g., counter=&#x2212;1). While the example provided indicates that the counter is decremented when the file is being modified, the counter can be adjusted in any manner which indicates the status of the file.</p>
<p id="p-0033" num="0032">If in operation <b>406</b> the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) references the counter for the file and determines that the file has a write lock (e.g., counter=&#x2212;1), in operation <b>408</b> the lock mechanism module <b>204</b> waits for a predetermined time period before referencing the counter again (e.g., operation <b>406</b>) to determine whether access to the file has become available. This loop may continue until the counter indicates that the file no longer has a write lock (e.g., access to the file based on the other file access request for modification has terminated; e.g., counter&#x2267;0).</p>
<p id="p-0034" num="0033">If in operation <b>406</b> the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) references the counter for the file and determines that the file no longer has a write lock (e.g., counter&#x2267;0), in operation <b>410</b>, the lock mechanism module <b>204</b> may increase the counter to indicate the file is being accessed based on a read request (e.g., counter=1). In some embodiments, if the file access request specifies more than one file to be accessed, the counter for each of the files may be incremented such that each counter indicates that the file is being read.</p>
<p id="p-0035" num="0034">When the counter has been incremented, in operation <b>412</b>, the file may be read. In some embodiments, the repository module <b>106</b> may read the file from the data repository <b>108</b> (<figref idref="DRAWINGS">FIG. 1</figref>) and create a copy of the file.</p>
<p id="p-0036" num="0035">In operation <b>414</b>, the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) may decrease the counter to indicate the file access based on that particular file access request has terminated. In operation <b>416</b>, the copy of the file may be provided to the requesting client device.</p>
<p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. 5</figref> is a flow diagram of a method <b>500</b> of writing to a file (e.g., modification, deletion, etc.). In an example embodiment, the method <b>500</b> may be implemented by the repository module <b>106</b> included in the system <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0038" num="0037">In operation <b>504</b> of method <b>500</b>, the request module <b>202</b> (<figref idref="DRAWINGS">FIG. 2</figref>) receives a write file access request from a client device. The write file access request specifies a file to be accessed and modified by way of a file system.</p>
<p id="p-0039" num="0038">In some embodiments, a file may not be modified if the file is being read or modified by someone else. For example, the file system server <b>102</b> (<figref idref="DRAWINGS">FIG. 1</figref>) may not allow a file to be accessed and modified if it is being read and/or modified by someone else so as to avoid corruption of the file. In operation <b>506</b>, the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) may determine whether the file to be modified has a read and/or a write lock associated with the file (e.g., whether the file is being modified and/or being read by someone else). This may be determined by referencing the counter associated with the file. As discussed above, the counter tracks access to a file based on a read and/or write access request. For example, the file may have a write lock if the counter=&#x2212;1, and the file may have a read lock if the counter&#x3e;0). If there are no locks on the file (e.g., the file is not being accessed), the counter may equal zero.</p>
<p id="p-0040" num="0039">If in operation <b>506</b> the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) references the counter and determines that the file is being accessed due to another file access request (e.g., counter&#x2260;0), in operation <b>508</b> the lock mechanism module <b>204</b> waits for a predetermined time period before referencing the counter again (e.g., operation <b>506</b>) to determine whether access to the file has become available. This loop may continue until the counter indicates that the file has become available (e.g., access to the file based on the other file access request has terminated; e.g., counter=0).</p>
<p id="p-0041" num="0040">If in operation <b>506</b> the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) references the counter for the file and determines that the file is no longer being accessed due to another file access request (e.g., counter&#x2260;0), in operation <b>510</b>, the lock mechanism module <b>204</b> may decrease counter to indicate the file is being modified and to associate the file with a write lock (e.g., counter=&#x2212;1). In some embodiments, if the file access request specifies more than one file to be accessed, the write lock may be applied to each of the files via a counter associated with each of the files.</p>
<p id="p-0042" num="0041">When the counter has been decremented, in operation <b>512</b>, the file may be modified by the client device. Once access to the file has been terminated, in operation <b>514</b>, the lock mechanism module <b>204</b> (<figref idref="DRAWINGS">FIG. 2</figref>) may increase the counter to indicate the file access based on that particular file access request has terminated. In operation <b>516</b>, the repository module <b>106</b> may confirm that the write operation was successful by sending a notification of the confirmation to the client device via the network <b>110</b> (<figref idref="DRAWINGS">FIG. 1</figref>).</p>
<p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. 6</figref> depicts a block diagram of a machine in the example form of a computing device <b>600</b> within which may be executed a set of instructions for causing the machine to perform any one or more of the methodologies discussed herein. In alternative embodiments, the machine operates as a standalone device or may be connected (e.g., networked) to other machines. In a networked deployment, the machine may operate in the capacity of a server or a client machine in a server client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment.</p>
<p id="p-0044" num="0043">The machine is capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p>
<p id="p-0045" num="0044">The example of the computing device <b>600</b> includes a processor <b>602</b> (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory <b>604</b> (e.g., random access memory), and static memory <b>606</b> (e.g., static random-access memory), which communicate with each other via bus <b>608</b>. The computing device <b>600</b> may further include video display unit <b>610</b> (e.g., a plasma display, a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computing device <b>600</b> also includes an alphanumeric input device <b>612</b> (e.g., a keyboard), a user interface (UI) navigation device <b>614</b> (e.g., a mouse), a disk drive unit <b>616</b>, a signal generation device <b>618</b> (e.g., a speaker), and a network interface device <b>620</b>.</p>
<p id="p-0046" num="0045">The disk drive unit <b>616</b> (a type of non-volatile memory storage) includes a machine-readable medium <b>622</b> on which is stored one or more sets of data structures and instructions <b>624</b> (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions <b>624</b> may also reside, completely or at least partially, within the main memory <b>604</b> and/or within the processor <b>602</b> during execution thereof by computing device <b>600</b>, with the main memory <b>604</b> and processor <b>602</b> also constituting machine-readable, tangible media.</p>
<p id="p-0047" num="0046">The data structures and instructions <b>624</b> may further be transmitted or received over a computer network <b>650</b> via network interface device <b>620</b> utilizing any one of a number of well-known transfer protocols (e.g., HyperText Transfer Protocol (HTTP)).</p>
<p id="p-0048" num="0047">Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., the computing device <b>600</b>) or one or more hardware modules of a computer system (e.g., a processor <b>602</b> or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.</p>
<p id="p-0049" num="0048">In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor <b>602</b> or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.</p>
<p id="p-0050" num="0049">Accordingly, the term &#x201c;hardware module&#x201d; should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and/or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor <b>602</b> configured using software, the general-purpose processor <b>602</b> may be configured as respective different hardware modules at different times. Software may accordingly configure a processor <b>602</b>, for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.</p>
<p id="p-0051" num="0050">Modules can provide information to, and receive information from, other modules. For example, the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times, communications between such modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple modules have access. For example, one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then, at a later time, access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).</p>
<p id="p-0052" num="0051">The various operations of example methods described herein may be performed, at least partially, by one or more processors <b>602</b> that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors <b>602</b> may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.</p>
<p id="p-0053" num="0052">Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors <b>602</b> or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors <b>602</b>, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processors <b>602</b> may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors <b>602</b> may be distributed across a number of locations.</p>
<p id="p-0054" num="0053">While the embodiment(s) is (are) described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the embodiment(s) is not limited to them. In general, techniques for data searches using context information may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations, modifications, additions, and improvements are possible.</p>
<p id="p-0055" num="0054">Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations, and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment(s). In general, structures and functionality presented as separate components in the example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the embodiment(s).</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method operable at a server, the method comprising:
<claim-text>receiving, from a client device, a file access request specifying a file node to be accessed by way of a file system;</claim-text>
<claim-text>referencing a counter to identify that the file node is being accessed in response to a different file access request, the counter being configured to track whether the file node is being accessed; and</claim-text>
<claim-text>providing, to the client device, access to the file node when the counter indicates a termination of access to the file node resulting from the different file access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>if the counter indicates the file node is being accessed in response to the different file access request, waiting a predetermined amount of time; and</claim-text>
<claim-text>after waiting the predetermined amount of time, referencing the counter to determine whether the file node is being accessed in response to the different file access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file access request is a request to read the file node, providing access to the file node including providing a copy of the file node to the client device.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:
<claim-text>prior to providing access to the file node,
<claim-text>adjusting the counter to indicate the file node is being read;</claim-text>
<claim-text>reading the file node; and</claim-text>
<claim-text>adjusting the counter to indicate the access to the file node resulting from the file access request has terminated,
<claim-text>wherein providing the copy of the file node to the client device is based on the reading of the file node.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file access request is a request to modify the file node.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer-implemented method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:
<claim-text>prior to providing access to the file node, adjusting the counter to indicate the file node is being modified by the client device; and</claim-text>
<claim-text>after providing access to the file node, adjusting the counter to indicate the access to the file node resulting from the file access request has terminated.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the counter is configured to track whether the file node is being modified.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the counter is configured to track whether the file node is being read.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file node is a file.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file node is a folder having one or more files.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file access request includes a batch access request specifying a plurality of entities to be accessed.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. A system comprising:
<claim-text>a hardware-implemented request module configured to receive, from a client device, a file access request specifying a file node to be accessed by way of a file system;</claim-text>
<claim-text>a hardware-implemented lock mechanism module configured to reference a counter to identify that the file node is being accessed in response to a different file access request, the counter being configured to track whether the file node is being accessed; and</claim-text>
<claim-text>a hardware-implemented dispatch module configured to provide to the client device access to the file node when the counter indicates a termination of access to the file node resulting from the different file access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the hardware-implemented lock mechanism module is further configured to wait a predetermined amount of time if the counter indicates the file node is being accessed in response to the different file access request and reference the counter to determine whether the file node is being accessed in response to the different file access request after waiting the predetermined amount of time.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the file access request is a request to read the file node, the hardware-implemented dispatch module configured to provide a copy of the file node to the client device.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the hardware-implemented lock mechanism module is further configured to:
<claim-text>prior to providing access to the file node:
<claim-text>adjust the counter to indicate the file node is being read;</claim-text>
<claim-text>read the file node; and</claim-text>
<claim-text>adjust the counter to indicate the access to the file node resulting from the file access request has terminated,
<claim-text>wherein providing the copy of the file node to the client device is based on the reading of the file node.</claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the file access request is a request to modify the file node.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the hardware-implemented lock mechanism module is further configured to adjust the counter to indicate the file node is being modified by the client device prior to providing access to the file node and adjust the counter to indicate the access to the file node resulting from the file access request has terminated after providing access to the file node.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. A machine-readable, non-transitory storage medium storing instructions which, when executed by one or more processors, cause the one or more processors to perform operations, comprising:
<claim-text>receiving, from a client device, a file access request specifying a file node to be accessed by way of a file system;</claim-text>
<claim-text>referencing a counter to identify that the file node is being accessed in response to a different file access request, the counter being configured to track whether the file node is being accessed; and</claim-text>
<claim-text>providing, to the client device, access to the file node when the counter indicates a termination of access to the file node resulting from the different file access request.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The machine-readable, non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the counter is configured to track whether the file node is being modified or whether the file node is being read.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The machine-readable, non-transitory storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the instructions cause the one or more processors to perform operations, further comprising:
<claim-text>if the counter indicates the file node is being accessed in response to the different file access request, waiting a predetermined amount of time; and</claim-text>
<claim-text>after waiting the predetermined amount of time, referencing the counter to determine whether the file node is being accessed in response to the different file access request. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

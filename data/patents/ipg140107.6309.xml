<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627464-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627464</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12938363</doc-number>
<date>20101102</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>224</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>12</main-group>
<subgroup>14</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>726 22</main-classification>
<further-classification>726 26</further-classification>
</classification-national>
<invention-title id="d2e53">Globally valid measured operating system launch with hibernation support</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6327652</doc-number>
<kind>B1</kind>
<name>England et al.</name>
<date>20011200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7412596</doc-number>
<kind>B2</kind>
<name>Challener et al.</name>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7716470</doc-number>
<kind>B2</kind>
<name>Stillerman et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2004/0054901</doc-number>
<kind>A1</kind>
<name>England et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713168</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2004/0064457</doc-number>
<kind>A1</kind>
<name>Zimmer et al.</name>
<date>20040400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2005/0246525</doc-number>
<kind>A1</kind>
<name>Bade et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0085630</doc-number>
<kind>A1</kind>
<name>Challener et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2006/0155988</doc-number>
<kind>A1</kind>
<name>Hunter et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2007/0073416</doc-number>
<kind>A1</kind>
<name>Grawrock</name>
<date>20070300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2008/0256595</doc-number>
<kind>A1</kind>
<name>Schunter et al.</name>
<date>20081000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2009/0178138</doc-number>
<kind>A1</kind>
<name>Weiss et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>726 22</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2009/0204964</doc-number>
<kind>A1</kind>
<name>Foley et al.</name>
<date>20090800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>2010/0268967</doc-number>
<kind>A1</kind>
<name>Senda</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2011/0145598</doc-number>
<kind>A1</kind>
<name>Smith et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>713190</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Breeden II, John, &#x201c;Two ways to fix XP's &#x2018;hibernate&#x2019; security hole&#x201d;, Retrieved at &#x3c;&#x3c;http://gcn.com/Articles/2001/11/02/Two-ways-to-fix-XPs-hibernate-security-hole.aspx &#x3e;&#x3e;, Nov. 2, 2001, pp. 3.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>&#x201c;International Search Report&#x201d;, Mailed Date: May 7, 2012, Application No. PCT/US2011/057858, Filed Date: Oct. 26, 2011, pp. 9.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>726  2-  6</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 16- 19</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 22- 23</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 26- 27</main-classification>
<additional-info>unstructured</additional-info>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>726 34</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>8</number-of-drawing-sheets>
<number-of-figures>8</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120110644</doc-number>
<kind>A1</kind>
<date>20120503</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Thom</last-name>
<first-name>Stefan</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ide</last-name>
<first-name>Nathan</first-name>
<address>
<city>Bothell</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Anderson</last-name>
<first-name>Scott Danie</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Spiger</last-name>
<first-name>Robert Karl</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="005" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Linsley</last-name>
<first-name>David J.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="006" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Novak</last-name>
<first-name>Mark Fishel</first-name>
<address>
<city>Newcastle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="007" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Nystr&#xf6;m</last-name>
<first-name>Magnus</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Thom</last-name>
<first-name>Stefan</first-name>
<address>
<city>Snohomish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Ide</last-name>
<first-name>Nathan</first-name>
<address>
<city>Bothell</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Anderson</last-name>
<first-name>Scott Danie</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Spiger</last-name>
<first-name>Robert Karl</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="005" designation="us-only">
<addressbook>
<last-name>Linsley</last-name>
<first-name>David J.</first-name>
<address>
<city>Seattle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="006" designation="us-only">
<addressbook>
<last-name>Novak</last-name>
<first-name>Mark Fishel</first-name>
<address>
<city>Newcastle</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="007" designation="us-only">
<addressbook>
<last-name>Nystr&#xf6;m</last-name>
<first-name>Magnus</first-name>
<address>
<city>Sammamish</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Microsoft Corporation</orgname>
<role>02</role>
<address>
<city>Redmond</city>
<state>WA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Patel</last-name>
<first-name>Ashok</first-name>
<department>2491</department>
</primary-examiner>
<assistant-examiner>
<last-name>Bechtel</last-name>
<first-name>Kevin</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">An event log can comprise, not only entries associated with components instantiated since a most recent power on of a computing device, but also entries of components instantiated prior to that power on, such as components that were instantiated, and represent, a state of the computing device prior to hibernation that has now been resumed. Upon hibernation, the current values of the Platform Configuration Registers (PCRs) of a Trusted Platform Module (trusted execution environment), as well as a quote of those current values, and a current value of a monotonic counter of the trusted execution environment can be logged. The monotonic counter can be incremented at each power on to track successive generations of the computing device and to guard against an intervening, not-logged generation. A subsequent parsing of the event log can verify the prior generational entries with reference to the PCR values in the log that are associated with those generations.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="192.02mm" wi="144.86mm" file="US08627464-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="215.90mm" wi="187.96mm" file="US08627464-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="213.11mm" wi="149.78mm" file="US08627464-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="211.67mm" wi="147.66mm" file="US08627464-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="212.77mm" wi="148.17mm" file="US08627464-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="210.06mm" wi="149.78mm" file="US08627464-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="276.78mm" wi="171.87mm" orientation="landscape" file="US08627464-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="265.01mm" wi="182.46mm" file="US08627464-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="215.82mm" wi="149.44mm" file="US08627464-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">Modern computing devices often include a Trusted Platform Module (TPM) that provides security functionality to its host computing device. The TPM, being a hardware component, can provide for increased security over that available solely through the execution of computer-executable instructions by the computing device. More specifically, the hardware of a traditional TPM is designed to protect information stored within the TPM by enabling access and modification of such information only through specific channels and specific functions, and preventing other access or modification of such information. Thus, even if a malicious entity were to gain physical access to the TPM itself, the information stored within the TPM would still remain protected, except where truly exotic and advanced forensics were applied.</p>
<p id="p-0003" num="0002">One set of information that is commonly stored in a TPM are the numerical values that are stored in a TPM's Platform Configuration Registers (PCRs). These numerical values are intended to represent a current state of the computing device and are generated by extending numerical values, representing a hardware or software component that is being instantiated, into various PCRs. Thus, starting with an initial value when the computing device is powered on, the PCRs are extended with numerical values that represent hardware or software components that are successively instantiated, such that the value of the PCRs at a given time represents the state of the computing device at that time, as defined by the hardware or software components that have been instantiated, and measured into the PCRs, up to that point in time.</p>
<p id="p-0004" num="0003">As indicated, the hardware of the TPM is designed such that the values of the PCRs can only be changed by the above-described extending process. Thus, the values of the PCRs cannot otherwise be modified, nor can specific values simply be stored in them. However, this design works best if the state of the computing device is represented only by components that were instantiated since the computing device was last powered on.</p>
<p id="p-0005" num="0004">To conserve power, however, some computing devices have the capability of entering a &#x201c;sleep&#x201d; state or an even less power consuming &#x201c;hibernate&#x201d; state. Typically, a sleep state comprises a computing device ceasing most processing operations, as well as turning off or powering down other power consuming peripherals, such as display devices or hard disk drives. However, in a sleep state, a computing device will typically utilize power to maintain the contents of volatile memory, as well as maintain the current state of the TPM and any information stored therein, such as the values of PCRs. Consequently, when resuming from a sleep state, the state of the computing device, as reflected by both contents of volatile memory and the values of the PCR's of the TPM, can remain unchanged from when the computing device entered the sleep state.</p>
<p id="p-0006" num="0005">By contrast, to conserve as much power as possible, a hibernate state typically does not provide for continued power consumption by the volatile memory of the computing device, thereby resulting in the loss of the information that was stored in the volatile memory. To preserve the contents of volatile memory, a computing device entering the hibernate state can first save the contents of volatile memory to a non-volatile storage medium. Subsequently, the computing device can enter the hibernate state, which is typically a completely powered off state, akin to the computing device being completely shut down, with the exception that the contents of volatile memory are saved on a non-volatile storage medium.</p>
<p id="p-0007" num="0006">Subsequently, to resume operation, the computing device can proceed through an initial boot sequence similar to being powered on or restarted, except that, at some point in time in the initial boot sequence, the contents of volatile memory that were saved to the non-volatile storage medium can be detected, and copied back into the volatile memory, thereby enabling the computing device to resume its pre-hibernation state. However, while the computing device can resume its pre-hibernation state, at least as far as the hardware and software that has been instantiated and for which computer-executable instructions and data can have been restored into volatile memory, the PCRs of the TPM may not necessarily comprise the values that are associated with the pre-hibernation state. In particular, the copying of the saved contents back into volatile memory typically does not extend the PCRs of the TPM in the same manner as they would have been extended were the state of the computing device re-created from an initial power on or restart sequence. Consequently, the values of the PCRs may no longer correlate with the state of the computing device.</p>
<heading id="h-0002" level="1">SUMMARY</heading>
<p id="p-0008" num="0007">In one embodiment, prior to entering a hibernation state, the current values of the Platform Configuration Registers (PCRs) can be quoted, such as by being signed with keys unique to a trusted execution environment, such as a Trusted Platform Module (TPM), and the values of the PCRs, together with the quote, can be appended to an event log that is typically maintained in volatile memory. When the contents of volatile memory are saved to a non-volatile storage medium, as is typically performed by a computing device prior to entering the hibernation state, the event log with the current values of the PCRs, and a quote thereof, can be part of the information that is saved to the non-volatile storage medium.</p>
<p id="p-0009" num="0008">In another embodiment, a monotonic counter that can only be incremented and cannot be reset, such as can be typically maintained by trusted execution environments, can be utilized as a &#x201c;boot counter&#x201d;, and can be incremented each time a computing device is &#x201c;booted&#x201d;. The current value of the monotonic counter can be appended to the event log, along with the values of the PCRs, and the quote thereof, prior to the computing device entering the hibernation state.</p>
<p id="p-0010" num="0009">In a further embodiment, upon a subsequent resuming from a hibernated state, an existing event log can be concatenated with the event log that had been saved to the non-volatile storage medium as part of the hibernation process. The resulting event log, that can be maintained in volatile memory, and appended to in a traditional manner, can comprise not only entries since the most recent resuming from the hibernated state, but also entries prior to hibernation, including the values of the PCRs prior to hibernation, the quote thereof and the value of the monotonic counter prior to hibernation.</p>
<p id="p-0011" num="0010">In a still further embodiment, an event log comprising events from multiple generations or incarnations of a computing device, such as events from prior to a hibernation of the computing device and events subsequent to a resuming from hibernation, can be evaluated with reference to the current PCR values, the prior PCR values, as saved and quoted in the event log, and with reference to an incremental continuity between the current value of the monotonic counter and saved values of the monotonic counter in the event log.</p>
<p id="p-0012" num="0011">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify access control features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p>
<p id="p-0013" num="0012">Additional features and advantages will be made apparent from the following detailed description that proceeds with reference to the accompanying drawings.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0014" num="0013">The following detailed description may be best understood when taken in conjunction with the accompanying drawings, of which:</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> is a diagram of an exemplary computing device comprising a TPM;</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of an exemplary operation of a computing device after a power on;</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram of an exemplary operation of a computing device prior to a hibernate;</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 4</figref> is a block diagram of an exemplary operation of a computing device after a resume from hibernation;</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 5</figref> is a block diagram of a further exemplary operation of a computing device after a resume from hibernation;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an exemplary examination of an event log;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 7</figref> is a flow diagram of an exemplary operation of a hibernation-capable computing device; and</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 8</figref> is a flow diagram of an exemplary examination of an event log.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0023" num="0022">The following description relates to the logging, into an event log, of the values of at least some of the Platform Configuration Registers (PCRs) of a trusted execution environment, together with the value of a monotonic counter of the trusted execution environment that is being used as a boot counter, prior to the hibernation of the computing device comprising the trusted execution environment. Upon a subsequent resume, the prior event log into which this information was entered, which was saved as part of the hibernation image, can be concatenated with a current event log, thereby providing a mechanism with which to securely record the history of the computing device, at least since the most recent power on or restart.</p>
<p id="p-0024" num="0023">The mechanisms described herein focus on, but are not limited to, physical computing devices entering a low power &#x201c;hibernation&#x201d; mode or state. Indeed, the teachings below are equally applicable to virtual computing devices that emulate the operation of a physical computing device, and can be applied, not merely across hibernate-and-resume cycles, but across any cycle in which the state of a computing device is restored without being recreated, including, for example, the distribution of state to otherwise stateless, terminal computing devices, and other like environments. As a result, the specific exemplary circumstances referenced are utilized to render the descriptions more concrete and are not meant to limit the enumerated embodiments to the specific exemplary circumstances referenced.</p>
<p id="p-0025" num="0024">Additionally, the mechanisms described herein are often described with reference to a Trusted Platform Module (TPM) because such a module is well known in the art and comprises attributes that can be utilized by the mechanisms described below. However, as will be recognized by those skilled in the art, TPMs traditionally must conform to the Trusted Computing Group's (TCG's) standards and requirements for such a module and, as such, comprise features and functionality that are useless, or, at best, orthogonal to the mechanisms described herein. Thus, while reference is made to TPMs for purposes of descriptional clarity, the mechanisms described herein are equally applicable to any &#x201c;trusted execution environment&#x201d; that can securely provide the requisite functionality, such as a secure monotonic counter, one or more platform configuration registers that can only be modified in defined ways according to the components being instantiated by a computing device, and the ability to sign or quote information with reference to one or more securely maintained and obtained cryptographic keys. As utilized herein, the term &#x201c;trusted execution environment&#x201d; is meant to encompass a physical TPM conforming to the TCG standards, as well as other hardware or software modules that can securely provide the requisite functionality, such as that enumerated above and described in more detail below.</p>
<p id="p-0026" num="0025">Although not required, the description below will be in the general context of computer-executable instructions, such as program modules, being executed by a computing device. More specifically, the description will reference acts and symbolic representations of operations that are performed by one or more computing devices or peripherals, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by a processing unit of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in memory, which reconfigures or otherwise alters the operation of the computing device or peripherals in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations that have particular properties defined by the format of the data.</p>
<p id="p-0027" num="0026">Generally, program modules include routines, programs, objects, components, data structures, and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the computing devices need not be limited to conventional personal computers, and include other computing configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Similarly, the computing devices need not be limited to a stand-alone computing device, as the mechanisms may also be practiced in distributed computing environments linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.</p>
<p id="p-0028" num="0027">With reference to <figref idref="DRAWINGS">FIG. 1</figref>, an exemplary computing device <b>100</b> is illustrated, comprising, in part, hardware elements referenced further in the methods described below. The exemplary computing device <b>100</b> can include, but is not limited to, one or more central processing units (CPUs) <b>120</b>, a system memory <b>130</b>, a Trusted Platform Module (TPM) <b>150</b>, and a system bus <b>121</b> that couples various system components including the system memory to the processing unit <b>120</b>. The system bus <b>121</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. Depending on the specific physical implementation, one or more of the CPUs <b>120</b>, the system memory <b>130</b> and the TPM <b>150</b> can be physically co-located, such as on a single chip. In such a case, some or all of the system bus <b>121</b> can be nothing more than silicon pathways within a single chip structure and its illustration in <figref idref="DRAWINGS">FIG. 1</figref> can be nothing more than notational convenience for the purpose of illustration.</p>
<p id="p-0029" num="0028">As indicated previously, the mechanisms described herein are equally applicable to any trusted execution environment, and a hardware TPM, such as the TPM <b>150</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>, is but one example of such a trusted execution environment. Thus, utilization of the TPM <b>150</b>, described below, is not intended to limit the mechanisms described to specifically hardware TPMs conforming to the TCG specifications and is, instead intended to illustrate the mechanisms described within a specific context that can be trivially expanded to any trusted execution environment. Thus, strictly for ease of illustration, references will be made to the TPM <b>150</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. The TPM <b>150</b> can comprise TPM-specific keys <b>151</b> for the encryption and decryption of information provided to it. Traditionally, the TPM <b>150</b> comprises an initial set of immutable public and private encryption keys that can be utilized, in a known and established manner, to obtain disposable public and private encryption keys. For example, the TPM <b>150</b> can comprise public and private portions of an Endorsement Key (EK), one or more Attestation Identity Keys (AIKs), and other like cryptographic keys that can be utilized to variously sign, quote and encrypt and decrypt information. In addition, the TPM <b>150</b> can comprise Platform Configuration Registers (PCRs) <b>155</b> that can securely store values or other data uniquely associated with the state of the computing device <b>100</b>. Such values are traditionally provided to the TPM <b>150</b> by the CPU <b>120</b> via the system bus <b>121</b>. In some embodiments, only specific code executed by the CPU <b>120</b> would be permitted to send data to the TPM <b>150</b> that would modify the values stored in the PCRs <b>155</b>. The TPM <b>150</b> can further comprise at least one monotonic counter, such as the monotonic counter <b>156</b>. The value stored by the monotonic counter <b>156</b> can be incremented, but not decremented or assigned a specific value, as such actions can be prevented by the TPM <b>150</b>. In one embodiment, once the value of the monotonic counter <b>156</b> exceeds a certain threshold, it can roll over to an initial value and can be incremented further from there.</p>
<p id="p-0030" num="0029">In addition to the elements described above, the computing device <b>100</b> also typically includes computer readable media, which can include any available media that can be accessed by the computing device <b>100</b>. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computing device <b>100</b>. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.</p>
<p id="p-0031" num="0030">When using communication media, the computing device <b>100</b> may operate in a networked environment via logical connections to one or more remote computers. The logical connection depicted in <figref idref="DRAWINGS">FIG. 1</figref> is a general network connection <b>171</b> to a network <b>180</b> that can be a local area network (LAN), a wide area network (WAN) or other networks. The computing device <b>100</b> is connected to the general network connection <b>171</b> through a network interface or adapter <b>170</b> which is, in turn, connected to the system bus <b>121</b>. In a networked environment, program modules depicted relative to the computing device <b>100</b>, or portions or peripherals thereof, may be stored in the memory of one or more other computing devices that are communicatively coupled to the computing device <b>100</b> through the general network connection <b>171</b>. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between computing devices may be used.</p>
<p id="p-0032" num="0031">Among computer storage media, the system memory <b>130</b> comprises computer storage media in the form of volatile and/or nonvolatile memory, including Read Only Memory (ROM) <b>131</b> and Random Access Memory (RAM) <b>132</b>. A Basic Input/Output System <b>133</b> (BIOS), containing, among other things, code for booting the computing device <b>100</b>, is typically stored in ROM <b>131</b>. RAM <b>132</b> typically contains data and/or program modules that are immediately accessible to and/or presently being operated on by the processing unit <b>120</b>. By way of example, and not limitation, <figref idref="DRAWINGS">FIG. 1</figref> illustrates operating system <b>134</b>, other program modules <b>135</b>, and program data <b>136</b> as being resident in the RAM <b>132</b>. The RAM <b>132</b> can also comprise data that can be relevant to the operation of the TPM <b>150</b>, such as the event log <b>190</b>. In one embodiment, the event log <b>190</b> can comprise a unique identification of all of the modules loaded or executed by the computing device <b>100</b> since power was applied or since it was last restarted; the same modules whose loading or execution can have resulted in the values currently maintained by the TPM <b>150</b> in one or more PCRs <b>155</b>. For example, the event log <b>190</b> can be a Trusted Computing Group (TCG) event log.</p>
<p id="p-0033" num="0032">The computing device <b>100</b> may additionally include other removable/non-removable, volatile/nonvolatile computer storage media. By way of example only, <figref idref="DRAWINGS">FIG. 1</figref> illustrates a hard disk drive <b>141</b> that reads from or writes to non-removable, non-volatile magnetic or solid-state media. Other removable/non-removable, volatile/nonvolatile computer storage media that can be used with the exemplary computing device include, but are not limited to, solid-state based storage devices, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive <b>141</b> is typically connected to the system bus <b>121</b> through a non-removable memory interface such as interface <b>140</b>.</p>
<p id="p-0034" num="0033">The drives and their associated computer storage media discussed above and illustrated in <figref idref="DRAWINGS">FIG. 1</figref>, provide storage of computer readable instructions, data structures, program modules and other data for the computing device <b>100</b>. In <figref idref="DRAWINGS">FIG. 1</figref>, for example, hard disk drive <b>141</b> is illustrated as storing operating system <b>144</b>, other program modules <b>145</b> and program data <b>146</b>. Note that these components can either be the same as or different from operating system <b>134</b>, other program modules <b>135</b> and program data <b>136</b>. Operating system <b>144</b>, other program modules <b>145</b> and program data <b>146</b> are given different numbers hereto illustrate that, at a minimum, they are different copies.</p>
<p id="p-0035" num="0034">In one embodiment, the &#x201c;state&#x201d; of the computing device <b>100</b> can be defined by the hardware components, such as those described above, and the components of computer-executable instructions, also such as those described above, that have been instantiated, or otherwise activated, since the computing device <b>100</b> was powered on or restarted. From a security perspective, the state of the computing device <b>100</b> at a time prior to the application of power and prior to the initialization of any hardware, or the execution of any computer-executable instructions, can be regarded as a &#x201c;safe&#x201d; state. Consequently, from a security perspective, whether any subsequent state of the computing device <b>100</b> is secure can be determined via examination of the changes made to the computing device <b>100</b> from the moment when power was applied, or reapplied after a restart. Thus, as will be known by those skilled in the art, one function of the event log <b>190</b> is to provide a record of all of the relevant hardware components and components of computer-executable instructions that have been instantiated on the computing device <b>100</b> since power was applied. If each of the elements listed in the event log <b>190</b> are believed to be safe, then the current state of the computing device <b>100</b> can likewise be deemed to be safe, since the computing device can be deemed to have not departed from its initial safe state. Conversely, and more practically, if any one of the elements listed in the event log <b>190</b> is believed to be a security concern, then the state of the computing device <b>100</b> can be determined to no longer be safe and, as a result, the computing device <b>100</b> can be prevented from performing certain security-sensitive operations, such as, for example, joining a secure network, or accessing protected data.</p>
<p id="p-0036" num="0035">However, as will also be known by those skilled in the art, the event log <b>190</b>, being retained in the RAM <b>132</b>, can be accessed and modified and, as a result, cannot be assured to be an accurate representation of all of the relevant hardware components and components of computer-executable instructions that have been instantiated on the computing device <b>100</b> since power was applied. To protect against such tampering of the event log <b>190</b>, the PCRs <b>155</b> of the TPM <b>150</b> are utilized to retain values associated with the entries in the event log <b>190</b> such that if the values of the PCRs <b>155</b> do not correspond to the entries in the event log <b>190</b>, a determination can be made that the event log <b>190</b> may have been tampered with and no longer represents an accurate listing of the relevant hardware components and components of computer-executable instructions that have been instantiated on the computing device <b>100</b> since power was applied. In particular, and as will also be known to those skilled in the art, each entry in the event log <b>190</b> can correspond to a particular hardware component or components of computer-executable instructions that can be measured, such as by computing a hash of the relevant-computer executable instructions, or otherwise deriving a unique numerical value that represents that component. As each component is instantiated, this unique numerical value can be extended into one or more of the PCRs <b>155</b> via known mathematical operations that receive, as input, the prior value of the one or more PCRs <b>155</b> and the unique numerical value that is being extended into them, and derive therefrom a subsequent numerical value that is stored back into the one or more PCRs <b>155</b>. Consequently, the current value of the PCRs <b>155</b> should be obtainable by performing such an extend operation with the unique numerical values associated with each of the entries in the event log <b>190</b>, in the order of those entries in the event log <b>190</b>. If the values obtained from the entries in the event log <b>190</b> do not match those maintained in the PCRs <b>155</b>, the above conclusion that the event log <b>190</b> is no longer accurate can be reached.</p>
<p id="p-0037" num="0036">Turning to <figref idref="DRAWINGS">FIG. 2</figref>, the system <b>200</b> shown therein illustrates an exemplary series of operations in accordance with the above descriptions, that also provide a foundation for the descriptions below. As can be seen from the system <b>200</b>, a power on event <b>210</b> can be applied to the computing device <b>100</b>, thereby causing the computing device <b>100</b> to commence initializing, or otherwise instantiating, various hardware components, and also to commence executing computer-executable instructions, such as the operating system <b>144</b> that is stored on the hard disk drive <b>141</b> of the computing device <b>100</b>. For example, as shown in the system <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>, the operating system <b>144</b>, that is stored on the hard disk drive <b>141</b>, can be booted, or otherwise instantiated, as illustrated by the boot action <b>230</b>. As will be understood by those skilled in the art, the process of instantiating the operating system <b>144</b> can result in the creation of the operating system <b>134</b> as an executing process that stores information in the RAM <b>132</b>. Consequently, the boot action <b>230</b> is illustrated in <figref idref="DRAWINGS">FIG. 2</figref> as transferring information from the operating system <b>144</b>, as stored on the hard disk drive <b>141</b>, to the RAM <b>132</b>, in the form of the operating system <b>134</b>, which is illustrated in gray to indicate that, as of the commencement of the boot action <b>230</b>, the operating system <b>134</b> does not yet fully exist within the RAM <b>132</b>.</p>
<p id="p-0038" num="0037">As each component of the computing device <b>100</b> is instantiated, an appropriate entry can be added to the event log <b>190</b>. Thus, as illustrated by the log action <b>232</b>, shown in the system <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>, entries for the instantiation of the operating system <b>144</b>, such as the exemplary OS loader entry <b>292</b> and the exemplary operating system entry <b>293</b> can be added to the event log <b>190</b>. In one embodiment, such entries <b>292</b> and <b>293</b> can be added either before or after the entries for the hardware that was instantiated prior to the operating system <b>144</b>, such as the hardware entry <b>291</b>, depending on whether the event log <b>190</b> is organized in a first-on-top or a first-on-bottom order. As will be recognized by those skilled in the art, typical entries in an event log <b>190</b> can comprise more detail, and can be more finely delineated. However, the entries <b>291</b>, <b>292</b> and <b>293</b> are shown in the event log <b>190</b> purely for illustrative purposes.</p>
<p id="p-0039" num="0038">In addition to the logging action <b>232</b>, the instantiation of the operating system <b>144</b> can result in one or more extend operations, such as the extend action <b>231</b>, that can extend one or more of the PCRs <b>155</b> with measurement values of some or all of the components of the operating system <b>144</b> that correspond to the entries <b>292</b> and <b>293</b> in the event log <b>190</b>. In such a manner, the computing device <b>100</b> can proceed through its booting sequence and can, optionally, instantiate further computer executable instructions, such as those that comprise program modules <b>145</b>, including logging the appropriate entries in the event log <b>190</b> and extending one or more of the PCRs <b>155</b> with appropriate measurement values.</p>
<p id="p-0040" num="0039">In one embodiment, a monotonic counter <b>156</b> of the trusted platform module <b>150</b> can be utilized as a &#x201c;boot counter&#x201d; such that it can be incremented, as indicated by the increment action <b>220</b>, each time the computing device <b>100</b> is booted, including, for example, being powered on, such as illustrated in the system <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>, being restarted, or being resumed from hibernate state. As utilized herein, the term &#x201c;powered on&#x201d; means the application of power to a computing device after an extended period of time in a mechanical power off state, such as that defined as the &#x201c;G3&#x201d; state in the Advanced Configuration and Power Interface (ACPI) specification. Conversely, the term &#x201c;restart&#x201d;, as utilized herein, means the application of power to a computing device as part of an automated cycle through a power off state, such as can be initiated by selecting a &#x201c;restart&#x201d; option common in many operating systems. The term &#x201c;resume&#x201d;, as utilized herein, means the application of power after a computing device has entered a hibernation state, such as that defined by the &#x201c;S4&#x201d; state of the ACPI specification. Returning back to <figref idref="DRAWINGS">FIG. 2</figref>, the value <b>256</b> of the monotonic counter <b>156</b> can be an increment greater than the prior value, represented by the variable &#x201c;x&#x201d; in the figure, to account for the illustrated booting of the computing device <b>100</b>. Additionally, while the illustration in <figref idref="DRAWINGS">FIG. 2</figref> shows an increment step of one, other incrementation values can be utilized.</p>
<p id="p-0041" num="0040">Turning to <figref idref="DRAWINGS">FIG. 3</figref>, the system <b>300</b> shown therein illustrates the computing device in a state after it has been booted and utilized. Thus, in the illustrated example shown in <figref idref="DRAWINGS">FIG. 3</figref>, the event log <b>190</b> can comprise further entries to those described previously including, for example, entry <b>394</b> referencing one or more program modules, or other components of computer-executable instructions.</p>
<p id="p-0042" num="0041">As shown in the system <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref>, a hibernate instruction <b>310</b> can be provided to the computing device <b>100</b> that can cause the computing device to store the contents of the RAM <b>132</b>, or at least some portion thereof, on a volatile storage medium, such as the hard disk drive <b>141</b>, as a hibernation image, such as the hibernation image <b>360</b>. Such an action is represented by the store action <b>350</b> in <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0043" num="0042">In one embodiment, prior to creating the hibernation image <b>360</b>, one or more additional entries can be logged into the event log <b>190</b>. In particular, as illustrated by the quote action <b>320</b>, one or more of the TPM-specific keys <b>151</b> can be utilized in a manner well known to those skilled in the art to quote the current values of one or more of the PCRs <b>155</b>. For example, an AIK can be utilized to sign the values of one or more of the PCRs <b>155</b>. Such a process can prove that the values of the one or more PCRs <b>155</b> that are quoted were, in fact, in existence on the computing device <b>100</b> at the time that they were quoted.</p>
<p id="p-0044" num="0043">Subsequently, as illustrated by the logging action <b>321</b>, this quote of the PCRs <b>155</b> can be appended to the event log <b>190</b> as illustrated by the entry <b>395</b>. In addition, the entry <b>395</b> can further comprise the values of the PCRs <b>155</b> themselves, as illustrated by the logging action <b>330</b>, such that the quote provides proof that the values of the PCRs <b>155</b> that are part of the entry <b>395</b> have not been tampered with or otherwise modified. In one embodiment, the entry <b>395</b> can further comprise the current value <b>256</b> of the monotonic counter <b>156</b>, as illustrated by the logging action <b>340</b>. As will be recognized by those skilled in the art, while the values of the PCRs <b>155</b>, the quote of the values of the PCRs <b>155</b> and the value <b>256</b> of the monotonic counter <b>156</b> are shown in <figref idref="DRAWINGS">FIG. 3</figref> as being logged into the event log <b>190</b> as a single entry <b>395</b>, such an illustration is merely an example and is simplified for illustrative clarity. In other embodiments, one or more of those pieces of information can be logged individually or via multiple entries in the event log <b>190</b>.</p>
<p id="p-0045" num="0044">The logging actions <b>321</b>, <b>330</b> and <b>340</b> can occur prior to the creation of the hibernation image <b>360</b>, by the store action <b>350</b>. As a result, the entry <b>395</b> can be part of the event log <b>190</b> when the event log <b>190</b> is saved on a non-volatile storage medium, such as the hard disk drive <b>141</b>, in the hibernation image <b>360</b>. As will be known by those skilled in the art, once the hibernation image <b>360</b> has been saved, and the computing device <b>100</b> has performed other relevant hibernation-centric functions, it can proceed to hibernate, and the contents of the RAM <b>132</b> can be lost as the computing device <b>100</b> can enter, essentially, a powered off state. While the logging actions <b>321</b>, <b>330</b> and <b>340</b> are shown as occurring within the context of a hibernation of the computing device <b>100</b>, they need not occur temporally close to such a hibernation event. For example, in one embodiment, the logging actions <b>321</b>, <b>330</b> and <b>340</b> can be performed at any time during the operation of the computing device <b>100</b> including, for example, soon after the computing device <b>100</b> has completed booting.</p>
<p id="p-0046" num="0045">Turning to <figref idref="DRAWINGS">FIG. 4</figref>, the system <b>400</b> shown therein illustrates the computing device <b>100</b>, comprising the hibernation image <b>360</b>, being resumed from a hibernated state. Initially, a resume action <b>410</b>, can be applied to the computing device <b>100</b> by, for example, depressing a power button or other like user action. Subsequently, the computing device <b>100</b> can proceed through a boot sequence analogous to that described above with reference to the system <b>200</b> of <figref idref="DRAWINGS">FIG. 2</figref>. Thus, as shown in the system <b>400</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the operating system <b>144</b> can be booted, as illustrated by the boot action <b>430</b>, to generate an in-memory operating system <b>134</b>, and the relevant components of the operating system can both be logged into the event log <b>190</b>, as illustrated by the logging action <b>432</b>, and their measurements can be extended into one or more of the PCRs <b>155</b>, as illustrated by the extend action <b>431</b>. In addition, as also described previously, the monotonic counter <b>156</b> can be incremented, as shown by the increment action <b>420</b> in the system <b>400</b> of <figref idref="DRAWINGS">FIG. 4</figref>. The resulting value <b>456</b> of the monotonic counter <b>156</b> can be a single increment unit greater than the prior value <b>256</b> of the monotonic counter <b>156</b>.</p>
<p id="p-0047" num="0046">Typically, however, once an OS loader, or other relevant component of the operating system <b>134</b>, detects the presence of the hibernation image <b>360</b>, the traditional booting of the computing device <b>100</b> can be suspended, and the hibernation image <b>360</b> can be restored to the RAM <b>132</b>. Thus, as shown in the system <b>400</b> of <figref idref="DRAWINGS">FIG. 4</figref>, the event log <b>190</b> may not comprise anything more than entries for the instantiated hardware, such as the entry <b>496</b>, and entries for the OS loader, or other relevant components of the operating system <b>134</b>, such as the entry <b>497</b>, before the hibernation image <b>360</b> is restored to the RAM <b>132</b>.</p>
<p id="p-0048" num="0047">Turning to <figref idref="DRAWINGS">FIG. 5</figref>, system <b>500</b> shown therein illustrates one exemplary restoring of the hibernation image <b>360</b> to the RAM <b>132</b>. As illustrated by the restore action <b>550</b>, the restoring of the hibernation image <b>360</b> to the RAM <b>132</b> can return, to the RAM <b>132</b>, the operating system <b>134</b>, the program modules <b>135</b> and the program data <b>136</b> that were previously stored thereon prior to the hibernation of the computing device <b>100</b>. As will be recognized by those skilled in the art, the restoring of the contents of RAM <b>132</b> can enable the computing device <b>100</b> to recommence with the operations that it was performing prior to being hibernated. However, as will also be recognized by those skilled in the art, the restore action <b>550</b> may not affect the PCRs <b>155</b>. Thus, the values of the PCRs <b>155</b> may reflect, for example, the state of the computing device <b>100</b> immediately prior to the restoring of the hibernation image <b>360</b>, as opposed to the actual state of the computing device, which is more analogous to that shown in the system <b>300</b> of <figref idref="DRAWINGS">FIG. 3</figref>.</p>
<p id="p-0049" num="0048">However, as part of the restore operation <b>550</b>, the event log <b>190</b> can be modified to comprise both the information that was in the event log <b>190</b> as it was saved in the hibernation image <b>360</b> and is now being restored to RAM <b>132</b>, such as the entries <b>291</b>, <b>292</b>, <b>293</b>, <b>394</b> and <b>395</b>, and to further comprise information that was added to the event log <b>190</b> since the most recent powering on of the computing device <b>100</b> to resume it from the hibernated state, such as the entries <b>496</b> and <b>497</b>.</p>
<p id="p-0050" num="0049">As such, the event log <b>190</b> can comprise sufficient information to accurately assess the security state of the computing device <b>100</b>. In particular, the components that were previously instantiated, and which impacted the state of the computing device <b>100</b> prior to hibernation, which was now restored, can be represented in the event log <b>190</b>, such as via the entries <b>291</b>, <b>292</b>, <b>293</b> and <b>394</b>. Additionally, the components that were currently instantiated, and which can impact the current state of the computing device, can likewise be represented in the event log <b>190</b>, such as via the entries <b>496</b> and <b>497</b>. The current entries of the event log <b>190</b> can be validated with reference to the current value of one or more PCRs <b>155</b>, in a manner known to those skilled in the art, while the prior entries of the event log <b>190</b> can be validated with reference to the prior value of one or more PCRs <b>155</b> that were stored into the event log <b>190</b>, such as part of the entry <b>395</b>. The quote of that prior value of one or more PCRs <b>155</b> can be utilized to ensure that the values stored in the event log <b>190</b> had not been modified.</p>
<p id="p-0051" num="0050">In addition, a comparison between the current value <b>456</b> of the monotonic counter <b>156</b> and one or more prior values <b>256</b> of the monotonic counter <b>156</b>, such as those that can be part of the entry <b>395</b>, can reveal if the computing device was booted in the interim without appropriate information being logged to the event log <b>190</b>. For example, if the prior value <b>256</b> of the monotonic counter <b>156</b> that is part of the entry <b>395</b> is incrementally continuous with the current value <b>456</b> of the monotonic counter <b>156</b>, then a determination can be made that the computing device was not otherwise booted between the prior boot, which resulted in the state of the computing device that was hibernated, and the current boot, which resulted in that state being resumed.</p>
<p id="p-0052" num="0051">Turning to <figref idref="DRAWINGS">FIG. 6</figref>, the system <b>600</b> shown therein illustrates one exemplary utilization of the above described mechanisms. In the system <b>600</b> of <figref idref="DRAWINGS">FIG. 6</figref>, the personal computing device <b>610</b> can be a computing device that has gone through a similar sequence of steps to those described in detail above with reference to the exemplary computing device <b>100</b>. As such, the personal computing device <b>610</b> can comprise the event log <b>190</b>, the PCRs <b>155</b> and the monotonic counter <b>156</b>. Additionally, the gateway computing device <b>620</b> can likewise share the general hardware and software described with reference to the exemplary computing device <b>100</b>, such as with reference to <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0053" num="0052">In one embodiment, the personal computing device <b>610</b> and the gateway computing device <b>620</b> can be communicationally coupled via the network <b>180</b>, and the personal computing device <b>610</b> can be attempting to gain access to some data or resource that is protected by the gateway computing device <b>620</b>. In such an embodiment, the gateway computing device <b>620</b> can grant the personal computing device <b>610</b> the access it is requesting, if the gateway computing device <b>620</b> can determine that the personal computing device <b>610</b> is not malicious. To that end, the personal computing device <b>610</b> can, in a manner known to those skilled in the art, make available its event log <b>190</b>, and the values of its PCRs <b>155</b> and monotonic counter <b>156</b> to the gateway computing device <b>620</b>, as illustrated by the communications <b>630</b> and <b>640</b> shown in the system <b>600</b> of <figref idref="DRAWINGS">FIG. 6</figref>. The gateway computing device <b>620</b> can then parse the event log <b>190</b> to determine whether the personal computing device <b>610</b> has instantiated any component that may be malicious, or otherwise unacceptable given the conditions of access that the gateway computing device <b>620</b> is enforcing.</p>
<p id="p-0054" num="0053">In addition to parsing the event log <b>190</b>, the gateway computing device <b>620</b> can further verify that the information on which it is basing its decision, namely the entries in the event log <b>190</b>, are accurate, and have not been modified, or otherwise tampered with. To that end, the gateway computing device <b>620</b> can verify, as illustrated by the action <b>650</b>, that the values of the PCRs <b>155</b> are equivalent to the values that would be obtained if the measurements of the components listed in the event log <b>190</b> since the most recent boot, such as the entries <b>496</b> and <b>497</b>, were extended into the PCRs <b>155</b>. For entries in the event log <b>190</b> prior to the most recent boot, the gateway computing device <b>620</b> can verify, as illustrated by the action <b>670</b>, that the prior values of the PCR's <b>155</b>, as contained in the entry <b>395</b>, are equivalent of the values that would be obtained if the measurements of the components listed in the event log as occurring prior to the most recent boot, such as the entries <b>291</b>, <b>292</b>, <b>293</b> and <b>394</b>, were extended into the PCRs <b>155</b>. Additionally, although not specifically shown, the gateway computing device <b>620</b> can verify that the prior values of the PCRs in the entry <b>395</b> have not been modified, or otherwise tampered with, by referencing the quote of those values that is also part of the entry <b>395</b>, or is otherwise contained in the event log <b>190</b>. Furthermore, to ensure that the personal computing device <b>610</b> has not otherwise been booted in between the boots recorded in the event log <b>190</b>, the gateway computing device <b>620</b> can, as illustrated by the action <b>660</b>, verify that there is incremental continuity between the value of the monotonic counter <b>156</b> that was stored in the event log <b>190</b>, such as in the entry <b>395</b>, and the current value of the monotonic counter <b>156</b>. If all such checks are verified, the gateway computing device <b>620</b> can proceed to parse the event log <b>190</b> and verify that each of the components enumerated therein is approved, or, otherwise to verify that at least each of the components enumerated therein is not known to be malicious. As indicated by the action <b>680</b>, such an examination of the entries of the event log <b>190</b> can, in one embodiment, form the basis of the decision, by the gateway computing device <b>620</b>, of whether to grant the personal computing device <b>610</b> access to whatever data or resource it was requesting.</p>
<p id="p-0055" num="0054">While the above descriptions have focused on only two &#x201c;generations&#x201d; of a computing device, such as in a single hibernate-and-resume cycle, where the operation of the computing device prior to the hibernation can be considered one &#x201c;generation&#x201d;, and the operation of the computing device after resuming from the hibernation can be considered another, subsequent, &#x201c;generation&#x201d;, the above descriptions are not so limited. To the contrary, the use of the monotonic counter <b>156</b> can enable the above-described mechanisms to be implemented across multiple &#x201c;generations&#x201d; of a computing device. As utilized herein, the term &#x201c;generation&#x201d; means the operation of a computing device commencing with a power-on event, including power-on events following a period during which the computing device was completely powered off, power-on events that occur as part of a restart and power-on events that cause a computing device to resume from a hibernate state, and concluding with a power-down event, including power-down events when the computing device is shut down, power-down events that occur as part of a restart and power-down events that cause a computing device to enter a hibernate state.</p>
<p id="p-0056" num="0055">As described above, when the computing device <b>100</b> is being hibernated, or otherwise being placed into a suspended state that would signal the end of a current &#x201c;generation&#x201d;, such as, for example, when a virtual computing device is reduced to a disk image for cloning, one or more entries can be logged into the event log <b>190</b>. The one or more entries can include a current value of one or more of the PCRs <b>155</b>, a quote of those PCR values, and a current value of the monotonic counter <b>156</b> that is being utilized as a boot counter. In embodiments where multiple generations of the computing device <b>100</b> can be recorded in the event log <b>190</b>, the generations can be delineated by the values of the monotonic counter <b>156</b>. More specifically, for each generation, other than the current generation, there can be a corresponding entry of a prior value of the monotonic counter <b>156</b> in the event log <b>190</b>. For the current generation, the corresponding value of the monotonic counter <b>156</b> can be that of the monotonic counter <b>156</b> as maintained by it in the TPM <b>150</b>.</p>
<p id="p-0057" num="0056">In one embodiment, the entry, into the event log <b>190</b>, comprising a then-current value of the monotonic counter <b>156</b>, may not necessarily be an ultimate entry in the event log <b>190</b> prior to a power-down event. Thus, in such an embodiment, reference can be made to more traditional entries in the event log <b>190</b>, such as the hardware entries <b>291</b> and <b>496</b>, to determine the beginning and end of a generation of the computing device <b>100</b>. The value of the monotonic counter <b>156</b> that can correspond to that generation can be the value as indicated in an entry, such as the entry <b>395</b>, that appears between the entries that mark the beginning and end of that particular generation of the computing device <b>100</b>.</p>
<p id="p-0058" num="0057">Additionally, an analysis of an event log, such as the event log <b>190</b>, that comprises entries across such multiple generations of the computing device <b>100</b> can proceed in the same manner as that described previously. In particular, a computing device analyzing the event log <b>190</b>, such as the gateway computing device <b>620</b>, can verify that the values of the monotonic counter <b>156</b> that are recorded in the event log <b>190</b> are continuous, indicating that there have been no generations of the computing device that have not been logged in the event log. Each of the entries in the event log can then be verified as not having been tampered with by reference to the values of the PCRs <b>155</b> that were logged in the event log <b>190</b> within the same computing device generation as the entries being verified. Additionally, those PCR values can, themselves, be verified with reference to the quote that was logged with them. Once such verifications have been performed, the entries of the event log <b>190</b>, including entries stretching across multiple generations of the computing device <b>100</b>, if appropriate, can be analyzed to determine whether there exist any entries referencing components that are deemed to be malicious, unsafe, or inappropriate, including, for example, components that have not been updated to a newer, improved version.</p>
<p id="p-0059" num="0058">Turning to <figref idref="DRAWINGS">FIG. 7</figref>, the flow diagram <b>700</b> shown therein illustrates an exemplary series of steps that can be performed by a computing device generating an event log across multiple generations of a computing device, such as across multiple hibernation-and-resume cycles. Initially, as shown by the flow diagram <b>700</b> of <figref idref="DRAWINGS">FIG. 7</figref>, the computing device can be powered on, including as part of a resume from hibernate, at step <b>710</b>. Subsequently, as early as practical, the monotonic counter of a trusted execution environment can be incremented. In the exemplary flow diagram <b>700</b> of <figref idref="DRAWINGS">FIG. 7</figref>, such an incrementing of the monotonic counter occurs at step <b>715</b>, though it can equally be performed at a later point in time without deviating from the descriptions herein. In one embodiment, the incrementing of the monotonic counter, such as that at step <b>715</b>, can be performed by computer-executable instructions that can be part of the operating system. In such an embodiment, the incrementing of the monotonic counter may not be able to be performed until after at least the relevant components of the operating system have been instantiated, such as at step <b>735</b>. In another embodiment, however, the incrementing of the monotonic counter can be performed by computer-executable instructions that are part of the BIOS of the computing device <b>100</b>, or even that are part of the trusted execution environment itself. In such embodiments, the incrementing of the monotonic counter can be performed substantially earlier, such as at step <b>715</b>, as shown in the flow diagram <b>700</b> of <figref idref="DRAWINGS">FIG. 7</figref>.</p>
<p id="p-0060" num="0059">In addition to the incrementing of the monotonic counter, subsequent to the power on at step <b>710</b>, hardware aspects of the computing device can be instantiated, and logged in the event log, and their measurements can be utilized to extend one or more PCRs of the trusted execution environment, as shown at step <b>720</b>. Similarly, at step <b>725</b>, an OS loader, or other appropriate components of the operating system, can be instantiated, logged in the event log, and one or more PCRs of the trusted execution environment can be extended with their measurements.</p>
<p id="p-0061" num="0060">At step <b>730</b>, a determination can be made, such as by the OS loader, or other appropriate components of the operating system, as to whether a hibernation image exists. If a hibernation image does not exist, processing can proceed with step <b>735</b>, at which point other components of the operating system can be instantiated to complete the booting of the operating system, with those components being logged in the event log, and their measurements being utilized to extend one or more PCRs of the trusted execution environment. Such traditional logging an extension of trusted execution environment PCRs can proceed at step <b>745</b> for other aspects of the computing device. At some point in time, as illustrated by the decision at step <b>750</b>, the computing device can be hibernated. If the computing device is hibernated, or the current generation of the computing device is otherwise ended such that the information in the event log corresponding to such a generation should be saved for future evaluation, then processing can proceed to step <b>755</b> at which point the current values of the PCRs can be saved into the event log, as can the current value of the monotonic counter that was incremented at step <b>715</b>. Additionally, also as part of step <b>755</b>, the current values of the PCRs can be quoted, such as by being signed by one or more trusted execution environment-specific keys. The resulting quote can likewise be saved into the event log.</p>
<p id="p-0062" num="0061">As in the case of the incrementing of the monotonic counter, in one embodiment the performance of step <b>755</b> can be performed by one or more components of the operating system, while, in other embodiments, the performance of step <b>755</b> can be performed by the BIOS or even the trusted execution environment itself. If the performance of step <b>755</b> is performed by components of the operating system then, as will be recognized by those skilled in the art, there may be additional steps performed after step <b>755</b>, since other aspects of the computing device <b>100</b> may need to be prepared for hibernation after components of the operating system have ceased operation. However, if the performance of step <b>755</b> is performed by the BIOS or the trusted execution environment, it can occur after, for example, the operating system has been prepared for hibernation and immediately prior to the saving of the hibernation image at step <b>760</b>.</p>
<p id="p-0063" num="0062">Returning back to step <b>730</b>, if, at step <b>730</b>, it was determined that a hibernation image does exist, such as could have been created by a prior performance of step <b>760</b>, then processing can proceed to step <b>740</b> at which point the hibernation image can be loaded, and the event log that was saved as part of the hibernation image can be combined with the event log that was created upon the power on at step <b>710</b>. Subsequent processing can then proceed with the logging of instantiated components into the event log, and the extension of one or more PCRs with the measurements of those components.</p>
<p id="p-0064" num="0063">Turning to <figref idref="DRAWINGS">FIG. 8</figref>, the flow diagram <b>800</b> shown therein illustrates an exemplary series of steps that can be performed in determining the security state of a computing device based on an event log that was attained by that computing device. Initially, at step <b>810</b>, a request, or other action that can necessitate an evaluation of a computing device's security state, can be performed. Subsequently, at step <b>820</b>, the event log, the values of one or more of the PCRs and the value of the monotonic counter of the trusted execution environment of the computing device making the request at step <b>810</b>, can be received. Once the relevant set of information is obtained, at step <b>820</b>, a series of checks can be performed at steps <b>830</b> through <b>870</b>. While the checks are illustrated in a particular order in the exemplary flow diagram <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref>, such an order is meant to be illustrative only and is not an indication that a certain check must be performed prior to any other particular check since, as can be seen from the exemplary flow diagram <b>800</b> of <figref idref="DRAWINGS">FIG. 8</figref>, the failure of any one of the checks can result, at step <b>890</b>, in the denial or failure of the request that was received at step <b>810</b> and, conversely, success of each of the checks can result in the request, that was received at step <b>810</b>, being granted at step <b>880</b>.</p>
<p id="p-0065" num="0064">One of the checks that can be performed, such as at step <b>830</b>, can comprise a determination of whether a current portion of the event log, such as those event log entries from the current generation of the computing device being evaluated, match the current PCR values. As will be known by those skilled in the art, such a check can be performed by extending the measurements of the components whose entries are being verified in the same manner as they were extended into one or more PCRs, and then verifying that the obtained value matches that of actual PCRs.</p>
<p id="p-0066" num="0065">Another check that can be performed, such as at step <b>840</b>, can verify whether there is incremental continuity of the monotonic counter throughout the log. As indicated previously, the monotonic counter need not be incremented by an increment value of 1. In such embodiments, the check, at step <b>840</b>, can verify that the values of the monotonic counter that were logged in the event log, and the current value of the monotonic counter, such as was received at step <b>820</b>, differ from each other by an amount equal to a single increment value. If there is a difference between the logged values of the monotonic counter, or between the last logged value of the monotonic counter and the current value of the monotonic counter that is greater than a single increment value, such a discrepancy can indicate that the computing device was booted at least once in between the generations associated with the two values of the monotonic counter between which this discrepancy was found, and, as such, the entries in the event log no longer comprise a continuous history of the computing device.</p>
<p id="p-0067" num="0066">In one embodiment, before verifying that the log entries of prior generations of the computing device match the logged PCR values associated with those generations, a preliminary check can be made to verify that the logged PCR values have not been tampered with, or otherwise modified. Thus, at step <b>850</b>, a determination can be made as to whether the logged PCR values match the quote of those values that was also entered into the event log. If such a check fails, then there may not be any reason to verify that the log entries of prior generations of the computing device match the logged PCR values associated with those generations, since the logged PCR values themselves could not be verified.</p>
<p id="p-0068" num="0067">However, if, at step <b>850</b>, the logged PCR values were verified with reference to the quote of those values that was also logged, then processing can proceed to step <b>860</b>, where it can be determined whether the log entries of prior generations of the computing device match the logged PCR values associated with those generations. As in the case of the check at step <b>830</b>, such a determination can be performed by extending the measurements of the components of those prior generational entries that are being verified in the same manner as they would have been extended into one or more PCRs, and then verifying that the obtained value matches that of the associated logged PCR values.</p>
<p id="p-0069" num="0068">As a final check, once all of the entries in the event log can have been verified, such as via the checks described above, to be authentic, and not tampered with or otherwise modified, the log entries themselves can be evaluated, as such at step <b>870</b>, to determine whether they indicate that the security state of the computing device may have been compromised. Thus, for example, the log entries can be examined to identify any potentially malicious components, or any components that represent older, less secure versions, or that represent components that are simply deemed to constitute a security risk, or are otherwise unacceptable. If all such checks are passed, then, at step <b>880</b>, the request that was received at step <b>810</b> can be granted. Conversely, if any of the checks fail, then, at step <b>890</b>, the request can be denied, or can otherwise fail.</p>
<p id="p-0070" num="0069">As can be seen, mechanisms for securely logging events across multiple generations of a computing device have been presented. In view of the many possible variations of the subject matter described herein, we claim as our invention all such embodiments as may come within the scope of the following claims and equivalents thereto.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>We claim:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. One or more computer-readable storage devices comprising computer-executable instructions for evaluating a log file of a computing device, the log file comprising entries from a current generation of the computing device and at least one prior generation of the computing device, the computer-executable instructions, when executed by an evaluation computing device, cause the evaluation computing device to perform steps comprising:
<claim-text>obtaining: the log file of the computing device, a current value of one or more Platform Configuration Registers (PCRs) of a trusted execution environment of the computing device and a current value of a monotonic counter of the trusted execution environment of the computing device;</claim-text>
<claim-text>verifying incremental continuity between the current value of the monotonic counter and at least one prior value of the monotonic counter as logged in the log file, the incremental continuity being verified if a difference between the current value of the monotonic counter and the at least one prior value of the monotonic counter is not greater than a single increment value, wherein the current value of the monotonic counter is greater than the at least one prior value of the monotonic counter as logged in the log file due to the computing device having commenced the current generation subsequent to the prior generation;</claim-text>
<claim-text>verifying entries in the log file corresponding to the current generation of the computing device with reference to the current value of the one or more PCRs of the trusted execution environment of the computing device;</claim-text>
<claim-text>verifying entries in the log file corresponding to the at least one prior generation of the computing device with reference to prior values of the one or more PCRs of the trusted execution environment of the computing device that are logged in the log file and that correspond to the at least one prior generation of the computing device; and</claim-text>
<claim-text>verifying the prior values of the one or more PCRs of the trusted execution environment of the computing device that are logged in the log file with reference to at least one quote of those prior values that is also logged in the log file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising further computer-executable instructions for granting a request of the computing device if all components logged in the log file, across both the current generation of the computing device and the at least one prior generation of the computing device, are acceptable.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising further computer-executable instructions for denying a request of the computing device if at least one component logged in the log file, either as part of the current generation of the computing device or as part of the at least one prior generation of the computing device, is not acceptable.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising further computer-executable instructions for denying a request of the computing device if any of the verifying actions fail.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising further computer-executable instructions for verifying incremental continuity among all prior values of the monotonic counter as logged in the log file, wherein the log file comprises entries from multiple prior generations of the computing device.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computing device whose log file is being evaluated is the evaluation computing device.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The one or more computer-readable storage devices of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising further computer-executable instructions for:
<claim-text>incrementing the monotonic counter in response to the computing device having commenced a new generation;</claim-text>
<claim-text>generating a quote of a value of at least one PCR of the trusted execution environment prior to the computing device ending the current generation; and</claim-text>
<claim-text>inserting the quote, the value of the at least one PCR and the current value of the monotonic counter into an event log prior to the computing device ending the current generation.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer-readable storage devices of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the ending the current generation comprises at least one of: entering a hibernation state or, if the computing device is a virtual computing device, saving the virtual computing device to a disk image thereof.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer-readable storage devices of <claim-ref idref="CLM-00007">claim 7</claim-ref>, comprising further computer-executable instructions for concatenating a current event log with a prior event log from the prior generation of the computing device.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A system comprising:
<claim-text>a client computing device requesting access to a resource from a gateway computing device, the client computing device comprising a first computer-readable medium having computer-executable instructions for transmitting, to the gateway computing device, a log file of the client computing device, the log file comprising entries from a current generation of the computing device and at least one prior generation of the computing device, a current value of one or more Platform Configuration Registers (PCRs) of a trusted execution environment of the client computing device and a current value of a monotonic counter of the trusted execution environment of the client computing device; and</claim-text>
<claim-text>the gateway computing device comprising a second computer-readable medium having computer-executable instructions for performing steps comprising: verifying incremental continuity between the current value of the monotonic counter that was received from the client computing device and at least one prior value of the monotonic counter as logged in the log file that was received from the client computing device, the incremental continuity being verified if a difference between the current value of the monotonic counter and the at least one prior value of the monotonic counter is not greater than a single increment value, wherein the current value of the monotonic counter is greater than the at least one prior value of the monotonic counter as logged in the log file due to the computing device having commenced the current generation subsequent to the prior generation; verifying entries in the log file corresponding to the current generation of the computing device with reference to the current value of the one or more PCRs of the trusted execution environment of the client computing device that were received from the client computing device; verifying entries in the log file corresponding to the at least one prior generation of the client computing device with reference to prior values of the one or more PCRs of the trusted execution environment of the client computing device that are logged in the log file and that correspond to the at least one prior generation of the client computing device; and verifying the prior values of the one or more PCRs of the trusted execution environment of the client computing device that are logged in the log file with reference to at least one quote of those prior values that is also logged in the log file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second computer-readable medium comprises further computer-executable instructions for granting access to the resource to the client computing device if all components logged in the log file, across both the current generation of the client computing device and the at least one prior generation of the client computing device, are acceptable.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second computer-readable medium comprises further computer-executable instructions for denying the client computing device access to the resource if at least one component logged in the log file, either as part of the current generation of the client computing device or as part of the at least one prior generation of the client computing device, is not acceptable.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second computer-readable medium comprises further computer-executable instructions for denying the client computing device access to the resource if any of the verifying actions fail.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second computer-readable medium comprises further computer-executable instructions for verifying incremental continuity among all prior values of the monotonic counter as logged in the log file, wherein the log file comprises entries from multiple prior generations of the client computing device.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first computer-readable medium comprises further computer-executable instructions for: incrementing the monotonic counter of the trusted execution environment of the client computing device in response to the client computing device having commenced a new generation; generating a quote of a value of at least one PCR of the trusted execution environment of the client computing device prior to the client computing device ending a current generation; inserting the quote, the value of the at least one PCR and the current value of the monotonic counter into an event log when the client computing device is ending the current generation.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the ending the current generation comprises at least one of: entering a hibernation state or, if the computing device is a virtual computing device, saving the virtual computing device to a disk image thereof.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, comprising further computer-executable instructions for concatenating a current event log with a prior event log from a prior generation of the client computing device.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the event log comprises entries from at least one prior generation of the client computing device, the entries comprising a prior value of the monotonic counter associated with the at least one prior generation of the client computing device.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. A method of evaluating, at an evaluation computing device, a log file of a computing device, the log file comprising entries from a current generation of the computing device and at least one prior generation of the computing device, the method comprising the steps of:
<claim-text>obtaining, at the evaluation computing device: the log file of the computing device, a current value of one or more Platform Configuration Registers (PCRs) of a trusted execution environment of the computing device and a current value of a monotonic counter of the trusted execution environment of the computing device;</claim-text>
<claim-text>verifying, at the evaluation computing device, incremental continuity between the current value of the monotonic counter and at least one prior value of the monotonic counter as logged in the log file, the incremental continuity being verified if a difference between the current value of the monotonic counter and the at least one prior value of the monotonic counter is not greater than a single increment value, wherein the current value of the monotonic counter is greater than the at least one prior value of the monotonic counter as logged in the log file due to the computing device having commenced the current generation subsequent to the prior generation;</claim-text>
<claim-text>verifying, at the evaluation computing device, entries in the log file corresponding to the current generation of the computing device with reference to the current value of the one or more PCRs of the trusted execution environment of the computing device;</claim-text>
<claim-text>verifying, at the evaluation computing device, entries in the log file corresponding to the at least one prior generation of the computing device with reference to prior values of the one or more PCRs of the trusted execution environment of the computing device that are logged in the log file and that correspond to the at least one prior generation of the computing device; and</claim-text>
<claim-text>verifying, at the evaluation computing device, the prior values of the one or more PCRs of the trusted execution environment of the computing device that are logged in the log file with reference to at least one quote of those prior values that is also logged in the log file.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the computing device whose log file is being evaluated is the evaluation computing device. </claim-text>
</claim>
</claims>
</us-patent-grant>

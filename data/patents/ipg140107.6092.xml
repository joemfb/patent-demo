<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627216-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627216</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12573511</doc-number>
<date>20091005</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>894</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>3</main-group>
<subgroup>01</subgroup>
<symbol-position>L</symbol-position>
<classification-value>N</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>715760</main-classification>
<further-classification>715234</further-classification>
<further-classification>715237</further-classification>
<further-classification>715239</further-classification>
<further-classification>715242</further-classification>
</classification-national>
<invention-title id="d2e53">Rendering hypertext markup language content</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5511217</doc-number>
<kind>A</kind>
<name>Nakajima et al.</name>
<date>19960400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5978584</doc-number>
<kind>A</kind>
<name>Nishibata et al.</name>
<date>19991100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6057854</doc-number>
<kind>A</kind>
<name>Davis et al.</name>
<date>20000500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345619</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>6256772</doc-number>
<kind>B1</kind>
<name>Apte et al.</name>
<date>20010700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>6415278</doc-number>
<kind>B1</kind>
<name>Sweet et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>6552732</doc-number>
<kind>B1</kind>
<name>Davis et al.</name>
<date>20030400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345619</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>6558431</doc-number>
<kind>B1</kind>
<name>Lynch et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>6609158</doc-number>
<kind>B1</kind>
<name>Nevarez et al.</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6658600</doc-number>
<kind>B1</kind>
<name>Hogdal et al.</name>
<date>20031200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6675230</doc-number>
<kind>B1</kind>
<name>Lewallen</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6687745</doc-number>
<kind>B1</kind>
<name>Franco et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6691176</doc-number>
<kind>B1</kind>
<name>Narin et al.</name>
<date>20040200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6779172</doc-number>
<kind>B1</kind>
<name>Weerawarana et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717115</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6801224</doc-number>
<kind>B1</kind>
<name>Lewallen</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6812941</doc-number>
<kind>B1</kind>
<name>Brown et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6865599</doc-number>
<kind>B2</kind>
<name>Zhang</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6873343</doc-number>
<kind>B2</kind>
<name>Chui</name>
<date>20050300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6892200</doc-number>
<kind>B2</kind>
<name>Eich</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>707704</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6898786</doc-number>
<kind>B1</kind>
<name>Sokolov</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717139</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6922200</doc-number>
<kind>B1</kind>
<name>Marques</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>7058955</doc-number>
<kind>B2</kind>
<name>Porkka</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719314</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>7088374</doc-number>
<kind>B2</kind>
<name>David et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>7103585</doc-number>
<kind>B2</kind>
<name>Jowell et al.</name>
<date>20060900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>706 45</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7117504</doc-number>
<kind>B2</kind>
<name>Smith et al.</name>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7158878</doc-number>
<kind>B2</kind>
<name>Rasmussen et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7161599</doc-number>
<kind>B2</kind>
<name>Beda et al.</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>7210095</doc-number>
<kind>B1</kind>
<name>Mor</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>7257771</doc-number>
<kind>B2</kind>
<name>Buser et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715239</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>7265756</doc-number>
<kind>B2</kind>
<name>Schneider et al.</name>
<date>20070900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>7287274</doc-number>
<kind>B1</kind>
<name>Houlding</name>
<date>20071000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>7340718</doc-number>
<kind>B2</kind>
<name>Szladovics et al.</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>7346897</doc-number>
<kind>B2</kind>
<name>Vargas</name>
<date>20080300</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717137</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>7430343</doc-number>
<kind>B2</kind>
<name>Hayes et al.</name>
<date>20080900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>7486294</doc-number>
<kind>B2</kind>
<name>Beda et al.</name>
<date>20090200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>7546607</doc-number>
<kind>B2</kind>
<name>Demsey et al.</name>
<date>20090600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>7614003</doc-number>
<kind>B2</kind>
<name>Brichford et al.</name>
<date>20091100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>7823164</doc-number>
<kind>B2</kind>
<name>Gibbs et al.</name>
<date>20101000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719313</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>7958457</doc-number>
<kind>B1</kind>
<name>Brandenberg et al.</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715789</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>7971194</doc-number>
<kind>B1</kind>
<name>Gilboa</name>
<date>20110600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717136</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>8020089</doc-number>
<kind>B1</kind>
<name>Brichford et al.</name>
<date>20110900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2001/0032221</doc-number>
<kind>A1</kind>
<name>Anwar</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2002/0109729</doc-number>
<kind>A1</kind>
<name>Dutta</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2002/0120918</doc-number>
<kind>A1</kind>
<name>Aizenbud-Reshef et al.</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2002/0156881</doc-number>
<kind>A1</kind>
<name>Klopp Lemon et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2002/0178141</doc-number>
<kind>A1</kind>
<name>Kushnirskiy</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2003/0097421</doc-number>
<kind>A1</kind>
<name>Wille et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2003/0101235</doc-number>
<kind>A1</kind>
<name>Zhang</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2003/0105883</doc-number>
<kind>A1</kind>
<name>Gibbons</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2003/0121000</doc-number>
<kind>A1</kind>
<name>Cooper et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2003/0126311</doc-number>
<kind>A1</kind>
<name>Kushnirskiy et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2003/0217086</doc-number>
<kind>A1</kind>
<name>Kushnirskiy et al.</name>
<date>20031100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00052">
<document-id>
<country>US</country>
<doc-number>2004/0015940</doc-number>
<kind>A1</kind>
<name>Heisey et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00053">
<document-id>
<country>US</country>
<doc-number>2004/0056894</doc-number>
<kind>A1</kind>
<name>Zaika et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00054">
<document-id>
<country>US</country>
<doc-number>2004/0098731</doc-number>
<kind>A1</kind>
<name>Demsey et al.</name>
<date>20040500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00055">
<document-id>
<country>US</country>
<doc-number>2004/0111672</doc-number>
<kind>A1</kind>
<name>Bowman et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00056">
<document-id>
<country>US</country>
<doc-number>2004/0111673</doc-number>
<kind>A1</kind>
<name>Bowman et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00057">
<document-id>
<country>US</country>
<doc-number>2004/0189667</doc-number>
<kind>A1</kind>
<name>Beda et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00058">
<document-id>
<country>US</country>
<doc-number>2004/0189669</doc-number>
<kind>A1</kind>
<name>David et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00059">
<document-id>
<country>US</country>
<doc-number>2004/0194020</doc-number>
<kind>A1</kind>
<name>Beda et al.</name>
<date>20040900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00060">
<document-id>
<country>US</country>
<doc-number>2004/0223009</doc-number>
<kind>A1</kind>
<name>Szladovics et al.</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00061">
<document-id>
<country>US</country>
<doc-number>2004/0225491</doc-number>
<kind>A1</kind>
<name>Chang</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>704  2</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00062">
<document-id>
<country>US</country>
<doc-number>2005/0146533</doc-number>
<kind>A1</kind>
<name>Sanborn et al.</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00063">
<document-id>
<country>US</country>
<doc-number>2005/0216895</doc-number>
<kind>A1</kind>
<name>Tran</name>
<date>20050900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00064">
<document-id>
<country>US</country>
<doc-number>2005/0268216</doc-number>
<kind>A1</kind>
<name>Hayes et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00065">
<document-id>
<country>US</country>
<doc-number>2006/0010246</doc-number>
<kind>A1</kind>
<name>Schulz et al.</name>
<date>20060100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00066">
<document-id>
<country>US</country>
<doc-number>2006/0026526</doc-number>
<kind>A1</kind>
<name>Simister et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00067">
<document-id>
<country>US</country>
<doc-number>2006/0048051</doc-number>
<kind>A1</kind>
<name>Lazaridis</name>
<date>20060300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00068">
<document-id>
<country>US</country>
<doc-number>2006/0103665</doc-number>
<kind>A1</kind>
<name>Opala et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00069">
<document-id>
<country>US</country>
<doc-number>2006/0112167</doc-number>
<kind>A1</kind>
<name>Steele et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00070">
<document-id>
<country>US</country>
<doc-number>2006/0123360</doc-number>
<kind>A1</kind>
<name>Anwar et al.</name>
<date>20060600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00071">
<document-id>
<country>US</country>
<doc-number>2006/0152511</doc-number>
<kind>A1</kind>
<name>Whatmough</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00072">
<document-id>
<country>US</country>
<doc-number>2007/0013697</doc-number>
<kind>A1</kind>
<name>Gilboa</name>
<date>20070100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00073">
<document-id>
<country>US</country>
<doc-number>2007/0089048</doc-number>
<kind>A1</kind>
<name>Lacey et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00074">
<document-id>
<country>US</country>
<doc-number>2007/0094672</doc-number>
<kind>A1</kind>
<name>Hayton et al.</name>
<date>20070400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00075">
<document-id>
<country>US</country>
<doc-number>2007/0113237</doc-number>
<kind>A1</kind>
<name>Hickson</name>
<date>20070500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719318</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00076">
<document-id>
<country>US</country>
<doc-number>2007/0192818</doc-number>
<kind>A1</kind>
<name>Bourges-Sevenier et al.</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>725132</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00077">
<document-id>
<country>US</country>
<doc-number>2007/0198918</doc-number>
<kind>A1</kind>
<name>Mor</name>
<date>20070800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00078">
<document-id>
<country>US</country>
<doc-number>2007/0256055</doc-number>
<kind>A1</kind>
<name>Herscu</name>
<date>20071100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00079">
<document-id>
<country>US</country>
<doc-number>2007/0288855</doc-number>
<kind>A1</kind>
<name>Rohrabaugh et al.</name>
<date>20071200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00080">
<document-id>
<country>US</country>
<doc-number>2008/0082907</doc-number>
<kind>A1</kind>
<name>Sorotokin et al.</name>
<date>20080400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00081">
<document-id>
<country>US</country>
<doc-number>2008/0127170</doc-number>
<kind>A1</kind>
<name>Goldman et al.</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00082">
<othercit>e.wikipedia.org et. al; Opera Web Browser) extracted Oct. 23, 2012; pp. 1-21.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00083">
<othercit>W3C.org et al.; &#x201c;Scalable Vector Graphics (SVG) Tiny 1.2 Specification&#x201d; Aug. 10, 2006, 1 page.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00084">
<othercit>http://www.webkit.org/blog/74/adobe.apollo.uses.webkit et al. &#x201c;Surfin Safari&#x201d; posted Oct. 30, 2006 pp. 1-6.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00085">
<othercit>Adobe inc. et al. &#x201c;Apollo: Developer FAQ&#x201d; Oct. 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00086">
<othercit>Peters, Keith et. al. &#x201c;What I learned at FITC in Hollywood&#x201d; Oct. 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00087">
<othercit>Ryan Stewart et al. &#x201c;Unofficial Apollo FAQ&#x201d;, http://web.archive.org/web/20060512020438/http://www/digitalbackcountry.com/index.com.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00088">
<othercit>Amit Agarwal et. al. &#x201c;Adobe Apollo= Acrobat Reader+Flash Player&#x201d;; http://labnol.blogspot.com/2005/12/adobe-apollo-acrobat-reader-flash.html; Dec. 2005, pp. 1-4.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00089">
<othercit>Lamonica, Martin et. al. &#x201c;Flash to Jump Beyond the Browser&#x201d; May 11, 2006, p. 1-10.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00090">
<othercit>Greenfield et al. &#x201c;Flex-Ajax Bridge&#x201d; Jul. 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00091">
<othercit>Chambers et. al. &#x201c;Apollo&#x201d; 2005.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00092">
<othercit>Adobe Inc. et. al. Adobe labs.com &#x201c;Apollo&#x201d; Oct. 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00093">
<othercit>Adobe et. al. Oh, Apollo (technical overview and 21 questions) Oct. 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00094">
<othercit>Lynch, Kevin et al. The Origins of Apollo Mar. 2007.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00095">
<othercit>Ryan Stewart et al. &#x201c;Unofficial Apollo FAQ&#x201d;, http://web.archive.org/web/20060512020438/http://www/digitalbackcountry.com/index.com ; May 12, 2006.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00096">
<othercit>&#x201c;About the Browser&#x201d;, downloaded from the internet on Oct. 10, 2006 at http://msdn.microsoft.com/workshop/browser/overview/Overview.asp?frame=true, 2006, 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00097">
<othercit>Aitken, &#x201c;An Introductory Look at Windows Presentation Foundation: Part 1&#x201d;, downloaded from the internet on Sep. 6, 2006 at http://www.devsource.com/article2/0,1895,1965448,00.asp, May 21, 2006, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00098">
<othercit>&#x201c;An Introductory Look at Windows Presentation Foundation: Part 1, Getting the Beta Tools&#x201d;, downloaded from the internet on Sep. 6, 2006 at http://www.devsource.com/article2/0,1895,1965449,00.asp, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00099">
<othercit>&#x201c;An Introductory Look at Windows Presentation Foundation: Part 1, Layout Containers&#x201d;, downloaded from the internet on Sep. 6, 2006 at http://www.devsource.com/article2/0,1895,1965450,00.asp, 4 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00100">
<othercit>Bojanic, &#x201c;The Joy of XUL&#x201d;, downloaded from the internet on Oct. 16, 2006 at http://developer.mozilla.org/en/docs/The<sub>&#x2014;</sub>Joy<sub>&#x2014;</sub>of<sub>&#x2014;</sub>XUL, 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00101">
<othercit>Roberts, &#x201c;Take Total Control of Internet Explorer with Advanced Hosting Interfaces&#x201d;, downloaded from the internet on Oct. 10, 2006 at http:/www.microsoft.com/mind/1098/advhost/advhost.asp, Oct. 1998, 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00102">
<othercit>&#x201c;Windows Presentation Foundation&#x201d;, downloaded from the internet on Oct. 16, 2006 at http://msdn2.microsoft.com/en-us/netframework/aa663326(d=printer).aspx, 2006, 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00103">
<othercit>&#x201c;XML User Interface Language (XUL) Project&#x201d;, downloaded from the internet on Oct. 16, 2006 at http://mozilla.org/projects/xul, 1 page.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00104">
<othercit>Ajaxian.com, &#x201c;Adobe Announces a Flex/Ajax Bridge&#x201d;, (Mar. 7, 2006), [retrieved from http://ajaxian.com/archives/adobe-announces-a-flex-ajax-bridge on Nov. 1, 2011] 5 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00105">
<othercit>Berkovitz, J., &#x201c;An ActionScript interpreter, courtesy of JavaScript and Apollo&#x201d;, (Apr. 12, 2007), [retrieved from http://joeberkovitz.com/blog/2007/04/12/an-actionscript-interpreter-courtesy-of-javascript-and-apollo/ on Nov. 1, 2011] 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00106">
<othercit>Chambers, M.; Dixon, R.; Swartz, J., &#x201c;Apollo for Adobe Flex Developers: Pocket Guide&#x201d;, (Mar. 2007), O'Reilly Media, Inc., 139 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00107">
<othercit>Flanagan, D., &#x201c;JavaScript: The Definitive Guide&#x201d;, 5th Ed. (Aug. 2006), O'Reilly Media, Inc., pp. 263-264, 582-591 (14 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00108">
<othercit>Lott, J.; Schall, D.; Peters, K., &#x201c;Action Script 3.0 Cookbook&#x201d;, (Oct. 11, 2006), O'Reilly Media, Inc., pp. 494-498 [retrieved from http://academic.safaribooksonline.com/book/programming/actionscript/0596526954 on Oct. 27, 2011] 14 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00109">
<othercit>Ralston, A.; Reilly, E.D.; Hemmendinger, D., &#x201c;Encyclopedia of Computer Science&#x201d;, 4th Ed. (2000), Nature Publishing Group, pp. 1391-1396, 1414-1417 (12 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00110">
<othercit>Taft, D., &#x201c;Adobe Bridges Flash, Flex with AJAX&#x201d;, (Mar. 8, 2006), [retrieved from http://www.eweek.com/index2.php?option=content&#x26;task=view&#x26;id=898&#x26;pop= 1 &#x26;hide<sub>&#x2014;</sub>ads= 1 &#x26;page=O&#x26;hide..Js= 1 &#x26;catid= 13 on Nov. 1, 2011] 2 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00111">
<othercit>&#x201c;Advisor Action&#x201d;, U.S. Appl. No. 11/585,661, (Mar. 9, 2009), 3 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00112">
<othercit>&#x201c;Final Office Action&#x201d;, U.S. Appl. No. 11/585,661, (Dec. 18, 2008),11 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00113">
<othercit>&#x201c;Non-Final Office Action&#x201d;, U.S. Appl. No. 11/585,661, (Jun. 26, 2008), 9 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00114">
<othercit>&#x201c;Notice of Allowance&#x201d;, U.S. Appl. No. 11/585,661, (Jun. 26, 2009), 6 pages.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>715760</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715234</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715237</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715239</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715242</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>4</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>11585661</doc-number>
<date>20061023</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>7614003</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12573511</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20100023884</doc-number>
<kind>A1</kind>
<date>20100128</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Brichford</last-name>
<first-name>Christopher</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Rowe</last-name>
<first-name>Edward R. W.</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Lynch</last-name>
<first-name>Kevin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Malasky</last-name>
<first-name>Ethan</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Brichford</last-name>
<first-name>Christopher</first-name>
<address>
<city>Menlo Park</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Rowe</last-name>
<first-name>Edward R. W.</first-name>
<address>
<city>Sunnyvale</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Lynch</last-name>
<first-name>Kevin</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Malasky</last-name>
<first-name>Ethan</first-name>
<address>
<city>San Francisco</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Wolfe-SBMC</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Adobe Systems Incorporated</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Theriault</last-name>
<first-name>Steven B</first-name>
<department>2179</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">In general, one aspect of the subject matter described in this specification can be embodied in a method that includes rendering Hyper Text Markup Language (HTML) content, in an HTML rendering engine, to primitives of a vector graphics rendering engine; rendering the primitives, in the vector graphics rendering engine, to provide a user interface; receiving an input event via the user interface; determining, in the HTML rendering engine, a change in appearance for the user interface based on the input event; and updating at least one of the primitives for rendering by the vector graphics rendering engine in accordance with the change in appearance to update the user interface.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="99.57mm" wi="212.43mm" file="US08627216-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="217.17mm" wi="159.77mm" orientation="landscape" file="US08627216-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="226.74mm" wi="120.65mm" file="US08627216-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="203.88mm" wi="118.36mm" file="US08627216-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of and claims priority under 35 U.S.C. &#xa7;120 to U.S. patent application Ser. No. 11/585,661, entitled &#x201c;RENDERING HYPERTEXT MARKUP LANGUAGE CONTENT,&#x201d; filed on Oct. 23, 2006 now U.S. Pat. No. 7,614,003, the entire contents of which are incorporated herein by reference. This application is related to U.S. patent application Ser. No. 11/512,764, entitled SOFTWARE INSTALLATION AND SUPPORT, to O. Goldman et al., which is hereby incorporated by reference.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">The present disclosure relates to rendering hypertext markup language (HTML) content. HTML is an authoring language commonly used to create documents on the World Wide Web. HTML defines the structure and layout of a Web document using a variety of tags and attributes, which an HTML rendering engine interprets when processing HTML content. Typically, a Web browser employs an HTML rendering engine to render HTML content to a display device. In other cases, HTML content has been rendered statically to another format before display to a user, such as using the Web Capture feature in ADOBE A<smallcaps>CROBAT</smallcaps>&#xae; software provided by Adobe Systems Incorporated of San Jose, Calif.</p>
<p id="p-0004" num="0003">In addition, the HTML rendering engine typically uses a document object model (DOM) when rendering HTML content, such as by using the DOM when rendering dynamic HTML (DHTML), to dynamically change the appearance of Web pages after they have been downloaded to the Web browser. The DOM maintains an internal document representation and implements the DOM application program interface (API). JavaScript embedded in an HTML document can directly access the current document through the DOM API, and make changes or read the content.</p>
<p id="p-0005" num="0004">A virtual machine (VM) is a self-contained operating environment that behaves as if it is a separate computer. For example, J<smallcaps>AVA</smallcaps>&#xae; applets run in a J<smallcaps>AVA</smallcaps>&#xae; Virtual Machine (JVM) (available from Sun Microsystems, Inc.), which has been implemented for many different computer platforms. The JVM provides a runtime environment and Java interpreter for most operating systems, including W<smallcaps>INDOWS</smallcaps>&#xae; OS, M<smallcaps>AC</smallcaps>&#xae; OS, AND L<smallcaps>INUX</smallcaps>&#xae; OS. Moreover, the JVM has been implemented as a Web browser plug-in.</p>
<p id="p-0006" num="0005">Flash&#xae; Player (available from Adobe Systems Incorporated) is another virtual machine, which is used to run, or parse, Flash&#xae; files including ActionScript or Shockwave Flash (SWF). The Flash&#xae; Player has also been implemented as a Web browser plug-in. Thus, HTML content that is rendered by a Web browser can include SWF data.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0007" num="0006">This specification describes technologies relating to rendering hypertext markup language content. In general, one aspect of the subject matter described in this specification can be embodied in a method that includes rendering Hyper Text Markup Language (HTML) content, in an HTML rendering engine, to primitives of a vector graphics rendering engine; rendering the primitives, in the vector graphics rendering engine, to provide a user interface; receiving an input event via the user interface; determining, in the HTML rendering engine, a change in appearance for the user interface based on the input event; and updating at least one of the primitives for rendering by the vector graphics rendering engine in accordance with the change in appearance to update the user interface. Other embodiments of this aspect include corresponding systems, apparatus, and computer program products (a computer program product, encoded on a computer-readable medium, operable to cause data processing apparatus to perform operations of the method).</p>
<p id="p-0008" num="0007">These and other embodiments can optionally include one or more of the following features. The determining can include determining that the change in appearance affects only a portion of the user interface, and the updating can include updating only primitives that intersect the portion of the user interface affected by the change. The method can further include bridging between a first script engine used by the HTML rendering engine and a second script engine used by the vector graphics rendering engine. The bridging can include generating objects for the first script engine that represent objects in the second script engine and generating objects for the second script engine that represent objects in the first script engine.</p>
<p id="p-0009" num="0008">The method can further include causing the first script engine to employ a garbage collector of the second script engine. The method can include maintaining security model integrity by cross checking security context information for objects of the first and second script engines. Moreover, the method can include maintaining security model integrity by cross checking domain information for the HTML content and native content of the vector graphics rendering engine.</p>
<p id="p-0010" num="0009">In addition, another aspect of the subject matter described in this specification can be embodied in a system that includes an input device; a display device; a computer platform including an operating system and a virtual machine, the virtual machine configured to create a virtualized environment between the computer platform and a software application programmed to operate on the virtual machine; and the virtual machine operable to generate a user interface for the software application, using the input device and the display device, by rendering and dynamically updating interactive HTML content through a vector graphics rendering engine. The virtual machine can include an HTML rendering engine configured to render the interactive HTML content to primitives of the vector graphics rendering engine, and the virtual machine can include the vector graphics rendering engine configured to render the primitives to provide the user interface.</p>
<p id="p-0011" num="0010">The HTML rendering engine can be configured to retain information regarding the rendered primitives, to determine that a change in appearance for the user interface, caused by an input event, affects only a portion of the user interface, and to update only primitives that intersect the portion of the user interface affected by the change. The virtual machine can include a first script engine used by the HTML rendering engine and a second script engine used by the vector graphics rendering engine, and the virtual machine can be configured to employ bridging objects between the first script engine and the second script engine.</p>
<p id="p-0012" num="0011">The first script engine can be configured to employ a garbage collector of the second script engine, and the virtual machine can be configured to cross check security context information for objects of the first and second script engines to maintain security model integrity. The virtual machine can be configured to cross check domain information for the interactive HTML content and native content of the vector graphics rendering engine to maintain security model integrity. Moreover, the computer platform, the input device and the display device can be one personal computer.</p>
<p id="p-0013" num="0012">Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. A software platform can support HTML-based desktop applications that are independent of the underlying computer platform (hardware/firmware+operating system). The HTML-based desktop applications can function within the operating system just as normal desktop applications (e.g., with install packages, desktop icons, and uninstall option through an add-remove programs utility of the operating system). The desktop applications can employ HTML to generate their user interfaces, including potentially generating the entire user interface for an application using HTML, generating a portion of the user interface for an application using HTML, or embedding a Web browser type element within the user interface of an application.</p>
<p id="p-0014" num="0013">The software platform can employ a cross-platform runtime that uses a vector graphics rendering engine to display the graphical user interface of the desktop applications. The runtime can support other Web based and cross-platform technologies in addition to HTML, such as a scripting language (e.g., JavaScript and ActionScript), a cross-platform document format (e.g., Portable Document Format (PDF)), and cross-platform interpreted code (e.g., Flash&#xae; code). Thus, the runtime can allow the use of Web technologies to create desktop applications, and the large number of software engineers and designers that are familiar with Web technologies and can create Web sites and Web applications, can also create desktop applications that fully control their appearance and run on a computer that is not connected to a network. Moreover, the system can manage privileges granted to such applications, where the privilege level granted to the application can be higher than privileges granted to content loaded by the application (e.g., the application may be granted access to local disk, while HTML loaded from a remote web site may be denied such access), and users or system administrators can be allowed to configure such privilege levels as desired.</p>
<p id="p-0015" num="0014">The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the invention will become apparent from the description, the drawings, and the claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> shows an example system including a virtual machine serving as a software platform for application software.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. 2</figref> shows example components of a hypertext markup language engine and a vector graphics engine that interact to present a user interface.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 3</figref> shows an example process of rendering hypertext markup language content through a vector graphics rendering engine.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 4</figref> shows an example process of bridging between a first script engine and a second script engine.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 1</figref> shows an example system including a virtual machine serving as a software platform for application software. A computer platform <b>100</b> is a data processing apparatus, with appropriate hardware, that includes a particular operating system (OS) <b>120</b> for that data processing apparatus (e.g., W<smallcaps>INDOWS</smallcaps>&#xae; OS, M<smallcaps>AC</smallcaps>&#xae; OS, or L<smallcaps>INUX</smallcaps>&#xae; OS). The computer platform <b>100</b> includes virtual machine <b>110</b>. The virtual machine <b>110</b> is a runtime environment that provides software services for processes or programs while a computer is running. The virtual machine <b>110</b> can include (or be considered one and the same with) a runtime library, which is a collection of utility functions that support a program while it is running, often working with the OS <b>120</b> to provide facilities. The virtual machine <b>110</b> can be client-based software that runs Flash&#xae; applications, supports vector and raster graphics, bidirectional streaming of audio and video and one or more scripting languages (e.g., JavaScript and ActionScript). Moreover, the virtual machine <b>110</b> can deeply integrate Flash&#xae; applications with the OS, providing services such as file system access, multiple windows, running in the background, etc.</p>
<p id="p-0021" num="0020">An application <b>150</b> can rely on the runtime library to operate; for example, an application <b>150</b> can be a Flash&#xae; application that uses SWF and runs on a computer using a client-based runtime library that runs Flash&#xae; applications separately from a web browser, whether online or offline. As used herein, an &#x201c;application&#x201d; refers to a computer program that the user perceives as a distinct computer tool used for a defined purpose. While the application <b>150</b> can be dependent on the virtual machine <b>110</b> to operate on the computer platform <b>100</b>, the application <b>150</b> can also control its appearance and can run on the computer platform <b>100</b> even when not connected to a network. Thus, the application <b>150</b> can be viewed as a desktop application within the computer platform <b>100</b>, even though the application <b>150</b> can run on the virtual machine <b>110</b> and thereby be platform independent.</p>
<p id="p-0022" num="0021">The application <b>150</b> includes hyptertext markup language (HTML) content <b>155</b> that is used in generating a user interface <b>180</b> for the application <b>150</b>. Other code content can also be used to generate the user interface <b>180</b> by the application <b>150</b>. For example, the application <b>150</b> can include SWF code used in generating the user interface <b>180</b>, and the HTML content <b>155</b> can be included with the SWF code.</p>
<p id="p-0023" num="0022">The virtual machine <b>110</b> can include an HTML rendering engine <b>130</b> and a vector graphics rendering engine <b>140</b>, which interact to present the user interface <b>180</b> on a display device <b>160</b>, and to update the user interface <b>180</b> based on input events received via the user interface <b>180</b> in combination with an input device <b>170</b>. The operating system <b>120</b> can receive input events from the input device <b>170</b> and pass these input events to the virtual machine <b>110</b>. The virtual machine <b>110</b> can give those events to the code that includes the vector graphics rendering engine <b>140</b>, which can in turn pass those events to the HTML rendering engine <b>130</b> as appropriate.</p>
<p id="p-0024" num="0023">The display device <b>160</b> can include a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to a user, and the input device <b>170</b> can include a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the system. It should be appreciated that the computer platform <b>100</b>, the display device <b>160</b> and the input device <b>170</b> can together be included in a single system or device, such as a personal computer, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few.</p>
<p id="p-0025" num="0024">The HTML content <b>155</b> can be made interactive for a user in a variety of manners. The HTML content <b>155</b> can include DHTML, can include script (e.g., JavaScript), can include CSS (Cascading Style Sheets), or can include some combination of them. The HTML engine <b>130</b> can render the interactive HTML content <b>155</b> to primitives of the vector graphics engine <b>140</b>. These primitives can include vector graphics (e.g., rectangles, ovals and fonts) and also raster graphics (e.g., a bitmap or Portable Network Graphics (PNG) image). As will be appreciated, raster graphics are distinct from vector graphics in that vector graphics represent an image using geometric objects such as curves and polygons, whereas raster graphics represent an image using a grid of pixels. Nonetheless, the primitives supported by the vector graphics rendering engine <b>140</b> can include both vector graphics and raster graphics.</p>
<p id="p-0026" num="0025">The HTML engine <b>130</b> can also forward requests for external resources (images, frames, style sheets, scripts, etc.) to the vector graphics engine <b>140</b> or a related component of the virtual machine <b>110</b>. This can be done to address security issues, which are addressed in detail below, and also to improve the end user's experience. For example, when the application <b>150</b> connects to a secure site on a network (e.g. the Internet), and the user of the application <b>150</b> typically will have to type in a password. If the HTML engine <b>130</b> connects to the network in a different manner than the vector graphics engine <b>140</b>, the user might be forced to type in her password twice to get access to both HTML content and native content of the vector graphics engine <b>140</b>. However, by forwarding resource requests from the HTML engine <b>130</b> into the vector graphics engine <b>140</b> (or the related component), the entered password can be tracked and the user need only type in her password once.</p>
<p id="p-0027" num="0026">The virtual machine <b>110</b> can employ a managed environment in which privileges granted to the application <b>150</b> can be configured by a user or by a system administrator on a per-application basis. For example Application A running as User U may not be allowed to read or write files in &#x201c;C:\Program Files&#x201d;, but Application B running as User U may be allowed to read files in &#x201c;C:\Program Files&#x201d;. While these applications can run with higher privilege than web-based applications (e.g., they can read and write to the local disk), they can easily load content that should be prevented from using that high privilege. For example, a desktop application written in HTML can open a new window and load www-cnn-com into that new window. In such a case, the desktop application's HTML code can be permitted to read and write to local disk, while the HTML code from www-cnn-com can be prevented from reading or writing to local disk. This can be the default configuration for the virtual machine <b>110</b>, but this configuration can also be changed, either by a user or system administrator, or by a mechanism through which code having a particular privilege level can confer that privilege level to other code (that otherwise does not have that privilege level) at runtime.</p>
<p id="p-0028" num="0027">In addition, the vector graphics rendering engine <b>140</b> can employ a retained graphics mode in which the primitives that are rendered to a frame are kept track of for the lifetime of the frame. When the frame changes, the vector graphics rendering engine <b>140</b> need only modify and update the primitives that have a new state. For example, the vector graphics rendering engine <b>140</b> can be a Flash&#xae; rendering engine.</p>
<p id="p-0029" num="0028">The retained graphics mode can be extended to the HTML rendering engine <b>130</b> such that the HTML engine <b>130</b> keeps track of the correlation between the HTML content <b>155</b> and the primitives rendered to the vector graphics rendering engine <b>140</b>. When changes are then made in the HTML elements of the user interface <b>180</b> (e.g., because the mouse moved over a roll-over element or a menu element pops out), the HTML engine <b>130</b> need only regenerate and forward to the vector graphics engine <b>140</b> the corresponding primitives that are affected by the change. Thus, only those primitives that intersect the portion of the user interface affected by the change need be updated by the HTML rendering engine <b>130</b>.</p>
<p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. 2</figref> shows example components of an HTML engine <b>210</b> and a vector graphics engine <b>230</b> that interact to present a user interface <b>270</b>. The HTML engine <b>210</b> includes a DOM <b>220</b> for a given set of HTML content, which can include a script of a first script type (e.g., JavaScript). The vector graphics engine <b>230</b> includes an instance of a scripting object model <b>240</b> for a second script type (e.g., ActionScript). The scripting object model <b>240</b> includes a display control <b>260</b> that is used to generate the user interface <b>270</b>. The display control <b>260</b> can be an instance of a display class in the scripting object model <b>240</b>, which provides a basic display list building block: a display list node that can display graphics and can also contain children.</p>
<p id="p-0031" num="0030">The display control <b>260</b> can be extended by an HTML control <b>250</b> that interfaces with the DOM <b>220</b>. For example, an HTML class can extend a display class and provide an application program interface (API) to the HTML functionality in the virtual machine <b>110</b>. As an extension of the display control class, the HTML control class allows the HTML control <b>250</b> to be added to the display list once it is constructed as the child of any other display control <b>260</b> that can have children.</p>
<p id="p-0032" num="0031">The following description addresses the details for allowing a user of the HTML control class (e.g., the desktop application programmer) to implement various behaviors within the context of this class based scheme. However, it should be appreciated that other implementations are also possible. For example, an events based scheme can be employed. Events can have advantages in that it is generally simpler to hook up event handlers, and events can be handled by more than one listener. However, returning state to the dispatcher of an event using event handlers can raise issues, since returning state in such implementations typically involves communicating a Boolean that indicates whether or not the dispatcher should execute some default logic after dispatching the event.</p>
<p id="p-0033" num="0032">An interface based scheme can also be employed. Such a scheme can have advantages over an events based scheme since interfaces are generally more type safe than events, can readily return state, and only one handler is invoked (compared to events where any number of handlers can be registered for an event). However, an interface based scheme can require specification of a new class, while also potentially compromising backward compatibility in the event that additional methods are added to the interface at a later time.</p>
<p id="p-0034" num="0033">In contrast, using subclassing, the needed behaviors can be implemented as overrideable methods on the HTML control class described herein. Allowing users of the HTML control to subclass the HTML control and override some its methods can provide most, if not all of the benefits of having an interface to implement the needed behaviors. If new behaviors are to be implemented by users of the HTML control in the future, existing application code will not necessarily need to be changed. In fact, all of the behaviors of the window object and of default DOM event handlers can be implemented as overrideable methods on the HTML control.</p>
<p id="p-0035" num="0034">The HTML control can allow first script type code (e.g., JavaScript) in the HTML control to hold references to, call methods on, and access properties of objects of the second script type. The HTML control can also allow second script type code (e.g., ActionScript) to hold references to, call methods on, and access properties of objects of the first script type code. For example, ActionScript can access the window object of the JavaScript running in the HTML control via a windowObject property; the ActionScript can then add properties to the window object whose values are references to ActionScript objects (including method closures).</p>
<p id="p-0036" num="0035">The virtual machine's APIs exposed into the first script type object model can be second script type function closures that are bridged into the first script engine. Second script type code can also use the windowObject property to access the first script type object for the top level window object in the HTML contained by the HTML control. Second script type code can then set additional properties on the window object. Those additional properties can have values that are function closures that can be called from the first script type code. Those function closures can return second script type objects that get bridged into the first script engine. Script of the second type can instantiate script objects of the first type by finding the constructor for a first script type object in the window object of the HTML control.</p>
<p id="p-0037" num="0036">The second type script can access the window object at anytime, however the HTML control's reference to the window object can be released, and a new window can be recreated shortly after or during any method that loads new content into the HTML control. A &#x201c;complete&#x201d; event can signal that all load-time processing of the HTML is complete and can also be a good time for second type script to manipulate the first type script object model. Moreover, anytime an HTML window object is referenced, a call can be made to a Security Manager to ensure the caller has permission to access the object model of the HTML window in question. Further example details of such bridging between a first script engine and a second script engine, while maintaining security model integrity, are described below in connection with <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. 3</figref> shows an example process of rendering hypertext markup language content through a vector graphics rendering engine. HTML content can be rendered <b>310</b>, in an HTML rendering engine, to primitives of a vector graphics rendering engine. This can involve rendering the HTML content to one or more raster images when raster graphics are included in the primitives of the vector graphics rendering engine. This can involve rendering the HTML content to vector graphics, which can result in crisper views and improved performance (e.g., for any video embedded inside the HTML content).</p>
<p id="p-0039" num="0038">The primitives can be rendered <b>320</b>, in the vector graphics rendering engine, to provide a user interface (UI). For example, the HTML control described above can be by default an embedded browser whose functionality is modeled after an HTML IFRAME element. An embedded browser is generally a superset of the functionality used to implement a container to render HTML as part of the UI of an application. Thus, the HTML control can be used to render an HTML UI through the vector graphics engine without subclassing the HTML control. If the default implementation of any of the HTML control's behaviors are not desired, then the HTML for the UI can be written not to exercise that behavior. For example, if the developer does not want the user to be able to navigate the control, then the developer can choose to write the HTML such that it contains no external links and no JavaScript calls to window.location, window.history.go, etc. If the developer wants more control, she can subclass the HTML control and override the methods that implement various behaviors (such as what happens when a link is clicked on).</p>
<p id="p-0040" num="0039">An input event can be received <b>330</b> via the user interface. A change in appearance for the user interface can be determined <b>340</b>, in the HTML rendering engine, based on the input event. At least one of the primitives can be updated <b>350</b> for rendering by the vector graphics rendering engine in accordance with the change in appearance to update the user interface. The determining can involve determining that the change in appearance affects only a portion of the user interface, and the updating can include updating only primitives that intersect the portion of the user interface affected by the change (e.g., only the vector graphic(s) affected by the change, or only the raster graphic region(s) of the user interface affected by the change).</p>
<p id="p-0041" num="0040">The updating can be designed to regenerated as little of the user interface as possible to improve system performance. For example, for each primitive (e.g., rectangle, oval, image, etc.) sent to the vector graphics rendering engine by the HTML rendering engine, the HTML rendering engine can store a reference that is maintained until the user navigates away from the HTML content; and while changes are made to the user interface within the context of the HTML content, only the primitives affected by those changes need be updated.</p>
<p id="p-0042" num="0041">For example, for every DOM node of the HTML content, a pointer can be attached to identify the one or more primitives that the given node generates. When the cursor in the UI moves on top of a UI element corresponding to a given DOM node (e.g., a DOM node that corresponds to a menu item), that DOM node receives an event. The DOM node can include JavaScript that effects a color change in response to that event, in which case, the primitive(s) that represent the given node can be located, the color updated, and the new primitive(s) can be sent to the vector graphics engine for rendering to the display. Alternatively, the UI can be implemented using a single primitive (a single raster image), which is then updated for any change in the UI.</p>
<p id="p-0043" num="0042">In the context of the HTML control described above in connection with <figref idref="DRAWINGS">FIG. 2</figref>, the HTML control can defer the implementation of certain behaviors to the user of the HTML control. These behaviors can be either default event handlers for DOM events or implementations of properties and methods of the JavaScript object model. Users of the HTML control can implement these behaviors by subclassing the HTML control and overriding second type script methods (e.g., ActionScript methods) that correspond to the behaviors they want to control.</p>
<p id="p-0044" num="0043">When JavaScript in an HTML document does not handle a mouse or keyboard event, that event can be handled by a default event handler in the HTML engine. For things like a link, that default action may be to navigate to a new URL (Universal Resource Locator). The HTML engine used by the HTML control can decide when default actions are invoked. In the case of clicking on a link, the JavaScript onClick handlers can execute before the default handler executes, and the JavaScript onClick handlers can prevent the default hander from being invoked. If the HTML engine invokes the default handler, then a second type script method (e.g., an ActionScript method) on the HTML control can be invoked by the HTML control.</p>
<p id="p-0045" num="0044">Similarly, if mouse down and mouse move on an image are not handled by JavaScript, the embedded browser can tell the virtual machine's drag manager to start a drag loop such that the image can be dragged on to the desktop or another application that accepts images. The HTML control can allow these default behaviors to be implemented in the second type scripting language (e.g., ActionScript) by the user of the HTML control.</p>
<p id="p-0046" num="0045">When the default handlers have been invoked, the event can have already been through a bubble phase inside of the HTML content. By default all bubbling events can bubble out of the HTML control subject to security checks, such as described further below. A bubbling event can bubble through each display list object, but the event handlers on each display list object need only be invoked if those handlers have access to the object model of the target of the event. If a bubbling event bubbles out, the default behavior need not execute until the event has bubbled to the top of the display list. However, the default behavior handlers are not called if a preventDefault is called on the event object.</p>
<p id="p-0047" num="0046">When the HTML Control receives an event during the capture phase, the HTML control can forward the event to the HTML DOM. At that point the HTML engine can find the DOM that contains the target of the event inside of the HTML control (i.e., the target DOM). The target DOM can be the DOM of an IFRAME element or a FRAME element. The HTML engine can then execute the capture, target, and bubble phases through the target DOM. The target phase can result in the event being forwarded to another DisplayObject tree in which the capture, target, and bubble phases are run. After the bubble phase in the target DOM has completed the event, the capture phase of the event in the display list that contains the HTMLControl can be complete. If the event bubbled out of the target DOM in the HTML control, the HTML control can then allow the event to bubble out of the HTML control and up the display list that contains the HTML control. Note that HTML does not generally allow JavaScript to capture or bubble events targeted at an element in an IFRAME element or FRAME element.</p>
<p id="p-0048" num="0047">Events (error events, abort events, and user defined events) originating in the HTML control can bubble out of the HTML control if they bubble through the HTML DOM. If a user of the HTML control never wants a certain type of event to bubble out of the HTML control, she can put the HTML control in a container that prevents events of that type from bubbling out of that container.</p>
<p id="p-0049" num="0048">When HTML is the root content of a desktop application that relies on the virtual machine, the runtime can load preexisting code (e.g., a pre-canned SWF) that is part of the runtime. This code can instantiate a subclass of the HTML control that implements windowOpen, windowMoveTo, windowResizeTo, and windowClose. These methods can be implemented to open a new window, move the window, and resize the window. This code can also enable the injection of all runtime APIs into the first script type (e.g., JavaScript) object model. The runtime APIs can be added to object modules of all IFRAME and FRAME elements that have the same origin domain as the root HTML file. The preexisting code can be assigned to the same Security Domain as the root HTML content. When first type script (e.g., JavaScript) in any frame invokes a runtime method, the runtime method can execute with least privilege of any first type script (e.g., JavaScript) or second type script (e.g., ActionScript) code on the stack. The runtime method itself can be in the Security Context of the runtime.</p>
<p id="p-0050" num="0049">Security model integrity can be maintained <b>360</b> by cross checking domain information for the HTML content and native content of the vector graphics rendering engine. When implementing the ability to embed HTML content in native content of the vector graphics rendering engine (e.g. HTML embedded in Flash&#xae; content), the system should guard against screen shot types of attacks, where the author of the native content can get access to the embedded HTML content, even when not appropriate. This can be prevented by recording the domain of any visible resource referenced by the HTML (e.g., images, frames, the HTML itself, etc.). When the native content attempts to take a screen shot of the HTML, the runtime can check to make sure that the native content came from the same domain as all of the visible resources for the referenced HTML. If the native content comes from a different domain than any of the visible resources, then the screen shot operation can be prevented. Alternatively, the domain of all resources associated with the HTML can be recorded, including non-visible resources (e.g., external scripts, external style sheets, etc.).</p>
<p id="p-0051" num="0050">Furthermore, the HTML engine can have an HTML security model that is implemented on top of the Security Manager for the virtual machine. Every image (img tags, background images, CSS background images, etc.) and HTML file (including IFRAMES and FRAMES) can have an assigned Security Context. JavaSript code can be assigned a Code Context that is in the same Security Context as the HTML file that included its definition (either inline or via an external reference). Whenever the JavaScript engine calls a JavaScript function in a different security context, the security context stack can be pushed.</p>
<p id="p-0052" num="0051">Thus, the JavaScript execution can be fully integrated with the security model employed by the virtual machine. Same origin checks can be implemented in terms of the virtual machine's security model. The security checks in the HTML engine for cross frame scripting and XMLHTTPRequest can be modified to thunk to the virtual machine's security manager. The XMLHTTPRequest implementation can be modified to use the virtual machine's security manager to decide whether or not to allow a request to a specified URL to proceed. When JavaScript sets window.domain, the security manager can also be notified.</p>
<p id="p-0053" num="0052">When any of the second script type overrideable methods on the HTML control that implement parts of the first script type object model are called, the method can be made by default to run with the lowest privilege of any script code on the call stack. Note however, that the second type script implementing an overrideable method can also choose to use the virtual machine's Security Manager to escalate its privilege to the level of the Security Context of which that method is a part. IFRAMES and FRAMES can have security context assigned to them based on their URL and the domain of that URL.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 4</figref> shows an example process of bridging <b>400</b> between a first script engine (used by the HTML rendering engine) and a second script engine (used by the vector graphics rendering engine). Objects for the first script engine can be generated <b>410</b> that represent objects in the second script engine. Objects for the second script engine can be generated <b>420</b> that represent objects in the first script engine. The first script engine can be a JavaScript engine and the second script engine can be an ActionScript engine.</p>
<p id="p-0055" num="0054">For example, an ActionScript function can have one or more arguments, and for each of these arguments, a JavaScript object can be created. Then, anytime a property is requested for that JavaScript object, or a method is called on that JavaScript object, the request can be forwarded back to the ActionScript object to which it corresponds.</p>
<p id="p-0056" num="0055">Thus, a set of JavaScript objects can be created that represent all of the arguments to an ActionScript method. The system can call into the JavaScript engine to get the appropriate code and the function can be executed. As the function executes, when the function accesses a property or calls a method on an argument, this results in a transfer of control back to the ActionScript engine, where the results of those operations are obtained, wrapped with the JavaScript object(s) and handed back to the JavaScript engine. The converse operations can be performed when going from JavaScript into ActionScript. Thus, the system can use bridging objects between two different script engine, where the bridging objects represent objects in the other script engine.</p>
<p id="p-0057" num="0056">The first script engine can be caused <b>430</b> to employ a garbage collector of the second script engine. Many scripting languages are &#x201c;garbage collected&#x201d;, which means the script engine automatically identifies previously allocated memory that is no longer being used, and frees up that memory for future allocation (the garbage is collected). Typical garbage collectors operate by checking the program stack to find any memory objects that are no longer being referenced by the program, which thus indicates these memory objects are garbage to be collected. However, in the case of the use of bridging objects as described above, the two different script engines may not be able to see across the boundary spanned by the bridging objects, and thus the bridging objects may avoid being garbage collected. Note that the bridging objects can be implemented in C++ and exposed to the script engine as a script.</p>
<p id="p-0058" num="0057">To address the garbage collection issue, one of the scripting engines (e.g., the JavaScript engine) can be changed to use the other scripting engine's garbage collector. Thus, every time the first script engine wants to create a new object, rather than allocate memory directly, the first script engine can request a memory allocation from the second script engine. The second script engine can employ a &#x201c;conservative garbage collector&#x201d;, which is a garbage collector that finds references to objects by looking at all portions of the memory block allocated for an object to check for possible pointers (e.g., check every four bytes to see if it is a pointer to another object); since the objects in memory are known, the addresses are known and any potential object referencing pointer can be identified by the conservative garbage collector. By making the first script engine use a conservative garbage collector employed by the second script engine to allocate memory and to manage garbage collection, the bridging objects can be found and their memory freed up when it is no longer being used.</p>
<p id="p-0059" num="0058">A script engine can be viewed as an interpreter that, in response to input, manipulates an object graph. Rather than having two object graphs for the two respective script engines, only a single object graph need be employed. The first script engine can be configured to use the object graph of the second script engine by interacting with the second script engine, and thus, the two script engines can be efficiently and effectively integrated.</p>
<p id="p-0060" num="0059">Security model integrity can be maintained <b>440</b> by cross checking security context information for objects of the first and second script engines. The security context information can include domain information (e.g., Internet domain), transfer protocol information, and settings in the object's file. When bridging two script engines as described above, scripts of the second script type can hold references to, call methods on, and access properties of objects of the first script type, and vice versa. This can create an opening for scripting based attacks, which should be prevented.</p>
<p id="p-0061" num="0060">Initially there are two references: a first object model and a second object model. The hosting content contains a reference to the global object of the hosted content and the hosted content has a reference to the object in the hosting content's object model that represents the hosted content. All other references to object that cross the boundary between hosting and hosted content can not exist until one of the original two references is used at least once. Whenever a script engine follows one those original references, a security check can be performed. The security check can have various inputs, including the calls stack of the script attempting to use the reference, the domain of each frame of the call stack, the domain of the referenced object, system preferences, and user preferences. The security check can use these inputs to determine whether or not the script engine should allow that reference to be followed. The security check code may use all or some subset of its inputs to reach a decision. Thus, scripting based attacks can be prevented.</p>
<p id="p-0062" num="0061">Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.</p>
<p id="p-0063" num="0062">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p>
<p id="p-0064" num="0063">The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).</p>
<p id="p-0065" num="0064">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p>
<p id="p-0066" num="0065">To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback, and input from the user can be received in any form, including acoustic, speech, or tactile input.</p>
<p id="p-0067" num="0066">Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), e.g., the Internet.</p>
<p id="p-0068" num="0067">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p>
<p id="p-0069" num="0068">While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p>
<p id="p-0070" num="0069">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p>
<p id="p-0071" num="0070">Thus, particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer-implemented method comprising:
<claim-text>obtaining a function having an argument, the function corresponding to a first script engine of a first rendering engine;</claim-text>
<claim-text>creating an object in a second script engine of a second rendering engine, wherein the second script engine is of a different type than the first script engine, and the object corresponds to the argument of the function;</claim-text>
<claim-text>receiving a request with respect to the object in the second script engine;</claim-text>
<claim-text>in response to receiving the request, transferring control to the first script engine to obtain a result corresponding to the request;</claim-text>
<claim-text>receiving the result from the first script engine wrapped in the object of the second script engine;</claim-text>
<claim-text>providing information based on the result to a vector graphics rendering engine;</claim-text>
<claim-text>updating, based on the provided information, at least one primitive stored in the vector graphics rendering engine; and</claim-text>
<claim-text>rendering primitives, including the at least one updated primitive, in the vector graphics rendering engine to a display device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising checking context information corresponding to the object of the second script engine before allowing a boundary between the first script engine and the second script engine to be crossed.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the context information corresponding to the object of the second script engine comprises at least one of domain information and transfer protocol information.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising forwarding a request for an external resource from the first rendering engine to the second rendering engine.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising causing the first script engine to employ a garbage collector of the second script engine.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising employing a single object graph for the first script engine and the second script engine.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer program product, encoded on a computer-readable medium, operable to cause data processing apparatus to perform operations comprising:
<claim-text>obtaining a function having an argument, the function corresponding to a first script engine of a first rendering engine;</claim-text>
<claim-text>creating an object in a second script engine of a second rendering engine, wherein the second script engine is of a different type than the first script engine, and the object corresponds to the argument of the function;</claim-text>
<claim-text>receiving a request with respect to the object in the second script engine;</claim-text>
<claim-text>in response to receiving the request, transferring control to the first script engine to obtain a result corresponding to the request;</claim-text>
<claim-text>receiving the result from the first script engine wrapped in the object of the second script engine;</claim-text>
<claim-text>providing information based on the result to a vector graphics rendering engine;</claim-text>
<claim-text>updating, based on the provided information, at least one primitive stored in the vector graphics rendering engine; and</claim-text>
<claim-text>rendering primitives, including the at least one updated primitive, in the vector graphics rendering engine to a display device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising checking context information corresponding to the object of the second script engine before allowing a boundary between the first script engine and the second script engine to be crossed.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the context information corresponding to the object of the second script engine comprises at least one of domain information and transfer protocol information.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising forwarding a request for an external resource from the first rendering engine to the second rendering engine.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising causing the first script engine to employ a garbage collector of the second script engine.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising employing a single object graph for the first script engine and the second script engine.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A system comprising:
<claim-text>a display device;</claim-text>
<claim-text>a vector graphics rendering engine; and</claim-text>
<claim-text>a computer platform including an operating system and a runtime environment, the runtime environment configured to create a virtualized environment between the computer platform and a software application programmed to operate on the runtime environment, and generate a display interface for the software application using the display device,</claim-text>
<claim-text>wherein the runtime environment comprises a first script engine of a first rendering engine and a second script engine of a second rendering engine,</claim-text>
<claim-text>the second script engine is of a different type than the first script engine and is configured to:
<claim-text>create an object corresponding to an argument of a function in the first script engine;</claim-text>
<claim-text>receive a request with respect to the object in the second script engine; and</claim-text>
<claim-text>in response to receiving the request, transfer control to the first script engine; the first script engine is configured to:</claim-text>
<claim-text>obtain a result corresponding to the request, wherein the result is wrapped in the object of the second script engine; and</claim-text>
<claim-text>transfer the result to the second script engine; and</claim-text>
<claim-text>the second rendering engine is configured to provide information to a vector graphics rendering engine; and</claim-text>
</claim-text>
<claim-text>wherein the vector graphics rendering engine is configured to:
<claim-text>update, based on the provided information, at least one primitive stored in the vector graphics rendering engine; and</claim-text>
<claim-text>render primitives, including the at least one updated primitive, in the vector graphics rendering engine to the display device.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the runtime environment is further configured to check context information corresponding to the object of the second script engine before allowing a boundary between the first script engine and the second script engine to be crossed.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the context information corresponding to the object of the second script engine comprises at least one of domain information and transfer protocol information.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first script engine is configured to employ a garbage collector of the second script engine.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the first script engine and second script engine are configured to employ a single object graph.</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:
<claim-text>a server computing device; and</claim-text>
<claim-text>a client computing device connected to the server computing device through a communication network, the client computing device comprising the computer platform.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

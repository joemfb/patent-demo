<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08625161-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08625161</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12621614</doc-number>
<date>20091119</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1084</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>1</main-group>
<subgroup>405</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>04</class>
<subclass>N</subclass>
<main-group>1</main-group>
<subgroup>40</subgroup>
<symbol-position>L</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>358  306</main-classification>
<further-classification>358  323</further-classification>
</classification-national>
<invention-title id="d2e53">Multibit digital halftoning, indexing 2D and 3D lookup tables</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5243443</doc-number>
<kind>A</kind>
<name>Eschbach</name>
<date>19930900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  303</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5940541</doc-number>
<kind>A</kind>
<name>Donelly</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>6995873</doc-number>
<kind>B1</kind>
<name>Mitchell et al.</name>
<date>20060200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7050200</doc-number>
<kind>B2</kind>
<name>Sanger</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>7079290</doc-number>
<kind>B2</kind>
<name>Crossland et al.</name>
<date>20060700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2002/0118393</doc-number>
<kind>A1</kind>
<name>Thakur</name>
<date>20020800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>358  306</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00007">
<othercit>Ostromoukhov et al., Fast Hierarchal Importance Sampling With Blue Noise Properties, Dialog &#x26; AMC Library, vol. 23, No. 3, pp. 488-495, 2004.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>3</number-of-drawing-sheets>
<number-of-figures>3</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20110116135</doc-number>
<kind>A1</kind>
<date>20110519</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Ernst</last-name>
<first-name>Larry</first-name>
<address>
<city>Longmont</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Inoue</last-name>
<first-name>Tadanobu</first-name>
<address>
<city>Kanagawa-ken</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Stanich</last-name>
<first-name>Mikel</first-name>
<address>
<city>Longmont</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Chai W.</first-name>
<address>
<city>Hawthorne</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Ernst</last-name>
<first-name>Larry</first-name>
<address>
<city>Longmont</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Inoue</last-name>
<first-name>Tadanobu</first-name>
<address>
<city>Kanagawa-ken</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Stanich</last-name>
<first-name>Mikel</first-name>
<address>
<city>Longmont</city>
<state>CO</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Wu</last-name>
<first-name>Chai W.</first-name>
<address>
<city>Hawthorne</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Cantor Colburn LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Dougherty</last-name>
<first-name>Ann</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Haskins</last-name>
<first-name>Twyler</first-name>
<department>2672</department>
</primary-examiner>
<assistant-examiner>
<last-name>Wait</last-name>
<first-name>Christopher D</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Digital halftoning processes for producing a halftone image include, for each pixel in the image: indexing a two-dimensional look up table using a position of the pixel, identifying a threshold value for the pixel from the two-dimensional look up table, creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel, and obtaining an output value for the pixel from the three-dimensional look up table via the index. The digital halftoning processes also produce a halftone representation of the image from output values for corresponding pixels.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="96.77mm" wi="161.63mm" file="US08625161-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="184.23mm" wi="128.69mm" orientation="landscape" file="US08625161-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="215.82mm" wi="156.21mm" orientation="landscape" file="US08625161-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="115.99mm" wi="165.69mm" file="US08625161-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND</heading>
<p id="p-0002" num="0001">The present disclosure relates generally to halftoning and, in particular, to multibit digital halftoning using lookup tables.</p>
<p id="p-0003" num="0002">Halftoning refers to a process or technique in image reproduction that utilizes varying sizes of dots (and/or varying degrees of spatial separation among these dots) to simulate a continuous tone image using a single color of ink (i.e., without the use of a wide or infinite range of continuous tones) by the arrangement of halftone dots such that they appear blended to the human eye when viewed at an appropriate distance.</p>
<p id="p-0004" num="0003">Digital halftoning techniques have been developed for implementing halftone images. Digital halftoning generates a bitmap within which each monochrome picture element or pixel may be on or off, or set to ink or no ink. The bitmap corresponds bit-for-bit with an image (e.g., displayed on a computer screen or printed on paper). A digital halftone cell (whereby a cell relates to a corresponding area (size and location) of the continuous-tone input image) contains groups of monochrome pixels within the same-sized cell area.</p>
<p id="p-0005" num="0004">Currently, a widely used class of digital halftoning techniques utilize look up tables (LUTs) that produce quality halftone images, but typically require a significant amount of memory. For example, for multibit digital halftoning, a three-dimensional (3D) look up table is utilized that accommodates two-dimensional (2D) spatial data for the image and one-dimensional (1D) gray levels. The spatial 2D data potentially require entries in the order of 100,000 s, and with the number of input gray levels in the range of 8-10 bits per table entry, this results in a table with potentially millions or tens of millions of entries. In another solution, a two-dimensional (2D) look up table and a one-dimensional (1D) look up table are used to reduce the storage requirements associated with 3D look up table implementations; however, this solution lacks the flexibility of a fully three-dimensional (3D) lookup table, as the number of possible 3D look up tables far exceeds the number of possible 2D or 1D lookup tables.</p>
<p id="p-0006" num="0005">What is needed, therefore, is a way to perform digital halftoning for images that offers flexibility of implementation while minimizing the amount of storage required for the implementation.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY</heading>
<p id="p-0007" num="0006">Embodiments of the invention include methods for implementing digital halftoning for an image. A method includes, for each pixel in the image: indexing a two-dimensional look up table using a position of the pixel, identifying a threshold value for the pixel from the two-dimensional look up table, creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel, and obtaining an output value for the pixel by indexing the three-dimensional look up table via the index. The method further includes producing a halftone representation of the image from output values obtained for corresponding pixels.</p>
<p id="p-0008" num="0007">Further embodiments include a system for implementing digital halftoning of an image. The system includes a computer processing device and a halftoning engine executing on the computer processing device. The halftoning engine implements a method. For each pixel in the image, the method includes indexing a two-dimensional look up table using a position of the pixel, identifying a threshold value for the pixel from the two-dimensional look up table, creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel, and obtaining an output value for the pixel by indexing the three-dimensional look up table via the index. The method also includes producing a halftone representation of the image from output values obtained for corresponding pixels.</p>
<p id="p-0009" num="0008">Further embodiments include a computer program product for implementing digital halftoning of an image. The computer program product includes a computer readable storage medium having computer readable program code embodied therewith, the computer readable program code configured to implement a method. For each pixel in the image, the method includes indexing a two-dimensional look up table using a position of the pixel, identifying a threshold value for the pixel from the two-dimensional look up table, creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel, and obtaining an output value for the pixel by indexing the three-dimensional look up table via the index. The method also includes producing a halftone representation of the image from output values obtained for corresponding pixels.</p>
<p id="p-0010" num="0009">Other systems, methods, and/or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems, methods, and/or computer program products be included within this description, be within the scope of the present invention, and be protected by the accompanying claims.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a portion of system upon which multibit digital halftoning processes may be implemented in exemplary embodiments; and</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> is a flow diagram describing a process for implementing the multibit digital halftoning in accordance with exemplary embodiments.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating relationships between input image data, a 2D lookup table, a 3D lookup table, and output image data. A pixel position <b>303</b> of an input image is used as an index <b>306</b> into a 2D lookup table <b>309</b>. The indexed position in the 2D lookup table <b>309</b> represents a threshold value <b>312</b>. The threshold value <b>312</b>, along with pixel position <b>303</b>, is used to create an index <b>315</b> for the third dimension <b>318</b> of the 3D lookup table <b>321</b>. The pixel position <b>303</b> indexes into the first and second dimension (row and column) of the 3D lookup table <b>321</b>, while the created index <b>315</b> indexes into the third dimension <b>318</b>. The value at the indexed position of the 3D lookup table <b>321</b> is used to obtain the pixel for the output image.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<p id="p-0015" num="0014">The detailed description explains the preferred embodiments of the invention, together with advantages and features, by way of example with reference to the drawings.</p>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0016" num="0015">Methods, systems, and computer program products for implementing multibit digital halftoning are provided in exemplary embodiments. The multibit digital halftoning performs digital halftoning for images that is flexible and minimizes the amount of storage required for implementation, as compared to existing techniques. The multibit digital halftoning processes utilize a two-dimensional (2D) look up table (LUT) along with a reduced size three-dimensional (3D) look up table, thereby reducing the memory requirements associated with current 3D look up table implementations.</p>
<p id="p-0017" num="0016">Turning now to <figref idref="DRAWINGS">FIG. 1</figref>, a system <b>100</b> for implementing the exemplary multibit digital halftoning processes will now be described. In an exemplary embodiment, the system <b>100</b> includes a user system <b>102</b> executing computer instructions for performing multibit digital halftoning. User system <b>102</b> may comprise a high-speed computer-processing device, such as a mainframe computer, to manage the volume of operations governed by an entity for which the multibit digital halftoning is used. Alternatively, the user system <b>102</b> may be implemented using a general-purpose computer executing a computer program for carrying out the processes described herein. The user system <b>102</b> may be a personal computer (e.g., a lap top, a personal digital assistant) or a host attached terminal. The user system <b>102</b> includes input/output devices (e.g., keyboard, mouse, display, monitor), and may communicate with external devices, such as a scanner, printer, and/or facsimile (e.g., a printer device <b>104</b>) either directly through cabling or over a network.</p>
<p id="p-0018" num="0017">In an exemplary embodiment, the user system <b>102</b> contains internal memory <b>108</b> for storing data in support of the multibit digital halftoning. Alternatively, a separate storage device may be implemented for this purpose.</p>
<p id="p-0019" num="0018">The memory <b>108</b> includes a data repository with data relating to multibit digital halftoning, as well as other data/information desired by the entity representing the user system <b>102</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The memory <b>108</b> is logically addressable as a consolidated data source across a distributed environment that includes one or more networks <b>106</b>. Information stored in the memory <b>108</b> may be retrieved and manipulated via the user system <b>102</b>. The data repository includes one or more databases containing, e.g., look up tables (LUTs) and image files, as well as other related information. The image files store bit maps containing pixel data for corresponding images.</p>
<p id="p-0020" num="0019">The user system <b>102</b> depicted in the system of <figref idref="DRAWINGS">FIG. 1</figref> may be implemented using one or more servers operating in response to a computer program stored in a storage medium accessible by the server. The user system <b>102</b> may operate as a network server to communicate with network entities, such as scanners, printers, or other devices (e.g., printer device <b>104</b>). The user system <b>102</b> handles sending and receiving information to and from the network entities and can perform associated tasks. The user system <b>102</b> may also include a firewall to prevent unauthorized access to the user system <b>102</b> and enforce any limitations on authorized access. For instance, an administrator may have access to the entire system and have authority to modify portions of the system. A firewall may be implemented using conventional hardware and/or software as is known in the art.</p>
<p id="p-0021" num="0020">The user system <b>102</b> may also operate as an application server. The user system <b>102</b> executes one or more computer programs to provide multibit digital halftoning of images. The multibit digital halftoning processes may be integrated within an existing software application (e.g., printer driver) utilized by end users (e.g., operators of the user system <b>102</b>). Alternatively, the multibit digital halftoning processes may be implemented independent of any particular software program whereby a software application providing the multibit digital halftoning processes functions on top of one or more existing software applications. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, for purposes of illustration, the multibit digital halftoning is implemented by an application <b>112</b> (also referred to as &#x201c;halftoning engine&#x201d;) executing on the user system <b>102</b>.</p>
<p id="p-0022" num="0021">It will be understood that the multibit digital halftoning processes described in <figref idref="DRAWINGS">FIG. 1</figref> may be implemented in hardware, software, or a combination thereof.</p>
<p id="p-0023" num="0022">In an exemplary embodiment, the printer device <b>104</b> is a multibit or multitone device, which may include additional functionality such as scanning and facsimile components. The multibit or multitone printer device <b>104</b> (also referred to herein as &#x201c;printer&#x201d;) may be, e.g., an inkjet printer, a laser printer, a dot-matrix printer, a thermal printer, or an electro-photographic printer, to name a few. As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the printer <b>104</b> is in communication with the user system <b>102</b> over networks <b>106</b>; however, it will be understood that the printer <b>104</b> may be directly connected to the user system <b>102</b> via, e.g., cabling. In one exemplary embodiment, the printer <b>104</b> performs the multibit digital halftoning processes in conjunction with the user system <b>102</b> (e.g., via halftoning engine <b>112</b>). The printer <b>104</b> may be executing a multibit print engine that receives look up tables produced by the multibit digital halftoning processes described herein. The print engine may then produce the halftone images from these look up tables. These look up tables are described further herein.</p>
<p id="p-0024" num="0023">The networks <b>106</b> may be any type of known network including, but not limited to, a wide area network (WAN), a local area network (LAN), a global network (e.g., Internet), a virtual private network (VPN), and an intranet. The networks <b>106</b> may be implemented using a wireless network or any kind of physical network implementation known in the art. A user system <b>102</b> may be coupled to network entities (e.g., printer <b>104</b>) through multiple networks (e.g., intranet and Internet) so that not all network entities are coupled to the user system <b>102</b> through the same network. One or more user systems <b>102</b> may be connected to the networks <b>106</b> in a wireless fashion.</p>
<p id="p-0025" num="0024">As described above, the multibit digital halftoning processes provide a flexible solution to digital halftoning processes. The multibit digital halftoning processes facilitate the reduction of the total number of transactions (e.g., among look up tables) and may result in an overall improvement of the total system performance. In addition, this footprint reduction is suitable for utilizing hardware accelerators, such as general-purpose computing on graphics processing units (GPGPU), Cell Broadband Engine&#xae; (i.e., a microprocessor architecture jointly developed under an alliance referred to as STI consisting of Sony&#xae;, Toshiba&#xae;, and IBM&#xae;), as well as other systems having small local memories.</p>
<p id="p-0026" num="0025">Turning now to <figref idref="DRAWINGS">FIG. 2</figref>, an exemplary process for implementing digital halftoning will now be described. For purposes of illustration, it is assumed that an image subject to the exemplary halftoning processes has been scanned to, and stored in, the memory <b>108</b> of the user system <b>102</b>. In an exemplary embodiment, the halftoning engine <b>112</b> implements a two-part process as will now be described.</p>
<p id="p-0027" num="0026">At step <b>202</b>, the halftoning engine <b>112</b> identifies the position of the current pixel of the image and uses this position to index a first look up table, which is a 2D lookup table, to find a threshold value. An image is represented as a 2D array of contone (e.g., 8 bit/print element, PEL) pixels, and the position of a pixel is specified by the row and column of the pixel placement with respect to the image. The row and column may be represented by the variables &#x2018;r&#x2019; and &#x2018;c&#x2019;, respectively. A picture element (PEL) represents the smallest element of a printed image (e.g., in halftoning applications, the smallest element is a halftone cell).</p>
<p id="p-0028" num="0027">Turning back to <figref idref="DRAWINGS">FIG. 2</figref>, the threshold value may be interpreted as the median or mean of a set of gray levels used in producing halftone images. In one exemplary embodiment, a threshold array for binary halftoning is used as this threshold value, as described further herein.</p>
<p id="p-0029" num="0028">At step <b>204</b>, this threshold value, and the position value of the current pixel are used by the halftoning engine <b>112</b> to create an index. For example, in one exemplary embodiment, the index may be formed using the difference between the pixel position and the corresponding threshold value from the 2D LUT. The resulting value may be scaled by a constant factor, offset by a constant and then rounded, ceiling-ed, or floored. It will be understood by those skilled in the art that other equations for creating the index may be utilized in order to realize the exemplary embodiments of the invention.</p>
<p id="p-0030" num="0029">This index, along with the position of the current pixel, indexes a second look up table, which is a 3D lookup table. The 3D look up table is reduced in size, as compared to existing 3D look up tables, and is described further below.</p>
<p id="p-0031" num="0030">At step <b>206</b>, the halftoning engine <b>112</b> uses the second look up table (3D look up table) to obtain a multibit output value for the current pixel of the halftoned image. Thus, the halftoning engine <b>112</b> computes an index that is smaller than the range of the value of a pixel (where a pixel typically has 256 values=8 bits). Accordingly, this index will result in a reduced 3D lookup table. As indicated above, the 2D and 3D look up tables may be sent to the printer <b>104</b>, whereby the printer produces a halftone image using the tables. Alternatively, the 2D and 3D look up tables may be used by the halftoning engine <b>112</b> to produce a halftone image that is displayed on a computer screen of the user system <b>102</b>.</p>
<p id="p-0032" num="0031">At step <b>208</b>, the halftoning engine <b>112</b> determines whether there are additional pixels in the image. If so, the process returns to step <b>202</b>. Otherwise, at step <b>210</b>, the halftoning engine <b>112</b> produces a halftone representation of the image from the output values derived via steps <b>202</b>-<b>206</b>.</p>
<p id="p-0033" num="0032">Pseudocode for a program implementing the digital halftoning processes will now be described in an exemplary embodiment.</p>
<p id="p-0034" num="0033">INPUT: image, a 2D array of size r by c (where &#x2018;r&#x2019; is a row and &#x2018;c&#x2019; is a column). Each pixel of the image is denoted as IMAGE[i][j],</p>
<p id="p-0035" num="0034">INPUT: a 2D look up table of size m by n and a 3D look up table: a 3D array of size m by n by p. Each element is denoted as LUT1[i][j], LUT2[i][j][k] for the 2D LUT and 3D LUT, respectively.</p>
<p id="p-0036" num="0035">OUTPUT: halftone image: a 2D array of size r by c. Each pixel of the halftoned image is denoted by OUTIMAGE[i][j],</p>
<p id="p-0037" num="0036">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>Main loop:</entry>
</row>
<row>
<entry/>
<entry>FOR i = 1 to r</entry>
</row>
<row>
<entry/>
<entry>FOR j = 1 to c</entry>
</row>
<row>
<entry/>
<entry>i2 = i mod m</entry>
</row>
<row>
<entry/>
<entry>j2 = j mod n</entry>
</row>
<row>
<entry/>
<entry>k = IMAGE [i][j];</entry>
</row>
<row>
<entry/>
<entry>index = Round ((k &#x2212; LUT1[i2][j2])/FACTOR + p/2);</entry>
</row>
<row>
<entry/>
<entry>if (index &#x3e; p) index = p;</entry>
</row>
<row>
<entry/>
<entry>if (index &#x3c; 1) index = 1;</entry>
</row>
<row>
<entry/>
<entry>OUTIMAGE[i][j] = LUT2[i2][j2][index];</entry>
</row>
<row>
<entry/>
<entry>ENDFOR</entry>
</row>
<row>
<entry/>
<entry>ENDFOR</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0038" num="0037">As indicated above, the index to be constructed is represented as index=round(k&#x2212;LUT1[i2][j2]+p/2); however, this representation is for illustrative purposes. It will be understood that other equations may be utilized for the index, e.g., the &#x201c;round&#x201d; operation may be replaced by the &#x201c;floor&#x201d; or &#x201c;ceiling&#x201d; operation. As described above, two LUTs are used to approach the performance of a larger LUT of size m by n by d, where d is the range of the input pixels, typically d=256. Further, the constant FACTOR is optimized based on the particular look up table. The constant FACTOR may be interpreted as the spread of values to which the pixel positions are compared and is used to further reduce the size of the smaller 3D lookup table.</p>
<p id="p-0039" num="0038">When splitting a large 3D LUT into two smaller LUTs (i.e., the first and second LUTs described above), an additional calculation for the &#x201c;index&#x201d; value is provided using the first look up table (i.e., LUT1). However, this very small calculation may be executed in cache memory of the user system <b>102</b> resulting in a reduction of the number of transactions occurring between the user system <b>102</b> and the main memory <b>108</b>. The reduction of the total number of transactions may result in an overall improvement of the total system performance. In addition, this footprint reduction is suitable for utilizing hardware accelerators, as well as other systems having small local memories.</p>
<p id="p-0040" num="0039">Pseudocode for generating the first look up table and the second look up table above from a larger, existing 3D look up table will now be described in an exemplary embodiment.</p>
<p id="p-0041" num="0040">
<tables id="TABLE-US-00002" num="00002">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>INPUT: BigLUT of size m by n by k (BigLUT is the larger 3D look</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>up table to be split)</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>OUTPUT: LUT1 of size m by n and LUT2 of size m by n by p</entry>
</row>
<row>
<entry/>
<entry>FOR i = 1 to m</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>FOR j = 1 to n</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0042" num="0041">Take the k values BigLUT(i,j,1), BigLUT(i,j,2), . . . , BigLUT(i,j,k) and find an index r such that BigLUT(i,j,r) is closes to the mean (or median) of these values and assign r to LUT1(i,j);</p>
<p id="p-0043" num="0042">
<tables id="TABLE-US-00003" num="00003">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<thead>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
<entry>FOR q = 1 to p</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="56pt" align="left"/>
<colspec colname="1" colwidth="161pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>index = LUT1(i,j) + FACTOR * (q &#x2212; 1 &#x2212; p/2);</entry>
</row>
<row>
<entry/>
<entry>IF index is less than 1 or larger than k, THEN set</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="left"/>
<tbody valign="top">
<row>
<entry>index to 1 or k respectively. ENDIF</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="42pt" align="left"/>
<colspec colname="1" colwidth="175pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>END</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="28pt" align="left"/>
<colspec colname="1" colwidth="189pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>END</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="offset" colwidth="14pt" align="left"/>
<colspec colname="1" colwidth="203pt" align="left"/>
<tbody valign="top">
<row>
<entry/>
<entry>END</entry>
</row>
<row>
<entry/>
<entry namest="offset" nameend="1" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0044" num="0043">As indicated above, a threshold array for binary halftoning may be used as the threshold value in step <b>202</b>. The first look up table (LUT1) may be implemented in a similar manner as that known for use in binary halftoning. For example, a threshold array halftone result where the threshold level is determined to limit the output to black or white. Thus, the index value that indexes into the second look up table (LUT2) represents the difference between the binary halftoning threshold array and the image data, which provides an extra dimension of what plane to access in the 3D look up table (LUT2) in order to access the exposure levels. The index value computed is the value representing a location (plane wise) in the first look up table (LUT1), and represents the difference between the threshold array value for that individual pixel and the image data itself.</p>
<p id="p-0045" num="0044">Also, as shown in the above-referenced pseudocode, a scaling factor is applied that scales the difference between the threshold array value and the image data into a smaller set of levels in order to access the exposure levels. A bias term (p/2) is used in the pseudocode so each one of the scaling factors could be selected. The pseudo line which states &#x201c;index=round(k&#x2212;LUT1[i2][j2])/FACTOR+p/2&#x201d; represents the difference between the image data and the threshold array value for the individual pixel at [i2][j2], which is divided by the constant FACTOR, thereby producing a scaled difference.</p>
<p id="p-0046" num="0045">As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p>
<p id="p-0047" num="0046">Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that may contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0048" num="0047">A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p>
<p id="p-0049" num="0048">Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p>
<p id="p-0050" num="0049">Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p>
<p id="p-0051" num="0050">Aspects of the present invention are described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, may be implemented by computer program instructions.</p>
<p id="p-0052" num="0051">These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that may direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0053" num="0052">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p>
<p id="p-0054" num="0053">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, may be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.</p>
<p id="p-0055" num="0054">While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims. Moreover, the use of the terms first, second, etc. do not denote any order or importance, but rather the terms first, second, etc. are used to distinguish one element from another. Furthermore, the use of the terms a, an, etc. do not denote a limitation of quantity, but rather denote the presence of at least one of the referenced item.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for implementing digital halftoning of an image, the method comprising:
<claim-text>for each pixel in the image:
<claim-text>indexing a two-dimensional look up table using a position of the pixel;</claim-text>
<claim-text>identifying a threshold value for the pixel from the two-dimensional look up table;</claim-text>
<claim-text>creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel; and</claim-text>
<claim-text>obtaining an output value for the pixel by indexing the three-dimensional look up table via the index; and</claim-text>
</claim-text>
<claim-text>producing a halftone representation of the image from output values for corresponding pixels,</claim-text>
<claim-text>wherein the threshold value is a mean of a set of gray levels used to output to a halftone image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the image is a scanned image representing a two-dimensional array of contone pixels.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the index is created by calculating a difference between the position of the pixel and a corresponding threshold value, and scaling a result of the calculating by a constant factor.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the constant factor is a range of threshold values to which pixel positions are compared.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>outputting the halftone representation of the image to a printing device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>outputting the halftone representation of the image to a computer display screen.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A system for implementing digital halftoning of an image, comprising:
<claim-text>a computer processing device; and</claim-text>
<claim-text>a halftoning engine executing on the computer processing device, the halftoning engine implementing a method, comprising:</claim-text>
<claim-text>for each pixel in the image:
<claim-text>indexing a two-dimensional look up table using a position of the pixel;</claim-text>
<claim-text>identifying a threshold value for the pixel from the two-dimensional look up table;</claim-text>
<claim-text>creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel; and</claim-text>
<claim-text>obtaining an output value for the pixel by indexing the three-dimensional look up table via the index; and</claim-text>
</claim-text>
<claim-text>producing a halftone representation of the image from output values for corresponding pixels,</claim-text>
<claim-text>wherein the threshold value is a mean of a set of gray levels used to output to a halftone image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the image is a scanned image representing a two-dimensional array of contone pixels.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the index is created by calculating a difference between the position of the pixel and a corresponding threshold value, and scaling a result of the calculating by a constant factor.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the constant factor is a range of threshold values to which pixel positions are compared.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the method further comprises:
<claim-text>outputting the halftone representation of the image to a printing device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the method further comprises:
<claim-text>outputting the halftone representation of the image to a computer display screen.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A computer program product for implementing digital halftoning of an image includes a non-transitory computer readable storage medium having computer readable program code embodied therewith, the computer readable program code configured to implement a method, the method comprising:
<claim-text>for each pixel in the image:
<claim-text>indexing a two-dimensional look up table using a position of the pixel;</claim-text>
<claim-text>identifying a threshold value for the pixel from the two-dimensional look up table;</claim-text>
<claim-text>creating an index that indexes a three-dimensional lookup table using the threshold value and the position of the pixel; and</claim-text>
<claim-text>obtaining an output value for the pixel by indexing the three-dimensional look up table via the index; and</claim-text>
</claim-text>
<claim-text>producing a halftone representation of the image from output values for corresponding pixels,</claim-text>
<claim-text>wherein the threshold value is a mean of a set of gray levels used to output to a halftone image.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the image is a scanned image representing a two-dimensional array of contone pixels.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the index is created by calculating a difference between the position of the pixel and a corresponding threshold value, and scaling a result of the calculating by a constant factor.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the constant factor is a range of threshold values to which pixel positions are compared.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the method further comprises:
<claim-text>outputting the halftone representation of the image to a printing device.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the method further comprises:
<claim-text>outputting the halftone representation of the image to a computer display screen. </claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627283-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627283</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12011743</doc-number>
<date>20080128</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1074</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>44</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717120</main-classification>
<further-classification>715700</further-classification>
</classification-national>
<invention-title id="d2e53">Graphical user interface with a background class loading event system</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>5493658</doc-number>
<kind>A</kind>
<name>Chiang et al.</name>
<date>19960200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>5544360</doc-number>
<kind>A</kind>
<name>Lewak</name>
<date>19960800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>5659751</doc-number>
<kind>A</kind>
<name>Heninger</name>
<date>19970800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5761655</doc-number>
<kind>A</kind>
<name>Hoffman</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5774716</doc-number>
<kind>A</kind>
<name>Harbinski et al.</name>
<date>19980600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5781191</doc-number>
<kind>A</kind>
<name>Mayuzumi et al.</name>
<date>19980700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5966702</doc-number>
<kind>A</kind>
<name>Fresko et al.</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5974428</doc-number>
<kind>A</kind>
<name>Gerard</name>
<date>19991000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6023271</doc-number>
<kind>A</kind>
<name>Quaeler-Bock et al.</name>
<date>20000200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715866</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6237135</doc-number>
<kind>B1</kind>
<name>Timbol</name>
<date>20010500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717107</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6282698</doc-number>
<kind>B1</kind>
<name>Baker et al.</name>
<date>20010800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6339841</doc-number>
<kind>B1</kind>
<name>Merrick et al.</name>
<date>20020100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>6470494</doc-number>
<kind>B1</kind>
<name>Chan et al.</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>6480880</doc-number>
<kind>B2</kind>
<name>White et al.</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>6593940</doc-number>
<kind>B1</kind>
<name>Petersen et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>6625805</doc-number>
<kind>B1</kind>
<name>Lam et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717130</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00017">
<document-id>
<country>US</country>
<doc-number>6681242</doc-number>
<kind>B1</kind>
<name>Kumar et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00018">
<document-id>
<country>US</country>
<doc-number>6684387</doc-number>
<kind>B1</kind>
<name>Acker et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717126</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00019">
<document-id>
<country>US</country>
<doc-number>6748396</doc-number>
<kind>B2</kind>
<name>Klicnik et al.</name>
<date>20040600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00020">
<document-id>
<country>US</country>
<doc-number>6772408</doc-number>
<kind>B1</kind>
<name>Velonis et al.</name>
<date>20040800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00021">
<document-id>
<country>US</country>
<doc-number>6804686</doc-number>
<kind>B1</kind>
<name>Stone et al.</name>
<date>20041000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>  1  1</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00022">
<document-id>
<country>US</country>
<doc-number>6836889</doc-number>
<kind>B1</kind>
<name>Chan et al.</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00023">
<document-id>
<country>US</country>
<doc-number>6915461</doc-number>
<kind>B1</kind>
<name>Watanabe</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00024">
<document-id>
<country>US</country>
<doc-number>7039923</doc-number>
<kind>B2</kind>
<name>Kumar et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00025">
<document-id>
<country>US</country>
<doc-number>7086067</doc-number>
<kind>B1</kind>
<name>Wason</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>719329</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00026">
<document-id>
<country>US</country>
<doc-number>7380214</doc-number>
<kind>B1</kind>
<name>Giormov</name>
<date>20080500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>715772</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00027">
<document-id>
<country>US</country>
<doc-number>2002/0060566</doc-number>
<kind>A1</kind>
<name>Debbins et al.</name>
<date>20020500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>324307</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00028">
<document-id>
<country>US</country>
<doc-number>2002/0099845</doc-number>
<kind>A1</kind>
<name>Passanisi</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709236</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00029">
<document-id>
<country>US</country>
<doc-number>2002/0147971</doc-number>
<kind>A1</kind>
<name>Adams</name>
<date>20021000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00030">
<document-id>
<country>US</country>
<doc-number>2003/0009480</doc-number>
<kind>A1</kind>
<name>Lin et al.</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00031">
<document-id>
<country>US</country>
<doc-number>2003/0081003</doc-number>
<kind>A1</kind>
<name>Kutay et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00032">
<document-id>
<country>US</country>
<doc-number>2003/0110469</doc-number>
<kind>A1</kind>
<name>Jackson</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00033">
<document-id>
<country>US</country>
<doc-number>2003/0121031</doc-number>
<kind>A1</kind>
<name>Fraenkel et al.</name>
<date>20030600</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00034">
<document-id>
<country>US</country>
<doc-number>2003/0140332</doc-number>
<kind>A1</kind>
<name>Norton et al.</name>
<date>20030700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717106</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00035">
<document-id>
<country>US</country>
<doc-number>2003/0158918</doc-number>
<kind>A1</kind>
<name>Hanis</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00036">
<document-id>
<country>US</country>
<doc-number>2003/0160825</doc-number>
<kind>A1</kind>
<name>Weber</name>
<date>20030800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>345769</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00037">
<document-id>
<country>US</country>
<doc-number>2003/0167349</doc-number>
<kind>A1</kind>
<name>Krohn et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00038">
<document-id>
<country>US</country>
<doc-number>2003/0177484</doc-number>
<kind>A1</kind>
<name>Bosschaert et al.</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00039">
<document-id>
<country>US</country>
<doc-number>2003/0200350</doc-number>
<kind>A1</kind>
<name>Kumar et al.</name>
<date>20031000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00040">
<document-id>
<country>US</country>
<doc-number>2004/0006765</doc-number>
<kind>A1</kind>
<name>Goldman</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717116</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00041">
<document-id>
<country>US</country>
<doc-number>2004/0015783</doc-number>
<kind>A1</kind>
<name>Lennon et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00042">
<document-id>
<country>US</country>
<doc-number>2004/0015856</doc-number>
<kind>A1</kind>
<name>Goward et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00043">
<document-id>
<country>US</country>
<doc-number>2004/0015936</doc-number>
<kind>A1</kind>
<name>Susarla et al.</name>
<date>20040100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00044">
<document-id>
<country>US</country>
<doc-number>2004/0055005</doc-number>
<kind>A1</kind>
<name>Creswell et al.</name>
<date>20040300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00045">
<document-id>
<country>US</country>
<doc-number>2004/0237028</doc-number>
<kind>A1</kind>
<name>Softky</name>
<date>20041100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00046">
<document-id>
<country>US</country>
<doc-number>2004/0261030</doc-number>
<kind>A1</kind>
<name>Nazzal</name>
<date>20041200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00047">
<document-id>
<country>US</country>
<doc-number>2005/0166148</doc-number>
<kind>A1</kind>
<name>Garding</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00048">
<document-id>
<country>US</country>
<doc-number>2005/0166189</doc-number>
<kind>A1</kind>
<name>Ma</name>
<date>20050700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00049">
<document-id>
<country>US</country>
<doc-number>2005/0257193</doc-number>
<kind>A1</kind>
<name>Falk et al.</name>
<date>20051100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717109</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00050">
<document-id>
<country>US</country>
<doc-number>2005/0267962</doc-number>
<kind>A1</kind>
<name>Svetoslavov et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709223</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00051">
<document-id>
<country>US</country>
<doc-number>2006/0095276</doc-number>
<kind>A1</kind>
<name>Axelrod et al.</name>
<date>20060500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>705  1</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00052">
<othercit>&#x201c;User's Guide iPlant Application Server Integration for VisualCafe&#x201d;, (Nov. 2000).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00053">
<othercit>Arni, Faiz , et al., &#x201c;Commercial Component Creation (EJB 2.0)&#x201d;, <i>Enterprise JavaBeans Components Technology Based Components</i>. (Apr. 5, 2001).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00054">
<othercit>Flanagan, D. , &#x201c;Java Examples in a Nutshell&#x201d;, <i>O'Reilly</i>, (1997), 20 and 153.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00055">
<othercit>Inprise Corporation, &#x201c;Enterprise JavaBeans Programmer's Guide, Version 4.5&#x201d;, Chapter 7, (2000, 2001), 91-150.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00056">
<othercit>Grundy, J. , &#x201c;Storage and retrieval of software components using aspects&#x201d;, <i>computer science conference, ACSC 2000, 23rd Australasian</i>, (2000), 95-102.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00057">
<othercit>&#x201c;U.S. Appl. No. 10/835,750, Non Final Office Action mailed Jun. 29, 2007&#x201d;, 8 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00058">
<othercit>&#x201c;U.S. Appl. No. 10/835,750, Response filed Aug. 2, 2007 to Non Final Office Action mailed Jun. 29, 2007&#x201d;, 19 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00059">
<othercit>&#x201c;Enterprise JavaBeans Programmer's Guide, Version 4.5&#x201d;, <i>Inprise, Corporation</i>, Chapter 7, (2000, 2001), 91-150.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00060">
<othercit>&#x201c;User's Guide: iPlanet Application Server Integration for VisualCafe&#x201d;, (Nov. 2000), 1-59.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00061">
<othercit>Arni, Faiz, et al., &#x201c;&#x201d;, <i>Enterprise JavaBeans Components Technology Based Components</i>, Technical White Paper, (Apr. 5, 2001), 1-24.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00062">
<othercit>Flanagan, D., &#x201c;Java Examples in a Nutshell&#x201d;, <i>O'Reilly</i>, (1997), 20 &#x26; 153.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00063">
<othercit>Giormov, Dimitar T., et al., &#x201c;A Graphical User Interface of Background Search Methodology for Creating References Between Software Components&#x201d;, U.S. Appl. No. 10/836,157, filed Apr. 29, 2004., Background, pp. 2-8, Figures (1A, 1B, 2) 3 pages total.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00064">
<othercit>Grundy, J., &#x201c;Storage and retrieval of Software Components using Aspects&#x201d;, <i>Computer Science Conference, ACSC. 23rd Australasian</i>, (2000), 95-103.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00065">
<othercit>&#x201c;Enterprise JavaBeans Programmer's Guide&#x201d;, <i>Inprise Corporation</i>, Version 4.5, Chapter 7 Copyright 200-2001, 91-150.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00066">
<othercit>&#x201c;Sun's JAVA 2 Platform SE v1.3.1: Class ClassLoader&#x201d;, SUN Microsystems Inc., (2001), 1.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00067">
<othercit>Stuckenholz, A. , &#x201c;Component Evolution and Versioning State of the Art&#x201d;, SIGSOFT Softw. Eng. Notes 30, 1 (Jan. 2005), 7. DOI=http://doi.acm.org/10.1145/1039174.1039197, (Jan. 2005).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00068">
<othercit>&#x201c;U.S. Appl. No. 12/011,743 , Response filed Aug. 29, 2011 to Final Office Action mailed Jun. 28, 2011&#x201d;, 3 pgs.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>24</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>717120</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>715700</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>9</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>10835750</doc-number>
<date>20040429</date>
</document-id>
<parent-status>ABANDONED</parent-status>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>12011743</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20080209319</doc-number>
<kind>A1</kind>
<date>20080828</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Giormov</last-name>
<first-name>Dimitar T.</first-name>
<address>
<city>Plovdiv</city>
<country>BG</country>
</address>
</addressbook>
<residence>
<country>BG</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kovachka-Dimitrova</last-name>
<first-name>Monika M.</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
<residence>
<country>BG</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Giormov</last-name>
<first-name>Dimitar T.</first-name>
<address>
<city>Plovdiv</city>
<country>BG</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Kovachka-Dimitrova</last-name>
<first-name>Monika M.</first-name>
<address>
<city>Sofia</city>
<country>BG</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Schwegman Lundberg &#x26; Woessner, P.A.</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>SAP AG</orgname>
<role>03</role>
<address>
<city>Walldorf</city>
<country>DE</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Ly</last-name>
<first-name>Cheyne D</first-name>
<department>2168</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">According to one aspect of the invention, a method for searching for a particular type of class file and a graphical user interface for displaying the names of the class files of the particular type are provided. A first class file is searched for a particular feature. If the class file contains the feature, the name of the class file is displayed. A second class file may then be searched and displayed if it contains the same feature. The names of all class files having the feature may then be displayed in a menu on the graphical user interface. The graphical user interface may also include a window displaying a list of features. When one of the features is selected, the names of all the class files having the feature are displayed in the menu.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="172.13mm" wi="253.32mm" file="US08627283-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="230.97mm" wi="189.99mm" orientation="landscape" file="US08627283-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="179.49mm" wi="120.40mm" file="US08627283-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="227.75mm" wi="152.99mm" file="US08627283-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="249.51mm" wi="184.49mm" file="US08627283-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="260.01mm" wi="184.07mm" orientation="landscape" file="US08627283-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="244.86mm" wi="180.85mm" orientation="landscape" file="US08627283-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="254.42mm" wi="173.48mm" orientation="landscape" file="US08627283-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="241.13mm" wi="180.34mm" orientation="landscape" file="US08627283-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="188.04mm" wi="162.64mm" file="US08627283-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<p id="p-0002" num="0001">This Application is a Continuation of application &#x201c;A Graphical User Interface With A Background Class Loading Event System&#x201d; filed by Dimitar T. Giormov, et al., on Apr. 29, 2004 now abandoned (U.S. patent application Ser. No. 10/835,750).</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0003" num="0002">1). Field of the Invention</p>
<p id="p-0004" num="0003">This invention relates to a method of searching a plurality of class files for a particular type of class file and a graphical user interface for displaying the names of the class files of the particular type.</p>
<p id="p-0005" num="0004">2). Discussion of Related Art</p>
<p id="h-0002" num="0000">Classfiles in Object Oriented Environments</p>
<p id="p-0006" num="0005">Certain software technologies, including Java, are &#x201c;object oriented.&#x201d; According to an object oriented approach, the subject matter that is processed by a computer program is organized into classes of likeness. For example, the software used to sell items to customer X might belong to the same class of software (e.g., a class named &#x201c;sales&#x201d;) that is used to sell items to customer Y. Here, given that a significant degree of overlap is expected to exist regarding the methods and data types used to process sales for both customers X and Y (e.g., an &#x201c;update billing about sale&#x201d; method, an &#x201c;update accounting about sale&#x201d; method, a &#x201c;part number&#x201d; data type, a &#x201c;quantity&#x201d; data type . . . etc.) it is deemed more efficient to organize such methods and data types into a generic &#x201c;sales&#x201d; class from which specific instances of the class (e.g., an instance for selling to customer X and an instance for selling to customer Y) can be defined and created.</p>
<p id="p-0007" num="0006">Each specific instance of a class is referred to as an object, and each object assumes, or inherits, the characteristics of the class from which it is defined. The characteristics of a class may be referred to as items within the class or particular syntaxes written into the software code. Thus, a first object could be created from the generic sales class to create a &#x201c;sell to customer X&#x201d; object; and, a second object could be created from the generic sales class to create a &#x201c;sell to customer Y&#x201d; object. Both objects would be able to execute the methods defined by the class. For example, the &#x201c;sell to customer X&#x201d; object could execute the &#x201c;update accounting about sale&#x201d; method to update an accounting department about a sale to customer X; and, the &#x201c;sell to customer Y&#x201d; object could also execute the &#x201c;update accounting about sale&#x201d; method to update an accounting department about a sale to customer Y.</p>
<p id="p-0008" num="0007">In general, the runtime execution of any computer program can be viewed as the execution of a sequence of methods. With respect to an object-oriented approach, such a sequence of methods can be implemented by calling upon a sequence of objects and invoking one or more methods at each object. In order to invoke the method of an object, a representation of the object is typically created beforehand. In virtual machine-based object-oriented software environments, classfiles are bytecode level data structures from which such representations are created. A classfile can be viewed as a bytecode level description of a class; and, therefore, a classfile can be used as a template for the formation of an object, at the bytecode level, that is a member of the class. As specific methods can be attributed to specific classes, each classfile is made to contain the sequence of bytecode instructions that correspond to each of the class's specific methods.</p>
<p id="h-0003" num="0000">Component Based Architectures</p>
<p id="p-0009" num="0008">Component based software environments use granules of software (referred to as &#x201c;components&#x201d; or &#x201c;component instances&#x201d;) to perform basic functions. The components themselves typically comprise one or more software objects. Some examples of component based architectures include Java Beans (JB), Enterprise Java Beans (EJB), Common Object Request Broker Architecture (CORBA), Component Object Model (COM), Distributed Component Object Model (DCOM) and derivatives there from.</p>
<p id="p-0010" num="0009">The functional granularity offered by a plurality of different components provides a platform for developing a multitude of more comprehensive tasks. For example, a business application that graphically presents the results of calculations made to an individual's financial records (e.g., amortization of interest payments, growth in income, etc.) may be created by logically stringing together: 1) an instance of a first component that retrieves an individual's financial records from a database; 2) an instance of a second component that performs calculations upon financial records; and, 3) an instance of a third component that graphically presents financial information.</p>
<p id="p-0011" num="0010">Moreover, within the same environment, another business application that only graphically presents an individual's existing financial records may be created by logically stringing together: 1) another instance of the first component mentioned just above; and, 2) another instance of the third component mentioned above. That is, different instances of the same component may be used to construct different applications. The number of components within a particular environment and the specific function(s) of each of the components within the environment are determined by the developers of the environment.</p>
<p id="p-0012" num="0011">Components may also be created to represent separate instances of persistent data (e.g., a first component that represents a first row of database information, a second component that represents a second row of database information, etc.), and text pages or servlets for web based invocation of specific business methods.</p>
<p id="h-0004" num="0000">Development Issues</p>
<p id="p-0013" num="0012">In a Java environment, &#x201c;deployment descriptors&#x201d; are used, among other things, to facilitate the interaction between different components so that the components themselves need not be changed to call upon or use other components. The deployment descriptors include what are known as &#x201c;references.&#x201d; The references indicate how one component will interact with another component using interfaces on the components.</p>
<p id="p-0014" num="0013">When an application is assembled, certain information must be put into the deployment descriptors. For example, setting the deployment descriptors with the &#x201c;main&#x201d; class files of the components. For example, a bean always has a bean class, which holds the implementation of the bean's interfaces (local and remote), which are used for communication with other components. If the wrong class file is specified, or a class file that does not actually exist is specified, the software application cannot not be built.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a prior art graphical user interface (GUI) <b>30</b> used in the deployment (or development) of a component based software applications. The GUI <b>30</b> includes utility pull down menus <b>32</b>, utility buttons <b>34</b>, and tabs <b>34</b>. Within the displayed tab <b>36</b> are a component window <b>38</b> and a component information window <b>40</b>. The component information window <b>40</b> includes a component name indicator <b>42</b>, a remote interface field <b>44</b>, home interface field <b>46</b>, a component class field <b>48</b>, a primary key class field <b>50</b>, a primary key field <b>52</b>, a reentrant indicator <b>54</b>, and a persistent management indicator <b>56</b>.</p>
<p id="p-0016" num="0015">If the user wished to verify, or enter, the name of a class file used to create a particular instance of a particular component (e.g., its interface), he or she had to manually type the name of the class file into the appropriate field. The GUI responded positively only if the typed name was &#x201c;correct.&#x201d; Because the names of the class files can be very long and confusing, often the developer would type in an incorrect name, and the GUI would not provide any information as to what the correct name was.</p>
<heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading>
<p id="p-0017" num="0016">The invention provides a method for searching for a particular type of class file and a graphical user interface for displaying the names of the class files of the particular type. A first class file is searched for a particular feature. If the class file contains the feature, the name of the class file is displayed. A second class file may then be searched and displayed if it contains the same feature. The names of all class files having the feature may then be displayed in a menu on the graphical user interface. The graphical user interface may also include a window displaying a list of features. When one of the features is selected, the names of all the class files having the feature are displayed in the menu.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0018" num="0017">The invention is described by way of example with reference to the accompanying drawings, wherein:</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. 1</figref> illustrates a prior art graphical user interface;</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart illustrating a method in accordance with the present invention;</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 3</figref> is a flow chart illustrating a decision tree in accordance with the present invention;</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 4</figref> is a flow chart illustrating a decision tree according to a specific embodiment of the present invention;</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. 5A-5D</figref> illustrate a graphical user interface according to an embodiment of the present invention; and</p>
<p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. 6</figref> illustrates a computing system.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading>
<p id="p-0025" num="0024">An improvement is to visually present the user with correct class names. <figref idref="DRAWINGS">FIG. 2</figref> through <figref idref="DRAWINGS">FIG. 5D</figref> illustrate a method for searching for a particular type of class file and a graphical user interface for displaying the names of the class files of the particular type. A first class file is searched for a particular feature. If the class file contains the feature, the name of the class file is displayed. A second class file may then be searched and its name displayed if it contains the same feature. The names of all class files having the feature may then be displayed in a menu on the graphical user interface. The graphical user interface may also include a window displaying a list of features. When one of the features is selected, the names of all the class files having the feature are displayed in the menu.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 2</figref> illustrates a method for filtering through class files in a project to identify the names of the class files of a particular type. A &#x201c;type of class file&#x201d; is a class file that produces a particular type of object (e.g., a component object, a remote interface object, a local interface object, a primary key object, etc.). First, at methodology <b>100</b>, all class files in the class path are located and their location recorded. Then, at methodology <b>102</b> a first class file is loaded.</p>
<p id="p-0027" num="0026">Next, at methodology <b>104</b> a decision tree is executed to determine whether or not the currently loaded class file is one of the types being searched for. At methodology <b>106</b>, the decision is made whether or not the currently loaded class file is of the searched for type. If the class file is of the type being searched for, the name of the class file is displayed as illustrated by methodology <b>108</b>.</p>
<p id="p-0028" num="0027">If the class file is not of the type being searched for, the class file name is not displayed. Alternatively it could be displayed but in a category that does not have any special requirements. The process returns to methodology <b>102</b> until all class files have been loaded and searched. The pool of class files to be searched may vary from embodiment to embodiment. For example, in one embodiment all class files within a project may be searched. In another embodiment, all class files that are related to a particular component may be searched (e.g., those class files whose methods could be used by the component, those class files whose data items could used by the component, etc.).</p>
<p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. 3</figref> illustrates a decision tree <b>110</b> which may be implemented in methodology <b>102</b> in <figref idref="DRAWINGS">FIG. 2</figref>. The decision tree <b>110</b> includes multiple methodologies <b>112</b>, <b>114</b>, and <b>116</b>, each of which searches the current class file for a particular property. If the class file includes the property associated with a particular type of class file, the decision is made that the class file must be of that type. As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, at methodology <b>112</b> the class file is searched for &#x201c;property <b>1</b>.&#x201d; If the class file has property <b>1</b>, it is decided that the class file must be of type <b>1</b>, which is associated with property <b>1</b>. That is, all class files of type <b>1</b> must include property <b>1</b>.</p>
<p id="p-0030" num="0029">If the class file does not have property <b>1</b> the decision tree <b>110</b> then moves to methodology <b>114</b>. At methodology <b>114</b>, the class file is searched for &#x201c;property <b>2</b>.&#x201d; If the class file has property <b>2</b>, then the decision is made that the class file must be of type <b>2</b>, which is associated with property <b>2</b>. If the class file does not have property <b>2</b>, then the decision tree <b>110</b> moves on to the next methodology.</p>
<p id="p-0031" num="0030">As illustrated in <figref idref="DRAWINGS">FIG. 3</figref>, the decision tree may include up to X decision methodologies with the generic methodology <b>116</b> searching a class file for a generic &#x201c;property X.&#x201d; If the class file includes property X, then the decision is made that the class file must be of type X, which is associated with property X. Upon execution of the decision tree, the class file is either characterized as being one of the X types (and if so&#x2014;which one) or is understood to not be any one of the X types (e.g., it could be of a type which does not have any special requirements except not being one of the X type); or, characterized within a category that does not include any special requirements.</p>
<p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. 4</figref> illustrates a decision tree <b>118</b> according to a specific embodiment. The decision tree <b>118</b> includes nine methodologies, <b>122</b>-<b>138</b>, each of which searches the current class file for a particular property that it inherits (e.g., which corresponds to a feature that an object instantiated from it will inherit). Table 1, listed below, lists the particular class file types and an associate class file inheritance that identifies it as being of its specific type. The specific embodiment of Table 1 corresponds to an Enterprise Java Beans (EJB) environment.</p>
<p id="p-0033" num="0032">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" rowsep="1">TABLE 1</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
<row>
<entry>Class File Type:</entry>
<entry>Class File Inherits:</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Remote Home Interface</entry>
<entry>&#x201c;javax.ejb.EJBHome&#x201d; (Item A)</entry>
</row>
<row>
<entry>Local Home Interface</entry>
<entry>&#x201c;javax.ejb.EJBLocalHome&#x201d; (Item B)</entry>
</row>
<row>
<entry>Remote Interface</entry>
<entry>&#x201c;javax.ejb.EJBObject&#x201d; (Item C)</entry>
</row>
<row>
<entry>Local Interface</entry>
<entry>&#x201c;javax.ejb.EJBLocalObject&#x201d; (Item D)</entry>
</row>
<row>
<entry>Filter</entry>
<entry>&#x201c;javax.servlet.Filter&#x201d; (Item E)</entry>
</row>
<row>
<entry>Servlet</entry>
<entry>&#x201c;javax.servlet.http.HttpServlet&#x201d;</entry>
</row>
<row>
<entry/>
<entry>or &#x201c;javax.servlet.Servlet&#x201d; (Item F)</entry>
</row>
<row>
<entry>Connector</entry>
<entry>&#x201c;javax.resource.ResourceAdapter&#x201d; (Item G)</entry>
</row>
<row>
<entry>Listener</entry>
<entry>&#x201c;javax.servlet.ServletContextListener&#x201d; (Item H)</entry>
</row>
<row>
<entry>Primary Key</entry>
<entry>&#x201c;Java.ioSerializible&#x201d; (Item I)</entry>
</row>
<row>
<entry>Bean Class</entry>
<entry>None of A through H</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<p id="p-0034" num="0033">Referring again to <figref idref="DRAWINGS">FIG. 4</figref>, at methodology <b>122</b>, it is determined whether or not the class file contains item A in Table 1. If the class file contains item A in Table 1, the class file is of the type that produces a remote home interface object. If the class file does not contain item A, then the class file is not of the type that produces a remote home interface object, and the decision tree moves to methodology <b>124</b>.</p>
<p id="p-0035" num="0034">At methodology <b>124</b>, it is determined whether or not the class file contains item B in Table 1. If the class file contains item B, in Table 1, the class file is of the type that produces a local home interface object. If the class does not contain item B, in Table 1, the class file is not of the type that produces a local home interface object, and the decision tree <b>118</b> moves on to methodology <b>126</b>.</p>
<p id="p-0036" num="0035">At methodology <b>126</b>, it is determined whether or not the class file contains item C in Table 1. If the class file contains item C in Table 1, then the class file is of the type that produces a remote interface object. If the class file does not contain item C in Table 1, then the class file is not of the type that produces a remote interface, and the decision tree <b>118</b> moves on to methodology <b>128</b>.</p>
<p id="p-0037" num="0036">At methodology <b>128</b>, it is determined whether or not the class file contains item D in Table 1. If the class file contains item D in Table 1, then the class file is of the type that produces a local interface object. If the class file does not contain item D in Table 1, the class file is not of the type that produces a local interface object, and the decision tree <b>118</b> moves on to methodology <b>130</b>.</p>
<p id="p-0038" num="0037">At methodology <b>130</b> it is determined whether or not the current class file contains item E in Table 1. If the class file contains item E in Table 1, then the class file is of the type that produces a filter object. If the class file does not contain Item E in Table 1, then the class file is not of the type that produces a filter object, and the decision tree <b>118</b> moves on to methodology <b>132</b>.</p>
<p id="p-0039" num="0038">At methodology <b>132</b>, it is determined whether or not the class file contains item F in Table 1. If the class file contains item F in Table 1, then the class file is of the type that produces a servlet object. If the class file does not contain item F in Table 2, then the class file is not of the type that produces a servlet object, and the decision tree <b>118</b> moves on to methodology <b>134</b>.</p>
<p id="p-0040" num="0039">At methodology <b>134</b>, it is determined whether or not the class file contains item G in Table 1. If the class file contains item G in Table 1, then the class file is of the type that produces a connector object. If the class file does not contain item G in Table 1, then the class file is not of the type that produces a connector object, and the decision tree <b>118</b> moves on to methodology <b>136</b>.</p>
<p id="p-0041" num="0040">At methodology <b>136</b>, it is determined whether or not the class file contains item H in Table 1. If the class file contains item H in Table 1, then the class file is of the type that produces a listener object. If the class file does not contain item H in Table 1, then the class file is not of the type that produces a listener object, and the decision tree <b>118</b> moves on to methodology <b>138</b>.</p>
<p id="p-0042" num="0041">At methodology <b>138</b>, it is determined whether or not the class file contains item I in Table 1. If the class file contains item I in Table 1, then the class file is of the type that produces a primary key object or a bean class. If the class file does not contain item I in Table 1, then the class file is a not of the type that produces a primary key object, but it still could be a bean class object.</p>
<p id="p-0043" num="0042">Thus, a software application utilizing the methods described above may filter, or search, through multiple class files and, for each class file, identify whether or not the class file is of a type that produces a particular kind of object. Note that other embodiments may differ from the strictly consecutive sequential tree structure of <figref idref="DRAWINGS">FIGS. 3 and 4</figref>. That is, alternative tree structures may split into separate branches.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIGS. 5A-5D</figref> illustrate a graphical user interface (GUI) <b>150</b>, according to an embodiment of the present invention. Although the GUI <b>150</b> of <figref idref="DRAWINGS">FIGS. 5A-5D</figref> is specific to a J2EE project, those of ordinary skill in the art will be able to associate the teachings herein to other environments.</p>
<p id="p-0045" num="0044">Referring specifically to <figref idref="DRAWINGS">FIG. 5A</figref>, the GUI <b>150</b> includes utility pull down menus <b>152</b>, utility buttons <b>154</b>, and tabs <b>156</b>. The utility pull down menus <b>152</b> are displayed at an upper portion of the GUI <b>150</b> and include three pull down menus: a Project pull down menu, a J2EE Components pull down menu and a Help pull down menu. Although not illustrated, it should be understood that each of the utility pull down menus <b>152</b> include those items which may be used for performing various functions utilizing the GUI <b>150</b> (e.g., creating a new project, saving the current project, deleting a project, etc.).</p>
<p id="p-0046" num="0045">The utility buttons <b>154</b> are arranged horizontally below the utility pull down menus <b>152</b> and include multiple buttons for performing various functions of the software application. The various functions performed by the utility buttons <b>154</b> may be to support some of the functions contained within the utility pull down menus <b>152</b> (e.g., opening a file to create a new project, opening a file to save the current project, etc.).</p>
<p id="p-0047" num="0046">The tabs <b>156</b> are grouped in a horizontal row just below the utility buttons <b>154</b> and include a J2EE Components tab, an Assembler tab, a Deployer tab and Server Components tab. In the examples illustrated in <figref idref="DRAWINGS">FIG. 5A-5D</figref>, the J2EE Components tab is selected, or opened, and the contents thereof are displayed in the remainder of the GUI <b>150</b> below the tabs <b>156</b>.</p>
<p id="p-0048" num="0047">The J2EE Components tab includes a component window <b>158</b>, which displays the various components <b>160</b> in the current project and a component information window <b>162</b>. The component window <b>158</b> stretches along a side edge of the GUI <b>150</b> and extends the entire height of the J2EE Components tab. The component information window <b>162</b> occupies the remainder in the space of the J2EE Components tab.</p>
<p id="p-0049" num="0048">In use, a user utilizes the GUI <b>150</b> to view the names for all class files of a particular type that are related to a particular component or servlet.</p>
<p id="p-0050" num="0049">Referring specifically to <figref idref="DRAWINGS">FIG. 5A</figref>, the components <b>160</b> within the current project are listed in the component window <b>158</b>. In the example illustrated two archived files, &#x201c;Servlets.war&#x201d; and &#x201c;Beans.jar,&#x201d; are listed in the component window <b>158</b>. The Servlets.war file further includes a servlet, &#x201c;BonusServlet.&#x201d; The Beans.jar file further includes three beans (recalling that the term &#x201c;bean&#x201d; is used for &#x201c;component&#x201d; in J2EE environments), &#x201c;The Accounts,&#x201d; &#x201c;The Customer,&#x201d; and &#x201c;The Order.&#x201d; As illustrated the user has selected The Order bean in the component window <b>158</b>. As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, various information about the selected component is displayed in the component information window <b>162</b>. The name of the selected bean is listed in a bean name field <b>164</b>. Of particular interest, is a bean class pull down menu <b>166</b>, a primary key type pull down menu <b>168</b>, a remote home interface pull down menu <b>180</b>, a remote interface pull down menu <b>182</b>, a local home interface pull down menu <b>184</b>, and a local interface pull down menu <b>186</b>.</p>
<p id="p-0051" num="0050">When the project is created or the class path is changed the software application utilizing the GUI begins to search, using the methods described in <figref idref="DRAWINGS">FIGS. 2-4</figref>, through all of the class files within the project that are related to the selected component. The search is performed in the &#x201c;background&#x201d; so the user may continue to work without waiting for all the class files to be checked. All of the class files that inherit a searched for property are then displayed as part of the particular pull down menu <b>166</b>, <b>168</b>, <b>180</b>, and <b>186</b> that has been selected that corresponds to the searched for property.</p>
<p id="p-0052" num="0051">Therefore, in order to check, or enter, an appropriate class file, the user simply needs to refer to the displayed names. Conceivably, the user could also cut a specific name from the displayed list and paste it somewhere else rather than type it manually. The software application utilizing the GUI <b>150</b> may implement the method illustrated in <figref idref="DRAWINGS">FIGS. 2-4</figref> to list the appropriate class files in the primary key type pull down menu <b>168</b>. That is, the software application may utilize the above-described methods to classify types of class files.</p>
<p id="p-0053" num="0052">As illustrated in <figref idref="DRAWINGS">FIG. 5A</figref>, after the bean component has been selected from the component window <b>158</b>, activation of the primary key pull down menu <b>168</b> causes a list of all the class files associated with or related to the primary key to be displayed in the primary key pull down menu <b>168</b>.</p>
<p id="p-0054" num="0053">Although not illustrated, it should be understood that the bean class pull down menu <b>166</b> may be activated, and the software application utilizing the GUI <b>150</b> will show all class files which do not inherit items A, B, C, D, E, F, G, or H.</p>
<p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. 5B</figref> illustrates the GUI <b>150</b> after the user has selected a servlet from the components <b>160</b> within the component window <b>158</b>. As illustrated, various information about the selected servlet is displayed in the component information window <b>162</b>. The servlet name is listed in a servlet name field <b>170</b>. Additionally, the component information window <b>162</b> includes a servlet class pull down menu <b>172</b>. As illustrated, when activated, the servlet class pull down menu <b>172</b> includes a list of all the class files within the project that are related to the selected pull down menu (i.e., servlets). The class files related to servlets are searched and filtered in a manner similar to that illustrated in <figref idref="DRAWINGS">FIG. 5A</figref> (i.e., using the methods illustrated in <figref idref="DRAWINGS">FIGS. 2-4</figref>).</p>
<p id="p-0056" num="0055">Again, in order to check, or enter, an appropriate class file name, the user simply needs to refer to the displayed names, rather than typing the name manually.</p>
<p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. 5C</figref> illustrates the GUI <b>150</b> when a filter has been selected from the component window <b>158</b>. Various information about the selected filter is listed within the component information window <b>162</b>. With the filter selected, the component information window <b>162</b> includes a filter name field <b>174</b> and a filter class pull down menu <b>176</b>. The name of the filter is displayed in the filter name field <b>174</b>, and when activated, the filter class pull down menu <b>176</b> list the names, or addresses, of all the class files within the current project that are associated with, or related to, the selected pull down menu (i.e., filters). The class files related to filters are searched and filtered in manner similar to those illustrated in <figref idref="DRAWINGS">FIGS. 5A and 5B</figref>.</p>
<p id="p-0058" num="0057">Again, in order to check, or enter, an appropriate class file name, the user simply needs to refer to the displayed names, rather than typing the name manually.</p>
<p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. 5D</figref> illustrates the GUI <b>150</b> when a listener object has been selected from the components and objects <b>160</b> within the component window <b>158</b>. As illustrated, when the listener object is selected from the component window <b>158</b>, a listener class pull down menu <b>178</b> is displayed within the component information window <b>162</b>. When activated, the listener class pull down menu <b>178</b> list the names, or addresses, of all the class files within the current project that are associated with, or related to, the selected pull down menu (i.e., listeners). The class files related to listeners are searched and filtered in manner similar to those illustrated in <figref idref="DRAWINGS">FIGS. 5A</figref>, <b>5</b>B, and <b>5</b>C.</p>
<p id="p-0060" num="0059">Processes taught by the discussion above may be performed with program code such as machine-executable instructions, which cause a machine (such as a &#x201c;virtual machine&#x201d;, general-purpose processor or special-purpose processor) to perform certain functions. Alternatively, these functions may be performed by specific hardware components that contain hardwired logic for performing the functions, or by any combination of programmed computer components and custom hardware components.</p>
<p id="p-0061" num="0060">An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as, but is not limited to, one or more memories (e.g., one or more flash memories, random access memories (static, dynamic or other)), optical disks, CD-ROMs, DVD ROMs, EPROMs, EEPROMs, magnetic or optical cards or other type of machine-readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a propagation medium (e.g., via a communication link (e.g., a network connection)).</p>
<p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram of an example of a computing system <b>200</b> that can execute program code stored by an article of manufacture. The computing system <b>200</b> includes a processor <b>202</b>, a memory <b>204</b>, a hard drive <b>206</b>, a network interface <b>208</b>, a removeable media drive <b>210</b>, a CD-ROM <b>212</b>, and a display device <b>214</b>. It is important to recognize that the computing system of <figref idref="DRAWINGS">FIG. 6</figref> is just one of various computing architectures. The applicable article of manufacture may include one or more fixed components (such as a hard disk and a memory) and/or movable components such as a CD-ROM, a compact disc, a magnetic tape, etc. In order to execute program code, typically instructions of the program code are loaded into the memory <b>204</b>, such as Random Access Memory (RAM), and the processor <b>202</b>, or microprocessor, then executes the instructions.</p>
<p id="p-0063" num="0062">The display device <b>204</b> may be used to display the GUI described in <figref idref="DRAWINGS">FIGS. 5A-5D</figref>, and the computing system of <figref idref="DRAWINGS">FIG. 6</figref> may be used to execute instructions in the form of software that may include the GUI and the method for searching for particular types of class files described in <figref idref="DRAWINGS">FIGS. 2-4</figref>. The software may also be used from multiple computing systems simultaneously.</p>
<p id="p-0064" num="0063">The processes taught by the discussion above can be practiced within various software environments such as, for example, object-oriented and non-object-oriented programming environments, Java based environments (such as a Java 2 Enterprise Edition (J2EE) environment or environments defined by other releases of the Java standard, or other environments (e.g., a .NET environment, a Windows/NT environment, each of which is provided by Microsoft Corporation).</p>
<p id="p-0065" num="0064">While certain exemplary embodiments have been described and shown in the accompanying drawings, it is to be understood that such embodiments are merely illustrative and not restrictive of the current invention, and that this invention is not restricted to the specific constructions and arrangements shown and described since modifications may occur to those ordinarily skilled in the art.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A computer implemented method, comprising;
<claim-text>presenting in a graphical user interface (GUI) a plurality of software structure types comprising an interface, a filter, a servlet, a primary key, a listener, and a connector, the GUI including a class control that allows a user to select a software structure type from the plurality of software structure types:</claim-text>
<claim-text>receiving, from the class control within the GUI, the selection by the user of the software structure type from the plurality of software structure types</claim-text>
<claim-text>loading, in response to the selected software structure type, a plurality of class files associated with the selected software structure type;</claim-text>
<claim-text>searching for a particular property in each of said class files after it is loaded, said particular property being specific to a particular type of class file;</claim-text>
<claim-text>displaying on said GUI the name of each class file amongst said class files having said property, said displaying resulting in the display of a subset of said plurality of class file names on said GUI; and</claim-text>
<claim-text>creating a deployment descriptor that includes a name of a class file from said subset of said plurality of class files.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said interface is a remote home interface.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said interface is a local home interface.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said interface is a remote interface.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said interface is a local interface.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said displaying is performed through a window that pulls down on said GUI.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein said GUI includes a window that lists an application's software components.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein each of said class loaded class files have a same class path.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. An article of manufacture comprising program code, which, when processed by a machine causes a method to be performed, said method comprising:
<claim-text>presenting in a graphical user interface (GUI) a plurality of software structure types comprising an interface, a filter, a servlet, a primary key, a listener, and a connector, the GUI including a class control that allows a user to select a software structure type from the plurality of software structure types;</claim-text>
<claim-text>receiving, from the user using the class control within the GUI, the selection of the software structure type from the plurality of software structure types</claim-text>
<claim-text>loading, in response to the selected software structure type, a plurality of class files associated with the selected software structure type;</claim-text>
<claim-text>searching for a particular property in each of said class files after it is loaded, said particular property being specific to particular type of class file;</claim-text>
<claim-text>displaying on said GUI the name of each class file amongst said class files having said property, said displaying resulting in the display of a subset of said plurality of class file names on said GUI; and</claim-text>
<claim-text>creating a deployment descriptor that includes a name of a class file from said subset of said plurality of class files.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said interface is a remote home interface.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said interface is a local home interface.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said interface is a remote interface.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said interface is a local interface.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said displaying is performed through a window that pulls down on said GUI.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein said GUI includes a window that lists an application's software components.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The article of manufacture of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein each of said class loaded class files have a same class path.</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. A computing system comprising program code stored on a non-transitory machine readable storage medium, wherein, when said program code is processed by a machine within said computing system, causes operations comprising:
<claim-text>presenting in a graphical user interface (GUI) a plurality of software structure types comprising an interface, a filter, a servlet, a primary key, a listener, and a connector, the GUI including a class control that allows a user to select a software structure type from the plurality of software structure types;</claim-text>
<claim-text>receiving, from the user using the class control within the GUI, the selection of the software structure type from the plurality of software structure types</claim-text>
<claim-text>loading, in response to the selected software structure type, a plurality of class files associated with the selected software structure type;</claim-text>
<claim-text>searching for a particular property in each of said class files after it is loaded, said particular property being specific to a particular type of class file;</claim-text>
<claim-text>displaying on said GUI the name of each class file amongst said class files having said property, said displaying resulting in the display of a subset of said plurality of class file names on said GUI; and</claim-text>
<claim-text>creating a deployment descriptor that includes a name of a class file from said subset of said plurality of class flies.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said interface is a remote home interface.</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said interface is a local home interface.</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said interface is a remote interface.</claim-text>
</claim>
<claim id="CLM-00021" num="00021">
<claim-text>21. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said interface is a local interface.</claim-text>
</claim>
<claim id="CLM-00022" num="00022">
<claim-text>22. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said displaying is performed through a window that pulls down on said GUI.</claim-text>
</claim>
<claim id="CLM-00023" num="00023">
<claim-text>23. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein said GUI includes a window that lists an application's software components.</claim-text>
</claim>
<claim id="CLM-00024" num="00024">
<claim-text>24. The computing system of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein each of said class loaded class files have a same class path. </claim-text>
</claim>
</claims>
</us-patent-grant>

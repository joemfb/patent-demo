<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627311-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627311</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13019052</doc-number>
<date>20110201</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<us-term-extension>430</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>9</main-group>
<subgroup>445</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>717176</main-classification>
</classification-national>
<invention-title id="d2e53">Systems, methods, and apparatus to deploy software</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>7243271</doc-number>
<kind>B2</kind>
<name>Teegan et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2002/0091815</doc-number>
<kind>A1</kind>
<name>Anderson et al.</name>
<date>20020700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2005/0102665</doc-number>
<kind>A1</kind>
<name>Barta et al.</name>
<date>20050500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2005/0265247</doc-number>
<kind>A1</kind>
<name>Bourke-Dunphy et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370249</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2005/0289538</doc-number>
<kind>A1</kind>
<name>Black-Ziegelbein et al.</name>
<date>20051200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0080413</doc-number>
<kind>A1</kind>
<name>Oprea et al.</name>
<date>20060400</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709220</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>2006/0179116</doc-number>
<kind>A1</kind>
<name>Speeter et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>709217</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>2007/0156430</doc-number>
<kind>A1</kind>
<name>Kaetker et al.</name>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>2009/0300164</doc-number>
<kind>A1</kind>
<name>Boggs et al.</name>
<date>20091200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>2010/0083145</doc-number>
<kind>A1</kind>
<name>Schang et al.</name>
<date>20100400</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>2010/0162201</doc-number>
<kind>A1</kind>
<name>Shnaiderman et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>717101</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>2011/0035629</doc-number>
<kind>A1</kind>
<name>Noller et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714 3814</main-classification></classification-national>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>&#x201c;Desktop Central 7,&#x201d; Server and Desktop Management Software, retrieved from http://www.manageengine.com/products/desktop-central/server-management.html on Jun. 29, 2010 (4 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>&#x201c;O &#x26; O Enterprise Management Console 3 ,&#x201d; The Central Management for your Network, retrieved from http://www.oo-software.com/corp/en/products/ooemc/index.html on Jun. 29, 2010 (2 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>&#x201c;Patch and Remediation,&#x201d; Lumension Endpoint Management and Security Suite, retrieved from http://www.sans.org/top-cyber-security-risks/summary.php on Jun. 29, 2010 (2 pages).</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>17</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>5</number-of-drawing-sheets>
<number-of-figures>7</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120198438</doc-number>
<kind>A1</kind>
<date>20120802</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Auer</last-name>
<first-name>John</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Auer</last-name>
<first-name>John</first-name>
<address>
<city>Milpitas</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Hewlett-Packard Development Company, L.P.</orgname>
<role>02</role>
<address>
<city>Houston</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Wang</last-name>
<first-name>Philip</first-name>
<department>2197</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Systems, methods, and apparatus to deploy software are disclosed. An example method comprises storing a configuration of a software suite at a first computer in an object data store, wherein the software suite comprises a first component and a second component, and wherein the configuration comprises a deployment location for each of the first and second components, and a shared parameter of the first and second components; probing a second computer to determine if the first component is deployed, the second computer being indicated by the deployment location of the first component; retrieving the shared parameter of the first and second components from the object data store; establishing a connection from the first computer to the second computer; and transmitting from the first computer to the second computer an instruction to install the first component using the shared parameter via the connection.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="133.60mm" wi="121.50mm" file="US08627311-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="241.89mm" wi="182.03mm" file="US08627311-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="207.52mm" wi="148.51mm" orientation="landscape" file="US08627311-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="222.76mm" wi="169.25mm" file="US08627311-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="248.24mm" wi="185.17mm" file="US08627311-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="172.47mm" wi="170.86mm" file="US08627311-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading>
<p id="p-0002" num="0001">This disclosure relates generally to software deployment and, more particularly, to systems, methods, and apparatus to deploy software.</p>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Many companies implementing computerized services seek to provide consistent service to all of their users. Some computerized services require multiple components to operate. For example, a software suite may have a web server front end combined with a database back end. The software suite providing the services may be distributed among multiple computers to provide redundancy and/or balance the processing load among the computers. The web server front end may be hosted by a first computer, while the database back end may be hosted by a second computer.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example network.</p>
<p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of the example software deployer shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating an example software component layout on the example network of <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0007" num="0006"><figref idref="DRAWINGS">FIGS. 4-6</figref> are flowcharts representative of example processes that may be executed to implement the example software deployer of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>.</p>
<p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an example computer that may execute, for example, the processes of <figref idref="DRAWINGS">FIGS. 4-6</figref> to implement the example software deployer of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0009" num="0008">Enterprise software suites typically comprise many software components on many computers. Installing and upgrading the software components of an enterprise software suite is often difficult and typically needs to be performed by experts skilled in installing that particular enterprise software suite. In some situations, there may be tens or hundreds of individual software components having complex inter-dependencies. In many instances, an installation plan for the software components is manually generated by a system administrator. Software components are then individually installed according to the plan.</p>
<p id="p-0010" num="0009">Typical software installation applications work on one computer at a time in isolation from other computers that include other components of the enterprise software suite. Such individual installation processes are prone to errors as many of the operations are performed by operators, and operators can specify incorrect configurations. Further, when errors are made during installations and/or upgrades, the resulting problems might not manifest until much later in the installation process, or even after the installation process is complete. Such problems are difficult to diagnose and sometimes impractical to fix without re-installing the entire enterprise software suite.</p>
<p id="p-0011" num="0010">The software deployment system disclosed herein allows a system administrator to develop an installation plan for software components from a single user interface, perform the installation via the interface, validate software configurations and/or installation plans throughout the software installation process, and perform inter-computer dependency checking.</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram of an example network <b>100</b>. The example network <b>100</b> includes a network infrastructure <b>105</b>, a software deployer <b>110</b>, and a plurality of computers <b>113</b>. In the illustrated example, the computers <b>113</b> comprise a first computer <b>115</b>, a second computer <b>120</b>, and a third computer <b>125</b>. The network infrastructure <b>105</b> of the illustrated example is a wired Ethernet network implementing the Institute of Electrical and Electronics Engineers (IEEE) 802.3 standard. However, any other networking standard may additionally or alternatively be implemented. For example, the network infrastructure <b>105</b> may be a wireless network implementing an IEEE <b>802</b>.<b>11</b> wireless standard. Further, multiple networking standards may be used within the same network infrastructure. For example, both wireless and wired networking standards may be used. Further still, the network infrastructure <b>105</b> may include virtual networks.</p>
<p id="p-0013" num="0012">The software deployer <b>110</b> of the illustrated example is a desktop computer. However, any other type of computing device may additionally or alternatively be used. For example, the software deployer <b>110</b> may be implemented by one or more of a laptop computer, a desktop computer, a tablet computer, a server, a mobile device, etc. The software deployer <b>110</b> deploys software components of a software suite to the computers <b>113</b>. The software deployer <b>110</b> receives a configuration of a software suite, plans a deployment of the software components of the software suite among the computers <b>113</b>, and performs the deployment by connecting to each of the computers <b>113</b> to transmit the software components and provide instructions to install the software components.</p>
<p id="p-0014" num="0013">In the illustrated example, each of the computers <b>113</b> onto which the software suite is to be deployed is a server. However any other type of computing device(s) may additionally or alternatively be used. For example, the computers <b>113</b> may be desktop computers, laptop computers, blade servers, etc. Each of the computers <b>113</b> may have any hardware configuration. For example, the computers <b>113</b> may have any quantity and type of processors, random access memory (RAM), storage space, etc. The processors of the computers may be any architecture. For example, sixty-four bit processors may be used in the computers <b>113</b>. The computers <b>113</b> may not all be of the same hardware configuration. For example, one of the computers <b>113</b> may have a sixty-four bit processor and eight gigabytes of random access memory while another one of the computers <b>113</b> may have a thirty-two bit processor and two gigabytes of random access memory. Further, while in the illustrated example, the computers <b>113</b> are physical computers, one or more of the computers <b>113</b> may be implemented by virtual computers.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram of the example software deployer <b>110</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. The software deployer <b>110</b> of the illustrated example includes a configuration receiver <b>205</b>, an object store populater <b>210</b>, a dependency comparator <b>215</b>, a sequence engine <b>220</b>, an installation plan generator <b>225</b>, a centralized object data store <b>230</b>, a network communicator <b>235</b>, a deployer <b>240</b>, a user interface <b>245</b>, and a validator <b>250</b>.</p>
<p id="p-0016" num="0015">The sequence engine <b>220</b> of the illustrated example receives a configuration file <b>221</b> representing configuration parameters of a software suite. The configuration file <b>221</b> of the illustrated example is an extensible markup language (XML) file. However, any other type of file may additionally or alternatively be used. For example, a comma separated value (CSV) file, a text file, a binary file, etc. may be used. The configuration parameters of the configuration file <b>221</b> define parameters of the software suite. For example, the configuration file <b>221</b> of the illustrated example defines which components of the software suite will be installed on a given machine. Additionally or alternatively, the configuration file <b>221</b> may include information about the machine such as, for example, a processor type, an amount of available memory, an administrator username for accessing the machine, an operating system and/or platform identifier, etc. The configuration file <b>221</b> is created by a system administrator and allows the system administrator to specify parameters specific to the deployment of the software suite in a system under the control of the system administrator. The configuration file <b>221</b> in the illustrated example is received via the network communicator <b>235</b>. However, the configuration file <b>221</b> may be received in any other manner. For example, a system administrator may input the configuration via the user interface <b>245</b>.</p>
<p id="p-0017" num="0016">In some examples, the configuration parameters are shared between components of the software suite. For example, a database may accept connections on a Transmission Control Protocol (TCP) port number and a web application may connect to the database via the port number. In such an example, the port number is a shared parameter between the components that might otherwise be independent. In some examples, the sequence engine <b>220</b> inspects the configuration received by the configuration receiver <b>205</b>. In some cases, the configuration may omit some of the software components of the software suite. For example, a system administrator may not have been aware that a configuration parameter was required for a particular software component.</p>
<p id="p-0018" num="0017">Further, the software deployer <b>110</b> of the illustrated example includes or utilizes a sequence. The sequence may for example, be software or code that defines a list of actions that might be performed to deploy a software suite. For a given software suite, multiple sequences may exist. For example, an example sequence might be used for installing a software suite as a clean install (e.g., the software suite was not previously deployed) while, in another example, an example sequence might be used for upgrading a software suite (e.g., a previous version of the software suite and/or components of the software suite had been installed). In any case, the example sequence is specific to the software suite, but also allows new product families and administration functions to be integrated rapidly into the software deployer <b>110</b>. In some examples, the example sequence is developed by a sequence designer (e.g., a system administrator) and provided with the software suite to facilitate deployment. In the illustrated example, the sequence is an extensible markup language (XML) file stored within a storage device (e.g., a memory) of the software deployer <b>110</b>. However any type of file, type of storage, and/or storage may location may additionally or alternatively used.</p>
<p id="p-0019" num="0018">The sequence engine <b>220</b> then manages the sequence by sequentially instructing components of the software deployer <b>110</b> to perform actions to deploy the software suite.</p>
<p id="p-0020" num="0019">The sequence engine <b>220</b> invokes the validator <b>250</b> to inspect the layout and configuration, and determine if any software components are missing. When a software component is missing (e.g., not already deployed), the missing software component is added to the layout and configuration. In the illustrated example, a user of the software deployer <b>110</b> is prompted to accept the changes to the configuration made by the sequence engine <b>220</b>. However, in other implementations, the sequence engine <b>220</b> may not prompt the system administrator to accept the changes.</p>
<p id="p-0021" num="0020">The example sequence engine <b>220</b> may be used when upgrading software components of a previously deployed software suite. For any number of reasons, one or more software components may need to be upgraded. An upgrade to one software component of the software suite may necessitate upgrades to other components. For example, a legacy software suite may have previously been deployed and may require upgrading. In such an example, a web application software component of the software suite may include a new function that requires an update to a web server runtime. In such an example, the sequence engine <b>220</b> inspects the previously deployed software components to discover an existing layout and configuration of the deployed software components (e.g., the versions of the deployed software components, the configurations of the deployed software components). By determining the existing layout and configuration, the sequence engine <b>220</b> may determine that the web server runtime version (e.g., a legacy version of the web server runtime) does not support the newly added functionality of the web application software component. Thus, in this incorrect version example, the sequence engine <b>220</b> may add an updated version of the web server runtime to the upgraded configuration.</p>
<p id="p-0022" num="0021">After the current deployment status of the software components is known, the sequence engine <b>220</b> of the illustrated example generates the order in which software components are to be deployed. In the illustrated example, software components that other components depend upon are deployed prior to dependent software components. However, software components that do not depend on any other components may additionally or alternatively be deployed prior to deployment of other software components. In the foregoing example in which a software component is missing, the sequence engine <b>220</b> may determine that the missing software components must be deployed prior to deployment of other software components. In the foregoing example in which an incorrect version of a software component was previously installed, the sequence engine <b>220</b> may determine that the web application software component must be deployed after the proper dependencies are installed. However, any other method of determining an order of installation may additionally or alternatively be used.</p>
<p id="p-0023" num="0022">The configuration receiver <b>205</b> of the illustrated example retrieves the configuration of the software components of the software suite and deployment locations for the software components of the software suite. The configuration defines a list of computers to receive the software components (e.g., deployment locations), a list of the software components, where the software components are to be deployed (e.g., one or more computer of the computers <b>113</b>), and configuration parameters that may be specific to a software component of the software suite and alternatively shared between components of the software suite. In the illustrated example, the list of computers to receive the software components is a list of computer names. However any other method of identifying computers on a network may additionally or alternatively be used. For example, the list of computers may identify the computers by internet protocol (IP) address, media access control (MAC) address, or any other identifier(s).</p>
<p id="p-0024" num="0023">The example object store populater <b>210</b> also discovers the current state of the software components deployed to the computers <b>115</b>, <b>120</b>, and <b>125</b> via the validator <b>250</b>. The validator <b>250</b> contacts the computers <b>115</b>, <b>120</b>, and <b>125</b> to determine if a software component having the variables as defined in the configuration is installed. The example object store populater <b>210</b> causes the validator <b>250</b> to repeatedly check the deployed software components to determine an installation status of the software suite and populates the current configuration into the centralized object data store <b>230</b>.</p>
<p id="p-0025" num="0024">The dependency comparator <b>215</b> of the illustrated example evaluates the dependencies of the software components of the software suite. In particular, the dependency comparator <b>215</b> determines if a first software component of the software suite is dependent on a second software component of the software suite. The software components are not necessarily fully compiled software applications. For example, a software component of a web application may be a JAVA software library allowing the web application to respond to internet requests. In such an example, the web application (e.g., the first software component) may be dependent on the JAVA runtime (e.g., the second software component). While in the example, a web application and the JAVA software library are described, any other software components may additionally or alternatively be used. Software components of the software suite may include libraries, fully compiled applications, interpreted applications (e.g., scripts), configurations, databases, etc.</p>
<p id="p-0026" num="0025">In addition to analyzing dependencies of software components at a single computer, the dependency comparator <b>215</b> of the illustrated example evaluates remote dependencies of software components of the software suite. For example, a remote dependency exists when a first software component to be executed by a first computer is dependent upon the execution of a second software component to be executed by a second computer. For example, to provide load balancing and/or redundancy, a web application (e.g., the first software component) on a first computer displaying information stored in a remote database (e.g., the second software component) on a second computer may be dependent upon the presence, configuration, and/or operability of the remote database. While, in the described example, the first software component is only dependent on the second software component, there may also be other dependencies. For example, the first software component may be dependent on any number of local and/or remote software components. Thus, the web application of the examples described above may be dependent on both a local software library and a remote database.</p>
<p id="p-0027" num="0026">The installation plan generator <b>225</b> of the illustrated example generates an installation plan based on the order in which the software components of the software suite are to be deployed. The installation plan generated by the installation plan generator includes individual steps that must be taken to deploy the software components of the software suite. The individual steps may comprise uninstalling an old version of a software component, validating that an uninstallation was successful, installing a software component, verifying that an installation was successful, configuring a software component, validating a configuration of a software component, etc. The installation plan is stored in the centralized object data store <b>230</b>. The installation plan is an extensible markup language (XML) representation of the steps to be taken to perform the desired administration functions for a software component of a software suite (e.g., upgrade a software component, configure the software component, verify the software component, etc.). However, any other representation of the installation plan may additionally or alternatively be used such as, for example, a comma delimited representation, a binary representation, a text based representation, etc.</p>
<p id="p-0028" num="0027">The centralized object data store <b>230</b> of the illustrated example stores a model of the topography and a configuration of the software suite. The centralized object data store <b>230</b> includes information such as relationships among software components of the software suite and the computers <b>113</b>. Further, the centralized object data store <b>230</b> stores the planned and actual configurations of the software suite. The planned and actual configurations of the software suite are updated by the object store populater <b>210</b>. Additionally, the centralized object data store <b>230</b> stores data such as software component configuration values, internet port assignments, and database configurations. For example, the software suite may include a database that serves data via an authenticated connection (e.g., the connection requires a username and password). In such an example, the centralized object data store <b>230</b> may store credentials in association with the software components that request data from the database.</p>
<p id="p-0029" num="0028">The centralized object data store <b>230</b> may be any device for storing data such as, for example, flash memory, magnetic media, optical media, etc. Furthermore, the data stored in the centralized object data store <b>230</b> may be in any data format such as, for example, binary data, comma delimited data, tab delimited data, structured query language (SQL), etc. While in the illustrated example the centralized object data store <b>230</b> is illustrated as a single database, the centralized object data store <b>230</b> may be implemented by multiple databases.</p>
<p id="p-0030" num="0029">The network communicator <b>235</b> of the illustrated example communicates with the computers <b>113</b> via the network infrastructure <b>105</b>. In the illustrated example, the network communicator <b>235</b> is a wired Ethernet connection implementing the IEEE <b>802</b>.<b>3</b> standard. However any other networking adapter or method of communication with external devices may additionally or alternatively be used such as, for example WiFi connection, a Bluetooth connection, a cellular connection such as Time Division Multiple Access (TDMA), Code Division Multiple Access (CDMA), Worldwide Interoperability for Microwave Access (WiMAX), Long Term Evolution (LTE), etc. Further, while in the illustrated example, the software deployer <b>110</b> is present on the same physical network as the computers <b>113</b>, the network communicator <b>235</b> of the software deployer <b>110</b> may be a virtual networking adapter communicating with the computers <b>113</b> via a virtual private network (VPN).</p>
<p id="p-0031" num="0030">The deployer <b>240</b> of the illustrated example deploys the software components to the computers <b>113</b> based on the installation plan created by the installation plan generator <b>225</b>. The deployer <b>240</b> communicates with target computers (e.g., the first, second, and/or third computers <b>115</b>, <b>120</b>, <b>125</b>) via the network communicator <b>235</b>. Deployment of software components is performed by establishing a connection with the target computer and issuing commands via the connection. The connection is established via a secure shell (SSH) connection. However, any other method of establishing the connection may additionally or alternatively be used. In the illustrated example, a specialized agent does not need to reside on each of the computers <b>113</b> to receive commands from the software deployer <b>110</b>. However, other implementations may utilize specialized agents residing on each computer of the plurality of computers <b>113</b>. Once the connection is established, the deployer <b>240</b> issues commands to the target computer via the connection to complete the installation of the software component. The deployer <b>240</b> then repeats the process for each software component to be deployed and each computer on which software components are to be deployed. In the illustrated example, if multiple software components are to be deployed to a target computer, the connection is reused and therefore a second connection to the target computer need not be established. However, the deployer <b>240</b> may terminate the connection at the completion of the deployment of each software component and establish a new connection for each software component.</p>
<p id="p-0032" num="0031">The user interface <b>245</b> of the illustrated example allows the user to install, upgrade, and manage the software suite across all of the computers <b>113</b>. The user interface <b>245</b> displays system status to the system administrator and receives input from the system administrator. The user interface <b>245</b> includes a sequencing display allowing the system administrator to view and/or edit the parameters and/or deployment locations defined via the configuration file, a layout display allowing the system administrator to view and/or edit the selected software component layouts, a status display allowing the system administrator to quickly determine the current status of the installation, etc. The status display may additionally or alternatively allow the system administrator to drill down into the specifics of the installation (e.g., the commands being issued by the deployer <b>240</b>, etc.). Further, the status display may allow the system administrator to start and/or stop individual software components of the software suite at any point during, and/or after the software deployment. For example, if a system administrator detects a problem with a software component, they may stop or terminate the component, correct the problem and then start or begin execution of the component.</p>
<p id="p-0033" num="0032">The validator <b>250</b> of the illustrated example validates software components, hardware components, and installation statuses at various stages of deployment. For example, the validator <b>250</b> may, after deployment of a first software component, validate that the installation and/or configuration of the first software component completed correctly and that the deployment process is ready to proceed to the next step. While in the example described above, the validator <b>250</b> validates the installation and/or configuration of a software component, the validator <b>250</b> may additionally or alternatively perform distributed prerequisite checking. Such distributed prerequisite checking may include validation of factors such as computer-to-computer connectivity, clock skew, hardware configurations, etc. The prerequisite checking may be distributed as some tests (e.g., computer connectivity tests) must be performed by multiple computers. For example, in a computer-to-computer connectivity test, the validator <b>250</b> instructs a first computer to test connectivity to a second computer, while the validator <b>250</b> has also instructed the second computer to receive connections from the first computer. An example validation may comprise checking a processor architecture of a computer. For example, a software library may require a sixty-four bit processor and, therefore, the validator <b>250</b> may validate that the software library is associated with (e.g., installed on) a computer having a sixty-four bit processor.</p>
<p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. 3</figref> is a diagram illustrating an example software component layout <b>300</b> on the example network <b>100</b> of <figref idref="DRAWINGS">FIG. 1</figref>. The example layout <b>300</b> comprises software components to be deployed to the first computer <b>115</b>, the second computer <b>120</b>, and the third computer <b>125</b>. The software components that are included in the example layout <b>300</b> are software runtimes and libraries <b>305</b>, database components <b>310</b>, a database <b>315</b>, database access components <b>320</b>, database monitoring components <b>325</b>, a web server <b>330</b>, and a web application <b>335</b>. While the example layout <b>300</b> illustrates three computers executing software components for a database driven web application, any other software suite having any other layout and/or configuration may additionally or alternatively be used.</p>
<p id="p-0035" num="0034">The first computer <b>115</b> includes the software runtimes and libraries <b>305</b>, the database components <b>310</b>, and the database <b>320</b>. The database components <b>310</b> are dependent upon the software runtimes and libraries <b>305</b>. In the illustrated example, the software runtimes and libraries <b>305</b> are runtimes such as runtimes for the JAVA environment. However, any other software runtimes and libraries <b>305</b> may additionally or alternatively be used. The database components <b>310</b> are software components for executing the database <b>315</b>. In the illustrated example, the database components <b>310</b> are software components of an Oracle database. However, any other type of database may additionally or alternatively used. For example, the database components <b>310</b> may be components of a structured query language (SQL) database. The database <b>315</b> is dependent upon the database components <b>310</b>. In the illustrated example, the database <b>315</b> comprises database structures such as tables and views for storing and viewing information in the database <b>315</b>.</p>
<p id="p-0036" num="0035">The second computer <b>120</b> includes software runtimes and libraries <b>305</b>, the database access components <b>320</b>, the web server <b>330</b>, and the web application <b>335</b>. The database access components <b>320</b> are dependent upon both the database <b>315</b> of the first computer <b>115</b> and the software runtimes and libraries <b>305</b> of the second computer <b>120</b>. The database access component <b>320</b> is remotely dependent upon the configuration and operation of the database <b>315</b> on the first computer <b>115</b>. Remote dependencies occur when one software component requires another software component executed by another computer to be installed, configured, and/or operating for proper operation.</p>
<p id="p-0037" num="0036">Both the database access components <b>320</b> and the web application <b>335</b> of the illustrated example are dependent upon the software runtimes and libraries <b>305</b>. However, in the illustrated example, different configurations of the software runtimes and libraries <b>305</b> are specified. For example, the database access components <b>320</b> require Open Database Connectivity (ODBC) libraries, while the web application <b>335</b> requires a Python scripting language runtime. In the illustrated example, there is no conflict between the software runtimes and libraries <b>305</b> required by the database access components <b>320</b> and the web application <b>335</b>. However, if there was a conflict (e.g., multiple versions of the same library were required), the system administrator would be informed of the conflict and allowed to manipulate the configuration to avoid the dependency conflict. Further, while in the illustrated example, the software runtimes and libraries <b>305</b> are ODBC libraries and Python libraries, any other software runtimes and/or libraries may be additionally or alternatively used.</p>
<p id="p-0038" num="0037">The third computer <b>125</b> includes software runtimes and libraries <b>305</b>, database access components <b>320</b>, and database monitoring components <b>325</b>. Similar to the database access components <b>320</b> of the second computer <b>120</b>, the database access components <b>320</b> of the third computer <b>125</b> are dependent upon the database <b>315</b> of the first computer <b>115</b>. Further, the database access components <b>320</b> of the third computer <b>125</b> are also dependent upon the software runtimes and libraries <b>305</b> of the third computer <b>125</b>. The database monitoring components <b>325</b> of the third computer <b>125</b> are dependent upon the database access components <b>320</b> of the third computer <b>320</b>.</p>
<p id="p-0039" num="0038">An example order of installation for deployment of the example software component layout <b>300</b> may comprise deploying the software components in phases. The software runtimes and libraries <b>305</b> of the first computer <b>115</b> are deployed in a first phase, the database components <b>310</b> of the first computer <b>115</b> are deployed in a second phase, and the database <b>315</b> of the first computer <b>115</b> are deployed in a third phase. Once the first, second, and third phases are complete (e.g., the phases in which software components are deployed to the first computer <b>115</b>), the software deployer <b>110</b> deploys the software components to be deployed to the second computer <b>120</b>. The software deployer <b>110</b> deploys the software runtimes and libraries <b>305</b> of the second computer <b>120</b> in a fourth phase, the database access components <b>320</b> of the second computer <b>120</b> in a fifth phase, the web server <b>330</b> of the second computer <b>120</b> in a sixth phase, and the web application <b>335</b> in a seventh phase. Finally, once the fourth through seventh phases are complete (e.g., the phases in which software is to be deployed to the second computer <b>120</b>), the software deployer <b>110</b> deploys the software components to be deployed to the third computer <b>125</b>. The software deployer <b>110</b> deploys the software runtimes and libraries <b>305</b> of the third computer <b>125</b> in an eighth phase, the database access components <b>320</b> of the third computer <b>125</b> in a ninth phase, and the database monitoring components <b>325</b> of the third computer <b>125</b> in a tenth phase. While in the illustrated example, each phase comprises only a single software component, multiple software components may be included in a single phase. For example, the software runtimes and libraries <b>305</b> may be deployed to the first computer <b>115</b>, the second computer <b>120</b>, and the third computer <b>125</b> within a single deployment phase.</p>
<p id="p-0040" num="0039">While in the illustrated example, software components are deployed to the computers in sequential phases ordered by computer (e.g., all software components of the first computer <b>115</b>, then all software components of the second computer <b>120</b>, then all software components of the third computer <b>125</b>), the software components do not necessarily need to be deployed in that order. For example, all software runtimes and libraries <b>305</b> may first be deployed to each of the first computer <b>115</b>, the second computer <b>120</b>, and the third computer <b>125</b>. Further, in the illustrated example, software components are deployed serially. However, the software components may alternatively be deployed in parallel. For example, the software runtimes and libraries <b>305</b> to be deployed to each of the first computer <b>115</b>, the second computer <b>120</b>, and the third computer <b>125</b> may be deployed at the same time, thereby reducing the overall time for deployment but increasing the complexity of monitoring the installation progress. In another example of parallel deployment, after deployment of the database <b>315</b> to the first computer <b>115</b>, the software deployer <b>110</b> may deploy software components that are dependent upon the database <b>315</b> of the first computer <b>115</b> (e.g., the database access components <b>320</b> of the second and third computers <b>120</b>, <b>125</b>).</p>
<p id="p-0041" num="0040">While an example manner of implementing the software deployer <b>110</b> of <figref idref="DRAWINGS">FIG. 1</figref> has been illustrated in <figref idref="DRAWINGS">FIG. 2</figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. 2</figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example configuration receiver <b>205</b>, the example object store populater <b>210</b>, the example dependency comparator <b>215</b>, the example sequence engine <b>220</b>, the example sequence, the example installation plan generator <b>225</b>, the example centralized object data store <b>230</b>, the example network communicator <b>235</b>, the example deployer <b>240</b>, the example user interface <b>245</b>, the example validator <b>250</b>, and/or, more generally, the example software deployer <b>110</b> of <figref idref="DRAWINGS">FIGS. 1 and 2</figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example configuration receiver <b>205</b>, the example object store populater <b>210</b>, the example dependency comparator <b>215</b>, the example sequence engine <b>220</b>, the example sequence, the example installation plan generator <b>225</b>, the example centralized object data store <b>230</b>, the example network communicator <b>235</b>, the example deployer <b>240</b>, the example user interface <b>245</b>, the example validator <b>250</b>, and/or, more generally, the example software deployer <b>110</b> could be implemented by one or more circuit(s), programmable processor(s), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and/or field programmable logic device(s) (FPLD(s)), etc. When any of the appended apparatus claims are read to cover a purely software and/or firmware implementation, at least one of the example configuration receiver <b>205</b>, the example object store populater <b>210</b>, the example dependency comparator <b>215</b>, the example sequence engine <b>220</b>, the example sequence, the example installation plan generator <b>225</b>, the example centralized object data store <b>230</b>, the example network communicator <b>235</b>, the example deployer <b>240</b>, the example user interface <b>245</b>, and/or the example validator <b>250</b>, and/or, more generally, the example software deployer <b>110</b> of <figref idref="DRAWINGS">FIGS. 1 and 2</figref> are hereby expressly defined to include a computer readable medium such as a memory, DVD, CD, etc. storing the software and/or firmware. Further still, the example software deployer of <figref idref="DRAWINGS">FIGS. 1 and 2</figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIGS. 1 and 2</figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p>
<p id="p-0042" num="0041">Flowcharts representative of example processes for implementing the software deployer <b>110</b> of <figref idref="DRAWINGS">FIGS. 1 and 2</figref> are shown in <figref idref="DRAWINGS">FIGS. 4-6</figref>. In these examples, the processes comprise a program(s) for execution by a processor such as a processor <b>712</b> shown in an example computer <b>700</b> discussed below in connection with <figref idref="DRAWINGS">FIG. 7</figref>. The program may be embodied in software stored on a computer readable medium such as a CD-ROM, a floppy disk, a hard drive, a digital versatile disk (DVD), or a memory associated with the processor <b>712</b>, but the entire program and/or parts thereof could alternatively be executed by a device other than the processor <b>712</b> and/or embodied in firmware or dedicated hardware. Further, although the example program(s) is described with reference to the flowcharts illustrated in <figref idref="DRAWINGS">FIGS. 4-6</figref>, many other methods of implementing the example software deployer <b>110</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined.</p>
<p id="p-0043" num="0042">As mentioned above, the example processes of <figref idref="DRAWINGS">FIGS. 4-6</figref> may be implemented using coded instructions (e.g., computer readable instructions) stored on a tangible computer readable medium such as a hard disk drive, a flash memory, a read-only memory (ROM), a compact disk (CD), a digital versatile disk (DVD), a cache, a random-access memory (RAM) and/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively, the example processes of <figref idref="DRAWINGS">FIGS. 4-6</figref> may be implemented using coded instructions (e.g., computer readable instructions) stored on a non-transitory computer readable medium such as a hard disk drive, a flash memory, a read-only memory, a compact disk, a digital versatile disk, a cache, a random-access memory and/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the term non-transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.</p>
<p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. 4</figref> is a flowchart representative of an example process <b>400</b> that may be executed to implement an example deployment process of the example software deployer of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>. The process of <figref idref="DRAWINGS">FIG. 4</figref> begins at block <b>405</b>, when the configuration receiver <b>205</b> of the software deployer <b>110</b> receives a configuration representing software components of a software suite and computers on which the software components are to be installed (block <b>405</b>). The configuration includes a list of computers included in a software suite deployment and a layout of the software components of the software suite among the computers. In the illustrated example, the centralized object data store <b>230</b> receives the configuration file <b>221</b> (block <b>410</b>) via an XML interpreter. However any other method of receiving the configuration may additionally or alternatively be used. For example, the centralized object data store <b>230</b> may receive the configuration via user input, and/or user input may be used to supplement the configuration file. Further, while in the illustrated example an XML configuration file is used, any other type of file specifying the configuration may additionally or alternatively be used.</p>
<p id="p-0045" num="0044">The validator <b>250</b> then proceeds to validate the configuration (block <b>415</b>). Validation is performed to determine if all software components are placed on a computer. For example, if a configuration specified a web application serving data from a database, but no configuration parameters for the database were present, the configuration would fail validation. If validation failed, an administrator is prompted to correct the error (block <b>413</b>). The configuration is then re-validated to determine that no other validation problems exist.</p>
<p id="p-0046" num="0045">If the layout is valid (block <b>415</b>), the validator <b>250</b> validates the computers to which the software components of the software suite are to be deployed (block <b>420</b>). In determining if the computers are valid, the validator <b>250</b> of the illustrated example checks computer-to-computer connectivity, clock skew, and hardware configurations. The computer-to-computer connectivity test is described in more detail in conjunction with FIG. <b>6</b>. If the validator <b>250</b> encounters any errors in validation, the administrator is prompted (block <b>413</b>). The administrator may then correct any configuration errors. Control then proceeds to block <b>415</b> where the layout is re-validated to ensure that any layout changes to account for a computer validation error encountered in block <b>420</b> are valid. If there are no validation errors, control proceeds to block <b>425</b>.</p>
<p id="p-0047" num="0046">The installation plan generator <b>225</b> then sequences an installation plan according to the configuration stored in the centralized object data store and the sequence (block <b>425</b>). For example, the installation plan may be sequenced based on the configuration shown in <figref idref="DRAWINGS">FIG. 3</figref>. In such an example, the installation plan may be sequenced such that the order of installation is based on dependency of the components of the software suite. For example, components with no dependencies may be installed first, with components dependent upon the components with no dependencies being sequentially installed until all components are deployed. In the illustrated example, the installation plan is structured such that components are deployed serially (e.g., one at a time), however alternative installation plans may be structured such that components are deployed in parallel.</p>
<p id="p-0048" num="0047">The deployer <b>240</b> then deploys a software component of the software suite according to the installation plan (block <b>430</b>). The deployment process is described in detail in conjunction with <figref idref="DRAWINGS">FIG. 5</figref>. Once the software component is deployed, control proceeds to block <b>435</b> where an updated status of the installation is displayed via the user interface <b>245</b>. Additionally or alternatively, the validator <b>250</b> may validate that the software component installed by the deployer <b>240</b> in block <b>430</b> was deployed properly, configured properly, and/or is functioning properly (block <b>432</b>). If validation of the deployed software component fails, the administrator may be prompted to correct the errors. This additional validation step may be performed at any time during the installation process. In the illustrated example, software components are validated as they are deployed, however alternative validation techniques may validate multiple software components at the end of the deployment process.</p>
<p id="p-0049" num="0048">Next, the deployer <b>240</b> determines if all software components have been deployed (block <b>440</b>). If additional software components need to be deployed, control returns to block <b>430</b> where subsequent software components are deployed according to the installation plan. If all software components have been deployed, the user interface <b>245</b> displays installation results (block <b>445</b>). For example, the user interface <b>245</b> displays a table having a list of each component deployed, each validation performed, and the results thereof. However, any other format of displaying results may additionally or alternatively be used.</p>
<p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. 5</figref> is a flowchart representative of an example process <b>500</b> that may be executed to implement the example software deployer of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>. The example process <b>500</b> implements the deployment process of the deployer <b>240</b>, at block <b>430</b> of <figref idref="DRAWINGS">FIG. 4</figref>. The process of <figref idref="DRAWINGS">FIG. 5</figref> begins at block <b>505</b> when the deployer <b>240</b> initiates a connection to a computer to which a software component is to be deployed. The connection in the illustrated example is an SSH connection and allows the deployer <b>240</b> to send commands to the computer over the network infrastructure <b>105</b>. However, any other type of connection may additionally or alternatively be used such as, for example, a terminal connection, an FTP connection, etc. Next, the deployer <b>240</b> transmits the software component to be deployed to the computer via the connection (block <b>510</b>). In the illustrated example, the deployer <b>240</b> transmits the software component via the SSH connection. However, in other implementations, another alternative connection may be opened such as, for example, an FTP connection. Finally, the deployer <b>240</b> instructs the computer to install the software component (block <b>515</b>). In the illustrated example, the deployer <b>240</b> instructs the computer to install the software component via the connection established in block <b>505</b>. Once the software component is installed, the process <b>500</b> of <figref idref="DRAWINGS">FIG. 5</figref> complete execution and control returns to block <b>430</b> of <figref idref="DRAWINGS">FIG. 4</figref>.</p>
<p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. 6</figref> is a flowchart representative of example process <b>600</b> that may be executed to implement the computer connectivity validation of the block <b>420</b> of <figref idref="DRAWINGS">FIG. 4</figref>. The computer connectivity validation is one of many types of validation that may be implemented by the validator <b>250</b> as part of the computer validation block (block <b>420</b>) of <figref idref="DRAWINGS">FIG. 4</figref>. The computer connectivity validation confirms that a first computer can communicate with a second computer. For example, if a database is installed on the first computer and a web application serving data stored in the database is installed on the second computer, the second computer must be able to communicate with the first computer.</p>
<p id="p-0052" num="0051">The process of <figref idref="DRAWINGS">FIG. 6</figref> begins at block <b>605</b>, where the validator <b>250</b> connects to the first computer <b>115</b>. In the illustrated example, the validator <b>250</b> connects to the first computer <b>115</b> via the network communicator <b>235</b> by creating an SSH connection. However, any other type of connection may additionally or alternatively be used. Next, the validator <b>250</b> connects to the second computer <b>120</b> via a similar connection (block <b>610</b>). The validator <b>250</b> then instructs the first computer <b>115</b> to receive a connection from the second computer <b>120</b> (block <b>615</b>). In the illustrated example, the first computer <b>115</b> listens for a connection request on an unused port; however, any other method of receiving and/or waiting for a connection may additionally or alternatively be used. Next, the validator <b>250</b> instructs the second computer <b>120</b> to connect to the first computer <b>115</b> (block <b>620</b>). The validator <b>250</b> then determines if the connection request from the second computer <b>120</b> to the first computer <b>115</b> was received by the first computer <b>115</b> (block <b>625</b>). For example, the validator <b>250</b> may query the first computer to determine if the connection was received from the second computer. If the connection was received, the validator <b>250</b> completes the computer connectivity validation and returns to block <b>420</b> of <figref idref="DRAWINGS">FIG. 4</figref>. If the connection was not received, the validator <b>250</b> halts deployment by returning to block <b>420</b> of <figref idref="DRAWINGS">FIG. 4</figref> and control proceeds to block <b>413</b> to prompt the administrator.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. 7</figref> is a block diagram of an example computer <b>700</b> capable of executing the processes of <figref idref="DRAWINGS">FIGS. 4-6</figref> to implement the software deployer <b>110</b> of <figref idref="DRAWINGS">FIGS. 1 and 2</figref>. The computer <b>700</b> can be, for example, a server, a personal computer (e.g., a laptop or a desktop), a mobile phone (e.g., a cell phone), a personal digital assistant (PDA), an Internet appliance, or any other type of computing device.</p>
<p id="p-0054" num="0053">The system <b>700</b> of the instant example includes a processor <b>712</b>. For example, the processor <b>712</b> can be implemented by one or more Intel&#xae; microprocessors from the Pentium&#xae; family, the Itanium&#xae; family or the XScale&#xae; family. Of course, other processors from other families are also appropriate.</p>
<p id="p-0055" num="0054">The processor <b>712</b> is in communication with a main memory including a volatile memory <b>718</b> and a non-volatile memory <b>720</b> via a bus <b>722</b>. The volatile memory <b>718</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM) and/or any other type of random access memory device. The non-volatile memory <b>720</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>714</b> is typically controlled by a memory controller (not shown).</p>
<p id="p-0056" num="0055">The computer <b>700</b> also includes an interface circuit <b>724</b>. The interface circuit <b>724</b> may be implemented by any type of interface standard, such as an Ethernet interface, a universal serial bus (USB), and/or a PCI express interface.</p>
<p id="p-0057" num="0056">One or more input devices <b>726</b> are connected to the interface circuit <b>724</b>. The input device(s) <b>726</b> permit a user to enter data and commands into the processor <b>712</b>. The input device(s) can be implemented by, for example, a keyboard, a mouse, a touchscreen, a track-pad, a trackball, isopoint and/or a voice recognition system.</p>
<p id="p-0058" num="0057">One or more output devices <b>728</b> are also connected to the interface circuit <b>724</b>. The output devices <b>728</b> can be implemented, for example, by display devices (e.g., a liquid crystal display, a cathode ray tube display (CRT), a printer and/or speakers). The interface circuit <b>724</b>, thus, typically includes a graphics driver card.</p>
<p id="p-0059" num="0058">The interface circuit <b>724</b> also includes a communication device (e.g., the network communicator <b>235</b>) such as a modem or network interface card to facilitate exchange of data with external computers via a network (e.g., an Ethernet connection, a digital subscriber line (DSL), a telephone line, coaxial cable, a cellular telephone system, etc.).</p>
<p id="p-0060" num="0059">The computer <b>700</b> also includes one or more mass storage devices <b>730</b> for storing software and data. Examples of such mass storage devices <b>730</b> include floppy disk drives, hard drive disks, compact disk drives and digital versatile disk (DVD) drives. The mass storage device <b>730</b> may implement the centralized object data store <b>230</b>.</p>
<p id="p-0061" num="0060">The coded instructions <b>732</b> of <figref idref="DRAWINGS">FIGS. 4-6</figref> may be stored in the mass storage device <b>730</b>, in the volatile memory <b>718</b>, in the non-volatile memory <b>720</b>, and/or on a removable storage medium such as a CD or DVD.</p>
<p id="p-0062" num="0061">From the foregoing, it will appreciated that the above disclosed methods, apparatus and articles of manufacture allows the sequence designer (e.g., a system administrator) to develop an installation plan for all software components from a single user interface, perform the installation via the interface, validate software configurations and/or installation plans throughout the software installation process, and perform inter-computer dependency checking.</p>
<p id="p-0063" num="0062">Although certain example methods, apparatus and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method comprising:
<claim-text>storing a configuration of a software suite at a first computer in an object data store, wherein the software suite comprises a first component and a second component, and wherein the configuration comprises (1) a deployment location for each of the first and second components, and (2) a shared parameter of the first and second components;</claim-text>
<claim-text>probing a second computer to determine if the first component is deployed, the second computer being indicated by the deployment location of the first component;</claim-text>
<claim-text>retrieving the shared parameter of the first and second components from the object data store;</claim-text>
<claim-text>establishing a first connection from the first computer to the second computer;</claim-text>
<claim-text>validating that the second computer can communicate with a third computer, the third computer different than the first computer, the third computer being indicated by the deployment location of the second component; and</claim-text>
<claim-text>in response to the validating, transmitting from the first computer to the second computer an instruction to install the first component using the shared parameter via the first connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining if the second computer is capable of executing the first component.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method as described in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein transmitting the instruction to install the first component is performed only when the second computer is capable of executing the first component.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method as described in <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising prompting a user to provide an alternate deployment location if the second computer is not capable of executing the first component.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:
<claim-text>probing a third computer to determine if the second component is deployed;</claim-text>
<claim-text>establishing a second connection from the first computer to the third computer; and</claim-text>
<claim-text>transmitting from the first computer to the third computer an instruction to install the second component using the shared parameter via the second connection.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising populating the object data store by scanning the deployment locations of the first and second components for existing component layouts and software configurations.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first connection is a secure shell connection.</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising displaying at the first computer an installation status of the first and second components.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. A method comprising:
<claim-text>storing a configuration of a software suite at a first computer in an object data store, the software suite comprising a first component and a second component, and the configuration comprising a (1) deployment location for each of the first and second components and (2) a shared parameter of the first and second components;</claim-text>
<claim-text>probing a second computer to determine if the first component is deployed, the second computer being indicated by the deployment location of the first component;</claim-text>
<claim-text>retrieving the shared parameter of the first and second components from the object data store;</claim-text>
<claim-text>establishing a first connection from the first computer to the second computer;</claim-text>
<claim-text>transmitting from the first computer to the second computer an instruction to install the first component using the shared parameter via the first connection; and</claim-text>
<claim-text>determining if the second computer is capable of communication with a third computer by:
<claim-text>establishing a second connection from the first computer to the third computer, the third computer being indicated by the deployment location of the second component;</claim-text>
<claim-text>instructing, via the second connection, the third computer to accept a third connection from the second computer;</claim-text>
<claim-text>instructing, via the first connection, the second computer to connect to the third computer by establishing the third connection; and</claim-text>
<claim-text>determining, via the second connection, whether the third computer received a connection request from the second computer, wherein transmitting the instruction to install the first component is performed only when the third computer received the connection request from the second computer.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. An apparatus to deploy software, the apparatus comprising:
<claim-text>a sequence engine to receive a configuration comprising a configuration parameter of a component of a software suite and a deployment location of the component, the sequence engine to control execution of a sequence;</claim-text>
<claim-text>an object data store to store the configuration parameter and the deployment location;</claim-text>
<claim-text>an object store populater to discover an existing component deployment location and configuration parameter, the object store populate to store the existing component deployment location and configuration parameter in the object data store;</claim-text>
<claim-text>a dependency comparator to determine that a first component of the software suite to be installed on a first computer is dependent upon a second component of the software suite to be installed on a second computer;</claim-text>
<claim-text>a validator to validate that the first computer can communicate with the second computer; and</claim-text>
<claim-text>a deployer to establish a connection to the first computer and to instruct the first computer to install the first component when the first computer can communicate with the second computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The apparatus as described in <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising an installation plan generator to generate an installation plan based on the order of actions, the installation plan identifying the first component and the second component, a deployment location of each of the first and second components, and an order in which the first and second components are to be installed.</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The apparatus as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the installation plan generator removes components from the installation plan that are determined to be installed by the object store populater.</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The apparatus as described in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the object store populater is to inspect a deployment location of a first component after the deployer instructs the first computer to install the first component to determine if the first component was installed in response to the instruction.</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The apparatus as described in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the connection established by the deployer is a secure shell connection.</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The apparatus as described in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the deployer additionally transmits the first component to the first computer.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A storage disc or storage device comprising instructions which when executed cause a machine to at least:
<claim-text>receive a configuration representing components of a software suite and computers on which the components are to be installed, the configuration identifying a first component to be installed on a first computer and a second component to be installed on a second computer;</claim-text>
<claim-text>determine that the second component is dependent upon the first component;</claim-text>
<claim-text>determine that the first component should be installed in a first installation phase and that the second component should be installed in a second installation phase;</claim-text>
<claim-text>generate an installation sequence identifying the components of the software suite, the computers on which the components are to be installed, and a phase in which the components are to be installed;</claim-text>
<claim-text>initiate a first connection to the first computer;</claim-text>
<claim-text>instruct the first computer to install the first component via the first connection;</claim-text>
<claim-text>initiate a second connection to the second computer; validate that the second computer can communicate with the first computer; and</claim-text>
<claim-text>instruct the second computer to install the second component via the second connection when the second computer can communicate with the first computer.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The storage disc or storage device as described in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein a third component to be installed on the second computer is identified by the configuration file, the second component being dependent upon the third component; and wherein the instructions, when executed, further cause the machine to at least determine that the third component should be installed in the first installation phase. </claim-text>
</claim>
</claims>
</us-patent-grant>

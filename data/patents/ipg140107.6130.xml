<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627254-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627254</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13618176</doc-number>
<date>20120914</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<us-term-of-grant>
<disclaimer>
<text>This patent is subject to a terminal disclaimer.</text>
</disclaimer>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>17</main-group>
<subgroup>50</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>716115</main-classification>
</classification-national>
<invention-title id="d2e51">Method and apparatus for simultaneous switching noise optimization</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>6308305</doc-number>
<kind>B1</kind>
<name>Sugiyama et al.</name>
<date>20011000</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>7330051</doc-number>
<kind>B1</kind>
<name>Huang et al.</name>
<date>20080200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>326 38</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>7468616</doc-number>
<kind>B1</kind>
<name>Kondapalli et al.</name>
<date>20081200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>326 82</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>7728630</doc-number>
<kind>B1</kind>
<name>Ren et al.</name>
<date>20100600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>326 86</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>8205181</doc-number>
<kind>B1</kind>
<name>Singla et al.</name>
<date>20120600</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716113</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2006/0190900</doc-number>
<kind>A1</kind>
<name>Chan et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>716 13</main-classification></classification-national>
</us-citation>
</us-references-cited>
<number-of-claims>20</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>716115</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>9</number-of-drawing-sheets>
<number-of-figures>15</number-of-figures>
</figures>
<us-related-documents>
<continuation>
<relation>
<parent-doc>
<document-id>
<country>US</country>
<doc-number>12833797</doc-number>
<date>20100709</date>
</document-id>
<parent-grant-document>
<document-id>
<country>US</country>
<doc-number>8296704</doc-number>
</document-id>
</parent-grant-document>
</parent-doc>
<child-doc>
<document-id>
<country>US</country>
<doc-number>13618176</doc-number>
</document-id>
</child-doc>
</relation>
</continuation>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20130080987</doc-number>
<kind>A1</kind>
<date>20130328</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kipper</last-name>
<first-name>Michael Howard</first-name>
<address>
<city>Thornhill</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Fender</last-name>
<first-name>Joshua David</first-name>
<address>
<city>East York</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="003" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Azizi</last-name>
<first-name>Navid</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
<us-applicant sequence="004" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Goldman</last-name>
<first-name>David Samuel</first-name>
<address>
<city>Thornhill</city>
<country>CA</country>
</address>
</addressbook>
<residence>
<country>CA</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kipper</last-name>
<first-name>Michael Howard</first-name>
<address>
<city>Thornhill</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Fender</last-name>
<first-name>Joshua David</first-name>
<address>
<city>East York</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="003" designation="us-only">
<addressbook>
<last-name>Azizi</last-name>
<first-name>Navid</first-name>
<address>
<city>Markham</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
<inventor sequence="004" designation="us-only">
<addressbook>
<last-name>Goldman</last-name>
<first-name>David Samuel</first-name>
<address>
<city>Thornhill</city>
<country>CA</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Womble Carlyle Sandridge &#x26; Rice LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>Altera Corporation</orgname>
<role>02</role>
<address>
<city>San Jose</city>
<state>CA</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Chiang</last-name>
<first-name>Jack</first-name>
<department>2825</department>
</primary-examiner>
<assistant-examiner>
<last-name>Bowers</last-name>
<first-name>Brandon</first-name>
</assistant-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Methods and apparatus for reducing simultaneous switching noise (SSN) in an integrated circuit (IC) designed with a computer aided design (CAD) tool are presented. In one method, value assignments for parameters of the IC are received by the CAD tool. The value assignments are entered as a range of value. The minimum and the maximum path delays for each Input/Output (I/O) pin in an I/O block are determined such that the received value assignments are satisfied. The actual switching times of the I/O pins are spread out in time to decrease SSN in the I/O pins. The switching times are spread out so that the switching times fall between the minimum and the maximum path delay for the corresponding I/O pin.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="225.72mm" wi="161.80mm" file="US08627254-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="258.83mm" wi="152.57mm" file="US08627254-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="250.70mm" wi="181.86mm" file="US08627254-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="226.82mm" wi="165.52mm" file="US08627254-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="258.15mm" wi="143.09mm" file="US08627254-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="237.07mm" wi="135.64mm" file="US08627254-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="237.24mm" wi="150.96mm" file="US08627254-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="237.91mm" wi="161.46mm" file="US08627254-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="250.11mm" wi="161.37mm" file="US08627254-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="219.03mm" wi="181.61mm" file="US08627254-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?RELAPP description="Other Patent Relations" end="lead"?>
<heading id="h-0001" level="1">PRIORITY AND CROSS REFERENCE TO RELATED APPLICATIONS</heading>
<p id="p-0002" num="0001">This application is a continuation of prior application Ser. No. 12/833,797 entitled &#x201c;METHOD AND APPARATUS FOR SIMULTANEOUS SWITCHING NOISE OPTIMIZATION,&#x201d; filed on Jul. 9, 2010 now U.S. Pat. No. 8,296,704, which is related to U.S. patent application Ser. No. 12/557,798, filed Sep. 11, 2009 , and entitled &#x201c;REDUCING SIMULTANEOUS SWITCHING NOISE IN AN INTEGRATED CIRCUIT DESIGN DURING PLACEMENT&#x201d;; and U.S. application Ser. No. 12/034,400, filed on Feb. 20, 2008, and entitled &#x201c;SIMULTANEOUS SWITCHING NOISE ANALYSIS USING SUPERPOSITION TECHNIQUES,&#x201d; each of which is incorporated herein by reference in their entirety.</p>
<?RELAPP description="Other Patent Relations" end="tail"?>
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0002" level="1">BACKGROUND</heading>
<p id="p-0003" num="0002">Simultaneous Switching Noise (SSN) is defined as a noise voltage induced onto a single victim Input/Output (I/O) pin of an electronic component due to the switching behavior of other aggressor I/O pins in the device. This noise is considered in the context of either an output I/O driver victim or an input I/O buffer victim.</p>
<p id="p-0004" num="0003">The optimization of SSN in a Field Programmable Gate Array (FPGA) design is a multi-dimensional optimization problem. Current optimization techniques are manual and highly iterative. These iterations can take a prohibitively long time due to the nature of signoff SSN analysis tools. Additionally, the design process does not give the Computer Aided Design (CAD) tool enough information and flexibility to perform many of these optimizations without user intervention, thus increasing design time and less-than optimal quality of results.</p>
<p id="p-0005" num="0004">It is in this context that embodiments of the invention arise.</p>
<heading id="h-0003" level="1">SUMMARY</heading>
<p id="p-0006" num="0005">Embodiments of the present invention provide methods and systems for reducing Simultaneous Switching Noise (SSN) in an Integrated Circuit (IC) designed with a Computer Aided Design (CAD) tool.</p>
<p id="p-0007" num="0006">It should be appreciated that the present invention can be implemented in numerous ways, such as a process, an apparatus, a system, a device or a method on a computer readable medium. Several inventive embodiments of the present invention are described below. In one embodiment, value assignments for parameters of the IC are received by the CAD tool. The value assignments are entered as a range of value assignments or as a list of possible value assignments. Further, the method includes an operation for determining the minimum and the maximum path delays for each Input/Output (I/O) pin in an I/O block such that the received value assignments are satisfied. The actual switching times of the I/O pins are spread out in time to decrease SSN in the I/O pins. The switching times are spread out so that the switching times fall between the minimum and the maximum path delay for the corresponding I/O pin. Additionally, other method operations are included for routing paths to the I/O pins and for creating a design for the IC that meets the actual switching times. In another embodiment, the method operations are performed by a computer program when executed by one or more processors, the computer program being embedded in a non-transitory computer-readable storage medium.</p>
<p id="p-0008" num="0007">In another embodiment, a method for reducing SSN in an IC designed with a CAD tool is provided. The method includes an operation for receiving value assignments for parameters of the IC, where the value assignments are received as a range of value assignments or as a list of value assignments. Further, the desired switching times for each I/O pin are determined in order to satisfy the value assignments. In another method operation, budgeted minimum and maximum path delays are assigned for each I/O pin based on the desired switching time for each I/O pin. Additionally, the method includes operations for routing paths to the I/O pins to meet the budgeted minimum and maximum path delays, and for creating a design for the IC. The method operations are performed by a processor.</p>
<p id="p-0009" num="0008">In yet another embodiment, a method for reducing SSN in an IC designed with a CAD tool is presented. The method calculates the desired switching times for each I/O pin in an I/O block, and determines which pin is associated with each desired switching time. The determination is made in the order of the desired switching times. To determine each pin, the method checks if there is at least one candidate pin such that the desired switching time falls between the minimum and the maximum path delay for the candidate pin. Candidate pins are those pins that are unselected, i.e., not associated with a desired switching time. If there is at least one candidate pin, then the method selects the pin that has the lowest maximum path delay from the candidate pins that meet the condition that the pin can switch at the desired switching time. Alternatively, if no candidate pin meets the condition, then the method selects the pin with the lowest maximum path delay from the candidate pins. Further, the method includes an operation for setting the switching time for each pin. The switching time is set to be the closest time to the desired switching time that falls between the minimum and the maximum path delay for the pin. The method operations are performed by a processor.</p>
<p id="p-0010" num="0009">Other aspects of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0011" num="0010">The invention may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 1</figref> illustrates the method operations required to program or manufacture an Integrated Circuit (IC) using a Computer Aided Design (CAD) tool in accordance with one embodiment of the invention.</p>
<p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. 2</figref> depicts the effects of noise on a signal and the sensitivity to noise for the different types of interference.</p>
<p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. 3</figref> depicts the Routing Cost Valley (RCV) of a path in the IC, according to one embodiment.</p>
<p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an embodiment of a programmable I/O block in the IC.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 5</figref> illustrates alternate techniques for routing a path in an IC with different path delays.</p>
<p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. 6A-6C</figref> illustrate an embodiment of a method for determining I/O pin switching times.</p>
<p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a second method for determining I/O pin switching times, according to one embodiment of the invention.</p>
<p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. 8A-8B</figref> illustrate time-smearing optimization using routing delay budgets, according to one embodiment of the invention.</p>
<p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. 9</figref> depicts time-smearing optimization using routing cost valleys, according to one embodiment of the invention.</p>
<p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. 10</figref> illustrates via breakout-depth optimization, according to one embodiment of the invention.</p>
<p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. 11</figref> shows the flow of a method for reducing Simultaneous Switching Noise (SSN) in an IC designed with a CAD tool in accordance with one embodiment of the invention.</p>
<p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. 12</figref> is a simplified schematic diagram of a computer system for implementing embodiments of the present invention.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0005" level="1">DETAILED DESCRIPTION</heading>
<p id="p-0024" num="0023">The following embodiments describe methods and apparatus for reducing Simultaneous Switching Noise (SSN) in an Integrated Circuit (IC) designed with a Computer Aided Design (CAD) tool. The SSN reduction is performed with the CAD tool in different ways, such as enabling flexible constraint entry to the flow, modifying the fitter in the CAD tool to optimize SSN automatically, etc. The output of the CAD flow is a design for the IC with significantly improved SSN performance when compared to a non-optimized flow. The SSN performance improvement does not impact other quality-of-results (QOR) performance metrics and does not require user intervention, although user intervention is also enabled in some embodiments. Specifying design constraints that approach actual parameter values allows the CAD tool to design an IC with lower SSN.</p>
<p id="p-0025" num="0024">It will be obvious, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.</p>
<p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. 1</figref> illustrates the method operations required to program or manufacture IC <b>132</b> using CAD tool <b>106</b> in accordance with one embodiment of the invention. The process starts with design <b>102</b> where a hardware engineer creates Hardware Description Language (HDL) files <b>104</b> containing the desired circuitry description. HDL files are used by CAD tool <b>106</b> to create the IC design. The first operation of CAD tool <b>106</b> is performed by extractor <b>108</b> by parsing HDL files <b>104</b> and creating a basic discrete netlist of logic-gate primitives. After extractor <b>108</b>, synthesis <b>110</b> optimizes the basic netlist.</p>
<p id="p-0027" num="0026">Fitting <b>112</b> is the process of placing architecture specific blocks onto the device and connecting them properly. Embodiments of the invention improve the fitting <b>112</b> stage to reduce SSN <b>116</b>. The fitting stage can be further broken into several discrete components: clustering, placement, routing and post-fitting. Embodiments of the invention improve the routing stage of the fitter, but changes are also contemplated in earlier stages to enable the optimizations in the router.</p>
<p id="p-0028" num="0027">Clustering takes a number of small blocks and puts them into clusters so following improvements are done at a cluster level. For example, a register associated with an Input/Output (I/O) pin may be clustered with the I/O pin. If the I/O pin were moved to improve SSN, the associated register would move with the I/O pin because of the clustering.</p>
<p id="p-0029" num="0028">The placement module starts with a legal non-optimized placement and attempts to move or swap blocks in that placement in an attempt to improve device performance. These moves can either be directed to improve a specific region, path, or metric, or the moves can be generated at random. Each move is evaluated by calculating the cost of performing the move, and if the cost is favorable then the move is accepted. This process of moving pins and estimating cost is repeated until the placement module determines the end of the block-moving process.</p>
<p id="p-0030" num="0029">In many CAD tools, placement uses a technique called Simulated Annealing (SA). Simply put, the placer uses a greedy algorithm to place the blocks in legal locations. Beginning with this legal placement, the placer proposes moves of these blocks and evaluates the cost of performing such a move. The placer then chooses to accept or reject each move based on the cost, accepting beneficial moves always and accepting detrimental moves with declining probability. In one embodiment, detrimental moves are randomly accepted to avoid getting stuck in local minimums.</p>
<p id="p-0031" num="0030">Many cost metrics can be considered by the placement module. These cost metrics may include a measure of area, timing, power or some other performance metric that the system wants to improve. A person skilled in the art will appreciate that although the embodiments presented herein describe an SSN cost, other types of cost are evaluated during placement.</p>
<p id="p-0032" num="0031">Routing adds all wires needed to properly connect all of the placed components while obeying all design rules. The router is interested in routing connections with the minimum amount of wire while satisfying timing constraints like setup and hold time. Commercial routers tools also attempt to optimize other performance metrics simultaneously, such as power consumption.</p>
<p id="p-0033" num="0032">Since paths may have slack in both setup and hold time, there exists room for adjustments by the router when routing a connection. The spread between the minimum and the maximum delay for a path is called the delay budget. For the data path, the minimum delay is the delay at which point going faster would cause a hold violation and the maximum delay is the point at which going slower would cause a setup violation. For the clock path, the opposite is true.</p>
<p id="p-0034" num="0033">During Post-Fitting decisions that depend on exact timing are made. Since the exact timing could not be known until a design was routed, decisions made before this point were estimates. In post-fitting, the I/O delay chains are set to fix any issues with timing and skew. Further, sign-off timing and power analysis are performed and the post-fit design can be verified against the post-synthesis netlist. These verification operations are optional. Timing analysis <b>120</b> computes the path lengths in the circuits and estimates how the delays relate to the constraints of the circuit. Assembly <b>122</b> follows Timing Analysis <b>120</b>.</p>
<p id="p-0035" num="0034">SSN Analysis <b>126</b> estimates the SSN on I/O pins of the device and makes the results available to the hardware designer. A full SSN Analysis <b>126</b> is a computer-resource intensive process that estimates SSN on the I/O pins by analyzing multiple factors such as signal propagation, electrical properties of the circuit, impact by buffers and transmission lines, etc. In operation <b>128</b>, a decision is made as to whether a new iteration of the design creation is desired, for example to reduce SSN. If a new iteration is desired, the process typically flows back to placement <b>114</b> because it is not necessary to re-run Extractor <b>108</b> and Synthesis <b>110</b> again. In some instances, the design engineer submits small changes to the functionality of a design after the design has been fully compiled. These small changes are commonly referred to as Engineering Change Orders (ECOs), which can result in substantial compile-time savings for small changes to the design by avoiding a full new compilation and by leveraging previous CAD tool calculations. However, if the HDL files <b>104</b> are being changed then the process would flow back to design <b>102</b> for a complete new iteration. If a new iteration is not desired, the method flows to operation <b>130</b> where the device is programmed or manufactured with the created design. IC <b>132</b> is produced during the device programming/manufacturing process <b>130</b> according to the instructions defined in binary file <b>124</b>. One skilled in the art will appreciate that any commercially available Electronic Design Automation (EDA) tool may utilize the embodiments described herein.</p>
<p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. 2</figref> depicts the effects of noise on a signal and the sensitivity to noise for the different types of interference. Simultaneous Switching Noise is defined as a noise voltage induced onto a single victim I/O pin of an electronic component due to the switching behavior of other aggressor I/O pins in the device. In practice, SSN can be measured as a voltage noise or a timing noise. A voltage noise failure occurs when a SSN event causes a quiet signal to cross over the threshold boundary during a sampling window. Since noise events often occur outside of a sampling window, not all voltage noise failures will result in a functional failure. Therefore, SSN analysis must be aware of timing relationships of pins in order to determine the true noise that could cause a functional failure in a design.</p>
<p id="p-0037" num="0036">A timing noise failure occurs when an SSN event causes a switching signal to be delayed or accelerated over the threshold boundary, causing the receiver to see the signal later or earlier, respectively. This can cause timing failures by causing signals to violate setup and/or hold time requirements. Glitches can occur outside of the sampling window of a receiver. Typically these noise events are caused by aggressors that are synchronously related to the victim. These noise events can affect the switching time of a victim but should not be considered as an input threshold violation failure.</p>
<p id="p-0038" num="0037">Switching window techniques are commonly used for reducing pessimism when analyzing on-die cross talk. Published methods fall into two major categories. The first category relates to the problems where the desire is to find the switching time of aggressor buffers such that the noise pulse or timing noise is maximized. The second category relates to the reduction of pessimism using switching window analysis. This problem is significantly different than the first category of work because it deals with multiple layers of logic and interconnects.</p>
<p id="p-0039" num="0038">Static timing analysis uses a delay model to analyze paths in a circuit to determine if the circuit will function correctly given the user's constraints. If the data arrives before the rising clock edge, then the data is held until some time after the clock edge arrives. The difference between the data arrival and the clock edge is called the setup time and the difference between the clock edge and the time the data is no longer stable is called the hold time. Both setup and hold time must be satisfied for the data to be reliably captured.</p>
<p id="p-0040" num="0039">There are two clocks that need to be analyzed, the launch clock and the capture clock. The delay from the launch clock to the capture clock is called the required time, and the delay from the launch register to the capture register is called the arrival time. If the arrival time is less than the required time, that difference is called positive slack. If the arrival time is greater than the required time, that difference is called negative slack and indicates a timing failure. In practice, on die variation, temperature variation, model inaccuracies, and other factors can cause the analysis to be inaccurate. If the clock is early, the setup time is compressed and the hold time is elongated, and if the data arrives late, the setup time is further compressed. Therefore, to analyze timing in all conditions, the setup time is defined as the difference between the earliest clock and the latest data, and the hold time is defined as the difference between the latest clock and the earliest data.</p>
<p id="p-0041" num="0040">All of the timing data is used to create a &#x201c;delay budget&#x201d; for a path. A path can function correctly as long as the setup and hold times are positive, i.e., they have positive slack. This slack can be used by the CAD tool to decide how to configure the elements of the path (placement, routing, etc.).</p>
<p id="p-0042" num="0041">Some methods for SSN Optimization include changing the I/O standard, reducing the current strength or slew rate of the I/O buffer, and spacing out the I/O pins. These methods are performed manually by a design engineer in an iterative fashion. This iteration can take a long time, particularly if the design is complex. Changing the I/O standard is not always an option, depending on the configurability of the receiving device. If, however, the receiving device can be configured to accept a different I/O standard, this may be beneficial in reducing the total SSN in the Field-Programmable Gate Array (FPGA) design. For example, moving to a 1.8-V I/O standard from a 2.5-V I/O standard will reduce the SSN in the design but will affect timing.</p>
<p id="p-0043" num="0042">Further, the noise injected by a switching output onto a victim pin can be reduced by lowering the current strength of the switching I/O buffer or by lowering the slew rate. Since the SSN performance of the design is highly sensitive to the amount of current sunk by each output, the less current drawn by the output will result in a smaller di/dt profile, thus reducing SSN. Using this method assumes that the device supports programmable current strength or slew rate for the I/O standard.</p>
<p id="p-0044" num="0043">Mutual inductance between pins is one cause of SSN. Since mutual inductance is inversely proportional to the distance between the pins, the farther an aggressor is from a victim the less noise is injected. To take advantage of this, the pins should be spaced out in such a way so as to reduce the total SSN in the design.</p>
<p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. 3</figref> depicts the Routing Cost Valley (RCV) of a path in the IC, according to one embodiment. In order to optimize both setup and hold times, the router uses a cost curve for each path called routing cost valley <b>302</b>. The cost is at a minimum at the target delay and has a positive linear slope to the minimum and maximum delays. The slope of the line is called the connection criticality and is computed from the delay budgets. The slope to the left of the target is the short-path connection criticality and the slope to the right is the long-path connection criticality. The slope is between 0 and 1 and indicates the importance that a connection be routed with a large or a small delay, respectively. Any route with more or less delay than the target delay is penalized, because the regions before the minimum delay and after the maximum delay are quadratic regions.</p>
<p id="p-0046" num="0045">Embodiments of the invention enable the entry of assignments as a list or as a range of possible values rather than limiting the choices to one specific value. For example, an entry to set the slew rate assignment as &#x201c;Fast&#x201d; into a CAD tool, such as QUARTUS&#xae; II owned by the assignee, is as follows:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>set_instance_assignment&#x2014;to &#x201c;pin&#x201d;&#x2014;name SLEW_RATE &#x201c;Fast&#x201d;&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0047" num="0046">Embodiments of the invention allow the user to enter assignments as a list, a range, or other method that allows the CAD tool to vary the setting to optimize performance. For example:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>set_instance_assignment&#x2014;to &#x201c;pin&#x201d;&#x2014;name SLEW_RATE &#x201c;Any&#x201d;&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>set_instance_assignment&#x2014;to &#x201c;pin&#x201d;&#x2014;name SLEW_RATE &#x201c;Medfast,Fast&#x201d;&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>set_instance_assignment&#x2014;to &#x201c;pin&#x201d;&#x2014;name SLEW_RATE &#x201c;Slow . . . Fast&#x201d;&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0048" num="0047">This makes it explicit to both the CAD tool and the user that changing these values from their defaults is allowed. In equation 2 the value of the SLEW_RATE can be any value, in equation 3 the value can be either Medfast or Fast, and in equation 4 the value can be any value between Slow and Fast.</p>
<p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. 4</figref> illustrates an embodiment of a programmable I/O block in the IC. As previously described, the clustering algorithm groups blocks into larger groups to allow placement to work with a smaller number of blocks. One of these clusters is an I/O register and buffer block <b>406</b> as the one in <figref idref="DRAWINGS">FIG. 4</figref>. If output register <b>402</b> is packed into the I/O block <b>406</b>, then register <b>402</b> is placed in the I/O to feed I/O buffer <b>404</b> directly using dedicated routing resources. In this case, the router can only modify the I/O delay chains to increase the I/O delay, which has less flexibility than using the programmable routing resources on the device.</p>
<p id="p-0050" num="0049">To give the router flexibility, the clustering algorithm is able to avoid packing the I/O registers into I/O blocks when the algorithm intends on performing time-smearing optimization. This decision is balanced with existing timing constraints to ensure that the decision to not pack an I/O register does not violate any paths.</p>
<p id="p-0051" num="0050">Because the placer can force certain connections to be routed using dedicated resources (which have a fixed delay), the placement algorithm is modified to ensure that all short-path critical paths have at least one connection to which delay can be added. This ensures that the router has the ability to change the connection delay to avoid short-path timing violations on that path. Additionally, the router ensures that the paths that are to be time-smeared are placed without dedicated resources to allow the router the addition of delay to certain paths.</p>
<p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. 5</figref> illustrates alternate techniques for routing a path in an IC with different path delays. The router has flexibility in routing connections between blocks and this can alter the timing behavior of a design. In the example shown in <figref idref="DRAWINGS">FIG. 5</figref>, the router can choose to route the block <b>508</b> to I/O buffer <b>506</b> directly <b>502</b>, or the router can choose to take a longer path <b>504</b> through more interconnects. The long path <b>504</b> results in increased routing delay for the signal to arrive at I/O buffer <b>506</b>. It is important to note that this could increase congestion in the rest of the circuit and potentially hurt other performance metrics. The router considers this when optimizing paths.</p>
<p id="p-0053" num="0052"><figref idref="DRAWINGS">FIGS. 6A-6C</figref> illustrate an embodiment of a method for determining I/O pin switching times. The SSN noise effect on a victim pin is the sum of all noise effects of its aggressors. These effects are time varying and are worst-case on a victim when the peak noise of each of its aggressors occurs at the same point in time. Time-smearing, i.e., spreading out in time, the switching time of output pins can reduce SSN by up to 68% or more.</p>
<p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. 6A</figref> shows the delay budgets for eight output paths to pins (bus[<b>0</b>]-bus[<b>7</b>]) of a synchronous bus. For each path, the triangle on the left <b>602</b> represents the minimum delay and the triangle on the right <b>604</b> represents the maximum delay for that path. These delays are derived from the timing constraint on the path, not from the minimum and maximum values in the delay model. Since the termination elements (registers, I/O buffers) are not uniformly placed, the minimum and maximum delay for the individual elements of a synchronous bus are likely different from one another. Therefore, the optimal switching time must be realized by considering all paths in the bus.</p>
<p id="p-0055" num="0054">Furthermore, the optimal switching time must consider all paths in a clock domain as well as any related clocks. The desired switching times will all be referenced to a global t=0 which is the positive edge time for a single clock. All related clock domains are analyzed with respect to that clock, which can include phase related clocks, negative edge triggered registers, etc. Unrelated clock domains are optimized in isolation.</p>
<p id="p-0056" num="0055">The optimal or desired switching times <b>606</b> are determined by taking the minimum achievable delay to any pin and the maximum achievable delay to any pin, and then evenly (linearly) spacing out the switching times between them. The method of <figref idref="DRAWINGS">FIGS. 6A-6C</figref> determines pin switching times that are sub-optimal but the method has linear O(n) time complexity. A second method described below in reference to <figref idref="DRAWINGS">FIG. 7</figref> is optimal but has worst-case O(n<sup>2</sup>) time complexity.</p>
<p id="p-0057" num="0056">To determine the desired delay for each path, the paths are sorted increasingly by their minimum switching time. The result of the sorting is shown in <figref idref="DRAWINGS">FIG. 6B</figref>. In the next operation shown in <figref idref="DRAWINGS">FIG. 6C</figref>, each pin is assigned a delay in order based on the desired switching times, starting at the top and moving towards the bottom. If the corresponding desired switching time for a path does not fall between the minimum and the maximum path for that pin, then the actual switching time for that pin is set to the value between the minimum and maximum path delay that is closest to the desired switching time. This will cause the actual switching time to be either the minimum or the maximum path delay for that pin. <figref idref="DRAWINGS">FIG. 6C</figref> shows how pins bus[<b>7</b>] and bus[<b>3</b>] could not meet the desired switching time, therefore the achieved switching times for those pins correspond to the maximum path delay for each pin.</p>
<p id="p-0058" num="0057">The assigned delays are then used in the router to optimize SSN. In another embodiment, a time buffer is provided on each side of the delay budget to allow for more flexibility. For example a time buffer of 100 ps is used in one embodiment, although other values are also possible. Additionally, the buffers on the left and the right side do not have to be the same size. The formula for calculating the desired switching time of an output using time buffers is:</p>
<p id="p-0059" num="0058">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>t</mi>
          <mi>switch</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <msub>
            <mi>t</mi>
            <mi>b</mi>
          </msub>
          <mo>+</mo>
          <msub>
            <mi>D</mi>
            <mrow>
              <mi>m</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.3em" height="0.3ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>i</mi>
              <mo>&#x2062;</mo>
              <mstyle>
                <mspace width="0.3em" height="0.3ex"/>
              </mstyle>
              <mo>&#x2062;</mo>
              <mi>n</mi>
            </mrow>
          </msub>
          <mo>+</mo>
          <mrow>
            <mrow>
              <mo>(</mo>
              <mfrac>
                <mrow>
                  <msub>
                    <mi>D</mi>
                    <mrow>
                      <mi>ma</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>x</mi>
                    </mrow>
                  </msub>
                  <mo>-</mo>
                  <msub>
                    <mi>D</mi>
                    <mrow>
                      <mi>m</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>i</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>n</mi>
                    </mrow>
                  </msub>
                  <mo>-</mo>
                  <msub>
                    <mi>t</mi>
                    <mi>b</mi>
                  </msub>
                </mrow>
                <mi>width</mi>
              </mfrac>
              <mo>)</mo>
            </mrow>
            <mo>&#x2062;</mo>
            <mi>index</mi>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>5</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0060" num="0059">Where t<sub>switch </sub>is the achieved switching time, t<sub>b </sub>is the amount of time used for the buffer, D<sub>min </sub>is the minimum path delay, D<sub>max </sub>is the maximum path delay, width is the number of pins in the bus, and index is the index of the desired switching time.</p>
<p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. 7</figref> illustrates a second method for determining I/O pin switching times, according to one embodiment of the invention. This method is based on the Earliest Deadline First (EDF) dynamic scheduling algorithm. The desired switching times for the paths are calculated in the same manner described above in reference to <figref idref="DRAWINGS">FIG. 6A</figref>. The method then determines which pin is associated with each desired switching time, starting with the earliest desired switching time and continuing in order until the latest desired switching time.</p>
<p id="p-0062" num="0061">For each desired switching time, it is first determined if there is at least one candidate pin where the desired switching time is between the minimum and the maximum path delay for the remaining candidate pins. The candidate pins are those pins that are unselected, i.e., associated with a desired switching time. If there is at least one pin, then the candidate pin that has the lowest maximum path delay from the candidate pins is selected. Otherwise, the candidate pin with the lowest maximum path delay is selected.</p>
<p id="p-0063" num="0062">The switching time for each pin is set, as in <figref idref="DRAWINGS">FIG. 6C</figref>, as the closest time to the desired switching time that is between the minimum and the maximum path delay for the pin. In one embodiment, the method is performed as follows:
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0000">
    <ul id="ul0002" list-style="none">
        <li id="ul0002-0001" num="0063">1. Insert each path in a priority queue, sorted by lower maximum path delay.</li>
        <li id="ul0002-0002" num="0064">2. Starting from the top, attempt to schedule each path into a desired switching time, from earliest to latest.</li>
        <li id="ul0002-0003" num="0065">3. If the path's minimum delay is greater than the desired switching time then try to schedule the next paths below if possible. Otherwise, schedule this path. If the desired switching time is greater than this path's maximum delay, then use the maximum delay as the switching time.</li>
        <li id="ul0002-0004" num="0066">4. Continue until all paths have a target switching time.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0064" num="0067"><figref idref="DRAWINGS">FIGS. 8A-8B</figref> illustrate time-smearing optimization using routing delay budgets, according to one embodiment of the invention. To time-smear the outputs using routing delay budgets, the routing delay budgets are changed to center the target switching time in the delay window. The router has less flexibility in routing the path because the routing delay budget is often reduced with the goal of having the path delay as close to the target delay as possible.</p>
<p id="p-0065" num="0068"><figref idref="DRAWINGS">FIG. 8A</figref> shows the delay budgets for a three-bit bus before any optimization takes place. <figref idref="DRAWINGS">FIG. 8B</figref> illustrates an embodiment with actual minimum and maximum path delays <b>802</b> and desired switching times <b>804</b>. The delay budget for each bit is modified to create a new delay budget <b>806</b>, which is provided to the router. In one embodiment, the delay budget for each bit is created to center desired switching times <b>804</b> in the delay budget. In one embodiment, the same time buffer (e.g. 100 ps) is used on each side of the desired switching time. Thus, if it is desired that bus[<b>0</b>] switches at switching time <b>808</b>, a delay budget for the router is created around switching time <b>808</b>. The delay budget for the router is created by making minimum path delay <b>812</b> equal to switching time <b>808</b> minus time buffer <b>810</b>, and making maximum path delay <b>814</b> equal to switching time <b>808</b> plus time buffer <b>810</b>. The achieved switching times <b>816</b> will be almost the same or equal to desired switching times <b>804</b>.</p>
<p id="p-0066" num="0069">In another embodiment, only the minimum delay budget is changed and the maximum is left intact. This ensures that the router has still plenty of room to add delay in order to get around congestion, but it has the potential negative effect of allowing the router to add a larger amount of delay and causing the switching time to be further away from the desired switching time.</p>
<p id="p-0067" num="0070"><figref idref="DRAWINGS">FIG. 9</figref> depicts time-smearing optimization using routing cost valleys, according to one embodiment of the invention. To time-smear the outputs using routing cost valleys, the target delay is changed without modifying the minimum and maximum delays for the path. The calculation of the default delay target is calculated with the following formula:</p>
<p id="p-0068" num="0071">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>D</mi>
          <mi>target</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <mi>min</mi>
          <mo>&#x2061;</mo>
          <mrow>
            <mo>(</mo>
            <mrow>
              <mfrac>
                <mrow>
                  <msub>
                    <mi>D</mi>
                    <mrow>
                      <mi>m</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>i</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>n</mi>
                    </mrow>
                  </msub>
                  <mo>+</mo>
                  <msub>
                    <mi>D</mi>
                    <mrow>
                      <mi>m</mi>
                      <mo>&#x2062;</mo>
                      <mstyle>
                        <mspace width="0.3em" height="0.3ex"/>
                      </mstyle>
                      <mo>&#x2062;</mo>
                      <mi>ax</mi>
                    </mrow>
                  </msub>
                </mrow>
                <mn>2</mn>
              </mfrac>
              <mo>,</mo>
              <mrow>
                <msub>
                  <mi>D</mi>
                  <mrow>
                    <mi>m</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.3em" height="0.3ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>i</mi>
                    <mo>&#x2062;</mo>
                    <mstyle>
                      <mspace width="0.3em" height="0.3ex"/>
                    </mstyle>
                    <mo>&#x2062;</mo>
                    <mi>n</mi>
                  </mrow>
                </msub>
                <mo>+</mo>
                <msub>
                  <mi>t</mi>
                  <mi>b</mi>
                </msub>
              </mrow>
            </mrow>
            <mo>)</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>6</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0069" num="0072">Where D<sub>target </sub>is the target switching time, D<sub>min </sub>is the minimum path delay, D<sub>max </sub>is the maximum path delay, and t<sub>b </sub>is the amount of time used for buffering. To minimize SSN, the target delay for the elements of a synchronous bus is set to the target switch time as previously described. The router then estimates that the target delay has the lowest cost path for that output and attempts to optimize for that delay. <figref idref="DRAWINGS">FIG. 9</figref> illustrates the modified routing cost valleys for three synchronous output paths terminating at a three-bit wide bus. The lowest cost target for the bus is different for each pin, corresponding with the target switch times determined earlier.</p>
<p id="p-0070" num="0073">After placement is complete, a full signoff timing analysis can be run to get an accurate estimate of the slacks on each path. Then other optimizations are available to improve SSN. One optimization configures delay chains in the IC. The I/O blocks in FPGAs can have programmable delay chains to provide fine control of delays on the pin. Given timing margin, these slacks can be exploited to time smear the switching times of the outputs in the same way the router does. The delay chains can be used to time-smear paths that are connected with dedicated routing resources, such as I/O register to I/O buffer paths. In general, an attempt is made to avoid auto-packing these registers, however user-assignments and location constraints can prevent the CAD tool from doing so. In these cases, the delay chains are the only way to control the delays of the paths.</p>
<p id="p-0071" num="0074">In one embodiment, the optimization includes the following operations:
<ul id="ul0003" list-style="none">
    <li id="ul0003-0001" num="0000">
    <ul id="ul0004" list-style="none">
        <li id="ul0004-0001" num="0075">1. Determine desired switching targets, as previously described. In this case, the minimum and maximum delays used are the delays given the minimum and maximum setting of the delay chain. If delay chain settings are specified as ranges, then the ranges are used as the minimum and maximum delays. The ranges may need to be capped at either end if there are timing constraints.</li>
        <li id="ul0004-0002" num="0076">2. Use a time-smear process, such as the ones described in reference to <figref idref="DRAWINGS">FIGS. 6A-6C</figref> and <b>7</b>. For each path, the delay chain is set to the value that comes closest to that delay without going over.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0072" num="0077">Since the I/O delay chains are discrete, the delays are bound by the number of settings in the delay chains. Therefore, there may still be smaller groups of I/O pins that switch together.</p>
<p id="p-0073" num="0078">Another post-placement optimization involves I/O Assignment setting optimization. Once the router and the timing analysis has completed, there is an accurate delay model for the design. If there are any paths with slack on them, the timing of these paths can be degraded for the benefit of SSN performance, while still meeting the user's timing requirements. The method takes advantage of the user-provided assignment-ranges to reduce the SSN on the worst case pins.</p>
<p id="p-0074" num="0079">The method traverses each of the output pins in the design to assess if there is timing margin available on the path for optimization. If there is margin, the current strength and slew rate settings are progressively lowered within the user's constraints. In addition, a check is made to see if the timing requirements are still met. An incremental timing analysis flow can be used to implement this optimization.</p>
<p id="p-0075" num="0080">Since this post-fit setting modification happens after the previous time-smearing optimization, all elements of a synchronous bus are modified at the same time to preserve the delay targets optimized in the router. Otherwise, those efforts could be wasted as the settings may cause the switching times to overlap once again. However, it is not necessary to run the time-smearing optimization for this optimization to be effective.</p>
<p id="p-0076" num="0081">In one embodiment, this optimization is run before the time-smearing optimization in the pre-fitter in order to give more flexibility in consuming margin. Since both optimizations consume margin, if one optimization is better for SSN than the other, that better optimization should be run first. To that end, an estimation flow can be run to evaluate which optimization will yield the best results and then run that one first.</p>
<p id="p-0077" num="0082">Another post-fitting optimization involves router wire loading for precise delays. Once timing analysis is complete, there is precise delay data for each path. The methods previously described attempt to achieve a desired delay along a path to have the outputs switch optimally for SSN. However, due to discretization in the routing paths available on the FPGA these targets can not be met exactly. If a path has delay of less than the desired switching time, the delay on the path can be potentially increased without changing the functionality of the device.</p>
<p id="p-0078" num="0083">In one embodiment, the operations to perform this optimization include:
<ul id="ul0005" list-style="none">
    <li id="ul0005-0001" num="0000">
    <ul id="ul0006" list-style="none">
        <li id="ul0006-0001" num="0084">1. Compute the target delays.</li>
        <li id="ul0006-0002" num="0085">2. Fit the design, including the time-smearing techniques previously described. In one embodiment, this includes the delay chain optimizations previously described, assuming that the delay is chosen such that the delay is closest to the target without going over the target.</li>
        <li id="ul0006-0003" num="0086">3. For each path:
        <ul id="ul0007" list-style="none">
            <li id="ul0007-0001" num="0087">a. Compute the delay that needs to be added to achieve the target delay. If that value is negative, determine if there is opportunity to add delay. If there is, determine if the delay chain setting can be lowered incrementally to allow the addition of loading delay.</li>
            <li id="ul0007-0002" num="0088">b. Traverse each routing element in the path, and determine if increasing delay on the path is possible. If so, increase the delay and determine how much delay was added. Then subtract that delay from the amount attempting to add to the whole path.</li>
            <li id="ul0007-0003" num="0089">c. Update the timing graph for any paths that were affected by changes made by this method.</li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0079" num="0090"><figref idref="DRAWINGS">FIG. 10</figref> illustrates via breakout depth optimization, according to one embodiment of the invention. After the design is fully constrained and fit, an SSN analysis is run on the design. The QUARTUS II SSN ANALYZER is one such tool that can fully analyze a design and determine the noise on each pin. Once the worst-case pin has been identified, that pin can be made to break out closer to the FPGA die to reduce the SSN noise on that pin. In <figref idref="DRAWINGS">FIG. 10</figref>, inductive capacitance C<b>1</b> is larger than C<b>2</b> because the pins in C<b>1</b> break out further away from the IC than the pins in C<b>2</b>. The CAD flow can advise the user to make this change, but it is up to the board designer to specify this new depth as an input constraint to the analyzer tool.</p>
<p id="p-0080" num="0091">The operations for this optimization include:
<ul id="ul0008" list-style="none">
    <li id="ul0008-0001" num="0000">
    <ul id="ul0009" list-style="none">
        <li id="ul0009-0001" num="0092">1. Fit the design and run a full SSN analysis.</li>
        <li id="ul0009-0002" num="0093">2. If there are pins in the design that consume more than a certain threshold of margin, make those pins break out closer to the die. In another embodiment, the user is notified in a report that those pins are PCB critical and should be broken out closer to the die.</li>
        <li id="ul0009-0003" num="0094">3. Incrementally re-run SSN analysis with this new configuration.</li>
    </ul>
    </li>
</ul>
</p>
<p id="p-0081" num="0095"><figref idref="DRAWINGS">FIG. 11</figref> shows the flow of a method for reducing SSN in an IC designed with a CAD tool in accordance with one embodiment of the invention. In operation <b>1102</b>, the method includes receiving value assignments for parameters of the IC. The value assignments can be received as a range or as a list of possible value assignments. After operation <b>1102</b>, the method flows to operation <b>1104</b> for determining minimum and maximum path delays for each I/O pin in an I/O block that satisfy the value assignments received in operation <b>1102</b>.</p>
<p id="p-0082" num="0096">In operation <b>1106</b>, the actual switching times of the I/O pins are spread out, where each actual switching time is between the minimum and the maximum path delay for the corresponding I/O pin. See <figref idref="DRAWINGS">FIG. 7</figref> for an example of the application of this method. After operation <b>1106</b> the method flows to operation <b>1108</b> where paths to the I/O pins are routed to meet the actual switching times. A design for the IC that meets the actual switching times is created in operation <b>1110</b>. In one embodiment, the method operations are performed by a computer processor.</p>
<p id="p-0083" num="0097"><figref idref="DRAWINGS">FIG. 12</figref> is a simplified schematic diagram of a computer system <b>1200</b> for implementing embodiments of the present invention. It should be appreciated that the methods described herein may be performed with a digital processing system, such as a conventional, general-purpose computer system. Special purpose computers, which are designed or programmed to perform only one function may be used in the alternative. The computer system includes a central processing unit (CPU) <b>1204</b>, which is coupled through bus <b>1210</b> to random access memory (RAM) <b>1228</b>, read-only memory (ROM) <b>1212</b>, and mass storage device <b>1214</b>. SSN optimization program <b>1208</b> resides in random access memory (RAM) <b>1228</b>, but can also reside in mass storage <b>1214</b>.</p>
<p id="p-0084" num="0098">Mass storage device <b>1214</b> represents a persistent data storage device such as a floppy disc drive or a fixed disc drive, which may be local or remote. Network interface <b>1230</b> provides connections via network <b>1232</b>, allowing communications with other devices. It should be appreciated that CPU <b>1204</b> may be embodied in a general-purpose processor, a special purpose processor, or a specially programmed logic device. Input/Output (I/O) interface provides communication with different peripherals and is connected with CPU <b>1204</b>, RAM <b>1228</b>, ROM <b>1212</b>, and mass storage device <b>1214</b>, through bus <b>1210</b>. Sample peripherals include display <b>1218</b>, keyboard <b>1222</b>, cursor control <b>1224</b>, removable media device <b>1234</b>, etc.</p>
<p id="p-0085" num="0099">Display <b>1218</b> is configured to display the user interfaces described herein. Keyboard <b>1222</b>, cursor control <b>1224</b>, removable media device <b>1234</b>, and other peripherals are coupled to I/O interface <b>1220</b> in order to communicate information in command selections to CPU <b>1204</b>. It should be appreciated that data to and from external devices may be communicated through I/O interface <b>1220</b>. The invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a wire-based or wireless network.</p>
<p id="p-0086" num="0100">The methods and systems for reducing SSN in an IC designed with a CAD tool, described herein, may be incorporated into any suitable integrated circuit. For example, the methods, and systems may be incorporated into other types of programmable logic devices such as programmable array logic (PAL), programmable logic arrays (PLAs), field-programmable gate arrays (FPGAs), field programmable logic arrays (FPLAs), electrically programmable logic devices (EPLDs), electrically erasable programmable logic devices (EEPLDs), logic cell arrays (LCAs), application-specific integrated circuits (ASICs) just to name a few. The programmable logic device may be a part of a data processing system that includes one or more of the following components: a processor, memory; I/O circuitry, and peripheral devices. The data processing system can be used in a wide variety of applications, such as computer networking, data networking, instrumentation, video processing, digital signal processing, or any suitable other application where the advantage of using programmable or re-programmable logic is desirable. The programmable logic device can be used to perform a variety of different logic functions. For example, the programmable logic device can be configured as a processor or controller that works in cooperation with a system processor. The programmable logic device may also be used as an arbiter for arbitrating access to a shared resource in the data processing system. In yet another example, the programmable logic device can be configured as an interface between a processor and one of the other components in the system.</p>
<p id="p-0087" num="0101">Embodiments of the present invention may be practiced with various computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers and the like. The invention can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a network.</p>
<p id="p-0088" num="0102">With the above embodiments in mind, it should be understood that the invention can employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purpose, such as a special purpose computer. When defined as a special purpose computer, the computer can also perform other processing, program execution or routines that are not part of the special purpose, while still being capable of operating for the special purpose. Alternatively, the operations may be processed by a general purpose computer selectively activated or configured by one or more computer programs stored in the computer memory, cache, or obtained over a network. When data is obtained over a network the data may be processed by other computers on the network, e.g., a cloud of computing resources.</p>
<p id="p-0089" num="0103">One or more embodiments of the present invention can also be fabricated as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives, network attached storage (NAS), read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes and other optical and non-optical data storage devices. The computer readable medium can include computer readable tangible medium distributed over a network-coupled computer system so that the computer readable code is stored and executed in a distributed fashion.</p>
<p id="p-0090" num="0104">Although the method operations were described in a specific order, it should be understood that other housekeeping operations may be performed in between operations, or operations may be adjusted so that they occur at slightly different times, or may be distributed in a system which allows the occurrence of the processing operations at various intervals associated with the processing, as long as the processing of the overlay operations are performed in the desired way.</p>
<p id="p-0091" num="0105">Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627254-20140107-M00001.NB">
<img id="EMI-M00001" he="6.35mm" wi="76.20mm" file="US08627254-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US08627254-20140107-M00002.NB">
<img id="EMI-M00002" he="6.35mm" wi="76.20mm" file="US08627254-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>What is claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method for reducing simultaneous switching noise (SSN) in an integrated circuit (IC) designed with a computer aided design (CAD) tool, the method comprising:
<claim-text>receiving value assignments for parameters of the IC, the value assignments being received as one of a range of value assignments or a list of value assignments;</claim-text>
<claim-text>determining minimum and maximum path delays for each Input/Output (I/O) pin in an I/O block that satisfy the value assignments;</claim-text>
<claim-text>spreading actual switching times of the I/O pins, wherein each actual switching time is between the minimum and the maximum path delay for the corresponding I/O pin; and</claim-text>
<claim-text>creating a design for the IC that meets the actual switching times, wherein the method operations are performed by a processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein spreading the actual switching times further includes:
<claim-text>calculating desired switching times for each I/O pin, wherein the desired switching times are linearly distributed between a minimum and a maximum path delay for all the I/O pins.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein spreading the actual switching times further includes:
<claim-text>sorting I/O pins according to the maximum path delay of each pin;</claim-text>
<claim-text>selecting one I/O pin at a time based on a corresponding desired switching time until all I/O pins have been selected; and</claim-text>
<claim-text>determining the switching time for each selected I/O pin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein selecting one I/O pin includes:
<claim-text>selecting an I/O pin that has a lowest maximum path delay from candidate pins that can switch at the desired switching time when there is at least one candidate pin where the desired switching time is between a minimum and a maximum path delay for the at least one candidate pin, the candidate pins being those I/O pins that are unselected; and</claim-text>
<claim-text>selecting an I/O pin with the lowest maximum path delay from the candidate pins when the desired switching time is not between the minimum and the maximum path delay of any candidate pin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method as recited in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein determining the switching time for each selected I/O pin further includes:
<claim-text>setting the switching time for the selected I/O pin as a closest time to the desired switching time that is between the minimum and the maximum path delay for the selected I/O pin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein calculating the desired switching times further includes allowing buffer periods without any I/O pin switching before a first switching time and a last switching time.</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. The method as recited in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein spreading the actual switching times further includes:
<claim-text>sorting I/O pins according to the minimum path delay of each pin;</claim-text>
<claim-text>selecting one I/O pin at a time based on the sorting until all I/O pins have been selected; and</claim-text>
<claim-text>determining the switching time for each selected I/O pin as a closest time to the corresponding desired switching time that is between the minimum and the maximum path delay for the selected I/O pin.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including:
<claim-text>determining paths to the I/O pins that include a time slack; and</claim-text>
<claim-text>degrading the determined paths to improve SSN performance.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein spreading the actual switching times of the I/O pins is performed during placement and routing phases of the CAD tool.</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method operations are performed by a computer program when executed by one or more processors, the computer program being embedded in a non-transitory computer-readable storage medium.</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. A method for reducing simultaneous switching noise (SSN) in an integrated circuit (IC) designed with a computer aided design (CAD) tool, the method comprising:
<claim-text>receiving value assignments for parameters of the IC, the value assignments being received as one of a range of value assignments or as a list of value assignments;</claim-text>
<claim-text>determining desired switching times for each I/O pin that satisfy the value assignments;</claim-text>
<claim-text>assigning budgeted minimum and maximum path delays for each I/O pin based on the desired switching time for each I/O pin; and</claim-text>
<claim-text>creating a design for the IC, wherein the method operations are performed by a processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The method as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein assigning budgeted minimum and maximum path delays further includes:
<claim-text>setting the minimum path delay as the desired switching time minus a first predetermined period of time; and</claim-text>
<claim-text>setting the maximum path delay as the desired switching time plus a second predetermined period of time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. The method as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein determining the desired switching times further includes:
<claim-text>setting the desired switching time for a pin as a minimum of an average of the minimum and the maximum path delay and of the minimum path delay plus the first predetermined period of time.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The method as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, further including:
<claim-text>determining critical paths to I/O pins; and</claim-text>
<claim-text>providing at least one connection in each critical path to which delay can be added.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The method as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the method operations are performed by a computer program when executed by one or more processors, the computer program being embedded in a non-transitory computer-readable storage medium.</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. A method for reducing simultaneous switching noise (SSN) in an integrated circuit (IC) designed with a computer aided design (CAD) tool, the integrated circuit design having a plurality of pins, each pin of the plurality of pins having a desired switching time the method comprising:
<claim-text>determining which pin is associated with each desired switching time in order of desired switching time, wherein determining which pin includes,</claim-text>
<claim-text>selecting a pin that has a lowest maximum path delay from candidate pins that can switch at the desired switching time when there is at least one candidate pin where the desired switching time is between a minimum and a maximum path delay for the at least one candidate pin, the candidate pins being those pins that are unselected, and</claim-text>
<claim-text>selecting a pin with the lowest maximum path delay from the candidate pins when the desired switching time is not between the minimum and the maximum path delay of any candidate pin; and</claim-text>
<claim-text>setting the switching time for each pin as a closest time to the desired switching time that is between the minimum and the maximum path delay for the each pin, wherein the method operations are performed by a processor.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The method as recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, further including:
<claim-text>determining which pin has a highest SSN; and</claim-text>
<claim-text>making the determined pin break out closer to the IC in a board where the IC is located.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The method as recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, further including:
<claim-text>calculating for each pin an amount of delay needed to achieve the set switching time for the pin; and</claim-text>
<claim-text>traversing each routing element in a path to each pin and add delay if possible up to the calculated amount of delay.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00019" num="00019">
<claim-text>19. The method as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, further including:
<claim-text>updating timing graphs for any path that was changed during the traversing.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00020" num="00020">
<claim-text>20. The method as recited in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the method operations are performed by a computer program when executed by one or more processors, the computer program being embedded in a non-transitory computer-readable storage medium. </claim-text>
</claim>
</claims>
</us-patent-grant>

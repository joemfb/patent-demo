<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08627172-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08627172</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>13139785</doc-number>
<date>20091211</date>
</document-id>
</application-reference>
<us-application-series-code>13</us-application-series-code>
<priority-claims>
<priority-claim sequence="01" kind="national">
<country>JP</country>
<doc-number>2008-330910</doc-number>
<date>20081225</date>
</priority-claim>
</priority-claims>
<us-term-of-grant>
<us-term-extension>218</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>H</section>
<class>03</class>
<subclass>M</subclass>
<main-group>13</main-group>
<subgroup>00</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>714758</main-classification>
</classification-national>
<invention-title id="d2e71">Error correction encoding apparatus, decoding apparatus, encoding method, decoding method, and programs thereof</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>2003/0002533</doc-number>
<kind>A1</kind>
<name>Rajwan</name>
<date>20030100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>370474</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>2009/0187804</doc-number>
<kind>A1</kind>
<name>Shen et al.</name>
<date>20090700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>2010/0023838</doc-number>
<kind>A1</kind>
<name>Shen et al.</name>
<date>20100100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714758</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>2010/0115371</doc-number>
<kind>A1</kind>
<name>Shen et al.</name>
<date>20100500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>2010/0185913</doc-number>
<kind>A1</kind>
<name>Liao et al.</name>
<date>20100700</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>714752</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>2011/0026639</doc-number>
<kind>A1</kind>
<name>Rouquette-Leveil et al.</name>
<date>20110200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>375298</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>JP</country>
<doc-number>2008187706</doc-number>
<kind>A</kind>
<date>20080800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>WO</country>
<doc-number>2006106841</doc-number>
<kind>A</kind>
<date>20061000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>WO</country>
<doc-number>2007083066</doc-number>
<kind>A</kind>
<date>20070700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00010">
<othercit>This paper appears in: Information Theory, IEEE Transactions; Date of Publication: Aug. 2004; Author(s): Fossorier, Marc P C ; Dept. of Electr. Eng., Univ. of Hawaii, Honolulu, HI, USA; vol. 50 , Issue: 8 ; pp. 1788-1793 ; Product Type: Journals &#x26; Magazines.</othercit>
</nplcit>
<category>cited by examiner</category>
</us-citation>
<us-citation>
<nplcit num="00011">
<othercit>International Search Report for PCT/JP2009/070756 mailed Mar. 2, 2010.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00012">
<othercit>R. G. Gallager, &#x201c;Low-Density Parity-Check Codes&#x201d;, IRE Transactions On Information Theory, Jan. 1962, pp. 21-28.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00013">
<othercit>D. J. C Mackay, &#x201c;Good Error-Correcting Codes Based on Very Sparse Matrices&#x201d;, IEEE Transactions on Information Theory, vol. 45, No. 2, Mar. 1999, pp. 399-431.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00014">
<othercit>K. Kambara et al., &#x201c;Study of FEC for 800MHz band FPU system&#x2014;Analysis of LDGM structure for LDPC concatenated code&#x2014;&#x201d;, IEICE Technical Report, RC82008-79, vol. 108, No. 188, Aug. 27, 2008, pp. 157-162.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00015">
<othercit>Yusuke Kumano et al., &#x201c;Turbo Decoding for Serially-Concatenated Low-Density Generator Matrix (SCLDGM) Codes&#x201d;, IEICE Technical Report (RCS2008-109), Oct. 15, 2008, vol. 108, No. 249, pp. 37-42.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00016">
<othercit>Zhongwang Li et al., &#x201c;Efficient Encoding of Quasi-Cyclic Low-Density Parity-Check Codes&#x201d;, Communications, IEEE Transactions on, Jan. 2006, vol. 54, No. 1, pp. 71-81.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>Yoshikuni Miyata et al., &#x201c;A Study on LDPC Codes for Optical Communications using Concatenation to Combat Error-floor&#x201d;, Proceedings of the 2008 IEICE General Conference, Communication 2 (B-10-92), Mar. 5, 2008, p. 375.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>Japanese Office Action for JP2010-544007 mailed on Jun. 11, 2013 with Partial English Translation.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>18</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>714752</main-classification>
</classification-national>
<classification-national>
<country>US</country>
<main-classification>714758</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>12</number-of-drawing-sheets>
<number-of-figures>14</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20120089884</doc-number>
<kind>A1</kind>
<date>20120412</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Kamiya</last-name>
<first-name>Norifumi</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
<residence>
<country>JP</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Kamiya</last-name>
<first-name>Norifumi</first-name>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</inventor>
</inventors>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>NEC Corporation</orgname>
<role>03</role>
<address>
<city>Tokyo</city>
<country>JP</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Bhatia</last-name>
<first-name>Ajay</first-name>
<department>2117</department>
</primary-examiner>
<assistant-examiner>
<last-name>Nguyen</last-name>
<first-name>Thien D</first-name>
</assistant-examiner>
</examiners>
<pct-or-regional-filing-data>
<document-id>
<country>WO</country>
<doc-number>PCT/JP2009/070756</doc-number>
<kind>00</kind>
<date>20091211</date>
</document-id>
<us-371c124-date>
<date>20110615</date>
</us-371c124-date>
</pct-or-regional-filing-data>
<pct-or-regional-publishing-data>
<document-id>
<country>WO</country>
<doc-number>WO2010/073922</doc-number>
<kind>A </kind>
<date>20100701</date>
</document-id>
</pct-or-regional-publishing-data>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">Provided is an encoding apparatus wherein a transmission data sequence is divided into L short sequences, each of which is then encoded by use of an m-stage pseudo-cyclic low-density parity check encoding system. Each of the L encoded sequences is further divided into shorter sequences, the number of which is identical to the number m of the stages of the pseudo-cyclic codes and each of which has a length m. The shorter sequences are rearranged in order by a replacing module, thereafter encoded, by use of the m-stage pseudo-cyclic low-density parity check encoding system, and outputted. Accordingly, a decoding apparatus with a simple structure where node processing circuits (e.g., minimum-value calculating circuits), the number of which is p that is a submultiple of the number m of the foregoing stages, are provided, can be employed to efficiently decode the codes having a large frame length and a large encoding gain.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="180.34mm" wi="230.97mm" file="US08627172-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="232.58mm" wi="183.30mm" orientation="landscape" file="US08627172-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="263.40mm" wi="173.06mm" orientation="landscape" file="US08627172-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00003" num="00003">
<img id="EMI-D00003" he="250.53mm" wi="174.33mm" file="US08627172-20140107-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00004" num="00004">
<img id="EMI-D00004" he="235.80mm" wi="152.48mm" orientation="landscape" file="US08627172-20140107-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00005" num="00005">
<img id="EMI-D00005" he="231.99mm" wi="172.38mm" orientation="landscape" file="US08627172-20140107-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00006" num="00006">
<img id="EMI-D00006" he="233.26mm" wi="176.19mm" orientation="landscape" file="US08627172-20140107-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00007" num="00007">
<img id="EMI-D00007" he="198.63mm" wi="156.38mm" orientation="landscape" file="US08627172-20140107-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00008" num="00008">
<img id="EMI-D00008" he="228.09mm" wi="161.46mm" orientation="landscape" file="US08627172-20140107-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00009" num="00009">
<img id="EMI-D00009" he="183.30mm" wi="116.67mm" file="US08627172-20140107-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00010" num="00010">
<img id="EMI-D00010" he="189.06mm" wi="174.33mm" orientation="landscape" file="US08627172-20140107-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00011" num="00011">
<img id="EMI-D00011" he="211.50mm" wi="152.48mm" orientation="landscape" file="US08627172-20140107-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00012" num="00012">
<img id="EMI-D00012" he="224.96mm" wi="175.60mm" file="US08627172-20140107-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">TECHNICAL FIELD</heading>
<p id="p-0002" num="0001">The present invention relates to an error correction encoding apparatus, a decoding apparatus, and the like. More specifically, the present invention is based on quasi-cyclic low density party check (LDPC), which relates to a an error correction encoding apparatus for correcting block errors which divides an information sequence into blocks of a specific length and adds a redundant sequence individually to each block, and to a decoding apparatus, an encoding method, a decoding method, as well as programs thereof.</p>
<heading id="h-0002" level="1">BACKGROUND ART</heading>
<p id="p-0003" num="0002">In satellite communications, mobile telecommunication systems, or the like, an error correction encoding technique exhibiting a large encoding gain is employed in order to satisfy requirements in terms of the system structures such as reduction of required power, reduction in the size of antennas, and the like. In such case, low density parity check (LDPC) codes are known as an error correction codes exhibiting a large encoding gain, and more and more of the LDPC codes are employed to various kinds of communications systems described above or to storage devices of magnetic recording.</p>
<p id="p-0004" num="0003">The low density parity check codes do not simply show a single error correction encoding method but is a general name for error correction codes having such a character that a check matrix is sparse (most components in a matrix are &#x201c;0&#x201d;, and the number of component &#x201c;1&#x201d; is extremely small).</p>
<p id="p-0005" num="0004">Through selecting a check matrix in a sparse state, it is possible to structure an error correction encoding method having a large encoding gain by using a repeat decoding method such as sum-product algorithm or a min-sum algorithm (see Non-Patent Documents 1, 2, for example).</p>
<p id="p-0006" num="0005">Here, a block matrix of r&#xd7;n is shown in Expression 1 (r, n are natural numbers satisfying r&#x2266;n). In each component of the block matrix shown in <figref idref="DRAWINGS">FIG. 1</figref>, I<sub>i, j </sub>shows a cyclic replacement matrix or zero matrix of m&#xd7;m (symbol m is a natural number, symbol i is an integer between 0 and r&#x2212;1, and symbol j is an integer between 0 and n&#x2212;1).</p>
<p id="p-0007" num="0006">
<maths id="MATH-US-00001" num="00001">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mi>H</mi>
        <mo>=</mo>
        <mrow>
          <mo>[</mo>
          <mtable>
            <mtr>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                </msub>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                </msub>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <mi>r</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <mi>r</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                </msub>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msub>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <mi>r</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                </msub>
              </mtd>
            </mtr>
          </mtable>
          <mo>]</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>1</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0008" num="0007">The low density parity check encoding having the block matrix of Expression 1 as a check matrix is particularly called m-stage quasi-cyclic parity check codes. That is, a set of sequences whose matrix product with the matrix H is zero among all the information sequence of n&#xd7;m bits is the m-stage quasi-cyclic parity check codes constituted with a frame length=n&#xd7;m and a check matrix=H.</p>
<p id="p-0009" num="0008">Regarding the sum-product and min-sum algorithm as the decoding methods of the low density parity check codes, decoding processing and the device for achieving the processing tend to become complicated as the stage number m becomes smaller with respect to the natural number n.</p>
<p id="p-0010" num="0009">Therefore, it is possible to extend the frame length while suppressing the complication of the decoding processing by increasing the size m with the above-described cyclic replacement matrix I<sub>i, j</sub>. However, with the low density parity check codes of such structure in general, a large increase in the encoding gain in accordance with the increase in the frame length cannot be expected.</p>
<p id="p-0011" num="0010">There is Patent Document 1 described in the followings as a related technique regarding an error correction encoding apparatus which generates low density parity check codes from an input information sequence by using a low density parity check matrix. The technique depicted in Patent Document 1 includes a module which outputs the low density parity check matrix which is structured to continue a row in which cyclic replacement matrix in the same number as the weight of the row is arranged for the number of rows satisfying the prescribed weight distribution, and to gradually increase or decrease the weight of the row. This is designed to improve the performance compared to the methods using random number sequence.
<ul id="ul0001" list-style="none">
    <li id="ul0001-0001" num="0011">Non-Patent Document 1: Robert Gallager &#x201c;Low-Density Parity-Check Codes&#x201d; pp. 21-28, IEEE Transactions On Information Theory, January 1962</li>
    <li id="ul0001-0002" num="0012">Non-Patent Document 2: D. J. C Mackay, &#x201c;Good Error-Correcting Codes Based On Very Sparse Matrices&#x201d; pp. 399-431, IEEE Transactions On Information Theory, March 1999</li>
    <li id="ul0001-0003" num="0013">Patent Document 1: WO2006/106841</li>
</ul>
</p>
<heading id="h-0003" level="1">DISCLOSURE OF THE INVENTION</heading>
<heading id="h-0004" level="1">Problems to be Solved by the Invention</heading>
<p id="p-0012" num="0014">With the error correction encoding method including the above-described low density parity check codes (Non-Patent Documents 1, 2), normally, a still larger encoding gain can be acquired as the frame length becomes longer. However, when the frame is extremely long, a large amount of calculations are required for the encoding and decoding processing, thereby resulting in complicating the encoding apparatus as well as the decoding apparatus and expanding the scales thereof.</p>
<p id="p-0013" num="0015">Particularly, in a case where the frame length is extended by simply increasing the number of stages of the quasi-cyclic low-density parity check codes, there is only a small improvement in the gain of the encoding achieved in accordance with the increase in the frame length. Thus, this cannot result in achieving a substantial solution.</p>
<p id="p-0014" num="0016">Further, the technique depicted in Patent Document 1 is designed to improve the performance of the entire error correction encoding apparatus by generating the low density parity check codes in a characteristic manner. Regarding the improvements in the gain of encoding achieved in accordance with the increase in the frame length, there is no direct relevancy.</p>
<p id="p-0015" num="0017">An object of the present invention is to improve the inconveniences of the above-described related techniques and in particular to provide an encoding apparatus which can achieve a large encoding gain, an encoding method, and a program thereof, and also to provide a decoding apparatus with a simplified structure to operate in response to the encoding apparatus capable of acquiring the large encoding gain, which performs decoding processing of data encoded by the encoding apparatus in a small scale, as well as a decoding method and a program thereof.</p>
<heading id="h-0005" level="1">Means for Solving the Problems</heading>
<p id="p-0016" num="0018">In order to achieve the foregoing object, the error correction encoding apparatus according to the present invention includes: a data dividing module which divides a transmission data sequence into L-pieces of short sequences; a first encoding module which encodes (error correction encoding) each of the divided L-pieces of short sequences to encoded sequences of length N by an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m), and output those encoded sequences; and a redundant sequence output module which generates a redundant sequence based on each of the encoded sequences of length N outputted from the first encoding module, and outputs the redundant sequence in a same manner as a plurality of encoded sequences outputted from the first encoding module.</p>
<p id="p-0017" num="0019">Further, the redundant sequence output module is characterized to include: a data replacing module which inputs the L-pieces of encoded sequences of length N encoded by the first encoding module, and outputs each of the data sequences by changing an order thereof; and a second encoding module which encodes (error correction encoding) each of the replaced encoded sequences outputted from the data replacing module by the m-stage quasi-cyclic low density parity check encoding method, and outputs those encoded sequences.</p>
<p id="p-0018" num="0020">Further, in order to achieve the foregoing object, the decoding apparatus according to the present invention is a decoding apparatus for decoding transmitted data encoded by an error correction encoding apparatus and correcting an error when the error is added to the data, and the decoding apparatus includes: a plurality of data storage modules which, among the data transmitted from the error correction encoding apparatus, separately store data of a plurality of encoded sequences processed by the first encoding module of the error correction encoding apparatus and data of a plurality of encoded sequences processed by the redundant sequence calculating module of the error correction encoding apparatus; and a memory controller for controlling storing operations of each of the data storage modules.</p>
<p id="p-0019" num="0021">Further, the decoding apparatus includes a decoding update processing module provided by corresponding to each of the data storage modules to repeat, for number of times specified by the address generating procedure, an update operation which reads out the data held at addresses of each of the data storage modules according to an address generating procedure set in advance, performs update processing, and stores the data again to the same addresses of the original data storage modules. Furthermore, the memory controller has a decoded data output control function which, among the data held at each of the plurality of data storage modules, takes out highest-order bit of each symbol specified by the address generating procedure set in advance in a reversed procedure from that of the time of writing to each of the data storage modules, and outputs those as decoded data.</p>
<p id="p-0020" num="0022">Further, in order to achieve the foregoing object, the error correction encoding method according to the present invention includes: dividing a transmission data sequence into L-pieces of short sequences by a data dividing module; encoding each of the divided L-pieces of short sequences to encoded sequences of length N by a first encoding module according to an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m); and generating a redundant sequence by a redundant sequence output module based on each of the encoded sequences of length N outputted from the first encoding module, and outputting the redundant sequence as redundant sequence data along with a plurality of encoded sequences outputted from the first encoding module.</p>
<p id="p-0021" num="0023">Then, when outputting the redundant sequence data, the error correction encoding method is characterized to include: inputting the L-pieces of encoded sequences of length N encoded by the first encoding module to a data replacing module, and outputting each of the data sequences by changing an order thereof; and thereafter, performing encoding (error correction encoding) on each of the replaced and outputted encoded sequences by a second encoding module according to the m-stage quasi-cyclic low density parity check encoding method.</p>
<p id="p-0022" num="0024">Further, in order to achieve the foregoing object, the decoding method according to the present invention is a decoding method for decoding transmitted data encoded by an error correction encoding apparatus and correcting an error when the error is added to the data, and the method is characterized to include: among the data transmitted from the error correction encoding apparatus, separately storing data of a plurality of encoded sequences processed by a first encoding module of the error correction encoding apparatus and data of a plurality of encoded sequences processed by a redundant sequence calculating module of the error correction encoding apparatus to a plurality of data storage modules; repeating an update operation by a decoding update processing module provided by corresponding to each of the data storage modules for a number of times specified by an address generating procedure, the update operation including reading out the data held at addresses of each of the data storage modules according to the address generating procedure set in advance, performing update processing, and storing the data again to the same addresses of the original data storage modules; and among the data held at each of the plurality of data storage modules, executing a decoded data output control step by a memory controller for taking out highest-order bit of each symbol specified by the address generating procedure set in advance in a reversed procedure from that of the time of writing to each of the data storage modules, and outputting those as decoded data.</p>
<p id="p-0023" num="0025">Further, in order to achieve the foregoing object, the error correction encoding processing program according to the present invention is characterized as a program for causing a computer to execute: a data dividing processing function which divides a transmission data sequence into L-pieces of short sequences; a first encoding processing function which performs encoding (error correction encoding) on each of the divided L-pieces of short sequences to encoded sequences of length N by an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m), and outputs those encoded sequences; and a redundant sequence output processing function which generates a redundant sequence based on each of the encoded sequences of length N generated by executing the first encoding processing function, and outputs the redundant sequence in a same manner as a plurality of encoded sequences generated and outputted by the first encoding processing function, wherein the redundant sequence output processing function includes: a data replacement processing function which inputs the L-pieces of encoded sequences of length N encoded by the first encoding processing function, and performs output processing of each of the data sequences by changing an order thereof; and a second encoding processing function which performs encoding (error correction encoding) on each of the replaced encoded sequences outputted thereby by the m-stage quasi-cyclic low density parity check encoding method, and outputs those encoded sequences.</p>
<p id="p-0024" num="0026">Further, in order to achieve the foregoing object, the decoding processing program according to the present invention is a decoding processing program for executing, on a decoding apparatus, decoding processing of data regarding transmission data sequence encoded and transmitted through execution of an error correction encoding processing program on an error correction encoding apparatus and for correcting an error when the error is added thereto, which is characterized to cause a computer to execute: a storing operation control function which, among the data regarding the encoded and transmitted transmission data sequence, separately stores data of a plurality of encoded sequences processed by a first encoding processing function executed on the error correction encoding apparatus and data of a plurality of encoded sequences processed by a redundant sequence output processing function executed on the error correction encoding apparatus to each of a plurality of data storage modules; a decoding update processing function which repeats an update processing operation for a number of times specified by an address generating procedure, the update processing operation including reading out the data held at addresses of each of the data storage modules according to the address generating procedure set in advance, performing update processing, and storing the data again to the same addresses of the original data storage modules; and a decoded data output control function which, among the data held at each of the plurality of data storage modules, takes out highest-order bit of each symbol specified by the address generating procedure set in advance in a reversed procedure from that of the time of writing to each of the data storage modules, and outputs those as decoded data.</p>
<heading id="h-0006" level="1">Effect of the Invention</heading>
<p id="p-0025" num="0027">As described above, the present invention is basically structured to execute the encoding by a plurality of combinations such as executing encoding by one of the encoding modules by using the m-stage quasi-cyclic low density parity check encoding method and further encoding the replaced output of the redundant sequence via the data replacing module by using the other encoding module. This makes it possible to provide such an excellent effect that the encoding gain is greatly improved by the increase in the frame length.</p>
<p id="p-0026" num="0028">Further, when decoding the encoded data sequence, the same decoding processing corresponding to the m-stage quasi-cyclic low density parity check codes as in the case of the transmission data sequence encoding described above is executed on the receiver side even when data sequence of the increased frame length is transmitted. Thus, it is possible to perform the decoding processing without increasing the circuit scale and the number of memories to be used. This provides excellent effects of increasing the speed of the decoding processing and suppressing the power consumption at the time of the decoding processing operations.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0007" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0027" num="0029"><figref idref="DRAWINGS">FIG. 1</figref> is a block diagram showing an error correction encoding apparatus part of a first exemplary embodiment according to the present invention;</p>
<p id="p-0028" num="0030"><figref idref="DRAWINGS">FIG. 2</figref> is a block diagram showing a decoding apparatus part of the first exemplary embodiment according to the present invention;</p>
<p id="p-0029" num="0031"><figref idref="DRAWINGS">FIG. 3</figref> is a block diagram showing a data replacing module which constitutes a part of the error correction encoding apparatus shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0030" num="0032"><figref idref="DRAWINGS">FIG. 4</figref> is an explanatory illustration showing an operation example of a data replacing module shown in <figref idref="DRAWINGS">FIG. 3</figref>;</p>
<p id="p-0031" num="0033"><figref idref="DRAWINGS">FIG. 5</figref> is an explanatory illustration showing a frame structure of an encoded data sequence outputted from the error correction encoding apparatus shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0032" num="0034"><figref idref="DRAWINGS">FIG. 6</figref> is a block diagram showing an example of a node processing module (minimum-value calculating module) which constitutes a part of the decoding apparatus shown in <figref idref="DRAWINGS">FIG. 1</figref>;</p>
<p id="p-0033" num="0035"><figref idref="DRAWINGS">FIG. 7</figref> is an explanatory illustration showing a frame structure of a reception frame sectioned by each m-symbol corresponding to the frame structure of the data sequence shown in <figref idref="DRAWINGS">FIG. 5</figref>;</p>
<p id="p-0034" num="0036"><figref idref="DRAWINGS">FIG. 8</figref> is an illustration showing an example of a method of making access to a plurality of RAMs by a memory controller in the decoding apparatus shown in <figref idref="DRAWINGS">FIG. 2</figref>, in which region (A) is a case where accesses are made according to address values calculated by Expression 5 and region (B) is a case calculated by Expression 7;</p>
<p id="p-0035" num="0037"><figref idref="DRAWINGS">FIG. 9</figref> is an explanatory illustration showing an example of operations of a cyclic shift processing unit of the decoding apparatus shown in <figref idref="DRAWINGS">FIG. 2</figref>;</p>
<p id="p-0036" num="0038"><figref idref="DRAWINGS">FIG. 10</figref> is a block diagram showing an example of an integration circuit (integration device) provided as a node processing module which constitutes a part of a decoding apparatus according to a second exemplary embodiment of the present invention;</p>
<p id="p-0037" num="0039"><figref idref="DRAWINGS">FIG. 11</figref> is an illustration of a third exemplary embodiment of the present invention, which is a block diagram showing another example of the error correction encoding apparatus of the first exemplary embodiment shown in <figref idref="DRAWINGS">FIG. 1</figref>; and</p>
<p id="p-0038" num="0040"><figref idref="DRAWINGS">FIG. 12</figref> is an illustration of a fourth exemplary embodiment of the present invention, which is a block diagram showing an example of a case where the error correction encoding apparatus and the decoding apparatus of the first exemplary embodiment shown in <figref idref="DRAWINGS">FIG. 1</figref> are loaded to a data communication apparatus.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0008" level="1">BEST MODES FOR CARRYING OUT THE INVENTION</heading>
<heading id="h-0009" level="1">First Exemplary Embodiment</heading>
<p id="p-0039" num="0041">Next, a first exemplary embodiment of an error correction encoding apparatus and a decoding apparatus corresponding to the encoding apparatus according to the present invention will be described by referring to <figref idref="DRAWINGS">FIG. 1</figref> to <figref idref="DRAWINGS">FIG. 9</figref>.</p>
<p id="p-0040" num="0042">The encoding apparatus according to the first exemplary embodiment includes a transmission data sequence input module which inputs transmission data sequence of a length K and a redundant sequence calculating module which calculates a redundant sequence from the inputted transmission data sequence, and the encoding apparatus is structured to output the redundant sequence and the transmission data sequence towards the corresponding decoding apparatus to perform decoding.</p>
<p id="p-0041" num="0043">The error correction encoding apparatus <b>10</b> according to the first exemplary embodiment is shown in <figref idref="DRAWINGS">FIG. 1</figref>, and the decoding apparatus <b>20</b> which decodes and outputs the encoded data outputted from the encoding apparatus <b>10</b> is shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="h-0010" num="0000">(Structure of Error Correction Encoding Apparatus <b>10</b>)</p>
<p id="p-0042" num="0044">As shown in <figref idref="DRAWINGS">FIG. 1</figref>, the error correction encoding apparatus <b>10</b> according to the first exemplary embodiment includes: a data dividing module <b>11</b> which divides a transmission data sequence <b>101</b> of length K into L-pieces of short sequences; a first encoding module <b>12</b> which performs encoding (error correction encoding) on each of the L-pieces of divided short sequences into encoded sequence of length N by an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, and N is a multiple of m) and outputs the encoded sequences; and a redundant sequence output module <b>13</b> which generates redundant sequences based on each of the encoded sequence <b>103</b> of length N outputted from the first encoding module <b>12</b>, and outputs the redundant sequences in the same manner as a plurality of encoded sequences <b>103</b> outputted from the first encoding module <b>12</b>.</p>
<p id="p-0043" num="0045">The redundant sequence output module <b>13</b> is structured by including: a data replacing module <b>14</b> which inputs the L-pieces of encoded sequences <b>103</b> of length N encoded by the first encoding module <b>12</b>, and outputs those by changing the order of each data sequence; and a second encoding module <b>15</b> which encodes each of the replaced encoded sequences outputted from the data replacing module <b>14</b> through performing encoding (error correction encoding) by using the m-stage quasi-cyclic low density parity check encoding method, and outputs those.</p>
<p id="p-0044" num="0046">This will be described in more details.</p>
<p id="p-0045" num="0047">As described above, the encoding apparatus <b>10</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is an apparatus which inputs the transmission data sequence <b>101</b> of length K (K is a natural number), calculates the redundant sequence from the transmission data sequence <b>101</b> of length K, and outputs the encoded sequence that is a mixture of the transmission data sequence and the redundant sequence.</p>
<p id="p-0046" num="0048">Among those, the first encoding module <b>12</b> is constituted with L-pieces of encoding processing units <b>12</b><sub>0</sub>, <b>12</b><sub>1</sub>, - - - , <b>12</b><sub>L-1 </sub>which are encoders of a plurality of m-stage quasi-cyclic low density parity check (LDPC) codes having the check matrix of Expression 1. The symbol m shows a natural number.</p>
<p id="p-0047" num="0049">That is, the first encoding module <b>12</b> as the m-stage low density parity check encoding module of <figref idref="DRAWINGS">FIG. 1</figref> has a function of encoding each of the L-pieces of transmission data sequences of length K (L is a natural number) into sequence of Length N, respectively, and outputting those.</p>
<p id="p-0048" num="0050">The first encoding module <b>12</b> is provided with the data replacing module <b>14</b> that has a cyclic replacement function which inputs each output of the L-pieces of encoding processing units <b>12</b><sub>0</sub>, <b>12</b><sub>1</sub>, - - - , <b>12</b><sub>L-1 </sub>of the encoding module <b>12</b> and outputs each of a plurality of data sequences by changing the order thereof. Reference numeral <b>104</b> shows a plurality of data sequences outputted from the data replacing module <b>14</b>.</p>
<p id="p-0049" num="0051">On the output side of the data replacing module <b>14</b>, the second encoding module <b>15</b> which functions in the same manner as the above-described first encoding module <b>13</b> is provided.</p>
<p id="p-0050" num="0052">The second encoding module <b>15</b> has a function of encoding (error correction encoding) each of the output sequences of the data replacing module <b>14</b> into sequences of length that is equal to or smaller than (L+S)&#xd7;m and outputting those. The second encoding module <b>15</b> is constituted with N/m-pieces of encoding processing units <b>15</b><sub>0</sub>, <b>15</b><sub>1</sub>, - - - , <b>15</b><sub>L-1</sub>(<b>1</b>-<b>2</b>) which are encoders of a plurality of m-stage quasi-cyclic low density parity check (LDPC) codes functioning in the same manner as the first encoding module <b>12</b> described above. Thereby, the second encoding module <b>15</b> transmits and outputs a plurality of encoded and redundant data towards the decoding apparatus as will be described later.</p>
<p id="p-0051" num="0053"><figref idref="DRAWINGS">FIG. 3</figref> shows an example of the data replacing module <b>14</b>.</p>
<p id="p-0052" num="0054">The data replacing module <b>14</b> shown in <figref idref="DRAWINGS">FIG. 3</figref> is constituted with: a short sequence dividing unit <b>14</b>A as a replacing data dividing unit which sections (divides into short sequences) each of the L-pieces of input data sequences (L is a natural number) into small blocks of the length m that is same as the stage number m of the quasi-cyclic low density parity check codes; and a data replacing unit <b>16</b> which changes the order by a unit of the (L&#xd7;N)/m-pieces of small blocks of length m set by the division and outputs N/m-pieces of sequences in length of L&#xd7;m in maximum. The data replacing module <b>14</b> is structured so that the above-described cyclic replacement function is executed thereby.</p>
<p id="p-0053" num="0055">Note here that the replacing data dividing unit (short sequence dividing unit) <b>14</b>A of the data replacing module <b>14</b> has a function which arranges each of L+S-pieces of small blocks constituting a second low density parity check codes so as not to appear on a same row and a same column in a case where the L-pieces of the first low density parity check code sequences among the output data encoded by the first encoding module <b>12</b> are divided into the small blocks of length m to be arranged on a higher-order L-row of two dimensional layout of (L+S) rows and (N/m) columns, and the parity sequences of length S&#xd7;m of the N/m-pieces of the second low density parity check codes are divided into the small blocks of length m and arranged on a lower-order S-row of the two-dimensional layout of the (L+S) rows and (N/m) columns.</p>
<p id="p-0054" num="0056">The data replacing unit <b>16</b> of the data replacing module <b>14</b> is constituted with: a selector <b>14</b>B which performs replacement of the data according to a pattern determined in advance by a unit of the small block sectioned by the replacing data dividing unit <b>14</b>A; and a cyclic replacing circuit <b>14</b>C which performs cyclic replacement of an amount determined in advance inside the small block of length m regarding each of the sequences outputted from the selector <b>14</b>B.</p>
<p id="p-0055" num="0057">Out of those, the selector <b>14</b>B includes L-pieces of input ports as well as N-pieces of output ports and has a function of performing distributions. Further, the cyclic replacing circuit <b>14</b>C includes a plurality of cyclic replacers <b>14</b>C<sub>1</sub>, <b>14</b>C<sub>2</sub>, <b>14</b>C<sub>3</sub>, - - - by corresponding to each sequence so as to be able to execute the cyclic replacement promptly for each sequence thereby.</p>
<p id="p-0056" num="0058">Further, the input to the selector <b>14</b>B is the data sequence sectioned into L-pieces of small blocks of length m as the output of the replacing data dividing unit <b>14</b>A, and the output of the selector <b>14</b>B is the data sequence of n-pieces of small blocks of length m. Note here that the natural number n is equivalent to a numerical value acquired by dividing the frame length N (N is a natural number) of the m-stage quasi-cyclic low density parity check codes by the stage number m. The regulation of data replacement executed by the selector <b>14</b>B will be described in details in the section of operations described later.</p>
<p id="h-0011" num="0000">(Structure of Decoding Apparatus <b>20</b>)</p>
<p id="p-0057" num="0059"><figref idref="DRAWINGS">FIG. 2</figref> shows the decoding apparatus <b>20</b> which decodes the data encoded by the encoding method. The decoding apparatus shown in <figref idref="DRAWINGS">FIG. 2</figref> has a function which decodes the data encoded and transmitted by the error correction encoding apparatus <b>10</b> described above, and corrects errors when the errors are attached thereto.</p>
<p id="p-0058" num="0060">The decoding apparatus <b>20</b> includes: a data storage module <b>21</b> which includes a plurality of data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>for separately storing a plurality of encoded sequence data <b>103</b> processed by the first encoding module <b>12</b> of the error correction encoding apparatus <b>10</b> and a plurality of encoded sequence data processed by the redundant sequence calculating module <b>13</b> of the error correction encoding apparatus <b>10</b> out of the data transmitted from the error correction encoding apparatus <b>10</b>; and a memory controller <b>20</b>A which controls the storing operations of each of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>.</p>
<p id="p-0059" num="0061">Further, the decoding apparatus <b>20</b> includes a decoding update processing module <b>22</b> provided by corresponding to each of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>for repeatedly executing, for the number of times specified by an address generating procedure, an update operation which includes reading out the data stored in the addresses of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>according to an address generating procedure set in advance, performing update processing, and storing those to the same addresses of the original data storage modules.</p>
<p id="p-0060" num="0062">Further, the memory controller <b>20</b>A has a decoded data output control function which takes out the highest-order bit of each symbol specified by the address generating procedure set in advance by a procedure reversed from the procedure when writing to each of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>out of the data held in each of the plurality of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>and outputs those as the decoded data.</p>
<p id="p-0061" num="0063">The data storage module <b>21</b> specifically includes N/m-pieces (N is a natural number, and m is the number of stages of quasi-cyclic low density parity check codes) of data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>, and each of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>is constituted with a RAM (random access memory) whose bit number is b&#xd7;p (b is a natural number, and p is a submultiple of m) and word number is m/p&#xd7;(L+S).</p>
<p id="p-0062" num="0064">The data storage module <b>21</b> is specifically constituted with a plurality of RAMs in a number that is same as the quotient acquired by dividing a larger numerical value out of the values of length N and (L+S)&#xd7;m of the output sequences of each of the first and second encoding modules (low density parity check code encoding modules) shown in <figref idref="DRAWINGS">FIG. 1</figref> by m described above.</p>
<p id="p-0063" num="0065">Further, as an initial state, among each of the plurality of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>, the j-th RAM (j is an integer between 0 and (N/m)&#x2212;1) of the N/m-pieces is set to hold f(jm+k), f(jm+(m/p)+k), f(jm+2&#xd7;(m/p)+k), f(jm+(p&#x2212;1)&#xd7;(m/p)+k) out of the reception symbol sequences f(<b>0</b>), f(<b>1</b>), - - - f(N&#x2212;1) corresponding to the i-th sequence among the L-pieces of the sequences encoded with the first low density parity check codes at the &#x201c;(m/p)&#xd7;i+k&#x201d;-th address (i is an integer between 0 and L&#x2212;1, and k is an integer between 0 and (m/p)&#x2212;1), and to hold the reception symbol sequence corresponding to the parity sequence encoded with the second low density parity check codes at the addresses after the &#x201c;(m/p)&#xd7;L&#x201d;-th address.</p>
<p id="p-0064" num="0066">The encoding update processing module <b>22</b> is in a structure including: a cyclic shift processing unit <b>23</b> constituted with N/m-pieces of cyclic shift circuits <b>23</b><sub>0</sub>, <b>23</b><sub>1</sub>, <b>23</b><sub>2</sub>, - - - which perform cyclic shift of data held in each of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>by an amount given by each b-bit; a node processing module <b>24</b> constituted with p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - mounted to respective output sides of each of the cyclic shift circuits <b>23</b><sub>0</sub>, <b>23</b><sub>1</sub>, <b>23</b><sub>2</sub>, - - - ; and the data storage module <b>21</b> which holds the output results from each of the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - . Through cooperative work of each of those structural elements, the update operations are executed.</p>
<p id="p-0065" num="0067">More specifically, as shown in <figref idref="DRAWINGS">FIG. 2</figref>, the decoding update processing module <b>22</b> is in a structure including: the cyclic shift processing unit <b>23</b> constituted with N/m-pieces of cyclic shift circuits <b>23</b><sub>0</sub>, <b>23</b><sub>1</sub>, <b>23</b><sub>2</sub>, - - - , <b>23</b><sub>n-1 </sub>which perform cyclic shift of data held in each of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>by an amount given by each b-bit; n-pieces of subtractors <b>25</b> which receive outputs of each of the cyclic shift circuits <b>23</b><sub>0</sub>, <b>23</b><sub>1</sub>, <b>23</b><sub>2</sub>, - - - , <b>23</b><sub>n-1</sub>; a first delay element <b>26</b> constituted with a plurality of first delay element units <b>26</b><sub>0</sub>, <b>26</b><sub>1</sub>, <b>26</b><sub>2</sub>, - - - , <b>26</b><sub>n-1 </sub>for holding the output results of each of the subtractors <b>25</b>; the node processing module <b>24</b> including the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>which receive each of the outputs from each of the subtractors <b>25</b> and perform transmission processing; a second delay element <b>28</b> which includes second delay element units <b>28</b><i>a</i>, <b>28</b><i>b</i>, - - - for holding each output result of the node processing module <b>24</b> and transmitting those to each of the subtractors <b>25</b>; and n-pieces of adders <b>29</b> which add each of the outputs of the node processing module <b>24</b> and the first delay element <b>26</b> and transmit the results to each of the RAMs as update information. Through cooperative work of each of those structural elements, the update operations are executed.</p>
<p id="p-0066" num="0068">Note here that the word number of each of the RAMs is equal to the quotient acquired by dividing the smaller numerical value out of N and (L+S)&#xd7;m described above by a submultiple p of m described above. Thus, in the explanations hereinafter, it is defined as N&#x2267;(L+S)&#xd7;m for simplifying the descriptions unless there is any specific notice.</p>
<p id="p-0067" num="0069">As described above, the decoding apparatus <b>20</b> includes N/m-pieces of RAMs whose word number is equal to (L+S)&#xd7;(m/p). Further, the decoding apparatus <b>20</b> includes the first delay elements <b>26</b>, the adders <b>29</b>, the subtractors <b>25</b> in the same number as that of the RAMs, and p-pieces (a submultiple of m) of the second delay elements <b>28</b>. In the exemplary embodiment shown in <figref idref="DRAWINGS">FIG. 2</figref>, the delay amount of the first delay elements <b>26</b> is structured to be equal to the processing delay amount of the node processing module <b>24</b>. The delay amount of the second delay element <b>28</b> will be described in details in the section of explaining the operations later.</p>
<p id="p-0068" num="0070">Further, while the case of arranging the cyclic shift processing unit <b>23</b> at each of the readout ports of each of the data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>in the decoding apparatus <b>20</b> has been described, it is also possible to provide a cyclic shift processing unit <b>33</b> functioning equivalently with respect to the cyclic shift processing unit <b>23</b> at the writing port as shown in <figref idref="DRAWINGS">FIG. 2</figref>.</p>
<p id="p-0069" num="0071">Regarding the cyclic shift processing units <b>23</b> and <b>33</b>, either the readout port side or the writing port side can share the other side, so that both the readout port and the writing port may not necessarily have to be provided but either one of those may be provided. In the section of explaining the operations later, a case of having the both will be described for simplifying the explanations.</p>
<p id="p-0070" num="0072"><figref idref="DRAWINGS">FIG. 6</figref> shows an example of the node processing module <b>24</b> which constitutes a part of the decoding apparatus <b>20</b>. <figref idref="DRAWINGS">FIG. 6</figref> shows such a characteristic feature that each of the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>constituting the node processing module <b>24</b> is formed by a minimum-value calculating module.</p>
<p id="p-0071" num="0073">Among those, the minimum-value calculating module (node processing unit) <b>24</b><sub>0 </sub>includes: a plurality of 2/4 data processing units <b>24</b>A provided at the data input stage thereof for receiving output data from each of the subtractors <b>25</b> by sectioning those into groups of four pieces each, and outputting two numerical values whose absolute values are small and a numerical value whose absolute value is minimum along with the numbers of the corresponding input ports; and a plurality of 2/4 data processing units <b>24</b>B having the same function, which are provided on the output side of the plurality of each of the 2/4 data processing units <b>24</b>A in a sequential tournament manner.</p>
<p id="p-0072" num="0074">Those will be described in more details.</p>
<p id="p-0073" num="0075">As described above, the minimum-value calculating module (node processing unit) <b>24</b><sub>0 </sub>shown in <figref idref="DRAWINGS">FIG. 6</figref> is constituted by including the 2/4 data processing units <b>24</b>A, <b>24</b>B connected in a tournament manner, a demultiplexer <b>27</b>C, and an exclusive OR circuit <b>24</b>D. Among those, the 2/4 data processing units <b>24</b>A, <b>24</b>B are structured to input four integers, and to output the two smaller values among those and the input port number to which the smallest value is inputted, as described above.</p>
<p id="p-0074" num="0076">The input data to the 2/4 data processing units <b>24</b>A in the tournament lowermost stage (input stage) is the absolute value of the input data of the minimum-value calculating module (node processing unit) <b>24</b><sub>0 </sub>and 1 bit showing a code of plus/minus is inputted to the exclusive OR circuit <b>24</b>D. The outputs of the 2/4 data processing units <b>24</b>B in the uppermost stage of the tournament are the minimum value X<b>0</b>, second lowest smallest value X<b>1</b> among the absolute values of all the input data to the minimum-value calculating module (node processing unit) <b>24</b><sub>1</sub>, and number P of the input port to which the minimum value is inputted.</p>
<p id="p-0075" num="0077">This is the same for the other minimum-value calculating modules (node processing units) <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, <b>24</b><sub>3</sub>, - - - , <b>24</b><sub>p-1</sub>.</p>
<p id="p-0076" num="0078">Thereby, the function of outputting the number corresponding to the input port of the numerical value whose absolute value is the minimum among the input numerical values of k-pieces of input data is executed. Based on this, all the exclusive ORs of the highest bits of (k&#x2212;1) pieces selected from the entire highest bits of the k-pieces of input numerical values are calculated.</p>
<p id="p-0077" num="0079">Further, referring to <figref idref="DRAWINGS">FIG. 6</figref>, the demultiplexer <b>24</b>C inputs the output of the 2/4 data processing unit <b>24</b>B of the uppermost stage of the tournament, outputs X<b>1</b> to the output port of the same number as the input port number P, and outputs X<b>0</b> to the output ports of the other numbers. As each output of the minimum-value calculating modules <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , a code bit (1-bit) is added to the output of the demultiplexer <b>24</b>C as the structural element according to the output result of the exclusive OR circuit <b>24</b>D to be outputted.</p>
<p id="p-0078" num="0080">In the meantime, the minimum-value calculating modules <b>2424</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - also output the input data to the second delay element <b>28</b> of the decoding apparatus <b>20</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> in addition to the output described above. The output data to the second delay element <b>28</b> is X<b>0</b>, X<b>1</b>, P which are the outputs of the 2/4 data processing units <b>24</b>B of the uppermost stage of the tournament and each output bit of the exclusive OR circuit <b>24</b>D.</p>
<p id="h-0012" num="0000">(Operation Explanation 1: Encoding Apparatus)</p>
<p id="p-0079" num="0081">First, the operations of the encoding apparatus <b>10</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> will be described.</p>
<p id="p-0080" num="0082">First, the operations include: a short sequence dividing step (step S<b>501</b>) which divides the transmission data sequence into L-pieces of short sequences by the data dividing module <b>11</b>; a first encoding step (step S<b>502</b>) which encodes each of the divided L-pieces of short sequences into encoded sequences of length N by the m-stage cyclic low density parity check encoding method (L, m are natural numbers, and N is a multiple of m) by using the first encoding module <b>12</b>; and a redundant sequence generation/output step (step S<b>503</b>) which generates the redundant sequence by the redundant sequence output module <b>13</b> based on each of the encoded sequences of length N outputted from the first encoding module <b>12</b>, and outputs it as the redundant sequence data along with a plurality of encoded sequences outputted from the first encoding module <b>12</b>.</p>
<p id="p-0081" num="0083">At the time of outputting the redundant sequence data (step S<b>503</b>), there is executed a step (step S<b>503</b>-(<b>1</b>)) which inputs the L-pieces of decoded sequences of length N encoded by the first encoding module <b>12</b> to the data replacing module <b>14</b> and outputs those by changing the order of each data sequence. Thereafter, there is executed a step (step S<b>503</b>-(<b>2</b>)) which performs encoding (error correction encoding) on each of the replaced and outputted encoded sequences by the m-stage cyclic low density parity check encoding method by using the second encoding module <b>15</b>.</p>
<p id="p-0082" num="0084">In the step (step S<b>503</b>-(<b>1</b>)) executed by the data replacing module <b>14</b> to change the order of the data sequences with respect to the input data and output those, the short sequence dividing unit <b>14</b>A executes a step which divides (sections into small blocks) each of the L-pieces of data sequences encoded by the first encoding module <b>12</b> into the short sequences of length m in the same number as the stage number in of the first quasi-cyclic low density parity check codes, and the data replacing unit <b>16</b> executes a step (step S<b>503</b>-(<b>1</b>)<i>b</i>) which changes the order by a unit of the (L&#xd7;N)/m-pieces of short sequences of length m set by this dividing operation and outputs the N/m-pieces of sequence of length L&#xd7;m at the maximum.</p>
<p id="p-0083" num="0085">Further, in the step (step S<b>503</b>-<b>1</b>(<i>b</i>)) executed by the data replacing unit <b>16</b> for changing the order by a unit of short sequence, the selector <b>14</b>B including the L-pieces of input ports and the N-pieces of output ports executes the distributing step, and the cyclic replacing circuit <b>14</b>C constituted with a plurality of cyclic replacers executes the step which performs cyclic replacement of each of the small blocks outputted thereby. Through this procedure, the N/m-pieces of sequences of length L&#xd7;m at the maximum are outputted.</p>
<p id="p-0084" num="0086">This will be described in more details.</p>
<p id="p-0085" num="0087">As described above, the encoding apparatus <b>10</b> first fetches the transmission data sequence <b>101</b> of length K, and divides it into the L-pieces of short sequences of lengths K<sub>0</sub>, K<sub>1</sub>, - - - , K<sub>L-1 </sub>(K<sub>0</sub>, K<sub>1</sub>, - - - , K<sub>L-1 </sub>and L are natural numbers) by the data dividing unit <b>11</b>. Then, each of the divided L-pieces of transmission data short sequences <b>102</b> is encoded by the first encoding module <b>12</b> which includes the corresponding L-pieces of encoding processing units <b>12</b><sub>0</sub>, <b>12</b><sub>1</sub>, - - - , <b>12</b><sub>L-1</sub>.</p>
<p id="p-0086" num="0088">That is, the first encoding module <b>12</b> as the m-stage low density parity check encoding module shown in <figref idref="DRAWINGS">FIG. 1</figref> encodes each of the sequences that are acquired by dividing each transmission data sequence of length K described above into L-pieces (L is a natural number) as the sequences of length N.</p>
<p id="p-0087" num="0089">Then, the L-pieces of the encoded sequences <b>103</b> of length N are outputted to the first encoding module <b>12</b> and inputted to the data replacing module <b>14</b> as shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0088" num="0090">The data replacing module <b>14</b> replaces the L-pieces of encoded sequences <b>103</b> of length N into the data sequences <b>104</b> of length equal to or less than L&#xd7;m, and outputs n-pieces of the data sequences <b>104</b> at the maximum (n is a value acquired by dividing N by m). Subsequently, each of the data sequences <b>104</b> of length equal to or less than L&#xd7;m is encoded by the second encoding module (m-stage quasi-cyclic low density parity check encoding module) <b>15</b>, and the redundant encoded sequences acquired thereby are calculated and outputted.</p>
<p id="p-0089" num="0091">Parity sequences of length S&#xd7;m (S is a natural number) acquired by excluding the input sequences to the second encoding module <b>15</b> from the encoded sequences are outputted for the same number (n-pieces at the maximum) as that of the output sequences of the data replacing module <b>14</b>.</p>
<p id="p-0090" num="0092">This will be described in more details.</p>
<p id="p-0091" num="0093">The data replacing, module <b>14</b> shown in <figref idref="DRAWINGS">FIG. 3</figref> inputs the L-pieces of the sequences of length N as described above. Note here that the L-pieces of data sequences <b>103</b> shown in <figref idref="DRAWINGS">FIG. 3</figref> are defined as an input sequence 0, an input sequence 1, - - - , an input sequence L&#x2212;1 from the left side for convenience' sake.</p>
<p id="p-0092" num="0094">Then, each of the inputted data sequences <b>103</b> is divided into small blocks of length m in the same number as the stage number m by the replacing dividing unit <b>14</b>A, and outputted to the selector <b>14</b>B of the data replacing unit <b>16</b> as the sequence data constituted with the n-pieces of small blocks of length m (n is a value acquired by dividing N by m). The selector <b>14</b>B includes the L-pieces of input ports and n-pieces of output ports. Assuming that each of those input and output ports are numbered as 0, 1, 2, - - - from the left side for convenience' sake, the input sequence 0 is inputted to the input port 0, and the input sequence 1 is inputted to the input port 1 (this is the same for the cases thereafter).</p>
<p id="p-0093" num="0095">Input to the selector <b>14</b><i>b </i>is done by a unit of small block. Each of the L-pieces of the small blocks inputted from the L-pieces of input ports is distributed to one of the n-pieces of outputs ports or discarded. The number of small blocks outputted from each of the output ports is &#x201c;L&#x201d; at the maximum. Distribution of the small blocks to the output ports inputted from the selector <b>14</b>B is so set that the input ports of each of the small blocks outputted from the same output port become all different.</p>
<p id="p-0094" num="0096">That is, the L-pieces of small blocks at the maximum are outputted from the output port X of the selector <b>14</b>B (X is an integer between 0 and n&#x2212;1). Provided that the number of small blocks inputted from the input port Y among the small blocks is T (X, Y), all the integers Y between 0 and L&#x2212;1 are so set that T(X, Y) becomes equal to or less than 1.</p>
<p id="p-0095" num="0097">Each small block outputted from the output ports of the selector <b>14</b>B is correspondingly processed and cyclic-replaced by the cyclic replacing unit <b>14</b>C by each data sequence to be the output of the data replacing module <b>14</b>.</p>
<p id="p-0096" num="0098"><figref idref="DRAWINGS">FIG. 4</figref> shows examples of operations of the selector <b>14</b>A which forms a part of the replacement/output processing unit <b>16</b> of the data replacing module <b>14</b> described above. In the examples of operations of the selector <b>14</b>A shown in <figref idref="DRAWINGS">FIG. 4</figref>, <figref idref="DRAWINGS">FIG. 4A</figref> is a case where the input port number L is equal to the output port number n (=N/m), <figref idref="DRAWINGS">FIG. 4B</figref> is a case where the input port number L is smaller than the output port number n, and <figref idref="DRAWINGS">FIG. 4C</figref> is a case where the input port number L is larger than the output port number n.</p>
<p id="p-0097" num="0099">In all the cases, the input ports of each of the small blocks outputted from the same output port are set to be all different. Particularly, <figref idref="DRAWINGS">FIG. 4C</figref> shows a case where a part of the input small blocks does not appear in any of the output ports but is discarded.</p>
<p id="p-0098" num="0100"><figref idref="DRAWINGS">FIG. 5</figref> shows an example of a frame structure as the output data of the encoding apparatus <b>10</b>.</p>
<p id="p-0099" num="0101">In <figref idref="DRAWINGS">FIG. 5</figref>, the n-pieces of small blocks of length m arranged on the upper-stage L row in a horizontal direction form a symbol which constitutes an code word of the m-stage low density parity check codes of the first encoding module <b>12</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. In the meantime, each of the &#x201c;L+S&#x201d;-pieces of small blocks constituting the code words of the m-stage low density parity check codes of the second encoding module <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is replaced and arranged by the data replacing module <b>14</b> so as not to appear on the same row and same column.</p>
<p id="h-0013" num="0000">(Operation Explanation 2: Decoding Apparatus)</p>
<p id="p-0100" num="0102">In <figref idref="DRAWINGS">FIG. 5</figref> described above, an example of the frame structure of the output data of the error correction encoding apparatus <b>10</b> is presented. A noise is added to the data of the frame structure shown in <figref idref="DRAWINGS">FIG. 5</figref> while the data is being transmitted via a communication path, and the data with the noise is inputted to the decoding apparatus <b>20</b> as reception data via a demodulator and the like.</p>
<p id="p-0101" num="0103">The decoding apparatus <b>20</b> operates to decode the data encoded and transmitted by the error correction encoding apparatus <b>10</b> and to correct the error when the error is added thereto.</p>
<p id="p-0102" num="0104">In that case, first, among the data transmitted from the error correction encoding apparatus <b>10</b>, the data of a plurality of encoded sequences processed by the first encoding module <b>12</b> provided to the error correction encoding apparatus <b>10</b> and the data of a plurality of encoded sequences processed by the redundant sequence calculating module <b>13</b> are separately stored to the data storage module <b>21</b> that is formed by a plurality of storing units (step S<b>601</b>).</p>
<p id="p-0103" num="0105">Subsequently, the decoding update processing module <b>22</b> that is provided by corresponding to each of the data storage units <b>21</b> repeatedly executes, for the number of times specified by the address generating procedure, an update operation which reads out the data held at the addresses of each of the data storage units according to the address generating procedure set in advance, performing update processing, and stores the data to the same addresses in the original data storage modules (step S<b>602</b>).</p>
<p id="p-0104" num="0106">The memory controller <b>20</b>A executes a decoded data output control step which, among the data held to each of a plurality of data storage units (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>, takes out the highest-order bits of each symbol specified by the address generating procedure set in advance in a reversed order from that of the time where those are written to each of the data storage modules and outputs those as the decoded data (step S<b>603</b>).</p>
<p id="p-0105" num="0107">This will be described in more details hereinafter.</p>
<p id="p-0106" num="0108">As shown in <figref idref="DRAWINGS">FIG. 2</figref>, the decoding apparatus <b>20</b> includes the data storage module <b>21</b> which includes the n (=N/m)-pieces of random access memories (RAMs: data storage units) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>, and stores the reception data described above to the data storage units <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>in a following manner.</p>
<p id="p-0107" num="0109">First, the reception data is sectioned by each symbol of length in as in <figref idref="DRAWINGS">FIG. 7</figref> by corresponding to the frame structure of <figref idref="DRAWINGS">FIG. 5</figref>, and each of those is expressed as F<sub>j</sub><sup>(i) </sup>(i is an integer between 0 and T&#x2212;1, T is L+S described above, and j is an integer between 0 and n&#x2212;1).</p>
<p id="p-0108" num="0110">The symbol F<sub>j</sub><sup>(i) </sup>is constituted with m-pieces of symbols f<sub>j</sub><sup>(i)</sup>(<b>0</b>), f<sub>j</sub><sup>(i)</sup>(<b>1</b>), - - - , f<sub>j</sub><sup>(i)</sup>(m&#x2212;1), and each symbol shows b-bit data (b is a natural number).</p>
<p id="p-0109" num="0111">Provided that the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, - - - are numbered with integers of 0 to n&#x2212;1, p-pieces of data f<sub>j</sub><sup>(i)</sup>(k), f<sub>j</sub><sup>(i)</sup>((m/p)+k), - - - , f<sub>j</sub><sup>(i)</sup>(2&#xd7;(m/p)+k), - - - , f<sub>i</sub><sup>(i)</sup>((p&#x2212;1)&#xd7;(m/p)+k) are stored at the addresses of the &#x201c;(m/p)&#xd7;i+k&#x201d;-th address of the j-th RAM (i is an integer between 0 and T&#x2212;1, k is an integer between 0 and (m/p)&#x2212;1).</p>
<p id="p-0110" num="0112">The decoding apparatus <b>20</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> stores the reception data to the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, - - - , and starts the decoding processing in a state where each of the delay elements <b>26</b>, <b>28</b> are initialized to &#x201c;0&#x201d;.</p>
<p id="p-0111" num="0113">First, the data is read out from the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, - - - . Then, the readout addresses thereof are generated in a following manner.</p>
<p id="p-0112" num="0114">Note here that the check matrix of the L-pieces of first encoding modules (m-stage quasi-cyclic low density parity check encoding modules) <b>12</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is defined as a following Expression 2.</p>
<p id="p-0113" num="0115">
<maths id="MATH-US-00002" num="00002">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msup>
          <mi>H</mi>
          <mrow>
            <mo>(</mo>
            <mi>i</mi>
            <mo>)</mo>
          </mrow>
        </msup>
        <mo>=</mo>
        <mrow>
          <mo>[</mo>
          <mtable>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <mi>n</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
          </mtable>
          <mo>]</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>2</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0114" num="0116">The symbol i is an integer between 0 and L&#x2212;1. Further, in order to simplify the description, regarding the integers i between 0 and L&#x2212;1, row vector numbers r<sub>i </sub>on the matrix H<sub>(i) </sub>of Expression 2 are assumed to be same natural number r.</p>
<p id="p-0115" num="0117">The decoding processing is basically the same even when the row vector numbers vary depending on each of the integers i, except that the processing time (clock) required for the processing is different.</p>
<p id="p-0116" num="0118">Now, assuming that a symbol h<sub>k,j</sub><sup>(i) </sup>is an integer &#x201c;0&#x2266;h<sub>k,j</sub><sup>(i)</sup>&#x3c;m&#x201d; showing a non-zero component position of a first row vector of m&#xd7;m cyclic replacement matrix I<sub>k,j</sub><sup>(i) </sup>that is a (k, j) component regarding the check matrix of Expression 2, the j-th random access memory readout address value &#x201c;A<sup>(0)</sup>(j, t)&#x201d; at the time parameter from t=0 to t=(m/p)&#xd7;L&#x2212;1 can be calculated by a following Expression 3 (j is an integer between 0 and n&#x2212;1).
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>(0)</sup>(<i>j,t</i>)=[<i>t</i>/(<i>m/p</i>)]&#xd7;(<i>m/p</i>)+((<i>h</i><sub>0,j</sub><sup>([t(m/p)])</sup><i>+t</i>)mod(<i>m/p</i>))&#x2003;&#x2003;[Expression 3]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0117" num="0119">Note here that &#x201c;t/(m/p) shows the quotient acquired by dividing t by (m/p). Then, the time parameter t is reset, and the j-th random access memory readout address value &#x201c;A<sup>(1)</sup>(j, t)&#x201d; from the next time parameter t=0 to t=(m/p)&#xd7;L&#x2212;1 is calculated by a following Expression 4.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>(1)</sup>(<i>j,t</i>)=[<i>t</i>/(<i>m/p</i>)]&#xd7;(<i>m/p</i>)+((<i>h</i><sub>1,j</sub><sup>([t(m/p)])</sup><i>+t</i>)mod(<i>m/p</i>))&#x2003;&#x2003;[Expression 4]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0118" num="0120">Thereafter, while generally assuming that the time parameter is t, the j-th random access memory readout address values &#x201c;A<sup>(k)</sup>(j, t)&#x201d; from the time parameter t=0 to t=(m/p)&#xd7;L&#x2212;1 are calculated by a following Expression 5 (k is an integer between 0 and r&#x2212;1) in the same manner.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>A</i><sup>(k)</sup>(<i>j,t</i>)=[<i>t</i>/(<i>m/p</i>)]&#xd7;(<i>m/p</i>)+((<i>h</i><sub>k,j</sub><sup>([t(m/p)])</sup><i>+t</i>)mod(<i>m/p</i>))&#x2003;&#x2003;[Expression 5]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0119" num="0121">The readout address values &#x201c;A<sup>(k)</sup>(j, t)&#x201d; are calculated by using Expression 5 from Expression 2 which shows the check matrix of the quasi-cyclic low density parity check codes of the first encoding module <b>12</b> described above. That is, the data is read out sequentially from the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>according to the address values A<sup>(0)</sup>(j, t), A<sup>(1)</sup>(j, t), - - - , A<sup>(r-1)</sup>(j, t). In that case, it takes time of (m/p)&#xd7;L&#xd7;r in total.</p>
<p id="p-0120" num="0122">Next, described is a method for calculating the readout address value by using Expression 6 which shows the check matrix of the n-pieces of quasi-cyclic low density parity check codes of the second encoding module <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>. As in the case of Expression 2, it is defined to be natural number 1 regardless of the row block numbers i (i is an integer between 0 and n&#x2212;1) for simplifying the explanations.</p>
<p id="p-0121" num="0123">
<maths id="MATH-US-00003" num="00003">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msup>
          <mi>H</mi>
          <mrow>
            <mo>(</mo>
            <mi>i</mi>
            <mo>)</mo>
          </mrow>
        </msup>
        <mo>=</mo>
        <mrow>
          <mo>[</mo>
          <mtable>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>0</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>L</mi>
                      <mo>+</mo>
                      <mi>S</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mn>1</mn>
                    <mo>,</mo>
                    <mrow>
                      <mi>L</mi>
                      <mo>+</mo>
                      <mi>S</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>0</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mn>1</mn>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
              <mtd>
                <mi>&#x2026;</mi>
              </mtd>
              <mtd>
                <msubsup>
                  <mi>I</mi>
                  <mrow>
                    <mrow>
                      <msub>
                        <mi>r</mi>
                        <mi>i</mi>
                      </msub>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                    <mo>,</mo>
                    <mrow>
                      <mi>L</mi>
                      <mo>+</mo>
                      <mi>S</mi>
                      <mo>-</mo>
                      <mn>1</mn>
                    </mrow>
                  </mrow>
                  <mrow>
                    <mo>(</mo>
                    <mi>i</mi>
                    <mo>)</mo>
                  </mrow>
                </msubsup>
              </mtd>
            </mtr>
          </mtable>
          <mo>]</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>6</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0122" num="0124">In the example of the frame structure shown in <figref idref="DRAWINGS">FIG. 5</figref>, it is so defined that the &#x201c;R<sup>(i)</sup>(<b>0</b>), R<sub>1</sub><sup>(i)</sup>(<b>1</b>), - - - , R<sup>(i)</sup>(L+S&#x2212;1)&#x201d;-th small blocks from the left form the i-th low density parity check code word (i is an integer between 0 and n&#x2212;1) within the n-pieces of quasi-cyclic low density parity check codes of the second encoding module <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0123" num="0125">As shown in the structure disclosed in <figref idref="DRAWINGS">FIG. 3</figref> (the data replacing module <b>14</b>) and <figref idref="DRAWINGS">FIG. 4</figref> (operation of the corrector) described above, R<sup>(i)</sup>(a)&#x2260;R<sup>(i)</sup>(b) applies for different integers a and b between 0 and L+S&#x2212;1.</p>
<p id="p-0124" num="0126">Then, by taking the step of (m/p)&#xd7;L&#xd7;r, the address values are calculated sequentially by using Expression 5. Thereafter, the time parameter t is reset, and the j-th random access memory readout address values &#x201c;B<sup>(k)</sup>(j, t)&#x201d; from the time parameter t=0 to t=(m/p)&#xd7;n&#x2212;1 are calculated by a following Expression 7.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>B</i><sup>(k)</sup>(<i>j,t</i>)=&#x3c6;(<i>j,t</i>)&#xd7;(<i>m/p</i>)+((<i>h</i><sub>k,&#x3c6;(j,t)</sub><sup>([t/(m/p)])</sup><i>+t</i>)mod(<i>m/p</i>))&#x2003;&#x2003;[Expression 7]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0125" num="0127">Note here that the symbol k is an integer between 0 and 1&#x2212;0, and &#x3c8;(j, t) is an inverse function of R<sup>([t/(m/p)])</sup>(j) which is an integer between 0 and L+S&#x2212;1 satisfying a following Expression 8.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>j=R</i><sup>([t/(m/p)])</sup>(&#x3c6;(<i>j,t</i>))&#x2003;&#x2003;[Expression 8]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0126" num="0128">As described above, the address values are calculated according to A<sup>(0)</sup>(j, t), A<sup>(1)</sup>(j, t), - - - , A<sup>(r-1)</sup>(j, t), and the address values are calculated according to B<sup>(0)</sup>(j, t), B<sup>(1)</sup>(j, t), - - - , B<sup>(r-1)</sup>(j, t). Note here that the order for calculating the addresses is not necessarily in this order. The addresses B<sup>(0)</sup>(j, t), B<sup>(1)</sup>(j, t), - - - , B<sup>(r-1)</sup>(j, t) may be calculated first.</p>
<p id="p-0127" num="0129">As described above, the data is read out sequentially from the random access memories (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>by taking &#x201c;(m/p)&#xd7;L&#xd7;r+(m/p)&#xd7;n&#xd7;1&#x201d; steps in total as one cycle.</p>
<p id="p-0128" num="0130"><figref idref="DRAWINGS">FIG. 8</figref> shows a difference between the access methods of Expression 5 and Expression 7.</p>
<p id="p-0129" num="0131">When the address values of each of the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>24</b><sub>n-1 </sub>are divided into sections of length m/p such as 0 to (m/p)&#x2212;1, m/p to (m/p)&#x2212;1, - - - , the regions accessed according to the address values calculated by Expression 5 are the same sections in all the random access memories (RAMs) <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>(see access region (A) in <figref idref="DRAWINGS">FIG. 6</figref>).</p>
<p id="p-0130" num="0132">In the meantime, the regions accessed according to the address values calculated by Expression 7 are sections different from each other (see access regions B in <figref idref="DRAWINGS">FIG. 6</figref>). The regions accessed according to the address values of Expression 7 are defined by the data replacing module <b>14</b> of <figref idref="DRAWINGS">FIG. 3</figref> described above. Thus, in other words, it is important to specify in advance the functional content of the data replacing module <b>14</b> shown in <figref idref="DRAWINGS">FIG. 3</figref> so that the regions accessed according to the address values calculated by Expression 7 become sections different from each other.</p>
<p id="p-0131" num="0133">The data read out from the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>by the procedures described above are inputted to the cyclic shift processing unit <b>23</b> that is constituted with the cyclic shift circuits <b>23</b><sub>0</sub>, <b>23</b><sub>1</sub>, <b>23</b><sub>2</sub>, - - - , <b>23</b><sub>n-1</sub>.</p>
<p id="p-0132" num="0134">As described, the bit length of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>corresponds to the p symbol (b&#xd7;p bit), and the cyclic shift processing unit <b>23</b> performs cyclic shift on the data of the p symbol by each symbol for the shift amount set in advance. The shift amount is determined by being related to the readout address, and the shift amount regarding the data read out at the address value A<sup>(k)</sup>(j, t) calculated by Expression 5 is calculated by following Expression 9.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>[<i>h</i><sub>k,j</sub><sup>([t/(m/p])</sup>/(<i>m/p</i>)] in a case of <i>t </i>mod(<i>m/p</i>)&#x3c;(<i>m/p</i>)&#x2212;(<i>h</i><sub>k,j</sub><sup>([t/(m/p)])</sup>mod(<i>m/p</i>)) [<i>h</i><sub>k,j</sub><sup>([t/(m/p)])</sup>/(<i>m/p</i>)]+1 in cases other than the above case&#x2003;&#x2003;[Expression 9]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0133" num="0135">Similarly, the shift amount regarding the data read out at the address value B<sup>(k)</sup>(j, t) calculated by Expression 7 is calculated by following Expression 10.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>[<i>h</i><sub>k,&#x3c6;(j,t)</sub><sup>([t/(m/p)])</sup>/(<i>m/p</i>)] in a case of <i>t </i>mod(<i>m/p</i>)&#x3c;(<i>m/p</i>)&#x2212;(<i>h</i><sub>k,&#x3c6;(j,t)</sub><sup>([t/(m/p)])</sup>mod(<i>m/p</i>)) [<i>h</i><sub>k,&#x3c6;(j,t)</sub><sup>([t/(m/p)])</sup>/(<i>m/p</i>)]+1 in cases other than the above case&#x2003;&#x2003;[Expression 10]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0134" num="0136"><figref idref="DRAWINGS">FIG. 9</figref> shows an example of the operations of the cyclic shift processing unit <b>23</b> described above. In <figref idref="DRAWINGS">FIG. 7</figref>, a data sequence cyclic-shifted from the data sequence of p-symbol by x-pieces (x is an integer between 0 and p&#x2212;1) towards the lower direction of <figref idref="DRAWINGS">FIG. 7</figref> is outputted.</p>
<p id="p-0135" num="0137">The data read out from the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>by Expression 5 and Expression 7 are cyclic-shifted by the amount depicted in Expression 9 and Expression 10, the output data of the second delay element <b>28</b> including the delay element units <b>28</b><i>a</i>, <b>28</b><i>b</i>, - - - is subtracted therefrom, and the results thereof are inputted to the first delay element <b>26</b> including the delay element units <b>26</b><sub>0</sub>, <b>26</b><sub>1</sub>, - - - , <b>26</b><sub>n-1 </sub>and the node processing module <b>24</b> including the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1</sub>, respectively.</p>
<p id="p-0136" num="0138">In that case, the initial value of the data of the first delay element <b>26</b> is set to 0, so that 0 is subtracted in a first cycle (no change). The decoding apparatus <b>20</b> shown in <figref idref="DRAWINGS">FIG. 2</figref> includes the node processing module <b>24</b> which includes the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1</sub>. The decoding apparatus <b>20</b> divides the data of the p-symbol originated from the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>into p-pieces by a unit of symbol, and inputs each data to each of the p-pieces of node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1</sub>.</p>
<p id="p-0137" num="0139">Each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p 1 </sub>of the node processing module <b>24</b> inputs the data of one symbol (n symbols in total) out of the data originated from the n-pieces of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>.</p>
<p id="p-0138" num="0140">The minimum-value calculating module disclosed in <figref idref="DRAWINGS">FIG. 3</figref> in this exemplary embodiment constitutes each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>of the node processing module <b>24</b>. The minimum-value calculating modules (node processing units) <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>have a function of inputting n-pieces of symbols Y<sub>0</sub>, Y<sub>1</sub>, - - - , Y<sub>n-1 </sub>and outputting (&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1</sub>.</p>
<p id="p-0139" num="0141">Note here that q<sub>i </sub>and X<sub>i </sub>are calculated by following Expression 11 and Expression 12.</p>
<p id="p-0140" num="0142">
<maths id="MATH-US-00004" num="00004">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>q</mi>
          <mi>i</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <munder>
            <mo>&#x2295;</mo>
            <mrow>
              <mi>j</mi>
              <mo>&#x2260;</mo>
              <mi>i</mi>
            </mrow>
          </munder>
          <mo>&#x2062;</mo>
          <mrow>
            <mi>s</mi>
            <mo>&#x2061;</mo>
            <mrow>
              <mo>(</mo>
              <msub>
                <mi>Y</mi>
                <mi>j</mi>
              </msub>
              <mo>)</mo>
            </mrow>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>11</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>X</mi>
          <mi>i</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <munder>
            <mi>min</mi>
            <mrow>
              <mi>j</mi>
              <mo>&#x2260;</mo>
              <mi>i</mi>
            </mrow>
          </munder>
          <mo>&#x2062;</mo>
          <mrow>
            <mo>&#xf603;</mo>
            <msub>
              <mi>Y</mi>
              <mi>j</mi>
            </msub>
            <mo>&#xf604;</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>12</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0141" num="0143">Note here that s(Y) is defined as 1 when Y&#x3c;0 and as 0 when Y&#x2267;0. Further, symbol = shows an exclusive OR. Each of the outputs of the minimum-value calculating modules (node processing units) <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>are (&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1</sub>, respectively. These are added to the data that have gone through each of the delay element units <b>26</b><sub>0</sub>, <b>26</b><sub>1</sub>, <b>26</b><sub>2</sub>, - - - , <b>26</b><sub>n-1 </sub>of the first delay element <b>26</b> and written to the corresponding RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>via the corresponding cyclic shift circuits <b>33</b><sub>0</sub>, <b>33</b><sub>1</sub>, <b>33</b><sub>2</sub>, - - - .</p>
<p id="p-0142" num="0144">Note here that the shift amount of the cyclic shift processing unit <b>33</b> offsets the shift amount of the cyclic shift processing unit <b>23</b> used at the time of readout. That is, in a case where the cyclic-shift of x-pieces is performed in the lower direction by the cyclic shift processing unit <b>23</b> used at the time of readout (see <figref idref="DRAWINGS">FIG. 7</figref>), the cyclic shift processing unit <b>33</b> performs cyclic shift of x-pieces in the upper direction (cyclic shift of p&#x2212;x pieces in the lower direction).</p>
<p id="p-0143" num="0145">When writing the data that has gone through the cyclic shift processing unit <b>33</b> to the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>, the data are written to the same addresses as the readout addresses calculated by Expression 5 and Expression 7 described above.</p>
<p id="p-0144" num="0146">The output data of the node processing module <b>24</b> is not only added to the output data of each of the delay element units <b>26</b><sub>0</sub>, <b>26</b><sub>1</sub>, <b>26</b><sub>2</sub>, - - - , <b>26</b><sub>n-1 </sub>of the first delay element <b>26</b> but also inputted to each of the delay element units of the second delay element <b>28</b>.</p>
<p id="p-0145" num="0147">When the minimum-value calculating modules are used as each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>of the node processing module <b>24</b>, the storage capacitance used in the delay element can be effectively reduced through inputting X<b>0</b>, X<b>1</b>, P and each of the output bits of the exclusive OR as disclosed in the section of the structure described above instead of inputting the output data (&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1 </sub>directly as they are to the second delay element <b>28</b>.</p>
<p id="p-0146" num="0148">Therefore, when the minimum-value calculating modules (see <figref idref="DRAWINGS">FIG. 6</figref>) are used as each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>of the node processing module <b>24</b> as disclosed in <figref idref="DRAWINGS">FIG. 6</figref>, X<b>0</b>, X<b>1</b>, P and each of the output bits of the exclusive OR circuit <b>24</b>D are to be inputted to the second delay element <b>28</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>. In that case, on the output side of the second delay element <b>28</b>, it is necessary to provide a device which generates the output data (&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1 </sub>from X<b>0</b>, X<b>1</b>, P and each of the output bits of the exclusive OR circuit <b>24</b>D before making input to each of the subtractors <b>25</b>.</p>
<p id="p-0147" num="0149">As described, the data read out from the n-pieces of RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>according to the address generating procedures shown in Expression 5 and Expression 7 are updated via the node processing module <b>24</b>, and stored again to the same addresses of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>. At a stage where the update processing described above is executed over all the addresses shown in Expression 5 and Expression 7, one-time encoding processing (for one period) is completed.</p>
<p id="p-0148" num="0150">In that case, at least steps of &#x201c;(m/p)&#xd7;L&#xd7;r+(m/p)&#xd7;n&#xd7;1&#x201d; times are required for one-time decoding processing. For the second-time decoding processing, the data are read out from the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n 1 </sub>according to the address generating procedures shown in Expression 5 and Expression 7, updated, and written through completely the same procedure as that of the first time. The processing of the third time and thereafter is also completely the same. After repeating the steps for a prescribed number of times set in advance, the highest-order bits of each of the symbols held inside the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>are taken out and outputted (in a reversed procedure from the time of writing the reception data to the random access memories). The output data are the results of decoding.</p>
<p id="p-0149" num="0151">The delay amount of the second delay element <b>28</b> corresponds to the number of steps required for one-time repeated decoding processing. Thus, while the input on the second delay element <b>28</b> side of the subtractor <b>25</b> is 0 at the time of one-time decoding processing, the input on the second delay element <b>28</b> side of the subtractor <b>25</b> is the data outputted from the node processing module <b>24</b> in the decoding processing executed right before for the second-time decoding processing and thereafter.</p>
<p id="p-0150" num="0152">The functions of each of the structural elements described above and the response operations between each of the structural elements may be put into executable programs to be executed by a computer. The programs are recorded on recording media and handled as subjects of commercial dealings.</p>
<p id="p-0151" num="0153">As described, the first exemplary embodiment is structured to: divide the transmission data sequence into L-pieces of short sequences; encode each of the L-pieces of short sequences by the m-stage quasi-cyclic low density parity check encoding method and output those; divide each of the L-pieces of the encoded sequences into short sequences of length m in the same number as the stage number in of the quasi-cyclic codes; change the order by using the data replacing module <b>14</b>; and further encode the sequences by the m-stage quasi-cyclic low density parity check encoding method. This makes it possible to perform efficient decoding processing of the codes with large frame length and large encoding gain by using the simple-structured decoding apparatus which includes p-pieces (p is a submultiple of the stage number m) of node processing modules (minimum-value calculating devices or integration devices).</p>
<p id="p-0152" num="0154">As described, the first exemplary embodiment is structured and functions as above. According to that, for encoding the transmission data sequences, it is basically structured to perform a plurality of kinds of encoding, i.e., execute encoding of the m-stage quasi-cyclic low density parity check encoding is executed by using one of the encoding modules and further execute encoding of the redundant sequences replaced and outputted via the data replacing module by using the other encoding module. Therefore, it is possible to provide the error correction encoding apparatus, the encoding method, and the program thereof, which can achieve such an excellent effect that the encoding gain is greatly improved by the increase of the frame length.</p>
<p id="p-0153" num="0155">Further, when decoding the encoded data sequences, the decoding processing corresponding to the m-stage quasi-cyclic low density parity check codes same as the case of encoding the transmission data sequences described above is executed on the reception side even when the data sequences of the increased frame length are transmitted. Thus, it becomes possible to perform the decoding processing without increasing the circuit scale and the number of memories to be used. This makes it possible to provide the decoding apparatus, the decoding method, and the program thereof, which can provide excellent effects of increasing the speed of decoding processing and suppressing the power consumption at the time of operating the decoding processing.</p>
<heading id="h-0014" level="1">Second Exemplary Embodiment</heading>
<p id="p-0154" num="0156">Next, a second exemplary embodiment of the present invention will be described by referring to <figref idref="DRAWINGS">FIG. 10</figref>.</p>
<p id="p-0155" num="0157">Note here that the same reference numerals are applied to the same structural members as those of the first exemplary embodiment.</p>
<p id="p-0156" num="0158">The second exemplary embodiment is so characterized that a decoding apparatus <b>20</b> includes an integration circuit (an integration device) <b>34</b> shown in <figref idref="DRAWINGS">FIG. 10</figref> instead of the minimum-value calculating module provided as each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p 1 </sub>which constitute the node processing module <b>24</b>. Other structures are the same as the contents disclosed in <figref idref="DRAWINGS">FIG. 2</figref> described above. Further, the encoding apparatus <b>10</b> disclosed in <figref idref="DRAWINGS">FIG. 1</figref> is also employed to the second exemplary embodiment without any changes.</p>
<p id="p-0157" num="0159">The integration circuit <b>34</b> shown in <figref idref="DRAWINGS">FIG. 10</figref> includes a plurality of adders <b>34</b>A, first and second conversion tables <b>34</b>B, <b>34</b>F, exclusive OR circuits <b>34</b>C, and subtractors <b>34</b>E by corresponding to each of a plurality of data sequences.</p>
<p id="p-0158" num="0160">As disclosed in the decoding apparatus <b>20</b> of the first exemplary embodiment described above (see <figref idref="DRAWINGS">FIG. 2</figref>), each of the node processing units <b>24</b><sub>0</sub>, <b>24</b><sub>1</sub>, <b>24</b><sub>2</sub>, - - - , <b>24</b><sub>p-1 </sub>of the node processing module <b>24</b> inputs the data of one symbol (n symbols in total) out of the data originated from the n-pieces of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1</sub>.</p>
<p id="p-0159" num="0161">The integration circuit <b>34</b> shown in <figref idref="DRAWINGS">FIG. 10</figref> also has a function of inputting n-pieces of symbols Y<sub>0</sub>, Y<sub>1</sub>, - - - , Y<sub>n-1 </sub>from the n-pieces of the RAMs <b>21</b><sub>0</sub>, <b>21</b><sub>1</sub>, <b>21</b><sub>2</sub>, - - - , <b>21</b><sub>n-1 </sub>and outputting (&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1</sub>.</p>
<p id="p-0160" num="0162">Note here that X<sub>i </sub>can be given by a following Expression 13 (i is an integer between 0 and n&#x2212;1). Further, q<sub>i </sub>can be given by Expression 11 described above.</p>
<p id="p-0161" num="0163">
<maths id="MATH-US-00005" num="00005">
<math overflow="scroll">
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <msub>
          <mi>X</mi>
          <mi>i</mi>
        </msub>
        <mo>=</mo>
        <mrow>
          <msup>
            <mi>T</mi>
            <mrow>
              <mo>-</mo>
              <mn>1</mn>
            </mrow>
          </msup>
          <mo>(</mo>
          <mrow>
            <munder>
              <mo>&#x2211;</mo>
              <mrow>
                <mi>j</mi>
                <mo>&#x2260;</mo>
                <mi>i</mi>
              </mrow>
            </munder>
            <mo>&#x2062;</mo>
            <mrow>
              <mi>T</mi>
              <mo>&#x2061;</mo>
              <mrow>
                <mo>(</mo>
                <msub>
                  <mi>Y</mi>
                  <mi>j</mi>
                </msub>
                <mo>)</mo>
              </mrow>
            </mrow>
          </mrow>
          <mo>)</mo>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>[</mo>
        <mrow>
          <mi>Expression</mi>
          <mo>&#x2062;</mo>
          <mstyle>
            <mspace width="0.8em" height="0.8ex"/>
          </mstyle>
          <mo>&#x2062;</mo>
          <mn>13</mn>
        </mrow>
        <mo>]</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
</maths>
</p>
<p id="p-0162" num="0164">Note here that T(Y) in Expression 13 is given by a following Expression 14.
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>T</i>(<i>Y</i>)=&#x2212;ln [tan <i>h</i>(|<i>Y|/</i>2)]&#x2003;&#x2003;[Expression 14]<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0163" num="0165">As shown in <figref idref="DRAWINGS">FIG. 10</figref>, the first conversion table <b>34</b>B is structured to output T(Y) of Expression 14 for an input symbol Y according to a request from outside. Further, the second conversion table <b>34</b>E functions as a table which outputs a symbol X that satisfies T(X)=Y for the input data Y (an inverse function of T(Y) is put into a table in advance).</p>
<p id="p-0164" num="0166">In the meantime, unlike the case of using the minimum-value calculating modules shown in <figref idref="DRAWINGS">FIG. 6</figref> described above, the output data &#x201c;(&#x2212;1)<sup>q0</sup>X<sub>0</sub>, (&#x2212;1)<sup>q1</sup>X<sub>1</sub>, - - - , (&#x2212;1)<sup>qn-1</sup>X<sub>n-1</sub>&#x201d; shown in <figref idref="DRAWINGS">FIG. 10</figref> in that state are inputted to the second delay element <b>28</b> described above in the second exemplary embodiment where the integration circuit <b>34</b> shown in <figref idref="DRAWINGS">FIG. 10</figref> is used as the node processing module <b>24</b>.</p>
<p id="p-0165" num="0167">Other structures and the working effects thereof are the same as the case of the first exemplary embodiment described above.</p>
<p id="p-0166" num="0168">The functions of each of the structural elements described above and the associative functions between each of the structural elements may be put into executable programs to be executed by a computer. The programs are recorded on recording media and handled as subjects of commercial dealings.</p>
<p id="p-0167" num="0169">As described, the second exemplary embodiment uses the integration device <b>34</b> which functions equivalently with respect to the minimum-value calculating module (<figref idref="DRAWINGS">FIG. 3</figref>) for the node processing module <b>24</b>. Thus, it is possible to acquire the decoding apparatus <b>20</b> capable of achieving the working effects equivalent to the case of the first exemplary embodiment described above. Further, the output of the integration circuit (integration device) <b>34</b> as it is can be inputted to the second delay element <b>28</b>, which makes it possible to perform storing processing of reception data more promptly.</p>
<heading id="h-0015" level="1">Third Exemplary Embodiment</heading>
<p id="p-0168" num="0170">Next, a third exemplary embodiment of the present invention will be described by referring to <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0169" num="0171">The third exemplary embodiment is characterized to use a first replacing module <b>14</b> as the data replacing module in the error correction encoding apparatus <b>10</b> disclosed in <figref idref="DRAWINGS">FIG. 1</figref> and to additionally provide a second replacing module <b>44</b> which inputs each parity part of length s&#xd7;m of N/m-pieces of encoded sequences encoded by the second encoding module <b>15</b>, changes the order thereof, and outputs S-pieces of sequences of length N.</p>
<p id="p-0170" num="0172">Further, there is also provided a third encoding module <b>45</b> which includes a plurality of encoding processing units for encoding a part of the S-pieces of sequences of length N as the outputs of the second replacing module <b>44</b> with the quasi-cyclic low density parity check codes of m-stages and length N.</p>
<p id="p-0171" num="0173">Furthermore, each of the parity parts encoded by the third encoding module <b>45</b> is outputted as the encoded transmission data like the L-pieces of data sequences encoded by the second encoding module <b>15</b>.</p>
<p id="p-0172" num="0174">That is, the third exemplary embodiment is structured to provide the second replacing module <b>44</b> on the output side of the second encoding module (m-stage low density parity check encoding module) <b>15</b> in the error correction encoding apparatus <b>10</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>, and further to provide the third encoding module <b>45</b> as the m-stage low density parity check encoding module which functions equivalently with the first encoding module <b>12</b> on the output side of the second replacing module <b>44</b>.</p>
<p id="p-0173" num="0175">Other structures and the working effects thereof are the same as the case of the first exemplary embodiment described above.</p>
<p id="p-0174" num="0176">The functions of each of the structural elements described above and the associative response functions between each of the structural elements may be put into executable programs to be executed by a computer. The programs are recorded on recording media and handled as subjects of commercial dealings.</p>
<p id="p-0175" num="0177">Such structure also makes it possible to generate the encoded sequences of the frame structure shown in <figref idref="DRAWINGS">FIG. 5</figref>, according to the setting of the natural numbers L, n, S described in the structure of <figref idref="DRAWINGS">FIG. 1</figref>, and to perform decoding processing by the decoding apparatus <b>20</b> shown in <figref idref="DRAWINGS">FIG. 2</figref>. In this respect, it is possible to acquire the working effects equivalent to the case of the first exemplary embodiment described above.</p>
<heading id="h-0016" level="1">Fourth Exemplary Embodiment</heading>
<p id="p-0176" num="0178"><figref idref="DRAWINGS">FIG. 12</figref> shows an example of a data communication apparatus <b>100</b> which uses the encoding apparatus and the decoding apparatus according to the present invention.</p>
<p id="p-0177" num="0179">The data transmission side (transmitter <b>80</b>) is constituted with: the encoding apparatus <b>10</b> according to each of the exemplary embodiments of the present invention; synchronization control/modulator input generation device <b>82</b> for performing control for frame synchronization and for converting data according to a modulator; and a modulator <b>83</b>. The output of the modulator <b>83</b> is outputted to a radio communication path (or storage device). Reference numeral <b>84</b> shows a transmission antenna.</p>
<p id="p-0178" num="0180">Further, the data reception side (receiver <b>90</b>) is constituted with: a demodulator <b>92</b> for demodulating information acquired from the radio communication path (or storage device); a synchronization control/decoding input generation device <b>93</b> which performs processing for converting the output data of the demodulator <b>92</b> into the decoder input data and for performing frame synchronization; and the decoding apparatus <b>20</b> according to each of the exemplary embodiments of the present invention. Reference numeral <b>91</b> shows a reception antenna.</p>
<p id="p-0179" num="0181">Other structures and the working effects thereof are the same as the case of the first exemplary embodiment described above.</p>
<p id="p-0180" num="0182">Thereby, the encoding apparatus <b>10</b> and the decoding apparatus <b>20</b> according to each of the above-described exemplary embodiments effectively function within the transmitter <b>80</b> and the receiver <b>90</b>, so that the data communication smoothly functions on the entire apparatus.</p>
<heading id="h-0017" level="1">Example 1</heading>
<p id="p-0181" num="0183">Next, a more specific EXAMPLE of the error correction encoding apparatus <b>10</b> and the decoding apparatus <b>20</b> according to the first exemplary embodiment will be described by using numerical value examples.</p>
<p id="p-0182" num="0184">In the encoding processing apparatus <b>10</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>, it is assumed that the natural numbers L, n, S are L=63, n=65, S=1, respectively, and the target stage number m of the quasi-cyclic low density parity check codes in each of the encoding processing units <b>12</b><sub>0</sub>, <b>12</b><sub>1</sub>, - - - , <b>12</b><sub>L-1 </sub>of the first encoding module <b>12</b> is 63. In Expression 1 which shows a check matrix of 63-pieces of quasi-cyclic low density parity check codes in each of the encoding processing units <b>12</b><sub>0</sub>, <b>12</b><sub>1</sub>, - - - , <b>12</b><sub>L-1 </sub>shown in <figref idref="DRAWINGS">FIG. 1</figref>, it is defined that the row block number r=4, and I<sub>0.2</sub>=I<sub>1.64</sub>=I<sub>2.63</sub>=I<sub>3.62</sub>=(zero matrix of 63&#xd7;65).</p>
<p id="p-0183" num="0185">In that case, the output of the first encoding module <b>12</b> is 4095 bits (N=m&#xd7;n=63&#xd7;65), and 4095&#xd7;63 bits in total are inputted to the data replacing module <b>14</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0184" num="0186">Note here that the input port number of the data replacing module is &#x201c;63&#x201d; and the output port number is &#x201c;65&#x201d;. The encoded data of 65 blocks as the output of the 63-stage quasi-cyclic low density parity check codes (output of the first encoding module <b>12</b>) divided into small blocks of 63 bits in block length is inputted to each input port.</p>
<p id="p-0185" num="0187">Then, the input ports are numbered with integers of 0 to 62, and the output ports are numbered with integers of 0 to 64. The j-th small block of the input port i of the data replacing module <b>14</b> (i is and integer between 0 and 62, and j is an integer between 0 and 62) is outputted to the output port that corresponds to a remainder acquired by dividing (65+i&#x2212;j) by 65.</p>
<p id="p-0186" num="0188">Each replacement between the input and the output satisfies the condition referred in the explanation of the data replacing module <b>14</b> disclosed in <figref idref="DRAWINGS">FIG. 3</figref>. While the shift amount of the cyclic replacing module <b>16</b>B on the output side of the data replacing module <b>14</b> may be defined randomly, it is tentatively assumed that the shift amount corresponds to a remainder acquired by dividing the shift amount (k+h) at the time of the output of the h-th small block (h is a value between 0 and 62) of the cyclic replacing module <b>168</b> of the k-th output port (k is an integer between 0 and 64) by 63.</p>
<p id="p-0187" num="0189">The sequence constituted with small blocks of length 63 outputted from the 65 output ports is encoded by each of the second encoding modules (63-stage low density parity check encoding modules) <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0188" num="0190">Note here that the row block number in Expression 6 as the check matrix of the second encoding module <b>15</b> is defined as I<sub>1.0</sub>=1. The second encoding module <b>15</b> outputs 65&#xd7;63 bits of the parity parts of each of the outputs of the 65-pieces of encoding processing units <b>15</b><sub>0</sub>, <b>15</b><sub>1</sub>, - - - , <b>15</b><sub>L-1 </sub>along with the output of 4095&#xd7;63 bits described above of the first encoding module (63-stage quasi-cyclic low density parity check encoding module) <b>12</b>.</p>
<p id="p-0189" num="0191">The frame structure with the numerical value examples, it is defined in <figref idref="DRAWINGS">FIG. 5</figref> that m=63, N=4095, L=63, and S=1. Through arranging 65&#xd7;63 bits of the parity parts of the outputs the 65-pieces of first encoding modules (63-stage low density parity check encoding modules) as the lowermost stage data sequence, the condition referred in the explanations of <figref idref="DRAWINGS">FIG. 5</figref> is satisfied.</p>
<p id="p-0190" num="0192">When arranging the lowermost stage data sequence by each small block (63 bits in length) from the left side, the parity of 63 bits outputted from the 63-stage low density parity check encoding module (first encoding module) which is directly connected to a small block sequence outputted from the k-th output port of the data replacing module <b>14</b> (k is an integer between 0 and 64) is placed at a position which corresponds to a remainder acquired by dividing &#x201c;65+63&#x2212;k&#x201d; by 65, provided that the left end is the 0th small block and the right end is the 64th small block. The decoding apparatus <b>20</b> (see <figref idref="DRAWINGS">FIG. 2</figref>) with the numerical value examples comes to include the node processing module <b>24</b> including 7-pieces of node processing units and to include 65-pieces of RAMs, provided that p (p is submultiple of m=63) described above is &#x201c;7&#x201d;, for example.</p>
<p id="p-0191" num="0193">In that case, the number of steps required for one-time decoding processing is (63/7)&#xd7;63&#xd7;4+(63/7)&#xd7;65&#xd7;1=2853. This is the lower limit of the delay amount of the second delay element shown in <figref idref="DRAWINGS">FIG. 2</figref>. Further, provided that 1 symbol=7 bits (b=7), bit width of each of the 65-pieces of RAMs is b&#xd7;p=7&#xd7;7=49 bits, and the number of words is m/p&#xd7;(L+S)=9&#xd7;64=576.</p>
<p id="p-0192" num="0194">Next, the examples of the numerical values according to EXAMPLE of the exemplary embodiment disclosed in <figref idref="DRAWINGS">FIG. 11</figref> will be described.</p>
<p id="p-0193" num="0195">Regarding the encoding module part (each of the first and second encoding modules <b>12</b> and <b>15</b>) shown in <figref idref="DRAWINGS">FIG. 11</figref>, the values are same as the numerical value examples described above. That is, it is so defined that L=63, n=65, S=1, and m=63.</p>
<p id="p-0194" num="0196">The structure of the data replacing module <b>14</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is also completely the same as the case of the data replacing module <b>14</b> using the numerical value examples described above. However, the sequences outputted from the output ports 0, 1, 2, and 64 out of the output ports of the data replacing module <b>14</b> are discarded, and the 63-stage quasi-cyclic encoding of the second encoding module <b>15</b> arranged after the four output ports is not to be performed.</p>
<p id="p-0195" num="0197">At this point, the outputs (parity parts of the low density parity check codes shown in <figref idref="DRAWINGS">FIG. 1</figref>) of the lowermost stage of the frame structure shown in <figref idref="DRAWINGS">FIG. 5</figref> from the left end (0th) to the 60th are allotted to the first encoding module <b>12</b> as in the case of the numerical value examples of <figref idref="DRAWINGS">FIG. 1</figref>. However, the 61st to the 64th are empty, since the sequences outputted from the output ports 0, 1, 2, and 64 are discarded.</p>
<p id="p-0196" num="0198">In EXAMPLE of the exemplary embodiment disclosed in <figref idref="DRAWINGS">FIG. 11</figref>, this part is calculated by using the second data replacing module <b>44</b> and the third encoding module (low density parity check encoding module) <b>45</b> shown in <figref idref="DRAWINGS">FIG. 11</figref>.</p>
<p id="p-0197" num="0199">That is, the third replacing module <b>44</b> shown in <figref idref="DRAWINGS">FIG. 11</figref> sequentially outputs the left end (0th) to the 60th of the data sequence of the lowermost stage of the frame structure from the left end (0th), and inputs those to a single 63-stage low density parity check encoding module (the third encoding module) <b>45</b>. For the 63-stage low density parity check encoding module <b>45</b>, an encoding module having the same functions as those of the 63-stage low density parity check encoding module (the first encoding module) <b>12</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> is used.</p>
<p id="p-0198" num="0200">That is, in this EXAMPLE with the numerical value examples, the second replacing module <b>44</b> shown in <figref idref="DRAWINGS">FIG. 11</figref> corresponds to a device which performs parallel/serial conversion by each symbol, and there is a single low density parity check encoding code (the third encoding module) <b>45</b> shown in <figref idref="DRAWINGS">FIG. 11</figref> located on the output side. The parity parts (corresponds to 4 symbols) of the encoded sequence outputted from the third encoding module <b>45</b> are allotted to the 61st to the 64th of the lowermost-stage data sequence of the frame structure shown in <figref idref="DRAWINGS">FIG. 5</figref> described above. The frame structure with the numerical value examples of EXAMPLE satisfies the condition referred in the explanation of <figref idref="DRAWINGS">FIG. 5</figref>.</p>
<p id="p-0199" num="0201">When it is defined in the decoding apparatus <b>20</b> with the numerical value examples as p=7 like the case of the encoding apparatus <b>10</b>, the decoding apparatus <b>20</b> includes a node processing module constituted with 7-pieces of node processing units and 65-pieces of RAMs. Regarding the number of steps required for one-time decoding processing, the addresses generated by Expression 7 are decreased since the four low density parity check codes in the second encoding module <b>15</b> shown in <figref idref="DRAWINGS">FIG. 1</figref> are discarded, and the addresses generated by Expression 5 are increased since one of the low density parity check codes used in the third encoding module <b>45</b> shown in <figref idref="DRAWINGS">FIG. 11</figref> is the same as the low density parity check code shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0200" num="0202">Therefore, it becomes (63/7)&#xd7;(63+1)&#xd7;4+(63/7)&#xd7;(65&#x2212;4)&#xd7;1=2853 in total. This is the lower limit value of the delay amount of each delay element unit of the second delay element of the decoding apparatus <b>20</b> as in the case of the numerical value examples described above. Further, provided that 1 symbol=7 bits (b=7), bit width of each of the 65-pieces of RAMs is b&#xd7;p=7&#xd7;7=49 bits, and the number of words is m/p&#xd7;(L+S)=9&#xd7;64=576. Thus, the scale of the decoding apparatus <b>20</b> becomes the same as the case of the numerical value examples of the encoding apparatus <b>10</b> shown in <figref idref="DRAWINGS">FIG. 1</figref>.</p>
<p id="p-0201" num="0203">The specific functions provided to each of the structural elements and specific associative functions between the structural elements may be put into executable programs to be executed by a computer. The programs are recorded on recording media and handled as subjects of commercial dealings.</p>
<p id="p-0202" num="0204">While the present invention has been described heretofore by referring to the embodiments (and EXAMPLE), the present invention is not limited only to the embodiments (and EXAMPLE). Various changes and modifications occurred to those skilled in the art can be applied to the structures and details of the present invention without departing from the scope of the present invention.</p>
<p id="p-0203" num="0205">This Application is the National Phase of PCT/JP2009/070756, filed Dec. 11, 2009, which claims the Priority right based on Japanese Patent Application No. 2008-330910 filed on Dec. 25, 2008 and the disclosure thereof is hereby incorporated by reference in its entirety.</p>
<heading id="h-0018" level="1">INDUSTRIAL APPLICABILITY</heading>
<p id="p-0204" num="0206">The present invention can be applied as an error correction technique for satisfying requirements in terms of the system structure such as reducing the required power and reducing the size of antennas in satellite communications and mobile communication systems or as an error correction technique for improving the reliability regarding storage devices of magnetic recording and the like, for example.</p>
<p id="p-0205" num="0207">
<tables id="TABLE-US-00001" num="00001">
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217pt" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
<row>
<entry>REFERENCE NUMERALS</entry>
</row>
<row>
<entry namest="1" nameend="1" align="center" rowsep="1"/>
</row>
</thead>
<tbody valign="top">
<row>
<entry/>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="77pt" align="left"/>
<colspec colname="2" colwidth="140pt" align="left"/>
<tbody valign="top">
<row>
<entry>10</entry>
<entry>Error correction encoding apparatus</entry>
</row>
<row>
<entry>11</entry>
<entry>Data dividing unit</entry>
</row>
<row>
<entry>12</entry>
<entry>First encoding module (quasi-cyclic low density </entry>
</row>
<row>
<entry/>
<entry>parity encoding module)</entry>
</row>
<row>
<entry>12<sub>0</sub>, 12<sub>1</sub>, ---, 12<sub>L&#x2212;1</sub></entry>
<entry>Encoding processing unit</entry>
</row>
<row>
<entry>13</entry>
<entry>Redundant sequence output module</entry>
</row>
<row>
<entry>14</entry>
<entry>Data replacing module (first replacing module)</entry>
</row>
<row>
<entry>14A</entry>
<entry>Short-sequence dividing unit</entry>
</row>
<row>
<entry>14B</entry>
<entry>Selector</entry>
</row>
<row>
<entry>14C</entry>
<entry>Cyclic replacing unit</entry>
</row>
<row>
<entry>14C<sub>0</sub>, 14C<sub>1</sub>, ---, 14C<sub>L&#x2212;1</sub></entry>
<entry>Cyclic replacing circuit</entry>
</row>
<row>
<entry>15</entry>
<entry>Second encoding module (quasi-cyclic low </entry>
</row>
<row>
<entry/>
<entry>density parity encoding module)</entry>
</row>
<row>
<entry>15<sub>0</sub>, 15<sub>1</sub>, ---, 15<sub>n&#x2212;1</sub></entry>
<entry>Encoding processing unit</entry>
</row>
<row>
<entry>20</entry>
<entry>Decoding apparatus</entry>
</row>
<row>
<entry>20A</entry>
<entry>Memory controller</entry>
</row>
<row>
<entry>21</entry>
<entry>Data storage module</entry>
</row>
<row>
<entry>21<sub>0</sub>, 21<sub>1</sub>, ---, 21<sub>n&#x2212;1</sub></entry>
<entry>Data storage unit</entry>
</row>
<row>
<entry>23, 33</entry>
<entry>Cyclic shift module</entry>
</row>
<row>
<entry>23<sub>0</sub>, 23<sub>1</sub>, ---, 23<sub>n&#x2212;1</sub></entry>
<entry>Cyclic shift unit</entry>
</row>
<row>
<entry>24</entry>
<entry>Node processing module</entry>
</row>
<row>
<entry>24<sub>0</sub>, 24<sub>1</sub>, ---, 24<sub>p&#x2212;1</sub></entry>
<entry>Node processing unit (minimum-value </entry>
</row>
<row>
<entry/>
<entry>calculation module, integration circuit)</entry>
</row>
<row>
<entry>24A, 24B</entry>
<entry>2/4 data processing unit</entry>
</row>
<row>
<entry>24C</entry>
<entry>Demultiplexer</entry>
</row>
<row>
<entry>24D</entry>
<entry>Exclusive OR circuit</entry>
</row>
<row>
<entry>25</entry>
<entry>Subtractor</entry>
</row>
<row>
<entry>26</entry>
<entry>First delay element</entry>
</row>
<row>
<entry>26<sub>0</sub>, 26<sub>1</sub>, ---, 26<sub>n&#x2212;1</sub></entry>
<entry>Delay element unit</entry>
</row>
<row>
<entry>28</entry>
<entry>Second delay element</entry>
</row>
<row>
<entry>29</entry>
<entry>Adder</entry>
</row>
<row>
<entry>34<sub>0</sub>, 34<sub>1</sub>, ---, 34<sub>p&#x2212;1</sub></entry>
<entry>Node processing unit (integration circuit)</entry>
</row>
<row>
<entry>34A</entry>
<entry>Adder of integration circuit</entry>
</row>
<row>
<entry>34B</entry>
<entry>First conversion table</entry>
</row>
<row>
<entry>34C</entry>
<entry>Exclusive OR circuit</entry>
</row>
<row>
<entry>34E</entry>
<entry>Subtractor of integration circuit</entry>
</row>
<row>
<entry>34F</entry>
<entry>Second conversion table</entry>
</row>
<row>
<entry>44</entry>
<entry>Second replacing module</entry>
</row>
<row>
<entry>45</entry>
<entry>Third encoding module</entry>
</row>
<row>
<entry>51</entry>
<entry>Synchronization control/modulator input </entry>
</row>
<row>
<entry/>
<entry>generating device</entry>
</row>
<row>
<entry>52</entry>
<entry>Modulator</entry>
</row>
<row>
<entry>61</entry>
<entry>Demodulator</entry>
</row>
<row>
<entry>62</entry>
<entry>Synchronization control/decoding apparatus input generating device</entry>
</row>
<row>
<entry namest="1" nameend="2" align="center" rowsep="1"/>
</row>
</tbody>
</tgroup>
</table>
</tables>
</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-math idrefs="MATH-US-00001" nb-file="US08627172-20140107-M00001.NB">
<img id="EMI-M00001" he="15.16mm" wi="76.20mm" file="US08627172-20140107-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00002" nb-file="US08627172-20140107-M00002.NB">
<img id="EMI-M00002" he="17.61mm" wi="76.20mm" file="US08627172-20140107-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00003" nb-file="US08627172-20140107-M00003.NB">
<img id="EMI-M00003" he="18.37mm" wi="76.20mm" file="US08627172-20140107-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00004" nb-file="US08627172-20140107-M00004.NB">
<img id="EMI-M00004" he="13.04mm" wi="76.20mm" file="US08627172-20140107-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-math idrefs="MATH-US-00005" nb-file="US08627172-20140107-M00005.NB">
<img id="EMI-M00005" he="7.45mm" wi="76.20mm" file="US08627172-20140107-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/>
</us-math>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. An error correction encoding apparatus, comprising:
<claim-text>a data dividing module which divides a transmission data sequence into L-pieces of short sequences; a first encoding module which encodes each of the divided L-pieces of short sequences to encoded sequences of length N by an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m), and output those encoded sequences; and a redundant sequence output module which generates a redundant sequence based on each of the encoded sequences of length N outputted from the first encoding module, and outputs the redundant sequence in a same manner as a plurality of encoded sequences outputted from the first encoding module, wherein</claim-text>
</claim-text>
<claim-text>the redundant sequence output module includes: a data replacing module which inputs the L-pieces of encoded sequences of length N encoded by the first encoding module, and outputs each of the data sequences by changing an order thereof; and a second encoding module which encodes each of the replaced encoded sequences outputted from the data replacing module by the m-stage quasi-cyclic low density parity check encoding method, and outputs those encoded sequences, wherein
<claim-text>the data replacing module comprises: a short sequence dividing unit which divides each of the L-pieces of data sequences encoded by the first encoding processing unit into short sequences of length m in a same number as the stage number m of the first quasi-cyclic low density parity check codes; and a data replacement processing unit which changes an order by a unit of (L&#xd7;N)/m-pieces of short sequences of length m set by the division, and outputs N/m-pieces of sequences of length L&#xd7;m in maximum.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The error correction encoding apparatus as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the data replacement processing unit comprises: a selector which includes L-pieces of input ports and N-pieces of output ports to perform distribution; and a cyclic replacing circuit formed with a plurality of cyclic replacers for performing cyclic replacement of each small block outputted from the selector.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The error correction encoding apparatus as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the second encoding module has a function which performs encoding (error correction encoding) on each of the replaced encoded sequences outputted from the data replacing module into sequences of length equal to or less than (L+S)&#xd7;m (S is a natural number), and outputs those sequences.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The error correction encoding apparatus as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein
<claim-text>the data replacing module is defined as a first replacing module, the encoding apparatus further comprising: a second replacing module which inputs each parity part in length S&#xd7;m of the N/m-pieces of encoded sequences encoded by the second encoding module and outputs S-pieces of sequence of length N by changing the order; and a third encoding module which performs encoding of a part of the S-pieces of sequences of length N as an output of the second replacing module with third quasi-cyclic low density party check codes of stage number m and length N, wherein</claim-text>
<claim-text>each of the parity parts encoded by the third encoding module is outputted as encoded transmission data like the L-pieces of data sequences encoded by the first encoding module.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The error correction encoding apparatus as claimed in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein
<claim-text>the data replacing module has a function of arranging each of the L+S-pieces of small blocks constituting the second low density parity check codes so as not to appear on a same row and a same column, in a case where the L-pieces of first low density parity check code sequences are divided into small blocks of length m among output data encoded by the first encoding module and those are arranged on a higher-order L row of two-dimensional layout of (L+S) rows and (N/m) columns and the N/m-pieces of parity sequences of length S&#xd7;m of the second low density parity check codes are divided into small blocks of length m and those are arranged in a lower-order S row of the two-dimensional layout of (L+S) rows and (N/m) columns.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The error correction encoding apparatus as claimed in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein
<claim-text>the data replacing module has a function of arranging each of the L+S-pieces of small blocks constituting the third low density parity check codes so as not to appear on a same row and a same column, in a case where the L-pieces of first low density parity check code sequences are divided into small blocks of length m among output data encoded by the first encoding module and those are arranged on a higher-order L row of two-dimensional layout of (L+S) rows and (N/m) columns and the S-pieces of third low density parity check encoded sequences of length N are divided into small blocks of length m and those are arranged in a lower-order S row of the two-dimensional layout of (L+S) rows and (N/m) columns.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A decoding apparatus for decoding transmitted data encoded by an error correction encoding apparatus and correcting an error when the error is added to the data, the decoding apparatus comprising:
<claim-text>a plurality of data storage modules which, among the data transmitted from the error correction encoding apparatus, separately store data of a plurality of encoded sequences processed by a first encoding module of the error correction encoding apparatus and data of a plurality of encoded sequences processed by a redundant sequence calculating module of the error correction encoding apparatus; a memory controller for controlling storing operations of each of the data storage modules; and a decoding update processing module provided by corresponding to each of the data storage modules to repeat, for number of times specified by the address generating procedure, an update operation which reads out the data held at addresses of each of the data storage modules according to an address generating procedure set in advance, performs update processing, and stores the data again to the same addresses of the original data storage modules, wherein</claim-text>
<claim-text>the memory controller has a decoded data output control function which, among the data held at each of the plurality of data storage modules, takes out highest-order bit of each symbol specified by the address generating procedure set in advance in a reversed procedure from that of the time of writing to each of the data storage modules, and outputs those as decoded data, wherein:</claim-text>
<claim-text>N/m-pieces of the data storage modules are provided (N is a natural number, m is a number of stages of the quasi-cyclic low density parity check codes); and each of the data storage modules is formed with RAM (Random Access Memory) with bit number of b&#xd7;p (b is a natural number, p is a submultiple of m) and word number of m/p&#xd7;(L+S),</claim-text>
<claim-text>the decoding update processing module comprises: a cyclic shift processing unit including N/m-pieces of cyclic shift circuits for performing cyclic shift of the data held at each of the RAMs by an amount set by each b-bit; a node processing module including p-pieces of node processing units mounted on respective output sides of the N/m-pieces of cyclic shift circuits; and a delay element which holds output results from the p-pieces of node processing units, whereby the update operation is executed by a cooperative work of each of those structural elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. A decoding apparatus for decoding transmitted data encoded by an error correction encoding apparatus and correcting an error when the error is added to the data, the decoding apparatus comprising:
<claim-text>a plurality of data storage modules which, among the data transmitted from the error correction encoding apparatus, separately store data of a plurality of encoded sequences processed by a first encoding module of the error correction encoding apparatus and data of a plurality of encoded sequences processed by a redundant sequence calculating module of the error correction encoding apparatus; a memory controller for controlling storing operations of each of the data storage modules; and a decoding update processing module provided by corresponding to each of the data storage modules to repeat, for number of times specified by the address generating procedure, an update operation which reads out the data held at addresses of each of the data storage modules according to an address generating procedure set in advance, performs update processing, and stores the data again to the same addresses of the original data storage modules, wherein</claim-text>
<claim-text>the memory controller has a decoded data output control function which, among the data held at each of the plurality of data storage modules, takes out highest-order bit of each symbol specified by the address generating procedure set in advance in a reversed procedure from that of the time of writing to each of the data storage modules, and outputs those as decoded data, wherein:</claim-text>
<claim-text>N/m-pieces of the data storage modules are provided (N is a natural number, m is a number of stages of the quasi-cyclic low density parity check codes); and each of the data storage modules is formed with RAM (Random Access Memory) with bit number of b&#xd7;p (b is a natural number, p is a submultiple of m) and word number of m/p&#xd7;(L+S),</claim-text>
<claim-text>the decoding update processing module comprises: a cyclic shift processing unit including N/m-pieces of cyclic shift circuits for performing cyclic shift of the data held at each of the RAMs by an amount set by each b-bit; p-pieces of subtractors which receive outputs of each of the cyclic shift processing units; a plurality of first delay elements which hold results of outputs from each of the subtractors; a node processing module including p-pieces of node processing units which receive each of the outputs from each of the subtractors and perform transmission processing; a second delay element which holds output result of each of the node processing module and transmits those to the subtractors; and p-pieces of adders which add each of the outputs of the node processing module and the first delay element and transmits results thereof to each of the RAMs as update information, whereby the update operation is executed by a cooperative work of each of those structural elements.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The decoding apparatus as claimed in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein
<claim-text>each of the p-pieces of node processing units of the node processing module is formed by a minimum-value calculating module, and</claim-text>
<claim-text>each of the minimum-value calculation processing units comprises: a plurality of 2/4 data processing units provided on a data input stage thereof, which receive four pieces of output data out of the output data from each of the subtractors as input data and output two numerical values whose absolute values are small and a number corresponding to the input port to which a numerical value whose absolute values is the minimum is inputted; a plurality of 2/4 data processing units having a same function provided on output side of each of the plurality of 2/4 data processing units in a sequential tournament manner; a demultiplexer having a function which receives outputs of the 2/4 data processing unit located on a final output stage of the 2/4 data processing units, and outputs X<sub>1 </sub>to the output port of a same number as port number P of the 2/4 data processing unit while outputting X<sub>0 </sub>to output ports of other numbers; and an exclusive OR circuit which performs a prescribed arithmetic calculation based on the input data, and outputs to outside, whereby</claim-text>
<claim-text>the decoding apparatus is provided with a function which outputs the number corresponding to the input port to which the input value with the minimum absolute value is inputted among the input numerical values of k-pieces of input data, and provided with a function which calculates all the exclusive ORs of &#x201c;k&#x2212;1&#x201d;-pieces of highest-order bits selected from entire highest-order bits of the k-pieces of input numerical values.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A data communication apparatus, comprising an encoding apparatus on a transmitter side and a decoding apparatus corresponding to the encoding apparatus on a receiver side, wherein
<claim-text>the error correction encoding apparatus as claimed in <claim-ref idref="CLM-00001">claim 1</claim-ref> is mounted as the encoding apparatus.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. An error correction encoding method, comprising:
<claim-text>dividing a transmission data sequence into L-pieces of short sequences by a data dividing module;</claim-text>
<claim-text>encoding each of the divided L-pieces of short sequences to encoded sequences of length N by a first encoding module according to an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m);</claim-text>
<claim-text>generating a redundant sequence by a redundant sequence output module based on each of the encoded sequences of length N outputted from the first encoding module, and outputting the redundant sequence as redundant sequence data along with a plurality of encoded sequences outputted from the first encoding module;</claim-text>
<claim-text>when outputting the redundant sequence data, inputting the L-pieces of encoded sequences of length N encoded by the first encoding module to a data replacing module, and outputting each of the data sequences by changing an order thereof; and</claim-text>
<claim-text>thereafter, performing encoding (error correction encoding) on each of the replaced and outputted encoded sequences by a second encoding module according to the m-stage quasi-cyclic low density parity check encoding method wherein</claim-text>
<claim-text>in a step executed by the data replacing module for changing an order of the data sequence with respect to the input data and outputting the data sequence, a short sequence dividing unit executes a step of dividing each of the L-pieces of data sequences encoded by the first encoding processing unit into short sequences of length m in a same number as the stage number m of the first quasi-cyclic low density parity check codes, and a data replacement processing unit executes a step of changing an order by a unit of (L&#xd7;N)/m-pieces of short sequences of length m set by the division and outputting N/m-pieces of sequences of length L&#xd7;m in maximum.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012" num="00012">
<claim-text>12. The error correction encoding method as claimed in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein
<claim-text>in a step executed by the data replacement processing unit for changing the order by the unit of short sequence, a selector comprising L-pieces of input ports and N-pieces of output ports executes a distributing step; a cyclic replacing circuit formed with a plurality of cyclic replacers executes a step of performing cyclic replacement of each small block outputted therefrom, whereby</claim-text>
<claim-text>the N/m-pieces of sequences of length L&#xd7;m in maximum are outputted.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013" num="00013">
<claim-text>13. A non-transitory computer readable recording medium storing an error correction encoding program for causing a computer to execute:
<claim-text>a data dividing processing function which divides a transmission data sequence into L-pieces of short sequences;</claim-text>
<claim-text>a first encoding processing function which performs encoding (error correction encoding on each of the divided L-pieces of short sequences to encoded sequences of length N by an m-stage quasi-cyclic low density parity check encoding method (L, m are natural numbers, N is a multiple of m), and outputs those encoded sequences; and</claim-text>
<claim-text>a redundant sequence output processing function which generates a redundant sequence based on each of the encoded sequences of length N generated by executing the first encoding processing function, and outputs the redundant sequence in a same manner as a plurality of encoded sequences generated and outputted by the first encoding processing function, wherein the redundant sequence output processing function includes: a data replacement processing function which inputs the L-pieces of encoded sequences of length N encoded by the first encoding processing function, and performs output processing of each of the data sequences by changing an order thereof; and a second encoding processing function which performs encoding (error correction encoding) on each of the replaced encoded sequences outputted thereby by the m-stage quasi-cyclic low density parity check encoding method, and outputs those encoded sequences, wherein</claim-text>
<claim-text>the data replacing processing function executed by the computer includes: a short sequence dividing processing function which divides each of the L-pieces of data sequences encoded by the first encoding processing function into short sequences of length m in a same number as the stage number m of the first quasi-cyclic low density parity check codes; and a data replacement processing function which changes an order by a unit of (L&#xd7;N)/m-pieces of short sequences of length m set by the division, and outputs N/m-pieces of sequences of length L&#xd7;m in maximum.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00014" num="00014">
<claim-text>14. The non-transitory computer readable recording medium storing the error correction encoding program as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein
<claim-text>the data replacement processing function executed by the computer includes: a distributing processing function which includes L-pieces of input ports and N-pieces of output ports to perform distribution; and a cyclic replacement function which performs cyclic replacement of each small block outputted from the N-pieces of output ports by being distributed by the distributing processing function.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015" num="00015">
<claim-text>15. The non-transitory computer readable recording medium storing the error correction encoding program as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein
<claim-text>the second encoding processing function executed by the computer performs processing for encoding (error correction encoding) each of the replaced encoded sequences outputted by the data replacement processing function into sequences of length equal to or less than (L+S)&#xd7;m (S is a natural number), and for outputting those sequences.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016" num="00016">
<claim-text>16. The non-transitory computer readable recording medium storing the error correction encoding program as claimed in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein
<claim-text>the data replacement processing function is defined as a first replacement processing function, and the encoding program executed by the computer including: a second replacement processing function which inputs each parity part in length S&#xd7;m of the N/m-pieces of encoded sequences encoded by the second encoding processing function and outputs S-pieces of sequence of length N by changing the order; and a third encoding processing function which performs encoding processing of a part of the S-pieces of sequences of length N acquired by the second replacement processing function with third quasi-cyclic low density party check codes of stage number m and length N, wherein</claim-text>
<claim-text>each of the parity parts encoded by the third encoding processing function is output-processed as encoded transmission data like the L-pieces of data sequences encoded by the first encoding processing function.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00017" num="00017">
<claim-text>17. The non-transitory computer readable recording medium storing the error correction encoding program as claimed in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein
<claim-text>the data replacement processing function executed by the computer includes a function of performing processing for arranging each of the L+S-pieces of small blocks constituting the second low density parity check codes so as not to appear on a same row and a same column, in a case where the L-pieces of first low density parity check code sequences are divided into small blocks of length m among output data encoded by execution of the first encoding processing function and those are arranged on a higher-order L row of two-dimensional layout of (L+S) rows and (N/m) columns and the N/m-pieces of parity sequences of length S&#xd7;m of the second low density parity check codes are divided into small blocks of length m and those are arranged in a lower-order S row of the two-dimensional layout of (L+S) rows and (N/m) columns.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018" num="00018">
<claim-text>18. The non-transitory computer readable recording medium storing the error correction encoding program as claimed in <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein
<claim-text>the data replacement processing function executed by the computer has a function of performing processing for arranging each of the L+S-pieces of small blocks constituting the third low density parity check codes so as not to appear on a same row and a same column, in a case where the L-pieces of first low density parity check code sequences are divided into small blocks of length m among output data encoded by execution of the first encoding processing function and those are arranged on a higher-order L row of two-dimensional layout of (L+S) rows and (N/m) columns and the S-pieces of third low density parity check encoded sequences of length N are divided into small blocks of length m and those are arranged in a lower-order S row of the two-dimensional layout of (L+S) rows and (N/m) columns.</claim-text>
</claim-text>
</claim>
</claims>
</us-patent-grant>

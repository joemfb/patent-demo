<!DOCTYPE us-patent-grant SYSTEM "us-patent-grant-v44-2013-05-16.dtd" [ ]>
<us-patent-grant lang="EN" dtd-version="v4.4 2013-05-16" file="US08626816-20140107.XML" status="PRODUCTION" id="us-patent-grant" country="US" date-produced="20131224" date-publ="20140107">
<us-bibliographic-data-grant>
<publication-reference>
<document-id>
<country>US</country>
<doc-number>08626816</doc-number>
<kind>B2</kind>
<date>20140107</date>
</document-id>
</publication-reference>
<application-reference appl-type="utility">
<document-id>
<country>US</country>
<doc-number>12037408</doc-number>
<date>20080226</date>
</document-id>
</application-reference>
<us-application-series-code>12</us-application-series-code>
<us-term-of-grant>
<us-term-extension>1071</us-term-extension>
</us-term-of-grant>
<classifications-ipcr>
<classification-ipcr>
<ipc-version-indicator><date>20060101</date></ipc-version-indicator>
<classification-level>A</classification-level>
<section>G</section>
<class>06</class>
<subclass>F</subclass>
<main-group>7</main-group>
<subgroup>52</subgroup>
<symbol-position>F</symbol-position>
<classification-value>I</classification-value>
<action-date><date>20140107</date></action-date>
<generating-office><country>US</country></generating-office>
<classification-status>B</classification-status>
<classification-data-source>H</classification-data-source>
</classification-ipcr>
</classifications-ipcr>
<classification-national>
<country>US</country>
<main-classification>708650</main-classification>
<further-classification>708530</further-classification>
</classification-national>
<invention-title id="d2e53">Method, system and computer program product for detecting errors in fixed point division operation results</invention-title>
<us-references-cited>
<us-citation>
<patcit num="00001">
<document-id>
<country>US</country>
<doc-number>4488247</doc-number>
<kind>A</kind>
<name>Inagami et al.</name>
<date>19841200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00002">
<document-id>
<country>US</country>
<doc-number>4817048</doc-number>
<kind>A</kind>
<name>Rawlinson</name>
<date>19890300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00003">
<document-id>
<country>US</country>
<doc-number>4878190</doc-number>
<kind>A</kind>
<name>Darley et al.</name>
<date>19891000</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00004">
<document-id>
<country>US</country>
<doc-number>5046038</doc-number>
<kind>A</kind>
<name>Briggs et al.</name>
<date>19910900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00005">
<document-id>
<country>US</country>
<doc-number>5386376</doc-number>
<kind>A</kind>
<name>Girard et al.</name>
<date>19950100</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708656</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00006">
<document-id>
<country>US</country>
<doc-number>5644524</doc-number>
<kind>A</kind>
<name>Van Aken et al.</name>
<date>19970700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00007">
<document-id>
<country>US</country>
<doc-number>5903486</doc-number>
<kind>A</kind>
<name>Curtet</name>
<date>19990500</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708655</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00008">
<document-id>
<country>US</country>
<doc-number>5937202</doc-number>
<kind>A</kind>
<name>Crosetto</name>
<date>19990800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00009">
<document-id>
<country>US</country>
<doc-number>6185596</doc-number>
<kind>B1</kind>
<name>Hadad et al.</name>
<date>20010200</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00010">
<document-id>
<country>US</country>
<doc-number>6487515</doc-number>
<kind>B1</kind>
<name>Ghoshal</name>
<date>20021100</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00011">
<document-id>
<country>US</country>
<doc-number>6560624</doc-number>
<kind>B1</kind>
<name>Otani et al.</name>
<date>20030500</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00012">
<document-id>
<country>US</country>
<doc-number>6625633</doc-number>
<kind>B1</kind>
<name>Hirairi</name>
<date>20030900</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00013">
<document-id>
<country>US</country>
<doc-number>7185041</doc-number>
<kind>B1</kind>
<name>End, III</name>
<date>20070200</date>
</document-id>
</patcit>
<category>cited by examiner</category>
<classification-national><country>US</country><main-classification>708656</main-classification></classification-national>
</us-citation>
<us-citation>
<patcit num="00014">
<document-id>
<country>US</country>
<doc-number>2003/0050948</doc-number>
<kind>A1</kind>
<name>Okawa</name>
<date>20030300</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00015">
<document-id>
<country>US</country>
<doc-number>2004/0128337</doc-number>
<kind>A1</kind>
<name>Roussel et al.</name>
<date>20040700</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<patcit num="00016">
<document-id>
<country>US</country>
<doc-number>2006/0179092</doc-number>
<kind>A1</kind>
<name>Schmookler et al.</name>
<date>20060800</date>
</document-id>
</patcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00017">
<othercit>&#x201c;IBM&#xae; z/Architecture Principles of Operation&#x201d;, Publication No. SA22-7832-05, 6th Edition, Apr. 2007. 1,215 pages separated into 4 electronic attachments.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00018">
<othercit>U.S. Appl. No. 12/036,397 Non-Final Office Action dated Mar. 3, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00019">
<othercit>U.S. Appl. No. 12/036,387 Non-Final Office Action dated Mar. 30, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
<us-citation>
<nplcit num="00020">
<othercit>U.S. Appl. No. 12/037,207 Non Final Office Action dated Mar. 3, 2011.</othercit>
</nplcit>
<category>cited by applicant</category>
</us-citation>
</us-references-cited>
<number-of-claims>11</number-of-claims>
<us-exemplary-claim>1</us-exemplary-claim>
<us-field-of-classification-search>
<classification-national>
<country>US</country>
<main-classification>None</main-classification>
</classification-national>
</us-field-of-classification-search>
<figures>
<number-of-drawing-sheets>2</number-of-drawing-sheets>
<number-of-figures>2</number-of-figures>
</figures>
<us-related-documents>
<related-publication>
<document-id>
<country>US</country>
<doc-number>20090216825</doc-number>
<kind>A1</kind>
<date>20090827</date>
</document-id>
</related-publication>
</us-related-documents>
<us-parties>
<us-applicants>
<us-applicant sequence="001" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Weinberg</last-name>
<first-name>Joshua M.</first-name>
<address>
<city>Bronx</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
<us-applicant sequence="002" app-type="applicant" designation="us-only">
<addressbook>
<last-name>Schmookler</last-name>
<first-name>Martin S.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
<residence>
<country>US</country>
</residence>
</us-applicant>
</us-applicants>
<inventors>
<inventor sequence="001" designation="us-only">
<addressbook>
<last-name>Weinberg</last-name>
<first-name>Joshua M.</first-name>
<address>
<city>Bronx</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</inventor>
<inventor sequence="002" designation="us-only">
<addressbook>
<last-name>Schmookler</last-name>
<first-name>Martin S.</first-name>
<address>
<city>Austin</city>
<state>TX</state>
<country>US</country>
</address>
</addressbook>
</inventor>
</inventors>
<agents>
<agent sequence="01" rep-type="attorney">
<addressbook>
<orgname>Cantor Colburn LLP</orgname>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
<agent sequence="02" rep-type="attorney">
<addressbook>
<last-name>Campbell</last-name>
<first-name>John</first-name>
<address>
<country>unknown</country>
</address>
</addressbook>
</agent>
</agents>
</us-parties>
<assignees>
<assignee>
<addressbook>
<orgname>International Business Machines Corporation</orgname>
<role>02</role>
<address>
<city>Armonk</city>
<state>NY</state>
<country>US</country>
</address>
</addressbook>
</assignee>
</assignees>
<examiners>
<primary-examiner>
<last-name>Yaary</last-name>
<first-name>Michael D</first-name>
<department>2193</department>
</primary-examiner>
</examiners>
</us-bibliographic-data-grant>
<abstract id="abstract">
<p id="p-0001" num="0000">A method, computer program product and a system for detecting errors in a result of a fixed-point division operation are provided. The method includes: receiving a result of a fixed-point division operation for a dividend and a divisor; performing a first comparison of the divisor and a remainder of the result; performing a second comparison of a sign of the dividend and a sign of the remainder; and determining whether the result is correct based on the first comparison and the second comparison.</p>
</abstract>
<drawings id="DRAWINGS">
<figure id="Fig-EMI-D00000" num="00000">
<img id="EMI-D00000" he="157.99mm" wi="124.88mm" file="US08626816-20140107-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00001" num="00001">
<img id="EMI-D00001" he="135.04mm" wi="133.27mm" file="US08626816-20140107-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
<figure id="Fig-EMI-D00002" num="00002">
<img id="EMI-D00002" he="194.90mm" wi="128.95mm" file="US08626816-20140107-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/>
</figure>
</drawings>
<description id="description">
<?BRFSUM description="Brief Summary" end="lead"?>
<heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading>
<p id="p-0002" num="0001">This invention relates generally to microprocessing, and more particularly to providing methods to improve fixed-point arithmetic operations.</p>
<p id="p-0003" num="0002">Fixed-point divide, also known as integer divide, instructions may be carried out by any of a number of algorithms. Some implementations of fixed-point divide are based on the SRT (Sweeney Robertson Tocher) divide algorithm, which is similar to the repeated subtraction method often done by hand called &#x201c;long division&#x201d;. Other implementations of integer divide include &#x201c;iterative&#x201d; algorithms, like the Newton-Raphson and Goldschmidt algorithms. These algorithms start with an estimate of the quotient and iterate on that estimate, improving the precision during each iteration, until the required quotient precision is achieved.</p>
<p id="p-0004" num="0003">When designing the logic and circuits for complex instructions such as the algorithms described above, it is important to note that errors may occur during execution of the algorithm, either due to errors in the design (including the algorithm itself) or due to circuit malfunctions such as manufacturing faults or rare environmental disturbances. Functional checking of these types of fixed-point divide algorithms and their results using formal verification techniques is not currently available, and such checking would only serve to eliminate design flaws, as opposed to malfunctions occurring during execution.</p>
<p id="p-0005" num="0004">Accordingly, other techniques have been devised to try and verify the correctness of the algorithm and/or the result. For example, previous machines have focused on verifying the divide instruction's internal verifiable mathematical operations using parity and residue checks. While these techniques can verify the correctness of each internal operation, they do not speak to the correctness of the final result.</p>
<p id="p-0006" num="0005">Thus, it would be desirable to be able to detect errors based on the final result of a fixed-point divide algorithm. Such an ability would be useful in providing a method to verify the actual results of a divide operation without the complexity and uncertainty of verifying each mathematical step in the algorithm.</p>
<heading id="h-0002" level="1">BRIEF SUMMARY OF THE INVENTION</heading>
<p id="p-0007" num="0006">An exemplary embodiment includes a method of detecting errors in a result of a fixed-point division operation. The method includes: receiving a result of a fixed-point division operation for a dividend and a divisor; performing a first comparison of the divisor and a remainder of the result; performing a second comparison of a sign of the dividend and a sign of the remainder; and determining whether the result is correct based on the first comparison and the second comparison.</p>
<p id="p-0008" num="0007">Another exemplary embodiment includes a computer program product for detecting errors in a result of a fixed point division operation. The computer program product includes a computer-readable storage medium for storing instructions for executing a method of: receiving a result of a fixed-point division operation for a dividend and a divisor; performing a first comparison of the divisor and a remainder of the result; performing a second comparison of a sign of the dividend and a sign of the remainder; and determining whether the result is correct based on the first comparison and the second comparison.</p>
<p id="p-0009" num="0008">A further exemplary embodiment includes a system for detecting errors in a result of a fixed point division operation. The system includes: an instruction dispatching unit (IDU) for sending an instruction to perform a division operation for a dividend and a divisor, and a processor in operable communication with the IDU. The processor performs: receiving the instruction from the IDU; calculating a result of a fixed point division operation for a dividend and a divisor; performing a first comparison of the divisor and a remainder of the result; performing a second comparison of a sign of the dividend and a sign of the remainder; and determining whether the result is correct based on the first comparison and the second comparison.</p>
<?BRFSUM description="Brief Summary" end="tail"?>
<?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?>
<description-of-drawings>
<heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading>
<p id="p-0010" num="0009">Referring now to the drawings wherein like elements are numbered alike in the several FIGURES:</p>
<p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. 1</figref> is an exemplary embodiment of a system for performing methods described herein; and</p>
<p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. 2</figref> is a flow chart providing an exemplary method for detecting errors in a result of a fixed-point divide operation.</p>
</description-of-drawings>
<?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?>
<?DETDESC description="Detailed Description" end="lead"?>
<heading id="h-0004" level="1">DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS</heading>
<p id="p-0013" num="0012">An exemplary embodiment of the present invention provides a method and computer program product for detecting errors in a result of a fixed-point divide operation. The method includes comparing a remainder corresponding to the fixed-point divide's result with a divisor used in the divide operation. In one embodiment, the method includes i) comparing a magnitude of the remainder, i.e., the remainder magnitude, with a magnitude of the divisor, i.e., the divisor magnitude, and ii) comparing a sign of the remainder with a sign of a dividend used in the divide operation, in order to verify correctness of the result. This method is particularly useful in detecting circuit malfunctions independent of the algorithm design. Such errors in the divide result occurring from such malfunctions are easily detected by the method described herein.</p>
<p id="p-0014" num="0013">The methods described herein are provided for use with any type of algorithm that performs the fixed-point divide operation. For example, the methods described herein may be used with algorithms such as the SRT algorithm, as well as the Newton-Raphson and Goldschmidt algorithms.</p>
<p id="p-0015" num="0014">Any fixed-point divide algorithm that takes two integer numbers and, from those numbers, performs an integer divide operation to compute an integer quotient is referred to herein as the &#x201c;fixed-point divide&#x201d; algorithm.</p>
<p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. 1</figref> depicts a system <b>100</b> suitable for implementing the method for determining a required quotient precision. The system <b>100</b> includes a microprocessor <b>105</b> or other processor, such as a FPU or a central processing unit (CPU) which includes a processor function <b>110</b> for performing the method. The system also includes an optional instruction dispatching unit (IDU) <b>125</b> for receiving information from the microprocessor <b>105</b> and dispatching instructions to the microprocessor <b>105</b>. The system <b>100</b> described herein is merely exemplary. The system may include any additional components as necessary to provide for processing of data. Exemplary components include, without limitation, storage, memory, input devices, output devices and the like. As these components are known to those skilled in the art, these are not depicted in any detail herein.</p>
<p id="p-0017" num="0016">Referring to <figref idref="DRAWINGS">FIG. 2</figref>, there is provided a method <b>200</b> for detecting errors in a result of a fixed-point division operation. The method <b>200</b> includes one or more stages <b>205</b>, <b>210</b>, <b>215</b> and <b>220</b>. The method <b>200</b> is described herein in conjunction with a microprocessor or execution unit within a microprocessor, although the method <b>200</b> may be performed in conjunction with any type, number and configuration of processors.</p>
<p id="p-0018" num="0017">In the first stage <b>205</b>, the processor, FPU or other hardware, receives data for two operands, i.e., a dividend and a divisor. The processor also receives data in the form of a result of a fixed-point divide operation for the dividend and the divisor. In one embodiment, the result includes a quotient and/or a remainder calculated by the fixed-point divide operation. The processor may perform the fixed-point divide operation, such as in response to an instruction from the instruction dispatch unit, or otherwise receive the result from another processor or logical unit.</p>
<p id="p-0019" num="0018">In one embodiment, the fixed-point divide operation is any of the algorithms described herein, such as the SRT, the Newton-Raphson and Goldschmidt algorithms, and any other algorithms that implement fixed-point divide.</p>
<p id="p-0020" num="0019">In one embodiment, the remainder is calculated as part of the fixed-point divide operation. In another embodiment, the remainder is separately calculated based on the divisor, the dividend, and the quotient received as the result of the operation.</p>
<p id="p-0021" num="0020">In both embodiments, the remainder is calculated based on the following equation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Rem=<i>A&#x2212;Qt*B, </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
where &#x201c;Qt&#x201d; is the computed fixed-point result, i.e., the quotient, &#x201c;A&#x201d; is the dividend, and &#x201c;B is the divisor.
</p>
<p id="p-0022" num="0021">Alternatively, the remainder may be validated by showing that the following is true:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>A=Qt*B</i>+Rem.<?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0023" num="0022">In the third stage <b>215</b>, the divisor is compared to the remainder and the sign of the dividend is compared to the sign of the remainder to determine whether the result of the fixed-point divide operation is correct.</p>
<p id="p-0024" num="0023">In one embodiment, the magnitude of the divisor, i.e., the divisor magnitude, is compared to the magnitude of the remainder, i.e., the remainder magnitude. Also, the sign of the remainder and the sign of the dividend is compared. As described herein, the &#x201c;sign&#x201d; of a value refers to whether the value is a positive or a negative value. In one embodiment, the magnitude of a data unit, such as the dividend, the divisor and the remainder, refers to the number of significant digits or bits.</p>
<p id="p-0025" num="0024">In one embodiment, the operands are converted to floating point numbers, then division takes place using a modified floating point divide algorithm, and finally the quotient is converted to an integer. When the operands are in floating point representation, their exponents correspond to the number of significant bits in the fixed point integer representation. In this embodiment, the remainder may be calculated from the quotient and the operands. If the remainder is also in floating point representation, its exponent also corresponds to its magnitude. Thus, in this embodiment, the magnitudes of the divisor and remainder may be compared by comparing only their exponents.</p>
<p id="p-0026" num="0025">In these embodiments, the quotient is considered to be correct if the remainder magnitude is less than or equal to the divisor magnitude, and the remainder has the same sign as the dividend.</p>
<p id="p-0027" num="0026">The remainder magnitude and the divisor magnitude are compared. If the remainder magnitude is larger than the divisor magnitude, then the quotient is too small and is thus incorrect. Furthermore, the sign of the remainder is compared to the sign of the dividend. If the sign of the remainder is different than the sign of the dividend, then the quotient is too large and is incorrect. As will be shown below, if the magnitude of the remainder is smaller than or equal to the magnitude of the divisor, and the sign of the remainder is the same as the sign of the dividend, then the calculated quotient is correct.</p>
<p id="p-0028" num="0027">In another embodiment, the value of the divisor, i.e., the divisor value, is compared to the value of the remainder, i.e., the remainder value. The sign of the remainder is also compared to the sign of the dividend.</p>
<p id="p-0029" num="0028">In this embodiment, the quotient is considered to be correct if the absolute value of the remainder is less than the absolute value of the divisor, and the remainder has the same sign as the dividend.</p>
<p id="p-0030" num="0029">The remainder value and the divisor value are compared. If the remainder value is greater than or equal to the divisor value, then the quotient is too small and is thus incorrect. Furthermore, the sign of the remainder is compared to the sign of the dividend. If the sign of the remainder is different than the sign of the dividend, then the quotient is too large and is incorrect. If the remainder value is smaller than the divisor value, and the sign of the remainder is the same as the sign of the dividend, then the calculated quotient is correct.</p>
<p id="p-0031" num="0030">An example of the comparison described in stage <b>215</b> is described. In this example, &#x201c;Q&#x201d; refers to an infinitely precise quotient of integers A/B, and &#x201c;Qt&#x201d; refers to Q truncated to an integer. Qt may be expressed as the following equation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?><i>Qt=Q&#x2212;et, </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
As referred to herein, &#x201c;et&#x201d; is the fractional part of Q. It may also be thought of as the error resulting from the truncation of quotient Q, i.e., the truncation error. In this example, |et|&#x3c;1, and et has the same sign as Q. &#x201c;|et|&#x201d; refers to an absolute value of et.
</p>
<p id="p-0032" num="0031">Accordingly, the remainder may be expressed as the following equation:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Rem=<i>A&#x2212;Qt*B </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
which may be expressed, based on the equation for Qt, as the following:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Rem=<i>A</i>&#x2212;(<i>Q&#x2212;et</i>)*<i>B, </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
which may alternatively be expressed as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Rem=<i>A&#x2212;Q*B+et*B. </i><?in-line-formulae description="In-line Formulae" end="tail"?>
<br/>
Because, in this example, Q is infinitely precise, A&#x2212;Q*B=0, and the resulting equation for the remainder may be expressed as:
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Rem=<i>et*B. </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</p>
<p id="p-0033" num="0032">From the above equations, because |et|&#x3c;1, it should follow that |Rem|&#x3c;|B|, i.e., the absolute value of the remainder must be less than the absolute value of the divisor. Furthermore, given that Q=A/B, and et has the same sign as Q, Rem must have the same sign as A. Thus, if these conditions are met, i.e. the magnitude of the remainder is less than the magnitude of the divisor and the signs of the remainder and the dividend are the same, the result of the fixed-point divide operation is correct.</p>
<p id="p-0034" num="0033">Likewise, if |Rem|&#x3e;=|B|, then it should follow that |et|&#x3e;=1, meaning that Qt could be incremented and still be less than or equal to Q. Furthermore, if the sign of Rem is not the same as the sign of A, then it should follow that |Qt*B|&#x3e;|A|, meaning that |Qt|&#x3e;|Q|. Therefore, for both cases, Qt is not the correct result. It may be noted that, in this example, if the value of the remainder Rem is greater than or equal to the value of the divisor B, the quotient Qt is incorrect. In the embodiments in which the magnitudes (i.e., number of significant bits) of the remainder and the divisor are compared, the quotient is considered incorrect if the remainder magnitude is greater than the divisor magnitude.</p>
<p id="p-0035" num="0034">In a fourth stage <b>220</b>, the processor, after determining whether the quotient is correct based on the above comparison, may indicate to a user or another logical unit the result of the comparison. In other words, the processor may provide an indication as to whether the quotient is correct, or whether an error occurred in the divide operation.</p>
<p id="p-0036" num="0035">The methods described herein are particularly suited to detecting errors occurring during execution of a divide operation that result from malfunctions in a circuit or from environmental interferences. Such errors are likely to occur in one or more random bit positions of the result, and thus the corresponding remainder that is calculated using that quotient would then be many times larger than the divisor, thereby having many more significant bits than the divisor, or differ in sign from the dividend.</p>
<p id="p-0037" num="0036">The methods may also be advantageously used in conjunction with methods for verifying the correctness of the underlying algorithm. Such methods for verifying the underlying algorithm may be used to detect small errors resulting from design flaws in the algorithm. In such cases, the remainder may have the same number of bits (i.e., the same magnitude) as the divisor, but the remainder may possibly be larger in value than the divisor, and the quotient result would be incorrect. In such a case, the use of a method for verifying the underlying algorithm may be utilized so that errors stemming from both design flaws and malfunctions may be efficiently detected.</p>
<p id="p-0038" num="0037">As described above, the embodiments of the invention may be embodied in the form of computer-implemented processes and apparatuses for practicing those processes. Embodiments of the invention may also be embodied in the form of computer program code containing instructions embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of computer program code, for example, whether stored in a storage medium, loaded into and/or executed by a computer, or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose microprocessor, the computer program code segments configure the microprocessor to create specific logic circuits.</p>
<p id="p-0039" num="0038">While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims. Moreover, the use of the terms first, second, etc. do not denote any order or importance, but rather the terms first, second, etc. are used to distinguish one element from another.</p>
<?DETDESC description="Detailed Description" end="tail"?>
</description>
<us-claim-statement>The invention claimed is:</us-claim-statement>
<claims id="claims">
<claim id="CLM-00001" num="00001">
<claim-text>1. A method of detecting errors in a result of a fixed-point division operation, the method comprising:
<claim-text>performing, by a division circuit, a fixed-point division operation for a dividend and a divisor to produce a final result, the final result including a quotient;</claim-text>
<claim-text>providing a sign of the dividend, the divisor and the result of the operation to an error detection processing unit; and</claim-text>
<claim-text>performing, by the error detection processing unit, an error detection operation, the error detection operation including:
<claim-text>after receiving the final result from the division circuit, calculating a remainder from the quotient produced by the fixed-point division operation, the dividend and the divisor;</claim-text>
<claim-text>performing a first comparison of at least one of:</claim-text>
<claim-text>an absolute value of the divisor and an absolute value of the remainder, and</claim-text>
<claim-text>a magnitude of the divisor and a magnitude of the remainder;</claim-text>
<claim-text>performing a second comparison of the sign of the dividend and a sign of the remainder; and</claim-text>
<claim-text>determining whether the final result is correct based on the first comparison and the second comparison.</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002" num="00002">
<claim-text>2. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining comprises determining that the final result is correct if the sign of the dividend is the same as the sign of the remainder, and the absolute value of the remainder is less than the absolute value of the divisor.</claim-text>
</claim>
<claim id="CLM-00003" num="00003">
<claim-text>3. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining comprises determining that the final result is correct if the sign of the dividend is the same as the sign of the remainder, and the magnitude of the remainder is less than or equal to the magnitude of the divisor.</claim-text>
</claim>
<claim id="CLM-00004" num="00004">
<claim-text>4. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the divisor magnitude is a first number of significant bits in the divisor, and the remainder magnitude is a second number of significant bits in the remainder.</claim-text>
</claim>
<claim id="CLM-00005" num="00005">
<claim-text>5. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the divisor and the remainder are both in floating point format, the divisor magnitude is the exponent of the divisor, and the remainder magnitude is the exponent of the remainder.</claim-text>
</claim>
<claim id="CLM-00006" num="00006">
<claim-text>6. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the remainder is calculated based on the equation:
<claim-text>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Remainder=<i>A&#x2212;Qt*B, </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</claim-text>
<claim-text>wherein &#x201c;A&#x201d; is the dividend, &#x201c;B&#x201d; is the divisor, and &#x201c;Qt&#x201d; is the quotient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00007" num="00007">
<claim-text>7. A computer program product for detecting errors in a result of a fixed point division operation, the computer program product comprising:
<claim-text>a non-transitory computer-readable storage medium for storing instructions for executing a method of:</claim-text>
<claim-text>performing, by a division circuit, a fixed-point division operation for a dividend and a divisor to produce a final result, the final result including a quotient;</claim-text>
<claim-text>providing a sign of the dividend, the divisor and the result of the operation to an error detection processing unit;</claim-text>
<claim-text>performing, by the error detection processing unit, an error detection operation, the error detection operation including:</claim-text>
<claim-text>after receiving the final result from the division circuit, calculating a remainder from the quotient produced by the fixed-point division operation, the dividend and the divisor;</claim-text>
<claim-text>performing a first comparison of at least one of:</claim-text>
<claim-text>an absolute value of the divisor and an absolute value of the remainder, and</claim-text>
<claim-text>a magnitude of the divisor and a magnitude of the remainder;</claim-text>
<claim-text>performing a second comparison of the sign of the dividend and a sign of the remainder; and</claim-text>
<claim-text>determining whether the final result is correct based on the first comparison and the second comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008" num="00008">
<claim-text>8. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein determining comprises determining that the final result is correct if the sign of the dividend is the same as the sign of the remainder, and the absolute value of the remainder is less than the absolute value of the divisor.</claim-text>
</claim>
<claim id="CLM-00009" num="00009">
<claim-text>9. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the remainder is calculated based on the equation:
<claim-text>
<br/>
<?in-line-formulae description="In-line Formulae" end="lead"?>Remainder=<i>A&#x2212;Qt*B, </i><?in-line-formulae description="In-line Formulae" end="tail"?>
</claim-text>
<claim-text>wherein &#x201c;A&#x201d; is the dividend, &#x201c;B&#x201d; is the divisor, and &#x201c;Qt&#x201d; is the quotient.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00010" num="00010">
<claim-text>10. A system for detecting errors in a result of a fixed point division operation, the system comprising:
<claim-text>an instruction dispatching unit (IDU) for sending an instruction to perform a division operation for a dividend and a divisor; and</claim-text>
<claim-text>a division circuit in operable communication with the IDU, the division circuit configured to perform:</claim-text>
<claim-text>receiving the instruction from the IDU;</claim-text>
<claim-text>calculating a final result of a fixed point division operation for a dividend and a divisor, the final result including a quotient; and</claim-text>
<claim-text>an error detection processing unit in operable communication with the processor, the error detection processing unit configured to receive a sign of the dividend, the divisor and the result of the operation from the division circuit, the error detection processing unit configured to perform an error detection operation, the error detection operation including:
<claim-text>after receiving the final result from the division circuit, calculating a remainder from the quotient, the dividend and the divisor;</claim-text>
</claim-text>
<claim-text>performing a first comparison of at least one of:</claim-text>
<claim-text>an absolute value of the divisor and an absolute value of the remainder, and</claim-text>
<claim-text>a magnitude of the divisor and a magnitude of the remainder;</claim-text>
<claim-text>performing a second comparison of the sign of the dividend and a sign of the remainder; and</claim-text>
<claim-text>determining whether the final result is correct based on the first comparison and the second comparison.</claim-text>
</claim-text>
</claim>
<claim id="CLM-00011" num="00011">
<claim-text>11. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein determining comprises determining that the final result is correct if the sign of the dividend is the same as the sign of the remainder, and the absolute value of the remainder is less than the absolute value of the divisor.</claim-text>
</claim>
</claims>
</us-patent-grant>
